
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019414  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  080195e8  080195e8  0001a5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a80c  0801a80c  0001cf00  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a80c  0801a80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a814  0801a814  0001cf00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a814  0801a814  0001b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a81c  0801a81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000f00  20000000  0801a820  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dff4  20000f00  0801b720  0001cf00  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000eef4  0801b720  0001def4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001cf00  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed20  00000000  00000000  0001cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004461  00000000  00000000  0003bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  000400b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138d  00000000  00000000  000419f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007dc7  00000000  00000000  00042d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205cd  00000000  00000000  0004ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f970c  00000000  00000000  0006b119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  00164825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077a4  00000000  00000000  00164890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0016c034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000f00 	.word	0x20000f00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080195cc 	.word	0x080195cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000f04 	.word	0x20000f04
 800020c:	080195cc 	.word	0x080195cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9d3 	b.w	80006a8 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f007 fffe 	bl	80086b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f986 	bl	80009d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b58      	ldr	r3, [pc, #352]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8090 	bne.w	80007f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01e      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d015      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00b      	beq.n	800071a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000706:	f383 8811 	msr	BASEPRI, r3
 800070a:	f3bf 8f6f 	isb	sy
 800070e:	f3bf 8f4f 	dsb	sy
 8000712:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d06a      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
 8000720:	4b43      	ldr	r3, [pc, #268]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d865      	bhi.n	80007f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072a:	4b42      	ldr	r3, [pc, #264]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 800072c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800072e:	4b41      	ldr	r3, [pc, #260]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000734:	e004      	b.n	8000740 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d903      	bls.n	8000752 <pvPortMallocMicroROS+0xa6>
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f1      	bne.n	8000736 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000758:	429a      	cmp	r2, r3
 800075a:	d04c      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2208      	movs	r2, #8
 8000762:	4413      	add	r3, r2
 8000764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1ad2      	subs	r2, r2, r3
 8000776:	2308      	movs	r3, #8
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	429a      	cmp	r2, r3
 800077c:	d920      	bls.n	80007c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800077e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	613b      	str	r3, [r7, #16]
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ba:	69b8      	ldr	r0, [r7, #24]
 80007bc:	f000 f96c 	bl	8000a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4a19      	ldr	r2, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d203      	bcs.n	80007e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	431a      	orrs	r2, r3
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f6:	f007 ff6d 	bl	80086d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00b      	beq.n	800081c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800081c:	69fb      	ldr	r3, [r7, #28]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20004b24 	.word	0x20004b24
 800082c:	20004b30 	.word	0x20004b30
 8000830:	20004b28 	.word	0x20004b28
 8000834:	20004b1c 	.word	0x20004b1c
 8000838:	20004b2c 	.word	0x20004b2c

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04a      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10b      	bne.n	8000882 <vPortFreeMicroROS+0x46>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	f383 8811 	msr	BASEPRI, r3
 8000872:	f3bf 8f6f 	isb	sy
 8000876:	f3bf 8f4f 	dsb	sy
 800087a:	60fb      	str	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800088a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	60bb      	str	r3, [r7, #8]
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	e7fd      	b.n	800089e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d019      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d115      	bne.n	80008e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	401a      	ands	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008c8:	f007 fef6 	bl	80086b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a06      	ldr	r2, [pc, #24]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008da:	6938      	ldr	r0, [r7, #16]
 80008dc:	f000 f8dc 	bl	8000a98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e0:	f007 fef8 	bl	80086d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20004b30 	.word	0x20004b30
 80008f0:	20004b28 	.word	0x20004b28

080008f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000900:	2308      	movs	r3, #8
 8000902:	425b      	negs	r3, r3
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4413      	add	r3, r2
 8000908:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <getBlockSize+0x38>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	43db      	mvns	r3, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	return count;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20004b30 	.word	0x20004b30

08000930 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800093a:	f007 febd 	bl	80086b8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f7ff feb4 	bl	80006ac <pvPortMallocMicroROS>
 8000944:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d017      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d014      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffce 	bl	80008f4 <getBlockSize>
 8000958:	4603      	mov	r3, r0
 800095a:	2208      	movs	r2, #8
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d201      	bcs.n	800096c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68b8      	ldr	r0, [r7, #8]
 8000972:	f017 ffee 	bl	8018952 <memcpy>

		vPortFreeMicroROS(pv);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff60 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800097c:	f007 feaa 	bl	80086d4 <xTaskResumeAll>

	return newmem;
 8000980:	68bb      	ldr	r3, [r7, #8]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000994:	f007 fe90 	bl	80086b8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff fe82 	bl	80006ac <pvPortMallocMicroROS>
 80009a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009ae:	e004      	b.n	80009ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	613a      	str	r2, [r7, #16]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	617a      	str	r2, [r7, #20]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f5      	bne.n	80009b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009c4:	f007 fe86 	bl	80086d4 <xTaskResumeAll>
  	return mem;
 80009c8:	68fb      	ldr	r3, [r7, #12]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <prvHeapInit+0xac>)
 80009e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00c      	beq.n	8000a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3307      	adds	r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a1f      	ldr	r2, [pc, #124]	@ (8000a80 <prvHeapInit+0xac>)
 8000a04:	4413      	add	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a20:	2208      	movs	r2, #8
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	1ad2      	subs	r2, r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <prvHeapInit+0xb8>)
 8000a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <prvHeapInit+0xbc>)
 8000a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <prvHeapInit+0xc0>)
 8000a6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	20000f1c 	.word	0x20000f1c
 8000a84:	20004b1c 	.word	0x20004b1c
 8000a88:	20004b24 	.word	0x20004b24
 8000a8c:	20004b2c 	.word	0x20004b2c
 8000a90:	20004b28 	.word	0x20004b28
 8000a94:	20004b30 	.word	0x20004b30

08000a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <prvInsertBlockIntoFreeList+0xac>)
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	e002      	b.n	8000aac <prvInsertBlockIntoFreeList+0x14>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d8f7      	bhi.n	8000aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d108      	bne.n	8000ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d118      	bne.n	8000b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d00d      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e008      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e003      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d002      	beq.n	8000b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20004b1c 	.word	0x20004b1c
 8000b48:	20004b24 	.word	0x20004b24

08000b4c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b5a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b60:	4904      	ldr	r1, [pc, #16]	@ (8000b74 <cubemx_transport_open+0x28>)
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f005 fa84 	bl	8006070 <HAL_UART_Receive_DMA>
    return true;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20004b34 	.word	0x20004b34

08000b78 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b86:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f005 fa96 	bl	80060ba <HAL_UART_DMAStop>
    return true;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bac:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	d11c      	bne.n	8000bf4 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f005 f9d8 	bl	8005f78 <HAL_UART_Transmit_DMA>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bcc:	e002      	b.n	8000bd4 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f006 fd30 	bl	8007634 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <cubemx_transport_write+0x4e>
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b20      	cmp	r3, #32
 8000be4:	d1f3      	bne.n	8000bce <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000be6:	7cfb      	ldrb	r3, [r7, #19]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <cubemx_transport_write+0x58>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	e002      	b.n	8000bf6 <cubemx_transport_write+0x5e>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bf4:	2300      	movs	r3, #0
    }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c14:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1a:	b672      	cpsid	i
}
 8000c1c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c2c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c2e:	b662      	cpsie	i
}
 8000c30:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f006 fcfb 	bl	8007634 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d103      	bne.n	8000c52 <cubemx_transport_read+0x52>
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbe3      	blt.n	8000c1a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c56:	e011      	b.n	8000c7c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	440b      	add	r3, r1
 8000c62:	4910      	ldr	r1, [pc, #64]	@ (8000ca4 <cubemx_transport_read+0xa4>)
 8000c64:	5c8a      	ldrb	r2, [r1, r2]
 8000c66:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c74:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d003      	beq.n	8000c90 <cubemx_transport_read+0x90>
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3e3      	bcc.n	8000c58 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c90:	69bb      	ldr	r3, [r7, #24]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20005338 	.word	0x20005338
 8000ca0:	20005334 	.word	0x20005334
 8000ca4:	20004b34 	.word	0x20004b34

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f001 ff04 	bl	8002ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f828 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 fba0 	bl	80013f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f000 fb50 	bl	800135c <MX_DMA_Init>
  MX_TIM1_Init();
 8000cbc:	f000 f90c 	bl	8000ed8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cc0:	f000 f9f8 	bl	80010b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cc4:	f000 fa4a 	bl	800115c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cc8:	f000 fa9c 	bl	8001204 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000ccc:	f000 fb1c 	bl	8001308 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cd0:	f000 f95a 	bl	8000f88 <MX_TIM2_Init>
  MX_UART5_Init();
 8000cd4:	f000 faee 	bl	80012b4 <MX_UART5_Init>
  MX_ADC1_Init();
 8000cd8:	f000 f882 	bl	8000de0 <MX_ADC1_Init>
	init_car();
*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cdc:	f006 fbce 	bl	800747c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce0:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <main+0x50>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <main+0x54>)
 8000ce6:	f006 fc13 	bl	8007510 <osThreadNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <main+0x58>)
 8000cee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cf0:	f006 fbe8 	bl	80074c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <main+0x4c>
 8000cf8:	08019680 	.word	0x08019680
 8000cfc:	08001851 	.word	0x08001851
 8000d00:	2000575c 	.word	0x2000575c

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	@ 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2234      	movs	r2, #52	@ 0x34
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f017 fd42 	bl	801879c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <SystemClock_Config+0xd4>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	4a29      	ldr	r2, [pc, #164]	@ (8000dd8 <SystemClock_Config+0xd4>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d38:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <SystemClock_Config+0xd4>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <SystemClock_Config+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d50:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <SystemClock_Config+0xd8>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <SystemClock_Config+0xd8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d7c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fca4 	bl	80046e0 <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d9e:	f000 fec1 	bl	8001b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2302      	movs	r3, #2
 8000da8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 f912 	bl	8003fe8 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dca:	f000 feab 	bl	8001b24 <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3750      	adds	r7, #80	@ 0x50
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df2:	4b36      	ldr	r3, [pc, #216]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000df4:	4a36      	ldr	r2, [pc, #216]	@ (8000ed0 <MX_ADC1_Init+0xf0>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000df8:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000dfa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	4b32      	ldr	r3, [pc, #200]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e06:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e22:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed4 <MX_ADC1_Init+0xf4>)
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e26:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e32:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e40:	4822      	ldr	r0, [pc, #136]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e42:	f001 fe7b 	bl	8002b3c <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e4c:	f000 fe6a 	bl	8001b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481a      	ldr	r0, [pc, #104]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e62:	f001 ffdd 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e6c:	f000 fe5a 	bl	8001b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e70:	2305      	movs	r3, #5
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e7e:	f001 ffcf 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e88:	f000 fe4c 	bl	8001b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e90:	2303      	movs	r3, #3
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e9a:	f001 ffc1 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ea4:	f000 fe3e 	bl	8001b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ea8:	2309      	movs	r3, #9
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000eb6:	f001 ffb3 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ec0:	f000 fe30 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000533c 	.word	0x2000533c
 8000ed0:	40012000 	.word	0x40012000
 8000ed4:	0f000001 	.word	0x0f000001

08000ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2224      	movs	r2, #36	@ 0x24
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f017 fc58 	bl	801879c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000ef6:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <MX_TIM1_Init+0xac>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000f4c:	f004 f848 	bl	8004fe0 <HAL_TIM_Encoder_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f56:	f000 fde5 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_TIM1_Init+0xa8>)
 8000f68:	f004 ff26 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000f72:	f000 fdd7 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	@ 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200053e4 	.word	0x200053e4
 8000f84:	40010000 	.word	0x40010000

08000f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	@ 0x38
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8000fcc:	4b38      	ldr	r3, [pc, #224]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000fce:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000fd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fda:	4b35      	ldr	r3, [pc, #212]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000fdc:	2280      	movs	r2, #128	@ 0x80
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe0:	4833      	ldr	r0, [pc, #204]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000fe2:	f003 fe1b 	bl	8004c1c <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000fec:	f000 fd9a 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482c      	ldr	r0, [pc, #176]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8000ffe:	f004 fad5 	bl	80055ac <HAL_TIM_ConfigClockSource>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001008:	f000 fd8c 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800100c:	4828      	ldr	r0, [pc, #160]	@ (80010b0 <MX_TIM2_Init+0x128>)
 800100e:	f003 fec5 	bl	8004d9c <HAL_TIM_PWM_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001018:	f000 fd84 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4619      	mov	r1, r3
 800102a:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <MX_TIM2_Init+0x128>)
 800102c:	f004 fec4 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001036:	f000 fd75 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103a:	2360      	movs	r3, #96	@ 0x60
 800103c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8001052:	f004 f9e9 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800105c:	f000 fd62 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2204      	movs	r2, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8001068:	f004 f9de 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001072:	f000 fd57 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2208      	movs	r2, #8
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <MX_TIM2_Init+0x128>)
 800107e:	f004 f9d3 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001088:	f000 fd4c 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	220c      	movs	r2, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <MX_TIM2_Init+0x128>)
 8001094:	f004 f9c8 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800109e:	f000 fd41 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010a2:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <MX_TIM2_Init+0x128>)
 80010a4:	f001 f8ce 	bl	8002244 <HAL_TIM_MspPostInit>

}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	@ 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000542c 	.word	0x2000542c

080010b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	@ 0x30
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2224      	movs	r2, #36	@ 0x24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f017 fb6a 	bl	801879c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d0:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <MX_TIM3_Init+0xa0>)
 80010d2:	4a21      	ldr	r2, [pc, #132]	@ (8001158 <MX_TIM3_Init+0xa4>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_TIM3_Init+0xa0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <MX_TIM3_Init+0xa0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_TIM3_Init+0xa0>)
 80010e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_TIM3_Init+0xa0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_TIM3_Init+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010f6:	2303      	movs	r3, #3
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010fe:	2301      	movs	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800110e:	2301      	movs	r3, #1
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <MX_TIM3_Init+0xa0>)
 8001122:	f003 ff5d 	bl	8004fe0 <HAL_TIM_Encoder_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800112c:	f000 fcfa 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_TIM3_Init+0xa0>)
 800113e:	f004 fe3b 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001148:	f000 fcec 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	@ 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20005474 	.word	0x20005474
 8001158:	40000400 	.word	0x40000400

0800115c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2224      	movs	r2, #36	@ 0x24
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f017 fb16 	bl	801879c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800117a:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <MX_TIM4_Init+0xa4>)
 800117c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800118c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001190:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800119e:	2303      	movs	r3, #3
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <MX_TIM4_Init+0xa0>)
 80011ca:	f003 ff09 	bl	8004fe0 <HAL_TIM_Encoder_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011d4:	f000 fca6 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_TIM4_Init+0xa0>)
 80011e6:	f004 fde7 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011f0:	f000 fc98 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	@ 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200054bc 	.word	0x200054bc
 8001200:	40000800 	.word	0x40000800

08001204 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2224      	movs	r2, #36	@ 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f017 fac2 	bl	801879c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <MX_TIM8_Init+0xa8>)
 8001222:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <MX_TIM8_Init+0xac>)
 8001224:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_TIM8_Init+0xa8>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_TIM8_Init+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_TIM8_Init+0xa8>)
 8001234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001238:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_TIM8_Init+0xa8>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_TIM8_Init+0xa8>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_TIM8_Init+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124c:	2303      	movs	r3, #3
 800124e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_TIM8_Init+0xa8>)
 8001278:	f003 feb2 	bl	8004fe0 <HAL_TIM_Encoder_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001282:	f000 fc4f 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <MX_TIM8_Init+0xa8>)
 8001294:	f004 fd90 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800129e:	f000 fc41 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	@ 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20005504 	.word	0x20005504
 80012b0:	40010400 	.word	0x40010400

080012b4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <MX_UART5_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012c0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80012c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_UART5_Init+0x4c>)
 80012ec:	f004 fdf4 	bl	8005ed8 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80012f6:	f000 fc15 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000554c 	.word	0x2000554c
 8001304:	40005000 	.word	0x40005000

08001308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <MX_USART2_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001340:	f004 fdca 	bl	8005ed8 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f000 fbeb 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20005594 	.word	0x20005594
 8001358:	40004400 	.word	0x40004400

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <MX_DMA_Init+0x98>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <MX_DMA_Init+0x98>)
 800136c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <MX_DMA_Init+0x98>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_DMA_Init+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <MX_DMA_Init+0x98>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_DMA_Init+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2105      	movs	r1, #5
 800139e:	200b      	movs	r0, #11
 80013a0:	f002 f82e 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013a4:	200b      	movs	r0, #11
 80013a6:	f002 f847 	bl	8003438 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2105      	movs	r1, #5
 80013ae:	2010      	movs	r0, #16
 80013b0:	f002 f826 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013b4:	2010      	movs	r0, #16
 80013b6:	f002 f83f 	bl	8003438 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2105      	movs	r1, #5
 80013be:	2011      	movs	r0, #17
 80013c0:	f002 f81e 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013c4:	2011      	movs	r0, #17
 80013c6:	f002 f837 	bl	8003438 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2105      	movs	r1, #5
 80013ce:	202f      	movs	r0, #47	@ 0x2f
 80013d0:	f002 f816 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013d4:	202f      	movs	r0, #47	@ 0x2f
 80013d6:	f002 f82f 	bl	8003438 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2105      	movs	r1, #5
 80013de:	2038      	movs	r0, #56	@ 0x38
 80013e0:	f002 f80e 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013e4:	2038      	movs	r0, #56	@ 0x38
 80013e6:	f002 f827 	bl	8003438 <HAL_NVIC_EnableIRQ>

}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b3f      	ldr	r3, [pc, #252]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a3e      	ldr	r2, [pc, #248]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a37      	ldr	r2, [pc, #220]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <MX_GPIO_Init+0x118>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <MX_GPIO_Init+0x118>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a30      	ldr	r2, [pc, #192]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a29      	ldr	r2, [pc, #164]	@ (8001510 <MX_GPIO_Init+0x118>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <MX_GPIO_Init+0x118>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 800147e:	2200      	movs	r2, #0
 8001480:	f640 413f 	movw	r1, #3135	@ 0xc3f
 8001484:	4823      	ldr	r0, [pc, #140]	@ (8001514 <MX_GPIO_Init+0x11c>)
 8001486:	f002 fd7b 	bl	8003f80 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RR_INA_GPO_Pin|FR_INB_GPO_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001490:	4821      	ldr	r0, [pc, #132]	@ (8001518 <MX_GPIO_Init+0x120>)
 8001492:	f002 fd75 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800149c:	481d      	ldr	r0, [pc, #116]	@ (8001514 <MX_GPIO_Init+0x11c>)
 800149e:	f002 fd6f 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014a8:	481c      	ldr	r0, [pc, #112]	@ (800151c <MX_GPIO_Init+0x124>)
 80014aa:	f002 fd69 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FL_INA_GPO_Pin FL_INB_GPO_Pin RL_INB_GPO_Pin RL_INA_GPO_Pin
                           RR_INB_GPO_Pin Ultrasonic_DE_RE_Pin RR_VDD_GPO_Pin FR_VDD_GPO_Pin
                           RL_VDD_GPO_Pin FL_VDD_GPO_Pin */
  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 80014ae:	f640 733f 	movw	r3, #3903	@ 0xf3f
 80014b2:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin
                          |RL_VDD_GPO_Pin|FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4813      	ldr	r0, [pc, #76]	@ (8001514 <MX_GPIO_Init+0x11c>)
 80014c8:	f002 fbc6 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_INA_GPO_Pin FR_INB_GPO_Pin */
  GPIO_InitStruct.Pin = RR_INA_GPO_Pin|FR_INB_GPO_Pin;
 80014cc:	f242 0320 	movw	r3, #8224	@ 0x2020
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <MX_GPIO_Init+0x120>)
 80014e6:	f002 fbb7 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : FR_INA_GPO_Pin */
  GPIO_InitStruct.Pin = FR_INA_GPO_Pin;
 80014ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_INA_GPO_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_GPIO_Init+0x124>)
 8001504:	f002 fba8 	bl	8003c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800
 8001518:	40020400 	.word	0x40020400
 800151c:	40020000 	.word	0x40020000

08001520 <clamp500>:

/* USER CODE BEGIN 4 */
// ----------------- Old Part -----------------

static inline int32_t clamp500(int32_t x){ return x<-500?-500:(x>500?500:x); }
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800152e:	db06      	blt.n	800153e <clamp500+0x1e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001536:	bfa8      	it	ge
 8001538:	f44f 73fa 	movge.w	r3, #500	@ 0x1f4
 800153c:	e000      	b.n	8001540 <clamp500+0x20>
 800153e:	4b03      	ldr	r3, [pc, #12]	@ (800154c <clamp500+0x2c>)
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	fffffe0c 	.word	0xfffffe0c

08001550 <init_multiarray_4>:

/* Fixed-size 4-element Int32MultiArray bound to external storage */
static void init_multiarray_4(std_msgs__msg__Int32MultiArray* m, int32_t* backing)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  std_msgs__msg__Int32MultiArray__init(m);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f00a fbba 	bl	800bcd4 <std_msgs__msg__Int32MultiArray__init>
  m->layout.dim.data = NULL; m->layout.dim.size = 0; m->layout.dim.capacity = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  m->layout.data_offset = 0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  m->data.data = backing; m->data.size = 4; m->data.capacity = 4;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2204      	movs	r2, #4
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <motor_enable>:
  .htim_enc = &htim1,
  .last_raw = 0, .accum = 0
};

static void motor_enable(motor_t* m)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* power/enable pin */
  HAL_GPIO_WritePin(m->port_vdd, m->pin_vdd, GPIO_PIN_SET);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6998      	ldr	r0, [r3, #24]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	8b9b      	ldrh	r3, [r3, #28]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	f002 fceb 	bl	8003f80 <HAL_GPIO_WritePin>

  /* start PWM channel and set 0% duty */
  HAL_TIM_PWM_Start(m->htim_pwm, m->ch_pwm);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f003 fc4b 	bl	8004e50 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d105      	bne.n	80015ce <motor_enable+0x3c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015cc:	e018      	b.n	8001600 <motor_enable+0x6e>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d105      	bne.n	80015e2 <motor_enable+0x50>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015e0:	e00e      	b.n	8001600 <motor_enable+0x6e>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d105      	bne.n	80015f6 <motor_enable+0x64>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80015f4:	e004      	b.n	8001600 <motor_enable+0x6e>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <motor_set_speed>:

static void motor_set_speed(motor_t* m, int32_t v/*-500..500*/)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  v = clamp500(v);
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f7ff ff84 	bl	8001520 <clamp500>
 8001618:	6038      	str	r0, [r7, #0]
  /* set direction */
  if (v >= 0) {
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db10      	blt.n	8001642 <motor_set_speed+0x3a>
    HAL_GPIO_WritePin(m->port_ina, m->pin_ina, GPIO_PIN_SET);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6898      	ldr	r0, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	899b      	ldrh	r3, [r3, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	f002 fca8 	bl	8003f80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->port_inb, m->pin_inb, GPIO_PIN_RESET);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6918      	ldr	r0, [r3, #16]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	8a9b      	ldrh	r3, [r3, #20]
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	f002 fca0 	bl	8003f80 <HAL_GPIO_WritePin>
 8001640:	e012      	b.n	8001668 <motor_set_speed+0x60>
  } else {
    HAL_GPIO_WritePin(m->port_ina, m->pin_ina, GPIO_PIN_RESET);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6898      	ldr	r0, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	899b      	ldrh	r3, [r3, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	4619      	mov	r1, r3
 800164e:	f002 fc97 	bl	8003f80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->port_inb, m->pin_inb, GPIO_PIN_SET);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6918      	ldr	r0, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8a9b      	ldrh	r3, [r3, #20]
 800165a:	2201      	movs	r2, #1
 800165c:	4619      	mov	r1, r3
 800165e:	f002 fc8f 	bl	8003f80 <HAL_GPIO_WritePin>
    v = -v;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	425b      	negs	r3, r3
 8001666:	603b      	str	r3, [r7, #0]
  }
  /* scale to ARR (TIM2 configured ARR=4199 -> 20 kHz PWM) */
  uint32_t arr  = __HAL_TIM_GET_AUTORELOAD(m->htim_pwm);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	60bb      	str	r3, [r7, #8]
  uint32_t duty = (uint32_t)((v * (int32_t)arr) / 500);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	4a1a      	ldr	r2, [pc, #104]	@ (80016e4 <motor_set_speed+0xdc>)
 800167c:	fb82 1203 	smull	r1, r2, r2, r3
 8001680:	1152      	asrs	r2, r2, #5
 8001682:	17db      	asrs	r3, r3, #31
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	60fb      	str	r3, [r7, #12]
  if (duty > arr) duty = arr;
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	d901      	bls.n	8001694 <motor_set_speed+0x8c>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <motor_set_speed+0xa0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80016a6:	e018      	b.n	80016da <motor_set_speed+0xd2>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d105      	bne.n	80016bc <motor_set_speed+0xb4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80016ba:	e00e      	b.n	80016da <motor_set_speed+0xd2>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d105      	bne.n	80016d0 <motor_set_speed+0xc8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80016ce:	e004      	b.n	80016da <motor_set_speed+0xd2>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <encoder_start>:

static void encoder_start(motor_t* m)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(m->htim_enc, 0);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Encoder_Start(m->htim_enc, TIM_CHANNEL_ALL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	213c      	movs	r1, #60	@ 0x3c
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fd13 	bl	800512c <HAL_TIM_Encoder_Start>
  m->last_raw = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	849a      	strh	r2, [r3, #36]	@ 0x24
  m->accum    = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <encoder_sample_accum>:

/* Read encoder with wrap-safe accumulation to 32-bit */
static int32_t encoder_sample_accum(motor_t* m)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  uint16_t raw = __HAL_TIM_GET_COUNTER(m->htim_enc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	81fb      	strh	r3, [r7, #14]
  int16_t delta = (int16_t)((int32_t)raw - (int32_t)(uint16_t)m->last_raw);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001732:	b29b      	uxth	r3, r3
 8001734:	89fa      	ldrh	r2, [r7, #14]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	81bb      	strh	r3, [r7, #12]
  m->last_raw = (int16_t)raw;
 800173c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	849a      	strh	r2, [r3, #36]	@ 0x24
  m->accum += delta;              /* delta can be negative; handles wrap */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800174c:	441a      	add	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	@ 0x28
  return m->accum;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <wheel_cmd_cb>:

static void wheel_cmd_cb(const void * msgin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32MultiArray* in = (const std_msgs__msg__Int32MultiArray*)msgin;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	613b      	str	r3, [r7, #16]
  int n = (in->data.size >= 4) ? 4 : (int)in->data.size;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d802      	bhi.n	800177e <wheel_cmd_cb+0x1a>
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	e000      	b.n	8001780 <wheel_cmd_cb+0x1c>
 800177e:	2304      	movs	r3, #4
 8001780:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < 4; ++i) {
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e01d      	b.n	80017c4 <wheel_cmd_cb+0x60>
    int32_t v = (i < n) ? in->data.data[i] : 0;
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	da06      	bge.n	800179e <wheel_cmd_cb+0x3a>
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e000      	b.n	80017a0 <wheel_cmd_cb+0x3c>
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
    v = clamp500(v);
 80017a2:	68b8      	ldr	r0, [r7, #8]
 80017a4:	f7ff febc 	bl	8001520 <clamp500>
 80017a8:	60b8      	str	r0, [r7, #8]
    last_cmd[i] = v;
 80017aa:	490d      	ldr	r1, [pc, #52]	@ (80017e0 <wheel_cmd_cb+0x7c>)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    cmd_data[i] = v;              /* for /wheel_status/cmd_echo */
 80017b4:	490b      	ldr	r1, [pc, #44]	@ (80017e4 <wheel_cmd_cb+0x80>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 4; ++i) {
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	ddde      	ble.n	8001788 <wheel_cmd_cb+0x24>
  }

  /* drive only the first motor for now */
  motor_set_speed(&M_FL, last_cmd[0]);
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <wheel_cmd_cb+0x7c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <wheel_cmd_cb+0x84>)
 80017d2:	f7ff ff19 	bl	8001608 <motor_set_speed>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20005884 	.word	0x20005884
 80017e4:	20005854 	.word	0x20005854
 80017e8:	20000000 	.word	0x20000000

080017ec <timer_cb>:

/* Timer @100 Hz: publish echo + encoder accum */
static void timer_cb(rcl_timer_t * t, int64_t last_call_time)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	e9c7 2300 	strd	r2, r3, [r7]
  (void)t; (void)last_call_time;

  /* encoder position (ticks since boot) for FL at index 0 */
  enc_data[0] = encoder_sample_accum(&M_FL);
 80017f8:	480e      	ldr	r0, [pc, #56]	@ (8001834 <timer_cb+0x48>)
 80017fa:	f7ff ff8e 	bl	800171a <encoder_sample_accum>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <timer_cb+0x4c>)
 8001802:	6013      	str	r3, [r2, #0]
  enc_data[1] = 0; enc_data[2] = 0; enc_data[3] = 0;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <timer_cb+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <timer_cb+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <timer_cb+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]

  (void)rcl_publish(&pub_cmd_echo, &msg_cmd_echo, NULL);
 8001816:	2200      	movs	r2, #0
 8001818:	4908      	ldr	r1, [pc, #32]	@ (800183c <timer_cb+0x50>)
 800181a:	4809      	ldr	r0, [pc, #36]	@ (8001840 <timer_cb+0x54>)
 800181c:	f008 fc9a 	bl	800a154 <rcl_publish>
  (void)rcl_publish(&pub_encoders, &msg_enc, NULL);
 8001820:	2200      	movs	r2, #0
 8001822:	4908      	ldr	r1, [pc, #32]	@ (8001844 <timer_cb+0x58>)
 8001824:	4808      	ldr	r0, [pc, #32]	@ (8001848 <timer_cb+0x5c>)
 8001826:	f008 fc95 	bl	800a154 <rcl_publish>
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000000 	.word	0x20000000
 8001838:	20005864 	.word	0x20005864
 800183c:	20005800 	.word	0x20005800
 8001840:	20005760 	.word	0x20005760
 8001844:	2000581c 	.word	0x2000581c
 8001848:	20005764 	.word	0x20005764
 800184c:	00000000 	.word	0x00000000

08001850 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0a8      	sub	sp, #160	@ 0xa0
 8001854:	af02      	add	r7, sp, #8
 8001856:	6078      	str	r0, [r7, #4]
	// start PWM on CH1 (do this once)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  */
 
	/* -------- transport -------- */
	  rmw_uros_set_custom_transport(
 8001858:	4b8b      	ldr	r3, [pc, #556]	@ (8001a88 <StartDefaultTask+0x238>)
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a8c <StartDefaultTask+0x23c>)
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	4b8b      	ldr	r3, [pc, #556]	@ (8001a90 <StartDefaultTask+0x240>)
 8001862:	4a8c      	ldr	r2, [pc, #560]	@ (8001a94 <StartDefaultTask+0x244>)
 8001864:	498c      	ldr	r1, [pc, #560]	@ (8001a98 <StartDefaultTask+0x248>)
 8001866:	2001      	movs	r0, #1
 8001868:	f009 fc9e 	bl	800b1a8 <rmw_uros_set_custom_transport>
	      true, (void *)&huart2,
	      cubemx_transport_open, cubemx_transport_close,
	      cubemx_transport_write, cubemx_transport_read);

	  /* -------- allocators -------- */
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800186c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001870:	4618      	mov	r0, r3
 8001872:	f009 fbbf 	bl	800aff4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 8001876:	4b89      	ldr	r3, [pc, #548]	@ (8001a9c <StartDefaultTask+0x24c>)
 8001878:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 800187a:	4b89      	ldr	r3, [pc, #548]	@ (8001aa0 <StartDefaultTask+0x250>)
 800187c:	663b      	str	r3, [r7, #96]	@ 0x60
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 800187e:	4b89      	ldr	r3, [pc, #548]	@ (8001aa4 <StartDefaultTask+0x254>)
 8001880:	667b      	str	r3, [r7, #100]	@ 0x64
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001882:	4b89      	ldr	r3, [pc, #548]	@ (8001aa8 <StartDefaultTask+0x258>)
 8001884:	66bb      	str	r3, [r7, #104]	@ 0x68
	  (void)rcutils_set_default_allocator(&freeRTOS_allocator);
 8001886:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800188a:	4618      	mov	r0, r3
 800188c:	f009 fbce 	bl	800b02c <rcutils_set_default_allocator>

	  /* -------- wait for agent (~5 s) -------- */
	  for (int i = 0; i < 50; ++i) {
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001896:	e00e      	b.n	80018b6 <StartDefaultTask+0x66>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001898:	2101      	movs	r1, #1
 800189a:	2064      	movs	r0, #100	@ 0x64
 800189c:	f009 fc9a 	bl	800b1d4 <rmw_uros_ping_agent>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <StartDefaultTask+0x70>
	    osDelay(100);
 80018a6:	2064      	movs	r0, #100	@ 0x64
 80018a8:	f005 fec4 	bl	8007634 <osDelay>
	  for (int i = 0; i < 50; ++i) {
 80018ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018b0:	3301      	adds	r3, #1
 80018b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018ba:	2b31      	cmp	r3, #49	@ 0x31
 80018bc:	ddec      	ble.n	8001898 <StartDefaultTask+0x48>
 80018be:	e000      	b.n	80018c2 <StartDefaultTask+0x72>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 80018c0:	bf00      	nop
	  }

	  /* -------- start peripherals for FL motor -------- */
	  motor_enable(&M_FL);      /* PWM + enable pin */
 80018c2:	487a      	ldr	r0, [pc, #488]	@ (8001aac <StartDefaultTask+0x25c>)
 80018c4:	f7ff fe65 	bl	8001592 <motor_enable>
	  encoder_start(&M_FL);     /* TIM1 encoder */
 80018c8:	4878      	ldr	r0, [pc, #480]	@ (8001aac <StartDefaultTask+0x25c>)
 80018ca:	f7ff ff0d 	bl	80016e8 <encoder_start>

	  /* -------- micro-ROS graph -------- */
	  rclc_support_t support;
	  rcl_allocator_t allocator = rcl_get_default_allocator();
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4618      	mov	r0, r3
 80018d4:	f009 fb9c 	bl	800b010 <rcutils_get_default_allocator>
	  CHECK(rclc_support_init(&support, 0, NULL, &allocator));
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	f009 fa5e 	bl	800ada4 <rclc_support_init>
 80018e8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80018ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <StartDefaultTask+0xb4>
 80018f4:	2120      	movs	r1, #32
 80018f6:	486e      	ldr	r0, [pc, #440]	@ (8001ab0 <StartDefaultTask+0x260>)
 80018f8:	f002 fb5b 	bl	8003fb2 <HAL_GPIO_TogglePin>
 80018fc:	20c8      	movs	r0, #200	@ 0xc8
 80018fe:	f005 fe99 	bl	8007634 <osDelay>
 8001902:	e7f7      	b.n	80018f4 <StartDefaultTask+0xa4>

	  rcl_node_t node;
	  CHECK(rclc_node_init_default(&node, "nucleo_f446re", "", &support));
 8001904:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001908:	f107 000c 	add.w	r0, r7, #12
 800190c:	4a69      	ldr	r2, [pc, #420]	@ (8001ab4 <StartDefaultTask+0x264>)
 800190e:	496a      	ldr	r1, [pc, #424]	@ (8001ab8 <StartDefaultTask+0x268>)
 8001910:	f009 fa92 	bl	800ae38 <rclc_node_init_default>
 8001914:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <StartDefaultTask+0xe0>
 8001920:	2120      	movs	r1, #32
 8001922:	4863      	ldr	r0, [pc, #396]	@ (8001ab0 <StartDefaultTask+0x260>)
 8001924:	f002 fb45 	bl	8003fb2 <HAL_GPIO_TogglePin>
 8001928:	20c8      	movs	r0, #200	@ 0xc8
 800192a:	f005 fe83 	bl	8007634 <osDelay>
 800192e:	e7f7      	b.n	8001920 <StartDefaultTask+0xd0>

	  init_multiarray_4(&msg_cmd_echo, cmd_data);
 8001930:	4962      	ldr	r1, [pc, #392]	@ (8001abc <StartDefaultTask+0x26c>)
 8001932:	4863      	ldr	r0, [pc, #396]	@ (8001ac0 <StartDefaultTask+0x270>)
 8001934:	f7ff fe0c 	bl	8001550 <init_multiarray_4>
	  init_multiarray_4(&msg_enc,      enc_data);
 8001938:	4962      	ldr	r1, [pc, #392]	@ (8001ac4 <StartDefaultTask+0x274>)
 800193a:	4863      	ldr	r0, [pc, #396]	@ (8001ac8 <StartDefaultTask+0x278>)
 800193c:	f7ff fe08 	bl	8001550 <init_multiarray_4>
	  init_multiarray_4(&msg_cmd_rx,   rx_data);
 8001940:	4962      	ldr	r1, [pc, #392]	@ (8001acc <StartDefaultTask+0x27c>)
 8001942:	4863      	ldr	r0, [pc, #396]	@ (8001ad0 <StartDefaultTask+0x280>)
 8001944:	f7ff fe04 	bl	8001550 <init_multiarray_4>

	  CHECK(rclc_publisher_init_default(
 8001948:	f00a fa04 	bl	800bd54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 800194c:	4602      	mov	r2, r0
 800194e:	f107 010c 	add.w	r1, r7, #12
 8001952:	4b60      	ldr	r3, [pc, #384]	@ (8001ad4 <StartDefaultTask+0x284>)
 8001954:	4860      	ldr	r0, [pc, #384]	@ (8001ad8 <StartDefaultTask+0x288>)
 8001956:	f009 faab 	bl	800aeb0 <rclc_publisher_init_default>
 800195a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 800195e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <StartDefaultTask+0x126>
 8001966:	2120      	movs	r1, #32
 8001968:	4851      	ldr	r0, [pc, #324]	@ (8001ab0 <StartDefaultTask+0x260>)
 800196a:	f002 fb22 	bl	8003fb2 <HAL_GPIO_TogglePin>
 800196e:	20c8      	movs	r0, #200	@ 0xc8
 8001970:	f005 fe60 	bl	8007634 <osDelay>
 8001974:	e7f7      	b.n	8001966 <StartDefaultTask+0x116>
	      &pub_cmd_echo, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/cmd_echo"));

	  CHECK(rclc_publisher_init_default(
 8001976:	f00a f9ed 	bl	800bd54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 800197a:	4602      	mov	r2, r0
 800197c:	f107 010c 	add.w	r1, r7, #12
 8001980:	4b56      	ldr	r3, [pc, #344]	@ (8001adc <StartDefaultTask+0x28c>)
 8001982:	4857      	ldr	r0, [pc, #348]	@ (8001ae0 <StartDefaultTask+0x290>)
 8001984:	f009 fa94 	bl	800aeb0 <rclc_publisher_init_default>
 8001988:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800198c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <StartDefaultTask+0x154>
 8001994:	2120      	movs	r1, #32
 8001996:	4846      	ldr	r0, [pc, #280]	@ (8001ab0 <StartDefaultTask+0x260>)
 8001998:	f002 fb0b 	bl	8003fb2 <HAL_GPIO_TogglePin>
 800199c:	20c8      	movs	r0, #200	@ 0xc8
 800199e:	f005 fe49 	bl	8007634 <osDelay>
 80019a2:	e7f7      	b.n	8001994 <StartDefaultTask+0x144>
	      &pub_encoders, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/encoders"));

	  CHECK(rclc_subscription_init_default(
 80019a4:	f00a f9d6 	bl	800bd54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f107 010c 	add.w	r1, r7, #12
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <StartDefaultTask+0x294>)
 80019b0:	484d      	ldr	r0, [pc, #308]	@ (8001ae8 <StartDefaultTask+0x298>)
 80019b2:	f009 fab1 	bl	800af18 <rclc_subscription_init_default>
 80019b6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80019ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <StartDefaultTask+0x182>
 80019c2:	2120      	movs	r1, #32
 80019c4:	483a      	ldr	r0, [pc, #232]	@ (8001ab0 <StartDefaultTask+0x260>)
 80019c6:	f002 faf4 	bl	8003fb2 <HAL_GPIO_TogglePin>
 80019ca:	20c8      	movs	r0, #200	@ 0xc8
 80019cc:	f005 fe32 	bl	8007634 <osDelay>
 80019d0:	e7f7      	b.n	80019c2 <StartDefaultTask+0x172>
	      &sub_cmd, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_cmd"));

	  /* 100 Hz timer (new API with autostart) */
	  CHECK(rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(10), timer_cb, true));
 80019d2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80019d6:	2301      	movs	r3, #1
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	4b44      	ldr	r3, [pc, #272]	@ (8001aec <StartDefaultTask+0x29c>)
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	4a44      	ldr	r2, [pc, #272]	@ (8001af0 <StartDefaultTask+0x2a0>)
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	4843      	ldr	r0, [pc, #268]	@ (8001af4 <StartDefaultTask+0x2a4>)
 80019e6:	f009 facb 	bl	800af80 <rclc_timer_init_default2>
 80019ea:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80019ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <StartDefaultTask+0x1b2>
 80019f2:	2120      	movs	r1, #32
 80019f4:	482e      	ldr	r0, [pc, #184]	@ (8001ab0 <StartDefaultTask+0x260>)
 80019f6:	f002 fadc 	bl	8003fb2 <HAL_GPIO_TogglePin>
 80019fa:	20c8      	movs	r0, #200	@ 0xc8
 80019fc:	f005 fe1a 	bl	8007634 <osDelay>
 8001a00:	e7f7      	b.n	80019f2 <StartDefaultTask+0x1a2>

	  CHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	483a      	ldr	r0, [pc, #232]	@ (8001af8 <StartDefaultTask+0x2a8>)
 8001a0e:	f008 ff4f 	bl	800a8b0 <rclc_executor_init>
 8001a12:	67b8      	str	r0, [r7, #120]	@ 0x78
 8001a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <StartDefaultTask+0x1da>
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	4824      	ldr	r0, [pc, #144]	@ (8001ab0 <StartDefaultTask+0x260>)
 8001a1e:	f002 fac8 	bl	8003fb2 <HAL_GPIO_TogglePin>
 8001a22:	20c8      	movs	r0, #200	@ 0xc8
 8001a24:	f005 fe06 	bl	8007634 <osDelay>
 8001a28:	e7f7      	b.n	8001a1a <StartDefaultTask+0x1ca>
	  CHECK(rclc_executor_add_subscription(&executor, &sub_cmd, &msg_cmd_rx, &wheel_cmd_cb, ON_NEW_DATA));
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4b33      	ldr	r3, [pc, #204]	@ (8001afc <StartDefaultTask+0x2ac>)
 8001a30:	4a27      	ldr	r2, [pc, #156]	@ (8001ad0 <StartDefaultTask+0x280>)
 8001a32:	492d      	ldr	r1, [pc, #180]	@ (8001ae8 <StartDefaultTask+0x298>)
 8001a34:	4830      	ldr	r0, [pc, #192]	@ (8001af8 <StartDefaultTask+0x2a8>)
 8001a36:	f008 ffa7 	bl	800a988 <rclc_executor_add_subscription>
 8001a3a:	6778      	str	r0, [r7, #116]	@ 0x74
 8001a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <StartDefaultTask+0x202>
 8001a42:	2120      	movs	r1, #32
 8001a44:	481a      	ldr	r0, [pc, #104]	@ (8001ab0 <StartDefaultTask+0x260>)
 8001a46:	f002 fab4 	bl	8003fb2 <HAL_GPIO_TogglePin>
 8001a4a:	20c8      	movs	r0, #200	@ 0xc8
 8001a4c:	f005 fdf2 	bl	8007634 <osDelay>
 8001a50:	e7f7      	b.n	8001a42 <StartDefaultTask+0x1f2>
	  CHECK(rclc_executor_add_timer(&executor, &timer));
 8001a52:	4928      	ldr	r1, [pc, #160]	@ (8001af4 <StartDefaultTask+0x2a4>)
 8001a54:	4828      	ldr	r0, [pc, #160]	@ (8001af8 <StartDefaultTask+0x2a8>)
 8001a56:	f008 ffcb 	bl	800a9f0 <rclc_executor_add_timer>
 8001a5a:	6738      	str	r0, [r7, #112]	@ 0x70
 8001a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <StartDefaultTask+0x222>
 8001a62:	2120      	movs	r1, #32
 8001a64:	4812      	ldr	r0, [pc, #72]	@ (8001ab0 <StartDefaultTask+0x260>)
 8001a66:	f002 faa4 	bl	8003fb2 <HAL_GPIO_TogglePin>
 8001a6a:	20c8      	movs	r0, #200	@ 0xc8
 8001a6c:	f005 fde2 	bl	8007634 <osDelay>
 8001a70:	e7f7      	b.n	8001a62 <StartDefaultTask+0x212>

	  for (;;) {
	    (void)rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));
 8001a72:	a303      	add	r3, pc, #12	@ (adr r3, 8001a80 <StartDefaultTask+0x230>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	481f      	ldr	r0, [pc, #124]	@ (8001af8 <StartDefaultTask+0x2a8>)
 8001a7a:	f009 f82d 	bl	800aad8 <rclc_executor_spin_some>
 8001a7e:	e7f8      	b.n	8001a72 <StartDefaultTask+0x222>
 8001a80:	004c4b40 	.word	0x004c4b40
 8001a84:	00000000 	.word	0x00000000
 8001a88:	08000c01 	.word	0x08000c01
 8001a8c:	08000b99 	.word	0x08000b99
 8001a90:	08000b79 	.word	0x08000b79
 8001a94:	08000b4d 	.word	0x08000b4d
 8001a98:	20005594 	.word	0x20005594
 8001a9c:	08001b31 	.word	0x08001b31
 8001aa0:	08001b75 	.word	0x08001b75
 8001aa4:	08001bad 	.word	0x08001bad
 8001aa8:	08001c19 	.word	0x08001c19
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	080195f4 	.word	0x080195f4
 8001ab8:	080195f8 	.word	0x080195f8
 8001abc:	20005854 	.word	0x20005854
 8001ac0:	20005800 	.word	0x20005800
 8001ac4:	20005864 	.word	0x20005864
 8001ac8:	2000581c 	.word	0x2000581c
 8001acc:	20005874 	.word	0x20005874
 8001ad0:	20005838 	.word	0x20005838
 8001ad4:	08019608 	.word	0x08019608
 8001ad8:	20005760 	.word	0x20005760
 8001adc:	08019620 	.word	0x08019620
 8001ae0:	20005764 	.word	0x20005764
 8001ae4:	08019638 	.word	0x08019638
 8001ae8:	20005768 	.word	0x20005768
 8001aec:	080017ed 	.word	0x080017ed
 8001af0:	00989680 	.word	0x00989680
 8001af4:	2000576c 	.word	0x2000576c
 8001af8:	20005770 	.word	0x20005770
 8001afc:	08001765 	.word	0x08001765

08001b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
		  pastcurrCount[i] = currCount[i];
	  }
	}
	*/
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b12:	f000 fff3 	bl	8002afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40001400 	.word	0x40001400

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <Error_Handler+0x8>

08001b30 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <microros_allocate+0x3c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <microros_allocate+0x3c>)
 8001b48:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <microros_allocate+0x40>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <microros_allocate+0x40>)
 8001b58:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fda6 	bl	80006ac <pvPortMallocMicroROS>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20005894 	.word	0x20005894
 8001b70:	20005898 	.word	0x20005898

08001b74 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe feb5 	bl	80008f4 <getBlockSize>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <microros_deallocate+0x34>)
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <microros_deallocate+0x34>)
 8001b96:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fe4f 	bl	800083c <vPortFreeMicroROS>
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20005898 	.word	0x20005898

08001bac <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <microros_reallocate+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <microros_reallocate+0x64>)
 8001bc6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <microros_reallocate+0x68>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <microros_reallocate+0x68>)
 8001bd6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d104      	bne.n	8001be8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001bde:	68b8      	ldr	r0, [r7, #8]
 8001be0:	f7fe fd64 	bl	80006ac <pvPortMallocMicroROS>
 8001be4:	4603      	mov	r3, r0
 8001be6:	e00e      	b.n	8001c06 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7fe fe83 	bl	80008f4 <getBlockSize>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <microros_reallocate+0x68>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <microros_reallocate+0x68>)
 8001bfa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7fe fe96 	bl	8000930 <pvPortReallocMicroROS>
 8001c04:	4603      	mov	r3, r0
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20005894 	.word	0x20005894
 8001c14:	20005898 	.word	0x20005898

08001c18 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c60 <microros_zero_allocate+0x48>)
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <microros_zero_allocate+0x48>)
 8001c36:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <microros_zero_allocate+0x4c>)
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <microros_zero_allocate+0x4c>)
 8001c4a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7fe fe9b 	bl	800098a <pvPortCallocMicroROS>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20005894 	.word	0x20005894
 8001c64:	20005898 	.word	0x20005898

08001c68 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001c7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c7e:	a320      	add	r3, pc, #128	@ (adr r3, 8001d00 <UTILS_NanosecondsToTimespec+0x98>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe fb2c 	bl	80002e0 <__aeabi_ldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001c92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c96:	a31a      	add	r3, pc, #104	@ (adr r3, 8001d00 <UTILS_NanosecondsToTimespec+0x98>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fb20 	bl	80002e0 <__aeabi_ldivmod>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da20      	bge.n	8001cee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <UTILS_NanosecondsToTimespec+0x90>)
 8001cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb6:	1712      	asrs	r2, r2, #28
 8001cb8:	17db      	asrs	r3, r3, #31
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	17c8      	asrs	r0, r1, #31
 8001cca:	460c      	mov	r4, r1
 8001ccc:	4605      	mov	r5, r0
 8001cce:	ebb2 0804 	subs.w	r8, r2, r4
 8001cd2:	eb63 0905 	sbc.w	r9, r3, r5
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4906      	ldr	r1, [pc, #24]	@ (8001cfc <UTILS_NanosecondsToTimespec+0x94>)
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
    }
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cf8:	44b82fa1 	.word	0x44b82fa1
 8001cfc:	3b9aca00 	.word	0x3b9aca00
 8001d00:	3b9aca00 	.word	0x3b9aca00
 8001d04:	00000000 	.word	0x00000000

08001d08 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d0c:	b08e      	sub	sp, #56	@ 0x38
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d12:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001d14:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001d2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f006 ff4c 	bl	8008bcc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d36:	17da      	asrs	r2, r3, #31
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	61fa      	str	r2, [r7, #28]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	69b9      	ldr	r1, [r7, #24]
 8001d46:	000b      	movs	r3, r1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d50:	2200      	movs	r2, #0
 8001d52:	461c      	mov	r4, r3
 8001d54:	4615      	mov	r5, r2
 8001d56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d5a:	1911      	adds	r1, r2, r4
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	416b      	adcs	r3, r5
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d66:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001d6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	f04f 0400 	mov.w	r4, #0
 8001d76:	f04f 0500 	mov.w	r5, #0
 8001d7a:	015d      	lsls	r5, r3, #5
 8001d7c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001d80:	0154      	lsls	r4, r2, #5
 8001d82:	4622      	mov	r2, r4
 8001d84:	462b      	mov	r3, r5
 8001d86:	ebb2 0800 	subs.w	r8, r2, r0
 8001d8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001d9a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001d9e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001da2:	4690      	mov	r8, r2
 8001da4:	4699      	mov	r9, r3
 8001da6:	eb18 0a00 	adds.w	sl, r8, r0
 8001daa:	eb49 0b01 	adc.w	fp, r9, r1
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dbe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dc2:	ebb2 040a 	subs.w	r4, r2, sl
 8001dc6:	603c      	str	r4, [r7, #0]
 8001dc8:	eb63 030b 	sbc.w	r3, r3, fp
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	181b      	adds	r3, r3, r0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	462b      	mov	r3, r5
 8001dda:	eb41 0303 	adc.w	r3, r1, r3
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	6a3a      	ldr	r2, [r7, #32]
 8001de2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001de6:	f7ff ff3f 	bl	8001c68 <UTILS_NanosecondsToTimespec>

    return 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	3738      	adds	r7, #56	@ 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_MspInit+0x54>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <HAL_MspInit+0x54>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_MspInit+0x54>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_MspInit+0x54>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_MspInit+0x54>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_MspInit+0x54>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	210f      	movs	r1, #15
 8001e3a:	f06f 0001 	mvn.w	r0, #1
 8001e3e:	f001 fadf 	bl	8003400 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a40      	ldr	r2, [pc, #256]	@ (8001f70 <HAL_ADC_MspInit+0x120>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d179      	bne.n	8001f66 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b3f      	ldr	r3, [pc, #252]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b3c      	ldr	r3, [pc, #240]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a37      	ldr	r2, [pc, #220]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a30      	ldr	r2, [pc, #192]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b2e      	ldr	r3, [pc, #184]	@ (8001f74 <HAL_ADC_MspInit+0x124>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RL_CS_ADC1_IN4_Pin|FR_CS_ADC1_IN5_Pin;
 8001ec6:	2330      	movs	r3, #48	@ 0x30
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4827      	ldr	r0, [pc, #156]	@ (8001f78 <HAL_ADC_MspInit+0x128>)
 8001eda:	f001 febd 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FL_CS_ADC1_IN8_Pin|RR_CS_ADC1_IN9_Pin;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4822      	ldr	r0, [pc, #136]	@ (8001f7c <HAL_ADC_MspInit+0x12c>)
 8001ef2:	f001 feb1 	bl	8003c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ef6:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001ef8:	4a22      	ldr	r2, [pc, #136]	@ (8001f84 <HAL_ADC_MspInit+0x134>)
 8001efa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001efc:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f02:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f3a:	4811      	ldr	r0, [pc, #68]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f3c:	f001 fa8a 	bl	8003454 <HAL_DMA_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001f46:	f7ff fded 	bl	8001b24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f50:	4a0b      	ldr	r2, [pc, #44]	@ (8001f80 <HAL_ADC_MspInit+0x130>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	2012      	movs	r0, #18
 8001f5c:	f001 fa50 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f60:	2012      	movs	r0, #18
 8001f62:	f001 fa69 	bl	8003438 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	@ 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40012000 	.word	0x40012000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	20005384 	.word	0x20005384
 8001f84:	40026410 	.word	0x40026410

08001f88 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b090      	sub	sp, #64	@ 0x40
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a8c      	ldr	r2, [pc, #560]	@ (80021d8 <HAL_TIM_Encoder_MspInit+0x250>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d14d      	bne.n	8002046 <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fae:	4b8b      	ldr	r3, [pc, #556]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	4a8a      	ldr	r2, [pc, #552]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fba:	4b88      	ldr	r3, [pc, #544]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fca:	4b84      	ldr	r3, [pc, #528]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a83      	ldr	r2, [pc, #524]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b81      	ldr	r3, [pc, #516]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_ENC_B_T1C1_Pin|FL_ENC_A_T1C2_Pin;
 8001fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4878      	ldr	r0, [pc, #480]	@ (80021e0 <HAL_TIM_Encoder_MspInit+0x258>)
 8002000:	f001 fe2a 	bl	8003c58 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2105      	movs	r1, #5
 8002008:	2018      	movs	r0, #24
 800200a:	f001 f9f9 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800200e:	2018      	movs	r0, #24
 8002010:	f001 fa12 	bl	8003438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2105      	movs	r1, #5
 8002018:	2019      	movs	r0, #25
 800201a:	f001 f9f1 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800201e:	2019      	movs	r0, #25
 8002020:	f001 fa0a 	bl	8003438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2105      	movs	r1, #5
 8002028:	201a      	movs	r0, #26
 800202a:	f001 f9e9 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800202e:	201a      	movs	r0, #26
 8002030:	f001 fa02 	bl	8003438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2105      	movs	r1, #5
 8002038:	201b      	movs	r0, #27
 800203a:	f001 f9e1 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800203e:	201b      	movs	r0, #27
 8002040:	f001 f9fa 	bl	8003438 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002044:	e0c4      	b.n	80021d0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a66      	ldr	r2, [pc, #408]	@ (80021e4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d134      	bne.n	80020ba <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	4b61      	ldr	r3, [pc, #388]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4a60      	ldr	r2, [pc, #384]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002060:	4b5e      	ldr	r3, [pc, #376]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	4b5a      	ldr	r3, [pc, #360]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4a59      	ldr	r2, [pc, #356]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6313      	str	r3, [r2, #48]	@ 0x30
 800207c:	4b57      	ldr	r3, [pc, #348]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENC_A_T3C1_Pin|FR_ENC_B_T3C2_Pin;
 8002088:	23c0      	movs	r3, #192	@ 0xc0
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002098:	2302      	movs	r3, #2
 800209a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	484f      	ldr	r0, [pc, #316]	@ (80021e0 <HAL_TIM_Encoder_MspInit+0x258>)
 80020a4:	f001 fdd8 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2105      	movs	r1, #5
 80020ac:	201d      	movs	r0, #29
 80020ae:	f001 f9a7 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020b2:	201d      	movs	r0, #29
 80020b4:	f001 f9c0 	bl	8003438 <HAL_NVIC_EnableIRQ>
}
 80020b8:	e08a      	b.n	80021d0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM4)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4a      	ldr	r2, [pc, #296]	@ (80021e8 <HAL_TIM_Encoder_MspInit+0x260>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d134      	bne.n	800212e <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	4b44      	ldr	r3, [pc, #272]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	4a43      	ldr	r2, [pc, #268]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d4:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	4a3c      	ldr	r2, [pc, #240]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f0:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RL_ENC_B_T4C1_Pin|RL_ENC_A_T4C2_Pin;
 80020fc:	23c0      	movs	r3, #192	@ 0xc0
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800210c:	2302      	movs	r3, #2
 800210e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002114:	4619      	mov	r1, r3
 8002116:	4835      	ldr	r0, [pc, #212]	@ (80021ec <HAL_TIM_Encoder_MspInit+0x264>)
 8002118:	f001 fd9e 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2105      	movs	r1, #5
 8002120:	201e      	movs	r0, #30
 8002122:	f001 f96d 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002126:	201e      	movs	r0, #30
 8002128:	f001 f986 	bl	8003438 <HAL_NVIC_EnableIRQ>
}
 800212c:	e050      	b.n	80021d0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2f      	ldr	r2, [pc, #188]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x268>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d14b      	bne.n	80021d0 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 800213e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002140:	4a26      	ldr	r2, [pc, #152]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	6453      	str	r3, [r2, #68]	@ 0x44
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4a1f      	ldr	r2, [pc, #124]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6313      	str	r3, [r2, #48]	@ 0x30
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RR_ENC_A_T8C1_Pin|RR_ENC_B_T8C2_Pin;
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002180:	2303      	movs	r3, #3
 8002182:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002188:	4619      	mov	r1, r3
 800218a:	481a      	ldr	r0, [pc, #104]	@ (80021f4 <HAL_TIM_Encoder_MspInit+0x26c>)
 800218c:	f001 fd64 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2105      	movs	r1, #5
 8002194:	202b      	movs	r0, #43	@ 0x2b
 8002196:	f001 f933 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800219a:	202b      	movs	r0, #43	@ 0x2b
 800219c:	f001 f94c 	bl	8003438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2105      	movs	r1, #5
 80021a4:	202c      	movs	r0, #44	@ 0x2c
 80021a6:	f001 f92b 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80021aa:	202c      	movs	r0, #44	@ 0x2c
 80021ac:	f001 f944 	bl	8003438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2105      	movs	r1, #5
 80021b4:	202d      	movs	r0, #45	@ 0x2d
 80021b6:	f001 f923 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80021ba:	202d      	movs	r0, #45	@ 0x2d
 80021bc:	f001 f93c 	bl	8003438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2105      	movs	r1, #5
 80021c4:	202e      	movs	r0, #46	@ 0x2e
 80021c6:	f001 f91b 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80021ca:	202e      	movs	r0, #46	@ 0x2e
 80021cc:	f001 f934 	bl	8003438 <HAL_NVIC_EnableIRQ>
}
 80021d0:	bf00      	nop
 80021d2:	3740      	adds	r7, #64	@ 0x40
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40010400 	.word	0x40010400
 80021f4:	40020800 	.word	0x40020800

080021f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002208:	d115      	bne.n	8002236 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <HAL_TIM_Base_MspInit+0x48>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <HAL_TIM_Base_MspInit+0x48>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6413      	str	r3, [r2, #64]	@ 0x40
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_TIM_Base_MspInit+0x48>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2105      	movs	r1, #5
 800222a:	201c      	movs	r0, #28
 800222c:	f001 f8e8 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002230:	201c      	movs	r0, #28
 8002232:	f001 f901 	bl	8003438 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d13c      	bne.n	80022e0 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <HAL_TIM_MspPostInit+0xa4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <HAL_TIM_MspPostInit+0xa4>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <HAL_TIM_MspPostInit+0xa4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <HAL_TIM_MspPostInit+0xa4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a17      	ldr	r2, [pc, #92]	@ (80022e8 <HAL_TIM_MspPostInit+0xa4>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HAL_TIM_MspPostInit+0xa4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 800229e:	2303      	movs	r3, #3
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ae:	2301      	movs	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	@ (80022ec <HAL_TIM_MspPostInit+0xa8>)
 80022ba:	f001 fccd 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 80022be:	f240 4304 	movw	r3, #1028	@ 0x404
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d0:	2301      	movs	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <HAL_TIM_MspPostInit+0xac>)
 80022dc:	f001 fcbc 	bl	8003c58 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	3728      	adds	r7, #40	@ 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400

080022f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	@ 0x30
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5a      	ldr	r2, [pc, #360]	@ (800247c <HAL_UART_MspInit+0x188>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80c2 	bne.w	800249c <HAL_UART_MspInit+0x1a8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	4b58      	ldr	r3, [pc, #352]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	4a57      	ldr	r2, [pc, #348]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002326:	6413      	str	r3, [r2, #64]	@ 0x40
 8002328:	4b55      	ldr	r3, [pc, #340]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	4b51      	ldr	r3, [pc, #324]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	4a50      	ldr	r2, [pc, #320]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6313      	str	r3, [r2, #48]	@ 0x30
 8002344:	4b4e      	ldr	r3, [pc, #312]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	4a49      	ldr	r2, [pc, #292]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002360:	4b47      	ldr	r3, [pc, #284]	@ (8002480 <HAL_UART_MspInit+0x18c>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800236c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800237e:	2308      	movs	r3, #8
 8002380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	483e      	ldr	r0, [pc, #248]	@ (8002484 <HAL_UART_MspInit+0x190>)
 800238a:	f001 fc65 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800238e:	2304      	movs	r3, #4
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800239e:	2308      	movs	r3, #8
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	4619      	mov	r1, r3
 80023a8:	4837      	ldr	r0, [pc, #220]	@ (8002488 <HAL_UART_MspInit+0x194>)
 80023aa:	f001 fc55 	bl	8003c58 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80023ae:	4b37      	ldr	r3, [pc, #220]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023b0:	4a37      	ldr	r2, [pc, #220]	@ (8002490 <HAL_UART_MspInit+0x19c>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80023b4:	4b35      	ldr	r3, [pc, #212]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023ba:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023bc:	4b33      	ldr	r3, [pc, #204]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	4b32      	ldr	r3, [pc, #200]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023c8:	4b30      	ldr	r3, [pc, #192]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ce:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d0:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d6:	4b2d      	ldr	r3, [pc, #180]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80023dc:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023e2:	4b2a      	ldr	r3, [pc, #168]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023e8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ea:	4b28      	ldr	r3, [pc, #160]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80023f0:	4826      	ldr	r0, [pc, #152]	@ (800248c <HAL_UART_MspInit+0x198>)
 80023f2:	f001 f82f 	bl	8003454 <HAL_DMA_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80023fc:	f7ff fb92 	bl	8001b24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a22      	ldr	r2, [pc, #136]	@ (800248c <HAL_UART_MspInit+0x198>)
 8002404:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002406:	4a21      	ldr	r2, [pc, #132]	@ (800248c <HAL_UART_MspInit+0x198>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800240c:	4b21      	ldr	r3, [pc, #132]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 800240e:	4a22      	ldr	r2, [pc, #136]	@ (8002498 <HAL_UART_MspInit+0x1a4>)
 8002410:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002414:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002418:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800241a:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 800241c:	2240      	movs	r2, #64	@ 0x40
 800241e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002420:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002426:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002428:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800242c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242e:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002434:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002440:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002442:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002446:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002448:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800244e:	4811      	ldr	r0, [pc, #68]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002450:	f001 f800 	bl	8003454 <HAL_DMA_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800245a:	f7ff fb63 	bl	8001b24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002462:	639a      	str	r2, [r3, #56]	@ 0x38
 8002464:	4a0b      	ldr	r2, [pc, #44]	@ (8002494 <HAL_UART_MspInit+0x1a0>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2105      	movs	r1, #5
 800246e:	2035      	movs	r0, #53	@ 0x35
 8002470:	f000 ffc6 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002474:	2035      	movs	r0, #53	@ 0x35
 8002476:	f000 ffdf 	bl	8003438 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800247a:	e0a8      	b.n	80025ce <HAL_UART_MspInit+0x2da>
 800247c:	40005000 	.word	0x40005000
 8002480:	40023800 	.word	0x40023800
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	200055dc 	.word	0x200055dc
 8002490:	40026010 	.word	0x40026010
 8002494:	2000563c 	.word	0x2000563c
 8002498:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a4d      	ldr	r2, [pc, #308]	@ (80025d8 <HAL_UART_MspInit+0x2e4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f040 8093 	bne.w	80025ce <HAL_UART_MspInit+0x2da>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b4b      	ldr	r3, [pc, #300]	@ (80025dc <HAL_UART_MspInit+0x2e8>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	4a4a      	ldr	r2, [pc, #296]	@ (80025dc <HAL_UART_MspInit+0x2e8>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b8:	4b48      	ldr	r3, [pc, #288]	@ (80025dc <HAL_UART_MspInit+0x2e8>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	4b44      	ldr	r3, [pc, #272]	@ (80025dc <HAL_UART_MspInit+0x2e8>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	4a43      	ldr	r2, [pc, #268]	@ (80025dc <HAL_UART_MspInit+0x2e8>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d4:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_UART_MspInit+0x2e8>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024e0:	230c      	movs	r3, #12
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f0:	2307      	movs	r3, #7
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	4619      	mov	r1, r3
 80024fa:	4839      	ldr	r0, [pc, #228]	@ (80025e0 <HAL_UART_MspInit+0x2ec>)
 80024fc:	f001 fbac 	bl	8003c58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002500:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002502:	4a39      	ldr	r2, [pc, #228]	@ (80025e8 <HAL_UART_MspInit+0x2f4>)
 8002504:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002506:	4b37      	ldr	r3, [pc, #220]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002508:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800250c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800250e:	4b35      	ldr	r3, [pc, #212]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002514:	4b33      	ldr	r3, [pc, #204]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800251a:	4b32      	ldr	r3, [pc, #200]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 800251c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002520:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002522:	4b30      	ldr	r3, [pc, #192]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002528:	4b2e      	ldr	r3, [pc, #184]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800252e:	4b2d      	ldr	r3, [pc, #180]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002534:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002536:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002538:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800253c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800253e:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002544:	4827      	ldr	r0, [pc, #156]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002546:	f000 ff85 	bl	8003454 <HAL_DMA_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8002550:	f7ff fae8 	bl	8001b24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 8002558:	63da      	str	r2, [r3, #60]	@ 0x3c
 800255a:	4a22      	ldr	r2, [pc, #136]	@ (80025e4 <HAL_UART_MspInit+0x2f0>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002560:	4b22      	ldr	r3, [pc, #136]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 8002562:	4a23      	ldr	r2, [pc, #140]	@ (80025f0 <HAL_UART_MspInit+0x2fc>)
 8002564:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002566:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 8002568:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800256c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800256e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 8002570:	2240      	movs	r2, #64	@ 0x40
 8002572:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002574:	4b1d      	ldr	r3, [pc, #116]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800257a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 800257c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002580:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002582:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002588:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800258e:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002594:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 8002596:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800259a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800259c:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025a2:	4812      	ldr	r0, [pc, #72]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 80025a4:	f000 ff56 	bl	8003454 <HAL_DMA_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_UART_MspInit+0x2be>
      Error_Handler();
 80025ae:	f7ff fab9 	bl	8001b24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 80025b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80025b8:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <HAL_UART_MspInit+0x2f8>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	2026      	movs	r0, #38	@ 0x26
 80025c4:	f000 ff1c 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025c8:	2026      	movs	r0, #38	@ 0x26
 80025ca:	f000 ff35 	bl	8003438 <HAL_NVIC_EnableIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3730      	adds	r7, #48	@ 0x30
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40004400 	.word	0x40004400
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020000 	.word	0x40020000
 80025e4:	2000569c 	.word	0x2000569c
 80025e8:	40026088 	.word	0x40026088
 80025ec:	200056fc 	.word	0x200056fc
 80025f0:	400260a0 	.word	0x400260a0

080025f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	@ 0x38
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <HAL_InitTick+0xe4>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	4a32      	ldr	r2, [pc, #200]	@ (80026d8 <HAL_InitTick+0xe4>)
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	6413      	str	r3, [r2, #64]	@ 0x40
 8002614:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <HAL_InitTick+0xe4>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002620:	f107 0210 	add.w	r2, r7, #16
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fdf6 	bl	800421c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800263a:	f001 fdc7 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 800263e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002640:	e004      	b.n	800264c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002642:	f001 fdc3 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8002646:	4603      	mov	r3, r0
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800264c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <HAL_InitTick+0xe8>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9b      	lsrs	r3, r3, #18
 8002656:	3b01      	subs	r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800265a:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <HAL_InitTick+0xec>)
 800265c:	4a21      	ldr	r2, [pc, #132]	@ (80026e4 <HAL_InitTick+0xf0>)
 800265e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_InitTick+0xec>)
 8002662:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002666:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002668:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_InitTick+0xec>)
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800266e:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <HAL_InitTick+0xec>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_InitTick+0xec>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_InitTick+0xec>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002680:	4817      	ldr	r0, [pc, #92]	@ (80026e0 <HAL_InitTick+0xec>)
 8002682:	f002 facb 	bl	8004c1c <HAL_TIM_Base_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800268c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11b      	bne.n	80026cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002694:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <HAL_InitTick+0xec>)
 8002696:	f002 fb11 	bl	8004cbc <HAL_TIM_Base_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80026a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026a8:	2037      	movs	r0, #55	@ 0x37
 80026aa:	f000 fec5 	bl	8003438 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d808      	bhi.n	80026c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	2037      	movs	r0, #55	@ 0x37
 80026ba:	f000 fea1 	bl	8003400 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_InitTick+0xf4>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e002      	b.n	80026cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3738      	adds	r7, #56	@ 0x38
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	431bde83 	.word	0x431bde83
 80026e0:	2000589c 	.word	0x2000589c
 80026e4:	40001400 	.word	0x40001400
 80026e8:	20000034 	.word	0x20000034

080026ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <NMI_Handler+0x4>

080026f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <MemManage_Handler+0x4>

08002704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <BusFault_Handler+0x4>

0800270c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <UsageFault_Handler+0x4>

08002714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <DMA1_Stream0_IRQHandler+0x10>)
 800272a:	f001 f82b 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200055dc 	.word	0x200055dc

08002738 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <DMA1_Stream5_IRQHandler+0x10>)
 800273e:	f001 f821 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000569c 	.word	0x2000569c

0800274c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA1_Stream6_IRQHandler+0x10>)
 8002752:	f001 f817 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200056fc 	.word	0x200056fc

08002760 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <ADC_IRQHandler+0x10>)
 8002766:	f000 fa2c 	bl	8002bc2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000533c 	.word	0x2000533c

08002774 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800277a:	f002 fd65 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200053e4 	.word	0x200053e4

08002788 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800278e:	f002 fd5b 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200053e4 	.word	0x200053e4

0800279c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80027a2:	f002 fd51 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200053e4 	.word	0x200053e4

080027b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <TIM1_CC_IRQHandler+0x10>)
 80027b6:	f002 fd47 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200053e4 	.word	0x200053e4

080027c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027c8:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <TIM2_IRQHandler+0x10>)
 80027ca:	f002 fd3d 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000542c 	.word	0x2000542c

080027d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <TIM3_IRQHandler+0x10>)
 80027de:	f002 fd33 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20005474 	.word	0x20005474

080027ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027f0:	4802      	ldr	r0, [pc, #8]	@ (80027fc <TIM4_IRQHandler+0x10>)
 80027f2:	f002 fd29 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200054bc 	.word	0x200054bc

08002800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002804:	4802      	ldr	r0, [pc, #8]	@ (8002810 <USART2_IRQHandler+0x10>)
 8002806:	f003 fcd7 	bl	80061b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20005594 	.word	0x20005594

08002814 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002818:	4802      	ldr	r0, [pc, #8]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800281a:	f002 fd15 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20005504 	.word	0x20005504

08002828 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800282c:	4802      	ldr	r0, [pc, #8]	@ (8002838 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800282e:	f002 fd0b 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20005504 	.word	0x20005504

0800283c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002840:	4802      	ldr	r0, [pc, #8]	@ (800284c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002842:	f002 fd01 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20005504 	.word	0x20005504

08002850 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002854:	4802      	ldr	r0, [pc, #8]	@ (8002860 <TIM8_CC_IRQHandler+0x10>)
 8002856:	f002 fcf7 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20005504 	.word	0x20005504

08002864 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002868:	4802      	ldr	r0, [pc, #8]	@ (8002874 <DMA1_Stream7_IRQHandler+0x10>)
 800286a:	f000 ff8b 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000563c 	.word	0x2000563c

08002878 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800287c:	4802      	ldr	r0, [pc, #8]	@ (8002888 <UART5_IRQHandler+0x10>)
 800287e:	f003 fc9b 	bl	80061b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000554c 	.word	0x2000554c

0800288c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <TIM7_IRQHandler+0x10>)
 8002892:	f002 fcd9 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000589c 	.word	0x2000589c

080028a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <DMA2_Stream0_IRQHandler+0x10>)
 80028a6:	f000 ff6d 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20005384 	.word	0x20005384

080028b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return 1;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <_kill>:

int _kill(int pid, int sig)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028ce:	f016 f80b 	bl	80188e8 <__errno>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2216      	movs	r2, #22
 80028d6:	601a      	str	r2, [r3, #0]
  return -1;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_exit>:

void _exit (int status)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ffe7 	bl	80028c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028f6:	bf00      	nop
 80028f8:	e7fd      	b.n	80028f6 <_exit+0x12>

080028fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e00a      	b.n	8002922 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800290c:	f3af 8000 	nop.w
 8002910:	4601      	mov	r1, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	b2ca      	uxtb	r2, r1
 800291a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbf0      	blt.n	800290c <_read+0x12>
  }

  return len;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	e009      	b.n	800295a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	60ba      	str	r2, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3301      	adds	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	429a      	cmp	r2, r3
 8002960:	dbf1      	blt.n	8002946 <_write+0x12>
  }
  return len;
 8002962:	687b      	ldr	r3, [r7, #4]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_close>:

int _close(int file)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002994:	605a      	str	r2, [r3, #4]
  return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_isatty>:

int _isatty(int file)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029dc:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <_sbrk+0x5c>)
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <_sbrk+0x60>)
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <_sbrk+0x64>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <_sbrk+0x64>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <_sbrk+0x68>)
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d207      	bcs.n	8002a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a04:	f015 ff70 	bl	80188e8 <__errno>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	e009      	b.n	8002a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a14:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <_sbrk+0x64>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1a:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	4a05      	ldr	r2, [pc, #20]	@ (8002a38 <_sbrk+0x64>)
 8002a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20020000 	.word	0x20020000
 8002a34:	00000400 	.word	0x00000400
 8002a38:	200058e8 	.word	0x200058e8
 8002a3c:	2000eef8 	.word	0x2000eef8

08002a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <SystemInit+0x20>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <SystemInit+0x20>)
 8002a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a68:	f7ff ffea 	bl	8002a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a6c:	480c      	ldr	r0, [pc, #48]	@ (8002aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a6e:	490d      	ldr	r1, [pc, #52]	@ (8002aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a74:	e002      	b.n	8002a7c <LoopCopyDataInit>

08002a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7a:	3304      	adds	r3, #4

08002a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a80:	d3f9      	bcc.n	8002a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a82:	4a0a      	ldr	r2, [pc, #40]	@ (8002aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a84:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a88:	e001      	b.n	8002a8e <LoopFillZerobss>

08002a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a8c:	3204      	adds	r2, #4

08002a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a90:	d3fb      	bcc.n	8002a8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a92:	f015 ff2f 	bl	80188f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a96:	f7fe f907 	bl	8000ca8 <main>
  bx  lr    
 8002a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa4:	20000f00 	.word	0x20000f00
  ldr r2, =_sidata
 8002aa8:	0801a820 	.word	0x0801a820
  ldr r2, =_sbss
 8002aac:	20000f00 	.word	0x20000f00
  ldr r4, =_ebss
 8002ab0:	2000eef4 	.word	0x2000eef4

08002ab4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab4:	e7fe      	b.n	8002ab4 <CAN1_RX0_IRQHandler>
	...

08002ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <HAL_Init+0x40>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <HAL_Init+0x40>)
 8002ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a07      	ldr	r2, [pc, #28]	@ (8002af8 <HAL_Init+0x40>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 fc82 	bl	80033ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae6:	200f      	movs	r0, #15
 8002ae8:	f7ff fd84 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aec:	f7ff f984 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000038 	.word	0x20000038
 8002b20:	200058ec 	.word	0x200058ec

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	200058ec 	.word	0x200058ec

08002b3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e033      	b.n	8002bba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff f978 	bl	8001e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b82:	f023 0302 	bic.w	r3, r3, #2
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa78 	bl	8003084 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002baa:	e001      	b.n	8002bb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d049      	beq.n	8002c8c <HAL_ADC_IRQHandler+0xca>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d046      	beq.n	8002c8c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12b      	bne.n	8002c7c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d127      	bne.n	8002c7c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d119      	bne.n	8002c7c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0220 	bic.w	r2, r2, #32
 8002c56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f8b0 	bl	8002de2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0212 	mvn.w	r2, #18
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d057      	beq.n	8002d52 <HAL_ADC_IRQHandler+0x190>
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d054      	beq.n	8002d52 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d139      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d12b      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d124      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11d      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d119      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d1c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa9a 	bl	800327c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 020c 	mvn.w	r2, #12
 8002d50:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x1d6>
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d014      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10d      	bne.n	8002d98 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f834 	bl	8002df6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0201 	mvn.w	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002da6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d015      	beq.n	8002dda <HAL_ADC_IRQHandler+0x218>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db8:	f043 0202 	orr.w	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0220 	mvn.w	r2, #32
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f81d 	bl	8002e0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0220 	mvn.w	r2, #32
 8002dd8:	601a      	str	r2, [r3, #0]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x1c>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e113      	b.n	8003064 <HAL_ADC_ConfigChannel+0x244>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d925      	bls.n	8002e98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b1e      	subs	r3, #30
 8002e62:	2207      	movs	r2, #7
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	400a      	ands	r2, r1
 8002e70:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68d9      	ldr	r1, [r3, #12]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	4603      	mov	r3, r0
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4403      	add	r3, r0
 8002e8a:	3b1e      	subs	r3, #30
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e022      	b.n	8002ede <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6919      	ldr	r1, [r3, #16]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	2207      	movs	r2, #7
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	400a      	ands	r2, r1
 8002eba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4403      	add	r3, r0
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d824      	bhi.n	8002f30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b05      	subs	r3, #5
 8002ef8:	221f      	movs	r2, #31
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b05      	subs	r3, #5
 8002f22:	fa00 f203 	lsl.w	r2, r0, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f2e:	e04c      	b.n	8002fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d824      	bhi.n	8002f82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	3b23      	subs	r3, #35	@ 0x23
 8002f4a:	221f      	movs	r2, #31
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43da      	mvns	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	400a      	ands	r2, r1
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	3b23      	subs	r3, #35	@ 0x23
 8002f74:	fa00 f203 	lsl.w	r2, r0, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f80:	e023      	b.n	8002fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	3b41      	subs	r3, #65	@ 0x41
 8002f94:	221f      	movs	r2, #31
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b41      	subs	r3, #65	@ 0x41
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fca:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <HAL_ADC_ConfigChannel+0x250>)
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <HAL_ADC_ConfigChannel+0x254>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1d8>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b12      	cmp	r3, #18
 8002fde:	d10b      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <HAL_ADC_ConfigChannel+0x254>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d12b      	bne.n	800305a <HAL_ADC_ConfigChannel+0x23a>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1c      	ldr	r2, [pc, #112]	@ (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x1f4>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b11      	cmp	r3, #17
 8003012:	d122      	bne.n	800305a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a11      	ldr	r2, [pc, #68]	@ (8003078 <HAL_ADC_ConfigChannel+0x258>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d111      	bne.n	800305a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_ADC_ConfigChannel+0x25c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a11      	ldr	r2, [pc, #68]	@ (8003080 <HAL_ADC_ConfigChannel+0x260>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	0c9a      	lsrs	r2, r3, #18
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800304c:	e002      	b.n	8003054 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3b01      	subs	r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f9      	bne.n	800304e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40012300 	.word	0x40012300
 8003074:	40012000 	.word	0x40012000
 8003078:	10000012 	.word	0x10000012
 800307c:	20000030 	.word	0x20000030
 8003080:	431bde83 	.word	0x431bde83

08003084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308c:	4b79      	ldr	r3, [pc, #484]	@ (8003274 <ADC_Init+0x1f0>)
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	021a      	lsls	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003116:	4a58      	ldr	r2, [pc, #352]	@ (8003278 <ADC_Init+0x1f4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d022      	beq.n	8003162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800312a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800314c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	e00f      	b.n	8003182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003180:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0202 	bic.w	r2, r2, #2
 8003190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7e1b      	ldrb	r3, [r3, #24]
 800319c:	005a      	lsls	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	3b01      	subs	r3, #1
 80031dc:	035a      	lsls	r2, r3, #13
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e007      	b.n	80031f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	3b01      	subs	r3, #1
 8003214:	051a      	lsls	r2, r3, #20
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800322c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800323a:	025a      	lsls	r2, r3, #9
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	029a      	lsls	r2, r3, #10
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40012300 	.word	0x40012300
 8003278:	0f000001 	.word	0x0f000001

0800327c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c2:	4a04      	ldr	r2, [pc, #16]	@ (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4907      	ldr	r1, [pc, #28]	@ (800332c <__NVIC_EnableIRQ+0x38>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	490c      	ldr	r1, [pc, #48]	@ (800337c <__NVIC_SetPriority+0x4c>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4908      	ldr	r1, [pc, #32]	@ (8003380 <__NVIC_SetPriority+0x50>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3b04      	subs	r3, #4
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf28      	it	cs
 80033a2:	2304      	movcs	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b03      	subs	r3, #3
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	4313      	orrs	r3, r2
         );
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	@ 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff4c 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003412:	f7ff ff61 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 8003416:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	6978      	ldr	r0, [r7, #20]
 800341e:	f7ff ffb1 	bl	8003384 <NVIC_EncodePriority>
 8003422:	4602      	mov	r2, r0
 8003424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff80 	bl	8003330 <__NVIC_SetPriority>
}
 8003430:	bf00      	nop
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff54 	bl	80032f4 <__NVIC_EnableIRQ>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003460:	f7ff fb60 	bl	8002b24 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e099      	b.n	80035a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003490:	e00f      	b.n	80034b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003492:	f7ff fb47 	bl	8002b24 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b05      	cmp	r3, #5
 800349e:	d908      	bls.n	80034b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e078      	b.n	80035a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e8      	bne.n	8003492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4b38      	ldr	r3, [pc, #224]	@ (80035ac <HAL_DMA_Init+0x158>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	2b04      	cmp	r3, #4
 800350a:	d107      	bne.n	800351c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	4313      	orrs	r3, r2
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	2b04      	cmp	r3, #4
 8003544:	d117      	bne.n	8003576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fb01 	bl	8003b60 <DMA_CheckFifoParam>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2240      	movs	r2, #64	@ 0x40
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003572:	2301      	movs	r3, #1
 8003574:	e016      	b.n	80035a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fab8 	bl	8003af4 <DMA_CalcBaseAndBitshift>
 8003584:	4603      	mov	r3, r0
 8003586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358c:	223f      	movs	r2, #63	@ 0x3f
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	f010803f 	.word	0xf010803f

080035b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_DMA_Start_IT+0x26>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e040      	b.n	8003658 <HAL_DMA_Start_IT+0xa8>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d12f      	bne.n	800364a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa4a 	bl	8003a98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	223f      	movs	r2, #63	@ 0x3f
 800360a:	409a      	lsls	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0216 	orr.w	r2, r2, #22
 800361e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0208 	orr.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e005      	b.n	8003656 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800366e:	f7ff fa59 	bl	8002b24 <HAL_GetTick>
 8003672:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d008      	beq.n	8003692 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	@ 0x80
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e052      	b.n	8003738 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0216 	bic.w	r2, r2, #22
 80036a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_DMA_Abort+0x62>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0208 	bic.w	r2, r2, #8
 80036d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e2:	e013      	b.n	800370c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e4:	f7ff fa1e 	bl	8002b24 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d90c      	bls.n	800370c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e015      	b.n	8003738 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e4      	bne.n	80036e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	223f      	movs	r2, #63	@ 0x3f
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d004      	beq.n	800375e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2280      	movs	r2, #128	@ 0x80
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00c      	b.n	8003778 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2205      	movs	r2, #5
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003790:	4b8e      	ldr	r3, [pc, #568]	@ (80039cc <HAL_DMA_IRQHandler+0x248>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a8e      	ldr	r2, [pc, #568]	@ (80039d0 <HAL_DMA_IRQHandler+0x24c>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	2208      	movs	r2, #8
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01a      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2208      	movs	r2, #8
 80037de:	409a      	lsls	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	2201      	movs	r2, #1
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	2201      	movs	r2, #1
 8003814:	409a      	lsls	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	2204      	movs	r2, #4
 800382c:	409a      	lsls	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003848:	2204      	movs	r2, #4
 800384a:	409a      	lsls	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	2210      	movs	r2, #16
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d043      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d03c      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	2210      	movs	r2, #16
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d018      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d024      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
 80038b2:	e01f      	b.n	80038f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e016      	b.n	80038f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d107      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0208 	bic.w	r2, r2, #8
 80038e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	2220      	movs	r2, #32
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 808f 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8087 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	2220      	movs	r2, #32
 800391c:	409a      	lsls	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b05      	cmp	r3, #5
 800392c:	d136      	bne.n	800399c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0216 	bic.w	r2, r2, #22
 800393c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800394c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_DMA_IRQHandler+0x1da>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0208 	bic.w	r2, r2, #8
 800396c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	223f      	movs	r2, #63	@ 0x3f
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d07e      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
        }
        return;
 800399a:	e079      	b.n	8003a90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d031      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
 80039c8:	e02c      	b.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
 80039ca:	bf00      	nop
 80039cc:	20000030 	.word	0x20000030
 80039d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e01e      	b.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10f      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0210 	bic.w	r2, r2, #16
 8003a02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d032      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d022      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2205      	movs	r2, #5
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d307      	bcc.n	8003a6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f2      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x2cc>
 8003a6a:	e000      	b.n	8003a6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
 8003a8e:	e000      	b.n	8003a92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a90:	bf00      	nop
    }
  }
}
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d108      	bne.n	8003ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ad6:	e007      	b.n	8003ae8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	3b10      	subs	r3, #16
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <DMA_CalcBaseAndBitshift+0x64>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b0e:	4a13      	ldr	r2, [pc, #76]	@ (8003b5c <DMA_CalcBaseAndBitshift+0x68>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d909      	bls.n	8003b36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	1d1a      	adds	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b34:	e007      	b.n	8003b46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	aaaaaaab 	.word	0xaaaaaaab
 8003b5c:	080196bc 	.word	0x080196bc

08003b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11f      	bne.n	8003bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d856      	bhi.n	8003c2e <DMA_CheckFifoParam+0xce>
 8003b80:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <DMA_CheckFifoParam+0x28>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003bab 	.word	0x08003bab
 8003b90:	08003b99 	.word	0x08003b99
 8003b94:	08003c2f 	.word	0x08003c2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d046      	beq.n	8003c32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba8:	e043      	b.n	8003c32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bb2:	d140      	bne.n	8003c36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb8:	e03d      	b.n	8003c36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc2:	d121      	bne.n	8003c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d837      	bhi.n	8003c3a <DMA_CheckFifoParam+0xda>
 8003bca:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <DMA_CheckFifoParam+0x70>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003be7 	.word	0x08003be7
 8003bd8:	08003be1 	.word	0x08003be1
 8003bdc:	08003bf9 	.word	0x08003bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e030      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d025      	beq.n	8003c3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf6:	e022      	b.n	8003c3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c00:	d11f      	bne.n	8003c42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c06:	e01c      	b.n	8003c42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d903      	bls.n	8003c16 <DMA_CheckFifoParam+0xb6>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d003      	beq.n	8003c1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c14:	e018      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1a:	e015      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2c:	e00b      	b.n	8003c46 <DMA_CheckFifoParam+0xe6>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e00a      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e008      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e006      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e004      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
    }
  } 
  
  return status; 
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e165      	b.n	8003f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c74:	2201      	movs	r2, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f040 8154 	bne.w	8003f3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d005      	beq.n	8003caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d130      	bne.n	8003d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 0201 	and.w	r2, r3, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d017      	beq.n	8003d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d123      	bne.n	8003d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80ae 	beq.w	8003f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f58 <HAL_GPIO_Init+0x300>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	4a5c      	ldr	r2, [pc, #368]	@ (8003f58 <HAL_GPIO_Init+0x300>)
 8003de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dee:	4b5a      	ldr	r3, [pc, #360]	@ (8003f58 <HAL_GPIO_Init+0x300>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dfa:	4a58      	ldr	r2, [pc, #352]	@ (8003f5c <HAL_GPIO_Init+0x304>)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4f      	ldr	r2, [pc, #316]	@ (8003f60 <HAL_GPIO_Init+0x308>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d025      	beq.n	8003e72 <HAL_GPIO_Init+0x21a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4e      	ldr	r2, [pc, #312]	@ (8003f64 <HAL_GPIO_Init+0x30c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01f      	beq.n	8003e6e <HAL_GPIO_Init+0x216>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4d      	ldr	r2, [pc, #308]	@ (8003f68 <HAL_GPIO_Init+0x310>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d019      	beq.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4c      	ldr	r2, [pc, #304]	@ (8003f6c <HAL_GPIO_Init+0x314>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_GPIO_Init+0x20e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	@ (8003f70 <HAL_GPIO_Init+0x318>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00d      	beq.n	8003e62 <HAL_GPIO_Init+0x20a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_GPIO_Init+0x31c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a49      	ldr	r2, [pc, #292]	@ (8003f78 <HAL_GPIO_Init+0x320>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_GPIO_Init+0x202>
 8003e56:	2306      	movs	r3, #6
 8003e58:	e00c      	b.n	8003e74 <HAL_GPIO_Init+0x21c>
 8003e5a:	2307      	movs	r3, #7
 8003e5c:	e00a      	b.n	8003e74 <HAL_GPIO_Init+0x21c>
 8003e5e:	2305      	movs	r3, #5
 8003e60:	e008      	b.n	8003e74 <HAL_GPIO_Init+0x21c>
 8003e62:	2304      	movs	r3, #4
 8003e64:	e006      	b.n	8003e74 <HAL_GPIO_Init+0x21c>
 8003e66:	2303      	movs	r3, #3
 8003e68:	e004      	b.n	8003e74 <HAL_GPIO_Init+0x21c>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e002      	b.n	8003e74 <HAL_GPIO_Init+0x21c>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_GPIO_Init+0x21c>
 8003e72:	2300      	movs	r3, #0
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	f002 0203 	and.w	r2, r2, #3
 8003e7a:	0092      	lsls	r2, r2, #2
 8003e7c:	4093      	lsls	r3, r2
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e84:	4935      	ldr	r1, [pc, #212]	@ (8003f5c <HAL_GPIO_Init+0x304>)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e92:	4b3a      	ldr	r3, [pc, #232]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eb6:	4a31      	ldr	r2, [pc, #196]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ee0:	4a26      	ldr	r2, [pc, #152]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ee6:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f10:	4b1a      	ldr	r3, [pc, #104]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f34:	4a11      	ldr	r2, [pc, #68]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	f67f ae96 	bls.w	8003c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3724      	adds	r7, #36	@ 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	40020000 	.word	0x40020000
 8003f64:	40020400 	.word	0x40020400
 8003f68:	40020800 	.word	0x40020800
 8003f6c:	40020c00 	.word	0x40020c00
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40021400 	.word	0x40021400
 8003f78:	40021800 	.word	0x40021800
 8003f7c:	40013c00 	.word	0x40013c00

08003f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f90:	787b      	ldrb	r3, [r7, #1]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f9c:	e003      	b.n	8003fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	041a      	lsls	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	619a      	str	r2, [r3, #24]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fc4:	887a      	ldrh	r2, [r7, #2]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	041a      	lsls	r2, r3, #16
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43d9      	mvns	r1, r3
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	619a      	str	r2, [r3, #24]
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0cc      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b68      	ldr	r3, [pc, #416]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d90c      	bls.n	8004024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b65      	ldr	r3, [pc, #404]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b63      	ldr	r3, [pc, #396]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0b8      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800403c:	4b59      	ldr	r3, [pc, #356]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a58      	ldr	r2, [pc, #352]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004046:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004054:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a52      	ldr	r2, [pc, #328]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800405e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004060:	4b50      	ldr	r3, [pc, #320]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	494d      	ldr	r1, [pc, #308]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d044      	beq.n	8004108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d119      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e07f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e067      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b37      	ldr	r3, [pc, #220]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4934      	ldr	r1, [pc, #208]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d8:	f7fe fd24 	bl	8002b24 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fe fd20 	bl	8002b24 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e04f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b25      	ldr	r3, [pc, #148]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d20c      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b22      	ldr	r3, [pc, #136]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e032      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800413c:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4916      	ldr	r1, [pc, #88]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415a:	4b12      	ldr	r3, [pc, #72]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	490e      	ldr	r1, [pc, #56]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416e:	f000 f887 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8004172:	4602      	mov	r2, r0
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	490a      	ldr	r1, [pc, #40]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004180:	5ccb      	ldrb	r3, [r1, r3]
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	4a09      	ldr	r2, [pc, #36]	@ (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800418a:	4b09      	ldr	r3, [pc, #36]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fa30 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023c00 	.word	0x40023c00
 80041a4:	40023800 	.word	0x40023800
 80041a8:	080196a4 	.word	0x080196a4
 80041ac:	20000030 	.word	0x20000030
 80041b0:	20000034 	.word	0x20000034

080041b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b8:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000030 	.word	0x20000030

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041d0:	f7ff fff0 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0a9b      	lsrs	r3, r3, #10
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40023800 	.word	0x40023800
 80041f0:	080196b4 	.word	0x080196b4

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f8:	f7ff ffdc 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0b5b      	lsrs	r3, r3, #13
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	080196b4 	.word	0x080196b4

0800421c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	220f      	movs	r2, #15
 800422a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800422c:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0203 	and.w	r2, r3, #3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004238:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004250:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	08db      	lsrs	r3, r3, #3
 8004256:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800425e:	4b07      	ldr	r3, [pc, #28]	@ (800427c <HAL_RCC_GetClockConfig+0x60>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	40023c00 	.word	0x40023c00

08004280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b0ae      	sub	sp, #184	@ 0xb8
 8004286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a6:	4bcb      	ldr	r3, [pc, #812]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	f200 8206 	bhi.w	80046c0 <HAL_RCC_GetSysClockFreq+0x440>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	080046c1 	.word	0x080046c1
 80042c4:	080046c1 	.word	0x080046c1
 80042c8:	080046c1 	.word	0x080046c1
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	080046c1 	.word	0x080046c1
 80042d4:	080046c1 	.word	0x080046c1
 80042d8:	080046c1 	.word	0x080046c1
 80042dc:	08004301 	.word	0x08004301
 80042e0:	080046c1 	.word	0x080046c1
 80042e4:	080046c1 	.word	0x080046c1
 80042e8:	080046c1 	.word	0x080046c1
 80042ec:	080044f1 	.word	0x080044f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f0:	4bb9      	ldr	r3, [pc, #740]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80042f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042f6:	e1e7      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f8:	4bb8      	ldr	r3, [pc, #736]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80042fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042fe:	e1e3      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004300:	4bb4      	ldr	r3, [pc, #720]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800430c:	4bb1      	ldr	r3, [pc, #708]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d071      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004318:	4bae      	ldr	r3, [pc, #696]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	099b      	lsrs	r3, r3, #6
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004324:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800432c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800433a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800433e:	4622      	mov	r2, r4
 8004340:	462b      	mov	r3, r5
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	0159      	lsls	r1, r3, #5
 800434c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004350:	0150      	lsls	r0, r2, #5
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4621      	mov	r1, r4
 8004358:	1a51      	subs	r1, r2, r1
 800435a:	6439      	str	r1, [r7, #64]	@ 0x40
 800435c:	4629      	mov	r1, r5
 800435e:	eb63 0301 	sbc.w	r3, r3, r1
 8004362:	647b      	str	r3, [r7, #68]	@ 0x44
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004370:	4649      	mov	r1, r9
 8004372:	018b      	lsls	r3, r1, #6
 8004374:	4641      	mov	r1, r8
 8004376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437a:	4641      	mov	r1, r8
 800437c:	018a      	lsls	r2, r1, #6
 800437e:	4641      	mov	r1, r8
 8004380:	1a51      	subs	r1, r2, r1
 8004382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004384:	4649      	mov	r1, r9
 8004386:	eb63 0301 	sbc.w	r3, r3, r1
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004398:	4649      	mov	r1, r9
 800439a:	00cb      	lsls	r3, r1, #3
 800439c:	4641      	mov	r1, r8
 800439e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a2:	4641      	mov	r1, r8
 80043a4:	00ca      	lsls	r2, r1, #3
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	4622      	mov	r2, r4
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b2:	462b      	mov	r3, r5
 80043b4:	460a      	mov	r2, r1
 80043b6:	eb42 0303 	adc.w	r3, r2, r3
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043c8:	4629      	mov	r1, r5
 80043ca:	024b      	lsls	r3, r1, #9
 80043cc:	4621      	mov	r1, r4
 80043ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043d2:	4621      	mov	r1, r4
 80043d4:	024a      	lsls	r2, r1, #9
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80043ec:	f7fb ffc8 	bl	8000380 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4613      	mov	r3, r2
 80043f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043fa:	e067      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fc:	4b75      	ldr	r3, [pc, #468]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004408:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800440c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004416:	2300      	movs	r3, #0
 8004418:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800441a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	0159      	lsls	r1, r3, #5
 800442c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004430:	0150      	lsls	r0, r2, #5
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4621      	mov	r1, r4
 8004438:	1a51      	subs	r1, r2, r1
 800443a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800443c:	4629      	mov	r1, r5
 800443e:	eb63 0301 	sbc.w	r3, r3, r1
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004450:	4649      	mov	r1, r9
 8004452:	018b      	lsls	r3, r1, #6
 8004454:	4641      	mov	r1, r8
 8004456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800445a:	4641      	mov	r1, r8
 800445c:	018a      	lsls	r2, r1, #6
 800445e:	4641      	mov	r1, r8
 8004460:	ebb2 0a01 	subs.w	sl, r2, r1
 8004464:	4649      	mov	r1, r9
 8004466:	eb63 0b01 	sbc.w	fp, r3, r1
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004476:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800447a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800447e:	4692      	mov	sl, r2
 8004480:	469b      	mov	fp, r3
 8004482:	4623      	mov	r3, r4
 8004484:	eb1a 0303 	adds.w	r3, sl, r3
 8004488:	623b      	str	r3, [r7, #32]
 800448a:	462b      	mov	r3, r5
 800448c:	eb4b 0303 	adc.w	r3, fp, r3
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800449e:	4629      	mov	r1, r5
 80044a0:	028b      	lsls	r3, r1, #10
 80044a2:	4621      	mov	r1, r4
 80044a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a8:	4621      	mov	r1, r4
 80044aa:	028a      	lsls	r2, r1, #10
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044b4:	2200      	movs	r2, #0
 80044b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80044b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80044ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80044be:	f7fb ff5f 	bl	8000380 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4613      	mov	r3, r2
 80044c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044cc:	4b41      	ldr	r3, [pc, #260]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	3301      	adds	r3, #1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80044de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044ee:	e0eb      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f0:	4b38      	ldr	r3, [pc, #224]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044fc:	4b35      	ldr	r3, [pc, #212]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d06b      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004508:	4b32      	ldr	r3, [pc, #200]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	2200      	movs	r2, #0
 8004510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004512:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	663b      	str	r3, [r7, #96]	@ 0x60
 800451c:	2300      	movs	r3, #0
 800451e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004520:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004524:	4622      	mov	r2, r4
 8004526:	462b      	mov	r3, r5
 8004528:	f04f 0000 	mov.w	r0, #0
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	0159      	lsls	r1, r3, #5
 8004532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004536:	0150      	lsls	r0, r2, #5
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4621      	mov	r1, r4
 800453e:	1a51      	subs	r1, r2, r1
 8004540:	61b9      	str	r1, [r7, #24]
 8004542:	4629      	mov	r1, r5
 8004544:	eb63 0301 	sbc.w	r3, r3, r1
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004556:	4659      	mov	r1, fp
 8004558:	018b      	lsls	r3, r1, #6
 800455a:	4651      	mov	r1, sl
 800455c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004560:	4651      	mov	r1, sl
 8004562:	018a      	lsls	r2, r1, #6
 8004564:	4651      	mov	r1, sl
 8004566:	ebb2 0801 	subs.w	r8, r2, r1
 800456a:	4659      	mov	r1, fp
 800456c:	eb63 0901 	sbc.w	r9, r3, r1
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800457c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004580:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004584:	4690      	mov	r8, r2
 8004586:	4699      	mov	r9, r3
 8004588:	4623      	mov	r3, r4
 800458a:	eb18 0303 	adds.w	r3, r8, r3
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	462b      	mov	r3, r5
 8004592:	eb49 0303 	adc.w	r3, r9, r3
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045a4:	4629      	mov	r1, r5
 80045a6:	024b      	lsls	r3, r1, #9
 80045a8:	4621      	mov	r1, r4
 80045aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045ae:	4621      	mov	r1, r4
 80045b0:	024a      	lsls	r2, r1, #9
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ba:	2200      	movs	r2, #0
 80045bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80045c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045c4:	f7fb fedc 	bl	8000380 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4613      	mov	r3, r2
 80045ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045d2:	e065      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x420>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e0:	4b3d      	ldr	r3, [pc, #244]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	2200      	movs	r2, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	4611      	mov	r1, r2
 80045ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f2:	2300      	movs	r3, #0
 80045f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80045f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80045fa:	4642      	mov	r2, r8
 80045fc:	464b      	mov	r3, r9
 80045fe:	f04f 0000 	mov.w	r0, #0
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	0159      	lsls	r1, r3, #5
 8004608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800460c:	0150      	lsls	r0, r2, #5
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4641      	mov	r1, r8
 8004614:	1a51      	subs	r1, r2, r1
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	4649      	mov	r1, r9
 800461a:	eb63 0301 	sbc.w	r3, r3, r1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800462c:	4659      	mov	r1, fp
 800462e:	018b      	lsls	r3, r1, #6
 8004630:	4651      	mov	r1, sl
 8004632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004636:	4651      	mov	r1, sl
 8004638:	018a      	lsls	r2, r1, #6
 800463a:	4651      	mov	r1, sl
 800463c:	1a54      	subs	r4, r2, r1
 800463e:	4659      	mov	r1, fp
 8004640:	eb63 0501 	sbc.w	r5, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	00eb      	lsls	r3, r5, #3
 800464e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004652:	00e2      	lsls	r2, r4, #3
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	4643      	mov	r3, r8
 800465a:	18e3      	adds	r3, r4, r3
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	464b      	mov	r3, r9
 8004660:	eb45 0303 	adc.w	r3, r5, r3
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004672:	4629      	mov	r1, r5
 8004674:	028b      	lsls	r3, r1, #10
 8004676:	4621      	mov	r1, r4
 8004678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800467c:	4621      	mov	r1, r4
 800467e:	028a      	lsls	r2, r1, #10
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004688:	2200      	movs	r2, #0
 800468a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800468c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800468e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004692:	f7fb fe75 	bl	8000380 <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4613      	mov	r3, r2
 800469c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046a0:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0f1b      	lsrs	r3, r3, #28
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80046ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046be:	e003      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046c0:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80046c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	37b8      	adds	r7, #184	@ 0xb8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	00f42400 	.word	0x00f42400

080046e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e28d      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8083 	beq.w	8004806 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004700:	4b94      	ldr	r3, [pc, #592]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b04      	cmp	r3, #4
 800470a:	d019      	beq.n	8004740 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800470c:	4b91      	ldr	r3, [pc, #580]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030c 	and.w	r3, r3, #12
        || \
 8004714:	2b08      	cmp	r3, #8
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004718:	4b8e      	ldr	r3, [pc, #568]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004724:	d00c      	beq.n	8004740 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004726:	4b8b      	ldr	r3, [pc, #556]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d112      	bne.n	8004758 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004732:	4b88      	ldr	r3, [pc, #544]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800473a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800473e:	d10b      	bne.n	8004758 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004740:	4b84      	ldr	r3, [pc, #528]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d05b      	beq.n	8004804 <HAL_RCC_OscConfig+0x124>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d157      	bne.n	8004804 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e25a      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004760:	d106      	bne.n	8004770 <HAL_RCC_OscConfig+0x90>
 8004762:	4b7c      	ldr	r3, [pc, #496]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7b      	ldr	r2, [pc, #492]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e01d      	b.n	80047ac <HAL_RCC_OscConfig+0xcc>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004778:	d10c      	bne.n	8004794 <HAL_RCC_OscConfig+0xb4>
 800477a:	4b76      	ldr	r3, [pc, #472]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a75      	ldr	r2, [pc, #468]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	4b73      	ldr	r3, [pc, #460]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a72      	ldr	r2, [pc, #456]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e00b      	b.n	80047ac <HAL_RCC_OscConfig+0xcc>
 8004794:	4b6f      	ldr	r3, [pc, #444]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a6e      	ldr	r2, [pc, #440]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 800479a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80047a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d013      	beq.n	80047dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fe f9b6 	bl	8002b24 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fe f9b2 	bl	8002b24 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	@ 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e21f      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ce:	4b61      	ldr	r3, [pc, #388]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0xdc>
 80047da:	e014      	b.n	8004806 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fe f9a2 	bl	8002b24 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e4:	f7fe f99e 	bl	8002b24 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b64      	cmp	r3, #100	@ 0x64
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e20b      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f6:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x104>
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d06f      	beq.n	80048f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004812:	4b50      	ldr	r3, [pc, #320]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b00      	cmp	r3, #0
 800481c:	d017      	beq.n	800484e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800481e:	4b4d      	ldr	r3, [pc, #308]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
        || \
 8004826:	2b08      	cmp	r3, #8
 8004828:	d105      	bne.n	8004836 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800482a:	4b4a      	ldr	r3, [pc, #296]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004836:	4b47      	ldr	r3, [pc, #284]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d11c      	bne.n	800487c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004842:	4b44      	ldr	r3, [pc, #272]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d116      	bne.n	800487c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	4b41      	ldr	r3, [pc, #260]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_RCC_OscConfig+0x186>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e1d3      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4937      	ldr	r1, [pc, #220]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487a:	e03a      	b.n	80048f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004884:	4b34      	ldr	r3, [pc, #208]	@ (8004958 <HAL_RCC_OscConfig+0x278>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fe f94b 	bl	8002b24 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004892:	f7fe f947 	bl	8002b24 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1b4      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b28      	ldr	r3, [pc, #160]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4925      	ldr	r1, [pc, #148]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
 80048c4:	e015      	b.n	80048f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c6:	4b24      	ldr	r3, [pc, #144]	@ (8004958 <HAL_RCC_OscConfig+0x278>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d4:	f7fe f926 	bl	8002b24 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e193      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d036      	beq.n	800496c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d016      	beq.n	8004934 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fe f90a 	bl	8002b24 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004914:	f7fe f906 	bl	8002b24 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e173      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_OscConfig+0x274>)
 8004928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x234>
 8004932:	e01b      	b.n	800496c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004934:	4b09      	ldr	r3, [pc, #36]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fe f8f3 	bl	8002b24 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	e00e      	b.n	8004960 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004942:	f7fe f8ef 	bl	8002b24 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d907      	bls.n	8004960 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e15c      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
 8004954:	40023800 	.word	0x40023800
 8004958:	42470000 	.word	0x42470000
 800495c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004960:	4b8a      	ldr	r3, [pc, #552]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ea      	bne.n	8004942 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8097 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b83      	ldr	r3, [pc, #524]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10f      	bne.n	80049aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	4a7e      	ldr	r2, [pc, #504]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004998:	6413      	str	r3, [r2, #64]	@ 0x40
 800499a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b79      	ldr	r3, [pc, #484]	@ (8004b90 <HAL_RCC_OscConfig+0x4b0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d118      	bne.n	80049e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b6:	4b76      	ldr	r3, [pc, #472]	@ (8004b90 <HAL_RCC_OscConfig+0x4b0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a75      	ldr	r2, [pc, #468]	@ (8004b90 <HAL_RCC_OscConfig+0x4b0>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c2:	f7fe f8af 	bl	8002b24 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ca:	f7fe f8ab 	bl	8002b24 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e118      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004b90 <HAL_RCC_OscConfig+0x4b0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x31e>
 80049f0:	4b66      	ldr	r3, [pc, #408]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	4a65      	ldr	r2, [pc, #404]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fc:	e01c      	b.n	8004a38 <HAL_RCC_OscConfig+0x358>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x340>
 8004a06:	4b61      	ldr	r3, [pc, #388]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	4a60      	ldr	r2, [pc, #384]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a12:	4b5e      	ldr	r3, [pc, #376]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a16:	4a5d      	ldr	r2, [pc, #372]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0x358>
 8004a20:	4b5a      	ldr	r3, [pc, #360]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a24:	4a59      	ldr	r2, [pc, #356]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a2c:	4b57      	ldr	r3, [pc, #348]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a30:	4a56      	ldr	r2, [pc, #344]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a32:	f023 0304 	bic.w	r3, r3, #4
 8004a36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fe f870 	bl	8002b24 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fe f86c 	bl	8002b24 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0d7      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ee      	beq.n	8004a48 <HAL_RCC_OscConfig+0x368>
 8004a6a:	e014      	b.n	8004a96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7fe f85a 	bl	8002b24 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a74:	f7fe f856 	bl	8002b24 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0c1      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8a:	4b40      	ldr	r3, [pc, #256]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ee      	bne.n	8004a74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	4a3a      	ldr	r2, [pc, #232]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80ad 	beq.w	8004c0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ab2:	4b36      	ldr	r3, [pc, #216]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d060      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d145      	bne.n	8004b52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b33      	ldr	r3, [pc, #204]	@ (8004b94 <HAL_RCC_OscConfig+0x4b4>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe f82a 	bl	8002b24 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fe f826 	bl	8002b24 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e093      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	4b29      	ldr	r3, [pc, #164]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	491b      	ldr	r1, [pc, #108]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <HAL_RCC_OscConfig+0x4b4>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fd fffb 	bl	8002b24 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fd fff7 	bl	8002b24 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e064      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x452>
 8004b50:	e05c      	b.n	8004c0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <HAL_RCC_OscConfig+0x4b4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fd ffe4 	bl	8002b24 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fd ffe0 	bl	8002b24 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e04d      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <HAL_RCC_OscConfig+0x4ac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x480>
 8004b7e:	e045      	b.n	8004c0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e040      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40007000 	.word	0x40007000
 8004b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b98:	4b1f      	ldr	r3, [pc, #124]	@ (8004c18 <HAL_RCC_OscConfig+0x538>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d030      	beq.n	8004c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d129      	bne.n	8004c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d122      	bne.n	8004c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d119      	bne.n	8004c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	3b01      	subs	r3, #1
 8004be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d10f      	bne.n	8004c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800

08004c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e041      	b.n	8004cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fd fad8 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f000 fd96 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e04e      	b.n	8004d72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a23      	ldr	r2, [pc, #140]	@ (8004d80 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d022      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x80>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfe:	d01d      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d018      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x80>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d88 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x80>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1c      	ldr	r2, [pc, #112]	@ (8004d8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x80>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1b      	ldr	r2, [pc, #108]	@ (8004d90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x80>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a19      	ldr	r2, [pc, #100]	@ (8004d94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x80>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a18      	ldr	r2, [pc, #96]	@ (8004d98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d111      	bne.n	8004d60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b06      	cmp	r3, #6
 8004d4c:	d010      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5e:	e007      	b.n	8004d70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	40010400 	.word	0x40010400
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40001800 	.word	0x40001800

08004d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e041      	b.n	8004e32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f839 	bl	8004e3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 fcd6 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_TIM_PWM_Start+0x24>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e022      	b.n	8004eba <HAL_TIM_PWM_Start+0x6a>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d109      	bne.n	8004e8e <HAL_TIM_PWM_Start+0x3e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	e015      	b.n	8004eba <HAL_TIM_PWM_Start+0x6a>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x58>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e008      	b.n	8004eba <HAL_TIM_PWM_Start+0x6a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	bf14      	ite	ne
 8004eb4:	2301      	movne	r3, #1
 8004eb6:	2300      	moveq	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e07c      	b.n	8004fbc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x82>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ed0:	e013      	b.n	8004efa <HAL_TIM_PWM_Start+0xaa>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_PWM_Start+0x92>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ee0:	e00b      	b.n	8004efa <HAL_TIM_PWM_Start+0xaa>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0xa2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef0:	e003      	b.n	8004efa <HAL_TIM_PWM_Start+0xaa>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2201      	movs	r2, #1
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 ff32 	bl	8005d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc4 <HAL_TIM_PWM_Start+0x174>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_TIM_PWM_Start+0xcc>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc8 <HAL_TIM_PWM_Start+0x178>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <HAL_TIM_PWM_Start+0xd0>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_TIM_PWM_Start+0xd2>
 8004f20:	2300      	movs	r3, #0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a22      	ldr	r2, [pc, #136]	@ (8004fc4 <HAL_TIM_PWM_Start+0x174>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d022      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x136>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f48:	d01d      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x136>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <HAL_TIM_PWM_Start+0x17c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d018      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x136>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <HAL_TIM_PWM_Start+0x180>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x136>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <HAL_TIM_PWM_Start+0x184>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x136>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <HAL_TIM_PWM_Start+0x178>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x136>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_TIM_PWM_Start+0x188>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x136>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <HAL_TIM_PWM_Start+0x18c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d111      	bne.n	8004faa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b06      	cmp	r3, #6
 8004f96:	d010      	beq.n	8004fba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	e007      	b.n	8004fba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40010400 	.word	0x40010400
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40001800 	.word	0x40001800

08004fe0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e097      	b.n	8005124 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fc ffbd 	bl	8001f88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005024:	f023 0307 	bic.w	r3, r3, #7
 8005028:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f000 fba9 	bl	800578c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	4313      	orrs	r3, r2
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005080:	f023 030c 	bic.w	r3, r3, #12
 8005084:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800508c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	4313      	orrs	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	011a      	lsls	r2, r3, #4
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	031b      	lsls	r3, r3, #12
 80050b0:	4313      	orrs	r3, r2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	4313      	orrs	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800513c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005144:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800514c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005154:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d110      	bne.n	800517e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005162:	7b7b      	ldrb	r3, [r7, #13]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e069      	b.n	8005240 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800517c:	e031      	b.n	80051e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d110      	bne.n	80051a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d102      	bne.n	8005190 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800518a:	7b3b      	ldrb	r3, [r7, #12]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d001      	beq.n	8005194 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e055      	b.n	8005240 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051a4:	e01d      	b.n	80051e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d108      	bne.n	80051be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b2:	7b7b      	ldrb	r3, [r7, #13]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d102      	bne.n	80051be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051b8:	7b3b      	ldrb	r3, [r7, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d001      	beq.n	80051c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e03e      	b.n	8005240 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_TIM_Encoder_Start+0xc4>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d008      	beq.n	8005200 <HAL_TIM_Encoder_Start+0xd4>
 80051ee:	e00f      	b.n	8005210 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fdb7 	bl	8005d6c <TIM_CCxChannelCmd>
      break;
 80051fe:	e016      	b.n	800522e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	2104      	movs	r1, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fdaf 	bl	8005d6c <TIM_CCxChannelCmd>
      break;
 800520e:	e00e      	b.n	800522e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fda7 	bl	8005d6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	2104      	movs	r1, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fda0 	bl	8005d6c <TIM_CCxChannelCmd>
      break;
 800522c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0202 	mvn.w	r2, #2
 800527c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa5b 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa4d 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa5e 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0204 	mvn.w	r2, #4
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa35 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa27 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa38 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0208 	mvn.w	r2, #8
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2204      	movs	r2, #4
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa0f 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa01 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa12 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d020      	beq.n	8005390 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01b      	beq.n	8005390 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0210 	mvn.w	r2, #16
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2208      	movs	r2, #8
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9e9 	bl	800574e <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9db 	bl	800573a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9ec 	bl	8005762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0201 	mvn.w	r2, #1
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc fba6 	bl	8001b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fd76 	bl	8005ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9bd 	bl	8005776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0220 	mvn.w	r2, #32
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fd48 	bl	8005eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005442:	2302      	movs	r3, #2
 8005444:	e0ae      	b.n	80055a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b0c      	cmp	r3, #12
 8005452:	f200 809f 	bhi.w	8005594 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005456:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005491 	.word	0x08005491
 8005460:	08005595 	.word	0x08005595
 8005464:	08005595 	.word	0x08005595
 8005468:	08005595 	.word	0x08005595
 800546c:	080054d1 	.word	0x080054d1
 8005470:	08005595 	.word	0x08005595
 8005474:	08005595 	.word	0x08005595
 8005478:	08005595 	.word	0x08005595
 800547c:	08005513 	.word	0x08005513
 8005480:	08005595 	.word	0x08005595
 8005484:	08005595 	.word	0x08005595
 8005488:	08005595 	.word	0x08005595
 800548c:	08005553 	.word	0x08005553
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fa1e 	bl	80058d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0208 	orr.w	r2, r2, #8
 80054aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0204 	bic.w	r2, r2, #4
 80054ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6999      	ldr	r1, [r3, #24]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	619a      	str	r2, [r3, #24]
      break;
 80054ce:	e064      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fa6e 	bl	80059b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6999      	ldr	r1, [r3, #24]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	619a      	str	r2, [r3, #24]
      break;
 8005510:	e043      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fac3 	bl	8005aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0208 	orr.w	r2, r2, #8
 800552c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0204 	bic.w	r2, r2, #4
 800553c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69d9      	ldr	r1, [r3, #28]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	61da      	str	r2, [r3, #28]
      break;
 8005550:	e023      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fb17 	bl	8005b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69d9      	ldr	r1, [r3, #28]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	021a      	lsls	r2, r3, #8
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	61da      	str	r2, [r3, #28]
      break;
 8005592:	e002      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	75fb      	strb	r3, [r7, #23]
      break;
 8005598:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIM_ConfigClockSource+0x1c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e0b4      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x186>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005600:	d03e      	beq.n	8005680 <HAL_TIM_ConfigClockSource+0xd4>
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005606:	f200 8087 	bhi.w	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560e:	f000 8086 	beq.w	800571e <HAL_TIM_ConfigClockSource+0x172>
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005616:	d87f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b70      	cmp	r3, #112	@ 0x70
 800561a:	d01a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0xa6>
 800561c:	2b70      	cmp	r3, #112	@ 0x70
 800561e:	d87b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b60      	cmp	r3, #96	@ 0x60
 8005622:	d050      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005624:	2b60      	cmp	r3, #96	@ 0x60
 8005626:	d877      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b50      	cmp	r3, #80	@ 0x50
 800562a:	d03c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xfa>
 800562c:	2b50      	cmp	r3, #80	@ 0x50
 800562e:	d873      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d058      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	d86f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b30      	cmp	r3, #48	@ 0x30
 800563a:	d064      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b30      	cmp	r3, #48	@ 0x30
 800563e:	d86b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d060      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d867      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d05c      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 800564c:	2b10      	cmp	r3, #16
 800564e:	d05a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 8005650:	e062      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005662:	f000 fb63 	bl	8005d2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	609a      	str	r2, [r3, #8]
      break;
 800567e:	e04f      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005690:	f000 fb4c 	bl	8005d2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a2:	609a      	str	r2, [r3, #8]
      break;
 80056a4:	e03c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 fac0 	bl	8005c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2150      	movs	r1, #80	@ 0x50
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb19 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 80056c4:	e02c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 fadf 	bl	8005c96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2160      	movs	r1, #96	@ 0x60
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fb09 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 80056e4:	e01c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	461a      	mov	r2, r3
 80056f4:	f000 faa0 	bl	8005c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2140      	movs	r1, #64	@ 0x40
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 faf9 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005704:	e00c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f000 faf0 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005716:	e003      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e000      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800571e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a43      	ldr	r2, [pc, #268]	@ (80058ac <TIM_Base_SetConfig+0x120>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057aa:	d00f      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a40      	ldr	r2, [pc, #256]	@ (80058b0 <TIM_Base_SetConfig+0x124>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00b      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a3f      	ldr	r2, [pc, #252]	@ (80058b4 <TIM_Base_SetConfig+0x128>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d007      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3e      	ldr	r2, [pc, #248]	@ (80058b8 <TIM_Base_SetConfig+0x12c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3d      	ldr	r2, [pc, #244]	@ (80058bc <TIM_Base_SetConfig+0x130>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d108      	bne.n	80057de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a32      	ldr	r2, [pc, #200]	@ (80058ac <TIM_Base_SetConfig+0x120>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d02b      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ec:	d027      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <TIM_Base_SetConfig+0x124>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d023      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2e      	ldr	r2, [pc, #184]	@ (80058b4 <TIM_Base_SetConfig+0x128>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01f      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <TIM_Base_SetConfig+0x12c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01b      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2c      	ldr	r2, [pc, #176]	@ (80058bc <TIM_Base_SetConfig+0x130>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d017      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2b      	ldr	r2, [pc, #172]	@ (80058c0 <TIM_Base_SetConfig+0x134>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2a      	ldr	r2, [pc, #168]	@ (80058c4 <TIM_Base_SetConfig+0x138>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00f      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a29      	ldr	r2, [pc, #164]	@ (80058c8 <TIM_Base_SetConfig+0x13c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00b      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a28      	ldr	r2, [pc, #160]	@ (80058cc <TIM_Base_SetConfig+0x140>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a27      	ldr	r2, [pc, #156]	@ (80058d0 <TIM_Base_SetConfig+0x144>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a26      	ldr	r2, [pc, #152]	@ (80058d4 <TIM_Base_SetConfig+0x148>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d108      	bne.n	8005850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a0e      	ldr	r2, [pc, #56]	@ (80058ac <TIM_Base_SetConfig+0x120>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_Base_SetConfig+0xf2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a10      	ldr	r2, [pc, #64]	@ (80058bc <TIM_Base_SetConfig+0x130>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d103      	bne.n	8005886 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f043 0204 	orr.w	r2, r3, #4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	601a      	str	r2, [r3, #0]
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	40001800 	.word	0x40001800
 80058d0:	40001c00 	.word	0x40001c00
 80058d4:	40002000 	.word	0x40002000

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f023 0201 	bic.w	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0302 	bic.w	r3, r3, #2
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a20      	ldr	r2, [pc, #128]	@ (80059b0 <TIM_OC1_SetConfig+0xd8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC1_SetConfig+0x64>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10c      	bne.n	8005956 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0308 	bic.w	r3, r3, #8
 8005942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 0304 	bic.w	r3, r3, #4
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <TIM_OC1_SetConfig+0xd8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC1_SetConfig+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a14      	ldr	r2, [pc, #80]	@ (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d111      	bne.n	800598a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40010400 	.word	0x40010400

080059b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f023 0210 	bic.w	r2, r3, #16
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f023 0320 	bic.w	r3, r3, #32
 8005a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <TIM_OC2_SetConfig+0xe4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_OC2_SetConfig+0x68>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	@ (8005aa0 <TIM_OC2_SetConfig+0xe8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10d      	bne.n	8005a3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a17      	ldr	r2, [pc, #92]	@ (8005a9c <TIM_OC2_SetConfig+0xe4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC2_SetConfig+0x94>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a16      	ldr	r2, [pc, #88]	@ (8005aa0 <TIM_OC2_SetConfig+0xe8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d113      	bne.n	8005a74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a21      	ldr	r2, [pc, #132]	@ (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC3_SetConfig+0x66>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a20      	ldr	r2, [pc, #128]	@ (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a16      	ldr	r2, [pc, #88]	@ (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0x92>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	@ (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d113      	bne.n	8005b5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	031b      	lsls	r3, r3, #12
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	@ (8005c30 <TIM_OC4_SetConfig+0xa4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC4_SetConfig+0x68>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a11      	ldr	r2, [pc, #68]	@ (8005c34 <TIM_OC4_SetConfig+0xa8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d109      	bne.n	8005c08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400

08005c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 030a 	bic.w	r3, r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f023 0210 	bic.w	r2, r3, #16
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	031b      	lsls	r3, r3, #12
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f043 0307 	orr.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2201      	movs	r2, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	401a      	ands	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e05a      	b.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d022      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1c:	d01d      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1d      	ldr	r2, [pc, #116]	@ (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d018      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00e      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a18      	ldr	r2, [pc, #96]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a15      	ldr	r2, [pc, #84]	@ (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10c      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40010400 	.word	0x40010400
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40001800 	.word	0x40001800

08005eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e042      	b.n	8005f70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fc f9f8 	bl	80022f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	@ 0x24
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fff5 	bl	8006f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	@ 0x30
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d162      	bne.n	8006058 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_UART_Transmit_DMA+0x26>
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e05b      	b.n	800605a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	88fa      	ldrh	r2, [r7, #6]
 8005fb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	@ 0x21
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc6:	4a27      	ldr	r2, [pc, #156]	@ (8006064 <HAL_UART_Transmit_DMA+0xec>)
 8005fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	4a26      	ldr	r2, [pc, #152]	@ (8006068 <HAL_UART_Transmit_DMA+0xf0>)
 8005fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	4a25      	ldr	r2, [pc, #148]	@ (800606c <HAL_UART_Transmit_DMA+0xf4>)
 8005fd8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fde:	2200      	movs	r2, #0
 8005fe0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005fe2:	f107 0308 	add.w	r3, r7, #8
 8005fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	f7fd fad9 	bl	80035b0 <HAL_DMA_Start_IT>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2210      	movs	r2, #16
 8006008:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e021      	b.n	800605a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800601e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3314      	adds	r3, #20
 8006026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	617b      	str	r3, [r7, #20]
   return(result);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3314      	adds	r3, #20
 800603e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006040:	627a      	str	r2, [r7, #36]	@ 0x24
 8006042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6a39      	ldr	r1, [r7, #32]
 8006046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	61fb      	str	r3, [r7, #28]
   return(result);
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e5      	bne.n	8006020 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3730      	adds	r7, #48	@ 0x30
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	08006789 	.word	0x08006789
 8006068:	08006823 	.word	0x08006823
 800606c:	080069a7 	.word	0x080069a7

08006070 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b20      	cmp	r3, #32
 8006088:	d112      	bne.n	80060b0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <HAL_UART_Receive_DMA+0x26>
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e00b      	b.n	80060b2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fcc8 	bl	8006a3c <UART_Start_Receive_DMA>
 80060ac:	4603      	mov	r3, r0
 80060ae:	e000      	b.n	80060b2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80060b0:	2302      	movs	r3, #2
  }
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b090      	sub	sp, #64	@ 0x40
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d0:	2b80      	cmp	r3, #128	@ 0x80
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b21      	cmp	r3, #33	@ 0x21
 80060e6:	d128      	bne.n	800613a <HAL_UART_DMAStop+0x80>
 80060e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d025      	beq.n	800613a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	623b      	str	r3, [r7, #32]
   return(result);
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006104:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800610e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800611c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612e:	4618      	mov	r0, r3
 8006130:	f7fd fa96 	bl	8003660 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fd27 	bl	8006b88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006144:	2b40      	cmp	r3, #64	@ 0x40
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b22      	cmp	r3, #34	@ 0x22
 800615a:	d128      	bne.n	80061ae <HAL_UART_DMAStop+0xf4>
 800615c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d025      	beq.n	80061ae <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3314      	adds	r3, #20
 8006168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	60fb      	str	r3, [r7, #12]
   return(result);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006178:	637b      	str	r3, [r7, #52]	@ 0x34
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006182:	61fa      	str	r2, [r7, #28]
 8006184:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	69b9      	ldr	r1, [r7, #24]
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	617b      	str	r3, [r7, #20]
   return(result);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fd fa5c 	bl	8003660 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fd15 	bl	8006bd8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3740      	adds	r7, #64	@ 0x40
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b0ba      	sub	sp, #232	@ 0xe8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80061f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10f      	bne.n	800621e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <HAL_UART_IRQHandler+0x66>
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fdba 	bl	8006d90 <UART_Receive_IT>
      return;
 800621c:	e273      	b.n	8006706 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800621e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80de 	beq.w	80063e4 <HAL_UART_IRQHandler+0x22c>
 8006228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006238:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80d1 	beq.w	80063e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_UART_IRQHandler+0xae>
 800624e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	f043 0201 	orr.w	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <HAL_UART_IRQHandler+0xd2>
 8006272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006282:	f043 0202 	orr.w	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <HAL_UART_IRQHandler+0xf6>
 8006296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a6:	f043 0204 	orr.w	r2, r3, #4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d011      	beq.n	80062de <HAL_UART_IRQHandler+0x126>
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d6:	f043 0208 	orr.w	r2, r3, #8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 820a 	beq.w	80066fc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_UART_IRQHandler+0x14e>
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fd45 	bl	8006d90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006310:	2b40      	cmp	r3, #64	@ 0x40
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <HAL_UART_IRQHandler+0x17a>
 800632a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d04f      	beq.n	80063d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fc50 	bl	8006bd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d141      	bne.n	80063ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3314      	adds	r3, #20
 800634c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800635c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006360:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3314      	adds	r3, #20
 800636e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006372:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800637e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800638a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1d9      	bne.n	8006346 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d013      	beq.n	80063c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800639e:	4a8a      	ldr	r2, [pc, #552]	@ (80065c8 <HAL_UART_IRQHandler+0x410>)
 80063a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd f9ca 	bl	8003740 <HAL_DMA_Abort_IT>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	e00e      	b.n	80063e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f9ca 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	e00a      	b.n	80063e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f9c6 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	e006      	b.n	80063e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f9c2 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80063de:	e18d      	b.n	80066fc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	bf00      	nop
    return;
 80063e2:	e18b      	b.n	80066fc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	f040 8167 	bne.w	80066bc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8160 	beq.w	80066bc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80063fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8159 	beq.w	80066bc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800640a:	2300      	movs	r3, #0
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	f040 80ce 	bne.w	80065cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800643c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80a9 	beq.w	8006598 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800644a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800644e:	429a      	cmp	r2, r3
 8006450:	f080 80a2 	bcs.w	8006598 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800645a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006466:	f000 8088 	beq.w	800657a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800649a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d9      	bne.n	800646a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3314      	adds	r3, #20
 80064bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e1      	bne.n	80064b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3314      	adds	r3, #20
 80064f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006516:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006518:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800651c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e3      	bne.n	80064f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800655c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800655e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006562:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800656a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e3      	bne.n	8006538 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd f873 	bl	8003660 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006588:	b29b      	uxth	r3, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	b29b      	uxth	r3, r3
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f8ed 	bl	8006770 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006596:	e0b3      	b.n	8006700 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800659c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065a0:	429a      	cmp	r2, r3
 80065a2:	f040 80ad 	bne.w	8006700 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065b0:	f040 80a6 	bne.w	8006700 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f8d5 	bl	8006770 <HAL_UARTEx_RxEventCallback>
      return;
 80065c6:	e09b      	b.n	8006700 <HAL_UART_IRQHandler+0x548>
 80065c8:	08006c9f 	.word	0x08006c9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 808e 	beq.w	8006704 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80065e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8089 	beq.w	8006704 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006608:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006616:	647a      	str	r2, [r7, #68]	@ 0x44
 8006618:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800661c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e3      	bne.n	80065f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	623b      	str	r3, [r7, #32]
   return(result);
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3314      	adds	r3, #20
 800664a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800664e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e3      	bne.n	800662a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0310 	bic.w	r3, r3, #16
 8006686:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006694:	61fa      	str	r2, [r7, #28]
 8006696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	69b9      	ldr	r1, [r7, #24]
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	617b      	str	r3, [r7, #20]
   return(result);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e3      	bne.n	8006670 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f85b 	bl	8006770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ba:	e023      	b.n	8006704 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <HAL_UART_IRQHandler+0x524>
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 faf3 	bl	8006cc0 <UART_Transmit_IT>
    return;
 80066da:	e014      	b.n	8006706 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00e      	beq.n	8006706 <HAL_UART_IRQHandler+0x54e>
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb33 	bl	8006d60 <UART_EndTransmit_IT>
    return;
 80066fa:	e004      	b.n	8006706 <HAL_UART_IRQHandler+0x54e>
    return;
 80066fc:	bf00      	nop
 80066fe:	e002      	b.n	8006706 <HAL_UART_IRQHandler+0x54e>
      return;
 8006700:	bf00      	nop
 8006702:	e000      	b.n	8006706 <HAL_UART_IRQHandler+0x54e>
      return;
 8006704:	bf00      	nop
  }
}
 8006706:	37e8      	adds	r7, #232	@ 0xe8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b090      	sub	sp, #64	@ 0x40
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d137      	bne.n	8006814 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80067a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a6:	2200      	movs	r2, #0
 80067a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3314      	adds	r3, #20
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	623b      	str	r3, [r7, #32]
   return(result);
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80067cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067fe:	61fa      	str	r2, [r7, #28]
 8006800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	69b9      	ldr	r1, [r7, #24]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	617b      	str	r3, [r7, #20]
   return(result);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e5      	bne.n	80067de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006812:	e002      	b.n	800681a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006814:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006816:	f7ff ff79 	bl	800670c <HAL_UART_TxCpltCallback>
}
 800681a:	bf00      	nop
 800681c:	3740      	adds	r7, #64	@ 0x40
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff ff75 	bl	8006720 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b09c      	sub	sp, #112	@ 0x70
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006856:	2b00      	cmp	r3, #0
 8006858:	d172      	bne.n	8006940 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800685a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685c:	2200      	movs	r2, #0
 800685e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006876:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006880:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006882:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006886:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800688e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3314      	adds	r3, #20
 800689a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80068ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3314      	adds	r3, #20
 80068b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80068b4:	647a      	str	r2, [r7, #68]	@ 0x44
 80068b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	623b      	str	r3, [r7, #32]
   return(result);
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068de:	663b      	str	r3, [r7, #96]	@ 0x60
 80068e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80068ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e5      	bne.n	80068c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	2b01      	cmp	r3, #1
 800690a:	d119      	bne.n	8006940 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	60fb      	str	r3, [r7, #12]
   return(result);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0310 	bic.w	r3, r3, #16
 8006922:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800692c:	61fa      	str	r2, [r7, #28]
 800692e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	69b9      	ldr	r1, [r7, #24]
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	617b      	str	r3, [r7, #20]
   return(result);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e5      	bne.n	800690c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006942:	2200      	movs	r2, #0
 8006944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694a:	2b01      	cmp	r3, #1
 800694c:	d106      	bne.n	800695c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800694e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006952:	4619      	mov	r1, r3
 8006954:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006956:	f7ff ff0b 	bl	8006770 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800695a:	e002      	b.n	8006962 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800695c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800695e:	f7ff fee9 	bl	8006734 <HAL_UART_RxCpltCallback>
}
 8006962:	bf00      	nop
 8006964:	3770      	adds	r7, #112	@ 0x70
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	2b01      	cmp	r3, #1
 8006984:	d108      	bne.n	8006998 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	b29b      	uxth	r3, r3
 800698e:	4619      	mov	r1, r3
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff feed 	bl	8006770 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006996:	e002      	b.n	800699e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fed5 	bl	8006748 <HAL_UART_RxHalfCpltCallback>
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c2:	2b80      	cmp	r3, #128	@ 0x80
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b21      	cmp	r3, #33	@ 0x21
 80069d8:	d108      	bne.n	80069ec <UART_DMAError+0x46>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80069e6:	68b8      	ldr	r0, [r7, #8]
 80069e8:	f000 f8ce 	bl	8006b88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f6:	2b40      	cmp	r3, #64	@ 0x40
 80069f8:	bf0c      	ite	eq
 80069fa:	2301      	moveq	r3, #1
 80069fc:	2300      	movne	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b22      	cmp	r3, #34	@ 0x22
 8006a0c:	d108      	bne.n	8006a20 <UART_DMAError+0x7a>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d005      	beq.n	8006a20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2200      	movs	r2, #0
 8006a18:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006a1a:	68b8      	ldr	r0, [r7, #8]
 8006a1c:	f000 f8dc 	bl	8006bd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a24:	f043 0210 	orr.w	r2, r3, #16
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	f7ff fe95 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b098      	sub	sp, #96	@ 0x60
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2222      	movs	r2, #34	@ 0x22
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a68:	4a44      	ldr	r2, [pc, #272]	@ (8006b7c <UART_Start_Receive_DMA+0x140>)
 8006a6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a70:	4a43      	ldr	r2, [pc, #268]	@ (8006b80 <UART_Start_Receive_DMA+0x144>)
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a78:	4a42      	ldr	r2, [pc, #264]	@ (8006b84 <UART_Start_Receive_DMA+0x148>)
 8006a7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a80:	2200      	movs	r2, #0
 8006a82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a84:	f107 0308 	add.w	r3, r7, #8
 8006a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	88fb      	ldrh	r3, [r7, #6]
 8006a9c:	f7fc fd88 	bl	80035b0 <HAL_DMA_Start_IT>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2210      	movs	r2, #16
 8006aaa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e05d      	b.n	8006b74 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d019      	beq.n	8006b0a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006af6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006af8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006afc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3314      	adds	r3, #20
 8006b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e5      	bne.n	8006b0a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3314      	adds	r3, #20
 8006b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6a39      	ldr	r1, [r7, #32]
 8006b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3760      	adds	r7, #96	@ 0x60
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	0800683f 	.word	0x0800683f
 8006b80:	0800696b 	.word	0x0800696b
 8006b84:	080069a7 	.word	0x080069a7

08006b88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	@ 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	61ba      	str	r2, [r7, #24]
 8006bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6979      	ldr	r1, [r7, #20]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006bcc:	bf00      	nop
 8006bce:	3724      	adds	r7, #36	@ 0x24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b095      	sub	sp, #84	@ 0x54
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c00:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3314      	adds	r3, #20
 8006c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3314      	adds	r3, #20
 8006c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d119      	bne.n	8006c84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c70:	61ba      	str	r2, [r7, #24]
 8006c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6979      	ldr	r1, [r7, #20]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e5      	bne.n	8006c50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c92:	bf00      	nop
 8006c94:	3754      	adds	r7, #84	@ 0x54
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006caa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff fd52 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b21      	cmp	r3, #33	@ 0x21
 8006cd2:	d13e      	bne.n	8006d52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cdc:	d114      	bne.n	8006d08 <UART_Transmit_IT+0x48>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d110      	bne.n	8006d08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]
 8006d06:	e008      	b.n	8006d1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	1c59      	adds	r1, r3, #1
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6211      	str	r1, [r2, #32]
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	4619      	mov	r1, r3
 8006d28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e000      	b.n	8006d54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d52:	2302      	movs	r3, #2
  }
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff fcc3 	bl	800670c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08c      	sub	sp, #48	@ 0x30
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b22      	cmp	r3, #34	@ 0x22
 8006daa:	f040 80aa 	bne.w	8006f02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db6:	d115      	bne.n	8006de4 <UART_Receive_IT+0x54>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d111      	bne.n	8006de4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	1c9a      	adds	r2, r3, #2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006de2:	e024      	b.n	8006e2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df2:	d007      	beq.n	8006e04 <UART_Receive_IT+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <UART_Receive_IT+0x82>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d106      	bne.n	8006e12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	e008      	b.n	8006e24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d15d      	bne.n	8006efe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0220 	bic.w	r2, r2, #32
 8006e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695a      	ldr	r2, [r3, #20]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0201 	bic.w	r2, r2, #1
 8006e70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d135      	bne.n	8006ef4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	330c      	adds	r3, #12
 8006e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f023 0310 	bic.w	r3, r3, #16
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eae:	623a      	str	r2, [r7, #32]
 8006eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	69f9      	ldr	r1, [r7, #28]
 8006eb4:	6a3a      	ldr	r2, [r7, #32]
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d10a      	bne.n	8006ee6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff fc3f 	bl	8006770 <HAL_UARTEx_RxEventCallback>
 8006ef2:	e002      	b.n	8006efa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fc1d 	bl	8006734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e002      	b.n	8006f04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e000      	b.n	8006f04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3730      	adds	r7, #48	@ 0x30
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f10:	b0c0      	sub	sp, #256	@ 0x100
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	68d9      	ldr	r1, [r3, #12]
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	ea40 0301 	orr.w	r3, r0, r1
 8006f34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f64:	f021 010c 	bic.w	r1, r1, #12
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f72:	430b      	orrs	r3, r1
 8006f74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f86:	6999      	ldr	r1, [r3, #24]
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	ea40 0301 	orr.w	r3, r0, r1
 8006f92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b8f      	ldr	r3, [pc, #572]	@ (80071d8 <UART_SetConfig+0x2cc>)
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d005      	beq.n	8006fac <UART_SetConfig+0xa0>
 8006fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80071dc <UART_SetConfig+0x2d0>)
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d104      	bne.n	8006fb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fac:	f7fd f922 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 8006fb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fb4:	e003      	b.n	8006fbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fb6:	f7fd f909 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8006fba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc8:	f040 810c 	bne.w	80071e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006fda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fde:	4622      	mov	r2, r4
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	1891      	adds	r1, r2, r2
 8006fe4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fe6:	415b      	adcs	r3, r3
 8006fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fee:	4621      	mov	r1, r4
 8006ff0:	eb12 0801 	adds.w	r8, r2, r1
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	eb43 0901 	adc.w	r9, r3, r1
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800700a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800700e:	4690      	mov	r8, r2
 8007010:	4699      	mov	r9, r3
 8007012:	4623      	mov	r3, r4
 8007014:	eb18 0303 	adds.w	r3, r8, r3
 8007018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800701c:	462b      	mov	r3, r5
 800701e:	eb49 0303 	adc.w	r3, r9, r3
 8007022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007032:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800703a:	460b      	mov	r3, r1
 800703c:	18db      	adds	r3, r3, r3
 800703e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007040:	4613      	mov	r3, r2
 8007042:	eb42 0303 	adc.w	r3, r2, r3
 8007046:	657b      	str	r3, [r7, #84]	@ 0x54
 8007048:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800704c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007050:	f7f9 f996 	bl	8000380 <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4b61      	ldr	r3, [pc, #388]	@ (80071e0 <UART_SetConfig+0x2d4>)
 800705a:	fba3 2302 	umull	r2, r3, r3, r2
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	011c      	lsls	r4, r3, #4
 8007062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007066:	2200      	movs	r2, #0
 8007068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800706c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007074:	4642      	mov	r2, r8
 8007076:	464b      	mov	r3, r9
 8007078:	1891      	adds	r1, r2, r2
 800707a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800707c:	415b      	adcs	r3, r3
 800707e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007084:	4641      	mov	r1, r8
 8007086:	eb12 0a01 	adds.w	sl, r2, r1
 800708a:	4649      	mov	r1, r9
 800708c:	eb43 0b01 	adc.w	fp, r3, r1
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800709c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070a4:	4692      	mov	sl, r2
 80070a6:	469b      	mov	fp, r3
 80070a8:	4643      	mov	r3, r8
 80070aa:	eb1a 0303 	adds.w	r3, sl, r3
 80070ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070b2:	464b      	mov	r3, r9
 80070b4:	eb4b 0303 	adc.w	r3, fp, r3
 80070b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070d0:	460b      	mov	r3, r1
 80070d2:	18db      	adds	r3, r3, r3
 80070d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d6:	4613      	mov	r3, r2
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070e6:	f7f9 f94b 	bl	8000380 <__aeabi_uldivmod>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4611      	mov	r1, r2
 80070f0:	4b3b      	ldr	r3, [pc, #236]	@ (80071e0 <UART_SetConfig+0x2d4>)
 80070f2:	fba3 2301 	umull	r2, r3, r3, r1
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	2264      	movs	r2, #100	@ 0x64
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	1acb      	subs	r3, r1, r3
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007106:	4b36      	ldr	r3, [pc, #216]	@ (80071e0 <UART_SetConfig+0x2d4>)
 8007108:	fba3 2302 	umull	r2, r3, r3, r2
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007114:	441c      	add	r4, r3
 8007116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800711a:	2200      	movs	r2, #0
 800711c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007120:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007124:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007128:	4642      	mov	r2, r8
 800712a:	464b      	mov	r3, r9
 800712c:	1891      	adds	r1, r2, r2
 800712e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007130:	415b      	adcs	r3, r3
 8007132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007138:	4641      	mov	r1, r8
 800713a:	1851      	adds	r1, r2, r1
 800713c:	6339      	str	r1, [r7, #48]	@ 0x30
 800713e:	4649      	mov	r1, r9
 8007140:	414b      	adcs	r3, r1
 8007142:	637b      	str	r3, [r7, #52]	@ 0x34
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007150:	4659      	mov	r1, fp
 8007152:	00cb      	lsls	r3, r1, #3
 8007154:	4651      	mov	r1, sl
 8007156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800715a:	4651      	mov	r1, sl
 800715c:	00ca      	lsls	r2, r1, #3
 800715e:	4610      	mov	r0, r2
 8007160:	4619      	mov	r1, r3
 8007162:	4603      	mov	r3, r0
 8007164:	4642      	mov	r2, r8
 8007166:	189b      	adds	r3, r3, r2
 8007168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800716c:	464b      	mov	r3, r9
 800716e:	460a      	mov	r2, r1
 8007170:	eb42 0303 	adc.w	r3, r2, r3
 8007174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007184:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800718c:	460b      	mov	r3, r1
 800718e:	18db      	adds	r3, r3, r3
 8007190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007192:	4613      	mov	r3, r2
 8007194:	eb42 0303 	adc.w	r3, r2, r3
 8007198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800719a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800719e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071a2:	f7f9 f8ed 	bl	8000380 <__aeabi_uldivmod>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4b0d      	ldr	r3, [pc, #52]	@ (80071e0 <UART_SetConfig+0x2d4>)
 80071ac:	fba3 1302 	umull	r1, r3, r3, r2
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	2164      	movs	r1, #100	@ 0x64
 80071b4:	fb01 f303 	mul.w	r3, r1, r3
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	3332      	adds	r3, #50	@ 0x32
 80071be:	4a08      	ldr	r2, [pc, #32]	@ (80071e0 <UART_SetConfig+0x2d4>)
 80071c0:	fba2 2303 	umull	r2, r3, r2, r3
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	f003 0207 	and.w	r2, r3, #7
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4422      	add	r2, r4
 80071d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071d4:	e106      	b.n	80073e4 <UART_SetConfig+0x4d8>
 80071d6:	bf00      	nop
 80071d8:	40011000 	.word	0x40011000
 80071dc:	40011400 	.word	0x40011400
 80071e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	1891      	adds	r1, r2, r2
 80071fc:	6239      	str	r1, [r7, #32]
 80071fe:	415b      	adcs	r3, r3
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
 8007202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007206:	4641      	mov	r1, r8
 8007208:	1854      	adds	r4, r2, r1
 800720a:	4649      	mov	r1, r9
 800720c:	eb43 0501 	adc.w	r5, r3, r1
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	00eb      	lsls	r3, r5, #3
 800721a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800721e:	00e2      	lsls	r2, r4, #3
 8007220:	4614      	mov	r4, r2
 8007222:	461d      	mov	r5, r3
 8007224:	4643      	mov	r3, r8
 8007226:	18e3      	adds	r3, r4, r3
 8007228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800722c:	464b      	mov	r3, r9
 800722e:	eb45 0303 	adc.w	r3, r5, r3
 8007232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007242:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007252:	4629      	mov	r1, r5
 8007254:	008b      	lsls	r3, r1, #2
 8007256:	4621      	mov	r1, r4
 8007258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800725c:	4621      	mov	r1, r4
 800725e:	008a      	lsls	r2, r1, #2
 8007260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007264:	f7f9 f88c 	bl	8000380 <__aeabi_uldivmod>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4b60      	ldr	r3, [pc, #384]	@ (80073f0 <UART_SetConfig+0x4e4>)
 800726e:	fba3 2302 	umull	r2, r3, r3, r2
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	011c      	lsls	r4, r3, #4
 8007276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800727a:	2200      	movs	r2, #0
 800727c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007280:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007284:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007288:	4642      	mov	r2, r8
 800728a:	464b      	mov	r3, r9
 800728c:	1891      	adds	r1, r2, r2
 800728e:	61b9      	str	r1, [r7, #24]
 8007290:	415b      	adcs	r3, r3
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007298:	4641      	mov	r1, r8
 800729a:	1851      	adds	r1, r2, r1
 800729c:	6139      	str	r1, [r7, #16]
 800729e:	4649      	mov	r1, r9
 80072a0:	414b      	adcs	r3, r1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072b0:	4659      	mov	r1, fp
 80072b2:	00cb      	lsls	r3, r1, #3
 80072b4:	4651      	mov	r1, sl
 80072b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ba:	4651      	mov	r1, sl
 80072bc:	00ca      	lsls	r2, r1, #3
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	4603      	mov	r3, r0
 80072c4:	4642      	mov	r2, r8
 80072c6:	189b      	adds	r3, r3, r2
 80072c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072cc:	464b      	mov	r3, r9
 80072ce:	460a      	mov	r2, r1
 80072d0:	eb42 0303 	adc.w	r3, r2, r3
 80072d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072f0:	4649      	mov	r1, r9
 80072f2:	008b      	lsls	r3, r1, #2
 80072f4:	4641      	mov	r1, r8
 80072f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072fa:	4641      	mov	r1, r8
 80072fc:	008a      	lsls	r2, r1, #2
 80072fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007302:	f7f9 f83d 	bl	8000380 <__aeabi_uldivmod>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	4611      	mov	r1, r2
 800730c:	4b38      	ldr	r3, [pc, #224]	@ (80073f0 <UART_SetConfig+0x4e4>)
 800730e:	fba3 2301 	umull	r2, r3, r3, r1
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	2264      	movs	r2, #100	@ 0x64
 8007316:	fb02 f303 	mul.w	r3, r2, r3
 800731a:	1acb      	subs	r3, r1, r3
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	3332      	adds	r3, #50	@ 0x32
 8007320:	4a33      	ldr	r2, [pc, #204]	@ (80073f0 <UART_SetConfig+0x4e4>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800732c:	441c      	add	r4, r3
 800732e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007332:	2200      	movs	r2, #0
 8007334:	673b      	str	r3, [r7, #112]	@ 0x70
 8007336:	677a      	str	r2, [r7, #116]	@ 0x74
 8007338:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	1891      	adds	r1, r2, r2
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	415b      	adcs	r3, r3
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800734c:	4641      	mov	r1, r8
 800734e:	1851      	adds	r1, r2, r1
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	4649      	mov	r1, r9
 8007354:	414b      	adcs	r3, r1
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007364:	4659      	mov	r1, fp
 8007366:	00cb      	lsls	r3, r1, #3
 8007368:	4651      	mov	r1, sl
 800736a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800736e:	4651      	mov	r1, sl
 8007370:	00ca      	lsls	r2, r1, #3
 8007372:	4610      	mov	r0, r2
 8007374:	4619      	mov	r1, r3
 8007376:	4603      	mov	r3, r0
 8007378:	4642      	mov	r2, r8
 800737a:	189b      	adds	r3, r3, r2
 800737c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800737e:	464b      	mov	r3, r9
 8007380:	460a      	mov	r2, r1
 8007382:	eb42 0303 	adc.w	r3, r2, r3
 8007386:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	663b      	str	r3, [r7, #96]	@ 0x60
 8007392:	667a      	str	r2, [r7, #100]	@ 0x64
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073a0:	4649      	mov	r1, r9
 80073a2:	008b      	lsls	r3, r1, #2
 80073a4:	4641      	mov	r1, r8
 80073a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073aa:	4641      	mov	r1, r8
 80073ac:	008a      	lsls	r2, r1, #2
 80073ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073b2:	f7f8 ffe5 	bl	8000380 <__aeabi_uldivmod>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4b0d      	ldr	r3, [pc, #52]	@ (80073f0 <UART_SetConfig+0x4e4>)
 80073bc:	fba3 1302 	umull	r1, r3, r3, r2
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	2164      	movs	r1, #100	@ 0x64
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	3332      	adds	r3, #50	@ 0x32
 80073ce:	4a08      	ldr	r2, [pc, #32]	@ (80073f0 <UART_SetConfig+0x4e4>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	f003 020f 	and.w	r2, r3, #15
 80073da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4422      	add	r2, r4
 80073e2:	609a      	str	r2, [r3, #8]
}
 80073e4:	bf00      	nop
 80073e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073ea:	46bd      	mov	sp, r7
 80073ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f0:	51eb851f 	.word	0x51eb851f

080073f4 <__NVIC_SetPriority>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007404:	2b00      	cmp	r3, #0
 8007406:	db0a      	blt.n	800741e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	b2da      	uxtb	r2, r3
 800740c:	490c      	ldr	r1, [pc, #48]	@ (8007440 <__NVIC_SetPriority+0x4c>)
 800740e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007412:	0112      	lsls	r2, r2, #4
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	440b      	add	r3, r1
 8007418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800741c:	e00a      	b.n	8007434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	4908      	ldr	r1, [pc, #32]	@ (8007444 <__NVIC_SetPriority+0x50>)
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	3b04      	subs	r3, #4
 800742c:	0112      	lsls	r2, r2, #4
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	440b      	add	r3, r1
 8007432:	761a      	strb	r2, [r3, #24]
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	e000e100 	.word	0xe000e100
 8007444:	e000ed00 	.word	0xe000ed00

08007448 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <SysTick_Handler+0x1c>)
 800744e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007450:	f001 fd40 	bl	8008ed4 <xTaskGetSchedulerState>
 8007454:	4603      	mov	r3, r0
 8007456:	2b01      	cmp	r3, #1
 8007458:	d001      	beq.n	800745e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800745a:	f002 fb35 	bl	8009ac8 <xPortSysTickHandler>
  }
}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	e000e010 	.word	0xe000e010

08007468 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800746c:	2100      	movs	r1, #0
 800746e:	f06f 0004 	mvn.w	r0, #4
 8007472:	f7ff ffbf 	bl	80073f4 <__NVIC_SetPriority>
#endif
}
 8007476:	bf00      	nop
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007482:	f3ef 8305 	mrs	r3, IPSR
 8007486:	603b      	str	r3, [r7, #0]
  return(result);
 8007488:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800748e:	f06f 0305 	mvn.w	r3, #5
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	e00c      	b.n	80074b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007496:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <osKernelInitialize+0x44>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d105      	bne.n	80074aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800749e:	4b08      	ldr	r3, [pc, #32]	@ (80074c0 <osKernelInitialize+0x44>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	607b      	str	r3, [r7, #4]
 80074a8:	e002      	b.n	80074b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074b0:	687b      	ldr	r3, [r7, #4]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	200058f0 	.word	0x200058f0

080074c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ca:	f3ef 8305 	mrs	r3, IPSR
 80074ce:	603b      	str	r3, [r7, #0]
  return(result);
 80074d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <osKernelStart+0x1a>
    stat = osErrorISR;
 80074d6:	f06f 0305 	mvn.w	r3, #5
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	e010      	b.n	8007500 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074de:	4b0b      	ldr	r3, [pc, #44]	@ (800750c <osKernelStart+0x48>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d109      	bne.n	80074fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074e6:	f7ff ffbf 	bl	8007468 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074ea:	4b08      	ldr	r3, [pc, #32]	@ (800750c <osKernelStart+0x48>)
 80074ec:	2202      	movs	r2, #2
 80074ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074f0:	f001 f87a 	bl	80085e8 <vTaskStartScheduler>
      stat = osOK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	607b      	str	r3, [r7, #4]
 80074f8:	e002      	b.n	8007500 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295
 80074fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007500:	687b      	ldr	r3, [r7, #4]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	200058f0 	.word	0x200058f0

08007510 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007510:	b580      	push	{r7, lr}
 8007512:	b08e      	sub	sp, #56	@ 0x38
 8007514:	af04      	add	r7, sp, #16
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007520:	f3ef 8305 	mrs	r3, IPSR
 8007524:	617b      	str	r3, [r7, #20]
  return(result);
 8007526:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007528:	2b00      	cmp	r3, #0
 800752a:	d17e      	bne.n	800762a <osThreadNew+0x11a>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d07b      	beq.n	800762a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007532:	2380      	movs	r3, #128	@ 0x80
 8007534:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007536:	2318      	movs	r3, #24
 8007538:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800753e:	f04f 33ff 	mov.w	r3, #4294967295
 8007542:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d045      	beq.n	80075d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <osThreadNew+0x48>
        name = attr->name;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <osThreadNew+0x6e>
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	2b38      	cmp	r3, #56	@ 0x38
 8007570:	d805      	bhi.n	800757e <osThreadNew+0x6e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <osThreadNew+0x72>
        return (NULL);
 800757e:	2300      	movs	r3, #0
 8007580:	e054      	b.n	800762c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	089b      	lsrs	r3, r3, #2
 8007590:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00e      	beq.n	80075b8 <osThreadNew+0xa8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	2b5b      	cmp	r3, #91	@ 0x5b
 80075a0:	d90a      	bls.n	80075b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d006      	beq.n	80075b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <osThreadNew+0xa8>
        mem = 1;
 80075b2:	2301      	movs	r3, #1
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	e010      	b.n	80075da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <osThreadNew+0xca>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d108      	bne.n	80075da <osThreadNew+0xca>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <osThreadNew+0xca>
          mem = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	e001      	b.n	80075da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d110      	bne.n	8007602 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075e8:	9202      	str	r2, [sp, #8]
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	6a3a      	ldr	r2, [r7, #32]
 80075f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fe1a 	bl	8008230 <xTaskCreateStatic>
 80075fc:	4603      	mov	r3, r0
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	e013      	b.n	800762a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d110      	bne.n	800762a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	b29a      	uxth	r2, r3
 800760c:	f107 0310 	add.w	r3, r7, #16
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fe68 	bl	80082f0 <xTaskCreate>
 8007620:	4603      	mov	r3, r0
 8007622:	2b01      	cmp	r3, #1
 8007624:	d001      	beq.n	800762a <osThreadNew+0x11a>
            hTask = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800762a:	693b      	ldr	r3, [r7, #16]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3728      	adds	r7, #40	@ 0x28
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800763c:	f3ef 8305 	mrs	r3, IPSR
 8007640:	60bb      	str	r3, [r7, #8]
  return(result);
 8007642:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <osDelay+0x1c>
    stat = osErrorISR;
 8007648:	f06f 0305 	mvn.w	r3, #5
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e007      	b.n	8007660 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <osDelay+0x2c>
      vTaskDelay(ticks);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 ff8e 	bl	800857c <vTaskDelay>
    }
  }

  return (stat);
 8007660:	68fb      	ldr	r3, [r7, #12]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4a07      	ldr	r2, [pc, #28]	@ (8007698 <vApplicationGetIdleTaskMemory+0x2c>)
 800767c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	4a06      	ldr	r2, [pc, #24]	@ (800769c <vApplicationGetIdleTaskMemory+0x30>)
 8007682:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2280      	movs	r2, #128	@ 0x80
 8007688:	601a      	str	r2, [r3, #0]
}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	200058f4 	.word	0x200058f4
 800769c:	20005950 	.word	0x20005950

080076a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a07      	ldr	r2, [pc, #28]	@ (80076cc <vApplicationGetTimerTaskMemory+0x2c>)
 80076b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4a06      	ldr	r2, [pc, #24]	@ (80076d0 <vApplicationGetTimerTaskMemory+0x30>)
 80076b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076be:	601a      	str	r2, [r3, #0]
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20005b50 	.word	0x20005b50
 80076d0:	20005bac 	.word	0x20005bac

080076d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f103 0208 	add.w	r2, r3, #8
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f103 0208 	add.w	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f103 0208 	add.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
}
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d103      	bne.n	8007796 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e00c      	b.n	80077b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3308      	adds	r3, #8
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e002      	b.n	80077a4 <vListInsert+0x2e>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d2f6      	bcs.n	800779e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6892      	ldr	r2, [r2, #8]
 80077fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6852      	ldr	r2, [r2, #4]
 8007808:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d103      	bne.n	800781c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	1e5a      	subs	r2, r3, #1
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <xQueueGenericReset+0x2c>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60bb      	str	r3, [r7, #8]
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007868:	f002 f89e 	bl	80099a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007874:	68f9      	ldr	r1, [r7, #12]
 8007876:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	3b01      	subs	r3, #1
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800789e:	fb01 f303 	mul.w	r3, r1, r3
 80078a2:	441a      	add	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	22ff      	movs	r2, #255	@ 0xff
 80078ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	22ff      	movs	r2, #255	@ 0xff
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d114      	bne.n	80078e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01a      	beq.n	80078fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3310      	adds	r3, #16
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f91a 	bl	8008b04 <xTaskRemoveFromEventList>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d012      	beq.n	80078fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078d6:	4b0d      	ldr	r3, [pc, #52]	@ (800790c <xQueueGenericReset+0xd0>)
 80078d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	e009      	b.n	80078fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3310      	adds	r3, #16
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fef1 	bl	80076d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3324      	adds	r3, #36	@ 0x24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff feec 	bl	80076d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078fc:	f002 f886 	bl	8009a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007900:	2301      	movs	r3, #1
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08e      	sub	sp, #56	@ 0x38
 8007914:	af02      	add	r7, sp, #8
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10b      	bne.n	800793c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	e7fd      	b.n	8007938 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	e7fd      	b.n	8007956 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <xQueueGenericCreateStatic+0x56>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <xQueueGenericCreateStatic+0x5a>
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <xQueueGenericCreateStatic+0x5c>
 800796a:	2300      	movs	r3, #0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10b      	bne.n	8007988 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	623b      	str	r3, [r7, #32]
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <xQueueGenericCreateStatic+0x84>
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <xQueueGenericCreateStatic+0x88>
 8007994:	2301      	movs	r3, #1
 8007996:	e000      	b.n	800799a <xQueueGenericCreateStatic+0x8a>
 8007998:	2300      	movs	r3, #0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	61fb      	str	r3, [r7, #28]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079b6:	2350      	movs	r3, #80	@ 0x50
 80079b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b50      	cmp	r3, #80	@ 0x50
 80079be:	d00b      	beq.n	80079d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	61bb      	str	r3, [r7, #24]
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	e7fd      	b.n	80079d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00d      	beq.n	8007a00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	4613      	mov	r3, r2
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 f805 	bl	8007a0a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3730      	adds	r7, #48	@ 0x30
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e002      	b.n	8007a2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a38:	2101      	movs	r1, #1
 8007a3a:	69b8      	ldr	r0, [r7, #24]
 8007a3c:	f7ff fefe 	bl	800783c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08e      	sub	sp, #56	@ 0x38
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <xQueueGenericSend+0x34>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	e7fd      	b.n	8007a80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <xQueueGenericSend+0x42>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <xQueueGenericSend+0x46>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <xQueueGenericSend+0x48>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <xQueueGenericSend+0x64>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d103      	bne.n	8007ac2 <xQueueGenericSend+0x72>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <xQueueGenericSend+0x76>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <xQueueGenericSend+0x78>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <xQueueGenericSend+0x94>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	623b      	str	r3, [r7, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ae4:	f001 f9f6 	bl	8008ed4 <xTaskGetSchedulerState>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <xQueueGenericSend+0xa4>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <xQueueGenericSend+0xa8>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e000      	b.n	8007afa <xQueueGenericSend+0xaa>
 8007af8:	2300      	movs	r3, #0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10b      	bne.n	8007b16 <xQueueGenericSend+0xc6>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	61fb      	str	r3, [r7, #28]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b16:	f001 ff47 	bl	80099a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d302      	bcc.n	8007b2c <xQueueGenericSend+0xdc>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d129      	bne.n	8007b80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b32:	f000 fa0f 	bl	8007f54 <prvCopyDataToQueue>
 8007b36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d010      	beq.n	8007b62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b42:	3324      	adds	r3, #36	@ 0x24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 ffdd 	bl	8008b04 <xTaskRemoveFromEventList>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d013      	beq.n	8007b78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b50:	4b3f      	ldr	r3, [pc, #252]	@ (8007c50 <xQueueGenericSend+0x200>)
 8007b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	e00a      	b.n	8007b78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b68:	4b39      	ldr	r3, [pc, #228]	@ (8007c50 <xQueueGenericSend+0x200>)
 8007b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b78:	f001 ff48 	bl	8009a0c <vPortExitCritical>
				return pdPASS;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e063      	b.n	8007c48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d103      	bne.n	8007b8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b86:	f001 ff41 	bl	8009a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e05c      	b.n	8007c48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d106      	bne.n	8007ba2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 f83f 	bl	8008c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ba2:	f001 ff33 	bl	8009a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ba6:	f000 fd87 	bl	80086b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007baa:	f001 fefd 	bl	80099a8 <vPortEnterCritical>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bb4:	b25b      	sxtb	r3, r3
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	d103      	bne.n	8007bc4 <xQueueGenericSend+0x174>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bca:	b25b      	sxtb	r3, r3
 8007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd0:	d103      	bne.n	8007bda <xQueueGenericSend+0x18a>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bda:	f001 ff17 	bl	8009a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bde:	1d3a      	adds	r2, r7, #4
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 f82e 	bl	8008c48 <xTaskCheckForTimeOut>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d124      	bne.n	8007c3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bf4:	f000 faa6 	bl	8008144 <prvIsQueueFull>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d018      	beq.n	8007c30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	3310      	adds	r3, #16
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 ff2a 	bl	8008a60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c0e:	f000 fa31 	bl	8008074 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c12:	f000 fd5f 	bl	80086d4 <xTaskResumeAll>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f47f af7c 	bne.w	8007b16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c50 <xQueueGenericSend+0x200>)
 8007c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	e772      	b.n	8007b16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c32:	f000 fa1f 	bl	8008074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c36:	f000 fd4d 	bl	80086d4 <xTaskResumeAll>
 8007c3a:	e76c      	b.n	8007b16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c3e:	f000 fa19 	bl	8008074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c42:	f000 fd47 	bl	80086d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3738      	adds	r7, #56	@ 0x38
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b090      	sub	sp, #64	@ 0x40
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10b      	bne.n	8007c84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	e7fd      	b.n	8007c80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d103      	bne.n	8007c92 <xQueueGenericSendFromISR+0x3e>
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <xQueueGenericSendFromISR+0x42>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <xQueueGenericSendFromISR+0x44>
 8007c96:	2300      	movs	r3, #0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10b      	bne.n	8007cb4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	e7fd      	b.n	8007cb0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d103      	bne.n	8007cc2 <xQueueGenericSendFromISR+0x6e>
 8007cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <xQueueGenericSendFromISR+0x72>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <xQueueGenericSendFromISR+0x74>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10b      	bne.n	8007ce4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	623b      	str	r3, [r7, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	e7fd      	b.n	8007ce0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ce4:	f001 ff40 	bl	8009b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ce8:	f3ef 8211 	mrs	r2, BASEPRI
 8007cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	61fa      	str	r2, [r7, #28]
 8007cfe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d302      	bcc.n	8007d16 <xQueueGenericSendFromISR+0xc2>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d12f      	bne.n	8007d76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d2c:	f000 f912 	bl	8007f54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d112      	bne.n	8007d60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d016      	beq.n	8007d70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	3324      	adds	r3, #36	@ 0x24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fedc 	bl	8008b04 <xTaskRemoveFromEventList>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00e      	beq.n	8007d70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e007      	b.n	8007d70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d64:	3301      	adds	r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	b25a      	sxtb	r2, r3
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d70:	2301      	movs	r3, #1
 8007d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d74:	e001      	b.n	8007d7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3740      	adds	r7, #64	@ 0x40
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	@ 0x30
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10b      	bne.n	8007dc2 <xQueueReceive+0x32>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	623b      	str	r3, [r7, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <xQueueReceive+0x40>
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <xQueueReceive+0x44>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <xQueueReceive+0x46>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <xQueueReceive+0x62>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	61fb      	str	r3, [r7, #28]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007df2:	f001 f86f 	bl	8008ed4 <xTaskGetSchedulerState>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <xQueueReceive+0x72>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <xQueueReceive+0x76>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <xQueueReceive+0x78>
 8007e06:	2300      	movs	r3, #0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <xQueueReceive+0x94>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	61bb      	str	r3, [r7, #24]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e24:	f001 fdc0 	bl	80099a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01f      	beq.n	8007e74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e38:	f000 f8f6 	bl	8008028 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	1e5a      	subs	r2, r3, #1
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00f      	beq.n	8007e6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	3310      	adds	r3, #16
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fe57 	bl	8008b04 <xTaskRemoveFromEventList>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f50 <xQueueReceive+0x1c0>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e6c:	f001 fdce 	bl	8009a0c <vPortExitCritical>
				return pdPASS;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e069      	b.n	8007f48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d103      	bne.n	8007e82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e7a:	f001 fdc7 	bl	8009a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e062      	b.n	8007f48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e88:	f107 0310 	add.w	r3, r7, #16
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fec5 	bl	8008c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e92:	2301      	movs	r3, #1
 8007e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e96:	f001 fdb9 	bl	8009a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e9a:	f000 fc0d 	bl	80086b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e9e:	f001 fd83 	bl	80099a8 <vPortEnterCritical>
 8007ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d103      	bne.n	8007eb8 <xQueueReceive+0x128>
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ebe:	b25b      	sxtb	r3, r3
 8007ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec4:	d103      	bne.n	8007ece <xQueueReceive+0x13e>
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ece:	f001 fd9d 	bl	8009a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ed2:	1d3a      	adds	r2, r7, #4
 8007ed4:	f107 0310 	add.w	r3, r7, #16
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 feb4 	bl	8008c48 <xTaskCheckForTimeOut>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d123      	bne.n	8007f2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ee8:	f000 f916 	bl	8008118 <prvIsQueueEmpty>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d017      	beq.n	8007f22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	3324      	adds	r3, #36	@ 0x24
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fdb0 	bl	8008a60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f02:	f000 f8b7 	bl	8008074 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f06:	f000 fbe5 	bl	80086d4 <xTaskResumeAll>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d189      	bne.n	8007e24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f10:	4b0f      	ldr	r3, [pc, #60]	@ (8007f50 <xQueueReceive+0x1c0>)
 8007f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	e780      	b.n	8007e24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f24:	f000 f8a6 	bl	8008074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f28:	f000 fbd4 	bl	80086d4 <xTaskResumeAll>
 8007f2c:	e77a      	b.n	8007e24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f30:	f000 f8a0 	bl	8008074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f34:	f000 fbce 	bl	80086d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f3a:	f000 f8ed 	bl	8008118 <prvIsQueueEmpty>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f43f af6f 	beq.w	8007e24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3730      	adds	r7, #48	@ 0x30
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	e000ed04 	.word	0xe000ed04

08007f54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d14d      	bne.n	8008016 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 ffc6 	bl	8008f10 <xTaskPriorityDisinherit>
 8007f84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	609a      	str	r2, [r3, #8]
 8007f8c:	e043      	b.n	8008016 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d119      	bne.n	8007fc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6858      	ldr	r0, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	f010 fcd7 	bl	8018952 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fac:	441a      	add	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d32b      	bcc.n	8008016 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	e026      	b.n	8008016 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68d8      	ldr	r0, [r3, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	f010 fcbd 	bl	8018952 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe0:	425b      	negs	r3, r3
 8007fe2:	441a      	add	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d207      	bcs.n	8008004 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	425b      	negs	r3, r3
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d105      	bne.n	8008016 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3b01      	subs	r3, #1
 8008014:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800801e:	697b      	ldr	r3, [r7, #20]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d018      	beq.n	800806c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008042:	441a      	add	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	429a      	cmp	r2, r3
 8008052:	d303      	bcc.n	800805c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68d9      	ldr	r1, [r3, #12]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008064:	461a      	mov	r2, r3
 8008066:	6838      	ldr	r0, [r7, #0]
 8008068:	f010 fc73 	bl	8018952 <memcpy>
	}
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800807c:	f001 fc94 	bl	80099a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008086:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008088:	e011      	b.n	80080ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	d012      	beq.n	80080b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3324      	adds	r3, #36	@ 0x24
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fd34 	bl	8008b04 <xTaskRemoveFromEventList>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080a2:	f000 fe35 	bl	8008d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	dce9      	bgt.n	800808a <prvUnlockQueue+0x16>
 80080b6:	e000      	b.n	80080ba <prvUnlockQueue+0x46>
					break;
 80080b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	22ff      	movs	r2, #255	@ 0xff
 80080be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080c2:	f001 fca3 	bl	8009a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080c6:	f001 fc6f 	bl	80099a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080d2:	e011      	b.n	80080f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d012      	beq.n	8008102 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3310      	adds	r3, #16
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fd0f 	bl	8008b04 <xTaskRemoveFromEventList>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080ec:	f000 fe10 	bl	8008d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dce9      	bgt.n	80080d4 <prvUnlockQueue+0x60>
 8008100:	e000      	b.n	8008104 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008102:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	22ff      	movs	r2, #255	@ 0xff
 8008108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800810c:	f001 fc7e 	bl	8009a0c <vPortExitCritical>
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008120:	f001 fc42 	bl	80099a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e001      	b.n	8008136 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008136:	f001 fc69 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 800813a:	68fb      	ldr	r3, [r7, #12]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800814c:	f001 fc2c 	bl	80099a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008158:	429a      	cmp	r2, r3
 800815a:	d102      	bne.n	8008162 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	e001      	b.n	8008166 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008166:	f001 fc51 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 800816a:	68fb      	ldr	r3, [r7, #12]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	e014      	b.n	80081ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008184:	4a0f      	ldr	r2, [pc, #60]	@ (80081c4 <vQueueAddToRegistry+0x50>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008190:	490c      	ldr	r1, [pc, #48]	@ (80081c4 <vQueueAddToRegistry+0x50>)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800819a:	4a0a      	ldr	r2, [pc, #40]	@ (80081c4 <vQueueAddToRegistry+0x50>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081a6:	e006      	b.n	80081b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b07      	cmp	r3, #7
 80081b2:	d9e7      	bls.n	8008184 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20005fac 	.word	0x20005fac

080081c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081d8:	f001 fbe6 	bl	80099a8 <vPortEnterCritical>
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d103      	bne.n	80081f2 <vQueueWaitForMessageRestricted+0x2a>
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d103      	bne.n	8008208 <vQueueWaitForMessageRestricted+0x40>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008208:	f001 fc00 	bl	8009a0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008210:	2b00      	cmp	r3, #0
 8008212:	d106      	bne.n	8008222 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3324      	adds	r3, #36	@ 0x24
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fc45 	bl	8008aac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008222:	6978      	ldr	r0, [r7, #20]
 8008224:	f7ff ff26 	bl	8008074 <prvUnlockQueue>
	}
 8008228:	bf00      	nop
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08e      	sub	sp, #56	@ 0x38
 8008234:	af04      	add	r7, sp, #16
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800823e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	623b      	str	r3, [r7, #32]
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	61fb      	str	r3, [r7, #28]
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800827a:	235c      	movs	r3, #92	@ 0x5c
 800827c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b5c      	cmp	r3, #92	@ 0x5c
 8008282:	d00b      	beq.n	800829c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	61bb      	str	r3, [r7, #24]
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	e7fd      	b.n	8008298 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800829c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01e      	beq.n	80082e2 <xTaskCreateStatic+0xb2>
 80082a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d01b      	beq.n	80082e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082bc:	2300      	movs	r3, #0
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	9302      	str	r3, [sp, #8]
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f850 	bl	800837a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082dc:	f000 f8de 	bl	800849c <prvAddNewTaskToReadyList>
 80082e0:	e001      	b.n	80082e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082e6:	697b      	ldr	r3, [r7, #20]
	}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3728      	adds	r7, #40	@ 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08c      	sub	sp, #48	@ 0x30
 80082f4:	af04      	add	r7, sp, #16
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4618      	mov	r0, r3
 8008306:	f001 fc71 	bl	8009bec <pvPortMalloc>
 800830a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008312:	205c      	movs	r0, #92	@ 0x5c
 8008314:	f001 fc6a 	bl	8009bec <pvPortMalloc>
 8008318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	631a      	str	r2, [r3, #48]	@ 0x30
 8008326:	e005      	b.n	8008334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008328:	6978      	ldr	r0, [r7, #20]
 800832a:	f001 fd2d 	bl	8009d88 <vPortFree>
 800832e:	e001      	b.n	8008334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008330:	2300      	movs	r3, #0
 8008332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d017      	beq.n	800836a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	2300      	movs	r3, #0
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	9302      	str	r3, [sp, #8]
 800834c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f80e 	bl	800837a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800835e:	69f8      	ldr	r0, [r7, #28]
 8008360:	f000 f89c 	bl	800849c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008364:	2301      	movs	r3, #1
 8008366:	61bb      	str	r3, [r7, #24]
 8008368:	e002      	b.n	8008370 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800836a:	f04f 33ff 	mov.w	r3, #4294967295
 800836e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008370:	69bb      	ldr	r3, [r7, #24]
	}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b088      	sub	sp, #32
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	461a      	mov	r2, r3
 8008392:	21a5      	movs	r1, #165	@ 0xa5
 8008394:	f010 fa02 	bl	801879c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083a2:	3b01      	subs	r3, #1
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f023 0307 	bic.w	r3, r3, #7
 80083b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	617b      	str	r3, [r7, #20]
}
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01f      	beq.n	800841a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083da:	2300      	movs	r3, #0
 80083dc:	61fb      	str	r3, [r7, #28]
 80083de:	e012      	b.n	8008406 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	7819      	ldrb	r1, [r3, #0]
 80083e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	3334      	adds	r3, #52	@ 0x34
 80083f0:	460a      	mov	r2, r1
 80083f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d006      	beq.n	800840e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	3301      	adds	r3, #1
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	2b0f      	cmp	r3, #15
 800840a:	d9e9      	bls.n	80083e0 <prvInitialiseNewTask+0x66>
 800840c:	e000      	b.n	8008410 <prvInitialiseNewTask+0x96>
			{
				break;
 800840e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008418:	e003      	b.n	8008422 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	2b37      	cmp	r3, #55	@ 0x37
 8008426:	d901      	bls.n	800842c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008428:	2337      	movs	r3, #55	@ 0x37
 800842a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800842c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008430:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008436:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	2200      	movs	r2, #0
 800843c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	3304      	adds	r3, #4
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff f966 	bl	8007714 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	3318      	adds	r3, #24
 800844c:	4618      	mov	r0, r3
 800844e:	f7ff f961 	bl	8007714 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008466:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	2200      	movs	r2, #0
 800846c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	68f9      	ldr	r1, [r7, #12]
 800847a:	69b8      	ldr	r0, [r7, #24]
 800847c:	f001 f966 	bl	800974c <pxPortInitialiseStack>
 8008480:	4602      	mov	r2, r0
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800848c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008492:	bf00      	nop
 8008494:	3720      	adds	r7, #32
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084a4:	f001 fa80 	bl	80099a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008560 <prvAddNewTaskToReadyList+0xc4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008560 <prvAddNewTaskToReadyList+0xc4>)
 80084b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084b2:	4b2c      	ldr	r3, [pc, #176]	@ (8008564 <prvAddNewTaskToReadyList+0xc8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008564 <prvAddNewTaskToReadyList+0xc8>)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084c0:	4b27      	ldr	r3, [pc, #156]	@ (8008560 <prvAddNewTaskToReadyList+0xc4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d110      	bne.n	80084ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084c8:	f000 fc46 	bl	8008d58 <prvInitialiseTaskLists>
 80084cc:	e00d      	b.n	80084ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084ce:	4b26      	ldr	r3, [pc, #152]	@ (8008568 <prvAddNewTaskToReadyList+0xcc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d109      	bne.n	80084ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084d6:	4b23      	ldr	r3, [pc, #140]	@ (8008564 <prvAddNewTaskToReadyList+0xc8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d802      	bhi.n	80084ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008564 <prvAddNewTaskToReadyList+0xc8>)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084ea:	4b20      	ldr	r3, [pc, #128]	@ (800856c <prvAddNewTaskToReadyList+0xd0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3301      	adds	r3, #1
 80084f0:	4a1e      	ldr	r2, [pc, #120]	@ (800856c <prvAddNewTaskToReadyList+0xd0>)
 80084f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084f4:	4b1d      	ldr	r3, [pc, #116]	@ (800856c <prvAddNewTaskToReadyList+0xd0>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008500:	4b1b      	ldr	r3, [pc, #108]	@ (8008570 <prvAddNewTaskToReadyList+0xd4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d903      	bls.n	8008510 <prvAddNewTaskToReadyList+0x74>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850c:	4a18      	ldr	r2, [pc, #96]	@ (8008570 <prvAddNewTaskToReadyList+0xd4>)
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4a15      	ldr	r2, [pc, #84]	@ (8008574 <prvAddNewTaskToReadyList+0xd8>)
 800851e:	441a      	add	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f7ff f901 	bl	800772e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800852c:	f001 fa6e 	bl	8009a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008530:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <prvAddNewTaskToReadyList+0xcc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00e      	beq.n	8008556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008538:	4b0a      	ldr	r3, [pc, #40]	@ (8008564 <prvAddNewTaskToReadyList+0xc8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008542:	429a      	cmp	r2, r3
 8008544:	d207      	bcs.n	8008556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008546:	4b0c      	ldr	r3, [pc, #48]	@ (8008578 <prvAddNewTaskToReadyList+0xdc>)
 8008548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	200064c0 	.word	0x200064c0
 8008564:	20005fec 	.word	0x20005fec
 8008568:	200064cc 	.word	0x200064cc
 800856c:	200064dc 	.word	0x200064dc
 8008570:	200064c8 	.word	0x200064c8
 8008574:	20005ff0 	.word	0x20005ff0
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d018      	beq.n	80085c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800858e:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <vTaskDelay+0x64>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <vTaskDelay+0x32>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	60bb      	str	r3, [r7, #8]
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	e7fd      	b.n	80085aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085ae:	f000 f883 	bl	80086b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085b2:	2100      	movs	r1, #0
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fd1b 	bl	8008ff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085ba:	f000 f88b 	bl	80086d4 <xTaskResumeAll>
 80085be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d107      	bne.n	80085d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80085c6:	4b07      	ldr	r3, [pc, #28]	@ (80085e4 <vTaskDelay+0x68>)
 80085c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200064e8 	.word	0x200064e8
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	@ 0x28
 80085ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085f6:	463a      	mov	r2, r7
 80085f8:	1d39      	adds	r1, r7, #4
 80085fa:	f107 0308 	add.w	r3, r7, #8
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff f834 	bl	800766c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	9202      	str	r2, [sp, #8]
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2300      	movs	r3, #0
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	460a      	mov	r2, r1
 8008616:	4922      	ldr	r1, [pc, #136]	@ (80086a0 <vTaskStartScheduler+0xb8>)
 8008618:	4822      	ldr	r0, [pc, #136]	@ (80086a4 <vTaskStartScheduler+0xbc>)
 800861a:	f7ff fe09 	bl	8008230 <xTaskCreateStatic>
 800861e:	4603      	mov	r3, r0
 8008620:	4a21      	ldr	r2, [pc, #132]	@ (80086a8 <vTaskStartScheduler+0xc0>)
 8008622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008624:	4b20      	ldr	r3, [pc, #128]	@ (80086a8 <vTaskStartScheduler+0xc0>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e001      	b.n	8008636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d102      	bne.n	8008642 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800863c:	f000 fd2c 	bl	8009098 <xTimerCreateTimerTask>
 8008640:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d116      	bne.n	8008676 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	613b      	str	r3, [r7, #16]
}
 800865a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800865c:	4b13      	ldr	r3, [pc, #76]	@ (80086ac <vTaskStartScheduler+0xc4>)
 800865e:	f04f 32ff 	mov.w	r2, #4294967295
 8008662:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008664:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <vTaskStartScheduler+0xc8>)
 8008666:	2201      	movs	r2, #1
 8008668:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800866a:	4b12      	ldr	r3, [pc, #72]	@ (80086b4 <vTaskStartScheduler+0xcc>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008670:	f001 f8f6 	bl	8009860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008674:	e00f      	b.n	8008696 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867c:	d10b      	bne.n	8008696 <vTaskStartScheduler+0xae>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	60fb      	str	r3, [r7, #12]
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	e7fd      	b.n	8008692 <vTaskStartScheduler+0xaa>
}
 8008696:	bf00      	nop
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	08019644 	.word	0x08019644
 80086a4:	08008d29 	.word	0x08008d29
 80086a8:	200064e4 	.word	0x200064e4
 80086ac:	200064e0 	.word	0x200064e0
 80086b0:	200064cc 	.word	0x200064cc
 80086b4:	200064c4 	.word	0x200064c4

080086b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086bc:	4b04      	ldr	r3, [pc, #16]	@ (80086d0 <vTaskSuspendAll+0x18>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	4a03      	ldr	r2, [pc, #12]	@ (80086d0 <vTaskSuspendAll+0x18>)
 80086c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086c6:	bf00      	nop
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	200064e8 	.word	0x200064e8

080086d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086e2:	4b42      	ldr	r3, [pc, #264]	@ (80087ec <xTaskResumeAll+0x118>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <xTaskResumeAll+0x2e>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	603b      	str	r3, [r7, #0]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008702:	f001 f951 	bl	80099a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008706:	4b39      	ldr	r3, [pc, #228]	@ (80087ec <xTaskResumeAll+0x118>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3b01      	subs	r3, #1
 800870c:	4a37      	ldr	r2, [pc, #220]	@ (80087ec <xTaskResumeAll+0x118>)
 800870e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008710:	4b36      	ldr	r3, [pc, #216]	@ (80087ec <xTaskResumeAll+0x118>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d162      	bne.n	80087de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008718:	4b35      	ldr	r3, [pc, #212]	@ (80087f0 <xTaskResumeAll+0x11c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d05e      	beq.n	80087de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008720:	e02f      	b.n	8008782 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008722:	4b34      	ldr	r3, [pc, #208]	@ (80087f4 <xTaskResumeAll+0x120>)
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3318      	adds	r3, #24
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff f85a 	bl	80077e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3304      	adds	r3, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff f855 	bl	80077e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008742:	4b2d      	ldr	r3, [pc, #180]	@ (80087f8 <xTaskResumeAll+0x124>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d903      	bls.n	8008752 <xTaskResumeAll+0x7e>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874e:	4a2a      	ldr	r2, [pc, #168]	@ (80087f8 <xTaskResumeAll+0x124>)
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4a27      	ldr	r2, [pc, #156]	@ (80087fc <xTaskResumeAll+0x128>)
 8008760:	441a      	add	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f7fe ffe0 	bl	800772e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008772:	4b23      	ldr	r3, [pc, #140]	@ (8008800 <xTaskResumeAll+0x12c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	429a      	cmp	r2, r3
 800877a:	d302      	bcc.n	8008782 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800877c:	4b21      	ldr	r3, [pc, #132]	@ (8008804 <xTaskResumeAll+0x130>)
 800877e:	2201      	movs	r2, #1
 8008780:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008782:	4b1c      	ldr	r3, [pc, #112]	@ (80087f4 <xTaskResumeAll+0x120>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1cb      	bne.n	8008722 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008790:	f000 fb80 	bl	8008e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008794:	4b1c      	ldr	r3, [pc, #112]	@ (8008808 <xTaskResumeAll+0x134>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d010      	beq.n	80087c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087a0:	f000 f846 	bl	8008830 <xTaskIncrementTick>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80087aa:	4b16      	ldr	r3, [pc, #88]	@ (8008804 <xTaskResumeAll+0x130>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f1      	bne.n	80087a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80087bc:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <xTaskResumeAll+0x134>)
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <xTaskResumeAll+0x130>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087ca:	2301      	movs	r3, #1
 80087cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087ce:	4b0f      	ldr	r3, [pc, #60]	@ (800880c <xTaskResumeAll+0x138>)
 80087d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087de:	f001 f915 	bl	8009a0c <vPortExitCritical>

	return xAlreadyYielded;
 80087e2:	68bb      	ldr	r3, [r7, #8]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	200064e8 	.word	0x200064e8
 80087f0:	200064c0 	.word	0x200064c0
 80087f4:	20006480 	.word	0x20006480
 80087f8:	200064c8 	.word	0x200064c8
 80087fc:	20005ff0 	.word	0x20005ff0
 8008800:	20005fec 	.word	0x20005fec
 8008804:	200064d4 	.word	0x200064d4
 8008808:	200064d0 	.word	0x200064d0
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008816:	4b05      	ldr	r3, [pc, #20]	@ (800882c <xTaskGetTickCount+0x1c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800881c:	687b      	ldr	r3, [r7, #4]
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	200064c4 	.word	0x200064c4

08008830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800883a:	4b4f      	ldr	r3, [pc, #316]	@ (8008978 <xTaskIncrementTick+0x148>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f040 8090 	bne.w	8008964 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008844:	4b4d      	ldr	r3, [pc, #308]	@ (800897c <xTaskIncrementTick+0x14c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800884c:	4a4b      	ldr	r2, [pc, #300]	@ (800897c <xTaskIncrementTick+0x14c>)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d121      	bne.n	800889c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008858:	4b49      	ldr	r3, [pc, #292]	@ (8008980 <xTaskIncrementTick+0x150>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	603b      	str	r3, [r7, #0]
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	e7fd      	b.n	8008876 <xTaskIncrementTick+0x46>
 800887a:	4b41      	ldr	r3, [pc, #260]	@ (8008980 <xTaskIncrementTick+0x150>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	4b40      	ldr	r3, [pc, #256]	@ (8008984 <xTaskIncrementTick+0x154>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a3e      	ldr	r2, [pc, #248]	@ (8008980 <xTaskIncrementTick+0x150>)
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	4a3e      	ldr	r2, [pc, #248]	@ (8008984 <xTaskIncrementTick+0x154>)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	4b3e      	ldr	r3, [pc, #248]	@ (8008988 <xTaskIncrementTick+0x158>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	4a3c      	ldr	r2, [pc, #240]	@ (8008988 <xTaskIncrementTick+0x158>)
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f000 fafc 	bl	8008e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800889c:	4b3b      	ldr	r3, [pc, #236]	@ (800898c <xTaskIncrementTick+0x15c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d349      	bcc.n	800893a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088a6:	4b36      	ldr	r3, [pc, #216]	@ (8008980 <xTaskIncrementTick+0x150>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b0:	4b36      	ldr	r3, [pc, #216]	@ (800898c <xTaskIncrementTick+0x15c>)
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295
 80088b6:	601a      	str	r2, [r3, #0]
					break;
 80088b8:	e03f      	b.n	800893a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ba:	4b31      	ldr	r3, [pc, #196]	@ (8008980 <xTaskIncrementTick+0x150>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d203      	bcs.n	80088da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088d2:	4a2e      	ldr	r2, [pc, #184]	@ (800898c <xTaskIncrementTick+0x15c>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088d8:	e02f      	b.n	800893a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	3304      	adds	r3, #4
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe ff82 	bl	80077e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	3318      	adds	r3, #24
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe ff79 	bl	80077e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fa:	4b25      	ldr	r3, [pc, #148]	@ (8008990 <xTaskIncrementTick+0x160>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d903      	bls.n	800890a <xTaskIncrementTick+0xda>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	4a22      	ldr	r2, [pc, #136]	@ (8008990 <xTaskIncrementTick+0x160>)
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4a1f      	ldr	r2, [pc, #124]	@ (8008994 <xTaskIncrementTick+0x164>)
 8008918:	441a      	add	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	3304      	adds	r3, #4
 800891e:	4619      	mov	r1, r3
 8008920:	4610      	mov	r0, r2
 8008922:	f7fe ff04 	bl	800772e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800892a:	4b1b      	ldr	r3, [pc, #108]	@ (8008998 <xTaskIncrementTick+0x168>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008930:	429a      	cmp	r2, r3
 8008932:	d3b8      	bcc.n	80088a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008934:	2301      	movs	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008938:	e7b5      	b.n	80088a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800893a:	4b17      	ldr	r3, [pc, #92]	@ (8008998 <xTaskIncrementTick+0x168>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008940:	4914      	ldr	r1, [pc, #80]	@ (8008994 <xTaskIncrementTick+0x164>)
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d901      	bls.n	8008956 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008956:	4b11      	ldr	r3, [pc, #68]	@ (800899c <xTaskIncrementTick+0x16c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d007      	beq.n	800896e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800895e:	2301      	movs	r3, #1
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	e004      	b.n	800896e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008964:	4b0e      	ldr	r3, [pc, #56]	@ (80089a0 <xTaskIncrementTick+0x170>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3301      	adds	r3, #1
 800896a:	4a0d      	ldr	r2, [pc, #52]	@ (80089a0 <xTaskIncrementTick+0x170>)
 800896c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800896e:	697b      	ldr	r3, [r7, #20]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	200064e8 	.word	0x200064e8
 800897c:	200064c4 	.word	0x200064c4
 8008980:	20006478 	.word	0x20006478
 8008984:	2000647c 	.word	0x2000647c
 8008988:	200064d8 	.word	0x200064d8
 800898c:	200064e0 	.word	0x200064e0
 8008990:	200064c8 	.word	0x200064c8
 8008994:	20005ff0 	.word	0x20005ff0
 8008998:	20005fec 	.word	0x20005fec
 800899c:	200064d4 	.word	0x200064d4
 80089a0:	200064d0 	.word	0x200064d0

080089a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089aa:	4b28      	ldr	r3, [pc, #160]	@ (8008a4c <vTaskSwitchContext+0xa8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089b2:	4b27      	ldr	r3, [pc, #156]	@ (8008a50 <vTaskSwitchContext+0xac>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089b8:	e042      	b.n	8008a40 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80089ba:	4b25      	ldr	r3, [pc, #148]	@ (8008a50 <vTaskSwitchContext+0xac>)
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c0:	4b24      	ldr	r3, [pc, #144]	@ (8008a54 <vTaskSwitchContext+0xb0>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e011      	b.n	80089ec <vTaskSwitchContext+0x48>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	e7fd      	b.n	80089e2 <vTaskSwitchContext+0x3e>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	491a      	ldr	r1, [pc, #104]	@ (8008a58 <vTaskSwitchContext+0xb4>)
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0e3      	beq.n	80089c8 <vTaskSwitchContext+0x24>
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4a13      	ldr	r2, [pc, #76]	@ (8008a58 <vTaskSwitchContext+0xb4>)
 8008a0c:	4413      	add	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	605a      	str	r2, [r3, #4]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	3308      	adds	r3, #8
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d104      	bne.n	8008a30 <vTaskSwitchContext+0x8c>
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	605a      	str	r2, [r3, #4]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	4a09      	ldr	r2, [pc, #36]	@ (8008a5c <vTaskSwitchContext+0xb8>)
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	4a06      	ldr	r2, [pc, #24]	@ (8008a54 <vTaskSwitchContext+0xb0>)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6013      	str	r3, [r2, #0]
}
 8008a40:	bf00      	nop
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	200064e8 	.word	0x200064e8
 8008a50:	200064d4 	.word	0x200064d4
 8008a54:	200064c8 	.word	0x200064c8
 8008a58:	20005ff0 	.word	0x20005ff0
 8008a5c:	20005fec 	.word	0x20005fec

08008a60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10b      	bne.n	8008a88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a88:	4b07      	ldr	r3, [pc, #28]	@ (8008aa8 <vTaskPlaceOnEventList+0x48>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3318      	adds	r3, #24
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7fe fe70 	bl	8007776 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a96:	2101      	movs	r1, #1
 8008a98:	6838      	ldr	r0, [r7, #0]
 8008a9a:	f000 faa9 	bl	8008ff0 <prvAddCurrentTaskToDelayedList>
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20005fec 	.word	0x20005fec

08008aac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10b      	bne.n	8008ad6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	617b      	str	r3, [r7, #20]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8008b00 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3318      	adds	r3, #24
 8008adc:	4619      	mov	r1, r3
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7fe fe25 	bl	800772e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008aea:	f04f 33ff 	mov.w	r3, #4294967295
 8008aee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	68b8      	ldr	r0, [r7, #8]
 8008af4:	f000 fa7c 	bl	8008ff0 <prvAddCurrentTaskToDelayedList>
	}
 8008af8:	bf00      	nop
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20005fec 	.word	0x20005fec

08008b04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	60fb      	str	r3, [r7, #12]
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	e7fd      	b.n	8008b2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3318      	adds	r3, #24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fe56 	bl	80077e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bb4 <xTaskRemoveFromEventList+0xb0>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d11d      	bne.n	8008b80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe fe4d 	bl	80077e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b52:	4b19      	ldr	r3, [pc, #100]	@ (8008bb8 <xTaskRemoveFromEventList+0xb4>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d903      	bls.n	8008b62 <xTaskRemoveFromEventList+0x5e>
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5e:	4a16      	ldr	r2, [pc, #88]	@ (8008bb8 <xTaskRemoveFromEventList+0xb4>)
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4a13      	ldr	r2, [pc, #76]	@ (8008bbc <xTaskRemoveFromEventList+0xb8>)
 8008b70:	441a      	add	r2, r3
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fe fdd8 	bl	800772e <vListInsertEnd>
 8008b7e:	e005      	b.n	8008b8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	3318      	adds	r3, #24
 8008b84:	4619      	mov	r1, r3
 8008b86:	480e      	ldr	r0, [pc, #56]	@ (8008bc0 <xTaskRemoveFromEventList+0xbc>)
 8008b88:	f7fe fdd1 	bl	800772e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b90:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <xTaskRemoveFromEventList+0xc0>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d905      	bls.n	8008ba6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc8 <xTaskRemoveFromEventList+0xc4>)
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e001      	b.n	8008baa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008baa:	697b      	ldr	r3, [r7, #20]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200064e8 	.word	0x200064e8
 8008bb8:	200064c8 	.word	0x200064c8
 8008bbc:	20005ff0 	.word	0x20005ff0
 8008bc0:	20006480 	.word	0x20006480
 8008bc4:	20005fec 	.word	0x20005fec
 8008bc8:	200064d4 	.word	0x200064d4

08008bcc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10b      	bne.n	8008bf2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	60fb      	str	r3, [r7, #12]
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	e7fd      	b.n	8008bee <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008bf2:	f000 fed9 	bl	80099a8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bf6:	4b07      	ldr	r3, [pc, #28]	@ (8008c14 <vTaskSetTimeOutState+0x48>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008bfe:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <vTaskSetTimeOutState+0x4c>)
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008c06:	f000 ff01 	bl	8009a0c <vPortExitCritical>
}
 8008c0a:	bf00      	nop
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	200064d8 	.word	0x200064d8
 8008c18:	200064c4 	.word	0x200064c4

08008c1c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c24:	4b06      	ldr	r3, [pc, #24]	@ (8008c40 <vTaskInternalSetTimeOutState+0x24>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c2c:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <vTaskInternalSetTimeOutState+0x28>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	605a      	str	r2, [r3, #4]
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	200064d8 	.word	0x200064d8
 8008c44:	200064c4 	.word	0x200064c4

08008c48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10b      	bne.n	8008c70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	613b      	str	r3, [r7, #16]
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	e7fd      	b.n	8008c6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60fb      	str	r3, [r7, #12]
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	e7fd      	b.n	8008c8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008c8e:	f000 fe8b 	bl	80099a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c92:	4b1d      	ldr	r3, [pc, #116]	@ (8008d08 <xTaskCheckForTimeOut+0xc0>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d102      	bne.n	8008cb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e023      	b.n	8008cfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b15      	ldr	r3, [pc, #84]	@ (8008d0c <xTaskCheckForTimeOut+0xc4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d007      	beq.n	8008cce <xTaskCheckForTimeOut+0x86>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d302      	bcc.n	8008cce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e015      	b.n	8008cfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d20b      	bcs.n	8008cf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff ff99 	bl	8008c1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e004      	b.n	8008cfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cfa:	f000 fe87 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200064c4 	.word	0x200064c4
 8008d0c:	200064d8 	.word	0x200064d8

08008d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d14:	4b03      	ldr	r3, [pc, #12]	@ (8008d24 <vTaskMissedYield+0x14>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
}
 8008d1a:	bf00      	nop
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	200064d4 	.word	0x200064d4

08008d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d30:	f000 f852 	bl	8008dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d34:	4b06      	ldr	r3, [pc, #24]	@ (8008d50 <prvIdleTask+0x28>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d9f9      	bls.n	8008d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d3c:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <prvIdleTask+0x2c>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d4c:	e7f0      	b.n	8008d30 <prvIdleTask+0x8>
 8008d4e:	bf00      	nop
 8008d50:	20005ff0 	.word	0x20005ff0
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d5e:	2300      	movs	r3, #0
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	e00c      	b.n	8008d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a12      	ldr	r2, [pc, #72]	@ (8008db8 <prvInitialiseTaskLists+0x60>)
 8008d70:	4413      	add	r3, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe fcae 	bl	80076d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	607b      	str	r3, [r7, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b37      	cmp	r3, #55	@ 0x37
 8008d82:	d9ef      	bls.n	8008d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d84:	480d      	ldr	r0, [pc, #52]	@ (8008dbc <prvInitialiseTaskLists+0x64>)
 8008d86:	f7fe fca5 	bl	80076d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d8a:	480d      	ldr	r0, [pc, #52]	@ (8008dc0 <prvInitialiseTaskLists+0x68>)
 8008d8c:	f7fe fca2 	bl	80076d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d90:	480c      	ldr	r0, [pc, #48]	@ (8008dc4 <prvInitialiseTaskLists+0x6c>)
 8008d92:	f7fe fc9f 	bl	80076d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d96:	480c      	ldr	r0, [pc, #48]	@ (8008dc8 <prvInitialiseTaskLists+0x70>)
 8008d98:	f7fe fc9c 	bl	80076d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d9c:	480b      	ldr	r0, [pc, #44]	@ (8008dcc <prvInitialiseTaskLists+0x74>)
 8008d9e:	f7fe fc99 	bl	80076d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008da2:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd0 <prvInitialiseTaskLists+0x78>)
 8008da4:	4a05      	ldr	r2, [pc, #20]	@ (8008dbc <prvInitialiseTaskLists+0x64>)
 8008da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008da8:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd4 <prvInitialiseTaskLists+0x7c>)
 8008daa:	4a05      	ldr	r2, [pc, #20]	@ (8008dc0 <prvInitialiseTaskLists+0x68>)
 8008dac:	601a      	str	r2, [r3, #0]
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20005ff0 	.word	0x20005ff0
 8008dbc:	20006450 	.word	0x20006450
 8008dc0:	20006464 	.word	0x20006464
 8008dc4:	20006480 	.word	0x20006480
 8008dc8:	20006494 	.word	0x20006494
 8008dcc:	200064ac 	.word	0x200064ac
 8008dd0:	20006478 	.word	0x20006478
 8008dd4:	2000647c 	.word	0x2000647c

08008dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dde:	e019      	b.n	8008e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008de0:	f000 fde2 	bl	80099a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de4:	4b10      	ldr	r3, [pc, #64]	@ (8008e28 <prvCheckTasksWaitingTermination+0x50>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fcf9 	bl	80077e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008df6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e2c <prvCheckTasksWaitingTermination+0x54>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8008e2c <prvCheckTasksWaitingTermination+0x54>)
 8008dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	4a0a      	ldr	r2, [pc, #40]	@ (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e0a:	f000 fdff 	bl	8009a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f810 	bl	8008e34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e14:	4b06      	ldr	r3, [pc, #24]	@ (8008e30 <prvCheckTasksWaitingTermination+0x58>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e1      	bne.n	8008de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20006494 	.word	0x20006494
 8008e2c:	200064c0 	.word	0x200064c0
 8008e30:	200064a8 	.word	0x200064a8

08008e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d108      	bne.n	8008e58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 ff9c 	bl	8009d88 <vPortFree>
				vPortFree( pxTCB );
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 ff99 	bl	8009d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e56:	e019      	b.n	8008e8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d103      	bne.n	8008e6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 ff90 	bl	8009d88 <vPortFree>
	}
 8008e68:	e010      	b.n	8008e8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d00b      	beq.n	8008e8c <prvDeleteTCB+0x58>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	60fb      	str	r3, [r7, #12]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <prvDeleteTCB+0x54>
	}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ecc <prvResetNextTaskUnblockTime+0x38>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eac:	e008      	b.n	8008ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eae:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <prvResetNextTaskUnblockTime+0x38>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	4a04      	ldr	r2, [pc, #16]	@ (8008ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ebe:	6013      	str	r3, [r2, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	20006478 	.word	0x20006478
 8008ed0:	200064e0 	.word	0x200064e0

08008ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008eda:	4b0b      	ldr	r3, [pc, #44]	@ (8008f08 <xTaskGetSchedulerState+0x34>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d102      	bne.n	8008ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	e008      	b.n	8008efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee8:	4b08      	ldr	r3, [pc, #32]	@ (8008f0c <xTaskGetSchedulerState+0x38>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	607b      	str	r3, [r7, #4]
 8008ef4:	e001      	b.n	8008efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008efa:	687b      	ldr	r3, [r7, #4]
	}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	200064cc 	.word	0x200064cc
 8008f0c:	200064e8 	.word	0x200064e8

08008f10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d058      	beq.n	8008fd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f26:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe4 <xTaskPriorityDisinherit+0xd4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d00b      	beq.n	8008f48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	e7fd      	b.n	8008f44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	60bb      	str	r3, [r7, #8]
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f6c:	1e5a      	subs	r2, r3, #1
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d02c      	beq.n	8008fd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d128      	bne.n	8008fd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fc2c 	bl	80077e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe8 <xTaskPriorityDisinherit+0xd8>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d903      	bls.n	8008fb8 <xTaskPriorityDisinherit+0xa8>
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe8 <xTaskPriorityDisinherit+0xd8>)
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4a09      	ldr	r2, [pc, #36]	@ (8008fec <xTaskPriorityDisinherit+0xdc>)
 8008fc6:	441a      	add	r2, r3
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4610      	mov	r0, r2
 8008fd0:	f7fe fbad 	bl	800772e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fd8:	697b      	ldr	r3, [r7, #20]
	}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20005fec 	.word	0x20005fec
 8008fe8:	200064c8 	.word	0x200064c8
 8008fec:	20005ff0 	.word	0x20005ff0

08008ff0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ffa:	4b21      	ldr	r3, [pc, #132]	@ (8009080 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009000:	4b20      	ldr	r3, [pc, #128]	@ (8009084 <prvAddCurrentTaskToDelayedList+0x94>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3304      	adds	r3, #4
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fbee 	bl	80077e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009012:	d10a      	bne.n	800902a <prvAddCurrentTaskToDelayedList+0x3a>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800901a:	4b1a      	ldr	r3, [pc, #104]	@ (8009084 <prvAddCurrentTaskToDelayedList+0x94>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3304      	adds	r3, #4
 8009020:	4619      	mov	r1, r3
 8009022:	4819      	ldr	r0, [pc, #100]	@ (8009088 <prvAddCurrentTaskToDelayedList+0x98>)
 8009024:	f7fe fb83 	bl	800772e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009028:	e026      	b.n	8009078 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4413      	add	r3, r2
 8009030:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009032:	4b14      	ldr	r3, [pc, #80]	@ (8009084 <prvAddCurrentTaskToDelayedList+0x94>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	429a      	cmp	r2, r3
 8009040:	d209      	bcs.n	8009056 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009042:	4b12      	ldr	r3, [pc, #72]	@ (800908c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4b0f      	ldr	r3, [pc, #60]	@ (8009084 <prvAddCurrentTaskToDelayedList+0x94>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3304      	adds	r3, #4
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f7fe fb91 	bl	8007776 <vListInsert>
}
 8009054:	e010      	b.n	8009078 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009056:	4b0e      	ldr	r3, [pc, #56]	@ (8009090 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b0a      	ldr	r3, [pc, #40]	@ (8009084 <prvAddCurrentTaskToDelayedList+0x94>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3304      	adds	r3, #4
 8009060:	4619      	mov	r1, r3
 8009062:	4610      	mov	r0, r2
 8009064:	f7fe fb87 	bl	8007776 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009068:	4b0a      	ldr	r3, [pc, #40]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	429a      	cmp	r2, r3
 8009070:	d202      	bcs.n	8009078 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009072:	4a08      	ldr	r2, [pc, #32]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6013      	str	r3, [r2, #0]
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200064c4 	.word	0x200064c4
 8009084:	20005fec 	.word	0x20005fec
 8009088:	200064ac 	.word	0x200064ac
 800908c:	2000647c 	.word	0x2000647c
 8009090:	20006478 	.word	0x20006478
 8009094:	200064e0 	.word	0x200064e0

08009098 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	@ 0x28
 800909c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800909e:	2300      	movs	r3, #0
 80090a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090a2:	f000 fb13 	bl	80096cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090a6:	4b1d      	ldr	r3, [pc, #116]	@ (800911c <xTimerCreateTimerTask+0x84>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d021      	beq.n	80090f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090b6:	1d3a      	adds	r2, r7, #4
 80090b8:	f107 0108 	add.w	r1, r7, #8
 80090bc:	f107 030c 	add.w	r3, r7, #12
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe faed 	bl	80076a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	9202      	str	r2, [sp, #8]
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	2302      	movs	r3, #2
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	460a      	mov	r2, r1
 80090d8:	4911      	ldr	r1, [pc, #68]	@ (8009120 <xTimerCreateTimerTask+0x88>)
 80090da:	4812      	ldr	r0, [pc, #72]	@ (8009124 <xTimerCreateTimerTask+0x8c>)
 80090dc:	f7ff f8a8 	bl	8008230 <xTaskCreateStatic>
 80090e0:	4603      	mov	r3, r0
 80090e2:	4a11      	ldr	r2, [pc, #68]	@ (8009128 <xTimerCreateTimerTask+0x90>)
 80090e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090e6:	4b10      	ldr	r3, [pc, #64]	@ (8009128 <xTimerCreateTimerTask+0x90>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	613b      	str	r3, [r7, #16]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009110:	697b      	ldr	r3, [r7, #20]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	2000651c 	.word	0x2000651c
 8009120:	0801964c 	.word	0x0801964c
 8009124:	08009265 	.word	0x08009265
 8009128:	20006520 	.word	0x20006520

0800912c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08a      	sub	sp, #40	@ 0x28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800913a:	2300      	movs	r3, #0
 800913c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10b      	bne.n	800915c <xTimerGenericCommand+0x30>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	623b      	str	r3, [r7, #32]
}
 8009156:	bf00      	nop
 8009158:	bf00      	nop
 800915a:	e7fd      	b.n	8009158 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800915c:	4b19      	ldr	r3, [pc, #100]	@ (80091c4 <xTimerGenericCommand+0x98>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d02a      	beq.n	80091ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b05      	cmp	r3, #5
 8009174:	dc18      	bgt.n	80091a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009176:	f7ff fead 	bl	8008ed4 <xTaskGetSchedulerState>
 800917a:	4603      	mov	r3, r0
 800917c:	2b02      	cmp	r3, #2
 800917e:	d109      	bne.n	8009194 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009180:	4b10      	ldr	r3, [pc, #64]	@ (80091c4 <xTimerGenericCommand+0x98>)
 8009182:	6818      	ldr	r0, [r3, #0]
 8009184:	f107 0110 	add.w	r1, r7, #16
 8009188:	2300      	movs	r3, #0
 800918a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800918c:	f7fe fc60 	bl	8007a50 <xQueueGenericSend>
 8009190:	6278      	str	r0, [r7, #36]	@ 0x24
 8009192:	e012      	b.n	80091ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009194:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <xTimerGenericCommand+0x98>)
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	f107 0110 	add.w	r1, r7, #16
 800919c:	2300      	movs	r3, #0
 800919e:	2200      	movs	r2, #0
 80091a0:	f7fe fc56 	bl	8007a50 <xQueueGenericSend>
 80091a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80091a6:	e008      	b.n	80091ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091a8:	4b06      	ldr	r3, [pc, #24]	@ (80091c4 <xTimerGenericCommand+0x98>)
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	f107 0110 	add.w	r1, r7, #16
 80091b0:	2300      	movs	r3, #0
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	f7fe fd4e 	bl	8007c54 <xQueueGenericSendFromISR>
 80091b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3728      	adds	r7, #40	@ 0x28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	2000651c 	.word	0x2000651c

080091c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b23      	ldr	r3, [pc, #140]	@ (8009260 <prvProcessExpiredTimer+0x98>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	3304      	adds	r3, #4
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fb01 	bl	80077e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d023      	beq.n	800923c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	18d1      	adds	r1, r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	6978      	ldr	r0, [r7, #20]
 8009202:	f000 f8d5 	bl	80093b0 <prvInsertTimerInActiveList>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d020      	beq.n	800924e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800920c:	2300      	movs	r3, #0
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	2300      	movs	r3, #0
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	2100      	movs	r1, #0
 8009216:	6978      	ldr	r0, [r7, #20]
 8009218:	f7ff ff88 	bl	800912c <xTimerGenericCommand>
 800921c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d114      	bne.n	800924e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	60fb      	str	r3, [r7, #12]
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009242:	f023 0301 	bic.w	r3, r3, #1
 8009246:	b2da      	uxtb	r2, r3
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	6978      	ldr	r0, [r7, #20]
 8009254:	4798      	blx	r3
}
 8009256:	bf00      	nop
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20006514 	.word	0x20006514

08009264 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800926c:	f107 0308 	add.w	r3, r7, #8
 8009270:	4618      	mov	r0, r3
 8009272:	f000 f859 	bl	8009328 <prvGetNextExpireTime>
 8009276:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f805 	bl	800928c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009282:	f000 f8d7 	bl	8009434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009286:	bf00      	nop
 8009288:	e7f0      	b.n	800926c <prvTimerTask+0x8>
	...

0800928c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009296:	f7ff fa0f 	bl	80086b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800929a:	f107 0308 	add.w	r3, r7, #8
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 f866 	bl	8009370 <prvSampleTimeNow>
 80092a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d130      	bne.n	800930e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <prvProcessTimerOrBlockTask+0x3c>
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d806      	bhi.n	80092c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092ba:	f7ff fa0b 	bl	80086d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff81 	bl	80091c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092c6:	e024      	b.n	8009312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d008      	beq.n	80092e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092ce:	4b13      	ldr	r3, [pc, #76]	@ (800931c <prvProcessTimerOrBlockTask+0x90>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <prvProcessTimerOrBlockTask+0x50>
 80092d8:	2301      	movs	r3, #1
 80092da:	e000      	b.n	80092de <prvProcessTimerOrBlockTask+0x52>
 80092dc:	2300      	movs	r3, #0
 80092de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009320 <prvProcessTimerOrBlockTask+0x94>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	4619      	mov	r1, r3
 80092ee:	f7fe ff6b 	bl	80081c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092f2:	f7ff f9ef 	bl	80086d4 <xTaskResumeAll>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10a      	bne.n	8009312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092fc:	4b09      	ldr	r3, [pc, #36]	@ (8009324 <prvProcessTimerOrBlockTask+0x98>)
 80092fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	f3bf 8f6f 	isb	sy
}
 800930c:	e001      	b.n	8009312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800930e:	f7ff f9e1 	bl	80086d4 <xTaskResumeAll>
}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20006518 	.word	0x20006518
 8009320:	2000651c 	.word	0x2000651c
 8009324:	e000ed04 	.word	0xe000ed04

08009328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009330:	4b0e      	ldr	r3, [pc, #56]	@ (800936c <prvGetNextExpireTime+0x44>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <prvGetNextExpireTime+0x16>
 800933a:	2201      	movs	r2, #1
 800933c:	e000      	b.n	8009340 <prvGetNextExpireTime+0x18>
 800933e:	2200      	movs	r2, #0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d105      	bne.n	8009358 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800934c:	4b07      	ldr	r3, [pc, #28]	@ (800936c <prvGetNextExpireTime+0x44>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	e001      	b.n	800935c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800935c:	68fb      	ldr	r3, [r7, #12]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	20006514 	.word	0x20006514

08009370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009378:	f7ff fa4a 	bl	8008810 <xTaskGetTickCount>
 800937c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800937e:	4b0b      	ldr	r3, [pc, #44]	@ (80093ac <prvSampleTimeNow+0x3c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	429a      	cmp	r2, r3
 8009386:	d205      	bcs.n	8009394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009388:	f000 f93a 	bl	8009600 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	e002      	b.n	800939a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800939a:	4a04      	ldr	r2, [pc, #16]	@ (80093ac <prvSampleTimeNow+0x3c>)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093a0:	68fb      	ldr	r3, [r7, #12]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20006524 	.word	0x20006524

080093b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d812      	bhi.n	80093fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	1ad2      	subs	r2, r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d302      	bcc.n	80093ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093e4:	2301      	movs	r3, #1
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	e01b      	b.n	8009422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093ea:	4b10      	ldr	r3, [pc, #64]	@ (800942c <prvInsertTimerInActiveList+0x7c>)
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f7fe f9be 	bl	8007776 <vListInsert>
 80093fa:	e012      	b.n	8009422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d206      	bcs.n	8009412 <prvInsertTimerInActiveList+0x62>
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d302      	bcc.n	8009412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	e007      	b.n	8009422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009412:	4b07      	ldr	r3, [pc, #28]	@ (8009430 <prvInsertTimerInActiveList+0x80>)
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fe f9aa 	bl	8007776 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009422:	697b      	ldr	r3, [r7, #20]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20006518 	.word	0x20006518
 8009430:	20006514 	.word	0x20006514

08009434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08e      	sub	sp, #56	@ 0x38
 8009438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800943a:	e0ce      	b.n	80095da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	da19      	bge.n	8009476 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009442:	1d3b      	adds	r3, r7, #4
 8009444:	3304      	adds	r3, #4
 8009446:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10b      	bne.n	8009466 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	61fb      	str	r3, [r7, #28]
}
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	e7fd      	b.n	8009462 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800946c:	6850      	ldr	r0, [r2, #4]
 800946e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009470:	6892      	ldr	r2, [r2, #8]
 8009472:	4611      	mov	r1, r2
 8009474:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f2c0 80ae 	blt.w	80095da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d004      	beq.n	8009494 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	3304      	adds	r3, #4
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe f9aa 	bl	80077e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009494:	463b      	mov	r3, r7
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff ff6a 	bl	8009370 <prvSampleTimeNow>
 800949c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b09      	cmp	r3, #9
 80094a2:	f200 8097 	bhi.w	80095d4 <prvProcessReceivedCommands+0x1a0>
 80094a6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ac <prvProcessReceivedCommands+0x78>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	080094d5 	.word	0x080094d5
 80094b0:	080094d5 	.word	0x080094d5
 80094b4:	080094d5 	.word	0x080094d5
 80094b8:	0800954b 	.word	0x0800954b
 80094bc:	0800955f 	.word	0x0800955f
 80094c0:	080095ab 	.word	0x080095ab
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094d5 	.word	0x080094d5
 80094cc:	0800954b 	.word	0x0800954b
 80094d0:	0800955f 	.word	0x0800955f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094da:	f043 0301 	orr.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	18d1      	adds	r1, r2, r3
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094f4:	f7ff ff5c 	bl	80093b0 <prvInsertTimerInActiveList>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d06c      	beq.n	80095d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009504:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d061      	beq.n	80095d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	441a      	add	r2, r3
 800951c:	2300      	movs	r3, #0
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	2300      	movs	r3, #0
 8009522:	2100      	movs	r1, #0
 8009524:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009526:	f7ff fe01 	bl	800912c <xTimerGenericCommand>
 800952a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d152      	bne.n	80095d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	61bb      	str	r3, [r7, #24]
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800954a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009550:	f023 0301 	bic.w	r3, r3, #1
 8009554:	b2da      	uxtb	r2, r3
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800955c:	e03d      	b.n	80095da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009564:	f043 0301 	orr.w	r3, r3, #1
 8009568:	b2da      	uxtb	r2, r3
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10b      	bne.n	8009596 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	617b      	str	r3, [r7, #20]
}
 8009590:	bf00      	nop
 8009592:	bf00      	nop
 8009594:	e7fd      	b.n	8009592 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	699a      	ldr	r2, [r3, #24]
 800959a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959c:	18d1      	adds	r1, r2, r3
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095a4:	f7ff ff04 	bl	80093b0 <prvInsertTimerInActiveList>
					break;
 80095a8:	e017      	b.n	80095da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d103      	bne.n	80095c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80095b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095ba:	f000 fbe5 	bl	8009d88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095be:	e00c      	b.n	80095da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095c6:	f023 0301 	bic.w	r3, r3, #1
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80095d2:	e002      	b.n	80095da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80095d4:	bf00      	nop
 80095d6:	e000      	b.n	80095da <prvProcessReceivedCommands+0x1a6>
					break;
 80095d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095da:	4b08      	ldr	r3, [pc, #32]	@ (80095fc <prvProcessReceivedCommands+0x1c8>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	1d39      	adds	r1, r7, #4
 80095e0:	2200      	movs	r2, #0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fbd4 	bl	8007d90 <xQueueReceive>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f47f af26 	bne.w	800943c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3730      	adds	r7, #48	@ 0x30
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	2000651c 	.word	0x2000651c

08009600 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009606:	e049      	b.n	800969c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009608:	4b2e      	ldr	r3, [pc, #184]	@ (80096c4 <prvSwitchTimerLists+0xc4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009612:	4b2c      	ldr	r3, [pc, #176]	@ (80096c4 <prvSwitchTimerLists+0xc4>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3304      	adds	r3, #4
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe f8e1 	bl	80077e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d02f      	beq.n	800969c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4413      	add	r3, r2
 8009644:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	429a      	cmp	r2, r3
 800964c:	d90e      	bls.n	800966c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800965a:	4b1a      	ldr	r3, [pc, #104]	@ (80096c4 <prvSwitchTimerLists+0xc4>)
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3304      	adds	r3, #4
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	f7fe f886 	bl	8007776 <vListInsert>
 800966a:	e017      	b.n	800969c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800966c:	2300      	movs	r3, #0
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	2300      	movs	r3, #0
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	2100      	movs	r1, #0
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7ff fd58 	bl	800912c <xTimerGenericCommand>
 800967c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	603b      	str	r3, [r7, #0]
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800969c:	4b09      	ldr	r3, [pc, #36]	@ (80096c4 <prvSwitchTimerLists+0xc4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1b0      	bne.n	8009608 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096a6:	4b07      	ldr	r3, [pc, #28]	@ (80096c4 <prvSwitchTimerLists+0xc4>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096ac:	4b06      	ldr	r3, [pc, #24]	@ (80096c8 <prvSwitchTimerLists+0xc8>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a04      	ldr	r2, [pc, #16]	@ (80096c4 <prvSwitchTimerLists+0xc4>)
 80096b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096b4:	4a04      	ldr	r2, [pc, #16]	@ (80096c8 <prvSwitchTimerLists+0xc8>)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	6013      	str	r3, [r2, #0]
}
 80096ba:	bf00      	nop
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20006514 	.word	0x20006514
 80096c8:	20006518 	.word	0x20006518

080096cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096d2:	f000 f969 	bl	80099a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096d6:	4b15      	ldr	r3, [pc, #84]	@ (800972c <prvCheckForValidListAndQueue+0x60>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d120      	bne.n	8009720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096de:	4814      	ldr	r0, [pc, #80]	@ (8009730 <prvCheckForValidListAndQueue+0x64>)
 80096e0:	f7fd fff8 	bl	80076d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096e4:	4813      	ldr	r0, [pc, #76]	@ (8009734 <prvCheckForValidListAndQueue+0x68>)
 80096e6:	f7fd fff5 	bl	80076d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096ea:	4b13      	ldr	r3, [pc, #76]	@ (8009738 <prvCheckForValidListAndQueue+0x6c>)
 80096ec:	4a10      	ldr	r2, [pc, #64]	@ (8009730 <prvCheckForValidListAndQueue+0x64>)
 80096ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096f0:	4b12      	ldr	r3, [pc, #72]	@ (800973c <prvCheckForValidListAndQueue+0x70>)
 80096f2:	4a10      	ldr	r2, [pc, #64]	@ (8009734 <prvCheckForValidListAndQueue+0x68>)
 80096f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096f6:	2300      	movs	r3, #0
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	4b11      	ldr	r3, [pc, #68]	@ (8009740 <prvCheckForValidListAndQueue+0x74>)
 80096fc:	4a11      	ldr	r2, [pc, #68]	@ (8009744 <prvCheckForValidListAndQueue+0x78>)
 80096fe:	2110      	movs	r1, #16
 8009700:	200a      	movs	r0, #10
 8009702:	f7fe f905 	bl	8007910 <xQueueGenericCreateStatic>
 8009706:	4603      	mov	r3, r0
 8009708:	4a08      	ldr	r2, [pc, #32]	@ (800972c <prvCheckForValidListAndQueue+0x60>)
 800970a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800970c:	4b07      	ldr	r3, [pc, #28]	@ (800972c <prvCheckForValidListAndQueue+0x60>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d005      	beq.n	8009720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009714:	4b05      	ldr	r3, [pc, #20]	@ (800972c <prvCheckForValidListAndQueue+0x60>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	490b      	ldr	r1, [pc, #44]	@ (8009748 <prvCheckForValidListAndQueue+0x7c>)
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fd2a 	bl	8008174 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009720:	f000 f974 	bl	8009a0c <vPortExitCritical>
}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	2000651c 	.word	0x2000651c
 8009730:	200064ec 	.word	0x200064ec
 8009734:	20006500 	.word	0x20006500
 8009738:	20006514 	.word	0x20006514
 800973c:	20006518 	.word	0x20006518
 8009740:	200065c8 	.word	0x200065c8
 8009744:	20006528 	.word	0x20006528
 8009748:	08019654 	.word	0x08019654

0800974c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3b04      	subs	r3, #4
 800975c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3b04      	subs	r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f023 0201 	bic.w	r2, r3, #1
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3b04      	subs	r3, #4
 800977a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800977c:	4a0c      	ldr	r2, [pc, #48]	@ (80097b0 <pxPortInitialiseStack+0x64>)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3b14      	subs	r3, #20
 8009786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3b04      	subs	r3, #4
 8009792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f06f 0202 	mvn.w	r2, #2
 800979a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3b20      	subs	r3, #32
 80097a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097a2:	68fb      	ldr	r3, [r7, #12]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	080097b5 	.word	0x080097b5

080097b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097be:	4b13      	ldr	r3, [pc, #76]	@ (800980c <prvTaskExitError+0x58>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c6:	d00b      	beq.n	80097e0 <prvTaskExitError+0x2c>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	60fb      	str	r3, [r7, #12]
}
 80097da:	bf00      	nop
 80097dc:	bf00      	nop
 80097de:	e7fd      	b.n	80097dc <prvTaskExitError+0x28>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60bb      	str	r3, [r7, #8]
}
 80097f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097f4:	bf00      	nop
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d0fc      	beq.n	80097f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097fc:	bf00      	nop
 80097fe:	bf00      	nop
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	2000003c 	.word	0x2000003c

08009810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009810:	4b07      	ldr	r3, [pc, #28]	@ (8009830 <pxCurrentTCBConst2>)
 8009812:	6819      	ldr	r1, [r3, #0]
 8009814:	6808      	ldr	r0, [r1, #0]
 8009816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	f380 8809 	msr	PSP, r0
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f380 8811 	msr	BASEPRI, r0
 800982a:	4770      	bx	lr
 800982c:	f3af 8000 	nop.w

08009830 <pxCurrentTCBConst2>:
 8009830:	20005fec 	.word	0x20005fec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop

08009838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009838:	4808      	ldr	r0, [pc, #32]	@ (800985c <prvPortStartFirstTask+0x24>)
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	6800      	ldr	r0, [r0, #0]
 800983e:	f380 8808 	msr	MSP, r0
 8009842:	f04f 0000 	mov.w	r0, #0
 8009846:	f380 8814 	msr	CONTROL, r0
 800984a:	b662      	cpsie	i
 800984c:	b661      	cpsie	f
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	df00      	svc	0
 8009858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800985a:	bf00      	nop
 800985c:	e000ed08 	.word	0xe000ed08

08009860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009866:	4b47      	ldr	r3, [pc, #284]	@ (8009984 <xPortStartScheduler+0x124>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a47      	ldr	r2, [pc, #284]	@ (8009988 <xPortStartScheduler+0x128>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d10b      	bne.n	8009888 <xPortStartScheduler+0x28>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	60fb      	str	r3, [r7, #12]
}
 8009882:	bf00      	nop
 8009884:	bf00      	nop
 8009886:	e7fd      	b.n	8009884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009888:	4b3e      	ldr	r3, [pc, #248]	@ (8009984 <xPortStartScheduler+0x124>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a3f      	ldr	r2, [pc, #252]	@ (800998c <xPortStartScheduler+0x12c>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d10b      	bne.n	80098aa <xPortStartScheduler+0x4a>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	613b      	str	r3, [r7, #16]
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	e7fd      	b.n	80098a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098aa:	4b39      	ldr	r3, [pc, #228]	@ (8009990 <xPortStartScheduler+0x130>)
 80098ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	22ff      	movs	r2, #255	@ 0xff
 80098ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	4b31      	ldr	r3, [pc, #196]	@ (8009994 <xPortStartScheduler+0x134>)
 80098d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098d2:	4b31      	ldr	r3, [pc, #196]	@ (8009998 <xPortStartScheduler+0x138>)
 80098d4:	2207      	movs	r2, #7
 80098d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098d8:	e009      	b.n	80098ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80098da:	4b2f      	ldr	r3, [pc, #188]	@ (8009998 <xPortStartScheduler+0x138>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3b01      	subs	r3, #1
 80098e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009998 <xPortStartScheduler+0x138>)
 80098e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098f6:	2b80      	cmp	r3, #128	@ 0x80
 80098f8:	d0ef      	beq.n	80098da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098fa:	4b27      	ldr	r3, [pc, #156]	@ (8009998 <xPortStartScheduler+0x138>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f1c3 0307 	rsb	r3, r3, #7
 8009902:	2b04      	cmp	r3, #4
 8009904:	d00b      	beq.n	800991e <xPortStartScheduler+0xbe>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60bb      	str	r3, [r7, #8]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800991e:	4b1e      	ldr	r3, [pc, #120]	@ (8009998 <xPortStartScheduler+0x138>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	4a1c      	ldr	r2, [pc, #112]	@ (8009998 <xPortStartScheduler+0x138>)
 8009926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009928:	4b1b      	ldr	r3, [pc, #108]	@ (8009998 <xPortStartScheduler+0x138>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009930:	4a19      	ldr	r2, [pc, #100]	@ (8009998 <xPortStartScheduler+0x138>)
 8009932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800993c:	4b17      	ldr	r3, [pc, #92]	@ (800999c <xPortStartScheduler+0x13c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a16      	ldr	r2, [pc, #88]	@ (800999c <xPortStartScheduler+0x13c>)
 8009942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009948:	4b14      	ldr	r3, [pc, #80]	@ (800999c <xPortStartScheduler+0x13c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a13      	ldr	r2, [pc, #76]	@ (800999c <xPortStartScheduler+0x13c>)
 800994e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009954:	f000 f8da 	bl	8009b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009958:	4b11      	ldr	r3, [pc, #68]	@ (80099a0 <xPortStartScheduler+0x140>)
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800995e:	f000 f8f9 	bl	8009b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009962:	4b10      	ldr	r3, [pc, #64]	@ (80099a4 <xPortStartScheduler+0x144>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a0f      	ldr	r2, [pc, #60]	@ (80099a4 <xPortStartScheduler+0x144>)
 8009968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800996c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800996e:	f7ff ff63 	bl	8009838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009972:	f7ff f817 	bl	80089a4 <vTaskSwitchContext>
	prvTaskExitError();
 8009976:	f7ff ff1d 	bl	80097b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	e000ed00 	.word	0xe000ed00
 8009988:	410fc271 	.word	0x410fc271
 800998c:	410fc270 	.word	0x410fc270
 8009990:	e000e400 	.word	0xe000e400
 8009994:	20006618 	.word	0x20006618
 8009998:	2000661c 	.word	0x2000661c
 800999c:	e000ed20 	.word	0xe000ed20
 80099a0:	2000003c 	.word	0x2000003c
 80099a4:	e000ef34 	.word	0xe000ef34

080099a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099c2:	4b10      	ldr	r3, [pc, #64]	@ (8009a04 <vPortEnterCritical+0x5c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3301      	adds	r3, #1
 80099c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009a04 <vPortEnterCritical+0x5c>)
 80099ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <vPortEnterCritical+0x5c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d110      	bne.n	80099f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a08 <vPortEnterCritical+0x60>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	603b      	str	r3, [r7, #0]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <vPortEnterCritical+0x4a>
	}
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	2000003c 	.word	0x2000003c
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a12:	4b12      	ldr	r3, [pc, #72]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10b      	bne.n	8009a32 <vPortExitCritical+0x26>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	607b      	str	r3, [r7, #4]
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	e7fd      	b.n	8009a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a32:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	4a08      	ldr	r2, [pc, #32]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a3c:	4b07      	ldr	r3, [pc, #28]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d105      	bne.n	8009a50 <vPortExitCritical+0x44>
 8009a44:	2300      	movs	r3, #0
 8009a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f383 8811 	msr	BASEPRI, r3
}
 8009a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	2000003c 	.word	0x2000003c

08009a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a60:	f3ef 8009 	mrs	r0, PSP
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4b15      	ldr	r3, [pc, #84]	@ (8009ac0 <pxCurrentTCBConst>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	f01e 0f10 	tst.w	lr, #16
 8009a70:	bf08      	it	eq
 8009a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	6010      	str	r0, [r2, #0]
 8009a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a84:	f380 8811 	msr	BASEPRI, r0
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f7fe ff88 	bl	80089a4 <vTaskSwitchContext>
 8009a94:	f04f 0000 	mov.w	r0, #0
 8009a98:	f380 8811 	msr	BASEPRI, r0
 8009a9c:	bc09      	pop	{r0, r3}
 8009a9e:	6819      	ldr	r1, [r3, #0]
 8009aa0:	6808      	ldr	r0, [r1, #0]
 8009aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa6:	f01e 0f10 	tst.w	lr, #16
 8009aaa:	bf08      	it	eq
 8009aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ab0:	f380 8809 	msr	PSP, r0
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	f3af 8000 	nop.w

08009ac0 <pxCurrentTCBConst>:
 8009ac0:	20005fec 	.word	0x20005fec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop

08009ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	607b      	str	r3, [r7, #4]
}
 8009ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ae2:	f7fe fea5 	bl	8008830 <xTaskIncrementTick>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aec:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <xPortSysTickHandler+0x40>)
 8009aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f383 8811 	msr	BASEPRI, r3
}
 8009afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b10:	4b0b      	ldr	r3, [pc, #44]	@ (8009b40 <vPortSetupTimerInterrupt+0x34>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b16:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <vPortSetupTimerInterrupt+0x38>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b48 <vPortSetupTimerInterrupt+0x3c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a0a      	ldr	r2, [pc, #40]	@ (8009b4c <vPortSetupTimerInterrupt+0x40>)
 8009b22:	fba2 2303 	umull	r2, r3, r2, r3
 8009b26:	099b      	lsrs	r3, r3, #6
 8009b28:	4a09      	ldr	r2, [pc, #36]	@ (8009b50 <vPortSetupTimerInterrupt+0x44>)
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b2e:	4b04      	ldr	r3, [pc, #16]	@ (8009b40 <vPortSetupTimerInterrupt+0x34>)
 8009b30:	2207      	movs	r2, #7
 8009b32:	601a      	str	r2, [r3, #0]
}
 8009b34:	bf00      	nop
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	e000e010 	.word	0xe000e010
 8009b44:	e000e018 	.word	0xe000e018
 8009b48:	20000030 	.word	0x20000030
 8009b4c:	10624dd3 	.word	0x10624dd3
 8009b50:	e000e014 	.word	0xe000e014

08009b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b64 <vPortEnableVFP+0x10>
 8009b58:	6801      	ldr	r1, [r0, #0]
 8009b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b5e:	6001      	str	r1, [r0, #0]
 8009b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b62:	bf00      	nop
 8009b64:	e000ed88 	.word	0xe000ed88

08009b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b6e:	f3ef 8305 	mrs	r3, IPSR
 8009b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d915      	bls.n	8009ba6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b7a:	4a18      	ldr	r2, [pc, #96]	@ (8009bdc <vPortValidateInterruptPriority+0x74>)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b84:	4b16      	ldr	r3, [pc, #88]	@ (8009be0 <vPortValidateInterruptPriority+0x78>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	7afa      	ldrb	r2, [r7, #11]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d20b      	bcs.n	8009ba6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	607b      	str	r3, [r7, #4]
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	e7fd      	b.n	8009ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8009be4 <vPortValidateInterruptPriority+0x7c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bae:	4b0e      	ldr	r3, [pc, #56]	@ (8009be8 <vPortValidateInterruptPriority+0x80>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d90b      	bls.n	8009bce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	603b      	str	r3, [r7, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <vPortValidateInterruptPriority+0x62>
	}
 8009bce:	bf00      	nop
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	e000e3f0 	.word	0xe000e3f0
 8009be0:	20006618 	.word	0x20006618
 8009be4:	e000ed0c 	.word	0xe000ed0c
 8009be8:	2000661c 	.word	0x2000661c

08009bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	@ 0x28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bf8:	f7fe fd5e 	bl	80086b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8009d70 <pvPortMalloc+0x184>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c04:	f000 f924 	bl	8009e50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c08:	4b5a      	ldr	r3, [pc, #360]	@ (8009d74 <pvPortMalloc+0x188>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 8095 	bne.w	8009d40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01e      	beq.n	8009c5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4413      	add	r3, r2
 8009c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d015      	beq.n	8009c5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f023 0307 	bic.w	r3, r3, #7
 8009c34:	3308      	adds	r3, #8
 8009c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00b      	beq.n	8009c5a <pvPortMalloc+0x6e>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	617b      	str	r3, [r7, #20]
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	e7fd      	b.n	8009c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d06f      	beq.n	8009d40 <pvPortMalloc+0x154>
 8009c60:	4b45      	ldr	r3, [pc, #276]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d86a      	bhi.n	8009d40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c6a:	4b44      	ldr	r3, [pc, #272]	@ (8009d7c <pvPortMalloc+0x190>)
 8009c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c6e:	4b43      	ldr	r3, [pc, #268]	@ (8009d7c <pvPortMalloc+0x190>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c74:	e004      	b.n	8009c80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d903      	bls.n	8009c92 <pvPortMalloc+0xa6>
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f1      	bne.n	8009c76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c92:	4b37      	ldr	r3, [pc, #220]	@ (8009d70 <pvPortMalloc+0x184>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d051      	beq.n	8009d40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	4413      	add	r3, r2
 8009ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	1ad2      	subs	r2, r2, r3
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d920      	bls.n	8009d00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <pvPortMalloc+0xfc>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	613b      	str	r3, [r7, #16]
}
 8009ce2:	bf00      	nop
 8009ce4:	bf00      	nop
 8009ce6:	e7fd      	b.n	8009ce4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cfa:	69b8      	ldr	r0, [r7, #24]
 8009cfc:	f000 f90a 	bl	8009f14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d00:	4b1d      	ldr	r3, [pc, #116]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b1b      	ldr	r3, [pc, #108]	@ (8009d80 <pvPortMalloc+0x194>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d203      	bcs.n	8009d22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d1a:	4b17      	ldr	r3, [pc, #92]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a18      	ldr	r2, [pc, #96]	@ (8009d80 <pvPortMalloc+0x194>)
 8009d20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	4b13      	ldr	r3, [pc, #76]	@ (8009d74 <pvPortMalloc+0x188>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d36:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <pvPortMalloc+0x198>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	4a11      	ldr	r2, [pc, #68]	@ (8009d84 <pvPortMalloc+0x198>)
 8009d3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d40:	f7fe fcc8 	bl	80086d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <pvPortMalloc+0x17a>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	60fb      	str	r3, [r7, #12]
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	e7fd      	b.n	8009d62 <pvPortMalloc+0x176>
	return pvReturn;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3728      	adds	r7, #40	@ 0x28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	2000a228 	.word	0x2000a228
 8009d74:	2000a23c 	.word	0x2000a23c
 8009d78:	2000a22c 	.word	0x2000a22c
 8009d7c:	2000a220 	.word	0x2000a220
 8009d80:	2000a230 	.word	0x2000a230
 8009d84:	2000a234 	.word	0x2000a234

08009d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d04f      	beq.n	8009e3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	425b      	negs	r3, r3
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	4413      	add	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	4b25      	ldr	r3, [pc, #148]	@ (8009e44 <vPortFree+0xbc>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4013      	ands	r3, r2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10b      	bne.n	8009dce <vPortFree+0x46>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	60fb      	str	r3, [r7, #12]
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	e7fd      	b.n	8009dca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00b      	beq.n	8009dee <vPortFree+0x66>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	60bb      	str	r3, [r7, #8]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	4b14      	ldr	r3, [pc, #80]	@ (8009e44 <vPortFree+0xbc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4013      	ands	r3, r2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01e      	beq.n	8009e3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d11a      	bne.n	8009e3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	4b0e      	ldr	r3, [pc, #56]	@ (8009e44 <vPortFree+0xbc>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	43db      	mvns	r3, r3
 8009e0e:	401a      	ands	r2, r3
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e14:	f7fe fc50 	bl	80086b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e48 <vPortFree+0xc0>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4413      	add	r3, r2
 8009e22:	4a09      	ldr	r2, [pc, #36]	@ (8009e48 <vPortFree+0xc0>)
 8009e24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e26:	6938      	ldr	r0, [r7, #16]
 8009e28:	f000 f874 	bl	8009f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e2c:	4b07      	ldr	r3, [pc, #28]	@ (8009e4c <vPortFree+0xc4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3301      	adds	r3, #1
 8009e32:	4a06      	ldr	r2, [pc, #24]	@ (8009e4c <vPortFree+0xc4>)
 8009e34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e36:	f7fe fc4d 	bl	80086d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e3a:	bf00      	nop
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	2000a23c 	.word	0x2000a23c
 8009e48:	2000a22c 	.word	0x2000a22c
 8009e4c:	2000a238 	.word	0x2000a238

08009e50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009e5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e5c:	4b27      	ldr	r3, [pc, #156]	@ (8009efc <prvHeapInit+0xac>)
 8009e5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3307      	adds	r3, #7
 8009e6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f023 0307 	bic.w	r3, r3, #7
 8009e76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8009efc <prvHeapInit+0xac>)
 8009e80:	4413      	add	r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e88:	4a1d      	ldr	r2, [pc, #116]	@ (8009f00 <prvHeapInit+0xb0>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8009f00 <prvHeapInit+0xb0>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	4413      	add	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0307 	bic.w	r3, r3, #7
 8009eaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4a15      	ldr	r2, [pc, #84]	@ (8009f04 <prvHeapInit+0xb4>)
 8009eb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009eb2:	4b14      	ldr	r3, [pc, #80]	@ (8009f04 <prvHeapInit+0xb4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eba:	4b12      	ldr	r3, [pc, #72]	@ (8009f04 <prvHeapInit+0xb4>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8009f04 <prvHeapInit+0xb4>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4a0a      	ldr	r2, [pc, #40]	@ (8009f08 <prvHeapInit+0xb8>)
 8009ede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	4a09      	ldr	r2, [pc, #36]	@ (8009f0c <prvHeapInit+0xbc>)
 8009ee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ee8:	4b09      	ldr	r3, [pc, #36]	@ (8009f10 <prvHeapInit+0xc0>)
 8009eea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009eee:	601a      	str	r2, [r3, #0]
}
 8009ef0:	bf00      	nop
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	20006620 	.word	0x20006620
 8009f00:	2000a220 	.word	0x2000a220
 8009f04:	2000a228 	.word	0x2000a228
 8009f08:	2000a230 	.word	0x2000a230
 8009f0c:	2000a22c 	.word	0x2000a22c
 8009f10:	2000a23c 	.word	0x2000a23c

08009f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f1c:	4b28      	ldr	r3, [pc, #160]	@ (8009fc0 <prvInsertBlockIntoFreeList+0xac>)
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	e002      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x14>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d8f7      	bhi.n	8009f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d108      	bne.n	8009f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	441a      	add	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	441a      	add	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d118      	bne.n	8009f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4b15      	ldr	r3, [pc, #84]	@ (8009fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d00d      	beq.n	8009f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	441a      	add	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	e008      	b.n	8009fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f92:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e003      	b.n	8009fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d002      	beq.n	8009fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb2:	bf00      	nop
 8009fb4:	3714      	adds	r7, #20
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	2000a220 	.word	0x2000a220
 8009fc4:	2000a228 	.word	0x2000a228

08009fc8 <rcl_get_zero_initialized_publisher>:
 8009fc8:	4b01      	ldr	r3, [pc, #4]	@ (8009fd0 <rcl_get_zero_initialized_publisher+0x8>)
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	080196c4 	.word	0x080196c4

08009fd4 <rcl_publisher_init>:
 8009fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	b088      	sub	sp, #32
 8009fda:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009fdc:	2d00      	cmp	r5, #0
 8009fde:	d06a      	beq.n	800a0b6 <rcl_publisher_init+0xe2>
 8009fe0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	460e      	mov	r6, r1
 8009fea:	4690      	mov	r8, r2
 8009fec:	461f      	mov	r7, r3
 8009fee:	f001 f83b 	bl	800b068 <rcutils_allocator_is_valid>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d05f      	beq.n	800a0b6 <rcl_publisher_init+0xe2>
 8009ff6:	2c00      	cmp	r4, #0
 8009ff8:	d05d      	beq.n	800a0b6 <rcl_publisher_init+0xe2>
 8009ffa:	f8d4 a000 	ldr.w	sl, [r4]
 8009ffe:	f1ba 0f00 	cmp.w	sl, #0
 800a002:	d004      	beq.n	800a00e <rcl_publisher_init+0x3a>
 800a004:	2764      	movs	r7, #100	@ 0x64
 800a006:	4638      	mov	r0, r7
 800a008:	b008      	add	sp, #32
 800a00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a00e:	4630      	mov	r0, r6
 800a010:	f007 fb54 	bl	80116bc <rcl_node_is_valid>
 800a014:	2800      	cmp	r0, #0
 800a016:	d053      	beq.n	800a0c0 <rcl_publisher_init+0xec>
 800a018:	f1b8 0f00 	cmp.w	r8, #0
 800a01c:	d04b      	beq.n	800a0b6 <rcl_publisher_init+0xe2>
 800a01e:	2f00      	cmp	r7, #0
 800a020:	d049      	beq.n	800a0b6 <rcl_publisher_init+0xe2>
 800a022:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a026:	aa07      	add	r2, sp, #28
 800a028:	9205      	str	r2, [sp, #20]
 800a02a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a02e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a032:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a036:	f8cd a01c 	str.w	sl, [sp, #28]
 800a03a:	4639      	mov	r1, r7
 800a03c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a040:	4630      	mov	r0, r6
 800a042:	f007 fbcb 	bl	80117dc <rcl_node_resolve_name>
 800a046:	4607      	mov	r7, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	d150      	bne.n	800a0ee <rcl_publisher_init+0x11a>
 800a04c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800a050:	21c8      	movs	r1, #200	@ 0xc8
 800a052:	2001      	movs	r0, #1
 800a054:	4798      	blx	r3
 800a056:	6020      	str	r0, [r4, #0]
 800a058:	2800      	cmp	r0, #0
 800a05a:	d04e      	beq.n	800a0fa <rcl_publisher_init+0x126>
 800a05c:	4630      	mov	r0, r6
 800a05e:	f007 fb4f 	bl	8011700 <rcl_node_get_rmw_handle>
 800a062:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	9a07      	ldr	r2, [sp, #28]
 800a06a:	6827      	ldr	r7, [r4, #0]
 800a06c:	462b      	mov	r3, r5
 800a06e:	4641      	mov	r1, r8
 800a070:	f001 f95e 	bl	800b330 <rmw_create_publisher>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a07a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a07e:	b370      	cbz	r0, 800a0de <rcl_publisher_init+0x10a>
 800a080:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a084:	f001 fa30 	bl	800b4e8 <rmw_publisher_get_actual_qos>
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	4607      	mov	r7, r0
 800a08c:	b9d0      	cbnz	r0, 800a0c4 <rcl_publisher_init+0xf0>
 800a08e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a092:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a096:	4629      	mov	r1, r5
 800a098:	2270      	movs	r2, #112	@ 0x70
 800a09a:	4618      	mov	r0, r3
 800a09c:	f00e fc59 	bl	8018952 <memcpy>
 800a0a0:	6832      	ldr	r2, [r6, #0]
 800a0a2:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a0a6:	9807      	ldr	r0, [sp, #28]
 800a0a8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a0aa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a0ac:	4798      	blx	r3
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	b008      	add	sp, #32
 800a0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b6:	270b      	movs	r7, #11
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	b008      	add	sp, #32
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	27c8      	movs	r7, #200	@ 0xc8
 800a0c2:	e7a0      	b.n	800a006 <rcl_publisher_init+0x32>
 800a0c4:	b18b      	cbz	r3, 800a0ea <rcl_publisher_init+0x116>
 800a0c6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a0ca:	b142      	cbz	r2, 800a0de <rcl_publisher_init+0x10a>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f007 fb17 	bl	8011700 <rcl_node_get_rmw_handle>
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a0d8:	f001 fa14 	bl	800b504 <rmw_destroy_publisher>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a0e0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	4790      	blx	r2
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	2701      	movs	r7, #1
 800a0ec:	e7db      	b.n	800a0a6 <rcl_publisher_init+0xd2>
 800a0ee:	2867      	cmp	r0, #103	@ 0x67
 800a0f0:	d0d9      	beq.n	800a0a6 <rcl_publisher_init+0xd2>
 800a0f2:	2869      	cmp	r0, #105	@ 0x69
 800a0f4:	d003      	beq.n	800a0fe <rcl_publisher_init+0x12a>
 800a0f6:	280a      	cmp	r0, #10
 800a0f8:	d1f7      	bne.n	800a0ea <rcl_publisher_init+0x116>
 800a0fa:	270a      	movs	r7, #10
 800a0fc:	e7d3      	b.n	800a0a6 <rcl_publisher_init+0xd2>
 800a0fe:	2767      	movs	r7, #103	@ 0x67
 800a100:	e7d1      	b.n	800a0a6 <rcl_publisher_init+0xd2>
 800a102:	bf00      	nop

0800a104 <rcl_publisher_get_default_options>:
 800a104:	b530      	push	{r4, r5, lr}
 800a106:	4912      	ldr	r1, [pc, #72]	@ (800a150 <rcl_publisher_get_default_options+0x4c>)
 800a108:	b083      	sub	sp, #12
 800a10a:	2250      	movs	r2, #80	@ 0x50
 800a10c:	4604      	mov	r4, r0
 800a10e:	f00e fc20 	bl	8018952 <memcpy>
 800a112:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a116:	f000 ff7b 	bl	800b010 <rcutils_get_default_allocator>
 800a11a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800a11e:	f001 f83f 	bl	800b1a0 <rmw_get_default_publisher_options>
 800a122:	2500      	movs	r5, #0
 800a124:	f10d 0007 	add.w	r0, sp, #7
 800a128:	f88d 5007 	strb.w	r5, [sp, #7]
 800a12c:	f007 faee 	bl	801170c <rcl_get_disable_loaned_message>
 800a130:	b930      	cbnz	r0, 800a140 <rcl_publisher_get_default_options+0x3c>
 800a132:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800a136:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800a13a:	4620      	mov	r0, r4
 800a13c:	b003      	add	sp, #12
 800a13e:	bd30      	pop	{r4, r5, pc}
 800a140:	f000 ffbe 	bl	800b0c0 <rcutils_reset_error>
 800a144:	4620      	mov	r0, r4
 800a146:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800a14a:	b003      	add	sp, #12
 800a14c:	bd30      	pop	{r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	080196c8 	.word	0x080196c8

0800a154 <rcl_publish>:
 800a154:	b308      	cbz	r0, 800a19a <rcl_publish+0x46>
 800a156:	6803      	ldr	r3, [r0, #0]
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4604      	mov	r4, r0
 800a15c:	b1c3      	cbz	r3, 800a190 <rcl_publish+0x3c>
 800a15e:	4616      	mov	r6, r2
 800a160:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a164:	b1a2      	cbz	r2, 800a190 <rcl_publish+0x3c>
 800a166:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a16a:	460d      	mov	r5, r1
 800a16c:	f006 fef8 	bl	8010f60 <rcl_context_is_valid>
 800a170:	b160      	cbz	r0, 800a18c <rcl_publish+0x38>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a178:	b150      	cbz	r0, 800a190 <rcl_publish+0x3c>
 800a17a:	b165      	cbz	r5, 800a196 <rcl_publish+0x42>
 800a17c:	4632      	mov	r2, r6
 800a17e:	4629      	mov	r1, r5
 800a180:	f001 f876 	bl	800b270 <rmw_publish>
 800a184:	3800      	subs	r0, #0
 800a186:	bf18      	it	ne
 800a188:	2001      	movne	r0, #1
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	f000 ff7a 	bl	800b084 <rcutils_error_is_set>
 800a190:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a194:	bd70      	pop	{r4, r5, r6, pc}
 800a196:	200b      	movs	r0, #11
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a19e:	4770      	bx	lr

0800a1a0 <rcl_publisher_is_valid>:
 800a1a0:	b1b0      	cbz	r0, 800a1d0 <rcl_publisher_is_valid+0x30>
 800a1a2:	6803      	ldr	r3, [r0, #0]
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	b183      	cbz	r3, 800a1cc <rcl_publisher_is_valid+0x2c>
 800a1aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a1ae:	b16a      	cbz	r2, 800a1cc <rcl_publisher_is_valid+0x2c>
 800a1b0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a1b4:	f006 fed4 	bl	8010f60 <rcl_context_is_valid>
 800a1b8:	b130      	cbz	r0, 800a1c8 <rcl_publisher_is_valid+0x28>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a1c0:	3800      	subs	r0, #0
 800a1c2:	bf18      	it	ne
 800a1c4:	2001      	movne	r0, #1
 800a1c6:	bd10      	pop	{r4, pc}
 800a1c8:	f000 ff5c 	bl	800b084 <rcutils_error_is_set>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	bd10      	pop	{r4, pc}
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	4770      	bx	lr

0800a1d4 <rcl_publisher_is_valid_except_context>:
 800a1d4:	b130      	cbz	r0, 800a1e4 <rcl_publisher_is_valid_except_context+0x10>
 800a1d6:	6800      	ldr	r0, [r0, #0]
 800a1d8:	b120      	cbz	r0, 800a1e4 <rcl_publisher_is_valid_except_context+0x10>
 800a1da:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a1de:	3800      	subs	r0, #0
 800a1e0:	bf18      	it	ne
 800a1e2:	2001      	movne	r0, #1
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop

0800a1e8 <_rclc_check_for_new_data>:
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d046      	beq.n	800a27a <_rclc_check_for_new_data+0x92>
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	7802      	ldrb	r2, [r0, #0]
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2a0a      	cmp	r2, #10
 800a1f6:	d842      	bhi.n	800a27e <_rclc_check_for_new_data+0x96>
 800a1f8:	e8df f002 	tbb	[pc, r2]
 800a1fc:	14181212 	.word	0x14181212
 800a200:	06060614 	.word	0x06060614
 800a204:	2e1a      	.short	0x2e1a
 800a206:	16          	.byte	0x16
 800a207:	00          	.byte	0x00
 800a208:	6a0a      	ldr	r2, [r1, #32]
 800a20a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a20c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a210:	3a00      	subs	r2, #0
 800a212:	bf18      	it	ne
 800a214:	2201      	movne	r2, #1
 800a216:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a21a:	2000      	movs	r0, #0
 800a21c:	b004      	add	sp, #16
 800a21e:	bd10      	pop	{r4, pc}
 800a220:	680a      	ldr	r2, [r1, #0]
 800a222:	e7f2      	b.n	800a20a <_rclc_check_for_new_data+0x22>
 800a224:	698a      	ldr	r2, [r1, #24]
 800a226:	e7f0      	b.n	800a20a <_rclc_check_for_new_data+0x22>
 800a228:	688a      	ldr	r2, [r1, #8]
 800a22a:	e7ee      	b.n	800a20a <_rclc_check_for_new_data+0x22>
 800a22c:	690a      	ldr	r2, [r1, #16]
 800a22e:	e7ec      	b.n	800a20a <_rclc_check_for_new_data+0x22>
 800a230:	685c      	ldr	r4, [r3, #4]
 800a232:	4608      	mov	r0, r1
 800a234:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a238:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a23c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a240:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a24a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a24e:	f104 0110 	add.w	r1, r4, #16
 800a252:	f009 f969 	bl	8013528 <rcl_action_client_wait_set_get_entities_ready>
 800a256:	e7e1      	b.n	800a21c <_rclc_check_for_new_data+0x34>
 800a258:	685c      	ldr	r4, [r3, #4]
 800a25a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a25e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a262:	e9cd 3200 	strd	r3, r2, [sp]
 800a266:	4608      	mov	r0, r1
 800a268:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a26c:	f104 0220 	add.w	r2, r4, #32
 800a270:	f104 0110 	add.w	r1, r4, #16
 800a274:	f009 fb5a 	bl	801392c <rcl_action_server_wait_set_get_entities_ready>
 800a278:	e7d0      	b.n	800a21c <_rclc_check_for_new_data+0x34>
 800a27a:	200b      	movs	r0, #11
 800a27c:	4770      	bx	lr
 800a27e:	2001      	movs	r0, #1
 800a280:	e7cc      	b.n	800a21c <_rclc_check_for_new_data+0x34>
 800a282:	bf00      	nop

0800a284 <_rclc_take_new_data>:
 800a284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a286:	b099      	sub	sp, #100	@ 0x64
 800a288:	2800      	cmp	r0, #0
 800a28a:	f000 8082 	beq.w	800a392 <_rclc_take_new_data+0x10e>
 800a28e:	7803      	ldrb	r3, [r0, #0]
 800a290:	4604      	mov	r4, r0
 800a292:	2b0a      	cmp	r3, #10
 800a294:	f200 815d 	bhi.w	800a552 <_rclc_take_new_data+0x2ce>
 800a298:	e8df f003 	tbb	[pc, r3]
 800a29c:	31531f1f 	.word	0x31531f1f
 800a2a0:	06060631 	.word	0x06060631
 800a2a4:	4555      	.short	0x4555
 800a2a6:	53          	.byte	0x53
 800a2a7:	00          	.byte	0x00
 800a2a8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a2aa:	6a0b      	ldr	r3, [r1, #32]
 800a2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d046      	beq.n	800a342 <_rclc_take_new_data+0xbe>
 800a2b4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a2b8:	f104 0110 	add.w	r1, r4, #16
 800a2bc:	f007 fb3c 	bl	8011938 <rcl_take_request>
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d03d      	beq.n	800a342 <_rclc_take_new_data+0xbe>
 800a2c6:	f240 2359 	movw	r3, #601	@ 0x259
 800a2ca:	4298      	cmp	r0, r3
 800a2cc:	d128      	bne.n	800a320 <_rclc_take_new_data+0x9c>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	b019      	add	sp, #100	@ 0x64
 800a2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2da:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a2dc:	680b      	ldr	r3, [r1, #0]
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	b373      	cbz	r3, 800a342 <_rclc_take_new_data+0xbe>
 800a2e4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	aa0a      	add	r2, sp, #40	@ 0x28
 800a2ec:	f007 fcf8 	bl	8011ce0 <rcl_take>
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	b330      	cbz	r0, 800a342 <_rclc_take_new_data+0xbe>
 800a2f4:	f240 1391 	movw	r3, #401	@ 0x191
 800a2f8:	4298      	cmp	r0, r3
 800a2fa:	d0e8      	beq.n	800a2ce <_rclc_take_new_data+0x4a>
 800a2fc:	e010      	b.n	800a320 <_rclc_take_new_data+0x9c>
 800a2fe:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a300:	698b      	ldr	r3, [r1, #24]
 800a302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a306:	b1e3      	cbz	r3, 800a342 <_rclc_take_new_data+0xbe>
 800a308:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a30c:	f104 0110 	add.w	r1, r4, #16
 800a310:	f006 fd96 	bl	8010e40 <rcl_take_response>
 800a314:	4605      	mov	r5, r0
 800a316:	b1a0      	cbz	r0, 800a342 <_rclc_take_new_data+0xbe>
 800a318:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a31c:	4298      	cmp	r0, r3
 800a31e:	d0d9      	beq.n	800a2d4 <_rclc_take_new_data+0x50>
 800a320:	f000 fece 	bl	800b0c0 <rcutils_reset_error>
 800a324:	e7d6      	b.n	800a2d4 <_rclc_take_new_data+0x50>
 800a326:	6840      	ldr	r0, [r0, #4]
 800a328:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d15f      	bne.n	800a3f0 <_rclc_take_new_data+0x16c>
 800a330:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a334:	2b00      	cmp	r3, #0
 800a336:	d179      	bne.n	800a42c <_rclc_take_new_data+0x1a8>
 800a338:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f040 8096 	bne.w	800a46e <_rclc_take_new_data+0x1ea>
 800a342:	2500      	movs	r5, #0
 800a344:	e7c6      	b.n	800a2d4 <_rclc_take_new_data+0x50>
 800a346:	6840      	ldr	r0, [r0, #4]
 800a348:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d138      	bne.n	800a3c2 <_rclc_take_new_data+0x13e>
 800a350:	69c3      	ldr	r3, [r0, #28]
 800a352:	b113      	cbz	r3, 800a35a <_rclc_take_new_data+0xd6>
 800a354:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a358:	b9fb      	cbnz	r3, 800a39a <_rclc_take_new_data+0x116>
 800a35a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f040 80a8 	bne.w	800a4b4 <_rclc_take_new_data+0x230>
 800a364:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d0ea      	beq.n	800a342 <_rclc_take_new_data+0xbe>
 800a36c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a36e:	a90a      	add	r1, sp, #40	@ 0x28
 800a370:	3010      	adds	r0, #16
 800a372:	f008 ffbd 	bl	80132f0 <rcl_action_take_result_response>
 800a376:	4605      	mov	r5, r0
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1d1      	bne.n	800a320 <_rclc_take_new_data+0x9c>
 800a37c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a380:	6860      	ldr	r0, [r4, #4]
 800a382:	f009 fbfd 	bl	8013b80 <rclc_action_find_handle_by_result_request_sequence_number>
 800a386:	2800      	cmp	r0, #0
 800a388:	d0db      	beq.n	800a342 <_rclc_take_new_data+0xbe>
 800a38a:	2301      	movs	r3, #1
 800a38c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a390:	e7d7      	b.n	800a342 <_rclc_take_new_data+0xbe>
 800a392:	250b      	movs	r5, #11
 800a394:	4628      	mov	r0, r5
 800a396:	b019      	add	sp, #100	@ 0x64
 800a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a39a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a39c:	3010      	adds	r0, #16
 800a39e:	f009 f823 	bl	80133e8 <rcl_action_take_feedback>
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1bb      	bne.n	800a320 <_rclc_take_new_data+0x9c>
 800a3a8:	6860      	ldr	r0, [r4, #4]
 800a3aa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a3ac:	f009 fba6 	bl	8013afc <rclc_action_find_goal_handle_by_uuid>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	f000 80c4 	beq.w	800a540 <_rclc_take_new_data+0x2bc>
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	6860      	ldr	r0, [r4, #4]
 800a3bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a3c0:	e7cb      	b.n	800a35a <_rclc_take_new_data+0xd6>
 800a3c2:	aa04      	add	r2, sp, #16
 800a3c4:	a90a      	add	r1, sp, #40	@ 0x28
 800a3c6:	3010      	adds	r0, #16
 800a3c8:	f008 ff22 	bl	8013210 <rcl_action_take_goal_response>
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d1a6      	bne.n	800a320 <_rclc_take_new_data+0x9c>
 800a3d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a3d6:	6860      	ldr	r0, [r4, #4]
 800a3d8:	f009 fbc0 	bl	8013b5c <rclc_action_find_handle_by_goal_request_sequence_number>
 800a3dc:	b130      	cbz	r0, 800a3ec <_rclc_take_new_data+0x168>
 800a3de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a3e2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f880 2020 	strb.w	r2, [r0, #32]
 800a3ec:	6860      	ldr	r0, [r4, #4]
 800a3ee:	e7af      	b.n	800a350 <_rclc_take_new_data+0xcc>
 800a3f0:	f009 fb5e 	bl	8013ab0 <rclc_action_take_goal_handle>
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	6860      	ldr	r0, [r4, #4]
 800a3f8:	2e00      	cmp	r6, #0
 800a3fa:	d099      	beq.n	800a330 <_rclc_take_new_data+0xac>
 800a3fc:	6070      	str	r0, [r6, #4]
 800a3fe:	69f2      	ldr	r2, [r6, #28]
 800a400:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a404:	3010      	adds	r0, #16
 800a406:	f009 f91f 	bl	8013648 <rcl_action_take_goal_request>
 800a40a:	4605      	mov	r5, r0
 800a40c:	2800      	cmp	r0, #0
 800a40e:	f040 8099 	bne.w	800a544 <_rclc_take_new_data+0x2c0>
 800a412:	69f7      	ldr	r7, [r6, #28]
 800a414:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a416:	7235      	strb	r5, [r6, #8]
 800a418:	f8c6 0009 	str.w	r0, [r6, #9]
 800a41c:	f8c6 100d 	str.w	r1, [r6, #13]
 800a420:	6860      	ldr	r0, [r4, #4]
 800a422:	f8c6 2011 	str.w	r2, [r6, #17]
 800a426:	f8c6 3015 	str.w	r3, [r6, #21]
 800a42a:	e781      	b.n	800a330 <_rclc_take_new_data+0xac>
 800a42c:	aa04      	add	r2, sp, #16
 800a42e:	3010      	adds	r0, #16
 800a430:	a90a      	add	r1, sp, #40	@ 0x28
 800a432:	f009 f979 	bl	8013728 <rcl_action_take_result_request>
 800a436:	4605      	mov	r5, r0
 800a438:	2800      	cmp	r0, #0
 800a43a:	f47f af71 	bne.w	800a320 <_rclc_take_new_data+0x9c>
 800a43e:	6860      	ldr	r0, [r4, #4]
 800a440:	a904      	add	r1, sp, #16
 800a442:	f009 fb5b 	bl	8013afc <rclc_action_find_goal_handle_by_uuid>
 800a446:	4607      	mov	r7, r0
 800a448:	b160      	cbz	r0, 800a464 <_rclc_take_new_data+0x1e0>
 800a44a:	ad0a      	add	r5, sp, #40	@ 0x28
 800a44c:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a452:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a454:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a458:	f04f 0c02 	mov.w	ip, #2
 800a45c:	e886 0003 	stmia.w	r6, {r0, r1}
 800a460:	f887 c008 	strb.w	ip, [r7, #8]
 800a464:	6860      	ldr	r0, [r4, #4]
 800a466:	2300      	movs	r3, #0
 800a468:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a46c:	e764      	b.n	800a338 <_rclc_take_new_data+0xb4>
 800a46e:	ae04      	add	r6, sp, #16
 800a470:	aa0a      	add	r2, sp, #40	@ 0x28
 800a472:	3010      	adds	r0, #16
 800a474:	4631      	mov	r1, r6
 800a476:	f009 f995 	bl	80137a4 <rcl_action_take_cancel_request>
 800a47a:	4605      	mov	r5, r0
 800a47c:	2800      	cmp	r0, #0
 800a47e:	f47f af4f 	bne.w	800a320 <_rclc_take_new_data+0x9c>
 800a482:	6860      	ldr	r0, [r4, #4]
 800a484:	a90a      	add	r1, sp, #40	@ 0x28
 800a486:	f009 fb39 	bl	8013afc <rclc_action_find_goal_handle_by_uuid>
 800a48a:	4605      	mov	r5, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d04c      	beq.n	800a52a <_rclc_take_new_data+0x2a6>
 800a490:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a494:	2101      	movs	r1, #1
 800a496:	f009 fab9 	bl	8013a0c <rcl_action_transition_goal_state>
 800a49a:	2803      	cmp	r0, #3
 800a49c:	4607      	mov	r7, r0
 800a49e:	d139      	bne.n	800a514 <_rclc_take_new_data+0x290>
 800a4a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a4a2:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800a4a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a4ac:	e884 0003 	stmia.w	r4, {r0, r1}
 800a4b0:	722f      	strb	r7, [r5, #8]
 800a4b2:	e746      	b.n	800a342 <_rclc_take_new_data+0xbe>
 800a4b4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a4b8:	a90a      	add	r1, sp, #40	@ 0x28
 800a4ba:	3010      	adds	r0, #16
 800a4bc:	f008 ff56 	bl	801336c <rcl_action_take_cancel_response>
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	f47f af2c 	bne.w	800a320 <_rclc_take_new_data+0x9c>
 800a4c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4cc:	6860      	ldr	r0, [r4, #4]
 800a4ce:	f009 fb69 	bl	8013ba4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	6860      	ldr	r0, [r4, #4]
 800a4d6:	2e00      	cmp	r6, #0
 800a4d8:	f43f af44 	beq.w	800a364 <_rclc_take_new_data+0xe0>
 800a4dc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a4de:	2701      	movs	r7, #1
 800a4e0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f43f af3e 	beq.w	800a364 <_rclc_take_new_data+0xe0>
 800a4e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a4ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a4ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a4f2:	f009 fb03 	bl	8013afc <rclc_action_find_goal_handle_by_uuid>
 800a4f6:	b138      	cbz	r0, 800a508 <_rclc_take_new_data+0x284>
 800a4f8:	6860      	ldr	r0, [r4, #4]
 800a4fa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a4fc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a500:	3501      	adds	r5, #1
 800a502:	42ab      	cmp	r3, r5
 800a504:	d8f0      	bhi.n	800a4e8 <_rclc_take_new_data+0x264>
 800a506:	e72d      	b.n	800a364 <_rclc_take_new_data+0xe0>
 800a508:	6860      	ldr	r0, [r4, #4]
 800a50a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a50c:	3501      	adds	r5, #1
 800a50e:	42ab      	cmp	r3, r5
 800a510:	d8ea      	bhi.n	800a4e8 <_rclc_take_new_data+0x264>
 800a512:	e727      	b.n	800a364 <_rclc_take_new_data+0xe0>
 800a514:	ab06      	add	r3, sp, #24
 800a516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a518:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a51c:	2103      	movs	r1, #3
 800a51e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a522:	6860      	ldr	r0, [r4, #4]
 800a524:	f009 fbb4 	bl	8013c90 <rclc_action_server_goal_cancel_reject>
 800a528:	e70b      	b.n	800a342 <_rclc_take_new_data+0xbe>
 800a52a:	ab06      	add	r3, sp, #24
 800a52c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a52e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a532:	2102      	movs	r1, #2
 800a534:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a538:	6860      	ldr	r0, [r4, #4]
 800a53a:	f009 fba9 	bl	8013c90 <rclc_action_server_goal_cancel_reject>
 800a53e:	e700      	b.n	800a342 <_rclc_take_new_data+0xbe>
 800a540:	6860      	ldr	r0, [r4, #4]
 800a542:	e70a      	b.n	800a35a <_rclc_take_new_data+0xd6>
 800a544:	6860      	ldr	r0, [r4, #4]
 800a546:	4631      	mov	r1, r6
 800a548:	f009 fac2 	bl	8013ad0 <rclc_action_remove_used_goal_handle>
 800a54c:	f000 fdb8 	bl	800b0c0 <rcutils_reset_error>
 800a550:	e6c0      	b.n	800a2d4 <_rclc_take_new_data+0x50>
 800a552:	2501      	movs	r5, #1
 800a554:	e6be      	b.n	800a2d4 <_rclc_take_new_data+0x50>
 800a556:	bf00      	nop

0800a558 <rclc_executor_trigger_any>:
 800a558:	4603      	mov	r3, r0
 800a55a:	b370      	cbz	r0, 800a5ba <rclc_executor_trigger_any+0x62>
 800a55c:	b379      	cbz	r1, 800a5be <rclc_executor_trigger_any+0x66>
 800a55e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800a562:	2200      	movs	r2, #0
 800a564:	b350      	cbz	r0, 800a5bc <rclc_executor_trigger_any+0x64>
 800a566:	b430      	push	{r4, r5}
 800a568:	f893 c000 	ldrb.w	ip, [r3]
 800a56c:	f1bc 0f08 	cmp.w	ip, #8
 800a570:	d017      	beq.n	800a5a2 <rclc_executor_trigger_any+0x4a>
 800a572:	f1bc 0f09 	cmp.w	ip, #9
 800a576:	d00d      	beq.n	800a594 <rclc_executor_trigger_any+0x3c>
 800a578:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800a57c:	b940      	cbnz	r0, 800a590 <rclc_executor_trigger_any+0x38>
 800a57e:	3201      	adds	r2, #1
 800a580:	4291      	cmp	r1, r2
 800a582:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a586:	d003      	beq.n	800a590 <rclc_executor_trigger_any+0x38>
 800a588:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d1eb      	bne.n	800a568 <rclc_executor_trigger_any+0x10>
 800a590:	bc30      	pop	{r4, r5}
 800a592:	4770      	bx	lr
 800a594:	685c      	ldr	r4, [r3, #4]
 800a596:	6a25      	ldr	r5, [r4, #32]
 800a598:	2d00      	cmp	r5, #0
 800a59a:	d1f9      	bne.n	800a590 <rclc_executor_trigger_any+0x38>
 800a59c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800a5a0:	e7ec      	b.n	800a57c <rclc_executor_trigger_any+0x24>
 800a5a2:	685c      	ldr	r4, [r3, #4]
 800a5a4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a5a6:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800a5aa:	d1f1      	bne.n	800a590 <rclc_executor_trigger_any+0x38>
 800a5ac:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1ed      	bne.n	800a590 <rclc_executor_trigger_any+0x38>
 800a5b4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800a5b8:	e7e0      	b.n	800a57c <rclc_executor_trigger_any+0x24>
 800a5ba:	4770      	bx	lr
 800a5bc:	4770      	bx	lr
 800a5be:	4608      	mov	r0, r1
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop

0800a5c4 <_rclc_execute>:
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f000 80dc 	beq.w	800a782 <_rclc_execute+0x1be>
 800a5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5cc:	7843      	ldrb	r3, [r0, #1]
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	b123      	cbz	r3, 800a5de <_rclc_execute+0x1a>
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d01c      	beq.n	800a612 <_rclc_execute+0x4e>
 800a5d8:	2000      	movs	r0, #0
 800a5da:	b007      	add	sp, #28
 800a5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5de:	7803      	ldrb	r3, [r0, #0]
 800a5e0:	2b08      	cmp	r3, #8
 800a5e2:	f000 80a0 	beq.w	800a726 <_rclc_execute+0x162>
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d024      	beq.n	800a634 <_rclc_execute+0x70>
 800a5ea:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0f2      	beq.n	800a5d8 <_rclc_execute+0x14>
 800a5f2:	2b0a      	cmp	r3, #10
 800a5f4:	f200 815a 	bhi.w	800a8ac <_rclc_execute+0x2e8>
 800a5f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a5fc:	008e006f 	.word	0x008e006f
 800a600:	006f007c 	.word	0x006f007c
 800a604:	00590073 	.word	0x00590073
 800a608:	00590059 	.word	0x00590059
 800a60c:	01580158 	.word	0x01580158
 800a610:	0079      	.short	0x0079
 800a612:	7803      	ldrb	r3, [r0, #0]
 800a614:	2b0a      	cmp	r3, #10
 800a616:	f200 8149 	bhi.w	800a8ac <_rclc_execute+0x2e8>
 800a61a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a61e:	00f9      	.short	0x00f9
 800a620:	006b007b 	.word	0x006b007b
 800a624:	0062005e 	.word	0x0062005e
 800a628:	00480048 	.word	0x00480048
 800a62c:	01000048 	.word	0x01000048
 800a630:	00680102 	.word	0x00680102
 800a634:	6840      	ldr	r0, [r0, #4]
 800a636:	6a02      	ldr	r2, [r0, #32]
 800a638:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	f040 80f3 	bne.w	800a828 <_rclc_execute+0x264>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0c8      	beq.n	800a5d8 <_rclc_execute+0x14>
 800a646:	e003      	b.n	800a650 <_rclc_execute+0x8c>
 800a648:	6858      	ldr	r0, [r3, #4]
 800a64a:	f009 fa41 	bl	8013ad0 <rclc_action_remove_used_goal_handle>
 800a64e:	6860      	ldr	r0, [r4, #4]
 800a650:	f009 fa78 	bl	8013b44 <rclc_action_find_first_terminated_handle>
 800a654:	4603      	mov	r3, r0
 800a656:	4601      	mov	r1, r0
 800a658:	2800      	cmp	r0, #0
 800a65a:	d1f5      	bne.n	800a648 <_rclc_execute+0x84>
 800a65c:	6860      	ldr	r0, [r4, #4]
 800a65e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800a662:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 80eb 	beq.w	800a842 <_rclc_execute+0x27e>
 800a66c:	f241 0604 	movw	r6, #4100	@ 0x1004
 800a670:	2701      	movs	r7, #1
 800a672:	e007      	b.n	800a684 <_rclc_execute+0xc0>
 800a674:	4628      	mov	r0, r5
 800a676:	f009 fabf 	bl	8013bf8 <rclc_action_server_response_goal_request>
 800a67a:	6860      	ldr	r0, [r4, #4]
 800a67c:	4629      	mov	r1, r5
 800a67e:	f009 fa27 	bl	8013ad0 <rclc_action_remove_used_goal_handle>
 800a682:	6860      	ldr	r0, [r4, #4]
 800a684:	2100      	movs	r1, #0
 800a686:	f009 fa51 	bl	8013b2c <rclc_action_find_first_handle_by_status>
 800a68a:	4605      	mov	r5, r0
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f000 80d5 	beq.w	800a83c <_rclc_execute+0x278>
 800a692:	6863      	ldr	r3, [r4, #4]
 800a694:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	4798      	blx	r3
 800a69a:	42b0      	cmp	r0, r6
 800a69c:	f04f 0100 	mov.w	r1, #0
 800a6a0:	d1e8      	bne.n	800a674 <_rclc_execute+0xb0>
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f009 faa7 	bl	8013bf8 <rclc_action_server_response_goal_request>
 800a6aa:	722f      	strb	r7, [r5, #8]
 800a6ac:	e7e9      	b.n	800a682 <_rclc_execute+0xbe>
 800a6ae:	2b06      	cmp	r3, #6
 800a6b0:	68a0      	ldr	r0, [r4, #8]
 800a6b2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a6b4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800a6b6:	f000 80bb 	beq.w	800a830 <_rclc_execute+0x26c>
 800a6ba:	2b07      	cmp	r3, #7
 800a6bc:	f000 80f1 	beq.w	800a8a2 <_rclc_execute+0x2de>
 800a6c0:	47b0      	blx	r6
 800a6c2:	f104 0510 	add.w	r5, r4, #16
 800a6c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a6c8:	6860      	ldr	r0, [r4, #4]
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	f007 f984 	bl	80119d8 <rcl_send_response>
 800a6d0:	2802      	cmp	r0, #2
 800a6d2:	d117      	bne.n	800a704 <_rclc_execute+0x140>
 800a6d4:	f000 fcf4 	bl	800b0c0 <rcutils_reset_error>
 800a6d8:	e77e      	b.n	800a5d8 <_rclc_execute+0x14>
 800a6da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6dc:	68a0      	ldr	r0, [r4, #8]
 800a6de:	4798      	blx	r3
 800a6e0:	e77a      	b.n	800a5d8 <_rclc_execute+0x14>
 800a6e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6e4:	68a0      	ldr	r0, [r4, #8]
 800a6e6:	f104 0110 	add.w	r1, r4, #16
 800a6ea:	4798      	blx	r3
 800a6ec:	e774      	b.n	800a5d8 <_rclc_execute+0x14>
 800a6ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6f0:	4798      	blx	r3
 800a6f2:	e771      	b.n	800a5d8 <_rclc_execute+0x14>
 800a6f4:	6860      	ldr	r0, [r4, #4]
 800a6f6:	f007 fe37 	bl	8012368 <rcl_timer_call>
 800a6fa:	f240 3321 	movw	r3, #801	@ 0x321
 800a6fe:	4298      	cmp	r0, r3
 800a700:	f43f af6a 	beq.w	800a5d8 <_rclc_execute+0x14>
 800a704:	2800      	cmp	r0, #0
 800a706:	f43f af68 	beq.w	800a5da <_rclc_execute+0x16>
 800a70a:	9005      	str	r0, [sp, #20]
 800a70c:	f000 fcd8 	bl	800b0c0 <rcutils_reset_error>
 800a710:	9805      	ldr	r0, [sp, #20]
 800a712:	e762      	b.n	800a5da <_rclc_execute+0x16>
 800a714:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800a718:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0e4      	beq.n	800a6ea <_rclc_execute+0x126>
 800a720:	68a0      	ldr	r0, [r4, #8]
 800a722:	4798      	blx	r3
 800a724:	e758      	b.n	800a5d8 <_rclc_execute+0x14>
 800a726:	6840      	ldr	r0, [r0, #4]
 800a728:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a72a:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800a72e:	d107      	bne.n	800a740 <_rclc_execute+0x17c>
 800a730:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a734:	b923      	cbnz	r3, 800a740 <_rclc_execute+0x17c>
 800a736:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f43f af4c 	beq.w	800a5d8 <_rclc_execute+0x14>
 800a740:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a744:	b303      	cbz	r3, 800a788 <_rclc_execute+0x1c4>
 800a746:	2600      	movs	r6, #0
 800a748:	2701      	movs	r7, #1
 800a74a:	e004      	b.n	800a756 <_rclc_execute+0x192>
 800a74c:	f009 f98a 	bl	8013a64 <rclc_action_send_result_request>
 800a750:	b990      	cbnz	r0, 800a778 <_rclc_execute+0x1b4>
 800a752:	722f      	strb	r7, [r5, #8]
 800a754:	6860      	ldr	r0, [r4, #4]
 800a756:	f009 fa37 	bl	8013bc8 <rclc_action_find_first_handle_with_goal_response>
 800a75a:	4605      	mov	r5, r0
 800a75c:	b198      	cbz	r0, 800a786 <_rclc_execute+0x1c2>
 800a75e:	6863      	ldr	r3, [r4, #4]
 800a760:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800a768:	f885 6020 	strb.w	r6, [r5, #32]
 800a76c:	4798      	blx	r3
 800a76e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800a772:	4628      	mov	r0, r5
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e9      	bne.n	800a74c <_rclc_execute+0x188>
 800a778:	6860      	ldr	r0, [r4, #4]
 800a77a:	4629      	mov	r1, r5
 800a77c:	f009 f9a8 	bl	8013ad0 <rclc_action_remove_used_goal_handle>
 800a780:	e7e8      	b.n	800a754 <_rclc_execute+0x190>
 800a782:	200b      	movs	r0, #11
 800a784:	4770      	bx	lr
 800a786:	6860      	ldr	r0, [r4, #4]
 800a788:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a78c:	b18b      	cbz	r3, 800a7b2 <_rclc_execute+0x1ee>
 800a78e:	68c5      	ldr	r5, [r0, #12]
 800a790:	b32d      	cbz	r5, 800a7de <_rclc_execute+0x21a>
 800a792:	2600      	movs	r6, #0
 800a794:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800a798:	b143      	cbz	r3, 800a7ac <_rclc_execute+0x1e8>
 800a79a:	69c3      	ldr	r3, [r0, #28]
 800a79c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800a7a0:	b123      	cbz	r3, 800a7ac <_rclc_execute+0x1e8>
 800a7a2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a7a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	4798      	blx	r3
 800a7aa:	6860      	ldr	r0, [r4, #4]
 800a7ac:	682d      	ldr	r5, [r5, #0]
 800a7ae:	2d00      	cmp	r5, #0
 800a7b0:	d1f0      	bne.n	800a794 <_rclc_execute+0x1d0>
 800a7b2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a7b6:	b193      	cbz	r3, 800a7de <_rclc_execute+0x21a>
 800a7b8:	68c5      	ldr	r5, [r0, #12]
 800a7ba:	b185      	cbz	r5, 800a7de <_rclc_execute+0x21a>
 800a7bc:	2600      	movs	r6, #0
 800a7be:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800a7c2:	b14b      	cbz	r3, 800a7d8 <_rclc_execute+0x214>
 800a7c4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a7c6:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800a7ca:	b12b      	cbz	r3, 800a7d8 <_rclc_execute+0x214>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a7d0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800a7d4:	4798      	blx	r3
 800a7d6:	6860      	ldr	r0, [r4, #4]
 800a7d8:	682d      	ldr	r5, [r5, #0]
 800a7da:	2d00      	cmp	r5, #0
 800a7dc:	d1ef      	bne.n	800a7be <_rclc_execute+0x1fa>
 800a7de:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f43f aef8 	beq.w	800a5d8 <_rclc_execute+0x14>
 800a7e8:	2700      	movs	r7, #0
 800a7ea:	e00b      	b.n	800a804 <_rclc_execute+0x240>
 800a7ec:	6863      	ldr	r3, [r4, #4]
 800a7ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a7f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a7f2:	6a1e      	ldr	r6, [r3, #32]
 800a7f4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a7f8:	47b0      	blx	r6
 800a7fa:	6860      	ldr	r0, [r4, #4]
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f009 f967 	bl	8013ad0 <rclc_action_remove_used_goal_handle>
 800a802:	6860      	ldr	r0, [r4, #4]
 800a804:	f009 f9ec 	bl	8013be0 <rclc_action_find_first_handle_with_result_response>
 800a808:	4605      	mov	r5, r0
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d1ee      	bne.n	800a7ec <_rclc_execute+0x228>
 800a80e:	e6e3      	b.n	800a5d8 <_rclc_execute+0x14>
 800a810:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800a814:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a816:	2800      	cmp	r0, #0
 800a818:	f43f af61 	beq.w	800a6de <_rclc_execute+0x11a>
 800a81c:	e75e      	b.n	800a6dc <_rclc_execute+0x118>
 800a81e:	6840      	ldr	r0, [r0, #4]
 800a820:	e78e      	b.n	800a740 <_rclc_execute+0x17c>
 800a822:	6840      	ldr	r0, [r0, #4]
 800a824:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f43f af1a 	beq.w	800a662 <_rclc_execute+0x9e>
 800a82e:	e70f      	b.n	800a650 <_rclc_execute+0x8c>
 800a830:	f104 0510 	add.w	r5, r4, #16
 800a834:	460a      	mov	r2, r1
 800a836:	4629      	mov	r1, r5
 800a838:	47b0      	blx	r6
 800a83a:	e744      	b.n	800a6c6 <_rclc_execute+0x102>
 800a83c:	6860      	ldr	r0, [r4, #4]
 800a83e:	f880 5020 	strb.w	r5, [r0, #32]
 800a842:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a846:	2b00      	cmp	r3, #0
 800a848:	f43f aec6 	beq.w	800a5d8 <_rclc_execute+0x14>
 800a84c:	68c5      	ldr	r5, [r0, #12]
 800a84e:	b325      	cbz	r5, 800a89a <_rclc_execute+0x2d6>
 800a850:	2602      	movs	r6, #2
 800a852:	e001      	b.n	800a858 <_rclc_execute+0x294>
 800a854:	682d      	ldr	r5, [r5, #0]
 800a856:	b305      	cbz	r5, 800a89a <_rclc_execute+0x2d6>
 800a858:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d1f9      	bne.n	800a854 <_rclc_execute+0x290>
 800a860:	69c3      	ldr	r3, [r0, #28]
 800a862:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a864:	4628      	mov	r0, r5
 800a866:	4798      	blx	r3
 800a868:	4603      	mov	r3, r0
 800a86a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a86e:	4628      	mov	r0, r5
 800a870:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a874:	b11b      	cbz	r3, 800a87e <_rclc_execute+0x2ba>
 800a876:	f009 f9df 	bl	8013c38 <rclc_action_server_goal_cancel_accept>
 800a87a:	6860      	ldr	r0, [r4, #4]
 800a87c:	e7ea      	b.n	800a854 <_rclc_execute+0x290>
 800a87e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a880:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a884:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800a888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a88c:	6860      	ldr	r0, [r4, #4]
 800a88e:	2101      	movs	r1, #1
 800a890:	f009 f9fe 	bl	8013c90 <rclc_action_server_goal_cancel_reject>
 800a894:	722e      	strb	r6, [r5, #8]
 800a896:	6860      	ldr	r0, [r4, #4]
 800a898:	e7dc      	b.n	800a854 <_rclc_execute+0x290>
 800a89a:	2300      	movs	r3, #0
 800a89c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a8a0:	e69a      	b.n	800a5d8 <_rclc_execute+0x14>
 800a8a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a8a4:	47b0      	blx	r6
 800a8a6:	f104 0510 	add.w	r5, r4, #16
 800a8aa:	e70c      	b.n	800a6c6 <_rclc_execute+0x102>
 800a8ac:	2001      	movs	r0, #1
 800a8ae:	e694      	b.n	800a5da <_rclc_execute+0x16>

0800a8b0 <rclc_executor_init>:
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d05a      	beq.n	800a96a <rclc_executor_init+0xba>
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	b0b2      	sub	sp, #200	@ 0xc8
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	d050      	beq.n	800a962 <rclc_executor_init+0xb2>
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	4616      	mov	r6, r2
 800a8c6:	461f      	mov	r7, r3
 800a8c8:	f000 fbce 	bl	800b068 <rcutils_allocator_is_valid>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d048      	beq.n	800a962 <rclc_executor_init+0xb2>
 800a8d0:	2e00      	cmp	r6, #0
 800a8d2:	d046      	beq.n	800a962 <rclc_executor_init+0xb2>
 800a8d4:	492a      	ldr	r1, [pc, #168]	@ (800a980 <rclc_executor_init+0xd0>)
 800a8d6:	2290      	movs	r2, #144	@ 0x90
 800a8d8:	a80e      	add	r0, sp, #56	@ 0x38
 800a8da:	f00e f83a 	bl	8018952 <memcpy>
 800a8de:	a90e      	add	r1, sp, #56	@ 0x38
 800a8e0:	2290      	movs	r2, #144	@ 0x90
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f00e f835 	bl	8018952 <memcpy>
 800a8e8:	6065      	str	r5, [r4, #4]
 800a8ea:	4668      	mov	r0, sp
 800a8ec:	60e6      	str	r6, [r4, #12]
 800a8ee:	466d      	mov	r5, sp
 800a8f0:	f007 fe2c 	bl	801254c <rcl_get_zero_initialized_wait_set>
 800a8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8f6:	f104 0c18 	add.w	ip, r4, #24
 800a8fa:	f8d7 8000 	ldr.w	r8, [r7]
 800a8fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a90a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a90e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800a978 <rclc_executor_init+0xc8>
 800a912:	682b      	ldr	r3, [r5, #0]
 800a914:	f8cc 3000 	str.w	r3, [ip]
 800a918:	6939      	ldr	r1, [r7, #16]
 800a91a:	6167      	str	r7, [r4, #20]
 800a91c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800a920:	01b0      	lsls	r0, r6, #6
 800a922:	47c0      	blx	r8
 800a924:	60a0      	str	r0, [r4, #8]
 800a926:	b310      	cbz	r0, 800a96e <rclc_executor_init+0xbe>
 800a928:	2500      	movs	r5, #0
 800a92a:	e000      	b.n	800a92e <rclc_executor_init+0x7e>
 800a92c:	68a0      	ldr	r0, [r4, #8]
 800a92e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800a932:	4631      	mov	r1, r6
 800a934:	3501      	adds	r5, #1
 800a936:	f000 fa25 	bl	800ad84 <rclc_executor_handle_init>
 800a93a:	42ae      	cmp	r6, r5
 800a93c:	d1f6      	bne.n	800a92c <rclc_executor_init+0x7c>
 800a93e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800a942:	f000 fa15 	bl	800ad70 <rclc_executor_handle_counters_zero_init>
 800a946:	490f      	ldr	r1, [pc, #60]	@ (800a984 <rclc_executor_init+0xd4>)
 800a948:	68a2      	ldr	r2, [r4, #8]
 800a94a:	2300      	movs	r3, #0
 800a94c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800a950:	b12a      	cbz	r2, 800a95e <rclc_executor_init+0xae>
 800a952:	6962      	ldr	r2, [r4, #20]
 800a954:	b11a      	cbz	r2, 800a95e <rclc_executor_init+0xae>
 800a956:	68e2      	ldr	r2, [r4, #12]
 800a958:	b10a      	cbz	r2, 800a95e <rclc_executor_init+0xae>
 800a95a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800a95e:	2000      	movs	r0, #0
 800a960:	e000      	b.n	800a964 <rclc_executor_init+0xb4>
 800a962:	200b      	movs	r0, #11
 800a964:	b032      	add	sp, #200	@ 0xc8
 800a966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a96a:	200b      	movs	r0, #11
 800a96c:	4770      	bx	lr
 800a96e:	200a      	movs	r0, #10
 800a970:	e7f8      	b.n	800a964 <rclc_executor_init+0xb4>
 800a972:	bf00      	nop
 800a974:	f3af 8000 	nop.w
 800a978:	3b9aca00 	.word	0x3b9aca00
 800a97c:	00000000 	.word	0x00000000
 800a980:	08019718 	.word	0x08019718
 800a984:	0800a559 	.word	0x0800a559

0800a988 <rclc_executor_add_subscription>:
 800a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a98e:	b338      	cbz	r0, 800a9e0 <rclc_executor_add_subscription+0x58>
 800a990:	b331      	cbz	r1, 800a9e0 <rclc_executor_add_subscription+0x58>
 800a992:	b32a      	cbz	r2, 800a9e0 <rclc_executor_add_subscription+0x58>
 800a994:	b323      	cbz	r3, 800a9e0 <rclc_executor_add_subscription+0x58>
 800a996:	4604      	mov	r4, r0
 800a998:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800a99c:	42a8      	cmp	r0, r5
 800a99e:	d301      	bcc.n	800a9a4 <rclc_executor_add_subscription+0x1c>
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a4:	68a6      	ldr	r6, [r4, #8]
 800a9a6:	0187      	lsls	r7, r0, #6
 800a9a8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a9ac:	2500      	movs	r5, #0
 800a9ae:	55f5      	strb	r5, [r6, r7]
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800a9b6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f104 0518 	add.w	r5, r4, #24
 800a9c0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a9c4:	f88c e001 	strb.w	lr, [ip, #1]
 800a9c8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800a9cc:	6120      	str	r0, [r4, #16]
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f007 fdd0 	bl	8012574 <rcl_wait_set_is_valid>
 800a9d4:	b930      	cbnz	r0, 800a9e4 <rclc_executor_add_subscription+0x5c>
 800a9d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a9d8:	3301      	adds	r3, #1
 800a9da:	2000      	movs	r0, #0
 800a9dc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800a9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e0:	200b      	movs	r0, #11
 800a9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f007 fdcb 	bl	8012580 <rcl_wait_set_fini>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d0f3      	beq.n	800a9d6 <rclc_executor_add_subscription+0x4e>
 800a9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9f0 <rclc_executor_add_timer>:
 800a9f0:	b300      	cbz	r0, 800aa34 <rclc_executor_add_timer+0x44>
 800a9f2:	b1f9      	cbz	r1, 800aa34 <rclc_executor_add_timer+0x44>
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	d301      	bcc.n	800aa04 <rclc_executor_add_timer+0x14>
 800aa00:	2001      	movs	r0, #1
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	6880      	ldr	r0, [r0, #8]
 800aa06:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800aa0a:	019d      	lsls	r5, r3, #6
 800aa0c:	6051      	str	r1, [r2, #4]
 800aa0e:	2102      	movs	r1, #2
 800aa10:	5341      	strh	r1, [r0, r5]
 800aa12:	3301      	adds	r3, #1
 800aa14:	2000      	movs	r0, #0
 800aa16:	2101      	movs	r1, #1
 800aa18:	f104 0518 	add.w	r5, r4, #24
 800aa1c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800aa1e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800aa20:	4628      	mov	r0, r5
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	f007 fda6 	bl	8012574 <rcl_wait_set_is_valid>
 800aa28:	b930      	cbnz	r0, 800aa38 <rclc_executor_add_timer+0x48>
 800aa2a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	2000      	movs	r0, #0
 800aa30:	6523      	str	r3, [r4, #80]	@ 0x50
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	200b      	movs	r0, #11
 800aa36:	4770      	bx	lr
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f007 fda1 	bl	8012580 <rcl_wait_set_fini>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d0f3      	beq.n	800aa2a <rclc_executor_add_timer+0x3a>
 800aa42:	bd38      	pop	{r3, r4, r5, pc}

0800aa44 <rclc_executor_prepare>:
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d044      	beq.n	800aad2 <rclc_executor_prepare+0x8e>
 800aa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa4a:	f100 0518 	add.w	r5, r0, #24
 800aa4e:	b09b      	sub	sp, #108	@ 0x6c
 800aa50:	4604      	mov	r4, r0
 800aa52:	4628      	mov	r0, r5
 800aa54:	f007 fd8e 	bl	8012574 <rcl_wait_set_is_valid>
 800aa58:	b110      	cbz	r0, 800aa60 <rclc_executor_prepare+0x1c>
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	b01b      	add	sp, #108	@ 0x6c
 800aa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa60:	4628      	mov	r0, r5
 800aa62:	f007 fd8d 	bl	8012580 <rcl_wait_set_fini>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d130      	bne.n	800aacc <rclc_executor_prepare+0x88>
 800aa6a:	a80c      	add	r0, sp, #48	@ 0x30
 800aa6c:	f007 fd6e 	bl	801254c <rcl_get_zero_initialized_wait_set>
 800aa70:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800aa74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa78:	46ae      	mov	lr, r5
 800aa7a:	6967      	ldr	r7, [r4, #20]
 800aa7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aa90:	f8dc 3000 	ldr.w	r3, [ip]
 800aa94:	f8ce 3000 	str.w	r3, [lr]
 800aa98:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aa9a:	ae04      	add	r6, sp, #16
 800aa9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	6862      	ldr	r2, [r4, #4]
 800aaa2:	6033      	str	r3, [r6, #0]
 800aaa4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800aaa6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800aaa8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800aaac:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800aab0:	e9cd 2100 	strd	r2, r1, [sp]
 800aab4:	4628      	mov	r0, r5
 800aab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aab8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800aaba:	f008 f891 	bl	8012be0 <rcl_wait_set_init>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d0cc      	beq.n	800aa5c <rclc_executor_prepare+0x18>
 800aac2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aac4:	f000 fafc 	bl	800b0c0 <rcutils_reset_error>
 800aac8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aaca:	e7c7      	b.n	800aa5c <rclc_executor_prepare+0x18>
 800aacc:	f000 faf8 	bl	800b0c0 <rcutils_reset_error>
 800aad0:	e7cb      	b.n	800aa6a <rclc_executor_prepare+0x26>
 800aad2:	200b      	movs	r0, #11
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop

0800aad8 <rclc_executor_spin_some>:
 800aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aadc:	b083      	sub	sp, #12
 800aade:	2800      	cmp	r0, #0
 800aae0:	f000 8091 	beq.w	800ac06 <rclc_executor_spin_some+0x12e>
 800aae4:	4604      	mov	r4, r0
 800aae6:	6840      	ldr	r0, [r0, #4]
 800aae8:	4690      	mov	r8, r2
 800aaea:	4699      	mov	r9, r3
 800aaec:	f006 fa38 	bl	8010f60 <rcl_context_is_valid>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d037      	beq.n	800ab64 <rclc_executor_spin_some+0x8c>
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f104 0718 	add.w	r7, r4, #24
 800aafa:	f7ff ffa3 	bl	800aa44 <rclc_executor_prepare>
 800aafe:	4638      	mov	r0, r7
 800ab00:	f007 fe22 	bl	8012748 <rcl_wait_set_clear>
 800ab04:	4606      	mov	r6, r0
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d177      	bne.n	800abfa <rclc_executor_spin_some+0x122>
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	b1eb      	cbz	r3, 800ab4c <rclc_executor_spin_some+0x74>
 800ab10:	68a1      	ldr	r1, [r4, #8]
 800ab12:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800ab16:	01aa      	lsls	r2, r5, #6
 800ab18:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ab1c:	b1b3      	cbz	r3, 800ab4c <rclc_executor_spin_some+0x74>
 800ab1e:	5c8b      	ldrb	r3, [r1, r2]
 800ab20:	2b0a      	cmp	r3, #10
 800ab22:	d81f      	bhi.n	800ab64 <rclc_executor_spin_some+0x8c>
 800ab24:	e8df f003 	tbb	[pc, r3]
 800ab28:	253e3434 	.word	0x253e3434
 800ab2c:	06060625 	.word	0x06060625
 800ab30:	525d      	.short	0x525d
 800ab32:	48          	.byte	0x48
 800ab33:	00          	.byte	0x00
 800ab34:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab38:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f008 f959 	bl	8012df4 <rcl_wait_set_add_service>
 800ab42:	b9f8      	cbnz	r0, 800ab84 <rclc_executor_spin_some+0xac>
 800ab44:	68e3      	ldr	r3, [r4, #12]
 800ab46:	3501      	adds	r5, #1
 800ab48:	42ab      	cmp	r3, r5
 800ab4a:	d8e1      	bhi.n	800ab10 <rclc_executor_spin_some+0x38>
 800ab4c:	4642      	mov	r2, r8
 800ab4e:	464b      	mov	r3, r9
 800ab50:	4638      	mov	r0, r7
 800ab52:	f008 f97d 	bl	8012e50 <rcl_wait>
 800ab56:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	f000 80ab 	beq.w	800acb6 <rclc_executor_spin_some+0x1de>
 800ab60:	2d01      	cmp	r5, #1
 800ab62:	d055      	beq.n	800ac10 <rclc_executor_spin_some+0x138>
 800ab64:	f000 faac 	bl	800b0c0 <rcutils_reset_error>
 800ab68:	2601      	movs	r6, #1
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	b003      	add	sp, #12
 800ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab72:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab76:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	f008 f90e 	bl	8012d9c <rcl_wait_set_add_client>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d0df      	beq.n	800ab44 <rclc_executor_spin_some+0x6c>
 800ab84:	9001      	str	r0, [sp, #4]
 800ab86:	f000 fa9b 	bl	800b0c0 <rcutils_reset_error>
 800ab8a:	9801      	ldr	r0, [sp, #4]
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	e7ec      	b.n	800ab6a <rclc_executor_spin_some+0x92>
 800ab90:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab94:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f007 fda9 	bl	80126f0 <rcl_wait_set_add_subscription>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d0d0      	beq.n	800ab44 <rclc_executor_spin_some+0x6c>
 800aba2:	e7ef      	b.n	800ab84 <rclc_executor_spin_some+0xac>
 800aba4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800aba8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800abac:	4638      	mov	r0, r7
 800abae:	f008 f8c5 	bl	8012d3c <rcl_wait_set_add_timer>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d0c6      	beq.n	800ab44 <rclc_executor_spin_some+0x6c>
 800abb6:	e7e5      	b.n	800ab84 <rclc_executor_spin_some+0xac>
 800abb8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800abbc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800abc0:	4638      	mov	r0, r7
 800abc2:	f008 f88f 	bl	8012ce4 <rcl_wait_set_add_guard_condition>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d0bc      	beq.n	800ab44 <rclc_executor_spin_some+0x6c>
 800abca:	e7db      	b.n	800ab84 <rclc_executor_spin_some+0xac>
 800abcc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800abd0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800abd4:	3110      	adds	r1, #16
 800abd6:	4638      	mov	r0, r7
 800abd8:	f008 fe58 	bl	801388c <rcl_action_wait_set_add_action_server>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d0b1      	beq.n	800ab44 <rclc_executor_spin_some+0x6c>
 800abe0:	e7d0      	b.n	800ab84 <rclc_executor_spin_some+0xac>
 800abe2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800abe6:	2300      	movs	r3, #0
 800abe8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800abec:	3110      	adds	r1, #16
 800abee:	4638      	mov	r0, r7
 800abf0:	f008 fc3a 	bl	8013468 <rcl_action_wait_set_add_action_client>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d0a5      	beq.n	800ab44 <rclc_executor_spin_some+0x6c>
 800abf8:	e7c4      	b.n	800ab84 <rclc_executor_spin_some+0xac>
 800abfa:	f000 fa61 	bl	800b0c0 <rcutils_reset_error>
 800abfe:	4630      	mov	r0, r6
 800ac00:	b003      	add	sp, #12
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	260b      	movs	r6, #11
 800ac08:	4630      	mov	r0, r6
 800ac0a:	b003      	add	sp, #12
 800ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac10:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800ac14:	4663      	mov	r3, ip
 800ac16:	4615      	mov	r5, r2
 800ac18:	b1ca      	cbz	r2, 800ac4e <rclc_executor_spin_some+0x176>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	46a8      	mov	r8, r5
 800ac1e:	f240 1991 	movw	r9, #401	@ 0x191
 800ac22:	e00c      	b.n	800ac3e <rclc_executor_spin_some+0x166>
 800ac24:	f7ff fae0 	bl	800a1e8 <_rclc_check_for_new_data>
 800ac28:	f108 0801 	add.w	r8, r8, #1
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	b108      	cbz	r0, 800ac34 <rclc_executor_spin_some+0x15c>
 800ac30:	4548      	cmp	r0, r9
 800ac32:	d13e      	bne.n	800acb2 <rclc_executor_spin_some+0x1da>
 800ac34:	68e2      	ldr	r2, [r4, #12]
 800ac36:	4590      	cmp	r8, r2
 800ac38:	f080 808b 	bcs.w	800ad52 <rclc_executor_spin_some+0x27a>
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ac42:	469c      	mov	ip, r3
 800ac44:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ac48:	4639      	mov	r1, r7
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1ea      	bne.n	800ac24 <rclc_executor_spin_some+0x14c>
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4660      	mov	r0, ip
 800ac52:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800ac56:	4798      	blx	r3
 800ac58:	b358      	cbz	r0, 800acb2 <rclc_executor_spin_some+0x1da>
 800ac5a:	68e3      	ldr	r3, [r4, #12]
 800ac5c:	b34b      	cbz	r3, 800acb2 <rclc_executor_spin_some+0x1da>
 800ac5e:	f04f 0800 	mov.w	r8, #0
 800ac62:	f240 1991 	movw	r9, #401	@ 0x191
 800ac66:	e00a      	b.n	800ac7e <rclc_executor_spin_some+0x1a6>
 800ac68:	f7ff fb0c 	bl	800a284 <_rclc_take_new_data>
 800ac6c:	f108 0801 	add.w	r8, r8, #1
 800ac70:	4605      	mov	r5, r0
 800ac72:	b108      	cbz	r0, 800ac78 <rclc_executor_spin_some+0x1a0>
 800ac74:	4548      	cmp	r0, r9
 800ac76:	d11c      	bne.n	800acb2 <rclc_executor_spin_some+0x1da>
 800ac78:	68e3      	ldr	r3, [r4, #12]
 800ac7a:	4598      	cmp	r8, r3
 800ac7c:	d26f      	bcs.n	800ad5e <rclc_executor_spin_some+0x286>
 800ac7e:	68a3      	ldr	r3, [r4, #8]
 800ac80:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ac84:	4639      	mov	r1, r7
 800ac86:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	d1ec      	bne.n	800ac68 <rclc_executor_spin_some+0x190>
 800ac8e:	2700      	movs	r7, #0
 800ac90:	e009      	b.n	800aca6 <rclc_executor_spin_some+0x1ce>
 800ac92:	f7ff fc97 	bl	800a5c4 <_rclc_execute>
 800ac96:	3701      	adds	r7, #1
 800ac98:	4605      	mov	r5, r0
 800ac9a:	b950      	cbnz	r0, 800acb2 <rclc_executor_spin_some+0x1da>
 800ac9c:	68e3      	ldr	r3, [r4, #12]
 800ac9e:	429f      	cmp	r7, r3
 800aca0:	f4bf af63 	bcs.w	800ab6a <rclc_executor_spin_some+0x92>
 800aca4:	68a3      	ldr	r3, [r4, #8]
 800aca6:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800acaa:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1ef      	bne.n	800ac92 <rclc_executor_spin_some+0x1ba>
 800acb2:	462e      	mov	r6, r5
 800acb4:	e759      	b.n	800ab6a <rclc_executor_spin_some+0x92>
 800acb6:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800acba:	4663      	mov	r3, ip
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	d054      	beq.n	800ad6a <rclc_executor_spin_some+0x292>
 800acc0:	46a8      	mov	r8, r5
 800acc2:	f240 1991 	movw	r9, #401	@ 0x191
 800acc6:	e00b      	b.n	800ace0 <rclc_executor_spin_some+0x208>
 800acc8:	f7ff fa8e 	bl	800a1e8 <_rclc_check_for_new_data>
 800accc:	f108 0801 	add.w	r8, r8, #1
 800acd0:	4605      	mov	r5, r0
 800acd2:	b108      	cbz	r0, 800acd8 <rclc_executor_spin_some+0x200>
 800acd4:	4548      	cmp	r0, r9
 800acd6:	d1ec      	bne.n	800acb2 <rclc_executor_spin_some+0x1da>
 800acd8:	68e2      	ldr	r2, [r4, #12]
 800acda:	4590      	cmp	r8, r2
 800acdc:	d23c      	bcs.n	800ad58 <rclc_executor_spin_some+0x280>
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ace4:	469c      	mov	ip, r3
 800ace6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800acea:	4639      	mov	r1, r7
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1eb      	bne.n	800acc8 <rclc_executor_spin_some+0x1f0>
 800acf0:	4611      	mov	r1, r2
 800acf2:	4660      	mov	r0, ip
 800acf4:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800acf8:	4798      	blx	r3
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d0d9      	beq.n	800acb2 <rclc_executor_spin_some+0x1da>
 800acfe:	68e3      	ldr	r3, [r4, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0d6      	beq.n	800acb2 <rclc_executor_spin_some+0x1da>
 800ad04:	f04f 0a00 	mov.w	sl, #0
 800ad08:	f240 1891 	movw	r8, #401	@ 0x191
 800ad0c:	f240 2959 	movw	r9, #601	@ 0x259
 800ad10:	e013      	b.n	800ad3a <rclc_executor_spin_some+0x262>
 800ad12:	f7ff fab7 	bl	800a284 <_rclc_take_new_data>
 800ad16:	b118      	cbz	r0, 800ad20 <rclc_executor_spin_some+0x248>
 800ad18:	4540      	cmp	r0, r8
 800ad1a:	d001      	beq.n	800ad20 <rclc_executor_spin_some+0x248>
 800ad1c:	4548      	cmp	r0, r9
 800ad1e:	d122      	bne.n	800ad66 <rclc_executor_spin_some+0x28e>
 800ad20:	68a0      	ldr	r0, [r4, #8]
 800ad22:	4458      	add	r0, fp
 800ad24:	f7ff fc4e 	bl	800a5c4 <_rclc_execute>
 800ad28:	f10a 0a01 	add.w	sl, sl, #1
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d1bf      	bne.n	800acb2 <rclc_executor_spin_some+0x1da>
 800ad32:	68e3      	ldr	r3, [r4, #12]
 800ad34:	459a      	cmp	sl, r3
 800ad36:	f4bf af18 	bcs.w	800ab6a <rclc_executor_spin_some+0x92>
 800ad3a:	68a0      	ldr	r0, [r4, #8]
 800ad3c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800ad40:	4639      	mov	r1, r7
 800ad42:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ad46:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e1      	bne.n	800ad12 <rclc_executor_spin_some+0x23a>
 800ad4e:	462e      	mov	r6, r5
 800ad50:	e70b      	b.n	800ab6a <rclc_executor_spin_some+0x92>
 800ad52:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800ad56:	e77a      	b.n	800ac4e <rclc_executor_spin_some+0x176>
 800ad58:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800ad5c:	e7c8      	b.n	800acf0 <rclc_executor_spin_some+0x218>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d0a7      	beq.n	800acb2 <rclc_executor_spin_some+0x1da>
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	e793      	b.n	800ac8e <rclc_executor_spin_some+0x1b6>
 800ad66:	4606      	mov	r6, r0
 800ad68:	e6ff      	b.n	800ab6a <rclc_executor_spin_some+0x92>
 800ad6a:	4615      	mov	r5, r2
 800ad6c:	e7c0      	b.n	800acf0 <rclc_executor_spin_some+0x218>
 800ad6e:	bf00      	nop

0800ad70 <rclc_executor_handle_counters_zero_init>:
 800ad70:	b130      	cbz	r0, 800ad80 <rclc_executor_handle_counters_zero_init+0x10>
 800ad72:	b508      	push	{r3, lr}
 800ad74:	2220      	movs	r2, #32
 800ad76:	2100      	movs	r1, #0
 800ad78:	f00d fd10 	bl	801879c <memset>
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	bd08      	pop	{r3, pc}
 800ad80:	200b      	movs	r0, #11
 800ad82:	4770      	bx	lr

0800ad84 <rclc_executor_handle_init>:
 800ad84:	b158      	cbz	r0, 800ad9e <rclc_executor_handle_init+0x1a>
 800ad86:	2300      	movs	r3, #0
 800ad88:	220b      	movs	r2, #11
 800ad8a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ad8e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800ad92:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ad96:	8002      	strh	r2, [r0, #0]
 800ad98:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	4770      	bx	lr
 800ad9e:	200b      	movs	r0, #11
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop

0800ada4 <rclc_support_init>:
 800ada4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada8:	b086      	sub	sp, #24
 800adaa:	b3b8      	cbz	r0, 800ae1c <rclc_support_init+0x78>
 800adac:	461c      	mov	r4, r3
 800adae:	b3ab      	cbz	r3, 800ae1c <rclc_support_init+0x78>
 800adb0:	460f      	mov	r7, r1
 800adb2:	4690      	mov	r8, r2
 800adb4:	4606      	mov	r6, r0
 800adb6:	f006 fa3d 	bl	8011234 <rcl_get_zero_initialized_init_options>
 800adba:	f104 030c 	add.w	r3, r4, #12
 800adbe:	9005      	str	r0, [sp, #20]
 800adc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800adc4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800adc8:	a805      	add	r0, sp, #20
 800adca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800adce:	f006 fa33 	bl	8011238 <rcl_init_options_init>
 800add2:	4605      	mov	r5, r0
 800add4:	b9e0      	cbnz	r0, 800ae10 <rclc_support_init+0x6c>
 800add6:	ad02      	add	r5, sp, #8
 800add8:	4628      	mov	r0, r5
 800adda:	f006 f8bd 	bl	8010f58 <rcl_get_zero_initialized_context>
 800adde:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ade2:	4633      	mov	r3, r6
 800ade4:	e886 0003 	stmia.w	r6, {r0, r1}
 800ade8:	aa05      	add	r2, sp, #20
 800adea:	4641      	mov	r1, r8
 800adec:	4638      	mov	r0, r7
 800adee:	f006 f91d 	bl	801102c <rcl_init>
 800adf2:	4605      	mov	r5, r0
 800adf4:	b9b8      	cbnz	r0, 800ae26 <rclc_support_init+0x82>
 800adf6:	60b4      	str	r4, [r6, #8]
 800adf8:	4622      	mov	r2, r4
 800adfa:	f106 010c 	add.w	r1, r6, #12
 800adfe:	2003      	movs	r0, #3
 800ae00:	f006 fffa 	bl	8011df8 <rcl_clock_init>
 800ae04:	4605      	mov	r5, r0
 800ae06:	b970      	cbnz	r0, 800ae26 <rclc_support_init+0x82>
 800ae08:	a805      	add	r0, sp, #20
 800ae0a:	f006 fa71 	bl	80112f0 <rcl_init_options_fini>
 800ae0e:	b108      	cbz	r0, 800ae14 <rclc_support_init+0x70>
 800ae10:	f000 f956 	bl	800b0c0 <rcutils_reset_error>
 800ae14:	4628      	mov	r0, r5
 800ae16:	b006      	add	sp, #24
 800ae18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1c:	250b      	movs	r5, #11
 800ae1e:	4628      	mov	r0, r5
 800ae20:	b006      	add	sp, #24
 800ae22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae26:	f000 f94b 	bl	800b0c0 <rcutils_reset_error>
 800ae2a:	a805      	add	r0, sp, #20
 800ae2c:	f006 fa60 	bl	80112f0 <rcl_init_options_fini>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d0ef      	beq.n	800ae14 <rclc_support_init+0x70>
 800ae34:	e7ec      	b.n	800ae10 <rclc_support_init+0x6c>
 800ae36:	bf00      	nop

0800ae38 <rclc_node_init_default>:
 800ae38:	b3b8      	cbz	r0, 800aeaa <rclc_node_init_default+0x72>
 800ae3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae3e:	460d      	mov	r5, r1
 800ae40:	b0a1      	sub	sp, #132	@ 0x84
 800ae42:	b329      	cbz	r1, 800ae90 <rclc_node_init_default+0x58>
 800ae44:	4616      	mov	r6, r2
 800ae46:	b31a      	cbz	r2, 800ae90 <rclc_node_init_default+0x58>
 800ae48:	461f      	mov	r7, r3
 800ae4a:	b30b      	cbz	r3, 800ae90 <rclc_node_init_default+0x58>
 800ae4c:	f10d 0810 	add.w	r8, sp, #16
 800ae50:	4604      	mov	r4, r0
 800ae52:	4640      	mov	r0, r8
 800ae54:	f006 fad2 	bl	80113fc <rcl_get_zero_initialized_node>
 800ae58:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ae5c:	f10d 0918 	add.w	r9, sp, #24
 800ae60:	e884 0003 	stmia.w	r4, {r0, r1}
 800ae64:	4648      	mov	r0, r9
 800ae66:	f006 fc71 	bl	801174c <rcl_node_get_default_options>
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	f006 fac6 	bl	80113fc <rcl_get_zero_initialized_node>
 800ae70:	f8cd 9000 	str.w	r9, [sp]
 800ae74:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ae78:	463b      	mov	r3, r7
 800ae7a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ae7e:	4632      	mov	r2, r6
 800ae80:	4629      	mov	r1, r5
 800ae82:	4620      	mov	r0, r4
 800ae84:	f006 fac4 	bl	8011410 <rcl_node_init>
 800ae88:	b930      	cbnz	r0, 800ae98 <rclc_node_init_default+0x60>
 800ae8a:	b021      	add	sp, #132	@ 0x84
 800ae8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae90:	200b      	movs	r0, #11
 800ae92:	b021      	add	sp, #132	@ 0x84
 800ae94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae98:	9003      	str	r0, [sp, #12]
 800ae9a:	f000 f911 	bl	800b0c0 <rcutils_reset_error>
 800ae9e:	f000 f90f 	bl	800b0c0 <rcutils_reset_error>
 800aea2:	9803      	ldr	r0, [sp, #12]
 800aea4:	b021      	add	sp, #132	@ 0x84
 800aea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeaa:	200b      	movs	r0, #11
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop

0800aeb0 <rclc_publisher_init_default>:
 800aeb0:	b368      	cbz	r0, 800af0e <rclc_publisher_init_default+0x5e>
 800aeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb6:	460d      	mov	r5, r1
 800aeb8:	b0a0      	sub	sp, #128	@ 0x80
 800aeba:	b321      	cbz	r1, 800af06 <rclc_publisher_init_default+0x56>
 800aebc:	4616      	mov	r6, r2
 800aebe:	b312      	cbz	r2, 800af06 <rclc_publisher_init_default+0x56>
 800aec0:	461f      	mov	r7, r3
 800aec2:	b303      	cbz	r3, 800af06 <rclc_publisher_init_default+0x56>
 800aec4:	4604      	mov	r4, r0
 800aec6:	f7ff f87f 	bl	8009fc8 <rcl_get_zero_initialized_publisher>
 800aeca:	f10d 0810 	add.w	r8, sp, #16
 800aece:	6020      	str	r0, [r4, #0]
 800aed0:	4640      	mov	r0, r8
 800aed2:	f7ff f917 	bl	800a104 <rcl_publisher_get_default_options>
 800aed6:	490f      	ldr	r1, [pc, #60]	@ (800af14 <rclc_publisher_init_default+0x64>)
 800aed8:	2250      	movs	r2, #80	@ 0x50
 800aeda:	4640      	mov	r0, r8
 800aedc:	f00d fd39 	bl	8018952 <memcpy>
 800aee0:	f8cd 8000 	str.w	r8, [sp]
 800aee4:	463b      	mov	r3, r7
 800aee6:	4632      	mov	r2, r6
 800aee8:	4629      	mov	r1, r5
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff f872 	bl	8009fd4 <rcl_publisher_init>
 800aef0:	b910      	cbnz	r0, 800aef8 <rclc_publisher_init_default+0x48>
 800aef2:	b020      	add	sp, #128	@ 0x80
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	9003      	str	r0, [sp, #12]
 800aefa:	f000 f8e1 	bl	800b0c0 <rcutils_reset_error>
 800aefe:	9803      	ldr	r0, [sp, #12]
 800af00:	b020      	add	sp, #128	@ 0x80
 800af02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af06:	200b      	movs	r0, #11
 800af08:	b020      	add	sp, #128	@ 0x80
 800af0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0e:	200b      	movs	r0, #11
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	080197a8 	.word	0x080197a8

0800af18 <rclc_subscription_init_default>:
 800af18:	b368      	cbz	r0, 800af76 <rclc_subscription_init_default+0x5e>
 800af1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1e:	460d      	mov	r5, r1
 800af20:	b0a2      	sub	sp, #136	@ 0x88
 800af22:	b321      	cbz	r1, 800af6e <rclc_subscription_init_default+0x56>
 800af24:	4616      	mov	r6, r2
 800af26:	b312      	cbz	r2, 800af6e <rclc_subscription_init_default+0x56>
 800af28:	461f      	mov	r7, r3
 800af2a:	b303      	cbz	r3, 800af6e <rclc_subscription_init_default+0x56>
 800af2c:	4604      	mov	r4, r0
 800af2e:	f006 fe17 	bl	8011b60 <rcl_get_zero_initialized_subscription>
 800af32:	f10d 0810 	add.w	r8, sp, #16
 800af36:	6020      	str	r0, [r4, #0]
 800af38:	4640      	mov	r0, r8
 800af3a:	f006 febf 	bl	8011cbc <rcl_subscription_get_default_options>
 800af3e:	490f      	ldr	r1, [pc, #60]	@ (800af7c <rclc_subscription_init_default+0x64>)
 800af40:	2250      	movs	r2, #80	@ 0x50
 800af42:	4640      	mov	r0, r8
 800af44:	f00d fd05 	bl	8018952 <memcpy>
 800af48:	f8cd 8000 	str.w	r8, [sp]
 800af4c:	463b      	mov	r3, r7
 800af4e:	4632      	mov	r2, r6
 800af50:	4629      	mov	r1, r5
 800af52:	4620      	mov	r0, r4
 800af54:	f006 fe0a 	bl	8011b6c <rcl_subscription_init>
 800af58:	b910      	cbnz	r0, 800af60 <rclc_subscription_init_default+0x48>
 800af5a:	b022      	add	sp, #136	@ 0x88
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af60:	9003      	str	r0, [sp, #12]
 800af62:	f000 f8ad 	bl	800b0c0 <rcutils_reset_error>
 800af66:	9803      	ldr	r0, [sp, #12]
 800af68:	b022      	add	sp, #136	@ 0x88
 800af6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af6e:	200b      	movs	r0, #11
 800af70:	b022      	add	sp, #136	@ 0x88
 800af72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af76:	200b      	movs	r0, #11
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	080197f8 	.word	0x080197f8

0800af80 <rclc_timer_init_default2>:
 800af80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af84:	b08c      	sub	sp, #48	@ 0x30
 800af86:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800af8a:	b330      	cbz	r0, 800afda <rclc_timer_init_default2+0x5a>
 800af8c:	460e      	mov	r6, r1
 800af8e:	b321      	cbz	r1, 800afda <rclc_timer_init_default2+0x5a>
 800af90:	4690      	mov	r8, r2
 800af92:	461f      	mov	r7, r3
 800af94:	4605      	mov	r5, r0
 800af96:	f007 f90f 	bl	80121b8 <rcl_get_zero_initialized_timer>
 800af9a:	9408      	str	r4, [sp, #32]
 800af9c:	68b4      	ldr	r4, [r6, #8]
 800af9e:	6028      	str	r0, [r5, #0]
 800afa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afa2:	f10d 0c0c 	add.w	ip, sp, #12
 800afa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	f8cc 3000 	str.w	r3, [ip]
 800afb0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800afb2:	9302      	str	r3, [sp, #8]
 800afb4:	e9cd 8700 	strd	r8, r7, [sp]
 800afb8:	4628      	mov	r0, r5
 800afba:	4632      	mov	r2, r6
 800afbc:	f106 010c 	add.w	r1, r6, #12
 800afc0:	f007 f902 	bl	80121c8 <rcl_timer_init2>
 800afc4:	b910      	cbnz	r0, 800afcc <rclc_timer_init_default2+0x4c>
 800afc6:	b00c      	add	sp, #48	@ 0x30
 800afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afcc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800afce:	f000 f877 	bl	800b0c0 <rcutils_reset_error>
 800afd2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800afd4:	b00c      	add	sp, #48	@ 0x30
 800afd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afda:	200b      	movs	r0, #11
 800afdc:	b00c      	add	sp, #48	@ 0x30
 800afde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe2:	bf00      	nop

0800afe4 <__default_zero_allocate>:
 800afe4:	f00c befc 	b.w	8017de0 <calloc>

0800afe8 <__default_reallocate>:
 800afe8:	f00d b89a 	b.w	8018120 <realloc>

0800afec <__default_deallocate>:
 800afec:	f00c bf76 	b.w	8017edc <free>

0800aff0 <__default_allocate>:
 800aff0:	f00c bf6c 	b.w	8017ecc <malloc>

0800aff4 <rcutils_get_zero_initialized_allocator>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	4c05      	ldr	r4, [pc, #20]	@ (800b00c <rcutils_get_zero_initialized_allocator+0x18>)
 800aff8:	4686      	mov	lr, r0
 800affa:	4684      	mov	ip, r0
 800affc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800affe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	f8cc 3000 	str.w	r3, [ip]
 800b008:	4670      	mov	r0, lr
 800b00a:	bd10      	pop	{r4, pc}
 800b00c:	08019848 	.word	0x08019848

0800b010 <rcutils_get_default_allocator>:
 800b010:	b510      	push	{r4, lr}
 800b012:	4c05      	ldr	r4, [pc, #20]	@ (800b028 <rcutils_get_default_allocator+0x18>)
 800b014:	4686      	mov	lr, r0
 800b016:	4684      	mov	ip, r0
 800b018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b01a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	f8cc 3000 	str.w	r3, [ip]
 800b024:	4670      	mov	r0, lr
 800b026:	bd10      	pop	{r4, pc}
 800b028:	20000040 	.word	0x20000040

0800b02c <rcutils_set_default_allocator>:
 800b02c:	b1a8      	cbz	r0, 800b05a <rcutils_set_default_allocator+0x2e>
 800b02e:	6802      	ldr	r2, [r0, #0]
 800b030:	b1a2      	cbz	r2, 800b05c <rcutils_set_default_allocator+0x30>
 800b032:	6841      	ldr	r1, [r0, #4]
 800b034:	b1a1      	cbz	r1, 800b060 <rcutils_set_default_allocator+0x34>
 800b036:	b410      	push	{r4}
 800b038:	68c4      	ldr	r4, [r0, #12]
 800b03a:	b164      	cbz	r4, 800b056 <rcutils_set_default_allocator+0x2a>
 800b03c:	6880      	ldr	r0, [r0, #8]
 800b03e:	b138      	cbz	r0, 800b050 <rcutils_set_default_allocator+0x24>
 800b040:	4b08      	ldr	r3, [pc, #32]	@ (800b064 <rcutils_set_default_allocator+0x38>)
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	2200      	movs	r2, #0
 800b046:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b04a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b04e:	2001      	movs	r0, #1
 800b050:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	4620      	mov	r0, r4
 800b058:	e7fa      	b.n	800b050 <rcutils_set_default_allocator+0x24>
 800b05a:	4770      	bx	lr
 800b05c:	4610      	mov	r0, r2
 800b05e:	4770      	bx	lr
 800b060:	4608      	mov	r0, r1
 800b062:	4770      	bx	lr
 800b064:	20000040 	.word	0x20000040

0800b068 <rcutils_allocator_is_valid>:
 800b068:	b158      	cbz	r0, 800b082 <rcutils_allocator_is_valid+0x1a>
 800b06a:	6803      	ldr	r3, [r0, #0]
 800b06c:	b143      	cbz	r3, 800b080 <rcutils_allocator_is_valid+0x18>
 800b06e:	6843      	ldr	r3, [r0, #4]
 800b070:	b133      	cbz	r3, 800b080 <rcutils_allocator_is_valid+0x18>
 800b072:	68c3      	ldr	r3, [r0, #12]
 800b074:	b123      	cbz	r3, 800b080 <rcutils_allocator_is_valid+0x18>
 800b076:	6880      	ldr	r0, [r0, #8]
 800b078:	3800      	subs	r0, #0
 800b07a:	bf18      	it	ne
 800b07c:	2001      	movne	r0, #1
 800b07e:	4770      	bx	lr
 800b080:	4618      	mov	r0, r3
 800b082:	4770      	bx	lr

0800b084 <rcutils_error_is_set>:
 800b084:	4b01      	ldr	r3, [pc, #4]	@ (800b08c <rcutils_error_is_set+0x8>)
 800b086:	7818      	ldrb	r0, [r3, #0]
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	2000a240 	.word	0x2000a240

0800b090 <rcutils_get_error_string>:
 800b090:	4b06      	ldr	r3, [pc, #24]	@ (800b0ac <rcutils_get_error_string+0x1c>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	b13b      	cbz	r3, 800b0a6 <rcutils_get_error_string+0x16>
 800b096:	4b06      	ldr	r3, [pc, #24]	@ (800b0b0 <rcutils_get_error_string+0x20>)
 800b098:	781a      	ldrb	r2, [r3, #0]
 800b09a:	b90a      	cbnz	r2, 800b0a0 <rcutils_get_error_string+0x10>
 800b09c:	2201      	movs	r2, #1
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	4b04      	ldr	r3, [pc, #16]	@ (800b0b4 <rcutils_get_error_string+0x24>)
 800b0a2:	7818      	ldrb	r0, [r3, #0]
 800b0a4:	4770      	bx	lr
 800b0a6:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <rcutils_get_error_string+0x28>)
 800b0a8:	7818      	ldrb	r0, [r3, #0]
 800b0aa:	4770      	bx	lr
 800b0ac:	2000a240 	.word	0x2000a240
 800b0b0:	2000a245 	.word	0x2000a245
 800b0b4:	2000a244 	.word	0x2000a244
 800b0b8:	0801985c 	.word	0x0801985c
 800b0bc:	00000000 	.word	0x00000000

0800b0c0 <rcutils_reset_error>:
 800b0c0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b0e0 <rcutils_reset_error+0x20>
 800b0c4:	4a08      	ldr	r2, [pc, #32]	@ (800b0e8 <rcutils_reset_error+0x28>)
 800b0c6:	4809      	ldr	r0, [pc, #36]	@ (800b0ec <rcutils_reset_error+0x2c>)
 800b0c8:	4909      	ldr	r1, [pc, #36]	@ (800b0f0 <rcutils_reset_error+0x30>)
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	8013      	strh	r3, [r2, #0]
 800b0ce:	ed82 7b02 	vstr	d7, [r2, #8]
 800b0d2:	4a08      	ldr	r2, [pc, #32]	@ (800b0f4 <rcutils_reset_error+0x34>)
 800b0d4:	7003      	strb	r3, [r0, #0]
 800b0d6:	700b      	strb	r3, [r1, #0]
 800b0d8:	7013      	strb	r3, [r2, #0]
 800b0da:	4770      	bx	lr
 800b0dc:	f3af 8000 	nop.w
	...
 800b0e8:	2000a248 	.word	0x2000a248
 800b0ec:	2000a245 	.word	0x2000a245
 800b0f0:	2000a244 	.word	0x2000a244
 800b0f4:	2000a240 	.word	0x2000a240

0800b0f8 <rcutils_system_time_now>:
 800b0f8:	b318      	cbz	r0, 800b142 <rcutils_system_time_now+0x4a>
 800b0fa:	b570      	push	{r4, r5, r6, lr}
 800b0fc:	b084      	sub	sp, #16
 800b0fe:	4604      	mov	r4, r0
 800b100:	4669      	mov	r1, sp
 800b102:	2001      	movs	r0, #1
 800b104:	f7f6 fe00 	bl	8001d08 <clock_gettime>
 800b108:	2800      	cmp	r0, #0
 800b10a:	db17      	blt.n	800b13c <rcutils_system_time_now+0x44>
 800b10c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b110:	2900      	cmp	r1, #0
 800b112:	db13      	blt.n	800b13c <rcutils_system_time_now+0x44>
 800b114:	9d02      	ldr	r5, [sp, #8]
 800b116:	2d00      	cmp	r5, #0
 800b118:	db0d      	blt.n	800b136 <rcutils_system_time_now+0x3e>
 800b11a:	4e0b      	ldr	r6, [pc, #44]	@ (800b148 <rcutils_system_time_now+0x50>)
 800b11c:	fba3 3206 	umull	r3, r2, r3, r6
 800b120:	195b      	adds	r3, r3, r5
 800b122:	fb06 2201 	mla	r2, r6, r1, r2
 800b126:	f04f 0000 	mov.w	r0, #0
 800b12a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800b12e:	e9c4 3200 	strd	r3, r2, [r4]
 800b132:	b004      	add	sp, #16
 800b134:	bd70      	pop	{r4, r5, r6, pc}
 800b136:	ea53 0201 	orrs.w	r2, r3, r1
 800b13a:	d1ee      	bne.n	800b11a <rcutils_system_time_now+0x22>
 800b13c:	2002      	movs	r0, #2
 800b13e:	b004      	add	sp, #16
 800b140:	bd70      	pop	{r4, r5, r6, pc}
 800b142:	200b      	movs	r0, #11
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	3b9aca00 	.word	0x3b9aca00

0800b14c <rcutils_steady_time_now>:
 800b14c:	b318      	cbz	r0, 800b196 <rcutils_steady_time_now+0x4a>
 800b14e:	b570      	push	{r4, r5, r6, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	4604      	mov	r4, r0
 800b154:	4669      	mov	r1, sp
 800b156:	2000      	movs	r0, #0
 800b158:	f7f6 fdd6 	bl	8001d08 <clock_gettime>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	db17      	blt.n	800b190 <rcutils_steady_time_now+0x44>
 800b160:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b164:	2900      	cmp	r1, #0
 800b166:	db13      	blt.n	800b190 <rcutils_steady_time_now+0x44>
 800b168:	9d02      	ldr	r5, [sp, #8]
 800b16a:	2d00      	cmp	r5, #0
 800b16c:	db0d      	blt.n	800b18a <rcutils_steady_time_now+0x3e>
 800b16e:	4e0b      	ldr	r6, [pc, #44]	@ (800b19c <rcutils_steady_time_now+0x50>)
 800b170:	fba3 3206 	umull	r3, r2, r3, r6
 800b174:	195b      	adds	r3, r3, r5
 800b176:	fb06 2201 	mla	r2, r6, r1, r2
 800b17a:	f04f 0000 	mov.w	r0, #0
 800b17e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800b182:	e9c4 3200 	strd	r3, r2, [r4]
 800b186:	b004      	add	sp, #16
 800b188:	bd70      	pop	{r4, r5, r6, pc}
 800b18a:	ea53 0201 	orrs.w	r2, r3, r1
 800b18e:	d1ee      	bne.n	800b16e <rcutils_steady_time_now+0x22>
 800b190:	2002      	movs	r0, #2
 800b192:	b004      	add	sp, #16
 800b194:	bd70      	pop	{r4, r5, r6, pc}
 800b196:	200b      	movs	r0, #11
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	3b9aca00 	.word	0x3b9aca00

0800b1a0 <rmw_get_default_publisher_options>:
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	6002      	str	r2, [r0, #0]
 800b1a4:	7102      	strb	r2, [r0, #4]
 800b1a6:	4770      	bx	lr

0800b1a8 <rmw_uros_set_custom_transport>:
 800b1a8:	b470      	push	{r4, r5, r6}
 800b1aa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b1ae:	b162      	cbz	r2, 800b1ca <rmw_uros_set_custom_transport+0x22>
 800b1b0:	b15b      	cbz	r3, 800b1ca <rmw_uros_set_custom_transport+0x22>
 800b1b2:	b155      	cbz	r5, 800b1ca <rmw_uros_set_custom_transport+0x22>
 800b1b4:	b14e      	cbz	r6, 800b1ca <rmw_uros_set_custom_transport+0x22>
 800b1b6:	4c06      	ldr	r4, [pc, #24]	@ (800b1d0 <rmw_uros_set_custom_transport+0x28>)
 800b1b8:	7020      	strb	r0, [r4, #0]
 800b1ba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b1be:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b1c2:	6166      	str	r6, [r4, #20]
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	bc70      	pop	{r4, r5, r6}
 800b1c8:	4770      	bx	lr
 800b1ca:	200b      	movs	r0, #11
 800b1cc:	bc70      	pop	{r4, r5, r6}
 800b1ce:	4770      	bx	lr
 800b1d0:	2000a258 	.word	0x2000a258

0800b1d4 <rmw_uros_ping_agent>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4b22      	ldr	r3, [pc, #136]	@ (800b260 <rmw_uros_ping_agent+0x8c>)
 800b1d8:	7b1a      	ldrb	r2, [r3, #12]
 800b1da:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800b1de:	4605      	mov	r5, r0
 800b1e0:	460e      	mov	r6, r1
 800b1e2:	b10a      	cbz	r2, 800b1e8 <rmw_uros_ping_agent+0x14>
 800b1e4:	681c      	ldr	r4, [r3, #0]
 800b1e6:	b9bc      	cbnz	r4, 800b218 <rmw_uros_ping_agent+0x44>
 800b1e8:	4b1e      	ldr	r3, [pc, #120]	@ (800b264 <rmw_uros_ping_agent+0x90>)
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	6918      	ldr	r0, [r3, #16]
 800b1ee:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	909c      	str	r0, [sp, #624]	@ 0x270
 800b1fc:	6958      	ldr	r0, [r3, #20]
 800b1fe:	929b      	str	r2, [sp, #620]	@ 0x26c
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	909d      	str	r0, [sp, #628]	@ 0x274
 800b204:	466a      	mov	r2, sp
 800b206:	4608      	mov	r0, r1
 800b208:	939a      	str	r3, [sp, #616]	@ 0x268
 800b20a:	f000 f9cd 	bl	800b5a8 <rmw_uxrce_transport_init>
 800b20e:	b198      	cbz	r0, 800b238 <rmw_uros_ping_agent+0x64>
 800b210:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	b9f0      	cbnz	r0, 800b256 <rmw_uros_ping_agent+0x82>
 800b218:	68a0      	ldr	r0, [r4, #8]
 800b21a:	4632      	mov	r2, r6
 800b21c:	4629      	mov	r1, r5
 800b21e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b222:	f002 fc2d 	bl	800da80 <uxr_ping_agent_session>
 800b226:	6864      	ldr	r4, [r4, #4]
 800b228:	2c00      	cmp	r4, #0
 800b22a:	d1f4      	bne.n	800b216 <rmw_uros_ping_agent+0x42>
 800b22c:	f080 0001 	eor.w	r0, r0, #1
 800b230:	b2c0      	uxtb	r0, r0
 800b232:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	4632      	mov	r2, r6
 800b23a:	4629      	mov	r1, r5
 800b23c:	a89e      	add	r0, sp, #632	@ 0x278
 800b23e:	f002 fc6f 	bl	800db20 <uxr_ping_agent_attempts>
 800b242:	4604      	mov	r4, r0
 800b244:	4668      	mov	r0, sp
 800b246:	f002 fbe9 	bl	800da1c <uxr_close_custom_transport>
 800b24a:	f084 0001 	eor.w	r0, r4, #1
 800b24e:	b2c0      	uxtb	r0, r0
 800b250:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b254:	bd70      	pop	{r4, r5, r6, pc}
 800b256:	2000      	movs	r0, #0
 800b258:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b25c:	bd70      	pop	{r4, r5, r6, pc}
 800b25e:	bf00      	nop
 800b260:	2000ebb8 	.word	0x2000ebb8
 800b264:	2000a258 	.word	0x2000a258

0800b268 <flush_session>:
 800b268:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b26a:	f003 b9a9 	b.w	800e5c0 <uxr_run_session_until_confirm_delivery>
 800b26e:	bf00      	nop

0800b270 <rmw_publish>:
 800b270:	2800      	cmp	r0, #0
 800b272:	d053      	beq.n	800b31c <rmw_publish+0xac>
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	460d      	mov	r5, r1
 800b278:	b08e      	sub	sp, #56	@ 0x38
 800b27a:	2900      	cmp	r1, #0
 800b27c:	d04b      	beq.n	800b316 <rmw_publish+0xa6>
 800b27e:	4604      	mov	r4, r0
 800b280:	6800      	ldr	r0, [r0, #0]
 800b282:	f000 fd0d 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 800b286:	2800      	cmp	r0, #0
 800b288:	d045      	beq.n	800b316 <rmw_publish+0xa6>
 800b28a:	6866      	ldr	r6, [r4, #4]
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	d042      	beq.n	800b316 <rmw_publish+0xa6>
 800b290:	69b4      	ldr	r4, [r6, #24]
 800b292:	4628      	mov	r0, r5
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	4798      	blx	r3
 800b298:	69f3      	ldr	r3, [r6, #28]
 800b29a:	9005      	str	r0, [sp, #20]
 800b29c:	b113      	cbz	r3, 800b2a4 <rmw_publish+0x34>
 800b29e:	a805      	add	r0, sp, #20
 800b2a0:	4798      	blx	r3
 800b2a2:	9805      	ldr	r0, [sp, #20]
 800b2a4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	9000      	str	r0, [sp, #0]
 800b2ac:	6972      	ldr	r2, [r6, #20]
 800b2ae:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b2b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b2b4:	ab06      	add	r3, sp, #24
 800b2b6:	f004 fbf5 	bl	800faa4 <uxr_prepare_output_stream>
 800b2ba:	b1d8      	cbz	r0, 800b2f4 <rmw_publish+0x84>
 800b2bc:	68a3      	ldr	r3, [r4, #8]
 800b2be:	a906      	add	r1, sp, #24
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	4798      	blx	r3
 800b2c4:	6a33      	ldr	r3, [r6, #32]
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	b10b      	cbz	r3, 800b2ce <rmw_publish+0x5e>
 800b2ca:	a806      	add	r0, sp, #24
 800b2cc:	4798      	blx	r3
 800b2ce:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b2d2:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	6910      	ldr	r0, [r2, #16]
 800b2da:	d021      	beq.n	800b320 <rmw_publish+0xb0>
 800b2dc:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b2de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b2e2:	f003 f96d 	bl	800e5c0 <uxr_run_session_until_confirm_delivery>
 800b2e6:	4004      	ands	r4, r0
 800b2e8:	b2e4      	uxtb	r4, r4
 800b2ea:	f084 0001 	eor.w	r0, r4, #1
 800b2ee:	b2c0      	uxtb	r0, r0
 800b2f0:	b00e      	add	sp, #56	@ 0x38
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b2f8:	6918      	ldr	r0, [r3, #16]
 800b2fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b32c <rmw_publish+0xbc>)
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	9b05      	ldr	r3, [sp, #20]
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	9602      	str	r6, [sp, #8]
 800b304:	6972      	ldr	r2, [r6, #20]
 800b306:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b308:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b30c:	ab06      	add	r3, sp, #24
 800b30e:	f004 fbf9 	bl	800fb04 <uxr_prepare_output_stream_fragmented>
 800b312:	2800      	cmp	r0, #0
 800b314:	d1d2      	bne.n	800b2bc <rmw_publish+0x4c>
 800b316:	2001      	movs	r0, #1
 800b318:	b00e      	add	sp, #56	@ 0x38
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	2001      	movs	r0, #1
 800b31e:	4770      	bx	lr
 800b320:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b324:	f002 fdb4 	bl	800de90 <uxr_flash_output_streams>
 800b328:	e7df      	b.n	800b2ea <rmw_publish+0x7a>
 800b32a:	bf00      	nop
 800b32c:	0800b269 	.word	0x0800b269

0800b330 <rmw_create_publisher>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	b087      	sub	sp, #28
 800b336:	2800      	cmp	r0, #0
 800b338:	f000 80c9 	beq.w	800b4ce <rmw_create_publisher+0x19e>
 800b33c:	460f      	mov	r7, r1
 800b33e:	2900      	cmp	r1, #0
 800b340:	f000 80c5 	beq.w	800b4ce <rmw_create_publisher+0x19e>
 800b344:	4604      	mov	r4, r0
 800b346:	6800      	ldr	r0, [r0, #0]
 800b348:	4615      	mov	r5, r2
 800b34a:	461e      	mov	r6, r3
 800b34c:	f000 fca8 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 800b350:	2800      	cmp	r0, #0
 800b352:	f000 80bc 	beq.w	800b4ce <rmw_create_publisher+0x19e>
 800b356:	2d00      	cmp	r5, #0
 800b358:	f000 80b9 	beq.w	800b4ce <rmw_create_publisher+0x19e>
 800b35c:	782b      	ldrb	r3, [r5, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 80b5 	beq.w	800b4ce <rmw_create_publisher+0x19e>
 800b364:	2e00      	cmp	r6, #0
 800b366:	f000 80b2 	beq.w	800b4ce <rmw_create_publisher+0x19e>
 800b36a:	485c      	ldr	r0, [pc, #368]	@ (800b4dc <rmw_create_publisher+0x1ac>)
 800b36c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b370:	f009 fa04 	bl	801477c <get_memory>
 800b374:	2800      	cmp	r0, #0
 800b376:	f000 80aa 	beq.w	800b4ce <rmw_create_publisher+0x19e>
 800b37a:	6884      	ldr	r4, [r0, #8]
 800b37c:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b380:	f009 fa82 	bl	8014888 <rmw_get_implementation_identifier>
 800b384:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b388:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b38c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b390:	4628      	mov	r0, r5
 800b392:	f7f4 ff9d 	bl	80002d0 <strlen>
 800b396:	3001      	adds	r0, #1
 800b398:	283c      	cmp	r0, #60	@ 0x3c
 800b39a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800b39e:	f200 808f 	bhi.w	800b4c0 <rmw_create_publisher+0x190>
 800b3a2:	4a4f      	ldr	r2, [pc, #316]	@ (800b4e0 <rmw_create_publisher+0x1b0>)
 800b3a4:	462b      	mov	r3, r5
 800b3a6:	213c      	movs	r1, #60	@ 0x3c
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	f00d f883 	bl	80184b4 <sniprintf>
 800b3ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b3b2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800b3ba:	2250      	movs	r2, #80	@ 0x50
 800b3bc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b3c0:	f00d fac7 	bl	8018952 <memcpy>
 800b3c4:	7a33      	ldrb	r3, [r6, #8]
 800b3c6:	4947      	ldr	r1, [pc, #284]	@ (800b4e4 <rmw_create_publisher+0x1b4>)
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3ce:	bf0c      	ite	eq
 800b3d0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800b3d4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800b3d8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f000 fc6b 	bl	800bcbc <get_message_typesupport_handle>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d06a      	beq.n	800b4c0 <rmw_create_publisher+0x190>
 800b3ea:	6842      	ldr	r2, [r0, #4]
 800b3ec:	61a2      	str	r2, [r4, #24]
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	d066      	beq.n	800b4c0 <rmw_create_publisher+0x190>
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4633      	mov	r3, r6
 800b3f6:	4648      	mov	r0, r9
 800b3f8:	f009 fca2 	bl	8014d40 <create_topic>
 800b3fc:	6260      	str	r0, [r4, #36]	@ 0x24
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d062      	beq.n	800b4c8 <rmw_create_publisher+0x198>
 800b402:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b40a:	2103      	movs	r1, #3
 800b40c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800b410:	1c42      	adds	r2, r0, #1
 800b412:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800b416:	f002 fb05 	bl	800da24 <uxr_object_id>
 800b41a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800b41e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b422:	6120      	str	r0, [r4, #16]
 800b424:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800b428:	6910      	ldr	r0, [r2, #16]
 800b42a:	2506      	movs	r5, #6
 800b42c:	9500      	str	r5, [sp, #0]
 800b42e:	6819      	ldr	r1, [r3, #0]
 800b430:	6922      	ldr	r2, [r4, #16]
 800b432:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b436:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b43a:	f002 f909 	bl	800d650 <uxr_buffer_create_publisher_bin>
 800b43e:	4602      	mov	r2, r0
 800b440:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b444:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b448:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b44c:	f000 fba2 	bl	800bb94 <run_xrce_session>
 800b450:	b3b0      	cbz	r0, 800b4c0 <rmw_create_publisher+0x190>
 800b452:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b45a:	2105      	movs	r1, #5
 800b45c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800b460:	1c42      	adds	r2, r0, #1
 800b462:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800b466:	f002 fadd 	bl	800da24 <uxr_object_id>
 800b46a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b46e:	6160      	str	r0, [r4, #20]
 800b470:	4631      	mov	r1, r6
 800b472:	af04      	add	r7, sp, #16
 800b474:	691e      	ldr	r6, [r3, #16]
 800b476:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b47a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800b47e:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800b482:	4638      	mov	r0, r7
 800b484:	f000 fba6 	bl	800bbd4 <convert_qos_profile>
 800b488:	9503      	str	r5, [sp, #12]
 800b48a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b48e:	9001      	str	r0, [sp, #4]
 800b490:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b494:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800b49e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b4a2:	f8da 1000 	ldr.w	r1, [sl]
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f002 f930 	bl	800d70c <uxr_buffer_create_datawriter_bin>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b4b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b4b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b4ba:	f000 fb6b 	bl	800bb94 <run_xrce_session>
 800b4be:	b940      	cbnz	r0, 800b4d2 <rmw_create_publisher+0x1a2>
 800b4c0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b4c2:	b108      	cbz	r0, 800b4c8 <rmw_create_publisher+0x198>
 800b4c4:	f000 fa5e 	bl	800b984 <rmw_uxrce_fini_topic_memory>
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	f000 fa03 	bl	800b8d4 <rmw_uxrce_fini_publisher_memory>
 800b4ce:	f04f 0800 	mov.w	r8, #0
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	b007      	add	sp, #28
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	bf00      	nop
 800b4dc:	2000d548 	.word	0x2000d548
 800b4e0:	08019894 	.word	0x08019894
 800b4e4:	08019860 	.word	0x08019860

0800b4e8 <rmw_publisher_get_actual_qos>:
 800b4e8:	b508      	push	{r3, lr}
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	b140      	cbz	r0, 800b500 <rmw_publisher_get_actual_qos+0x18>
 800b4ee:	4608      	mov	r0, r1
 800b4f0:	b131      	cbz	r1, 800b500 <rmw_publisher_get_actual_qos+0x18>
 800b4f2:	6859      	ldr	r1, [r3, #4]
 800b4f4:	2250      	movs	r2, #80	@ 0x50
 800b4f6:	3128      	adds	r1, #40	@ 0x28
 800b4f8:	f00d fa2b 	bl	8018952 <memcpy>
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	bd08      	pop	{r3, pc}
 800b500:	200b      	movs	r0, #11
 800b502:	bd08      	pop	{r3, pc}

0800b504 <rmw_destroy_publisher>:
 800b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	b128      	cbz	r0, 800b516 <rmw_destroy_publisher+0x12>
 800b50a:	4604      	mov	r4, r0
 800b50c:	6800      	ldr	r0, [r0, #0]
 800b50e:	460d      	mov	r5, r1
 800b510:	f000 fbc6 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 800b514:	b918      	cbnz	r0, 800b51e <rmw_destroy_publisher+0x1a>
 800b516:	2401      	movs	r4, #1
 800b518:	4620      	mov	r0, r4
 800b51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51e:	6863      	ldr	r3, [r4, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d0f8      	beq.n	800b516 <rmw_destroy_publisher+0x12>
 800b524:	2d00      	cmp	r5, #0
 800b526:	d0f6      	beq.n	800b516 <rmw_destroy_publisher+0x12>
 800b528:	6828      	ldr	r0, [r5, #0]
 800b52a:	f000 fbb9 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d0f1      	beq.n	800b516 <rmw_destroy_publisher+0x12>
 800b532:	686c      	ldr	r4, [r5, #4]
 800b534:	2c00      	cmp	r4, #0
 800b536:	d0ee      	beq.n	800b516 <rmw_destroy_publisher+0x12>
 800b538:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b53a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b53e:	f009 fc53 	bl	8014de8 <destroy_topic>
 800b542:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b546:	6962      	ldr	r2, [r4, #20]
 800b548:	6918      	ldr	r0, [r3, #16]
 800b54a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b54e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	f001 ffcc 	bl	800d4f0 <uxr_buffer_delete_entity>
 800b558:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b55c:	6922      	ldr	r2, [r4, #16]
 800b55e:	4680      	mov	r8, r0
 800b560:	6918      	ldr	r0, [r3, #16]
 800b562:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b566:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b56a:	6819      	ldr	r1, [r3, #0]
 800b56c:	f001 ffc0 	bl	800d4f0 <uxr_buffer_delete_entity>
 800b570:	4606      	mov	r6, r0
 800b572:	6938      	ldr	r0, [r7, #16]
 800b574:	4642      	mov	r2, r8
 800b576:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b57a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b57e:	f000 fb09 	bl	800bb94 <run_xrce_session>
 800b582:	4604      	mov	r4, r0
 800b584:	6938      	ldr	r0, [r7, #16]
 800b586:	4632      	mov	r2, r6
 800b588:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b58c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b590:	f000 fb00 	bl	800bb94 <run_xrce_session>
 800b594:	4004      	ands	r4, r0
 800b596:	f084 0401 	eor.w	r4, r4, #1
 800b59a:	b2e4      	uxtb	r4, r4
 800b59c:	4628      	mov	r0, r5
 800b59e:	0064      	lsls	r4, r4, #1
 800b5a0:	f000 f998 	bl	800b8d4 <rmw_uxrce_fini_publisher_memory>
 800b5a4:	e7b8      	b.n	800b518 <rmw_destroy_publisher+0x14>
 800b5a6:	bf00      	nop

0800b5a8 <rmw_uxrce_transport_init>:
 800b5a8:	b508      	push	{r3, lr}
 800b5aa:	b108      	cbz	r0, 800b5b0 <rmw_uxrce_transport_init+0x8>
 800b5ac:	f100 0210 	add.w	r2, r0, #16
 800b5b0:	b139      	cbz	r1, 800b5c2 <rmw_uxrce_transport_init+0x1a>
 800b5b2:	6949      	ldr	r1, [r1, #20]
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f002 f9fd 	bl	800d9b4 <uxr_init_custom_transport>
 800b5ba:	f080 0001 	eor.w	r0, r0, #1
 800b5be:	b2c0      	uxtb	r0, r0
 800b5c0:	bd08      	pop	{r3, pc}
 800b5c2:	4b04      	ldr	r3, [pc, #16]	@ (800b5d4 <rmw_uxrce_transport_init+0x2c>)
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	6859      	ldr	r1, [r3, #4]
 800b5c8:	f002 f9f4 	bl	800d9b4 <uxr_init_custom_transport>
 800b5cc:	f080 0001 	eor.w	r0, r0, #1
 800b5d0:	b2c0      	uxtb	r0, r0
 800b5d2:	bd08      	pop	{r3, pc}
 800b5d4:	2000a258 	.word	0x2000a258

0800b5d8 <rmw_uxrce_init_service_memory>:
 800b5d8:	b1e2      	cbz	r2, 800b614 <rmw_uxrce_init_service_memory+0x3c>
 800b5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	7b05      	ldrb	r5, [r0, #12]
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	b9ad      	cbnz	r5, 800b610 <rmw_uxrce_init_service_memory+0x38>
 800b5e4:	23c8      	movs	r3, #200	@ 0xc8
 800b5e6:	e9c0 5500 	strd	r5, r5, [r0]
 800b5ea:	6083      	str	r3, [r0, #8]
 800b5ec:	f240 1301 	movw	r3, #257	@ 0x101
 800b5f0:	4617      	mov	r7, r2
 800b5f2:	8183      	strh	r3, [r0, #12]
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	46a8      	mov	r8, r5
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	3501      	adds	r5, #1
 800b5fe:	f009 f8cd 	bl	801479c <put_memory>
 800b602:	42af      	cmp	r7, r5
 800b604:	60a4      	str	r4, [r4, #8]
 800b606:	f884 800c 	strb.w	r8, [r4, #12]
 800b60a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b60e:	d1f3      	bne.n	800b5f8 <rmw_uxrce_init_service_memory+0x20>
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop

0800b618 <rmw_uxrce_init_client_memory>:
 800b618:	b1e2      	cbz	r2, 800b654 <rmw_uxrce_init_client_memory+0x3c>
 800b61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61e:	7b05      	ldrb	r5, [r0, #12]
 800b620:	4606      	mov	r6, r0
 800b622:	b9ad      	cbnz	r5, 800b650 <rmw_uxrce_init_client_memory+0x38>
 800b624:	23c8      	movs	r3, #200	@ 0xc8
 800b626:	e9c0 5500 	strd	r5, r5, [r0]
 800b62a:	6083      	str	r3, [r0, #8]
 800b62c:	f240 1301 	movw	r3, #257	@ 0x101
 800b630:	4617      	mov	r7, r2
 800b632:	8183      	strh	r3, [r0, #12]
 800b634:	460c      	mov	r4, r1
 800b636:	46a8      	mov	r8, r5
 800b638:	4621      	mov	r1, r4
 800b63a:	4630      	mov	r0, r6
 800b63c:	3501      	adds	r5, #1
 800b63e:	f009 f8ad 	bl	801479c <put_memory>
 800b642:	42af      	cmp	r7, r5
 800b644:	60a4      	str	r4, [r4, #8]
 800b646:	f884 800c 	strb.w	r8, [r4, #12]
 800b64a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b64e:	d1f3      	bne.n	800b638 <rmw_uxrce_init_client_memory+0x20>
 800b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop

0800b658 <rmw_uxrce_init_publisher_memory>:
 800b658:	b1e2      	cbz	r2, 800b694 <rmw_uxrce_init_publisher_memory+0x3c>
 800b65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65e:	7b05      	ldrb	r5, [r0, #12]
 800b660:	4606      	mov	r6, r0
 800b662:	b9ad      	cbnz	r5, 800b690 <rmw_uxrce_init_publisher_memory+0x38>
 800b664:	23d8      	movs	r3, #216	@ 0xd8
 800b666:	e9c0 5500 	strd	r5, r5, [r0]
 800b66a:	6083      	str	r3, [r0, #8]
 800b66c:	f240 1301 	movw	r3, #257	@ 0x101
 800b670:	4617      	mov	r7, r2
 800b672:	8183      	strh	r3, [r0, #12]
 800b674:	460c      	mov	r4, r1
 800b676:	46a8      	mov	r8, r5
 800b678:	4621      	mov	r1, r4
 800b67a:	4630      	mov	r0, r6
 800b67c:	3501      	adds	r5, #1
 800b67e:	f009 f88d 	bl	801479c <put_memory>
 800b682:	42af      	cmp	r7, r5
 800b684:	60a4      	str	r4, [r4, #8]
 800b686:	f884 800c 	strb.w	r8, [r4, #12]
 800b68a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b68e:	d1f3      	bne.n	800b678 <rmw_uxrce_init_publisher_memory+0x20>
 800b690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop

0800b698 <rmw_uxrce_init_subscription_memory>:
 800b698:	b1e2      	cbz	r2, 800b6d4 <rmw_uxrce_init_subscription_memory+0x3c>
 800b69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69e:	7b05      	ldrb	r5, [r0, #12]
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	b9ad      	cbnz	r5, 800b6d0 <rmw_uxrce_init_subscription_memory+0x38>
 800b6a4:	23d8      	movs	r3, #216	@ 0xd8
 800b6a6:	e9c0 5500 	strd	r5, r5, [r0]
 800b6aa:	6083      	str	r3, [r0, #8]
 800b6ac:	f240 1301 	movw	r3, #257	@ 0x101
 800b6b0:	4617      	mov	r7, r2
 800b6b2:	8183      	strh	r3, [r0, #12]
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	46a8      	mov	r8, r5
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	3501      	adds	r5, #1
 800b6be:	f009 f86d 	bl	801479c <put_memory>
 800b6c2:	42af      	cmp	r7, r5
 800b6c4:	60a4      	str	r4, [r4, #8]
 800b6c6:	f884 800c 	strb.w	r8, [r4, #12]
 800b6ca:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b6ce:	d1f3      	bne.n	800b6b8 <rmw_uxrce_init_subscription_memory+0x20>
 800b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop

0800b6d8 <rmw_uxrce_init_node_memory>:
 800b6d8:	b1e2      	cbz	r2, 800b714 <rmw_uxrce_init_node_memory+0x3c>
 800b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	7b05      	ldrb	r5, [r0, #12]
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	b9ad      	cbnz	r5, 800b710 <rmw_uxrce_init_node_memory+0x38>
 800b6e4:	23a4      	movs	r3, #164	@ 0xa4
 800b6e6:	e9c0 5500 	strd	r5, r5, [r0]
 800b6ea:	6083      	str	r3, [r0, #8]
 800b6ec:	f240 1301 	movw	r3, #257	@ 0x101
 800b6f0:	4617      	mov	r7, r2
 800b6f2:	8183      	strh	r3, [r0, #12]
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	46a8      	mov	r8, r5
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	3501      	adds	r5, #1
 800b6fe:	f009 f84d 	bl	801479c <put_memory>
 800b702:	42af      	cmp	r7, r5
 800b704:	60a4      	str	r4, [r4, #8]
 800b706:	f884 800c 	strb.w	r8, [r4, #12]
 800b70a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b70e:	d1f3      	bne.n	800b6f8 <rmw_uxrce_init_node_memory+0x20>
 800b710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop

0800b718 <rmw_uxrce_init_session_memory>:
 800b718:	b1ea      	cbz	r2, 800b756 <rmw_uxrce_init_session_memory+0x3e>
 800b71a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b71e:	7b05      	ldrb	r5, [r0, #12]
 800b720:	4606      	mov	r6, r0
 800b722:	b9b5      	cbnz	r5, 800b752 <rmw_uxrce_init_session_memory+0x3a>
 800b724:	e9c0 5500 	strd	r5, r5, [r0]
 800b728:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800b72c:	f240 1301 	movw	r3, #257	@ 0x101
 800b730:	4617      	mov	r7, r2
 800b732:	f8c0 8008 	str.w	r8, [r0, #8]
 800b736:	460c      	mov	r4, r1
 800b738:	8183      	strh	r3, [r0, #12]
 800b73a:	46a9      	mov	r9, r5
 800b73c:	4621      	mov	r1, r4
 800b73e:	4630      	mov	r0, r6
 800b740:	3501      	adds	r5, #1
 800b742:	f009 f82b 	bl	801479c <put_memory>
 800b746:	42af      	cmp	r7, r5
 800b748:	60a4      	str	r4, [r4, #8]
 800b74a:	f884 900c 	strb.w	r9, [r4, #12]
 800b74e:	4444      	add	r4, r8
 800b750:	d1f4      	bne.n	800b73c <rmw_uxrce_init_session_memory+0x24>
 800b752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b756:	4770      	bx	lr

0800b758 <rmw_uxrce_init_topic_memory>:
 800b758:	b1e2      	cbz	r2, 800b794 <rmw_uxrce_init_topic_memory+0x3c>
 800b75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b75e:	7b05      	ldrb	r5, [r0, #12]
 800b760:	4606      	mov	r6, r0
 800b762:	b9ad      	cbnz	r5, 800b790 <rmw_uxrce_init_topic_memory+0x38>
 800b764:	231c      	movs	r3, #28
 800b766:	e9c0 5500 	strd	r5, r5, [r0]
 800b76a:	6083      	str	r3, [r0, #8]
 800b76c:	f240 1301 	movw	r3, #257	@ 0x101
 800b770:	4617      	mov	r7, r2
 800b772:	8183      	strh	r3, [r0, #12]
 800b774:	460c      	mov	r4, r1
 800b776:	46a8      	mov	r8, r5
 800b778:	4621      	mov	r1, r4
 800b77a:	4630      	mov	r0, r6
 800b77c:	3501      	adds	r5, #1
 800b77e:	f009 f80d 	bl	801479c <put_memory>
 800b782:	42af      	cmp	r7, r5
 800b784:	60a4      	str	r4, [r4, #8]
 800b786:	f884 800c 	strb.w	r8, [r4, #12]
 800b78a:	f104 041c 	add.w	r4, r4, #28
 800b78e:	d1f3      	bne.n	800b778 <rmw_uxrce_init_topic_memory+0x20>
 800b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop

0800b798 <rmw_uxrce_init_static_input_buffer_memory>:
 800b798:	b1ea      	cbz	r2, 800b7d6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79e:	7b05      	ldrb	r5, [r0, #12]
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	b9b5      	cbnz	r5, 800b7d2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b7a4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800b7a8:	e9c0 5500 	strd	r5, r5, [r0]
 800b7ac:	6083      	str	r3, [r0, #8]
 800b7ae:	f240 1301 	movw	r3, #257	@ 0x101
 800b7b2:	4617      	mov	r7, r2
 800b7b4:	8183      	strh	r3, [r0, #12]
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	46a8      	mov	r8, r5
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4630      	mov	r0, r6
 800b7be:	3501      	adds	r5, #1
 800b7c0:	f008 ffec 	bl	801479c <put_memory>
 800b7c4:	42af      	cmp	r7, r5
 800b7c6:	60a4      	str	r4, [r4, #8]
 800b7c8:	f884 800c 	strb.w	r8, [r4, #12]
 800b7cc:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800b7d0:	d1f3      	bne.n	800b7ba <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d6:	4770      	bx	lr

0800b7d8 <rmw_uxrce_init_init_options_impl_memory>:
 800b7d8:	b1e2      	cbz	r2, 800b814 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7de:	7b05      	ldrb	r5, [r0, #12]
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	b9ad      	cbnz	r5, 800b810 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b7e4:	232c      	movs	r3, #44	@ 0x2c
 800b7e6:	e9c0 5500 	strd	r5, r5, [r0]
 800b7ea:	6083      	str	r3, [r0, #8]
 800b7ec:	f240 1301 	movw	r3, #257	@ 0x101
 800b7f0:	4617      	mov	r7, r2
 800b7f2:	8183      	strh	r3, [r0, #12]
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	46a8      	mov	r8, r5
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	f008 ffcd 	bl	801479c <put_memory>
 800b802:	42af      	cmp	r7, r5
 800b804:	60a4      	str	r4, [r4, #8]
 800b806:	f884 800c 	strb.w	r8, [r4, #12]
 800b80a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800b80e:	d1f3      	bne.n	800b7f8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop

0800b818 <rmw_uxrce_init_wait_set_memory>:
 800b818:	b1e2      	cbz	r2, 800b854 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81e:	7b05      	ldrb	r5, [r0, #12]
 800b820:	4606      	mov	r6, r0
 800b822:	b9ad      	cbnz	r5, 800b850 <rmw_uxrce_init_wait_set_memory+0x38>
 800b824:	231c      	movs	r3, #28
 800b826:	e9c0 5500 	strd	r5, r5, [r0]
 800b82a:	6083      	str	r3, [r0, #8]
 800b82c:	f240 1301 	movw	r3, #257	@ 0x101
 800b830:	4617      	mov	r7, r2
 800b832:	8183      	strh	r3, [r0, #12]
 800b834:	460c      	mov	r4, r1
 800b836:	46a8      	mov	r8, r5
 800b838:	4621      	mov	r1, r4
 800b83a:	4630      	mov	r0, r6
 800b83c:	3501      	adds	r5, #1
 800b83e:	f008 ffad 	bl	801479c <put_memory>
 800b842:	42af      	cmp	r7, r5
 800b844:	60a4      	str	r4, [r4, #8]
 800b846:	f884 800c 	strb.w	r8, [r4, #12]
 800b84a:	f104 041c 	add.w	r4, r4, #28
 800b84e:	d1f3      	bne.n	800b838 <rmw_uxrce_init_wait_set_memory+0x20>
 800b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop

0800b858 <rmw_uxrce_init_guard_condition_memory>:
 800b858:	b1e2      	cbz	r2, 800b894 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85e:	7b05      	ldrb	r5, [r0, #12]
 800b860:	4606      	mov	r6, r0
 800b862:	b9ad      	cbnz	r5, 800b890 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b864:	2320      	movs	r3, #32
 800b866:	e9c0 5500 	strd	r5, r5, [r0]
 800b86a:	6083      	str	r3, [r0, #8]
 800b86c:	f240 1301 	movw	r3, #257	@ 0x101
 800b870:	4617      	mov	r7, r2
 800b872:	8183      	strh	r3, [r0, #12]
 800b874:	460c      	mov	r4, r1
 800b876:	46a8      	mov	r8, r5
 800b878:	4621      	mov	r1, r4
 800b87a:	4630      	mov	r0, r6
 800b87c:	3501      	adds	r5, #1
 800b87e:	f008 ff8d 	bl	801479c <put_memory>
 800b882:	42af      	cmp	r7, r5
 800b884:	60a4      	str	r4, [r4, #8]
 800b886:	f884 800c 	strb.w	r8, [r4, #12]
 800b88a:	f104 0420 	add.w	r4, r4, #32
 800b88e:	d1f3      	bne.n	800b878 <rmw_uxrce_init_guard_condition_memory+0x20>
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop

0800b898 <rmw_uxrce_fini_session_memory>:
 800b898:	4601      	mov	r1, r0
 800b89a:	4801      	ldr	r0, [pc, #4]	@ (800b8a0 <rmw_uxrce_fini_session_memory+0x8>)
 800b89c:	f008 bf7e 	b.w	801479c <put_memory>
 800b8a0:	2000ebb8 	.word	0x2000ebb8

0800b8a4 <rmw_uxrce_fini_node_memory>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	6800      	ldr	r0, [r0, #0]
 800b8aa:	b128      	cbz	r0, 800b8b8 <rmw_uxrce_fini_node_memory+0x14>
 800b8ac:	4b07      	ldr	r3, [pc, #28]	@ (800b8cc <rmw_uxrce_fini_node_memory+0x28>)
 800b8ae:	6819      	ldr	r1, [r3, #0]
 800b8b0:	f7f4 fcae 	bl	8000210 <strcmp>
 800b8b4:	b940      	cbnz	r0, 800b8c8 <rmw_uxrce_fini_node_memory+0x24>
 800b8b6:	6020      	str	r0, [r4, #0]
 800b8b8:	6861      	ldr	r1, [r4, #4]
 800b8ba:	b129      	cbz	r1, 800b8c8 <rmw_uxrce_fini_node_memory+0x24>
 800b8bc:	2500      	movs	r5, #0
 800b8be:	4804      	ldr	r0, [pc, #16]	@ (800b8d0 <rmw_uxrce_fini_node_memory+0x2c>)
 800b8c0:	610d      	str	r5, [r1, #16]
 800b8c2:	f008 ff6b 	bl	801479c <put_memory>
 800b8c6:	6065      	str	r5, [r4, #4]
 800b8c8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ca:	bf00      	nop
 800b8cc:	0801a4d4 	.word	0x0801a4d4
 800b8d0:	2000d5fc 	.word	0x2000d5fc

0800b8d4 <rmw_uxrce_fini_publisher_memory>:
 800b8d4:	b510      	push	{r4, lr}
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	6800      	ldr	r0, [r0, #0]
 800b8da:	b128      	cbz	r0, 800b8e8 <rmw_uxrce_fini_publisher_memory+0x14>
 800b8dc:	4b06      	ldr	r3, [pc, #24]	@ (800b8f8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b8de:	6819      	ldr	r1, [r3, #0]
 800b8e0:	f7f4 fc96 	bl	8000210 <strcmp>
 800b8e4:	b938      	cbnz	r0, 800b8f6 <rmw_uxrce_fini_publisher_memory+0x22>
 800b8e6:	6020      	str	r0, [r4, #0]
 800b8e8:	6861      	ldr	r1, [r4, #4]
 800b8ea:	b121      	cbz	r1, 800b8f6 <rmw_uxrce_fini_publisher_memory+0x22>
 800b8ec:	4803      	ldr	r0, [pc, #12]	@ (800b8fc <rmw_uxrce_fini_publisher_memory+0x28>)
 800b8ee:	f008 ff55 	bl	801479c <put_memory>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6063      	str	r3, [r4, #4]
 800b8f6:	bd10      	pop	{r4, pc}
 800b8f8:	0801a4d4 	.word	0x0801a4d4
 800b8fc:	2000d548 	.word	0x2000d548

0800b900 <rmw_uxrce_fini_subscription_memory>:
 800b900:	b510      	push	{r4, lr}
 800b902:	4604      	mov	r4, r0
 800b904:	6800      	ldr	r0, [r0, #0]
 800b906:	b128      	cbz	r0, 800b914 <rmw_uxrce_fini_subscription_memory+0x14>
 800b908:	4b06      	ldr	r3, [pc, #24]	@ (800b924 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b90a:	6819      	ldr	r1, [r3, #0]
 800b90c:	f7f4 fc80 	bl	8000210 <strcmp>
 800b910:	b938      	cbnz	r0, 800b922 <rmw_uxrce_fini_subscription_memory+0x22>
 800b912:	6020      	str	r0, [r4, #0]
 800b914:	6861      	ldr	r1, [r4, #4]
 800b916:	b121      	cbz	r1, 800b922 <rmw_uxrce_fini_subscription_memory+0x22>
 800b918:	4803      	ldr	r0, [pc, #12]	@ (800b928 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b91a:	f008 ff3f 	bl	801479c <put_memory>
 800b91e:	2300      	movs	r3, #0
 800b920:	6063      	str	r3, [r4, #4]
 800b922:	bd10      	pop	{r4, pc}
 800b924:	0801a4d4 	.word	0x0801a4d4
 800b928:	2000ccc8 	.word	0x2000ccc8

0800b92c <rmw_uxrce_fini_service_memory>:
 800b92c:	b510      	push	{r4, lr}
 800b92e:	4604      	mov	r4, r0
 800b930:	6800      	ldr	r0, [r0, #0]
 800b932:	b128      	cbz	r0, 800b940 <rmw_uxrce_fini_service_memory+0x14>
 800b934:	4b06      	ldr	r3, [pc, #24]	@ (800b950 <rmw_uxrce_fini_service_memory+0x24>)
 800b936:	6819      	ldr	r1, [r3, #0]
 800b938:	f7f4 fc6a 	bl	8000210 <strcmp>
 800b93c:	b938      	cbnz	r0, 800b94e <rmw_uxrce_fini_service_memory+0x22>
 800b93e:	6020      	str	r0, [r4, #0]
 800b940:	6861      	ldr	r1, [r4, #4]
 800b942:	b121      	cbz	r1, 800b94e <rmw_uxrce_fini_service_memory+0x22>
 800b944:	4803      	ldr	r0, [pc, #12]	@ (800b954 <rmw_uxrce_fini_service_memory+0x28>)
 800b946:	f008 ff29 	bl	801479c <put_memory>
 800b94a:	2300      	movs	r3, #0
 800b94c:	6063      	str	r3, [r4, #4]
 800b94e:	bd10      	pop	{r4, pc}
 800b950:	0801a4d4 	.word	0x0801a4d4
 800b954:	2000c880 	.word	0x2000c880

0800b958 <rmw_uxrce_fini_client_memory>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	4604      	mov	r4, r0
 800b95c:	6800      	ldr	r0, [r0, #0]
 800b95e:	b128      	cbz	r0, 800b96c <rmw_uxrce_fini_client_memory+0x14>
 800b960:	4b06      	ldr	r3, [pc, #24]	@ (800b97c <rmw_uxrce_fini_client_memory+0x24>)
 800b962:	6819      	ldr	r1, [r3, #0]
 800b964:	f7f4 fc54 	bl	8000210 <strcmp>
 800b968:	b938      	cbnz	r0, 800b97a <rmw_uxrce_fini_client_memory+0x22>
 800b96a:	6020      	str	r0, [r4, #0]
 800b96c:	6861      	ldr	r1, [r4, #4]
 800b96e:	b121      	cbz	r1, 800b97a <rmw_uxrce_fini_client_memory+0x22>
 800b970:	4803      	ldr	r0, [pc, #12]	@ (800b980 <rmw_uxrce_fini_client_memory+0x28>)
 800b972:	f008 ff13 	bl	801479c <put_memory>
 800b976:	2300      	movs	r3, #0
 800b978:	6063      	str	r3, [r4, #4]
 800b97a:	bd10      	pop	{r4, pc}
 800b97c:	0801a4d4 	.word	0x0801a4d4
 800b980:	2000c7a8 	.word	0x2000c7a8

0800b984 <rmw_uxrce_fini_topic_memory>:
 800b984:	b510      	push	{r4, lr}
 800b986:	4604      	mov	r4, r0
 800b988:	4621      	mov	r1, r4
 800b98a:	4803      	ldr	r0, [pc, #12]	@ (800b998 <rmw_uxrce_fini_topic_memory+0x14>)
 800b98c:	f008 ff06 	bl	801479c <put_memory>
 800b990:	2300      	movs	r3, #0
 800b992:	61a3      	str	r3, [r4, #24]
 800b994:	bd10      	pop	{r4, pc}
 800b996:	bf00      	nop
 800b998:	2000c6cc 	.word	0x2000c6cc

0800b99c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b99c:	b082      	sub	sp, #8
 800b99e:	b530      	push	{r4, r5, lr}
 800b9a0:	4929      	ldr	r1, [pc, #164]	@ (800ba48 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800b9a2:	ac03      	add	r4, sp, #12
 800b9a4:	e884 000c 	stmia.w	r4, {r2, r3}
 800b9a8:	680c      	ldr	r4, [r1, #0]
 800b9aa:	461d      	mov	r5, r3
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	2c00      	cmp	r4, #0
 800b9b0:	d043      	beq.n	800ba3a <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	6883      	ldr	r3, [r0, #8]
 800b9b8:	6840      	ldr	r0, [r0, #4]
 800b9ba:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	bf08      	it	eq
 800b9c2:	3101      	addeq	r1, #1
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d1f6      	bne.n	800b9b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800b9c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d027      	beq.n	800ba20 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800b9d0:	d906      	bls.n	800b9e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d004      	beq.n	800b9e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b9d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9da:	2000      	movs	r0, #0
 800b9dc:	b002      	add	sp, #8
 800b9de:	4770      	bx	lr
 800b9e0:	b1fd      	cbz	r5, 800ba22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b9e2:	428d      	cmp	r5, r1
 800b9e4:	d81d      	bhi.n	800ba22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b9e6:	2c00      	cmp	r4, #0
 800b9e8:	d0f5      	beq.n	800b9d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	f04f 3cff 	mov.w	ip, #4294967295
 800b9f0:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800b9f4:	e001      	b.n	800b9fa <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800b9f6:	6864      	ldr	r4, [r4, #4]
 800b9f8:	b1dc      	cbz	r4, 800ba32 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800b9fa:	68a3      	ldr	r3, [r4, #8]
 800b9fc:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800ba00:	428a      	cmp	r2, r1
 800ba02:	d1f8      	bne.n	800b9f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ba04:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800ba08:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ba0c:	4561      	cmp	r1, ip
 800ba0e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ba12:	eb73 0e05 	sbcs.w	lr, r3, r5
 800ba16:	daee      	bge.n	800b9f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ba18:	468c      	mov	ip, r1
 800ba1a:	461d      	mov	r5, r3
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	e7ea      	b.n	800b9f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ba20:	b92d      	cbnz	r5, 800ba2e <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800ba22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba26:	4808      	ldr	r0, [pc, #32]	@ (800ba48 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800ba28:	b002      	add	sp, #8
 800ba2a:	f008 bea7 	b.w	801477c <get_memory>
 800ba2e:	428d      	cmp	r5, r1
 800ba30:	d8f7      	bhi.n	800ba22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ba32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba36:	b002      	add	sp, #8
 800ba38:	4770      	bx	lr
 800ba3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d0ef      	beq.n	800ba22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ba42:	d9ee      	bls.n	800ba22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ba44:	4621      	mov	r1, r4
 800ba46:	e7c4      	b.n	800b9d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800ba48:	2000c518 	.word	0x2000c518

0800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ba4c:	4b11      	ldr	r3, [pc, #68]	@ (800ba94 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	b1eb      	cbz	r3, 800ba8e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ba52:	b530      	push	{r4, r5, lr}
 800ba54:	4684      	mov	ip, r0
 800ba56:	f04f 34ff 	mov.w	r4, #4294967295
 800ba5a:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e001      	b.n	800ba66 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	b193      	cbz	r3, 800ba8c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ba6c:	458c      	cmp	ip, r1
 800ba6e:	d1f8      	bne.n	800ba62 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ba70:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ba74:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ba78:	42a1      	cmp	r1, r4
 800ba7a:	eb72 050e 	sbcs.w	r5, r2, lr
 800ba7e:	daf0      	bge.n	800ba62 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ba80:	4618      	mov	r0, r3
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	460c      	mov	r4, r1
 800ba86:	4696      	mov	lr, r2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1ec      	bne.n	800ba66 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ba8c:	bd30      	pop	{r4, r5, pc}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	2000c518 	.word	0x2000c518

0800ba98 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	4b3c      	ldr	r3, [pc, #240]	@ (800bb90 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ba9e:	ed2d 8b06 	vpush	{d8-d10}
 800baa2:	f8d3 8000 	ldr.w	r8, [r3]
 800baa6:	b08d      	sub	sp, #52	@ 0x34
 800baa8:	f009 ffa2 	bl	80159f0 <rmw_uros_epoch_nanos>
 800baac:	f1b8 0f00 	cmp.w	r8, #0
 800bab0:	d05c      	beq.n	800bb6c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800bab2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bab6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800baba:	2b04      	cmp	r3, #4
 800babc:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800bb78 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800bac0:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800bb80 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800bac4:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800bb88 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800bac8:	4683      	mov	fp, r0
 800baca:	ac04      	add	r4, sp, #16
 800bacc:	468a      	mov	sl, r1
 800bace:	d03f      	beq.n	800bb50 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800bad0:	2b05      	cmp	r3, #5
 800bad2:	d044      	beq.n	800bb5e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d03b      	beq.n	800bb50 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800bad8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800badc:	ed8d ab06 	vstr	d10, [sp, #24]
 800bae0:	ed8d 8b08 	vstr	d8, [sp, #32]
 800bae4:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800bae8:	ab08      	add	r3, sp, #32
 800baea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800baec:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800baf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800baf4:	f008 fc78 	bl	80143e8 <rmw_time_equal>
 800baf8:	b118      	cbz	r0, 800bb02 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800bafa:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bafe:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bb02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bb06:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800bb0a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800bb0e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800bb12:	f008 fcbd 	bl	8014490 <rmw_time_total_nsec>
 800bb16:	183f      	adds	r7, r7, r0
 800bb18:	eb46 0601 	adc.w	r6, r6, r1
 800bb1c:	455f      	cmp	r7, fp
 800bb1e:	eb76 060a 	sbcs.w	r6, r6, sl
 800bb22:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800bb26:	db05      	blt.n	800bb34 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800bb28:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800bb2c:	4593      	cmp	fp, r2
 800bb2e:	eb7a 0303 	sbcs.w	r3, sl, r3
 800bb32:	da03      	bge.n	800bb3c <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800bb34:	4816      	ldr	r0, [pc, #88]	@ (800bb90 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bb36:	4641      	mov	r1, r8
 800bb38:	f008 fe30 	bl	801479c <put_memory>
 800bb3c:	f1b9 0f00 	cmp.w	r9, #0
 800bb40:	d014      	beq.n	800bb6c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800bb42:	46c8      	mov	r8, r9
 800bb44:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bb48:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d1bf      	bne.n	800bad0 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800bb50:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bb54:	3340      	adds	r3, #64	@ 0x40
 800bb56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb5c:	e7c0      	b.n	800bae0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800bb5e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bb62:	3348      	adds	r3, #72	@ 0x48
 800bb64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb6a:	e7b9      	b.n	800bae0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800bb6c:	b00d      	add	sp, #52	@ 0x34
 800bb6e:	ecbd 8b06 	vpop	{d8-d10}
 800bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb76:	bf00      	nop
	...
 800bb80:	00000001 	.word	0x00000001
 800bb84:	00000000 	.word	0x00000000
 800bb88:	0000001e 	.word	0x0000001e
 800bb8c:	00000000 	.word	0x00000000
 800bb90:	2000c518 	.word	0x2000c518

0800bb94 <run_xrce_session>:
 800bb94:	b500      	push	{lr}
 800bb96:	f891 c002 	ldrb.w	ip, [r1, #2]
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	f1bc 0f01 	cmp.w	ip, #1
 800bba0:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bba4:	d00f      	beq.n	800bbc6 <run_xrce_session+0x32>
 800bba6:	4619      	mov	r1, r3
 800bba8:	2301      	movs	r3, #1
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	f10d 020e 	add.w	r2, sp, #14
 800bbb0:	f10d 0317 	add.w	r3, sp, #23
 800bbb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bbb8:	f002 fd28 	bl	800e60c <uxr_run_session_until_all_status>
 800bbbc:	b100      	cbz	r0, 800bbc0 <run_xrce_session+0x2c>
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	b007      	add	sp, #28
 800bbc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbc6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bbca:	f002 f961 	bl	800de90 <uxr_flash_output_streams>
 800bbce:	2001      	movs	r0, #1
 800bbd0:	e7f6      	b.n	800bbc0 <run_xrce_session+0x2c>
 800bbd2:	bf00      	nop

0800bbd4 <convert_qos_profile>:
 800bbd4:	780a      	ldrb	r2, [r1, #0]
 800bbd6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bbda:	f1a2 0202 	sub.w	r2, r2, #2
 800bbde:	fab2 f282 	clz	r2, r2
 800bbe2:	0952      	lsrs	r2, r2, #5
 800bbe4:	7082      	strb	r2, [r0, #2]
 800bbe6:	7a4a      	ldrb	r2, [r1, #9]
 800bbe8:	8889      	ldrh	r1, [r1, #4]
 800bbea:	8081      	strh	r1, [r0, #4]
 800bbec:	f1a2 0202 	sub.w	r2, r2, #2
 800bbf0:	f1ac 0c02 	sub.w	ip, ip, #2
 800bbf4:	fab2 f282 	clz	r2, r2
 800bbf8:	fabc fc8c 	clz	ip, ip
 800bbfc:	0952      	lsrs	r2, r2, #5
 800bbfe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bc02:	0052      	lsls	r2, r2, #1
 800bc04:	f880 c001 	strb.w	ip, [r0, #1]
 800bc08:	7002      	strb	r2, [r0, #0]
 800bc0a:	4770      	bx	lr

0800bc0c <generate_type_name>:
 800bc0c:	b530      	push	{r4, r5, lr}
 800bc0e:	2300      	movs	r3, #0
 800bc10:	700b      	strb	r3, [r1, #0]
 800bc12:	6803      	ldr	r3, [r0, #0]
 800bc14:	b087      	sub	sp, #28
 800bc16:	4614      	mov	r4, r2
 800bc18:	b1d3      	cbz	r3, 800bc50 <generate_type_name+0x44>
 800bc1a:	4a0f      	ldr	r2, [pc, #60]	@ (800bc58 <generate_type_name+0x4c>)
 800bc1c:	4615      	mov	r5, r2
 800bc1e:	9203      	str	r2, [sp, #12]
 800bc20:	9500      	str	r5, [sp, #0]
 800bc22:	6842      	ldr	r2, [r0, #4]
 800bc24:	480d      	ldr	r0, [pc, #52]	@ (800bc5c <generate_type_name+0x50>)
 800bc26:	9001      	str	r0, [sp, #4]
 800bc28:	4608      	mov	r0, r1
 800bc2a:	490d      	ldr	r1, [pc, #52]	@ (800bc60 <generate_type_name+0x54>)
 800bc2c:	9204      	str	r2, [sp, #16]
 800bc2e:	9105      	str	r1, [sp, #20]
 800bc30:	9102      	str	r1, [sp, #8]
 800bc32:	4a0c      	ldr	r2, [pc, #48]	@ (800bc64 <generate_type_name+0x58>)
 800bc34:	4621      	mov	r1, r4
 800bc36:	f00c fc3d 	bl	80184b4 <sniprintf>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	db05      	blt.n	800bc4a <generate_type_name+0x3e>
 800bc3e:	4284      	cmp	r4, r0
 800bc40:	bfd4      	ite	le
 800bc42:	2000      	movle	r0, #0
 800bc44:	2001      	movgt	r0, #1
 800bc46:	b007      	add	sp, #28
 800bc48:	bd30      	pop	{r4, r5, pc}
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	b007      	add	sp, #28
 800bc4e:	bd30      	pop	{r4, r5, pc}
 800bc50:	4b05      	ldr	r3, [pc, #20]	@ (800bc68 <generate_type_name+0x5c>)
 800bc52:	4a01      	ldr	r2, [pc, #4]	@ (800bc58 <generate_type_name+0x4c>)
 800bc54:	461d      	mov	r5, r3
 800bc56:	e7e2      	b.n	800bc1e <generate_type_name+0x12>
 800bc58:	08019884 	.word	0x08019884
 800bc5c:	0801989c 	.word	0x0801989c
 800bc60:	08019898 	.word	0x08019898
 800bc64:	08019888 	.word	0x08019888
 800bc68:	08019f44 	.word	0x08019f44

0800bc6c <generate_topic_name>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	4614      	mov	r4, r2
 800bc72:	9000      	str	r0, [sp, #0]
 800bc74:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <generate_topic_name+0x2c>)
 800bc76:	4a09      	ldr	r2, [pc, #36]	@ (800bc9c <generate_topic_name+0x30>)
 800bc78:	4608      	mov	r0, r1
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	f00c fc1a 	bl	80184b4 <sniprintf>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	db05      	blt.n	800bc90 <generate_topic_name+0x24>
 800bc84:	4284      	cmp	r4, r0
 800bc86:	bfd4      	ite	le
 800bc88:	2000      	movle	r0, #0
 800bc8a:	2001      	movgt	r0, #1
 800bc8c:	b002      	add	sp, #8
 800bc8e:	bd10      	pop	{r4, pc}
 800bc90:	2000      	movs	r0, #0
 800bc92:	b002      	add	sp, #8
 800bc94:	bd10      	pop	{r4, pc}
 800bc96:	bf00      	nop
 800bc98:	08019fec 	.word	0x08019fec
 800bc9c:	080198a0 	.word	0x080198a0

0800bca0 <is_uxrce_rmw_identifier_valid>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	4604      	mov	r4, r0
 800bca4:	b140      	cbz	r0, 800bcb8 <is_uxrce_rmw_identifier_valid+0x18>
 800bca6:	f008 fdef 	bl	8014888 <rmw_get_implementation_identifier>
 800bcaa:	4601      	mov	r1, r0
 800bcac:	4620      	mov	r0, r4
 800bcae:	f7f4 faaf 	bl	8000210 <strcmp>
 800bcb2:	fab0 f080 	clz	r0, r0
 800bcb6:	0940      	lsrs	r0, r0, #5
 800bcb8:	bd10      	pop	{r4, pc}
 800bcba:	bf00      	nop

0800bcbc <get_message_typesupport_handle>:
 800bcbc:	6883      	ldr	r3, [r0, #8]
 800bcbe:	4718      	bx	r3

0800bcc0 <get_message_typesupport_handle_function>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	6800      	ldr	r0, [r0, #0]
 800bcc6:	f7f4 faa3 	bl	8000210 <strcmp>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	bf0c      	ite	eq
 800bcce:	4620      	moveq	r0, r4
 800bcd0:	2000      	movne	r0, #0
 800bcd2:	bd10      	pop	{r4, pc}

0800bcd4 <std_msgs__msg__Int32MultiArray__init>:
 800bcd4:	b1e0      	cbz	r0, 800bd10 <std_msgs__msg__Int32MultiArray__init+0x3c>
 800bcd6:	b538      	push	{r3, r4, r5, lr}
 800bcd8:	4604      	mov	r4, r0
 800bcda:	f000 f827 	bl	800bd2c <std_msgs__msg__MultiArrayLayout__init>
 800bcde:	b138      	cbz	r0, 800bcf0 <std_msgs__msg__Int32MultiArray__init+0x1c>
 800bce0:	f104 0510 	add.w	r5, r4, #16
 800bce4:	2100      	movs	r1, #0
 800bce6:	4628      	mov	r0, r5
 800bce8:	f009 fe90 	bl	8015a0c <rosidl_runtime_c__int32__Sequence__init>
 800bcec:	b148      	cbz	r0, 800bd02 <std_msgs__msg__Int32MultiArray__init+0x2e>
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 f82b 	bl	800bd4c <std_msgs__msg__MultiArrayLayout__fini>
 800bcf6:	f104 0010 	add.w	r0, r4, #16
 800bcfa:	f009 fea1 	bl	8015a40 <rosidl_runtime_c__int32__Sequence__fini>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	bd38      	pop	{r3, r4, r5, pc}
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 f822 	bl	800bd4c <std_msgs__msg__MultiArrayLayout__fini>
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f009 fe99 	bl	8015a40 <rosidl_runtime_c__int32__Sequence__fini>
 800bd0e:	e7f6      	b.n	800bcfe <std_msgs__msg__Int32MultiArray__init+0x2a>
 800bd10:	2000      	movs	r0, #0
 800bd12:	4770      	bx	lr

0800bd14 <std_msgs__msg__Int32MultiArray__fini>:
 800bd14:	b148      	cbz	r0, 800bd2a <std_msgs__msg__Int32MultiArray__fini+0x16>
 800bd16:	b510      	push	{r4, lr}
 800bd18:	4604      	mov	r4, r0
 800bd1a:	f000 f817 	bl	800bd4c <std_msgs__msg__MultiArrayLayout__fini>
 800bd1e:	f104 0010 	add.w	r0, r4, #16
 800bd22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd26:	f009 be8b 	b.w	8015a40 <rosidl_runtime_c__int32__Sequence__fini>
 800bd2a:	4770      	bx	lr

0800bd2c <std_msgs__msg__MultiArrayLayout__init>:
 800bd2c:	b158      	cbz	r0, 800bd46 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	2100      	movs	r1, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	f009 ff66 	bl	8015c04 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800bd38:	b100      	cbz	r0, 800bd3c <std_msgs__msg__MultiArrayLayout__init+0x10>
 800bd3a:	bd10      	pop	{r4, pc}
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f009 ffa5 	bl	8015c8c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800bd42:	2000      	movs	r0, #0
 800bd44:	bd10      	pop	{r4, pc}
 800bd46:	2000      	movs	r0, #0
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop

0800bd4c <std_msgs__msg__MultiArrayLayout__fini>:
 800bd4c:	b108      	cbz	r0, 800bd52 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 800bd4e:	f009 bf9d 	b.w	8015c8c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800bd52:	4770      	bx	lr

0800bd54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800bd54:	4b04      	ldr	r3, [pc, #16]	@ (800bd68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	b10a      	cbz	r2, 800bd5e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xa>
 800bd5a:	4803      	ldr	r0, [pc, #12]	@ (800bd68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800bd5c:	4770      	bx	lr
 800bd5e:	4a03      	ldr	r2, [pc, #12]	@ (800bd6c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x18>)
 800bd60:	4801      	ldr	r0, [pc, #4]	@ (800bd68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	4770      	bx	lr
 800bd68:	20000054 	.word	0x20000054
 800bd6c:	200001fc 	.word	0x200001fc

0800bd70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800bd70:	4a02      	ldr	r2, [pc, #8]	@ (800bd7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xc>)
 800bd72:	4b03      	ldr	r3, [pc, #12]	@ (800bd80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x10>)
 800bd74:	6812      	ldr	r2, [r2, #0]
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	200001fc 	.word	0x200001fc
 800bd80:	20000054 	.word	0x20000054

0800bd84 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__size_function__Int32MultiArray__data>:
 800bd84:	6840      	ldr	r0, [r0, #4]
 800bd86:	4770      	bx	lr

0800bd88 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Int32MultiArray__data>:
 800bd88:	6800      	ldr	r0, [r0, #0]
 800bd8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bd8e:	4770      	bx	lr

0800bd90 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Int32MultiArray__data>:
 800bd90:	6803      	ldr	r3, [r0, #0]
 800bd92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop

0800bd9c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__assign_function__Int32MultiArray__data>:
 800bd9c:	6803      	ldr	r3, [r0, #0]
 800bd9e:	6812      	ldr	r2, [r2, #0]
 800bda0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop

0800bda8 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_init_function>:
 800bda8:	f7ff bf94 	b.w	800bcd4 <std_msgs__msg__Int32MultiArray__init>

0800bdac <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_fini_function>:
 800bdac:	f7ff bfb2 	b.w	800bd14 <std_msgs__msg__Int32MultiArray__fini>

0800bdb0 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__resize_function__Int32MultiArray__data>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	460d      	mov	r5, r1
 800bdb6:	f009 fe43 	bl	8015a40 <rosidl_runtime_c__int32__Sequence__fini>
 800bdba:	4629      	mov	r1, r5
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc2:	f009 be23 	b.w	8015a0c <rosidl_runtime_c__int32__Sequence__init>
 800bdc6:	bf00      	nop

0800bdc8 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_function__Int32MultiArray__data>:
 800bdc8:	6800      	ldr	r0, [r0, #0]
 800bdca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bdce:	4770      	bx	lr

0800bdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800bdd0:	b508      	push	{r3, lr}
 800bdd2:	f000 f855 	bl	800be80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800bdd6:	4b06      	ldr	r3, [pc, #24]	@ (800bdf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800bdd8:	4906      	ldr	r1, [pc, #24]	@ (800bdf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x24>)
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	60c8      	str	r0, [r1, #12]
 800bdde:	b10a      	cbz	r2, 800bde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>
 800bde0:	4803      	ldr	r0, [pc, #12]	@ (800bdf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800bde2:	bd08      	pop	{r3, pc}
 800bde4:	4a04      	ldr	r2, [pc, #16]	@ (800bdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x28>)
 800bde6:	4802      	ldr	r0, [pc, #8]	@ (800bdf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800bde8:	6812      	ldr	r2, [r2, #0]
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	bd08      	pop	{r3, pc}
 800bdee:	bf00      	nop
 800bdf0:	20000074 	.word	0x20000074
 800bdf4:	2000008c 	.word	0x2000008c
 800bdf8:	20000200 	.word	0x20000200

0800bdfc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800bdfc:	6840      	ldr	r0, [r0, #4]
 800bdfe:	4770      	bx	lr

0800be00 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800be00:	6800      	ldr	r0, [r0, #0]
 800be02:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800be0a:	4770      	bx	lr

0800be0c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800be0c:	6803      	ldr	r3, [r0, #0]
 800be0e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be12:	b500      	push	{lr}
 800be14:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800be18:	4694      	mov	ip, r2
 800be1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be22:	f8de 3000 	ldr.w	r3, [lr]
 800be26:	f8cc 3000 	str.w	r3, [ip]
 800be2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800be2e:	bf00      	nop

0800be30 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800be30:	6803      	ldr	r3, [r0, #0]
 800be32:	b500      	push	{lr}
 800be34:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be38:	4696      	mov	lr, r2
 800be3a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800be3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be46:	f8de 3000 	ldr.w	r3, [lr]
 800be4a:	f8cc 3000 	str.w	r3, [ip]
 800be4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800be52:	bf00      	nop

0800be54 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800be54:	f7ff bf6a 	b.w	800bd2c <std_msgs__msg__MultiArrayLayout__init>

0800be58 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800be58:	f7ff bf78 	b.w	800bd4c <std_msgs__msg__MultiArrayLayout__fini>

0800be5c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	f009 ff13 	bl	8015c8c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800be66:	4629      	mov	r1, r5
 800be68:	4620      	mov	r0, r4
 800be6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6e:	f009 bec9 	b.w	8015c04 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800be72:	bf00      	nop

0800be74 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800be74:	6800      	ldr	r0, [r0, #0]
 800be76:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be7a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800be7e:	4770      	bx	lr

0800be80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800be80:	b508      	push	{r3, lr}
 800be82:	f009 ff77 	bl	8015d74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800be86:	4b06      	ldr	r3, [pc, #24]	@ (800bea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800be88:	4906      	ldr	r1, [pc, #24]	@ (800bea4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	60c8      	str	r0, [r1, #12]
 800be8e:	b10a      	cbz	r2, 800be94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800be90:	4803      	ldr	r0, [pc, #12]	@ (800bea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800be92:	bd08      	pop	{r3, pc}
 800be94:	4a04      	ldr	r2, [pc, #16]	@ (800bea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800be96:	4802      	ldr	r0, [pc, #8]	@ (800bea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800be98:	6812      	ldr	r2, [r2, #0]
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	bd08      	pop	{r3, pc}
 800be9e:	bf00      	nop
 800bea0:	20000104 	.word	0x20000104
 800bea4:	2000011c 	.word	0x2000011c
 800bea8:	20000200 	.word	0x20000200

0800beac <_Int32MultiArray__max_serialized_size>:
 800beac:	b500      	push	{lr}
 800beae:	b083      	sub	sp, #12
 800beb0:	2301      	movs	r3, #1
 800beb2:	2100      	movs	r1, #0
 800beb4:	f10d 0007 	add.w	r0, sp, #7
 800beb8:	f88d 3007 	strb.w	r3, [sp, #7]
 800bebc:	f000 f91c 	bl	800c0f8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800bec0:	b003      	add	sp, #12
 800bec2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bec6:	bf00      	nop

0800bec8 <get_serialized_size_std_msgs__msg__Int32MultiArray>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	b160      	cbz	r0, 800bee8 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>
 800bece:	460d      	mov	r5, r1
 800bed0:	f000 f8e4 	bl	800c09c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800bed4:	182e      	adds	r6, r5, r0
 800bed6:	2104      	movs	r1, #4
 800bed8:	4630      	mov	r0, r6
 800beda:	6967      	ldr	r7, [r4, #20]
 800bedc:	f001 fa12 	bl	800d304 <ucdr_alignment>
 800bee0:	1d04      	adds	r4, r0, #4
 800bee2:	4434      	add	r4, r6
 800bee4:	b90f      	cbnz	r7, 800beea <get_serialized_size_std_msgs__msg__Int32MultiArray+0x22>
 800bee6:	1b60      	subs	r0, r4, r5
 800bee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beea:	4620      	mov	r0, r4
 800beec:	2104      	movs	r1, #4
 800beee:	f001 fa09 	bl	800d304 <ucdr_alignment>
 800bef2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800bef6:	4404      	add	r4, r0
 800bef8:	1b60      	subs	r0, r4, r5
 800befa:	e7f5      	b.n	800bee8 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>

0800befc <_Int32MultiArray__cdr_deserialize>:
 800befc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800befe:	460c      	mov	r4, r1
 800bf00:	b083      	sub	sp, #12
 800bf02:	b1d1      	cbz	r1, 800bf3a <_Int32MultiArray__cdr_deserialize+0x3e>
 800bf04:	4606      	mov	r6, r0
 800bf06:	f000 f901 	bl	800c10c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800bf0a:	6843      	ldr	r3, [r0, #4]
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	4630      	mov	r0, r6
 800bf12:	4798      	blx	r3
 800bf14:	69a7      	ldr	r7, [r4, #24]
 800bf16:	6921      	ldr	r1, [r4, #16]
 800bf18:	ab01      	add	r3, sp, #4
 800bf1a:	463a      	mov	r2, r7
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f001 facb 	bl	800d4b8 <ucdr_deserialize_sequence_int32_t>
 800bf22:	9b01      	ldr	r3, [sp, #4]
 800bf24:	4605      	mov	r5, r0
 800bf26:	b920      	cbnz	r0, 800bf32 <_Int32MultiArray__cdr_deserialize+0x36>
 800bf28:	429f      	cmp	r7, r3
 800bf2a:	d30a      	bcc.n	800bf42 <_Int32MultiArray__cdr_deserialize+0x46>
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	b003      	add	sp, #12
 800bf30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf32:	4628      	mov	r0, r5
 800bf34:	6163      	str	r3, [r4, #20]
 800bf36:	b003      	add	sp, #12
 800bf38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	b003      	add	sp, #12
 800bf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf42:	2301      	movs	r3, #1
 800bf44:	75b0      	strb	r0, [r6, #22]
 800bf46:	7573      	strb	r3, [r6, #21]
 800bf48:	2104      	movs	r1, #4
 800bf4a:	6160      	str	r0, [r4, #20]
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f001 f9ef 	bl	800d330 <ucdr_align_to>
 800bf52:	9901      	ldr	r1, [sp, #4]
 800bf54:	4630      	mov	r0, r6
 800bf56:	0089      	lsls	r1, r1, #2
 800bf58:	f001 fa20 	bl	800d39c <ucdr_advance_buffer>
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	b003      	add	sp, #12
 800bf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf62:	bf00      	nop

0800bf64 <_Int32MultiArray__cdr_serialize>:
 800bf64:	b180      	cbz	r0, 800bf88 <_Int32MultiArray__cdr_serialize+0x24>
 800bf66:	b538      	push	{r3, r4, r5, lr}
 800bf68:	460d      	mov	r5, r1
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	f000 f8ce 	bl	800c10c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800bf70:	6843      	ldr	r3, [r0, #4]
 800bf72:	4629      	mov	r1, r5
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	4620      	mov	r0, r4
 800bf78:	4798      	blx	r3
 800bf7a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800bf7e:	4628      	mov	r0, r5
 800bf80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf84:	f001 ba86 	b.w	800d494 <ucdr_serialize_sequence_int32_t>
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop

0800bf8c <_Int32MultiArray__get_serialized_size>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4604      	mov	r4, r0
 800bf90:	b150      	cbz	r0, 800bfa8 <_Int32MultiArray__get_serialized_size+0x1c>
 800bf92:	2100      	movs	r1, #0
 800bf94:	f000 f882 	bl	800c09c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800bf98:	2104      	movs	r1, #4
 800bf9a:	6965      	ldr	r5, [r4, #20]
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	f001 f9b1 	bl	800d304 <ucdr_alignment>
 800bfa2:	4404      	add	r4, r0
 800bfa4:	3404      	adds	r4, #4
 800bfa6:	b90d      	cbnz	r5, 800bfac <_Int32MultiArray__get_serialized_size+0x20>
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	2104      	movs	r1, #4
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f001 f9a8 	bl	800d304 <ucdr_alignment>
 800bfb4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800bfb8:	4404      	add	r4, r0
 800bfba:	4620      	mov	r0, r4
 800bfbc:	bd38      	pop	{r3, r4, r5, pc}
 800bfbe:	bf00      	nop

0800bfc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800bfc0:	4800      	ldr	r0, [pc, #0]	@ (800bfc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x4>)
 800bfc2:	4770      	bx	lr
 800bfc4:	20000194 	.word	0x20000194

0800bfc8 <_MultiArrayLayout__max_serialized_size>:
 800bfc8:	b508      	push	{r3, lr}
 800bfca:	2104      	movs	r1, #4
 800bfcc:	2000      	movs	r0, #0
 800bfce:	f001 f999 	bl	800d304 <ucdr_alignment>
 800bfd2:	3004      	adds	r0, #4
 800bfd4:	bd08      	pop	{r3, pc}
 800bfd6:	bf00      	nop

0800bfd8 <_MultiArrayLayout__cdr_deserialize>:
 800bfd8:	b351      	cbz	r1, 800c030 <_MultiArrayLayout__cdr_deserialize+0x58>
 800bfda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfdc:	460e      	mov	r6, r1
 800bfde:	b083      	sub	sp, #12
 800bfe0:	a901      	add	r1, sp, #4
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	f000 fc0a 	bl	800c7fc <ucdr_deserialize_uint32_t>
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	68b2      	ldr	r2, [r6, #8]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d31c      	bcc.n	800c02a <_MultiArrayLayout__cdr_deserialize+0x52>
 800bff0:	6073      	str	r3, [r6, #4]
 800bff2:	b193      	cbz	r3, 800c01a <_MultiArrayLayout__cdr_deserialize+0x42>
 800bff4:	2400      	movs	r4, #0
 800bff6:	4625      	mov	r5, r4
 800bff8:	e005      	b.n	800c006 <_MultiArrayLayout__cdr_deserialize+0x2e>
 800bffa:	9b01      	ldr	r3, [sp, #4]
 800bffc:	3501      	adds	r5, #1
 800bffe:	42ab      	cmp	r3, r5
 800c000:	f104 0414 	add.w	r4, r4, #20
 800c004:	d909      	bls.n	800c01a <_MultiArrayLayout__cdr_deserialize+0x42>
 800c006:	f009 ff53 	bl	8015eb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800c00a:	6831      	ldr	r1, [r6, #0]
 800c00c:	6843      	ldr	r3, [r0, #4]
 800c00e:	4421      	add	r1, r4
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	4638      	mov	r0, r7
 800c014:	4798      	blx	r3
 800c016:	2800      	cmp	r0, #0
 800c018:	d1ef      	bne.n	800bffa <_MultiArrayLayout__cdr_deserialize+0x22>
 800c01a:	f106 010c 	add.w	r1, r6, #12
 800c01e:	4638      	mov	r0, r7
 800c020:	b003      	add	sp, #12
 800c022:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c026:	f000 bbe9 	b.w	800c7fc <ucdr_deserialize_uint32_t>
 800c02a:	2000      	movs	r0, #0
 800c02c:	b003      	add	sp, #12
 800c02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c030:	2000      	movs	r0, #0
 800c032:	4770      	bx	lr

0800c034 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800c034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c038:	4689      	mov	r9, r1
 800c03a:	4607      	mov	r7, r0
 800c03c:	2104      	movs	r1, #4
 800c03e:	4648      	mov	r0, r9
 800c040:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800c044:	f001 f95e 	bl	800d304 <ucdr_alignment>
 800c048:	f109 0304 	add.w	r3, r9, #4
 800c04c:	18c6      	adds	r6, r0, r3
 800c04e:	f1b8 0f00 	cmp.w	r8, #0
 800c052:	d019      	beq.n	800c088 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x54>
 800c054:	2500      	movs	r5, #0
 800c056:	f009 ff2b 	bl	8015eb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	6843      	ldr	r3, [r0, #4]
 800c05e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800c062:	4631      	mov	r1, r6
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c06a:	4798      	blx	r3
 800c06c:	2804      	cmp	r0, #4
 800c06e:	4601      	mov	r1, r0
 800c070:	4604      	mov	r4, r0
 800c072:	bf28      	it	cs
 800c074:	2104      	movcs	r1, #4
 800c076:	4630      	mov	r0, r6
 800c078:	f001 f944 	bl	800d304 <ucdr_alignment>
 800c07c:	3501      	adds	r5, #1
 800c07e:	4434      	add	r4, r6
 800c080:	45a8      	cmp	r8, r5
 800c082:	eb00 0604 	add.w	r6, r0, r4
 800c086:	d1e6      	bne.n	800c056 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800c088:	2104      	movs	r1, #4
 800c08a:	4630      	mov	r0, r6
 800c08c:	f001 f93a 	bl	800d304 <ucdr_alignment>
 800c090:	f1c9 0904 	rsb	r9, r9, #4
 800c094:	44b1      	add	r9, r6
 800c096:	4448      	add	r0, r9
 800c098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c09c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800c09c:	b108      	cbz	r0, 800c0a2 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800c09e:	f7ff bfc9 	b.w	800c034 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800c0a2:	4770      	bx	lr

0800c0a4 <_MultiArrayLayout__get_serialized_size>:
 800c0a4:	b110      	cbz	r0, 800c0ac <_MultiArrayLayout__get_serialized_size+0x8>
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	f7ff bfc4 	b.w	800c034 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop

0800c0b0 <_MultiArrayLayout__cdr_serialize>:
 800c0b0:	b308      	cbz	r0, 800c0f6 <_MultiArrayLayout__cdr_serialize+0x46>
 800c0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b4:	6847      	ldr	r7, [r0, #4]
 800c0b6:	460e      	mov	r6, r1
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	4608      	mov	r0, r1
 800c0bc:	4639      	mov	r1, r7
 800c0be:	f000 fa73 	bl	800c5a8 <ucdr_serialize_uint32_t>
 800c0c2:	b190      	cbz	r0, 800c0ea <_MultiArrayLayout__cdr_serialize+0x3a>
 800c0c4:	b18f      	cbz	r7, 800c0ea <_MultiArrayLayout__cdr_serialize+0x3a>
 800c0c6:	2400      	movs	r4, #0
 800c0c8:	e002      	b.n	800c0d0 <_MultiArrayLayout__cdr_serialize+0x20>
 800c0ca:	3401      	adds	r4, #1
 800c0cc:	42a7      	cmp	r7, r4
 800c0ce:	d00c      	beq.n	800c0ea <_MultiArrayLayout__cdr_serialize+0x3a>
 800c0d0:	f009 feee 	bl	8015eb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800c0d4:	6841      	ldr	r1, [r0, #4]
 800c0d6:	6828      	ldr	r0, [r5, #0]
 800c0d8:	688a      	ldr	r2, [r1, #8]
 800c0da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800c0de:	4631      	mov	r1, r6
 800c0e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c0e4:	4790      	blx	r2
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d1ef      	bne.n	800c0ca <_MultiArrayLayout__cdr_serialize+0x1a>
 800c0ea:	68e9      	ldr	r1, [r5, #12]
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c0f2:	f000 ba59 	b.w	800c5a8 <ucdr_serialize_uint32_t>
 800c0f6:	4770      	bx	lr

0800c0f8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800c0f8:	b508      	push	{r3, lr}
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4608      	mov	r0, r1
 800c100:	701a      	strb	r2, [r3, #0]
 800c102:	2104      	movs	r1, #4
 800c104:	f001 f8fe 	bl	800d304 <ucdr_alignment>
 800c108:	3004      	adds	r0, #4
 800c10a:	bd08      	pop	{r3, pc}

0800c10c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800c10c:	4800      	ldr	r0, [pc, #0]	@ (800c110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800c10e:	4770      	bx	lr
 800c110:	200001c8 	.word	0x200001c8

0800c114 <ucdr_serialize_bool>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	460d      	mov	r5, r1
 800c118:	2101      	movs	r1, #1
 800c11a:	4604      	mov	r4, r0
 800c11c:	f001 f8a6 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c120:	b148      	cbz	r0, 800c136 <ucdr_serialize_bool+0x22>
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	701d      	strb	r5, [r3, #0]
 800c126:	68a2      	ldr	r2, [r4, #8]
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	2101      	movs	r1, #1
 800c12c:	440a      	add	r2, r1
 800c12e:	440b      	add	r3, r1
 800c130:	60a2      	str	r2, [r4, #8]
 800c132:	6123      	str	r3, [r4, #16]
 800c134:	7561      	strb	r1, [r4, #21]
 800c136:	7da0      	ldrb	r0, [r4, #22]
 800c138:	f080 0001 	eor.w	r0, r0, #1
 800c13c:	bd38      	pop	{r3, r4, r5, pc}
 800c13e:	bf00      	nop

0800c140 <ucdr_deserialize_bool>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	460d      	mov	r5, r1
 800c144:	2101      	movs	r1, #1
 800c146:	4604      	mov	r4, r0
 800c148:	f001 f890 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c14c:	b160      	cbz	r0, 800c168 <ucdr_deserialize_bool+0x28>
 800c14e:	68a2      	ldr	r2, [r4, #8]
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c156:	3900      	subs	r1, #0
 800c158:	bf18      	it	ne
 800c15a:	2101      	movne	r1, #1
 800c15c:	7029      	strb	r1, [r5, #0]
 800c15e:	3301      	adds	r3, #1
 800c160:	2101      	movs	r1, #1
 800c162:	60a2      	str	r2, [r4, #8]
 800c164:	6123      	str	r3, [r4, #16]
 800c166:	7561      	strb	r1, [r4, #21]
 800c168:	7da0      	ldrb	r0, [r4, #22]
 800c16a:	f080 0001 	eor.w	r0, r0, #1
 800c16e:	bd38      	pop	{r3, r4, r5, pc}

0800c170 <ucdr_serialize_uint8_t>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	460d      	mov	r5, r1
 800c174:	2101      	movs	r1, #1
 800c176:	4604      	mov	r4, r0
 800c178:	f001 f878 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c17c:	b148      	cbz	r0, 800c192 <ucdr_serialize_uint8_t+0x22>
 800c17e:	68a3      	ldr	r3, [r4, #8]
 800c180:	701d      	strb	r5, [r3, #0]
 800c182:	68a2      	ldr	r2, [r4, #8]
 800c184:	6923      	ldr	r3, [r4, #16]
 800c186:	2101      	movs	r1, #1
 800c188:	440a      	add	r2, r1
 800c18a:	440b      	add	r3, r1
 800c18c:	60a2      	str	r2, [r4, #8]
 800c18e:	6123      	str	r3, [r4, #16]
 800c190:	7561      	strb	r1, [r4, #21]
 800c192:	7da0      	ldrb	r0, [r4, #22]
 800c194:	f080 0001 	eor.w	r0, r0, #1
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop

0800c19c <ucdr_deserialize_uint8_t>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	460d      	mov	r5, r1
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	f001 f862 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c1a8:	b150      	cbz	r0, 800c1c0 <ucdr_deserialize_uint8_t+0x24>
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	702b      	strb	r3, [r5, #0]
 800c1b0:	68a2      	ldr	r2, [r4, #8]
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	2101      	movs	r1, #1
 800c1b6:	440a      	add	r2, r1
 800c1b8:	440b      	add	r3, r1
 800c1ba:	60a2      	str	r2, [r4, #8]
 800c1bc:	6123      	str	r3, [r4, #16]
 800c1be:	7561      	strb	r1, [r4, #21]
 800c1c0:	7da0      	ldrb	r0, [r4, #22]
 800c1c2:	f080 0001 	eor.w	r0, r0, #1
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}

0800c1c8 <ucdr_serialize_uint16_t>:
 800c1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c1d8:	f001 f89c 	bl	800d314 <ucdr_buffer_alignment>
 800c1dc:	4601      	mov	r1, r0
 800c1de:	4620      	mov	r0, r4
 800c1e0:	7d67      	ldrb	r7, [r4, #21]
 800c1e2:	f001 f8db 	bl	800d39c <ucdr_advance_buffer>
 800c1e6:	2102      	movs	r1, #2
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f001 f833 	bl	800d254 <ucdr_check_buffer_available_for>
 800c1ee:	b1c0      	cbz	r0, 800c222 <ucdr_serialize_uint16_t+0x5a>
 800c1f0:	7d22      	ldrb	r2, [r4, #20]
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	2a01      	cmp	r2, #1
 800c1f6:	d04e      	beq.n	800c296 <ucdr_serialize_uint16_t+0xce>
 800c1f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c204:	705a      	strb	r2, [r3, #1]
 800c206:	68a2      	ldr	r2, [r4, #8]
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	3202      	adds	r2, #2
 800c20c:	3302      	adds	r3, #2
 800c20e:	2102      	movs	r1, #2
 800c210:	60a2      	str	r2, [r4, #8]
 800c212:	6123      	str	r3, [r4, #16]
 800c214:	7561      	strb	r1, [r4, #21]
 800c216:	7da0      	ldrb	r0, [r4, #22]
 800c218:	f080 0001 	eor.w	r0, r0, #1
 800c21c:	b002      	add	sp, #8
 800c21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c222:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c226:	42ab      	cmp	r3, r5
 800c228:	d923      	bls.n	800c272 <ucdr_serialize_uint16_t+0xaa>
 800c22a:	1b5e      	subs	r6, r3, r5
 800c22c:	60a3      	str	r3, [r4, #8]
 800c22e:	6923      	ldr	r3, [r4, #16]
 800c230:	f1c6 0802 	rsb	r8, r6, #2
 800c234:	4433      	add	r3, r6
 800c236:	6123      	str	r3, [r4, #16]
 800c238:	4641      	mov	r1, r8
 800c23a:	4620      	mov	r0, r4
 800c23c:	f001 f816 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c240:	b368      	cbz	r0, 800c29e <ucdr_serialize_uint16_t+0xd6>
 800c242:	7d23      	ldrb	r3, [r4, #20]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d03b      	beq.n	800c2c0 <ucdr_serialize_uint16_t+0xf8>
 800c248:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c24c:	702b      	strb	r3, [r5, #0]
 800c24e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c252:	706b      	strb	r3, [r5, #1]
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	68a2      	ldr	r2, [r4, #8]
 800c258:	7da0      	ldrb	r0, [r4, #22]
 800c25a:	3302      	adds	r3, #2
 800c25c:	4442      	add	r2, r8
 800c25e:	1b9b      	subs	r3, r3, r6
 800c260:	2102      	movs	r1, #2
 800c262:	f080 0001 	eor.w	r0, r0, #1
 800c266:	60a2      	str	r2, [r4, #8]
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	7561      	strb	r1, [r4, #21]
 800c26c:	b002      	add	sp, #8
 800c26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c272:	2102      	movs	r1, #2
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fff9 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d0cb      	beq.n	800c216 <ucdr_serialize_uint16_t+0x4e>
 800c27e:	7d23      	ldrb	r3, [r4, #20]
 800c280:	68a2      	ldr	r2, [r4, #8]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d018      	beq.n	800c2b8 <ucdr_serialize_uint16_t+0xf0>
 800c286:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c28a:	7013      	strb	r3, [r2, #0]
 800c28c:	68a3      	ldr	r3, [r4, #8]
 800c28e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c292:	705a      	strb	r2, [r3, #1]
 800c294:	e7b7      	b.n	800c206 <ucdr_serialize_uint16_t+0x3e>
 800c296:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c29a:	801a      	strh	r2, [r3, #0]
 800c29c:	e7b3      	b.n	800c206 <ucdr_serialize_uint16_t+0x3e>
 800c29e:	68a2      	ldr	r2, [r4, #8]
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	7da0      	ldrb	r0, [r4, #22]
 800c2a4:	7567      	strb	r7, [r4, #21]
 800c2a6:	1b92      	subs	r2, r2, r6
 800c2a8:	1b9b      	subs	r3, r3, r6
 800c2aa:	f080 0001 	eor.w	r0, r0, #1
 800c2ae:	60a2      	str	r2, [r4, #8]
 800c2b0:	6123      	str	r3, [r4, #16]
 800c2b2:	b002      	add	sp, #8
 800c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c2bc:	8013      	strh	r3, [r2, #0]
 800c2be:	e7a2      	b.n	800c206 <ucdr_serialize_uint16_t+0x3e>
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f10d 0506 	add.w	r5, sp, #6
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	f00c fb42 	bl	8018952 <memcpy>
 800c2ce:	68a0      	ldr	r0, [r4, #8]
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	19a9      	adds	r1, r5, r6
 800c2d4:	f00c fb3d 	bl	8018952 <memcpy>
 800c2d8:	e7bc      	b.n	800c254 <ucdr_serialize_uint16_t+0x8c>
 800c2da:	bf00      	nop

0800c2dc <ucdr_serialize_endian_uint16_t>:
 800c2dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2e0:	b083      	sub	sp, #12
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	2102      	movs	r1, #2
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c2ec:	f001 f812 	bl	800d314 <ucdr_buffer_alignment>
 800c2f0:	4601      	mov	r1, r0
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c2f8:	f001 f850 	bl	800d39c <ucdr_advance_buffer>
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 ffa8 	bl	800d254 <ucdr_check_buffer_available_for>
 800c304:	bb60      	cbnz	r0, 800c360 <ucdr_serialize_endian_uint16_t+0x84>
 800c306:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c30a:	42be      	cmp	r6, r7
 800c30c:	d923      	bls.n	800c356 <ucdr_serialize_endian_uint16_t+0x7a>
 800c30e:	6923      	ldr	r3, [r4, #16]
 800c310:	60a6      	str	r6, [r4, #8]
 800c312:	1bf6      	subs	r6, r6, r7
 800c314:	4433      	add	r3, r6
 800c316:	f1c6 0902 	rsb	r9, r6, #2
 800c31a:	6123      	str	r3, [r4, #16]
 800c31c:	4649      	mov	r1, r9
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 ffa4 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c324:	2800      	cmp	r0, #0
 800c326:	d037      	beq.n	800c398 <ucdr_serialize_endian_uint16_t+0xbc>
 800c328:	2d01      	cmp	r5, #1
 800c32a:	d043      	beq.n	800c3b4 <ucdr_serialize_endian_uint16_t+0xd8>
 800c32c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c330:	703b      	strb	r3, [r7, #0]
 800c332:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c336:	707b      	strb	r3, [r7, #1]
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	68a2      	ldr	r2, [r4, #8]
 800c33c:	7da0      	ldrb	r0, [r4, #22]
 800c33e:	3302      	adds	r3, #2
 800c340:	444a      	add	r2, r9
 800c342:	1b9b      	subs	r3, r3, r6
 800c344:	2102      	movs	r1, #2
 800c346:	f080 0001 	eor.w	r0, r0, #1
 800c34a:	60a2      	str	r2, [r4, #8]
 800c34c:	6123      	str	r3, [r4, #16]
 800c34e:	7561      	strb	r1, [r4, #21]
 800c350:	b003      	add	sp, #12
 800c352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c356:	2102      	movs	r1, #2
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 ff87 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c35e:	b188      	cbz	r0, 800c384 <ucdr_serialize_endian_uint16_t+0xa8>
 800c360:	2d01      	cmp	r5, #1
 800c362:	68a3      	ldr	r3, [r4, #8]
 800c364:	d014      	beq.n	800c390 <ucdr_serialize_endian_uint16_t+0xb4>
 800c366:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	68a3      	ldr	r3, [r4, #8]
 800c36e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c372:	705a      	strb	r2, [r3, #1]
 800c374:	68a2      	ldr	r2, [r4, #8]
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	3202      	adds	r2, #2
 800c37a:	3302      	adds	r3, #2
 800c37c:	2102      	movs	r1, #2
 800c37e:	60a2      	str	r2, [r4, #8]
 800c380:	6123      	str	r3, [r4, #16]
 800c382:	7561      	strb	r1, [r4, #21]
 800c384:	7da0      	ldrb	r0, [r4, #22]
 800c386:	f080 0001 	eor.w	r0, r0, #1
 800c38a:	b003      	add	sp, #12
 800c38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c390:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c394:	801a      	strh	r2, [r3, #0]
 800c396:	e7ed      	b.n	800c374 <ucdr_serialize_endian_uint16_t+0x98>
 800c398:	68a2      	ldr	r2, [r4, #8]
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	7da0      	ldrb	r0, [r4, #22]
 800c39e:	f884 8015 	strb.w	r8, [r4, #21]
 800c3a2:	1b92      	subs	r2, r2, r6
 800c3a4:	1b9b      	subs	r3, r3, r6
 800c3a6:	f080 0001 	eor.w	r0, r0, #1
 800c3aa:	60a2      	str	r2, [r4, #8]
 800c3ac:	6123      	str	r3, [r4, #16]
 800c3ae:	b003      	add	sp, #12
 800c3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b4:	f10d 0506 	add.w	r5, sp, #6
 800c3b8:	4632      	mov	r2, r6
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	4638      	mov	r0, r7
 800c3be:	f00c fac8 	bl	8018952 <memcpy>
 800c3c2:	68a0      	ldr	r0, [r4, #8]
 800c3c4:	464a      	mov	r2, r9
 800c3c6:	19a9      	adds	r1, r5, r6
 800c3c8:	f00c fac3 	bl	8018952 <memcpy>
 800c3cc:	e7b4      	b.n	800c338 <ucdr_serialize_endian_uint16_t+0x5c>
 800c3ce:	bf00      	nop

0800c3d0 <ucdr_deserialize_uint16_t>:
 800c3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	2102      	movs	r1, #2
 800c3d8:	4604      	mov	r4, r0
 800c3da:	f000 ff9b 	bl	800d314 <ucdr_buffer_alignment>
 800c3de:	4601      	mov	r1, r0
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c3e6:	f000 ffd9 	bl	800d39c <ucdr_advance_buffer>
 800c3ea:	2102      	movs	r1, #2
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f000 ff31 	bl	800d254 <ucdr_check_buffer_available_for>
 800c3f2:	b1a8      	cbz	r0, 800c420 <ucdr_deserialize_uint16_t+0x50>
 800c3f4:	7d22      	ldrb	r2, [r4, #20]
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	2a01      	cmp	r2, #1
 800c3fa:	d046      	beq.n	800c48a <ucdr_deserialize_uint16_t+0xba>
 800c3fc:	785b      	ldrb	r3, [r3, #1]
 800c3fe:	702b      	strb	r3, [r5, #0]
 800c400:	68a3      	ldr	r3, [r4, #8]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	706b      	strb	r3, [r5, #1]
 800c406:	68a2      	ldr	r2, [r4, #8]
 800c408:	6923      	ldr	r3, [r4, #16]
 800c40a:	3202      	adds	r2, #2
 800c40c:	3302      	adds	r3, #2
 800c40e:	2102      	movs	r1, #2
 800c410:	60a2      	str	r2, [r4, #8]
 800c412:	6123      	str	r3, [r4, #16]
 800c414:	7561      	strb	r1, [r4, #21]
 800c416:	7da0      	ldrb	r0, [r4, #22]
 800c418:	f080 0001 	eor.w	r0, r0, #1
 800c41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c420:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c424:	42be      	cmp	r6, r7
 800c426:	d920      	bls.n	800c46a <ucdr_deserialize_uint16_t+0x9a>
 800c428:	6923      	ldr	r3, [r4, #16]
 800c42a:	60a6      	str	r6, [r4, #8]
 800c42c:	1bf6      	subs	r6, r6, r7
 800c42e:	4433      	add	r3, r6
 800c430:	f1c6 0902 	rsb	r9, r6, #2
 800c434:	6123      	str	r3, [r4, #16]
 800c436:	4649      	mov	r1, r9
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 ff17 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c43e:	b338      	cbz	r0, 800c490 <ucdr_deserialize_uint16_t+0xc0>
 800c440:	7d23      	ldrb	r3, [r4, #20]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d034      	beq.n	800c4b0 <ucdr_deserialize_uint16_t+0xe0>
 800c446:	787b      	ldrb	r3, [r7, #1]
 800c448:	702b      	strb	r3, [r5, #0]
 800c44a:	783b      	ldrb	r3, [r7, #0]
 800c44c:	706b      	strb	r3, [r5, #1]
 800c44e:	6923      	ldr	r3, [r4, #16]
 800c450:	68a2      	ldr	r2, [r4, #8]
 800c452:	7da0      	ldrb	r0, [r4, #22]
 800c454:	2102      	movs	r1, #2
 800c456:	3302      	adds	r3, #2
 800c458:	444a      	add	r2, r9
 800c45a:	1b9b      	subs	r3, r3, r6
 800c45c:	7561      	strb	r1, [r4, #21]
 800c45e:	60a2      	str	r2, [r4, #8]
 800c460:	6123      	str	r3, [r4, #16]
 800c462:	f080 0001 	eor.w	r0, r0, #1
 800c466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46a:	2102      	movs	r1, #2
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fefd 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c472:	2800      	cmp	r0, #0
 800c474:	d0cf      	beq.n	800c416 <ucdr_deserialize_uint16_t+0x46>
 800c476:	7d23      	ldrb	r3, [r4, #20]
 800c478:	68a2      	ldr	r2, [r4, #8]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d015      	beq.n	800c4aa <ucdr_deserialize_uint16_t+0xda>
 800c47e:	7853      	ldrb	r3, [r2, #1]
 800c480:	702b      	strb	r3, [r5, #0]
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	706b      	strb	r3, [r5, #1]
 800c488:	e7bd      	b.n	800c406 <ucdr_deserialize_uint16_t+0x36>
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	802b      	strh	r3, [r5, #0]
 800c48e:	e7ba      	b.n	800c406 <ucdr_deserialize_uint16_t+0x36>
 800c490:	68a2      	ldr	r2, [r4, #8]
 800c492:	6923      	ldr	r3, [r4, #16]
 800c494:	7da0      	ldrb	r0, [r4, #22]
 800c496:	f884 8015 	strb.w	r8, [r4, #21]
 800c49a:	1b92      	subs	r2, r2, r6
 800c49c:	1b9b      	subs	r3, r3, r6
 800c49e:	60a2      	str	r2, [r4, #8]
 800c4a0:	6123      	str	r3, [r4, #16]
 800c4a2:	f080 0001 	eor.w	r0, r0, #1
 800c4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4aa:	8813      	ldrh	r3, [r2, #0]
 800c4ac:	802b      	strh	r3, [r5, #0]
 800c4ae:	e7aa      	b.n	800c406 <ucdr_deserialize_uint16_t+0x36>
 800c4b0:	4639      	mov	r1, r7
 800c4b2:	4632      	mov	r2, r6
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	f00c fa4c 	bl	8018952 <memcpy>
 800c4ba:	68a1      	ldr	r1, [r4, #8]
 800c4bc:	464a      	mov	r2, r9
 800c4be:	19a8      	adds	r0, r5, r6
 800c4c0:	f00c fa47 	bl	8018952 <memcpy>
 800c4c4:	e7c3      	b.n	800c44e <ucdr_deserialize_uint16_t+0x7e>
 800c4c6:	bf00      	nop

0800c4c8 <ucdr_deserialize_endian_uint16_t>:
 800c4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	460e      	mov	r6, r1
 800c4ce:	2102      	movs	r1, #2
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	4615      	mov	r5, r2
 800c4d4:	f000 ff1e 	bl	800d314 <ucdr_buffer_alignment>
 800c4d8:	4601      	mov	r1, r0
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c4e0:	f000 ff5c 	bl	800d39c <ucdr_advance_buffer>
 800c4e4:	2102      	movs	r1, #2
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f000 feb4 	bl	800d254 <ucdr_check_buffer_available_for>
 800c4ec:	bb60      	cbnz	r0, 800c548 <ucdr_deserialize_endian_uint16_t+0x80>
 800c4ee:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c4f2:	4547      	cmp	r7, r8
 800c4f4:	d923      	bls.n	800c53e <ucdr_deserialize_endian_uint16_t+0x76>
 800c4f6:	6923      	ldr	r3, [r4, #16]
 800c4f8:	60a7      	str	r7, [r4, #8]
 800c4fa:	eba7 0708 	sub.w	r7, r7, r8
 800c4fe:	443b      	add	r3, r7
 800c500:	f1c7 0a02 	rsb	sl, r7, #2
 800c504:	6123      	str	r3, [r4, #16]
 800c506:	4651      	mov	r1, sl
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 feaf 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d032      	beq.n	800c578 <ucdr_deserialize_endian_uint16_t+0xb0>
 800c512:	2e01      	cmp	r6, #1
 800c514:	d03d      	beq.n	800c592 <ucdr_deserialize_endian_uint16_t+0xca>
 800c516:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c51a:	702b      	strb	r3, [r5, #0]
 800c51c:	f898 3000 	ldrb.w	r3, [r8]
 800c520:	706b      	strb	r3, [r5, #1]
 800c522:	6923      	ldr	r3, [r4, #16]
 800c524:	68a2      	ldr	r2, [r4, #8]
 800c526:	7da0      	ldrb	r0, [r4, #22]
 800c528:	2102      	movs	r1, #2
 800c52a:	3302      	adds	r3, #2
 800c52c:	4452      	add	r2, sl
 800c52e:	1bdb      	subs	r3, r3, r7
 800c530:	7561      	strb	r1, [r4, #21]
 800c532:	60a2      	str	r2, [r4, #8]
 800c534:	6123      	str	r3, [r4, #16]
 800c536:	f080 0001 	eor.w	r0, r0, #1
 800c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53e:	2102      	movs	r1, #2
 800c540:	4620      	mov	r0, r4
 800c542:	f000 fe93 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c546:	b178      	cbz	r0, 800c568 <ucdr_deserialize_endian_uint16_t+0xa0>
 800c548:	2e01      	cmp	r6, #1
 800c54a:	68a3      	ldr	r3, [r4, #8]
 800c54c:	d011      	beq.n	800c572 <ucdr_deserialize_endian_uint16_t+0xaa>
 800c54e:	785b      	ldrb	r3, [r3, #1]
 800c550:	702b      	strb	r3, [r5, #0]
 800c552:	68a3      	ldr	r3, [r4, #8]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	706b      	strb	r3, [r5, #1]
 800c558:	68a2      	ldr	r2, [r4, #8]
 800c55a:	6923      	ldr	r3, [r4, #16]
 800c55c:	3202      	adds	r2, #2
 800c55e:	3302      	adds	r3, #2
 800c560:	2102      	movs	r1, #2
 800c562:	60a2      	str	r2, [r4, #8]
 800c564:	6123      	str	r3, [r4, #16]
 800c566:	7561      	strb	r1, [r4, #21]
 800c568:	7da0      	ldrb	r0, [r4, #22]
 800c56a:	f080 0001 	eor.w	r0, r0, #1
 800c56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c572:	881b      	ldrh	r3, [r3, #0]
 800c574:	802b      	strh	r3, [r5, #0]
 800c576:	e7ef      	b.n	800c558 <ucdr_deserialize_endian_uint16_t+0x90>
 800c578:	68a2      	ldr	r2, [r4, #8]
 800c57a:	6923      	ldr	r3, [r4, #16]
 800c57c:	7da0      	ldrb	r0, [r4, #22]
 800c57e:	f884 9015 	strb.w	r9, [r4, #21]
 800c582:	1bd2      	subs	r2, r2, r7
 800c584:	1bdb      	subs	r3, r3, r7
 800c586:	60a2      	str	r2, [r4, #8]
 800c588:	6123      	str	r3, [r4, #16]
 800c58a:	f080 0001 	eor.w	r0, r0, #1
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	4641      	mov	r1, r8
 800c594:	463a      	mov	r2, r7
 800c596:	4628      	mov	r0, r5
 800c598:	f00c f9db 	bl	8018952 <memcpy>
 800c59c:	68a1      	ldr	r1, [r4, #8]
 800c59e:	4652      	mov	r2, sl
 800c5a0:	19e8      	adds	r0, r5, r7
 800c5a2:	f00c f9d6 	bl	8018952 <memcpy>
 800c5a6:	e7bc      	b.n	800c522 <ucdr_deserialize_endian_uint16_t+0x5a>

0800c5a8 <ucdr_serialize_uint32_t>:
 800c5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	9101      	str	r1, [sp, #4]
 800c5b2:	2104      	movs	r1, #4
 800c5b4:	f000 feae 	bl	800d314 <ucdr_buffer_alignment>
 800c5b8:	4601      	mov	r1, r0
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	7d67      	ldrb	r7, [r4, #21]
 800c5be:	f000 feed 	bl	800d39c <ucdr_advance_buffer>
 800c5c2:	2104      	movs	r1, #4
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f000 fe45 	bl	800d254 <ucdr_check_buffer_available_for>
 800c5ca:	b300      	cbz	r0, 800c60e <ucdr_serialize_uint32_t+0x66>
 800c5cc:	7d22      	ldrb	r2, [r4, #20]
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	2a01      	cmp	r2, #1
 800c5d2:	d05d      	beq.n	800c690 <ucdr_serialize_uint32_t+0xe8>
 800c5d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c5e0:	705a      	strb	r2, [r3, #1]
 800c5e2:	68a3      	ldr	r3, [r4, #8]
 800c5e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c5e8:	709a      	strb	r2, [r3, #2]
 800c5ea:	68a3      	ldr	r3, [r4, #8]
 800c5ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c5f0:	70da      	strb	r2, [r3, #3]
 800c5f2:	68a2      	ldr	r2, [r4, #8]
 800c5f4:	6923      	ldr	r3, [r4, #16]
 800c5f6:	3204      	adds	r2, #4
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	2104      	movs	r1, #4
 800c5fc:	60a2      	str	r2, [r4, #8]
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	7561      	strb	r1, [r4, #21]
 800c602:	7da0      	ldrb	r0, [r4, #22]
 800c604:	f080 0001 	eor.w	r0, r0, #1
 800c608:	b002      	add	sp, #8
 800c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c612:	42ab      	cmp	r3, r5
 800c614:	d92e      	bls.n	800c674 <ucdr_serialize_uint32_t+0xcc>
 800c616:	1b5e      	subs	r6, r3, r5
 800c618:	60a3      	str	r3, [r4, #8]
 800c61a:	6923      	ldr	r3, [r4, #16]
 800c61c:	f1c6 0804 	rsb	r8, r6, #4
 800c620:	4433      	add	r3, r6
 800c622:	6123      	str	r3, [r4, #16]
 800c624:	4641      	mov	r1, r8
 800c626:	4620      	mov	r0, r4
 800c628:	f000 fe20 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c62c:	b398      	cbz	r0, 800c696 <ucdr_serialize_uint32_t+0xee>
 800c62e:	7d23      	ldrb	r3, [r4, #20]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d046      	beq.n	800c6c2 <ucdr_serialize_uint32_t+0x11a>
 800c634:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c638:	702b      	strb	r3, [r5, #0]
 800c63a:	2e01      	cmp	r6, #1
 800c63c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c640:	706b      	strb	r3, [r5, #1]
 800c642:	d035      	beq.n	800c6b0 <ucdr_serialize_uint32_t+0x108>
 800c644:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c648:	70ab      	strb	r3, [r5, #2]
 800c64a:	2e02      	cmp	r6, #2
 800c64c:	d034      	beq.n	800c6b8 <ucdr_serialize_uint32_t+0x110>
 800c64e:	3503      	adds	r5, #3
 800c650:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c654:	702b      	strb	r3, [r5, #0]
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	68a2      	ldr	r2, [r4, #8]
 800c65a:	7da0      	ldrb	r0, [r4, #22]
 800c65c:	3304      	adds	r3, #4
 800c65e:	4442      	add	r2, r8
 800c660:	1b9b      	subs	r3, r3, r6
 800c662:	2104      	movs	r1, #4
 800c664:	f080 0001 	eor.w	r0, r0, #1
 800c668:	60a2      	str	r2, [r4, #8]
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	7561      	strb	r1, [r4, #21]
 800c66e:	b002      	add	sp, #8
 800c670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c674:	2104      	movs	r1, #4
 800c676:	4620      	mov	r0, r4
 800c678:	f000 fdf8 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d0c0      	beq.n	800c602 <ucdr_serialize_uint32_t+0x5a>
 800c680:	7d23      	ldrb	r3, [r4, #20]
 800c682:	68a2      	ldr	r2, [r4, #8]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d019      	beq.n	800c6bc <ucdr_serialize_uint32_t+0x114>
 800c688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c68c:	7013      	strb	r3, [r2, #0]
 800c68e:	e7a4      	b.n	800c5da <ucdr_serialize_uint32_t+0x32>
 800c690:	9a01      	ldr	r2, [sp, #4]
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	e7ad      	b.n	800c5f2 <ucdr_serialize_uint32_t+0x4a>
 800c696:	68a2      	ldr	r2, [r4, #8]
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	7da0      	ldrb	r0, [r4, #22]
 800c69c:	7567      	strb	r7, [r4, #21]
 800c69e:	1b92      	subs	r2, r2, r6
 800c6a0:	1b9b      	subs	r3, r3, r6
 800c6a2:	f080 0001 	eor.w	r0, r0, #1
 800c6a6:	60a2      	str	r2, [r4, #8]
 800c6a8:	6123      	str	r3, [r4, #16]
 800c6aa:	b002      	add	sp, #8
 800c6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6b0:	68a3      	ldr	r3, [r4, #8]
 800c6b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	68a5      	ldr	r5, [r4, #8]
 800c6ba:	e7c9      	b.n	800c650 <ucdr_serialize_uint32_t+0xa8>
 800c6bc:	9b01      	ldr	r3, [sp, #4]
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	e797      	b.n	800c5f2 <ucdr_serialize_uint32_t+0x4a>
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	ad01      	add	r5, sp, #4
 800c6c6:	4632      	mov	r2, r6
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	f00c f942 	bl	8018952 <memcpy>
 800c6ce:	68a0      	ldr	r0, [r4, #8]
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	19a9      	adds	r1, r5, r6
 800c6d4:	f00c f93d 	bl	8018952 <memcpy>
 800c6d8:	e7bd      	b.n	800c656 <ucdr_serialize_uint32_t+0xae>
 800c6da:	bf00      	nop

0800c6dc <ucdr_serialize_endian_uint32_t>:
 800c6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6e0:	b083      	sub	sp, #12
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	2104      	movs	r1, #4
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	9201      	str	r2, [sp, #4]
 800c6ea:	f000 fe13 	bl	800d314 <ucdr_buffer_alignment>
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c6f6:	f000 fe51 	bl	800d39c <ucdr_advance_buffer>
 800c6fa:	2104      	movs	r1, #4
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f000 fda9 	bl	800d254 <ucdr_check_buffer_available_for>
 800c702:	2800      	cmp	r0, #0
 800c704:	d137      	bne.n	800c776 <ucdr_serialize_endian_uint32_t+0x9a>
 800c706:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c70a:	42b7      	cmp	r7, r6
 800c70c:	d92e      	bls.n	800c76c <ucdr_serialize_endian_uint32_t+0x90>
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	60a7      	str	r7, [r4, #8]
 800c712:	1bbf      	subs	r7, r7, r6
 800c714:	443b      	add	r3, r7
 800c716:	f1c7 0904 	rsb	r9, r7, #4
 800c71a:	6123      	str	r3, [r4, #16]
 800c71c:	4649      	mov	r1, r9
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 fda4 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c724:	2800      	cmp	r0, #0
 800c726:	d049      	beq.n	800c7bc <ucdr_serialize_endian_uint32_t+0xe0>
 800c728:	2d01      	cmp	r5, #1
 800c72a:	d05b      	beq.n	800c7e4 <ucdr_serialize_endian_uint32_t+0x108>
 800c72c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c730:	7033      	strb	r3, [r6, #0]
 800c732:	2f01      	cmp	r7, #1
 800c734:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c738:	7073      	strb	r3, [r6, #1]
 800c73a:	d04d      	beq.n	800c7d8 <ucdr_serialize_endian_uint32_t+0xfc>
 800c73c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c740:	70b3      	strb	r3, [r6, #2]
 800c742:	2f02      	cmp	r7, #2
 800c744:	d04c      	beq.n	800c7e0 <ucdr_serialize_endian_uint32_t+0x104>
 800c746:	3603      	adds	r6, #3
 800c748:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c74c:	7033      	strb	r3, [r6, #0]
 800c74e:	6923      	ldr	r3, [r4, #16]
 800c750:	68a2      	ldr	r2, [r4, #8]
 800c752:	7da0      	ldrb	r0, [r4, #22]
 800c754:	3304      	adds	r3, #4
 800c756:	444a      	add	r2, r9
 800c758:	1bdb      	subs	r3, r3, r7
 800c75a:	2104      	movs	r1, #4
 800c75c:	f080 0001 	eor.w	r0, r0, #1
 800c760:	60a2      	str	r2, [r4, #8]
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	7561      	strb	r1, [r4, #21]
 800c766:	b003      	add	sp, #12
 800c768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c76c:	2104      	movs	r1, #4
 800c76e:	4620      	mov	r0, r4
 800c770:	f000 fd7c 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c774:	b1c8      	cbz	r0, 800c7aa <ucdr_serialize_endian_uint32_t+0xce>
 800c776:	2d01      	cmp	r5, #1
 800c778:	68a3      	ldr	r3, [r4, #8]
 800c77a:	d01c      	beq.n	800c7b6 <ucdr_serialize_endian_uint32_t+0xda>
 800c77c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c780:	701a      	strb	r2, [r3, #0]
 800c782:	68a3      	ldr	r3, [r4, #8]
 800c784:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c788:	705a      	strb	r2, [r3, #1]
 800c78a:	68a3      	ldr	r3, [r4, #8]
 800c78c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c790:	709a      	strb	r2, [r3, #2]
 800c792:	68a3      	ldr	r3, [r4, #8]
 800c794:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c798:	70da      	strb	r2, [r3, #3]
 800c79a:	68a2      	ldr	r2, [r4, #8]
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	3204      	adds	r2, #4
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	2104      	movs	r1, #4
 800c7a4:	60a2      	str	r2, [r4, #8]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	7561      	strb	r1, [r4, #21]
 800c7aa:	7da0      	ldrb	r0, [r4, #22]
 800c7ac:	f080 0001 	eor.w	r0, r0, #1
 800c7b0:	b003      	add	sp, #12
 800c7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7b6:	9a01      	ldr	r2, [sp, #4]
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	e7ee      	b.n	800c79a <ucdr_serialize_endian_uint32_t+0xbe>
 800c7bc:	68a2      	ldr	r2, [r4, #8]
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	7da0      	ldrb	r0, [r4, #22]
 800c7c2:	f884 8015 	strb.w	r8, [r4, #21]
 800c7c6:	1bd2      	subs	r2, r2, r7
 800c7c8:	1bdb      	subs	r3, r3, r7
 800c7ca:	f080 0001 	eor.w	r0, r0, #1
 800c7ce:	60a2      	str	r2, [r4, #8]
 800c7d0:	6123      	str	r3, [r4, #16]
 800c7d2:	b003      	add	sp, #12
 800c7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7d8:	68a3      	ldr	r3, [r4, #8]
 800c7da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	68a6      	ldr	r6, [r4, #8]
 800c7e2:	e7b1      	b.n	800c748 <ucdr_serialize_endian_uint32_t+0x6c>
 800c7e4:	ad01      	add	r5, sp, #4
 800c7e6:	463a      	mov	r2, r7
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f00c f8b1 	bl	8018952 <memcpy>
 800c7f0:	68a0      	ldr	r0, [r4, #8]
 800c7f2:	464a      	mov	r2, r9
 800c7f4:	19e9      	adds	r1, r5, r7
 800c7f6:	f00c f8ac 	bl	8018952 <memcpy>
 800c7fa:	e7a8      	b.n	800c74e <ucdr_serialize_endian_uint32_t+0x72>

0800c7fc <ucdr_deserialize_uint32_t>:
 800c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c800:	460d      	mov	r5, r1
 800c802:	2104      	movs	r1, #4
 800c804:	4604      	mov	r4, r0
 800c806:	f000 fd85 	bl	800d314 <ucdr_buffer_alignment>
 800c80a:	4601      	mov	r1, r0
 800c80c:	4620      	mov	r0, r4
 800c80e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c812:	f000 fdc3 	bl	800d39c <ucdr_advance_buffer>
 800c816:	2104      	movs	r1, #4
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fd1b 	bl	800d254 <ucdr_check_buffer_available_for>
 800c81e:	b1d8      	cbz	r0, 800c858 <ucdr_deserialize_uint32_t+0x5c>
 800c820:	7d22      	ldrb	r2, [r4, #20]
 800c822:	68a3      	ldr	r3, [r4, #8]
 800c824:	2a01      	cmp	r2, #1
 800c826:	d052      	beq.n	800c8ce <ucdr_deserialize_uint32_t+0xd2>
 800c828:	78db      	ldrb	r3, [r3, #3]
 800c82a:	702b      	strb	r3, [r5, #0]
 800c82c:	68a3      	ldr	r3, [r4, #8]
 800c82e:	789b      	ldrb	r3, [r3, #2]
 800c830:	706b      	strb	r3, [r5, #1]
 800c832:	68a3      	ldr	r3, [r4, #8]
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	70ab      	strb	r3, [r5, #2]
 800c838:	68a3      	ldr	r3, [r4, #8]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	70eb      	strb	r3, [r5, #3]
 800c83e:	68a2      	ldr	r2, [r4, #8]
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	3204      	adds	r2, #4
 800c844:	3304      	adds	r3, #4
 800c846:	2104      	movs	r1, #4
 800c848:	60a2      	str	r2, [r4, #8]
 800c84a:	6123      	str	r3, [r4, #16]
 800c84c:	7561      	strb	r1, [r4, #21]
 800c84e:	7da0      	ldrb	r0, [r4, #22]
 800c850:	f080 0001 	eor.w	r0, r0, #1
 800c854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c858:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c85c:	42b7      	cmp	r7, r6
 800c85e:	d92a      	bls.n	800c8b6 <ucdr_deserialize_uint32_t+0xba>
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	60a7      	str	r7, [r4, #8]
 800c864:	1bbf      	subs	r7, r7, r6
 800c866:	443b      	add	r3, r7
 800c868:	f1c7 0904 	rsb	r9, r7, #4
 800c86c:	6123      	str	r3, [r4, #16]
 800c86e:	4649      	mov	r1, r9
 800c870:	4620      	mov	r0, r4
 800c872:	f000 fcfb 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c876:	b368      	cbz	r0, 800c8d4 <ucdr_deserialize_uint32_t+0xd8>
 800c878:	7d23      	ldrb	r3, [r4, #20]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d040      	beq.n	800c900 <ucdr_deserialize_uint32_t+0x104>
 800c87e:	78f3      	ldrb	r3, [r6, #3]
 800c880:	702b      	strb	r3, [r5, #0]
 800c882:	78b3      	ldrb	r3, [r6, #2]
 800c884:	706b      	strb	r3, [r5, #1]
 800c886:	2f01      	cmp	r7, #1
 800c888:	d031      	beq.n	800c8ee <ucdr_deserialize_uint32_t+0xf2>
 800c88a:	7873      	ldrb	r3, [r6, #1]
 800c88c:	70ab      	strb	r3, [r5, #2]
 800c88e:	2f02      	cmp	r7, #2
 800c890:	f105 0503 	add.w	r5, r5, #3
 800c894:	d02f      	beq.n	800c8f6 <ucdr_deserialize_uint32_t+0xfa>
 800c896:	7833      	ldrb	r3, [r6, #0]
 800c898:	702b      	strb	r3, [r5, #0]
 800c89a:	6923      	ldr	r3, [r4, #16]
 800c89c:	68a2      	ldr	r2, [r4, #8]
 800c89e:	7da0      	ldrb	r0, [r4, #22]
 800c8a0:	2104      	movs	r1, #4
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	444a      	add	r2, r9
 800c8a6:	1bdb      	subs	r3, r3, r7
 800c8a8:	7561      	strb	r1, [r4, #21]
 800c8aa:	60a2      	str	r2, [r4, #8]
 800c8ac:	6123      	str	r3, [r4, #16]
 800c8ae:	f080 0001 	eor.w	r0, r0, #1
 800c8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b6:	2104      	movs	r1, #4
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f000 fcd7 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0c5      	beq.n	800c84e <ucdr_deserialize_uint32_t+0x52>
 800c8c2:	7d23      	ldrb	r3, [r4, #20]
 800c8c4:	68a2      	ldr	r2, [r4, #8]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d017      	beq.n	800c8fa <ucdr_deserialize_uint32_t+0xfe>
 800c8ca:	78d3      	ldrb	r3, [r2, #3]
 800c8cc:	e7ad      	b.n	800c82a <ucdr_deserialize_uint32_t+0x2e>
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	602b      	str	r3, [r5, #0]
 800c8d2:	e7b4      	b.n	800c83e <ucdr_deserialize_uint32_t+0x42>
 800c8d4:	68a2      	ldr	r2, [r4, #8]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	7da0      	ldrb	r0, [r4, #22]
 800c8da:	f884 8015 	strb.w	r8, [r4, #21]
 800c8de:	1bd2      	subs	r2, r2, r7
 800c8e0:	1bdb      	subs	r3, r3, r7
 800c8e2:	60a2      	str	r2, [r4, #8]
 800c8e4:	6123      	str	r3, [r4, #16]
 800c8e6:	f080 0001 	eor.w	r0, r0, #1
 800c8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ee:	68a3      	ldr	r3, [r4, #8]
 800c8f0:	785b      	ldrb	r3, [r3, #1]
 800c8f2:	70ab      	strb	r3, [r5, #2]
 800c8f4:	3503      	adds	r5, #3
 800c8f6:	68a6      	ldr	r6, [r4, #8]
 800c8f8:	e7cd      	b.n	800c896 <ucdr_deserialize_uint32_t+0x9a>
 800c8fa:	6813      	ldr	r3, [r2, #0]
 800c8fc:	602b      	str	r3, [r5, #0]
 800c8fe:	e79e      	b.n	800c83e <ucdr_deserialize_uint32_t+0x42>
 800c900:	4631      	mov	r1, r6
 800c902:	463a      	mov	r2, r7
 800c904:	4628      	mov	r0, r5
 800c906:	f00c f824 	bl	8018952 <memcpy>
 800c90a:	68a1      	ldr	r1, [r4, #8]
 800c90c:	464a      	mov	r2, r9
 800c90e:	19e8      	adds	r0, r5, r7
 800c910:	f00c f81f 	bl	8018952 <memcpy>
 800c914:	e7c1      	b.n	800c89a <ucdr_deserialize_uint32_t+0x9e>
 800c916:	bf00      	nop

0800c918 <ucdr_deserialize_endian_uint32_t>:
 800c918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c91c:	460e      	mov	r6, r1
 800c91e:	2104      	movs	r1, #4
 800c920:	4604      	mov	r4, r0
 800c922:	4615      	mov	r5, r2
 800c924:	f000 fcf6 	bl	800d314 <ucdr_buffer_alignment>
 800c928:	4601      	mov	r1, r0
 800c92a:	4620      	mov	r0, r4
 800c92c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c930:	f000 fd34 	bl	800d39c <ucdr_advance_buffer>
 800c934:	2104      	movs	r1, #4
 800c936:	4620      	mov	r0, r4
 800c938:	f000 fc8c 	bl	800d254 <ucdr_check_buffer_available_for>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d137      	bne.n	800c9b0 <ucdr_deserialize_endian_uint32_t+0x98>
 800c940:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c944:	42bb      	cmp	r3, r7
 800c946:	d92e      	bls.n	800c9a6 <ucdr_deserialize_endian_uint32_t+0x8e>
 800c948:	eba3 0807 	sub.w	r8, r3, r7
 800c94c:	60a3      	str	r3, [r4, #8]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	f1c8 0a04 	rsb	sl, r8, #4
 800c954:	4443      	add	r3, r8
 800c956:	6123      	str	r3, [r4, #16]
 800c958:	4651      	mov	r1, sl
 800c95a:	4620      	mov	r0, r4
 800c95c:	f000 fc86 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c960:	2800      	cmp	r0, #0
 800c962:	d043      	beq.n	800c9ec <ucdr_deserialize_endian_uint32_t+0xd4>
 800c964:	2e01      	cmp	r6, #1
 800c966:	d056      	beq.n	800ca16 <ucdr_deserialize_endian_uint32_t+0xfe>
 800c968:	78fb      	ldrb	r3, [r7, #3]
 800c96a:	702b      	strb	r3, [r5, #0]
 800c96c:	78bb      	ldrb	r3, [r7, #2]
 800c96e:	706b      	strb	r3, [r5, #1]
 800c970:	f1b8 0f01 	cmp.w	r8, #1
 800c974:	d049      	beq.n	800ca0a <ucdr_deserialize_endian_uint32_t+0xf2>
 800c976:	787b      	ldrb	r3, [r7, #1]
 800c978:	70ab      	strb	r3, [r5, #2]
 800c97a:	f1b8 0f02 	cmp.w	r8, #2
 800c97e:	f105 0503 	add.w	r5, r5, #3
 800c982:	d046      	beq.n	800ca12 <ucdr_deserialize_endian_uint32_t+0xfa>
 800c984:	783b      	ldrb	r3, [r7, #0]
 800c986:	702b      	strb	r3, [r5, #0]
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	68a2      	ldr	r2, [r4, #8]
 800c98c:	7da0      	ldrb	r0, [r4, #22]
 800c98e:	2104      	movs	r1, #4
 800c990:	3304      	adds	r3, #4
 800c992:	4452      	add	r2, sl
 800c994:	eba3 0308 	sub.w	r3, r3, r8
 800c998:	7561      	strb	r1, [r4, #21]
 800c99a:	60a2      	str	r2, [r4, #8]
 800c99c:	6123      	str	r3, [r4, #16]
 800c99e:	f080 0001 	eor.w	r0, r0, #1
 800c9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a6:	2104      	movs	r1, #4
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f000 fc5f 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800c9ae:	b1a8      	cbz	r0, 800c9dc <ucdr_deserialize_endian_uint32_t+0xc4>
 800c9b0:	2e01      	cmp	r6, #1
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	d017      	beq.n	800c9e6 <ucdr_deserialize_endian_uint32_t+0xce>
 800c9b6:	78db      	ldrb	r3, [r3, #3]
 800c9b8:	702b      	strb	r3, [r5, #0]
 800c9ba:	68a3      	ldr	r3, [r4, #8]
 800c9bc:	789b      	ldrb	r3, [r3, #2]
 800c9be:	706b      	strb	r3, [r5, #1]
 800c9c0:	68a3      	ldr	r3, [r4, #8]
 800c9c2:	785b      	ldrb	r3, [r3, #1]
 800c9c4:	70ab      	strb	r3, [r5, #2]
 800c9c6:	68a3      	ldr	r3, [r4, #8]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	70eb      	strb	r3, [r5, #3]
 800c9cc:	68a2      	ldr	r2, [r4, #8]
 800c9ce:	6923      	ldr	r3, [r4, #16]
 800c9d0:	3204      	adds	r2, #4
 800c9d2:	3304      	adds	r3, #4
 800c9d4:	2104      	movs	r1, #4
 800c9d6:	60a2      	str	r2, [r4, #8]
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	7561      	strb	r1, [r4, #21]
 800c9dc:	7da0      	ldrb	r0, [r4, #22]
 800c9de:	f080 0001 	eor.w	r0, r0, #1
 800c9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	e7ef      	b.n	800c9cc <ucdr_deserialize_endian_uint32_t+0xb4>
 800c9ec:	68a2      	ldr	r2, [r4, #8]
 800c9ee:	6923      	ldr	r3, [r4, #16]
 800c9f0:	7da0      	ldrb	r0, [r4, #22]
 800c9f2:	f884 9015 	strb.w	r9, [r4, #21]
 800c9f6:	eba2 0208 	sub.w	r2, r2, r8
 800c9fa:	eba3 0308 	sub.w	r3, r3, r8
 800c9fe:	60a2      	str	r2, [r4, #8]
 800ca00:	6123      	str	r3, [r4, #16]
 800ca02:	f080 0001 	eor.w	r0, r0, #1
 800ca06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0a:	68a3      	ldr	r3, [r4, #8]
 800ca0c:	785b      	ldrb	r3, [r3, #1]
 800ca0e:	70ab      	strb	r3, [r5, #2]
 800ca10:	3503      	adds	r5, #3
 800ca12:	68a7      	ldr	r7, [r4, #8]
 800ca14:	e7b6      	b.n	800c984 <ucdr_deserialize_endian_uint32_t+0x6c>
 800ca16:	4639      	mov	r1, r7
 800ca18:	4642      	mov	r2, r8
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	f00b ff99 	bl	8018952 <memcpy>
 800ca20:	68a1      	ldr	r1, [r4, #8]
 800ca22:	4652      	mov	r2, sl
 800ca24:	eb05 0008 	add.w	r0, r5, r8
 800ca28:	f00b ff93 	bl	8018952 <memcpy>
 800ca2c:	e7ac      	b.n	800c988 <ucdr_deserialize_endian_uint32_t+0x70>
 800ca2e:	bf00      	nop

0800ca30 <ucdr_serialize_uint64_t>:
 800ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca34:	2108      	movs	r1, #8
 800ca36:	b082      	sub	sp, #8
 800ca38:	4604      	mov	r4, r0
 800ca3a:	e9cd 2300 	strd	r2, r3, [sp]
 800ca3e:	f000 fc69 	bl	800d314 <ucdr_buffer_alignment>
 800ca42:	4601      	mov	r1, r0
 800ca44:	4620      	mov	r0, r4
 800ca46:	7d67      	ldrb	r7, [r4, #21]
 800ca48:	f000 fca8 	bl	800d39c <ucdr_advance_buffer>
 800ca4c:	2108      	movs	r1, #8
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 fc00 	bl	800d254 <ucdr_check_buffer_available_for>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d14d      	bne.n	800caf4 <ucdr_serialize_uint64_t+0xc4>
 800ca58:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	d944      	bls.n	800caea <ucdr_serialize_uint64_t+0xba>
 800ca60:	1b5e      	subs	r6, r3, r5
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	f1c6 0808 	rsb	r8, r6, #8
 800ca6a:	4433      	add	r3, r6
 800ca6c:	6123      	str	r3, [r4, #16]
 800ca6e:	4641      	mov	r1, r8
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fbfb 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d072      	beq.n	800cb60 <ucdr_serialize_uint64_t+0x130>
 800ca7a:	7d23      	ldrb	r3, [r4, #20]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	f000 8092 	beq.w	800cba6 <ucdr_serialize_uint64_t+0x176>
 800ca82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca86:	702b      	strb	r3, [r5, #0]
 800ca88:	2e01      	cmp	r6, #1
 800ca8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca8e:	706b      	strb	r3, [r5, #1]
 800ca90:	d073      	beq.n	800cb7a <ucdr_serialize_uint64_t+0x14a>
 800ca92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca96:	70ab      	strb	r3, [r5, #2]
 800ca98:	2e02      	cmp	r6, #2
 800ca9a:	d072      	beq.n	800cb82 <ucdr_serialize_uint64_t+0x152>
 800ca9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800caa0:	70eb      	strb	r3, [r5, #3]
 800caa2:	2e03      	cmp	r6, #3
 800caa4:	d071      	beq.n	800cb8a <ucdr_serialize_uint64_t+0x15a>
 800caa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800caaa:	712b      	strb	r3, [r5, #4]
 800caac:	2e04      	cmp	r6, #4
 800caae:	d070      	beq.n	800cb92 <ucdr_serialize_uint64_t+0x162>
 800cab0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cab4:	716b      	strb	r3, [r5, #5]
 800cab6:	2e05      	cmp	r6, #5
 800cab8:	d06f      	beq.n	800cb9a <ucdr_serialize_uint64_t+0x16a>
 800caba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cabe:	71ab      	strb	r3, [r5, #6]
 800cac0:	2e06      	cmp	r6, #6
 800cac2:	d06e      	beq.n	800cba2 <ucdr_serialize_uint64_t+0x172>
 800cac4:	3507      	adds	r5, #7
 800cac6:	f89d 3000 	ldrb.w	r3, [sp]
 800caca:	702b      	strb	r3, [r5, #0]
 800cacc:	6923      	ldr	r3, [r4, #16]
 800cace:	68a2      	ldr	r2, [r4, #8]
 800cad0:	7da0      	ldrb	r0, [r4, #22]
 800cad2:	3308      	adds	r3, #8
 800cad4:	4442      	add	r2, r8
 800cad6:	1b9b      	subs	r3, r3, r6
 800cad8:	2108      	movs	r1, #8
 800cada:	f080 0001 	eor.w	r0, r0, #1
 800cade:	60a2      	str	r2, [r4, #8]
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	7561      	strb	r1, [r4, #21]
 800cae4:	b002      	add	sp, #8
 800cae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caea:	2108      	movs	r1, #8
 800caec:	4620      	mov	r0, r4
 800caee:	f000 fbbd 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800caf2:	b350      	cbz	r0, 800cb4a <ucdr_serialize_uint64_t+0x11a>
 800caf4:	7d22      	ldrb	r2, [r4, #20]
 800caf6:	68a3      	ldr	r3, [r4, #8]
 800caf8:	2a01      	cmp	r2, #1
 800cafa:	d02c      	beq.n	800cb56 <ucdr_serialize_uint64_t+0x126>
 800cafc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cb00:	701a      	strb	r2, [r3, #0]
 800cb02:	68a3      	ldr	r3, [r4, #8]
 800cb04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb08:	705a      	strb	r2, [r3, #1]
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb10:	709a      	strb	r2, [r3, #2]
 800cb12:	68a3      	ldr	r3, [r4, #8]
 800cb14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cb18:	70da      	strb	r2, [r3, #3]
 800cb1a:	68a3      	ldr	r3, [r4, #8]
 800cb1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cb20:	711a      	strb	r2, [r3, #4]
 800cb22:	68a3      	ldr	r3, [r4, #8]
 800cb24:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cb28:	715a      	strb	r2, [r3, #5]
 800cb2a:	68a3      	ldr	r3, [r4, #8]
 800cb2c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cb30:	719a      	strb	r2, [r3, #6]
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	f89d 2000 	ldrb.w	r2, [sp]
 800cb38:	71da      	strb	r2, [r3, #7]
 800cb3a:	68a2      	ldr	r2, [r4, #8]
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	3208      	adds	r2, #8
 800cb40:	3308      	adds	r3, #8
 800cb42:	2108      	movs	r1, #8
 800cb44:	60a2      	str	r2, [r4, #8]
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	7561      	strb	r1, [r4, #21]
 800cb4a:	7da0      	ldrb	r0, [r4, #22]
 800cb4c:	f080 0001 	eor.w	r0, r0, #1
 800cb50:	b002      	add	sp, #8
 800cb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb5a:	6019      	str	r1, [r3, #0]
 800cb5c:	605a      	str	r2, [r3, #4]
 800cb5e:	e7ec      	b.n	800cb3a <ucdr_serialize_uint64_t+0x10a>
 800cb60:	68a2      	ldr	r2, [r4, #8]
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	7da0      	ldrb	r0, [r4, #22]
 800cb66:	7567      	strb	r7, [r4, #21]
 800cb68:	1b92      	subs	r2, r2, r6
 800cb6a:	1b9b      	subs	r3, r3, r6
 800cb6c:	f080 0001 	eor.w	r0, r0, #1
 800cb70:	60a2      	str	r2, [r4, #8]
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	b002      	add	sp, #8
 800cb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cb88:	701a      	strb	r2, [r3, #0]
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	68a3      	ldr	r3, [r4, #8]
 800cb94:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cb98:	701a      	strb	r2, [r3, #0]
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cba0:	701a      	strb	r2, [r3, #0]
 800cba2:	68a5      	ldr	r5, [r4, #8]
 800cba4:	e78f      	b.n	800cac6 <ucdr_serialize_uint64_t+0x96>
 800cba6:	4628      	mov	r0, r5
 800cba8:	466d      	mov	r5, sp
 800cbaa:	4632      	mov	r2, r6
 800cbac:	4629      	mov	r1, r5
 800cbae:	f00b fed0 	bl	8018952 <memcpy>
 800cbb2:	68a0      	ldr	r0, [r4, #8]
 800cbb4:	4642      	mov	r2, r8
 800cbb6:	19a9      	adds	r1, r5, r6
 800cbb8:	f00b fecb 	bl	8018952 <memcpy>
 800cbbc:	e786      	b.n	800cacc <ucdr_serialize_uint64_t+0x9c>
 800cbbe:	bf00      	nop

0800cbc0 <ucdr_serialize_int16_t>:
 800cbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	2102      	movs	r1, #2
 800cbca:	4604      	mov	r4, r0
 800cbcc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cbd0:	f000 fba0 	bl	800d314 <ucdr_buffer_alignment>
 800cbd4:	4601      	mov	r1, r0
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	7d67      	ldrb	r7, [r4, #21]
 800cbda:	f000 fbdf 	bl	800d39c <ucdr_advance_buffer>
 800cbde:	2102      	movs	r1, #2
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f000 fb37 	bl	800d254 <ucdr_check_buffer_available_for>
 800cbe6:	b1c0      	cbz	r0, 800cc1a <ucdr_serialize_int16_t+0x5a>
 800cbe8:	7d22      	ldrb	r2, [r4, #20]
 800cbea:	68a3      	ldr	r3, [r4, #8]
 800cbec:	2a01      	cmp	r2, #1
 800cbee:	d04e      	beq.n	800cc8e <ucdr_serialize_int16_t+0xce>
 800cbf0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cbf4:	701a      	strb	r2, [r3, #0]
 800cbf6:	68a3      	ldr	r3, [r4, #8]
 800cbf8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbfc:	705a      	strb	r2, [r3, #1]
 800cbfe:	68a2      	ldr	r2, [r4, #8]
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	3202      	adds	r2, #2
 800cc04:	3302      	adds	r3, #2
 800cc06:	2102      	movs	r1, #2
 800cc08:	60a2      	str	r2, [r4, #8]
 800cc0a:	6123      	str	r3, [r4, #16]
 800cc0c:	7561      	strb	r1, [r4, #21]
 800cc0e:	7da0      	ldrb	r0, [r4, #22]
 800cc10:	f080 0001 	eor.w	r0, r0, #1
 800cc14:	b002      	add	sp, #8
 800cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cc1e:	42ab      	cmp	r3, r5
 800cc20:	d923      	bls.n	800cc6a <ucdr_serialize_int16_t+0xaa>
 800cc22:	1b5e      	subs	r6, r3, r5
 800cc24:	60a3      	str	r3, [r4, #8]
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	f1c6 0802 	rsb	r8, r6, #2
 800cc2c:	4433      	add	r3, r6
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	4641      	mov	r1, r8
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 fb1a 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800cc38:	b368      	cbz	r0, 800cc96 <ucdr_serialize_int16_t+0xd6>
 800cc3a:	7d23      	ldrb	r3, [r4, #20]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d03b      	beq.n	800ccb8 <ucdr_serialize_int16_t+0xf8>
 800cc40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc44:	702b      	strb	r3, [r5, #0]
 800cc46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc4a:	706b      	strb	r3, [r5, #1]
 800cc4c:	6923      	ldr	r3, [r4, #16]
 800cc4e:	68a2      	ldr	r2, [r4, #8]
 800cc50:	7da0      	ldrb	r0, [r4, #22]
 800cc52:	3302      	adds	r3, #2
 800cc54:	4442      	add	r2, r8
 800cc56:	1b9b      	subs	r3, r3, r6
 800cc58:	2102      	movs	r1, #2
 800cc5a:	f080 0001 	eor.w	r0, r0, #1
 800cc5e:	60a2      	str	r2, [r4, #8]
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	7561      	strb	r1, [r4, #21]
 800cc64:	b002      	add	sp, #8
 800cc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc6a:	2102      	movs	r1, #2
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f000 fafd 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d0cb      	beq.n	800cc0e <ucdr_serialize_int16_t+0x4e>
 800cc76:	7d23      	ldrb	r3, [r4, #20]
 800cc78:	68a2      	ldr	r2, [r4, #8]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d018      	beq.n	800ccb0 <ucdr_serialize_int16_t+0xf0>
 800cc7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc82:	7013      	strb	r3, [r2, #0]
 800cc84:	68a3      	ldr	r3, [r4, #8]
 800cc86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc8a:	705a      	strb	r2, [r3, #1]
 800cc8c:	e7b7      	b.n	800cbfe <ucdr_serialize_int16_t+0x3e>
 800cc8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cc92:	801a      	strh	r2, [r3, #0]
 800cc94:	e7b3      	b.n	800cbfe <ucdr_serialize_int16_t+0x3e>
 800cc96:	68a2      	ldr	r2, [r4, #8]
 800cc98:	6923      	ldr	r3, [r4, #16]
 800cc9a:	7da0      	ldrb	r0, [r4, #22]
 800cc9c:	7567      	strb	r7, [r4, #21]
 800cc9e:	1b92      	subs	r2, r2, r6
 800cca0:	1b9b      	subs	r3, r3, r6
 800cca2:	f080 0001 	eor.w	r0, r0, #1
 800cca6:	60a2      	str	r2, [r4, #8]
 800cca8:	6123      	str	r3, [r4, #16]
 800ccaa:	b002      	add	sp, #8
 800ccac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ccb4:	8013      	strh	r3, [r2, #0]
 800ccb6:	e7a2      	b.n	800cbfe <ucdr_serialize_int16_t+0x3e>
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f10d 0506 	add.w	r5, sp, #6
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f00b fe46 	bl	8018952 <memcpy>
 800ccc6:	68a0      	ldr	r0, [r4, #8]
 800ccc8:	4642      	mov	r2, r8
 800ccca:	19a9      	adds	r1, r5, r6
 800cccc:	f00b fe41 	bl	8018952 <memcpy>
 800ccd0:	e7bc      	b.n	800cc4c <ucdr_serialize_int16_t+0x8c>
 800ccd2:	bf00      	nop

0800ccd4 <ucdr_deserialize_int16_t>:
 800ccd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd8:	460d      	mov	r5, r1
 800ccda:	2102      	movs	r1, #2
 800ccdc:	4604      	mov	r4, r0
 800ccde:	f000 fb19 	bl	800d314 <ucdr_buffer_alignment>
 800cce2:	4601      	mov	r1, r0
 800cce4:	4620      	mov	r0, r4
 800cce6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ccea:	f000 fb57 	bl	800d39c <ucdr_advance_buffer>
 800ccee:	2102      	movs	r1, #2
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 faaf 	bl	800d254 <ucdr_check_buffer_available_for>
 800ccf6:	b1a8      	cbz	r0, 800cd24 <ucdr_deserialize_int16_t+0x50>
 800ccf8:	7d22      	ldrb	r2, [r4, #20]
 800ccfa:	68a3      	ldr	r3, [r4, #8]
 800ccfc:	2a01      	cmp	r2, #1
 800ccfe:	d046      	beq.n	800cd8e <ucdr_deserialize_int16_t+0xba>
 800cd00:	785b      	ldrb	r3, [r3, #1]
 800cd02:	702b      	strb	r3, [r5, #0]
 800cd04:	68a3      	ldr	r3, [r4, #8]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	706b      	strb	r3, [r5, #1]
 800cd0a:	68a2      	ldr	r2, [r4, #8]
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	3202      	adds	r2, #2
 800cd10:	3302      	adds	r3, #2
 800cd12:	2102      	movs	r1, #2
 800cd14:	60a2      	str	r2, [r4, #8]
 800cd16:	6123      	str	r3, [r4, #16]
 800cd18:	7561      	strb	r1, [r4, #21]
 800cd1a:	7da0      	ldrb	r0, [r4, #22]
 800cd1c:	f080 0001 	eor.w	r0, r0, #1
 800cd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd24:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cd28:	42be      	cmp	r6, r7
 800cd2a:	d920      	bls.n	800cd6e <ucdr_deserialize_int16_t+0x9a>
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	60a6      	str	r6, [r4, #8]
 800cd30:	1bf6      	subs	r6, r6, r7
 800cd32:	4433      	add	r3, r6
 800cd34:	f1c6 0902 	rsb	r9, r6, #2
 800cd38:	6123      	str	r3, [r4, #16]
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 fa95 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800cd42:	b338      	cbz	r0, 800cd94 <ucdr_deserialize_int16_t+0xc0>
 800cd44:	7d23      	ldrb	r3, [r4, #20]
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d034      	beq.n	800cdb4 <ucdr_deserialize_int16_t+0xe0>
 800cd4a:	787b      	ldrb	r3, [r7, #1]
 800cd4c:	702b      	strb	r3, [r5, #0]
 800cd4e:	783b      	ldrb	r3, [r7, #0]
 800cd50:	706b      	strb	r3, [r5, #1]
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	68a2      	ldr	r2, [r4, #8]
 800cd56:	7da0      	ldrb	r0, [r4, #22]
 800cd58:	2102      	movs	r1, #2
 800cd5a:	3302      	adds	r3, #2
 800cd5c:	444a      	add	r2, r9
 800cd5e:	1b9b      	subs	r3, r3, r6
 800cd60:	7561      	strb	r1, [r4, #21]
 800cd62:	60a2      	str	r2, [r4, #8]
 800cd64:	6123      	str	r3, [r4, #16]
 800cd66:	f080 0001 	eor.w	r0, r0, #1
 800cd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6e:	2102      	movs	r1, #2
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fa7b 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d0cf      	beq.n	800cd1a <ucdr_deserialize_int16_t+0x46>
 800cd7a:	7d23      	ldrb	r3, [r4, #20]
 800cd7c:	68a2      	ldr	r2, [r4, #8]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d015      	beq.n	800cdae <ucdr_deserialize_int16_t+0xda>
 800cd82:	7853      	ldrb	r3, [r2, #1]
 800cd84:	702b      	strb	r3, [r5, #0]
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	706b      	strb	r3, [r5, #1]
 800cd8c:	e7bd      	b.n	800cd0a <ucdr_deserialize_int16_t+0x36>
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	802b      	strh	r3, [r5, #0]
 800cd92:	e7ba      	b.n	800cd0a <ucdr_deserialize_int16_t+0x36>
 800cd94:	68a2      	ldr	r2, [r4, #8]
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	7da0      	ldrb	r0, [r4, #22]
 800cd9a:	f884 8015 	strb.w	r8, [r4, #21]
 800cd9e:	1b92      	subs	r2, r2, r6
 800cda0:	1b9b      	subs	r3, r3, r6
 800cda2:	60a2      	str	r2, [r4, #8]
 800cda4:	6123      	str	r3, [r4, #16]
 800cda6:	f080 0001 	eor.w	r0, r0, #1
 800cdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdae:	8813      	ldrh	r3, [r2, #0]
 800cdb0:	802b      	strh	r3, [r5, #0]
 800cdb2:	e7aa      	b.n	800cd0a <ucdr_deserialize_int16_t+0x36>
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f00b fdca 	bl	8018952 <memcpy>
 800cdbe:	68a1      	ldr	r1, [r4, #8]
 800cdc0:	464a      	mov	r2, r9
 800cdc2:	19a8      	adds	r0, r5, r6
 800cdc4:	f00b fdc5 	bl	8018952 <memcpy>
 800cdc8:	e7c3      	b.n	800cd52 <ucdr_deserialize_int16_t+0x7e>
 800cdca:	bf00      	nop

0800cdcc <ucdr_serialize_int32_t>:
 800cdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	9101      	str	r1, [sp, #4]
 800cdd6:	2104      	movs	r1, #4
 800cdd8:	f000 fa9c 	bl	800d314 <ucdr_buffer_alignment>
 800cddc:	4601      	mov	r1, r0
 800cdde:	4620      	mov	r0, r4
 800cde0:	7d67      	ldrb	r7, [r4, #21]
 800cde2:	f000 fadb 	bl	800d39c <ucdr_advance_buffer>
 800cde6:	2104      	movs	r1, #4
 800cde8:	4620      	mov	r0, r4
 800cdea:	f000 fa33 	bl	800d254 <ucdr_check_buffer_available_for>
 800cdee:	b300      	cbz	r0, 800ce32 <ucdr_serialize_int32_t+0x66>
 800cdf0:	7d22      	ldrb	r2, [r4, #20]
 800cdf2:	68a3      	ldr	r3, [r4, #8]
 800cdf4:	2a01      	cmp	r2, #1
 800cdf6:	d05d      	beq.n	800ceb4 <ucdr_serialize_int32_t+0xe8>
 800cdf8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cdfc:	701a      	strb	r2, [r3, #0]
 800cdfe:	68a3      	ldr	r3, [r4, #8]
 800ce00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce04:	705a      	strb	r2, [r3, #1]
 800ce06:	68a3      	ldr	r3, [r4, #8]
 800ce08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce0c:	709a      	strb	r2, [r3, #2]
 800ce0e:	68a3      	ldr	r3, [r4, #8]
 800ce10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce14:	70da      	strb	r2, [r3, #3]
 800ce16:	68a2      	ldr	r2, [r4, #8]
 800ce18:	6923      	ldr	r3, [r4, #16]
 800ce1a:	3204      	adds	r2, #4
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	2104      	movs	r1, #4
 800ce20:	60a2      	str	r2, [r4, #8]
 800ce22:	6123      	str	r3, [r4, #16]
 800ce24:	7561      	strb	r1, [r4, #21]
 800ce26:	7da0      	ldrb	r0, [r4, #22]
 800ce28:	f080 0001 	eor.w	r0, r0, #1
 800ce2c:	b002      	add	sp, #8
 800ce2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce32:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ce36:	42ab      	cmp	r3, r5
 800ce38:	d92e      	bls.n	800ce98 <ucdr_serialize_int32_t+0xcc>
 800ce3a:	1b5e      	subs	r6, r3, r5
 800ce3c:	60a3      	str	r3, [r4, #8]
 800ce3e:	6923      	ldr	r3, [r4, #16]
 800ce40:	f1c6 0804 	rsb	r8, r6, #4
 800ce44:	4433      	add	r3, r6
 800ce46:	6123      	str	r3, [r4, #16]
 800ce48:	4641      	mov	r1, r8
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 fa0e 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800ce50:	b398      	cbz	r0, 800ceba <ucdr_serialize_int32_t+0xee>
 800ce52:	7d23      	ldrb	r3, [r4, #20]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d046      	beq.n	800cee6 <ucdr_serialize_int32_t+0x11a>
 800ce58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce5c:	702b      	strb	r3, [r5, #0]
 800ce5e:	2e01      	cmp	r6, #1
 800ce60:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce64:	706b      	strb	r3, [r5, #1]
 800ce66:	d035      	beq.n	800ced4 <ucdr_serialize_int32_t+0x108>
 800ce68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce6c:	70ab      	strb	r3, [r5, #2]
 800ce6e:	2e02      	cmp	r6, #2
 800ce70:	d034      	beq.n	800cedc <ucdr_serialize_int32_t+0x110>
 800ce72:	3503      	adds	r5, #3
 800ce74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce78:	702b      	strb	r3, [r5, #0]
 800ce7a:	6923      	ldr	r3, [r4, #16]
 800ce7c:	68a2      	ldr	r2, [r4, #8]
 800ce7e:	7da0      	ldrb	r0, [r4, #22]
 800ce80:	3304      	adds	r3, #4
 800ce82:	4442      	add	r2, r8
 800ce84:	1b9b      	subs	r3, r3, r6
 800ce86:	2104      	movs	r1, #4
 800ce88:	f080 0001 	eor.w	r0, r0, #1
 800ce8c:	60a2      	str	r2, [r4, #8]
 800ce8e:	6123      	str	r3, [r4, #16]
 800ce90:	7561      	strb	r1, [r4, #21]
 800ce92:	b002      	add	sp, #8
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce98:	2104      	movs	r1, #4
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 f9e6 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d0c0      	beq.n	800ce26 <ucdr_serialize_int32_t+0x5a>
 800cea4:	7d23      	ldrb	r3, [r4, #20]
 800cea6:	68a2      	ldr	r2, [r4, #8]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d019      	beq.n	800cee0 <ucdr_serialize_int32_t+0x114>
 800ceac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ceb0:	7013      	strb	r3, [r2, #0]
 800ceb2:	e7a4      	b.n	800cdfe <ucdr_serialize_int32_t+0x32>
 800ceb4:	9a01      	ldr	r2, [sp, #4]
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	e7ad      	b.n	800ce16 <ucdr_serialize_int32_t+0x4a>
 800ceba:	68a2      	ldr	r2, [r4, #8]
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	7da0      	ldrb	r0, [r4, #22]
 800cec0:	7567      	strb	r7, [r4, #21]
 800cec2:	1b92      	subs	r2, r2, r6
 800cec4:	1b9b      	subs	r3, r3, r6
 800cec6:	f080 0001 	eor.w	r0, r0, #1
 800ceca:	60a2      	str	r2, [r4, #8]
 800cecc:	6123      	str	r3, [r4, #16]
 800cece:	b002      	add	sp, #8
 800ced0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced4:	68a3      	ldr	r3, [r4, #8]
 800ced6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ceda:	701a      	strb	r2, [r3, #0]
 800cedc:	68a5      	ldr	r5, [r4, #8]
 800cede:	e7c9      	b.n	800ce74 <ucdr_serialize_int32_t+0xa8>
 800cee0:	9b01      	ldr	r3, [sp, #4]
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	e797      	b.n	800ce16 <ucdr_serialize_int32_t+0x4a>
 800cee6:	4628      	mov	r0, r5
 800cee8:	ad01      	add	r5, sp, #4
 800ceea:	4632      	mov	r2, r6
 800ceec:	4629      	mov	r1, r5
 800ceee:	f00b fd30 	bl	8018952 <memcpy>
 800cef2:	68a0      	ldr	r0, [r4, #8]
 800cef4:	4642      	mov	r2, r8
 800cef6:	19a9      	adds	r1, r5, r6
 800cef8:	f00b fd2b 	bl	8018952 <memcpy>
 800cefc:	e7bd      	b.n	800ce7a <ucdr_serialize_int32_t+0xae>
 800cefe:	bf00      	nop

0800cf00 <ucdr_serialize_endian_int32_t>:
 800cf00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf04:	b083      	sub	sp, #12
 800cf06:	460d      	mov	r5, r1
 800cf08:	2104      	movs	r1, #4
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	9201      	str	r2, [sp, #4]
 800cf0e:	f000 fa01 	bl	800d314 <ucdr_buffer_alignment>
 800cf12:	4601      	mov	r1, r0
 800cf14:	4620      	mov	r0, r4
 800cf16:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cf1a:	f000 fa3f 	bl	800d39c <ucdr_advance_buffer>
 800cf1e:	2104      	movs	r1, #4
 800cf20:	4620      	mov	r0, r4
 800cf22:	f000 f997 	bl	800d254 <ucdr_check_buffer_available_for>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d137      	bne.n	800cf9a <ucdr_serialize_endian_int32_t+0x9a>
 800cf2a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf2e:	42b7      	cmp	r7, r6
 800cf30:	d92e      	bls.n	800cf90 <ucdr_serialize_endian_int32_t+0x90>
 800cf32:	6923      	ldr	r3, [r4, #16]
 800cf34:	60a7      	str	r7, [r4, #8]
 800cf36:	1bbf      	subs	r7, r7, r6
 800cf38:	443b      	add	r3, r7
 800cf3a:	f1c7 0904 	rsb	r9, r7, #4
 800cf3e:	6123      	str	r3, [r4, #16]
 800cf40:	4649      	mov	r1, r9
 800cf42:	4620      	mov	r0, r4
 800cf44:	f000 f992 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d049      	beq.n	800cfe0 <ucdr_serialize_endian_int32_t+0xe0>
 800cf4c:	2d01      	cmp	r5, #1
 800cf4e:	d05b      	beq.n	800d008 <ucdr_serialize_endian_int32_t+0x108>
 800cf50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf54:	7033      	strb	r3, [r6, #0]
 800cf56:	2f01      	cmp	r7, #1
 800cf58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf5c:	7073      	strb	r3, [r6, #1]
 800cf5e:	d04d      	beq.n	800cffc <ucdr_serialize_endian_int32_t+0xfc>
 800cf60:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf64:	70b3      	strb	r3, [r6, #2]
 800cf66:	2f02      	cmp	r7, #2
 800cf68:	d04c      	beq.n	800d004 <ucdr_serialize_endian_int32_t+0x104>
 800cf6a:	3603      	adds	r6, #3
 800cf6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf70:	7033      	strb	r3, [r6, #0]
 800cf72:	6923      	ldr	r3, [r4, #16]
 800cf74:	68a2      	ldr	r2, [r4, #8]
 800cf76:	7da0      	ldrb	r0, [r4, #22]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	444a      	add	r2, r9
 800cf7c:	1bdb      	subs	r3, r3, r7
 800cf7e:	2104      	movs	r1, #4
 800cf80:	f080 0001 	eor.w	r0, r0, #1
 800cf84:	60a2      	str	r2, [r4, #8]
 800cf86:	6123      	str	r3, [r4, #16]
 800cf88:	7561      	strb	r1, [r4, #21]
 800cf8a:	b003      	add	sp, #12
 800cf8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf90:	2104      	movs	r1, #4
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 f96a 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800cf98:	b1c8      	cbz	r0, 800cfce <ucdr_serialize_endian_int32_t+0xce>
 800cf9a:	2d01      	cmp	r5, #1
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	d01c      	beq.n	800cfda <ucdr_serialize_endian_int32_t+0xda>
 800cfa0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cfa4:	701a      	strb	r2, [r3, #0]
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfac:	705a      	strb	r2, [r3, #1]
 800cfae:	68a3      	ldr	r3, [r4, #8]
 800cfb0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cfb4:	709a      	strb	r2, [r3, #2]
 800cfb6:	68a3      	ldr	r3, [r4, #8]
 800cfb8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfbc:	70da      	strb	r2, [r3, #3]
 800cfbe:	68a2      	ldr	r2, [r4, #8]
 800cfc0:	6923      	ldr	r3, [r4, #16]
 800cfc2:	3204      	adds	r2, #4
 800cfc4:	3304      	adds	r3, #4
 800cfc6:	2104      	movs	r1, #4
 800cfc8:	60a2      	str	r2, [r4, #8]
 800cfca:	6123      	str	r3, [r4, #16]
 800cfcc:	7561      	strb	r1, [r4, #21]
 800cfce:	7da0      	ldrb	r0, [r4, #22]
 800cfd0:	f080 0001 	eor.w	r0, r0, #1
 800cfd4:	b003      	add	sp, #12
 800cfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfda:	9a01      	ldr	r2, [sp, #4]
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	e7ee      	b.n	800cfbe <ucdr_serialize_endian_int32_t+0xbe>
 800cfe0:	68a2      	ldr	r2, [r4, #8]
 800cfe2:	6923      	ldr	r3, [r4, #16]
 800cfe4:	7da0      	ldrb	r0, [r4, #22]
 800cfe6:	f884 8015 	strb.w	r8, [r4, #21]
 800cfea:	1bd2      	subs	r2, r2, r7
 800cfec:	1bdb      	subs	r3, r3, r7
 800cfee:	f080 0001 	eor.w	r0, r0, #1
 800cff2:	60a2      	str	r2, [r4, #8]
 800cff4:	6123      	str	r3, [r4, #16]
 800cff6:	b003      	add	sp, #12
 800cff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cffc:	68a3      	ldr	r3, [r4, #8]
 800cffe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d002:	701a      	strb	r2, [r3, #0]
 800d004:	68a6      	ldr	r6, [r4, #8]
 800d006:	e7b1      	b.n	800cf6c <ucdr_serialize_endian_int32_t+0x6c>
 800d008:	ad01      	add	r5, sp, #4
 800d00a:	463a      	mov	r2, r7
 800d00c:	4629      	mov	r1, r5
 800d00e:	4630      	mov	r0, r6
 800d010:	f00b fc9f 	bl	8018952 <memcpy>
 800d014:	68a0      	ldr	r0, [r4, #8]
 800d016:	464a      	mov	r2, r9
 800d018:	19e9      	adds	r1, r5, r7
 800d01a:	f00b fc9a 	bl	8018952 <memcpy>
 800d01e:	e7a8      	b.n	800cf72 <ucdr_serialize_endian_int32_t+0x72>

0800d020 <ucdr_deserialize_int32_t>:
 800d020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d024:	460d      	mov	r5, r1
 800d026:	2104      	movs	r1, #4
 800d028:	4604      	mov	r4, r0
 800d02a:	f000 f973 	bl	800d314 <ucdr_buffer_alignment>
 800d02e:	4601      	mov	r1, r0
 800d030:	4620      	mov	r0, r4
 800d032:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d036:	f000 f9b1 	bl	800d39c <ucdr_advance_buffer>
 800d03a:	2104      	movs	r1, #4
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 f909 	bl	800d254 <ucdr_check_buffer_available_for>
 800d042:	b1d8      	cbz	r0, 800d07c <ucdr_deserialize_int32_t+0x5c>
 800d044:	7d22      	ldrb	r2, [r4, #20]
 800d046:	68a3      	ldr	r3, [r4, #8]
 800d048:	2a01      	cmp	r2, #1
 800d04a:	d052      	beq.n	800d0f2 <ucdr_deserialize_int32_t+0xd2>
 800d04c:	78db      	ldrb	r3, [r3, #3]
 800d04e:	702b      	strb	r3, [r5, #0]
 800d050:	68a3      	ldr	r3, [r4, #8]
 800d052:	789b      	ldrb	r3, [r3, #2]
 800d054:	706b      	strb	r3, [r5, #1]
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	785b      	ldrb	r3, [r3, #1]
 800d05a:	70ab      	strb	r3, [r5, #2]
 800d05c:	68a3      	ldr	r3, [r4, #8]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	70eb      	strb	r3, [r5, #3]
 800d062:	68a2      	ldr	r2, [r4, #8]
 800d064:	6923      	ldr	r3, [r4, #16]
 800d066:	3204      	adds	r2, #4
 800d068:	3304      	adds	r3, #4
 800d06a:	2104      	movs	r1, #4
 800d06c:	60a2      	str	r2, [r4, #8]
 800d06e:	6123      	str	r3, [r4, #16]
 800d070:	7561      	strb	r1, [r4, #21]
 800d072:	7da0      	ldrb	r0, [r4, #22]
 800d074:	f080 0001 	eor.w	r0, r0, #1
 800d078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d07c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d080:	42b7      	cmp	r7, r6
 800d082:	d92a      	bls.n	800d0da <ucdr_deserialize_int32_t+0xba>
 800d084:	6923      	ldr	r3, [r4, #16]
 800d086:	60a7      	str	r7, [r4, #8]
 800d088:	1bbf      	subs	r7, r7, r6
 800d08a:	443b      	add	r3, r7
 800d08c:	f1c7 0904 	rsb	r9, r7, #4
 800d090:	6123      	str	r3, [r4, #16]
 800d092:	4649      	mov	r1, r9
 800d094:	4620      	mov	r0, r4
 800d096:	f000 f8e9 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800d09a:	b368      	cbz	r0, 800d0f8 <ucdr_deserialize_int32_t+0xd8>
 800d09c:	7d23      	ldrb	r3, [r4, #20]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d040      	beq.n	800d124 <ucdr_deserialize_int32_t+0x104>
 800d0a2:	78f3      	ldrb	r3, [r6, #3]
 800d0a4:	702b      	strb	r3, [r5, #0]
 800d0a6:	78b3      	ldrb	r3, [r6, #2]
 800d0a8:	706b      	strb	r3, [r5, #1]
 800d0aa:	2f01      	cmp	r7, #1
 800d0ac:	d031      	beq.n	800d112 <ucdr_deserialize_int32_t+0xf2>
 800d0ae:	7873      	ldrb	r3, [r6, #1]
 800d0b0:	70ab      	strb	r3, [r5, #2]
 800d0b2:	2f02      	cmp	r7, #2
 800d0b4:	f105 0503 	add.w	r5, r5, #3
 800d0b8:	d02f      	beq.n	800d11a <ucdr_deserialize_int32_t+0xfa>
 800d0ba:	7833      	ldrb	r3, [r6, #0]
 800d0bc:	702b      	strb	r3, [r5, #0]
 800d0be:	6923      	ldr	r3, [r4, #16]
 800d0c0:	68a2      	ldr	r2, [r4, #8]
 800d0c2:	7da0      	ldrb	r0, [r4, #22]
 800d0c4:	2104      	movs	r1, #4
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	444a      	add	r2, r9
 800d0ca:	1bdb      	subs	r3, r3, r7
 800d0cc:	7561      	strb	r1, [r4, #21]
 800d0ce:	60a2      	str	r2, [r4, #8]
 800d0d0:	6123      	str	r3, [r4, #16]
 800d0d2:	f080 0001 	eor.w	r0, r0, #1
 800d0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0da:	2104      	movs	r1, #4
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 f8c5 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d0c5      	beq.n	800d072 <ucdr_deserialize_int32_t+0x52>
 800d0e6:	7d23      	ldrb	r3, [r4, #20]
 800d0e8:	68a2      	ldr	r2, [r4, #8]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d017      	beq.n	800d11e <ucdr_deserialize_int32_t+0xfe>
 800d0ee:	78d3      	ldrb	r3, [r2, #3]
 800d0f0:	e7ad      	b.n	800d04e <ucdr_deserialize_int32_t+0x2e>
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	602b      	str	r3, [r5, #0]
 800d0f6:	e7b4      	b.n	800d062 <ucdr_deserialize_int32_t+0x42>
 800d0f8:	68a2      	ldr	r2, [r4, #8]
 800d0fa:	6923      	ldr	r3, [r4, #16]
 800d0fc:	7da0      	ldrb	r0, [r4, #22]
 800d0fe:	f884 8015 	strb.w	r8, [r4, #21]
 800d102:	1bd2      	subs	r2, r2, r7
 800d104:	1bdb      	subs	r3, r3, r7
 800d106:	60a2      	str	r2, [r4, #8]
 800d108:	6123      	str	r3, [r4, #16]
 800d10a:	f080 0001 	eor.w	r0, r0, #1
 800d10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	785b      	ldrb	r3, [r3, #1]
 800d116:	70ab      	strb	r3, [r5, #2]
 800d118:	3503      	adds	r5, #3
 800d11a:	68a6      	ldr	r6, [r4, #8]
 800d11c:	e7cd      	b.n	800d0ba <ucdr_deserialize_int32_t+0x9a>
 800d11e:	6813      	ldr	r3, [r2, #0]
 800d120:	602b      	str	r3, [r5, #0]
 800d122:	e79e      	b.n	800d062 <ucdr_deserialize_int32_t+0x42>
 800d124:	4631      	mov	r1, r6
 800d126:	463a      	mov	r2, r7
 800d128:	4628      	mov	r0, r5
 800d12a:	f00b fc12 	bl	8018952 <memcpy>
 800d12e:	68a1      	ldr	r1, [r4, #8]
 800d130:	464a      	mov	r2, r9
 800d132:	19e8      	adds	r0, r5, r7
 800d134:	f00b fc0d 	bl	8018952 <memcpy>
 800d138:	e7c1      	b.n	800d0be <ucdr_deserialize_int32_t+0x9e>
 800d13a:	bf00      	nop

0800d13c <ucdr_deserialize_endian_int32_t>:
 800d13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d140:	460e      	mov	r6, r1
 800d142:	2104      	movs	r1, #4
 800d144:	4604      	mov	r4, r0
 800d146:	4615      	mov	r5, r2
 800d148:	f000 f8e4 	bl	800d314 <ucdr_buffer_alignment>
 800d14c:	4601      	mov	r1, r0
 800d14e:	4620      	mov	r0, r4
 800d150:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d154:	f000 f922 	bl	800d39c <ucdr_advance_buffer>
 800d158:	2104      	movs	r1, #4
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 f87a 	bl	800d254 <ucdr_check_buffer_available_for>
 800d160:	2800      	cmp	r0, #0
 800d162:	d137      	bne.n	800d1d4 <ucdr_deserialize_endian_int32_t+0x98>
 800d164:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d168:	42bb      	cmp	r3, r7
 800d16a:	d92e      	bls.n	800d1ca <ucdr_deserialize_endian_int32_t+0x8e>
 800d16c:	eba3 0807 	sub.w	r8, r3, r7
 800d170:	60a3      	str	r3, [r4, #8]
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	f1c8 0a04 	rsb	sl, r8, #4
 800d178:	4443      	add	r3, r8
 800d17a:	6123      	str	r3, [r4, #16]
 800d17c:	4651      	mov	r1, sl
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 f874 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800d184:	2800      	cmp	r0, #0
 800d186:	d043      	beq.n	800d210 <ucdr_deserialize_endian_int32_t+0xd4>
 800d188:	2e01      	cmp	r6, #1
 800d18a:	d056      	beq.n	800d23a <ucdr_deserialize_endian_int32_t+0xfe>
 800d18c:	78fb      	ldrb	r3, [r7, #3]
 800d18e:	702b      	strb	r3, [r5, #0]
 800d190:	78bb      	ldrb	r3, [r7, #2]
 800d192:	706b      	strb	r3, [r5, #1]
 800d194:	f1b8 0f01 	cmp.w	r8, #1
 800d198:	d049      	beq.n	800d22e <ucdr_deserialize_endian_int32_t+0xf2>
 800d19a:	787b      	ldrb	r3, [r7, #1]
 800d19c:	70ab      	strb	r3, [r5, #2]
 800d19e:	f1b8 0f02 	cmp.w	r8, #2
 800d1a2:	f105 0503 	add.w	r5, r5, #3
 800d1a6:	d046      	beq.n	800d236 <ucdr_deserialize_endian_int32_t+0xfa>
 800d1a8:	783b      	ldrb	r3, [r7, #0]
 800d1aa:	702b      	strb	r3, [r5, #0]
 800d1ac:	6923      	ldr	r3, [r4, #16]
 800d1ae:	68a2      	ldr	r2, [r4, #8]
 800d1b0:	7da0      	ldrb	r0, [r4, #22]
 800d1b2:	2104      	movs	r1, #4
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	4452      	add	r2, sl
 800d1b8:	eba3 0308 	sub.w	r3, r3, r8
 800d1bc:	7561      	strb	r1, [r4, #21]
 800d1be:	60a2      	str	r2, [r4, #8]
 800d1c0:	6123      	str	r3, [r4, #16]
 800d1c2:	f080 0001 	eor.w	r0, r0, #1
 800d1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ca:	2104      	movs	r1, #4
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f000 f84d 	bl	800d26c <ucdr_check_final_buffer_behavior>
 800d1d2:	b1a8      	cbz	r0, 800d200 <ucdr_deserialize_endian_int32_t+0xc4>
 800d1d4:	2e01      	cmp	r6, #1
 800d1d6:	68a3      	ldr	r3, [r4, #8]
 800d1d8:	d017      	beq.n	800d20a <ucdr_deserialize_endian_int32_t+0xce>
 800d1da:	78db      	ldrb	r3, [r3, #3]
 800d1dc:	702b      	strb	r3, [r5, #0]
 800d1de:	68a3      	ldr	r3, [r4, #8]
 800d1e0:	789b      	ldrb	r3, [r3, #2]
 800d1e2:	706b      	strb	r3, [r5, #1]
 800d1e4:	68a3      	ldr	r3, [r4, #8]
 800d1e6:	785b      	ldrb	r3, [r3, #1]
 800d1e8:	70ab      	strb	r3, [r5, #2]
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	70eb      	strb	r3, [r5, #3]
 800d1f0:	68a2      	ldr	r2, [r4, #8]
 800d1f2:	6923      	ldr	r3, [r4, #16]
 800d1f4:	3204      	adds	r2, #4
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	2104      	movs	r1, #4
 800d1fa:	60a2      	str	r2, [r4, #8]
 800d1fc:	6123      	str	r3, [r4, #16]
 800d1fe:	7561      	strb	r1, [r4, #21]
 800d200:	7da0      	ldrb	r0, [r4, #22]
 800d202:	f080 0001 	eor.w	r0, r0, #1
 800d206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	602b      	str	r3, [r5, #0]
 800d20e:	e7ef      	b.n	800d1f0 <ucdr_deserialize_endian_int32_t+0xb4>
 800d210:	68a2      	ldr	r2, [r4, #8]
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	7da0      	ldrb	r0, [r4, #22]
 800d216:	f884 9015 	strb.w	r9, [r4, #21]
 800d21a:	eba2 0208 	sub.w	r2, r2, r8
 800d21e:	eba3 0308 	sub.w	r3, r3, r8
 800d222:	60a2      	str	r2, [r4, #8]
 800d224:	6123      	str	r3, [r4, #16]
 800d226:	f080 0001 	eor.w	r0, r0, #1
 800d22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22e:	68a3      	ldr	r3, [r4, #8]
 800d230:	785b      	ldrb	r3, [r3, #1]
 800d232:	70ab      	strb	r3, [r5, #2]
 800d234:	3503      	adds	r5, #3
 800d236:	68a7      	ldr	r7, [r4, #8]
 800d238:	e7b6      	b.n	800d1a8 <ucdr_deserialize_endian_int32_t+0x6c>
 800d23a:	4639      	mov	r1, r7
 800d23c:	4642      	mov	r2, r8
 800d23e:	4628      	mov	r0, r5
 800d240:	f00b fb87 	bl	8018952 <memcpy>
 800d244:	68a1      	ldr	r1, [r4, #8]
 800d246:	4652      	mov	r2, sl
 800d248:	eb05 0008 	add.w	r0, r5, r8
 800d24c:	f00b fb81 	bl	8018952 <memcpy>
 800d250:	e7ac      	b.n	800d1ac <ucdr_deserialize_endian_int32_t+0x70>
 800d252:	bf00      	nop

0800d254 <ucdr_check_buffer_available_for>:
 800d254:	7d83      	ldrb	r3, [r0, #22]
 800d256:	b93b      	cbnz	r3, 800d268 <ucdr_check_buffer_available_for+0x14>
 800d258:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d25c:	440b      	add	r3, r1
 800d25e:	4298      	cmp	r0, r3
 800d260:	bf34      	ite	cc
 800d262:	2000      	movcc	r0, #0
 800d264:	2001      	movcs	r0, #1
 800d266:	4770      	bx	lr
 800d268:	2000      	movs	r0, #0
 800d26a:	4770      	bx	lr

0800d26c <ucdr_check_final_buffer_behavior>:
 800d26c:	7d83      	ldrb	r3, [r0, #22]
 800d26e:	b943      	cbnz	r3, 800d282 <ucdr_check_final_buffer_behavior+0x16>
 800d270:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d274:	4291      	cmp	r1, r2
 800d276:	b510      	push	{r4, lr}
 800d278:	4604      	mov	r4, r0
 800d27a:	d205      	bcs.n	800d288 <ucdr_check_final_buffer_behavior+0x1c>
 800d27c:	2301      	movs	r3, #1
 800d27e:	4618      	mov	r0, r3
 800d280:	bd10      	pop	{r4, pc}
 800d282:	2300      	movs	r3, #0
 800d284:	4618      	mov	r0, r3
 800d286:	4770      	bx	lr
 800d288:	6982      	ldr	r2, [r0, #24]
 800d28a:	b13a      	cbz	r2, 800d29c <ucdr_check_final_buffer_behavior+0x30>
 800d28c:	69c1      	ldr	r1, [r0, #28]
 800d28e:	4790      	blx	r2
 800d290:	f080 0301 	eor.w	r3, r0, #1
 800d294:	b2db      	uxtb	r3, r3
 800d296:	75a0      	strb	r0, [r4, #22]
 800d298:	4618      	mov	r0, r3
 800d29a:	bd10      	pop	{r4, pc}
 800d29c:	2001      	movs	r0, #1
 800d29e:	75a0      	strb	r0, [r4, #22]
 800d2a0:	e7fa      	b.n	800d298 <ucdr_check_final_buffer_behavior+0x2c>
 800d2a2:	bf00      	nop

0800d2a4 <ucdr_set_on_full_buffer_callback>:
 800d2a4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop

0800d2ac <ucdr_init_buffer_origin_offset_endian>:
 800d2ac:	b410      	push	{r4}
 800d2ae:	9c01      	ldr	r4, [sp, #4]
 800d2b0:	6001      	str	r1, [r0, #0]
 800d2b2:	440a      	add	r2, r1
 800d2b4:	6042      	str	r2, [r0, #4]
 800d2b6:	190a      	adds	r2, r1, r4
 800d2b8:	441c      	add	r4, r3
 800d2ba:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d2be:	6082      	str	r2, [r0, #8]
 800d2c0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d2c4:	7503      	strb	r3, [r0, #20]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2d0:	7542      	strb	r2, [r0, #21]
 800d2d2:	7582      	strb	r2, [r0, #22]
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop

0800d2d8 <ucdr_init_buffer_origin_offset>:
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	9c04      	ldr	r4, [sp, #16]
 800d2de:	9400      	str	r4, [sp, #0]
 800d2e0:	2401      	movs	r4, #1
 800d2e2:	9401      	str	r4, [sp, #4]
 800d2e4:	f7ff ffe2 	bl	800d2ac <ucdr_init_buffer_origin_offset_endian>
 800d2e8:	b002      	add	sp, #8
 800d2ea:	bd10      	pop	{r4, pc}

0800d2ec <ucdr_init_buffer_origin>:
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	2400      	movs	r4, #0
 800d2f2:	9400      	str	r4, [sp, #0]
 800d2f4:	f7ff fff0 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800d2f8:	b002      	add	sp, #8
 800d2fa:	bd10      	pop	{r4, pc}

0800d2fc <ucdr_init_buffer>:
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f7ff bff5 	b.w	800d2ec <ucdr_init_buffer_origin>
 800d302:	bf00      	nop

0800d304 <ucdr_alignment>:
 800d304:	fbb0 f3f1 	udiv	r3, r0, r1
 800d308:	fb03 0011 	mls	r0, r3, r1, r0
 800d30c:	1a08      	subs	r0, r1, r0
 800d30e:	3901      	subs	r1, #1
 800d310:	4008      	ands	r0, r1
 800d312:	4770      	bx	lr

0800d314 <ucdr_buffer_alignment>:
 800d314:	7d43      	ldrb	r3, [r0, #21]
 800d316:	428b      	cmp	r3, r1
 800d318:	d208      	bcs.n	800d32c <ucdr_buffer_alignment+0x18>
 800d31a:	6900      	ldr	r0, [r0, #16]
 800d31c:	fbb0 f3f1 	udiv	r3, r0, r1
 800d320:	fb01 0013 	mls	r0, r1, r3, r0
 800d324:	1a08      	subs	r0, r1, r0
 800d326:	3901      	subs	r1, #1
 800d328:	4008      	ands	r0, r1
 800d32a:	4770      	bx	lr
 800d32c:	2000      	movs	r0, #0
 800d32e:	4770      	bx	lr

0800d330 <ucdr_align_to>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4604      	mov	r4, r0
 800d334:	460d      	mov	r5, r1
 800d336:	f7ff ffed 	bl	800d314 <ucdr_buffer_alignment>
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	6861      	ldr	r1, [r4, #4]
 800d33e:	6922      	ldr	r2, [r4, #16]
 800d340:	7565      	strb	r5, [r4, #21]
 800d342:	4403      	add	r3, r0
 800d344:	428b      	cmp	r3, r1
 800d346:	bf28      	it	cs
 800d348:	460b      	movcs	r3, r1
 800d34a:	4402      	add	r2, r0
 800d34c:	60a3      	str	r3, [r4, #8]
 800d34e:	6122      	str	r2, [r4, #16]
 800d350:	bd38      	pop	{r3, r4, r5, pc}
 800d352:	bf00      	nop

0800d354 <ucdr_buffer_length>:
 800d354:	6882      	ldr	r2, [r0, #8]
 800d356:	6800      	ldr	r0, [r0, #0]
 800d358:	1a10      	subs	r0, r2, r0
 800d35a:	4770      	bx	lr

0800d35c <ucdr_buffer_remaining>:
 800d35c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d360:	1a10      	subs	r0, r2, r0
 800d362:	4770      	bx	lr

0800d364 <ucdr_check_final_buffer_behavior_array>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	7d83      	ldrb	r3, [r0, #22]
 800d368:	b963      	cbnz	r3, 800d384 <ucdr_check_final_buffer_behavior_array+0x20>
 800d36a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d36e:	429a      	cmp	r2, r3
 800d370:	4604      	mov	r4, r0
 800d372:	460d      	mov	r5, r1
 800d374:	d308      	bcc.n	800d388 <ucdr_check_final_buffer_behavior_array+0x24>
 800d376:	b139      	cbz	r1, 800d388 <ucdr_check_final_buffer_behavior_array+0x24>
 800d378:	6983      	ldr	r3, [r0, #24]
 800d37a:	b163      	cbz	r3, 800d396 <ucdr_check_final_buffer_behavior_array+0x32>
 800d37c:	69c1      	ldr	r1, [r0, #28]
 800d37e:	4798      	blx	r3
 800d380:	75a0      	strb	r0, [r4, #22]
 800d382:	b108      	cbz	r0, 800d388 <ucdr_check_final_buffer_behavior_array+0x24>
 800d384:	2000      	movs	r0, #0
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	4620      	mov	r0, r4
 800d38a:	f7ff ffe7 	bl	800d35c <ucdr_buffer_remaining>
 800d38e:	42a8      	cmp	r0, r5
 800d390:	bf28      	it	cs
 800d392:	4628      	movcs	r0, r5
 800d394:	bd38      	pop	{r3, r4, r5, pc}
 800d396:	2301      	movs	r3, #1
 800d398:	7583      	strb	r3, [r0, #22]
 800d39a:	e7f3      	b.n	800d384 <ucdr_check_final_buffer_behavior_array+0x20>

0800d39c <ucdr_advance_buffer>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4604      	mov	r4, r0
 800d3a0:	460d      	mov	r5, r1
 800d3a2:	f7ff ff57 	bl	800d254 <ucdr_check_buffer_available_for>
 800d3a6:	b178      	cbz	r0, 800d3c8 <ucdr_advance_buffer+0x2c>
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	68a2      	ldr	r2, [r4, #8]
 800d3ac:	442b      	add	r3, r5
 800d3ae:	6123      	str	r3, [r4, #16]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	442a      	add	r2, r5
 800d3b4:	7563      	strb	r3, [r4, #21]
 800d3b6:	60a2      	str	r2, [r4, #8]
 800d3b8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ba:	68a2      	ldr	r2, [r4, #8]
 800d3bc:	6923      	ldr	r3, [r4, #16]
 800d3be:	4402      	add	r2, r0
 800d3c0:	4403      	add	r3, r0
 800d3c2:	1a2d      	subs	r5, r5, r0
 800d3c4:	60a2      	str	r2, [r4, #8]
 800d3c6:	6123      	str	r3, [r4, #16]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f7ff ffc9 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d1f1      	bne.n	800d3ba <ucdr_advance_buffer+0x1e>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	7563      	strb	r3, [r4, #21]
 800d3da:	bd38      	pop	{r3, r4, r5, pc}

0800d3dc <ucdr_serialize_sequence_char>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	460e      	mov	r6, r1
 800d3e0:	4615      	mov	r5, r2
 800d3e2:	7d01      	ldrb	r1, [r0, #20]
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	f7ff f979 	bl	800c6dc <ucdr_serialize_endian_uint32_t>
 800d3ea:	b90d      	cbnz	r5, 800d3f0 <ucdr_serialize_sequence_char+0x14>
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}
 800d3f0:	7d21      	ldrb	r1, [r4, #20]
 800d3f2:	462b      	mov	r3, r5
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3fc:	f008 bd5c 	b.w	8015eb8 <ucdr_serialize_endian_array_char>

0800d400 <ucdr_deserialize_sequence_char>:
 800d400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d404:	461d      	mov	r5, r3
 800d406:	4616      	mov	r6, r2
 800d408:	460f      	mov	r7, r1
 800d40a:	461a      	mov	r2, r3
 800d40c:	7d01      	ldrb	r1, [r0, #20]
 800d40e:	4604      	mov	r4, r0
 800d410:	f7ff fa82 	bl	800c918 <ucdr_deserialize_endian_uint32_t>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	429e      	cmp	r6, r3
 800d418:	d208      	bcs.n	800d42c <ucdr_deserialize_sequence_char+0x2c>
 800d41a:	2201      	movs	r2, #1
 800d41c:	75a2      	strb	r2, [r4, #22]
 800d41e:	7d21      	ldrb	r1, [r4, #20]
 800d420:	463a      	mov	r2, r7
 800d422:	4620      	mov	r0, r4
 800d424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d428:	f008 bd78 	b.w	8015f1c <ucdr_deserialize_endian_array_char>
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1f6      	bne.n	800d41e <ucdr_deserialize_sequence_char+0x1e>
 800d430:	2001      	movs	r0, #1
 800d432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d436:	bf00      	nop

0800d438 <ucdr_serialize_sequence_uint8_t>:
 800d438:	b570      	push	{r4, r5, r6, lr}
 800d43a:	460e      	mov	r6, r1
 800d43c:	4615      	mov	r5, r2
 800d43e:	7d01      	ldrb	r1, [r0, #20]
 800d440:	4604      	mov	r4, r0
 800d442:	f7ff f94b 	bl	800c6dc <ucdr_serialize_endian_uint32_t>
 800d446:	b90d      	cbnz	r5, 800d44c <ucdr_serialize_sequence_uint8_t+0x14>
 800d448:	2001      	movs	r0, #1
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	7d21      	ldrb	r1, [r4, #20]
 800d44e:	462b      	mov	r3, r5
 800d450:	4632      	mov	r2, r6
 800d452:	4620      	mov	r0, r4
 800d454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d458:	f008 bdc4 	b.w	8015fe4 <ucdr_serialize_endian_array_uint8_t>

0800d45c <ucdr_deserialize_sequence_uint8_t>:
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	461d      	mov	r5, r3
 800d462:	4616      	mov	r6, r2
 800d464:	460f      	mov	r7, r1
 800d466:	461a      	mov	r2, r3
 800d468:	7d01      	ldrb	r1, [r0, #20]
 800d46a:	4604      	mov	r4, r0
 800d46c:	f7ff fa54 	bl	800c918 <ucdr_deserialize_endian_uint32_t>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	429e      	cmp	r6, r3
 800d474:	d208      	bcs.n	800d488 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800d476:	2201      	movs	r2, #1
 800d478:	75a2      	strb	r2, [r4, #22]
 800d47a:	7d21      	ldrb	r1, [r4, #20]
 800d47c:	463a      	mov	r2, r7
 800d47e:	4620      	mov	r0, r4
 800d480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d484:	f008 be12 	b.w	80160ac <ucdr_deserialize_endian_array_uint8_t>
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1f6      	bne.n	800d47a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800d48c:	2001      	movs	r0, #1
 800d48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d492:	bf00      	nop

0800d494 <ucdr_serialize_sequence_int32_t>:
 800d494:	b570      	push	{r4, r5, r6, lr}
 800d496:	460e      	mov	r6, r1
 800d498:	4615      	mov	r5, r2
 800d49a:	7d01      	ldrb	r1, [r0, #20]
 800d49c:	4604      	mov	r4, r0
 800d49e:	f7ff f91d 	bl	800c6dc <ucdr_serialize_endian_uint32_t>
 800d4a2:	b90d      	cbnz	r5, 800d4a8 <ucdr_serialize_sequence_int32_t+0x14>
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
 800d4a8:	7d21      	ldrb	r1, [r4, #20]
 800d4aa:	462b      	mov	r3, r5
 800d4ac:	4632      	mov	r2, r6
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4b4:	f008 be2c 	b.w	8016110 <ucdr_serialize_endian_array_int32_t>

0800d4b8 <ucdr_deserialize_sequence_int32_t>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	461d      	mov	r5, r3
 800d4be:	4616      	mov	r6, r2
 800d4c0:	460f      	mov	r7, r1
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	7d01      	ldrb	r1, [r0, #20]
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	f7ff fa26 	bl	800c918 <ucdr_deserialize_endian_uint32_t>
 800d4cc:	682b      	ldr	r3, [r5, #0]
 800d4ce:	429e      	cmp	r6, r3
 800d4d0:	d208      	bcs.n	800d4e4 <ucdr_deserialize_sequence_int32_t+0x2c>
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	75a2      	strb	r2, [r4, #22]
 800d4d6:	7d21      	ldrb	r1, [r4, #20]
 800d4d8:	463a      	mov	r2, r7
 800d4da:	4620      	mov	r0, r4
 800d4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e0:	f008 be6c 	b.w	80161bc <ucdr_deserialize_endian_array_int32_t>
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1f6      	bne.n	800d4d6 <ucdr_deserialize_sequence_int32_t+0x1e>
 800d4e8:	2001      	movs	r0, #1
 800d4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ee:	bf00      	nop

0800d4f0 <uxr_buffer_delete_entity>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	b08e      	sub	sp, #56	@ 0x38
 800d4f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	2204      	movs	r2, #4
 800d500:	ab06      	add	r3, sp, #24
 800d502:	4604      	mov	r4, r0
 800d504:	f001 fae2 	bl	800eacc <uxr_prepare_stream_to_write_submessage>
 800d508:	b918      	cbnz	r0, 800d512 <uxr_buffer_delete_entity+0x22>
 800d50a:	4604      	mov	r4, r0
 800d50c:	4620      	mov	r0, r4
 800d50e:	b00e      	add	sp, #56	@ 0x38
 800d510:	bd10      	pop	{r4, pc}
 800d512:	9902      	ldr	r1, [sp, #8]
 800d514:	aa05      	add	r2, sp, #20
 800d516:	4620      	mov	r0, r4
 800d518:	f001 fc12 	bl	800ed40 <uxr_init_base_object_request>
 800d51c:	a905      	add	r1, sp, #20
 800d51e:	4604      	mov	r4, r0
 800d520:	a806      	add	r0, sp, #24
 800d522:	f003 fa99 	bl	8010a58 <uxr_serialize_DELETE_Payload>
 800d526:	4620      	mov	r0, r4
 800d528:	b00e      	add	sp, #56	@ 0x38
 800d52a:	bd10      	pop	{r4, pc}

0800d52c <uxr_common_create_entity>:
 800d52c:	b510      	push	{r4, lr}
 800d52e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d532:	b08c      	sub	sp, #48	@ 0x30
 800d534:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d538:	f1bc 0f01 	cmp.w	ip, #1
 800d53c:	bf08      	it	eq
 800d53e:	f003 0201 	andeq.w	r2, r3, #1
 800d542:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d546:	bf18      	it	ne
 800d548:	2200      	movne	r2, #0
 800d54a:	330e      	adds	r3, #14
 800d54c:	441a      	add	r2, r3
 800d54e:	2301      	movs	r3, #1
 800d550:	e9cd 3100 	strd	r3, r1, [sp]
 800d554:	b292      	uxth	r2, r2
 800d556:	9903      	ldr	r1, [sp, #12]
 800d558:	ab04      	add	r3, sp, #16
 800d55a:	4604      	mov	r4, r0
 800d55c:	f001 fab6 	bl	800eacc <uxr_prepare_stream_to_write_submessage>
 800d560:	b918      	cbnz	r0, 800d56a <uxr_common_create_entity+0x3e>
 800d562:	4604      	mov	r4, r0
 800d564:	4620      	mov	r0, r4
 800d566:	b00c      	add	sp, #48	@ 0x30
 800d568:	bd10      	pop	{r4, pc}
 800d56a:	9902      	ldr	r1, [sp, #8]
 800d56c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d56e:	4620      	mov	r0, r4
 800d570:	f001 fbe6 	bl	800ed40 <uxr_init_base_object_request>
 800d574:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d576:	4604      	mov	r4, r0
 800d578:	a804      	add	r0, sp, #16
 800d57a:	f003 f9b7 	bl	80108ec <uxr_serialize_CREATE_Payload>
 800d57e:	4620      	mov	r0, r4
 800d580:	b00c      	add	sp, #48	@ 0x30
 800d582:	bd10      	pop	{r4, pc}

0800d584 <uxr_buffer_create_participant_bin>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d58a:	ac11      	add	r4, sp, #68	@ 0x44
 800d58c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d590:	2303      	movs	r3, #3
 800d592:	7223      	strb	r3, [r4, #8]
 800d594:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d596:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d59a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	4605      	mov	r5, r0
 800d5a4:	7122      	strb	r2, [r4, #4]
 800d5a6:	f88d 1014 	strb.w	r1, [sp, #20]
 800d5aa:	b1cb      	cbz	r3, 800d5e0 <uxr_buffer_create_participant_bin+0x5c>
 800d5ac:	f88d 201c 	strb.w	r2, [sp, #28]
 800d5b0:	9308      	str	r3, [sp, #32]
 800d5b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5b6:	a915      	add	r1, sp, #84	@ 0x54
 800d5b8:	a809      	add	r0, sp, #36	@ 0x24
 800d5ba:	f7ff fe9f 	bl	800d2fc <ucdr_init_buffer>
 800d5be:	a905      	add	r1, sp, #20
 800d5c0:	a809      	add	r0, sp, #36	@ 0x24
 800d5c2:	f002 fd9b 	bl	80100fc <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5c8:	9600      	str	r6, [sp, #0]
 800d5ca:	9401      	str	r4, [sp, #4]
 800d5cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d5d0:	60e3      	str	r3, [r4, #12]
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	f7ff ffa9 	bl	800d52c <uxr_common_create_entity>
 800d5da:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	f88d 301c 	strb.w	r3, [sp, #28]
 800d5e4:	e7e5      	b.n	800d5b2 <uxr_buffer_create_participant_bin+0x2e>
 800d5e6:	bf00      	nop

0800d5e8 <uxr_buffer_create_topic_bin>:
 800d5e8:	b570      	push	{r4, r5, r6, lr}
 800d5ea:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	9105      	str	r1, [sp, #20]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	a997      	add	r1, sp, #604	@ 0x25c
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d5fc:	9204      	str	r2, [sp, #16]
 800d5fe:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d602:	f000 fa31 	bl	800da68 <uxr_object_id_to_raw>
 800d606:	2303      	movs	r3, #3
 800d608:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d60c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d60e:	9306      	str	r3, [sp, #24]
 800d610:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d612:	930a      	str	r3, [sp, #40]	@ 0x28
 800d614:	2301      	movs	r3, #1
 800d616:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d61a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d61e:	2300      	movs	r3, #0
 800d620:	a917      	add	r1, sp, #92	@ 0x5c
 800d622:	a80b      	add	r0, sp, #44	@ 0x2c
 800d624:	f88d 301c 	strb.w	r3, [sp, #28]
 800d628:	f7ff fe68 	bl	800d2fc <ucdr_init_buffer>
 800d62c:	a906      	add	r1, sp, #24
 800d62e:	a80b      	add	r0, sp, #44	@ 0x2c
 800d630:	f002 fd86 	bl	8010140 <uxr_serialize_OBJK_Topic_Binary>
 800d634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d636:	9316      	str	r3, [sp, #88]	@ 0x58
 800d638:	ac13      	add	r4, sp, #76	@ 0x4c
 800d63a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d63e:	9600      	str	r6, [sp, #0]
 800d640:	9401      	str	r4, [sp, #4]
 800d642:	b29b      	uxth	r3, r3
 800d644:	4628      	mov	r0, r5
 800d646:	f7ff ff71 	bl	800d52c <uxr_common_create_entity>
 800d64a:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d64e:	bd70      	pop	{r4, r5, r6, pc}

0800d650 <uxr_buffer_create_publisher_bin>:
 800d650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d652:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d656:	4605      	mov	r5, r0
 800d658:	9105      	str	r1, [sp, #20]
 800d65a:	4618      	mov	r0, r3
 800d65c:	2603      	movs	r6, #3
 800d65e:	a992      	add	r1, sp, #584	@ 0x248
 800d660:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d664:	9204      	str	r2, [sp, #16]
 800d666:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d66a:	f000 f9fd 	bl	800da68 <uxr_object_id_to_raw>
 800d66e:	2300      	movs	r3, #0
 800d670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d674:	a912      	add	r1, sp, #72	@ 0x48
 800d676:	a806      	add	r0, sp, #24
 800d678:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d67c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d680:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d684:	f7ff fe3a 	bl	800d2fc <ucdr_init_buffer>
 800d688:	a993      	add	r1, sp, #588	@ 0x24c
 800d68a:	a806      	add	r0, sp, #24
 800d68c:	f002 fe0e 	bl	80102ac <uxr_serialize_OBJK_Publisher_Binary>
 800d690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d692:	9311      	str	r3, [sp, #68]	@ 0x44
 800d694:	ac0e      	add	r4, sp, #56	@ 0x38
 800d696:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d69a:	9700      	str	r7, [sp, #0]
 800d69c:	9401      	str	r4, [sp, #4]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f7ff ff43 	bl	800d52c <uxr_common_create_entity>
 800d6a6:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d6ac <uxr_buffer_create_subscriber_bin>:
 800d6ac:	b570      	push	{r4, r5, r6, lr}
 800d6ae:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	9105      	str	r1, [sp, #20]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	a992      	add	r1, sp, #584	@ 0x248
 800d6ba:	2304      	movs	r3, #4
 800d6bc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800d6c0:	9204      	str	r2, [sp, #16]
 800d6c2:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800d6c6:	f000 f9cf 	bl	800da68 <uxr_object_id_to_raw>
 800d6ca:	2203      	movs	r2, #3
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800d6d2:	a912      	add	r1, sp, #72	@ 0x48
 800d6d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6d8:	a806      	add	r0, sp, #24
 800d6da:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d6de:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d6e2:	f7ff fe0b 	bl	800d2fc <ucdr_init_buffer>
 800d6e6:	a993      	add	r1, sp, #588	@ 0x24c
 800d6e8:	a806      	add	r0, sp, #24
 800d6ea:	f002 fe91 	bl	8010410 <uxr_serialize_OBJK_Subscriber_Binary>
 800d6ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d6f2:	ac0e      	add	r4, sp, #56	@ 0x38
 800d6f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d6f8:	9600      	str	r6, [sp, #0]
 800d6fa:	9401      	str	r4, [sp, #4]
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	4628      	mov	r0, r5
 800d700:	f7ff ff14 	bl	800d52c <uxr_common_create_entity>
 800d704:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800d708:	bd70      	pop	{r4, r5, r6, pc}
 800d70a:	bf00      	nop

0800d70c <uxr_buffer_create_datawriter_bin>:
 800d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d70e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d712:	ac1d      	add	r4, sp, #116	@ 0x74
 800d714:	9105      	str	r1, [sp, #20]
 800d716:	4605      	mov	r5, r0
 800d718:	a9a1      	add	r1, sp, #644	@ 0x284
 800d71a:	4618      	mov	r0, r3
 800d71c:	2305      	movs	r3, #5
 800d71e:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800d722:	9204      	str	r2, [sp, #16]
 800d724:	7123      	strb	r3, [r4, #4]
 800d726:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800d72a:	f000 f99d 	bl	800da68 <uxr_object_id_to_raw>
 800d72e:	2303      	movs	r3, #3
 800d730:	a90e      	add	r1, sp, #56	@ 0x38
 800d732:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d734:	7223      	strb	r3, [r4, #8]
 800d736:	f000 f997 	bl	800da68 <uxr_object_id_to_raw>
 800d73a:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800d73e:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800d742:	2200      	movs	r2, #0
 800d744:	3f00      	subs	r7, #0
 800d746:	fab3 f383 	clz	r3, r3
 800d74a:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800d74e:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800d752:	bf18      	it	ne
 800d754:	2701      	movne	r7, #1
 800d756:	095b      	lsrs	r3, r3, #5
 800d758:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800d75c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800d760:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800d764:	2201      	movs	r2, #1
 800d766:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800d76a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d76e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800d772:	b919      	cbnz	r1, 800d77c <uxr_buffer_create_datawriter_bin+0x70>
 800d774:	f043 0302 	orr.w	r3, r3, #2
 800d778:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d77c:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800d780:	2a01      	cmp	r2, #1
 800d782:	d022      	beq.n	800d7ca <uxr_buffer_create_datawriter_bin+0xbe>
 800d784:	2a03      	cmp	r2, #3
 800d786:	d01b      	beq.n	800d7c0 <uxr_buffer_create_datawriter_bin+0xb4>
 800d788:	b91a      	cbnz	r2, 800d792 <uxr_buffer_create_datawriter_bin+0x86>
 800d78a:	f043 0308 	orr.w	r3, r3, #8
 800d78e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d796:	a921      	add	r1, sp, #132	@ 0x84
 800d798:	a806      	add	r0, sp, #24
 800d79a:	f7ff fdaf 	bl	800d2fc <ucdr_init_buffer>
 800d79e:	a90e      	add	r1, sp, #56	@ 0x38
 800d7a0:	a806      	add	r0, sp, #24
 800d7a2:	f002 fed7 	bl	8010554 <uxr_serialize_OBJK_DataWriter_Binary>
 800d7a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7a8:	9600      	str	r6, [sp, #0]
 800d7aa:	9401      	str	r4, [sp, #4]
 800d7ac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d7b0:	60e3      	str	r3, [r4, #12]
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f7ff feb9 	bl	800d52c <uxr_common_create_entity>
 800d7ba:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c0:	f043 0320 	orr.w	r3, r3, #32
 800d7c4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d7c8:	e7e3      	b.n	800d792 <uxr_buffer_create_datawriter_bin+0x86>
 800d7ca:	f043 0310 	orr.w	r3, r3, #16
 800d7ce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d7d2:	e7de      	b.n	800d792 <uxr_buffer_create_datawriter_bin+0x86>

0800d7d4 <uxr_buffer_create_datareader_bin>:
 800d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7d6:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800d7da:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d7dc:	9105      	str	r1, [sp, #20]
 800d7de:	4605      	mov	r5, r0
 800d7e0:	a9a3      	add	r1, sp, #652	@ 0x28c
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	2306      	movs	r3, #6
 800d7e6:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800d7ea:	9204      	str	r2, [sp, #16]
 800d7ec:	7123      	strb	r3, [r4, #4]
 800d7ee:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800d7f2:	f000 f939 	bl	800da68 <uxr_object_id_to_raw>
 800d7f6:	2303      	movs	r3, #3
 800d7f8:	a90e      	add	r1, sp, #56	@ 0x38
 800d7fa:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800d7fc:	7223      	strb	r3, [r4, #8]
 800d7fe:	f000 f933 	bl	800da68 <uxr_object_id_to_raw>
 800d802:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800d806:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800d80a:	2200      	movs	r2, #0
 800d80c:	3f00      	subs	r7, #0
 800d80e:	fab3 f383 	clz	r3, r3
 800d812:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800d816:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800d81a:	bf18      	it	ne
 800d81c:	2701      	movne	r7, #1
 800d81e:	095b      	lsrs	r3, r3, #5
 800d820:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800d824:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800d828:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800d82c:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800d830:	2201      	movs	r2, #1
 800d832:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800d836:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d83a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800d83e:	b919      	cbnz	r1, 800d848 <uxr_buffer_create_datareader_bin+0x74>
 800d840:	f043 0302 	orr.w	r3, r3, #2
 800d844:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d848:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800d84c:	2a01      	cmp	r2, #1
 800d84e:	d022      	beq.n	800d896 <uxr_buffer_create_datareader_bin+0xc2>
 800d850:	2a03      	cmp	r2, #3
 800d852:	d01b      	beq.n	800d88c <uxr_buffer_create_datareader_bin+0xb8>
 800d854:	b91a      	cbnz	r2, 800d85e <uxr_buffer_create_datareader_bin+0x8a>
 800d856:	f043 0308 	orr.w	r3, r3, #8
 800d85a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d85e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d862:	a923      	add	r1, sp, #140	@ 0x8c
 800d864:	a806      	add	r0, sp, #24
 800d866:	f7ff fd49 	bl	800d2fc <ucdr_init_buffer>
 800d86a:	a90e      	add	r1, sp, #56	@ 0x38
 800d86c:	a806      	add	r0, sp, #24
 800d86e:	f002 fe35 	bl	80104dc <uxr_serialize_OBJK_DataReader_Binary>
 800d872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d874:	9600      	str	r6, [sp, #0]
 800d876:	9401      	str	r4, [sp, #4]
 800d878:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d87c:	60e3      	str	r3, [r4, #12]
 800d87e:	4628      	mov	r0, r5
 800d880:	b29b      	uxth	r3, r3
 800d882:	f7ff fe53 	bl	800d52c <uxr_common_create_entity>
 800d886:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800d88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d88c:	f043 0320 	orr.w	r3, r3, #32
 800d890:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d894:	e7e3      	b.n	800d85e <uxr_buffer_create_datareader_bin+0x8a>
 800d896:	f043 0310 	orr.w	r3, r3, #16
 800d89a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d89e:	e7de      	b.n	800d85e <uxr_buffer_create_datareader_bin+0x8a>

0800d8a0 <get_custom_error>:
 800d8a0:	4b01      	ldr	r3, [pc, #4]	@ (800d8a8 <get_custom_error+0x8>)
 800d8a2:	7818      	ldrb	r0, [r3, #0]
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	2000ebc8 	.word	0x2000ebc8

0800d8ac <recv_custom_msg>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	b089      	sub	sp, #36	@ 0x24
 800d8b2:	4693      	mov	fp, r2
 800d8b4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800d8b8:	9104      	str	r1, [sp, #16]
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800d8c0:	9305      	str	r3, [sp, #20]
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	f88d 101e 	strb.w	r1, [sp, #30]
 800d8c8:	b332      	cbz	r2, 800d918 <recv_custom_msg+0x6c>
 800d8ca:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800d8ce:	f10d 091f 	add.w	r9, sp, #31
 800d8d2:	f10d 0814 	add.w	r8, sp, #20
 800d8d6:	f10d 071e 	add.w	r7, sp, #30
 800d8da:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800d8de:	e004      	b.n	800d8ea <recv_custom_msg+0x3e>
 800d8e0:	9b05      	ldr	r3, [sp, #20]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	dd10      	ble.n	800d908 <recv_custom_msg+0x5c>
 800d8e6:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800d8ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d8ee:	e9cd 6700 	strd	r6, r7, [sp]
 800d8f2:	4623      	mov	r3, r4
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	4650      	mov	r0, sl
 800d8fa:	f001 fc33 	bl	800f164 <uxr_read_framed_msg>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d0ee      	beq.n	800d8e0 <recv_custom_msg+0x34>
 800d902:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d906:	b1a3      	cbz	r3, 800d932 <recv_custom_msg+0x86>
 800d908:	4b0e      	ldr	r3, [pc, #56]	@ (800d944 <recv_custom_msg+0x98>)
 800d90a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d90e:	701a      	strb	r2, [r3, #0]
 800d910:	2000      	movs	r0, #0
 800d912:	b009      	add	sp, #36	@ 0x24
 800d914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d918:	f10d 021f 	add.w	r2, sp, #31
 800d91c:	9200      	str	r2, [sp, #0]
 800d91e:	4601      	mov	r1, r0
 800d920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d924:	47a8      	blx	r5
 800d926:	2800      	cmp	r0, #0
 800d928:	d0ee      	beq.n	800d908 <recv_custom_msg+0x5c>
 800d92a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1ea      	bne.n	800d908 <recv_custom_msg+0x5c>
 800d932:	9b04      	ldr	r3, [sp, #16]
 800d934:	f8cb 0000 	str.w	r0, [fp]
 800d938:	2001      	movs	r0, #1
 800d93a:	601c      	str	r4, [r3, #0]
 800d93c:	b009      	add	sp, #36	@ 0x24
 800d93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d942:	bf00      	nop
 800d944:	2000ebc8 	.word	0x2000ebc8

0800d948 <send_custom_msg>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800d94e:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d952:	b086      	sub	sp, #24
 800d954:	4616      	mov	r6, r2
 800d956:	b965      	cbnz	r5, 800d972 <send_custom_msg+0x2a>
 800d958:	f10d 0317 	add.w	r3, sp, #23
 800d95c:	47a0      	blx	r4
 800d95e:	b108      	cbz	r0, 800d964 <send_custom_msg+0x1c>
 800d960:	42b0      	cmp	r0, r6
 800d962:	d014      	beq.n	800d98e <send_custom_msg+0x46>
 800d964:	4b0b      	ldr	r3, [pc, #44]	@ (800d994 <send_custom_msg+0x4c>)
 800d966:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d96a:	701a      	strb	r2, [r3, #0]
 800d96c:	2000      	movs	r0, #0
 800d96e:	b006      	add	sp, #24
 800d970:	bd70      	pop	{r4, r5, r6, pc}
 800d972:	f10d 0217 	add.w	r2, sp, #23
 800d976:	9202      	str	r2, [sp, #8]
 800d978:	2200      	movs	r2, #0
 800d97a:	e9cd 6200 	strd	r6, r2, [sp]
 800d97e:	460b      	mov	r3, r1
 800d980:	4602      	mov	r2, r0
 800d982:	4621      	mov	r1, r4
 800d984:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d988:	f001 fa0e 	bl	800eda8 <uxr_write_framed_msg>
 800d98c:	e7e7      	b.n	800d95e <send_custom_msg+0x16>
 800d98e:	2001      	movs	r0, #1
 800d990:	b006      	add	sp, #24
 800d992:	bd70      	pop	{r4, r5, r6, pc}
 800d994:	2000ebc8 	.word	0x2000ebc8

0800d998 <uxr_set_custom_transport_callbacks>:
 800d998:	b410      	push	{r4}
 800d99a:	9c01      	ldr	r4, [sp, #4]
 800d99c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800d9a0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d9a4:	9b02      	ldr	r3, [sp, #8]
 800d9a6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d9aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ae:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800d9b2:	4770      	bx	lr

0800d9b4 <uxr_init_custom_transport>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d9ba:	b303      	cbz	r3, 800d9fe <uxr_init_custom_transport+0x4a>
 800d9bc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	b1e2      	cbz	r2, 800d9fe <uxr_init_custom_transport+0x4a>
 800d9c4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d9c8:	b1ca      	cbz	r2, 800d9fe <uxr_init_custom_transport+0x4a>
 800d9ca:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d9ce:	b1b2      	cbz	r2, 800d9fe <uxr_init_custom_transport+0x4a>
 800d9d0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d9d4:	4798      	blx	r3
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	b188      	cbz	r0, 800d9fe <uxr_init_custom_transport+0x4a>
 800d9da:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d9de:	b98b      	cbnz	r3, 800da04 <uxr_init_custom_transport+0x50>
 800d9e0:	490b      	ldr	r1, [pc, #44]	@ (800da10 <uxr_init_custom_transport+0x5c>)
 800d9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800da14 <uxr_init_custom_transport+0x60>)
 800d9e4:	4a0c      	ldr	r2, [pc, #48]	@ (800da18 <uxr_init_custom_transport+0x64>)
 800d9e6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800d9ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9ee:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800d9f2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d9f6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	2500      	movs	r5, #0
 800da00:	4628      	mov	r0, r5
 800da02:	bd38      	pop	{r3, r4, r5, pc}
 800da04:	2100      	movs	r1, #0
 800da06:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800da0a:	f001 f9c7 	bl	800ed9c <uxr_init_framing_io>
 800da0e:	e7e7      	b.n	800d9e0 <uxr_init_custom_transport+0x2c>
 800da10:	0800d949 	.word	0x0800d949
 800da14:	0800d8ad 	.word	0x0800d8ad
 800da18:	0800d8a1 	.word	0x0800d8a1

0800da1c <uxr_close_custom_transport>:
 800da1c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800da20:	4718      	bx	r3
 800da22:	bf00      	nop

0800da24 <uxr_object_id>:
 800da24:	b082      	sub	sp, #8
 800da26:	2300      	movs	r3, #0
 800da28:	f88d 1006 	strb.w	r1, [sp, #6]
 800da2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800da30:	f360 030f 	bfi	r3, r0, #0, #16
 800da34:	f362 431f 	bfi	r3, r2, #16, #16
 800da38:	4618      	mov	r0, r3
 800da3a:	b002      	add	sp, #8
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop

0800da40 <uxr_object_id_from_raw>:
 800da40:	7843      	ldrb	r3, [r0, #1]
 800da42:	7801      	ldrb	r1, [r0, #0]
 800da44:	b082      	sub	sp, #8
 800da46:	f003 020f 	and.w	r2, r3, #15
 800da4a:	f88d 2006 	strb.w	r2, [sp, #6]
 800da4e:	091b      	lsrs	r3, r3, #4
 800da50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800da54:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800da58:	2000      	movs	r0, #0
 800da5a:	f363 000f 	bfi	r0, r3, #0, #16
 800da5e:	f362 401f 	bfi	r0, r2, #16, #16
 800da62:	b002      	add	sp, #8
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop

0800da68 <uxr_object_id_to_raw>:
 800da68:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800da6c:	b082      	sub	sp, #8
 800da6e:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800da72:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800da76:	700a      	strb	r2, [r1, #0]
 800da78:	704b      	strb	r3, [r1, #1]
 800da7a:	b002      	add	sp, #8
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop

0800da80 <uxr_ping_agent_session>:
 800da80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da84:	4616      	mov	r6, r2
 800da86:	b091      	sub	sp, #68	@ 0x44
 800da88:	2210      	movs	r2, #16
 800da8a:	4605      	mov	r5, r0
 800da8c:	460f      	mov	r7, r1
 800da8e:	a808      	add	r0, sp, #32
 800da90:	eb0d 0102 	add.w	r1, sp, r2
 800da94:	f7ff fc32 	bl	800d2fc <ucdr_init_buffer>
 800da98:	4b20      	ldr	r3, [pc, #128]	@ (800db1c <uxr_ping_agent_session+0x9c>)
 800da9a:	2400      	movs	r4, #0
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800daa2:	9400      	str	r4, [sp, #0]
 800daa4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800daa8:	f04f 0802 	mov.w	r8, #2
 800daac:	7829      	ldrb	r1, [r5, #0]
 800daae:	f8ad 3008 	strh.w	r3, [sp, #8]
 800dab2:	4622      	mov	r2, r4
 800dab4:	4623      	mov	r3, r4
 800dab6:	a808      	add	r0, sp, #32
 800dab8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dabc:	f002 f8ee 	bl	800fc9c <uxr_serialize_message_header>
 800dac0:	4641      	mov	r1, r8
 800dac2:	4623      	mov	r3, r4
 800dac4:	2208      	movs	r2, #8
 800dac6:	a808      	add	r0, sp, #32
 800dac8:	f001 feea 	bl	800f8a0 <uxr_buffer_submessage_header>
 800dacc:	a902      	add	r1, sp, #8
 800dace:	4680      	mov	r8, r0
 800dad0:	a808      	add	r0, sp, #32
 800dad2:	f002 ff99 	bl	8010a08 <uxr_serialize_GET_INFO_Payload>
 800dad6:	f1b8 0f00 	cmp.w	r8, #0
 800dada:	d000      	beq.n	800dade <uxr_ping_agent_session+0x5e>
 800dadc:	b918      	cbnz	r0, 800dae6 <uxr_ping_agent_session+0x66>
 800dade:	2000      	movs	r0, #0
 800dae0:	b011      	add	sp, #68	@ 0x44
 800dae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae6:	a808      	add	r0, sp, #32
 800dae8:	f7ff fc34 	bl	800d354 <ucdr_buffer_length>
 800daec:	4680      	mov	r8, r0
 800daee:	2e00      	cmp	r6, #0
 800daf0:	d0f5      	beq.n	800dade <uxr_ping_agent_session+0x5e>
 800daf2:	46a1      	mov	r9, r4
 800daf4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800daf6:	4642      	mov	r2, r8
 800daf8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dafc:	a904      	add	r1, sp, #16
 800dafe:	47a0      	blx	r4
 800db00:	4639      	mov	r1, r7
 800db02:	4604      	mov	r4, r0
 800db04:	4628      	mov	r0, r5
 800db06:	f000 fdd5 	bl	800e6b4 <uxr_run_session_until_pong>
 800db0a:	4020      	ands	r0, r4
 800db0c:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800db10:	f109 0901 	add.w	r9, r9, #1
 800db14:	d1e4      	bne.n	800dae0 <uxr_ping_agent_session+0x60>
 800db16:	454e      	cmp	r6, r9
 800db18:	d1ec      	bne.n	800daf4 <uxr_ping_agent_session+0x74>
 800db1a:	e7e0      	b.n	800dade <uxr_ping_agent_session+0x5e>
 800db1c:	0801965c 	.word	0x0801965c

0800db20 <uxr_ping_agent_attempts>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	b0d3      	sub	sp, #332	@ 0x14c
 800db26:	4606      	mov	r6, r0
 800db28:	4688      	mov	r8, r1
 800db2a:	a810      	add	r0, sp, #64	@ 0x40
 800db2c:	a90c      	add	r1, sp, #48	@ 0x30
 800db2e:	4692      	mov	sl, r2
 800db30:	2210      	movs	r2, #16
 800db32:	f7ff fbe3 	bl	800d2fc <ucdr_init_buffer>
 800db36:	4b56      	ldr	r3, [pc, #344]	@ (800dc90 <uxr_ping_agent_attempts+0x170>)
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800db3e:	2400      	movs	r4, #0
 800db40:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800db44:	2502      	movs	r5, #2
 800db46:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800db4a:	4622      	mov	r2, r4
 800db4c:	4623      	mov	r3, r4
 800db4e:	2180      	movs	r1, #128	@ 0x80
 800db50:	a810      	add	r0, sp, #64	@ 0x40
 800db52:	9400      	str	r4, [sp, #0]
 800db54:	9521      	str	r5, [sp, #132]	@ 0x84
 800db56:	f002 f8a1 	bl	800fc9c <uxr_serialize_message_header>
 800db5a:	4629      	mov	r1, r5
 800db5c:	4623      	mov	r3, r4
 800db5e:	2208      	movs	r2, #8
 800db60:	a810      	add	r0, sp, #64	@ 0x40
 800db62:	f001 fe9d 	bl	800f8a0 <uxr_buffer_submessage_header>
 800db66:	a920      	add	r1, sp, #128	@ 0x80
 800db68:	4605      	mov	r5, r0
 800db6a:	a810      	add	r0, sp, #64	@ 0x40
 800db6c:	f002 ff4c 	bl	8010a08 <uxr_serialize_GET_INFO_Payload>
 800db70:	4005      	ands	r5, r0
 800db72:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800db76:	d104      	bne.n	800db82 <uxr_ping_agent_attempts+0x62>
 800db78:	2500      	movs	r5, #0
 800db7a:	4628      	mov	r0, r5
 800db7c:	b053      	add	sp, #332	@ 0x14c
 800db7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db82:	a810      	add	r0, sp, #64	@ 0x40
 800db84:	f7ff fbe6 	bl	800d354 <ucdr_buffer_length>
 800db88:	9004      	str	r0, [sp, #16]
 800db8a:	f1ba 0f00 	cmp.w	sl, #0
 800db8e:	d0f3      	beq.n	800db78 <uxr_ping_agent_attempts+0x58>
 800db90:	9505      	str	r5, [sp, #20]
 800db92:	46a1      	mov	r9, r4
 800db94:	4627      	mov	r7, r4
 800db96:	4655      	mov	r5, sl
 800db98:	e9d6 0300 	ldrd	r0, r3, [r6]
 800db9c:	9a04      	ldr	r2, [sp, #16]
 800db9e:	a90c      	add	r1, sp, #48	@ 0x30
 800dba0:	4798      	blx	r3
 800dba2:	f001 fec3 	bl	800f92c <uxr_millis>
 800dba6:	46c2      	mov	sl, r8
 800dba8:	4604      	mov	r4, r0
 800dbaa:	9503      	str	r5, [sp, #12]
 800dbac:	6830      	ldr	r0, [r6, #0]
 800dbae:	68b5      	ldr	r5, [r6, #8]
 800dbb0:	9708      	str	r7, [sp, #32]
 800dbb2:	4643      	mov	r3, r8
 800dbb4:	aa09      	add	r2, sp, #36	@ 0x24
 800dbb6:	a908      	add	r1, sp, #32
 800dbb8:	47a8      	blx	r5
 800dbba:	4683      	mov	fp, r0
 800dbbc:	b998      	cbnz	r0, 800dbe6 <uxr_ping_agent_attempts+0xc6>
 800dbbe:	f001 feb5 	bl	800f92c <uxr_millis>
 800dbc2:	1b00      	subs	r0, r0, r4
 800dbc4:	ebaa 0a00 	sub.w	sl, sl, r0
 800dbc8:	f001 feb0 	bl	800f92c <uxr_millis>
 800dbcc:	f1ba 0f00 	cmp.w	sl, #0
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	dceb      	bgt.n	800dbac <uxr_ping_agent_attempts+0x8c>
 800dbd4:	9d03      	ldr	r5, [sp, #12]
 800dbd6:	f109 0901 	add.w	r9, r9, #1
 800dbda:	f1bb 0f00 	cmp.w	fp, #0
 800dbde:	d12a      	bne.n	800dc36 <uxr_ping_agent_attempts+0x116>
 800dbe0:	45a9      	cmp	r9, r5
 800dbe2:	d1d9      	bne.n	800db98 <uxr_ping_agent_attempts+0x78>
 800dbe4:	e7c8      	b.n	800db78 <uxr_ping_agent_attempts+0x58>
 800dbe6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800dbea:	a818      	add	r0, sp, #96	@ 0x60
 800dbec:	f7ff fb86 	bl	800d2fc <ucdr_init_buffer>
 800dbf0:	ab07      	add	r3, sp, #28
 800dbf2:	f10d 0219 	add.w	r2, sp, #25
 800dbf6:	a918      	add	r1, sp, #96	@ 0x60
 800dbf8:	a80a      	add	r0, sp, #40	@ 0x28
 800dbfa:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 800dbfe:	f001 f859 	bl	800ecb4 <uxr_read_session_header>
 800dc02:	22c8      	movs	r2, #200	@ 0xc8
 800dc04:	2100      	movs	r1, #0
 800dc06:	a820      	add	r0, sp, #128	@ 0x80
 800dc08:	f00a fdc8 	bl	801879c <memset>
 800dc0c:	a818      	add	r0, sp, #96	@ 0x60
 800dc0e:	f7ff fba5 	bl	800d35c <ucdr_buffer_remaining>
 800dc12:	2804      	cmp	r0, #4
 800dc14:	d814      	bhi.n	800dc40 <uxr_ping_agent_attempts+0x120>
 800dc16:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 800dc1a:	f001 fe87 	bl	800f92c <uxr_millis>
 800dc1e:	1b00      	subs	r0, r0, r4
 800dc20:	ebaa 0a00 	sub.w	sl, sl, r0
 800dc24:	f001 fe82 	bl	800f92c <uxr_millis>
 800dc28:	f1ba 0f00 	cmp.w	sl, #0
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	dd28      	ble.n	800dc82 <uxr_ping_agent_attempts+0x162>
 800dc30:	f1bb 0f00 	cmp.w	fp, #0
 800dc34:	d0ba      	beq.n	800dbac <uxr_ping_agent_attempts+0x8c>
 800dc36:	9d05      	ldr	r5, [sp, #20]
 800dc38:	4628      	mov	r0, r5
 800dc3a:	b053      	add	sp, #332	@ 0x14c
 800dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc40:	f10d 031e 	add.w	r3, sp, #30
 800dc44:	f10d 021b 	add.w	r2, sp, #27
 800dc48:	f10d 011a 	add.w	r1, sp, #26
 800dc4c:	a818      	add	r0, sp, #96	@ 0x60
 800dc4e:	f88d 701a 	strb.w	r7, [sp, #26]
 800dc52:	f88d 701b 	strb.w	r7, [sp, #27]
 800dc56:	f8ad 701e 	strh.w	r7, [sp, #30]
 800dc5a:	f002 f86f 	bl	800fd3c <uxr_deserialize_submessage_header>
 800dc5e:	a818      	add	r0, sp, #96	@ 0x60
 800dc60:	f7ff fb7c 	bl	800d35c <ucdr_buffer_remaining>
 800dc64:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800dc68:	4298      	cmp	r0, r3
 800dc6a:	d3d4      	bcc.n	800dc16 <uxr_ping_agent_attempts+0xf6>
 800dc6c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800dc70:	2b06      	cmp	r3, #6
 800dc72:	d1d0      	bne.n	800dc16 <uxr_ping_agent_attempts+0xf6>
 800dc74:	a918      	add	r1, sp, #96	@ 0x60
 800dc76:	a820      	add	r0, sp, #128	@ 0x80
 800dc78:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 800dc7c:	f000 f974 	bl	800df68 <read_submessage_info>
 800dc80:	e7c9      	b.n	800dc16 <uxr_ping_agent_attempts+0xf6>
 800dc82:	f1bb 0b00 	subs.w	fp, fp, #0
 800dc86:	9d03      	ldr	r5, [sp, #12]
 800dc88:	bf18      	it	ne
 800dc8a:	f04f 0b01 	movne.w	fp, #1
 800dc8e:	e7a2      	b.n	800dbd6 <uxr_ping_agent_attempts+0xb6>
 800dc90:	0801965c 	.word	0x0801965c

0800dc94 <on_get_fragmentation_info>:
 800dc94:	b500      	push	{lr}
 800dc96:	b08b      	sub	sp, #44	@ 0x2c
 800dc98:	4601      	mov	r1, r0
 800dc9a:	2204      	movs	r2, #4
 800dc9c:	a802      	add	r0, sp, #8
 800dc9e:	f7ff fb2d 	bl	800d2fc <ucdr_init_buffer>
 800dca2:	f10d 0305 	add.w	r3, sp, #5
 800dca6:	f10d 0206 	add.w	r2, sp, #6
 800dcaa:	a901      	add	r1, sp, #4
 800dcac:	a802      	add	r0, sp, #8
 800dcae:	f001 fe11 	bl	800f8d4 <uxr_read_submessage_header>
 800dcb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dcb6:	2b0d      	cmp	r3, #13
 800dcb8:	d003      	beq.n	800dcc2 <on_get_fragmentation_info+0x2e>
 800dcba:	2000      	movs	r0, #0
 800dcbc:	b00b      	add	sp, #44	@ 0x2c
 800dcbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcc6:	f013 0f02 	tst.w	r3, #2
 800dcca:	bf0c      	ite	eq
 800dccc:	2001      	moveq	r0, #1
 800dcce:	2002      	movne	r0, #2
 800dcd0:	b00b      	add	sp, #44	@ 0x2c
 800dcd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcd6:	bf00      	nop

0800dcd8 <read_submessage_get_info>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	2500      	movs	r5, #0
 800dcdc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800dce0:	4604      	mov	r4, r0
 800dce2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800dce6:	460e      	mov	r6, r1
 800dce8:	a810      	add	r0, sp, #64	@ 0x40
 800dcea:	4629      	mov	r1, r5
 800dcec:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800dcf0:	f00a fd54 	bl	801879c <memset>
 800dcf4:	a903      	add	r1, sp, #12
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f002 fe9a 	bl	8010a30 <uxr_deserialize_GET_INFO_Payload>
 800dcfc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800dd00:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dd04:	4620      	mov	r0, r4
 800dd06:	f001 f813 	bl	800ed30 <uxr_session_header_offset>
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	9000      	str	r0, [sp, #0]
 800dd0e:	220c      	movs	r2, #12
 800dd10:	a905      	add	r1, sp, #20
 800dd12:	a808      	add	r0, sp, #32
 800dd14:	f7ff fae0 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800dd18:	a910      	add	r1, sp, #64	@ 0x40
 800dd1a:	a808      	add	r0, sp, #32
 800dd1c:	f002 fefa 	bl	8010b14 <uxr_serialize_INFO_Payload>
 800dd20:	9b08      	ldr	r3, [sp, #32]
 800dd22:	462a      	mov	r2, r5
 800dd24:	4629      	mov	r1, r5
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 ffae 	bl	800ec88 <uxr_stamp_session_header>
 800dd2c:	a808      	add	r0, sp, #32
 800dd2e:	f7ff fb11 	bl	800d354 <ucdr_buffer_length>
 800dd32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd34:	4602      	mov	r2, r0
 800dd36:	a905      	add	r1, sp, #20
 800dd38:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dd3c:	47a0      	blx	r4
 800dd3e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800dd42:	bd70      	pop	{r4, r5, r6, pc}

0800dd44 <write_submessage_acknack.isra.0>:
 800dd44:	b570      	push	{r4, r5, r6, lr}
 800dd46:	b092      	sub	sp, #72	@ 0x48
 800dd48:	4605      	mov	r5, r0
 800dd4a:	460e      	mov	r6, r1
 800dd4c:	4614      	mov	r4, r2
 800dd4e:	f000 ffef 	bl	800ed30 <uxr_session_header_offset>
 800dd52:	a905      	add	r1, sp, #20
 800dd54:	9000      	str	r0, [sp, #0]
 800dd56:	2300      	movs	r3, #0
 800dd58:	a80a      	add	r0, sp, #40	@ 0x28
 800dd5a:	2211      	movs	r2, #17
 800dd5c:	f7ff fabc 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800dd60:	2318      	movs	r3, #24
 800dd62:	fb03 5404 	mla	r4, r3, r4, r5
 800dd66:	2205      	movs	r2, #5
 800dd68:	2300      	movs	r3, #0
 800dd6a:	3450      	adds	r4, #80	@ 0x50
 800dd6c:	210a      	movs	r1, #10
 800dd6e:	a80a      	add	r0, sp, #40	@ 0x28
 800dd70:	f001 fd96 	bl	800f8a0 <uxr_buffer_submessage_header>
 800dd74:	a903      	add	r1, sp, #12
 800dd76:	4620      	mov	r0, r4
 800dd78:	f008 fc22 	bl	80165c0 <uxr_compute_acknack>
 800dd7c:	ba40      	rev16	r0, r0
 800dd7e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800dd82:	a903      	add	r1, sp, #12
 800dd84:	a80a      	add	r0, sp, #40	@ 0x28
 800dd86:	f88d 6010 	strb.w	r6, [sp, #16]
 800dd8a:	f002 ff33 	bl	8010bf4 <uxr_serialize_ACKNACK_Payload>
 800dd8e:	2200      	movs	r2, #0
 800dd90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd92:	4611      	mov	r1, r2
 800dd94:	4628      	mov	r0, r5
 800dd96:	f000 ff77 	bl	800ec88 <uxr_stamp_session_header>
 800dd9a:	a80a      	add	r0, sp, #40	@ 0x28
 800dd9c:	f7ff fada 	bl	800d354 <ucdr_buffer_length>
 800dda0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dda2:	4602      	mov	r2, r0
 800dda4:	a905      	add	r1, sp, #20
 800dda6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ddaa:	47a0      	blx	r4
 800ddac:	b012      	add	sp, #72	@ 0x48
 800ddae:	bd70      	pop	{r4, r5, r6, pc}

0800ddb0 <uxr_init_session>:
 800ddb0:	b510      	push	{r4, lr}
 800ddb2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800dde8 <uxr_init_session+0x38>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ddc2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ddc6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800ddca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800ddce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800ddd2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800ddd6:	2181      	movs	r1, #129	@ 0x81
 800ddd8:	f000 feba 	bl	800eb50 <uxr_init_session_info>
 800dddc:	f104 0008 	add.w	r0, r4, #8
 800dde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dde4:	f001 bc78 	b.w	800f6d8 <uxr_init_stream_storage>
	...

0800ddf0 <uxr_set_status_callback>:
 800ddf0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop

0800ddf8 <uxr_set_topic_callback>:
 800ddf8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop

0800de00 <uxr_set_request_callback>:
 800de00:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop

0800de08 <uxr_set_reply_callback>:
 800de08:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop

0800de10 <uxr_create_output_best_effort_stream>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	4604      	mov	r4, r0
 800de16:	460d      	mov	r5, r1
 800de18:	4616      	mov	r6, r2
 800de1a:	f000 ff89 	bl	800ed30 <uxr_session_header_offset>
 800de1e:	4632      	mov	r2, r6
 800de20:	4603      	mov	r3, r0
 800de22:	4629      	mov	r1, r5
 800de24:	f104 0008 	add.w	r0, r4, #8
 800de28:	b002      	add	sp, #8
 800de2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de2e:	f001 bc9d 	b.w	800f76c <uxr_add_output_best_effort_buffer>
 800de32:	bf00      	nop

0800de34 <uxr_create_output_reliable_stream>:
 800de34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de36:	b085      	sub	sp, #20
 800de38:	4604      	mov	r4, r0
 800de3a:	460d      	mov	r5, r1
 800de3c:	4616      	mov	r6, r2
 800de3e:	461f      	mov	r7, r3
 800de40:	f000 ff76 	bl	800ed30 <uxr_session_header_offset>
 800de44:	463b      	mov	r3, r7
 800de46:	9000      	str	r0, [sp, #0]
 800de48:	4632      	mov	r2, r6
 800de4a:	4629      	mov	r1, r5
 800de4c:	f104 0008 	add.w	r0, r4, #8
 800de50:	f001 fca0 	bl	800f794 <uxr_add_output_reliable_buffer>
 800de54:	b005      	add	sp, #20
 800de56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de58 <uxr_create_input_best_effort_stream>:
 800de58:	b082      	sub	sp, #8
 800de5a:	3008      	adds	r0, #8
 800de5c:	b002      	add	sp, #8
 800de5e:	f001 bcb3 	b.w	800f7c8 <uxr_add_input_best_effort_buffer>
 800de62:	bf00      	nop

0800de64 <uxr_create_input_reliable_stream>:
 800de64:	b510      	push	{r4, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	4c03      	ldr	r4, [pc, #12]	@ (800de78 <uxr_create_input_reliable_stream+0x14>)
 800de6a:	9400      	str	r4, [sp, #0]
 800de6c:	3008      	adds	r0, #8
 800de6e:	f001 fcc1 	bl	800f7f4 <uxr_add_input_reliable_buffer>
 800de72:	b004      	add	sp, #16
 800de74:	bd10      	pop	{r4, pc}
 800de76:	bf00      	nop
 800de78:	0800dc95 	.word	0x0800dc95

0800de7c <uxr_epoch_nanos>:
 800de7c:	b510      	push	{r4, lr}
 800de7e:	4604      	mov	r4, r0
 800de80:	f001 fd6e 	bl	800f960 <uxr_nanos>
 800de84:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800de88:	1ac0      	subs	r0, r0, r3
 800de8a:	eb61 0102 	sbc.w	r1, r1, r2
 800de8e:	bd10      	pop	{r4, pc}

0800de90 <uxr_flash_output_streams>:
 800de90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de94:	7e03      	ldrb	r3, [r0, #24]
 800de96:	b084      	sub	sp, #16
 800de98:	4604      	mov	r4, r0
 800de9a:	b373      	cbz	r3, 800defa <uxr_flash_output_streams+0x6a>
 800de9c:	2500      	movs	r5, #0
 800de9e:	f100 0908 	add.w	r9, r0, #8
 800dea2:	f10d 0802 	add.w	r8, sp, #2
 800dea6:	4628      	mov	r0, r5
 800dea8:	af03      	add	r7, sp, #12
 800deaa:	ae02      	add	r6, sp, #8
 800deac:	e006      	b.n	800debc <uxr_flash_output_streams+0x2c>
 800deae:	7e23      	ldrb	r3, [r4, #24]
 800deb0:	3501      	adds	r5, #1
 800deb2:	b2e8      	uxtb	r0, r5
 800deb4:	4283      	cmp	r3, r0
 800deb6:	f109 0910 	add.w	r9, r9, #16
 800deba:	d91e      	bls.n	800defa <uxr_flash_output_streams+0x6a>
 800debc:	2201      	movs	r2, #1
 800debe:	4611      	mov	r1, r2
 800dec0:	f001 fbd2 	bl	800f668 <uxr_stream_id>
 800dec4:	4643      	mov	r3, r8
 800dec6:	4684      	mov	ip, r0
 800dec8:	463a      	mov	r2, r7
 800deca:	4631      	mov	r1, r6
 800decc:	4648      	mov	r0, r9
 800dece:	f8cd c004 	str.w	ip, [sp, #4]
 800ded2:	f008 fbf9 	bl	80166c8 <uxr_prepare_best_effort_buffer_to_send>
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d0e9      	beq.n	800deae <uxr_flash_output_streams+0x1e>
 800deda:	9b02      	ldr	r3, [sp, #8]
 800dedc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dee0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dee4:	4620      	mov	r0, r4
 800dee6:	f000 fecf 	bl	800ec88 <uxr_stamp_session_header>
 800deea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800deec:	9a03      	ldr	r2, [sp, #12]
 800deee:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800def2:	9902      	ldr	r1, [sp, #8]
 800def4:	6818      	ldr	r0, [r3, #0]
 800def6:	47d0      	blx	sl
 800def8:	e7d9      	b.n	800deae <uxr_flash_output_streams+0x1e>
 800defa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800defe:	b37b      	cbz	r3, 800df60 <uxr_flash_output_streams+0xd0>
 800df00:	f04f 0900 	mov.w	r9, #0
 800df04:	f104 0520 	add.w	r5, r4, #32
 800df08:	f10d 0802 	add.w	r8, sp, #2
 800df0c:	af03      	add	r7, sp, #12
 800df0e:	ae02      	add	r6, sp, #8
 800df10:	4648      	mov	r0, r9
 800df12:	2201      	movs	r2, #1
 800df14:	2102      	movs	r1, #2
 800df16:	f001 fba7 	bl	800f668 <uxr_stream_id>
 800df1a:	9001      	str	r0, [sp, #4]
 800df1c:	e00e      	b.n	800df3c <uxr_flash_output_streams+0xac>
 800df1e:	9b02      	ldr	r3, [sp, #8]
 800df20:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800df24:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800df28:	4620      	mov	r0, r4
 800df2a:	f000 fead 	bl	800ec88 <uxr_stamp_session_header>
 800df2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df30:	9a03      	ldr	r2, [sp, #12]
 800df32:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800df36:	9902      	ldr	r1, [sp, #8]
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	47d0      	blx	sl
 800df3c:	4643      	mov	r3, r8
 800df3e:	463a      	mov	r2, r7
 800df40:	4631      	mov	r1, r6
 800df42:	4628      	mov	r0, r5
 800df44:	f008 fdd4 	bl	8016af0 <uxr_prepare_next_reliable_buffer_to_send>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d1e8      	bne.n	800df1e <uxr_flash_output_streams+0x8e>
 800df4c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800df50:	f109 0901 	add.w	r9, r9, #1
 800df54:	fa5f f089 	uxtb.w	r0, r9
 800df58:	4283      	cmp	r3, r0
 800df5a:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800df5e:	d8d8      	bhi.n	800df12 <uxr_flash_output_streams+0x82>
 800df60:	b004      	add	sp, #16
 800df62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df66:	bf00      	nop

0800df68 <read_submessage_info>:
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	460d      	mov	r5, r1
 800df6e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800df72:	4669      	mov	r1, sp
 800df74:	4607      	mov	r7, r0
 800df76:	4628      	mov	r0, r5
 800df78:	f002 fc56 	bl	8010828 <uxr_deserialize_BaseObjectReply>
 800df7c:	a902      	add	r1, sp, #8
 800df7e:	4604      	mov	r4, r0
 800df80:	4628      	mov	r0, r5
 800df82:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800df86:	f7fe f8db 	bl	800c140 <ucdr_deserialize_bool>
 800df8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800df8e:	4004      	ands	r4, r0
 800df90:	b2e4      	uxtb	r4, r4
 800df92:	b95b      	cbnz	r3, 800dfac <read_submessage_info+0x44>
 800df94:	a987      	add	r1, sp, #540	@ 0x21c
 800df96:	4628      	mov	r0, r5
 800df98:	f7fe f8d2 	bl	800c140 <ucdr_deserialize_bool>
 800df9c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dfa0:	4606      	mov	r6, r0
 800dfa2:	b94b      	cbnz	r3, 800dfb8 <read_submessage_info+0x50>
 800dfa4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfac:	a903      	add	r1, sp, #12
 800dfae:	4628      	mov	r0, r5
 800dfb0:	f002 fafc 	bl	80105ac <uxr_deserialize_ObjectVariant>
 800dfb4:	4004      	ands	r4, r0
 800dfb6:	e7ed      	b.n	800df94 <read_submessage_info+0x2c>
 800dfb8:	a988      	add	r1, sp, #544	@ 0x220
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f7fe f8ee 	bl	800c19c <ucdr_deserialize_uint8_t>
 800dfc0:	4234      	tst	r4, r6
 800dfc2:	d0ef      	beq.n	800dfa4 <read_submessage_info+0x3c>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d0ed      	beq.n	800dfa4 <read_submessage_info+0x3c>
 800dfc8:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800dfcc:	2b0d      	cmp	r3, #13
 800dfce:	d1e9      	bne.n	800dfa4 <read_submessage_info+0x3c>
 800dfd0:	a98a      	add	r1, sp, #552	@ 0x228
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f7fe fe7e 	bl	800ccd4 <ucdr_deserialize_int16_t>
 800dfd8:	b140      	cbz	r0, 800dfec <read_submessage_info+0x84>
 800dfda:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	dd07      	ble.n	800dff2 <read_submessage_info+0x8a>
 800dfe2:	f1b8 0f00 	cmp.w	r8, #0
 800dfe6:	bf0c      	ite	eq
 800dfe8:	2002      	moveq	r0, #2
 800dfea:	2001      	movne	r0, #1
 800dfec:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800dff0:	e7d8      	b.n	800dfa4 <read_submessage_info+0x3c>
 800dff2:	2000      	movs	r0, #0
 800dff4:	e7fa      	b.n	800dfec <read_submessage_info+0x84>
 800dff6:	bf00      	nop

0800dff8 <read_submessage_list>:
 800dff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dffc:	b097      	sub	sp, #92	@ 0x5c
 800dffe:	4604      	mov	r4, r0
 800e000:	460d      	mov	r5, r1
 800e002:	9209      	str	r2, [sp, #36]	@ 0x24
 800e004:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e008:	aa0c      	add	r2, sp, #48	@ 0x30
 800e00a:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e00e:	4628      	mov	r0, r5
 800e010:	f001 fc60 	bl	800f8d4 <uxr_read_submessage_header>
 800e014:	2800      	cmp	r0, #0
 800e016:	f000 812c 	beq.w	800e272 <read_submessage_list+0x27a>
 800e01a:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800e01e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e020:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800e024:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800e028:	3902      	subs	r1, #2
 800e02a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e02e:	290d      	cmp	r1, #13
 800e030:	d8e8      	bhi.n	800e004 <read_submessage_list+0xc>
 800e032:	a201      	add	r2, pc, #4	@ (adr r2, 800e038 <read_submessage_list+0x40>)
 800e034:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800e038:	0800e269 	.word	0x0800e269
 800e03c:	0800e005 	.word	0x0800e005
 800e040:	0800e259 	.word	0x0800e259
 800e044:	0800e1fb 	.word	0x0800e1fb
 800e048:	0800e1f1 	.word	0x0800e1f1
 800e04c:	0800e005 	.word	0x0800e005
 800e050:	0800e005 	.word	0x0800e005
 800e054:	0800e175 	.word	0x0800e175
 800e058:	0800e10d 	.word	0x0800e10d
 800e05c:	0800e0cd 	.word	0x0800e0cd
 800e060:	0800e005 	.word	0x0800e005
 800e064:	0800e005 	.word	0x0800e005
 800e068:	0800e005 	.word	0x0800e005
 800e06c:	0800e071 	.word	0x0800e071
 800e070:	a910      	add	r1, sp, #64	@ 0x40
 800e072:	4628      	mov	r0, r5
 800e074:	f002 fe0e 	bl	8010c94 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e078:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800e07c:	2e00      	cmp	r6, #0
 800e07e:	f000 8100 	beq.w	800e282 <read_submessage_list+0x28a>
 800e082:	f001 fc6d 	bl	800f960 <uxr_nanos>
 800e086:	f04f 0800 	mov.w	r8, #0
 800e08a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e092:	4990      	ldr	r1, [pc, #576]	@ (800e2d4 <read_submessage_list+0x2dc>)
 800e094:	46c4      	mov	ip, r8
 800e096:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800e09a:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e09e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e0a0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e0a2:	46c6      	mov	lr, r8
 800e0a4:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800e0a8:	46bc      	mov	ip, r7
 800e0aa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e0ae:	fbc0 7801 	smlal	r7, r8, r0, r1
 800e0b2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800e0b6:	e9cd 7800 	strd	r7, r8, [sp]
 800e0ba:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e0be:	9106      	str	r1, [sp, #24]
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	47b0      	blx	r6
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800e0ca:	e79b      	b.n	800e004 <read_submessage_list+0xc>
 800e0cc:	a910      	add	r1, sp, #64	@ 0x40
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f002 fdce 	bl	8010c70 <uxr_deserialize_HEARTBEAT_Payload>
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e0da:	f001 fae1 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e0de:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e0e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e0e4:	4631      	mov	r1, r6
 800e0e6:	f104 0008 	add.w	r0, r4, #8
 800e0ea:	f001 fbb9 	bl	800f860 <uxr_get_input_reliable_stream>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d088      	beq.n	800e004 <read_submessage_list+0xc>
 800e0f2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e0f6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e0fa:	f008 fa55 	bl	80165a8 <uxr_process_heartbeat>
 800e0fe:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e102:	4632      	mov	r2, r6
 800e104:	4620      	mov	r0, r4
 800e106:	f7ff fe1d 	bl	800dd44 <write_submessage_acknack.isra.0>
 800e10a:	e77b      	b.n	800e004 <read_submessage_list+0xc>
 800e10c:	a910      	add	r1, sp, #64	@ 0x40
 800e10e:	4628      	mov	r0, r5
 800e110:	f002 fd86 	bl	8010c20 <uxr_deserialize_ACKNACK_Payload>
 800e114:	2100      	movs	r1, #0
 800e116:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e11a:	f001 fac1 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e11e:	900d      	str	r0, [sp, #52]	@ 0x34
 800e120:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e124:	f104 0008 	add.w	r0, r4, #8
 800e128:	f001 fb86 	bl	800f838 <uxr_get_output_reliable_stream>
 800e12c:	4606      	mov	r6, r0
 800e12e:	2800      	cmp	r0, #0
 800e130:	f43f af68 	beq.w	800e004 <read_submessage_list+0xc>
 800e134:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800e138:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e13c:	ba49      	rev16	r1, r1
 800e13e:	b289      	uxth	r1, r1
 800e140:	f008 fd80 	bl	8016c44 <uxr_process_acknack>
 800e144:	4630      	mov	r0, r6
 800e146:	f008 fd41 	bl	8016bcc <uxr_begin_output_nack_buffer_it>
 800e14a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e14e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e152:	e005      	b.n	800e160 <read_submessage_list+0x168>
 800e154:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e156:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e158:	685f      	ldr	r7, [r3, #4]
 800e15a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	47b8      	blx	r7
 800e160:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e164:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e166:	4641      	mov	r1, r8
 800e168:	4630      	mov	r0, r6
 800e16a:	f008 fd31 	bl	8016bd0 <uxr_next_reliable_nack_buffer_to_send>
 800e16e:	2800      	cmp	r0, #0
 800e170:	d1f0      	bne.n	800e154 <read_submessage_list+0x15c>
 800e172:	e747      	b.n	800e004 <read_submessage_list+0xc>
 800e174:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e178:	4641      	mov	r1, r8
 800e17a:	900d      	str	r0, [sp, #52]	@ 0x34
 800e17c:	4628      	mov	r0, r5
 800e17e:	f002 fab5 	bl	80106ec <uxr_deserialize_BaseObjectRequest>
 800e182:	3e04      	subs	r6, #4
 800e184:	4640      	mov	r0, r8
 800e186:	a90f      	add	r1, sp, #60	@ 0x3c
 800e188:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e18c:	f000 fdf6 	bl	800ed7c <uxr_parse_base_object_request>
 800e190:	fa1f f886 	uxth.w	r8, r6
 800e194:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800e198:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e19a:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800e19e:	9110      	str	r1, [sp, #64]	@ 0x40
 800e1a0:	f007 070e 	and.w	r7, r7, #14
 800e1a4:	b136      	cbz	r6, 800e1b4 <read_submessage_list+0x1bc>
 800e1a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	464a      	mov	r2, r9
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	47b0      	blx	r6
 800e1b4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e1b6:	b16b      	cbz	r3, 800e1d4 <read_submessage_list+0x1dc>
 800e1b8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	3802      	subs	r0, #2
 800e1be:	e002      	b.n	800e1c6 <read_submessage_list+0x1ce>
 800e1c0:	3101      	adds	r1, #1
 800e1c2:	428b      	cmp	r3, r1
 800e1c4:	d006      	beq.n	800e1d4 <read_submessage_list+0x1dc>
 800e1c6:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800e1ca:	454e      	cmp	r6, r9
 800e1cc:	d1f8      	bne.n	800e1c0 <read_submessage_list+0x1c8>
 800e1ce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	545a      	strb	r2, [r3, r1]
 800e1d4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e1d8:	9102      	str	r1, [sp, #8]
 800e1da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e1dc:	9101      	str	r1, [sp, #4]
 800e1de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e1e0:	9100      	str	r1, [sp, #0]
 800e1e2:	463b      	mov	r3, r7
 800e1e4:	4642      	mov	r2, r8
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f008 fde3 	bl	8016db4 <read_submessage_format>
 800e1ee:	e709      	b.n	800e004 <read_submessage_list+0xc>
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f7ff feb8 	bl	800df68 <read_submessage_info>
 800e1f8:	e704      	b.n	800e004 <read_submessage_list+0xc>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d03c      	beq.n	800e278 <read_submessage_list+0x280>
 800e1fe:	a910      	add	r1, sp, #64	@ 0x40
 800e200:	4628      	mov	r0, r5
 800e202:	f002 fc69 	bl	8010ad8 <uxr_deserialize_STATUS_Payload>
 800e206:	a90e      	add	r1, sp, #56	@ 0x38
 800e208:	a810      	add	r0, sp, #64	@ 0x40
 800e20a:	aa0d      	add	r2, sp, #52	@ 0x34
 800e20c:	f000 fdb6 	bl	800ed7c <uxr_parse_base_object_request>
 800e210:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800e214:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e216:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800e21a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e21e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e220:	b136      	cbz	r6, 800e230 <read_submessage_list+0x238>
 800e222:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	463a      	mov	r2, r7
 800e22a:	4643      	mov	r3, r8
 800e22c:	4620      	mov	r0, r4
 800e22e:	47b0      	blx	r6
 800e230:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e232:	2a00      	cmp	r2, #0
 800e234:	f43f aee6 	beq.w	800e004 <read_submessage_list+0xc>
 800e238:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e23a:	2100      	movs	r1, #0
 800e23c:	3802      	subs	r0, #2
 800e23e:	e003      	b.n	800e248 <read_submessage_list+0x250>
 800e240:	3101      	adds	r1, #1
 800e242:	4291      	cmp	r1, r2
 800e244:	f43f aede 	beq.w	800e004 <read_submessage_list+0xc>
 800e248:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800e24c:	42be      	cmp	r6, r7
 800e24e:	d1f7      	bne.n	800e240 <read_submessage_list+0x248>
 800e250:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e252:	f803 8001 	strb.w	r8, [r3, r1]
 800e256:	e6d5      	b.n	800e004 <read_submessage_list+0xc>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f47f aed3 	bne.w	800e004 <read_submessage_list+0xc>
 800e25e:	4629      	mov	r1, r5
 800e260:	4620      	mov	r0, r4
 800e262:	f000 fcd3 	bl	800ec0c <uxr_read_create_session_status>
 800e266:	e6cd      	b.n	800e004 <read_submessage_list+0xc>
 800e268:	4629      	mov	r1, r5
 800e26a:	4620      	mov	r0, r4
 800e26c:	f7ff fd34 	bl	800dcd8 <read_submessage_get_info>
 800e270:	e6c8      	b.n	800e004 <read_submessage_list+0xc>
 800e272:	b017      	add	sp, #92	@ 0x5c
 800e274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e278:	4629      	mov	r1, r5
 800e27a:	4620      	mov	r0, r4
 800e27c:	f000 fcd4 	bl	800ec28 <uxr_read_delete_session_status>
 800e280:	e6c0      	b.n	800e004 <read_submessage_list+0xc>
 800e282:	f001 fb6d 	bl	800f960 <uxr_nanos>
 800e286:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800e28a:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800e2d4 <read_submessage_list+0x2dc>
 800e28e:	4633      	mov	r3, r6
 800e290:	fbc7 230c 	smlal	r2, r3, r7, ip
 800e294:	1810      	adds	r0, r2, r0
 800e296:	eb43 0301 	adc.w	r3, r3, r1
 800e29a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800e29e:	46b6      	mov	lr, r6
 800e2a0:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800e2a4:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800e2a8:	fbc1 760c 	smlal	r7, r6, r1, ip
 800e2ac:	19d2      	adds	r2, r2, r7
 800e2ae:	eb4e 0106 	adc.w	r1, lr, r6
 800e2b2:	1a80      	subs	r0, r0, r2
 800e2b4:	eb63 0301 	sbc.w	r3, r3, r1
 800e2b8:	0fda      	lsrs	r2, r3, #31
 800e2ba:	1812      	adds	r2, r2, r0
 800e2bc:	f143 0300 	adc.w	r3, r3, #0
 800e2c0:	0852      	lsrs	r2, r2, #1
 800e2c2:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e2c6:	105b      	asrs	r3, r3, #1
 800e2c8:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e2cc:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e2d0:	e6f8      	b.n	800e0c4 <read_submessage_list+0xcc>
 800e2d2:	bf00      	nop
 800e2d4:	3b9aca00 	.word	0x3b9aca00

0800e2d8 <listen_message_reliably>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	f1b1 0b00 	subs.w	fp, r1, #0
 800e2e0:	b09f      	sub	sp, #124	@ 0x7c
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	bfb8      	it	lt
 800e2e6:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800e2ea:	f001 fb1f 	bl	800f92c <uxr_millis>
 800e2ee:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800e2f2:	9003      	str	r0, [sp, #12]
 800e2f4:	9104      	str	r1, [sp, #16]
 800e2f6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800e2fa:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 80a4 	beq.w	800e44c <listen_message_reliably+0x174>
 800e304:	2500      	movs	r5, #0
 800e306:	e9cd b806 	strd	fp, r8, [sp, #24]
 800e30a:	f106 0420 	add.w	r4, r6, #32
 800e30e:	f04f 37ff 	mov.w	r7, #4294967295
 800e312:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800e316:	4628      	mov	r0, r5
 800e318:	e011      	b.n	800e33e <listen_message_reliably+0x66>
 800e31a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800e31e:	42ba      	cmp	r2, r7
 800e320:	eb73 0109 	sbcs.w	r1, r3, r9
 800e324:	bfb8      	it	lt
 800e326:	4699      	movlt	r9, r3
 800e328:	f105 0501 	add.w	r5, r5, #1
 800e32c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800e330:	b2e8      	uxtb	r0, r5
 800e332:	bfb8      	it	lt
 800e334:	4617      	movlt	r7, r2
 800e336:	4283      	cmp	r3, r0
 800e338:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800e33c:	d94a      	bls.n	800e3d4 <listen_message_reliably+0xfc>
 800e33e:	2201      	movs	r2, #1
 800e340:	2102      	movs	r1, #2
 800e342:	f001 f991 	bl	800f668 <uxr_stream_id>
 800e346:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800e34a:	4601      	mov	r1, r0
 800e34c:	4620      	mov	r0, r4
 800e34e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e350:	f008 fc0c 	bl	8016b6c <uxr_update_output_stream_heartbeat_timestamp>
 800e354:	2800      	cmp	r0, #0
 800e356:	d0e0      	beq.n	800e31a <listen_message_reliably+0x42>
 800e358:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800e35c:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800e360:	9305      	str	r3, [sp, #20]
 800e362:	4630      	mov	r0, r6
 800e364:	f000 fce4 	bl	800ed30 <uxr_session_header_offset>
 800e368:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800e36c:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800e370:	9000      	str	r0, [sp, #0]
 800e372:	a90e      	add	r1, sp, #56	@ 0x38
 800e374:	4640      	mov	r0, r8
 800e376:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800e37a:	2300      	movs	r3, #0
 800e37c:	2211      	movs	r2, #17
 800e37e:	f7fe ffab 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800e382:	2300      	movs	r3, #0
 800e384:	2205      	movs	r2, #5
 800e386:	210b      	movs	r1, #11
 800e388:	4640      	mov	r0, r8
 800e38a:	f001 fa89 	bl	800f8a0 <uxr_buffer_submessage_header>
 800e38e:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800e392:	2101      	movs	r1, #1
 800e394:	f008 fde2 	bl	8016f5c <uxr_seq_num_add>
 800e398:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800e39c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	9b05      	ldr	r3, [sp, #20]
 800e3a4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800e3a8:	a90c      	add	r1, sp, #48	@ 0x30
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e3b0:	f002 fc4a 	bl	8010c48 <uxr_serialize_HEARTBEAT_Payload>
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e3b8:	4611      	mov	r1, r2
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f000 fc64 	bl	800ec88 <uxr_stamp_session_header>
 800e3c0:	4640      	mov	r0, r8
 800e3c2:	f7fe ffc7 	bl	800d354 <ucdr_buffer_length>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800e3ca:	a90e      	add	r1, sp, #56	@ 0x38
 800e3cc:	e9d0 0300 	ldrd	r0, r3, [r0]
 800e3d0:	4798      	blx	r3
 800e3d2:	e7a2      	b.n	800e31a <listen_message_reliably+0x42>
 800e3d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e3d8:	4599      	cmp	r9, r3
 800e3da:	bf08      	it	eq
 800e3dc:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 800e3e0:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800e3e4:	d032      	beq.n	800e44c <listen_message_reliably+0x174>
 800e3e6:	9b03      	ldr	r3, [sp, #12]
 800e3e8:	1aff      	subs	r7, r7, r3
 800e3ea:	2f00      	cmp	r7, #0
 800e3ec:	bf08      	it	eq
 800e3ee:	2701      	moveq	r7, #1
 800e3f0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800e3f2:	455f      	cmp	r7, fp
 800e3f4:	bfa8      	it	ge
 800e3f6:	465f      	movge	r7, fp
 800e3f8:	689c      	ldr	r4, [r3, #8]
 800e3fa:	6818      	ldr	r0, [r3, #0]
 800e3fc:	4642      	mov	r2, r8
 800e3fe:	463b      	mov	r3, r7
 800e400:	4651      	mov	r1, sl
 800e402:	47a0      	blx	r4
 800e404:	ebab 0b07 	sub.w	fp, fp, r7
 800e408:	b958      	cbnz	r0, 800e422 <listen_message_reliably+0x14a>
 800e40a:	f1bb 0f00 	cmp.w	fp, #0
 800e40e:	dd44      	ble.n	800e49a <listen_message_reliably+0x1c2>
 800e410:	f001 fa8c 	bl	800f92c <uxr_millis>
 800e414:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d03c      	beq.n	800e496 <listen_message_reliably+0x1be>
 800e41c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800e420:	e770      	b.n	800e304 <listen_message_reliably+0x2c>
 800e422:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800e426:	4604      	mov	r4, r0
 800e428:	a80e      	add	r0, sp, #56	@ 0x38
 800e42a:	f7fe ff67 	bl	800d2fc <ucdr_init_buffer>
 800e42e:	2500      	movs	r5, #0
 800e430:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800e434:	aa08      	add	r2, sp, #32
 800e436:	a90e      	add	r1, sp, #56	@ 0x38
 800e438:	4630      	mov	r0, r6
 800e43a:	f88d 5020 	strb.w	r5, [sp, #32]
 800e43e:	f000 fc39 	bl	800ecb4 <uxr_read_session_header>
 800e442:	b928      	cbnz	r0, 800e450 <listen_message_reliably+0x178>
 800e444:	4620      	mov	r0, r4
 800e446:	b01f      	add	sp, #124	@ 0x7c
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44c:	465f      	mov	r7, fp
 800e44e:	e7cc      	b.n	800e3ea <listen_message_reliably+0x112>
 800e450:	4629      	mov	r1, r5
 800e452:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800e456:	f001 f923 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e45a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e45e:	2f01      	cmp	r7, #1
 800e460:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800e464:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800e468:	fa5f f880 	uxtb.w	r8, r0
 800e46c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e470:	d050      	beq.n	800e514 <listen_message_reliably+0x23c>
 800e472:	2f02      	cmp	r7, #2
 800e474:	d016      	beq.n	800e4a4 <listen_message_reliably+0x1cc>
 800e476:	2f00      	cmp	r7, #0
 800e478:	d1e4      	bne.n	800e444 <listen_message_reliably+0x16c>
 800e47a:	4639      	mov	r1, r7
 800e47c:	4638      	mov	r0, r7
 800e47e:	f001 f90f 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e482:	a90e      	add	r1, sp, #56	@ 0x38
 800e484:	4602      	mov	r2, r0
 800e486:	4630      	mov	r0, r6
 800e488:	920c      	str	r2, [sp, #48]	@ 0x30
 800e48a:	f7ff fdb5 	bl	800dff8 <read_submessage_list>
 800e48e:	4620      	mov	r0, r4
 800e490:	b01f      	add	sp, #124	@ 0x7c
 800e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e496:	465f      	mov	r7, fp
 800e498:	e7aa      	b.n	800e3f0 <listen_message_reliably+0x118>
 800e49a:	4604      	mov	r4, r0
 800e49c:	4620      	mov	r0, r4
 800e49e:	b01f      	add	sp, #124	@ 0x7c
 800e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	f106 0008 	add.w	r0, r6, #8
 800e4aa:	f001 f9d9 	bl	800f860 <uxr_get_input_reliable_stream>
 800e4ae:	4681      	mov	r9, r0
 800e4b0:	b338      	cbz	r0, 800e502 <listen_message_reliably+0x22a>
 800e4b2:	a80e      	add	r0, sp, #56	@ 0x38
 800e4b4:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800e4b8:	f7fe ff50 	bl	800d35c <ucdr_buffer_remaining>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800e4c2:	9000      	str	r0, [sp, #0]
 800e4c4:	465a      	mov	r2, fp
 800e4c6:	4651      	mov	r1, sl
 800e4c8:	4648      	mov	r0, r9
 800e4ca:	f007 ff7b 	bl	80163c4 <uxr_receive_reliable_message>
 800e4ce:	b1c0      	cbz	r0, 800e502 <listen_message_reliably+0x22a>
 800e4d0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800e4d4:	b393      	cbz	r3, 800e53c <listen_message_reliably+0x264>
 800e4d6:	af16      	add	r7, sp, #88	@ 0x58
 800e4d8:	f04f 0a02 	mov.w	sl, #2
 800e4dc:	e00a      	b.n	800e4f4 <listen_message_reliably+0x21c>
 800e4de:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800e4e2:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800e4e6:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800e4ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f7ff fd82 	bl	800dff8 <read_submessage_list>
 800e4f4:	2204      	movs	r2, #4
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	4648      	mov	r0, r9
 800e4fa:	f007 ffdd 	bl	80164b8 <uxr_next_input_reliable_buffer_available>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d1ed      	bne.n	800e4de <listen_message_reliably+0x206>
 800e502:	4630      	mov	r0, r6
 800e504:	462a      	mov	r2, r5
 800e506:	4641      	mov	r1, r8
 800e508:	f7ff fc1c 	bl	800dd44 <write_submessage_acknack.isra.0>
 800e50c:	4620      	mov	r0, r4
 800e50e:	b01f      	add	sp, #124	@ 0x7c
 800e510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e514:	4629      	mov	r1, r5
 800e516:	f106 0008 	add.w	r0, r6, #8
 800e51a:	f001 f997 	bl	800f84c <uxr_get_input_best_effort_stream>
 800e51e:	2800      	cmp	r0, #0
 800e520:	d090      	beq.n	800e444 <listen_message_reliably+0x16c>
 800e522:	4651      	mov	r1, sl
 800e524:	f007 febe 	bl	80162a4 <uxr_receive_best_effort_message>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d08b      	beq.n	800e444 <listen_message_reliably+0x16c>
 800e52c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800e530:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e532:	a90e      	add	r1, sp, #56	@ 0x38
 800e534:	4630      	mov	r0, r6
 800e536:	f7ff fd5f 	bl	800dff8 <read_submessage_list>
 800e53a:	e783      	b.n	800e444 <listen_message_reliably+0x16c>
 800e53c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800e540:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e542:	a90e      	add	r1, sp, #56	@ 0x38
 800e544:	4630      	mov	r0, r6
 800e546:	f7ff fd57 	bl	800dff8 <read_submessage_list>
 800e54a:	e7c4      	b.n	800e4d6 <listen_message_reliably+0x1fe>

0800e54c <uxr_run_session_timeout>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	4604      	mov	r4, r0
 800e550:	460d      	mov	r5, r1
 800e552:	f001 f9eb 	bl	800f92c <uxr_millis>
 800e556:	4606      	mov	r6, r0
 800e558:	4620      	mov	r0, r4
 800e55a:	f7ff fc99 	bl	800de90 <uxr_flash_output_streams>
 800e55e:	4629      	mov	r1, r5
 800e560:	4620      	mov	r0, r4
 800e562:	f7ff feb9 	bl	800e2d8 <listen_message_reliably>
 800e566:	f001 f9e1 	bl	800f92c <uxr_millis>
 800e56a:	1b81      	subs	r1, r0, r6
 800e56c:	1a69      	subs	r1, r5, r1
 800e56e:	2900      	cmp	r1, #0
 800e570:	dcf6      	bgt.n	800e560 <uxr_run_session_timeout+0x14>
 800e572:	f104 0008 	add.w	r0, r4, #8
 800e576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e57a:	f001 b97b 	b.w	800f874 <uxr_output_streams_confirmed>
 800e57e:	bf00      	nop

0800e580 <uxr_run_session_until_data>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	4604      	mov	r4, r0
 800e584:	460d      	mov	r5, r1
 800e586:	f001 f9d1 	bl	800f92c <uxr_millis>
 800e58a:	4606      	mov	r6, r0
 800e58c:	4620      	mov	r0, r4
 800e58e:	f7ff fc7f 	bl	800de90 <uxr_flash_output_streams>
 800e592:	2300      	movs	r3, #0
 800e594:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e598:	4629      	mov	r1, r5
 800e59a:	e005      	b.n	800e5a8 <uxr_run_session_until_data+0x28>
 800e59c:	f001 f9c6 	bl	800f92c <uxr_millis>
 800e5a0:	1b81      	subs	r1, r0, r6
 800e5a2:	1a69      	subs	r1, r5, r1
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	dd07      	ble.n	800e5b8 <uxr_run_session_until_data+0x38>
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f7ff fe95 	bl	800e2d8 <listen_message_reliably>
 800e5ae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d0f2      	beq.n	800e59c <uxr_run_session_until_data+0x1c>
 800e5b6:	bd70      	pop	{r4, r5, r6, pc}
 800e5b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e5bc:	bd70      	pop	{r4, r5, r6, pc}
 800e5be:	bf00      	nop

0800e5c0 <uxr_run_session_until_confirm_delivery>:
 800e5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460d      	mov	r5, r1
 800e5c8:	f001 f9b0 	bl	800f92c <uxr_millis>
 800e5cc:	4607      	mov	r7, r0
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	f7ff fc5e 	bl	800de90 <uxr_flash_output_streams>
 800e5d4:	2d00      	cmp	r5, #0
 800e5d6:	db16      	blt.n	800e606 <uxr_run_session_until_confirm_delivery+0x46>
 800e5d8:	462c      	mov	r4, r5
 800e5da:	f106 0808 	add.w	r8, r6, #8
 800e5de:	e008      	b.n	800e5f2 <uxr_run_session_until_confirm_delivery+0x32>
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f7ff fe78 	bl	800e2d8 <listen_message_reliably>
 800e5e8:	f001 f9a0 	bl	800f92c <uxr_millis>
 800e5ec:	1bc1      	subs	r1, r0, r7
 800e5ee:	1a6c      	subs	r4, r5, r1
 800e5f0:	d404      	bmi.n	800e5fc <uxr_run_session_until_confirm_delivery+0x3c>
 800e5f2:	4640      	mov	r0, r8
 800e5f4:	f001 f93e 	bl	800f874 <uxr_output_streams_confirmed>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d0f1      	beq.n	800e5e0 <uxr_run_session_until_confirm_delivery+0x20>
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e602:	f001 b937 	b.w	800f874 <uxr_output_streams_confirmed>
 800e606:	f106 0808 	add.w	r8, r6, #8
 800e60a:	e7f7      	b.n	800e5fc <uxr_run_session_until_confirm_delivery+0x3c>

0800e60c <uxr_run_session_until_all_status>:
 800e60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e610:	9c08      	ldr	r4, [sp, #32]
 800e612:	4605      	mov	r5, r0
 800e614:	460f      	mov	r7, r1
 800e616:	4690      	mov	r8, r2
 800e618:	461e      	mov	r6, r3
 800e61a:	f7ff fc39 	bl	800de90 <uxr_flash_output_streams>
 800e61e:	b124      	cbz	r4, 800e62a <uxr_run_session_until_all_status+0x1e>
 800e620:	4622      	mov	r2, r4
 800e622:	21ff      	movs	r1, #255	@ 0xff
 800e624:	4630      	mov	r0, r6
 800e626:	f00a f8b9 	bl	801879c <memset>
 800e62a:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800e62e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800e630:	f001 f97c 	bl	800f92c <uxr_millis>
 800e634:	4639      	mov	r1, r7
 800e636:	4681      	mov	r9, r0
 800e638:	4628      	mov	r0, r5
 800e63a:	f7ff fe4d 	bl	800e2d8 <listen_message_reliably>
 800e63e:	f001 f975 	bl	800f92c <uxr_millis>
 800e642:	eba0 0109 	sub.w	r1, r0, r9
 800e646:	1a79      	subs	r1, r7, r1
 800e648:	b36c      	cbz	r4, 800e6a6 <uxr_run_session_until_all_status+0x9a>
 800e64a:	1e70      	subs	r0, r6, #1
 800e64c:	46c6      	mov	lr, r8
 800e64e:	1902      	adds	r2, r0, r4
 800e650:	4684      	mov	ip, r0
 800e652:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e656:	2bff      	cmp	r3, #255	@ 0xff
 800e658:	d007      	beq.n	800e66a <uxr_run_session_until_all_status+0x5e>
 800e65a:	4594      	cmp	ip, r2
 800e65c:	d00f      	beq.n	800e67e <uxr_run_session_until_all_status+0x72>
 800e65e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e662:	2bff      	cmp	r3, #255	@ 0xff
 800e664:	f10e 0e02 	add.w	lr, lr, #2
 800e668:	d1f7      	bne.n	800e65a <uxr_run_session_until_all_status+0x4e>
 800e66a:	4594      	cmp	ip, r2
 800e66c:	f8be 3000 	ldrh.w	r3, [lr]
 800e670:	d014      	beq.n	800e69c <uxr_run_session_until_all_status+0x90>
 800e672:	f10e 0e02 	add.w	lr, lr, #2
 800e676:	2b00      	cmp	r3, #0
 800e678:	d0eb      	beq.n	800e652 <uxr_run_session_until_all_status+0x46>
 800e67a:	2900      	cmp	r1, #0
 800e67c:	dcdc      	bgt.n	800e638 <uxr_run_session_until_all_status+0x2c>
 800e67e:	2300      	movs	r3, #0
 800e680:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800e682:	e001      	b.n	800e688 <uxr_run_session_until_all_status+0x7c>
 800e684:	2b01      	cmp	r3, #1
 800e686:	d812      	bhi.n	800e6ae <uxr_run_session_until_all_status+0xa2>
 800e688:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e68c:	4290      	cmp	r0, r2
 800e68e:	d1f9      	bne.n	800e684 <uxr_run_session_until_all_status+0x78>
 800e690:	2b01      	cmp	r3, #1
 800e692:	bf8c      	ite	hi
 800e694:	2000      	movhi	r0, #0
 800e696:	2001      	movls	r0, #1
 800e698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e69c:	2900      	cmp	r1, #0
 800e69e:	ddee      	ble.n	800e67e <uxr_run_session_until_all_status+0x72>
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1c9      	bne.n	800e638 <uxr_run_session_until_all_status+0x2c>
 800e6a4:	e7eb      	b.n	800e67e <uxr_run_session_until_all_status+0x72>
 800e6a6:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e6b4 <uxr_run_session_until_pong>:
 800e6b4:	b570      	push	{r4, r5, r6, lr}
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	460d      	mov	r5, r1
 800e6ba:	f001 f937 	bl	800f92c <uxr_millis>
 800e6be:	4606      	mov	r6, r0
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f7ff fbe5 	bl	800de90 <uxr_flash_output_streams>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	e005      	b.n	800e6dc <uxr_run_session_until_pong+0x28>
 800e6d0:	f001 f92c 	bl	800f92c <uxr_millis>
 800e6d4:	1b81      	subs	r1, r0, r6
 800e6d6:	1a69      	subs	r1, r5, r1
 800e6d8:	2900      	cmp	r1, #0
 800e6da:	dd0c      	ble.n	800e6f6 <uxr_run_session_until_pong+0x42>
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f7ff fdfb 	bl	800e2d8 <listen_message_reliably>
 800e6e2:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d0f2      	beq.n	800e6d0 <uxr_run_session_until_pong+0x1c>
 800e6ea:	f1a0 0001 	sub.w	r0, r0, #1
 800e6ee:	fab0 f080 	clz	r0, r0
 800e6f2:	0940      	lsrs	r0, r0, #5
 800e6f4:	bd70      	pop	{r4, r5, r6, pc}
 800e6f6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800e6fa:	f1a0 0001 	sub.w	r0, r0, #1
 800e6fe:	fab0 f080 	clz	r0, r0
 800e702:	0940      	lsrs	r0, r0, #5
 800e704:	bd70      	pop	{r4, r5, r6, pc}
 800e706:	bf00      	nop

0800e708 <wait_session_status>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	4604      	mov	r4, r0
 800e70e:	20ff      	movs	r0, #255	@ 0xff
 800e710:	b09f      	sub	sp, #124	@ 0x7c
 800e712:	7160      	strb	r0, [r4, #5]
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 80bb 	beq.w	800e890 <wait_session_status+0x188>
 800e71a:	4692      	mov	sl, r2
 800e71c:	469b      	mov	fp, r3
 800e71e:	f04f 0800 	mov.w	r8, #0
 800e722:	9105      	str	r1, [sp, #20]
 800e724:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e726:	9905      	ldr	r1, [sp, #20]
 800e728:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e72c:	4652      	mov	r2, sl
 800e72e:	47a8      	blx	r5
 800e730:	f001 f8fc 	bl	800f92c <uxr_millis>
 800e734:	2700      	movs	r7, #0
 800e736:	4605      	mov	r5, r0
 800e738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e73c:	e009      	b.n	800e752 <wait_session_status+0x4a>
 800e73e:	f001 f8f5 	bl	800f92c <uxr_millis>
 800e742:	1b43      	subs	r3, r0, r5
 800e744:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800e748:	2b00      	cmp	r3, #0
 800e74a:	7962      	ldrb	r2, [r4, #5]
 800e74c:	dd3d      	ble.n	800e7ca <wait_session_status+0xc2>
 800e74e:	2aff      	cmp	r2, #255	@ 0xff
 800e750:	d13b      	bne.n	800e7ca <wait_session_status+0xc2>
 800e752:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e754:	a90a      	add	r1, sp, #40	@ 0x28
 800e756:	6896      	ldr	r6, [r2, #8]
 800e758:	6810      	ldr	r0, [r2, #0]
 800e75a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e75c:	47b0      	blx	r6
 800e75e:	2800      	cmp	r0, #0
 800e760:	d0ed      	beq.n	800e73e <wait_session_status+0x36>
 800e762:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800e766:	a80e      	add	r0, sp, #56	@ 0x38
 800e768:	f7fe fdc8 	bl	800d2fc <ucdr_init_buffer>
 800e76c:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800e770:	aa09      	add	r2, sp, #36	@ 0x24
 800e772:	a90e      	add	r1, sp, #56	@ 0x38
 800e774:	4620      	mov	r0, r4
 800e776:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800e77a:	f000 fa9b 	bl	800ecb4 <uxr_read_session_header>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d0dd      	beq.n	800e73e <wait_session_status+0x36>
 800e782:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800e786:	2100      	movs	r1, #0
 800e788:	f000 ff8a 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e78c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800e790:	9304      	str	r3, [sp, #16]
 800e792:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800e796:	b2c3      	uxtb	r3, r0
 800e798:	f1b9 0f01 	cmp.w	r9, #1
 800e79c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800e7a0:	9303      	str	r3, [sp, #12]
 800e7a2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e7a6:	d05d      	beq.n	800e864 <wait_session_status+0x15c>
 800e7a8:	f1b9 0f02 	cmp.w	r9, #2
 800e7ac:	d01a      	beq.n	800e7e4 <wait_session_status+0xdc>
 800e7ae:	f1b9 0f00 	cmp.w	r9, #0
 800e7b2:	d1c4      	bne.n	800e73e <wait_session_status+0x36>
 800e7b4:	4649      	mov	r1, r9
 800e7b6:	4648      	mov	r0, r9
 800e7b8:	f000 ff72 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e7bc:	a90e      	add	r1, sp, #56	@ 0x38
 800e7be:	4602      	mov	r2, r0
 800e7c0:	900d      	str	r0, [sp, #52]	@ 0x34
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f7ff fc18 	bl	800dff8 <read_submessage_list>
 800e7c8:	e7b9      	b.n	800e73e <wait_session_status+0x36>
 800e7ca:	f108 0801 	add.w	r8, r8, #1
 800e7ce:	45c3      	cmp	fp, r8
 800e7d0:	d001      	beq.n	800e7d6 <wait_session_status+0xce>
 800e7d2:	2aff      	cmp	r2, #255	@ 0xff
 800e7d4:	d0a6      	beq.n	800e724 <wait_session_status+0x1c>
 800e7d6:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800e7da:	bf18      	it	ne
 800e7dc:	2001      	movne	r0, #1
 800e7de:	b01f      	add	sp, #124	@ 0x7c
 800e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	f104 0008 	add.w	r0, r4, #8
 800e7ea:	f001 f839 	bl	800f860 <uxr_get_input_reliable_stream>
 800e7ee:	9006      	str	r0, [sp, #24]
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d031      	beq.n	800e858 <wait_session_status+0x150>
 800e7f4:	aa0e      	add	r2, sp, #56	@ 0x38
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e7fa:	9207      	str	r2, [sp, #28]
 800e7fc:	f7fe fdae 	bl	800d35c <ucdr_buffer_remaining>
 800e800:	4603      	mov	r3, r0
 800e802:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800e806:	9000      	str	r0, [sp, #0]
 800e808:	9a07      	ldr	r2, [sp, #28]
 800e80a:	9904      	ldr	r1, [sp, #16]
 800e80c:	9806      	ldr	r0, [sp, #24]
 800e80e:	f007 fdd9 	bl	80163c4 <uxr_receive_reliable_message>
 800e812:	b308      	cbz	r0, 800e858 <wait_session_status+0x150>
 800e814:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d041      	beq.n	800e8a0 <wait_session_status+0x198>
 800e81c:	f8cd 8010 	str.w	r8, [sp, #16]
 800e820:	9507      	str	r5, [sp, #28]
 800e822:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e826:	9d06      	ldr	r5, [sp, #24]
 800e828:	f04f 0902 	mov.w	r9, #2
 800e82c:	e00a      	b.n	800e844 <wait_session_status+0x13c>
 800e82e:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800e832:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800e836:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e83a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e83c:	a916      	add	r1, sp, #88	@ 0x58
 800e83e:	4620      	mov	r0, r4
 800e840:	f7ff fbda 	bl	800dff8 <read_submessage_list>
 800e844:	2204      	movs	r2, #4
 800e846:	a916      	add	r1, sp, #88	@ 0x58
 800e848:	4628      	mov	r0, r5
 800e84a:	f007 fe35 	bl	80164b8 <uxr_next_input_reliable_buffer_available>
 800e84e:	2800      	cmp	r0, #0
 800e850:	d1ed      	bne.n	800e82e <wait_session_status+0x126>
 800e852:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e856:	9d07      	ldr	r5, [sp, #28]
 800e858:	9903      	ldr	r1, [sp, #12]
 800e85a:	4632      	mov	r2, r6
 800e85c:	4620      	mov	r0, r4
 800e85e:	f7ff fa71 	bl	800dd44 <write_submessage_acknack.isra.0>
 800e862:	e76c      	b.n	800e73e <wait_session_status+0x36>
 800e864:	4631      	mov	r1, r6
 800e866:	f104 0008 	add.w	r0, r4, #8
 800e86a:	f000 ffef 	bl	800f84c <uxr_get_input_best_effort_stream>
 800e86e:	2800      	cmp	r0, #0
 800e870:	f43f af65 	beq.w	800e73e <wait_session_status+0x36>
 800e874:	9904      	ldr	r1, [sp, #16]
 800e876:	f007 fd15 	bl	80162a4 <uxr_receive_best_effort_message>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	f43f af5f 	beq.w	800e73e <wait_session_status+0x36>
 800e880:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e884:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e886:	a90e      	add	r1, sp, #56	@ 0x38
 800e888:	4620      	mov	r0, r4
 800e88a:	f7ff fbb5 	bl	800dff8 <read_submessage_list>
 800e88e:	e756      	b.n	800e73e <wait_session_status+0x36>
 800e890:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e892:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e896:	47a0      	blx	r4
 800e898:	2001      	movs	r0, #1
 800e89a:	b01f      	add	sp, #124	@ 0x7c
 800e89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a0:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e8a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e8a6:	a90e      	add	r1, sp, #56	@ 0x38
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f7ff fba5 	bl	800dff8 <read_submessage_list>
 800e8ae:	e7b5      	b.n	800e81c <wait_session_status+0x114>

0800e8b0 <uxr_delete_session_retries>:
 800e8b0:	b530      	push	{r4, r5, lr}
 800e8b2:	b08f      	sub	sp, #60	@ 0x3c
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	460d      	mov	r5, r1
 800e8b8:	f000 fa3a 	bl	800ed30 <uxr_session_header_offset>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	2210      	movs	r2, #16
 800e8c0:	9000      	str	r0, [sp, #0]
 800e8c2:	a902      	add	r1, sp, #8
 800e8c4:	a806      	add	r0, sp, #24
 800e8c6:	f7fe fd07 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800e8ca:	a906      	add	r1, sp, #24
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	f000 f981 	bl	800ebd4 <uxr_buffer_delete_session>
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	9b06      	ldr	r3, [sp, #24]
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f000 f9d5 	bl	800ec88 <uxr_stamp_session_header>
 800e8de:	a806      	add	r0, sp, #24
 800e8e0:	f7fe fd38 	bl	800d354 <ucdr_buffer_length>
 800e8e4:	462b      	mov	r3, r5
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	a902      	add	r1, sp, #8
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7ff ff0c 	bl	800e708 <wait_session_status>
 800e8f0:	b118      	cbz	r0, 800e8fa <uxr_delete_session_retries+0x4a>
 800e8f2:	7960      	ldrb	r0, [r4, #5]
 800e8f4:	fab0 f080 	clz	r0, r0
 800e8f8:	0940      	lsrs	r0, r0, #5
 800e8fa:	b00f      	add	sp, #60	@ 0x3c
 800e8fc:	bd30      	pop	{r4, r5, pc}
 800e8fe:	bf00      	nop

0800e900 <uxr_create_session>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	f100 0308 	add.w	r3, r0, #8
 800e908:	b0ab      	sub	sp, #172	@ 0xac
 800e90a:	4604      	mov	r4, r0
 800e90c:	4618      	mov	r0, r3
 800e90e:	9303      	str	r3, [sp, #12]
 800e910:	f000 feec 	bl	800f6ec <uxr_reset_stream_storage>
 800e914:	4620      	mov	r0, r4
 800e916:	f000 fa0b 	bl	800ed30 <uxr_session_header_offset>
 800e91a:	2300      	movs	r3, #0
 800e91c:	9000      	str	r0, [sp, #0]
 800e91e:	221c      	movs	r2, #28
 800e920:	a90b      	add	r1, sp, #44	@ 0x2c
 800e922:	a812      	add	r0, sp, #72	@ 0x48
 800e924:	f7fe fcd8 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800e928:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e92a:	8a1a      	ldrh	r2, [r3, #16]
 800e92c:	3a04      	subs	r2, #4
 800e92e:	b292      	uxth	r2, r2
 800e930:	a912      	add	r1, sp, #72	@ 0x48
 800e932:	4620      	mov	r0, r4
 800e934:	f000 f924 	bl	800eb80 <uxr_buffer_create_session>
 800e938:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e93a:	4620      	mov	r0, r4
 800e93c:	f000 f990 	bl	800ec60 <uxr_stamp_create_session_header>
 800e940:	a812      	add	r0, sp, #72	@ 0x48
 800e942:	f7fe fd07 	bl	800d354 <ucdr_buffer_length>
 800e946:	23ff      	movs	r3, #255	@ 0xff
 800e948:	4683      	mov	fp, r0
 800e94a:	7163      	strb	r3, [r4, #5]
 800e94c:	f04f 080a 	mov.w	r8, #10
 800e950:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e952:	465a      	mov	r2, fp
 800e954:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e958:	a90b      	add	r1, sp, #44	@ 0x2c
 800e95a:	47a8      	blx	r5
 800e95c:	f000 ffe6 	bl	800f92c <uxr_millis>
 800e960:	2700      	movs	r7, #0
 800e962:	4605      	mov	r5, r0
 800e964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e968:	e009      	b.n	800e97e <uxr_create_session+0x7e>
 800e96a:	f000 ffdf 	bl	800f92c <uxr_millis>
 800e96e:	1b43      	subs	r3, r0, r5
 800e970:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800e974:	2b00      	cmp	r3, #0
 800e976:	7962      	ldrb	r2, [r4, #5]
 800e978:	dd3d      	ble.n	800e9f6 <uxr_create_session+0xf6>
 800e97a:	2aff      	cmp	r2, #255	@ 0xff
 800e97c:	d13b      	bne.n	800e9f6 <uxr_create_session+0xf6>
 800e97e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e980:	a907      	add	r1, sp, #28
 800e982:	6896      	ldr	r6, [r2, #8]
 800e984:	6810      	ldr	r0, [r2, #0]
 800e986:	aa08      	add	r2, sp, #32
 800e988:	47b0      	blx	r6
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d0ed      	beq.n	800e96a <uxr_create_session+0x6a>
 800e98e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e992:	a81a      	add	r0, sp, #104	@ 0x68
 800e994:	f7fe fcb2 	bl	800d2fc <ucdr_init_buffer>
 800e998:	f10d 031a 	add.w	r3, sp, #26
 800e99c:	aa06      	add	r2, sp, #24
 800e99e:	a91a      	add	r1, sp, #104	@ 0x68
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f88d 7018 	strb.w	r7, [sp, #24]
 800e9a6:	f000 f985 	bl	800ecb4 <uxr_read_session_header>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d0dd      	beq.n	800e96a <uxr_create_session+0x6a>
 800e9ae:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	f000 fe74 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e9b8:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800e9bc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800e9c0:	9302      	str	r3, [sp, #8]
 800e9c2:	f1b9 0f01 	cmp.w	r9, #1
 800e9c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e9ca:	fa5f fa80 	uxtb.w	sl, r0
 800e9ce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e9d2:	d056      	beq.n	800ea82 <uxr_create_session+0x182>
 800e9d4:	f1b9 0f02 	cmp.w	r9, #2
 800e9d8:	d018      	beq.n	800ea0c <uxr_create_session+0x10c>
 800e9da:	f1b9 0f00 	cmp.w	r9, #0
 800e9de:	d1c4      	bne.n	800e96a <uxr_create_session+0x6a>
 800e9e0:	4649      	mov	r1, r9
 800e9e2:	4648      	mov	r0, r9
 800e9e4:	f000 fe5c 	bl	800f6a0 <uxr_stream_id_from_raw>
 800e9e8:	a91a      	add	r1, sp, #104	@ 0x68
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7ff fb02 	bl	800dff8 <read_submessage_list>
 800e9f4:	e7b9      	b.n	800e96a <uxr_create_session+0x6a>
 800e9f6:	f1b8 0801 	subs.w	r8, r8, #1
 800e9fa:	d001      	beq.n	800ea00 <uxr_create_session+0x100>
 800e9fc:	2aff      	cmp	r2, #255	@ 0xff
 800e9fe:	d0a7      	beq.n	800e950 <uxr_create_session+0x50>
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	d05b      	beq.n	800eabc <uxr_create_session+0x1bc>
 800ea04:	2000      	movs	r0, #0
 800ea06:	b02b      	add	sp, #172	@ 0xac
 800ea08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0c:	9803      	ldr	r0, [sp, #12]
 800ea0e:	4631      	mov	r1, r6
 800ea10:	f000 ff26 	bl	800f860 <uxr_get_input_reliable_stream>
 800ea14:	9004      	str	r0, [sp, #16]
 800ea16:	b370      	cbz	r0, 800ea76 <uxr_create_session+0x176>
 800ea18:	aa1a      	add	r2, sp, #104	@ 0x68
 800ea1a:	4610      	mov	r0, r2
 800ea1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ea1e:	9205      	str	r2, [sp, #20]
 800ea20:	f7fe fc9c 	bl	800d35c <ucdr_buffer_remaining>
 800ea24:	4603      	mov	r3, r0
 800ea26:	f10d 0019 	add.w	r0, sp, #25
 800ea2a:	9000      	str	r0, [sp, #0]
 800ea2c:	9a05      	ldr	r2, [sp, #20]
 800ea2e:	9902      	ldr	r1, [sp, #8]
 800ea30:	9804      	ldr	r0, [sp, #16]
 800ea32:	f007 fcc7 	bl	80163c4 <uxr_receive_reliable_message>
 800ea36:	b1f0      	cbz	r0, 800ea76 <uxr_create_session+0x176>
 800ea38:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d035      	beq.n	800eaac <uxr_create_session+0x1ac>
 800ea40:	f8cd b008 	str.w	fp, [sp, #8]
 800ea44:	f04f 0902 	mov.w	r9, #2
 800ea48:	f8dd b010 	ldr.w	fp, [sp, #16]
 800ea4c:	e00a      	b.n	800ea64 <uxr_create_session+0x164>
 800ea4e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800ea52:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800ea56:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800ea5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea5c:	a922      	add	r1, sp, #136	@ 0x88
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f7ff faca 	bl	800dff8 <read_submessage_list>
 800ea64:	2204      	movs	r2, #4
 800ea66:	a922      	add	r1, sp, #136	@ 0x88
 800ea68:	4658      	mov	r0, fp
 800ea6a:	f007 fd25 	bl	80164b8 <uxr_next_input_reliable_buffer_available>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d1ed      	bne.n	800ea4e <uxr_create_session+0x14e>
 800ea72:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ea76:	4632      	mov	r2, r6
 800ea78:	4651      	mov	r1, sl
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f7ff f962 	bl	800dd44 <write_submessage_acknack.isra.0>
 800ea80:	e773      	b.n	800e96a <uxr_create_session+0x6a>
 800ea82:	9803      	ldr	r0, [sp, #12]
 800ea84:	4631      	mov	r1, r6
 800ea86:	f000 fee1 	bl	800f84c <uxr_get_input_best_effort_stream>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f43f af6d 	beq.w	800e96a <uxr_create_session+0x6a>
 800ea90:	9902      	ldr	r1, [sp, #8]
 800ea92:	f007 fc07 	bl	80162a4 <uxr_receive_best_effort_message>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	f43f af67 	beq.w	800e96a <uxr_create_session+0x6a>
 800ea9c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800eaa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eaa2:	a91a      	add	r1, sp, #104	@ 0x68
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f7ff faa7 	bl	800dff8 <read_submessage_list>
 800eaaa:	e75e      	b.n	800e96a <uxr_create_session+0x6a>
 800eaac:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800eab0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eab2:	a91a      	add	r1, sp, #104	@ 0x68
 800eab4:	4620      	mov	r0, r4
 800eab6:	f7ff fa9f 	bl	800dff8 <read_submessage_list>
 800eaba:	e7c1      	b.n	800ea40 <uxr_create_session+0x140>
 800eabc:	9803      	ldr	r0, [sp, #12]
 800eabe:	f000 fe15 	bl	800f6ec <uxr_reset_stream_storage>
 800eac2:	2001      	movs	r0, #1
 800eac4:	b02b      	add	sp, #172	@ 0xac
 800eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaca:	bf00      	nop

0800eacc <uxr_prepare_stream_to_write_submessage>:
 800eacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ead0:	b082      	sub	sp, #8
 800ead2:	4606      	mov	r6, r0
 800ead4:	4610      	mov	r0, r2
 800ead6:	4614      	mov	r4, r2
 800ead8:	9101      	str	r1, [sp, #4]
 800eada:	461f      	mov	r7, r3
 800eadc:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800eae0:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800eae4:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800eae8:	f000 ff1a 	bl	800f920 <uxr_submessage_padding>
 800eaec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eaf0:	1d21      	adds	r1, r4, #4
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	eb01 0a00 	add.w	sl, r1, r0
 800eaf8:	d012      	beq.n	800eb20 <uxr_prepare_stream_to_write_submessage+0x54>
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d003      	beq.n	800eb06 <uxr_prepare_stream_to_write_submessage+0x3a>
 800eafe:	2000      	movs	r0, #0
 800eb00:	b002      	add	sp, #8
 800eb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb06:	4629      	mov	r1, r5
 800eb08:	f106 0008 	add.w	r0, r6, #8
 800eb0c:	f000 fe94 	bl	800f838 <uxr_get_output_reliable_stream>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d0f4      	beq.n	800eafe <uxr_prepare_stream_to_write_submessage+0x32>
 800eb14:	4651      	mov	r1, sl
 800eb16:	463a      	mov	r2, r7
 800eb18:	f007 fe84 	bl	8016824 <uxr_prepare_reliable_buffer_to_write>
 800eb1c:	b968      	cbnz	r0, 800eb3a <uxr_prepare_stream_to_write_submessage+0x6e>
 800eb1e:	e7ee      	b.n	800eafe <uxr_prepare_stream_to_write_submessage+0x32>
 800eb20:	4629      	mov	r1, r5
 800eb22:	f106 0008 	add.w	r0, r6, #8
 800eb26:	f000 fe7f 	bl	800f828 <uxr_get_output_best_effort_stream>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d0e7      	beq.n	800eafe <uxr_prepare_stream_to_write_submessage+0x32>
 800eb2e:	4651      	mov	r1, sl
 800eb30:	463a      	mov	r2, r7
 800eb32:	f007 fda9 	bl	8016688 <uxr_prepare_best_effort_buffer_to_write>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d0e1      	beq.n	800eafe <uxr_prepare_stream_to_write_submessage+0x32>
 800eb3a:	464b      	mov	r3, r9
 800eb3c:	b2a2      	uxth	r2, r4
 800eb3e:	4641      	mov	r1, r8
 800eb40:	4638      	mov	r0, r7
 800eb42:	f000 fead 	bl	800f8a0 <uxr_buffer_submessage_header>
 800eb46:	2001      	movs	r0, #1
 800eb48:	b002      	add	sp, #8
 800eb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb4e:	bf00      	nop

0800eb50 <uxr_init_session_info>:
 800eb50:	2300      	movs	r3, #0
 800eb52:	f361 0307 	bfi	r3, r1, #0, #8
 800eb56:	0e11      	lsrs	r1, r2, #24
 800eb58:	f361 230f 	bfi	r3, r1, #8, #8
 800eb5c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800eb60:	f361 4317 	bfi	r3, r1, #16, #8
 800eb64:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800eb68:	f361 631f 	bfi	r3, r1, #24, #8
 800eb6c:	f04f 0c09 	mov.w	ip, #9
 800eb70:	21ff      	movs	r1, #255	@ 0xff
 800eb72:	6003      	str	r3, [r0, #0]
 800eb74:	7102      	strb	r2, [r0, #4]
 800eb76:	f8a0 c006 	strh.w	ip, [r0, #6]
 800eb7a:	7141      	strb	r1, [r0, #5]
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop

0800eb80 <uxr_buffer_create_session>:
 800eb80:	b530      	push	{r4, r5, lr}
 800eb82:	4d13      	ldr	r5, [pc, #76]	@ (800ebd0 <uxr_buffer_create_session+0x50>)
 800eb84:	b089      	sub	sp, #36	@ 0x24
 800eb86:	2300      	movs	r3, #0
 800eb88:	9307      	str	r3, [sp, #28]
 800eb8a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800eb8e:	682a      	ldr	r2, [r5, #0]
 800eb90:	9200      	str	r2, [sp, #0]
 800eb92:	460c      	mov	r4, r1
 800eb94:	2201      	movs	r2, #1
 800eb96:	88a9      	ldrh	r1, [r5, #4]
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	80c2      	strh	r2, [r0, #6]
 800eb9c:	f8ad 1006 	strh.w	r1, [sp, #6]
 800eba0:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800eba4:	7800      	ldrb	r0, [r0, #0]
 800eba6:	9303      	str	r3, [sp, #12]
 800eba8:	f88d 2004 	strb.w	r2, [sp, #4]
 800ebac:	9102      	str	r1, [sp, #8]
 800ebae:	2210      	movs	r2, #16
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	f88d 000c 	strb.w	r0, [sp, #12]
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ebbc:	9306      	str	r3, [sp, #24]
 800ebbe:	f000 fe6f 	bl	800f8a0 <uxr_buffer_submessage_header>
 800ebc2:	4669      	mov	r1, sp
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f001 fe8f 	bl	80108e8 <uxr_serialize_CREATE_CLIENT_Payload>
 800ebca:	b009      	add	sp, #36	@ 0x24
 800ebcc:	bd30      	pop	{r4, r5, pc}
 800ebce:	bf00      	nop
 800ebd0:	08019660 	.word	0x08019660

0800ebd4 <uxr_buffer_delete_session>:
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ec08 <uxr_buffer_delete_session+0x34>)
 800ebd8:	b082      	sub	sp, #8
 800ebda:	460c      	mov	r4, r1
 800ebdc:	2302      	movs	r3, #2
 800ebde:	8911      	ldrh	r1, [r2, #8]
 800ebe0:	80c3      	strh	r3, [r0, #6]
 800ebe2:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	2204      	movs	r2, #4
 800ebea:	f8ad 1006 	strh.w	r1, [sp, #6]
 800ebee:	4620      	mov	r0, r4
 800ebf0:	2103      	movs	r1, #3
 800ebf2:	f8ad c004 	strh.w	ip, [sp, #4]
 800ebf6:	f000 fe53 	bl	800f8a0 <uxr_buffer_submessage_header>
 800ebfa:	a901      	add	r1, sp, #4
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f001 ff2b 	bl	8010a58 <uxr_serialize_DELETE_Payload>
 800ec02:	b002      	add	sp, #8
 800ec04:	bd10      	pop	{r4, pc}
 800ec06:	bf00      	nop
 800ec08:	08019660 	.word	0x08019660

0800ec0c <uxr_read_create_session_status>:
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	460b      	mov	r3, r1
 800ec10:	b088      	sub	sp, #32
 800ec12:	4604      	mov	r4, r0
 800ec14:	a901      	add	r1, sp, #4
 800ec16:	4618      	mov	r0, r3
 800ec18:	f001 ff2e 	bl	8010a78 <uxr_deserialize_STATUS_AGENT_Payload>
 800ec1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec20:	7163      	strb	r3, [r4, #5]
 800ec22:	b008      	add	sp, #32
 800ec24:	bd10      	pop	{r4, pc}
 800ec26:	bf00      	nop

0800ec28 <uxr_read_delete_session_status>:
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	4604      	mov	r4, r0
 800ec30:	4669      	mov	r1, sp
 800ec32:	4618      	mov	r0, r3
 800ec34:	f001 ff50 	bl	8010ad8 <uxr_deserialize_STATUS_Payload>
 800ec38:	88e3      	ldrh	r3, [r4, #6]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d001      	beq.n	800ec42 <uxr_read_delete_session_status+0x1a>
 800ec3e:	b002      	add	sp, #8
 800ec40:	bd10      	pop	{r4, pc}
 800ec42:	f10d 0002 	add.w	r0, sp, #2
 800ec46:	f7fe fefb 	bl	800da40 <uxr_object_id_from_raw>
 800ec4a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ec4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ec52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec56:	bf08      	it	eq
 800ec58:	7162      	strbeq	r2, [r4, #5]
 800ec5a:	b002      	add	sp, #8
 800ec5c:	bd10      	pop	{r4, pc}
 800ec5e:	bf00      	nop

0800ec60 <uxr_stamp_create_session_header>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	2208      	movs	r2, #8
 800ec64:	b08a      	sub	sp, #40	@ 0x28
 800ec66:	4604      	mov	r4, r0
 800ec68:	eb0d 0002 	add.w	r0, sp, r2
 800ec6c:	f7fe fb46 	bl	800d2fc <ucdr_init_buffer>
 800ec70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec74:	9400      	str	r4, [sp, #0]
 800ec76:	2300      	movs	r3, #0
 800ec78:	461a      	mov	r2, r3
 800ec7a:	a802      	add	r0, sp, #8
 800ec7c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800ec80:	f001 f80c 	bl	800fc9c <uxr_serialize_message_header>
 800ec84:	b00a      	add	sp, #40	@ 0x28
 800ec86:	bd10      	pop	{r4, pc}

0800ec88 <uxr_stamp_session_header>:
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	b08a      	sub	sp, #40	@ 0x28
 800ec8e:	4616      	mov	r6, r2
 800ec90:	2208      	movs	r2, #8
 800ec92:	eb0d 0002 	add.w	r0, sp, r2
 800ec96:	460d      	mov	r5, r1
 800ec98:	4619      	mov	r1, r3
 800ec9a:	f7fe fb2f 	bl	800d2fc <ucdr_init_buffer>
 800ec9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca2:	9400      	str	r4, [sp, #0]
 800eca4:	4633      	mov	r3, r6
 800eca6:	462a      	mov	r2, r5
 800eca8:	a802      	add	r0, sp, #8
 800ecaa:	f000 fff7 	bl	800fc9c <uxr_serialize_message_header>
 800ecae:	b00a      	add	sp, #40	@ 0x28
 800ecb0:	bd70      	pop	{r4, r5, r6, pc}
 800ecb2:	bf00      	nop

0800ecb4 <uxr_read_session_header>:
 800ecb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	b085      	sub	sp, #20
 800ecba:	4608      	mov	r0, r1
 800ecbc:	460c      	mov	r4, r1
 800ecbe:	4615      	mov	r5, r2
 800ecc0:	461e      	mov	r6, r3
 800ecc2:	f7fe fb4b 	bl	800d35c <ucdr_buffer_remaining>
 800ecc6:	2808      	cmp	r0, #8
 800ecc8:	d802      	bhi.n	800ecd0 <uxr_read_session_header+0x1c>
 800ecca:	2000      	movs	r0, #0
 800eccc:	b005      	add	sp, #20
 800ecce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecd0:	ab03      	add	r3, sp, #12
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	462a      	mov	r2, r5
 800ecd6:	4633      	mov	r3, r6
 800ecd8:	f10d 010b 	add.w	r1, sp, #11
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 fffb 	bl	800fcd8 <uxr_deserialize_message_header>
 800ece2:	783a      	ldrb	r2, [r7, #0]
 800ece4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d1ee      	bne.n	800ecca <uxr_read_session_header+0x16>
 800ecec:	061b      	lsls	r3, r3, #24
 800ecee:	d41c      	bmi.n	800ed2a <uxr_read_session_header+0x76>
 800ecf0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ecf4:	787b      	ldrb	r3, [r7, #1]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d003      	beq.n	800ed02 <uxr_read_session_header+0x4e>
 800ecfa:	2001      	movs	r0, #1
 800ecfc:	f080 0001 	eor.w	r0, r0, #1
 800ed00:	e7e4      	b.n	800eccc <uxr_read_session_header+0x18>
 800ed02:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ed06:	78bb      	ldrb	r3, [r7, #2]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	f107 0102 	add.w	r1, r7, #2
 800ed0e:	d1f4      	bne.n	800ecfa <uxr_read_session_header+0x46>
 800ed10:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ed14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d1ee      	bne.n	800ecfa <uxr_read_session_header+0x46>
 800ed1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ed20:	784b      	ldrb	r3, [r1, #1]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d1e9      	bne.n	800ecfa <uxr_read_session_header+0x46>
 800ed26:	2000      	movs	r0, #0
 800ed28:	e7e8      	b.n	800ecfc <uxr_read_session_header+0x48>
 800ed2a:	2001      	movs	r0, #1
 800ed2c:	e7ce      	b.n	800eccc <uxr_read_session_header+0x18>
 800ed2e:	bf00      	nop

0800ed30 <uxr_session_header_offset>:
 800ed30:	f990 3000 	ldrsb.w	r3, [r0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	bfb4      	ite	lt
 800ed38:	2004      	movlt	r0, #4
 800ed3a:	2008      	movge	r0, #8
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop

0800ed40 <uxr_init_base_object_request>:
 800ed40:	b510      	push	{r4, lr}
 800ed42:	88c3      	ldrh	r3, [r0, #6]
 800ed44:	b082      	sub	sp, #8
 800ed46:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ed4a:	9101      	str	r1, [sp, #4]
 800ed4c:	f1a3 010a 	sub.w	r1, r3, #10
 800ed50:	b289      	uxth	r1, r1
 800ed52:	42a1      	cmp	r1, r4
 800ed54:	d80e      	bhi.n	800ed74 <uxr_init_base_object_request+0x34>
 800ed56:	3301      	adds	r3, #1
 800ed58:	b29c      	uxth	r4, r3
 800ed5a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	80c4      	strh	r4, [r0, #6]
 800ed62:	9801      	ldr	r0, [sp, #4]
 800ed64:	7011      	strb	r1, [r2, #0]
 800ed66:	7053      	strb	r3, [r2, #1]
 800ed68:	1c91      	adds	r1, r2, #2
 800ed6a:	f7fe fe7d 	bl	800da68 <uxr_object_id_to_raw>
 800ed6e:	4620      	mov	r0, r4
 800ed70:	b002      	add	sp, #8
 800ed72:	bd10      	pop	{r4, pc}
 800ed74:	230a      	movs	r3, #10
 800ed76:	2100      	movs	r1, #0
 800ed78:	461c      	mov	r4, r3
 800ed7a:	e7f1      	b.n	800ed60 <uxr_init_base_object_request+0x20>

0800ed7c <uxr_parse_base_object_request>:
 800ed7c:	b570      	push	{r4, r5, r6, lr}
 800ed7e:	4604      	mov	r4, r0
 800ed80:	3002      	adds	r0, #2
 800ed82:	460d      	mov	r5, r1
 800ed84:	4616      	mov	r6, r2
 800ed86:	f7fe fe5b 	bl	800da40 <uxr_object_id_from_raw>
 800ed8a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ed8e:	8028      	strh	r0, [r5, #0]
 800ed90:	806b      	strh	r3, [r5, #2]
 800ed92:	8823      	ldrh	r3, [r4, #0]
 800ed94:	ba5b      	rev16	r3, r3
 800ed96:	8033      	strh	r3, [r6, #0]
 800ed98:	bd70      	pop	{r4, r5, r6, pc}
 800ed9a:	bf00      	nop

0800ed9c <uxr_init_framing_io>:
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	7041      	strb	r1, [r0, #1]
 800eda0:	7003      	strb	r3, [r0, #0]
 800eda2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop

0800eda8 <uxr_write_framed_msg>:
 800eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	f890 c001 	ldrb.w	ip, [r0, #1]
 800edb0:	4617      	mov	r7, r2
 800edb2:	227e      	movs	r2, #126	@ 0x7e
 800edb4:	b085      	sub	sp, #20
 800edb6:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800edba:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800edbe:	2a01      	cmp	r2, #1
 800edc0:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800edc4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800edc8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800edcc:	4604      	mov	r4, r0
 800edce:	460e      	mov	r6, r1
 800edd0:	469a      	mov	sl, r3
 800edd2:	f240 812e 	bls.w	800f032 <uxr_write_framed_msg+0x28a>
 800edd6:	2003      	movs	r0, #3
 800edd8:	2102      	movs	r1, #2
 800edda:	f04f 0905 	mov.w	r9, #5
 800edde:	2204      	movs	r2, #4
 800ede0:	4686      	mov	lr, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800ede8:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800edec:	f1bc 0f01 	cmp.w	ip, #1
 800edf0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800edf4:	4421      	add	r1, r4
 800edf6:	f240 8110 	bls.w	800f01a <uxr_write_framed_msg+0x272>
 800edfa:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800edfe:	fa5f fc8b 	uxtb.w	ip, fp
 800ee02:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800ee06:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800ee0a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800ee0e:	f1be 0f01 	cmp.w	lr, #1
 800ee12:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800ee16:	b2ed      	uxtb	r5, r5
 800ee18:	d94c      	bls.n	800eeb4 <uxr_write_framed_msg+0x10c>
 800ee1a:	4420      	add	r0, r4
 800ee1c:	2d01      	cmp	r5, #1
 800ee1e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800ee22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee26:	d95d      	bls.n	800eee4 <uxr_write_framed_msg+0x13c>
 800ee28:	18a0      	adds	r0, r4, r2
 800ee2a:	3201      	adds	r2, #1
 800ee2c:	b2d2      	uxtb	r2, r2
 800ee2e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ee32:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee36:	f1bb 0f00 	cmp.w	fp, #0
 800ee3a:	f000 8108 	beq.w	800f04e <uxr_write_framed_msg+0x2a6>
 800ee3e:	f04f 0c00 	mov.w	ip, #0
 800ee42:	4661      	mov	r1, ip
 800ee44:	46de      	mov	lr, fp
 800ee46:	46e3      	mov	fp, ip
 800ee48:	46d4      	mov	ip, sl
 800ee4a:	468a      	mov	sl, r1
 800ee4c:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800f058 <uxr_write_framed_msg+0x2b0>
 800ee50:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800ee54:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ee58:	2901      	cmp	r1, #1
 800ee5a:	d91b      	bls.n	800ee94 <uxr_write_framed_msg+0xec>
 800ee5c:	2a29      	cmp	r2, #41	@ 0x29
 800ee5e:	d84e      	bhi.n	800eefe <uxr_write_framed_msg+0x156>
 800ee60:	18a1      	adds	r1, r4, r2
 800ee62:	3201      	adds	r2, #1
 800ee64:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800ee68:	b2d2      	uxtb	r2, r2
 800ee6a:	ea8b 0303 	eor.w	r3, fp, r3
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee74:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800ee78:	f10a 0a01 	add.w	sl, sl, #1
 800ee7c:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800ee80:	45d6      	cmp	lr, sl
 800ee82:	d95a      	bls.n	800ef3a <uxr_write_framed_msg+0x192>
 800ee84:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800ee88:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ee8c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ee90:	2901      	cmp	r1, #1
 800ee92:	d8e3      	bhi.n	800ee5c <uxr_write_framed_msg+0xb4>
 800ee94:	1c51      	adds	r1, r2, #1
 800ee96:	b2c9      	uxtb	r1, r1
 800ee98:	2929      	cmp	r1, #41	@ 0x29
 800ee9a:	d830      	bhi.n	800eefe <uxr_write_framed_msg+0x156>
 800ee9c:	18a1      	adds	r1, r4, r2
 800ee9e:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800eea2:	3202      	adds	r2, #2
 800eea4:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800eea8:	f083 0020 	eor.w	r0, r3, #32
 800eeac:	b2d2      	uxtb	r2, r2
 800eeae:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800eeb2:	e7da      	b.n	800ee6a <uxr_write_framed_msg+0xc2>
 800eeb4:	eb04 0e00 	add.w	lr, r4, r0
 800eeb8:	f08c 0c20 	eor.w	ip, ip, #32
 800eebc:	1c82      	adds	r2, r0, #2
 800eebe:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800eec2:	b2d2      	uxtb	r2, r2
 800eec4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800eec8:	2d01      	cmp	r5, #1
 800eeca:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800eece:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eed2:	d907      	bls.n	800eee4 <uxr_write_framed_msg+0x13c>
 800eed4:	4422      	add	r2, r4
 800eed6:	3003      	adds	r0, #3
 800eed8:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800eedc:	b2c2      	uxtb	r2, r0
 800eede:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eee2:	e7ac      	b.n	800ee3e <uxr_write_framed_msg+0x96>
 800eee4:	18a0      	adds	r0, r4, r2
 800eee6:	f081 0120 	eor.w	r1, r1, #32
 800eeea:	3202      	adds	r2, #2
 800eeec:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800eef0:	b2d2      	uxtb	r2, r2
 800eef2:	217d      	movs	r1, #125	@ 0x7d
 800eef4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800eef8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eefc:	e79f      	b.n	800ee3e <uxr_write_framed_msg+0x96>
 800eefe:	e9cd ba00 	strd	fp, sl, [sp]
 800ef02:	2500      	movs	r5, #0
 800ef04:	46e2      	mov	sl, ip
 800ef06:	46f3      	mov	fp, lr
 800ef08:	e000      	b.n	800ef0c <uxr_write_framed_msg+0x164>
 800ef0a:	b190      	cbz	r0, 800ef32 <uxr_write_framed_msg+0x18a>
 800ef0c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ef10:	1b52      	subs	r2, r2, r5
 800ef12:	4643      	mov	r3, r8
 800ef14:	4421      	add	r1, r4
 800ef16:	4638      	mov	r0, r7
 800ef18:	47b0      	blx	r6
 800ef1a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ef1e:	4405      	add	r5, r0
 800ef20:	4295      	cmp	r5, r2
 800ef22:	d3f2      	bcc.n	800ef0a <uxr_write_framed_msg+0x162>
 800ef24:	46d4      	mov	ip, sl
 800ef26:	46de      	mov	lr, fp
 800ef28:	f8dd a004 	ldr.w	sl, [sp, #4]
 800ef2c:	f8dd b000 	ldr.w	fp, [sp]
 800ef30:	d06f      	beq.n	800f012 <uxr_write_framed_msg+0x26a>
 800ef32:	2000      	movs	r0, #0
 800ef34:	b005      	add	sp, #20
 800ef36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3a:	46dc      	mov	ip, fp
 800ef3c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ef40:	f8ad c00c 	strh.w	ip, [sp, #12]
 800ef44:	46f3      	mov	fp, lr
 800ef46:	fa5f fc8c 	uxtb.w	ip, ip
 800ef4a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	f04f 0900 	mov.w	r9, #0
 800ef54:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800ef58:	d930      	bls.n	800efbc <uxr_write_framed_msg+0x214>
 800ef5a:	2a29      	cmp	r2, #41	@ 0x29
 800ef5c:	d91c      	bls.n	800ef98 <uxr_write_framed_msg+0x1f0>
 800ef5e:	2500      	movs	r5, #0
 800ef60:	e001      	b.n	800ef66 <uxr_write_framed_msg+0x1be>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d0e5      	beq.n	800ef32 <uxr_write_framed_msg+0x18a>
 800ef66:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ef6a:	1b52      	subs	r2, r2, r5
 800ef6c:	4643      	mov	r3, r8
 800ef6e:	4421      	add	r1, r4
 800ef70:	4638      	mov	r0, r7
 800ef72:	47b0      	blx	r6
 800ef74:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ef78:	4405      	add	r5, r0
 800ef7a:	4295      	cmp	r5, r2
 800ef7c:	d3f1      	bcc.n	800ef62 <uxr_write_framed_msg+0x1ba>
 800ef7e:	d1d8      	bne.n	800ef32 <uxr_write_framed_msg+0x18a>
 800ef80:	f109 0310 	add.w	r3, r9, #16
 800ef84:	446b      	add	r3, sp
 800ef86:	2200      	movs	r2, #0
 800ef88:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800ef8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ef90:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d911      	bls.n	800efbc <uxr_write_framed_msg+0x214>
 800ef98:	18a3      	adds	r3, r4, r2
 800ef9a:	3201      	adds	r2, #1
 800ef9c:	b2d2      	uxtb	r2, r2
 800ef9e:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800efa2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800efa6:	f1b9 0f00 	cmp.w	r9, #0
 800efaa:	d119      	bne.n	800efe0 <uxr_write_framed_msg+0x238>
 800efac:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800efb0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	f04f 0901 	mov.w	r9, #1
 800efba:	d8ce      	bhi.n	800ef5a <uxr_write_framed_msg+0x1b2>
 800efbc:	1c53      	adds	r3, r2, #1
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b29      	cmp	r3, #41	@ 0x29
 800efc2:	d8cc      	bhi.n	800ef5e <uxr_write_framed_msg+0x1b6>
 800efc4:	18a3      	adds	r3, r4, r2
 800efc6:	3202      	adds	r2, #2
 800efc8:	f08c 0c20 	eor.w	ip, ip, #32
 800efcc:	b2d2      	uxtb	r2, r2
 800efce:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800efd2:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800efd6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800efda:	f1b9 0f00 	cmp.w	r9, #0
 800efde:	d0e5      	beq.n	800efac <uxr_write_framed_msg+0x204>
 800efe0:	2500      	movs	r5, #0
 800efe2:	e001      	b.n	800efe8 <uxr_write_framed_msg+0x240>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d0a4      	beq.n	800ef32 <uxr_write_framed_msg+0x18a>
 800efe8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800efec:	1b52      	subs	r2, r2, r5
 800efee:	4643      	mov	r3, r8
 800eff0:	4421      	add	r1, r4
 800eff2:	4638      	mov	r0, r7
 800eff4:	47b0      	blx	r6
 800eff6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800effa:	4405      	add	r5, r0
 800effc:	4295      	cmp	r5, r2
 800effe:	d3f1      	bcc.n	800efe4 <uxr_write_framed_msg+0x23c>
 800f000:	d197      	bne.n	800ef32 <uxr_write_framed_msg+0x18a>
 800f002:	2300      	movs	r3, #0
 800f004:	fa1f f08b 	uxth.w	r0, fp
 800f008:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f00c:	b005      	add	sp, #20
 800f00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f012:	2300      	movs	r3, #0
 800f014:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f018:	e732      	b.n	800ee80 <uxr_write_framed_msg+0xd8>
 800f01a:	44a6      	add	lr, r4
 800f01c:	f085 0520 	eor.w	r5, r5, #32
 800f020:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f024:	4610      	mov	r0, r2
 800f026:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800f02a:	464a      	mov	r2, r9
 800f02c:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800f030:	e6e5      	b.n	800edfe <uxr_write_framed_msg+0x56>
 800f032:	f08c 0c20 	eor.w	ip, ip, #32
 800f036:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800f03a:	2103      	movs	r1, #3
 800f03c:	2004      	movs	r0, #4
 800f03e:	f04f 0906 	mov.w	r9, #6
 800f042:	2205      	movs	r2, #5
 800f044:	4686      	mov	lr, r0
 800f046:	460b      	mov	r3, r1
 800f048:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f04c:	e6ca      	b.n	800ede4 <uxr_write_framed_msg+0x3c>
 800f04e:	f8ad b00c 	strh.w	fp, [sp, #12]
 800f052:	46dc      	mov	ip, fp
 800f054:	e779      	b.n	800ef4a <uxr_write_framed_msg+0x1a2>
 800f056:	bf00      	nop
 800f058:	0801a054 	.word	0x0801a054

0800f05c <uxr_framing_read_transport>:
 800f05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f060:	4604      	mov	r4, r0
 800f062:	b083      	sub	sp, #12
 800f064:	461f      	mov	r7, r3
 800f066:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f06a:	4689      	mov	r9, r1
 800f06c:	4692      	mov	sl, r2
 800f06e:	f000 fc5d 	bl	800f92c <uxr_millis>
 800f072:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f076:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f07a:	42b3      	cmp	r3, r6
 800f07c:	4680      	mov	r8, r0
 800f07e:	d062      	beq.n	800f146 <uxr_framing_read_transport+0xea>
 800f080:	d81c      	bhi.n	800f0bc <uxr_framing_read_transport+0x60>
 800f082:	1e75      	subs	r5, r6, #1
 800f084:	1aed      	subs	r5, r5, r3
 800f086:	b2ed      	uxtb	r5, r5
 800f088:	2600      	movs	r6, #0
 800f08a:	455d      	cmp	r5, fp
 800f08c:	d81f      	bhi.n	800f0ce <uxr_framing_read_transport+0x72>
 800f08e:	19ab      	adds	r3, r5, r6
 800f090:	455b      	cmp	r3, fp
 800f092:	bf84      	itt	hi
 800f094:	ebab 0b05 	subhi.w	fp, fp, r5
 800f098:	fa5f f68b 	uxtbhi.w	r6, fp
 800f09c:	b9e5      	cbnz	r5, 800f0d8 <uxr_framing_read_transport+0x7c>
 800f09e:	f04f 0b00 	mov.w	fp, #0
 800f0a2:	f000 fc43 	bl	800f92c <uxr_millis>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	eba0 0108 	sub.w	r1, r0, r8
 800f0ac:	1a5b      	subs	r3, r3, r1
 800f0ae:	4658      	mov	r0, fp
 800f0b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f0b4:	603b      	str	r3, [r7, #0]
 800f0b6:	b003      	add	sp, #12
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	2e00      	cmp	r6, #0
 800f0be:	d04a      	beq.n	800f156 <uxr_framing_read_transport+0xfa>
 800f0c0:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800f0c4:	b2dd      	uxtb	r5, r3
 800f0c6:	3e01      	subs	r6, #1
 800f0c8:	455d      	cmp	r5, fp
 800f0ca:	b2f6      	uxtb	r6, r6
 800f0cc:	d9df      	bls.n	800f08e <uxr_framing_read_transport+0x32>
 800f0ce:	fa5f f58b 	uxtb.w	r5, fp
 800f0d2:	2600      	movs	r6, #0
 800f0d4:	2d00      	cmp	r5, #0
 800f0d6:	d0e2      	beq.n	800f09e <uxr_framing_read_transport+0x42>
 800f0d8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f0dc:	3102      	adds	r1, #2
 800f0de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	4421      	add	r1, r4
 800f0e6:	462a      	mov	r2, r5
 800f0e8:	4650      	mov	r0, sl
 800f0ea:	47c8      	blx	r9
 800f0ec:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f0f0:	4a1b      	ldr	r2, [pc, #108]	@ (800f160 <uxr_framing_read_transport+0x104>)
 800f0f2:	4403      	add	r3, r0
 800f0f4:	0859      	lsrs	r1, r3, #1
 800f0f6:	4683      	mov	fp, r0
 800f0f8:	fba2 0101 	umull	r0, r1, r2, r1
 800f0fc:	0889      	lsrs	r1, r1, #2
 800f0fe:	222a      	movs	r2, #42	@ 0x2a
 800f100:	fb02 3111 	mls	r1, r2, r1, r3
 800f104:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f108:	f1bb 0f00 	cmp.w	fp, #0
 800f10c:	d0c7      	beq.n	800f09e <uxr_framing_read_transport+0x42>
 800f10e:	45ab      	cmp	fp, r5
 800f110:	d1c7      	bne.n	800f0a2 <uxr_framing_read_transport+0x46>
 800f112:	2e00      	cmp	r6, #0
 800f114:	d0c5      	beq.n	800f0a2 <uxr_framing_read_transport+0x46>
 800f116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	3102      	adds	r1, #2
 800f11c:	4632      	mov	r2, r6
 800f11e:	4421      	add	r1, r4
 800f120:	2300      	movs	r3, #0
 800f122:	4650      	mov	r0, sl
 800f124:	47c8      	blx	r9
 800f126:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f12a:	4a0d      	ldr	r2, [pc, #52]	@ (800f160 <uxr_framing_read_transport+0x104>)
 800f12c:	4403      	add	r3, r0
 800f12e:	0859      	lsrs	r1, r3, #1
 800f130:	fba2 2101 	umull	r2, r1, r2, r1
 800f134:	0889      	lsrs	r1, r1, #2
 800f136:	222a      	movs	r2, #42	@ 0x2a
 800f138:	fb02 3311 	mls	r3, r2, r1, r3
 800f13c:	eb00 0b05 	add.w	fp, r0, r5
 800f140:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f144:	e7ad      	b.n	800f0a2 <uxr_framing_read_transport+0x46>
 800f146:	2600      	movs	r6, #0
 800f148:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f14c:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f14e:	d9be      	bls.n	800f0ce <uxr_framing_read_transport+0x72>
 800f150:	2529      	movs	r5, #41	@ 0x29
 800f152:	2102      	movs	r1, #2
 800f154:	e7c3      	b.n	800f0de <uxr_framing_read_transport+0x82>
 800f156:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800f15a:	b2dd      	uxtb	r5, r3
 800f15c:	e795      	b.n	800f08a <uxr_framing_read_transport+0x2e>
 800f15e:	bf00      	nop
 800f160:	30c30c31 	.word	0x30c30c31

0800f164 <uxr_read_framed_msg>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	461d      	mov	r5, r3
 800f16a:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800f16e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f172:	b085      	sub	sp, #20
 800f174:	459c      	cmp	ip, r3
 800f176:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800f17a:	4604      	mov	r4, r0
 800f17c:	460f      	mov	r7, r1
 800f17e:	4616      	mov	r6, r2
 800f180:	f000 81ae 	beq.w	800f4e0 <uxr_read_framed_msg+0x37c>
 800f184:	2000      	movs	r0, #0
 800f186:	4639      	mov	r1, r7
 800f188:	2800      	cmp	r0, #0
 800f18a:	d138      	bne.n	800f1fe <uxr_read_framed_msg+0x9a>
 800f18c:	468a      	mov	sl, r1
 800f18e:	7823      	ldrb	r3, [r4, #0]
 800f190:	2b07      	cmp	r3, #7
 800f192:	d8fd      	bhi.n	800f190 <uxr_read_framed_msg+0x2c>
 800f194:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f198:	0116013b 	.word	0x0116013b
 800f19c:	00cd00f0 	.word	0x00cd00f0
 800f1a0:	005a00a0 	.word	0x005a00a0
 800f1a4:	00080037 	.word	0x00080037
 800f1a8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f1ac:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f1b0:	4290      	cmp	r0, r2
 800f1b2:	f000 8167 	beq.w	800f484 <uxr_read_framed_msg+0x320>
 800f1b6:	18a3      	adds	r3, r4, r2
 800f1b8:	1c57      	adds	r7, r2, #1
 800f1ba:	49c7      	ldr	r1, [pc, #796]	@ (800f4d8 <uxr_read_framed_msg+0x374>)
 800f1bc:	f893 c002 	ldrb.w	ip, [r3, #2]
 800f1c0:	087b      	lsrs	r3, r7, #1
 800f1c2:	fba1 8303 	umull	r8, r3, r1, r3
 800f1c6:	089b      	lsrs	r3, r3, #2
 800f1c8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f1cc:	fb08 7313 	mls	r3, r8, r3, r7
 800f1d0:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f1d4:	b2df      	uxtb	r7, r3
 800f1d6:	f000 81b2 	beq.w	800f53e <uxr_read_framed_msg+0x3da>
 800f1da:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f1de:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800f1e2:	f000 8220 	beq.w	800f626 <uxr_read_framed_msg+0x4c2>
 800f1e6:	4661      	mov	r1, ip
 800f1e8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f1ea:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f1ec:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f1f8:	7021      	strb	r1, [r4, #0]
 800f1fa:	f000 8198 	beq.w	800f52e <uxr_read_framed_msg+0x3ca>
 800f1fe:	2000      	movs	r0, #0
 800f200:	b005      	add	sp, #20
 800f202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f206:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f20a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f20e:	4297      	cmp	r7, r2
 800f210:	f000 8148 	beq.w	800f4a4 <uxr_read_framed_msg+0x340>
 800f214:	18a3      	adds	r3, r4, r2
 800f216:	f102 0c01 	add.w	ip, r2, #1
 800f21a:	49af      	ldr	r1, [pc, #700]	@ (800f4d8 <uxr_read_framed_msg+0x374>)
 800f21c:	7898      	ldrb	r0, [r3, #2]
 800f21e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f222:	fba1 8303 	umull	r8, r3, r1, r3
 800f226:	089b      	lsrs	r3, r3, #2
 800f228:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f22c:	fb08 c313 	mls	r3, r8, r3, ip
 800f230:	287d      	cmp	r0, #125	@ 0x7d
 800f232:	fa5f fc83 	uxtb.w	ip, r3
 800f236:	f000 8194 	beq.w	800f562 <uxr_read_framed_msg+0x3fe>
 800f23a:	287e      	cmp	r0, #126	@ 0x7e
 800f23c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f240:	f000 8200 	beq.w	800f644 <uxr_read_framed_msg+0x4e0>
 800f244:	2307      	movs	r3, #7
 800f246:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f248:	7023      	strb	r3, [r4, #0]
 800f24a:	e7a0      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f24c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f24e:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800f250:	429f      	cmp	r7, r3
 800f252:	f240 8164 	bls.w	800f51e <uxr_read_framed_msg+0x3ba>
 800f256:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800f4d8 <uxr_read_framed_msg+0x374>
 800f25a:	f8cd a00c 	str.w	sl, [sp, #12]
 800f25e:	212a      	movs	r1, #42	@ 0x2a
 800f260:	e01f      	b.n	800f2a2 <uxr_read_framed_msg+0x13e>
 800f262:	f89a e002 	ldrb.w	lr, [sl, #2]
 800f266:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800f26a:	f000 80ea 	beq.w	800f442 <uxr_read_framed_msg+0x2de>
 800f26e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f272:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f276:	f000 8142 	beq.w	800f4fe <uxr_read_framed_msg+0x39a>
 800f27a:	f805 e003 	strb.w	lr, [r5, r3]
 800f27e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800f280:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f282:	4f96      	ldr	r7, [pc, #600]	@ (800f4dc <uxr_read_framed_msg+0x378>)
 800f284:	ea80 020e 	eor.w	r2, r0, lr
 800f288:	b2d2      	uxtb	r2, r2
 800f28a:	3301      	adds	r3, #1
 800f28c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800f290:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800f292:	b29b      	uxth	r3, r3
 800f294:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800f298:	42bb      	cmp	r3, r7
 800f29a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f29c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f29e:	f080 80e7 	bcs.w	800f470 <uxr_read_framed_msg+0x30c>
 800f2a2:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f2a6:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800f2aa:	f100 0c01 	add.w	ip, r0, #1
 800f2ae:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800f2b2:	fba9 e20e 	umull	lr, r2, r9, lr
 800f2b6:	0892      	lsrs	r2, r2, #2
 800f2b8:	fb01 c212 	mls	r2, r1, r2, ip
 800f2bc:	4580      	cmp	r8, r0
 800f2be:	eb04 0a00 	add.w	sl, r4, r0
 800f2c2:	fa5f fc82 	uxtb.w	ip, r2
 800f2c6:	d1cc      	bne.n	800f262 <uxr_read_framed_msg+0xfe>
 800f2c8:	42bb      	cmp	r3, r7
 800f2ca:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f2ce:	f040 8128 	bne.w	800f522 <uxr_read_framed_msg+0x3be>
 800f2d2:	2306      	movs	r3, #6
 800f2d4:	7023      	strb	r3, [r4, #0]
 800f2d6:	e75a      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f2d8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f2dc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f2e0:	4297      	cmp	r7, r2
 800f2e2:	f000 80cf 	beq.w	800f484 <uxr_read_framed_msg+0x320>
 800f2e6:	18a3      	adds	r3, r4, r2
 800f2e8:	f102 0c01 	add.w	ip, r2, #1
 800f2ec:	497a      	ldr	r1, [pc, #488]	@ (800f4d8 <uxr_read_framed_msg+0x374>)
 800f2ee:	7898      	ldrb	r0, [r3, #2]
 800f2f0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f2f4:	fba1 8303 	umull	r8, r3, r1, r3
 800f2f8:	089b      	lsrs	r3, r3, #2
 800f2fa:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f2fe:	fb08 c313 	mls	r3, r8, r3, ip
 800f302:	287d      	cmp	r0, #125	@ 0x7d
 800f304:	fa5f fc83 	uxtb.w	ip, r3
 800f308:	f000 813d 	beq.w	800f586 <uxr_read_framed_msg+0x422>
 800f30c:	287e      	cmp	r0, #126	@ 0x7e
 800f30e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f312:	f000 8188 	beq.w	800f626 <uxr_read_framed_msg+0x4c2>
 800f316:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f31a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800f31e:	b29b      	uxth	r3, r3
 800f320:	2200      	movs	r2, #0
 800f322:	428b      	cmp	r3, r1
 800f324:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f326:	8662      	strh	r2, [r4, #50]	@ 0x32
 800f328:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f32a:	f240 80f5 	bls.w	800f518 <uxr_read_framed_msg+0x3b4>
 800f32e:	7022      	strb	r2, [r4, #0]
 800f330:	e765      	b.n	800f1fe <uxr_read_framed_msg+0x9a>
 800f332:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f336:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f33a:	4297      	cmp	r7, r2
 800f33c:	f000 80b2 	beq.w	800f4a4 <uxr_read_framed_msg+0x340>
 800f340:	18a3      	adds	r3, r4, r2
 800f342:	f102 0c01 	add.w	ip, r2, #1
 800f346:	4964      	ldr	r1, [pc, #400]	@ (800f4d8 <uxr_read_framed_msg+0x374>)
 800f348:	7898      	ldrb	r0, [r3, #2]
 800f34a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f34e:	fba1 8303 	umull	r8, r3, r1, r3
 800f352:	089b      	lsrs	r3, r3, #2
 800f354:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f358:	fb08 c313 	mls	r3, r8, r3, ip
 800f35c:	287d      	cmp	r0, #125	@ 0x7d
 800f35e:	fa5f fc83 	uxtb.w	ip, r3
 800f362:	f000 813b 	beq.w	800f5dc <uxr_read_framed_msg+0x478>
 800f366:	287e      	cmp	r0, #126	@ 0x7e
 800f368:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f36c:	f000 816a 	beq.w	800f644 <uxr_read_framed_msg+0x4e0>
 800f370:	2304      	movs	r3, #4
 800f372:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f374:	7023      	strb	r3, [r4, #0]
 800f376:	e70a      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f378:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f37c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f380:	4297      	cmp	r7, r2
 800f382:	f000 80c4 	beq.w	800f50e <uxr_read_framed_msg+0x3aa>
 800f386:	18a3      	adds	r3, r4, r2
 800f388:	f102 0c01 	add.w	ip, r2, #1
 800f38c:	4952      	ldr	r1, [pc, #328]	@ (800f4d8 <uxr_read_framed_msg+0x374>)
 800f38e:	7898      	ldrb	r0, [r3, #2]
 800f390:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f394:	fba1 8303 	umull	r8, r3, r1, r3
 800f398:	089b      	lsrs	r3, r3, #2
 800f39a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f39e:	fb08 c313 	mls	r3, r8, r3, ip
 800f3a2:	287d      	cmp	r0, #125	@ 0x7d
 800f3a4:	fa5f fc83 	uxtb.w	ip, r3
 800f3a8:	f000 812b 	beq.w	800f602 <uxr_read_framed_msg+0x49e>
 800f3ac:	287e      	cmp	r0, #126	@ 0x7e
 800f3ae:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f3b2:	f000 8155 	beq.w	800f660 <uxr_read_framed_msg+0x4fc>
 800f3b6:	7863      	ldrb	r3, [r4, #1]
 800f3b8:	4283      	cmp	r3, r0
 800f3ba:	bf0c      	ite	eq
 800f3bc:	2303      	moveq	r3, #3
 800f3be:	2300      	movne	r3, #0
 800f3c0:	7023      	strb	r3, [r4, #0]
 800f3c2:	e6e4      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f3c4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f3c8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4290      	cmp	r0, r2
 800f3d0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800f3d4:	d06b      	beq.n	800f4ae <uxr_read_framed_msg+0x34a>
 800f3d6:	18a3      	adds	r3, r4, r2
 800f3d8:	f102 0c01 	add.w	ip, r2, #1
 800f3dc:	493e      	ldr	r1, [pc, #248]	@ (800f4d8 <uxr_read_framed_msg+0x374>)
 800f3de:	789f      	ldrb	r7, [r3, #2]
 800f3e0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f3e4:	fba1 8303 	umull	r8, r3, r1, r3
 800f3e8:	089b      	lsrs	r3, r3, #2
 800f3ea:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f3ee:	fb08 c313 	mls	r3, r8, r3, ip
 800f3f2:	2f7d      	cmp	r7, #125	@ 0x7d
 800f3f4:	fa5f fc83 	uxtb.w	ip, r3
 800f3f8:	f000 80d8 	beq.w	800f5ac <uxr_read_framed_msg+0x448>
 800f3fc:	2f7e      	cmp	r7, #126	@ 0x7e
 800f3fe:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f402:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800f406:	d052      	beq.n	800f4ae <uxr_read_framed_msg+0x34a>
 800f408:	2302      	movs	r3, #2
 800f40a:	7023      	strb	r3, [r4, #0]
 800f40c:	e6bf      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f40e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800f412:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f416:	4930      	ldr	r1, [pc, #192]	@ (800f4d8 <uxr_read_framed_msg+0x374>)
 800f418:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f41c:	e004      	b.n	800f428 <uxr_read_framed_msg+0x2c4>
 800f41e:	78bb      	ldrb	r3, [r7, #2]
 800f420:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f424:	2b7e      	cmp	r3, #126	@ 0x7e
 800f426:	d02a      	beq.n	800f47e <uxr_read_framed_msg+0x31a>
 800f428:	1c50      	adds	r0, r2, #1
 800f42a:	0843      	lsrs	r3, r0, #1
 800f42c:	fba1 e303 	umull	lr, r3, r1, r3
 800f430:	089b      	lsrs	r3, r3, #2
 800f432:	fb0c 0013 	mls	r0, ip, r3, r0
 800f436:	4590      	cmp	r8, r2
 800f438:	eb04 0702 	add.w	r7, r4, r2
 800f43c:	b2c2      	uxtb	r2, r0
 800f43e:	d1ee      	bne.n	800f41e <uxr_read_framed_msg+0x2ba>
 800f440:	e6dd      	b.n	800f1fe <uxr_read_framed_msg+0x9a>
 800f442:	3002      	adds	r0, #2
 800f444:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800f448:	eb04 0a02 	add.w	sl, r4, r2
 800f44c:	fba9 e20e 	umull	lr, r2, r9, lr
 800f450:	0892      	lsrs	r2, r2, #2
 800f452:	45e0      	cmp	r8, ip
 800f454:	fb01 0012 	mls	r0, r1, r2, r0
 800f458:	f43f af36 	beq.w	800f2c8 <uxr_read_framed_msg+0x164>
 800f45c:	f89a e002 	ldrb.w	lr, [sl, #2]
 800f460:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f464:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f468:	d049      	beq.n	800f4fe <uxr_read_framed_msg+0x39a>
 800f46a:	f08e 0e20 	eor.w	lr, lr, #32
 800f46e:	e704      	b.n	800f27a <uxr_read_framed_msg+0x116>
 800f470:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f474:	f43f af2d 	beq.w	800f2d2 <uxr_read_framed_msg+0x16e>
 800f478:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f47c:	d151      	bne.n	800f522 <uxr_read_framed_msg+0x3be>
 800f47e:	2301      	movs	r3, #1
 800f480:	7023      	strb	r3, [r4, #0]
 800f482:	e684      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f484:	4651      	mov	r1, sl
 800f486:	f8cd b000 	str.w	fp, [sp]
 800f48a:	2301      	movs	r3, #1
 800f48c:	9301      	str	r3, [sp, #4]
 800f48e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f490:	9103      	str	r1, [sp, #12]
 800f492:	4632      	mov	r2, r6
 800f494:	4620      	mov	r0, r4
 800f496:	f7ff fde1 	bl	800f05c <uxr_framing_read_transport>
 800f49a:	fab0 f080 	clz	r0, r0
 800f49e:	9903      	ldr	r1, [sp, #12]
 800f4a0:	0940      	lsrs	r0, r0, #5
 800f4a2:	e671      	b.n	800f188 <uxr_read_framed_msg+0x24>
 800f4a4:	4651      	mov	r1, sl
 800f4a6:	f8cd b000 	str.w	fp, [sp]
 800f4aa:	2302      	movs	r3, #2
 800f4ac:	e7ee      	b.n	800f48c <uxr_read_framed_msg+0x328>
 800f4ae:	2304      	movs	r3, #4
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	f8cd b000 	str.w	fp, [sp]
 800f4b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4b8:	4632      	mov	r2, r6
 800f4ba:	4651      	mov	r1, sl
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f7ff fdcd 	bl	800f05c <uxr_framing_read_transport>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	f47f ae63 	bne.w	800f18e <uxr_read_framed_msg+0x2a>
 800f4c8:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800f4cc:	387e      	subs	r0, #126	@ 0x7e
 800f4ce:	4651      	mov	r1, sl
 800f4d0:	bf18      	it	ne
 800f4d2:	2001      	movne	r0, #1
 800f4d4:	e658      	b.n	800f188 <uxr_read_framed_msg+0x24>
 800f4d6:	bf00      	nop
 800f4d8:	30c30c31 	.word	0x30c30c31
 800f4dc:	0801a054 	.word	0x0801a054
 800f4e0:	2305      	movs	r3, #5
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	f8cd b000 	str.w	fp, [sp]
 800f4e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4ea:	f7ff fdb7 	bl	800f05c <uxr_framing_read_transport>
 800f4ee:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800f4f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	f43f ae81 	beq.w	800f1fe <uxr_read_framed_msg+0x9a>
 800f4fc:	e642      	b.n	800f184 <uxr_read_framed_msg+0x20>
 800f4fe:	42bb      	cmp	r3, r7
 800f500:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f504:	f43f aee5 	beq.w	800f2d2 <uxr_read_framed_msg+0x16e>
 800f508:	2301      	movs	r3, #1
 800f50a:	7023      	strb	r3, [r4, #0]
 800f50c:	e63f      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f50e:	4651      	mov	r1, sl
 800f510:	f8cd b000 	str.w	fp, [sp]
 800f514:	2303      	movs	r3, #3
 800f516:	e7b9      	b.n	800f48c <uxr_read_framed_msg+0x328>
 800f518:	2305      	movs	r3, #5
 800f51a:	7023      	strb	r3, [r4, #0]
 800f51c:	e637      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f51e:	f43f aed8 	beq.w	800f2d2 <uxr_read_framed_msg+0x16e>
 800f522:	1afb      	subs	r3, r7, r3
 800f524:	3302      	adds	r3, #2
 800f526:	e9cd b300 	strd	fp, r3, [sp]
 800f52a:	4651      	mov	r1, sl
 800f52c:	e7af      	b.n	800f48e <uxr_read_framed_msg+0x32a>
 800f52e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f530:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f534:	7013      	strb	r3, [r2, #0]
 800f536:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f538:	b005      	add	sp, #20
 800f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53e:	4287      	cmp	r7, r0
 800f540:	d0a0      	beq.n	800f484 <uxr_read_framed_msg+0x320>
 800f542:	4423      	add	r3, r4
 800f544:	3202      	adds	r2, #2
 800f546:	7898      	ldrb	r0, [r3, #2]
 800f548:	0853      	lsrs	r3, r2, #1
 800f54a:	fba1 e303 	umull	lr, r3, r1, r3
 800f54e:	089b      	lsrs	r3, r3, #2
 800f550:	fb08 2213 	mls	r2, r8, r3, r2
 800f554:	287e      	cmp	r0, #126	@ 0x7e
 800f556:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f55a:	d064      	beq.n	800f626 <uxr_read_framed_msg+0x4c2>
 800f55c:	f080 0120 	eor.w	r1, r0, #32
 800f560:	e642      	b.n	800f1e8 <uxr_read_framed_msg+0x84>
 800f562:	45bc      	cmp	ip, r7
 800f564:	d09e      	beq.n	800f4a4 <uxr_read_framed_msg+0x340>
 800f566:	4423      	add	r3, r4
 800f568:	3202      	adds	r2, #2
 800f56a:	7898      	ldrb	r0, [r3, #2]
 800f56c:	0853      	lsrs	r3, r2, #1
 800f56e:	fba1 e303 	umull	lr, r3, r1, r3
 800f572:	089b      	lsrs	r3, r3, #2
 800f574:	fb08 2213 	mls	r2, r8, r3, r2
 800f578:	287e      	cmp	r0, #126	@ 0x7e
 800f57a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f57e:	d061      	beq.n	800f644 <uxr_read_framed_msg+0x4e0>
 800f580:	f080 0020 	eor.w	r0, r0, #32
 800f584:	e65e      	b.n	800f244 <uxr_read_framed_msg+0xe0>
 800f586:	4567      	cmp	r7, ip
 800f588:	f43f af7c 	beq.w	800f484 <uxr_read_framed_msg+0x320>
 800f58c:	4423      	add	r3, r4
 800f58e:	3202      	adds	r2, #2
 800f590:	7898      	ldrb	r0, [r3, #2]
 800f592:	0853      	lsrs	r3, r2, #1
 800f594:	fba1 e303 	umull	lr, r3, r1, r3
 800f598:	089b      	lsrs	r3, r3, #2
 800f59a:	fb08 2213 	mls	r2, r8, r3, r2
 800f59e:	287e      	cmp	r0, #126	@ 0x7e
 800f5a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f5a4:	d03f      	beq.n	800f626 <uxr_read_framed_msg+0x4c2>
 800f5a6:	f080 0020 	eor.w	r0, r0, #32
 800f5aa:	e6b4      	b.n	800f316 <uxr_read_framed_msg+0x1b2>
 800f5ac:	4560      	cmp	r0, ip
 800f5ae:	f43f af7e 	beq.w	800f4ae <uxr_read_framed_msg+0x34a>
 800f5b2:	4423      	add	r3, r4
 800f5b4:	3202      	adds	r2, #2
 800f5b6:	7898      	ldrb	r0, [r3, #2]
 800f5b8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f5bc:	0853      	lsrs	r3, r2, #1
 800f5be:	fba1 e303 	umull	lr, r3, r1, r3
 800f5c2:	089b      	lsrs	r3, r3, #2
 800f5c4:	fb08 2213 	mls	r2, r8, r3, r2
 800f5c8:	287e      	cmp	r0, #126	@ 0x7e
 800f5ca:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f5ce:	f43f af6e 	beq.w	800f4ae <uxr_read_framed_msg+0x34a>
 800f5d2:	f080 0020 	eor.w	r0, r0, #32
 800f5d6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f5da:	e715      	b.n	800f408 <uxr_read_framed_msg+0x2a4>
 800f5dc:	4567      	cmp	r7, ip
 800f5de:	f43f af61 	beq.w	800f4a4 <uxr_read_framed_msg+0x340>
 800f5e2:	4423      	add	r3, r4
 800f5e4:	3202      	adds	r2, #2
 800f5e6:	7898      	ldrb	r0, [r3, #2]
 800f5e8:	0853      	lsrs	r3, r2, #1
 800f5ea:	fba1 e303 	umull	lr, r3, r1, r3
 800f5ee:	089b      	lsrs	r3, r3, #2
 800f5f0:	fb08 2213 	mls	r2, r8, r3, r2
 800f5f4:	287e      	cmp	r0, #126	@ 0x7e
 800f5f6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f5fa:	d023      	beq.n	800f644 <uxr_read_framed_msg+0x4e0>
 800f5fc:	f080 0020 	eor.w	r0, r0, #32
 800f600:	e6b6      	b.n	800f370 <uxr_read_framed_msg+0x20c>
 800f602:	45bc      	cmp	ip, r7
 800f604:	d083      	beq.n	800f50e <uxr_read_framed_msg+0x3aa>
 800f606:	4423      	add	r3, r4
 800f608:	3202      	adds	r2, #2
 800f60a:	7898      	ldrb	r0, [r3, #2]
 800f60c:	0853      	lsrs	r3, r2, #1
 800f60e:	fba1 e303 	umull	lr, r3, r1, r3
 800f612:	089b      	lsrs	r3, r3, #2
 800f614:	fb08 2213 	mls	r2, r8, r3, r2
 800f618:	287e      	cmp	r0, #126	@ 0x7e
 800f61a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f61e:	d01f      	beq.n	800f660 <uxr_read_framed_msg+0x4fc>
 800f620:	f080 0020 	eor.w	r0, r0, #32
 800f624:	e6c7      	b.n	800f3b6 <uxr_read_framed_msg+0x252>
 800f626:	2701      	movs	r7, #1
 800f628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f62a:	f8cd b000 	str.w	fp, [sp]
 800f62e:	9701      	str	r7, [sp, #4]
 800f630:	4632      	mov	r2, r6
 800f632:	4651      	mov	r1, sl
 800f634:	4620      	mov	r0, r4
 800f636:	f7ff fd11 	bl	800f05c <uxr_framing_read_transport>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	f47f ada7 	bne.w	800f18e <uxr_read_framed_msg+0x2a>
 800f640:	7027      	strb	r7, [r4, #0]
 800f642:	e5a4      	b.n	800f18e <uxr_read_framed_msg+0x2a>
 800f644:	f8cd b000 	str.w	fp, [sp]
 800f648:	2302      	movs	r3, #2
 800f64a:	9301      	str	r3, [sp, #4]
 800f64c:	4632      	mov	r2, r6
 800f64e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f650:	4651      	mov	r1, sl
 800f652:	4620      	mov	r0, r4
 800f654:	f7ff fd02 	bl	800f05c <uxr_framing_read_transport>
 800f658:	2800      	cmp	r0, #0
 800f65a:	f47f ad98 	bne.w	800f18e <uxr_read_framed_msg+0x2a>
 800f65e:	e70e      	b.n	800f47e <uxr_read_framed_msg+0x31a>
 800f660:	f8cd b000 	str.w	fp, [sp]
 800f664:	2303      	movs	r3, #3
 800f666:	e7f0      	b.n	800f64a <uxr_read_framed_msg+0x4e6>

0800f668 <uxr_stream_id>:
 800f668:	2901      	cmp	r1, #1
 800f66a:	b082      	sub	sp, #8
 800f66c:	4603      	mov	r3, r0
 800f66e:	d011      	beq.n	800f694 <uxr_stream_id+0x2c>
 800f670:	2902      	cmp	r1, #2
 800f672:	f04f 0c00 	mov.w	ip, #0
 800f676:	d00a      	beq.n	800f68e <uxr_stream_id+0x26>
 800f678:	2000      	movs	r0, #0
 800f67a:	f36c 0007 	bfi	r0, ip, #0, #8
 800f67e:	f363 200f 	bfi	r0, r3, #8, #8
 800f682:	f361 4017 	bfi	r0, r1, #16, #8
 800f686:	f362 601f 	bfi	r0, r2, #24, #8
 800f68a:	b002      	add	sp, #8
 800f68c:	4770      	bx	lr
 800f68e:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800f692:	e7f1      	b.n	800f678 <uxr_stream_id+0x10>
 800f694:	f100 0c01 	add.w	ip, r0, #1
 800f698:	fa5f fc8c 	uxtb.w	ip, ip
 800f69c:	e7ec      	b.n	800f678 <uxr_stream_id+0x10>
 800f69e:	bf00      	nop

0800f6a0 <uxr_stream_id_from_raw>:
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	b130      	cbz	r0, 800f6b4 <uxr_stream_id_from_raw+0x14>
 800f6a6:	0602      	lsls	r2, r0, #24
 800f6a8:	d411      	bmi.n	800f6ce <uxr_stream_id_from_raw+0x2e>
 800f6aa:	1e42      	subs	r2, r0, #1
 800f6ac:	b2d2      	uxtb	r2, r2
 800f6ae:	f04f 0c01 	mov.w	ip, #1
 800f6b2:	e001      	b.n	800f6b8 <uxr_stream_id_from_raw+0x18>
 800f6b4:	4684      	mov	ip, r0
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	f363 0007 	bfi	r0, r3, #0, #8
 800f6be:	f362 200f 	bfi	r0, r2, #8, #8
 800f6c2:	f36c 4017 	bfi	r0, ip, #16, #8
 800f6c6:	f361 601f 	bfi	r0, r1, #24, #8
 800f6ca:	b002      	add	sp, #8
 800f6cc:	4770      	bx	lr
 800f6ce:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800f6d2:	f04f 0c02 	mov.w	ip, #2
 800f6d6:	e7ef      	b.n	800f6b8 <uxr_stream_id_from_raw+0x18>

0800f6d8 <uxr_init_stream_storage>:
 800f6d8:	2300      	movs	r3, #0
 800f6da:	7403      	strb	r3, [r0, #16]
 800f6dc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800f6e0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800f6e4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop

0800f6ec <uxr_reset_stream_storage>:
 800f6ec:	b570      	push	{r4, r5, r6, lr}
 800f6ee:	7c03      	ldrb	r3, [r0, #16]
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	b153      	cbz	r3, 800f70a <uxr_reset_stream_storage+0x1e>
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	2500      	movs	r5, #0
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f006 ffbf 	bl	801667c <uxr_reset_output_best_effort_stream>
 800f6fe:	7c23      	ldrb	r3, [r4, #16]
 800f700:	3501      	adds	r5, #1
 800f702:	42ab      	cmp	r3, r5
 800f704:	f106 0610 	add.w	r6, r6, #16
 800f708:	d8f6      	bhi.n	800f6f8 <uxr_reset_stream_storage+0xc>
 800f70a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f70e:	b163      	cbz	r3, 800f72a <uxr_reset_stream_storage+0x3e>
 800f710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f714:	2500      	movs	r5, #0
 800f716:	4630      	mov	r0, r6
 800f718:	f006 fdc0 	bl	801629c <uxr_reset_input_best_effort_stream>
 800f71c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f720:	3501      	adds	r5, #1
 800f722:	42ab      	cmp	r3, r5
 800f724:	f106 0602 	add.w	r6, r6, #2
 800f728:	d8f5      	bhi.n	800f716 <uxr_reset_stream_storage+0x2a>
 800f72a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f72e:	b163      	cbz	r3, 800f74a <uxr_reset_stream_storage+0x5e>
 800f730:	f104 0618 	add.w	r6, r4, #24
 800f734:	2500      	movs	r5, #0
 800f736:	4630      	mov	r0, r6
 800f738:	f007 f84a 	bl	80167d0 <uxr_reset_output_reliable_stream>
 800f73c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f740:	3501      	adds	r5, #1
 800f742:	42ab      	cmp	r3, r5
 800f744:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800f748:	d8f5      	bhi.n	800f736 <uxr_reset_stream_storage+0x4a>
 800f74a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f74e:	b163      	cbz	r3, 800f76a <uxr_reset_stream_storage+0x7e>
 800f750:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800f754:	2500      	movs	r5, #0
 800f756:	4630      	mov	r0, r6
 800f758:	f006 fe10 	bl	801637c <uxr_reset_input_reliable_stream>
 800f75c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f760:	3501      	adds	r5, #1
 800f762:	42ab      	cmp	r3, r5
 800f764:	f106 0618 	add.w	r6, r6, #24
 800f768:	d8f5      	bhi.n	800f756 <uxr_reset_stream_storage+0x6a>
 800f76a:	bd70      	pop	{r4, r5, r6, pc}

0800f76c <uxr_add_output_best_effort_buffer>:
 800f76c:	b510      	push	{r4, lr}
 800f76e:	7c04      	ldrb	r4, [r0, #16]
 800f770:	f104 0c01 	add.w	ip, r4, #1
 800f774:	b082      	sub	sp, #8
 800f776:	f880 c010 	strb.w	ip, [r0, #16]
 800f77a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f77e:	f006 ff73 	bl	8016668 <uxr_init_output_best_effort_stream>
 800f782:	2201      	movs	r2, #1
 800f784:	4611      	mov	r1, r2
 800f786:	4620      	mov	r0, r4
 800f788:	b002      	add	sp, #8
 800f78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f78e:	f7ff bf6b 	b.w	800f668 <uxr_stream_id>
 800f792:	bf00      	nop

0800f794 <uxr_add_output_reliable_buffer>:
 800f794:	b510      	push	{r4, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	4684      	mov	ip, r0
 800f79a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f79e:	9000      	str	r0, [sp, #0]
 800f7a0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800f7a4:	2028      	movs	r0, #40	@ 0x28
 800f7a6:	fb00 c004 	mla	r0, r0, r4, ip
 800f7aa:	f104 0e01 	add.w	lr, r4, #1
 800f7ae:	3018      	adds	r0, #24
 800f7b0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800f7b4:	f006 ffd4 	bl	8016760 <uxr_init_output_reliable_stream>
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	2102      	movs	r1, #2
 800f7bc:	4620      	mov	r0, r4
 800f7be:	b004      	add	sp, #16
 800f7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7c4:	f7ff bf50 	b.w	800f668 <uxr_stream_id>

0800f7c8 <uxr_add_input_best_effort_buffer>:
 800f7c8:	b510      	push	{r4, lr}
 800f7ca:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800f7ce:	1c62      	adds	r2, r4, #1
 800f7d0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f7d4:	b082      	sub	sp, #8
 800f7d6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800f7da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f7de:	f006 fd59 	bl	8016294 <uxr_init_input_best_effort_stream>
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	b002      	add	sp, #8
 800f7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7ee:	f7ff bf3b 	b.w	800f668 <uxr_stream_id>
 800f7f2:	bf00      	nop

0800f7f4 <uxr_add_input_reliable_buffer>:
 800f7f4:	b510      	push	{r4, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	4684      	mov	ip, r0
 800f7fa:	9806      	ldr	r0, [sp, #24]
 800f7fc:	9000      	str	r0, [sp, #0]
 800f7fe:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800f802:	2018      	movs	r0, #24
 800f804:	fb00 c004 	mla	r0, r0, r4, ip
 800f808:	f104 0e01 	add.w	lr, r4, #1
 800f80c:	3048      	adds	r0, #72	@ 0x48
 800f80e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800f812:	f006 fd87 	bl	8016324 <uxr_init_input_reliable_stream>
 800f816:	2200      	movs	r2, #0
 800f818:	2102      	movs	r1, #2
 800f81a:	4620      	mov	r0, r4
 800f81c:	b004      	add	sp, #16
 800f81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f822:	f7ff bf21 	b.w	800f668 <uxr_stream_id>
 800f826:	bf00      	nop

0800f828 <uxr_get_output_best_effort_stream>:
 800f828:	7c03      	ldrb	r3, [r0, #16]
 800f82a:	428b      	cmp	r3, r1
 800f82c:	bf8c      	ite	hi
 800f82e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f832:	2000      	movls	r0, #0
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop

0800f838 <uxr_get_output_reliable_stream>:
 800f838:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f83c:	428b      	cmp	r3, r1
 800f83e:	bf83      	ittte	hi
 800f840:	2328      	movhi	r3, #40	@ 0x28
 800f842:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f846:	3018      	addhi	r0, #24
 800f848:	2000      	movls	r0, #0
 800f84a:	4770      	bx	lr

0800f84c <uxr_get_input_best_effort_stream>:
 800f84c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f850:	428b      	cmp	r3, r1
 800f852:	bf86      	itte	hi
 800f854:	3121      	addhi	r1, #33	@ 0x21
 800f856:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f85a:	2000      	movls	r0, #0
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop

0800f860 <uxr_get_input_reliable_stream>:
 800f860:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800f864:	428b      	cmp	r3, r1
 800f866:	bf83      	ittte	hi
 800f868:	2318      	movhi	r3, #24
 800f86a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f86e:	3048      	addhi	r0, #72	@ 0x48
 800f870:	2000      	movls	r0, #0
 800f872:	4770      	bx	lr

0800f874 <uxr_output_streams_confirmed>:
 800f874:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f878:	b183      	cbz	r3, 800f89c <uxr_output_streams_confirmed+0x28>
 800f87a:	b570      	push	{r4, r5, r6, lr}
 800f87c:	4606      	mov	r6, r0
 800f87e:	f100 0518 	add.w	r5, r0, #24
 800f882:	2400      	movs	r4, #0
 800f884:	e001      	b.n	800f88a <uxr_output_streams_confirmed+0x16>
 800f886:	3528      	adds	r5, #40	@ 0x28
 800f888:	b138      	cbz	r0, 800f89a <uxr_output_streams_confirmed+0x26>
 800f88a:	4628      	mov	r0, r5
 800f88c:	f007 fa08 	bl	8016ca0 <uxr_is_output_up_to_date>
 800f890:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800f894:	3401      	adds	r4, #1
 800f896:	42a3      	cmp	r3, r4
 800f898:	d8f5      	bhi.n	800f886 <uxr_output_streams_confirmed+0x12>
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	2001      	movs	r0, #1
 800f89e:	4770      	bx	lr

0800f8a0 <uxr_buffer_submessage_header>:
 800f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	460e      	mov	r6, r1
 800f8a6:	2104      	movs	r1, #4
 800f8a8:	4615      	mov	r5, r2
 800f8aa:	461f      	mov	r7, r3
 800f8ac:	f7fd fd40 	bl	800d330 <ucdr_align_to>
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	7523      	strb	r3, [r4, #20]
 800f8b4:	f047 0201 	orr.w	r2, r7, #1
 800f8b8:	462b      	mov	r3, r5
 800f8ba:	4631      	mov	r1, r6
 800f8bc:	4620      	mov	r0, r4
 800f8be:	f000 fa2b 	bl	800fd18 <uxr_serialize_submessage_header>
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f7fd fd4a 	bl	800d35c <ucdr_buffer_remaining>
 800f8c8:	42a8      	cmp	r0, r5
 800f8ca:	bf34      	ite	cc
 800f8cc:	2000      	movcc	r0, #0
 800f8ce:	2001      	movcs	r0, #1
 800f8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8d2:	bf00      	nop

0800f8d4 <uxr_read_submessage_header>:
 800f8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d8:	4604      	mov	r4, r0
 800f8da:	460d      	mov	r5, r1
 800f8dc:	2104      	movs	r1, #4
 800f8de:	4616      	mov	r6, r2
 800f8e0:	4698      	mov	r8, r3
 800f8e2:	f7fd fd25 	bl	800d330 <ucdr_align_to>
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f7fd fd38 	bl	800d35c <ucdr_buffer_remaining>
 800f8ec:	2803      	cmp	r0, #3
 800f8ee:	bf8c      	ite	hi
 800f8f0:	2701      	movhi	r7, #1
 800f8f2:	2700      	movls	r7, #0
 800f8f4:	d802      	bhi.n	800f8fc <uxr_read_submessage_header+0x28>
 800f8f6:	4638      	mov	r0, r7
 800f8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8fc:	4633      	mov	r3, r6
 800f8fe:	4642      	mov	r2, r8
 800f900:	4620      	mov	r0, r4
 800f902:	4629      	mov	r1, r5
 800f904:	f000 fa1a 	bl	800fd3c <uxr_deserialize_submessage_header>
 800f908:	f898 3000 	ldrb.w	r3, [r8]
 800f90c:	f003 0201 	and.w	r2, r3, #1
 800f910:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f914:	f888 3000 	strb.w	r3, [r8]
 800f918:	7522      	strb	r2, [r4, #20]
 800f91a:	4638      	mov	r0, r7
 800f91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f920 <uxr_submessage_padding>:
 800f920:	f010 0003 	ands.w	r0, r0, #3
 800f924:	bf18      	it	ne
 800f926:	f1c0 0004 	rsbne	r0, r0, #4
 800f92a:	4770      	bx	lr

0800f92c <uxr_millis>:
 800f92c:	b510      	push	{r4, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	4669      	mov	r1, sp
 800f932:	2001      	movs	r0, #1
 800f934:	f7f2 f9e8 	bl	8001d08 <clock_gettime>
 800f938:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f93c:	4b06      	ldr	r3, [pc, #24]	@ (800f958 <uxr_millis+0x2c>)
 800f93e:	fba0 0103 	umull	r0, r1, r0, r3
 800f942:	1900      	adds	r0, r0, r4
 800f944:	fb03 1102 	mla	r1, r3, r2, r1
 800f948:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f94c:	4a03      	ldr	r2, [pc, #12]	@ (800f95c <uxr_millis+0x30>)
 800f94e:	2300      	movs	r3, #0
 800f950:	f7f0 fcc6 	bl	80002e0 <__aeabi_ldivmod>
 800f954:	b004      	add	sp, #16
 800f956:	bd10      	pop	{r4, pc}
 800f958:	3b9aca00 	.word	0x3b9aca00
 800f95c:	000f4240 	.word	0x000f4240

0800f960 <uxr_nanos>:
 800f960:	b510      	push	{r4, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	4669      	mov	r1, sp
 800f966:	2001      	movs	r0, #1
 800f968:	f7f2 f9ce 	bl	8001d08 <clock_gettime>
 800f96c:	4a06      	ldr	r2, [pc, #24]	@ (800f988 <uxr_nanos+0x28>)
 800f96e:	9800      	ldr	r0, [sp, #0]
 800f970:	9902      	ldr	r1, [sp, #8]
 800f972:	9c01      	ldr	r4, [sp, #4]
 800f974:	fba0 0302 	umull	r0, r3, r0, r2
 800f978:	1840      	adds	r0, r0, r1
 800f97a:	fb02 3304 	mla	r3, r2, r4, r3
 800f97e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f982:	b004      	add	sp, #16
 800f984:	bd10      	pop	{r4, pc}
 800f986:	bf00      	nop
 800f988:	3b9aca00 	.word	0x3b9aca00

0800f98c <on_full_output_buffer_fragmented>:
 800f98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f990:	460c      	mov	r4, r1
 800f992:	b08a      	sub	sp, #40	@ 0x28
 800f994:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800f998:	4606      	mov	r6, r0
 800f99a:	f104 0008 	add.w	r0, r4, #8
 800f99e:	f7ff ff4b 	bl	800f838 <uxr_get_output_reliable_stream>
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	f007 f986 	bl	8016cb4 <get_available_free_slots>
 800f9a8:	b968      	cbnz	r0, 800f9c6 <on_full_output_buffer_fragmented+0x3a>
 800f9aa:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	4798      	blx	r3
 800f9b2:	b918      	cbnz	r0, 800f9bc <on_full_output_buffer_fragmented+0x30>
 800f9b4:	2001      	movs	r0, #1
 800f9b6:	b00a      	add	sp, #40	@ 0x28
 800f9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f007 f979 	bl	8016cb4 <get_available_free_slots>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d0f6      	beq.n	800f9b4 <on_full_output_buffer_fragmented+0x28>
 800f9c6:	892a      	ldrh	r2, [r5, #8]
 800f9c8:	686b      	ldr	r3, [r5, #4]
 800f9ca:	fbb3 f8f2 	udiv	r8, r3, r2
 800f9ce:	89eb      	ldrh	r3, [r5, #14]
 800f9d0:	7b29      	ldrb	r1, [r5, #12]
 800f9d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9d6:	fb02 3310 	mls	r3, r2, r0, r3
 800f9da:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	fb08 f303 	mul.w	r3, r8, r3
 800f9e4:	31fc      	adds	r1, #252	@ 0xfc
 800f9e6:	f1a8 0804 	sub.w	r8, r8, #4
 800f9ea:	4441      	add	r1, r8
 800f9ec:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f9f0:	b28f      	uxth	r7, r1
 800f9f2:	6829      	ldr	r1, [r5, #0]
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	1bd2      	subs	r2, r2, r7
 800f9f8:	4419      	add	r1, r3
 800f9fa:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800f9fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	4642      	mov	r2, r8
 800fa06:	2300      	movs	r3, #0
 800fa08:	a802      	add	r0, sp, #8
 800fa0a:	f7fd fc65 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800fa0e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800fa12:	f102 0308 	add.w	r3, r2, #8
 800fa16:	4543      	cmp	r3, r8
 800fa18:	d928      	bls.n	800fa6c <on_full_output_buffer_fragmented+0xe0>
 800fa1a:	463a      	mov	r2, r7
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	210d      	movs	r1, #13
 800fa20:	a802      	add	r0, sp, #8
 800fa22:	f7ff ff3d 	bl	800f8a0 <uxr_buffer_submessage_header>
 800fa26:	8929      	ldrh	r1, [r5, #8]
 800fa28:	89eb      	ldrh	r3, [r5, #14]
 800fa2a:	fbb3 f2f1 	udiv	r2, r3, r1
 800fa2e:	fb01 3312 	mls	r3, r1, r2, r3
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	686a      	ldr	r2, [r5, #4]
 800fa36:	fbb2 f2f1 	udiv	r2, r2, r1
 800fa3a:	fb02 f303 	mul.w	r3, r2, r3
 800fa3e:	682a      	ldr	r2, [r5, #0]
 800fa40:	f842 8003 	str.w	r8, [r2, r3]
 800fa44:	89e8      	ldrh	r0, [r5, #14]
 800fa46:	2101      	movs	r1, #1
 800fa48:	f007 fa88 	bl	8016f5c <uxr_seq_num_add>
 800fa4c:	9904      	ldr	r1, [sp, #16]
 800fa4e:	9a03      	ldr	r2, [sp, #12]
 800fa50:	81e8      	strh	r0, [r5, #14]
 800fa52:	1a52      	subs	r2, r2, r1
 800fa54:	4630      	mov	r0, r6
 800fa56:	f7fd fc51 	bl	800d2fc <ucdr_init_buffer>
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	4910      	ldr	r1, [pc, #64]	@ (800faa0 <on_full_output_buffer_fragmented+0x114>)
 800fa5e:	4622      	mov	r2, r4
 800fa60:	f7fd fc20 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 800fa64:	2000      	movs	r0, #0
 800fa66:	b00a      	add	sp, #40	@ 0x28
 800fa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa6c:	b292      	uxth	r2, r2
 800fa6e:	2302      	movs	r3, #2
 800fa70:	210d      	movs	r1, #13
 800fa72:	a802      	add	r0, sp, #8
 800fa74:	f7ff ff14 	bl	800f8a0 <uxr_buffer_submessage_header>
 800fa78:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800fa7c:	8928      	ldrh	r0, [r5, #8]
 800fa7e:	f103 0208 	add.w	r2, r3, #8
 800fa82:	89eb      	ldrh	r3, [r5, #14]
 800fa84:	fbb3 f1f0 	udiv	r1, r3, r0
 800fa88:	fb00 3311 	mls	r3, r0, r1, r3
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	6869      	ldr	r1, [r5, #4]
 800fa90:	fbb1 f1f0 	udiv	r1, r1, r0
 800fa94:	fb01 f303 	mul.w	r3, r1, r3
 800fa98:	6829      	ldr	r1, [r5, #0]
 800fa9a:	50ca      	str	r2, [r1, r3]
 800fa9c:	e7d2      	b.n	800fa44 <on_full_output_buffer_fragmented+0xb8>
 800fa9e:	bf00      	nop
 800faa0:	0800f98d 	.word	0x0800f98d

0800faa4 <uxr_prepare_output_stream>:
 800faa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa6:	b087      	sub	sp, #28
 800faa8:	2707      	movs	r7, #7
 800faaa:	9202      	str	r2, [sp, #8]
 800faac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800faae:	2500      	movs	r5, #0
 800fab0:	3204      	adds	r2, #4
 800fab2:	e9cd 7500 	strd	r7, r5, [sp]
 800fab6:	461c      	mov	r4, r3
 800fab8:	4606      	mov	r6, r0
 800faba:	f7ff f807 	bl	800eacc <uxr_prepare_stream_to_write_submessage>
 800fabe:	f080 0201 	eor.w	r2, r0, #1
 800fac2:	b2d2      	uxtb	r2, r2
 800fac4:	75a2      	strb	r2, [r4, #22]
 800fac6:	b112      	cbz	r2, 800face <uxr_prepare_output_stream+0x2a>
 800fac8:	4628      	mov	r0, r5
 800faca:	b007      	add	sp, #28
 800facc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800face:	aa05      	add	r2, sp, #20
 800fad0:	9902      	ldr	r1, [sp, #8]
 800fad2:	4630      	mov	r0, r6
 800fad4:	f7ff f934 	bl	800ed40 <uxr_init_base_object_request>
 800fad8:	a905      	add	r1, sp, #20
 800fada:	4605      	mov	r5, r0
 800fadc:	4620      	mov	r0, r4
 800fade:	f001 f879 	bl	8010bd4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fae2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800fae6:	69a6      	ldr	r6, [r4, #24]
 800fae8:	69e7      	ldr	r7, [r4, #28]
 800faea:	1a52      	subs	r2, r2, r1
 800faec:	4620      	mov	r0, r4
 800faee:	f7fd fc05 	bl	800d2fc <ucdr_init_buffer>
 800faf2:	4620      	mov	r0, r4
 800faf4:	463a      	mov	r2, r7
 800faf6:	4631      	mov	r1, r6
 800faf8:	f7fd fbd4 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 800fafc:	4628      	mov	r0, r5
 800fafe:	b007      	add	sp, #28
 800fb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb02:	bf00      	nop

0800fb04 <uxr_prepare_output_stream_fragmented>:
 800fb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb08:	b093      	sub	sp, #76	@ 0x4c
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	9107      	str	r1, [sp, #28]
 800fb0e:	3008      	adds	r0, #8
 800fb10:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fb14:	9303      	str	r3, [sp, #12]
 800fb16:	9206      	str	r2, [sp, #24]
 800fb18:	f7ff fe8e 	bl	800f838 <uxr_get_output_reliable_stream>
 800fb1c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	f000 8095 	beq.w	800fc50 <uxr_prepare_output_stream_fragmented+0x14c>
 800fb26:	4604      	mov	r4, r0
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	f000 8091 	beq.w	800fc50 <uxr_prepare_output_stream_fragmented+0x14c>
 800fb2e:	f007 f8c1 	bl	8016cb4 <get_available_free_slots>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	f000 8087 	beq.w	800fc46 <uxr_prepare_output_stream_fragmented+0x142>
 800fb38:	8922      	ldrh	r2, [r4, #8]
 800fb3a:	89e7      	ldrh	r7, [r4, #14]
 800fb3c:	fbb7 f3f2 	udiv	r3, r7, r2
 800fb40:	fb02 7313 	mls	r3, r2, r3, r7
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	6861      	ldr	r1, [r4, #4]
 800fb48:	fbb1 f1f2 	udiv	r1, r1, r2
 800fb4c:	6822      	ldr	r2, [r4, #0]
 800fb4e:	9105      	str	r1, [sp, #20]
 800fb50:	fb01 f303 	mul.w	r3, r1, r3
 800fb54:	3304      	adds	r3, #4
 800fb56:	eb02 0903 	add.w	r9, r2, r3
 800fb5a:	7b23      	ldrb	r3, [r4, #12]
 800fb5c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fb60:	4543      	cmp	r3, r8
 800fb62:	f1a1 0b04 	sub.w	fp, r1, #4
 800fb66:	d37f      	bcc.n	800fc68 <uxr_prepare_output_stream_fragmented+0x164>
 800fb68:	f1ab 0a04 	sub.w	sl, fp, #4
 800fb6c:	ebaa 0a03 	sub.w	sl, sl, r3
 800fb70:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fb72:	f8cd 8000 	str.w	r8, [sp]
 800fb76:	fa1f f38a 	uxth.w	r3, sl
 800fb7a:	9304      	str	r3, [sp, #16]
 800fb7c:	465a      	mov	r2, fp
 800fb7e:	2300      	movs	r3, #0
 800fb80:	4649      	mov	r1, r9
 800fb82:	a80a      	add	r0, sp, #40	@ 0x28
 800fb84:	f7fd fba8 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 800fb88:	f106 0a08 	add.w	sl, r6, #8
 800fb8c:	45da      	cmp	sl, fp
 800fb8e:	bf2c      	ite	cs
 800fb90:	2300      	movcs	r3, #0
 800fb92:	2301      	movcc	r3, #1
 800fb94:	9a04      	ldr	r2, [sp, #16]
 800fb96:	005b      	lsls	r3, r3, #1
 800fb98:	210d      	movs	r1, #13
 800fb9a:	a80a      	add	r0, sp, #40	@ 0x28
 800fb9c:	f7ff fe80 	bl	800f8a0 <uxr_buffer_submessage_header>
 800fba0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fba4:	fbb7 f2fc 	udiv	r2, r7, ip
 800fba8:	fb0c 7212 	mls	r2, ip, r2, r7
 800fbac:	b292      	uxth	r2, r2
 800fbae:	6863      	ldr	r3, [r4, #4]
 800fbb0:	fbb3 f3fc 	udiv	r3, r3, ip
 800fbb4:	fb02 f303 	mul.w	r3, r2, r3
 800fbb8:	6822      	ldr	r2, [r4, #0]
 800fbba:	2101      	movs	r1, #1
 800fbbc:	f842 b003 	str.w	fp, [r2, r3]
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	f007 f9cb 	bl	8016f5c <uxr_seq_num_add>
 800fbc6:	9b05      	ldr	r3, [sp, #20]
 800fbc8:	9e03      	ldr	r6, [sp, #12]
 800fbca:	f1a3 0208 	sub.w	r2, r3, #8
 800fbce:	f108 0104 	add.w	r1, r8, #4
 800fbd2:	4607      	mov	r7, r0
 800fbd4:	eba2 0208 	sub.w	r2, r2, r8
 800fbd8:	4449      	add	r1, r9
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f7fd fb8e 	bl	800d2fc <ucdr_init_buffer>
 800fbe0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800fbe2:	81e7      	strh	r7, [r4, #14]
 800fbe4:	1d1a      	adds	r2, r3, #4
 800fbe6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800fbea:	bf28      	it	cs
 800fbec:	2200      	movcs	r2, #0
 800fbee:	2300      	movs	r3, #0
 800fbf0:	b292      	uxth	r2, r2
 800fbf2:	2107      	movs	r1, #7
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f7ff fe53 	bl	800f8a0 <uxr_buffer_submessage_header>
 800fbfa:	9906      	ldr	r1, [sp, #24]
 800fbfc:	aa09      	add	r2, sp, #36	@ 0x24
 800fbfe:	4628      	mov	r0, r5
 800fc00:	f7ff f89e 	bl	800ed40 <uxr_init_base_object_request>
 800fc04:	4604      	mov	r4, r0
 800fc06:	b320      	cbz	r0, 800fc52 <uxr_prepare_output_stream_fragmented+0x14e>
 800fc08:	9e03      	ldr	r6, [sp, #12]
 800fc0a:	a909      	add	r1, sp, #36	@ 0x24
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	f000 ffe1 	bl	8010bd4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fc12:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800fc16:	4630      	mov	r0, r6
 800fc18:	1a52      	subs	r2, r2, r1
 800fc1a:	f7fd fb6f 	bl	800d2fc <ucdr_init_buffer>
 800fc1e:	9b07      	ldr	r3, [sp, #28]
 800fc20:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800fc24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc26:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800fc2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fc2c:	491a      	ldr	r1, [pc, #104]	@ (800fc98 <uxr_prepare_output_stream_fragmented+0x194>)
 800fc2e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800fc32:	4630      	mov	r0, r6
 800fc34:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800fc38:	462a      	mov	r2, r5
 800fc3a:	f7fd fb33 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 800fc3e:	4620      	mov	r0, r4
 800fc40:	b013      	add	sp, #76	@ 0x4c
 800fc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc46:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800fc48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	4798      	blx	r3
 800fc4e:	b920      	cbnz	r0, 800fc5a <uxr_prepare_output_stream_fragmented+0x156>
 800fc50:	2400      	movs	r4, #0
 800fc52:	4620      	mov	r0, r4
 800fc54:	b013      	add	sp, #76	@ 0x4c
 800fc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f007 f82a 	bl	8016cb4 <get_available_free_slots>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	f47f af69 	bne.w	800fb38 <uxr_prepare_output_stream_fragmented+0x34>
 800fc66:	e7f3      	b.n	800fc50 <uxr_prepare_output_stream_fragmented+0x14c>
 800fc68:	4638      	mov	r0, r7
 800fc6a:	2101      	movs	r1, #1
 800fc6c:	f007 f976 	bl	8016f5c <uxr_seq_num_add>
 800fc70:	8921      	ldrh	r1, [r4, #8]
 800fc72:	fbb0 f2f1 	udiv	r2, r0, r1
 800fc76:	fb01 0212 	mls	r2, r1, r2, r0
 800fc7a:	b292      	uxth	r2, r2
 800fc7c:	6863      	ldr	r3, [r4, #4]
 800fc7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	6822      	ldr	r2, [r4, #0]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	eb02 0903 	add.w	r9, r2, r3
 800fc8e:	4607      	mov	r7, r0
 800fc90:	7b23      	ldrb	r3, [r4, #12]
 800fc92:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fc96:	e767      	b.n	800fb68 <uxr_prepare_output_stream_fragmented+0x64>
 800fc98:	0800f98d 	.word	0x0800f98d

0800fc9c <uxr_serialize_message_header>:
 800fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca0:	4617      	mov	r7, r2
 800fca2:	4604      	mov	r4, r0
 800fca4:	461e      	mov	r6, r3
 800fca6:	460d      	mov	r5, r1
 800fca8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800fcac:	f7fc fa60 	bl	800c170 <ucdr_serialize_uint8_t>
 800fcb0:	4639      	mov	r1, r7
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f7fc fa5c 	bl	800c170 <ucdr_serialize_uint8_t>
 800fcb8:	4632      	mov	r2, r6
 800fcba:	2101      	movs	r1, #1
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f7fc fb0d 	bl	800c2dc <ucdr_serialize_endian_uint16_t>
 800fcc2:	062b      	lsls	r3, r5, #24
 800fcc4:	d501      	bpl.n	800fcca <uxr_serialize_message_header+0x2e>
 800fcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcca:	4641      	mov	r1, r8
 800fccc:	4620      	mov	r0, r4
 800fcce:	2204      	movs	r2, #4
 800fcd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd4:	f006 b954 	b.w	8015f80 <ucdr_serialize_array_uint8_t>

0800fcd8 <uxr_deserialize_message_header>:
 800fcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcdc:	4617      	mov	r7, r2
 800fcde:	4604      	mov	r4, r0
 800fce0:	461e      	mov	r6, r3
 800fce2:	460d      	mov	r5, r1
 800fce4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800fce8:	f7fc fa58 	bl	800c19c <ucdr_deserialize_uint8_t>
 800fcec:	4639      	mov	r1, r7
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f7fc fa54 	bl	800c19c <ucdr_deserialize_uint8_t>
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	2101      	movs	r1, #1
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f7fc fbe5 	bl	800c4c8 <ucdr_deserialize_endian_uint16_t>
 800fcfe:	f995 3000 	ldrsb.w	r3, [r5]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	da01      	bge.n	800fd0a <uxr_deserialize_message_header+0x32>
 800fd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0a:	4641      	mov	r1, r8
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	2204      	movs	r2, #4
 800fd10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd14:	f006 b998 	b.w	8016048 <ucdr_deserialize_array_uint8_t>

0800fd18 <uxr_serialize_submessage_header>:
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	4616      	mov	r6, r2
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	461d      	mov	r5, r3
 800fd20:	f7fc fa26 	bl	800c170 <ucdr_serialize_uint8_t>
 800fd24:	4631      	mov	r1, r6
 800fd26:	4620      	mov	r0, r4
 800fd28:	f7fc fa22 	bl	800c170 <ucdr_serialize_uint8_t>
 800fd2c:	462a      	mov	r2, r5
 800fd2e:	4620      	mov	r0, r4
 800fd30:	2101      	movs	r1, #1
 800fd32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd36:	f7fc bad1 	b.w	800c2dc <ucdr_serialize_endian_uint16_t>
 800fd3a:	bf00      	nop

0800fd3c <uxr_deserialize_submessage_header>:
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	4616      	mov	r6, r2
 800fd40:	4604      	mov	r4, r0
 800fd42:	461d      	mov	r5, r3
 800fd44:	f7fc fa2a 	bl	800c19c <ucdr_deserialize_uint8_t>
 800fd48:	4631      	mov	r1, r6
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f7fc fa26 	bl	800c19c <ucdr_deserialize_uint8_t>
 800fd50:	462a      	mov	r2, r5
 800fd52:	4620      	mov	r0, r4
 800fd54:	2101      	movs	r1, #1
 800fd56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd5a:	f7fc bbb5 	b.w	800c4c8 <ucdr_deserialize_endian_uint16_t>
 800fd5e:	bf00      	nop

0800fd60 <uxr_serialize_CLIENT_Representation>:
 800fd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd64:	2204      	movs	r2, #4
 800fd66:	460e      	mov	r6, r1
 800fd68:	4605      	mov	r5, r0
 800fd6a:	f006 f909 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800fd6e:	2202      	movs	r2, #2
 800fd70:	1d31      	adds	r1, r6, #4
 800fd72:	4604      	mov	r4, r0
 800fd74:	4628      	mov	r0, r5
 800fd76:	f006 f903 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800fd7a:	2202      	movs	r2, #2
 800fd7c:	4004      	ands	r4, r0
 800fd7e:	1db1      	adds	r1, r6, #6
 800fd80:	4628      	mov	r0, r5
 800fd82:	f006 f8fd 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800fd86:	b2e4      	uxtb	r4, r4
 800fd88:	2204      	movs	r2, #4
 800fd8a:	4004      	ands	r4, r0
 800fd8c:	f106 0108 	add.w	r1, r6, #8
 800fd90:	4628      	mov	r0, r5
 800fd92:	f006 f8f5 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800fd96:	7b31      	ldrb	r1, [r6, #12]
 800fd98:	ea00 0804 	and.w	r8, r0, r4
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f7fc f9e7 	bl	800c170 <ucdr_serialize_uint8_t>
 800fda2:	7b71      	ldrb	r1, [r6, #13]
 800fda4:	ea08 0800 	and.w	r8, r8, r0
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f7fc f9b3 	bl	800c114 <ucdr_serialize_bool>
 800fdae:	7b73      	ldrb	r3, [r6, #13]
 800fdb0:	ea08 0800 	and.w	r8, r8, r0
 800fdb4:	b93b      	cbnz	r3, 800fdc6 <uxr_serialize_CLIENT_Representation+0x66>
 800fdb6:	8bb1      	ldrh	r1, [r6, #28]
 800fdb8:	4628      	mov	r0, r5
 800fdba:	f7fc fa05 	bl	800c1c8 <ucdr_serialize_uint16_t>
 800fdbe:	ea08 0000 	and.w	r0, r8, r0
 800fdc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdc6:	6931      	ldr	r1, [r6, #16]
 800fdc8:	4628      	mov	r0, r5
 800fdca:	f7fc fbed 	bl	800c5a8 <ucdr_serialize_uint32_t>
 800fdce:	6933      	ldr	r3, [r6, #16]
 800fdd0:	b1e3      	cbz	r3, 800fe0c <uxr_serialize_CLIENT_Representation+0xac>
 800fdd2:	b1c0      	cbz	r0, 800fe06 <uxr_serialize_CLIENT_Representation+0xa6>
 800fdd4:	4637      	mov	r7, r6
 800fdd6:	f04f 0900 	mov.w	r9, #0
 800fdda:	e001      	b.n	800fde0 <uxr_serialize_CLIENT_Representation+0x80>
 800fddc:	3708      	adds	r7, #8
 800fdde:	b194      	cbz	r4, 800fe06 <uxr_serialize_CLIENT_Representation+0xa6>
 800fde0:	6979      	ldr	r1, [r7, #20]
 800fde2:	4628      	mov	r0, r5
 800fde4:	f006 fa40 	bl	8016268 <ucdr_serialize_string>
 800fde8:	69b9      	ldr	r1, [r7, #24]
 800fdea:	4604      	mov	r4, r0
 800fdec:	4628      	mov	r0, r5
 800fdee:	f006 fa3b 	bl	8016268 <ucdr_serialize_string>
 800fdf2:	6933      	ldr	r3, [r6, #16]
 800fdf4:	f109 0901 	add.w	r9, r9, #1
 800fdf8:	4004      	ands	r4, r0
 800fdfa:	4599      	cmp	r9, r3
 800fdfc:	b2e4      	uxtb	r4, r4
 800fdfe:	d3ed      	bcc.n	800fddc <uxr_serialize_CLIENT_Representation+0x7c>
 800fe00:	ea08 0804 	and.w	r8, r8, r4
 800fe04:	e7d7      	b.n	800fdb6 <uxr_serialize_CLIENT_Representation+0x56>
 800fe06:	f04f 0800 	mov.w	r8, #0
 800fe0a:	e7d4      	b.n	800fdb6 <uxr_serialize_CLIENT_Representation+0x56>
 800fe0c:	ea08 0800 	and.w	r8, r8, r0
 800fe10:	e7d1      	b.n	800fdb6 <uxr_serialize_CLIENT_Representation+0x56>
 800fe12:	bf00      	nop

0800fe14 <uxr_deserialize_CLIENT_Representation>:
 800fe14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe18:	2204      	movs	r2, #4
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	4605      	mov	r5, r0
 800fe1e:	f006 f913 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 800fe22:	2202      	movs	r2, #2
 800fe24:	1d21      	adds	r1, r4, #4
 800fe26:	4606      	mov	r6, r0
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f006 f90d 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 800fe2e:	2202      	movs	r2, #2
 800fe30:	4006      	ands	r6, r0
 800fe32:	1da1      	adds	r1, r4, #6
 800fe34:	4628      	mov	r0, r5
 800fe36:	f006 f907 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 800fe3a:	b2f6      	uxtb	r6, r6
 800fe3c:	2204      	movs	r2, #4
 800fe3e:	4006      	ands	r6, r0
 800fe40:	f104 0108 	add.w	r1, r4, #8
 800fe44:	4628      	mov	r0, r5
 800fe46:	f006 f8ff 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 800fe4a:	f104 010c 	add.w	r1, r4, #12
 800fe4e:	ea00 0706 	and.w	r7, r0, r6
 800fe52:	4628      	mov	r0, r5
 800fe54:	f7fc f9a2 	bl	800c19c <ucdr_deserialize_uint8_t>
 800fe58:	f104 010d 	add.w	r1, r4, #13
 800fe5c:	4007      	ands	r7, r0
 800fe5e:	4628      	mov	r0, r5
 800fe60:	f7fc f96e 	bl	800c140 <ucdr_deserialize_bool>
 800fe64:	7b63      	ldrb	r3, [r4, #13]
 800fe66:	4007      	ands	r7, r0
 800fe68:	b93b      	cbnz	r3, 800fe7a <uxr_deserialize_CLIENT_Representation+0x66>
 800fe6a:	f104 011c 	add.w	r1, r4, #28
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f7fc faae 	bl	800c3d0 <ucdr_deserialize_uint16_t>
 800fe74:	4038      	ands	r0, r7
 800fe76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe7a:	f104 0110 	add.w	r1, r4, #16
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f7fc fcbc 	bl	800c7fc <ucdr_deserialize_uint32_t>
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d903      	bls.n	800fe92 <uxr_deserialize_CLIENT_Representation+0x7e>
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	75ab      	strb	r3, [r5, #22]
 800fe8e:	2700      	movs	r7, #0
 800fe90:	e7eb      	b.n	800fe6a <uxr_deserialize_CLIENT_Representation+0x56>
 800fe92:	b30b      	cbz	r3, 800fed8 <uxr_deserialize_CLIENT_Representation+0xc4>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	d0fa      	beq.n	800fe8e <uxr_deserialize_CLIENT_Representation+0x7a>
 800fe98:	46a0      	mov	r8, r4
 800fe9a:	f04f 0900 	mov.w	r9, #0
 800fe9e:	e003      	b.n	800fea8 <uxr_deserialize_CLIENT_Representation+0x94>
 800fea0:	f108 0808 	add.w	r8, r8, #8
 800fea4:	2e00      	cmp	r6, #0
 800fea6:	d0f2      	beq.n	800fe8e <uxr_deserialize_CLIENT_Representation+0x7a>
 800fea8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800feac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800feb0:	4628      	mov	r0, r5
 800feb2:	f006 f9e7 	bl	8016284 <ucdr_deserialize_string>
 800feb6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800feba:	4606      	mov	r6, r0
 800febc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fec0:	4628      	mov	r0, r5
 800fec2:	f006 f9df 	bl	8016284 <ucdr_deserialize_string>
 800fec6:	6923      	ldr	r3, [r4, #16]
 800fec8:	f109 0901 	add.w	r9, r9, #1
 800fecc:	4006      	ands	r6, r0
 800fece:	4599      	cmp	r9, r3
 800fed0:	b2f6      	uxtb	r6, r6
 800fed2:	d3e5      	bcc.n	800fea0 <uxr_deserialize_CLIENT_Representation+0x8c>
 800fed4:	4037      	ands	r7, r6
 800fed6:	e7c8      	b.n	800fe6a <uxr_deserialize_CLIENT_Representation+0x56>
 800fed8:	4007      	ands	r7, r0
 800feda:	e7c6      	b.n	800fe6a <uxr_deserialize_CLIENT_Representation+0x56>

0800fedc <uxr_serialize_AGENT_Representation>:
 800fedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fee0:	2204      	movs	r2, #4
 800fee2:	460f      	mov	r7, r1
 800fee4:	4605      	mov	r5, r0
 800fee6:	f006 f84b 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800feea:	2202      	movs	r2, #2
 800feec:	4604      	mov	r4, r0
 800feee:	1d39      	adds	r1, r7, #4
 800fef0:	4628      	mov	r0, r5
 800fef2:	f006 f845 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800fef6:	4020      	ands	r0, r4
 800fef8:	2202      	movs	r2, #2
 800fefa:	b2c4      	uxtb	r4, r0
 800fefc:	1db9      	adds	r1, r7, #6
 800fefe:	4628      	mov	r0, r5
 800ff00:	f006 f83e 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800ff04:	7a39      	ldrb	r1, [r7, #8]
 800ff06:	4004      	ands	r4, r0
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f7fc f903 	bl	800c114 <ucdr_serialize_bool>
 800ff0e:	7a3b      	ldrb	r3, [r7, #8]
 800ff10:	ea00 0804 	and.w	r8, r0, r4
 800ff14:	b913      	cbnz	r3, 800ff1c <uxr_serialize_AGENT_Representation+0x40>
 800ff16:	4640      	mov	r0, r8
 800ff18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1c:	68f9      	ldr	r1, [r7, #12]
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f7fc fb42 	bl	800c5a8 <ucdr_serialize_uint32_t>
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	b303      	cbz	r3, 800ff6a <uxr_serialize_AGENT_Representation+0x8e>
 800ff28:	b1d0      	cbz	r0, 800ff60 <uxr_serialize_AGENT_Representation+0x84>
 800ff2a:	463e      	mov	r6, r7
 800ff2c:	f04f 0900 	mov.w	r9, #0
 800ff30:	e001      	b.n	800ff36 <uxr_serialize_AGENT_Representation+0x5a>
 800ff32:	3608      	adds	r6, #8
 800ff34:	b1a4      	cbz	r4, 800ff60 <uxr_serialize_AGENT_Representation+0x84>
 800ff36:	6931      	ldr	r1, [r6, #16]
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f006 f995 	bl	8016268 <ucdr_serialize_string>
 800ff3e:	6971      	ldr	r1, [r6, #20]
 800ff40:	4604      	mov	r4, r0
 800ff42:	4628      	mov	r0, r5
 800ff44:	f006 f990 	bl	8016268 <ucdr_serialize_string>
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f109 0901 	add.w	r9, r9, #1
 800ff4e:	4004      	ands	r4, r0
 800ff50:	4599      	cmp	r9, r3
 800ff52:	b2e4      	uxtb	r4, r4
 800ff54:	d3ed      	bcc.n	800ff32 <uxr_serialize_AGENT_Representation+0x56>
 800ff56:	ea08 0804 	and.w	r8, r8, r4
 800ff5a:	4640      	mov	r0, r8
 800ff5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff60:	f04f 0800 	mov.w	r8, #0
 800ff64:	4640      	mov	r0, r8
 800ff66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff6a:	ea08 0800 	and.w	r8, r8, r0
 800ff6e:	e7d2      	b.n	800ff16 <uxr_serialize_AGENT_Representation+0x3a>

0800ff70 <uxr_serialize_DATAWRITER_Representation>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	460d      	mov	r5, r1
 800ff74:	7809      	ldrb	r1, [r1, #0]
 800ff76:	4606      	mov	r6, r0
 800ff78:	f7fc f8fa 	bl	800c170 <ucdr_serialize_uint8_t>
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	b130      	cbz	r0, 800ff8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ff80:	782b      	ldrb	r3, [r5, #0]
 800ff82:	2b02      	cmp	r3, #2
 800ff84:	d00c      	beq.n	800ffa0 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ff86:	2b03      	cmp	r3, #3
 800ff88:	d010      	beq.n	800ffac <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d008      	beq.n	800ffa0 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ff8e:	2202      	movs	r2, #2
 800ff90:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ff94:	4630      	mov	r0, r6
 800ff96:	f005 fff3 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 800ff9a:	4020      	ands	r0, r4
 800ff9c:	b2c0      	uxtb	r0, r0
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
 800ffa0:	6869      	ldr	r1, [r5, #4]
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f006 f960 	bl	8016268 <ucdr_serialize_string>
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	e7f0      	b.n	800ff8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ffac:	4629      	mov	r1, r5
 800ffae:	4630      	mov	r0, r6
 800ffb0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ffb4:	3104      	adds	r1, #4
 800ffb6:	f7fd fa3f 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 800ffba:	4604      	mov	r4, r0
 800ffbc:	e7e7      	b.n	800ff8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ffbe:	bf00      	nop

0800ffc0 <uxr_serialize_ObjectVariant.part.0>:
 800ffc0:	b570      	push	{r4, r5, r6, lr}
 800ffc2:	780b      	ldrb	r3, [r1, #0]
 800ffc4:	3b01      	subs	r3, #1
 800ffc6:	460c      	mov	r4, r1
 800ffc8:	4605      	mov	r5, r0
 800ffca:	2b0d      	cmp	r3, #13
 800ffcc:	d816      	bhi.n	800fffc <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ffce:	e8df f003 	tbb	[pc, r3]
 800ffd2:	0733      	.short	0x0733
 800ffd4:	07071717 	.word	0x07071717
 800ffd8:	0c150707 	.word	0x0c150707
 800ffdc:	4c510c0c 	.word	0x4c510c0c
 800ffe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffe4:	3104      	adds	r1, #4
 800ffe6:	f7ff bfc3 	b.w	800ff70 <uxr_serialize_DATAWRITER_Representation>
 800ffea:	7909      	ldrb	r1, [r1, #4]
 800ffec:	f7fc f8c0 	bl	800c170 <ucdr_serialize_uint8_t>
 800fff0:	b300      	cbz	r0, 8010034 <uxr_serialize_ObjectVariant.part.0+0x74>
 800fff2:	7923      	ldrb	r3, [r4, #4]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d042      	beq.n	801007e <uxr_serialize_ObjectVariant.part.0+0xbe>
 800fff8:	2b02      	cmp	r3, #2
 800fffa:	d040      	beq.n	801007e <uxr_serialize_ObjectVariant.part.0+0xbe>
 800fffc:	2001      	movs	r0, #1
 800fffe:	bd70      	pop	{r4, r5, r6, pc}
 8010000:	7909      	ldrb	r1, [r1, #4]
 8010002:	f7fc f8b5 	bl	800c170 <ucdr_serialize_uint8_t>
 8010006:	4606      	mov	r6, r0
 8010008:	b158      	cbz	r0, 8010022 <uxr_serialize_ObjectVariant.part.0+0x62>
 801000a:	7923      	ldrb	r3, [r4, #4]
 801000c:	2b02      	cmp	r3, #2
 801000e:	d03c      	beq.n	801008a <uxr_serialize_ObjectVariant.part.0+0xca>
 8010010:	2b03      	cmp	r3, #3
 8010012:	d106      	bne.n	8010022 <uxr_serialize_ObjectVariant.part.0+0x62>
 8010014:	68a2      	ldr	r2, [r4, #8]
 8010016:	f104 010c 	add.w	r1, r4, #12
 801001a:	4628      	mov	r0, r5
 801001c:	f7fd fa0c 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 8010020:	4606      	mov	r6, r0
 8010022:	2202      	movs	r2, #2
 8010024:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010028:	4628      	mov	r0, r5
 801002a:	f005 ffa9 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 801002e:	4030      	ands	r0, r6
 8010030:	b2c0      	uxtb	r0, r0
 8010032:	bd70      	pop	{r4, r5, r6, pc}
 8010034:	2000      	movs	r0, #0
 8010036:	bd70      	pop	{r4, r5, r6, pc}
 8010038:	7909      	ldrb	r1, [r1, #4]
 801003a:	f7fc f899 	bl	800c170 <ucdr_serialize_uint8_t>
 801003e:	4606      	mov	r6, r0
 8010040:	b158      	cbz	r0, 801005a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8010042:	7923      	ldrb	r3, [r4, #4]
 8010044:	2b02      	cmp	r3, #2
 8010046:	d003      	beq.n	8010050 <uxr_serialize_ObjectVariant.part.0+0x90>
 8010048:	2b03      	cmp	r3, #3
 801004a:	d024      	beq.n	8010096 <uxr_serialize_ObjectVariant.part.0+0xd6>
 801004c:	2b01      	cmp	r3, #1
 801004e:	d104      	bne.n	801005a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8010050:	68a1      	ldr	r1, [r4, #8]
 8010052:	4628      	mov	r0, r5
 8010054:	f006 f908 	bl	8016268 <ucdr_serialize_string>
 8010058:	4606      	mov	r6, r0
 801005a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801005e:	4628      	mov	r0, r5
 8010060:	f7fc fdae 	bl	800cbc0 <ucdr_serialize_int16_t>
 8010064:	4030      	ands	r0, r6
 8010066:	b2c0      	uxtb	r0, r0
 8010068:	bd70      	pop	{r4, r5, r6, pc}
 801006a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801006e:	3104      	adds	r1, #4
 8010070:	f7ff be76 	b.w	800fd60 <uxr_serialize_CLIENT_Representation>
 8010074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010078:	3104      	adds	r1, #4
 801007a:	f7ff bf2f 	b.w	800fedc <uxr_serialize_AGENT_Representation>
 801007e:	68a1      	ldr	r1, [r4, #8]
 8010080:	4628      	mov	r0, r5
 8010082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010086:	f006 b8ef 	b.w	8016268 <ucdr_serialize_string>
 801008a:	68a1      	ldr	r1, [r4, #8]
 801008c:	4628      	mov	r0, r5
 801008e:	f006 f8eb 	bl	8016268 <ucdr_serialize_string>
 8010092:	4606      	mov	r6, r0
 8010094:	e7c5      	b.n	8010022 <uxr_serialize_ObjectVariant.part.0+0x62>
 8010096:	68a2      	ldr	r2, [r4, #8]
 8010098:	f104 010c 	add.w	r1, r4, #12
 801009c:	4628      	mov	r0, r5
 801009e:	f7fd f9cb 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 80100a2:	4606      	mov	r6, r0
 80100a4:	e7d9      	b.n	801005a <uxr_serialize_ObjectVariant.part.0+0x9a>
 80100a6:	bf00      	nop

080100a8 <uxr_deserialize_DATAWRITER_Representation>:
 80100a8:	b570      	push	{r4, r5, r6, lr}
 80100aa:	4606      	mov	r6, r0
 80100ac:	460d      	mov	r5, r1
 80100ae:	f7fc f875 	bl	800c19c <ucdr_deserialize_uint8_t>
 80100b2:	4604      	mov	r4, r0
 80100b4:	b130      	cbz	r0, 80100c4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80100b6:	782b      	ldrb	r3, [r5, #0]
 80100b8:	2b02      	cmp	r3, #2
 80100ba:	d00c      	beq.n	80100d6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80100bc:	2b03      	cmp	r3, #3
 80100be:	d012      	beq.n	80100e6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d008      	beq.n	80100d6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80100c4:	2202      	movs	r2, #2
 80100c6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80100ca:	4630      	mov	r0, r6
 80100cc:	f005 ffbc 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 80100d0:	4020      	ands	r0, r4
 80100d2:	b2c0      	uxtb	r0, r0
 80100d4:	bd70      	pop	{r4, r5, r6, pc}
 80100d6:	6869      	ldr	r1, [r5, #4]
 80100d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100dc:	4630      	mov	r0, r6
 80100de:	f006 f8d1 	bl	8016284 <ucdr_deserialize_string>
 80100e2:	4604      	mov	r4, r0
 80100e4:	e7ee      	b.n	80100c4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80100e6:	1d2b      	adds	r3, r5, #4
 80100e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100ec:	f105 0108 	add.w	r1, r5, #8
 80100f0:	4630      	mov	r0, r6
 80100f2:	f7fd f9b3 	bl	800d45c <ucdr_deserialize_sequence_uint8_t>
 80100f6:	4604      	mov	r4, r0
 80100f8:	e7e4      	b.n	80100c4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80100fa:	bf00      	nop

080100fc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	460d      	mov	r5, r1
 8010100:	7809      	ldrb	r1, [r1, #0]
 8010102:	4606      	mov	r6, r0
 8010104:	f7fc f806 	bl	800c114 <ucdr_serialize_bool>
 8010108:	782b      	ldrb	r3, [r5, #0]
 801010a:	4604      	mov	r4, r0
 801010c:	b94b      	cbnz	r3, 8010122 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801010e:	7a29      	ldrb	r1, [r5, #8]
 8010110:	4630      	mov	r0, r6
 8010112:	f7fb ffff 	bl	800c114 <ucdr_serialize_bool>
 8010116:	7a2b      	ldrb	r3, [r5, #8]
 8010118:	4004      	ands	r4, r0
 801011a:	b2e4      	uxtb	r4, r4
 801011c:	b943      	cbnz	r3, 8010130 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801011e:	4620      	mov	r0, r4
 8010120:	bd70      	pop	{r4, r5, r6, pc}
 8010122:	6869      	ldr	r1, [r5, #4]
 8010124:	4630      	mov	r0, r6
 8010126:	f006 f89f 	bl	8016268 <ucdr_serialize_string>
 801012a:	4004      	ands	r4, r0
 801012c:	b2e4      	uxtb	r4, r4
 801012e:	e7ee      	b.n	801010e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010130:	68e9      	ldr	r1, [r5, #12]
 8010132:	4630      	mov	r0, r6
 8010134:	f006 f898 	bl	8016268 <ucdr_serialize_string>
 8010138:	4004      	ands	r4, r0
 801013a:	4620      	mov	r0, r4
 801013c:	bd70      	pop	{r4, r5, r6, pc}
 801013e:	bf00      	nop

08010140 <uxr_serialize_OBJK_Topic_Binary>:
 8010140:	b570      	push	{r4, r5, r6, lr}
 8010142:	460d      	mov	r5, r1
 8010144:	6809      	ldr	r1, [r1, #0]
 8010146:	4606      	mov	r6, r0
 8010148:	f006 f88e 	bl	8016268 <ucdr_serialize_string>
 801014c:	7929      	ldrb	r1, [r5, #4]
 801014e:	4604      	mov	r4, r0
 8010150:	4630      	mov	r0, r6
 8010152:	f7fb ffdf 	bl	800c114 <ucdr_serialize_bool>
 8010156:	792b      	ldrb	r3, [r5, #4]
 8010158:	4004      	ands	r4, r0
 801015a:	b2e4      	uxtb	r4, r4
 801015c:	b943      	cbnz	r3, 8010170 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801015e:	7b29      	ldrb	r1, [r5, #12]
 8010160:	4630      	mov	r0, r6
 8010162:	f7fb ffd7 	bl	800c114 <ucdr_serialize_bool>
 8010166:	7b2b      	ldrb	r3, [r5, #12]
 8010168:	4004      	ands	r4, r0
 801016a:	b93b      	cbnz	r3, 801017c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801016c:	4620      	mov	r0, r4
 801016e:	bd70      	pop	{r4, r5, r6, pc}
 8010170:	68a9      	ldr	r1, [r5, #8]
 8010172:	4630      	mov	r0, r6
 8010174:	f006 f878 	bl	8016268 <ucdr_serialize_string>
 8010178:	4004      	ands	r4, r0
 801017a:	e7f0      	b.n	801015e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801017c:	6929      	ldr	r1, [r5, #16]
 801017e:	4630      	mov	r0, r6
 8010180:	f006 f872 	bl	8016268 <ucdr_serialize_string>
 8010184:	4004      	ands	r4, r0
 8010186:	b2e4      	uxtb	r4, r4
 8010188:	4620      	mov	r0, r4
 801018a:	bd70      	pop	{r4, r5, r6, pc}

0801018c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801018c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010190:	460c      	mov	r4, r1
 8010192:	7809      	ldrb	r1, [r1, #0]
 8010194:	4606      	mov	r6, r0
 8010196:	f7fb ffbd 	bl	800c114 <ucdr_serialize_bool>
 801019a:	7823      	ldrb	r3, [r4, #0]
 801019c:	4605      	mov	r5, r0
 801019e:	b96b      	cbnz	r3, 80101bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80101a0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80101a4:	4630      	mov	r0, r6
 80101a6:	f7fb ffb5 	bl	800c114 <ucdr_serialize_bool>
 80101aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80101ae:	4005      	ands	r5, r0
 80101b0:	b2ed      	uxtb	r5, r5
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d16a      	bne.n	801028c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80101b6:	4628      	mov	r0, r5
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101bc:	6861      	ldr	r1, [r4, #4]
 80101be:	4630      	mov	r0, r6
 80101c0:	f7fc f9f2 	bl	800c5a8 <ucdr_serialize_uint32_t>
 80101c4:	6863      	ldr	r3, [r4, #4]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d06c      	beq.n	80102a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d068      	beq.n	80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80101ce:	68a1      	ldr	r1, [r4, #8]
 80101d0:	4630      	mov	r0, r6
 80101d2:	f006 f849 	bl	8016268 <ucdr_serialize_string>
 80101d6:	6862      	ldr	r2, [r4, #4]
 80101d8:	2a01      	cmp	r2, #1
 80101da:	d953      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80101dc:	2800      	cmp	r0, #0
 80101de:	d05f      	beq.n	80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80101e0:	68e1      	ldr	r1, [r4, #12]
 80101e2:	4630      	mov	r0, r6
 80101e4:	f006 f840 	bl	8016268 <ucdr_serialize_string>
 80101e8:	6862      	ldr	r2, [r4, #4]
 80101ea:	2a02      	cmp	r2, #2
 80101ec:	d94a      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d056      	beq.n	80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80101f2:	6921      	ldr	r1, [r4, #16]
 80101f4:	4630      	mov	r0, r6
 80101f6:	f006 f837 	bl	8016268 <ucdr_serialize_string>
 80101fa:	6862      	ldr	r2, [r4, #4]
 80101fc:	2a03      	cmp	r2, #3
 80101fe:	d941      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010200:	2800      	cmp	r0, #0
 8010202:	d04d      	beq.n	80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010204:	6961      	ldr	r1, [r4, #20]
 8010206:	4630      	mov	r0, r6
 8010208:	f006 f82e 	bl	8016268 <ucdr_serialize_string>
 801020c:	6862      	ldr	r2, [r4, #4]
 801020e:	2a04      	cmp	r2, #4
 8010210:	d938      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010212:	2800      	cmp	r0, #0
 8010214:	d044      	beq.n	80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010216:	69a1      	ldr	r1, [r4, #24]
 8010218:	4630      	mov	r0, r6
 801021a:	f006 f825 	bl	8016268 <ucdr_serialize_string>
 801021e:	6862      	ldr	r2, [r4, #4]
 8010220:	2a05      	cmp	r2, #5
 8010222:	d92f      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010224:	2800      	cmp	r0, #0
 8010226:	d03b      	beq.n	80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010228:	69e1      	ldr	r1, [r4, #28]
 801022a:	4630      	mov	r0, r6
 801022c:	f006 f81c 	bl	8016268 <ucdr_serialize_string>
 8010230:	6862      	ldr	r2, [r4, #4]
 8010232:	2a06      	cmp	r2, #6
 8010234:	d926      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010236:	b398      	cbz	r0, 80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010238:	6a21      	ldr	r1, [r4, #32]
 801023a:	4630      	mov	r0, r6
 801023c:	f006 f814 	bl	8016268 <ucdr_serialize_string>
 8010240:	6862      	ldr	r2, [r4, #4]
 8010242:	2a07      	cmp	r2, #7
 8010244:	d91e      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010246:	b358      	cbz	r0, 80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010248:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801024a:	4630      	mov	r0, r6
 801024c:	f006 f80c 	bl	8016268 <ucdr_serialize_string>
 8010250:	6862      	ldr	r2, [r4, #4]
 8010252:	2a08      	cmp	r2, #8
 8010254:	d916      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010256:	b318      	cbz	r0, 80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010258:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801025a:	4630      	mov	r0, r6
 801025c:	f006 f804 	bl	8016268 <ucdr_serialize_string>
 8010260:	6862      	ldr	r2, [r4, #4]
 8010262:	2a09      	cmp	r2, #9
 8010264:	d90e      	bls.n	8010284 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010266:	b1d8      	cbz	r0, 80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010268:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 801026c:	2709      	movs	r7, #9
 801026e:	e000      	b.n	8010272 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010270:	b1b0      	cbz	r0, 80102a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8010272:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8010276:	4630      	mov	r0, r6
 8010278:	f005 fff6 	bl	8016268 <ucdr_serialize_string>
 801027c:	6862      	ldr	r2, [r4, #4]
 801027e:	3701      	adds	r7, #1
 8010280:	4297      	cmp	r7, r2
 8010282:	d3f5      	bcc.n	8010270 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8010284:	ea05 0300 	and.w	r3, r5, r0
 8010288:	b2dd      	uxtb	r5, r3
 801028a:	e789      	b.n	80101a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801028c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801028e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010292:	4630      	mov	r0, r6
 8010294:	f7fd f8d0 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 8010298:	4005      	ands	r5, r0
 801029a:	4628      	mov	r0, r5
 801029c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a0:	2500      	movs	r5, #0
 80102a2:	e77d      	b.n	80101a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80102a4:	4028      	ands	r0, r5
 80102a6:	b2c5      	uxtb	r5, r0
 80102a8:	e77a      	b.n	80101a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80102aa:	bf00      	nop

080102ac <uxr_serialize_OBJK_Publisher_Binary>:
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	460d      	mov	r5, r1
 80102b0:	7809      	ldrb	r1, [r1, #0]
 80102b2:	4606      	mov	r6, r0
 80102b4:	f7fb ff2e 	bl	800c114 <ucdr_serialize_bool>
 80102b8:	782b      	ldrb	r3, [r5, #0]
 80102ba:	4604      	mov	r4, r0
 80102bc:	b94b      	cbnz	r3, 80102d2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80102be:	7a29      	ldrb	r1, [r5, #8]
 80102c0:	4630      	mov	r0, r6
 80102c2:	f7fb ff27 	bl	800c114 <ucdr_serialize_bool>
 80102c6:	7a2b      	ldrb	r3, [r5, #8]
 80102c8:	4004      	ands	r4, r0
 80102ca:	b2e4      	uxtb	r4, r4
 80102cc:	b943      	cbnz	r3, 80102e0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80102ce:	4620      	mov	r0, r4
 80102d0:	bd70      	pop	{r4, r5, r6, pc}
 80102d2:	6869      	ldr	r1, [r5, #4]
 80102d4:	4630      	mov	r0, r6
 80102d6:	f005 ffc7 	bl	8016268 <ucdr_serialize_string>
 80102da:	4004      	ands	r4, r0
 80102dc:	b2e4      	uxtb	r4, r4
 80102de:	e7ee      	b.n	80102be <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80102e0:	f105 010c 	add.w	r1, r5, #12
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7ff ff51 	bl	801018c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80102ea:	4004      	ands	r4, r0
 80102ec:	4620      	mov	r0, r4
 80102ee:	bd70      	pop	{r4, r5, r6, pc}

080102f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80102f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f4:	460c      	mov	r4, r1
 80102f6:	7809      	ldrb	r1, [r1, #0]
 80102f8:	4606      	mov	r6, r0
 80102fa:	f7fb ff0b 	bl	800c114 <ucdr_serialize_bool>
 80102fe:	7823      	ldrb	r3, [r4, #0]
 8010300:	4605      	mov	r5, r0
 8010302:	b96b      	cbnz	r3, 8010320 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010304:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010308:	4630      	mov	r0, r6
 801030a:	f7fb ff03 	bl	800c114 <ucdr_serialize_bool>
 801030e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010312:	4005      	ands	r5, r0
 8010314:	b2ed      	uxtb	r5, r5
 8010316:	2b00      	cmp	r3, #0
 8010318:	d16a      	bne.n	80103f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 801031a:	4628      	mov	r0, r5
 801031c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010320:	6861      	ldr	r1, [r4, #4]
 8010322:	4630      	mov	r0, r6
 8010324:	f7fc f940 	bl	800c5a8 <ucdr_serialize_uint32_t>
 8010328:	6863      	ldr	r3, [r4, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d06c      	beq.n	8010408 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 801032e:	2800      	cmp	r0, #0
 8010330:	d068      	beq.n	8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010332:	68a1      	ldr	r1, [r4, #8]
 8010334:	4630      	mov	r0, r6
 8010336:	f005 ff97 	bl	8016268 <ucdr_serialize_string>
 801033a:	6862      	ldr	r2, [r4, #4]
 801033c:	2a01      	cmp	r2, #1
 801033e:	d953      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010340:	2800      	cmp	r0, #0
 8010342:	d05f      	beq.n	8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010344:	68e1      	ldr	r1, [r4, #12]
 8010346:	4630      	mov	r0, r6
 8010348:	f005 ff8e 	bl	8016268 <ucdr_serialize_string>
 801034c:	6862      	ldr	r2, [r4, #4]
 801034e:	2a02      	cmp	r2, #2
 8010350:	d94a      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010352:	2800      	cmp	r0, #0
 8010354:	d056      	beq.n	8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010356:	6921      	ldr	r1, [r4, #16]
 8010358:	4630      	mov	r0, r6
 801035a:	f005 ff85 	bl	8016268 <ucdr_serialize_string>
 801035e:	6862      	ldr	r2, [r4, #4]
 8010360:	2a03      	cmp	r2, #3
 8010362:	d941      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010364:	2800      	cmp	r0, #0
 8010366:	d04d      	beq.n	8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8010368:	6961      	ldr	r1, [r4, #20]
 801036a:	4630      	mov	r0, r6
 801036c:	f005 ff7c 	bl	8016268 <ucdr_serialize_string>
 8010370:	6862      	ldr	r2, [r4, #4]
 8010372:	2a04      	cmp	r2, #4
 8010374:	d938      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010376:	2800      	cmp	r0, #0
 8010378:	d044      	beq.n	8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801037a:	69a1      	ldr	r1, [r4, #24]
 801037c:	4630      	mov	r0, r6
 801037e:	f005 ff73 	bl	8016268 <ucdr_serialize_string>
 8010382:	6862      	ldr	r2, [r4, #4]
 8010384:	2a05      	cmp	r2, #5
 8010386:	d92f      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010388:	2800      	cmp	r0, #0
 801038a:	d03b      	beq.n	8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801038c:	69e1      	ldr	r1, [r4, #28]
 801038e:	4630      	mov	r0, r6
 8010390:	f005 ff6a 	bl	8016268 <ucdr_serialize_string>
 8010394:	6862      	ldr	r2, [r4, #4]
 8010396:	2a06      	cmp	r2, #6
 8010398:	d926      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801039a:	b398      	cbz	r0, 8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801039c:	6a21      	ldr	r1, [r4, #32]
 801039e:	4630      	mov	r0, r6
 80103a0:	f005 ff62 	bl	8016268 <ucdr_serialize_string>
 80103a4:	6862      	ldr	r2, [r4, #4]
 80103a6:	2a07      	cmp	r2, #7
 80103a8:	d91e      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80103aa:	b358      	cbz	r0, 8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80103ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80103ae:	4630      	mov	r0, r6
 80103b0:	f005 ff5a 	bl	8016268 <ucdr_serialize_string>
 80103b4:	6862      	ldr	r2, [r4, #4]
 80103b6:	2a08      	cmp	r2, #8
 80103b8:	d916      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80103ba:	b318      	cbz	r0, 8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80103bc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80103be:	4630      	mov	r0, r6
 80103c0:	f005 ff52 	bl	8016268 <ucdr_serialize_string>
 80103c4:	6862      	ldr	r2, [r4, #4]
 80103c6:	2a09      	cmp	r2, #9
 80103c8:	d90e      	bls.n	80103e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80103ca:	b1d8      	cbz	r0, 8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80103cc:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80103d0:	2709      	movs	r7, #9
 80103d2:	e000      	b.n	80103d6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80103d4:	b1b0      	cbz	r0, 8010404 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80103d6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80103da:	4630      	mov	r0, r6
 80103dc:	f005 ff44 	bl	8016268 <ucdr_serialize_string>
 80103e0:	6862      	ldr	r2, [r4, #4]
 80103e2:	3701      	adds	r7, #1
 80103e4:	4297      	cmp	r7, r2
 80103e6:	d3f5      	bcc.n	80103d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80103e8:	ea05 0300 	and.w	r3, r5, r0
 80103ec:	b2dd      	uxtb	r5, r3
 80103ee:	e789      	b.n	8010304 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80103f0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80103f2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80103f6:	4630      	mov	r0, r6
 80103f8:	f7fd f81e 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 80103fc:	4005      	ands	r5, r0
 80103fe:	4628      	mov	r0, r5
 8010400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010404:	2500      	movs	r5, #0
 8010406:	e77d      	b.n	8010304 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010408:	4028      	ands	r0, r5
 801040a:	b2c5      	uxtb	r5, r0
 801040c:	e77a      	b.n	8010304 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801040e:	bf00      	nop

08010410 <uxr_serialize_OBJK_Subscriber_Binary>:
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	460d      	mov	r5, r1
 8010414:	7809      	ldrb	r1, [r1, #0]
 8010416:	4606      	mov	r6, r0
 8010418:	f7fb fe7c 	bl	800c114 <ucdr_serialize_bool>
 801041c:	782b      	ldrb	r3, [r5, #0]
 801041e:	4604      	mov	r4, r0
 8010420:	b94b      	cbnz	r3, 8010436 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8010422:	7a29      	ldrb	r1, [r5, #8]
 8010424:	4630      	mov	r0, r6
 8010426:	f7fb fe75 	bl	800c114 <ucdr_serialize_bool>
 801042a:	7a2b      	ldrb	r3, [r5, #8]
 801042c:	4004      	ands	r4, r0
 801042e:	b2e4      	uxtb	r4, r4
 8010430:	b943      	cbnz	r3, 8010444 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8010432:	4620      	mov	r0, r4
 8010434:	bd70      	pop	{r4, r5, r6, pc}
 8010436:	6869      	ldr	r1, [r5, #4]
 8010438:	4630      	mov	r0, r6
 801043a:	f005 ff15 	bl	8016268 <ucdr_serialize_string>
 801043e:	4004      	ands	r4, r0
 8010440:	b2e4      	uxtb	r4, r4
 8010442:	e7ee      	b.n	8010422 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8010444:	f105 010c 	add.w	r1, r5, #12
 8010448:	4630      	mov	r0, r6
 801044a:	f7ff ff51 	bl	80102f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801044e:	4004      	ands	r4, r0
 8010450:	4620      	mov	r0, r4
 8010452:	bd70      	pop	{r4, r5, r6, pc}

08010454 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	460d      	mov	r5, r1
 8010458:	8809      	ldrh	r1, [r1, #0]
 801045a:	4606      	mov	r6, r0
 801045c:	f7fb feb4 	bl	800c1c8 <ucdr_serialize_uint16_t>
 8010460:	78a9      	ldrb	r1, [r5, #2]
 8010462:	4604      	mov	r4, r0
 8010464:	4630      	mov	r0, r6
 8010466:	f7fb fe55 	bl	800c114 <ucdr_serialize_bool>
 801046a:	78ab      	ldrb	r3, [r5, #2]
 801046c:	4004      	ands	r4, r0
 801046e:	b2e4      	uxtb	r4, r4
 8010470:	b9b3      	cbnz	r3, 80104a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8010472:	79a9      	ldrb	r1, [r5, #6]
 8010474:	4630      	mov	r0, r6
 8010476:	f7fb fe4d 	bl	800c114 <ucdr_serialize_bool>
 801047a:	79ab      	ldrb	r3, [r5, #6]
 801047c:	4004      	ands	r4, r0
 801047e:	bb33      	cbnz	r3, 80104ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8010480:	7b29      	ldrb	r1, [r5, #12]
 8010482:	4630      	mov	r0, r6
 8010484:	f7fb fe46 	bl	800c114 <ucdr_serialize_bool>
 8010488:	7b2b      	ldrb	r3, [r5, #12]
 801048a:	4004      	ands	r4, r0
 801048c:	b9c3      	cbnz	r3, 80104c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 801048e:	7d29      	ldrb	r1, [r5, #20]
 8010490:	4630      	mov	r0, r6
 8010492:	f7fb fe3f 	bl	800c114 <ucdr_serialize_bool>
 8010496:	7d2b      	ldrb	r3, [r5, #20]
 8010498:	4004      	ands	r4, r0
 801049a:	b93b      	cbnz	r3, 80104ac <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 801049c:	4620      	mov	r0, r4
 801049e:	bd70      	pop	{r4, r5, r6, pc}
 80104a0:	88a9      	ldrh	r1, [r5, #4]
 80104a2:	4630      	mov	r0, r6
 80104a4:	f7fb fe90 	bl	800c1c8 <ucdr_serialize_uint16_t>
 80104a8:	4004      	ands	r4, r0
 80104aa:	e7e2      	b.n	8010472 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 80104ac:	69aa      	ldr	r2, [r5, #24]
 80104ae:	f105 011c 	add.w	r1, r5, #28
 80104b2:	4630      	mov	r0, r6
 80104b4:	f7fc ffc0 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 80104b8:	4004      	ands	r4, r0
 80104ba:	b2e4      	uxtb	r4, r4
 80104bc:	4620      	mov	r0, r4
 80104be:	bd70      	pop	{r4, r5, r6, pc}
 80104c0:	6929      	ldr	r1, [r5, #16]
 80104c2:	4630      	mov	r0, r6
 80104c4:	f7fc f870 	bl	800c5a8 <ucdr_serialize_uint32_t>
 80104c8:	4004      	ands	r4, r0
 80104ca:	b2e4      	uxtb	r4, r4
 80104cc:	e7df      	b.n	801048e <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 80104ce:	68a9      	ldr	r1, [r5, #8]
 80104d0:	4630      	mov	r0, r6
 80104d2:	f7fc f869 	bl	800c5a8 <ucdr_serialize_uint32_t>
 80104d6:	4004      	ands	r4, r0
 80104d8:	b2e4      	uxtb	r4, r4
 80104da:	e7d1      	b.n	8010480 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

080104dc <uxr_serialize_OBJK_DataReader_Binary>:
 80104dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104de:	2202      	movs	r2, #2
 80104e0:	460c      	mov	r4, r1
 80104e2:	4606      	mov	r6, r0
 80104e4:	f005 fd4c 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 80104e8:	78a1      	ldrb	r1, [r4, #2]
 80104ea:	4605      	mov	r5, r0
 80104ec:	4630      	mov	r0, r6
 80104ee:	f7fb fe11 	bl	800c114 <ucdr_serialize_bool>
 80104f2:	78a3      	ldrb	r3, [r4, #2]
 80104f4:	4005      	ands	r5, r0
 80104f6:	b2ed      	uxtb	r5, r5
 80104f8:	b90b      	cbnz	r3, 80104fe <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80104fa:	4628      	mov	r0, r5
 80104fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104fe:	f104 0108 	add.w	r1, r4, #8
 8010502:	4630      	mov	r0, r6
 8010504:	f7ff ffa6 	bl	8010454 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010508:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801050c:	4607      	mov	r7, r0
 801050e:	4630      	mov	r0, r6
 8010510:	f7fb fe00 	bl	800c114 <ucdr_serialize_bool>
 8010514:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010518:	4007      	ands	r7, r0
 801051a:	b2ff      	uxtb	r7, r7
 801051c:	b95b      	cbnz	r3, 8010536 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801051e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8010522:	4630      	mov	r0, r6
 8010524:	f7fb fdf6 	bl	800c114 <ucdr_serialize_bool>
 8010528:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801052c:	4007      	ands	r7, r0
 801052e:	b94b      	cbnz	r3, 8010544 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8010530:	403d      	ands	r5, r7
 8010532:	4628      	mov	r0, r5
 8010534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010536:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801053a:	4630      	mov	r0, r6
 801053c:	f7fc fa78 	bl	800ca30 <ucdr_serialize_uint64_t>
 8010540:	4007      	ands	r7, r0
 8010542:	e7ec      	b.n	801051e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8010544:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010546:	4630      	mov	r0, r6
 8010548:	f005 fe8e 	bl	8016268 <ucdr_serialize_string>
 801054c:	4007      	ands	r7, r0
 801054e:	b2ff      	uxtb	r7, r7
 8010550:	e7ee      	b.n	8010530 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010552:	bf00      	nop

08010554 <uxr_serialize_OBJK_DataWriter_Binary>:
 8010554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010556:	2202      	movs	r2, #2
 8010558:	460d      	mov	r5, r1
 801055a:	4606      	mov	r6, r0
 801055c:	f005 fd10 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010560:	78a9      	ldrb	r1, [r5, #2]
 8010562:	4604      	mov	r4, r0
 8010564:	4630      	mov	r0, r6
 8010566:	f7fb fdd5 	bl	800c114 <ucdr_serialize_bool>
 801056a:	78ab      	ldrb	r3, [r5, #2]
 801056c:	4004      	ands	r4, r0
 801056e:	b2e4      	uxtb	r4, r4
 8010570:	b90b      	cbnz	r3, 8010576 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8010572:	4620      	mov	r0, r4
 8010574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010576:	f105 0108 	add.w	r1, r5, #8
 801057a:	4630      	mov	r0, r6
 801057c:	f7ff ff6a 	bl	8010454 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010580:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8010584:	4607      	mov	r7, r0
 8010586:	4630      	mov	r0, r6
 8010588:	f7fb fdc4 	bl	800c114 <ucdr_serialize_bool>
 801058c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010590:	4007      	ands	r7, r0
 8010592:	b2ff      	uxtb	r7, r7
 8010594:	b913      	cbnz	r3, 801059c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8010596:	403c      	ands	r4, r7
 8010598:	4620      	mov	r0, r4
 801059a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801059c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80105a0:	4630      	mov	r0, r6
 80105a2:	f7fc fa45 	bl	800ca30 <ucdr_serialize_uint64_t>
 80105a6:	4007      	ands	r7, r0
 80105a8:	e7f5      	b.n	8010596 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80105aa:	bf00      	nop

080105ac <uxr_deserialize_ObjectVariant>:
 80105ac:	b570      	push	{r4, r5, r6, lr}
 80105ae:	4605      	mov	r5, r0
 80105b0:	460e      	mov	r6, r1
 80105b2:	f7fb fdf3 	bl	800c19c <ucdr_deserialize_uint8_t>
 80105b6:	b168      	cbz	r0, 80105d4 <uxr_deserialize_ObjectVariant+0x28>
 80105b8:	7833      	ldrb	r3, [r6, #0]
 80105ba:	3b01      	subs	r3, #1
 80105bc:	4604      	mov	r4, r0
 80105be:	2b0d      	cmp	r3, #13
 80105c0:	d809      	bhi.n	80105d6 <uxr_deserialize_ObjectVariant+0x2a>
 80105c2:	e8df f003 	tbb	[pc, r3]
 80105c6:	0a64      	.short	0x0a64
 80105c8:	0a0a2323 	.word	0x0a0a2323
 80105cc:	10080a0a 	.word	0x10080a0a
 80105d0:	5e411010 	.word	0x5e411010
 80105d4:	2400      	movs	r4, #0
 80105d6:	4620      	mov	r0, r4
 80105d8:	bd70      	pop	{r4, r5, r6, pc}
 80105da:	1d31      	adds	r1, r6, #4
 80105dc:	4628      	mov	r0, r5
 80105de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105e2:	f7ff bd61 	b.w	80100a8 <uxr_deserialize_DATAWRITER_Representation>
 80105e6:	1d31      	adds	r1, r6, #4
 80105e8:	4628      	mov	r0, r5
 80105ea:	f7fb fdd7 	bl	800c19c <ucdr_deserialize_uint8_t>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d0f0      	beq.n	80105d4 <uxr_deserialize_ObjectVariant+0x28>
 80105f2:	7933      	ldrb	r3, [r6, #4]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d001      	beq.n	80105fc <uxr_deserialize_ObjectVariant+0x50>
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	d1ec      	bne.n	80105d6 <uxr_deserialize_ObjectVariant+0x2a>
 80105fc:	68b1      	ldr	r1, [r6, #8]
 80105fe:	4628      	mov	r0, r5
 8010600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010608:	f005 be3c 	b.w	8016284 <ucdr_deserialize_string>
 801060c:	1d31      	adds	r1, r6, #4
 801060e:	4628      	mov	r0, r5
 8010610:	f7fb fdc4 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010614:	4604      	mov	r4, r0
 8010616:	b170      	cbz	r0, 8010636 <uxr_deserialize_ObjectVariant+0x8a>
 8010618:	7933      	ldrb	r3, [r6, #4]
 801061a:	2b02      	cmp	r3, #2
 801061c:	d053      	beq.n	80106c6 <uxr_deserialize_ObjectVariant+0x11a>
 801061e:	2b03      	cmp	r3, #3
 8010620:	d109      	bne.n	8010636 <uxr_deserialize_ObjectVariant+0x8a>
 8010622:	f106 0308 	add.w	r3, r6, #8
 8010626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801062a:	f106 010c 	add.w	r1, r6, #12
 801062e:	4628      	mov	r0, r5
 8010630:	f7fc ff14 	bl	800d45c <ucdr_deserialize_sequence_uint8_t>
 8010634:	4604      	mov	r4, r0
 8010636:	2202      	movs	r2, #2
 8010638:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801063c:	4628      	mov	r0, r5
 801063e:	f005 fd03 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010642:	4004      	ands	r4, r0
 8010644:	b2e4      	uxtb	r4, r4
 8010646:	e7c6      	b.n	80105d6 <uxr_deserialize_ObjectVariant+0x2a>
 8010648:	2204      	movs	r2, #4
 801064a:	18b1      	adds	r1, r6, r2
 801064c:	4628      	mov	r0, r5
 801064e:	f005 fcfb 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010652:	2202      	movs	r2, #2
 8010654:	f106 0108 	add.w	r1, r6, #8
 8010658:	4604      	mov	r4, r0
 801065a:	4628      	mov	r0, r5
 801065c:	f005 fcf4 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010660:	2202      	movs	r2, #2
 8010662:	4004      	ands	r4, r0
 8010664:	f106 010a 	add.w	r1, r6, #10
 8010668:	4628      	mov	r0, r5
 801066a:	f005 fced 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 801066e:	b2e4      	uxtb	r4, r4
 8010670:	4603      	mov	r3, r0
 8010672:	f106 010c 	add.w	r1, r6, #12
 8010676:	4628      	mov	r0, r5
 8010678:	401c      	ands	r4, r3
 801067a:	f7fb fd61 	bl	800c140 <ucdr_deserialize_bool>
 801067e:	4004      	ands	r4, r0
 8010680:	e7a9      	b.n	80105d6 <uxr_deserialize_ObjectVariant+0x2a>
 8010682:	1d31      	adds	r1, r6, #4
 8010684:	4628      	mov	r0, r5
 8010686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801068a:	f7ff bbc3 	b.w	800fe14 <uxr_deserialize_CLIENT_Representation>
 801068e:	1d31      	adds	r1, r6, #4
 8010690:	4628      	mov	r0, r5
 8010692:	f7fb fd83 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010696:	4604      	mov	r4, r0
 8010698:	b168      	cbz	r0, 80106b6 <uxr_deserialize_ObjectVariant+0x10a>
 801069a:	7933      	ldrb	r3, [r6, #4]
 801069c:	2b02      	cmp	r3, #2
 801069e:	d003      	beq.n	80106a8 <uxr_deserialize_ObjectVariant+0xfc>
 80106a0:	2b03      	cmp	r3, #3
 80106a2:	d018      	beq.n	80106d6 <uxr_deserialize_ObjectVariant+0x12a>
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d106      	bne.n	80106b6 <uxr_deserialize_ObjectVariant+0x10a>
 80106a8:	68b1      	ldr	r1, [r6, #8]
 80106aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106ae:	4628      	mov	r0, r5
 80106b0:	f005 fde8 	bl	8016284 <ucdr_deserialize_string>
 80106b4:	4604      	mov	r4, r0
 80106b6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80106ba:	4628      	mov	r0, r5
 80106bc:	f7fc fb0a 	bl	800ccd4 <ucdr_deserialize_int16_t>
 80106c0:	4004      	ands	r4, r0
 80106c2:	b2e4      	uxtb	r4, r4
 80106c4:	e787      	b.n	80105d6 <uxr_deserialize_ObjectVariant+0x2a>
 80106c6:	68b1      	ldr	r1, [r6, #8]
 80106c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106cc:	4628      	mov	r0, r5
 80106ce:	f005 fdd9 	bl	8016284 <ucdr_deserialize_string>
 80106d2:	4604      	mov	r4, r0
 80106d4:	e7af      	b.n	8010636 <uxr_deserialize_ObjectVariant+0x8a>
 80106d6:	f106 0308 	add.w	r3, r6, #8
 80106da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106de:	f106 010c 	add.w	r1, r6, #12
 80106e2:	4628      	mov	r0, r5
 80106e4:	f7fc feba 	bl	800d45c <ucdr_deserialize_sequence_uint8_t>
 80106e8:	4604      	mov	r4, r0
 80106ea:	e7e4      	b.n	80106b6 <uxr_deserialize_ObjectVariant+0x10a>

080106ec <uxr_deserialize_BaseObjectRequest>:
 80106ec:	b570      	push	{r4, r5, r6, lr}
 80106ee:	2202      	movs	r2, #2
 80106f0:	4605      	mov	r5, r0
 80106f2:	460e      	mov	r6, r1
 80106f4:	f005 fca8 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 80106f8:	2202      	movs	r2, #2
 80106fa:	4604      	mov	r4, r0
 80106fc:	18b1      	adds	r1, r6, r2
 80106fe:	4628      	mov	r0, r5
 8010700:	f005 fca2 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010704:	4020      	ands	r0, r4
 8010706:	b2c0      	uxtb	r0, r0
 8010708:	bd70      	pop	{r4, r5, r6, pc}
 801070a:	bf00      	nop

0801070c <uxr_serialize_ActivityInfoVariant>:
 801070c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010710:	460d      	mov	r5, r1
 8010712:	7809      	ldrb	r1, [r1, #0]
 8010714:	4606      	mov	r6, r0
 8010716:	f7fb fd2b 	bl	800c170 <ucdr_serialize_uint8_t>
 801071a:	b130      	cbz	r0, 801072a <uxr_serialize_ActivityInfoVariant+0x1e>
 801071c:	782b      	ldrb	r3, [r5, #0]
 801071e:	2b06      	cmp	r3, #6
 8010720:	d014      	beq.n	801074c <uxr_serialize_ActivityInfoVariant+0x40>
 8010722:	2b0d      	cmp	r3, #13
 8010724:	d019      	beq.n	801075a <uxr_serialize_ActivityInfoVariant+0x4e>
 8010726:	2b05      	cmp	r3, #5
 8010728:	d001      	beq.n	801072e <uxr_serialize_ActivityInfoVariant+0x22>
 801072a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801072e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010732:	4630      	mov	r0, r6
 8010734:	f7fc fa44 	bl	800cbc0 <ucdr_serialize_int16_t>
 8010738:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801073c:	4604      	mov	r4, r0
 801073e:	4630      	mov	r0, r6
 8010740:	f7fc f976 	bl	800ca30 <ucdr_serialize_uint64_t>
 8010744:	4020      	ands	r0, r4
 8010746:	b2c0      	uxtb	r0, r0
 8010748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801074c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010750:	4630      	mov	r0, r6
 8010752:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010756:	f7fc ba33 	b.w	800cbc0 <ucdr_serialize_int16_t>
 801075a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801075e:	4630      	mov	r0, r6
 8010760:	f7fc fa2e 	bl	800cbc0 <ucdr_serialize_int16_t>
 8010764:	68e9      	ldr	r1, [r5, #12]
 8010766:	4681      	mov	r9, r0
 8010768:	4630      	mov	r0, r6
 801076a:	f7fb ff1d 	bl	800c5a8 <ucdr_serialize_uint32_t>
 801076e:	68eb      	ldr	r3, [r5, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d051      	beq.n	8010818 <uxr_serialize_ActivityInfoVariant+0x10c>
 8010774:	b1e8      	cbz	r0, 80107b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010776:	f105 0714 	add.w	r7, r5, #20
 801077a:	f04f 0800 	mov.w	r8, #0
 801077e:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8010782:	4630      	mov	r0, r6
 8010784:	f7fb fcf4 	bl	800c170 <ucdr_serialize_uint8_t>
 8010788:	b198      	cbz	r0, 80107b2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801078a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801078e:	2b03      	cmp	r3, #3
 8010790:	d839      	bhi.n	8010806 <uxr_serialize_ActivityInfoVariant+0xfa>
 8010792:	e8df f003 	tbb	[pc, r3]
 8010796:	1e2b      	.short	0x1e2b
 8010798:	0211      	.short	0x0211
 801079a:	6839      	ldr	r1, [r7, #0]
 801079c:	4630      	mov	r0, r6
 801079e:	f005 fd63 	bl	8016268 <ucdr_serialize_string>
 80107a2:	68eb      	ldr	r3, [r5, #12]
 80107a4:	f108 0801 	add.w	r8, r8, #1
 80107a8:	4598      	cmp	r8, r3
 80107aa:	d231      	bcs.n	8010810 <uxr_serialize_ActivityInfoVariant+0x104>
 80107ac:	3718      	adds	r7, #24
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d1e5      	bne.n	801077e <uxr_serialize_ActivityInfoVariant+0x72>
 80107b2:	2000      	movs	r0, #0
 80107b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107b8:	2210      	movs	r2, #16
 80107ba:	4639      	mov	r1, r7
 80107bc:	4630      	mov	r0, r6
 80107be:	f005 fbdf 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 80107c2:	6939      	ldr	r1, [r7, #16]
 80107c4:	4604      	mov	r4, r0
 80107c6:	4630      	mov	r0, r6
 80107c8:	f7fb feee 	bl	800c5a8 <ucdr_serialize_uint32_t>
 80107cc:	4020      	ands	r0, r4
 80107ce:	b2c0      	uxtb	r0, r0
 80107d0:	e7e7      	b.n	80107a2 <uxr_serialize_ActivityInfoVariant+0x96>
 80107d2:	2204      	movs	r2, #4
 80107d4:	4639      	mov	r1, r7
 80107d6:	4630      	mov	r0, r6
 80107d8:	f005 fbd2 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 80107dc:	88b9      	ldrh	r1, [r7, #4]
 80107de:	4604      	mov	r4, r0
 80107e0:	4630      	mov	r0, r6
 80107e2:	f7fb fcf1 	bl	800c1c8 <ucdr_serialize_uint16_t>
 80107e6:	4020      	ands	r0, r4
 80107e8:	b2c0      	uxtb	r0, r0
 80107ea:	e7da      	b.n	80107a2 <uxr_serialize_ActivityInfoVariant+0x96>
 80107ec:	2202      	movs	r2, #2
 80107ee:	4639      	mov	r1, r7
 80107f0:	4630      	mov	r0, r6
 80107f2:	f005 fbc5 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 80107f6:	78b9      	ldrb	r1, [r7, #2]
 80107f8:	4604      	mov	r4, r0
 80107fa:	4630      	mov	r0, r6
 80107fc:	f7fb fcb8 	bl	800c170 <ucdr_serialize_uint8_t>
 8010800:	4020      	ands	r0, r4
 8010802:	b2c0      	uxtb	r0, r0
 8010804:	e7cd      	b.n	80107a2 <uxr_serialize_ActivityInfoVariant+0x96>
 8010806:	68eb      	ldr	r3, [r5, #12]
 8010808:	f108 0801 	add.w	r8, r8, #1
 801080c:	4598      	cmp	r8, r3
 801080e:	d308      	bcc.n	8010822 <uxr_serialize_ActivityInfoVariant+0x116>
 8010810:	ea09 0000 	and.w	r0, r9, r0
 8010814:	b2c0      	uxtb	r0, r0
 8010816:	e788      	b.n	801072a <uxr_serialize_ActivityInfoVariant+0x1e>
 8010818:	ea09 0900 	and.w	r9, r9, r0
 801081c:	fa5f f089 	uxtb.w	r0, r9
 8010820:	e783      	b.n	801072a <uxr_serialize_ActivityInfoVariant+0x1e>
 8010822:	3718      	adds	r7, #24
 8010824:	e7ab      	b.n	801077e <uxr_serialize_ActivityInfoVariant+0x72>
 8010826:	bf00      	nop

08010828 <uxr_deserialize_BaseObjectReply>:
 8010828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082c:	2202      	movs	r2, #2
 801082e:	4606      	mov	r6, r0
 8010830:	460f      	mov	r7, r1
 8010832:	f005 fc09 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010836:	2202      	movs	r2, #2
 8010838:	18b9      	adds	r1, r7, r2
 801083a:	4605      	mov	r5, r0
 801083c:	4630      	mov	r0, r6
 801083e:	f005 fc03 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010842:	1d39      	adds	r1, r7, #4
 8010844:	4680      	mov	r8, r0
 8010846:	4630      	mov	r0, r6
 8010848:	f7fb fca8 	bl	800c19c <ucdr_deserialize_uint8_t>
 801084c:	1d79      	adds	r1, r7, #5
 801084e:	4604      	mov	r4, r0
 8010850:	4630      	mov	r0, r6
 8010852:	f7fb fca3 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010856:	ea05 0508 	and.w	r5, r5, r8
 801085a:	402c      	ands	r4, r5
 801085c:	4020      	ands	r0, r4
 801085e:	b2c0      	uxtb	r0, r0
 8010860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010864 <uxr_serialize_ReadSpecification>:
 8010864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010868:	460d      	mov	r5, r1
 801086a:	7809      	ldrb	r1, [r1, #0]
 801086c:	4606      	mov	r6, r0
 801086e:	f7fb fc7f 	bl	800c170 <ucdr_serialize_uint8_t>
 8010872:	7869      	ldrb	r1, [r5, #1]
 8010874:	4604      	mov	r4, r0
 8010876:	4630      	mov	r0, r6
 8010878:	f7fb fc7a 	bl	800c170 <ucdr_serialize_uint8_t>
 801087c:	78a9      	ldrb	r1, [r5, #2]
 801087e:	4004      	ands	r4, r0
 8010880:	4630      	mov	r0, r6
 8010882:	f7fb fc47 	bl	800c114 <ucdr_serialize_bool>
 8010886:	78ab      	ldrb	r3, [r5, #2]
 8010888:	b2e4      	uxtb	r4, r4
 801088a:	4004      	ands	r4, r0
 801088c:	b94b      	cbnz	r3, 80108a2 <uxr_serialize_ReadSpecification+0x3e>
 801088e:	7a29      	ldrb	r1, [r5, #8]
 8010890:	4630      	mov	r0, r6
 8010892:	f7fb fc3f 	bl	800c114 <ucdr_serialize_bool>
 8010896:	7a2b      	ldrb	r3, [r5, #8]
 8010898:	4004      	ands	r4, r0
 801089a:	b943      	cbnz	r3, 80108ae <uxr_serialize_ReadSpecification+0x4a>
 801089c:	4620      	mov	r0, r4
 801089e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a2:	6869      	ldr	r1, [r5, #4]
 80108a4:	4630      	mov	r0, r6
 80108a6:	f005 fcdf 	bl	8016268 <ucdr_serialize_string>
 80108aa:	4004      	ands	r4, r0
 80108ac:	e7ef      	b.n	801088e <uxr_serialize_ReadSpecification+0x2a>
 80108ae:	8969      	ldrh	r1, [r5, #10]
 80108b0:	4630      	mov	r0, r6
 80108b2:	f7fb fc89 	bl	800c1c8 <ucdr_serialize_uint16_t>
 80108b6:	89a9      	ldrh	r1, [r5, #12]
 80108b8:	4607      	mov	r7, r0
 80108ba:	4630      	mov	r0, r6
 80108bc:	f7fb fc84 	bl	800c1c8 <ucdr_serialize_uint16_t>
 80108c0:	89e9      	ldrh	r1, [r5, #14]
 80108c2:	4007      	ands	r7, r0
 80108c4:	4630      	mov	r0, r6
 80108c6:	f7fb fc7f 	bl	800c1c8 <ucdr_serialize_uint16_t>
 80108ca:	8a29      	ldrh	r1, [r5, #16]
 80108cc:	4680      	mov	r8, r0
 80108ce:	4630      	mov	r0, r6
 80108d0:	f7fb fc7a 	bl	800c1c8 <ucdr_serialize_uint16_t>
 80108d4:	b2ff      	uxtb	r7, r7
 80108d6:	ea04 0507 	and.w	r5, r4, r7
 80108da:	ea05 0508 	and.w	r5, r5, r8
 80108de:	ea00 0405 	and.w	r4, r0, r5
 80108e2:	4620      	mov	r0, r4
 80108e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108e8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80108e8:	f7ff ba3a 	b.w	800fd60 <uxr_serialize_CLIENT_Representation>

080108ec <uxr_serialize_CREATE_Payload>:
 80108ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ee:	2202      	movs	r2, #2
 80108f0:	4606      	mov	r6, r0
 80108f2:	460d      	mov	r5, r1
 80108f4:	f005 fb44 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 80108f8:	2202      	movs	r2, #2
 80108fa:	18a9      	adds	r1, r5, r2
 80108fc:	4604      	mov	r4, r0
 80108fe:	4630      	mov	r0, r6
 8010900:	f005 fb3e 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010904:	7929      	ldrb	r1, [r5, #4]
 8010906:	4607      	mov	r7, r0
 8010908:	4630      	mov	r0, r6
 801090a:	f7fb fc31 	bl	800c170 <ucdr_serialize_uint8_t>
 801090e:	b170      	cbz	r0, 801092e <uxr_serialize_CREATE_Payload+0x42>
 8010910:	792b      	ldrb	r3, [r5, #4]
 8010912:	403c      	ands	r4, r7
 8010914:	3b01      	subs	r3, #1
 8010916:	b2e4      	uxtb	r4, r4
 8010918:	2b0d      	cmp	r3, #13
 801091a:	d809      	bhi.n	8010930 <uxr_serialize_CREATE_Payload+0x44>
 801091c:	e8df f003 	tbb	[pc, r3]
 8010920:	23230a3e 	.word	0x23230a3e
 8010924:	0a0a0a0a 	.word	0x0a0a0a0a
 8010928:	12121208 	.word	0x12121208
 801092c:	5f58      	.short	0x5f58
 801092e:	2400      	movs	r4, #0
 8010930:	4620      	mov	r0, r4
 8010932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010934:	f105 0108 	add.w	r1, r5, #8
 8010938:	4630      	mov	r0, r6
 801093a:	f7ff fb19 	bl	800ff70 <uxr_serialize_DATAWRITER_Representation>
 801093e:	4004      	ands	r4, r0
 8010940:	4620      	mov	r0, r4
 8010942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010944:	7a29      	ldrb	r1, [r5, #8]
 8010946:	4630      	mov	r0, r6
 8010948:	f7fb fc12 	bl	800c170 <ucdr_serialize_uint8_t>
 801094c:	2800      	cmp	r0, #0
 801094e:	d0ee      	beq.n	801092e <uxr_serialize_CREATE_Payload+0x42>
 8010950:	7a2b      	ldrb	r3, [r5, #8]
 8010952:	2b01      	cmp	r3, #1
 8010954:	d001      	beq.n	801095a <uxr_serialize_CREATE_Payload+0x6e>
 8010956:	2b02      	cmp	r3, #2
 8010958:	d1ea      	bne.n	8010930 <uxr_serialize_CREATE_Payload+0x44>
 801095a:	68e9      	ldr	r1, [r5, #12]
 801095c:	4630      	mov	r0, r6
 801095e:	f005 fc83 	bl	8016268 <ucdr_serialize_string>
 8010962:	4004      	ands	r4, r0
 8010964:	e7e4      	b.n	8010930 <uxr_serialize_CREATE_Payload+0x44>
 8010966:	7a29      	ldrb	r1, [r5, #8]
 8010968:	4630      	mov	r0, r6
 801096a:	f7fb fc01 	bl	800c170 <ucdr_serialize_uint8_t>
 801096e:	4607      	mov	r7, r0
 8010970:	b158      	cbz	r0, 801098a <uxr_serialize_CREATE_Payload+0x9e>
 8010972:	7a2b      	ldrb	r3, [r5, #8]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d039      	beq.n	80109ec <uxr_serialize_CREATE_Payload+0x100>
 8010978:	2b03      	cmp	r3, #3
 801097a:	d106      	bne.n	801098a <uxr_serialize_CREATE_Payload+0x9e>
 801097c:	68ea      	ldr	r2, [r5, #12]
 801097e:	f105 0110 	add.w	r1, r5, #16
 8010982:	4630      	mov	r0, r6
 8010984:	f7fc fd58 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 8010988:	4607      	mov	r7, r0
 801098a:	2202      	movs	r2, #2
 801098c:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8010990:	4630      	mov	r0, r6
 8010992:	f005 faf5 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010996:	4038      	ands	r0, r7
 8010998:	4004      	ands	r4, r0
 801099a:	e7c9      	b.n	8010930 <uxr_serialize_CREATE_Payload+0x44>
 801099c:	7a29      	ldrb	r1, [r5, #8]
 801099e:	4630      	mov	r0, r6
 80109a0:	f7fb fbe6 	bl	800c170 <ucdr_serialize_uint8_t>
 80109a4:	4607      	mov	r7, r0
 80109a6:	b158      	cbz	r0, 80109c0 <uxr_serialize_CREATE_Payload+0xd4>
 80109a8:	7a2b      	ldrb	r3, [r5, #8]
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d003      	beq.n	80109b6 <uxr_serialize_CREATE_Payload+0xca>
 80109ae:	2b03      	cmp	r3, #3
 80109b0:	d022      	beq.n	80109f8 <uxr_serialize_CREATE_Payload+0x10c>
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d104      	bne.n	80109c0 <uxr_serialize_CREATE_Payload+0xd4>
 80109b6:	68e9      	ldr	r1, [r5, #12]
 80109b8:	4630      	mov	r0, r6
 80109ba:	f005 fc55 	bl	8016268 <ucdr_serialize_string>
 80109be:	4607      	mov	r7, r0
 80109c0:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7fc f8fb 	bl	800cbc0 <ucdr_serialize_int16_t>
 80109ca:	4038      	ands	r0, r7
 80109cc:	4004      	ands	r4, r0
 80109ce:	e7af      	b.n	8010930 <uxr_serialize_CREATE_Payload+0x44>
 80109d0:	f105 0108 	add.w	r1, r5, #8
 80109d4:	4630      	mov	r0, r6
 80109d6:	f7ff fa81 	bl	800fedc <uxr_serialize_AGENT_Representation>
 80109da:	4004      	ands	r4, r0
 80109dc:	e7a8      	b.n	8010930 <uxr_serialize_CREATE_Payload+0x44>
 80109de:	f105 0108 	add.w	r1, r5, #8
 80109e2:	4630      	mov	r0, r6
 80109e4:	f7ff f9bc 	bl	800fd60 <uxr_serialize_CLIENT_Representation>
 80109e8:	4004      	ands	r4, r0
 80109ea:	e7a1      	b.n	8010930 <uxr_serialize_CREATE_Payload+0x44>
 80109ec:	68e9      	ldr	r1, [r5, #12]
 80109ee:	4630      	mov	r0, r6
 80109f0:	f005 fc3a 	bl	8016268 <ucdr_serialize_string>
 80109f4:	4607      	mov	r7, r0
 80109f6:	e7c8      	b.n	801098a <uxr_serialize_CREATE_Payload+0x9e>
 80109f8:	68ea      	ldr	r2, [r5, #12]
 80109fa:	f105 0110 	add.w	r1, r5, #16
 80109fe:	4630      	mov	r0, r6
 8010a00:	f7fc fd1a 	bl	800d438 <ucdr_serialize_sequence_uint8_t>
 8010a04:	4607      	mov	r7, r0
 8010a06:	e7db      	b.n	80109c0 <uxr_serialize_CREATE_Payload+0xd4>

08010a08 <uxr_serialize_GET_INFO_Payload>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	2202      	movs	r2, #2
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	460e      	mov	r6, r1
 8010a10:	f005 fab6 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010a14:	2202      	movs	r2, #2
 8010a16:	18b1      	adds	r1, r6, r2
 8010a18:	4604      	mov	r4, r0
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f005 fab0 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010a20:	6871      	ldr	r1, [r6, #4]
 8010a22:	4004      	ands	r4, r0
 8010a24:	4628      	mov	r0, r5
 8010a26:	f7fb fdbf 	bl	800c5a8 <ucdr_serialize_uint32_t>
 8010a2a:	b2e4      	uxtb	r4, r4
 8010a2c:	4020      	ands	r0, r4
 8010a2e:	bd70      	pop	{r4, r5, r6, pc}

08010a30 <uxr_deserialize_GET_INFO_Payload>:
 8010a30:	b570      	push	{r4, r5, r6, lr}
 8010a32:	2202      	movs	r2, #2
 8010a34:	4605      	mov	r5, r0
 8010a36:	460e      	mov	r6, r1
 8010a38:	f005 fb06 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010a3c:	2202      	movs	r2, #2
 8010a3e:	18b1      	adds	r1, r6, r2
 8010a40:	4604      	mov	r4, r0
 8010a42:	4628      	mov	r0, r5
 8010a44:	f005 fb00 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010a48:	1d31      	adds	r1, r6, #4
 8010a4a:	4004      	ands	r4, r0
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f7fb fed5 	bl	800c7fc <ucdr_deserialize_uint32_t>
 8010a52:	b2e4      	uxtb	r4, r4
 8010a54:	4020      	ands	r0, r4
 8010a56:	bd70      	pop	{r4, r5, r6, pc}

08010a58 <uxr_serialize_DELETE_Payload>:
 8010a58:	b570      	push	{r4, r5, r6, lr}
 8010a5a:	2202      	movs	r2, #2
 8010a5c:	4605      	mov	r5, r0
 8010a5e:	460e      	mov	r6, r1
 8010a60:	f005 fa8e 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010a64:	2202      	movs	r2, #2
 8010a66:	4604      	mov	r4, r0
 8010a68:	18b1      	adds	r1, r6, r2
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	f005 fa88 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010a70:	4020      	ands	r0, r4
 8010a72:	b2c0      	uxtb	r0, r0
 8010a74:	bd70      	pop	{r4, r5, r6, pc}
 8010a76:	bf00      	nop

08010a78 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	460e      	mov	r6, r1
 8010a80:	f7fb fb8c 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010a84:	1c71      	adds	r1, r6, #1
 8010a86:	4604      	mov	r4, r0
 8010a88:	4628      	mov	r0, r5
 8010a8a:	f7fb fb87 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010a8e:	2204      	movs	r2, #4
 8010a90:	18b1      	adds	r1, r6, r2
 8010a92:	4681      	mov	r9, r0
 8010a94:	4628      	mov	r0, r5
 8010a96:	f005 fad7 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010a9a:	f106 0108 	add.w	r1, r6, #8
 8010a9e:	4680      	mov	r8, r0
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	f005 fad0 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010aa8:	2202      	movs	r2, #2
 8010aaa:	f106 010a 	add.w	r1, r6, #10
 8010aae:	4607      	mov	r7, r0
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	f005 fac9 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010ab6:	ea04 0409 	and.w	r4, r4, r9
 8010aba:	4603      	mov	r3, r0
 8010abc:	f106 010c 	add.w	r1, r6, #12
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	b2e4      	uxtb	r4, r4
 8010ac4:	461d      	mov	r5, r3
 8010ac6:	ea04 0408 	and.w	r4, r4, r8
 8010aca:	f7fb fb39 	bl	800c140 <ucdr_deserialize_bool>
 8010ace:	4027      	ands	r7, r4
 8010ad0:	403d      	ands	r5, r7
 8010ad2:	4028      	ands	r0, r5
 8010ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010ad8 <uxr_deserialize_STATUS_Payload>:
 8010ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010adc:	2202      	movs	r2, #2
 8010ade:	4606      	mov	r6, r0
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	f005 fab1 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	18b9      	adds	r1, r7, r2
 8010aea:	4605      	mov	r5, r0
 8010aec:	4630      	mov	r0, r6
 8010aee:	f005 faab 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010af2:	1d39      	adds	r1, r7, #4
 8010af4:	4680      	mov	r8, r0
 8010af6:	4630      	mov	r0, r6
 8010af8:	f7fb fb50 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010afc:	1d79      	adds	r1, r7, #5
 8010afe:	4604      	mov	r4, r0
 8010b00:	4630      	mov	r0, r6
 8010b02:	f7fb fb4b 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010b06:	ea05 0508 	and.w	r5, r5, r8
 8010b0a:	402c      	ands	r4, r5
 8010b0c:	4020      	ands	r0, r4
 8010b0e:	b2c0      	uxtb	r0, r0
 8010b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b14 <uxr_serialize_INFO_Payload>:
 8010b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b18:	2202      	movs	r2, #2
 8010b1a:	460c      	mov	r4, r1
 8010b1c:	4605      	mov	r5, r0
 8010b1e:	f005 fa2f 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010b22:	2202      	movs	r2, #2
 8010b24:	18a1      	adds	r1, r4, r2
 8010b26:	4680      	mov	r8, r0
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f005 fa29 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010b2e:	7921      	ldrb	r1, [r4, #4]
 8010b30:	4607      	mov	r7, r0
 8010b32:	4628      	mov	r0, r5
 8010b34:	f7fb fb1c 	bl	800c170 <ucdr_serialize_uint8_t>
 8010b38:	7961      	ldrb	r1, [r4, #5]
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	f7fb fb17 	bl	800c170 <ucdr_serialize_uint8_t>
 8010b42:	ea08 0807 	and.w	r8, r8, r7
 8010b46:	ea06 0608 	and.w	r6, r6, r8
 8010b4a:	ea00 0706 	and.w	r7, r0, r6
 8010b4e:	7a21      	ldrb	r1, [r4, #8]
 8010b50:	4628      	mov	r0, r5
 8010b52:	f7fb fadf 	bl	800c114 <ucdr_serialize_bool>
 8010b56:	7a23      	ldrb	r3, [r4, #8]
 8010b58:	b2ff      	uxtb	r7, r7
 8010b5a:	4606      	mov	r6, r0
 8010b5c:	b96b      	cbnz	r3, 8010b7a <uxr_serialize_INFO_Payload+0x66>
 8010b5e:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010b62:	4628      	mov	r0, r5
 8010b64:	f7fb fad6 	bl	800c114 <ucdr_serialize_bool>
 8010b68:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010b6c:	4030      	ands	r0, r6
 8010b6e:	b2c6      	uxtb	r6, r0
 8010b70:	b983      	cbnz	r3, 8010b94 <uxr_serialize_INFO_Payload+0x80>
 8010b72:	ea06 0007 	and.w	r0, r6, r7
 8010b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b7a:	7b21      	ldrb	r1, [r4, #12]
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f7fb faf7 	bl	800c170 <ucdr_serialize_uint8_t>
 8010b82:	b188      	cbz	r0, 8010ba8 <uxr_serialize_INFO_Payload+0x94>
 8010b84:	f104 010c 	add.w	r1, r4, #12
 8010b88:	4628      	mov	r0, r5
 8010b8a:	f7ff fa19 	bl	800ffc0 <uxr_serialize_ObjectVariant.part.0>
 8010b8e:	4030      	ands	r0, r6
 8010b90:	b2c6      	uxtb	r6, r0
 8010b92:	e7e4      	b.n	8010b5e <uxr_serialize_INFO_Payload+0x4a>
 8010b94:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f7ff fdb7 	bl	801070c <uxr_serialize_ActivityInfoVariant>
 8010b9e:	4006      	ands	r6, r0
 8010ba0:	ea06 0007 	and.w	r0, r6, r7
 8010ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ba8:	4606      	mov	r6, r0
 8010baa:	e7d8      	b.n	8010b5e <uxr_serialize_INFO_Payload+0x4a>

08010bac <uxr_serialize_READ_DATA_Payload>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	2202      	movs	r2, #2
 8010bb0:	4605      	mov	r5, r0
 8010bb2:	460e      	mov	r6, r1
 8010bb4:	f005 f9e4 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010bb8:	2202      	movs	r2, #2
 8010bba:	18b1      	adds	r1, r6, r2
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	f005 f9de 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010bc4:	1d31      	adds	r1, r6, #4
 8010bc6:	4004      	ands	r4, r0
 8010bc8:	4628      	mov	r0, r5
 8010bca:	f7ff fe4b 	bl	8010864 <uxr_serialize_ReadSpecification>
 8010bce:	b2e4      	uxtb	r4, r4
 8010bd0:	4020      	ands	r0, r4
 8010bd2:	bd70      	pop	{r4, r5, r6, pc}

08010bd4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010bd4:	b570      	push	{r4, r5, r6, lr}
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	4605      	mov	r5, r0
 8010bda:	460e      	mov	r6, r1
 8010bdc:	f005 f9d0 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010be0:	2202      	movs	r2, #2
 8010be2:	4604      	mov	r4, r0
 8010be4:	18b1      	adds	r1, r6, r2
 8010be6:	4628      	mov	r0, r5
 8010be8:	f005 f9ca 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010bec:	4020      	ands	r0, r4
 8010bee:	b2c0      	uxtb	r0, r0
 8010bf0:	bd70      	pop	{r4, r5, r6, pc}
 8010bf2:	bf00      	nop

08010bf4 <uxr_serialize_ACKNACK_Payload>:
 8010bf4:	b570      	push	{r4, r5, r6, lr}
 8010bf6:	460c      	mov	r4, r1
 8010bf8:	460e      	mov	r6, r1
 8010bfa:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010bfe:	4605      	mov	r5, r0
 8010c00:	f7fb fae2 	bl	800c1c8 <ucdr_serialize_uint16_t>
 8010c04:	2202      	movs	r2, #2
 8010c06:	4621      	mov	r1, r4
 8010c08:	4604      	mov	r4, r0
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	f005 f9b8 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010c10:	7931      	ldrb	r1, [r6, #4]
 8010c12:	4004      	ands	r4, r0
 8010c14:	4628      	mov	r0, r5
 8010c16:	f7fb faab 	bl	800c170 <ucdr_serialize_uint8_t>
 8010c1a:	b2e4      	uxtb	r4, r4
 8010c1c:	4020      	ands	r0, r4
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}

08010c20 <uxr_deserialize_ACKNACK_Payload>:
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	4605      	mov	r5, r0
 8010c24:	460e      	mov	r6, r1
 8010c26:	f7fb fbd3 	bl	800c3d0 <ucdr_deserialize_uint16_t>
 8010c2a:	2202      	movs	r2, #2
 8010c2c:	18b1      	adds	r1, r6, r2
 8010c2e:	4604      	mov	r4, r0
 8010c30:	4628      	mov	r0, r5
 8010c32:	f005 fa09 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010c36:	1d31      	adds	r1, r6, #4
 8010c38:	4004      	ands	r4, r0
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f7fb faae 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010c40:	b2e4      	uxtb	r4, r4
 8010c42:	4020      	ands	r0, r4
 8010c44:	bd70      	pop	{r4, r5, r6, pc}
 8010c46:	bf00      	nop

08010c48 <uxr_serialize_HEARTBEAT_Payload>:
 8010c48:	b570      	push	{r4, r5, r6, lr}
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	8809      	ldrh	r1, [r1, #0]
 8010c4e:	4606      	mov	r6, r0
 8010c50:	f7fb faba 	bl	800c1c8 <ucdr_serialize_uint16_t>
 8010c54:	8869      	ldrh	r1, [r5, #2]
 8010c56:	4604      	mov	r4, r0
 8010c58:	4630      	mov	r0, r6
 8010c5a:	f7fb fab5 	bl	800c1c8 <ucdr_serialize_uint16_t>
 8010c5e:	7929      	ldrb	r1, [r5, #4]
 8010c60:	4004      	ands	r4, r0
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7fb fa84 	bl	800c170 <ucdr_serialize_uint8_t>
 8010c68:	b2e4      	uxtb	r4, r4
 8010c6a:	4020      	ands	r0, r4
 8010c6c:	bd70      	pop	{r4, r5, r6, pc}
 8010c6e:	bf00      	nop

08010c70 <uxr_deserialize_HEARTBEAT_Payload>:
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	4605      	mov	r5, r0
 8010c74:	460e      	mov	r6, r1
 8010c76:	f7fb fbab 	bl	800c3d0 <ucdr_deserialize_uint16_t>
 8010c7a:	1cb1      	adds	r1, r6, #2
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f7fb fba6 	bl	800c3d0 <ucdr_deserialize_uint16_t>
 8010c84:	1d31      	adds	r1, r6, #4
 8010c86:	4004      	ands	r4, r0
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f7fb fa87 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010c8e:	b2e4      	uxtb	r4, r4
 8010c90:	4020      	ands	r0, r4
 8010c92:	bd70      	pop	{r4, r5, r6, pc}

08010c94 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c98:	4605      	mov	r5, r0
 8010c9a:	460e      	mov	r6, r1
 8010c9c:	f7fc f9c0 	bl	800d020 <ucdr_deserialize_int32_t>
 8010ca0:	1d31      	adds	r1, r6, #4
 8010ca2:	4607      	mov	r7, r0
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f7fb fda9 	bl	800c7fc <ucdr_deserialize_uint32_t>
 8010caa:	f106 0108 	add.w	r1, r6, #8
 8010cae:	4680      	mov	r8, r0
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	f7fc f9b5 	bl	800d020 <ucdr_deserialize_int32_t>
 8010cb6:	f106 010c 	add.w	r1, r6, #12
 8010cba:	4604      	mov	r4, r0
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	f7fb fd9d 	bl	800c7fc <ucdr_deserialize_uint32_t>
 8010cc2:	ea07 0708 	and.w	r7, r7, r8
 8010cc6:	403c      	ands	r4, r7
 8010cc8:	f106 0110 	add.w	r1, r6, #16
 8010ccc:	4004      	ands	r4, r0
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f7fc f9a6 	bl	800d020 <ucdr_deserialize_int32_t>
 8010cd4:	f106 0114 	add.w	r1, r6, #20
 8010cd8:	4607      	mov	r7, r0
 8010cda:	4628      	mov	r0, r5
 8010cdc:	f7fb fd8e 	bl	800c7fc <ucdr_deserialize_uint32_t>
 8010ce0:	b2e4      	uxtb	r4, r4
 8010ce2:	403c      	ands	r4, r7
 8010ce4:	4020      	ands	r0, r4
 8010ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cea:	bf00      	nop

08010cec <uxr_serialize_SampleIdentity>:
 8010cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cf0:	220c      	movs	r2, #12
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	460d      	mov	r5, r1
 8010cf6:	f005 f943 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010cfa:	2203      	movs	r2, #3
 8010cfc:	f105 010c 	add.w	r1, r5, #12
 8010d00:	4680      	mov	r8, r0
 8010d02:	4620      	mov	r0, r4
 8010d04:	f005 f93c 	bl	8015f80 <ucdr_serialize_array_uint8_t>
 8010d08:	7be9      	ldrb	r1, [r5, #15]
 8010d0a:	4681      	mov	r9, r0
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f7fb fa2f 	bl	800c170 <ucdr_serialize_uint8_t>
 8010d12:	6929      	ldr	r1, [r5, #16]
 8010d14:	4607      	mov	r7, r0
 8010d16:	4620      	mov	r0, r4
 8010d18:	f7fc f858 	bl	800cdcc <ucdr_serialize_int32_t>
 8010d1c:	6969      	ldr	r1, [r5, #20]
 8010d1e:	4606      	mov	r6, r0
 8010d20:	4620      	mov	r0, r4
 8010d22:	f7fb fc41 	bl	800c5a8 <ucdr_serialize_uint32_t>
 8010d26:	ea08 0809 	and.w	r8, r8, r9
 8010d2a:	ea07 0708 	and.w	r7, r7, r8
 8010d2e:	403e      	ands	r6, r7
 8010d30:	4030      	ands	r0, r6
 8010d32:	b2c0      	uxtb	r0, r0
 8010d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010d38 <uxr_deserialize_SampleIdentity>:
 8010d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d3c:	220c      	movs	r2, #12
 8010d3e:	4604      	mov	r4, r0
 8010d40:	460d      	mov	r5, r1
 8010d42:	f005 f981 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010d46:	2203      	movs	r2, #3
 8010d48:	f105 010c 	add.w	r1, r5, #12
 8010d4c:	4680      	mov	r8, r0
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f005 f97a 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8010d54:	f105 010f 	add.w	r1, r5, #15
 8010d58:	4681      	mov	r9, r0
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f7fb fa1e 	bl	800c19c <ucdr_deserialize_uint8_t>
 8010d60:	f105 0110 	add.w	r1, r5, #16
 8010d64:	4607      	mov	r7, r0
 8010d66:	4620      	mov	r0, r4
 8010d68:	f7fc f95a 	bl	800d020 <ucdr_deserialize_int32_t>
 8010d6c:	f105 0114 	add.w	r1, r5, #20
 8010d70:	4606      	mov	r6, r0
 8010d72:	4620      	mov	r0, r4
 8010d74:	f7fb fd42 	bl	800c7fc <ucdr_deserialize_uint32_t>
 8010d78:	ea08 0809 	and.w	r8, r8, r9
 8010d7c:	ea07 0708 	and.w	r7, r7, r8
 8010d80:	403e      	ands	r6, r7
 8010d82:	4030      	ands	r0, r6
 8010d84:	b2c0      	uxtb	r0, r0
 8010d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d8a:	bf00      	nop

08010d8c <rcl_client_get_rmw_handle>:
 8010d8c:	b118      	cbz	r0, 8010d96 <rcl_client_get_rmw_handle+0xa>
 8010d8e:	6800      	ldr	r0, [r0, #0]
 8010d90:	b108      	cbz	r0, 8010d96 <rcl_client_get_rmw_handle+0xa>
 8010d92:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010d96:	4770      	bx	lr

08010d98 <rcl_send_request>:
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	d048      	beq.n	8010e2e <rcl_send_request+0x96>
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	4604      	mov	r4, r0
 8010da0:	6800      	ldr	r0, [r0, #0]
 8010da2:	b08a      	sub	sp, #40	@ 0x28
 8010da4:	b1c0      	cbz	r0, 8010dd8 <rcl_send_request+0x40>
 8010da6:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8010daa:	b1ab      	cbz	r3, 8010dd8 <rcl_send_request+0x40>
 8010dac:	460e      	mov	r6, r1
 8010dae:	b1b9      	cbz	r1, 8010de0 <rcl_send_request+0x48>
 8010db0:	4615      	mov	r5, r2
 8010db2:	b1aa      	cbz	r2, 8010de0 <rcl_send_request+0x48>
 8010db4:	2105      	movs	r1, #5
 8010db6:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010dba:	f002 ff89 	bl	8013cd0 <__atomic_load_8>
 8010dbe:	6823      	ldr	r3, [r4, #0]
 8010dc0:	e9c5 0100 	strd	r0, r1, [r5]
 8010dc4:	462a      	mov	r2, r5
 8010dc6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010dca:	4631      	mov	r1, r6
 8010dcc:	f004 f942 	bl	8015054 <rmw_send_request>
 8010dd0:	b148      	cbz	r0, 8010de6 <rcl_send_request+0x4e>
 8010dd2:	2001      	movs	r0, #1
 8010dd4:	b00a      	add	sp, #40	@ 0x28
 8010dd6:	bd70      	pop	{r4, r5, r6, pc}
 8010dd8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010ddc:	b00a      	add	sp, #40	@ 0x28
 8010dde:	bd70      	pop	{r4, r5, r6, pc}
 8010de0:	200b      	movs	r0, #11
 8010de2:	b00a      	add	sp, #40	@ 0x28
 8010de4:	bd70      	pop	{r4, r5, r6, pc}
 8010de6:	6820      	ldr	r0, [r4, #0]
 8010de8:	2305      	movs	r3, #5
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010df0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010df4:	f002 ffd8 	bl	8013da8 <__atomic_exchange_8>
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010dfe:	b1a2      	cbz	r2, 8010e2a <rcl_send_request+0x92>
 8010e00:	a905      	add	r1, sp, #20
 8010e02:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010e06:	f003 fd21 	bl	801484c <rmw_get_gid_for_client>
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	b990      	cbnz	r0, 8010e34 <rcl_send_request+0x9c>
 8010e0e:	6822      	ldr	r2, [r4, #0]
 8010e10:	ab06      	add	r3, sp, #24
 8010e12:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8010e16:	9302      	str	r3, [sp, #8]
 8010e18:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010e1c:	4632      	mov	r2, r6
 8010e1e:	e9cd 4500 	strd	r4, r5, [sp]
 8010e22:	f000 fe15 	bl	8011a50 <rcl_send_service_event_message>
 8010e26:	2800      	cmp	r0, #0
 8010e28:	d1d4      	bne.n	8010dd4 <rcl_send_request+0x3c>
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	e7d2      	b.n	8010dd4 <rcl_send_request+0x3c>
 8010e2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010e32:	4770      	bx	lr
 8010e34:	f000 f87a 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8010e38:	e7cc      	b.n	8010dd4 <rcl_send_request+0x3c>
 8010e3a:	bf00      	nop
 8010e3c:	0000      	movs	r0, r0
	...

08010e40 <rcl_take_response>:
 8010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e42:	468e      	mov	lr, r1
 8010e44:	460c      	mov	r4, r1
 8010e46:	4617      	mov	r7, r2
 8010e48:	4605      	mov	r5, r0
 8010e4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e4e:	b095      	sub	sp, #84	@ 0x54
 8010e50:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8010e54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010e5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010e60:	2d00      	cmp	r5, #0
 8010e62:	d044      	beq.n	8010eee <rcl_take_response+0xae>
 8010e64:	682b      	ldr	r3, [r5, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d041      	beq.n	8010eee <rcl_take_response+0xae>
 8010e6a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d03d      	beq.n	8010eee <rcl_take_response+0xae>
 8010e72:	2f00      	cmp	r7, #0
 8010e74:	d03e      	beq.n	8010ef4 <rcl_take_response+0xb4>
 8010e76:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8010f10 <rcl_take_response+0xd0>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	f88d 3013 	strb.w	r3, [sp, #19]
 8010e80:	463a      	mov	r2, r7
 8010e82:	f10d 0313 	add.w	r3, sp, #19
 8010e86:	a90a      	add	r1, sp, #40	@ 0x28
 8010e88:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010e8c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010e90:	f004 f9e0 	bl	8015254 <rmw_take_response>
 8010e94:	4606      	mov	r6, r0
 8010e96:	bb78      	cbnz	r0, 8010ef8 <rcl_take_response+0xb8>
 8010e98:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8010e9c:	b373      	cbz	r3, 8010efc <rcl_take_response+0xbc>
 8010e9e:	682b      	ldr	r3, [r5, #0]
 8010ea0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010ea4:	b1aa      	cbz	r2, 8010ed2 <rcl_take_response+0x92>
 8010ea6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010eaa:	a905      	add	r1, sp, #20
 8010eac:	f003 fcce 	bl	801484c <rmw_get_gid_for_client>
 8010eb0:	bb38      	cbnz	r0, 8010f02 <rcl_take_response+0xc2>
 8010eb2:	682b      	ldr	r3, [r5, #0]
 8010eb4:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8010eb8:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8010ebc:	ab06      	add	r3, sp, #24
 8010ebe:	ed8d 7b00 	vstr	d7, [sp]
 8010ec2:	463a      	mov	r2, r7
 8010ec4:	9302      	str	r3, [sp, #8]
 8010ec6:	2103      	movs	r1, #3
 8010ec8:	f000 fdc2 	bl	8011a50 <rcl_send_service_event_message>
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	bf18      	it	ne
 8010ed0:	4606      	movne	r6, r0
 8010ed2:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8010ed6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010eda:	46a4      	mov	ip, r4
 8010edc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ee0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010ee4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010ee8:	4630      	mov	r0, r6
 8010eea:	b015      	add	sp, #84	@ 0x54
 8010eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eee:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010ef2:	e7ee      	b.n	8010ed2 <rcl_take_response+0x92>
 8010ef4:	260b      	movs	r6, #11
 8010ef6:	e7ec      	b.n	8010ed2 <rcl_take_response+0x92>
 8010ef8:	2601      	movs	r6, #1
 8010efa:	e7ea      	b.n	8010ed2 <rcl_take_response+0x92>
 8010efc:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8010f00:	e7e7      	b.n	8010ed2 <rcl_take_response+0x92>
 8010f02:	f000 f813 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8010f06:	4606      	mov	r6, r0
 8010f08:	e7e3      	b.n	8010ed2 <rcl_take_response+0x92>
 8010f0a:	bf00      	nop
 8010f0c:	f3af 8000 	nop.w
	...

08010f18 <rcl_client_is_valid>:
 8010f18:	b130      	cbz	r0, 8010f28 <rcl_client_is_valid+0x10>
 8010f1a:	6800      	ldr	r0, [r0, #0]
 8010f1c:	b120      	cbz	r0, 8010f28 <rcl_client_is_valid+0x10>
 8010f1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010f22:	3800      	subs	r0, #0
 8010f24:	bf18      	it	ne
 8010f26:	2001      	movne	r0, #1
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop

08010f2c <rcl_convert_rmw_ret_to_rcl_ret>:
 8010f2c:	280b      	cmp	r0, #11
 8010f2e:	dc0d      	bgt.n	8010f4c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	db09      	blt.n	8010f48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010f34:	280b      	cmp	r0, #11
 8010f36:	d807      	bhi.n	8010f48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010f38:	e8df f000 	tbb	[pc, r0]
 8010f3c:	07060607 	.word	0x07060607
 8010f40:	06060606 	.word	0x06060606
 8010f44:	07070606 	.word	0x07070606
 8010f48:	2001      	movs	r0, #1
 8010f4a:	4770      	bx	lr
 8010f4c:	28cb      	cmp	r0, #203	@ 0xcb
 8010f4e:	bf14      	ite	ne
 8010f50:	2001      	movne	r0, #1
 8010f52:	20cb      	moveq	r0, #203	@ 0xcb
 8010f54:	4770      	bx	lr
 8010f56:	bf00      	nop

08010f58 <rcl_get_zero_initialized_context>:
 8010f58:	2200      	movs	r2, #0
 8010f5a:	e9c0 2200 	strd	r2, r2, [r0]
 8010f5e:	4770      	bx	lr

08010f60 <rcl_context_is_valid>:
 8010f60:	b118      	cbz	r0, 8010f6a <rcl_context_is_valid+0xa>
 8010f62:	6840      	ldr	r0, [r0, #4]
 8010f64:	3800      	subs	r0, #0
 8010f66:	bf18      	it	ne
 8010f68:	2001      	movne	r0, #1
 8010f6a:	4770      	bx	lr

08010f6c <__cleanup_context>:
 8010f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f70:	4606      	mov	r6, r0
 8010f72:	6800      	ldr	r0, [r0, #0]
 8010f74:	2300      	movs	r3, #0
 8010f76:	6073      	str	r3, [r6, #4]
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d042      	beq.n	8011002 <__cleanup_context+0x96>
 8010f7c:	6943      	ldr	r3, [r0, #20]
 8010f7e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010f82:	6907      	ldr	r7, [r0, #16]
 8010f84:	b39b      	cbz	r3, 8010fee <__cleanup_context+0x82>
 8010f86:	3014      	adds	r0, #20
 8010f88:	f000 f9b2 	bl	80112f0 <rcl_init_options_fini>
 8010f8c:	4680      	mov	r8, r0
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d144      	bne.n	801101c <__cleanup_context+0xb0>
 8010f92:	6830      	ldr	r0, [r6, #0]
 8010f94:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010f96:	b123      	cbz	r3, 8010fa2 <__cleanup_context+0x36>
 8010f98:	3028      	adds	r0, #40	@ 0x28
 8010f9a:	f003 fe9f 	bl	8014cdc <rmw_context_fini>
 8010f9e:	bbb8      	cbnz	r0, 8011010 <__cleanup_context+0xa4>
 8010fa0:	6830      	ldr	r0, [r6, #0]
 8010fa2:	6a03      	ldr	r3, [r0, #32]
 8010fa4:	b1db      	cbz	r3, 8010fde <__cleanup_context+0x72>
 8010fa6:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010faa:	2a01      	cmp	r2, #1
 8010fac:	f17c 0100 	sbcs.w	r1, ip, #0
 8010fb0:	db11      	blt.n	8010fd6 <__cleanup_context+0x6a>
 8010fb2:	2400      	movs	r4, #0
 8010fb4:	4625      	mov	r5, r4
 8010fb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010fba:	4639      	mov	r1, r7
 8010fbc:	b1c8      	cbz	r0, 8010ff2 <__cleanup_context+0x86>
 8010fbe:	47c8      	blx	r9
 8010fc0:	6833      	ldr	r3, [r6, #0]
 8010fc2:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010fc6:	3401      	adds	r4, #1
 8010fc8:	f145 0500 	adc.w	r5, r5, #0
 8010fcc:	4294      	cmp	r4, r2
 8010fce:	eb75 010c 	sbcs.w	r1, r5, ip
 8010fd2:	6a1b      	ldr	r3, [r3, #32]
 8010fd4:	dbef      	blt.n	8010fb6 <__cleanup_context+0x4a>
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	4639      	mov	r1, r7
 8010fda:	47c8      	blx	r9
 8010fdc:	6830      	ldr	r0, [r6, #0]
 8010fde:	4639      	mov	r1, r7
 8010fe0:	47c8      	blx	r9
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	e9c6 3300 	strd	r3, r3, [r6]
 8010fe8:	4640      	mov	r0, r8
 8010fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fee:	4698      	mov	r8, r3
 8010ff0:	e7d0      	b.n	8010f94 <__cleanup_context+0x28>
 8010ff2:	3401      	adds	r4, #1
 8010ff4:	f145 0500 	adc.w	r5, r5, #0
 8010ff8:	4294      	cmp	r4, r2
 8010ffa:	eb75 010c 	sbcs.w	r1, r5, ip
 8010ffe:	dbda      	blt.n	8010fb6 <__cleanup_context+0x4a>
 8011000:	e7e9      	b.n	8010fd6 <__cleanup_context+0x6a>
 8011002:	4680      	mov	r8, r0
 8011004:	2300      	movs	r3, #0
 8011006:	e9c6 3300 	strd	r3, r3, [r6]
 801100a:	4640      	mov	r0, r8
 801100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011010:	f1b8 0f00 	cmp.w	r8, #0
 8011014:	d005      	beq.n	8011022 <__cleanup_context+0xb6>
 8011016:	f7fa f853 	bl	800b0c0 <rcutils_reset_error>
 801101a:	e7c1      	b.n	8010fa0 <__cleanup_context+0x34>
 801101c:	f7fa f850 	bl	800b0c0 <rcutils_reset_error>
 8011020:	e7b7      	b.n	8010f92 <__cleanup_context+0x26>
 8011022:	f7ff ff83 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8011026:	4680      	mov	r8, r0
 8011028:	e7f5      	b.n	8011016 <__cleanup_context+0xaa>
 801102a:	bf00      	nop

0801102c <rcl_init>:
 801102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011030:	1e04      	subs	r4, r0, #0
 8011032:	b0a5      	sub	sp, #148	@ 0x94
 8011034:	460d      	mov	r5, r1
 8011036:	4617      	mov	r7, r2
 8011038:	461e      	mov	r6, r3
 801103a:	dd13      	ble.n	8011064 <rcl_init+0x38>
 801103c:	b161      	cbz	r1, 8011058 <rcl_init+0x2c>
 801103e:	f1a1 0e04 	sub.w	lr, r1, #4
 8011042:	f04f 0c00 	mov.w	ip, #0
 8011046:	e001      	b.n	801104c <rcl_init+0x20>
 8011048:	4564      	cmp	r4, ip
 801104a:	d00d      	beq.n	8011068 <rcl_init+0x3c>
 801104c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8011050:	f10c 0c01 	add.w	ip, ip, #1
 8011054:	2800      	cmp	r0, #0
 8011056:	d1f7      	bne.n	8011048 <rcl_init+0x1c>
 8011058:	f04f 080b 	mov.w	r8, #11
 801105c:	4640      	mov	r0, r8
 801105e:	b025      	add	sp, #148	@ 0x94
 8011060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011064:	2900      	cmp	r1, #0
 8011066:	d1f7      	bne.n	8011058 <rcl_init+0x2c>
 8011068:	2f00      	cmp	r7, #0
 801106a:	d0f5      	beq.n	8011058 <rcl_init+0x2c>
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d0f2      	beq.n	8011058 <rcl_init+0x2c>
 8011072:	469c      	mov	ip, r3
 8011074:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011078:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 801107c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011080:	f8dc 3000 	ldr.w	r3, [ip]
 8011084:	f8ce 3000 	str.w	r3, [lr]
 8011088:	a81f      	add	r0, sp, #124	@ 0x7c
 801108a:	f7f9 ffed 	bl	800b068 <rcutils_allocator_is_valid>
 801108e:	2800      	cmp	r0, #0
 8011090:	d0e2      	beq.n	8011058 <rcl_init+0x2c>
 8011092:	2e00      	cmp	r6, #0
 8011094:	d0e0      	beq.n	8011058 <rcl_init+0x2c>
 8011096:	6833      	ldr	r3, [r6, #0]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d173      	bne.n	8011184 <rcl_init+0x158>
 801109c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 80110a0:	2198      	movs	r1, #152	@ 0x98
 80110a2:	2001      	movs	r0, #1
 80110a4:	4798      	blx	r3
 80110a6:	4680      	mov	r8, r0
 80110a8:	6030      	str	r0, [r6, #0]
 80110aa:	2800      	cmp	r0, #0
 80110ac:	f000 80ac 	beq.w	8011208 <rcl_init+0x1dc>
 80110b0:	a802      	add	r0, sp, #8
 80110b2:	f003 f965 	bl	8014380 <rmw_get_zero_initialized_context>
 80110b6:	a902      	add	r1, sp, #8
 80110b8:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80110bc:	2270      	movs	r2, #112	@ 0x70
 80110be:	f007 fc48 	bl	8018952 <memcpy>
 80110c2:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80110c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110ca:	f8d6 8000 	ldr.w	r8, [r6]
 80110ce:	46c4      	mov	ip, r8
 80110d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110d4:	f8de 3000 	ldr.w	r3, [lr]
 80110d8:	f8cc 3000 	str.w	r3, [ip]
 80110dc:	f108 0114 	add.w	r1, r8, #20
 80110e0:	4638      	mov	r0, r7
 80110e2:	f000 f92f 	bl	8011344 <rcl_init_options_copy>
 80110e6:	4680      	mov	r8, r0
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d147      	bne.n	801117c <rcl_init+0x150>
 80110ec:	f8d6 9000 	ldr.w	r9, [r6]
 80110f0:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 80110f4:	f8c9 0020 	str.w	r0, [r9, #32]
 80110f8:	f8c9 4018 	str.w	r4, [r9, #24]
 80110fc:	f8c9 a01c 	str.w	sl, [r9, #28]
 8011100:	2c00      	cmp	r4, #0
 8011102:	d047      	beq.n	8011194 <rcl_init+0x168>
 8011104:	2d00      	cmp	r5, #0
 8011106:	d045      	beq.n	8011194 <rcl_init+0x168>
 8011108:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 801110c:	2104      	movs	r1, #4
 801110e:	4620      	mov	r0, r4
 8011110:	4798      	blx	r3
 8011112:	f8c9 0020 	str.w	r0, [r9, #32]
 8011116:	f8d6 9000 	ldr.w	r9, [r6]
 801111a:	f8d9 b020 	ldr.w	fp, [r9, #32]
 801111e:	f1bb 0f00 	cmp.w	fp, #0
 8011122:	d029      	beq.n	8011178 <rcl_init+0x14c>
 8011124:	2c01      	cmp	r4, #1
 8011126:	f17a 0300 	sbcs.w	r3, sl, #0
 801112a:	db33      	blt.n	8011194 <rcl_init+0x168>
 801112c:	f04f 0800 	mov.w	r8, #0
 8011130:	3d04      	subs	r5, #4
 8011132:	46c1      	mov	r9, r8
 8011134:	e00d      	b.n	8011152 <rcl_init+0x126>
 8011136:	6829      	ldr	r1, [r5, #0]
 8011138:	f007 fc0b 	bl	8018952 <memcpy>
 801113c:	f118 0801 	adds.w	r8, r8, #1
 8011140:	f149 0900 	adc.w	r9, r9, #0
 8011144:	45ca      	cmp	sl, r9
 8011146:	bf08      	it	eq
 8011148:	4544      	cmpeq	r4, r8
 801114a:	d021      	beq.n	8011190 <rcl_init+0x164>
 801114c:	6833      	ldr	r3, [r6, #0]
 801114e:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8011152:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011156:	f7ef f8bb 	bl	80002d0 <strlen>
 801115a:	1c42      	adds	r2, r0, #1
 801115c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801115e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8011160:	9201      	str	r2, [sp, #4]
 8011162:	4610      	mov	r0, r2
 8011164:	4798      	blx	r3
 8011166:	6833      	ldr	r3, [r6, #0]
 8011168:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 801116c:	6a1b      	ldr	r3, [r3, #32]
 801116e:	9a01      	ldr	r2, [sp, #4]
 8011170:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011174:	2800      	cmp	r0, #0
 8011176:	d1de      	bne.n	8011136 <rcl_init+0x10a>
 8011178:	f04f 080a 	mov.w	r8, #10
 801117c:	4630      	mov	r0, r6
 801117e:	f7ff fef5 	bl	8010f6c <__cleanup_context>
 8011182:	e76b      	b.n	801105c <rcl_init+0x30>
 8011184:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8011188:	4640      	mov	r0, r8
 801118a:	b025      	add	sp, #148	@ 0x94
 801118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011190:	f8d6 9000 	ldr.w	r9, [r6]
 8011194:	4a26      	ldr	r2, [pc, #152]	@ (8011230 <rcl_init+0x204>)
 8011196:	6813      	ldr	r3, [r2, #0]
 8011198:	3301      	adds	r3, #1
 801119a:	d030      	beq.n	80111fe <rcl_init+0x1d2>
 801119c:	461d      	mov	r5, r3
 801119e:	2000      	movs	r0, #0
 80111a0:	4619      	mov	r1, r3
 80111a2:	f8d9 4014 	ldr.w	r4, [r9, #20]
 80111a6:	6073      	str	r3, [r6, #4]
 80111a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80111aa:	6011      	str	r1, [r2, #0]
 80111ac:	3301      	adds	r3, #1
 80111ae:	e9c4 5006 	strd	r5, r0, [r4, #24]
 80111b2:	d033      	beq.n	801121c <rcl_init+0x1f0>
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80111ba:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 80111be:	b333      	cbz	r3, 801120e <rcl_init+0x1e2>
 80111c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80111c2:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80111c6:	b953      	cbnz	r3, 80111de <rcl_init+0x1b2>
 80111c8:	2801      	cmp	r0, #1
 80111ca:	d008      	beq.n	80111de <rcl_init+0x1b2>
 80111cc:	a91f      	add	r1, sp, #124	@ 0x7c
 80111ce:	4628      	mov	r0, r5
 80111d0:	f005 ff2e 	bl	8017030 <rcl_get_discovery_static_peers>
 80111d4:	4680      	mov	r8, r0
 80111d6:	2800      	cmp	r0, #0
 80111d8:	d1d0      	bne.n	801117c <rcl_init+0x150>
 80111da:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80111de:	f005 ff1d 	bl	801701c <rcl_automatic_discovery_range_to_string>
 80111e2:	6831      	ldr	r1, [r6, #0]
 80111e4:	6948      	ldr	r0, [r1, #20]
 80111e6:	3128      	adds	r1, #40	@ 0x28
 80111e8:	3018      	adds	r0, #24
 80111ea:	f003 fc43 	bl	8014a74 <rmw_init>
 80111ee:	4680      	mov	r8, r0
 80111f0:	2800      	cmp	r0, #0
 80111f2:	f43f af33 	beq.w	801105c <rcl_init+0x30>
 80111f6:	f7ff fe99 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 80111fa:	4680      	mov	r8, r0
 80111fc:	e7be      	b.n	801117c <rcl_init+0x150>
 80111fe:	2101      	movs	r1, #1
 8011200:	4618      	mov	r0, r3
 8011202:	460d      	mov	r5, r1
 8011204:	460b      	mov	r3, r1
 8011206:	e7cc      	b.n	80111a2 <rcl_init+0x176>
 8011208:	f04f 080a 	mov.w	r8, #10
 801120c:	e726      	b.n	801105c <rcl_init+0x30>
 801120e:	4628      	mov	r0, r5
 8011210:	f005 fec2 	bl	8016f98 <rcl_get_automatic_discovery_range>
 8011214:	4680      	mov	r8, r0
 8011216:	2800      	cmp	r0, #0
 8011218:	d0d2      	beq.n	80111c0 <rcl_init+0x194>
 801121a:	e7af      	b.n	801117c <rcl_init+0x150>
 801121c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011220:	f005 ff70 	bl	8017104 <rcl_get_default_domain_id>
 8011224:	4680      	mov	r8, r0
 8011226:	2800      	cmp	r0, #0
 8011228:	d1a8      	bne.n	801117c <rcl_init+0x150>
 801122a:	6833      	ldr	r3, [r6, #0]
 801122c:	695c      	ldr	r4, [r3, #20]
 801122e:	e7c1      	b.n	80111b4 <rcl_init+0x188>
 8011230:	2000ebcc 	.word	0x2000ebcc

08011234 <rcl_get_zero_initialized_init_options>:
 8011234:	2000      	movs	r0, #0
 8011236:	4770      	bx	lr

08011238 <rcl_init_options_init>:
 8011238:	b084      	sub	sp, #16
 801123a:	b570      	push	{r4, r5, r6, lr}
 801123c:	b09e      	sub	sp, #120	@ 0x78
 801123e:	ad23      	add	r5, sp, #140	@ 0x8c
 8011240:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011244:	2800      	cmp	r0, #0
 8011246:	d046      	beq.n	80112d6 <rcl_init_options_init+0x9e>
 8011248:	6803      	ldr	r3, [r0, #0]
 801124a:	4604      	mov	r4, r0
 801124c:	b133      	cbz	r3, 801125c <rcl_init_options_init+0x24>
 801124e:	2564      	movs	r5, #100	@ 0x64
 8011250:	4628      	mov	r0, r5
 8011252:	b01e      	add	sp, #120	@ 0x78
 8011254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011258:	b004      	add	sp, #16
 801125a:	4770      	bx	lr
 801125c:	4628      	mov	r0, r5
 801125e:	f7f9 ff03 	bl	800b068 <rcutils_allocator_is_valid>
 8011262:	2800      	cmp	r0, #0
 8011264:	d037      	beq.n	80112d6 <rcl_init_options_init+0x9e>
 8011266:	46ae      	mov	lr, r5
 8011268:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801126c:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011270:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011274:	f8de 3000 	ldr.w	r3, [lr]
 8011278:	f8cc 3000 	str.w	r3, [ip]
 801127c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801127e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011280:	2070      	movs	r0, #112	@ 0x70
 8011282:	4798      	blx	r3
 8011284:	4606      	mov	r6, r0
 8011286:	6020      	str	r0, [r4, #0]
 8011288:	b338      	cbz	r0, 80112da <rcl_init_options_init+0xa2>
 801128a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801128e:	4686      	mov	lr, r0
 8011290:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011294:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011298:	f8dc 3000 	ldr.w	r3, [ip]
 801129c:	f8ce 3000 	str.w	r3, [lr]
 80112a0:	a802      	add	r0, sp, #8
 80112a2:	f003 f877 	bl	8014394 <rmw_get_zero_initialized_init_options>
 80112a6:	2258      	movs	r2, #88	@ 0x58
 80112a8:	a902      	add	r1, sp, #8
 80112aa:	f106 0018 	add.w	r0, r6, #24
 80112ae:	f007 fb50 	bl	8018952 <memcpy>
 80112b2:	ab26      	add	r3, sp, #152	@ 0x98
 80112b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80112b8:	6826      	ldr	r6, [r4, #0]
 80112ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 80112be:	f106 0018 	add.w	r0, r6, #24
 80112c2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80112c6:	f003 fae5 	bl	8014894 <rmw_init_options_init>
 80112ca:	4605      	mov	r5, r0
 80112cc:	b938      	cbnz	r0, 80112de <rcl_init_options_init+0xa6>
 80112ce:	6823      	ldr	r3, [r4, #0]
 80112d0:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 80112d4:	e7bc      	b.n	8011250 <rcl_init_options_init+0x18>
 80112d6:	250b      	movs	r5, #11
 80112d8:	e7ba      	b.n	8011250 <rcl_init_options_init+0x18>
 80112da:	250a      	movs	r5, #10
 80112dc:	e7b8      	b.n	8011250 <rcl_init_options_init+0x18>
 80112de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80112e0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80112e2:	6820      	ldr	r0, [r4, #0]
 80112e4:	4798      	blx	r3
 80112e6:	4628      	mov	r0, r5
 80112e8:	f7ff fe20 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 80112ec:	4605      	mov	r5, r0
 80112ee:	e7af      	b.n	8011250 <rcl_init_options_init+0x18>

080112f0 <rcl_init_options_fini>:
 80112f0:	b530      	push	{r4, r5, lr}
 80112f2:	b087      	sub	sp, #28
 80112f4:	b1f0      	cbz	r0, 8011334 <rcl_init_options_fini+0x44>
 80112f6:	6803      	ldr	r3, [r0, #0]
 80112f8:	4604      	mov	r4, r0
 80112fa:	b1db      	cbz	r3, 8011334 <rcl_init_options_fini+0x44>
 80112fc:	469c      	mov	ip, r3
 80112fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011302:	f10d 0e04 	add.w	lr, sp, #4
 8011306:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801130a:	f8dc 3000 	ldr.w	r3, [ip]
 801130e:	f8ce 3000 	str.w	r3, [lr]
 8011312:	a801      	add	r0, sp, #4
 8011314:	f7f9 fea8 	bl	800b068 <rcutils_allocator_is_valid>
 8011318:	b160      	cbz	r0, 8011334 <rcl_init_options_fini+0x44>
 801131a:	6820      	ldr	r0, [r4, #0]
 801131c:	3018      	adds	r0, #24
 801131e:	f003 fb6b 	bl	80149f8 <rmw_init_options_fini>
 8011322:	4605      	mov	r5, r0
 8011324:	b950      	cbnz	r0, 801133c <rcl_init_options_fini+0x4c>
 8011326:	6820      	ldr	r0, [r4, #0]
 8011328:	9b02      	ldr	r3, [sp, #8]
 801132a:	9905      	ldr	r1, [sp, #20]
 801132c:	4798      	blx	r3
 801132e:	4628      	mov	r0, r5
 8011330:	b007      	add	sp, #28
 8011332:	bd30      	pop	{r4, r5, pc}
 8011334:	250b      	movs	r5, #11
 8011336:	4628      	mov	r0, r5
 8011338:	b007      	add	sp, #28
 801133a:	bd30      	pop	{r4, r5, pc}
 801133c:	f7ff fdf6 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8011340:	4605      	mov	r5, r0
 8011342:	e7f8      	b.n	8011336 <rcl_init_options_fini+0x46>

08011344 <rcl_init_options_copy>:
 8011344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011346:	b09d      	sub	sp, #116	@ 0x74
 8011348:	2800      	cmp	r0, #0
 801134a:	d04a      	beq.n	80113e2 <rcl_init_options_copy+0x9e>
 801134c:	4604      	mov	r4, r0
 801134e:	6800      	ldr	r0, [r0, #0]
 8011350:	2800      	cmp	r0, #0
 8011352:	d046      	beq.n	80113e2 <rcl_init_options_copy+0x9e>
 8011354:	460d      	mov	r5, r1
 8011356:	f7f9 fe87 	bl	800b068 <rcutils_allocator_is_valid>
 801135a:	2800      	cmp	r0, #0
 801135c:	d041      	beq.n	80113e2 <rcl_init_options_copy+0x9e>
 801135e:	2d00      	cmp	r5, #0
 8011360:	d03f      	beq.n	80113e2 <rcl_init_options_copy+0x9e>
 8011362:	682b      	ldr	r3, [r5, #0]
 8011364:	b11b      	cbz	r3, 801136e <rcl_init_options_copy+0x2a>
 8011366:	2464      	movs	r4, #100	@ 0x64
 8011368:	4620      	mov	r0, r4
 801136a:	b01d      	add	sp, #116	@ 0x74
 801136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136e:	6826      	ldr	r6, [r4, #0]
 8011370:	46b6      	mov	lr, r6
 8011372:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011376:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 801137a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801137e:	f8de 3000 	ldr.w	r3, [lr]
 8011382:	6837      	ldr	r7, [r6, #0]
 8011384:	f8cc 3000 	str.w	r3, [ip]
 8011388:	4619      	mov	r1, r3
 801138a:	2070      	movs	r0, #112	@ 0x70
 801138c:	47b8      	blx	r7
 801138e:	4606      	mov	r6, r0
 8011390:	6028      	str	r0, [r5, #0]
 8011392:	b350      	cbz	r0, 80113ea <rcl_init_options_copy+0xa6>
 8011394:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8011398:	4686      	mov	lr, r0
 801139a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801139e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80113a2:	f8dc 3000 	ldr.w	r3, [ip]
 80113a6:	f8ce 3000 	str.w	r3, [lr]
 80113aa:	4668      	mov	r0, sp
 80113ac:	f002 fff2 	bl	8014394 <rmw_get_zero_initialized_init_options>
 80113b0:	2258      	movs	r2, #88	@ 0x58
 80113b2:	4669      	mov	r1, sp
 80113b4:	f106 0018 	add.w	r0, r6, #24
 80113b8:	f007 facb 	bl	8018952 <memcpy>
 80113bc:	6820      	ldr	r0, [r4, #0]
 80113be:	6829      	ldr	r1, [r5, #0]
 80113c0:	3018      	adds	r0, #24
 80113c2:	3118      	adds	r1, #24
 80113c4:	f003 fac8 	bl	8014958 <rmw_init_options_copy>
 80113c8:	4604      	mov	r4, r0
 80113ca:	2800      	cmp	r0, #0
 80113cc:	d0cc      	beq.n	8011368 <rcl_init_options_copy+0x24>
 80113ce:	f7f9 fe5f 	bl	800b090 <rcutils_get_error_string>
 80113d2:	f7f9 fe75 	bl	800b0c0 <rcutils_reset_error>
 80113d6:	4628      	mov	r0, r5
 80113d8:	f7ff ff8a 	bl	80112f0 <rcl_init_options_fini>
 80113dc:	b138      	cbz	r0, 80113ee <rcl_init_options_copy+0xaa>
 80113de:	4604      	mov	r4, r0
 80113e0:	e7c2      	b.n	8011368 <rcl_init_options_copy+0x24>
 80113e2:	240b      	movs	r4, #11
 80113e4:	4620      	mov	r0, r4
 80113e6:	b01d      	add	sp, #116	@ 0x74
 80113e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ea:	240a      	movs	r4, #10
 80113ec:	e7bc      	b.n	8011368 <rcl_init_options_copy+0x24>
 80113ee:	4620      	mov	r0, r4
 80113f0:	b01d      	add	sp, #116	@ 0x74
 80113f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80113f6:	f7ff bd99 	b.w	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 80113fa:	bf00      	nop

080113fc <rcl_get_zero_initialized_node>:
 80113fc:	4a03      	ldr	r2, [pc, #12]	@ (801140c <rcl_get_zero_initialized_node+0x10>)
 80113fe:	4603      	mov	r3, r0
 8011400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011404:	e883 0003 	stmia.w	r3, {r0, r1}
 8011408:	4618      	mov	r0, r3
 801140a:	4770      	bx	lr
 801140c:	0801a254 	.word	0x0801a254

08011410 <rcl_node_init>:
 8011410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011414:	b0ab      	sub	sp, #172	@ 0xac
 8011416:	4604      	mov	r4, r0
 8011418:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 801141a:	a825      	add	r0, sp, #148	@ 0x94
 801141c:	4689      	mov	r9, r1
 801141e:	4690      	mov	r8, r2
 8011420:	461f      	mov	r7, r3
 8011422:	f006 f8e1 	bl	80175e8 <rcl_guard_condition_get_default_options>
 8011426:	2d00      	cmp	r5, #0
 8011428:	f000 80d8 	beq.w	80115dc <rcl_node_init+0x1cc>
 801142c:	4628      	mov	r0, r5
 801142e:	f7f9 fe1b 	bl	800b068 <rcutils_allocator_is_valid>
 8011432:	2800      	cmp	r0, #0
 8011434:	f000 80d2 	beq.w	80115dc <rcl_node_init+0x1cc>
 8011438:	f1b9 0f00 	cmp.w	r9, #0
 801143c:	f000 80ce 	beq.w	80115dc <rcl_node_init+0x1cc>
 8011440:	f1b8 0f00 	cmp.w	r8, #0
 8011444:	f000 80ca 	beq.w	80115dc <rcl_node_init+0x1cc>
 8011448:	2c00      	cmp	r4, #0
 801144a:	f000 80c7 	beq.w	80115dc <rcl_node_init+0x1cc>
 801144e:	6866      	ldr	r6, [r4, #4]
 8011450:	2e00      	cmp	r6, #0
 8011452:	f040 80ca 	bne.w	80115ea <rcl_node_init+0x1da>
 8011456:	2f00      	cmp	r7, #0
 8011458:	f000 80c0 	beq.w	80115dc <rcl_node_init+0x1cc>
 801145c:	4638      	mov	r0, r7
 801145e:	f7ff fd7f 	bl	8010f60 <rcl_context_is_valid>
 8011462:	2800      	cmp	r0, #0
 8011464:	f000 80bf 	beq.w	80115e6 <rcl_node_init+0x1d6>
 8011468:	4632      	mov	r2, r6
 801146a:	a924      	add	r1, sp, #144	@ 0x90
 801146c:	4648      	mov	r0, r9
 801146e:	9624      	str	r6, [sp, #144]	@ 0x90
 8011470:	f003 f92c 	bl	80146cc <rmw_validate_node_name>
 8011474:	4606      	mov	r6, r0
 8011476:	2800      	cmp	r0, #0
 8011478:	f040 80b1 	bne.w	80115de <rcl_node_init+0x1ce>
 801147c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801147e:	2800      	cmp	r0, #0
 8011480:	f040 8104 	bne.w	801168c <rcl_node_init+0x27c>
 8011484:	f898 3000 	ldrb.w	r3, [r8]
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 80f0 	beq.w	801166e <rcl_node_init+0x25e>
 801148e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011490:	f000 80b0 	beq.w	80115f4 <rcl_node_init+0x1e4>
 8011494:	4b85      	ldr	r3, [pc, #532]	@ (80116ac <rcl_node_init+0x29c>)
 8011496:	f8cd 800c 	str.w	r8, [sp, #12]
 801149a:	9302      	str	r3, [sp, #8]
 801149c:	692b      	ldr	r3, [r5, #16]
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80114a4:	9301      	str	r3, [sp, #4]
 80114a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80114aa:	f002 fccf 	bl	8013e4c <rcutils_format_string_limit>
 80114ae:	4680      	mov	r8, r0
 80114b0:	f1b8 0f00 	cmp.w	r8, #0
 80114b4:	f000 80e8 	beq.w	8011688 <rcl_node_init+0x278>
 80114b8:	2200      	movs	r2, #0
 80114ba:	a924      	add	r1, sp, #144	@ 0x90
 80114bc:	4640      	mov	r0, r8
 80114be:	9224      	str	r2, [sp, #144]	@ 0x90
 80114c0:	f003 f8e6 	bl	8014690 <rmw_validate_namespace>
 80114c4:	4606      	mov	r6, r0
 80114c6:	2800      	cmp	r0, #0
 80114c8:	f040 80a4 	bne.w	8011614 <rcl_node_init+0x204>
 80114cc:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80114ce:	2800      	cmp	r0, #0
 80114d0:	f040 809d 	bne.w	801160e <rcl_node_init+0x1fe>
 80114d4:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80114d8:	2178      	movs	r1, #120	@ 0x78
 80114da:	2001      	movs	r0, #1
 80114dc:	4798      	blx	r3
 80114de:	4606      	mov	r6, r0
 80114e0:	6060      	str	r0, [r4, #4]
 80114e2:	2800      	cmp	r0, #0
 80114e4:	f000 80d6 	beq.w	8011694 <rcl_node_init+0x284>
 80114e8:	a80a      	add	r0, sp, #40	@ 0x28
 80114ea:	f000 f92f 	bl	801174c <rcl_node_get_default_options>
 80114ee:	a90a      	add	r1, sp, #40	@ 0x28
 80114f0:	4630      	mov	r0, r6
 80114f2:	2268      	movs	r2, #104	@ 0x68
 80114f4:	f007 fa2d 	bl	8018952 <memcpy>
 80114f8:	6861      	ldr	r1, [r4, #4]
 80114fa:	6027      	str	r7, [r4, #0]
 80114fc:	4628      	mov	r0, r5
 80114fe:	f000 f933 	bl	8011768 <rcl_node_options_copy>
 8011502:	4606      	mov	r6, r0
 8011504:	2800      	cmp	r0, #0
 8011506:	f040 8085 	bne.w	8011614 <rcl_node_init+0x204>
 801150a:	4640      	mov	r0, r8
 801150c:	f7ee fee0 	bl	80002d0 <strlen>
 8011510:	eb08 0300 	add.w	r3, r8, r0
 8011514:	6866      	ldr	r6, [r4, #4]
 8011516:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801151a:	e9cd 8903 	strd	r8, r9, [sp, #12]
 801151e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011520:	bf0c      	ite	eq
 8011522:	4b63      	ldreq	r3, [pc, #396]	@ (80116b0 <rcl_node_init+0x2a0>)
 8011524:	4b63      	ldrne	r3, [pc, #396]	@ (80116b4 <rcl_node_init+0x2a4>)
 8011526:	9302      	str	r3, [sp, #8]
 8011528:	692b      	ldr	r3, [r5, #16]
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011530:	9301      	str	r3, [sp, #4]
 8011532:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011536:	f002 fc89 	bl	8013e4c <rcutils_format_string_limit>
 801153a:	6863      	ldr	r3, [r4, #4]
 801153c:	6770      	str	r0, [r6, #116]	@ 0x74
 801153e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8011540:	2a00      	cmp	r2, #0
 8011542:	f000 80a9 	beq.w	8011698 <rcl_node_init+0x288>
 8011546:	6822      	ldr	r2, [r4, #0]
 8011548:	9307      	str	r3, [sp, #28]
 801154a:	6810      	ldr	r0, [r2, #0]
 801154c:	4649      	mov	r1, r9
 801154e:	3028      	adds	r0, #40	@ 0x28
 8011550:	4642      	mov	r2, r8
 8011552:	f003 fce7 	bl	8014f24 <rmw_create_node>
 8011556:	9b07      	ldr	r3, [sp, #28]
 8011558:	6698      	str	r0, [r3, #104]	@ 0x68
 801155a:	6863      	ldr	r3, [r4, #4]
 801155c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801155e:	2800      	cmp	r0, #0
 8011560:	f000 809d 	beq.w	801169e <rcl_node_init+0x28e>
 8011564:	f003 fd70 	bl	8015048 <rmw_node_get_graph_guard_condition>
 8011568:	4681      	mov	r9, r0
 801156a:	2800      	cmp	r0, #0
 801156c:	f000 809c 	beq.w	80116a8 <rcl_node_init+0x298>
 8011570:	682b      	ldr	r3, [r5, #0]
 8011572:	6929      	ldr	r1, [r5, #16]
 8011574:	6866      	ldr	r6, [r4, #4]
 8011576:	2008      	movs	r0, #8
 8011578:	4798      	blx	r3
 801157a:	6863      	ldr	r3, [r4, #4]
 801157c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801157e:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8011582:	f1ba 0f00 	cmp.w	sl, #0
 8011586:	f000 808d 	beq.w	80116a4 <rcl_node_init+0x294>
 801158a:	f10d 0b20 	add.w	fp, sp, #32
 801158e:	4658      	mov	r0, fp
 8011590:	f005 ff52 	bl	8017438 <rcl_get_zero_initialized_guard_condition>
 8011594:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8011598:	6863      	ldr	r3, [r4, #4]
 801159a:	46ac      	mov	ip, r5
 801159c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80115a0:	e88a 0003 	stmia.w	sl, {r0, r1}
 80115a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115a8:	ae25      	add	r6, sp, #148	@ 0x94
 80115aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80115ac:	f8dc 3000 	ldr.w	r3, [ip]
 80115b0:	6033      	str	r3, [r6, #0]
 80115b2:	ab2a      	add	r3, sp, #168	@ 0xa8
 80115b4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80115b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80115bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80115be:	463a      	mov	r2, r7
 80115c0:	4649      	mov	r1, r9
 80115c2:	4670      	mov	r0, lr
 80115c4:	f005 ff8e 	bl	80174e4 <rcl_guard_condition_init_from_rmw>
 80115c8:	4606      	mov	r6, r0
 80115ca:	bb18      	cbnz	r0, 8011614 <rcl_node_init+0x204>
 80115cc:	686b      	ldr	r3, [r5, #4]
 80115ce:	6929      	ldr	r1, [r5, #16]
 80115d0:	4798      	blx	r3
 80115d2:	686b      	ldr	r3, [r5, #4]
 80115d4:	6929      	ldr	r1, [r5, #16]
 80115d6:	4640      	mov	r0, r8
 80115d8:	4798      	blx	r3
 80115da:	e000      	b.n	80115de <rcl_node_init+0x1ce>
 80115dc:	260b      	movs	r6, #11
 80115de:	4630      	mov	r0, r6
 80115e0:	b02b      	add	sp, #172	@ 0xac
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	2665      	movs	r6, #101	@ 0x65
 80115e8:	e7f9      	b.n	80115de <rcl_node_init+0x1ce>
 80115ea:	2664      	movs	r6, #100	@ 0x64
 80115ec:	4630      	mov	r0, r6
 80115ee:	b02b      	add	sp, #172	@ 0xac
 80115f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f4:	f105 030c 	add.w	r3, r5, #12
 80115f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80115fc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011600:	4640      	mov	r0, r8
 8011602:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011606:	f002 fd3f 	bl	8014088 <rcutils_strdup>
 801160a:	4680      	mov	r8, r0
 801160c:	e750      	b.n	80114b0 <rcl_node_init+0xa0>
 801160e:	f003 f851 	bl	80146b4 <rmw_namespace_validation_result_string>
 8011612:	26ca      	movs	r6, #202	@ 0xca
 8011614:	6863      	ldr	r3, [r4, #4]
 8011616:	b1f3      	cbz	r3, 8011656 <rcl_node_init+0x246>
 8011618:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801161a:	b138      	cbz	r0, 801162c <rcl_node_init+0x21c>
 801161c:	f005 ffc2 	bl	80175a4 <rcl_guard_condition_fini>
 8011620:	6863      	ldr	r3, [r4, #4]
 8011622:	6929      	ldr	r1, [r5, #16]
 8011624:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011626:	686b      	ldr	r3, [r5, #4]
 8011628:	4798      	blx	r3
 801162a:	6863      	ldr	r3, [r4, #4]
 801162c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801162e:	b110      	cbz	r0, 8011636 <rcl_node_init+0x226>
 8011630:	f003 fc8e 	bl	8014f50 <rmw_destroy_node>
 8011634:	6863      	ldr	r3, [r4, #4]
 8011636:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011638:	6929      	ldr	r1, [r5, #16]
 801163a:	686b      	ldr	r3, [r5, #4]
 801163c:	4798      	blx	r3
 801163e:	6863      	ldr	r3, [r4, #4]
 8011640:	6929      	ldr	r1, [r5, #16]
 8011642:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011644:	686b      	ldr	r3, [r5, #4]
 8011646:	4798      	blx	r3
 8011648:	6860      	ldr	r0, [r4, #4]
 801164a:	f000 f8ab 	bl	80117a4 <rcl_node_options_fini>
 801164e:	686b      	ldr	r3, [r5, #4]
 8011650:	6929      	ldr	r1, [r5, #16]
 8011652:	6860      	ldr	r0, [r4, #4]
 8011654:	4798      	blx	r3
 8011656:	686b      	ldr	r3, [r5, #4]
 8011658:	6929      	ldr	r1, [r5, #16]
 801165a:	2000      	movs	r0, #0
 801165c:	4798      	blx	r3
 801165e:	686b      	ldr	r3, [r5, #4]
 8011660:	6929      	ldr	r1, [r5, #16]
 8011662:	4640      	mov	r0, r8
 8011664:	4798      	blx	r3
 8011666:	2300      	movs	r3, #0
 8011668:	e9c4 3300 	strd	r3, r3, [r4]
 801166c:	e7b7      	b.n	80115de <rcl_node_init+0x1ce>
 801166e:	f105 030c 	add.w	r3, r5, #12
 8011672:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011676:	e88d 0003 	stmia.w	sp, {r0, r1}
 801167a:	480f      	ldr	r0, [pc, #60]	@ (80116b8 <rcl_node_init+0x2a8>)
 801167c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011680:	f002 fd02 	bl	8014088 <rcutils_strdup>
 8011684:	4680      	mov	r8, r0
 8011686:	e713      	b.n	80114b0 <rcl_node_init+0xa0>
 8011688:	260a      	movs	r6, #10
 801168a:	e7a8      	b.n	80115de <rcl_node_init+0x1ce>
 801168c:	f003 f86a 	bl	8014764 <rmw_node_name_validation_result_string>
 8011690:	26c9      	movs	r6, #201	@ 0xc9
 8011692:	e7a4      	b.n	80115de <rcl_node_init+0x1ce>
 8011694:	260a      	movs	r6, #10
 8011696:	e7de      	b.n	8011656 <rcl_node_init+0x246>
 8011698:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801169a:	260a      	movs	r6, #10
 801169c:	e7bd      	b.n	801161a <rcl_node_init+0x20a>
 801169e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80116a0:	2601      	movs	r6, #1
 80116a2:	e7ba      	b.n	801161a <rcl_node_init+0x20a>
 80116a4:	260a      	movs	r6, #10
 80116a6:	e7c1      	b.n	801162c <rcl_node_init+0x21c>
 80116a8:	2601      	movs	r6, #1
 80116aa:	e7b3      	b.n	8011614 <rcl_node_init+0x204>
 80116ac:	080199fc 	.word	0x080199fc
 80116b0:	080198a0 	.word	0x080198a0
 80116b4:	08019a00 	.word	0x08019a00
 80116b8:	080199f8 	.word	0x080199f8

080116bc <rcl_node_is_valid>:
 80116bc:	b130      	cbz	r0, 80116cc <rcl_node_is_valid+0x10>
 80116be:	6843      	ldr	r3, [r0, #4]
 80116c0:	b123      	cbz	r3, 80116cc <rcl_node_is_valid+0x10>
 80116c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116c4:	b113      	cbz	r3, 80116cc <rcl_node_is_valid+0x10>
 80116c6:	6800      	ldr	r0, [r0, #0]
 80116c8:	f7ff bc4a 	b.w	8010f60 <rcl_context_is_valid>
 80116cc:	2000      	movs	r0, #0
 80116ce:	4770      	bx	lr

080116d0 <rcl_node_get_name>:
 80116d0:	b120      	cbz	r0, 80116dc <rcl_node_get_name+0xc>
 80116d2:	6840      	ldr	r0, [r0, #4]
 80116d4:	b110      	cbz	r0, 80116dc <rcl_node_get_name+0xc>
 80116d6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80116d8:	b100      	cbz	r0, 80116dc <rcl_node_get_name+0xc>
 80116da:	6880      	ldr	r0, [r0, #8]
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop

080116e0 <rcl_node_get_namespace>:
 80116e0:	b120      	cbz	r0, 80116ec <rcl_node_get_namespace+0xc>
 80116e2:	6840      	ldr	r0, [r0, #4]
 80116e4:	b110      	cbz	r0, 80116ec <rcl_node_get_namespace+0xc>
 80116e6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80116e8:	b100      	cbz	r0, 80116ec <rcl_node_get_namespace+0xc>
 80116ea:	68c0      	ldr	r0, [r0, #12]
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop

080116f0 <rcl_node_get_options>:
 80116f0:	b128      	cbz	r0, 80116fe <rcl_node_get_options+0xe>
 80116f2:	6840      	ldr	r0, [r0, #4]
 80116f4:	b118      	cbz	r0, 80116fe <rcl_node_get_options+0xe>
 80116f6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	bf08      	it	eq
 80116fc:	2000      	moveq	r0, #0
 80116fe:	4770      	bx	lr

08011700 <rcl_node_get_rmw_handle>:
 8011700:	b110      	cbz	r0, 8011708 <rcl_node_get_rmw_handle+0x8>
 8011702:	6840      	ldr	r0, [r0, #4]
 8011704:	b100      	cbz	r0, 8011708 <rcl_node_get_rmw_handle+0x8>
 8011706:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011708:	4770      	bx	lr
 801170a:	bf00      	nop

0801170c <rcl_get_disable_loaned_message>:
 801170c:	b510      	push	{r4, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	2300      	movs	r3, #0
 8011712:	9301      	str	r3, [sp, #4]
 8011714:	b1a0      	cbz	r0, 8011740 <rcl_get_disable_loaned_message+0x34>
 8011716:	4604      	mov	r4, r0
 8011718:	a901      	add	r1, sp, #4
 801171a:	480b      	ldr	r0, [pc, #44]	@ (8011748 <rcl_get_disable_loaned_message+0x3c>)
 801171c:	f002 fb7e 	bl	8013e1c <rcutils_get_env>
 8011720:	b110      	cbz	r0, 8011728 <rcl_get_disable_loaned_message+0x1c>
 8011722:	2001      	movs	r0, #1
 8011724:	b002      	add	sp, #8
 8011726:	bd10      	pop	{r4, pc}
 8011728:	9a01      	ldr	r2, [sp, #4]
 801172a:	7813      	ldrb	r3, [r2, #0]
 801172c:	3b31      	subs	r3, #49	@ 0x31
 801172e:	bf08      	it	eq
 8011730:	7853      	ldrbeq	r3, [r2, #1]
 8011732:	fab3 f383 	clz	r3, r3
 8011736:	095b      	lsrs	r3, r3, #5
 8011738:	2000      	movs	r0, #0
 801173a:	7023      	strb	r3, [r4, #0]
 801173c:	b002      	add	sp, #8
 801173e:	bd10      	pop	{r4, pc}
 8011740:	200b      	movs	r0, #11
 8011742:	b002      	add	sp, #8
 8011744:	bd10      	pop	{r4, pc}
 8011746:	bf00      	nop
 8011748:	08019a08 	.word	0x08019a08

0801174c <rcl_node_get_default_options>:
 801174c:	b510      	push	{r4, lr}
 801174e:	2253      	movs	r2, #83	@ 0x53
 8011750:	4604      	mov	r4, r0
 8011752:	2100      	movs	r1, #0
 8011754:	3015      	adds	r0, #21
 8011756:	f007 f821 	bl	801879c <memset>
 801175a:	4620      	mov	r0, r4
 801175c:	f7f9 fc58 	bl	800b010 <rcutils_get_default_allocator>
 8011760:	2301      	movs	r3, #1
 8011762:	7523      	strb	r3, [r4, #20]
 8011764:	4620      	mov	r0, r4
 8011766:	bd10      	pop	{r4, pc}

08011768 <rcl_node_options_copy>:
 8011768:	b1d0      	cbz	r0, 80117a0 <rcl_node_options_copy+0x38>
 801176a:	b570      	push	{r4, r5, r6, lr}
 801176c:	460c      	mov	r4, r1
 801176e:	b1a9      	cbz	r1, 801179c <rcl_node_options_copy+0x34>
 8011770:	4288      	cmp	r0, r1
 8011772:	4684      	mov	ip, r0
 8011774:	d012      	beq.n	801179c <rcl_node_options_copy+0x34>
 8011776:	4605      	mov	r5, r0
 8011778:	8a86      	ldrh	r6, [r0, #20]
 801177a:	468e      	mov	lr, r1
 801177c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801177e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011782:	682b      	ldr	r3, [r5, #0]
 8011784:	f8ce 3000 	str.w	r3, [lr]
 8011788:	f10c 0118 	add.w	r1, ip, #24
 801178c:	2250      	movs	r2, #80	@ 0x50
 801178e:	82a6      	strh	r6, [r4, #20]
 8011790:	f104 0018 	add.w	r0, r4, #24
 8011794:	f007 f8dd 	bl	8018952 <memcpy>
 8011798:	2000      	movs	r0, #0
 801179a:	bd70      	pop	{r4, r5, r6, pc}
 801179c:	200b      	movs	r0, #11
 801179e:	bd70      	pop	{r4, r5, r6, pc}
 80117a0:	200b      	movs	r0, #11
 80117a2:	4770      	bx	lr

080117a4 <rcl_node_options_fini>:
 80117a4:	b1c0      	cbz	r0, 80117d8 <rcl_node_options_fini+0x34>
 80117a6:	b500      	push	{lr}
 80117a8:	4684      	mov	ip, r0
 80117aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80117ae:	b087      	sub	sp, #28
 80117b0:	f10d 0e04 	add.w	lr, sp, #4
 80117b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80117b8:	f8dc 3000 	ldr.w	r3, [ip]
 80117bc:	f8ce 3000 	str.w	r3, [lr]
 80117c0:	a801      	add	r0, sp, #4
 80117c2:	f7f9 fc51 	bl	800b068 <rcutils_allocator_is_valid>
 80117c6:	b118      	cbz	r0, 80117d0 <rcl_node_options_fini+0x2c>
 80117c8:	2000      	movs	r0, #0
 80117ca:	b007      	add	sp, #28
 80117cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80117d0:	200b      	movs	r0, #11
 80117d2:	b007      	add	sp, #28
 80117d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80117d8:	200b      	movs	r0, #11
 80117da:	4770      	bx	lr

080117dc <rcl_node_resolve_name>:
 80117dc:	b082      	sub	sp, #8
 80117de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e2:	b091      	sub	sp, #68	@ 0x44
 80117e4:	ac1a      	add	r4, sp, #104	@ 0x68
 80117e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80117ea:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80117ee:	2800      	cmp	r0, #0
 80117f0:	d03a      	beq.n	8011868 <rcl_node_resolve_name+0x8c>
 80117f2:	460c      	mov	r4, r1
 80117f4:	4605      	mov	r5, r0
 80117f6:	f7ff ff7b 	bl	80116f0 <rcl_node_get_options>
 80117fa:	b370      	cbz	r0, 801185a <rcl_node_resolve_name+0x7e>
 80117fc:	4628      	mov	r0, r5
 80117fe:	f7ff ff67 	bl	80116d0 <rcl_node_get_name>
 8011802:	4681      	mov	r9, r0
 8011804:	4628      	mov	r0, r5
 8011806:	f7ff ff6b 	bl	80116e0 <rcl_node_get_namespace>
 801180a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801180e:	4607      	mov	r7, r0
 8011810:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011814:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011816:	46ac      	mov	ip, r5
 8011818:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801181c:	f8de 3000 	ldr.w	r3, [lr]
 8011820:	f8cc 3000 	str.w	r3, [ip]
 8011824:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011826:	b1fb      	cbz	r3, 8011868 <rcl_node_resolve_name+0x8c>
 8011828:	468a      	mov	sl, r1
 801182a:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801182e:	f002 fc8b 	bl	8014148 <rcutils_get_zero_initialized_string_map>
 8011832:	ab10      	add	r3, sp, #64	@ 0x40
 8011834:	9008      	str	r0, [sp, #32]
 8011836:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801183a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801183e:	2100      	movs	r1, #0
 8011840:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011844:	a808      	add	r0, sp, #32
 8011846:	f002 fcd9 	bl	80141fc <rcutils_string_map_init>
 801184a:	4606      	mov	r6, r0
 801184c:	b170      	cbz	r0, 801186c <rcl_node_resolve_name+0x90>
 801184e:	f7f9 fc1f 	bl	800b090 <rcutils_get_error_string>
 8011852:	f7f9 fc35 	bl	800b0c0 <rcutils_reset_error>
 8011856:	2e0a      	cmp	r6, #10
 8011858:	d000      	beq.n	801185c <rcl_node_resolve_name+0x80>
 801185a:	2601      	movs	r6, #1
 801185c:	4630      	mov	r0, r6
 801185e:	b011      	add	sp, #68	@ 0x44
 8011860:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	b002      	add	sp, #8
 8011866:	4770      	bx	lr
 8011868:	260b      	movs	r6, #11
 801186a:	e7f7      	b.n	801185c <rcl_node_resolve_name+0x80>
 801186c:	9009      	str	r0, [sp, #36]	@ 0x24
 801186e:	9007      	str	r0, [sp, #28]
 8011870:	a808      	add	r0, sp, #32
 8011872:	f005 fddb 	bl	801742c <rcl_get_default_topic_name_substitutions>
 8011876:	4606      	mov	r6, r0
 8011878:	b1b0      	cbz	r0, 80118a8 <rcl_node_resolve_name+0xcc>
 801187a:	280a      	cmp	r0, #10
 801187c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011880:	d000      	beq.n	8011884 <rcl_node_resolve_name+0xa8>
 8011882:	2601      	movs	r6, #1
 8011884:	a808      	add	r0, sp, #32
 8011886:	f002 fcf7 	bl	8014278 <rcutils_string_map_fini>
 801188a:	2800      	cmp	r0, #0
 801188c:	d132      	bne.n	80118f4 <rcl_node_resolve_name+0x118>
 801188e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011890:	4659      	mov	r1, fp
 8011892:	47d0      	blx	sl
 8011894:	4659      	mov	r1, fp
 8011896:	4648      	mov	r0, r9
 8011898:	47d0      	blx	sl
 801189a:	f1b8 0f00 	cmp.w	r8, #0
 801189e:	d0dd      	beq.n	801185c <rcl_node_resolve_name+0x80>
 80118a0:	2e67      	cmp	r6, #103	@ 0x67
 80118a2:	bf08      	it	eq
 80118a4:	2668      	moveq	r6, #104	@ 0x68
 80118a6:	e7d9      	b.n	801185c <rcl_node_resolve_name+0x80>
 80118a8:	ab09      	add	r3, sp, #36	@ 0x24
 80118aa:	9305      	str	r3, [sp, #20]
 80118ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118ae:	46ec      	mov	ip, sp
 80118b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118b4:	682b      	ldr	r3, [r5, #0]
 80118b6:	f8cc 3000 	str.w	r3, [ip]
 80118ba:	463a      	mov	r2, r7
 80118bc:	4649      	mov	r1, r9
 80118be:	4620      	mov	r0, r4
 80118c0:	ab08      	add	r3, sp, #32
 80118c2:	f005 fc4d 	bl	8017160 <rcl_expand_topic_name>
 80118c6:	4606      	mov	r6, r0
 80118c8:	b9c8      	cbnz	r0, 80118fe <rcl_node_resolve_name+0x122>
 80118ca:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80118ce:	9009      	str	r0, [sp, #36]	@ 0x24
 80118d0:	4602      	mov	r2, r0
 80118d2:	a90a      	add	r1, sp, #40	@ 0x28
 80118d4:	4648      	mov	r0, r9
 80118d6:	f002 fe23 	bl	8014520 <rmw_validate_full_topic_name>
 80118da:	b998      	cbnz	r0, 8011904 <rcl_node_resolve_name+0x128>
 80118dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80118de:	bb14      	cbnz	r4, 8011926 <rcl_node_resolve_name+0x14a>
 80118e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80118e2:	a808      	add	r0, sp, #32
 80118e4:	f8c3 9000 	str.w	r9, [r3]
 80118e8:	f002 fcc6 	bl	8014278 <rcutils_string_map_fini>
 80118ec:	4606      	mov	r6, r0
 80118ee:	b978      	cbnz	r0, 8011910 <rcl_node_resolve_name+0x134>
 80118f0:	4681      	mov	r9, r0
 80118f2:	e7cc      	b.n	801188e <rcl_node_resolve_name+0xb2>
 80118f4:	f7f9 fbcc 	bl	800b090 <rcutils_get_error_string>
 80118f8:	f7f9 fbe2 	bl	800b0c0 <rcutils_reset_error>
 80118fc:	e7c7      	b.n	801188e <rcl_node_resolve_name+0xb2>
 80118fe:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011902:	e7bf      	b.n	8011884 <rcl_node_resolve_name+0xa8>
 8011904:	f7f9 fbc4 	bl	800b090 <rcutils_get_error_string>
 8011908:	2601      	movs	r6, #1
 801190a:	f7f9 fbd9 	bl	800b0c0 <rcutils_reset_error>
 801190e:	e7b9      	b.n	8011884 <rcl_node_resolve_name+0xa8>
 8011910:	f7f9 fbbe 	bl	800b090 <rcutils_get_error_string>
 8011914:	f7f9 fbd4 	bl	800b0c0 <rcutils_reset_error>
 8011918:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801191a:	4659      	mov	r1, fp
 801191c:	47d0      	blx	sl
 801191e:	4659      	mov	r1, fp
 8011920:	4620      	mov	r0, r4
 8011922:	47d0      	blx	sl
 8011924:	e799      	b.n	801185a <rcl_node_resolve_name+0x7e>
 8011926:	2667      	movs	r6, #103	@ 0x67
 8011928:	e7ac      	b.n	8011884 <rcl_node_resolve_name+0xa8>
 801192a:	bf00      	nop

0801192c <rcl_service_get_rmw_handle>:
 801192c:	b118      	cbz	r0, 8011936 <rcl_service_get_rmw_handle+0xa>
 801192e:	6800      	ldr	r0, [r0, #0]
 8011930:	b108      	cbz	r0, 8011936 <rcl_service_get_rmw_handle+0xa>
 8011932:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011936:	4770      	bx	lr

08011938 <rcl_take_request>:
 8011938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801193a:	468e      	mov	lr, r1
 801193c:	460c      	mov	r4, r1
 801193e:	4617      	mov	r7, r2
 8011940:	4605      	mov	r5, r0
 8011942:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011946:	b091      	sub	sp, #68	@ 0x44
 8011948:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801194c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011950:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011954:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011958:	b30d      	cbz	r5, 801199e <rcl_take_request+0x66>
 801195a:	682b      	ldr	r3, [r5, #0]
 801195c:	b1fb      	cbz	r3, 801199e <rcl_take_request+0x66>
 801195e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011962:	b1e0      	cbz	r0, 801199e <rcl_take_request+0x66>
 8011964:	b397      	cbz	r7, 80119cc <rcl_take_request+0x94>
 8011966:	2300      	movs	r3, #0
 8011968:	f88d 3017 	strb.w	r3, [sp, #23]
 801196c:	463a      	mov	r2, r7
 801196e:	f10d 0317 	add.w	r3, sp, #23
 8011972:	a906      	add	r1, sp, #24
 8011974:	f003 fbb6 	bl	80150e4 <rmw_take_request>
 8011978:	4606      	mov	r6, r0
 801197a:	b198      	cbz	r0, 80119a4 <rcl_take_request+0x6c>
 801197c:	280a      	cmp	r0, #10
 801197e:	bf18      	it	ne
 8011980:	2601      	movne	r6, #1
 8011982:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8011986:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801198a:	46a6      	mov	lr, r4
 801198c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011990:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011994:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011998:	4630      	mov	r0, r6
 801199a:	b011      	add	sp, #68	@ 0x44
 801199c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801199e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80119a2:	e7ee      	b.n	8011982 <rcl_take_request+0x4a>
 80119a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80119a8:	b193      	cbz	r3, 80119d0 <rcl_take_request+0x98>
 80119aa:	682b      	ldr	r3, [r5, #0]
 80119ac:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d0e6      	beq.n	8011982 <rcl_take_request+0x4a>
 80119b4:	463a      	mov	r2, r7
 80119b6:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 80119ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80119bc:	e9cd 6700 	strd	r6, r7, [sp]
 80119c0:	9302      	str	r3, [sp, #8]
 80119c2:	2101      	movs	r1, #1
 80119c4:	f000 f844 	bl	8011a50 <rcl_send_service_event_message>
 80119c8:	4606      	mov	r6, r0
 80119ca:	e7da      	b.n	8011982 <rcl_take_request+0x4a>
 80119cc:	260b      	movs	r6, #11
 80119ce:	e7d8      	b.n	8011982 <rcl_take_request+0x4a>
 80119d0:	f240 2659 	movw	r6, #601	@ 0x259
 80119d4:	e7d5      	b.n	8011982 <rcl_take_request+0x4a>
 80119d6:	bf00      	nop

080119d8 <rcl_send_response>:
 80119d8:	b350      	cbz	r0, 8011a30 <rcl_send_response+0x58>
 80119da:	b570      	push	{r4, r5, r6, lr}
 80119dc:	6803      	ldr	r3, [r0, #0]
 80119de:	b084      	sub	sp, #16
 80119e0:	4604      	mov	r4, r0
 80119e2:	b1cb      	cbz	r3, 8011a18 <rcl_send_response+0x40>
 80119e4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80119e8:	b1b0      	cbz	r0, 8011a18 <rcl_send_response+0x40>
 80119ea:	460e      	mov	r6, r1
 80119ec:	b1e9      	cbz	r1, 8011a2a <rcl_send_response+0x52>
 80119ee:	4615      	mov	r5, r2
 80119f0:	b1da      	cbz	r2, 8011a2a <rcl_send_response+0x52>
 80119f2:	f003 fbd5 	bl	80151a0 <rmw_send_response>
 80119f6:	b998      	cbnz	r0, 8011a20 <rcl_send_response+0x48>
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80119fe:	b16b      	cbz	r3, 8011a1c <rcl_send_response+0x44>
 8011a00:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8011a04:	462a      	mov	r2, r5
 8011a06:	e9cd 0100 	strd	r0, r1, [sp]
 8011a0a:	9602      	str	r6, [sp, #8]
 8011a0c:	2102      	movs	r1, #2
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f000 f81e 	bl	8011a50 <rcl_send_service_event_message>
 8011a14:	b004      	add	sp, #16
 8011a16:	bd70      	pop	{r4, r5, r6, pc}
 8011a18:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011a1c:	b004      	add	sp, #16
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	2802      	cmp	r0, #2
 8011a22:	bf18      	it	ne
 8011a24:	2001      	movne	r0, #1
 8011a26:	b004      	add	sp, #16
 8011a28:	bd70      	pop	{r4, r5, r6, pc}
 8011a2a:	200b      	movs	r0, #11
 8011a2c:	b004      	add	sp, #16
 8011a2e:	bd70      	pop	{r4, r5, r6, pc}
 8011a30:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011a34:	4770      	bx	lr
 8011a36:	bf00      	nop

08011a38 <rcl_service_is_valid>:
 8011a38:	b130      	cbz	r0, 8011a48 <rcl_service_is_valid+0x10>
 8011a3a:	6800      	ldr	r0, [r0, #0]
 8011a3c:	b120      	cbz	r0, 8011a48 <rcl_service_is_valid+0x10>
 8011a3e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011a42:	3800      	subs	r0, #0
 8011a44:	bf18      	it	ne
 8011a46:	2001      	movne	r0, #1
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	0000      	movs	r0, r0
	...

08011a50 <rcl_send_service_event_message>:
 8011a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a52:	b093      	sub	sp, #76	@ 0x4c
 8011a54:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8011a56:	b17a      	cbz	r2, 8011a78 <rcl_send_service_event_message+0x28>
 8011a58:	b176      	cbz	r6, 8011a78 <rcl_send_service_event_message+0x28>
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	b150      	cbz	r0, 8011a74 <rcl_send_service_event_message+0x24>
 8011a5e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8011a62:	b13b      	cbz	r3, 8011a74 <rcl_send_service_event_message+0x24>
 8011a64:	68c0      	ldr	r0, [r0, #12]
 8011a66:	460f      	mov	r7, r1
 8011a68:	4615      	mov	r5, r2
 8011a6a:	f000 f9bb 	bl	8011de4 <rcl_clock_valid>
 8011a6e:	b108      	cbz	r0, 8011a74 <rcl_send_service_event_message+0x24>
 8011a70:	7a23      	ldrb	r3, [r4, #8]
 8011a72:	b92b      	cbnz	r3, 8011a80 <rcl_send_service_event_message+0x30>
 8011a74:	2501      	movs	r5, #1
 8011a76:	e000      	b.n	8011a7a <rcl_send_service_event_message+0x2a>
 8011a78:	250b      	movs	r5, #11
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	b013      	add	sp, #76	@ 0x4c
 8011a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a80:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8011a84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a88:	f10d 0c0c 	add.w	ip, sp, #12
 8011a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a90:	f8de 3000 	ldr.w	r3, [lr]
 8011a94:	f8cc 3000 	str.w	r3, [ip]
 8011a98:	a803      	add	r0, sp, #12
 8011a9a:	f7f9 fae5 	bl	800b068 <rcutils_allocator_is_valid>
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d0ea      	beq.n	8011a78 <rcl_send_service_event_message+0x28>
 8011aa2:	6820      	ldr	r0, [r4, #0]
 8011aa4:	f7f8 fb7c 	bl	800a1a0 <rcl_publisher_is_valid>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d045      	beq.n	8011b38 <rcl_send_service_event_message+0xe8>
 8011aac:	4669      	mov	r1, sp
 8011aae:	68e0      	ldr	r0, [r4, #12]
 8011ab0:	f000 fa10 	bl	8011ed4 <rcl_clock_get_now>
 8011ab4:	4601      	mov	r1, r0
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	d13b      	bne.n	8011b32 <rcl_send_service_event_message+0xe2>
 8011aba:	2220      	movs	r2, #32
 8011abc:	eb0d 0002 	add.w	r0, sp, r2
 8011ac0:	f006 fe6c 	bl	801879c <memset>
 8011ac4:	a324      	add	r3, pc, #144	@ (adr r3, 8011b58 <rcl_send_service_event_message+0x108>)
 8011ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ace:	f88d 7020 	strb.w	r7, [sp, #32]
 8011ad2:	f7ee fc05 	bl	80002e0 <__aeabi_ldivmod>
 8011ad6:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8011ada:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8011ade:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011ae2:	7a23      	ldrb	r3, [r4, #8]
 8011ae4:	6830      	ldr	r0, [r6, #0]
 8011ae6:	6871      	ldr	r1, [r6, #4]
 8011ae8:	68b2      	ldr	r2, [r6, #8]
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	68f3      	ldr	r3, [r6, #12]
 8011aee:	bf08      	it	eq
 8011af0:	2500      	moveq	r5, #0
 8011af2:	ae0b      	add	r6, sp, #44	@ 0x2c
 8011af4:	2f01      	cmp	r7, #1
 8011af6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011af8:	d821      	bhi.n	8011b3e <rcl_send_service_event_message+0xee>
 8011afa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011afe:	462a      	mov	r2, r5
 8011b00:	a808      	add	r0, sp, #32
 8011b02:	699d      	ldr	r5, [r3, #24]
 8011b04:	a903      	add	r1, sp, #12
 8011b06:	2300      	movs	r3, #0
 8011b08:	47a8      	blx	r5
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	2e00      	cmp	r6, #0
 8011b0e:	d0b1      	beq.n	8011a74 <rcl_send_service_event_message+0x24>
 8011b10:	4631      	mov	r1, r6
 8011b12:	6820      	ldr	r0, [r4, #0]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f7f8 fb1d 	bl	800a154 <rcl_publish>
 8011b1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011b1e:	4605      	mov	r5, r0
 8011b20:	69db      	ldr	r3, [r3, #28]
 8011b22:	a903      	add	r1, sp, #12
 8011b24:	4630      	mov	r0, r6
 8011b26:	4798      	blx	r3
 8011b28:	2d00      	cmp	r5, #0
 8011b2a:	d0a6      	beq.n	8011a7a <rcl_send_service_event_message+0x2a>
 8011b2c:	f7f9 fac8 	bl	800b0c0 <rcutils_reset_error>
 8011b30:	e7a3      	b.n	8011a7a <rcl_send_service_event_message+0x2a>
 8011b32:	f7f9 fac5 	bl	800b0c0 <rcutils_reset_error>
 8011b36:	e79d      	b.n	8011a74 <rcl_send_service_event_message+0x24>
 8011b38:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8011b3c:	e79d      	b.n	8011a7a <rcl_send_service_event_message+0x2a>
 8011b3e:	1eb9      	subs	r1, r7, #2
 8011b40:	2901      	cmp	r1, #1
 8011b42:	d8f6      	bhi.n	8011b32 <rcl_send_service_event_message+0xe2>
 8011b44:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011b48:	462b      	mov	r3, r5
 8011b4a:	a808      	add	r0, sp, #32
 8011b4c:	6995      	ldr	r5, [r2, #24]
 8011b4e:	a903      	add	r1, sp, #12
 8011b50:	2200      	movs	r2, #0
 8011b52:	47a8      	blx	r5
 8011b54:	4606      	mov	r6, r0
 8011b56:	e7d9      	b.n	8011b0c <rcl_send_service_event_message+0xbc>
 8011b58:	3b9aca00 	.word	0x3b9aca00
 8011b5c:	00000000 	.word	0x00000000

08011b60 <rcl_get_zero_initialized_subscription>:
 8011b60:	4b01      	ldr	r3, [pc, #4]	@ (8011b68 <rcl_get_zero_initialized_subscription+0x8>)
 8011b62:	6818      	ldr	r0, [r3, #0]
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop
 8011b68:	0801a25c 	.word	0x0801a25c

08011b6c <rcl_subscription_init>:
 8011b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b70:	b089      	sub	sp, #36	@ 0x24
 8011b72:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8011b74:	b1d6      	cbz	r6, 8011bac <rcl_subscription_init+0x40>
 8011b76:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	4648      	mov	r0, r9
 8011b7e:	460d      	mov	r5, r1
 8011b80:	4690      	mov	r8, r2
 8011b82:	461f      	mov	r7, r3
 8011b84:	f7f9 fa70 	bl	800b068 <rcutils_allocator_is_valid>
 8011b88:	b180      	cbz	r0, 8011bac <rcl_subscription_init+0x40>
 8011b8a:	b17c      	cbz	r4, 8011bac <rcl_subscription_init+0x40>
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	f7ff fd95 	bl	80116bc <rcl_node_is_valid>
 8011b92:	2800      	cmp	r0, #0
 8011b94:	d054      	beq.n	8011c40 <rcl_subscription_init+0xd4>
 8011b96:	f1b8 0f00 	cmp.w	r8, #0
 8011b9a:	d007      	beq.n	8011bac <rcl_subscription_init+0x40>
 8011b9c:	b137      	cbz	r7, 8011bac <rcl_subscription_init+0x40>
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	b14b      	cbz	r3, 8011bb6 <rcl_subscription_init+0x4a>
 8011ba2:	2764      	movs	r7, #100	@ 0x64
 8011ba4:	4638      	mov	r0, r7
 8011ba6:	b009      	add	sp, #36	@ 0x24
 8011ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bac:	270b      	movs	r7, #11
 8011bae:	4638      	mov	r0, r7
 8011bb0:	b009      	add	sp, #36	@ 0x24
 8011bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bb6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011bba:	aa07      	add	r2, sp, #28
 8011bbc:	9205      	str	r2, [sp, #20]
 8011bbe:	9307      	str	r3, [sp, #28]
 8011bc0:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011bc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011bc8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011bcc:	4639      	mov	r1, r7
 8011bce:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f7ff fe02 	bl	80117dc <rcl_node_resolve_name>
 8011bd8:	4607      	mov	r7, r0
 8011bda:	2800      	cmp	r0, #0
 8011bdc:	d15f      	bne.n	8011c9e <rcl_subscription_init+0x132>
 8011bde:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011be2:	21d0      	movs	r1, #208	@ 0xd0
 8011be4:	2001      	movs	r0, #1
 8011be6:	4798      	blx	r3
 8011be8:	6020      	str	r0, [r4, #0]
 8011bea:	2800      	cmp	r0, #0
 8011bec:	d05d      	beq.n	8011caa <rcl_subscription_init+0x13e>
 8011bee:	2278      	movs	r2, #120	@ 0x78
 8011bf0:	4631      	mov	r1, r6
 8011bf2:	f006 feae 	bl	8018952 <memcpy>
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f7ff fd82 	bl	8011700 <rcl_node_get_rmw_handle>
 8011bfc:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8011c00:	9300      	str	r3, [sp, #0]
 8011c02:	9a07      	ldr	r2, [sp, #28]
 8011c04:	6827      	ldr	r7, [r4, #0]
 8011c06:	4641      	mov	r1, r8
 8011c08:	4633      	mov	r3, r6
 8011c0a:	f003 fbb1 	bl	8015370 <rmw_create_subscription>
 8011c0e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 8011c12:	6827      	ldr	r7, [r4, #0]
 8011c14:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8011c18:	b338      	cbz	r0, 8011c6a <rcl_subscription_init+0xfe>
 8011c1a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8011c1e:	f003 fc87 	bl	8015530 <rmw_subscription_get_actual_qos>
 8011c22:	4607      	mov	r7, r0
 8011c24:	b988      	cbnz	r0, 8011c4a <rcl_subscription_init+0xde>
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8011c2c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8011c30:	9807      	ldr	r0, [sp, #28]
 8011c32:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011c34:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011c36:	4798      	blx	r3
 8011c38:	4638      	mov	r0, r7
 8011c3a:	b009      	add	sp, #36	@ 0x24
 8011c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c40:	27c8      	movs	r7, #200	@ 0xc8
 8011c42:	4638      	mov	r0, r7
 8011c44:	b009      	add	sp, #36	@ 0x24
 8011c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c4a:	6827      	ldr	r7, [r4, #0]
 8011c4c:	b32f      	cbz	r7, 8011c9a <rcl_subscription_init+0x12e>
 8011c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011c52:	b153      	cbz	r3, 8011c6a <rcl_subscription_init+0xfe>
 8011c54:	4628      	mov	r0, r5
 8011c56:	f7ff fd53 	bl	8011700 <rcl_node_get_rmw_handle>
 8011c5a:	6823      	ldr	r3, [r4, #0]
 8011c5c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8011c60:	f003 fc74 	bl	801554c <rmw_destroy_subscription>
 8011c64:	6827      	ldr	r7, [r4, #0]
 8011c66:	4638      	mov	r0, r7
 8011c68:	b197      	cbz	r7, 8011c90 <rcl_subscription_init+0x124>
 8011c6a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f7f9 f9fa 	bl	800b068 <rcutils_allocator_is_valid>
 8011c74:	b1e8      	cbz	r0, 8011cb2 <rcl_subscription_init+0x146>
 8011c76:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c78:	b1d8      	cbz	r0, 8011cb2 <rcl_subscription_init+0x146>
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	f002 fb94 	bl	80143a8 <rmw_subscription_content_filter_options_fini>
 8011c80:	4605      	mov	r5, r0
 8011c82:	b9a0      	cbnz	r0, 8011cae <rcl_subscription_init+0x142>
 8011c84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c88:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011c8a:	4798      	blx	r3
 8011c8c:	6820      	ldr	r0, [r4, #0]
 8011c8e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8011c90:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011c92:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011c94:	4798      	blx	r3
 8011c96:	2300      	movs	r3, #0
 8011c98:	6023      	str	r3, [r4, #0]
 8011c9a:	2701      	movs	r7, #1
 8011c9c:	e7c8      	b.n	8011c30 <rcl_subscription_init+0xc4>
 8011c9e:	2867      	cmp	r0, #103	@ 0x67
 8011ca0:	d0c6      	beq.n	8011c30 <rcl_subscription_init+0xc4>
 8011ca2:	2869      	cmp	r0, #105	@ 0x69
 8011ca4:	d007      	beq.n	8011cb6 <rcl_subscription_init+0x14a>
 8011ca6:	280a      	cmp	r0, #10
 8011ca8:	d1f7      	bne.n	8011c9a <rcl_subscription_init+0x12e>
 8011caa:	270a      	movs	r7, #10
 8011cac:	e7c0      	b.n	8011c30 <rcl_subscription_init+0xc4>
 8011cae:	f7ff f93d 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8011cb2:	6820      	ldr	r0, [r4, #0]
 8011cb4:	e7ec      	b.n	8011c90 <rcl_subscription_init+0x124>
 8011cb6:	2767      	movs	r7, #103	@ 0x67
 8011cb8:	e7ba      	b.n	8011c30 <rcl_subscription_init+0xc4>
 8011cba:	bf00      	nop

08011cbc <rcl_subscription_get_default_options>:
 8011cbc:	b510      	push	{r4, lr}
 8011cbe:	4907      	ldr	r1, [pc, #28]	@ (8011cdc <rcl_subscription_get_default_options+0x20>)
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	2250      	movs	r2, #80	@ 0x50
 8011cc4:	f006 fe45 	bl	8018952 <memcpy>
 8011cc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011ccc:	f7f9 f9a0 	bl	800b010 <rcutils_get_default_allocator>
 8011cd0:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8011cd4:	f002 fb82 	bl	80143dc <rmw_get_default_subscription_options>
 8011cd8:	4620      	mov	r0, r4
 8011cda:	bd10      	pop	{r4, pc}
 8011cdc:	0801a260 	.word	0x0801a260

08011ce0 <rcl_take>:
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d04b      	beq.n	8011d7c <rcl_take+0x9c>
 8011ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce8:	4615      	mov	r5, r2
 8011cea:	6802      	ldr	r2, [r0, #0]
 8011cec:	b0a0      	sub	sp, #128	@ 0x80
 8011cee:	4604      	mov	r4, r0
 8011cf0:	2a00      	cmp	r2, #0
 8011cf2:	d03b      	beq.n	8011d6c <rcl_take+0x8c>
 8011cf4:	461f      	mov	r7, r3
 8011cf6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d036      	beq.n	8011d6c <rcl_take+0x8c>
 8011cfe:	460e      	mov	r6, r1
 8011d00:	2900      	cmp	r1, #0
 8011d02:	d039      	beq.n	8011d78 <rcl_take+0x98>
 8011d04:	2d00      	cmp	r5, #0
 8011d06:	d03d      	beq.n	8011d84 <rcl_take+0xa4>
 8011d08:	a802      	add	r0, sp, #8
 8011d0a:	f002 fbf3 	bl	80144f4 <rmw_get_zero_initialized_message_info>
 8011d0e:	6823      	ldr	r3, [r4, #0]
 8011d10:	f10d 0c08 	add.w	ip, sp, #8
 8011d14:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8011d18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d1c:	46ae      	mov	lr, r5
 8011d1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d32:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011d36:	462b      	mov	r3, r5
 8011d38:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011d3c:	f04f 0800 	mov.w	r8, #0
 8011d40:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8011d44:	4631      	mov	r1, r6
 8011d46:	4620      	mov	r0, r4
 8011d48:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8011d4c:	9700      	str	r7, [sp, #0]
 8011d4e:	f003 fc5d 	bl	801560c <rmw_take_with_info>
 8011d52:	4603      	mov	r3, r0
 8011d54:	b9c0      	cbnz	r0, 8011d88 <rcl_take+0xa8>
 8011d56:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8011d5a:	f240 1291 	movw	r2, #401	@ 0x191
 8011d5e:	2900      	cmp	r1, #0
 8011d60:	bf08      	it	eq
 8011d62:	4613      	moveq	r3, r2
 8011d64:	4618      	mov	r0, r3
 8011d66:	b020      	add	sp, #128	@ 0x80
 8011d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d6c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011d70:	4618      	mov	r0, r3
 8011d72:	b020      	add	sp, #128	@ 0x80
 8011d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d78:	230b      	movs	r3, #11
 8011d7a:	e7f3      	b.n	8011d64 <rcl_take+0x84>
 8011d7c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011d80:	4618      	mov	r0, r3
 8011d82:	4770      	bx	lr
 8011d84:	ad12      	add	r5, sp, #72	@ 0x48
 8011d86:	e7bf      	b.n	8011d08 <rcl_take+0x28>
 8011d88:	f7ff f8d0 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	e7e9      	b.n	8011d64 <rcl_take+0x84>

08011d90 <rcl_subscription_get_rmw_handle>:
 8011d90:	b118      	cbz	r0, 8011d9a <rcl_subscription_get_rmw_handle+0xa>
 8011d92:	6800      	ldr	r0, [r0, #0]
 8011d94:	b108      	cbz	r0, 8011d9a <rcl_subscription_get_rmw_handle+0xa>
 8011d96:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8011d9a:	4770      	bx	lr

08011d9c <rcl_subscription_is_valid>:
 8011d9c:	b130      	cbz	r0, 8011dac <rcl_subscription_is_valid+0x10>
 8011d9e:	6800      	ldr	r0, [r0, #0]
 8011da0:	b120      	cbz	r0, 8011dac <rcl_subscription_is_valid+0x10>
 8011da2:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8011da6:	3800      	subs	r0, #0
 8011da8:	bf18      	it	ne
 8011daa:	2001      	movne	r0, #1
 8011dac:	4770      	bx	lr
 8011dae:	bf00      	nop

08011db0 <rcl_get_system_time>:
 8011db0:	4608      	mov	r0, r1
 8011db2:	f7f9 b9a1 	b.w	800b0f8 <rcutils_system_time_now>
 8011db6:	bf00      	nop

08011db8 <rcl_get_steady_time>:
 8011db8:	4608      	mov	r0, r1
 8011dba:	f7f9 b9c7 	b.w	800b14c <rcutils_steady_time_now>
 8011dbe:	bf00      	nop

08011dc0 <rcl_get_ros_time>:
 8011dc0:	7a03      	ldrb	r3, [r0, #8]
 8011dc2:	b510      	push	{r4, lr}
 8011dc4:	460c      	mov	r4, r1
 8011dc6:	b143      	cbz	r3, 8011dda <rcl_get_ros_time+0x1a>
 8011dc8:	2105      	movs	r1, #5
 8011dca:	f001 ff81 	bl	8013cd0 <__atomic_load_8>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	e9c4 2300 	strd	r2, r3, [r4]
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	bd10      	pop	{r4, pc}
 8011dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dde:	4608      	mov	r0, r1
 8011de0:	f7f9 b98a 	b.w	800b0f8 <rcutils_system_time_now>

08011de4 <rcl_clock_valid>:
 8011de4:	b138      	cbz	r0, 8011df6 <rcl_clock_valid+0x12>
 8011de6:	7803      	ldrb	r3, [r0, #0]
 8011de8:	b123      	cbz	r3, 8011df4 <rcl_clock_valid+0x10>
 8011dea:	68c0      	ldr	r0, [r0, #12]
 8011dec:	3800      	subs	r0, #0
 8011dee:	bf18      	it	ne
 8011df0:	2001      	movne	r0, #1
 8011df2:	4770      	bx	lr
 8011df4:	4618      	mov	r0, r3
 8011df6:	4770      	bx	lr

08011df8 <rcl_clock_init>:
 8011df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dfa:	4605      	mov	r5, r0
 8011dfc:	4610      	mov	r0, r2
 8011dfe:	4614      	mov	r4, r2
 8011e00:	460e      	mov	r6, r1
 8011e02:	f7f9 f931 	bl	800b068 <rcutils_allocator_is_valid>
 8011e06:	b128      	cbz	r0, 8011e14 <rcl_clock_init+0x1c>
 8011e08:	2d03      	cmp	r5, #3
 8011e0a:	d803      	bhi.n	8011e14 <rcl_clock_init+0x1c>
 8011e0c:	e8df f005 	tbb	[pc, r5]
 8011e10:	044c291a 	.word	0x044c291a
 8011e14:	200b      	movs	r0, #11
 8011e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e18:	2e00      	cmp	r6, #0
 8011e1a:	d0fb      	beq.n	8011e14 <rcl_clock_init+0x1c>
 8011e1c:	2c00      	cmp	r4, #0
 8011e1e:	d0f9      	beq.n	8011e14 <rcl_clock_init+0x1c>
 8011e20:	2300      	movs	r3, #0
 8011e22:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011e26:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8011ecc <rcl_clock_init+0xd4>
 8011e2a:	6133      	str	r3, [r6, #16]
 8011e2c:	f106 0514 	add.w	r5, r6, #20
 8011e30:	2703      	movs	r7, #3
 8011e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e36:	6823      	ldr	r3, [r4, #0]
 8011e38:	602b      	str	r3, [r5, #0]
 8011e3a:	f8c6 c00c 	str.w	ip, [r6, #12]
 8011e3e:	7037      	strb	r7, [r6, #0]
 8011e40:	2000      	movs	r0, #0
 8011e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e44:	2e00      	cmp	r6, #0
 8011e46:	d0e5      	beq.n	8011e14 <rcl_clock_init+0x1c>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	7033      	strb	r3, [r6, #0]
 8011e4c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011e50:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e56:	f106 0514 	add.w	r5, r6, #20
 8011e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	602b      	str	r3, [r5, #0]
 8011e60:	e7ee      	b.n	8011e40 <rcl_clock_init+0x48>
 8011e62:	2e00      	cmp	r6, #0
 8011e64:	d0d6      	beq.n	8011e14 <rcl_clock_init+0x1c>
 8011e66:	2c00      	cmp	r4, #0
 8011e68:	d0d4      	beq.n	8011e14 <rcl_clock_init+0x1c>
 8011e6a:	2700      	movs	r7, #0
 8011e6c:	7037      	strb	r7, [r6, #0]
 8011e6e:	46a4      	mov	ip, r4
 8011e70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011e74:	f106 0514 	add.w	r5, r6, #20
 8011e78:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011e7c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e82:	f8dc 3000 	ldr.w	r3, [ip]
 8011e86:	602b      	str	r3, [r5, #0]
 8011e88:	6921      	ldr	r1, [r4, #16]
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	2010      	movs	r0, #16
 8011e8e:	4798      	blx	r3
 8011e90:	6130      	str	r0, [r6, #16]
 8011e92:	b1b8      	cbz	r0, 8011ec4 <rcl_clock_init+0xcc>
 8011e94:	2200      	movs	r2, #0
 8011e96:	2300      	movs	r3, #0
 8011e98:	e9c0 2300 	strd	r2, r3, [r0]
 8011e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8011ec8 <rcl_clock_init+0xd0>)
 8011e9e:	7207      	strb	r7, [r0, #8]
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	60f2      	str	r2, [r6, #12]
 8011ea4:	7033      	strb	r3, [r6, #0]
 8011ea6:	e7cb      	b.n	8011e40 <rcl_clock_init+0x48>
 8011ea8:	2e00      	cmp	r6, #0
 8011eaa:	d0b3      	beq.n	8011e14 <rcl_clock_init+0x1c>
 8011eac:	2c00      	cmp	r4, #0
 8011eae:	d0b1      	beq.n	8011e14 <rcl_clock_init+0x1c>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011eb6:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8011ed0 <rcl_clock_init+0xd8>
 8011eba:	6133      	str	r3, [r6, #16]
 8011ebc:	f106 0514 	add.w	r5, r6, #20
 8011ec0:	2702      	movs	r7, #2
 8011ec2:	e7b6      	b.n	8011e32 <rcl_clock_init+0x3a>
 8011ec4:	200a      	movs	r0, #10
 8011ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ec8:	08011dc1 	.word	0x08011dc1
 8011ecc:	08011db9 	.word	0x08011db9
 8011ed0:	08011db1 	.word	0x08011db1

08011ed4 <rcl_clock_get_now>:
 8011ed4:	b140      	cbz	r0, 8011ee8 <rcl_clock_get_now+0x14>
 8011ed6:	b139      	cbz	r1, 8011ee8 <rcl_clock_get_now+0x14>
 8011ed8:	7803      	ldrb	r3, [r0, #0]
 8011eda:	b11b      	cbz	r3, 8011ee4 <rcl_clock_get_now+0x10>
 8011edc:	68c3      	ldr	r3, [r0, #12]
 8011ede:	b10b      	cbz	r3, 8011ee4 <rcl_clock_get_now+0x10>
 8011ee0:	6900      	ldr	r0, [r0, #16]
 8011ee2:	4718      	bx	r3
 8011ee4:	2001      	movs	r0, #1
 8011ee6:	4770      	bx	lr
 8011ee8:	200b      	movs	r0, #11
 8011eea:	4770      	bx	lr

08011eec <rcl_is_enabled_ros_time_override>:
 8011eec:	b158      	cbz	r0, 8011f06 <rcl_is_enabled_ros_time_override+0x1a>
 8011eee:	b151      	cbz	r1, 8011f06 <rcl_is_enabled_ros_time_override+0x1a>
 8011ef0:	7803      	ldrb	r3, [r0, #0]
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d105      	bne.n	8011f02 <rcl_is_enabled_ros_time_override+0x16>
 8011ef6:	6902      	ldr	r2, [r0, #16]
 8011ef8:	b11a      	cbz	r2, 8011f02 <rcl_is_enabled_ros_time_override+0x16>
 8011efa:	7a13      	ldrb	r3, [r2, #8]
 8011efc:	700b      	strb	r3, [r1, #0]
 8011efe:	2000      	movs	r0, #0
 8011f00:	4770      	bx	lr
 8011f02:	2001      	movs	r0, #1
 8011f04:	4770      	bx	lr
 8011f06:	200b      	movs	r0, #11
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop

08011f0c <rcl_clock_add_jump_callback>:
 8011f0c:	b082      	sub	sp, #8
 8011f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f12:	a906      	add	r1, sp, #24
 8011f14:	e881 000c 	stmia.w	r1, {r2, r3}
 8011f18:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8011f1c:	b320      	cbz	r0, 8011f68 <rcl_clock_add_jump_callback+0x5c>
 8011f1e:	4605      	mov	r5, r0
 8011f20:	3014      	adds	r0, #20
 8011f22:	f7f9 f8a1 	bl	800b068 <rcutils_allocator_is_valid>
 8011f26:	b1f8      	cbz	r0, 8011f68 <rcl_clock_add_jump_callback+0x5c>
 8011f28:	b1f7      	cbz	r7, 8011f68 <rcl_clock_add_jump_callback+0x5c>
 8011f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	db1b      	blt.n	8011f68 <rcl_clock_add_jump_callback+0x5c>
 8011f30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011f34:	2a01      	cmp	r2, #1
 8011f36:	f173 0300 	sbcs.w	r3, r3, #0
 8011f3a:	da15      	bge.n	8011f68 <rcl_clock_add_jump_callback+0x5c>
 8011f3c:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8011f40:	2c00      	cmp	r4, #0
 8011f42:	d042      	beq.n	8011fca <rcl_clock_add_jump_callback+0xbe>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2200      	movs	r2, #0
 8011f48:	e003      	b.n	8011f52 <rcl_clock_add_jump_callback+0x46>
 8011f4a:	4294      	cmp	r4, r2
 8011f4c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8011f50:	d011      	beq.n	8011f76 <rcl_clock_add_jump_callback+0x6a>
 8011f52:	6819      	ldr	r1, [r3, #0]
 8011f54:	42b9      	cmp	r1, r7
 8011f56:	f102 0201 	add.w	r2, r2, #1
 8011f5a:	d1f6      	bne.n	8011f4a <rcl_clock_add_jump_callback+0x3e>
 8011f5c:	6a19      	ldr	r1, [r3, #32]
 8011f5e:	42b1      	cmp	r1, r6
 8011f60:	d1f3      	bne.n	8011f4a <rcl_clock_add_jump_callback+0x3e>
 8011f62:	f04f 0e01 	mov.w	lr, #1
 8011f66:	e001      	b.n	8011f6c <rcl_clock_add_jump_callback+0x60>
 8011f68:	f04f 0e0b 	mov.w	lr, #11
 8011f6c:	4670      	mov	r0, lr
 8011f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f72:	b002      	add	sp, #8
 8011f74:	4770      	bx	lr
 8011f76:	3401      	adds	r4, #1
 8011f78:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011f7c:	00e1      	lsls	r1, r4, #3
 8011f7e:	69eb      	ldr	r3, [r5, #28]
 8011f80:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011f82:	4798      	blx	r3
 8011f84:	b1f0      	cbz	r0, 8011fc4 <rcl_clock_add_jump_callback+0xb8>
 8011f86:	68ab      	ldr	r3, [r5, #8]
 8011f88:	6068      	str	r0, [r5, #4]
 8011f8a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011f8e:	f10d 0c18 	add.w	ip, sp, #24
 8011f92:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8011f96:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8011f9a:	f103 0801 	add.w	r8, r3, #1
 8011f9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fa2:	f104 0708 	add.w	r7, r4, #8
 8011fa6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fa8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011fac:	f04f 0e00 	mov.w	lr, #0
 8011fb0:	e887 0003 	stmia.w	r7, {r0, r1}
 8011fb4:	6226      	str	r6, [r4, #32]
 8011fb6:	4670      	mov	r0, lr
 8011fb8:	f8c5 8008 	str.w	r8, [r5, #8]
 8011fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc0:	b002      	add	sp, #8
 8011fc2:	4770      	bx	lr
 8011fc4:	f04f 0e0a 	mov.w	lr, #10
 8011fc8:	e7d0      	b.n	8011f6c <rcl_clock_add_jump_callback+0x60>
 8011fca:	2128      	movs	r1, #40	@ 0x28
 8011fcc:	e7d7      	b.n	8011f7e <rcl_clock_add_jump_callback+0x72>
 8011fce:	bf00      	nop

08011fd0 <rcl_clock_remove_jump_callback>:
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d05a      	beq.n	801208a <rcl_clock_remove_jump_callback+0xba>
 8011fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd8:	4605      	mov	r5, r0
 8011fda:	3014      	adds	r0, #20
 8011fdc:	460f      	mov	r7, r1
 8011fde:	4692      	mov	sl, r2
 8011fe0:	f7f9 f842 	bl	800b068 <rcutils_allocator_is_valid>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d03f      	beq.n	8012068 <rcl_clock_remove_jump_callback+0x98>
 8011fe8:	2f00      	cmp	r7, #0
 8011fea:	d03d      	beq.n	8012068 <rcl_clock_remove_jump_callback+0x98>
 8011fec:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8011ff0:	f1b8 0f00 	cmp.w	r8, #0
 8011ff4:	d00c      	beq.n	8012010 <rcl_clock_remove_jump_callback+0x40>
 8011ff6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011ffa:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8011ffe:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8012002:	464c      	mov	r4, r9
 8012004:	6823      	ldr	r3, [r4, #0]
 8012006:	42bb      	cmp	r3, r7
 8012008:	d005      	beq.n	8012016 <rcl_clock_remove_jump_callback+0x46>
 801200a:	3428      	adds	r4, #40	@ 0x28
 801200c:	42b4      	cmp	r4, r6
 801200e:	d1f9      	bne.n	8012004 <rcl_clock_remove_jump_callback+0x34>
 8012010:	2001      	movs	r0, #1
 8012012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012016:	6a23      	ldr	r3, [r4, #32]
 8012018:	3428      	adds	r4, #40	@ 0x28
 801201a:	42b4      	cmp	r4, r6
 801201c:	d02c      	beq.n	8012078 <rcl_clock_remove_jump_callback+0xa8>
 801201e:	4553      	cmp	r3, sl
 8012020:	d1f0      	bne.n	8012004 <rcl_clock_remove_jump_callback+0x34>
 8012022:	46a6      	mov	lr, r4
 8012024:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012028:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801202c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012030:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012038:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801203c:	3428      	adds	r4, #40	@ 0x28
 801203e:	42a6      	cmp	r6, r4
 8012040:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012044:	d1ed      	bne.n	8012022 <rcl_clock_remove_jump_callback+0x52>
 8012046:	f108 34ff 	add.w	r4, r8, #4294967295
 801204a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801204c:	60ac      	str	r4, [r5, #8]
 801204e:	b174      	cbz	r4, 801206e <rcl_clock_remove_jump_callback+0x9e>
 8012050:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012054:	00e1      	lsls	r1, r4, #3
 8012056:	69eb      	ldr	r3, [r5, #28]
 8012058:	4648      	mov	r0, r9
 801205a:	4798      	blx	r3
 801205c:	4604      	mov	r4, r0
 801205e:	b1b0      	cbz	r0, 801208e <rcl_clock_remove_jump_callback+0xbe>
 8012060:	606c      	str	r4, [r5, #4]
 8012062:	2000      	movs	r0, #0
 8012064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012068:	200b      	movs	r0, #11
 801206a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206e:	69ab      	ldr	r3, [r5, #24]
 8012070:	4611      	mov	r1, r2
 8012072:	4648      	mov	r0, r9
 8012074:	4798      	blx	r3
 8012076:	e7f3      	b.n	8012060 <rcl_clock_remove_jump_callback+0x90>
 8012078:	4553      	cmp	r3, sl
 801207a:	d1c9      	bne.n	8012010 <rcl_clock_remove_jump_callback+0x40>
 801207c:	f108 34ff 	add.w	r4, r8, #4294967295
 8012080:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012082:	60ac      	str	r4, [r5, #8]
 8012084:	2c00      	cmp	r4, #0
 8012086:	d1e3      	bne.n	8012050 <rcl_clock_remove_jump_callback+0x80>
 8012088:	e7f1      	b.n	801206e <rcl_clock_remove_jump_callback+0x9e>
 801208a:	200b      	movs	r0, #11
 801208c:	4770      	bx	lr
 801208e:	200a      	movs	r0, #10
 8012090:	e7eb      	b.n	801206a <rcl_clock_remove_jump_callback+0x9a>
 8012092:	bf00      	nop

08012094 <_rcl_timer_time_jump>:
 8012094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012098:	4681      	mov	r9, r0
 801209a:	b087      	sub	sp, #28
 801209c:	4614      	mov	r4, r2
 801209e:	b131      	cbz	r1, 80120ae <_rcl_timer_time_jump+0x1a>
 80120a0:	7803      	ldrb	r3, [r0, #0]
 80120a2:	3b02      	subs	r3, #2
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d93e      	bls.n	8012126 <_rcl_timer_time_jump+0x92>
 80120a8:	b007      	add	sp, #28
 80120aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ae:	6810      	ldr	r0, [r2, #0]
 80120b0:	a904      	add	r1, sp, #16
 80120b2:	f7ff ff0f 	bl	8011ed4 <rcl_clock_get_now>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d1f6      	bne.n	80120a8 <_rcl_timer_time_jump+0x14>
 80120ba:	f104 0a20 	add.w	sl, r4, #32
 80120be:	2105      	movs	r1, #5
 80120c0:	4650      	mov	r0, sl
 80120c2:	f001 fe05 	bl	8013cd0 <__atomic_load_8>
 80120c6:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 80120ca:	4680      	mov	r8, r0
 80120cc:	460e      	mov	r6, r1
 80120ce:	4658      	mov	r0, fp
 80120d0:	2105      	movs	r1, #5
 80120d2:	f001 fdfd 	bl	8013cd0 <__atomic_load_8>
 80120d6:	4607      	mov	r7, r0
 80120d8:	460d      	mov	r5, r1
 80120da:	f104 0018 	add.w	r0, r4, #24
 80120de:	2105      	movs	r1, #5
 80120e0:	f001 fdf6 	bl	8013cd0 <__atomic_load_8>
 80120e4:	f899 3000 	ldrb.w	r3, [r9]
 80120e8:	9003      	str	r0, [sp, #12]
 80120ea:	3b02      	subs	r3, #2
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	4689      	mov	r9, r1
 80120f0:	d935      	bls.n	801215e <_rcl_timer_time_jump+0xca>
 80120f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120f6:	42ba      	cmp	r2, r7
 80120f8:	eb73 0505 	sbcs.w	r5, r3, r5
 80120fc:	da57      	bge.n	80121ae <_rcl_timer_time_jump+0x11a>
 80120fe:	4542      	cmp	r2, r8
 8012100:	eb73 0606 	sbcs.w	r6, r3, r6
 8012104:	dad0      	bge.n	80120a8 <_rcl_timer_time_jump+0x14>
 8012106:	1882      	adds	r2, r0, r2
 8012108:	f04f 0405 	mov.w	r4, #5
 801210c:	eb43 0309 	adc.w	r3, r3, r9
 8012110:	4658      	mov	r0, fp
 8012112:	9400      	str	r4, [sp, #0]
 8012114:	f001 fe12 	bl	8013d3c <__atomic_store_8>
 8012118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801211c:	9400      	str	r4, [sp, #0]
 801211e:	4650      	mov	r0, sl
 8012120:	f001 fe0c 	bl	8013d3c <__atomic_store_8>
 8012124:	e7c0      	b.n	80120a8 <_rcl_timer_time_jump+0x14>
 8012126:	6810      	ldr	r0, [r2, #0]
 8012128:	a904      	add	r1, sp, #16
 801212a:	f7ff fed3 	bl	8011ed4 <rcl_clock_get_now>
 801212e:	2800      	cmp	r0, #0
 8012130:	d1ba      	bne.n	80120a8 <_rcl_timer_time_jump+0x14>
 8012132:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012136:	4313      	orrs	r3, r2
 8012138:	d0b6      	beq.n	80120a8 <_rcl_timer_time_jump+0x14>
 801213a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801213e:	2105      	movs	r1, #5
 8012140:	f001 fdc6 	bl	8013cd0 <__atomic_load_8>
 8012144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012148:	1a82      	subs	r2, r0, r2
 801214a:	f04f 0005 	mov.w	r0, #5
 801214e:	9000      	str	r0, [sp, #0]
 8012150:	eb61 0303 	sbc.w	r3, r1, r3
 8012154:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8012158:	f001 fdf0 	bl	8013d3c <__atomic_store_8>
 801215c:	e7a4      	b.n	80120a8 <_rcl_timer_time_jump+0x14>
 801215e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012162:	4313      	orrs	r3, r2
 8012164:	d0a0      	beq.n	80120a8 <_rcl_timer_time_jump+0x14>
 8012166:	2605      	movs	r6, #5
 8012168:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801216c:	2300      	movs	r3, #0
 801216e:	9600      	str	r6, [sp, #0]
 8012170:	2200      	movs	r2, #0
 8012172:	f001 fe19 	bl	8013da8 <__atomic_exchange_8>
 8012176:	ea51 0300 	orrs.w	r3, r1, r0
 801217a:	4604      	mov	r4, r0
 801217c:	460d      	mov	r5, r1
 801217e:	d093      	beq.n	80120a8 <_rcl_timer_time_jump+0x14>
 8012180:	9a04      	ldr	r2, [sp, #16]
 8012182:	9b05      	ldr	r3, [sp, #20]
 8012184:	9600      	str	r6, [sp, #0]
 8012186:	1b12      	subs	r2, r2, r4
 8012188:	eb63 0301 	sbc.w	r3, r3, r1
 801218c:	9903      	ldr	r1, [sp, #12]
 801218e:	1852      	adds	r2, r2, r1
 8012190:	eb43 0309 	adc.w	r3, r3, r9
 8012194:	4658      	mov	r0, fp
 8012196:	f001 fdd1 	bl	8013d3c <__atomic_store_8>
 801219a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801219e:	1b12      	subs	r2, r2, r4
 80121a0:	9600      	str	r6, [sp, #0]
 80121a2:	eb63 0305 	sbc.w	r3, r3, r5
 80121a6:	4650      	mov	r0, sl
 80121a8:	f001 fdc8 	bl	8013d3c <__atomic_store_8>
 80121ac:	e77c      	b.n	80120a8 <_rcl_timer_time_jump+0x14>
 80121ae:	f104 0008 	add.w	r0, r4, #8
 80121b2:	f005 fa1f 	bl	80175f4 <rcl_trigger_guard_condition>
 80121b6:	e777      	b.n	80120a8 <_rcl_timer_time_jump+0x14>

080121b8 <rcl_get_zero_initialized_timer>:
 80121b8:	4b01      	ldr	r3, [pc, #4]	@ (80121c0 <rcl_get_zero_initialized_timer+0x8>)
 80121ba:	6818      	ldr	r0, [r3, #0]
 80121bc:	4770      	bx	lr
 80121be:	bf00      	nop
 80121c0:	0801a2b0 	.word	0x0801a2b0
 80121c4:	00000000 	.word	0x00000000

080121c8 <rcl_timer_init2>:
 80121c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121cc:	b0ae      	sub	sp, #184	@ 0xb8
 80121ce:	4604      	mov	r4, r0
 80121d0:	a839      	add	r0, sp, #228	@ 0xe4
 80121d2:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 80121d6:	460d      	mov	r5, r1
 80121d8:	4691      	mov	r9, r2
 80121da:	f7f8 ff45 	bl	800b068 <rcutils_allocator_is_valid>
 80121de:	2800      	cmp	r0, #0
 80121e0:	f000 8097 	beq.w	8012312 <rcl_timer_init2+0x14a>
 80121e4:	2c00      	cmp	r4, #0
 80121e6:	f000 8094 	beq.w	8012312 <rcl_timer_init2+0x14a>
 80121ea:	2d00      	cmp	r5, #0
 80121ec:	f000 8091 	beq.w	8012312 <rcl_timer_init2+0x14a>
 80121f0:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	f2c0 808d 	blt.w	8012312 <rcl_timer_init2+0x14a>
 80121f8:	6823      	ldr	r3, [r4, #0]
 80121fa:	b123      	cbz	r3, 8012206 <rcl_timer_init2+0x3e>
 80121fc:	2664      	movs	r6, #100	@ 0x64
 80121fe:	4630      	mov	r0, r6
 8012200:	b02e      	add	sp, #184	@ 0xb8
 8012202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012206:	a908      	add	r1, sp, #32
 8012208:	4628      	mov	r0, r5
 801220a:	f7ff fe63 	bl	8011ed4 <rcl_clock_get_now>
 801220e:	4606      	mov	r6, r0
 8012210:	2800      	cmp	r0, #0
 8012212:	d1f4      	bne.n	80121fe <rcl_timer_init2+0x36>
 8012214:	ae06      	add	r6, sp, #24
 8012216:	4630      	mov	r0, r6
 8012218:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 801221c:	f005 f90c 	bl	8017438 <rcl_get_zero_initialized_guard_condition>
 8012220:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012224:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8012228:	ae0b      	add	r6, sp, #44	@ 0x2c
 801222a:	e88a 0003 	stmia.w	sl, {r0, r1}
 801222e:	4630      	mov	r0, r6
 8012230:	f005 f9da 	bl	80175e8 <rcl_guard_condition_get_default_options>
 8012234:	ab0d      	add	r3, sp, #52	@ 0x34
 8012236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801223a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801223e:	4649      	mov	r1, r9
 8012240:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012244:	4650      	mov	r0, sl
 8012246:	f005 f901 	bl	801744c <rcl_guard_condition_init>
 801224a:	4606      	mov	r6, r0
 801224c:	2800      	cmp	r0, #0
 801224e:	d1d6      	bne.n	80121fe <rcl_timer_init2+0x36>
 8012250:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8012252:	931a      	str	r3, [sp, #104]	@ 0x68
 8012254:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8012258:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801225c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012260:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8012262:	902a      	str	r0, [sp, #168]	@ 0xa8
 8012264:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 8012268:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8012340 <rcl_timer_init2+0x178>
 801226c:	19d0      	adds	r0, r2, r7
 801226e:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8012270:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8012274:	eb43 0107 	adc.w	r1, r3, r7
 8012278:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801227c:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012280:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012288:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 801228c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012290:	f8dc 3000 	ldr.w	r3, [ip]
 8012294:	f8ce 3000 	str.w	r3, [lr]
 8012298:	f088 0801 	eor.w	r8, r8, #1
 801229c:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 80122a0:	4619      	mov	r1, r3
 80122a2:	2060      	movs	r0, #96	@ 0x60
 80122a4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80122a6:	4798      	blx	r3
 80122a8:	4680      	mov	r8, r0
 80122aa:	6020      	str	r0, [r4, #0]
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d035      	beq.n	801231c <rcl_timer_init2+0x154>
 80122b0:	a916      	add	r1, sp, #88	@ 0x58
 80122b2:	2260      	movs	r2, #96	@ 0x60
 80122b4:	f006 fb4d 	bl	8018952 <memcpy>
 80122b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d19e      	bne.n	80121fe <rcl_timer_init2+0x36>
 80122c0:	2001      	movs	r0, #1
 80122c2:	2100      	movs	r1, #0
 80122c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80122c8:	f04f 30ff 	mov.w	r0, #4294967295
 80122cc:	f04f 31ff 	mov.w	r1, #4294967295
 80122d0:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80122d4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80122d8:	4b1b      	ldr	r3, [pc, #108]	@ (8012348 <rcl_timer_init2+0x180>)
 80122da:	9304      	str	r3, [sp, #16]
 80122dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80122e0:	ab12      	add	r3, sp, #72	@ 0x48
 80122e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80122e4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80122e8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80122ec:	4628      	mov	r0, r5
 80122ee:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80122f2:	f7ff fe0b 	bl	8011f0c <rcl_clock_add_jump_callback>
 80122f6:	4605      	mov	r5, r0
 80122f8:	2800      	cmp	r0, #0
 80122fa:	d080      	beq.n	80121fe <rcl_timer_init2+0x36>
 80122fc:	4650      	mov	r0, sl
 80122fe:	f005 f951 	bl	80175a4 <rcl_guard_condition_fini>
 8012302:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8012304:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8012306:	6820      	ldr	r0, [r4, #0]
 8012308:	4798      	blx	r3
 801230a:	2300      	movs	r3, #0
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	462e      	mov	r6, r5
 8012310:	e775      	b.n	80121fe <rcl_timer_init2+0x36>
 8012312:	260b      	movs	r6, #11
 8012314:	4630      	mov	r0, r6
 8012316:	b02e      	add	sp, #184	@ 0xb8
 8012318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801231c:	4650      	mov	r0, sl
 801231e:	f005 f941 	bl	80175a4 <rcl_guard_condition_fini>
 8012322:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	2b01      	cmp	r3, #1
 8012328:	d001      	beq.n	801232e <rcl_timer_init2+0x166>
 801232a:	260a      	movs	r6, #10
 801232c:	e767      	b.n	80121fe <rcl_timer_init2+0x36>
 801232e:	4906      	ldr	r1, [pc, #24]	@ (8012348 <rcl_timer_init2+0x180>)
 8012330:	4622      	mov	r2, r4
 8012332:	4628      	mov	r0, r5
 8012334:	f7ff fe4c 	bl	8011fd0 <rcl_clock_remove_jump_callback>
 8012338:	e7f7      	b.n	801232a <rcl_timer_init2+0x162>
 801233a:	bf00      	nop
 801233c:	f3af 8000 	nop.w
	...
 8012348:	08012095 	.word	0x08012095

0801234c <rcl_timer_clock>:
 801234c:	b130      	cbz	r0, 801235c <rcl_timer_clock+0x10>
 801234e:	b129      	cbz	r1, 801235c <rcl_timer_clock+0x10>
 8012350:	6803      	ldr	r3, [r0, #0]
 8012352:	b12b      	cbz	r3, 8012360 <rcl_timer_clock+0x14>
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	600b      	str	r3, [r1, #0]
 8012358:	2000      	movs	r0, #0
 801235a:	4770      	bx	lr
 801235c:	200b      	movs	r0, #11
 801235e:	4770      	bx	lr
 8012360:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop

08012368 <rcl_timer_call>:
 8012368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	b087      	sub	sp, #28
 801236e:	2800      	cmp	r0, #0
 8012370:	d067      	beq.n	8012442 <rcl_timer_call+0xda>
 8012372:	6803      	ldr	r3, [r0, #0]
 8012374:	4604      	mov	r4, r0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d068      	beq.n	801244c <rcl_timer_call+0xe4>
 801237a:	f3bf 8f5b 	dmb	ish
 801237e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012382:	f3bf 8f5b 	dmb	ish
 8012386:	2b00      	cmp	r3, #0
 8012388:	d150      	bne.n	801242c <rcl_timer_call+0xc4>
 801238a:	6803      	ldr	r3, [r0, #0]
 801238c:	a904      	add	r1, sp, #16
 801238e:	6818      	ldr	r0, [r3, #0]
 8012390:	f7ff fda0 	bl	8011ed4 <rcl_clock_get_now>
 8012394:	4605      	mov	r5, r0
 8012396:	2800      	cmp	r0, #0
 8012398:	d144      	bne.n	8012424 <rcl_timer_call+0xbc>
 801239a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	db4a      	blt.n	8012438 <rcl_timer_call+0xd0>
 80123a2:	6820      	ldr	r0, [r4, #0]
 80123a4:	f04f 0a05 	mov.w	sl, #5
 80123a8:	f8cd a000 	str.w	sl, [sp]
 80123ac:	3020      	adds	r0, #32
 80123ae:	f001 fcfb 	bl	8013da8 <__atomic_exchange_8>
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	f3bf 8f5b 	dmb	ish
 80123b8:	4680      	mov	r8, r0
 80123ba:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80123be:	f3bf 8f5b 	dmb	ish
 80123c2:	6820      	ldr	r0, [r4, #0]
 80123c4:	4689      	mov	r9, r1
 80123c6:	3028      	adds	r0, #40	@ 0x28
 80123c8:	4651      	mov	r1, sl
 80123ca:	f001 fc81 	bl	8013cd0 <__atomic_load_8>
 80123ce:	4606      	mov	r6, r0
 80123d0:	6820      	ldr	r0, [r4, #0]
 80123d2:	460f      	mov	r7, r1
 80123d4:	3018      	adds	r0, #24
 80123d6:	4651      	mov	r1, sl
 80123d8:	f001 fc7a 	bl	8013cd0 <__atomic_load_8>
 80123dc:	1836      	adds	r6, r6, r0
 80123de:	eb41 0707 	adc.w	r7, r1, r7
 80123e2:	4602      	mov	r2, r0
 80123e4:	460b      	mov	r3, r1
 80123e6:	4682      	mov	sl, r0
 80123e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80123ec:	42b0      	cmp	r0, r6
 80123ee:	eb71 0c07 	sbcs.w	ip, r1, r7
 80123f2:	db04      	blt.n	80123fe <rcl_timer_call+0x96>
 80123f4:	ea53 0c02 	orrs.w	ip, r3, r2
 80123f8:	d12b      	bne.n	8012452 <rcl_timer_call+0xea>
 80123fa:	4606      	mov	r6, r0
 80123fc:	460f      	mov	r7, r1
 80123fe:	6820      	ldr	r0, [r4, #0]
 8012400:	2105      	movs	r1, #5
 8012402:	4632      	mov	r2, r6
 8012404:	463b      	mov	r3, r7
 8012406:	3028      	adds	r0, #40	@ 0x28
 8012408:	9100      	str	r1, [sp, #0]
 801240a:	f001 fc97 	bl	8013d3c <__atomic_store_8>
 801240e:	f1bb 0f00 	cmp.w	fp, #0
 8012412:	d007      	beq.n	8012424 <rcl_timer_call+0xbc>
 8012414:	9a04      	ldr	r2, [sp, #16]
 8012416:	9b05      	ldr	r3, [sp, #20]
 8012418:	ebb2 0208 	subs.w	r2, r2, r8
 801241c:	4620      	mov	r0, r4
 801241e:	eb63 0309 	sbc.w	r3, r3, r9
 8012422:	47d8      	blx	fp
 8012424:	4628      	mov	r0, r5
 8012426:	b007      	add	sp, #28
 8012428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242c:	f240 3521 	movw	r5, #801	@ 0x321
 8012430:	4628      	mov	r0, r5
 8012432:	b007      	add	sp, #28
 8012434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012438:	2501      	movs	r5, #1
 801243a:	4628      	mov	r0, r5
 801243c:	b007      	add	sp, #28
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	250b      	movs	r5, #11
 8012444:	4628      	mov	r0, r5
 8012446:	b007      	add	sp, #28
 8012448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012450:	e7e8      	b.n	8012424 <rcl_timer_call+0xbc>
 8012452:	1b80      	subs	r0, r0, r6
 8012454:	eb61 0107 	sbc.w	r1, r1, r7
 8012458:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801245c:	f7ed ff40 	bl	80002e0 <__aeabi_ldivmod>
 8012460:	9b02      	ldr	r3, [sp, #8]
 8012462:	3001      	adds	r0, #1
 8012464:	f141 0100 	adc.w	r1, r1, #0
 8012468:	fb00 f303 	mul.w	r3, r0, r3
 801246c:	fb01 330a 	mla	r3, r1, sl, r3
 8012470:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012474:	1830      	adds	r0, r6, r0
 8012476:	4453      	add	r3, sl
 8012478:	eb43 0707 	adc.w	r7, r3, r7
 801247c:	4606      	mov	r6, r0
 801247e:	e7be      	b.n	80123fe <rcl_timer_call+0x96>

08012480 <rcl_timer_is_ready>:
 8012480:	b398      	cbz	r0, 80124ea <rcl_timer_is_ready+0x6a>
 8012482:	b530      	push	{r4, r5, lr}
 8012484:	6803      	ldr	r3, [r0, #0]
 8012486:	b083      	sub	sp, #12
 8012488:	4604      	mov	r4, r0
 801248a:	b383      	cbz	r3, 80124ee <rcl_timer_is_ready+0x6e>
 801248c:	460d      	mov	r5, r1
 801248e:	b349      	cbz	r1, 80124e4 <rcl_timer_is_ready+0x64>
 8012490:	f3bf 8f5b 	dmb	ish
 8012494:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012498:	f3bf 8f5b 	dmb	ish
 801249c:	b9fb      	cbnz	r3, 80124de <rcl_timer_is_ready+0x5e>
 801249e:	6803      	ldr	r3, [r0, #0]
 80124a0:	4669      	mov	r1, sp
 80124a2:	6818      	ldr	r0, [r3, #0]
 80124a4:	f7ff fd16 	bl	8011ed4 <rcl_clock_get_now>
 80124a8:	b128      	cbz	r0, 80124b6 <rcl_timer_is_ready+0x36>
 80124aa:	f240 3321 	movw	r3, #801	@ 0x321
 80124ae:	4298      	cmp	r0, r3
 80124b0:	d015      	beq.n	80124de <rcl_timer_is_ready+0x5e>
 80124b2:	b003      	add	sp, #12
 80124b4:	bd30      	pop	{r4, r5, pc}
 80124b6:	6820      	ldr	r0, [r4, #0]
 80124b8:	2105      	movs	r1, #5
 80124ba:	3028      	adds	r0, #40	@ 0x28
 80124bc:	f001 fc08 	bl	8013cd0 <__atomic_load_8>
 80124c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80124c4:	1ac0      	subs	r0, r0, r3
 80124c6:	eb61 0102 	sbc.w	r1, r1, r2
 80124ca:	2801      	cmp	r0, #1
 80124cc:	f171 0100 	sbcs.w	r1, r1, #0
 80124d0:	bfb4      	ite	lt
 80124d2:	2301      	movlt	r3, #1
 80124d4:	2300      	movge	r3, #0
 80124d6:	702b      	strb	r3, [r5, #0]
 80124d8:	2000      	movs	r0, #0
 80124da:	b003      	add	sp, #12
 80124dc:	bd30      	pop	{r4, r5, pc}
 80124de:	2300      	movs	r3, #0
 80124e0:	702b      	strb	r3, [r5, #0]
 80124e2:	e7f9      	b.n	80124d8 <rcl_timer_is_ready+0x58>
 80124e4:	200b      	movs	r0, #11
 80124e6:	b003      	add	sp, #12
 80124e8:	bd30      	pop	{r4, r5, pc}
 80124ea:	200b      	movs	r0, #11
 80124ec:	4770      	bx	lr
 80124ee:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80124f2:	e7de      	b.n	80124b2 <rcl_timer_is_ready+0x32>

080124f4 <rcl_timer_get_next_call_time>:
 80124f4:	b1d8      	cbz	r0, 801252e <rcl_timer_get_next_call_time+0x3a>
 80124f6:	b538      	push	{r3, r4, r5, lr}
 80124f8:	6803      	ldr	r3, [r0, #0]
 80124fa:	b1d3      	cbz	r3, 8012532 <rcl_timer_get_next_call_time+0x3e>
 80124fc:	460c      	mov	r4, r1
 80124fe:	b1a1      	cbz	r1, 801252a <rcl_timer_get_next_call_time+0x36>
 8012500:	f3bf 8f5b 	dmb	ish
 8012504:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012508:	f3bf 8f5b 	dmb	ish
 801250c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8012510:	b943      	cbnz	r3, 8012524 <rcl_timer_get_next_call_time+0x30>
 8012512:	6800      	ldr	r0, [r0, #0]
 8012514:	2105      	movs	r1, #5
 8012516:	3028      	adds	r0, #40	@ 0x28
 8012518:	f001 fbda 	bl	8013cd0 <__atomic_load_8>
 801251c:	e9c4 0100 	strd	r0, r1, [r4]
 8012520:	4628      	mov	r0, r5
 8012522:	bd38      	pop	{r3, r4, r5, pc}
 8012524:	f240 3021 	movw	r0, #801	@ 0x321
 8012528:	bd38      	pop	{r3, r4, r5, pc}
 801252a:	200b      	movs	r0, #11
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	200b      	movs	r0, #11
 8012530:	4770      	bx	lr
 8012532:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8012536:	bd38      	pop	{r3, r4, r5, pc}

08012538 <rcl_timer_get_guard_condition>:
 8012538:	b130      	cbz	r0, 8012548 <rcl_timer_get_guard_condition+0x10>
 801253a:	6800      	ldr	r0, [r0, #0]
 801253c:	b120      	cbz	r0, 8012548 <rcl_timer_get_guard_condition+0x10>
 801253e:	68c3      	ldr	r3, [r0, #12]
 8012540:	b10b      	cbz	r3, 8012546 <rcl_timer_get_guard_condition+0xe>
 8012542:	3008      	adds	r0, #8
 8012544:	4770      	bx	lr
 8012546:	4618      	mov	r0, r3
 8012548:	4770      	bx	lr
 801254a:	bf00      	nop

0801254c <rcl_get_zero_initialized_wait_set>:
 801254c:	b510      	push	{r4, lr}
 801254e:	4c08      	ldr	r4, [pc, #32]	@ (8012570 <rcl_get_zero_initialized_wait_set+0x24>)
 8012550:	4686      	mov	lr, r0
 8012552:	4684      	mov	ip, r0
 8012554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012556:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801255a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801255c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012562:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012566:	6823      	ldr	r3, [r4, #0]
 8012568:	f8cc 3000 	str.w	r3, [ip]
 801256c:	4670      	mov	r0, lr
 801256e:	bd10      	pop	{r4, pc}
 8012570:	0801a2b4 	.word	0x0801a2b4

08012574 <rcl_wait_set_is_valid>:
 8012574:	b118      	cbz	r0, 801257e <rcl_wait_set_is_valid+0xa>
 8012576:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012578:	3800      	subs	r0, #0
 801257a:	bf18      	it	ne
 801257c:	2001      	movne	r0, #1
 801257e:	4770      	bx	lr

08012580 <rcl_wait_set_fini>:
 8012580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012584:	2800      	cmp	r0, #0
 8012586:	f000 80ab 	beq.w	80126e0 <rcl_wait_set_fini+0x160>
 801258a:	4605      	mov	r5, r0
 801258c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801258e:	2800      	cmp	r0, #0
 8012590:	f000 809c 	beq.w	80126cc <rcl_wait_set_fini+0x14c>
 8012594:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8012596:	f003 fa17 	bl	80159c8 <rmw_destroy_wait_set>
 801259a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801259c:	4680      	mov	r8, r0
 801259e:	2800      	cmp	r0, #0
 80125a0:	f040 808e 	bne.w	80126c0 <rcl_wait_set_fini+0x140>
 80125a4:	2c00      	cmp	r4, #0
 80125a6:	f000 80a0 	beq.w	80126ea <rcl_wait_set_fini+0x16a>
 80125aa:	6828      	ldr	r0, [r5, #0]
 80125ac:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80125ae:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80125b2:	2600      	movs	r6, #0
 80125b4:	606e      	str	r6, [r5, #4]
 80125b6:	6026      	str	r6, [r4, #0]
 80125b8:	b118      	cbz	r0, 80125c2 <rcl_wait_set_fini+0x42>
 80125ba:	4649      	mov	r1, r9
 80125bc:	47b8      	blx	r7
 80125be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80125c0:	602e      	str	r6, [r5, #0]
 80125c2:	68a0      	ldr	r0, [r4, #8]
 80125c4:	b128      	cbz	r0, 80125d2 <rcl_wait_set_fini+0x52>
 80125c6:	4649      	mov	r1, r9
 80125c8:	47b8      	blx	r7
 80125ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80125cc:	2300      	movs	r3, #0
 80125ce:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80125d2:	68a8      	ldr	r0, [r5, #8]
 80125d4:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80125d6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80125d8:	f04f 0900 	mov.w	r9, #0
 80125dc:	f8c5 900c 	str.w	r9, [r5, #12]
 80125e0:	f8c4 900c 	str.w	r9, [r4, #12]
 80125e4:	b130      	cbz	r0, 80125f4 <rcl_wait_set_fini+0x74>
 80125e6:	4639      	mov	r1, r7
 80125e8:	47b0      	blx	r6
 80125ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80125ec:	f8c5 9008 	str.w	r9, [r5, #8]
 80125f0:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80125f2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80125f4:	6960      	ldr	r0, [r4, #20]
 80125f6:	f04f 0900 	mov.w	r9, #0
 80125fa:	f8c4 9010 	str.w	r9, [r4, #16]
 80125fe:	b130      	cbz	r0, 801260e <rcl_wait_set_fini+0x8e>
 8012600:	4639      	mov	r1, r7
 8012602:	47b0      	blx	r6
 8012604:	f8c4 9014 	str.w	r9, [r4, #20]
 8012608:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801260a:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 801260c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801260e:	6928      	ldr	r0, [r5, #16]
 8012610:	f04f 0900 	mov.w	r9, #0
 8012614:	f8c5 9014 	str.w	r9, [r5, #20]
 8012618:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 801261c:	b130      	cbz	r0, 801262c <rcl_wait_set_fini+0xac>
 801261e:	4639      	mov	r1, r7
 8012620:	47b0      	blx	r6
 8012622:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012624:	f8c5 9010 	str.w	r9, [r5, #16]
 8012628:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 801262a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801262c:	69a8      	ldr	r0, [r5, #24]
 801262e:	f04f 0900 	mov.w	r9, #0
 8012632:	f8c5 901c 	str.w	r9, [r5, #28]
 8012636:	f8c4 9018 	str.w	r9, [r4, #24]
 801263a:	b120      	cbz	r0, 8012646 <rcl_wait_set_fini+0xc6>
 801263c:	4639      	mov	r1, r7
 801263e:	47b0      	blx	r6
 8012640:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012642:	f8c5 9018 	str.w	r9, [r5, #24]
 8012646:	6a20      	ldr	r0, [r4, #32]
 8012648:	b128      	cbz	r0, 8012656 <rcl_wait_set_fini+0xd6>
 801264a:	4639      	mov	r1, r7
 801264c:	47b0      	blx	r6
 801264e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012650:	2300      	movs	r3, #0
 8012652:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012656:	6a28      	ldr	r0, [r5, #32]
 8012658:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801265a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801265e:	2600      	movs	r6, #0
 8012660:	626e      	str	r6, [r5, #36]	@ 0x24
 8012662:	6266      	str	r6, [r4, #36]	@ 0x24
 8012664:	b118      	cbz	r0, 801266e <rcl_wait_set_fini+0xee>
 8012666:	4649      	mov	r1, r9
 8012668:	47b8      	blx	r7
 801266a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801266c:	622e      	str	r6, [r5, #32]
 801266e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012670:	b128      	cbz	r0, 801267e <rcl_wait_set_fini+0xfe>
 8012672:	4649      	mov	r1, r9
 8012674:	47b8      	blx	r7
 8012676:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012678:	2300      	movs	r3, #0
 801267a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801267e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012680:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8012682:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012686:	2600      	movs	r6, #0
 8012688:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801268a:	6326      	str	r6, [r4, #48]	@ 0x30
 801268c:	b118      	cbz	r0, 8012696 <rcl_wait_set_fini+0x116>
 801268e:	4649      	mov	r1, r9
 8012690:	47b8      	blx	r7
 8012692:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012694:	62ae      	str	r6, [r5, #40]	@ 0x28
 8012696:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012698:	b1e0      	cbz	r0, 80126d4 <rcl_wait_set_fini+0x154>
 801269a:	4649      	mov	r1, r9
 801269c:	47b8      	blx	r7
 801269e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80126a0:	2300      	movs	r3, #0
 80126a2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80126a6:	4598      	cmp	r8, r3
 80126a8:	bf18      	it	ne
 80126aa:	f44f 7861 	movne.w	r8, #900	@ 0x384
 80126ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80126b0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80126b2:	4620      	mov	r0, r4
 80126b4:	4798      	blx	r3
 80126b6:	2300      	movs	r3, #0
 80126b8:	632b      	str	r3, [r5, #48]	@ 0x30
 80126ba:	4640      	mov	r0, r8
 80126bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c0:	f44f 7861 	mov.w	r8, #900	@ 0x384
 80126c4:	2c00      	cmp	r4, #0
 80126c6:	f47f af70 	bne.w	80125aa <rcl_wait_set_fini+0x2a>
 80126ca:	e7f6      	b.n	80126ba <rcl_wait_set_fini+0x13a>
 80126cc:	4680      	mov	r8, r0
 80126ce:	4640      	mov	r0, r8
 80126d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126d4:	f1b8 0f00 	cmp.w	r8, #0
 80126d8:	bf18      	it	ne
 80126da:	f44f 7861 	movne.w	r8, #900	@ 0x384
 80126de:	e7e6      	b.n	80126ae <rcl_wait_set_fini+0x12e>
 80126e0:	f04f 080b 	mov.w	r8, #11
 80126e4:	4640      	mov	r0, r8
 80126e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ea:	f44f 7861 	mov.w	r8, #900	@ 0x384
 80126ee:	e7e4      	b.n	80126ba <rcl_wait_set_fini+0x13a>

080126f0 <rcl_wait_set_add_subscription>:
 80126f0:	b318      	cbz	r0, 801273a <rcl_wait_set_add_subscription+0x4a>
 80126f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80126f4:	b570      	push	{r4, r5, r6, lr}
 80126f6:	4604      	mov	r4, r0
 80126f8:	b30b      	cbz	r3, 801273e <rcl_wait_set_add_subscription+0x4e>
 80126fa:	b319      	cbz	r1, 8012744 <rcl_wait_set_add_subscription+0x54>
 80126fc:	681d      	ldr	r5, [r3, #0]
 80126fe:	6840      	ldr	r0, [r0, #4]
 8012700:	4285      	cmp	r5, r0
 8012702:	d217      	bcs.n	8012734 <rcl_wait_set_add_subscription+0x44>
 8012704:	6820      	ldr	r0, [r4, #0]
 8012706:	1c6e      	adds	r6, r5, #1
 8012708:	601e      	str	r6, [r3, #0]
 801270a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801270e:	b102      	cbz	r2, 8012712 <rcl_wait_set_add_subscription+0x22>
 8012710:	6015      	str	r5, [r2, #0]
 8012712:	4608      	mov	r0, r1
 8012714:	f7ff fb3c 	bl	8011d90 <rcl_subscription_get_rmw_handle>
 8012718:	b150      	cbz	r0, 8012730 <rcl_wait_set_add_subscription+0x40>
 801271a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801271c:	6842      	ldr	r2, [r0, #4]
 801271e:	689b      	ldr	r3, [r3, #8]
 8012720:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012724:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012726:	6853      	ldr	r3, [r2, #4]
 8012728:	3301      	adds	r3, #1
 801272a:	2000      	movs	r0, #0
 801272c:	6053      	str	r3, [r2, #4]
 801272e:	bd70      	pop	{r4, r5, r6, pc}
 8012730:	2001      	movs	r0, #1
 8012732:	bd70      	pop	{r4, r5, r6, pc}
 8012734:	f240 3086 	movw	r0, #902	@ 0x386
 8012738:	bd70      	pop	{r4, r5, r6, pc}
 801273a:	200b      	movs	r0, #11
 801273c:	4770      	bx	lr
 801273e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012742:	bd70      	pop	{r4, r5, r6, pc}
 8012744:	200b      	movs	r0, #11
 8012746:	bd70      	pop	{r4, r5, r6, pc}

08012748 <rcl_wait_set_clear>:
 8012748:	2800      	cmp	r0, #0
 801274a:	d074      	beq.n	8012836 <rcl_wait_set_clear+0xee>
 801274c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801274e:	b510      	push	{r4, lr}
 8012750:	4604      	mov	r4, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d071      	beq.n	801283a <rcl_wait_set_clear+0xf2>
 8012756:	6800      	ldr	r0, [r0, #0]
 8012758:	b138      	cbz	r0, 801276a <rcl_wait_set_clear+0x22>
 801275a:	6862      	ldr	r2, [r4, #4]
 801275c:	2100      	movs	r1, #0
 801275e:	0092      	lsls	r2, r2, #2
 8012760:	f006 f81c 	bl	801879c <memset>
 8012764:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012766:	2200      	movs	r2, #0
 8012768:	601a      	str	r2, [r3, #0]
 801276a:	68a0      	ldr	r0, [r4, #8]
 801276c:	b138      	cbz	r0, 801277e <rcl_wait_set_clear+0x36>
 801276e:	68e2      	ldr	r2, [r4, #12]
 8012770:	2100      	movs	r1, #0
 8012772:	0092      	lsls	r2, r2, #2
 8012774:	f006 f812 	bl	801879c <memset>
 8012778:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801277a:	2200      	movs	r2, #0
 801277c:	60da      	str	r2, [r3, #12]
 801277e:	69a0      	ldr	r0, [r4, #24]
 8012780:	b138      	cbz	r0, 8012792 <rcl_wait_set_clear+0x4a>
 8012782:	69e2      	ldr	r2, [r4, #28]
 8012784:	2100      	movs	r1, #0
 8012786:	0092      	lsls	r2, r2, #2
 8012788:	f006 f808 	bl	801879c <memset>
 801278c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801278e:	2200      	movs	r2, #0
 8012790:	619a      	str	r2, [r3, #24]
 8012792:	6a20      	ldr	r0, [r4, #32]
 8012794:	b138      	cbz	r0, 80127a6 <rcl_wait_set_clear+0x5e>
 8012796:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012798:	2100      	movs	r1, #0
 801279a:	0092      	lsls	r2, r2, #2
 801279c:	f005 fffe 	bl	801879c <memset>
 80127a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127a2:	2200      	movs	r2, #0
 80127a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80127a6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80127a8:	b138      	cbz	r0, 80127ba <rcl_wait_set_clear+0x72>
 80127aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80127ac:	2100      	movs	r1, #0
 80127ae:	0092      	lsls	r2, r2, #2
 80127b0:	f005 fff4 	bl	801879c <memset>
 80127b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127b6:	2200      	movs	r2, #0
 80127b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80127ba:	6920      	ldr	r0, [r4, #16]
 80127bc:	b138      	cbz	r0, 80127ce <rcl_wait_set_clear+0x86>
 80127be:	6962      	ldr	r2, [r4, #20]
 80127c0:	2100      	movs	r1, #0
 80127c2:	0092      	lsls	r2, r2, #2
 80127c4:	f005 ffea 	bl	801879c <memset>
 80127c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127ca:	2200      	movs	r2, #0
 80127cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80127ce:	6898      	ldr	r0, [r3, #8]
 80127d0:	b138      	cbz	r0, 80127e2 <rcl_wait_set_clear+0x9a>
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	2100      	movs	r1, #0
 80127d6:	0092      	lsls	r2, r2, #2
 80127d8:	f005 ffe0 	bl	801879c <memset>
 80127dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127de:	2200      	movs	r2, #0
 80127e0:	605a      	str	r2, [r3, #4]
 80127e2:	6958      	ldr	r0, [r3, #20]
 80127e4:	b138      	cbz	r0, 80127f6 <rcl_wait_set_clear+0xae>
 80127e6:	691a      	ldr	r2, [r3, #16]
 80127e8:	2100      	movs	r1, #0
 80127ea:	0092      	lsls	r2, r2, #2
 80127ec:	f005 ffd6 	bl	801879c <memset>
 80127f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127f2:	2200      	movs	r2, #0
 80127f4:	611a      	str	r2, [r3, #16]
 80127f6:	6a18      	ldr	r0, [r3, #32]
 80127f8:	b138      	cbz	r0, 801280a <rcl_wait_set_clear+0xc2>
 80127fa:	69da      	ldr	r2, [r3, #28]
 80127fc:	2100      	movs	r1, #0
 80127fe:	0092      	lsls	r2, r2, #2
 8012800:	f005 ffcc 	bl	801879c <memset>
 8012804:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012806:	2200      	movs	r2, #0
 8012808:	61da      	str	r2, [r3, #28]
 801280a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801280c:	b138      	cbz	r0, 801281e <rcl_wait_set_clear+0xd6>
 801280e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012810:	2100      	movs	r1, #0
 8012812:	0092      	lsls	r2, r2, #2
 8012814:	f005 ffc2 	bl	801879c <memset>
 8012818:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801281a:	2200      	movs	r2, #0
 801281c:	629a      	str	r2, [r3, #40]	@ 0x28
 801281e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012820:	b138      	cbz	r0, 8012832 <rcl_wait_set_clear+0xea>
 8012822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012824:	2100      	movs	r1, #0
 8012826:	0092      	lsls	r2, r2, #2
 8012828:	f005 ffb8 	bl	801879c <memset>
 801282c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801282e:	2200      	movs	r2, #0
 8012830:	635a      	str	r2, [r3, #52]	@ 0x34
 8012832:	2000      	movs	r0, #0
 8012834:	bd10      	pop	{r4, pc}
 8012836:	200b      	movs	r0, #11
 8012838:	4770      	bx	lr
 801283a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801283e:	bd10      	pop	{r4, pc}

08012840 <rcl_wait_set_resize>:
 8012840:	2800      	cmp	r0, #0
 8012842:	f000 81a1 	beq.w	8012b88 <rcl_wait_set_resize+0x348>
 8012846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801284a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 801284e:	b083      	sub	sp, #12
 8012850:	4604      	mov	r4, r0
 8012852:	f1ba 0f00 	cmp.w	sl, #0
 8012856:	f000 8199 	beq.w	8012b8c <rcl_wait_set_resize+0x34c>
 801285a:	f04f 0800 	mov.w	r8, #0
 801285e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8012862:	461e      	mov	r6, r3
 8012864:	460f      	mov	r7, r1
 8012866:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 801286a:	4615      	mov	r5, r2
 801286c:	f8c0 8004 	str.w	r8, [r0, #4]
 8012870:	6800      	ldr	r0, [r0, #0]
 8012872:	f8ca 8000 	str.w	r8, [sl]
 8012876:	2900      	cmp	r1, #0
 8012878:	f000 80cf 	beq.w	8012a1a <rcl_wait_set_resize+0x1da>
 801287c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8012880:	464a      	mov	r2, r9
 8012882:	4651      	mov	r1, sl
 8012884:	9301      	str	r3, [sp, #4]
 8012886:	4798      	blx	r3
 8012888:	9b01      	ldr	r3, [sp, #4]
 801288a:	6020      	str	r0, [r4, #0]
 801288c:	2800      	cmp	r0, #0
 801288e:	f000 8109 	beq.w	8012aa4 <rcl_wait_set_resize+0x264>
 8012892:	4652      	mov	r2, sl
 8012894:	4641      	mov	r1, r8
 8012896:	9301      	str	r3, [sp, #4]
 8012898:	f005 ff80 	bl	801879c <memset>
 801289c:	6067      	str	r7, [r4, #4]
 801289e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 80128a0:	9b01      	ldr	r3, [sp, #4]
 80128a2:	68b8      	ldr	r0, [r7, #8]
 80128a4:	f8c7 8004 	str.w	r8, [r7, #4]
 80128a8:	464a      	mov	r2, r9
 80128aa:	4651      	mov	r1, sl
 80128ac:	4798      	blx	r3
 80128ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128b0:	60b8      	str	r0, [r7, #8]
 80128b2:	689f      	ldr	r7, [r3, #8]
 80128b4:	2f00      	cmp	r7, #0
 80128b6:	f000 80f0 	beq.w	8012a9a <rcl_wait_set_resize+0x25a>
 80128ba:	4652      	mov	r2, sl
 80128bc:	4641      	mov	r1, r8
 80128be:	4638      	mov	r0, r7
 80128c0:	f005 ff6c 	bl	801879c <memset>
 80128c4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80128c8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80128cc:	68a0      	ldr	r0, [r4, #8]
 80128ce:	2700      	movs	r7, #0
 80128d0:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 80128d4:	60e7      	str	r7, [r4, #12]
 80128d6:	f8ca 700c 	str.w	r7, [sl, #12]
 80128da:	2d00      	cmp	r5, #0
 80128dc:	f040 80b0 	bne.w	8012a40 <rcl_wait_set_resize+0x200>
 80128e0:	b130      	cbz	r0, 80128f0 <rcl_wait_set_resize+0xb0>
 80128e2:	4641      	mov	r1, r8
 80128e4:	4790      	blx	r2
 80128e6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80128ea:	60a5      	str	r5, [r4, #8]
 80128ec:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80128f0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80128f4:	2700      	movs	r7, #0
 80128f6:	19ad      	adds	r5, r5, r6
 80128f8:	f8ca 7010 	str.w	r7, [sl, #16]
 80128fc:	f040 80b8 	bne.w	8012a70 <rcl_wait_set_resize+0x230>
 8012900:	b148      	cbz	r0, 8012916 <rcl_wait_set_resize+0xd6>
 8012902:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8012906:	4641      	mov	r1, r8
 8012908:	4798      	blx	r3
 801290a:	f8ca 5014 	str.w	r5, [sl, #20]
 801290e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012912:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012916:	6920      	ldr	r0, [r4, #16]
 8012918:	2500      	movs	r5, #0
 801291a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801291e:	6165      	str	r5, [r4, #20]
 8012920:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8012924:	2e00      	cmp	r6, #0
 8012926:	f040 80c1 	bne.w	8012aac <rcl_wait_set_resize+0x26c>
 801292a:	b140      	cbz	r0, 801293e <rcl_wait_set_resize+0xfe>
 801292c:	4641      	mov	r1, r8
 801292e:	47c8      	blx	r9
 8012930:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012934:	6126      	str	r6, [r4, #16]
 8012936:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801293a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801293e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012940:	69a0      	ldr	r0, [r4, #24]
 8012942:	2500      	movs	r5, #0
 8012944:	61e5      	str	r5, [r4, #28]
 8012946:	f8ca 5018 	str.w	r5, [sl, #24]
 801294a:	2b00      	cmp	r3, #0
 801294c:	f040 80c2 	bne.w	8012ad4 <rcl_wait_set_resize+0x294>
 8012950:	b128      	cbz	r0, 801295e <rcl_wait_set_resize+0x11e>
 8012952:	4641      	mov	r1, r8
 8012954:	47c8      	blx	r9
 8012956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012958:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801295c:	61a3      	str	r3, [r4, #24]
 801295e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8012962:	b130      	cbz	r0, 8012972 <rcl_wait_set_resize+0x132>
 8012964:	4641      	mov	r1, r8
 8012966:	47c8      	blx	r9
 8012968:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801296c:	2300      	movs	r3, #0
 801296e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8012972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012974:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8012978:	6a20      	ldr	r0, [r4, #32]
 801297a:	2500      	movs	r5, #0
 801297c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8012980:	6265      	str	r5, [r4, #36]	@ 0x24
 8012982:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8012986:	2b00      	cmp	r3, #0
 8012988:	f000 80c8 	beq.w	8012b1c <rcl_wait_set_resize+0x2dc>
 801298c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8012990:	4632      	mov	r2, r6
 8012992:	4649      	mov	r1, r9
 8012994:	47c0      	blx	r8
 8012996:	6220      	str	r0, [r4, #32]
 8012998:	2800      	cmp	r0, #0
 801299a:	f000 8083 	beq.w	8012aa4 <rcl_wait_set_resize+0x264>
 801299e:	464a      	mov	r2, r9
 80129a0:	4629      	mov	r1, r5
 80129a2:	f005 fefb 	bl	801879c <memset>
 80129a6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80129aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80129ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80129ae:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80129b2:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 80129b6:	4632      	mov	r2, r6
 80129b8:	4649      	mov	r1, r9
 80129ba:	47c0      	blx	r8
 80129bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80129be:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 80129c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	f000 80fb 	beq.w	8012bc0 <rcl_wait_set_resize+0x380>
 80129ca:	464a      	mov	r2, r9
 80129cc:	4629      	mov	r1, r5
 80129ce:	4618      	mov	r0, r3
 80129d0:	f005 fee4 	bl	801879c <memset>
 80129d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80129d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129da:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80129de:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80129e0:	2500      	movs	r5, #0
 80129e2:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80129e6:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80129e8:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	f040 80a9 	bne.w	8012b44 <rcl_wait_set_resize+0x304>
 80129f2:	b128      	cbz	r0, 8012a00 <rcl_wait_set_resize+0x1c0>
 80129f4:	4631      	mov	r1, r6
 80129f6:	47b8      	blx	r7
 80129f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129fa:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80129fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012a00:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012a04:	b128      	cbz	r0, 8012a12 <rcl_wait_set_resize+0x1d2>
 8012a06:	4631      	mov	r1, r6
 8012a08:	47b8      	blx	r7
 8012a0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8012a12:	2000      	movs	r0, #0
 8012a14:	b003      	add	sp, #12
 8012a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a1a:	b120      	cbz	r0, 8012a26 <rcl_wait_set_resize+0x1e6>
 8012a1c:	4649      	mov	r1, r9
 8012a1e:	47d8      	blx	fp
 8012a20:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012a24:	6027      	str	r7, [r4, #0]
 8012a26:	f8da 0008 	ldr.w	r0, [sl, #8]
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	f43f af4c 	beq.w	80128c8 <rcl_wait_set_resize+0x88>
 8012a30:	4649      	mov	r1, r9
 8012a32:	47d8      	blx	fp
 8012a34:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012a38:	2300      	movs	r3, #0
 8012a3a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8012a3e:	e743      	b.n	80128c8 <rcl_wait_set_resize+0x88>
 8012a40:	4642      	mov	r2, r8
 8012a42:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8012a46:	4641      	mov	r1, r8
 8012a48:	4798      	blx	r3
 8012a4a:	60a0      	str	r0, [r4, #8]
 8012a4c:	b350      	cbz	r0, 8012aa4 <rcl_wait_set_resize+0x264>
 8012a4e:	4642      	mov	r2, r8
 8012a50:	4639      	mov	r1, r7
 8012a52:	f005 fea3 	bl	801879c <memset>
 8012a56:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012a5a:	60e5      	str	r5, [r4, #12]
 8012a5c:	2700      	movs	r7, #0
 8012a5e:	19ad      	adds	r5, r5, r6
 8012a60:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012a64:	f8da 0014 	ldr.w	r0, [sl, #20]
 8012a68:	f8ca 7010 	str.w	r7, [sl, #16]
 8012a6c:	f43f af48 	beq.w	8012900 <rcl_wait_set_resize+0xc0>
 8012a70:	00ad      	lsls	r5, r5, #2
 8012a72:	4642      	mov	r2, r8
 8012a74:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8012a78:	4629      	mov	r1, r5
 8012a7a:	4798      	blx	r3
 8012a7c:	4680      	mov	r8, r0
 8012a7e:	f8ca 0014 	str.w	r0, [sl, #20]
 8012a82:	2800      	cmp	r0, #0
 8012a84:	f000 8085 	beq.w	8012b92 <rcl_wait_set_resize+0x352>
 8012a88:	462a      	mov	r2, r5
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	f005 fe86 	bl	801879c <memset>
 8012a90:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012a94:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012a98:	e73d      	b.n	8012916 <rcl_wait_set_resize+0xd6>
 8012a9a:	6820      	ldr	r0, [r4, #0]
 8012a9c:	4649      	mov	r1, r9
 8012a9e:	47d8      	blx	fp
 8012aa0:	e9c4 7700 	strd	r7, r7, [r4]
 8012aa4:	200a      	movs	r0, #10
 8012aa6:	b003      	add	sp, #12
 8012aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aac:	4642      	mov	r2, r8
 8012aae:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8012ab2:	4641      	mov	r1, r8
 8012ab4:	47b8      	blx	r7
 8012ab6:	6120      	str	r0, [r4, #16]
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d0f3      	beq.n	8012aa4 <rcl_wait_set_resize+0x264>
 8012abc:	4642      	mov	r2, r8
 8012abe:	4629      	mov	r1, r5
 8012ac0:	f005 fe6c 	bl	801879c <memset>
 8012ac4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012ac8:	6166      	str	r6, [r4, #20]
 8012aca:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8012ace:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012ad2:	e734      	b.n	801293e <rcl_wait_set_resize+0xfe>
 8012ad4:	009e      	lsls	r6, r3, #2
 8012ad6:	4642      	mov	r2, r8
 8012ad8:	4631      	mov	r1, r6
 8012ada:	47b8      	blx	r7
 8012adc:	61a0      	str	r0, [r4, #24]
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d0e0      	beq.n	8012aa4 <rcl_wait_set_resize+0x264>
 8012ae2:	4632      	mov	r2, r6
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	f005 fe59 	bl	801879c <memset>
 8012aea:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012af0:	61e3      	str	r3, [r4, #28]
 8012af2:	f8da 0020 	ldr.w	r0, [sl, #32]
 8012af6:	f8ca 501c 	str.w	r5, [sl, #28]
 8012afa:	4642      	mov	r2, r8
 8012afc:	4631      	mov	r1, r6
 8012afe:	47b8      	blx	r7
 8012b00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b02:	f8ca 0020 	str.w	r0, [sl, #32]
 8012b06:	6a1f      	ldr	r7, [r3, #32]
 8012b08:	2f00      	cmp	r7, #0
 8012b0a:	d053      	beq.n	8012bb4 <rcl_wait_set_resize+0x374>
 8012b0c:	4632      	mov	r2, r6
 8012b0e:	4629      	mov	r1, r5
 8012b10:	4638      	mov	r0, r7
 8012b12:	f005 fe43 	bl	801879c <memset>
 8012b16:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012b1a:	e72a      	b.n	8012972 <rcl_wait_set_resize+0x132>
 8012b1c:	b128      	cbz	r0, 8012b2a <rcl_wait_set_resize+0x2ea>
 8012b1e:	4631      	mov	r1, r6
 8012b20:	47b8      	blx	r7
 8012b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b24:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012b28:	6223      	str	r3, [r4, #32]
 8012b2a:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	f43f af52 	beq.w	80129d8 <rcl_wait_set_resize+0x198>
 8012b34:	4631      	mov	r1, r6
 8012b36:	47b8      	blx	r7
 8012b38:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8012b42:	e749      	b.n	80129d8 <rcl_wait_set_resize+0x198>
 8012b44:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8012b48:	4632      	mov	r2, r6
 8012b4a:	4649      	mov	r1, r9
 8012b4c:	47c0      	blx	r8
 8012b4e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8012b50:	2800      	cmp	r0, #0
 8012b52:	d0a7      	beq.n	8012aa4 <rcl_wait_set_resize+0x264>
 8012b54:	464a      	mov	r2, r9
 8012b56:	4629      	mov	r1, r5
 8012b58:	f005 fe20 	bl	801879c <memset>
 8012b5c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b64:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012b68:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8012b6c:	4632      	mov	r2, r6
 8012b6e:	4649      	mov	r1, r9
 8012b70:	47c0      	blx	r8
 8012b72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b74:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b7a:	b34b      	cbz	r3, 8012bd0 <rcl_wait_set_resize+0x390>
 8012b7c:	464a      	mov	r2, r9
 8012b7e:	4629      	mov	r1, r5
 8012b80:	4618      	mov	r0, r3
 8012b82:	f005 fe0b 	bl	801879c <memset>
 8012b86:	e744      	b.n	8012a12 <rcl_wait_set_resize+0x1d2>
 8012b88:	200b      	movs	r0, #11
 8012b8a:	4770      	bx	lr
 8012b8c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b90:	e789      	b.n	8012aa6 <rcl_wait_set_resize+0x266>
 8012b92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b94:	68a0      	ldr	r0, [r4, #8]
 8012b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012b98:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012b9a:	4790      	blx	r2
 8012b9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b9e:	6920      	ldr	r0, [r4, #16]
 8012ba0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012ba2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012ba4:	f8c4 800c 	str.w	r8, [r4, #12]
 8012ba8:	f8c4 8008 	str.w	r8, [r4, #8]
 8012bac:	4790      	blx	r2
 8012bae:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8012bb2:	e777      	b.n	8012aa4 <rcl_wait_set_resize+0x264>
 8012bb4:	69a0      	ldr	r0, [r4, #24]
 8012bb6:	4641      	mov	r1, r8
 8012bb8:	47c8      	blx	r9
 8012bba:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8012bbe:	e771      	b.n	8012aa4 <rcl_wait_set_resize+0x264>
 8012bc0:	6a20      	ldr	r0, [r4, #32]
 8012bc2:	9301      	str	r3, [sp, #4]
 8012bc4:	4631      	mov	r1, r6
 8012bc6:	47b8      	blx	r7
 8012bc8:	9b01      	ldr	r3, [sp, #4]
 8012bca:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8012bce:	e769      	b.n	8012aa4 <rcl_wait_set_resize+0x264>
 8012bd0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012bd2:	9301      	str	r3, [sp, #4]
 8012bd4:	4631      	mov	r1, r6
 8012bd6:	47b8      	blx	r7
 8012bd8:	9b01      	ldr	r3, [sp, #4]
 8012bda:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8012bde:	e761      	b.n	8012aa4 <rcl_wait_set_resize+0x264>

08012be0 <rcl_wait_set_init>:
 8012be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012be4:	b084      	sub	sp, #16
 8012be6:	4604      	mov	r4, r0
 8012be8:	a810      	add	r0, sp, #64	@ 0x40
 8012bea:	460d      	mov	r5, r1
 8012bec:	4690      	mov	r8, r2
 8012bee:	461f      	mov	r7, r3
 8012bf0:	f7f8 fa3a 	bl	800b068 <rcutils_allocator_is_valid>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	d068      	beq.n	8012cca <rcl_wait_set_init+0xea>
 8012bf8:	2c00      	cmp	r4, #0
 8012bfa:	d066      	beq.n	8012cca <rcl_wait_set_init+0xea>
 8012bfc:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012bfe:	b126      	cbz	r6, 8012c0a <rcl_wait_set_init+0x2a>
 8012c00:	2564      	movs	r5, #100	@ 0x64
 8012c02:	4628      	mov	r0, r5
 8012c04:	b004      	add	sp, #16
 8012c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d05c      	beq.n	8012cca <rcl_wait_set_init+0xea>
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7fe f9a5 	bl	8010f60 <rcl_context_is_valid>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d05c      	beq.n	8012cd4 <rcl_wait_set_init+0xf4>
 8012c1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012c1c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012c1e:	205c      	movs	r0, #92	@ 0x5c
 8012c20:	4798      	blx	r3
 8012c22:	6320      	str	r0, [r4, #48]	@ 0x30
 8012c24:	2800      	cmp	r0, #0
 8012c26:	d059      	beq.n	8012cdc <rcl_wait_set_init+0xfc>
 8012c28:	4631      	mov	r1, r6
 8012c2a:	225c      	movs	r2, #92	@ 0x5c
 8012c2c:	f005 fdb6 	bl	801879c <memset>
 8012c30:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8012c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c36:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8012c3a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012c3e:	eb03 0e02 	add.w	lr, r3, r2
 8012c42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c44:	449e      	add	lr, r3
 8012c46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c48:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012c4c:	f8d3 a000 	ldr.w	sl, [r3]
 8012c50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012c54:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8012c58:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8012c5c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8012c60:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8012c64:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8012c68:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8012c6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012c6e:	44c6      	add	lr, r8
 8012c70:	f8dc 3000 	ldr.w	r3, [ip]
 8012c74:	6033      	str	r3, [r6, #0]
 8012c76:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8012c7a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8012c7e:	f002 fe99 	bl	80159b4 <rmw_create_wait_set>
 8012c82:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8012c86:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012c88:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012c8a:	b32b      	cbz	r3, 8012cd8 <rcl_wait_set_init+0xf8>
 8012c8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c8e:	9302      	str	r3, [sp, #8]
 8012c90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c92:	9301      	str	r3, [sp, #4]
 8012c94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c96:	9300      	str	r3, [sp, #0]
 8012c98:	4629      	mov	r1, r5
 8012c9a:	463b      	mov	r3, r7
 8012c9c:	4642      	mov	r2, r8
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	f7ff fdce 	bl	8012840 <rcl_wait_set_resize>
 8012ca4:	4605      	mov	r5, r0
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d0ab      	beq.n	8012c02 <rcl_wait_set_init+0x22>
 8012caa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012cac:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012cae:	b133      	cbz	r3, 8012cbe <rcl_wait_set_init+0xde>
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f002 fe89 	bl	80159c8 <rmw_destroy_wait_set>
 8012cb6:	b198      	cbz	r0, 8012ce0 <rcl_wait_set_init+0x100>
 8012cb8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012cba:	f44f 7561 	mov.w	r5, #900	@ 0x384
 8012cbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012cc0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012cc2:	4798      	blx	r3
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	6323      	str	r3, [r4, #48]	@ 0x30
 8012cc8:	e79b      	b.n	8012c02 <rcl_wait_set_init+0x22>
 8012cca:	250b      	movs	r5, #11
 8012ccc:	4628      	mov	r0, r5
 8012cce:	b004      	add	sp, #16
 8012cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cd4:	2565      	movs	r5, #101	@ 0x65
 8012cd6:	e794      	b.n	8012c02 <rcl_wait_set_init+0x22>
 8012cd8:	250a      	movs	r5, #10
 8012cda:	e7f0      	b.n	8012cbe <rcl_wait_set_init+0xde>
 8012cdc:	250a      	movs	r5, #10
 8012cde:	e790      	b.n	8012c02 <rcl_wait_set_init+0x22>
 8012ce0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012ce2:	e7ec      	b.n	8012cbe <rcl_wait_set_init+0xde>

08012ce4 <rcl_wait_set_add_guard_condition>:
 8012ce4:	b318      	cbz	r0, 8012d2e <rcl_wait_set_add_guard_condition+0x4a>
 8012ce6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012ce8:	b570      	push	{r4, r5, r6, lr}
 8012cea:	4604      	mov	r4, r0
 8012cec:	b30b      	cbz	r3, 8012d32 <rcl_wait_set_add_guard_condition+0x4e>
 8012cee:	b319      	cbz	r1, 8012d38 <rcl_wait_set_add_guard_condition+0x54>
 8012cf0:	68dd      	ldr	r5, [r3, #12]
 8012cf2:	68c0      	ldr	r0, [r0, #12]
 8012cf4:	4285      	cmp	r5, r0
 8012cf6:	d217      	bcs.n	8012d28 <rcl_wait_set_add_guard_condition+0x44>
 8012cf8:	68a0      	ldr	r0, [r4, #8]
 8012cfa:	1c6e      	adds	r6, r5, #1
 8012cfc:	60de      	str	r6, [r3, #12]
 8012cfe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012d02:	b102      	cbz	r2, 8012d06 <rcl_wait_set_add_guard_condition+0x22>
 8012d04:	6015      	str	r5, [r2, #0]
 8012d06:	4608      	mov	r0, r1
 8012d08:	f004 fc84 	bl	8017614 <rcl_guard_condition_get_rmw_handle>
 8012d0c:	b150      	cbz	r0, 8012d24 <rcl_wait_set_add_guard_condition+0x40>
 8012d0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d10:	6842      	ldr	r2, [r0, #4]
 8012d12:	695b      	ldr	r3, [r3, #20]
 8012d14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012d1a:	6913      	ldr	r3, [r2, #16]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	2000      	movs	r0, #0
 8012d20:	6113      	str	r3, [r2, #16]
 8012d22:	bd70      	pop	{r4, r5, r6, pc}
 8012d24:	2001      	movs	r0, #1
 8012d26:	bd70      	pop	{r4, r5, r6, pc}
 8012d28:	f240 3086 	movw	r0, #902	@ 0x386
 8012d2c:	bd70      	pop	{r4, r5, r6, pc}
 8012d2e:	200b      	movs	r0, #11
 8012d30:	4770      	bx	lr
 8012d32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	200b      	movs	r0, #11
 8012d3a:	bd70      	pop	{r4, r5, r6, pc}

08012d3c <rcl_wait_set_add_timer>:
 8012d3c:	b328      	cbz	r0, 8012d8a <rcl_wait_set_add_timer+0x4e>
 8012d3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	4604      	mov	r4, r0
 8012d44:	b31b      	cbz	r3, 8012d8e <rcl_wait_set_add_timer+0x52>
 8012d46:	b329      	cbz	r1, 8012d94 <rcl_wait_set_add_timer+0x58>
 8012d48:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012d4a:	6965      	ldr	r5, [r4, #20]
 8012d4c:	42a8      	cmp	r0, r5
 8012d4e:	d219      	bcs.n	8012d84 <rcl_wait_set_add_timer+0x48>
 8012d50:	6925      	ldr	r5, [r4, #16]
 8012d52:	1c46      	adds	r6, r0, #1
 8012d54:	641e      	str	r6, [r3, #64]	@ 0x40
 8012d56:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012d5a:	b102      	cbz	r2, 8012d5e <rcl_wait_set_add_timer+0x22>
 8012d5c:	6010      	str	r0, [r2, #0]
 8012d5e:	4608      	mov	r0, r1
 8012d60:	f7ff fbea 	bl	8012538 <rcl_timer_get_guard_condition>
 8012d64:	b160      	cbz	r0, 8012d80 <rcl_wait_set_add_timer+0x44>
 8012d66:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012d68:	68e3      	ldr	r3, [r4, #12]
 8012d6a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	441d      	add	r5, r3
 8012d70:	f004 fc50 	bl	8017614 <rcl_guard_condition_get_rmw_handle>
 8012d74:	b180      	cbz	r0, 8012d98 <rcl_wait_set_add_timer+0x5c>
 8012d76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d78:	6842      	ldr	r2, [r0, #4]
 8012d7a:	695b      	ldr	r3, [r3, #20]
 8012d7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d80:	2000      	movs	r0, #0
 8012d82:	bd70      	pop	{r4, r5, r6, pc}
 8012d84:	f240 3086 	movw	r0, #902	@ 0x386
 8012d88:	bd70      	pop	{r4, r5, r6, pc}
 8012d8a:	200b      	movs	r0, #11
 8012d8c:	4770      	bx	lr
 8012d8e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
 8012d94:	200b      	movs	r0, #11
 8012d96:	bd70      	pop	{r4, r5, r6, pc}
 8012d98:	2001      	movs	r0, #1
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}

08012d9c <rcl_wait_set_add_client>:
 8012d9c:	b318      	cbz	r0, 8012de6 <rcl_wait_set_add_client+0x4a>
 8012d9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012da0:	b570      	push	{r4, r5, r6, lr}
 8012da2:	4604      	mov	r4, r0
 8012da4:	b30b      	cbz	r3, 8012dea <rcl_wait_set_add_client+0x4e>
 8012da6:	b319      	cbz	r1, 8012df0 <rcl_wait_set_add_client+0x54>
 8012da8:	699d      	ldr	r5, [r3, #24]
 8012daa:	69c0      	ldr	r0, [r0, #28]
 8012dac:	4285      	cmp	r5, r0
 8012dae:	d217      	bcs.n	8012de0 <rcl_wait_set_add_client+0x44>
 8012db0:	69a0      	ldr	r0, [r4, #24]
 8012db2:	1c6e      	adds	r6, r5, #1
 8012db4:	619e      	str	r6, [r3, #24]
 8012db6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012dba:	b102      	cbz	r2, 8012dbe <rcl_wait_set_add_client+0x22>
 8012dbc:	6015      	str	r5, [r2, #0]
 8012dbe:	4608      	mov	r0, r1
 8012dc0:	f7fd ffe4 	bl	8010d8c <rcl_client_get_rmw_handle>
 8012dc4:	b150      	cbz	r0, 8012ddc <rcl_wait_set_add_client+0x40>
 8012dc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012dc8:	6842      	ldr	r2, [r0, #4]
 8012dca:	6a1b      	ldr	r3, [r3, #32]
 8012dcc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dd0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012dd2:	69d3      	ldr	r3, [r2, #28]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	61d3      	str	r3, [r2, #28]
 8012dda:	bd70      	pop	{r4, r5, r6, pc}
 8012ddc:	2001      	movs	r0, #1
 8012dde:	bd70      	pop	{r4, r5, r6, pc}
 8012de0:	f240 3086 	movw	r0, #902	@ 0x386
 8012de4:	bd70      	pop	{r4, r5, r6, pc}
 8012de6:	200b      	movs	r0, #11
 8012de8:	4770      	bx	lr
 8012dea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012dee:	bd70      	pop	{r4, r5, r6, pc}
 8012df0:	200b      	movs	r0, #11
 8012df2:	bd70      	pop	{r4, r5, r6, pc}

08012df4 <rcl_wait_set_add_service>:
 8012df4:	b318      	cbz	r0, 8012e3e <rcl_wait_set_add_service+0x4a>
 8012df6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012df8:	b570      	push	{r4, r5, r6, lr}
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	b30b      	cbz	r3, 8012e42 <rcl_wait_set_add_service+0x4e>
 8012dfe:	b319      	cbz	r1, 8012e48 <rcl_wait_set_add_service+0x54>
 8012e00:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012e02:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012e04:	4285      	cmp	r5, r0
 8012e06:	d217      	bcs.n	8012e38 <rcl_wait_set_add_service+0x44>
 8012e08:	6a20      	ldr	r0, [r4, #32]
 8012e0a:	1c6e      	adds	r6, r5, #1
 8012e0c:	625e      	str	r6, [r3, #36]	@ 0x24
 8012e0e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012e12:	b102      	cbz	r2, 8012e16 <rcl_wait_set_add_service+0x22>
 8012e14:	6015      	str	r5, [r2, #0]
 8012e16:	4608      	mov	r0, r1
 8012e18:	f7fe fd88 	bl	801192c <rcl_service_get_rmw_handle>
 8012e1c:	b150      	cbz	r0, 8012e34 <rcl_wait_set_add_service+0x40>
 8012e1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e20:	6842      	ldr	r2, [r0, #4]
 8012e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e24:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e28:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012e2a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	2000      	movs	r0, #0
 8012e30:	6293      	str	r3, [r2, #40]	@ 0x28
 8012e32:	bd70      	pop	{r4, r5, r6, pc}
 8012e34:	2001      	movs	r0, #1
 8012e36:	bd70      	pop	{r4, r5, r6, pc}
 8012e38:	f240 3086 	movw	r0, #902	@ 0x386
 8012e3c:	bd70      	pop	{r4, r5, r6, pc}
 8012e3e:	200b      	movs	r0, #11
 8012e40:	4770      	bx	lr
 8012e42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	200b      	movs	r0, #11
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}
 8012e4c:	0000      	movs	r0, r0
	...

08012e50 <rcl_wait>:
 8012e50:	2800      	cmp	r0, #0
 8012e52:	f000 81d4 	beq.w	80131fe <rcl_wait+0x3ae>
 8012e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e5a:	ed2d 8b02 	vpush	{d8}
 8012e5e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8012e60:	b099      	sub	sp, #100	@ 0x64
 8012e62:	4604      	mov	r4, r0
 8012e64:	2d00      	cmp	r5, #0
 8012e66:	f000 8178 	beq.w	801315a <rcl_wait+0x30a>
 8012e6a:	461f      	mov	r7, r3
 8012e6c:	6843      	ldr	r3, [r0, #4]
 8012e6e:	4690      	mov	r8, r2
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f000 809b 	beq.w	8012fac <rcl_wait+0x15c>
 8012e76:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8012e78:	2e00      	cmp	r6, #0
 8012e7a:	f000 80b2 	beq.w	8012fe2 <rcl_wait+0x192>
 8012e7e:	2100      	movs	r1, #0
 8012e80:	468c      	mov	ip, r1
 8012e82:	460a      	mov	r2, r1
 8012e84:	46a6      	mov	lr, r4
 8012e86:	f8de 3010 	ldr.w	r3, [lr, #16]
 8012e8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012e8e:	b173      	cbz	r3, 8012eae <rcl_wait+0x5e>
 8012e90:	f8de 300c 	ldr.w	r3, [lr, #12]
 8012e94:	6968      	ldr	r0, [r5, #20]
 8012e96:	440b      	add	r3, r1
 8012e98:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8012e9c:	b13c      	cbz	r4, 8012eae <rcl_wait+0x5e>
 8012e9e:	692b      	ldr	r3, [r5, #16]
 8012ea0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	612b      	str	r3, [r5, #16]
 8012ea8:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8012eac:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8012eae:	3101      	adds	r1, #1
 8012eb0:	f14c 0c00 	adc.w	ip, ip, #0
 8012eb4:	42b1      	cmp	r1, r6
 8012eb6:	f17c 0300 	sbcs.w	r3, ip, #0
 8012eba:	d3e4      	bcc.n	8012e86 <rcl_wait+0x36>
 8012ebc:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8013168 <rcl_wait+0x318>
 8012ec0:	ea58 0307 	orrs.w	r3, r8, r7
 8012ec4:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8012ec8:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8012ecc:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8012ed0:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8012ed4:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8012ed8:	4674      	mov	r4, lr
 8012eda:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8012ede:	f000 8094 	beq.w	801300a <rcl_wait+0x1ba>
 8012ee2:	2e00      	cmp	r6, #0
 8012ee4:	f000 8145 	beq.w	8013172 <rcl_wait+0x322>
 8012ee8:	2500      	movs	r5, #0
 8012eea:	46bb      	mov	fp, r7
 8012eec:	e02c      	b.n	8012f48 <rcl_wait+0xf8>
 8012eee:	6923      	ldr	r3, [r4, #16]
 8012ef0:	f853 0009 	ldr.w	r0, [r3, r9]
 8012ef4:	a908      	add	r1, sp, #32
 8012ef6:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012efa:	f7ff fafb 	bl	80124f4 <rcl_timer_get_next_call_time>
 8012efe:	f240 3321 	movw	r3, #801	@ 0x321
 8012f02:	4298      	cmp	r0, r3
 8012f04:	f000 80bb 	beq.w	801307e <rcl_wait+0x22e>
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	d165      	bne.n	8012fd8 <rcl_wait+0x188>
 8012f0c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8012f10:	7830      	ldrb	r0, [r6, #0]
 8012f12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012f14:	ab18      	add	r3, sp, #96	@ 0x60
 8012f16:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8012f1a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8012f1e:	9205      	str	r2, [sp, #20]
 8012f20:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8012f24:	4297      	cmp	r7, r2
 8012f26:	9a05      	ldr	r2, [sp, #20]
 8012f28:	eb71 0202 	sbcs.w	r2, r1, r2
 8012f2c:	da06      	bge.n	8012f3c <rcl_wait+0xec>
 8012f2e:	e943 7108 	strd	r7, r1, [r3, #-32]
 8012f32:	ab18      	add	r3, sp, #96	@ 0x60
 8012f34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012f38:	f840 6c30 	str.w	r6, [r0, #-48]
 8012f3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f3e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8012f40:	3501      	adds	r5, #1
 8012f42:	42b5      	cmp	r5, r6
 8012f44:	f080 8114 	bcs.w	8013170 <rcl_wait+0x320>
 8012f48:	6923      	ldr	r3, [r4, #16]
 8012f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f4e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012f52:	2800      	cmp	r0, #0
 8012f54:	d0f4      	beq.n	8012f40 <rcl_wait+0xf0>
 8012f56:	a907      	add	r1, sp, #28
 8012f58:	f7ff f9f8 	bl	801234c <rcl_timer_clock>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	f040 8141 	bne.w	80131e6 <rcl_wait+0x396>
 8012f64:	9807      	ldr	r0, [sp, #28]
 8012f66:	7802      	ldrb	r2, [r0, #0]
 8012f68:	2a01      	cmp	r2, #1
 8012f6a:	d1c0      	bne.n	8012eee <rcl_wait+0x9e>
 8012f6c:	f10d 011b 	add.w	r1, sp, #27
 8012f70:	f88d 301b 	strb.w	r3, [sp, #27]
 8012f74:	f7fe ffba 	bl	8011eec <rcl_is_enabled_ros_time_override>
 8012f78:	4602      	mov	r2, r0
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	f040 8133 	bne.w	80131e6 <rcl_wait+0x396>
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8012f86:	f853 0009 	ldr.w	r0, [r3, r9]
 8012f8a:	2900      	cmp	r1, #0
 8012f8c:	d0b0      	beq.n	8012ef0 <rcl_wait+0xa0>
 8012f8e:	ae08      	add	r6, sp, #32
 8012f90:	4631      	mov	r1, r6
 8012f92:	f88d 2020 	strb.w	r2, [sp, #32]
 8012f96:	f7ff fa73 	bl	8012480 <rcl_timer_is_ready>
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	f040 8123 	bne.w	80131e6 <rcl_wait+0x396>
 8012fa0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d0c9      	beq.n	8012f3c <rcl_wait+0xec>
 8012fa8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012faa:	e02f      	b.n	801300c <rcl_wait+0x1bc>
 8012fac:	68c3      	ldr	r3, [r0, #12]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	f47f af61 	bne.w	8012e76 <rcl_wait+0x26>
 8012fb4:	6943      	ldr	r3, [r0, #20]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	f47f af5d 	bne.w	8012e76 <rcl_wait+0x26>
 8012fbc:	69c3      	ldr	r3, [r0, #28]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	f47f af59 	bne.w	8012e76 <rcl_wait+0x26>
 8012fc4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f47f af55 	bne.w	8012e76 <rcl_wait+0x26>
 8012fcc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	f47f af51 	bne.w	8012e76 <rcl_wait+0x26>
 8012fd4:	f240 3085 	movw	r0, #901	@ 0x385
 8012fd8:	b019      	add	sp, #100	@ 0x64
 8012fda:	ecbd 8b02 	vpop	{d8}
 8012fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fea:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8012fee:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8012ff2:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8012ff6:	ea58 0307 	orrs.w	r3, r8, r7
 8012ffa:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8012ffe:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8013002:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8013006:	f040 80b4 	bne.w	8013172 <rcl_wait+0x322>
 801300a:	ae08      	add	r6, sp, #32
 801300c:	2200      	movs	r2, #0
 801300e:	2300      	movs	r3, #0
 8013010:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013014:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013018:	9602      	str	r6, [sp, #8]
 801301a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801301c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8013020:	e9cd 3200 	strd	r3, r2, [sp]
 8013024:	f105 0110 	add.w	r1, r5, #16
 8013028:	f105 031c 	add.w	r3, r5, #28
 801302c:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8013030:	1d28      	adds	r0, r5, #4
 8013032:	f002 fb3d 	bl	80156b0 <rmw_wait>
 8013036:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801303a:	4680      	mov	r8, r0
 801303c:	b332      	cbz	r2, 801308c <rcl_wait+0x23c>
 801303e:	2500      	movs	r5, #0
 8013040:	462f      	mov	r7, r5
 8013042:	462e      	mov	r6, r5
 8013044:	e007      	b.n	8013056 <rcl_wait+0x206>
 8013046:	6922      	ldr	r2, [r4, #16]
 8013048:	f842 3009 	str.w	r3, [r2, r9]
 801304c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801304e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013050:	3501      	adds	r5, #1
 8013052:	4295      	cmp	r5, r2
 8013054:	d21b      	bcs.n	801308e <rcl_wait+0x23e>
 8013056:	6920      	ldr	r0, [r4, #16]
 8013058:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801305c:	a907      	add	r1, sp, #28
 801305e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8013062:	2800      	cmp	r0, #0
 8013064:	d0f4      	beq.n	8013050 <rcl_wait+0x200>
 8013066:	f88d 601c 	strb.w	r6, [sp, #28]
 801306a:	f7ff fa09 	bl	8012480 <rcl_timer_is_ready>
 801306e:	2800      	cmp	r0, #0
 8013070:	d1b2      	bne.n	8012fd8 <rcl_wait+0x188>
 8013072:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d0e5      	beq.n	8013046 <rcl_wait+0x1f6>
 801307a:	461f      	mov	r7, r3
 801307c:	e7e6      	b.n	801304c <rcl_wait+0x1fc>
 801307e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013080:	6923      	ldr	r3, [r4, #16]
 8013082:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8013084:	2200      	movs	r2, #0
 8013086:	f843 2009 	str.w	r2, [r3, r9]
 801308a:	e759      	b.n	8012f40 <rcl_wait+0xf0>
 801308c:	4617      	mov	r7, r2
 801308e:	f038 0002 	bics.w	r0, r8, #2
 8013092:	f040 80a8 	bne.w	80131e6 <rcl_wait+0x396>
 8013096:	6866      	ldr	r6, [r4, #4]
 8013098:	4602      	mov	r2, r0
 801309a:	b91e      	cbnz	r6, 80130a4 <rcl_wait+0x254>
 801309c:	e00d      	b.n	80130ba <rcl_wait+0x26a>
 801309e:	3201      	adds	r2, #1
 80130a0:	4296      	cmp	r6, r2
 80130a2:	d00a      	beq.n	80130ba <rcl_wait+0x26a>
 80130a4:	6899      	ldr	r1, [r3, #8]
 80130a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80130aa:	2900      	cmp	r1, #0
 80130ac:	d1f7      	bne.n	801309e <rcl_wait+0x24e>
 80130ae:	6825      	ldr	r5, [r4, #0]
 80130b0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80130b4:	3201      	adds	r2, #1
 80130b6:	4296      	cmp	r6, r2
 80130b8:	d1f4      	bne.n	80130a4 <rcl_wait+0x254>
 80130ba:	68e6      	ldr	r6, [r4, #12]
 80130bc:	2200      	movs	r2, #0
 80130be:	b91e      	cbnz	r6, 80130c8 <rcl_wait+0x278>
 80130c0:	e00d      	b.n	80130de <rcl_wait+0x28e>
 80130c2:	3201      	adds	r2, #1
 80130c4:	42b2      	cmp	r2, r6
 80130c6:	d00a      	beq.n	80130de <rcl_wait+0x28e>
 80130c8:	6959      	ldr	r1, [r3, #20]
 80130ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80130ce:	2900      	cmp	r1, #0
 80130d0:	d1f7      	bne.n	80130c2 <rcl_wait+0x272>
 80130d2:	68a5      	ldr	r5, [r4, #8]
 80130d4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80130d8:	3201      	adds	r2, #1
 80130da:	42b2      	cmp	r2, r6
 80130dc:	d1f4      	bne.n	80130c8 <rcl_wait+0x278>
 80130de:	69e6      	ldr	r6, [r4, #28]
 80130e0:	2200      	movs	r2, #0
 80130e2:	b91e      	cbnz	r6, 80130ec <rcl_wait+0x29c>
 80130e4:	e00d      	b.n	8013102 <rcl_wait+0x2b2>
 80130e6:	3201      	adds	r2, #1
 80130e8:	4296      	cmp	r6, r2
 80130ea:	d00a      	beq.n	8013102 <rcl_wait+0x2b2>
 80130ec:	6a19      	ldr	r1, [r3, #32]
 80130ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80130f2:	2900      	cmp	r1, #0
 80130f4:	d1f7      	bne.n	80130e6 <rcl_wait+0x296>
 80130f6:	69a5      	ldr	r5, [r4, #24]
 80130f8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80130fc:	3201      	adds	r2, #1
 80130fe:	4296      	cmp	r6, r2
 8013100:	d1f4      	bne.n	80130ec <rcl_wait+0x29c>
 8013102:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8013104:	2200      	movs	r2, #0
 8013106:	b91e      	cbnz	r6, 8013110 <rcl_wait+0x2c0>
 8013108:	e00d      	b.n	8013126 <rcl_wait+0x2d6>
 801310a:	3201      	adds	r2, #1
 801310c:	42b2      	cmp	r2, r6
 801310e:	d00a      	beq.n	8013126 <rcl_wait+0x2d6>
 8013110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013112:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013116:	2900      	cmp	r1, #0
 8013118:	d1f7      	bne.n	801310a <rcl_wait+0x2ba>
 801311a:	6a25      	ldr	r5, [r4, #32]
 801311c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8013120:	3201      	adds	r2, #1
 8013122:	42b2      	cmp	r2, r6
 8013124:	d1f4      	bne.n	8013110 <rcl_wait+0x2c0>
 8013126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013128:	2200      	movs	r2, #0
 801312a:	b91e      	cbnz	r6, 8013134 <rcl_wait+0x2e4>
 801312c:	e00d      	b.n	801314a <rcl_wait+0x2fa>
 801312e:	3201      	adds	r2, #1
 8013130:	42b2      	cmp	r2, r6
 8013132:	d00a      	beq.n	801314a <rcl_wait+0x2fa>
 8013134:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013136:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801313a:	2900      	cmp	r1, #0
 801313c:	d1f7      	bne.n	801312e <rcl_wait+0x2de>
 801313e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8013140:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8013144:	3201      	adds	r2, #1
 8013146:	42b2      	cmp	r2, r6
 8013148:	d1f4      	bne.n	8013134 <rcl_wait+0x2e4>
 801314a:	f1b8 0f02 	cmp.w	r8, #2
 801314e:	f47f af43 	bne.w	8012fd8 <rcl_wait+0x188>
 8013152:	f087 0701 	eor.w	r7, r7, #1
 8013156:	0078      	lsls	r0, r7, #1
 8013158:	e73e      	b.n	8012fd8 <rcl_wait+0x188>
 801315a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801315e:	b019      	add	sp, #100	@ 0x64
 8013160:	ecbd 8b02 	vpop	{d8}
 8013164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013168:	ffffffff 	.word	0xffffffff
 801316c:	7fffffff 	.word	0x7fffffff
 8013170:	465f      	mov	r7, fp
 8013172:	f1b8 0f01 	cmp.w	r8, #1
 8013176:	f177 0300 	sbcs.w	r3, r7, #0
 801317a:	db3a      	blt.n	80131f2 <rcl_wait+0x3a2>
 801317c:	2601      	movs	r6, #1
 801317e:	ad10      	add	r5, sp, #64	@ 0x40
 8013180:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8013184:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8013188:	a908      	add	r1, sp, #32
 801318a:	b1a0      	cbz	r0, 80131b6 <rcl_wait+0x366>
 801318c:	f7fe fea2 	bl	8011ed4 <rcl_clock_get_now>
 8013190:	2800      	cmp	r0, #0
 8013192:	f47f af21 	bne.w	8012fd8 <rcl_wait+0x188>
 8013196:	9a08      	ldr	r2, [sp, #32]
 8013198:	68ab      	ldr	r3, [r5, #8]
 801319a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801319c:	1a9b      	subs	r3, r3, r2
 801319e:	68ea      	ldr	r2, [r5, #12]
 80131a0:	eb62 0201 	sbc.w	r2, r2, r1
 80131a4:	4598      	cmp	r8, r3
 80131a6:	eb77 0102 	sbcs.w	r1, r7, r2
 80131aa:	bfba      	itte	lt
 80131ac:	4643      	movlt	r3, r8
 80131ae:	463a      	movlt	r2, r7
 80131b0:	2601      	movge	r6, #1
 80131b2:	4698      	mov	r8, r3
 80131b4:	4617      	mov	r7, r2
 80131b6:	3508      	adds	r5, #8
 80131b8:	45a9      	cmp	r9, r5
 80131ba:	d1e3      	bne.n	8013184 <rcl_wait+0x334>
 80131bc:	2f00      	cmp	r7, #0
 80131be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80131c0:	bfab      	itete	ge
 80131c2:	4640      	movge	r0, r8
 80131c4:	2000      	movlt	r0, #0
 80131c6:	4639      	movge	r1, r7
 80131c8:	2100      	movlt	r1, #0
 80131ca:	2e00      	cmp	r6, #0
 80131cc:	f43f af24 	beq.w	8013018 <rcl_wait+0x1c8>
 80131d0:	a30d      	add	r3, pc, #52	@ (adr r3, 8013208 <rcl_wait+0x3b8>)
 80131d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d6:	f7ed f883 	bl	80002e0 <__aeabi_ldivmod>
 80131da:	ae08      	add	r6, sp, #32
 80131dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80131e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80131e4:	e718      	b.n	8013018 <rcl_wait+0x1c8>
 80131e6:	2001      	movs	r0, #1
 80131e8:	b019      	add	sp, #100	@ 0x64
 80131ea:	ecbd 8b02 	vpop	{d8}
 80131ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f2:	2600      	movs	r6, #0
 80131f4:	f04f 38ff 	mov.w	r8, #4294967295
 80131f8:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80131fc:	e7bf      	b.n	801317e <rcl_wait+0x32e>
 80131fe:	200b      	movs	r0, #11
 8013200:	4770      	bx	lr
 8013202:	bf00      	nop
 8013204:	f3af 8000 	nop.w
 8013208:	3b9aca00 	.word	0x3b9aca00
 801320c:	00000000 	.word	0x00000000

08013210 <rcl_action_take_goal_response>:
 8013210:	b3b0      	cbz	r0, 8013280 <rcl_action_take_goal_response+0x70>
 8013212:	b570      	push	{r4, r5, r6, lr}
 8013214:	4604      	mov	r4, r0
 8013216:	6800      	ldr	r0, [r0, #0]
 8013218:	b368      	cbz	r0, 8013276 <rcl_action_take_goal_response+0x66>
 801321a:	460d      	mov	r5, r1
 801321c:	4616      	mov	r6, r2
 801321e:	f7fd fe7b 	bl	8010f18 <rcl_client_is_valid>
 8013222:	b330      	cbz	r0, 8013272 <rcl_action_take_goal_response+0x62>
 8013224:	6820      	ldr	r0, [r4, #0]
 8013226:	3004      	adds	r0, #4
 8013228:	f7fd fe76 	bl	8010f18 <rcl_client_is_valid>
 801322c:	b308      	cbz	r0, 8013272 <rcl_action_take_goal_response+0x62>
 801322e:	6820      	ldr	r0, [r4, #0]
 8013230:	3008      	adds	r0, #8
 8013232:	f7fd fe71 	bl	8010f18 <rcl_client_is_valid>
 8013236:	b1e0      	cbz	r0, 8013272 <rcl_action_take_goal_response+0x62>
 8013238:	6820      	ldr	r0, [r4, #0]
 801323a:	300c      	adds	r0, #12
 801323c:	f7fe fdae 	bl	8011d9c <rcl_subscription_is_valid>
 8013240:	b1b8      	cbz	r0, 8013272 <rcl_action_take_goal_response+0x62>
 8013242:	6820      	ldr	r0, [r4, #0]
 8013244:	3010      	adds	r0, #16
 8013246:	f7fe fda9 	bl	8011d9c <rcl_subscription_is_valid>
 801324a:	b190      	cbz	r0, 8013272 <rcl_action_take_goal_response+0x62>
 801324c:	b1b5      	cbz	r5, 801327c <rcl_action_take_goal_response+0x6c>
 801324e:	b1ae      	cbz	r6, 801327c <rcl_action_take_goal_response+0x6c>
 8013250:	6820      	ldr	r0, [r4, #0]
 8013252:	4632      	mov	r2, r6
 8013254:	4629      	mov	r1, r5
 8013256:	f7fd fdf3 	bl	8010e40 <rcl_take_response>
 801325a:	b148      	cbz	r0, 8013270 <rcl_action_take_goal_response+0x60>
 801325c:	280a      	cmp	r0, #10
 801325e:	d007      	beq.n	8013270 <rcl_action_take_goal_response+0x60>
 8013260:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013264:	f241 0307 	movw	r3, #4103	@ 0x1007
 8013268:	4290      	cmp	r0, r2
 801326a:	bf0c      	ite	eq
 801326c:	4618      	moveq	r0, r3
 801326e:	2001      	movne	r0, #1
 8013270:	bd70      	pop	{r4, r5, r6, pc}
 8013272:	f7f7 ff25 	bl	800b0c0 <rcutils_reset_error>
 8013276:	f241 0006 	movw	r0, #4102	@ 0x1006
 801327a:	bd70      	pop	{r4, r5, r6, pc}
 801327c:	200b      	movs	r0, #11
 801327e:	bd70      	pop	{r4, r5, r6, pc}
 8013280:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013284:	4770      	bx	lr
 8013286:	bf00      	nop

08013288 <rcl_action_send_result_request>:
 8013288:	b378      	cbz	r0, 80132ea <rcl_action_send_result_request+0x62>
 801328a:	b570      	push	{r4, r5, r6, lr}
 801328c:	4604      	mov	r4, r0
 801328e:	6800      	ldr	r0, [r0, #0]
 8013290:	b330      	cbz	r0, 80132e0 <rcl_action_send_result_request+0x58>
 8013292:	460d      	mov	r5, r1
 8013294:	4616      	mov	r6, r2
 8013296:	f7fd fe3f 	bl	8010f18 <rcl_client_is_valid>
 801329a:	b1f8      	cbz	r0, 80132dc <rcl_action_send_result_request+0x54>
 801329c:	6820      	ldr	r0, [r4, #0]
 801329e:	3004      	adds	r0, #4
 80132a0:	f7fd fe3a 	bl	8010f18 <rcl_client_is_valid>
 80132a4:	b1d0      	cbz	r0, 80132dc <rcl_action_send_result_request+0x54>
 80132a6:	6820      	ldr	r0, [r4, #0]
 80132a8:	3008      	adds	r0, #8
 80132aa:	f7fd fe35 	bl	8010f18 <rcl_client_is_valid>
 80132ae:	b1a8      	cbz	r0, 80132dc <rcl_action_send_result_request+0x54>
 80132b0:	6820      	ldr	r0, [r4, #0]
 80132b2:	300c      	adds	r0, #12
 80132b4:	f7fe fd72 	bl	8011d9c <rcl_subscription_is_valid>
 80132b8:	b180      	cbz	r0, 80132dc <rcl_action_send_result_request+0x54>
 80132ba:	6820      	ldr	r0, [r4, #0]
 80132bc:	3010      	adds	r0, #16
 80132be:	f7fe fd6d 	bl	8011d9c <rcl_subscription_is_valid>
 80132c2:	b158      	cbz	r0, 80132dc <rcl_action_send_result_request+0x54>
 80132c4:	b17d      	cbz	r5, 80132e6 <rcl_action_send_result_request+0x5e>
 80132c6:	b176      	cbz	r6, 80132e6 <rcl_action_send_result_request+0x5e>
 80132c8:	6820      	ldr	r0, [r4, #0]
 80132ca:	4632      	mov	r2, r6
 80132cc:	4629      	mov	r1, r5
 80132ce:	3008      	adds	r0, #8
 80132d0:	f7fd fd62 	bl	8010d98 <rcl_send_request>
 80132d4:	3800      	subs	r0, #0
 80132d6:	bf18      	it	ne
 80132d8:	2001      	movne	r0, #1
 80132da:	bd70      	pop	{r4, r5, r6, pc}
 80132dc:	f7f7 fef0 	bl	800b0c0 <rcutils_reset_error>
 80132e0:	f241 0006 	movw	r0, #4102	@ 0x1006
 80132e4:	bd70      	pop	{r4, r5, r6, pc}
 80132e6:	200b      	movs	r0, #11
 80132e8:	bd70      	pop	{r4, r5, r6, pc}
 80132ea:	f241 0006 	movw	r0, #4102	@ 0x1006
 80132ee:	4770      	bx	lr

080132f0 <rcl_action_take_result_response>:
 80132f0:	2800      	cmp	r0, #0
 80132f2:	d037      	beq.n	8013364 <rcl_action_take_result_response+0x74>
 80132f4:	b570      	push	{r4, r5, r6, lr}
 80132f6:	4604      	mov	r4, r0
 80132f8:	6800      	ldr	r0, [r0, #0]
 80132fa:	b370      	cbz	r0, 801335a <rcl_action_take_result_response+0x6a>
 80132fc:	460d      	mov	r5, r1
 80132fe:	4616      	mov	r6, r2
 8013300:	f7fd fe0a 	bl	8010f18 <rcl_client_is_valid>
 8013304:	b338      	cbz	r0, 8013356 <rcl_action_take_result_response+0x66>
 8013306:	6820      	ldr	r0, [r4, #0]
 8013308:	3004      	adds	r0, #4
 801330a:	f7fd fe05 	bl	8010f18 <rcl_client_is_valid>
 801330e:	b310      	cbz	r0, 8013356 <rcl_action_take_result_response+0x66>
 8013310:	6820      	ldr	r0, [r4, #0]
 8013312:	3008      	adds	r0, #8
 8013314:	f7fd fe00 	bl	8010f18 <rcl_client_is_valid>
 8013318:	b1e8      	cbz	r0, 8013356 <rcl_action_take_result_response+0x66>
 801331a:	6820      	ldr	r0, [r4, #0]
 801331c:	300c      	adds	r0, #12
 801331e:	f7fe fd3d 	bl	8011d9c <rcl_subscription_is_valid>
 8013322:	b1c0      	cbz	r0, 8013356 <rcl_action_take_result_response+0x66>
 8013324:	6820      	ldr	r0, [r4, #0]
 8013326:	3010      	adds	r0, #16
 8013328:	f7fe fd38 	bl	8011d9c <rcl_subscription_is_valid>
 801332c:	b198      	cbz	r0, 8013356 <rcl_action_take_result_response+0x66>
 801332e:	b1bd      	cbz	r5, 8013360 <rcl_action_take_result_response+0x70>
 8013330:	b1b6      	cbz	r6, 8013360 <rcl_action_take_result_response+0x70>
 8013332:	6820      	ldr	r0, [r4, #0]
 8013334:	4632      	mov	r2, r6
 8013336:	4629      	mov	r1, r5
 8013338:	3008      	adds	r0, #8
 801333a:	f7fd fd81 	bl	8010e40 <rcl_take_response>
 801333e:	b148      	cbz	r0, 8013354 <rcl_action_take_result_response+0x64>
 8013340:	280a      	cmp	r0, #10
 8013342:	d007      	beq.n	8013354 <rcl_action_take_result_response+0x64>
 8013344:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013348:	f241 0307 	movw	r3, #4103	@ 0x1007
 801334c:	4290      	cmp	r0, r2
 801334e:	bf0c      	ite	eq
 8013350:	4618      	moveq	r0, r3
 8013352:	2001      	movne	r0, #1
 8013354:	bd70      	pop	{r4, r5, r6, pc}
 8013356:	f7f7 feb3 	bl	800b0c0 <rcutils_reset_error>
 801335a:	f241 0006 	movw	r0, #4102	@ 0x1006
 801335e:	bd70      	pop	{r4, r5, r6, pc}
 8013360:	200b      	movs	r0, #11
 8013362:	bd70      	pop	{r4, r5, r6, pc}
 8013364:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013368:	4770      	bx	lr
 801336a:	bf00      	nop

0801336c <rcl_action_take_cancel_response>:
 801336c:	2800      	cmp	r0, #0
 801336e:	d037      	beq.n	80133e0 <rcl_action_take_cancel_response+0x74>
 8013370:	b570      	push	{r4, r5, r6, lr}
 8013372:	4604      	mov	r4, r0
 8013374:	6800      	ldr	r0, [r0, #0]
 8013376:	b370      	cbz	r0, 80133d6 <rcl_action_take_cancel_response+0x6a>
 8013378:	460d      	mov	r5, r1
 801337a:	4616      	mov	r6, r2
 801337c:	f7fd fdcc 	bl	8010f18 <rcl_client_is_valid>
 8013380:	b338      	cbz	r0, 80133d2 <rcl_action_take_cancel_response+0x66>
 8013382:	6820      	ldr	r0, [r4, #0]
 8013384:	3004      	adds	r0, #4
 8013386:	f7fd fdc7 	bl	8010f18 <rcl_client_is_valid>
 801338a:	b310      	cbz	r0, 80133d2 <rcl_action_take_cancel_response+0x66>
 801338c:	6820      	ldr	r0, [r4, #0]
 801338e:	3008      	adds	r0, #8
 8013390:	f7fd fdc2 	bl	8010f18 <rcl_client_is_valid>
 8013394:	b1e8      	cbz	r0, 80133d2 <rcl_action_take_cancel_response+0x66>
 8013396:	6820      	ldr	r0, [r4, #0]
 8013398:	300c      	adds	r0, #12
 801339a:	f7fe fcff 	bl	8011d9c <rcl_subscription_is_valid>
 801339e:	b1c0      	cbz	r0, 80133d2 <rcl_action_take_cancel_response+0x66>
 80133a0:	6820      	ldr	r0, [r4, #0]
 80133a2:	3010      	adds	r0, #16
 80133a4:	f7fe fcfa 	bl	8011d9c <rcl_subscription_is_valid>
 80133a8:	b198      	cbz	r0, 80133d2 <rcl_action_take_cancel_response+0x66>
 80133aa:	b1bd      	cbz	r5, 80133dc <rcl_action_take_cancel_response+0x70>
 80133ac:	b1b6      	cbz	r6, 80133dc <rcl_action_take_cancel_response+0x70>
 80133ae:	6820      	ldr	r0, [r4, #0]
 80133b0:	4632      	mov	r2, r6
 80133b2:	4629      	mov	r1, r5
 80133b4:	3004      	adds	r0, #4
 80133b6:	f7fd fd43 	bl	8010e40 <rcl_take_response>
 80133ba:	b148      	cbz	r0, 80133d0 <rcl_action_take_cancel_response+0x64>
 80133bc:	280a      	cmp	r0, #10
 80133be:	d007      	beq.n	80133d0 <rcl_action_take_cancel_response+0x64>
 80133c0:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80133c4:	f241 0307 	movw	r3, #4103	@ 0x1007
 80133c8:	4290      	cmp	r0, r2
 80133ca:	bf0c      	ite	eq
 80133cc:	4618      	moveq	r0, r3
 80133ce:	2001      	movne	r0, #1
 80133d0:	bd70      	pop	{r4, r5, r6, pc}
 80133d2:	f7f7 fe75 	bl	800b0c0 <rcutils_reset_error>
 80133d6:	f241 0006 	movw	r0, #4102	@ 0x1006
 80133da:	bd70      	pop	{r4, r5, r6, pc}
 80133dc:	200b      	movs	r0, #11
 80133de:	bd70      	pop	{r4, r5, r6, pc}
 80133e0:	f241 0006 	movw	r0, #4102	@ 0x1006
 80133e4:	4770      	bx	lr
 80133e6:	bf00      	nop

080133e8 <rcl_action_take_feedback>:
 80133e8:	2800      	cmp	r0, #0
 80133ea:	d037      	beq.n	801345c <rcl_action_take_feedback+0x74>
 80133ec:	b530      	push	{r4, r5, lr}
 80133ee:	4604      	mov	r4, r0
 80133f0:	6800      	ldr	r0, [r0, #0]
 80133f2:	b08f      	sub	sp, #60	@ 0x3c
 80133f4:	b358      	cbz	r0, 801344e <rcl_action_take_feedback+0x66>
 80133f6:	460d      	mov	r5, r1
 80133f8:	f7fd fd8e 	bl	8010f18 <rcl_client_is_valid>
 80133fc:	b328      	cbz	r0, 801344a <rcl_action_take_feedback+0x62>
 80133fe:	6820      	ldr	r0, [r4, #0]
 8013400:	3004      	adds	r0, #4
 8013402:	f7fd fd89 	bl	8010f18 <rcl_client_is_valid>
 8013406:	b300      	cbz	r0, 801344a <rcl_action_take_feedback+0x62>
 8013408:	6820      	ldr	r0, [r4, #0]
 801340a:	3008      	adds	r0, #8
 801340c:	f7fd fd84 	bl	8010f18 <rcl_client_is_valid>
 8013410:	b1d8      	cbz	r0, 801344a <rcl_action_take_feedback+0x62>
 8013412:	6820      	ldr	r0, [r4, #0]
 8013414:	300c      	adds	r0, #12
 8013416:	f7fe fcc1 	bl	8011d9c <rcl_subscription_is_valid>
 801341a:	b1b0      	cbz	r0, 801344a <rcl_action_take_feedback+0x62>
 801341c:	6820      	ldr	r0, [r4, #0]
 801341e:	3010      	adds	r0, #16
 8013420:	f7fe fcbc 	bl	8011d9c <rcl_subscription_is_valid>
 8013424:	b188      	cbz	r0, 801344a <rcl_action_take_feedback+0x62>
 8013426:	b1b5      	cbz	r5, 8013456 <rcl_action_take_feedback+0x6e>
 8013428:	6820      	ldr	r0, [r4, #0]
 801342a:	2300      	movs	r3, #0
 801342c:	466a      	mov	r2, sp
 801342e:	4629      	mov	r1, r5
 8013430:	300c      	adds	r0, #12
 8013432:	f7fe fc55 	bl	8011ce0 <rcl_take>
 8013436:	b160      	cbz	r0, 8013452 <rcl_action_take_feedback+0x6a>
 8013438:	f240 1391 	movw	r3, #401	@ 0x191
 801343c:	4298      	cmp	r0, r3
 801343e:	d010      	beq.n	8013462 <rcl_action_take_feedback+0x7a>
 8013440:	280a      	cmp	r0, #10
 8013442:	bf18      	it	ne
 8013444:	2001      	movne	r0, #1
 8013446:	b00f      	add	sp, #60	@ 0x3c
 8013448:	bd30      	pop	{r4, r5, pc}
 801344a:	f7f7 fe39 	bl	800b0c0 <rcutils_reset_error>
 801344e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013452:	b00f      	add	sp, #60	@ 0x3c
 8013454:	bd30      	pop	{r4, r5, pc}
 8013456:	200b      	movs	r0, #11
 8013458:	b00f      	add	sp, #60	@ 0x3c
 801345a:	bd30      	pop	{r4, r5, pc}
 801345c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013460:	4770      	bx	lr
 8013462:	f241 0007 	movw	r0, #4103	@ 0x1007
 8013466:	e7f4      	b.n	8013452 <rcl_action_take_feedback+0x6a>

08013468 <rcl_action_wait_set_add_action_client>:
 8013468:	2800      	cmp	r0, #0
 801346a:	d045      	beq.n	80134f8 <rcl_action_wait_set_add_action_client+0x90>
 801346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801346e:	460c      	mov	r4, r1
 8013470:	2900      	cmp	r1, #0
 8013472:	d03e      	beq.n	80134f2 <rcl_action_wait_set_add_action_client+0x8a>
 8013474:	4605      	mov	r5, r0
 8013476:	6808      	ldr	r0, [r1, #0]
 8013478:	2800      	cmp	r0, #0
 801347a:	d03a      	beq.n	80134f2 <rcl_action_wait_set_add_action_client+0x8a>
 801347c:	4617      	mov	r7, r2
 801347e:	461e      	mov	r6, r3
 8013480:	f7fd fd4a 	bl	8010f18 <rcl_client_is_valid>
 8013484:	b398      	cbz	r0, 80134ee <rcl_action_wait_set_add_action_client+0x86>
 8013486:	6820      	ldr	r0, [r4, #0]
 8013488:	3004      	adds	r0, #4
 801348a:	f7fd fd45 	bl	8010f18 <rcl_client_is_valid>
 801348e:	b370      	cbz	r0, 80134ee <rcl_action_wait_set_add_action_client+0x86>
 8013490:	6820      	ldr	r0, [r4, #0]
 8013492:	3008      	adds	r0, #8
 8013494:	f7fd fd40 	bl	8010f18 <rcl_client_is_valid>
 8013498:	b348      	cbz	r0, 80134ee <rcl_action_wait_set_add_action_client+0x86>
 801349a:	6820      	ldr	r0, [r4, #0]
 801349c:	300c      	adds	r0, #12
 801349e:	f7fe fc7d 	bl	8011d9c <rcl_subscription_is_valid>
 80134a2:	b320      	cbz	r0, 80134ee <rcl_action_wait_set_add_action_client+0x86>
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	3010      	adds	r0, #16
 80134a8:	f7fe fc78 	bl	8011d9c <rcl_subscription_is_valid>
 80134ac:	b1f8      	cbz	r0, 80134ee <rcl_action_wait_set_add_action_client+0x86>
 80134ae:	6821      	ldr	r1, [r4, #0]
 80134b0:	4628      	mov	r0, r5
 80134b2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80134b6:	f7ff fc71 	bl	8012d9c <rcl_wait_set_add_client>
 80134ba:	b9b8      	cbnz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x84>
 80134bc:	6821      	ldr	r1, [r4, #0]
 80134be:	4628      	mov	r0, r5
 80134c0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80134c4:	3104      	adds	r1, #4
 80134c6:	f7ff fc69 	bl	8012d9c <rcl_wait_set_add_client>
 80134ca:	b978      	cbnz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x84>
 80134cc:	6821      	ldr	r1, [r4, #0]
 80134ce:	4628      	mov	r0, r5
 80134d0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80134d4:	3108      	adds	r1, #8
 80134d6:	f7ff fc61 	bl	8012d9c <rcl_wait_set_add_client>
 80134da:	b938      	cbnz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x84>
 80134dc:	6821      	ldr	r1, [r4, #0]
 80134de:	4628      	mov	r0, r5
 80134e0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80134e4:	310c      	adds	r1, #12
 80134e6:	f7ff f903 	bl	80126f0 <rcl_wait_set_add_subscription>
 80134ea:	b140      	cbz	r0, 80134fe <rcl_action_wait_set_add_action_client+0x96>
 80134ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ee:	f7f7 fde7 	bl	800b0c0 <rcutils_reset_error>
 80134f2:	f241 0006 	movw	r0, #4102	@ 0x1006
 80134f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134fc:	4770      	bx	lr
 80134fe:	6821      	ldr	r1, [r4, #0]
 8013500:	4628      	mov	r0, r5
 8013502:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013506:	3110      	adds	r1, #16
 8013508:	f7ff f8f2 	bl	80126f0 <rcl_wait_set_add_subscription>
 801350c:	2800      	cmp	r0, #0
 801350e:	d1ed      	bne.n	80134ec <rcl_action_wait_set_add_action_client+0x84>
 8013510:	b11f      	cbz	r7, 801351a <rcl_action_wait_set_add_action_client+0xb2>
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013518:	603b      	str	r3, [r7, #0]
 801351a:	2e00      	cmp	r6, #0
 801351c:	d0e6      	beq.n	80134ec <rcl_action_wait_set_add_action_client+0x84>
 801351e:	6823      	ldr	r3, [r4, #0]
 8013520:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013524:	6033      	str	r3, [r6, #0]
 8013526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013528 <rcl_action_client_wait_set_get_entities_ready>:
 8013528:	2800      	cmp	r0, #0
 801352a:	f000 8089 	beq.w	8013640 <rcl_action_client_wait_set_get_entities_ready+0x118>
 801352e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013532:	460c      	mov	r4, r1
 8013534:	2900      	cmp	r1, #0
 8013536:	d079      	beq.n	801362c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013538:	4605      	mov	r5, r0
 801353a:	6808      	ldr	r0, [r1, #0]
 801353c:	2800      	cmp	r0, #0
 801353e:	d075      	beq.n	801362c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013540:	4616      	mov	r6, r2
 8013542:	461f      	mov	r7, r3
 8013544:	f7fd fce8 	bl	8010f18 <rcl_client_is_valid>
 8013548:	2800      	cmp	r0, #0
 801354a:	d06d      	beq.n	8013628 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801354c:	6820      	ldr	r0, [r4, #0]
 801354e:	3004      	adds	r0, #4
 8013550:	f7fd fce2 	bl	8010f18 <rcl_client_is_valid>
 8013554:	2800      	cmp	r0, #0
 8013556:	d067      	beq.n	8013628 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013558:	6820      	ldr	r0, [r4, #0]
 801355a:	3008      	adds	r0, #8
 801355c:	f7fd fcdc 	bl	8010f18 <rcl_client_is_valid>
 8013560:	2800      	cmp	r0, #0
 8013562:	d061      	beq.n	8013628 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013564:	6820      	ldr	r0, [r4, #0]
 8013566:	300c      	adds	r0, #12
 8013568:	f7fe fc18 	bl	8011d9c <rcl_subscription_is_valid>
 801356c:	2800      	cmp	r0, #0
 801356e:	d05b      	beq.n	8013628 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013570:	6820      	ldr	r0, [r4, #0]
 8013572:	3010      	adds	r0, #16
 8013574:	f7fe fc12 	bl	8011d9c <rcl_subscription_is_valid>
 8013578:	2800      	cmp	r0, #0
 801357a:	d055      	beq.n	8013628 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801357c:	2e00      	cmp	r6, #0
 801357e:	d05c      	beq.n	801363a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013580:	2f00      	cmp	r7, #0
 8013582:	d05a      	beq.n	801363a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013584:	9b06      	ldr	r3, [sp, #24]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d057      	beq.n	801363a <rcl_action_client_wait_set_get_entities_ready+0x112>
 801358a:	9b07      	ldr	r3, [sp, #28]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d054      	beq.n	801363a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013590:	9b08      	ldr	r3, [sp, #32]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d051      	beq.n	801363a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013596:	6823      	ldr	r3, [r4, #0]
 8013598:	686a      	ldr	r2, [r5, #4]
 801359a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801359e:	428a      	cmp	r2, r1
 80135a0:	d948      	bls.n	8013634 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80135a2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80135a6:	4282      	cmp	r2, r0
 80135a8:	d944      	bls.n	8013634 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80135aa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80135ae:	69ea      	ldr	r2, [r5, #28]
 80135b0:	42a2      	cmp	r2, r4
 80135b2:	d93f      	bls.n	8013634 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80135b4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80135b8:	4562      	cmp	r2, ip
 80135ba:	d93b      	bls.n	8013634 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80135bc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80135c0:	4572      	cmp	r2, lr
 80135c2:	d937      	bls.n	8013634 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80135c4:	69aa      	ldr	r2, [r5, #24]
 80135c6:	682d      	ldr	r5, [r5, #0]
 80135c8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80135cc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80135d0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80135d4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80135d8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80135dc:	f103 0c0c 	add.w	ip, r3, #12
 80135e0:	eba5 050c 	sub.w	r5, r5, ip
 80135e4:	fab5 f585 	clz	r5, r5
 80135e8:	096d      	lsrs	r5, r5, #5
 80135ea:	7035      	strb	r5, [r6, #0]
 80135ec:	f103 0510 	add.w	r5, r3, #16
 80135f0:	1b64      	subs	r4, r4, r5
 80135f2:	fab4 f484 	clz	r4, r4
 80135f6:	0964      	lsrs	r4, r4, #5
 80135f8:	703c      	strb	r4, [r7, #0]
 80135fa:	eba3 0008 	sub.w	r0, r3, r8
 80135fe:	1d1c      	adds	r4, r3, #4
 8013600:	3308      	adds	r3, #8
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	fab0 f080 	clz	r0, r0
 8013608:	9a06      	ldr	r2, [sp, #24]
 801360a:	0940      	lsrs	r0, r0, #5
 801360c:	1b09      	subs	r1, r1, r4
 801360e:	7010      	strb	r0, [r2, #0]
 8013610:	fab1 f181 	clz	r1, r1
 8013614:	9a07      	ldr	r2, [sp, #28]
 8013616:	0949      	lsrs	r1, r1, #5
 8013618:	7011      	strb	r1, [r2, #0]
 801361a:	fab3 f383 	clz	r3, r3
 801361e:	9a08      	ldr	r2, [sp, #32]
 8013620:	095b      	lsrs	r3, r3, #5
 8013622:	2000      	movs	r0, #0
 8013624:	7013      	strb	r3, [r2, #0]
 8013626:	e003      	b.n	8013630 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013628:	f7f7 fd4a 	bl	800b0c0 <rcutils_reset_error>
 801362c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013634:	2001      	movs	r0, #1
 8013636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801363a:	200b      	movs	r0, #11
 801363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013640:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013644:	4770      	bx	lr
 8013646:	bf00      	nop

08013648 <rcl_action_take_goal_request>:
 8013648:	b3b0      	cbz	r0, 80136b8 <rcl_action_take_goal_request+0x70>
 801364a:	b570      	push	{r4, r5, r6, lr}
 801364c:	4604      	mov	r4, r0
 801364e:	6800      	ldr	r0, [r0, #0]
 8013650:	b368      	cbz	r0, 80136ae <rcl_action_take_goal_request+0x66>
 8013652:	460d      	mov	r5, r1
 8013654:	4616      	mov	r6, r2
 8013656:	f7fe f9ef 	bl	8011a38 <rcl_service_is_valid>
 801365a:	b330      	cbz	r0, 80136aa <rcl_action_take_goal_request+0x62>
 801365c:	6820      	ldr	r0, [r4, #0]
 801365e:	3004      	adds	r0, #4
 8013660:	f7fe f9ea 	bl	8011a38 <rcl_service_is_valid>
 8013664:	b308      	cbz	r0, 80136aa <rcl_action_take_goal_request+0x62>
 8013666:	6820      	ldr	r0, [r4, #0]
 8013668:	3008      	adds	r0, #8
 801366a:	f7fe f9e5 	bl	8011a38 <rcl_service_is_valid>
 801366e:	b1e0      	cbz	r0, 80136aa <rcl_action_take_goal_request+0x62>
 8013670:	6820      	ldr	r0, [r4, #0]
 8013672:	300c      	adds	r0, #12
 8013674:	f7f6 fd94 	bl	800a1a0 <rcl_publisher_is_valid>
 8013678:	b1b8      	cbz	r0, 80136aa <rcl_action_take_goal_request+0x62>
 801367a:	6820      	ldr	r0, [r4, #0]
 801367c:	3010      	adds	r0, #16
 801367e:	f7f6 fd8f 	bl	800a1a0 <rcl_publisher_is_valid>
 8013682:	b190      	cbz	r0, 80136aa <rcl_action_take_goal_request+0x62>
 8013684:	b1b5      	cbz	r5, 80136b4 <rcl_action_take_goal_request+0x6c>
 8013686:	b1ae      	cbz	r6, 80136b4 <rcl_action_take_goal_request+0x6c>
 8013688:	6820      	ldr	r0, [r4, #0]
 801368a:	4632      	mov	r2, r6
 801368c:	4629      	mov	r1, r5
 801368e:	f7fe f953 	bl	8011938 <rcl_take_request>
 8013692:	b148      	cbz	r0, 80136a8 <rcl_action_take_goal_request+0x60>
 8013694:	280a      	cmp	r0, #10
 8013696:	d007      	beq.n	80136a8 <rcl_action_take_goal_request+0x60>
 8013698:	f240 2259 	movw	r2, #601	@ 0x259
 801369c:	f241 0369 	movw	r3, #4201	@ 0x1069
 80136a0:	4290      	cmp	r0, r2
 80136a2:	bf0c      	ite	eq
 80136a4:	4618      	moveq	r0, r3
 80136a6:	2001      	movne	r0, #1
 80136a8:	bd70      	pop	{r4, r5, r6, pc}
 80136aa:	f7f7 fd09 	bl	800b0c0 <rcutils_reset_error>
 80136ae:	f241 0068 	movw	r0, #4200	@ 0x1068
 80136b2:	bd70      	pop	{r4, r5, r6, pc}
 80136b4:	200b      	movs	r0, #11
 80136b6:	bd70      	pop	{r4, r5, r6, pc}
 80136b8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80136bc:	4770      	bx	lr
 80136be:	bf00      	nop

080136c0 <rcl_action_send_goal_response>:
 80136c0:	b378      	cbz	r0, 8013722 <rcl_action_send_goal_response+0x62>
 80136c2:	b570      	push	{r4, r5, r6, lr}
 80136c4:	4604      	mov	r4, r0
 80136c6:	6800      	ldr	r0, [r0, #0]
 80136c8:	b330      	cbz	r0, 8013718 <rcl_action_send_goal_response+0x58>
 80136ca:	460d      	mov	r5, r1
 80136cc:	4616      	mov	r6, r2
 80136ce:	f7fe f9b3 	bl	8011a38 <rcl_service_is_valid>
 80136d2:	b1f8      	cbz	r0, 8013714 <rcl_action_send_goal_response+0x54>
 80136d4:	6820      	ldr	r0, [r4, #0]
 80136d6:	3004      	adds	r0, #4
 80136d8:	f7fe f9ae 	bl	8011a38 <rcl_service_is_valid>
 80136dc:	b1d0      	cbz	r0, 8013714 <rcl_action_send_goal_response+0x54>
 80136de:	6820      	ldr	r0, [r4, #0]
 80136e0:	3008      	adds	r0, #8
 80136e2:	f7fe f9a9 	bl	8011a38 <rcl_service_is_valid>
 80136e6:	b1a8      	cbz	r0, 8013714 <rcl_action_send_goal_response+0x54>
 80136e8:	6820      	ldr	r0, [r4, #0]
 80136ea:	300c      	adds	r0, #12
 80136ec:	f7f6 fd58 	bl	800a1a0 <rcl_publisher_is_valid>
 80136f0:	b180      	cbz	r0, 8013714 <rcl_action_send_goal_response+0x54>
 80136f2:	6820      	ldr	r0, [r4, #0]
 80136f4:	3010      	adds	r0, #16
 80136f6:	f7f6 fd53 	bl	800a1a0 <rcl_publisher_is_valid>
 80136fa:	b158      	cbz	r0, 8013714 <rcl_action_send_goal_response+0x54>
 80136fc:	b17d      	cbz	r5, 801371e <rcl_action_send_goal_response+0x5e>
 80136fe:	b176      	cbz	r6, 801371e <rcl_action_send_goal_response+0x5e>
 8013700:	6820      	ldr	r0, [r4, #0]
 8013702:	4632      	mov	r2, r6
 8013704:	4629      	mov	r1, r5
 8013706:	f7fe f967 	bl	80119d8 <rcl_send_response>
 801370a:	b110      	cbz	r0, 8013712 <rcl_action_send_goal_response+0x52>
 801370c:	2802      	cmp	r0, #2
 801370e:	bf18      	it	ne
 8013710:	2001      	movne	r0, #1
 8013712:	bd70      	pop	{r4, r5, r6, pc}
 8013714:	f7f7 fcd4 	bl	800b0c0 <rcutils_reset_error>
 8013718:	f241 0068 	movw	r0, #4200	@ 0x1068
 801371c:	bd70      	pop	{r4, r5, r6, pc}
 801371e:	200b      	movs	r0, #11
 8013720:	bd70      	pop	{r4, r5, r6, pc}
 8013722:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013726:	4770      	bx	lr

08013728 <rcl_action_take_result_request>:
 8013728:	2800      	cmp	r0, #0
 801372a:	d037      	beq.n	801379c <rcl_action_take_result_request+0x74>
 801372c:	b570      	push	{r4, r5, r6, lr}
 801372e:	4604      	mov	r4, r0
 8013730:	6800      	ldr	r0, [r0, #0]
 8013732:	b370      	cbz	r0, 8013792 <rcl_action_take_result_request+0x6a>
 8013734:	460d      	mov	r5, r1
 8013736:	4616      	mov	r6, r2
 8013738:	f7fe f97e 	bl	8011a38 <rcl_service_is_valid>
 801373c:	b338      	cbz	r0, 801378e <rcl_action_take_result_request+0x66>
 801373e:	6820      	ldr	r0, [r4, #0]
 8013740:	3004      	adds	r0, #4
 8013742:	f7fe f979 	bl	8011a38 <rcl_service_is_valid>
 8013746:	b310      	cbz	r0, 801378e <rcl_action_take_result_request+0x66>
 8013748:	6820      	ldr	r0, [r4, #0]
 801374a:	3008      	adds	r0, #8
 801374c:	f7fe f974 	bl	8011a38 <rcl_service_is_valid>
 8013750:	b1e8      	cbz	r0, 801378e <rcl_action_take_result_request+0x66>
 8013752:	6820      	ldr	r0, [r4, #0]
 8013754:	300c      	adds	r0, #12
 8013756:	f7f6 fd23 	bl	800a1a0 <rcl_publisher_is_valid>
 801375a:	b1c0      	cbz	r0, 801378e <rcl_action_take_result_request+0x66>
 801375c:	6820      	ldr	r0, [r4, #0]
 801375e:	3010      	adds	r0, #16
 8013760:	f7f6 fd1e 	bl	800a1a0 <rcl_publisher_is_valid>
 8013764:	b198      	cbz	r0, 801378e <rcl_action_take_result_request+0x66>
 8013766:	b1bd      	cbz	r5, 8013798 <rcl_action_take_result_request+0x70>
 8013768:	b1b6      	cbz	r6, 8013798 <rcl_action_take_result_request+0x70>
 801376a:	6820      	ldr	r0, [r4, #0]
 801376c:	4632      	mov	r2, r6
 801376e:	4629      	mov	r1, r5
 8013770:	3008      	adds	r0, #8
 8013772:	f7fe f8e1 	bl	8011938 <rcl_take_request>
 8013776:	b148      	cbz	r0, 801378c <rcl_action_take_result_request+0x64>
 8013778:	280a      	cmp	r0, #10
 801377a:	d007      	beq.n	801378c <rcl_action_take_result_request+0x64>
 801377c:	f240 2259 	movw	r2, #601	@ 0x259
 8013780:	f241 0369 	movw	r3, #4201	@ 0x1069
 8013784:	4290      	cmp	r0, r2
 8013786:	bf0c      	ite	eq
 8013788:	4618      	moveq	r0, r3
 801378a:	2001      	movne	r0, #1
 801378c:	bd70      	pop	{r4, r5, r6, pc}
 801378e:	f7f7 fc97 	bl	800b0c0 <rcutils_reset_error>
 8013792:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013796:	bd70      	pop	{r4, r5, r6, pc}
 8013798:	200b      	movs	r0, #11
 801379a:	bd70      	pop	{r4, r5, r6, pc}
 801379c:	f241 0068 	movw	r0, #4200	@ 0x1068
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop

080137a4 <rcl_action_take_cancel_request>:
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d037      	beq.n	8013818 <rcl_action_take_cancel_request+0x74>
 80137a8:	b570      	push	{r4, r5, r6, lr}
 80137aa:	4604      	mov	r4, r0
 80137ac:	6800      	ldr	r0, [r0, #0]
 80137ae:	b370      	cbz	r0, 801380e <rcl_action_take_cancel_request+0x6a>
 80137b0:	460d      	mov	r5, r1
 80137b2:	4616      	mov	r6, r2
 80137b4:	f7fe f940 	bl	8011a38 <rcl_service_is_valid>
 80137b8:	b338      	cbz	r0, 801380a <rcl_action_take_cancel_request+0x66>
 80137ba:	6820      	ldr	r0, [r4, #0]
 80137bc:	3004      	adds	r0, #4
 80137be:	f7fe f93b 	bl	8011a38 <rcl_service_is_valid>
 80137c2:	b310      	cbz	r0, 801380a <rcl_action_take_cancel_request+0x66>
 80137c4:	6820      	ldr	r0, [r4, #0]
 80137c6:	3008      	adds	r0, #8
 80137c8:	f7fe f936 	bl	8011a38 <rcl_service_is_valid>
 80137cc:	b1e8      	cbz	r0, 801380a <rcl_action_take_cancel_request+0x66>
 80137ce:	6820      	ldr	r0, [r4, #0]
 80137d0:	300c      	adds	r0, #12
 80137d2:	f7f6 fce5 	bl	800a1a0 <rcl_publisher_is_valid>
 80137d6:	b1c0      	cbz	r0, 801380a <rcl_action_take_cancel_request+0x66>
 80137d8:	6820      	ldr	r0, [r4, #0]
 80137da:	3010      	adds	r0, #16
 80137dc:	f7f6 fce0 	bl	800a1a0 <rcl_publisher_is_valid>
 80137e0:	b198      	cbz	r0, 801380a <rcl_action_take_cancel_request+0x66>
 80137e2:	b1bd      	cbz	r5, 8013814 <rcl_action_take_cancel_request+0x70>
 80137e4:	b1b6      	cbz	r6, 8013814 <rcl_action_take_cancel_request+0x70>
 80137e6:	6820      	ldr	r0, [r4, #0]
 80137e8:	4632      	mov	r2, r6
 80137ea:	4629      	mov	r1, r5
 80137ec:	3004      	adds	r0, #4
 80137ee:	f7fe f8a3 	bl	8011938 <rcl_take_request>
 80137f2:	b148      	cbz	r0, 8013808 <rcl_action_take_cancel_request+0x64>
 80137f4:	280a      	cmp	r0, #10
 80137f6:	d007      	beq.n	8013808 <rcl_action_take_cancel_request+0x64>
 80137f8:	f240 2259 	movw	r2, #601	@ 0x259
 80137fc:	f241 0369 	movw	r3, #4201	@ 0x1069
 8013800:	4290      	cmp	r0, r2
 8013802:	bf0c      	ite	eq
 8013804:	4618      	moveq	r0, r3
 8013806:	2001      	movne	r0, #1
 8013808:	bd70      	pop	{r4, r5, r6, pc}
 801380a:	f7f7 fc59 	bl	800b0c0 <rcutils_reset_error>
 801380e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013812:	bd70      	pop	{r4, r5, r6, pc}
 8013814:	200b      	movs	r0, #11
 8013816:	bd70      	pop	{r4, r5, r6, pc}
 8013818:	f241 0068 	movw	r0, #4200	@ 0x1068
 801381c:	4770      	bx	lr
 801381e:	bf00      	nop

08013820 <rcl_action_send_cancel_response>:
 8013820:	b380      	cbz	r0, 8013884 <rcl_action_send_cancel_response+0x64>
 8013822:	b570      	push	{r4, r5, r6, lr}
 8013824:	4604      	mov	r4, r0
 8013826:	6800      	ldr	r0, [r0, #0]
 8013828:	b338      	cbz	r0, 801387a <rcl_action_send_cancel_response+0x5a>
 801382a:	460d      	mov	r5, r1
 801382c:	4616      	mov	r6, r2
 801382e:	f7fe f903 	bl	8011a38 <rcl_service_is_valid>
 8013832:	b300      	cbz	r0, 8013876 <rcl_action_send_cancel_response+0x56>
 8013834:	6820      	ldr	r0, [r4, #0]
 8013836:	3004      	adds	r0, #4
 8013838:	f7fe f8fe 	bl	8011a38 <rcl_service_is_valid>
 801383c:	b1d8      	cbz	r0, 8013876 <rcl_action_send_cancel_response+0x56>
 801383e:	6820      	ldr	r0, [r4, #0]
 8013840:	3008      	adds	r0, #8
 8013842:	f7fe f8f9 	bl	8011a38 <rcl_service_is_valid>
 8013846:	b1b0      	cbz	r0, 8013876 <rcl_action_send_cancel_response+0x56>
 8013848:	6820      	ldr	r0, [r4, #0]
 801384a:	300c      	adds	r0, #12
 801384c:	f7f6 fca8 	bl	800a1a0 <rcl_publisher_is_valid>
 8013850:	b188      	cbz	r0, 8013876 <rcl_action_send_cancel_response+0x56>
 8013852:	6820      	ldr	r0, [r4, #0]
 8013854:	3010      	adds	r0, #16
 8013856:	f7f6 fca3 	bl	800a1a0 <rcl_publisher_is_valid>
 801385a:	b160      	cbz	r0, 8013876 <rcl_action_send_cancel_response+0x56>
 801385c:	b185      	cbz	r5, 8013880 <rcl_action_send_cancel_response+0x60>
 801385e:	b17e      	cbz	r6, 8013880 <rcl_action_send_cancel_response+0x60>
 8013860:	6820      	ldr	r0, [r4, #0]
 8013862:	4632      	mov	r2, r6
 8013864:	4629      	mov	r1, r5
 8013866:	3004      	adds	r0, #4
 8013868:	f7fe f8b6 	bl	80119d8 <rcl_send_response>
 801386c:	b110      	cbz	r0, 8013874 <rcl_action_send_cancel_response+0x54>
 801386e:	2802      	cmp	r0, #2
 8013870:	bf18      	it	ne
 8013872:	2001      	movne	r0, #1
 8013874:	bd70      	pop	{r4, r5, r6, pc}
 8013876:	f7f7 fc23 	bl	800b0c0 <rcutils_reset_error>
 801387a:	f241 0068 	movw	r0, #4200	@ 0x1068
 801387e:	bd70      	pop	{r4, r5, r6, pc}
 8013880:	200b      	movs	r0, #11
 8013882:	bd70      	pop	{r4, r5, r6, pc}
 8013884:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013888:	4770      	bx	lr
 801388a:	bf00      	nop

0801388c <rcl_action_wait_set_add_action_server>:
 801388c:	2800      	cmp	r0, #0
 801388e:	d04a      	beq.n	8013926 <rcl_action_wait_set_add_action_server+0x9a>
 8013890:	b570      	push	{r4, r5, r6, lr}
 8013892:	460c      	mov	r4, r1
 8013894:	2900      	cmp	r1, #0
 8013896:	d043      	beq.n	8013920 <rcl_action_wait_set_add_action_server+0x94>
 8013898:	4605      	mov	r5, r0
 801389a:	6808      	ldr	r0, [r1, #0]
 801389c:	2800      	cmp	r0, #0
 801389e:	d03f      	beq.n	8013920 <rcl_action_wait_set_add_action_server+0x94>
 80138a0:	4616      	mov	r6, r2
 80138a2:	f7fe f8c9 	bl	8011a38 <rcl_service_is_valid>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	d038      	beq.n	801391c <rcl_action_wait_set_add_action_server+0x90>
 80138aa:	6820      	ldr	r0, [r4, #0]
 80138ac:	3004      	adds	r0, #4
 80138ae:	f7fe f8c3 	bl	8011a38 <rcl_service_is_valid>
 80138b2:	b398      	cbz	r0, 801391c <rcl_action_wait_set_add_action_server+0x90>
 80138b4:	6820      	ldr	r0, [r4, #0]
 80138b6:	3008      	adds	r0, #8
 80138b8:	f7fe f8be 	bl	8011a38 <rcl_service_is_valid>
 80138bc:	b370      	cbz	r0, 801391c <rcl_action_wait_set_add_action_server+0x90>
 80138be:	6820      	ldr	r0, [r4, #0]
 80138c0:	300c      	adds	r0, #12
 80138c2:	f7f6 fc87 	bl	800a1d4 <rcl_publisher_is_valid_except_context>
 80138c6:	b348      	cbz	r0, 801391c <rcl_action_wait_set_add_action_server+0x90>
 80138c8:	6820      	ldr	r0, [r4, #0]
 80138ca:	3010      	adds	r0, #16
 80138cc:	f7f6 fc82 	bl	800a1d4 <rcl_publisher_is_valid_except_context>
 80138d0:	b320      	cbz	r0, 801391c <rcl_action_wait_set_add_action_server+0x90>
 80138d2:	6821      	ldr	r1, [r4, #0]
 80138d4:	4628      	mov	r0, r5
 80138d6:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80138da:	f7ff fa8b 	bl	8012df4 <rcl_wait_set_add_service>
 80138de:	b9e0      	cbnz	r0, 801391a <rcl_action_wait_set_add_action_server+0x8e>
 80138e0:	6821      	ldr	r1, [r4, #0]
 80138e2:	4628      	mov	r0, r5
 80138e4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80138e8:	3104      	adds	r1, #4
 80138ea:	f7ff fa83 	bl	8012df4 <rcl_wait_set_add_service>
 80138ee:	b9a0      	cbnz	r0, 801391a <rcl_action_wait_set_add_action_server+0x8e>
 80138f0:	6821      	ldr	r1, [r4, #0]
 80138f2:	4628      	mov	r0, r5
 80138f4:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80138f8:	3108      	adds	r1, #8
 80138fa:	f7ff fa7b 	bl	8012df4 <rcl_wait_set_add_service>
 80138fe:	b960      	cbnz	r0, 801391a <rcl_action_wait_set_add_action_server+0x8e>
 8013900:	6821      	ldr	r1, [r4, #0]
 8013902:	4628      	mov	r0, r5
 8013904:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8013908:	3114      	adds	r1, #20
 801390a:	f7ff fa17 	bl	8012d3c <rcl_wait_set_add_timer>
 801390e:	b920      	cbnz	r0, 801391a <rcl_action_wait_set_add_action_server+0x8e>
 8013910:	b11e      	cbz	r6, 801391a <rcl_action_wait_set_add_action_server+0x8e>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8013918:	6033      	str	r3, [r6, #0]
 801391a:	bd70      	pop	{r4, r5, r6, pc}
 801391c:	f7f7 fbd0 	bl	800b0c0 <rcutils_reset_error>
 8013920:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013924:	bd70      	pop	{r4, r5, r6, pc}
 8013926:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801392a:	4770      	bx	lr

0801392c <rcl_action_server_wait_set_get_entities_ready>:
 801392c:	2800      	cmp	r0, #0
 801392e:	d060      	beq.n	80139f2 <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8013930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013932:	460c      	mov	r4, r1
 8013934:	2900      	cmp	r1, #0
 8013936:	d057      	beq.n	80139e8 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8013938:	4605      	mov	r5, r0
 801393a:	6808      	ldr	r0, [r1, #0]
 801393c:	2800      	cmp	r0, #0
 801393e:	d053      	beq.n	80139e8 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8013940:	4616      	mov	r6, r2
 8013942:	461f      	mov	r7, r3
 8013944:	f7fe f878 	bl	8011a38 <rcl_service_is_valid>
 8013948:	2800      	cmp	r0, #0
 801394a:	d04b      	beq.n	80139e4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801394c:	6820      	ldr	r0, [r4, #0]
 801394e:	3004      	adds	r0, #4
 8013950:	f7fe f872 	bl	8011a38 <rcl_service_is_valid>
 8013954:	2800      	cmp	r0, #0
 8013956:	d045      	beq.n	80139e4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8013958:	6820      	ldr	r0, [r4, #0]
 801395a:	3008      	adds	r0, #8
 801395c:	f7fe f86c 	bl	8011a38 <rcl_service_is_valid>
 8013960:	2800      	cmp	r0, #0
 8013962:	d03f      	beq.n	80139e4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8013964:	6820      	ldr	r0, [r4, #0]
 8013966:	300c      	adds	r0, #12
 8013968:	f7f6 fc34 	bl	800a1d4 <rcl_publisher_is_valid_except_context>
 801396c:	2800      	cmp	r0, #0
 801396e:	d039      	beq.n	80139e4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8013970:	6820      	ldr	r0, [r4, #0]
 8013972:	3010      	adds	r0, #16
 8013974:	f7f6 fc2e 	bl	800a1d4 <rcl_publisher_is_valid_except_context>
 8013978:	b3a0      	cbz	r0, 80139e4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801397a:	b3c6      	cbz	r6, 80139ee <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801397c:	b3bf      	cbz	r7, 80139ee <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801397e:	9b06      	ldr	r3, [sp, #24]
 8013980:	b3ab      	cbz	r3, 80139ee <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8013982:	9b07      	ldr	r3, [sp, #28]
 8013984:	b39b      	cbz	r3, 80139ee <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8013986:	6823      	ldr	r3, [r4, #0]
 8013988:	692a      	ldr	r2, [r5, #16]
 801398a:	6a2c      	ldr	r4, [r5, #32]
 801398c:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8013990:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 8013994:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8013998:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801399c:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 80139a0:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 80139a4:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80139a8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80139ac:	1ae4      	subs	r4, r4, r3
 80139ae:	fab4 f484 	clz	r4, r4
 80139b2:	0964      	lsrs	r4, r4, #5
 80139b4:	7034      	strb	r4, [r6, #0]
 80139b6:	1d1c      	adds	r4, r3, #4
 80139b8:	1b00      	subs	r0, r0, r4
 80139ba:	fab0 f080 	clz	r0, r0
 80139be:	0940      	lsrs	r0, r0, #5
 80139c0:	7038      	strb	r0, [r7, #0]
 80139c2:	f103 0008 	add.w	r0, r3, #8
 80139c6:	1a09      	subs	r1, r1, r0
 80139c8:	3314      	adds	r3, #20
 80139ca:	1ad3      	subs	r3, r2, r3
 80139cc:	fab1 f181 	clz	r1, r1
 80139d0:	9a06      	ldr	r2, [sp, #24]
 80139d2:	0949      	lsrs	r1, r1, #5
 80139d4:	7011      	strb	r1, [r2, #0]
 80139d6:	fab3 f383 	clz	r3, r3
 80139da:	9a07      	ldr	r2, [sp, #28]
 80139dc:	095b      	lsrs	r3, r3, #5
 80139de:	2000      	movs	r0, #0
 80139e0:	7013      	strb	r3, [r2, #0]
 80139e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139e4:	f7f7 fb6c 	bl	800b0c0 <rcutils_reset_error>
 80139e8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80139ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139ee:	200b      	movs	r0, #11
 80139f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80139f6:	4770      	bx	lr

080139f8 <_execute_event_handler>:
 80139f8:	2002      	movs	r0, #2
 80139fa:	4770      	bx	lr

080139fc <_cancel_goal_event_handler>:
 80139fc:	2003      	movs	r0, #3
 80139fe:	4770      	bx	lr

08013a00 <_succeed_event_handler>:
 8013a00:	2004      	movs	r0, #4
 8013a02:	4770      	bx	lr

08013a04 <_abort_event_handler>:
 8013a04:	2006      	movs	r0, #6
 8013a06:	4770      	bx	lr

08013a08 <_canceled_event_handler>:
 8013a08:	2005      	movs	r0, #5
 8013a0a:	4770      	bx	lr

08013a0c <rcl_action_transition_goal_state>:
 8013a0c:	fa5f fc80 	uxtb.w	ip, r0
 8013a10:	f1bc 0f06 	cmp.w	ip, #6
 8013a14:	d80c      	bhi.n	8013a30 <rcl_action_transition_goal_state+0x24>
 8013a16:	2904      	cmp	r1, #4
 8013a18:	d80a      	bhi.n	8013a30 <rcl_action_transition_goal_state+0x24>
 8013a1a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8013a1e:	b410      	push	{r4}
 8013a20:	440b      	add	r3, r1
 8013a22:	4c06      	ldr	r4, [pc, #24]	@ (8013a3c <rcl_action_transition_goal_state+0x30>)
 8013a24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013a28:	b123      	cbz	r3, 8013a34 <rcl_action_transition_goal_state+0x28>
 8013a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a2e:	4718      	bx	r3
 8013a30:	2000      	movs	r0, #0
 8013a32:	4770      	bx	lr
 8013a34:	2000      	movs	r0, #0
 8013a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a3a:	4770      	bx	lr
 8013a3c:	0801a2e8 	.word	0x0801a2e8

08013a40 <rcl_action_get_zero_initialized_cancel_response>:
 8013a40:	b510      	push	{r4, lr}
 8013a42:	4c07      	ldr	r4, [pc, #28]	@ (8013a60 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013a44:	4686      	mov	lr, r0
 8013a46:	4684      	mov	ip, r0
 8013a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a54:	6823      	ldr	r3, [r4, #0]
 8013a56:	f8cc 3000 	str.w	r3, [ip]
 8013a5a:	4670      	mov	r0, lr
 8013a5c:	bd10      	pop	{r4, pc}
 8013a5e:	bf00      	nop
 8013a60:	0801a374 	.word	0x0801a374

08013a64 <rclc_action_send_result_request>:
 8013a64:	b1d0      	cbz	r0, 8013a9c <rclc_action_send_result_request+0x38>
 8013a66:	b500      	push	{lr}
 8013a68:	4684      	mov	ip, r0
 8013a6a:	b087      	sub	sp, #28
 8013a6c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013a70:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8013a74:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013a78:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013a7c:	f10d 0e08 	add.w	lr, sp, #8
 8013a80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a84:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013a88:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8013a8c:	a902      	add	r1, sp, #8
 8013a8e:	3010      	adds	r0, #16
 8013a90:	f7ff fbfa 	bl	8013288 <rcl_action_send_result_request>
 8013a94:	b920      	cbnz	r0, 8013aa0 <rclc_action_send_result_request+0x3c>
 8013a96:	b007      	add	sp, #28
 8013a98:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a9c:	200b      	movs	r0, #11
 8013a9e:	4770      	bx	lr
 8013aa0:	9001      	str	r0, [sp, #4]
 8013aa2:	f7f7 fb0d 	bl	800b0c0 <rcutils_reset_error>
 8013aa6:	9801      	ldr	r0, [sp, #4]
 8013aa8:	b007      	add	sp, #28
 8013aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8013aae:	bf00      	nop

08013ab0 <rclc_action_take_goal_handle>:
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	b158      	cbz	r0, 8013acc <rclc_action_take_goal_handle+0x1c>
 8013ab4:	6880      	ldr	r0, [r0, #8]
 8013ab6:	b148      	cbz	r0, 8013acc <rclc_action_take_goal_handle+0x1c>
 8013ab8:	6801      	ldr	r1, [r0, #0]
 8013aba:	6099      	str	r1, [r3, #8]
 8013abc:	2200      	movs	r2, #0
 8013abe:	7202      	strb	r2, [r0, #8]
 8013ac0:	68d9      	ldr	r1, [r3, #12]
 8013ac2:	6001      	str	r1, [r0, #0]
 8013ac4:	6202      	str	r2, [r0, #32]
 8013ac6:	8482      	strh	r2, [r0, #36]	@ 0x24
 8013ac8:	60d8      	str	r0, [r3, #12]
 8013aca:	4770      	bx	lr
 8013acc:	4770      	bx	lr
 8013ace:	bf00      	nop

08013ad0 <rclc_action_remove_used_goal_handle>:
 8013ad0:	b180      	cbz	r0, 8013af4 <rclc_action_remove_used_goal_handle+0x24>
 8013ad2:	b179      	cbz	r1, 8013af4 <rclc_action_remove_used_goal_handle+0x24>
 8013ad4:	68c3      	ldr	r3, [r0, #12]
 8013ad6:	4299      	cmp	r1, r3
 8013ad8:	d00d      	beq.n	8013af6 <rclc_action_remove_used_goal_handle+0x26>
 8013ada:	b12b      	cbz	r3, 8013ae8 <rclc_action_remove_used_goal_handle+0x18>
 8013adc:	681a      	ldr	r2, [r3, #0]
 8013ade:	4291      	cmp	r1, r2
 8013ae0:	d003      	beq.n	8013aea <rclc_action_remove_used_goal_handle+0x1a>
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1f9      	bne.n	8013adc <rclc_action_remove_used_goal_handle+0xc>
 8013ae8:	4770      	bx	lr
 8013aea:	680a      	ldr	r2, [r1, #0]
 8013aec:	601a      	str	r2, [r3, #0]
 8013aee:	6883      	ldr	r3, [r0, #8]
 8013af0:	600b      	str	r3, [r1, #0]
 8013af2:	6081      	str	r1, [r0, #8]
 8013af4:	4770      	bx	lr
 8013af6:	680b      	ldr	r3, [r1, #0]
 8013af8:	60c3      	str	r3, [r0, #12]
 8013afa:	e7f8      	b.n	8013aee <rclc_action_remove_used_goal_handle+0x1e>

08013afc <rclc_action_find_goal_handle_by_uuid>:
 8013afc:	b538      	push	{r3, r4, r5, lr}
 8013afe:	b180      	cbz	r0, 8013b22 <rclc_action_find_goal_handle_by_uuid+0x26>
 8013b00:	460d      	mov	r5, r1
 8013b02:	b181      	cbz	r1, 8013b26 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8013b04:	68c4      	ldr	r4, [r0, #12]
 8013b06:	b914      	cbnz	r4, 8013b0e <rclc_action_find_goal_handle_by_uuid+0x12>
 8013b08:	e009      	b.n	8013b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b0a:	6824      	ldr	r4, [r4, #0]
 8013b0c:	b13c      	cbz	r4, 8013b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b0e:	2210      	movs	r2, #16
 8013b10:	4629      	mov	r1, r5
 8013b12:	f104 0009 	add.w	r0, r4, #9
 8013b16:	f004 fe17 	bl	8018748 <memcmp>
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	d1f5      	bne.n	8013b0a <rclc_action_find_goal_handle_by_uuid+0xe>
 8013b1e:	4620      	mov	r0, r4
 8013b20:	bd38      	pop	{r3, r4, r5, pc}
 8013b22:	4604      	mov	r4, r0
 8013b24:	e7fb      	b.n	8013b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b26:	460c      	mov	r4, r1
 8013b28:	e7f9      	b.n	8013b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b2a:	bf00      	nop

08013b2c <rclc_action_find_first_handle_by_status>:
 8013b2c:	b140      	cbz	r0, 8013b40 <rclc_action_find_first_handle_by_status+0x14>
 8013b2e:	68c0      	ldr	r0, [r0, #12]
 8013b30:	b910      	cbnz	r0, 8013b38 <rclc_action_find_first_handle_by_status+0xc>
 8013b32:	e005      	b.n	8013b40 <rclc_action_find_first_handle_by_status+0x14>
 8013b34:	6800      	ldr	r0, [r0, #0]
 8013b36:	b118      	cbz	r0, 8013b40 <rclc_action_find_first_handle_by_status+0x14>
 8013b38:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013b3c:	428b      	cmp	r3, r1
 8013b3e:	d1f9      	bne.n	8013b34 <rclc_action_find_first_handle_by_status+0x8>
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop

08013b44 <rclc_action_find_first_terminated_handle>:
 8013b44:	b140      	cbz	r0, 8013b58 <rclc_action_find_first_terminated_handle+0x14>
 8013b46:	68c0      	ldr	r0, [r0, #12]
 8013b48:	b910      	cbnz	r0, 8013b50 <rclc_action_find_first_terminated_handle+0xc>
 8013b4a:	e005      	b.n	8013b58 <rclc_action_find_first_terminated_handle+0x14>
 8013b4c:	6800      	ldr	r0, [r0, #0]
 8013b4e:	b118      	cbz	r0, 8013b58 <rclc_action_find_first_terminated_handle+0x14>
 8013b50:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013b54:	2b03      	cmp	r3, #3
 8013b56:	ddf9      	ble.n	8013b4c <rclc_action_find_first_terminated_handle+0x8>
 8013b58:	4770      	bx	lr
 8013b5a:	bf00      	nop

08013b5c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013b5c:	b170      	cbz	r0, 8013b7c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013b5e:	68c0      	ldr	r0, [r0, #12]
 8013b60:	b160      	cbz	r0, 8013b7c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013b62:	b410      	push	{r4}
 8013b64:	e001      	b.n	8013b6a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013b66:	6800      	ldr	r0, [r0, #0]
 8013b68:	b128      	cbz	r0, 8013b76 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013b6a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8013b6e:	4299      	cmp	r1, r3
 8013b70:	bf08      	it	eq
 8013b72:	4294      	cmpeq	r4, r2
 8013b74:	d1f7      	bne.n	8013b66 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b7a:	4770      	bx	lr
 8013b7c:	4770      	bx	lr
 8013b7e:	bf00      	nop

08013b80 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013b80:	b170      	cbz	r0, 8013ba0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013b82:	68c0      	ldr	r0, [r0, #12]
 8013b84:	b160      	cbz	r0, 8013ba0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013b86:	b410      	push	{r4}
 8013b88:	e001      	b.n	8013b8e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8013b8a:	6800      	ldr	r0, [r0, #0]
 8013b8c:	b128      	cbz	r0, 8013b9a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8013b8e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8013b92:	4299      	cmp	r1, r3
 8013b94:	bf08      	it	eq
 8013b96:	4294      	cmpeq	r4, r2
 8013b98:	d1f7      	bne.n	8013b8a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8013b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b9e:	4770      	bx	lr
 8013ba0:	4770      	bx	lr
 8013ba2:	bf00      	nop

08013ba4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8013ba4:	b170      	cbz	r0, 8013bc4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013ba6:	68c0      	ldr	r0, [r0, #12]
 8013ba8:	b160      	cbz	r0, 8013bc4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013baa:	b410      	push	{r4}
 8013bac:	e001      	b.n	8013bb2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8013bae:	6800      	ldr	r0, [r0, #0]
 8013bb0:	b128      	cbz	r0, 8013bbe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8013bb2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8013bb6:	4299      	cmp	r1, r3
 8013bb8:	bf08      	it	eq
 8013bba:	4294      	cmpeq	r4, r2
 8013bbc:	d1f7      	bne.n	8013bae <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8013bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bc2:	4770      	bx	lr
 8013bc4:	4770      	bx	lr
 8013bc6:	bf00      	nop

08013bc8 <rclc_action_find_first_handle_with_goal_response>:
 8013bc8:	b140      	cbz	r0, 8013bdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8013bca:	68c0      	ldr	r0, [r0, #12]
 8013bcc:	b910      	cbnz	r0, 8013bd4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8013bce:	e005      	b.n	8013bdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8013bd0:	6800      	ldr	r0, [r0, #0]
 8013bd2:	b118      	cbz	r0, 8013bdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8013bd4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d0f9      	beq.n	8013bd0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013bdc:	4770      	bx	lr
 8013bde:	bf00      	nop

08013be0 <rclc_action_find_first_handle_with_result_response>:
 8013be0:	b140      	cbz	r0, 8013bf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8013be2:	68c0      	ldr	r0, [r0, #12]
 8013be4:	b910      	cbnz	r0, 8013bec <rclc_action_find_first_handle_with_result_response+0xc>
 8013be6:	e005      	b.n	8013bf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8013be8:	6800      	ldr	r0, [r0, #0]
 8013bea:	b118      	cbz	r0, 8013bf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8013bec:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d0f9      	beq.n	8013be8 <rclc_action_find_first_handle_with_result_response+0x8>
 8013bf4:	4770      	bx	lr
 8013bf6:	bf00      	nop

08013bf8 <rclc_action_server_response_goal_request>:
 8013bf8:	b198      	cbz	r0, 8013c22 <rclc_action_server_response_goal_request+0x2a>
 8013bfa:	b510      	push	{r4, lr}
 8013bfc:	6844      	ldr	r4, [r0, #4]
 8013bfe:	b086      	sub	sp, #24
 8013c00:	2200      	movs	r2, #0
 8013c02:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013c06:	460b      	mov	r3, r1
 8013c08:	9205      	str	r2, [sp, #20]
 8013c0a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8013c0e:	aa03      	add	r2, sp, #12
 8013c10:	f104 0010 	add.w	r0, r4, #16
 8013c14:	f88d 300c 	strb.w	r3, [sp, #12]
 8013c18:	f7ff fd52 	bl	80136c0 <rcl_action_send_goal_response>
 8013c1c:	b918      	cbnz	r0, 8013c26 <rclc_action_server_response_goal_request+0x2e>
 8013c1e:	b006      	add	sp, #24
 8013c20:	bd10      	pop	{r4, pc}
 8013c22:	200b      	movs	r0, #11
 8013c24:	4770      	bx	lr
 8013c26:	9001      	str	r0, [sp, #4]
 8013c28:	f7f7 fa4a 	bl	800b0c0 <rcutils_reset_error>
 8013c2c:	9801      	ldr	r0, [sp, #4]
 8013c2e:	b006      	add	sp, #24
 8013c30:	bd10      	pop	{r4, pc}
 8013c32:	bf00      	nop
 8013c34:	0000      	movs	r0, r0
	...

08013c38 <rclc_action_server_goal_cancel_accept>:
 8013c38:	b310      	cbz	r0, 8013c80 <rclc_action_server_goal_cancel_accept+0x48>
 8013c3a:	b510      	push	{r4, lr}
 8013c3c:	b090      	sub	sp, #64	@ 0x40
 8013c3e:	4604      	mov	r4, r0
 8013c40:	a806      	add	r0, sp, #24
 8013c42:	f7ff fefd 	bl	8013a40 <rcl_action_get_zero_initialized_cancel_response>
 8013c46:	2300      	movs	r3, #0
 8013c48:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013c4c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013c50:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013c54:	f88d 3018 	strb.w	r3, [sp, #24]
 8013c58:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013c5c:	f8cd d01c 	str.w	sp, [sp, #28]
 8013c60:	46ec      	mov	ip, sp
 8013c62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c66:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013c88 <rclc_action_server_goal_cancel_accept+0x50>
 8013c6a:	6860      	ldr	r0, [r4, #4]
 8013c6c:	aa06      	add	r2, sp, #24
 8013c6e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8013c72:	3010      	adds	r0, #16
 8013c74:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013c78:	f7ff fdd2 	bl	8013820 <rcl_action_send_cancel_response>
 8013c7c:	b010      	add	sp, #64	@ 0x40
 8013c7e:	bd10      	pop	{r4, pc}
 8013c80:	200b      	movs	r0, #11
 8013c82:	4770      	bx	lr
 8013c84:	f3af 8000 	nop.w
 8013c88:	00000001 	.word	0x00000001
 8013c8c:	00000001 	.word	0x00000001

08013c90 <rclc_action_server_goal_cancel_reject>:
 8013c90:	b082      	sub	sp, #8
 8013c92:	b530      	push	{r4, r5, lr}
 8013c94:	b08b      	sub	sp, #44	@ 0x2c
 8013c96:	ac0e      	add	r4, sp, #56	@ 0x38
 8013c98:	e884 000c 	stmia.w	r4, {r2, r3}
 8013c9c:	b188      	cbz	r0, 8013cc2 <rclc_action_server_goal_cancel_reject+0x32>
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	a801      	add	r0, sp, #4
 8013ca2:	460d      	mov	r5, r1
 8013ca4:	f7ff fecc 	bl	8013a40 <rcl_action_get_zero_initialized_cancel_response>
 8013ca8:	aa01      	add	r2, sp, #4
 8013caa:	a90e      	add	r1, sp, #56	@ 0x38
 8013cac:	f104 0010 	add.w	r0, r4, #16
 8013cb0:	f88d 5004 	strb.w	r5, [sp, #4]
 8013cb4:	f7ff fdb4 	bl	8013820 <rcl_action_send_cancel_response>
 8013cb8:	b00b      	add	sp, #44	@ 0x2c
 8013cba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cbe:	b002      	add	sp, #8
 8013cc0:	4770      	bx	lr
 8013cc2:	200b      	movs	r0, #11
 8013cc4:	b00b      	add	sp, #44	@ 0x2c
 8013cc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cca:	b002      	add	sp, #8
 8013ccc:	4770      	bx	lr
 8013cce:	bf00      	nop

08013cd0 <__atomic_load_8>:
 8013cd0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013cd4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013cd8:	4a15      	ldr	r2, [pc, #84]	@ (8013d30 <__atomic_load_8+0x60>)
 8013cda:	4b16      	ldr	r3, [pc, #88]	@ (8013d34 <__atomic_load_8+0x64>)
 8013cdc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013ce0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013ce4:	fb02 f101 	mul.w	r1, r2, r1
 8013ce8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013cec:	fba3 2301 	umull	r2, r3, r3, r1
 8013cf0:	091b      	lsrs	r3, r3, #4
 8013cf2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013cf6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013cfa:	b4f0      	push	{r4, r5, r6, r7}
 8013cfc:	4d0e      	ldr	r5, [pc, #56]	@ (8013d38 <__atomic_load_8+0x68>)
 8013cfe:	1ac9      	subs	r1, r1, r3
 8013d00:	194a      	adds	r2, r1, r5
 8013d02:	f04f 0c01 	mov.w	ip, #1
 8013d06:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013d0a:	e8c2 cf44 	strexb	r4, ip, [r2]
 8013d0e:	2c00      	cmp	r4, #0
 8013d10:	d1f9      	bne.n	8013d06 <__atomic_load_8+0x36>
 8013d12:	f3bf 8f5b 	dmb	ish
 8013d16:	b2dc      	uxtb	r4, r3
 8013d18:	2c00      	cmp	r4, #0
 8013d1a:	d1f4      	bne.n	8013d06 <__atomic_load_8+0x36>
 8013d1c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013d20:	f3bf 8f5b 	dmb	ish
 8013d24:	546b      	strb	r3, [r5, r1]
 8013d26:	4630      	mov	r0, r6
 8013d28:	4639      	mov	r1, r7
 8013d2a:	bcf0      	pop	{r4, r5, r6, r7}
 8013d2c:	4770      	bx	lr
 8013d2e:	bf00      	nop
 8013d30:	27d4eb2d 	.word	0x27d4eb2d
 8013d34:	b21642c9 	.word	0xb21642c9
 8013d38:	2000ebd0 	.word	0x2000ebd0

08013d3c <__atomic_store_8>:
 8013d3c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013d40:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013d44:	b570      	push	{r4, r5, r6, lr}
 8013d46:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013d4a:	4c14      	ldr	r4, [pc, #80]	@ (8013d9c <__atomic_store_8+0x60>)
 8013d4c:	4e14      	ldr	r6, [pc, #80]	@ (8013da0 <__atomic_store_8+0x64>)
 8013d4e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013d52:	fb04 f101 	mul.w	r1, r4, r1
 8013d56:	4c13      	ldr	r4, [pc, #76]	@ (8013da4 <__atomic_store_8+0x68>)
 8013d58:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013d5c:	fba4 5401 	umull	r5, r4, r4, r1
 8013d60:	0924      	lsrs	r4, r4, #4
 8013d62:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8013d66:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8013d6a:	eba1 0e04 	sub.w	lr, r1, r4
 8013d6e:	f04f 0501 	mov.w	r5, #1
 8013d72:	eb0e 0c06 	add.w	ip, lr, r6
 8013d76:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013d7a:	e8cc 5f44 	strexb	r4, r5, [ip]
 8013d7e:	2c00      	cmp	r4, #0
 8013d80:	d1f9      	bne.n	8013d76 <__atomic_store_8+0x3a>
 8013d82:	f3bf 8f5b 	dmb	ish
 8013d86:	b2cc      	uxtb	r4, r1
 8013d88:	2c00      	cmp	r4, #0
 8013d8a:	d1f4      	bne.n	8013d76 <__atomic_store_8+0x3a>
 8013d8c:	e9c0 2300 	strd	r2, r3, [r0]
 8013d90:	f3bf 8f5b 	dmb	ish
 8013d94:	f806 100e 	strb.w	r1, [r6, lr]
 8013d98:	bd70      	pop	{r4, r5, r6, pc}
 8013d9a:	bf00      	nop
 8013d9c:	27d4eb2d 	.word	0x27d4eb2d
 8013da0:	2000ebd0 	.word	0x2000ebd0
 8013da4:	b21642c9 	.word	0xb21642c9

08013da8 <__atomic_exchange_8>:
 8013da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013daa:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8013dae:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8013db2:	4917      	ldr	r1, [pc, #92]	@ (8013e10 <__atomic_exchange_8+0x68>)
 8013db4:	4f17      	ldr	r7, [pc, #92]	@ (8013e14 <__atomic_exchange_8+0x6c>)
 8013db6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8013dba:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8013dbe:	fb01 fe0e 	mul.w	lr, r1, lr
 8013dc2:	4915      	ldr	r1, [pc, #84]	@ (8013e18 <__atomic_exchange_8+0x70>)
 8013dc4:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8013dc8:	4606      	mov	r6, r0
 8013dca:	fba1 010e 	umull	r0, r1, r1, lr
 8013dce:	0909      	lsrs	r1, r1, #4
 8013dd0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013dd4:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013dd8:	ebae 0e01 	sub.w	lr, lr, r1
 8013ddc:	f04f 0501 	mov.w	r5, #1
 8013de0:	eb0e 0107 	add.w	r1, lr, r7
 8013de4:	e8d1 cf4f 	ldrexb	ip, [r1]
 8013de8:	e8c1 5f40 	strexb	r0, r5, [r1]
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d1f9      	bne.n	8013de4 <__atomic_exchange_8+0x3c>
 8013df0:	f3bf 8f5b 	dmb	ish
 8013df4:	fa5f f48c 	uxtb.w	r4, ip
 8013df8:	2c00      	cmp	r4, #0
 8013dfa:	d1f3      	bne.n	8013de4 <__atomic_exchange_8+0x3c>
 8013dfc:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013e00:	e9c6 2300 	strd	r2, r3, [r6]
 8013e04:	f3bf 8f5b 	dmb	ish
 8013e08:	f807 c00e 	strb.w	ip, [r7, lr]
 8013e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	27d4eb2d 	.word	0x27d4eb2d
 8013e14:	2000ebd0 	.word	0x2000ebd0
 8013e18:	b21642c9 	.word	0xb21642c9

08013e1c <rcutils_get_env>:
 8013e1c:	b150      	cbz	r0, 8013e34 <rcutils_get_env+0x18>
 8013e1e:	b510      	push	{r4, lr}
 8013e20:	460c      	mov	r4, r1
 8013e22:	b909      	cbnz	r1, 8013e28 <rcutils_get_env+0xc>
 8013e24:	4806      	ldr	r0, [pc, #24]	@ (8013e40 <rcutils_get_env+0x24>)
 8013e26:	bd10      	pop	{r4, pc}
 8013e28:	f004 f808 	bl	8017e3c <getenv>
 8013e2c:	b120      	cbz	r0, 8013e38 <rcutils_get_env+0x1c>
 8013e2e:	6020      	str	r0, [r4, #0]
 8013e30:	2000      	movs	r0, #0
 8013e32:	bd10      	pop	{r4, pc}
 8013e34:	4803      	ldr	r0, [pc, #12]	@ (8013e44 <rcutils_get_env+0x28>)
 8013e36:	4770      	bx	lr
 8013e38:	4b03      	ldr	r3, [pc, #12]	@ (8013e48 <rcutils_get_env+0x2c>)
 8013e3a:	6023      	str	r3, [r4, #0]
 8013e3c:	e7f8      	b.n	8013e30 <rcutils_get_env+0x14>
 8013e3e:	bf00      	nop
 8013e40:	08019a40 	.word	0x08019a40
 8013e44:	08019a24 	.word	0x08019a24
 8013e48:	08019f44 	.word	0x08019f44

08013e4c <rcutils_format_string_limit>:
 8013e4c:	b40f      	push	{r0, r1, r2, r3}
 8013e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e50:	b083      	sub	sp, #12
 8013e52:	ac08      	add	r4, sp, #32
 8013e54:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013e5a:	b376      	cbz	r6, 8013eba <rcutils_format_string_limit+0x6e>
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	f7f7 f903 	bl	800b068 <rcutils_allocator_is_valid>
 8013e62:	b350      	cbz	r0, 8013eba <rcutils_format_string_limit+0x6e>
 8013e64:	2100      	movs	r1, #0
 8013e66:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013e68:	4632      	mov	r2, r6
 8013e6a:	4608      	mov	r0, r1
 8013e6c:	e9cd 3300 	strd	r3, r3, [sp]
 8013e70:	f000 f8f8 	bl	8014064 <rcutils_vsnprintf>
 8013e74:	1c43      	adds	r3, r0, #1
 8013e76:	4605      	mov	r5, r0
 8013e78:	d01f      	beq.n	8013eba <rcutils_format_string_limit+0x6e>
 8013e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e7c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013e7e:	1c47      	adds	r7, r0, #1
 8013e80:	429f      	cmp	r7, r3
 8013e82:	bf84      	itt	hi
 8013e84:	461f      	movhi	r7, r3
 8013e86:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8013e8a:	4638      	mov	r0, r7
 8013e8c:	9b08      	ldr	r3, [sp, #32]
 8013e8e:	4798      	blx	r3
 8013e90:	4604      	mov	r4, r0
 8013e92:	b190      	cbz	r0, 8013eba <rcutils_format_string_limit+0x6e>
 8013e94:	9b01      	ldr	r3, [sp, #4]
 8013e96:	4632      	mov	r2, r6
 8013e98:	4639      	mov	r1, r7
 8013e9a:	f000 f8e3 	bl	8014064 <rcutils_vsnprintf>
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	db07      	blt.n	8013eb2 <rcutils_format_string_limit+0x66>
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	5563      	strb	r3, [r4, r5]
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	b003      	add	sp, #12
 8013eaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013eae:	b004      	add	sp, #16
 8013eb0:	4770      	bx	lr
 8013eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013eb4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	4798      	blx	r3
 8013eba:	2400      	movs	r4, #0
 8013ebc:	e7f3      	b.n	8013ea6 <rcutils_format_string_limit+0x5a>
 8013ebe:	bf00      	nop

08013ec0 <rcutils_repl_str>:
 8013ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec4:	4699      	mov	r9, r3
 8013ec6:	b089      	sub	sp, #36	@ 0x24
 8013ec8:	4603      	mov	r3, r0
 8013eca:	4648      	mov	r0, r9
 8013ecc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013ed0:	4698      	mov	r8, r3
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	460c      	mov	r4, r1
 8013ed6:	f7f7 f8c7 	bl	800b068 <rcutils_allocator_is_valid>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	f000 80a3 	beq.w	8014026 <rcutils_repl_str+0x166>
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	f7ec f9f5 	bl	80002d0 <strlen>
 8013ee6:	f04f 0a00 	mov.w	sl, #0
 8013eea:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8013eee:	9001      	str	r0, [sp, #4]
 8013ef0:	4657      	mov	r7, sl
 8013ef2:	4655      	mov	r5, sl
 8013ef4:	2610      	movs	r6, #16
 8013ef6:	e01e      	b.n	8013f36 <rcutils_repl_str+0x76>
 8013ef8:	3501      	adds	r5, #1
 8013efa:	45aa      	cmp	sl, r5
 8013efc:	d212      	bcs.n	8013f24 <rcutils_repl_str+0x64>
 8013efe:	44b2      	add	sl, r6
 8013f00:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013f04:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8013f08:	4798      	blx	r3
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	f000 8088 	beq.w	8014020 <rcutils_repl_str+0x160>
 8013f10:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013f14:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8013f18:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8013f1c:	4607      	mov	r7, r0
 8013f1e:	bf28      	it	cs
 8013f20:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8013f24:	9a00      	ldr	r2, [sp, #0]
 8013f26:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8013f2a:	1aa2      	subs	r2, r4, r2
 8013f2c:	f843 2c04 	str.w	r2, [r3, #-4]
 8013f30:	9b01      	ldr	r3, [sp, #4]
 8013f32:	eb04 0803 	add.w	r8, r4, r3
 8013f36:	9902      	ldr	r1, [sp, #8]
 8013f38:	4640      	mov	r0, r8
 8013f3a:	f004 fc69 	bl	8018810 <strstr>
 8013f3e:	4604      	mov	r4, r0
 8013f40:	465a      	mov	r2, fp
 8013f42:	4638      	mov	r0, r7
 8013f44:	2c00      	cmp	r4, #0
 8013f46:	d1d7      	bne.n	8013ef8 <rcutils_repl_str+0x38>
 8013f48:	4640      	mov	r0, r8
 8013f4a:	f7ec f9c1 	bl	80002d0 <strlen>
 8013f4e:	9b00      	ldr	r3, [sp, #0]
 8013f50:	eba8 0803 	sub.w	r8, r8, r3
 8013f54:	eb08 0300 	add.w	r3, r8, r0
 8013f58:	9304      	str	r3, [sp, #16]
 8013f5a:	f8d9 8000 	ldr.w	r8, [r9]
 8013f5e:	2d00      	cmp	r5, #0
 8013f60:	d03f      	beq.n	8013fe2 <rcutils_repl_str+0x122>
 8013f62:	9803      	ldr	r0, [sp, #12]
 8013f64:	f7ec f9b4 	bl	80002d0 <strlen>
 8013f68:	4606      	mov	r6, r0
 8013f6a:	9801      	ldr	r0, [sp, #4]
 8013f6c:	9a04      	ldr	r2, [sp, #16]
 8013f6e:	1a33      	subs	r3, r6, r0
 8013f70:	fb05 2a03 	mla	sl, r5, r3, r2
 8013f74:	4659      	mov	r1, fp
 8013f76:	f10a 0001 	add.w	r0, sl, #1
 8013f7a:	47c0      	blx	r8
 8013f7c:	4683      	mov	fp, r0
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	d04e      	beq.n	8014020 <rcutils_repl_str+0x160>
 8013f82:	683a      	ldr	r2, [r7, #0]
 8013f84:	9900      	ldr	r1, [sp, #0]
 8013f86:	f004 fce4 	bl	8018952 <memcpy>
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	9706      	str	r7, [sp, #24]
 8013f8e:	1e6a      	subs	r2, r5, #1
 8013f90:	445b      	add	r3, fp
 8013f92:	46a8      	mov	r8, r5
 8013f94:	9202      	str	r2, [sp, #8]
 8013f96:	4625      	mov	r5, r4
 8013f98:	f8cd 901c 	str.w	r9, [sp, #28]
 8013f9c:	461c      	mov	r4, r3
 8013f9e:	9903      	ldr	r1, [sp, #12]
 8013fa0:	4632      	mov	r2, r6
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f004 fcd5 	bl	8018952 <memcpy>
 8013fa8:	9b01      	ldr	r3, [sp, #4]
 8013faa:	f857 2b04 	ldr.w	r2, [r7], #4
 8013fae:	eb02 0c03 	add.w	ip, r2, r3
 8013fb2:	9b00      	ldr	r3, [sp, #0]
 8013fb4:	eb03 010c 	add.w	r1, r3, ip
 8013fb8:	9b02      	ldr	r3, [sp, #8]
 8013fba:	4434      	add	r4, r6
 8013fbc:	429d      	cmp	r5, r3
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	d022      	beq.n	8014008 <rcutils_repl_str+0x148>
 8013fc2:	683a      	ldr	r2, [r7, #0]
 8013fc4:	eba2 090c 	sub.w	r9, r2, ip
 8013fc8:	464a      	mov	r2, r9
 8013fca:	3501      	adds	r5, #1
 8013fcc:	f004 fcc1 	bl	8018952 <memcpy>
 8013fd0:	45a8      	cmp	r8, r5
 8013fd2:	444c      	add	r4, r9
 8013fd4:	d1e3      	bne.n	8013f9e <rcutils_repl_str+0xde>
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8013fdc:	f80b 300a 	strb.w	r3, [fp, sl]
 8013fe0:	e008      	b.n	8013ff4 <rcutils_repl_str+0x134>
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	4659      	mov	r1, fp
 8013fe6:	3001      	adds	r0, #1
 8013fe8:	47c0      	blx	r8
 8013fea:	4683      	mov	fp, r0
 8013fec:	b110      	cbz	r0, 8013ff4 <rcutils_repl_str+0x134>
 8013fee:	9900      	ldr	r1, [sp, #0]
 8013ff0:	f004 fca7 	bl	8018942 <strcpy>
 8013ff4:	4638      	mov	r0, r7
 8013ff6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013ffa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013ffe:	4798      	blx	r3
 8014000:	4658      	mov	r0, fp
 8014002:	b009      	add	sp, #36	@ 0x24
 8014004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014008:	9b04      	ldr	r3, [sp, #16]
 801400a:	eba3 020c 	sub.w	r2, r3, ip
 801400e:	9205      	str	r2, [sp, #20]
 8014010:	3501      	adds	r5, #1
 8014012:	f004 fc9e 	bl	8018952 <memcpy>
 8014016:	9a05      	ldr	r2, [sp, #20]
 8014018:	45a8      	cmp	r8, r5
 801401a:	4414      	add	r4, r2
 801401c:	d1bf      	bne.n	8013f9e <rcutils_repl_str+0xde>
 801401e:	e7da      	b.n	8013fd6 <rcutils_repl_str+0x116>
 8014020:	f04f 0b00 	mov.w	fp, #0
 8014024:	e7e6      	b.n	8013ff4 <rcutils_repl_str+0x134>
 8014026:	4683      	mov	fp, r0
 8014028:	4658      	mov	r0, fp
 801402a:	b009      	add	sp, #36	@ 0x24
 801402c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014030 <rcutils_snprintf>:
 8014030:	b40c      	push	{r2, r3}
 8014032:	b530      	push	{r4, r5, lr}
 8014034:	b083      	sub	sp, #12
 8014036:	ab06      	add	r3, sp, #24
 8014038:	f853 2b04 	ldr.w	r2, [r3], #4
 801403c:	9301      	str	r3, [sp, #4]
 801403e:	b152      	cbz	r2, 8014056 <rcutils_snprintf+0x26>
 8014040:	b138      	cbz	r0, 8014052 <rcutils_snprintf+0x22>
 8014042:	b141      	cbz	r1, 8014056 <rcutils_snprintf+0x26>
 8014044:	f004 fade 	bl	8018604 <vsniprintf>
 8014048:	b003      	add	sp, #12
 801404a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801404e:	b002      	add	sp, #8
 8014050:	4770      	bx	lr
 8014052:	2900      	cmp	r1, #0
 8014054:	d0f6      	beq.n	8014044 <rcutils_snprintf+0x14>
 8014056:	f004 fc47 	bl	80188e8 <__errno>
 801405a:	2316      	movs	r3, #22
 801405c:	6003      	str	r3, [r0, #0]
 801405e:	f04f 30ff 	mov.w	r0, #4294967295
 8014062:	e7f1      	b.n	8014048 <rcutils_snprintf+0x18>

08014064 <rcutils_vsnprintf>:
 8014064:	b570      	push	{r4, r5, r6, lr}
 8014066:	b13a      	cbz	r2, 8014078 <rcutils_vsnprintf+0x14>
 8014068:	b120      	cbz	r0, 8014074 <rcutils_vsnprintf+0x10>
 801406a:	b129      	cbz	r1, 8014078 <rcutils_vsnprintf+0x14>
 801406c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014070:	f004 bac8 	b.w	8018604 <vsniprintf>
 8014074:	2900      	cmp	r1, #0
 8014076:	d0f9      	beq.n	801406c <rcutils_vsnprintf+0x8>
 8014078:	f004 fc36 	bl	80188e8 <__errno>
 801407c:	2316      	movs	r3, #22
 801407e:	6003      	str	r3, [r0, #0]
 8014080:	f04f 30ff 	mov.w	r0, #4294967295
 8014084:	bd70      	pop	{r4, r5, r6, pc}
 8014086:	bf00      	nop

08014088 <rcutils_strdup>:
 8014088:	b084      	sub	sp, #16
 801408a:	b570      	push	{r4, r5, r6, lr}
 801408c:	b086      	sub	sp, #24
 801408e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8014092:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8014096:	4604      	mov	r4, r0
 8014098:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801409c:	f10d 0e04 	add.w	lr, sp, #4
 80140a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140a4:	f8dc 3000 	ldr.w	r3, [ip]
 80140a8:	f8ce 3000 	str.w	r3, [lr]
 80140ac:	b304      	cbz	r4, 80140f0 <rcutils_strdup+0x68>
 80140ae:	a801      	add	r0, sp, #4
 80140b0:	f7f6 ffda 	bl	800b068 <rcutils_allocator_is_valid>
 80140b4:	b1e0      	cbz	r0, 80140f0 <rcutils_strdup+0x68>
 80140b6:	f04f 32ff 	mov.w	r2, #4294967295
 80140ba:	2100      	movs	r1, #0
 80140bc:	4620      	mov	r0, r4
 80140be:	f7ec f8b7 	bl	8000230 <memchr>
 80140c2:	b190      	cbz	r0, 80140ea <rcutils_strdup+0x62>
 80140c4:	1b06      	subs	r6, r0, r4
 80140c6:	1c70      	adds	r0, r6, #1
 80140c8:	9b01      	ldr	r3, [sp, #4]
 80140ca:	9905      	ldr	r1, [sp, #20]
 80140cc:	4798      	blx	r3
 80140ce:	4605      	mov	r5, r0
 80140d0:	b128      	cbz	r0, 80140de <rcutils_strdup+0x56>
 80140d2:	4632      	mov	r2, r6
 80140d4:	4621      	mov	r1, r4
 80140d6:	f004 fc3c 	bl	8018952 <memcpy>
 80140da:	2300      	movs	r3, #0
 80140dc:	55ab      	strb	r3, [r5, r6]
 80140de:	4628      	mov	r0, r5
 80140e0:	b006      	add	sp, #24
 80140e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140e6:	b004      	add	sp, #16
 80140e8:	4770      	bx	lr
 80140ea:	f04f 36ff 	mov.w	r6, #4294967295
 80140ee:	e7eb      	b.n	80140c8 <rcutils_strdup+0x40>
 80140f0:	2500      	movs	r5, #0
 80140f2:	e7f4      	b.n	80140de <rcutils_strdup+0x56>

080140f4 <rcutils_strndup>:
 80140f4:	b082      	sub	sp, #8
 80140f6:	b570      	push	{r4, r5, r6, lr}
 80140f8:	ac04      	add	r4, sp, #16
 80140fa:	e884 000c 	stmia.w	r4, {r2, r3}
 80140fe:	b1e8      	cbz	r0, 801413c <rcutils_strndup+0x48>
 8014100:	4605      	mov	r5, r0
 8014102:	a804      	add	r0, sp, #16
 8014104:	460c      	mov	r4, r1
 8014106:	f7f6 ffaf 	bl	800b068 <rcutils_allocator_is_valid>
 801410a:	b1b8      	cbz	r0, 801413c <rcutils_strndup+0x48>
 801410c:	4622      	mov	r2, r4
 801410e:	2100      	movs	r1, #0
 8014110:	4628      	mov	r0, r5
 8014112:	f7ec f88d 	bl	8000230 <memchr>
 8014116:	b100      	cbz	r0, 801411a <rcutils_strndup+0x26>
 8014118:	1b44      	subs	r4, r0, r5
 801411a:	9b04      	ldr	r3, [sp, #16]
 801411c:	9908      	ldr	r1, [sp, #32]
 801411e:	1c60      	adds	r0, r4, #1
 8014120:	4798      	blx	r3
 8014122:	4606      	mov	r6, r0
 8014124:	b128      	cbz	r0, 8014132 <rcutils_strndup+0x3e>
 8014126:	4622      	mov	r2, r4
 8014128:	4629      	mov	r1, r5
 801412a:	f004 fc12 	bl	8018952 <memcpy>
 801412e:	2300      	movs	r3, #0
 8014130:	5533      	strb	r3, [r6, r4]
 8014132:	4630      	mov	r0, r6
 8014134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014138:	b002      	add	sp, #8
 801413a:	4770      	bx	lr
 801413c:	2600      	movs	r6, #0
 801413e:	4630      	mov	r0, r6
 8014140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014144:	b002      	add	sp, #8
 8014146:	4770      	bx	lr

08014148 <rcutils_get_zero_initialized_string_map>:
 8014148:	4b01      	ldr	r3, [pc, #4]	@ (8014150 <rcutils_get_zero_initialized_string_map+0x8>)
 801414a:	6818      	ldr	r0, [r3, #0]
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop
 8014150:	0801a398 	.word	0x0801a398

08014154 <rcutils_string_map_reserve>:
 8014154:	2800      	cmp	r0, #0
 8014156:	d04e      	beq.n	80141f6 <rcutils_string_map_reserve+0xa2>
 8014158:	b530      	push	{r4, r5, lr}
 801415a:	6803      	ldr	r3, [r0, #0]
 801415c:	b087      	sub	sp, #28
 801415e:	4604      	mov	r4, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d043      	beq.n	80141ec <rcutils_string_map_reserve+0x98>
 8014164:	f103 0c0c 	add.w	ip, r3, #12
 8014168:	460d      	mov	r5, r1
 801416a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801416e:	f10d 0e04 	add.w	lr, sp, #4
 8014172:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014176:	f8dc 3000 	ldr.w	r3, [ip]
 801417a:	f8ce 3000 	str.w	r3, [lr]
 801417e:	a801      	add	r0, sp, #4
 8014180:	f7f6 ff72 	bl	800b068 <rcutils_allocator_is_valid>
 8014184:	b308      	cbz	r0, 80141ca <rcutils_string_map_reserve+0x76>
 8014186:	6823      	ldr	r3, [r4, #0]
 8014188:	6899      	ldr	r1, [r3, #8]
 801418a:	42a9      	cmp	r1, r5
 801418c:	d829      	bhi.n	80141e2 <rcutils_string_map_reserve+0x8e>
 801418e:	685a      	ldr	r2, [r3, #4]
 8014190:	42aa      	cmp	r2, r5
 8014192:	d024      	beq.n	80141de <rcutils_string_map_reserve+0x8a>
 8014194:	b1e5      	cbz	r5, 80141d0 <rcutils_string_map_reserve+0x7c>
 8014196:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801419a:	d22a      	bcs.n	80141f2 <rcutils_string_map_reserve+0x9e>
 801419c:	6818      	ldr	r0, [r3, #0]
 801419e:	9a05      	ldr	r2, [sp, #20]
 80141a0:	9b03      	ldr	r3, [sp, #12]
 80141a2:	00e9      	lsls	r1, r5, #3
 80141a4:	4798      	blx	r3
 80141a6:	b320      	cbz	r0, 80141f2 <rcutils_string_map_reserve+0x9e>
 80141a8:	6824      	ldr	r4, [r4, #0]
 80141aa:	6861      	ldr	r1, [r4, #4]
 80141ac:	6020      	str	r0, [r4, #0]
 80141ae:	42a9      	cmp	r1, r5
 80141b0:	d214      	bcs.n	80141dc <rcutils_string_map_reserve+0x88>
 80141b2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80141b6:	1a69      	subs	r1, r5, r1
 80141b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80141bc:	2200      	movs	r2, #0
 80141be:	e9c3 2200 	strd	r2, r2, [r3]
 80141c2:	3308      	adds	r3, #8
 80141c4:	428b      	cmp	r3, r1
 80141c6:	d1fa      	bne.n	80141be <rcutils_string_map_reserve+0x6a>
 80141c8:	e008      	b.n	80141dc <rcutils_string_map_reserve+0x88>
 80141ca:	200b      	movs	r0, #11
 80141cc:	b007      	add	sp, #28
 80141ce:	bd30      	pop	{r4, r5, pc}
 80141d0:	9a02      	ldr	r2, [sp, #8]
 80141d2:	9905      	ldr	r1, [sp, #20]
 80141d4:	6818      	ldr	r0, [r3, #0]
 80141d6:	4790      	blx	r2
 80141d8:	6824      	ldr	r4, [r4, #0]
 80141da:	6025      	str	r5, [r4, #0]
 80141dc:	6065      	str	r5, [r4, #4]
 80141de:	2000      	movs	r0, #0
 80141e0:	e7f4      	b.n	80141cc <rcutils_string_map_reserve+0x78>
 80141e2:	4620      	mov	r0, r4
 80141e4:	f7ff ffb6 	bl	8014154 <rcutils_string_map_reserve>
 80141e8:	b007      	add	sp, #28
 80141ea:	bd30      	pop	{r4, r5, pc}
 80141ec:	201f      	movs	r0, #31
 80141ee:	b007      	add	sp, #28
 80141f0:	bd30      	pop	{r4, r5, pc}
 80141f2:	200a      	movs	r0, #10
 80141f4:	e7ea      	b.n	80141cc <rcutils_string_map_reserve+0x78>
 80141f6:	200b      	movs	r0, #11
 80141f8:	4770      	bx	lr
 80141fa:	bf00      	nop

080141fc <rcutils_string_map_init>:
 80141fc:	b082      	sub	sp, #8
 80141fe:	b570      	push	{r4, r5, r6, lr}
 8014200:	ac04      	add	r4, sp, #16
 8014202:	e884 000c 	stmia.w	r4, {r2, r3}
 8014206:	b378      	cbz	r0, 8014268 <rcutils_string_map_init+0x6c>
 8014208:	6806      	ldr	r6, [r0, #0]
 801420a:	4604      	mov	r4, r0
 801420c:	b12e      	cbz	r6, 801421a <rcutils_string_map_init+0x1e>
 801420e:	251e      	movs	r5, #30
 8014210:	4628      	mov	r0, r5
 8014212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014216:	b002      	add	sp, #8
 8014218:	4770      	bx	lr
 801421a:	a804      	add	r0, sp, #16
 801421c:	460d      	mov	r5, r1
 801421e:	f7f6 ff23 	bl	800b068 <rcutils_allocator_is_valid>
 8014222:	b308      	cbz	r0, 8014268 <rcutils_string_map_init+0x6c>
 8014224:	9b04      	ldr	r3, [sp, #16]
 8014226:	9908      	ldr	r1, [sp, #32]
 8014228:	2020      	movs	r0, #32
 801422a:	4798      	blx	r3
 801422c:	6020      	str	r0, [r4, #0]
 801422e:	b308      	cbz	r0, 8014274 <rcutils_string_map_init+0x78>
 8014230:	f10d 0e10 	add.w	lr, sp, #16
 8014234:	e9c0 6600 	strd	r6, r6, [r0]
 8014238:	6086      	str	r6, [r0, #8]
 801423a:	f100 0c0c 	add.w	ip, r0, #12
 801423e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014246:	f8de 3000 	ldr.w	r3, [lr]
 801424a:	f8cc 3000 	str.w	r3, [ip]
 801424e:	4629      	mov	r1, r5
 8014250:	4620      	mov	r0, r4
 8014252:	f7ff ff7f 	bl	8014154 <rcutils_string_map_reserve>
 8014256:	4605      	mov	r5, r0
 8014258:	2800      	cmp	r0, #0
 801425a:	d0d9      	beq.n	8014210 <rcutils_string_map_init+0x14>
 801425c:	9b05      	ldr	r3, [sp, #20]
 801425e:	9908      	ldr	r1, [sp, #32]
 8014260:	6820      	ldr	r0, [r4, #0]
 8014262:	4798      	blx	r3
 8014264:	6026      	str	r6, [r4, #0]
 8014266:	e7d3      	b.n	8014210 <rcutils_string_map_init+0x14>
 8014268:	250b      	movs	r5, #11
 801426a:	4628      	mov	r0, r5
 801426c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014270:	b002      	add	sp, #8
 8014272:	4770      	bx	lr
 8014274:	250a      	movs	r5, #10
 8014276:	e7cb      	b.n	8014210 <rcutils_string_map_init+0x14>

08014278 <rcutils_string_map_fini>:
 8014278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801427c:	b086      	sub	sp, #24
 801427e:	2800      	cmp	r0, #0
 8014280:	d04f      	beq.n	8014322 <rcutils_string_map_fini+0xaa>
 8014282:	6805      	ldr	r5, [r0, #0]
 8014284:	4606      	mov	r6, r0
 8014286:	2d00      	cmp	r5, #0
 8014288:	d046      	beq.n	8014318 <rcutils_string_map_fini+0xa0>
 801428a:	686b      	ldr	r3, [r5, #4]
 801428c:	b353      	cbz	r3, 80142e4 <rcutils_string_map_fini+0x6c>
 801428e:	2400      	movs	r4, #0
 8014290:	682a      	ldr	r2, [r5, #0]
 8014292:	4627      	mov	r7, r4
 8014294:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8014298:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801429c:	b1f8      	cbz	r0, 80142de <rcutils_string_map_fini+0x66>
 801429e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 80142a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80142a6:	4651      	mov	r1, sl
 80142a8:	47c8      	blx	r9
 80142aa:	682b      	ldr	r3, [r5, #0]
 80142ac:	eb03 0208 	add.w	r2, r3, r8
 80142b0:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 80142b4:	6850      	ldr	r0, [r2, #4]
 80142b6:	4651      	mov	r1, sl
 80142b8:	47c8      	blx	r9
 80142ba:	682a      	ldr	r2, [r5, #0]
 80142bc:	68ab      	ldr	r3, [r5, #8]
 80142be:	4442      	add	r2, r8
 80142c0:	3b01      	subs	r3, #1
 80142c2:	6057      	str	r7, [r2, #4]
 80142c4:	60ab      	str	r3, [r5, #8]
 80142c6:	6835      	ldr	r5, [r6, #0]
 80142c8:	686b      	ldr	r3, [r5, #4]
 80142ca:	3401      	adds	r4, #1
 80142cc:	429c      	cmp	r4, r3
 80142ce:	d209      	bcs.n	80142e4 <rcutils_string_map_fini+0x6c>
 80142d0:	682a      	ldr	r2, [r5, #0]
 80142d2:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80142d6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80142da:	2800      	cmp	r0, #0
 80142dc:	d1df      	bne.n	801429e <rcutils_string_map_fini+0x26>
 80142de:	3401      	adds	r4, #1
 80142e0:	42a3      	cmp	r3, r4
 80142e2:	d8d7      	bhi.n	8014294 <rcutils_string_map_fini+0x1c>
 80142e4:	2100      	movs	r1, #0
 80142e6:	4630      	mov	r0, r6
 80142e8:	f7ff ff34 	bl	8014154 <rcutils_string_map_reserve>
 80142ec:	4604      	mov	r4, r0
 80142ee:	b118      	cbz	r0, 80142f8 <rcutils_string_map_fini+0x80>
 80142f0:	4620      	mov	r0, r4
 80142f2:	b006      	add	sp, #24
 80142f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142f8:	6835      	ldr	r5, [r6, #0]
 80142fa:	350c      	adds	r5, #12
 80142fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142fe:	af01      	add	r7, sp, #4
 8014300:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014302:	682b      	ldr	r3, [r5, #0]
 8014304:	603b      	str	r3, [r7, #0]
 8014306:	a801      	add	r0, sp, #4
 8014308:	f7f6 feae 	bl	800b068 <rcutils_allocator_is_valid>
 801430c:	b148      	cbz	r0, 8014322 <rcutils_string_map_fini+0xaa>
 801430e:	9b02      	ldr	r3, [sp, #8]
 8014310:	9905      	ldr	r1, [sp, #20]
 8014312:	6830      	ldr	r0, [r6, #0]
 8014314:	4798      	blx	r3
 8014316:	6034      	str	r4, [r6, #0]
 8014318:	2400      	movs	r4, #0
 801431a:	4620      	mov	r0, r4
 801431c:	b006      	add	sp, #24
 801431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014322:	240b      	movs	r4, #11
 8014324:	4620      	mov	r0, r4
 8014326:	b006      	add	sp, #24
 8014328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801432c <rcutils_string_map_getn>:
 801432c:	b338      	cbz	r0, 801437e <rcutils_string_map_getn+0x52>
 801432e:	6800      	ldr	r0, [r0, #0]
 8014330:	b328      	cbz	r0, 801437e <rcutils_string_map_getn+0x52>
 8014332:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014336:	460e      	mov	r6, r1
 8014338:	b1c1      	cbz	r1, 801436c <rcutils_string_map_getn+0x40>
 801433a:	e9d0 9800 	ldrd	r9, r8, [r0]
 801433e:	f1b8 0f00 	cmp.w	r8, #0
 8014342:	d013      	beq.n	801436c <rcutils_string_map_getn+0x40>
 8014344:	4617      	mov	r7, r2
 8014346:	2400      	movs	r4, #0
 8014348:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 801434c:	4628      	mov	r0, r5
 801434e:	b155      	cbz	r5, 8014366 <rcutils_string_map_getn+0x3a>
 8014350:	f7eb ffbe 	bl	80002d0 <strlen>
 8014354:	42b8      	cmp	r0, r7
 8014356:	4602      	mov	r2, r0
 8014358:	4629      	mov	r1, r5
 801435a:	bf38      	it	cc
 801435c:	463a      	movcc	r2, r7
 801435e:	4630      	mov	r0, r6
 8014360:	f004 fa31 	bl	80187c6 <strncmp>
 8014364:	b128      	cbz	r0, 8014372 <rcutils_string_map_getn+0x46>
 8014366:	3401      	adds	r4, #1
 8014368:	45a0      	cmp	r8, r4
 801436a:	d1ed      	bne.n	8014348 <rcutils_string_map_getn+0x1c>
 801436c:	2000      	movs	r0, #0
 801436e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014372:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8014376:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801437a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801437e:	4770      	bx	lr

08014380 <rmw_get_zero_initialized_context>:
 8014380:	b510      	push	{r4, lr}
 8014382:	4903      	ldr	r1, [pc, #12]	@ (8014390 <rmw_get_zero_initialized_context+0x10>)
 8014384:	4604      	mov	r4, r0
 8014386:	2270      	movs	r2, #112	@ 0x70
 8014388:	f004 fae3 	bl	8018952 <memcpy>
 801438c:	4620      	mov	r0, r4
 801438e:	bd10      	pop	{r4, pc}
 8014390:	0801a3a0 	.word	0x0801a3a0

08014394 <rmw_get_zero_initialized_init_options>:
 8014394:	b510      	push	{r4, lr}
 8014396:	4903      	ldr	r1, [pc, #12]	@ (80143a4 <rmw_get_zero_initialized_init_options+0x10>)
 8014398:	4604      	mov	r4, r0
 801439a:	2258      	movs	r2, #88	@ 0x58
 801439c:	f004 fad9 	bl	8018952 <memcpy>
 80143a0:	4620      	mov	r0, r4
 80143a2:	bd10      	pop	{r4, pc}
 80143a4:	0801a410 	.word	0x0801a410

080143a8 <rmw_subscription_content_filter_options_fini>:
 80143a8:	b1b0      	cbz	r0, 80143d8 <rmw_subscription_content_filter_options_fini+0x30>
 80143aa:	b538      	push	{r3, r4, r5, lr}
 80143ac:	4604      	mov	r4, r0
 80143ae:	4608      	mov	r0, r1
 80143b0:	460d      	mov	r5, r1
 80143b2:	f7f6 fe59 	bl	800b068 <rcutils_allocator_is_valid>
 80143b6:	b168      	cbz	r0, 80143d4 <rmw_subscription_content_filter_options_fini+0x2c>
 80143b8:	6820      	ldr	r0, [r4, #0]
 80143ba:	b120      	cbz	r0, 80143c6 <rmw_subscription_content_filter_options_fini+0x1e>
 80143bc:	686b      	ldr	r3, [r5, #4]
 80143be:	6929      	ldr	r1, [r5, #16]
 80143c0:	4798      	blx	r3
 80143c2:	2300      	movs	r3, #0
 80143c4:	6023      	str	r3, [r4, #0]
 80143c6:	1d20      	adds	r0, r4, #4
 80143c8:	f003 fafe 	bl	80179c8 <rcutils_string_array_fini>
 80143cc:	3800      	subs	r0, #0
 80143ce:	bf18      	it	ne
 80143d0:	2001      	movne	r0, #1
 80143d2:	bd38      	pop	{r3, r4, r5, pc}
 80143d4:	200b      	movs	r0, #11
 80143d6:	bd38      	pop	{r3, r4, r5, pc}
 80143d8:	200b      	movs	r0, #11
 80143da:	4770      	bx	lr

080143dc <rmw_get_default_subscription_options>:
 80143dc:	2200      	movs	r2, #0
 80143de:	e9c0 2200 	strd	r2, r2, [r0]
 80143e2:	6082      	str	r2, [r0, #8]
 80143e4:	4770      	bx	lr
 80143e6:	bf00      	nop

080143e8 <rmw_time_equal>:
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	b084      	sub	sp, #16
 80143ec:	ac04      	add	r4, sp, #16
 80143ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80143f2:	4925      	ldr	r1, [pc, #148]	@ (8014488 <rmw_time_equal+0xa0>)
 80143f4:	9c01      	ldr	r4, [sp, #4]
 80143f6:	2202      	movs	r2, #2
 80143f8:	4281      	cmp	r1, r0
 80143fa:	41a2      	sbcs	r2, r4
 80143fc:	d333      	bcc.n	8014466 <rmw_time_equal+0x7e>
 80143fe:	4603      	mov	r3, r0
 8014400:	4822      	ldr	r0, [pc, #136]	@ (801448c <rmw_time_equal+0xa4>)
 8014402:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8014406:	fba3 3200 	umull	r3, r2, r3, r0
 801440a:	fb00 2204 	mla	r2, r0, r4, r2
 801440e:	43de      	mvns	r6, r3
 8014410:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014414:	1a84      	subs	r4, r0, r2
 8014416:	428e      	cmp	r6, r1
 8014418:	41ac      	sbcs	r4, r5
 801441a:	d332      	bcc.n	8014482 <rmw_time_equal+0x9a>
 801441c:	eb11 0e03 	adds.w	lr, r1, r3
 8014420:	eb42 0005 	adc.w	r0, r2, r5
 8014424:	9b08      	ldr	r3, [sp, #32]
 8014426:	4918      	ldr	r1, [pc, #96]	@ (8014488 <rmw_time_equal+0xa0>)
 8014428:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801442a:	2202      	movs	r2, #2
 801442c:	4299      	cmp	r1, r3
 801442e:	41aa      	sbcs	r2, r5
 8014430:	d31e      	bcc.n	8014470 <rmw_time_equal+0x88>
 8014432:	4c16      	ldr	r4, [pc, #88]	@ (801448c <rmw_time_equal+0xa4>)
 8014434:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014436:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8014438:	fba3 3104 	umull	r3, r1, r3, r4
 801443c:	fb04 1105 	mla	r1, r4, r5, r1
 8014440:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8014444:	43dd      	mvns	r5, r3
 8014446:	ebac 0401 	sub.w	r4, ip, r1
 801444a:	4295      	cmp	r5, r2
 801444c:	41b4      	sbcs	r4, r6
 801444e:	d314      	bcc.n	801447a <rmw_time_equal+0x92>
 8014450:	18d2      	adds	r2, r2, r3
 8014452:	eb41 0306 	adc.w	r3, r1, r6
 8014456:	4283      	cmp	r3, r0
 8014458:	bf08      	it	eq
 801445a:	4572      	cmpeq	r2, lr
 801445c:	bf0c      	ite	eq
 801445e:	2001      	moveq	r0, #1
 8014460:	2000      	movne	r0, #0
 8014462:	b004      	add	sp, #16
 8014464:	bd70      	pop	{r4, r5, r6, pc}
 8014466:	f04f 3eff 	mov.w	lr, #4294967295
 801446a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801446e:	e7d9      	b.n	8014424 <rmw_time_equal+0x3c>
 8014470:	f04f 32ff 	mov.w	r2, #4294967295
 8014474:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014478:	e7ed      	b.n	8014456 <rmw_time_equal+0x6e>
 801447a:	f04f 32ff 	mov.w	r2, #4294967295
 801447e:	4663      	mov	r3, ip
 8014480:	e7e9      	b.n	8014456 <rmw_time_equal+0x6e>
 8014482:	f04f 3eff 	mov.w	lr, #4294967295
 8014486:	e7cd      	b.n	8014424 <rmw_time_equal+0x3c>
 8014488:	25c17d04 	.word	0x25c17d04
 801448c:	3b9aca00 	.word	0x3b9aca00

08014490 <rmw_time_total_nsec>:
 8014490:	b430      	push	{r4, r5}
 8014492:	b084      	sub	sp, #16
 8014494:	ac04      	add	r4, sp, #16
 8014496:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801449a:	4914      	ldr	r1, [pc, #80]	@ (80144ec <rmw_time_total_nsec+0x5c>)
 801449c:	9c01      	ldr	r4, [sp, #4]
 801449e:	2202      	movs	r2, #2
 80144a0:	4281      	cmp	r1, r0
 80144a2:	41a2      	sbcs	r2, r4
 80144a4:	d315      	bcc.n	80144d2 <rmw_time_total_nsec+0x42>
 80144a6:	4912      	ldr	r1, [pc, #72]	@ (80144f0 <rmw_time_total_nsec+0x60>)
 80144a8:	4603      	mov	r3, r0
 80144aa:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 80144ae:	fba3 3201 	umull	r3, r2, r3, r1
 80144b2:	fb01 2204 	mla	r2, r1, r4, r2
 80144b6:	ea6f 0c03 	mvn.w	ip, r3
 80144ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80144be:	1a8c      	subs	r4, r1, r2
 80144c0:	4584      	cmp	ip, r0
 80144c2:	41ac      	sbcs	r4, r5
 80144c4:	d30c      	bcc.n	80144e0 <rmw_time_total_nsec+0x50>
 80144c6:	1818      	adds	r0, r3, r0
 80144c8:	eb42 0105 	adc.w	r1, r2, r5
 80144cc:	b004      	add	sp, #16
 80144ce:	bc30      	pop	{r4, r5}
 80144d0:	4770      	bx	lr
 80144d2:	f04f 30ff 	mov.w	r0, #4294967295
 80144d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80144da:	b004      	add	sp, #16
 80144dc:	bc30      	pop	{r4, r5}
 80144de:	4770      	bx	lr
 80144e0:	f04f 30ff 	mov.w	r0, #4294967295
 80144e4:	b004      	add	sp, #16
 80144e6:	bc30      	pop	{r4, r5}
 80144e8:	4770      	bx	lr
 80144ea:	bf00      	nop
 80144ec:	25c17d04 	.word	0x25c17d04
 80144f0:	3b9aca00 	.word	0x3b9aca00

080144f4 <rmw_get_zero_initialized_message_info>:
 80144f4:	b510      	push	{r4, lr}
 80144f6:	4c09      	ldr	r4, [pc, #36]	@ (801451c <rmw_get_zero_initialized_message_info+0x28>)
 80144f8:	4686      	mov	lr, r0
 80144fa:	4684      	mov	ip, r0
 80144fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801450a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801450e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014512:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014516:	4670      	mov	r0, lr
 8014518:	bd10      	pop	{r4, pc}
 801451a:	bf00      	nop
 801451c:	0801a468 	.word	0x0801a468

08014520 <rmw_validate_full_topic_name>:
 8014520:	2800      	cmp	r0, #0
 8014522:	d049      	beq.n	80145b8 <rmw_validate_full_topic_name+0x98>
 8014524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014528:	460e      	mov	r6, r1
 801452a:	2900      	cmp	r1, #0
 801452c:	d056      	beq.n	80145dc <rmw_validate_full_topic_name+0xbc>
 801452e:	4615      	mov	r5, r2
 8014530:	4604      	mov	r4, r0
 8014532:	f7eb fecd 	bl	80002d0 <strlen>
 8014536:	b150      	cbz	r0, 801454e <rmw_validate_full_topic_name+0x2e>
 8014538:	7823      	ldrb	r3, [r4, #0]
 801453a:	2b2f      	cmp	r3, #47	@ 0x2f
 801453c:	d00c      	beq.n	8014558 <rmw_validate_full_topic_name+0x38>
 801453e:	2302      	movs	r3, #2
 8014540:	6033      	str	r3, [r6, #0]
 8014542:	b10d      	cbz	r5, 8014548 <rmw_validate_full_topic_name+0x28>
 8014544:	2300      	movs	r3, #0
 8014546:	602b      	str	r3, [r5, #0]
 8014548:	2000      	movs	r0, #0
 801454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801454e:	2301      	movs	r3, #1
 8014550:	6033      	str	r3, [r6, #0]
 8014552:	2d00      	cmp	r5, #0
 8014554:	d1f6      	bne.n	8014544 <rmw_validate_full_topic_name+0x24>
 8014556:	e7f7      	b.n	8014548 <rmw_validate_full_topic_name+0x28>
 8014558:	1e47      	subs	r7, r0, #1
 801455a:	5de3      	ldrb	r3, [r4, r7]
 801455c:	2b2f      	cmp	r3, #47	@ 0x2f
 801455e:	d03f      	beq.n	80145e0 <rmw_validate_full_topic_name+0xc0>
 8014560:	1e63      	subs	r3, r4, #1
 8014562:	4621      	mov	r1, r4
 8014564:	eb03 0e00 	add.w	lr, r3, r0
 8014568:	469c      	mov	ip, r3
 801456a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801456e:	2a5f      	cmp	r2, #95	@ 0x5f
 8014570:	d006      	beq.n	8014580 <rmw_validate_full_topic_name+0x60>
 8014572:	d823      	bhi.n	80145bc <rmw_validate_full_topic_name+0x9c>
 8014574:	2a39      	cmp	r2, #57	@ 0x39
 8014576:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801457a:	d82b      	bhi.n	80145d4 <rmw_validate_full_topic_name+0xb4>
 801457c:	2a2e      	cmp	r2, #46	@ 0x2e
 801457e:	d920      	bls.n	80145c2 <rmw_validate_full_topic_name+0xa2>
 8014580:	4573      	cmp	r3, lr
 8014582:	d1f1      	bne.n	8014568 <rmw_validate_full_topic_name+0x48>
 8014584:	4c21      	ldr	r4, [pc, #132]	@ (801460c <rmw_validate_full_topic_name+0xec>)
 8014586:	2300      	movs	r3, #0
 8014588:	e003      	b.n	8014592 <rmw_validate_full_topic_name+0x72>
 801458a:	4298      	cmp	r0, r3
 801458c:	f101 0101 	add.w	r1, r1, #1
 8014590:	d02c      	beq.n	80145ec <rmw_validate_full_topic_name+0xcc>
 8014592:	429f      	cmp	r7, r3
 8014594:	f103 0301 	add.w	r3, r3, #1
 8014598:	d0f7      	beq.n	801458a <rmw_validate_full_topic_name+0x6a>
 801459a:	780a      	ldrb	r2, [r1, #0]
 801459c:	2a2f      	cmp	r2, #47	@ 0x2f
 801459e:	d1f4      	bne.n	801458a <rmw_validate_full_topic_name+0x6a>
 80145a0:	784a      	ldrb	r2, [r1, #1]
 80145a2:	2a2f      	cmp	r2, #47	@ 0x2f
 80145a4:	d02d      	beq.n	8014602 <rmw_validate_full_topic_name+0xe2>
 80145a6:	5ca2      	ldrb	r2, [r4, r2]
 80145a8:	0752      	lsls	r2, r2, #29
 80145aa:	d5ee      	bpl.n	801458a <rmw_validate_full_topic_name+0x6a>
 80145ac:	2206      	movs	r2, #6
 80145ae:	6032      	str	r2, [r6, #0]
 80145b0:	2d00      	cmp	r5, #0
 80145b2:	d0c9      	beq.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145b4:	602b      	str	r3, [r5, #0]
 80145b6:	e7c7      	b.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145b8:	200b      	movs	r0, #11
 80145ba:	4770      	bx	lr
 80145bc:	3a61      	subs	r2, #97	@ 0x61
 80145be:	2a19      	cmp	r2, #25
 80145c0:	d9de      	bls.n	8014580 <rmw_validate_full_topic_name+0x60>
 80145c2:	2304      	movs	r3, #4
 80145c4:	6033      	str	r3, [r6, #0]
 80145c6:	2d00      	cmp	r5, #0
 80145c8:	d0be      	beq.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145ca:	f1c4 0401 	rsb	r4, r4, #1
 80145ce:	4464      	add	r4, ip
 80145d0:	602c      	str	r4, [r5, #0]
 80145d2:	e7b9      	b.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145d4:	f1b8 0f19 	cmp.w	r8, #25
 80145d8:	d9d2      	bls.n	8014580 <rmw_validate_full_topic_name+0x60>
 80145da:	e7f2      	b.n	80145c2 <rmw_validate_full_topic_name+0xa2>
 80145dc:	200b      	movs	r0, #11
 80145de:	e7b4      	b.n	801454a <rmw_validate_full_topic_name+0x2a>
 80145e0:	2303      	movs	r3, #3
 80145e2:	6033      	str	r3, [r6, #0]
 80145e4:	2d00      	cmp	r5, #0
 80145e6:	d0af      	beq.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145e8:	602f      	str	r7, [r5, #0]
 80145ea:	e7ad      	b.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145ec:	28f7      	cmp	r0, #247	@ 0xf7
 80145ee:	d802      	bhi.n	80145f6 <rmw_validate_full_topic_name+0xd6>
 80145f0:	2300      	movs	r3, #0
 80145f2:	6033      	str	r3, [r6, #0]
 80145f4:	e7a8      	b.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145f6:	2307      	movs	r3, #7
 80145f8:	6033      	str	r3, [r6, #0]
 80145fa:	2d00      	cmp	r5, #0
 80145fc:	d0a4      	beq.n	8014548 <rmw_validate_full_topic_name+0x28>
 80145fe:	23f6      	movs	r3, #246	@ 0xf6
 8014600:	e7d8      	b.n	80145b4 <rmw_validate_full_topic_name+0x94>
 8014602:	2205      	movs	r2, #5
 8014604:	6032      	str	r2, [r6, #0]
 8014606:	2d00      	cmp	r5, #0
 8014608:	d1d4      	bne.n	80145b4 <rmw_validate_full_topic_name+0x94>
 801460a:	e79d      	b.n	8014548 <rmw_validate_full_topic_name+0x28>
 801460c:	0801a70b 	.word	0x0801a70b

08014610 <rmw_validate_namespace_with_size>:
 8014610:	2800      	cmp	r0, #0
 8014612:	d031      	beq.n	8014678 <rmw_validate_namespace_with_size+0x68>
 8014614:	b570      	push	{r4, r5, r6, lr}
 8014616:	4614      	mov	r4, r2
 8014618:	b0c2      	sub	sp, #264	@ 0x108
 801461a:	b1ba      	cbz	r2, 801464c <rmw_validate_namespace_with_size+0x3c>
 801461c:	2901      	cmp	r1, #1
 801461e:	460e      	mov	r6, r1
 8014620:	461d      	mov	r5, r3
 8014622:	d102      	bne.n	801462a <rmw_validate_namespace_with_size+0x1a>
 8014624:	7803      	ldrb	r3, [r0, #0]
 8014626:	2b2f      	cmp	r3, #47	@ 0x2f
 8014628:	d015      	beq.n	8014656 <rmw_validate_namespace_with_size+0x46>
 801462a:	aa01      	add	r2, sp, #4
 801462c:	4669      	mov	r1, sp
 801462e:	f7ff ff77 	bl	8014520 <rmw_validate_full_topic_name>
 8014632:	b960      	cbnz	r0, 801464e <rmw_validate_namespace_with_size+0x3e>
 8014634:	9b00      	ldr	r3, [sp, #0]
 8014636:	b163      	cbz	r3, 8014652 <rmw_validate_namespace_with_size+0x42>
 8014638:	2b07      	cmp	r3, #7
 801463a:	d00a      	beq.n	8014652 <rmw_validate_namespace_with_size+0x42>
 801463c:	1e5a      	subs	r2, r3, #1
 801463e:	2a05      	cmp	r2, #5
 8014640:	d81c      	bhi.n	801467c <rmw_validate_namespace_with_size+0x6c>
 8014642:	e8df f002 	tbb	[pc, r2]
 8014646:	0c0c      	.short	0x0c0c
 8014648:	0c0c0c0c 	.word	0x0c0c0c0c
 801464c:	200b      	movs	r0, #11
 801464e:	b042      	add	sp, #264	@ 0x108
 8014650:	bd70      	pop	{r4, r5, r6, pc}
 8014652:	2ef5      	cmp	r6, #245	@ 0xf5
 8014654:	d809      	bhi.n	801466a <rmw_validate_namespace_with_size+0x5a>
 8014656:	2300      	movs	r3, #0
 8014658:	6023      	str	r3, [r4, #0]
 801465a:	2000      	movs	r0, #0
 801465c:	e7f7      	b.n	801464e <rmw_validate_namespace_with_size+0x3e>
 801465e:	6023      	str	r3, [r4, #0]
 8014660:	2d00      	cmp	r5, #0
 8014662:	d0fa      	beq.n	801465a <rmw_validate_namespace_with_size+0x4a>
 8014664:	9b01      	ldr	r3, [sp, #4]
 8014666:	602b      	str	r3, [r5, #0]
 8014668:	e7f7      	b.n	801465a <rmw_validate_namespace_with_size+0x4a>
 801466a:	2307      	movs	r3, #7
 801466c:	6023      	str	r3, [r4, #0]
 801466e:	2d00      	cmp	r5, #0
 8014670:	d0f3      	beq.n	801465a <rmw_validate_namespace_with_size+0x4a>
 8014672:	23f4      	movs	r3, #244	@ 0xf4
 8014674:	602b      	str	r3, [r5, #0]
 8014676:	e7f0      	b.n	801465a <rmw_validate_namespace_with_size+0x4a>
 8014678:	200b      	movs	r0, #11
 801467a:	4770      	bx	lr
 801467c:	4a03      	ldr	r2, [pc, #12]	@ (801468c <rmw_validate_namespace_with_size+0x7c>)
 801467e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014682:	a802      	add	r0, sp, #8
 8014684:	f7ff fcd4 	bl	8014030 <rcutils_snprintf>
 8014688:	2001      	movs	r0, #1
 801468a:	e7e0      	b.n	801464e <rmw_validate_namespace_with_size+0x3e>
 801468c:	08019a5c 	.word	0x08019a5c

08014690 <rmw_validate_namespace>:
 8014690:	b168      	cbz	r0, 80146ae <rmw_validate_namespace+0x1e>
 8014692:	b570      	push	{r4, r5, r6, lr}
 8014694:	460d      	mov	r5, r1
 8014696:	4616      	mov	r6, r2
 8014698:	4604      	mov	r4, r0
 801469a:	f7eb fe19 	bl	80002d0 <strlen>
 801469e:	4633      	mov	r3, r6
 80146a0:	4601      	mov	r1, r0
 80146a2:	462a      	mov	r2, r5
 80146a4:	4620      	mov	r0, r4
 80146a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146aa:	f7ff bfb1 	b.w	8014610 <rmw_validate_namespace_with_size>
 80146ae:	200b      	movs	r0, #11
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop

080146b4 <rmw_namespace_validation_result_string>:
 80146b4:	2807      	cmp	r0, #7
 80146b6:	bf9a      	itte	ls
 80146b8:	4b02      	ldrls	r3, [pc, #8]	@ (80146c4 <rmw_namespace_validation_result_string+0x10>)
 80146ba:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80146be:	4802      	ldrhi	r0, [pc, #8]	@ (80146c8 <rmw_namespace_validation_result_string+0x14>)
 80146c0:	4770      	bx	lr
 80146c2:	bf00      	nop
 80146c4:	0801a4a0 	.word	0x0801a4a0
 80146c8:	08019aac 	.word	0x08019aac

080146cc <rmw_validate_node_name>:
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d037      	beq.n	8014740 <rmw_validate_node_name+0x74>
 80146d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146d2:	460e      	mov	r6, r1
 80146d4:	2900      	cmp	r1, #0
 80146d6:	d035      	beq.n	8014744 <rmw_validate_node_name+0x78>
 80146d8:	4617      	mov	r7, r2
 80146da:	4604      	mov	r4, r0
 80146dc:	f7eb fdf8 	bl	80002d0 <strlen>
 80146e0:	b1d8      	cbz	r0, 801471a <rmw_validate_node_name+0x4e>
 80146e2:	1e63      	subs	r3, r4, #1
 80146e4:	1819      	adds	r1, r3, r0
 80146e6:	461a      	mov	r2, r3
 80146e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80146ec:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 80146f0:	f02e 0c20 	bic.w	ip, lr, #32
 80146f4:	2d09      	cmp	r5, #9
 80146f6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80146fa:	d915      	bls.n	8014728 <rmw_validate_node_name+0x5c>
 80146fc:	f1bc 0f19 	cmp.w	ip, #25
 8014700:	d912      	bls.n	8014728 <rmw_validate_node_name+0x5c>
 8014702:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014706:	d00f      	beq.n	8014728 <rmw_validate_node_name+0x5c>
 8014708:	2302      	movs	r3, #2
 801470a:	6033      	str	r3, [r6, #0]
 801470c:	b11f      	cbz	r7, 8014716 <rmw_validate_node_name+0x4a>
 801470e:	f1c4 0401 	rsb	r4, r4, #1
 8014712:	4414      	add	r4, r2
 8014714:	603c      	str	r4, [r7, #0]
 8014716:	2000      	movs	r0, #0
 8014718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801471a:	2301      	movs	r3, #1
 801471c:	6033      	str	r3, [r6, #0]
 801471e:	2f00      	cmp	r7, #0
 8014720:	d0f9      	beq.n	8014716 <rmw_validate_node_name+0x4a>
 8014722:	2300      	movs	r3, #0
 8014724:	603b      	str	r3, [r7, #0]
 8014726:	e7f6      	b.n	8014716 <rmw_validate_node_name+0x4a>
 8014728:	4299      	cmp	r1, r3
 801472a:	d1dc      	bne.n	80146e6 <rmw_validate_node_name+0x1a>
 801472c:	7823      	ldrb	r3, [r4, #0]
 801472e:	4a0c      	ldr	r2, [pc, #48]	@ (8014760 <rmw_validate_node_name+0x94>)
 8014730:	5cd3      	ldrb	r3, [r2, r3]
 8014732:	f013 0304 	ands.w	r3, r3, #4
 8014736:	d10e      	bne.n	8014756 <rmw_validate_node_name+0x8a>
 8014738:	28ff      	cmp	r0, #255	@ 0xff
 801473a:	d805      	bhi.n	8014748 <rmw_validate_node_name+0x7c>
 801473c:	6033      	str	r3, [r6, #0]
 801473e:	e7ea      	b.n	8014716 <rmw_validate_node_name+0x4a>
 8014740:	200b      	movs	r0, #11
 8014742:	4770      	bx	lr
 8014744:	200b      	movs	r0, #11
 8014746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014748:	2304      	movs	r3, #4
 801474a:	6033      	str	r3, [r6, #0]
 801474c:	2f00      	cmp	r7, #0
 801474e:	d0e2      	beq.n	8014716 <rmw_validate_node_name+0x4a>
 8014750:	23fe      	movs	r3, #254	@ 0xfe
 8014752:	603b      	str	r3, [r7, #0]
 8014754:	e7df      	b.n	8014716 <rmw_validate_node_name+0x4a>
 8014756:	2303      	movs	r3, #3
 8014758:	6033      	str	r3, [r6, #0]
 801475a:	2f00      	cmp	r7, #0
 801475c:	d1e1      	bne.n	8014722 <rmw_validate_node_name+0x56>
 801475e:	e7da      	b.n	8014716 <rmw_validate_node_name+0x4a>
 8014760:	0801a70b 	.word	0x0801a70b

08014764 <rmw_node_name_validation_result_string>:
 8014764:	2804      	cmp	r0, #4
 8014766:	bf9a      	itte	ls
 8014768:	4b02      	ldrls	r3, [pc, #8]	@ (8014774 <rmw_node_name_validation_result_string+0x10>)
 801476a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801476e:	4802      	ldrhi	r0, [pc, #8]	@ (8014778 <rmw_node_name_validation_result_string+0x14>)
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	0801a4c0 	.word	0x0801a4c0
 8014778:	08019c54 	.word	0x08019c54

0801477c <get_memory>:
 801477c:	4603      	mov	r3, r0
 801477e:	6840      	ldr	r0, [r0, #4]
 8014780:	b158      	cbz	r0, 801479a <get_memory+0x1e>
 8014782:	6842      	ldr	r2, [r0, #4]
 8014784:	605a      	str	r2, [r3, #4]
 8014786:	b10a      	cbz	r2, 801478c <get_memory+0x10>
 8014788:	2100      	movs	r1, #0
 801478a:	6011      	str	r1, [r2, #0]
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	6042      	str	r2, [r0, #4]
 8014790:	b102      	cbz	r2, 8014794 <get_memory+0x18>
 8014792:	6010      	str	r0, [r2, #0]
 8014794:	2200      	movs	r2, #0
 8014796:	6002      	str	r2, [r0, #0]
 8014798:	6018      	str	r0, [r3, #0]
 801479a:	4770      	bx	lr

0801479c <put_memory>:
 801479c:	680b      	ldr	r3, [r1, #0]
 801479e:	b10b      	cbz	r3, 80147a4 <put_memory+0x8>
 80147a0:	684a      	ldr	r2, [r1, #4]
 80147a2:	605a      	str	r2, [r3, #4]
 80147a4:	684a      	ldr	r2, [r1, #4]
 80147a6:	b102      	cbz	r2, 80147aa <put_memory+0xe>
 80147a8:	6013      	str	r3, [r2, #0]
 80147aa:	6803      	ldr	r3, [r0, #0]
 80147ac:	428b      	cmp	r3, r1
 80147ae:	6843      	ldr	r3, [r0, #4]
 80147b0:	bf08      	it	eq
 80147b2:	6002      	streq	r2, [r0, #0]
 80147b4:	604b      	str	r3, [r1, #4]
 80147b6:	b103      	cbz	r3, 80147ba <put_memory+0x1e>
 80147b8:	6019      	str	r1, [r3, #0]
 80147ba:	2300      	movs	r3, #0
 80147bc:	600b      	str	r3, [r1, #0]
 80147be:	6041      	str	r1, [r0, #4]
 80147c0:	4770      	bx	lr
 80147c2:	bf00      	nop

080147c4 <rmw_destroy_client>:
 80147c4:	b570      	push	{r4, r5, r6, lr}
 80147c6:	b128      	cbz	r0, 80147d4 <rmw_destroy_client+0x10>
 80147c8:	4604      	mov	r4, r0
 80147ca:	6800      	ldr	r0, [r0, #0]
 80147cc:	460d      	mov	r5, r1
 80147ce:	f7f7 fa67 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 80147d2:	b910      	cbnz	r0, 80147da <rmw_destroy_client+0x16>
 80147d4:	2401      	movs	r4, #1
 80147d6:	4620      	mov	r0, r4
 80147d8:	bd70      	pop	{r4, r5, r6, pc}
 80147da:	6863      	ldr	r3, [r4, #4]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d0f9      	beq.n	80147d4 <rmw_destroy_client+0x10>
 80147e0:	2d00      	cmp	r5, #0
 80147e2:	d0f7      	beq.n	80147d4 <rmw_destroy_client+0x10>
 80147e4:	6828      	ldr	r0, [r5, #0]
 80147e6:	f7f7 fa5b 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 80147ea:	2800      	cmp	r0, #0
 80147ec:	d0f2      	beq.n	80147d4 <rmw_destroy_client+0x10>
 80147ee:	686e      	ldr	r6, [r5, #4]
 80147f0:	2e00      	cmp	r6, #0
 80147f2:	d0ef      	beq.n	80147d4 <rmw_destroy_client+0x10>
 80147f4:	6864      	ldr	r4, [r4, #4]
 80147f6:	6932      	ldr	r2, [r6, #16]
 80147f8:	6920      	ldr	r0, [r4, #16]
 80147fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80147fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014802:	6819      	ldr	r1, [r3, #0]
 8014804:	f002 faac 	bl	8016d60 <uxr_buffer_cancel_data>
 8014808:	4602      	mov	r2, r0
 801480a:	6920      	ldr	r0, [r4, #16]
 801480c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014810:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014814:	f7f7 f9be 	bl	800bb94 <run_xrce_session>
 8014818:	6920      	ldr	r0, [r4, #16]
 801481a:	6932      	ldr	r2, [r6, #16]
 801481c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014820:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014824:	6819      	ldr	r1, [r3, #0]
 8014826:	f7f8 fe63 	bl	800d4f0 <uxr_buffer_delete_entity>
 801482a:	4602      	mov	r2, r0
 801482c:	6920      	ldr	r0, [r4, #16]
 801482e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014832:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014836:	f7f7 f9ad 	bl	800bb94 <run_xrce_session>
 801483a:	f080 0401 	eor.w	r4, r0, #1
 801483e:	b2e4      	uxtb	r4, r4
 8014840:	4628      	mov	r0, r5
 8014842:	0064      	lsls	r4, r4, #1
 8014844:	f7f7 f888 	bl	800b958 <rmw_uxrce_fini_client_memory>
 8014848:	e7c5      	b.n	80147d6 <rmw_destroy_client+0x12>
 801484a:	bf00      	nop

0801484c <rmw_get_gid_for_client>:
 801484c:	b1a8      	cbz	r0, 801487a <rmw_get_gid_for_client+0x2e>
 801484e:	b538      	push	{r3, r4, r5, lr}
 8014850:	460c      	mov	r4, r1
 8014852:	b1a1      	cbz	r1, 801487e <rmw_get_gid_for_client+0x32>
 8014854:	4605      	mov	r5, r0
 8014856:	6800      	ldr	r0, [r0, #0]
 8014858:	b120      	cbz	r0, 8014864 <rmw_get_gid_for_client+0x18>
 801485a:	4b0a      	ldr	r3, [pc, #40]	@ (8014884 <rmw_get_gid_for_client+0x38>)
 801485c:	6819      	ldr	r1, [r3, #0]
 801485e:	f7eb fcd7 	bl	8000210 <strcmp>
 8014862:	b940      	cbnz	r0, 8014876 <rmw_get_gid_for_client+0x2a>
 8014864:	686b      	ldr	r3, [r5, #4]
 8014866:	2000      	movs	r0, #0
 8014868:	6060      	str	r0, [r4, #4]
 801486a:	60a0      	str	r0, [r4, #8]
 801486c:	60e0      	str	r0, [r4, #12]
 801486e:	6120      	str	r0, [r4, #16]
 8014870:	691b      	ldr	r3, [r3, #16]
 8014872:	6063      	str	r3, [r4, #4]
 8014874:	bd38      	pop	{r3, r4, r5, pc}
 8014876:	200c      	movs	r0, #12
 8014878:	bd38      	pop	{r3, r4, r5, pc}
 801487a:	200b      	movs	r0, #11
 801487c:	4770      	bx	lr
 801487e:	200b      	movs	r0, #11
 8014880:	bd38      	pop	{r3, r4, r5, pc}
 8014882:	bf00      	nop
 8014884:	0801a4d4 	.word	0x0801a4d4

08014888 <rmw_get_implementation_identifier>:
 8014888:	4b01      	ldr	r3, [pc, #4]	@ (8014890 <rmw_get_implementation_identifier+0x8>)
 801488a:	6818      	ldr	r0, [r3, #0]
 801488c:	4770      	bx	lr
 801488e:	bf00      	nop
 8014890:	0801a4d4 	.word	0x0801a4d4

08014894 <rmw_init_options_init>:
 8014894:	b084      	sub	sp, #16
 8014896:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014898:	b083      	sub	sp, #12
 801489a:	ad09      	add	r5, sp, #36	@ 0x24
 801489c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80148a0:	b130      	cbz	r0, 80148b0 <rmw_init_options_init+0x1c>
 80148a2:	4604      	mov	r4, r0
 80148a4:	4628      	mov	r0, r5
 80148a6:	f7f6 fbdf 	bl	800b068 <rcutils_allocator_is_valid>
 80148aa:	b108      	cbz	r0, 80148b0 <rmw_init_options_init+0x1c>
 80148ac:	68a6      	ldr	r6, [r4, #8]
 80148ae:	b12e      	cbz	r6, 80148bc <rmw_init_options_init+0x28>
 80148b0:	200b      	movs	r0, #11
 80148b2:	b003      	add	sp, #12
 80148b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80148b8:	b004      	add	sp, #16
 80148ba:	4770      	bx	lr
 80148bc:	2200      	movs	r2, #0
 80148be:	2300      	movs	r3, #0
 80148c0:	e9c4 2300 	strd	r2, r3, [r4]
 80148c4:	4b20      	ldr	r3, [pc, #128]	@ (8014948 <rmw_init_options_init+0xb4>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	60a3      	str	r3, [r4, #8]
 80148ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148cc:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 80148d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148d4:	466f      	mov	r7, sp
 80148d6:	682b      	ldr	r3, [r5, #0]
 80148d8:	f8cc 3000 	str.w	r3, [ip]
 80148dc:	4638      	mov	r0, r7
 80148de:	63a6      	str	r6, [r4, #56]	@ 0x38
 80148e0:	60e6      	str	r6, [r4, #12]
 80148e2:	f003 f8f7 	bl	8017ad4 <rmw_get_default_security_options>
 80148e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80148ea:	f104 0310 	add.w	r3, r4, #16
 80148ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80148f2:	2203      	movs	r2, #3
 80148f4:	4815      	ldr	r0, [pc, #84]	@ (801494c <rmw_init_options_init+0xb8>)
 80148f6:	4916      	ldr	r1, [pc, #88]	@ (8014950 <rmw_init_options_init+0xbc>)
 80148f8:	f7f6 ff6e 	bl	800b7d8 <rmw_uxrce_init_init_options_impl_memory>
 80148fc:	4813      	ldr	r0, [pc, #76]	@ (801494c <rmw_init_options_init+0xb8>)
 80148fe:	f7ff ff3d 	bl	801477c <get_memory>
 8014902:	b1f0      	cbz	r0, 8014942 <rmw_init_options_init+0xae>
 8014904:	4a13      	ldr	r2, [pc, #76]	@ (8014954 <rmw_init_options_init+0xc0>)
 8014906:	6883      	ldr	r3, [r0, #8]
 8014908:	6851      	ldr	r1, [r2, #4]
 801490a:	7810      	ldrb	r0, [r2, #0]
 801490c:	6523      	str	r3, [r4, #80]	@ 0x50
 801490e:	7418      	strb	r0, [r3, #16]
 8014910:	6159      	str	r1, [r3, #20]
 8014912:	68d1      	ldr	r1, [r2, #12]
 8014914:	61d9      	str	r1, [r3, #28]
 8014916:	6911      	ldr	r1, [r2, #16]
 8014918:	6219      	str	r1, [r3, #32]
 801491a:	6951      	ldr	r1, [r2, #20]
 801491c:	6892      	ldr	r2, [r2, #8]
 801491e:	619a      	str	r2, [r3, #24]
 8014920:	6259      	str	r1, [r3, #36]	@ 0x24
 8014922:	f7fb f81d 	bl	800f960 <uxr_nanos>
 8014926:	f003 fb8f 	bl	8018048 <srand>
 801492a:	f003 fbbb 	bl	80180a4 <rand>
 801492e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014930:	6298      	str	r0, [r3, #40]	@ 0x28
 8014932:	2800      	cmp	r0, #0
 8014934:	d0f9      	beq.n	801492a <rmw_init_options_init+0x96>
 8014936:	2000      	movs	r0, #0
 8014938:	b003      	add	sp, #12
 801493a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801493e:	b004      	add	sp, #16
 8014940:	4770      	bx	lr
 8014942:	2001      	movs	r0, #1
 8014944:	e7b5      	b.n	80148b2 <rmw_init_options_init+0x1e>
 8014946:	bf00      	nop
 8014948:	0801a4d4 	.word	0x0801a4d4
 801494c:	2000a408 	.word	0x2000a408
 8014950:	2000a384 	.word	0x2000a384
 8014954:	2000a258 	.word	0x2000a258

08014958 <rmw_init_options_copy>:
 8014958:	2800      	cmp	r0, #0
 801495a:	d03e      	beq.n	80149da <rmw_init_options_copy+0x82>
 801495c:	b570      	push	{r4, r5, r6, lr}
 801495e:	460d      	mov	r5, r1
 8014960:	b149      	cbz	r1, 8014976 <rmw_init_options_copy+0x1e>
 8014962:	4604      	mov	r4, r0
 8014964:	6880      	ldr	r0, [r0, #8]
 8014966:	b120      	cbz	r0, 8014972 <rmw_init_options_copy+0x1a>
 8014968:	4b21      	ldr	r3, [pc, #132]	@ (80149f0 <rmw_init_options_copy+0x98>)
 801496a:	6819      	ldr	r1, [r3, #0]
 801496c:	f7eb fc50 	bl	8000210 <strcmp>
 8014970:	bb78      	cbnz	r0, 80149d2 <rmw_init_options_copy+0x7a>
 8014972:	68ab      	ldr	r3, [r5, #8]
 8014974:	b11b      	cbz	r3, 801497e <rmw_init_options_copy+0x26>
 8014976:	f04f 0c0b 	mov.w	ip, #11
 801497a:	4660      	mov	r0, ip
 801497c:	bd70      	pop	{r4, r5, r6, pc}
 801497e:	2258      	movs	r2, #88	@ 0x58
 8014980:	4621      	mov	r1, r4
 8014982:	4628      	mov	r0, r5
 8014984:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8014988:	f003 ffe3 	bl	8018952 <memcpy>
 801498c:	4630      	mov	r0, r6
 801498e:	f7f6 fb6b 	bl	800b068 <rcutils_allocator_is_valid>
 8014992:	2800      	cmp	r0, #0
 8014994:	d0ef      	beq.n	8014976 <rmw_init_options_copy+0x1e>
 8014996:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014998:	b138      	cbz	r0, 80149aa <rmw_init_options_copy+0x52>
 801499a:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 801499e:	4631      	mov	r1, r6
 80149a0:	f003 f864 	bl	8017a6c <rmw_enclave_options_copy>
 80149a4:	4684      	mov	ip, r0
 80149a6:	2800      	cmp	r0, #0
 80149a8:	d1e7      	bne.n	801497a <rmw_init_options_copy+0x22>
 80149aa:	4812      	ldr	r0, [pc, #72]	@ (80149f4 <rmw_init_options_copy+0x9c>)
 80149ac:	f7ff fee6 	bl	801477c <get_memory>
 80149b0:	b1b8      	cbz	r0, 80149e2 <rmw_init_options_copy+0x8a>
 80149b2:	6883      	ldr	r3, [r0, #8]
 80149b4:	652b      	str	r3, [r5, #80]	@ 0x50
 80149b6:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 80149b8:	3510      	adds	r5, #16
 80149ba:	f103 0410 	add.w	r4, r3, #16
 80149be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80149c6:	f04f 0c00 	mov.w	ip, #0
 80149ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80149ce:	4660      	mov	r0, ip
 80149d0:	bd70      	pop	{r4, r5, r6, pc}
 80149d2:	f04f 0c0c 	mov.w	ip, #12
 80149d6:	4660      	mov	r0, ip
 80149d8:	bd70      	pop	{r4, r5, r6, pc}
 80149da:	f04f 0c0b 	mov.w	ip, #11
 80149de:	4660      	mov	r0, ip
 80149e0:	4770      	bx	lr
 80149e2:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80149e4:	4631      	mov	r1, r6
 80149e6:	f003 f863 	bl	8017ab0 <rmw_enclave_options_fini>
 80149ea:	f04f 0c01 	mov.w	ip, #1
 80149ee:	e7c4      	b.n	801497a <rmw_init_options_copy+0x22>
 80149f0:	0801a4d4 	.word	0x0801a4d4
 80149f4:	2000a408 	.word	0x2000a408

080149f8 <rmw_init_options_fini>:
 80149f8:	2800      	cmp	r0, #0
 80149fa:	d035      	beq.n	8014a68 <rmw_init_options_fini+0x70>
 80149fc:	b530      	push	{r4, r5, lr}
 80149fe:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 8014a02:	b097      	sub	sp, #92	@ 0x5c
 8014a04:	4604      	mov	r4, r0
 8014a06:	4628      	mov	r0, r5
 8014a08:	f7f6 fb2e 	bl	800b068 <rcutils_allocator_is_valid>
 8014a0c:	b320      	cbz	r0, 8014a58 <rmw_init_options_fini+0x60>
 8014a0e:	68a0      	ldr	r0, [r4, #8]
 8014a10:	b120      	cbz	r0, 8014a1c <rmw_init_options_fini+0x24>
 8014a12:	4b16      	ldr	r3, [pc, #88]	@ (8014a6c <rmw_init_options_fini+0x74>)
 8014a14:	6819      	ldr	r1, [r3, #0]
 8014a16:	f7eb fbfb 	bl	8000210 <strcmp>
 8014a1a:	bb18      	cbnz	r0, 8014a64 <rmw_init_options_fini+0x6c>
 8014a1c:	4b14      	ldr	r3, [pc, #80]	@ (8014a70 <rmw_init_options_fini+0x78>)
 8014a1e:	6819      	ldr	r1, [r3, #0]
 8014a20:	b1e9      	cbz	r1, 8014a5e <rmw_init_options_fini+0x66>
 8014a22:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8014a24:	e001      	b.n	8014a2a <rmw_init_options_fini+0x32>
 8014a26:	6849      	ldr	r1, [r1, #4]
 8014a28:	b1c9      	cbz	r1, 8014a5e <rmw_init_options_fini+0x66>
 8014a2a:	688b      	ldr	r3, [r1, #8]
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d1fa      	bne.n	8014a26 <rmw_init_options_fini+0x2e>
 8014a30:	480f      	ldr	r0, [pc, #60]	@ (8014a70 <rmw_init_options_fini+0x78>)
 8014a32:	f7ff feb3 	bl	801479c <put_memory>
 8014a36:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a38:	b118      	cbz	r0, 8014a42 <rmw_init_options_fini+0x4a>
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	f003 f838 	bl	8017ab0 <rmw_enclave_options_fini>
 8014a40:	b940      	cbnz	r0, 8014a54 <rmw_init_options_fini+0x5c>
 8014a42:	4668      	mov	r0, sp
 8014a44:	f7ff fca6 	bl	8014394 <rmw_get_zero_initialized_init_options>
 8014a48:	2258      	movs	r2, #88	@ 0x58
 8014a4a:	4669      	mov	r1, sp
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	f003 ff80 	bl	8018952 <memcpy>
 8014a52:	2000      	movs	r0, #0
 8014a54:	b017      	add	sp, #92	@ 0x5c
 8014a56:	bd30      	pop	{r4, r5, pc}
 8014a58:	200b      	movs	r0, #11
 8014a5a:	b017      	add	sp, #92	@ 0x5c
 8014a5c:	bd30      	pop	{r4, r5, pc}
 8014a5e:	2001      	movs	r0, #1
 8014a60:	b017      	add	sp, #92	@ 0x5c
 8014a62:	bd30      	pop	{r4, r5, pc}
 8014a64:	200c      	movs	r0, #12
 8014a66:	e7f5      	b.n	8014a54 <rmw_init_options_fini+0x5c>
 8014a68:	200b      	movs	r0, #11
 8014a6a:	4770      	bx	lr
 8014a6c:	0801a4d4 	.word	0x0801a4d4
 8014a70:	2000a408 	.word	0x2000a408

08014a74 <rmw_init>:
 8014a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a78:	b083      	sub	sp, #12
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	f000 80d4 	beq.w	8014c28 <rmw_init+0x1b4>
 8014a80:	460e      	mov	r6, r1
 8014a82:	2900      	cmp	r1, #0
 8014a84:	f000 80d0 	beq.w	8014c28 <rmw_init+0x1b4>
 8014a88:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	f000 80cb 	beq.w	8014c28 <rmw_init+0x1b4>
 8014a92:	4b77      	ldr	r3, [pc, #476]	@ (8014c70 <rmw_init+0x1fc>)
 8014a94:	6880      	ldr	r0, [r0, #8]
 8014a96:	681f      	ldr	r7, [r3, #0]
 8014a98:	b128      	cbz	r0, 8014aa6 <rmw_init+0x32>
 8014a9a:	4639      	mov	r1, r7
 8014a9c:	f7eb fbb8 	bl	8000210 <strcmp>
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	f040 80d3 	bne.w	8014c4c <rmw_init+0x1d8>
 8014aa6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014aaa:	4c72      	ldr	r4, [pc, #456]	@ (8014c74 <rmw_init+0x200>)
 8014aac:	4972      	ldr	r1, [pc, #456]	@ (8014c78 <rmw_init+0x204>)
 8014aae:	4873      	ldr	r0, [pc, #460]	@ (8014c7c <rmw_init+0x208>)
 8014ab0:	60b7      	str	r7, [r6, #8]
 8014ab2:	e9c6 2300 	strd	r2, r3, [r6]
 8014ab6:	68eb      	ldr	r3, [r5, #12]
 8014ab8:	66b3      	str	r3, [r6, #104]	@ 0x68
 8014aba:	2201      	movs	r2, #1
 8014abc:	f7f6 fe2c 	bl	800b718 <rmw_uxrce_init_session_memory>
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	496f      	ldr	r1, [pc, #444]	@ (8014c80 <rmw_init+0x20c>)
 8014ac4:	2204      	movs	r2, #4
 8014ac6:	f7f6 fe67 	bl	800b798 <rmw_uxrce_init_static_input_buffer_memory>
 8014aca:	f04f 0800 	mov.w	r8, #0
 8014ace:	486b      	ldr	r0, [pc, #428]	@ (8014c7c <rmw_init+0x208>)
 8014ad0:	f884 800d 	strb.w	r8, [r4, #13]
 8014ad4:	f7ff fe52 	bl	801477c <get_memory>
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	f000 80b2 	beq.w	8014c42 <rmw_init+0x1ce>
 8014ade:	6884      	ldr	r4, [r0, #8]
 8014ae0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8014ae2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8014ae4:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014ae8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014aec:	9101      	str	r1, [sp, #4]
 8014aee:	6a00      	ldr	r0, [r0, #32]
 8014af0:	9000      	str	r0, [sp, #0]
 8014af2:	f104 0910 	add.w	r9, r4, #16
 8014af6:	4661      	mov	r1, ip
 8014af8:	4648      	mov	r0, r9
 8014afa:	f7f8 ff4d 	bl	800d998 <uxr_set_custom_transport_callbacks>
 8014afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014b02:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8014b06:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8014b0a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8014b0e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8014b12:	495c      	ldr	r1, [pc, #368]	@ (8014c84 <rmw_init+0x210>)
 8014b14:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8014b18:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8014b1c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8014b20:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8014b24:	4858      	ldr	r0, [pc, #352]	@ (8014c88 <rmw_init+0x214>)
 8014b26:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8014b2e:	f7f6 fdd3 	bl	800b6d8 <rmw_uxrce_init_node_memory>
 8014b32:	4956      	ldr	r1, [pc, #344]	@ (8014c8c <rmw_init+0x218>)
 8014b34:	4856      	ldr	r0, [pc, #344]	@ (8014c90 <rmw_init+0x21c>)
 8014b36:	2205      	movs	r2, #5
 8014b38:	f7f6 fdae 	bl	800b698 <rmw_uxrce_init_subscription_memory>
 8014b3c:	4955      	ldr	r1, [pc, #340]	@ (8014c94 <rmw_init+0x220>)
 8014b3e:	4856      	ldr	r0, [pc, #344]	@ (8014c98 <rmw_init+0x224>)
 8014b40:	220a      	movs	r2, #10
 8014b42:	f7f6 fd89 	bl	800b658 <rmw_uxrce_init_publisher_memory>
 8014b46:	4955      	ldr	r1, [pc, #340]	@ (8014c9c <rmw_init+0x228>)
 8014b48:	4855      	ldr	r0, [pc, #340]	@ (8014ca0 <rmw_init+0x22c>)
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	f7f6 fd44 	bl	800b5d8 <rmw_uxrce_init_service_memory>
 8014b50:	4954      	ldr	r1, [pc, #336]	@ (8014ca4 <rmw_init+0x230>)
 8014b52:	4855      	ldr	r0, [pc, #340]	@ (8014ca8 <rmw_init+0x234>)
 8014b54:	2201      	movs	r2, #1
 8014b56:	f7f6 fd5f 	bl	800b618 <rmw_uxrce_init_client_memory>
 8014b5a:	4954      	ldr	r1, [pc, #336]	@ (8014cac <rmw_init+0x238>)
 8014b5c:	4854      	ldr	r0, [pc, #336]	@ (8014cb0 <rmw_init+0x23c>)
 8014b5e:	220f      	movs	r2, #15
 8014b60:	f7f6 fdfa 	bl	800b758 <rmw_uxrce_init_topic_memory>
 8014b64:	4953      	ldr	r1, [pc, #332]	@ (8014cb4 <rmw_init+0x240>)
 8014b66:	4854      	ldr	r0, [pc, #336]	@ (8014cb8 <rmw_init+0x244>)
 8014b68:	2203      	movs	r2, #3
 8014b6a:	f7f6 fe35 	bl	800b7d8 <rmw_uxrce_init_init_options_impl_memory>
 8014b6e:	4953      	ldr	r1, [pc, #332]	@ (8014cbc <rmw_init+0x248>)
 8014b70:	4853      	ldr	r0, [pc, #332]	@ (8014cc0 <rmw_init+0x24c>)
 8014b72:	2204      	movs	r2, #4
 8014b74:	f7f6 fe50 	bl	800b818 <rmw_uxrce_init_wait_set_memory>
 8014b78:	4952      	ldr	r1, [pc, #328]	@ (8014cc4 <rmw_init+0x250>)
 8014b7a:	4853      	ldr	r0, [pc, #332]	@ (8014cc8 <rmw_init+0x254>)
 8014b7c:	2204      	movs	r2, #4
 8014b7e:	f7f6 fe6b 	bl	800b858 <rmw_uxrce_init_guard_condition_memory>
 8014b82:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8014b84:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8014b86:	4642      	mov	r2, r8
 8014b88:	f7f6 fd0e 	bl	800b5a8 <rmw_uxrce_transport_init>
 8014b8c:	4607      	mov	r7, r0
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d161      	bne.n	8014c56 <rmw_init+0x1e2>
 8014b92:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014b94:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8014b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8014ba0:	f7f9 f906 	bl	800ddb0 <uxr_init_session>
 8014ba4:	4628      	mov	r0, r5
 8014ba6:	4949      	ldr	r1, [pc, #292]	@ (8014ccc <rmw_init+0x258>)
 8014ba8:	4622      	mov	r2, r4
 8014baa:	f7f9 f925 	bl	800ddf8 <uxr_set_topic_callback>
 8014bae:	4628      	mov	r0, r5
 8014bb0:	4947      	ldr	r1, [pc, #284]	@ (8014cd0 <rmw_init+0x25c>)
 8014bb2:	463a      	mov	r2, r7
 8014bb4:	f7f9 f91c 	bl	800ddf0 <uxr_set_status_callback>
 8014bb8:	4628      	mov	r0, r5
 8014bba:	4946      	ldr	r1, [pc, #280]	@ (8014cd4 <rmw_init+0x260>)
 8014bbc:	463a      	mov	r2, r7
 8014bbe:	f7f9 f91f 	bl	800de00 <uxr_set_request_callback>
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	4944      	ldr	r1, [pc, #272]	@ (8014cd8 <rmw_init+0x264>)
 8014bc6:	463a      	mov	r2, r7
 8014bc8:	f7f9 f91e 	bl	800de08 <uxr_set_reply_callback>
 8014bcc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014bd0:	2304      	movs	r3, #4
 8014bd2:	0092      	lsls	r2, r2, #2
 8014bd4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8014bd8:	4628      	mov	r0, r5
 8014bda:	f7f9 f943 	bl	800de64 <uxr_create_input_reliable_stream>
 8014bde:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014be2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8014be6:	2304      	movs	r3, #4
 8014be8:	0092      	lsls	r2, r2, #2
 8014bea:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8014bee:	4628      	mov	r0, r5
 8014bf0:	f7f9 f920 	bl	800de34 <uxr_create_output_reliable_stream>
 8014bf4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f7f9 f92d 	bl	800de58 <uxr_create_input_best_effort_stream>
 8014bfe:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8014c02:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014c06:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8014c0a:	3114      	adds	r1, #20
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	f7f9 f8ff 	bl	800de10 <uxr_create_output_best_effort_stream>
 8014c12:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8014c16:	4628      	mov	r0, r5
 8014c18:	f7f9 fe72 	bl	800e900 <uxr_create_session>
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	b140      	cbz	r0, 8014c32 <rmw_init+0x1be>
 8014c20:	4638      	mov	r0, r7
 8014c22:	b003      	add	sp, #12
 8014c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c28:	270b      	movs	r7, #11
 8014c2a:	4638      	mov	r0, r7
 8014c2c:	b003      	add	sp, #12
 8014c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c32:	4648      	mov	r0, r9
 8014c34:	f7f8 fef2 	bl	800da1c <uxr_close_custom_transport>
 8014c38:	4810      	ldr	r0, [pc, #64]	@ (8014c7c <rmw_init+0x208>)
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	f7ff fdae 	bl	801479c <put_memory>
 8014c40:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8014c42:	2701      	movs	r7, #1
 8014c44:	4638      	mov	r0, r7
 8014c46:	b003      	add	sp, #12
 8014c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c4c:	270c      	movs	r7, #12
 8014c4e:	4638      	mov	r0, r7
 8014c50:	b003      	add	sp, #12
 8014c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c56:	4648      	mov	r0, r9
 8014c58:	f7f8 fee0 	bl	800da1c <uxr_close_custom_transport>
 8014c5c:	4807      	ldr	r0, [pc, #28]	@ (8014c7c <rmw_init+0x208>)
 8014c5e:	4621      	mov	r1, r4
 8014c60:	f7ff fd9c 	bl	801479c <put_memory>
 8014c64:	4638      	mov	r0, r7
 8014c66:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8014c6a:	b003      	add	sp, #12
 8014c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c70:	0801a4d4 	.word	0x0801a4d4
 8014c74:	2000c518 	.word	0x2000c518
 8014c78:	2000d610 	.word	0x2000d610
 8014c7c:	2000ebb8 	.word	0x2000ebb8
 8014c80:	2000a418 	.word	0x2000a418
 8014c84:	2000d558 	.word	0x2000d558
 8014c88:	2000d5fc 	.word	0x2000d5fc
 8014c8c:	2000c890 	.word	0x2000c890
 8014c90:	2000ccc8 	.word	0x2000ccc8
 8014c94:	2000ccd8 	.word	0x2000ccd8
 8014c98:	2000d548 	.word	0x2000d548
 8014c9c:	2000c7b8 	.word	0x2000c7b8
 8014ca0:	2000c880 	.word	0x2000c880
 8014ca4:	2000c6e0 	.word	0x2000c6e0
 8014ca8:	2000c7a8 	.word	0x2000c7a8
 8014cac:	2000c528 	.word	0x2000c528
 8014cb0:	2000c6cc 	.word	0x2000c6cc
 8014cb4:	2000a384 	.word	0x2000a384
 8014cb8:	2000a408 	.word	0x2000a408
 8014cbc:	2000a304 	.word	0x2000a304
 8014cc0:	2000a374 	.word	0x2000a374
 8014cc4:	2000a274 	.word	0x2000a274
 8014cc8:	2000a2f4 	.word	0x2000a2f4
 8014ccc:	08017ae5 	.word	0x08017ae5
 8014cd0:	08017add 	.word	0x08017add
 8014cd4:	08017b7d 	.word	0x08017b7d
 8014cd8:	08017c19 	.word	0x08017c19

08014cdc <rmw_context_fini>:
 8014cdc:	4b17      	ldr	r3, [pc, #92]	@ (8014d3c <rmw_context_fini+0x60>)
 8014cde:	b570      	push	{r4, r5, r6, lr}
 8014ce0:	681c      	ldr	r4, [r3, #0]
 8014ce2:	4605      	mov	r5, r0
 8014ce4:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8014ce6:	b33c      	cbz	r4, 8014d38 <rmw_context_fini+0x5c>
 8014ce8:	2600      	movs	r6, #0
 8014cea:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 8014cee:	691a      	ldr	r2, [r3, #16]
 8014cf0:	4282      	cmp	r2, r0
 8014cf2:	d018      	beq.n	8014d26 <rmw_context_fini+0x4a>
 8014cf4:	2c00      	cmp	r4, #0
 8014cf6:	d1f8      	bne.n	8014cea <rmw_context_fini+0xe>
 8014cf8:	b188      	cbz	r0, 8014d1e <rmw_context_fini+0x42>
 8014cfa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014cfe:	789b      	ldrb	r3, [r3, #2]
 8014d00:	2b01      	cmp	r3, #1
 8014d02:	bf14      	ite	ne
 8014d04:	210a      	movne	r1, #10
 8014d06:	2100      	moveq	r1, #0
 8014d08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d0c:	f7f9 fdd0 	bl	800e8b0 <uxr_delete_session_retries>
 8014d10:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8014d12:	f7f6 fdc1 	bl	800b898 <rmw_uxrce_fini_session_memory>
 8014d16:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8014d18:	3010      	adds	r0, #16
 8014d1a:	f7f8 fe7f 	bl	800da1c <uxr_close_custom_transport>
 8014d1e:	2300      	movs	r3, #0
 8014d20:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8014d22:	4630      	mov	r0, r6
 8014d24:	bd70      	pop	{r4, r5, r6, pc}
 8014d26:	f103 0018 	add.w	r0, r3, #24
 8014d2a:	f000 f911 	bl	8014f50 <rmw_destroy_node>
 8014d2e:	4606      	mov	r6, r0
 8014d30:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8014d32:	2c00      	cmp	r4, #0
 8014d34:	d1d9      	bne.n	8014cea <rmw_context_fini+0xe>
 8014d36:	e7df      	b.n	8014cf8 <rmw_context_fini+0x1c>
 8014d38:	4626      	mov	r6, r4
 8014d3a:	e7dd      	b.n	8014cf8 <rmw_context_fini+0x1c>
 8014d3c:	2000d5fc 	.word	0x2000d5fc

08014d40 <create_topic>:
 8014d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d44:	4604      	mov	r4, r0
 8014d46:	b084      	sub	sp, #16
 8014d48:	4824      	ldr	r0, [pc, #144]	@ (8014ddc <create_topic+0x9c>)
 8014d4a:	460f      	mov	r7, r1
 8014d4c:	4616      	mov	r6, r2
 8014d4e:	f7ff fd15 	bl	801477c <get_memory>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d03c      	beq.n	8014dd0 <create_topic+0x90>
 8014d56:	6923      	ldr	r3, [r4, #16]
 8014d58:	6885      	ldr	r5, [r0, #8]
 8014d5a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8014de4 <create_topic+0xa4>
 8014d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014d62:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8014d66:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014d6a:	1c42      	adds	r2, r0, #1
 8014d6c:	2102      	movs	r1, #2
 8014d6e:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014d72:	f7f8 fe57 	bl	800da24 <uxr_object_id>
 8014d76:	223c      	movs	r2, #60	@ 0x3c
 8014d78:	6128      	str	r0, [r5, #16]
 8014d7a:	4641      	mov	r1, r8
 8014d7c:	4638      	mov	r0, r7
 8014d7e:	f7f6 ff75 	bl	800bc6c <generate_topic_name>
 8014d82:	b310      	cbz	r0, 8014dca <create_topic+0x8a>
 8014d84:	4f16      	ldr	r7, [pc, #88]	@ (8014de0 <create_topic+0xa0>)
 8014d86:	4630      	mov	r0, r6
 8014d88:	2264      	movs	r2, #100	@ 0x64
 8014d8a:	4639      	mov	r1, r7
 8014d8c:	f7f6 ff3e 	bl	800bc0c <generate_type_name>
 8014d90:	b1d8      	cbz	r0, 8014dca <create_topic+0x8a>
 8014d92:	6920      	ldr	r0, [r4, #16]
 8014d94:	2306      	movs	r3, #6
 8014d96:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014d9a:	f8cd 8000 	str.w	r8, [sp]
 8014d9e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014da2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014da6:	6811      	ldr	r1, [r2, #0]
 8014da8:	6963      	ldr	r3, [r4, #20]
 8014daa:	692a      	ldr	r2, [r5, #16]
 8014dac:	f7f8 fc1c 	bl	800d5e8 <uxr_buffer_create_topic_bin>
 8014db0:	4602      	mov	r2, r0
 8014db2:	6920      	ldr	r0, [r4, #16]
 8014db4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014db8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014dbc:	f7f6 feea 	bl	800bb94 <run_xrce_session>
 8014dc0:	b118      	cbz	r0, 8014dca <create_topic+0x8a>
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	b004      	add	sp, #16
 8014dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dca:	4628      	mov	r0, r5
 8014dcc:	f7f6 fdda 	bl	800b984 <rmw_uxrce_fini_topic_memory>
 8014dd0:	2500      	movs	r5, #0
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	b004      	add	sp, #16
 8014dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dda:	bf00      	nop
 8014ddc:	2000c6cc 	.word	0x2000c6cc
 8014de0:	2000ebe8 	.word	0x2000ebe8
 8014de4:	2000ec4c 	.word	0x2000ec4c

08014de8 <destroy_topic>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	6984      	ldr	r4, [r0, #24]
 8014dec:	b1d4      	cbz	r4, 8014e24 <destroy_topic+0x3c>
 8014dee:	4605      	mov	r5, r0
 8014df0:	6920      	ldr	r0, [r4, #16]
 8014df2:	692a      	ldr	r2, [r5, #16]
 8014df4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014df8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014dfc:	6819      	ldr	r1, [r3, #0]
 8014dfe:	f7f8 fb77 	bl	800d4f0 <uxr_buffer_delete_entity>
 8014e02:	4602      	mov	r2, r0
 8014e04:	6920      	ldr	r0, [r4, #16]
 8014e06:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014e0a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014e0e:	f7f6 fec1 	bl	800bb94 <run_xrce_session>
 8014e12:	f080 0401 	eor.w	r4, r0, #1
 8014e16:	b2e4      	uxtb	r4, r4
 8014e18:	4628      	mov	r0, r5
 8014e1a:	0064      	lsls	r4, r4, #1
 8014e1c:	f7f6 fdb2 	bl	800b984 <rmw_uxrce_fini_topic_memory>
 8014e20:	4620      	mov	r0, r4
 8014e22:	bd38      	pop	{r3, r4, r5, pc}
 8014e24:	2401      	movs	r4, #1
 8014e26:	4620      	mov	r0, r4
 8014e28:	bd38      	pop	{r3, r4, r5, pc}
 8014e2a:	bf00      	nop

08014e2c <create_node>:
 8014e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e30:	b083      	sub	sp, #12
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d063      	beq.n	8014efe <create_node+0xd2>
 8014e36:	4606      	mov	r6, r0
 8014e38:	4836      	ldr	r0, [pc, #216]	@ (8014f14 <create_node+0xe8>)
 8014e3a:	460f      	mov	r7, r1
 8014e3c:	4690      	mov	r8, r2
 8014e3e:	461d      	mov	r5, r3
 8014e40:	f7ff fc9c 	bl	801477c <get_memory>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d05a      	beq.n	8014efe <create_node+0xd2>
 8014e48:	6884      	ldr	r4, [r0, #8]
 8014e4a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8014e4c:	6123      	str	r3, [r4, #16]
 8014e4e:	f7ff fd1b 	bl	8014888 <rmw_get_implementation_identifier>
 8014e52:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8014e56:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014e5a:	f8c4 9020 	str.w	r9, [r4, #32]
 8014e5e:	4630      	mov	r0, r6
 8014e60:	f7eb fa36 	bl	80002d0 <strlen>
 8014e64:	1c42      	adds	r2, r0, #1
 8014e66:	2a3c      	cmp	r2, #60	@ 0x3c
 8014e68:	f104 0518 	add.w	r5, r4, #24
 8014e6c:	d844      	bhi.n	8014ef8 <create_node+0xcc>
 8014e6e:	4648      	mov	r0, r9
 8014e70:	4631      	mov	r1, r6
 8014e72:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8014e76:	f003 fd6c 	bl	8018952 <memcpy>
 8014e7a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8014e7e:	4638      	mov	r0, r7
 8014e80:	f7eb fa26 	bl	80002d0 <strlen>
 8014e84:	1c42      	adds	r2, r0, #1
 8014e86:	2a3c      	cmp	r2, #60	@ 0x3c
 8014e88:	d836      	bhi.n	8014ef8 <create_node+0xcc>
 8014e8a:	4639      	mov	r1, r7
 8014e8c:	4648      	mov	r0, r9
 8014e8e:	f003 fd60 	bl	8018952 <memcpy>
 8014e92:	6923      	ldr	r3, [r4, #16]
 8014e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014e98:	2101      	movs	r1, #1
 8014e9a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8014e9e:	1842      	adds	r2, r0, r1
 8014ea0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8014ea4:	f7f8 fdbe 	bl	800da24 <uxr_object_id>
 8014ea8:	6160      	str	r0, [r4, #20]
 8014eaa:	783b      	ldrb	r3, [r7, #0]
 8014eac:	2b2f      	cmp	r3, #47	@ 0x2f
 8014eae:	d128      	bne.n	8014f02 <create_node+0xd6>
 8014eb0:	787b      	ldrb	r3, [r7, #1]
 8014eb2:	bb33      	cbnz	r3, 8014f02 <create_node+0xd6>
 8014eb4:	4a18      	ldr	r2, [pc, #96]	@ (8014f18 <create_node+0xec>)
 8014eb6:	4819      	ldr	r0, [pc, #100]	@ (8014f1c <create_node+0xf0>)
 8014eb8:	4633      	mov	r3, r6
 8014eba:	213c      	movs	r1, #60	@ 0x3c
 8014ebc:	f003 fafa 	bl	80184b4 <sniprintf>
 8014ec0:	6920      	ldr	r0, [r4, #16]
 8014ec2:	4916      	ldr	r1, [pc, #88]	@ (8014f1c <create_node+0xf0>)
 8014ec4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014ec8:	9100      	str	r1, [sp, #0]
 8014eca:	2106      	movs	r1, #6
 8014ecc:	9101      	str	r1, [sp, #4]
 8014ece:	6811      	ldr	r1, [r2, #0]
 8014ed0:	6962      	ldr	r2, [r4, #20]
 8014ed2:	fa1f f388 	uxth.w	r3, r8
 8014ed6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014eda:	f7f8 fb53 	bl	800d584 <uxr_buffer_create_participant_bin>
 8014ede:	4602      	mov	r2, r0
 8014ee0:	6920      	ldr	r0, [r4, #16]
 8014ee2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014ee6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014eea:	f7f6 fe53 	bl	800bb94 <run_xrce_session>
 8014eee:	b118      	cbz	r0, 8014ef8 <create_node+0xcc>
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	b003      	add	sp, #12
 8014ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f7f6 fcd3 	bl	800b8a4 <rmw_uxrce_fini_node_memory>
 8014efe:	2500      	movs	r5, #0
 8014f00:	e7f6      	b.n	8014ef0 <create_node+0xc4>
 8014f02:	4a07      	ldr	r2, [pc, #28]	@ (8014f20 <create_node+0xf4>)
 8014f04:	9600      	str	r6, [sp, #0]
 8014f06:	463b      	mov	r3, r7
 8014f08:	213c      	movs	r1, #60	@ 0x3c
 8014f0a:	4804      	ldr	r0, [pc, #16]	@ (8014f1c <create_node+0xf0>)
 8014f0c:	f003 fad2 	bl	80184b4 <sniprintf>
 8014f10:	e7d6      	b.n	8014ec0 <create_node+0x94>
 8014f12:	bf00      	nop
 8014f14:	2000d5fc 	.word	0x2000d5fc
 8014f18:	08019894 	.word	0x08019894
 8014f1c:	2000ec88 	.word	0x2000ec88
 8014f20:	08019a00 	.word	0x08019a00

08014f24 <rmw_create_node>:
 8014f24:	b191      	cbz	r1, 8014f4c <rmw_create_node+0x28>
 8014f26:	b410      	push	{r4}
 8014f28:	4614      	mov	r4, r2
 8014f2a:	780a      	ldrb	r2, [r1, #0]
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	4608      	mov	r0, r1
 8014f30:	b142      	cbz	r2, 8014f44 <rmw_create_node+0x20>
 8014f32:	b13c      	cbz	r4, 8014f44 <rmw_create_node+0x20>
 8014f34:	7822      	ldrb	r2, [r4, #0]
 8014f36:	b12a      	cbz	r2, 8014f44 <rmw_create_node+0x20>
 8014f38:	4621      	mov	r1, r4
 8014f3a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8014f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f40:	f7ff bf74 	b.w	8014e2c <create_node>
 8014f44:	2000      	movs	r0, #0
 8014f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f4a:	4770      	bx	lr
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	4770      	bx	lr

08014f50 <rmw_destroy_node>:
 8014f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f52:	b328      	cbz	r0, 8014fa0 <rmw_destroy_node+0x50>
 8014f54:	4607      	mov	r7, r0
 8014f56:	6800      	ldr	r0, [r0, #0]
 8014f58:	b120      	cbz	r0, 8014f64 <rmw_destroy_node+0x14>
 8014f5a:	4b36      	ldr	r3, [pc, #216]	@ (8015034 <rmw_destroy_node+0xe4>)
 8014f5c:	6819      	ldr	r1, [r3, #0]
 8014f5e:	f7eb f957 	bl	8000210 <strcmp>
 8014f62:	b9e8      	cbnz	r0, 8014fa0 <rmw_destroy_node+0x50>
 8014f64:	687d      	ldr	r5, [r7, #4]
 8014f66:	b1dd      	cbz	r5, 8014fa0 <rmw_destroy_node+0x50>
 8014f68:	4b33      	ldr	r3, [pc, #204]	@ (8015038 <rmw_destroy_node+0xe8>)
 8014f6a:	681c      	ldr	r4, [r3, #0]
 8014f6c:	2c00      	cmp	r4, #0
 8014f6e:	d05f      	beq.n	8015030 <rmw_destroy_node+0xe0>
 8014f70:	2600      	movs	r6, #0
 8014f72:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014f76:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8014f7a:	429d      	cmp	r5, r3
 8014f7c:	d013      	beq.n	8014fa6 <rmw_destroy_node+0x56>
 8014f7e:	2c00      	cmp	r4, #0
 8014f80:	d1f7      	bne.n	8014f72 <rmw_destroy_node+0x22>
 8014f82:	4b2e      	ldr	r3, [pc, #184]	@ (801503c <rmw_destroy_node+0xec>)
 8014f84:	681c      	ldr	r4, [r3, #0]
 8014f86:	b1c4      	cbz	r4, 8014fba <rmw_destroy_node+0x6a>
 8014f88:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014f8c:	6a0b      	ldr	r3, [r1, #32]
 8014f8e:	429d      	cmp	r5, r3
 8014f90:	d1f9      	bne.n	8014f86 <rmw_destroy_node+0x36>
 8014f92:	317c      	adds	r1, #124	@ 0x7c
 8014f94:	4638      	mov	r0, r7
 8014f96:	f000 fad9 	bl	801554c <rmw_destroy_subscription>
 8014f9a:	2801      	cmp	r0, #1
 8014f9c:	4606      	mov	r6, r0
 8014f9e:	d1f2      	bne.n	8014f86 <rmw_destroy_node+0x36>
 8014fa0:	2601      	movs	r6, #1
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fa6:	3184      	adds	r1, #132	@ 0x84
 8014fa8:	4638      	mov	r0, r7
 8014faa:	f7f6 faab 	bl	800b504 <rmw_destroy_publisher>
 8014fae:	2801      	cmp	r0, #1
 8014fb0:	4606      	mov	r6, r0
 8014fb2:	d0f5      	beq.n	8014fa0 <rmw_destroy_node+0x50>
 8014fb4:	2c00      	cmp	r4, #0
 8014fb6:	d1dc      	bne.n	8014f72 <rmw_destroy_node+0x22>
 8014fb8:	e7e3      	b.n	8014f82 <rmw_destroy_node+0x32>
 8014fba:	4b21      	ldr	r3, [pc, #132]	@ (8015040 <rmw_destroy_node+0xf0>)
 8014fbc:	681c      	ldr	r4, [r3, #0]
 8014fbe:	b16c      	cbz	r4, 8014fdc <rmw_destroy_node+0x8c>
 8014fc0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014fc4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014fc6:	429d      	cmp	r5, r3
 8014fc8:	d1f9      	bne.n	8014fbe <rmw_destroy_node+0x6e>
 8014fca:	317c      	adds	r1, #124	@ 0x7c
 8014fcc:	4638      	mov	r0, r7
 8014fce:	f000 f98b 	bl	80152e8 <rmw_destroy_service>
 8014fd2:	2801      	cmp	r0, #1
 8014fd4:	4606      	mov	r6, r0
 8014fd6:	d0e3      	beq.n	8014fa0 <rmw_destroy_node+0x50>
 8014fd8:	2c00      	cmp	r4, #0
 8014fda:	d1f1      	bne.n	8014fc0 <rmw_destroy_node+0x70>
 8014fdc:	4b19      	ldr	r3, [pc, #100]	@ (8015044 <rmw_destroy_node+0xf4>)
 8014fde:	681c      	ldr	r4, [r3, #0]
 8014fe0:	b16c      	cbz	r4, 8014ffe <rmw_destroy_node+0xae>
 8014fe2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014fe6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014fe8:	429d      	cmp	r5, r3
 8014fea:	d1f9      	bne.n	8014fe0 <rmw_destroy_node+0x90>
 8014fec:	317c      	adds	r1, #124	@ 0x7c
 8014fee:	4638      	mov	r0, r7
 8014ff0:	f7ff fbe8 	bl	80147c4 <rmw_destroy_client>
 8014ff4:	2801      	cmp	r0, #1
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	d0d2      	beq.n	8014fa0 <rmw_destroy_node+0x50>
 8014ffa:	2c00      	cmp	r4, #0
 8014ffc:	d1f1      	bne.n	8014fe2 <rmw_destroy_node+0x92>
 8014ffe:	6928      	ldr	r0, [r5, #16]
 8015000:	696a      	ldr	r2, [r5, #20]
 8015002:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015006:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801500a:	6819      	ldr	r1, [r3, #0]
 801500c:	f7f8 fa70 	bl	800d4f0 <uxr_buffer_delete_entity>
 8015010:	4602      	mov	r2, r0
 8015012:	6928      	ldr	r0, [r5, #16]
 8015014:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015018:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801501c:	f7f6 fdba 	bl	800bb94 <run_xrce_session>
 8015020:	2800      	cmp	r0, #0
 8015022:	bf08      	it	eq
 8015024:	2602      	moveq	r6, #2
 8015026:	4638      	mov	r0, r7
 8015028:	f7f6 fc3c 	bl	800b8a4 <rmw_uxrce_fini_node_memory>
 801502c:	4630      	mov	r0, r6
 801502e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015030:	4626      	mov	r6, r4
 8015032:	e7a6      	b.n	8014f82 <rmw_destroy_node+0x32>
 8015034:	0801a4d4 	.word	0x0801a4d4
 8015038:	2000d548 	.word	0x2000d548
 801503c:	2000ccc8 	.word	0x2000ccc8
 8015040:	2000c880 	.word	0x2000c880
 8015044:	2000c7a8 	.word	0x2000c7a8

08015048 <rmw_node_get_graph_guard_condition>:
 8015048:	6843      	ldr	r3, [r0, #4]
 801504a:	6918      	ldr	r0, [r3, #16]
 801504c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop

08015054 <rmw_send_request>:
 8015054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015058:	4604      	mov	r4, r0
 801505a:	6800      	ldr	r0, [r0, #0]
 801505c:	b08a      	sub	sp, #40	@ 0x28
 801505e:	460e      	mov	r6, r1
 8015060:	4615      	mov	r5, r2
 8015062:	b128      	cbz	r0, 8015070 <rmw_send_request+0x1c>
 8015064:	4b1e      	ldr	r3, [pc, #120]	@ (80150e0 <rmw_send_request+0x8c>)
 8015066:	6819      	ldr	r1, [r3, #0]
 8015068:	f7eb f8d2 	bl	8000210 <strcmp>
 801506c:	2800      	cmp	r0, #0
 801506e:	d133      	bne.n	80150d8 <rmw_send_request+0x84>
 8015070:	6864      	ldr	r4, [r4, #4]
 8015072:	6963      	ldr	r3, [r4, #20]
 8015074:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 8015076:	689b      	ldr	r3, [r3, #8]
 8015078:	4798      	blx	r3
 801507a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801507e:	4630      	mov	r0, r6
 8015080:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015084:	4798      	blx	r3
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	9000      	str	r0, [sp, #0]
 801508a:	6922      	ldr	r2, [r4, #16]
 801508c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801508e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015092:	ab02      	add	r3, sp, #8
 8015094:	f7fa fd06 	bl	800faa4 <uxr_prepare_output_stream>
 8015098:	2300      	movs	r3, #0
 801509a:	6028      	str	r0, [r5, #0]
 801509c:	606b      	str	r3, [r5, #4]
 801509e:	b190      	cbz	r0, 80150c6 <rmw_send_request+0x72>
 80150a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80150a4:	a902      	add	r1, sp, #8
 80150a6:	4630      	mov	r0, r6
 80150a8:	4798      	blx	r3
 80150aa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80150ae:	6938      	ldr	r0, [r7, #16]
 80150b0:	2b01      	cmp	r3, #1
 80150b2:	d00c      	beq.n	80150ce <rmw_send_request+0x7a>
 80150b4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80150b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150ba:	f7f9 fa81 	bl	800e5c0 <uxr_run_session_until_confirm_delivery>
 80150be:	2000      	movs	r0, #0
 80150c0:	b00a      	add	sp, #40	@ 0x28
 80150c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c6:	2001      	movs	r0, #1
 80150c8:	b00a      	add	sp, #40	@ 0x28
 80150ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150d2:	f7f8 fedd 	bl	800de90 <uxr_flash_output_streams>
 80150d6:	e7f2      	b.n	80150be <rmw_send_request+0x6a>
 80150d8:	200c      	movs	r0, #12
 80150da:	b00a      	add	sp, #40	@ 0x28
 80150dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e0:	0801a4d4 	.word	0x0801a4d4

080150e4 <rmw_take_request>:
 80150e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150e8:	4605      	mov	r5, r0
 80150ea:	6800      	ldr	r0, [r0, #0]
 80150ec:	b089      	sub	sp, #36	@ 0x24
 80150ee:	460c      	mov	r4, r1
 80150f0:	4690      	mov	r8, r2
 80150f2:	461e      	mov	r6, r3
 80150f4:	b128      	cbz	r0, 8015102 <rmw_take_request+0x1e>
 80150f6:	4b28      	ldr	r3, [pc, #160]	@ (8015198 <rmw_take_request+0xb4>)
 80150f8:	6819      	ldr	r1, [r3, #0]
 80150fa:	f7eb f889 	bl	8000210 <strcmp>
 80150fe:	2800      	cmp	r0, #0
 8015100:	d146      	bne.n	8015190 <rmw_take_request+0xac>
 8015102:	b10e      	cbz	r6, 8015108 <rmw_take_request+0x24>
 8015104:	2300      	movs	r3, #0
 8015106:	7033      	strb	r3, [r6, #0]
 8015108:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801510c:	f7f6 fcc4 	bl	800ba98 <rmw_uxrce_clean_expired_static_input_buffer>
 8015110:	4648      	mov	r0, r9
 8015112:	f7f6 fc9b 	bl	800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015116:	4607      	mov	r7, r0
 8015118:	b3b0      	cbz	r0, 8015188 <rmw_take_request+0xa4>
 801511a:	6885      	ldr	r5, [r0, #8]
 801511c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015120:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015124:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015128:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801512c:	7423      	strb	r3, [r4, #16]
 801512e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015132:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015136:	74e2      	strb	r2, [r4, #19]
 8015138:	f8a4 3011 	strh.w	r3, [r4, #17]
 801513c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015140:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8015144:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015148:	61e1      	str	r1, [r4, #28]
 801514a:	6162      	str	r2, [r4, #20]
 801514c:	61a3      	str	r3, [r4, #24]
 801514e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015152:	689b      	ldr	r3, [r3, #8]
 8015154:	4798      	blx	r3
 8015156:	6844      	ldr	r4, [r0, #4]
 8015158:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801515c:	f105 0110 	add.w	r1, r5, #16
 8015160:	4668      	mov	r0, sp
 8015162:	f7f8 f8cb 	bl	800d2fc <ucdr_init_buffer>
 8015166:	68e3      	ldr	r3, [r4, #12]
 8015168:	4641      	mov	r1, r8
 801516a:	4668      	mov	r0, sp
 801516c:	4798      	blx	r3
 801516e:	4639      	mov	r1, r7
 8015170:	4604      	mov	r4, r0
 8015172:	480a      	ldr	r0, [pc, #40]	@ (801519c <rmw_take_request+0xb8>)
 8015174:	f7ff fb12 	bl	801479c <put_memory>
 8015178:	b106      	cbz	r6, 801517c <rmw_take_request+0x98>
 801517a:	7034      	strb	r4, [r6, #0]
 801517c:	f084 0001 	eor.w	r0, r4, #1
 8015180:	b2c0      	uxtb	r0, r0
 8015182:	b009      	add	sp, #36	@ 0x24
 8015184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015188:	2001      	movs	r0, #1
 801518a:	b009      	add	sp, #36	@ 0x24
 801518c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015190:	200c      	movs	r0, #12
 8015192:	b009      	add	sp, #36	@ 0x24
 8015194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015198:	0801a4d4 	.word	0x0801a4d4
 801519c:	2000c518 	.word	0x2000c518

080151a0 <rmw_send_response>:
 80151a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151a2:	4605      	mov	r5, r0
 80151a4:	6800      	ldr	r0, [r0, #0]
 80151a6:	b091      	sub	sp, #68	@ 0x44
 80151a8:	460c      	mov	r4, r1
 80151aa:	4616      	mov	r6, r2
 80151ac:	b128      	cbz	r0, 80151ba <rmw_send_response+0x1a>
 80151ae:	4b28      	ldr	r3, [pc, #160]	@ (8015250 <rmw_send_response+0xb0>)
 80151b0:	6819      	ldr	r1, [r3, #0]
 80151b2:	f7eb f82d 	bl	8000210 <strcmp>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	d141      	bne.n	801523e <rmw_send_response+0x9e>
 80151ba:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80151be:	9306      	str	r3, [sp, #24]
 80151c0:	4623      	mov	r3, r4
 80151c2:	9207      	str	r2, [sp, #28]
 80151c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151c8:	686d      	ldr	r5, [r5, #4]
 80151ca:	789b      	ldrb	r3, [r3, #2]
 80151cc:	68a1      	ldr	r1, [r4, #8]
 80151ce:	f88d 2017 	strb.w	r2, [sp, #23]
 80151d2:	f88d 3016 	strb.w	r3, [sp, #22]
 80151d6:	68e2      	ldr	r2, [r4, #12]
 80151d8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80151dc:	6860      	ldr	r0, [r4, #4]
 80151de:	f8ad 3014 	strh.w	r3, [sp, #20]
 80151e2:	ab02      	add	r3, sp, #8
 80151e4:	c307      	stmia	r3!, {r0, r1, r2}
 80151e6:	696b      	ldr	r3, [r5, #20]
 80151e8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	4798      	blx	r3
 80151ee:	6844      	ldr	r4, [r0, #4]
 80151f0:	4630      	mov	r0, r6
 80151f2:	6923      	ldr	r3, [r4, #16]
 80151f4:	4798      	blx	r3
 80151f6:	f100 0318 	add.w	r3, r0, #24
 80151fa:	6938      	ldr	r0, [r7, #16]
 80151fc:	9300      	str	r3, [sp, #0]
 80151fe:	692a      	ldr	r2, [r5, #16]
 8015200:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015202:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015206:	ab08      	add	r3, sp, #32
 8015208:	f7fa fc4c 	bl	800faa4 <uxr_prepare_output_stream>
 801520c:	b910      	cbnz	r0, 8015214 <rmw_send_response+0x74>
 801520e:	2001      	movs	r0, #1
 8015210:	b011      	add	sp, #68	@ 0x44
 8015212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015214:	a902      	add	r1, sp, #8
 8015216:	a808      	add	r0, sp, #32
 8015218:	f7fb fd68 	bl	8010cec <uxr_serialize_SampleIdentity>
 801521c:	68a3      	ldr	r3, [r4, #8]
 801521e:	a908      	add	r1, sp, #32
 8015220:	4630      	mov	r0, r6
 8015222:	4798      	blx	r3
 8015224:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015228:	6938      	ldr	r0, [r7, #16]
 801522a:	2b01      	cmp	r3, #1
 801522c:	d00a      	beq.n	8015244 <rmw_send_response+0xa4>
 801522e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015230:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015234:	f7f9 f9c4 	bl	800e5c0 <uxr_run_session_until_confirm_delivery>
 8015238:	2000      	movs	r0, #0
 801523a:	b011      	add	sp, #68	@ 0x44
 801523c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801523e:	200c      	movs	r0, #12
 8015240:	b011      	add	sp, #68	@ 0x44
 8015242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015244:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015248:	f7f8 fe22 	bl	800de90 <uxr_flash_output_streams>
 801524c:	e7f4      	b.n	8015238 <rmw_send_response+0x98>
 801524e:	bf00      	nop
 8015250:	0801a4d4 	.word	0x0801a4d4

08015254 <rmw_take_response>:
 8015254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015258:	4604      	mov	r4, r0
 801525a:	6800      	ldr	r0, [r0, #0]
 801525c:	b088      	sub	sp, #32
 801525e:	4688      	mov	r8, r1
 8015260:	4617      	mov	r7, r2
 8015262:	461d      	mov	r5, r3
 8015264:	b120      	cbz	r0, 8015270 <rmw_take_response+0x1c>
 8015266:	4b1e      	ldr	r3, [pc, #120]	@ (80152e0 <rmw_take_response+0x8c>)
 8015268:	6819      	ldr	r1, [r3, #0]
 801526a:	f7ea ffd1 	bl	8000210 <strcmp>
 801526e:	bb78      	cbnz	r0, 80152d0 <rmw_take_response+0x7c>
 8015270:	b10d      	cbz	r5, 8015276 <rmw_take_response+0x22>
 8015272:	2300      	movs	r3, #0
 8015274:	702b      	strb	r3, [r5, #0]
 8015276:	6864      	ldr	r4, [r4, #4]
 8015278:	f7f6 fc0e 	bl	800ba98 <rmw_uxrce_clean_expired_static_input_buffer>
 801527c:	4620      	mov	r0, r4
 801527e:	f7f6 fbe5 	bl	800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015282:	4606      	mov	r6, r0
 8015284:	b340      	cbz	r0, 80152d8 <rmw_take_response+0x84>
 8015286:	6963      	ldr	r3, [r4, #20]
 8015288:	6884      	ldr	r4, [r0, #8]
 801528a:	68db      	ldr	r3, [r3, #12]
 801528c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015290:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015294:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015298:	4798      	blx	r3
 801529a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801529e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80152a2:	f104 0110 	add.w	r1, r4, #16
 80152a6:	4668      	mov	r0, sp
 80152a8:	f7f8 f828 	bl	800d2fc <ucdr_init_buffer>
 80152ac:	4639      	mov	r1, r7
 80152ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80152b2:	4668      	mov	r0, sp
 80152b4:	4798      	blx	r3
 80152b6:	4631      	mov	r1, r6
 80152b8:	4604      	mov	r4, r0
 80152ba:	480a      	ldr	r0, [pc, #40]	@ (80152e4 <rmw_take_response+0x90>)
 80152bc:	f7ff fa6e 	bl	801479c <put_memory>
 80152c0:	b105      	cbz	r5, 80152c4 <rmw_take_response+0x70>
 80152c2:	702c      	strb	r4, [r5, #0]
 80152c4:	f084 0001 	eor.w	r0, r4, #1
 80152c8:	b2c0      	uxtb	r0, r0
 80152ca:	b008      	add	sp, #32
 80152cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d0:	200c      	movs	r0, #12
 80152d2:	b008      	add	sp, #32
 80152d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d8:	2001      	movs	r0, #1
 80152da:	b008      	add	sp, #32
 80152dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152e0:	0801a4d4 	.word	0x0801a4d4
 80152e4:	2000c518 	.word	0x2000c518

080152e8 <rmw_destroy_service>:
 80152e8:	b570      	push	{r4, r5, r6, lr}
 80152ea:	b128      	cbz	r0, 80152f8 <rmw_destroy_service+0x10>
 80152ec:	4604      	mov	r4, r0
 80152ee:	6800      	ldr	r0, [r0, #0]
 80152f0:	460d      	mov	r5, r1
 80152f2:	f7f6 fcd5 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 80152f6:	b910      	cbnz	r0, 80152fe <rmw_destroy_service+0x16>
 80152f8:	2401      	movs	r4, #1
 80152fa:	4620      	mov	r0, r4
 80152fc:	bd70      	pop	{r4, r5, r6, pc}
 80152fe:	6863      	ldr	r3, [r4, #4]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d0f9      	beq.n	80152f8 <rmw_destroy_service+0x10>
 8015304:	2d00      	cmp	r5, #0
 8015306:	d0f7      	beq.n	80152f8 <rmw_destroy_service+0x10>
 8015308:	6828      	ldr	r0, [r5, #0]
 801530a:	f7f6 fcc9 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 801530e:	2800      	cmp	r0, #0
 8015310:	d0f2      	beq.n	80152f8 <rmw_destroy_service+0x10>
 8015312:	686e      	ldr	r6, [r5, #4]
 8015314:	2e00      	cmp	r6, #0
 8015316:	d0ef      	beq.n	80152f8 <rmw_destroy_service+0x10>
 8015318:	6864      	ldr	r4, [r4, #4]
 801531a:	6932      	ldr	r2, [r6, #16]
 801531c:	6920      	ldr	r0, [r4, #16]
 801531e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015322:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015326:	6819      	ldr	r1, [r3, #0]
 8015328:	f001 fd1a 	bl	8016d60 <uxr_buffer_cancel_data>
 801532c:	4602      	mov	r2, r0
 801532e:	6920      	ldr	r0, [r4, #16]
 8015330:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015334:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015338:	f7f6 fc2c 	bl	800bb94 <run_xrce_session>
 801533c:	6920      	ldr	r0, [r4, #16]
 801533e:	6932      	ldr	r2, [r6, #16]
 8015340:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015344:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015348:	6819      	ldr	r1, [r3, #0]
 801534a:	f7f8 f8d1 	bl	800d4f0 <uxr_buffer_delete_entity>
 801534e:	4602      	mov	r2, r0
 8015350:	6920      	ldr	r0, [r4, #16]
 8015352:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015356:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801535a:	f7f6 fc1b 	bl	800bb94 <run_xrce_session>
 801535e:	f080 0401 	eor.w	r4, r0, #1
 8015362:	b2e4      	uxtb	r4, r4
 8015364:	4628      	mov	r0, r5
 8015366:	0064      	lsls	r4, r4, #1
 8015368:	f7f6 fae0 	bl	800b92c <rmw_uxrce_fini_service_memory>
 801536c:	e7c5      	b.n	80152fa <rmw_destroy_service+0x12>
 801536e:	bf00      	nop

08015370 <rmw_create_subscription>:
 8015370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015374:	b08d      	sub	sp, #52	@ 0x34
 8015376:	2800      	cmp	r0, #0
 8015378:	f000 80d1 	beq.w	801551e <rmw_create_subscription+0x1ae>
 801537c:	460f      	mov	r7, r1
 801537e:	2900      	cmp	r1, #0
 8015380:	f000 80cd 	beq.w	801551e <rmw_create_subscription+0x1ae>
 8015384:	4604      	mov	r4, r0
 8015386:	6800      	ldr	r0, [r0, #0]
 8015388:	4615      	mov	r5, r2
 801538a:	461e      	mov	r6, r3
 801538c:	f7f6 fc88 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 8015390:	2800      	cmp	r0, #0
 8015392:	f000 80c4 	beq.w	801551e <rmw_create_subscription+0x1ae>
 8015396:	2d00      	cmp	r5, #0
 8015398:	f000 80c1 	beq.w	801551e <rmw_create_subscription+0x1ae>
 801539c:	782b      	ldrb	r3, [r5, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	f000 80bd 	beq.w	801551e <rmw_create_subscription+0x1ae>
 80153a4:	2e00      	cmp	r6, #0
 80153a6:	f000 80ba 	beq.w	801551e <rmw_create_subscription+0x1ae>
 80153aa:	485e      	ldr	r0, [pc, #376]	@ (8015524 <rmw_create_subscription+0x1b4>)
 80153ac:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80153b0:	f7ff f9e4 	bl	801477c <get_memory>
 80153b4:	2800      	cmp	r0, #0
 80153b6:	f000 80b2 	beq.w	801551e <rmw_create_subscription+0x1ae>
 80153ba:	6884      	ldr	r4, [r0, #8]
 80153bc:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 80153c0:	f7ff fa62 	bl	8014888 <rmw_get_implementation_identifier>
 80153c4:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 80153c8:	67e0      	str	r0, [r4, #124]	@ 0x7c
 80153ca:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 80153ce:	4628      	mov	r0, r5
 80153d0:	f7ea ff7e 	bl	80002d0 <strlen>
 80153d4:	3001      	adds	r0, #1
 80153d6:	283c      	cmp	r0, #60	@ 0x3c
 80153d8:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 80153dc:	f200 8098 	bhi.w	8015510 <rmw_create_subscription+0x1a0>
 80153e0:	4a51      	ldr	r2, [pc, #324]	@ (8015528 <rmw_create_subscription+0x1b8>)
 80153e2:	462b      	mov	r3, r5
 80153e4:	213c      	movs	r1, #60	@ 0x3c
 80153e6:	4650      	mov	r0, sl
 80153e8:	f003 f864 	bl	80184b4 <sniprintf>
 80153ec:	4631      	mov	r1, r6
 80153ee:	f8c4 9020 	str.w	r9, [r4, #32]
 80153f2:	2250      	movs	r2, #80	@ 0x50
 80153f4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80153f8:	f003 faab 	bl	8018952 <memcpy>
 80153fc:	494b      	ldr	r1, [pc, #300]	@ (801552c <rmw_create_subscription+0x1bc>)
 80153fe:	4638      	mov	r0, r7
 8015400:	f7f6 fc5c 	bl	800bcbc <get_message_typesupport_handle>
 8015404:	2800      	cmp	r0, #0
 8015406:	f000 8083 	beq.w	8015510 <rmw_create_subscription+0x1a0>
 801540a:	6842      	ldr	r2, [r0, #4]
 801540c:	61a2      	str	r2, [r4, #24]
 801540e:	2a00      	cmp	r2, #0
 8015410:	d07e      	beq.n	8015510 <rmw_create_subscription+0x1a0>
 8015412:	4629      	mov	r1, r5
 8015414:	4633      	mov	r3, r6
 8015416:	4648      	mov	r0, r9
 8015418:	f7ff fc92 	bl	8014d40 <create_topic>
 801541c:	61e0      	str	r0, [r4, #28]
 801541e:	2800      	cmp	r0, #0
 8015420:	d07a      	beq.n	8015518 <rmw_create_subscription+0x1a8>
 8015422:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801542a:	2104      	movs	r1, #4
 801542c:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8015430:	1c42      	adds	r2, r0, #1
 8015432:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8015436:	f7f8 faf5 	bl	800da24 <uxr_object_id>
 801543a:	6120      	str	r0, [r4, #16]
 801543c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015440:	2506      	movs	r5, #6
 8015442:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8015446:	9500      	str	r5, [sp, #0]
 8015448:	6819      	ldr	r1, [r3, #0]
 801544a:	6922      	ldr	r2, [r4, #16]
 801544c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015450:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015454:	f7f8 f92a 	bl	800d6ac <uxr_buffer_create_subscriber_bin>
 8015458:	4602      	mov	r2, r0
 801545a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801545e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015462:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015466:	f7f6 fb95 	bl	800bb94 <run_xrce_session>
 801546a:	2800      	cmp	r0, #0
 801546c:	d050      	beq.n	8015510 <rmw_create_subscription+0x1a0>
 801546e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015476:	4629      	mov	r1, r5
 8015478:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801547c:	1c42      	adds	r2, r0, #1
 801547e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8015482:	f7f8 facf 	bl	800da24 <uxr_object_id>
 8015486:	af08      	add	r7, sp, #32
 8015488:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801548c:	69e3      	ldr	r3, [r4, #28]
 801548e:	6160      	str	r0, [r4, #20]
 8015490:	4631      	mov	r1, r6
 8015492:	4638      	mov	r0, r7
 8015494:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8015498:	9305      	str	r3, [sp, #20]
 801549a:	f7f6 fb9b 	bl	800bbd4 <convert_qos_profile>
 801549e:	9503      	str	r5, [sp, #12]
 80154a0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80154a4:	9b05      	ldr	r3, [sp, #20]
 80154a6:	9001      	str	r0, [sp, #4]
 80154a8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80154ac:	691b      	ldr	r3, [r3, #16]
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80154b4:	f8db 1000 	ldr.w	r1, [fp]
 80154b8:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80154bc:	f7f8 f98a 	bl	800d7d4 <uxr_buffer_create_datareader_bin>
 80154c0:	4602      	mov	r2, r0
 80154c2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80154c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80154ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80154ce:	f7f6 fb61 	bl	800bb94 <run_xrce_session>
 80154d2:	b1e8      	cbz	r0, 8015510 <rmw_create_subscription+0x1a0>
 80154d4:	7a33      	ldrb	r3, [r6, #8]
 80154d6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80154da:	2b02      	cmp	r3, #2
 80154dc:	bf0c      	ite	eq
 80154de:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80154e2:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80154e6:	9307      	str	r3, [sp, #28]
 80154e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80154ec:	2200      	movs	r2, #0
 80154ee:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80154f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80154f4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80154f8:	9300      	str	r3, [sp, #0]
 80154fa:	6962      	ldr	r2, [r4, #20]
 80154fc:	9b07      	ldr	r3, [sp, #28]
 80154fe:	6809      	ldr	r1, [r1, #0]
 8015500:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015504:	f001 fbf4 	bl	8016cf0 <uxr_buffer_request_data>
 8015508:	4640      	mov	r0, r8
 801550a:	b00d      	add	sp, #52	@ 0x34
 801550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015510:	69e0      	ldr	r0, [r4, #28]
 8015512:	b108      	cbz	r0, 8015518 <rmw_create_subscription+0x1a8>
 8015514:	f7f6 fa36 	bl	800b984 <rmw_uxrce_fini_topic_memory>
 8015518:	4640      	mov	r0, r8
 801551a:	f7f6 f9f1 	bl	800b900 <rmw_uxrce_fini_subscription_memory>
 801551e:	f04f 0800 	mov.w	r8, #0
 8015522:	e7f1      	b.n	8015508 <rmw_create_subscription+0x198>
 8015524:	2000ccc8 	.word	0x2000ccc8
 8015528:	08019894 	.word	0x08019894
 801552c:	08019860 	.word	0x08019860

08015530 <rmw_subscription_get_actual_qos>:
 8015530:	b508      	push	{r3, lr}
 8015532:	4603      	mov	r3, r0
 8015534:	b140      	cbz	r0, 8015548 <rmw_subscription_get_actual_qos+0x18>
 8015536:	4608      	mov	r0, r1
 8015538:	b131      	cbz	r1, 8015548 <rmw_subscription_get_actual_qos+0x18>
 801553a:	6859      	ldr	r1, [r3, #4]
 801553c:	2250      	movs	r2, #80	@ 0x50
 801553e:	3128      	adds	r1, #40	@ 0x28
 8015540:	f003 fa07 	bl	8018952 <memcpy>
 8015544:	2000      	movs	r0, #0
 8015546:	bd08      	pop	{r3, pc}
 8015548:	200b      	movs	r0, #11
 801554a:	bd08      	pop	{r3, pc}

0801554c <rmw_destroy_subscription>:
 801554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015550:	b128      	cbz	r0, 801555e <rmw_destroy_subscription+0x12>
 8015552:	4604      	mov	r4, r0
 8015554:	6800      	ldr	r0, [r0, #0]
 8015556:	460d      	mov	r5, r1
 8015558:	f7f6 fba2 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 801555c:	b918      	cbnz	r0, 8015566 <rmw_destroy_subscription+0x1a>
 801555e:	2401      	movs	r4, #1
 8015560:	4620      	mov	r0, r4
 8015562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015566:	6863      	ldr	r3, [r4, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d0f8      	beq.n	801555e <rmw_destroy_subscription+0x12>
 801556c:	2d00      	cmp	r5, #0
 801556e:	d0f6      	beq.n	801555e <rmw_destroy_subscription+0x12>
 8015570:	6828      	ldr	r0, [r5, #0]
 8015572:	f7f6 fb95 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 8015576:	2800      	cmp	r0, #0
 8015578:	d0f1      	beq.n	801555e <rmw_destroy_subscription+0x12>
 801557a:	686c      	ldr	r4, [r5, #4]
 801557c:	2c00      	cmp	r4, #0
 801557e:	d0ee      	beq.n	801555e <rmw_destroy_subscription+0x12>
 8015580:	6a26      	ldr	r6, [r4, #32]
 8015582:	6962      	ldr	r2, [r4, #20]
 8015584:	6930      	ldr	r0, [r6, #16]
 8015586:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801558a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801558e:	6819      	ldr	r1, [r3, #0]
 8015590:	f001 fbe6 	bl	8016d60 <uxr_buffer_cancel_data>
 8015594:	4602      	mov	r2, r0
 8015596:	6930      	ldr	r0, [r6, #16]
 8015598:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801559c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80155a0:	f7f6 faf8 	bl	800bb94 <run_xrce_session>
 80155a4:	69e0      	ldr	r0, [r4, #28]
 80155a6:	f7ff fc1f 	bl	8014de8 <destroy_topic>
 80155aa:	6a23      	ldr	r3, [r4, #32]
 80155ac:	6962      	ldr	r2, [r4, #20]
 80155ae:	6918      	ldr	r0, [r3, #16]
 80155b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80155b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80155b8:	6819      	ldr	r1, [r3, #0]
 80155ba:	f7f7 ff99 	bl	800d4f0 <uxr_buffer_delete_entity>
 80155be:	6a23      	ldr	r3, [r4, #32]
 80155c0:	6922      	ldr	r2, [r4, #16]
 80155c2:	4680      	mov	r8, r0
 80155c4:	6918      	ldr	r0, [r3, #16]
 80155c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80155ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80155ce:	6819      	ldr	r1, [r3, #0]
 80155d0:	f7f7 ff8e 	bl	800d4f0 <uxr_buffer_delete_entity>
 80155d4:	4607      	mov	r7, r0
 80155d6:	6930      	ldr	r0, [r6, #16]
 80155d8:	4642      	mov	r2, r8
 80155da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80155de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80155e2:	f7f6 fad7 	bl	800bb94 <run_xrce_session>
 80155e6:	4604      	mov	r4, r0
 80155e8:	6930      	ldr	r0, [r6, #16]
 80155ea:	463a      	mov	r2, r7
 80155ec:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80155f0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80155f4:	f7f6 face 	bl	800bb94 <run_xrce_session>
 80155f8:	4004      	ands	r4, r0
 80155fa:	f084 0401 	eor.w	r4, r4, #1
 80155fe:	b2e4      	uxtb	r4, r4
 8015600:	4628      	mov	r0, r5
 8015602:	0064      	lsls	r4, r4, #1
 8015604:	f7f6 f97c 	bl	800b900 <rmw_uxrce_fini_subscription_memory>
 8015608:	e7aa      	b.n	8015560 <rmw_destroy_subscription+0x14>
 801560a:	bf00      	nop

0801560c <rmw_take_with_info>:
 801560c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801560e:	4604      	mov	r4, r0
 8015610:	6800      	ldr	r0, [r0, #0]
 8015612:	b089      	sub	sp, #36	@ 0x24
 8015614:	460f      	mov	r7, r1
 8015616:	4615      	mov	r5, r2
 8015618:	b128      	cbz	r0, 8015626 <rmw_take_with_info+0x1a>
 801561a:	4b23      	ldr	r3, [pc, #140]	@ (80156a8 <rmw_take_with_info+0x9c>)
 801561c:	6819      	ldr	r1, [r3, #0]
 801561e:	f7ea fdf7 	bl	8000210 <strcmp>
 8015622:	2800      	cmp	r0, #0
 8015624:	d13d      	bne.n	80156a2 <rmw_take_with_info+0x96>
 8015626:	6864      	ldr	r4, [r4, #4]
 8015628:	b1fd      	cbz	r5, 801566a <rmw_take_with_info+0x5e>
 801562a:	2300      	movs	r3, #0
 801562c:	702b      	strb	r3, [r5, #0]
 801562e:	f7f6 fa33 	bl	800ba98 <rmw_uxrce_clean_expired_static_input_buffer>
 8015632:	4620      	mov	r0, r4
 8015634:	f7f6 fa0a 	bl	800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015638:	4606      	mov	r6, r0
 801563a:	b1e8      	cbz	r0, 8015678 <rmw_take_with_info+0x6c>
 801563c:	6881      	ldr	r1, [r0, #8]
 801563e:	4668      	mov	r0, sp
 8015640:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015644:	3110      	adds	r1, #16
 8015646:	f7f7 fe59 	bl	800d2fc <ucdr_init_buffer>
 801564a:	69a3      	ldr	r3, [r4, #24]
 801564c:	4639      	mov	r1, r7
 801564e:	68db      	ldr	r3, [r3, #12]
 8015650:	4668      	mov	r0, sp
 8015652:	4798      	blx	r3
 8015654:	4631      	mov	r1, r6
 8015656:	4604      	mov	r4, r0
 8015658:	4814      	ldr	r0, [pc, #80]	@ (80156ac <rmw_take_with_info+0xa0>)
 801565a:	f7ff f89f 	bl	801479c <put_memory>
 801565e:	702c      	strb	r4, [r5, #0]
 8015660:	f084 0001 	eor.w	r0, r4, #1
 8015664:	b2c0      	uxtb	r0, r0
 8015666:	b009      	add	sp, #36	@ 0x24
 8015668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801566a:	f7f6 fa15 	bl	800ba98 <rmw_uxrce_clean_expired_static_input_buffer>
 801566e:	4620      	mov	r0, r4
 8015670:	f7f6 f9ec 	bl	800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015674:	4605      	mov	r5, r0
 8015676:	b910      	cbnz	r0, 801567e <rmw_take_with_info+0x72>
 8015678:	2001      	movs	r0, #1
 801567a:	b009      	add	sp, #36	@ 0x24
 801567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801567e:	68a9      	ldr	r1, [r5, #8]
 8015680:	4668      	mov	r0, sp
 8015682:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015686:	3110      	adds	r1, #16
 8015688:	f7f7 fe38 	bl	800d2fc <ucdr_init_buffer>
 801568c:	69a3      	ldr	r3, [r4, #24]
 801568e:	4639      	mov	r1, r7
 8015690:	68db      	ldr	r3, [r3, #12]
 8015692:	4668      	mov	r0, sp
 8015694:	4798      	blx	r3
 8015696:	4629      	mov	r1, r5
 8015698:	4604      	mov	r4, r0
 801569a:	4804      	ldr	r0, [pc, #16]	@ (80156ac <rmw_take_with_info+0xa0>)
 801569c:	f7ff f87e 	bl	801479c <put_memory>
 80156a0:	e7de      	b.n	8015660 <rmw_take_with_info+0x54>
 80156a2:	200c      	movs	r0, #12
 80156a4:	b009      	add	sp, #36	@ 0x24
 80156a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156a8:	0801a4d4 	.word	0x0801a4d4
 80156ac:	2000c518 	.word	0x2000c518

080156b0 <rmw_wait>:
 80156b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156b4:	b089      	sub	sp, #36	@ 0x24
 80156b6:	4607      	mov	r7, r0
 80156b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80156ba:	460e      	mov	r6, r1
 80156bc:	4698      	mov	r8, r3
 80156be:	4691      	mov	r9, r2
 80156c0:	2a00      	cmp	r2, #0
 80156c2:	f000 811e 	beq.w	8015902 <rmw_wait+0x252>
 80156c6:	2c00      	cmp	r4, #0
 80156c8:	f000 80ef 	beq.w	80158aa <rmw_wait+0x1fa>
 80156cc:	4bb5      	ldr	r3, [pc, #724]	@ (80159a4 <rmw_wait+0x2f4>)
 80156ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156d0:	ad04      	add	r5, sp, #16
 80156d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80156d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80156da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80156de:	f7fe fe83 	bl	80143e8 <rmw_time_equal>
 80156e2:	2800      	cmp	r0, #0
 80156e4:	f000 811b 	beq.w	801591e <rmw_wait+0x26e>
 80156e8:	f04f 35ff 	mov.w	r5, #4294967295
 80156ec:	f7f6 f9d4 	bl	800ba98 <rmw_uxrce_clean_expired_static_input_buffer>
 80156f0:	4bad      	ldr	r3, [pc, #692]	@ (80159a8 <rmw_wait+0x2f8>)
 80156f2:	681c      	ldr	r4, [r3, #0]
 80156f4:	b14c      	cbz	r4, 801570a <rmw_wait+0x5a>
 80156f6:	4623      	mov	r3, r4
 80156f8:	2100      	movs	r1, #0
 80156fa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80156fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015702:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1f7      	bne.n	80156fa <rmw_wait+0x4a>
 801570a:	f1b9 0f00 	cmp.w	r9, #0
 801570e:	d011      	beq.n	8015734 <rmw_wait+0x84>
 8015710:	f8d9 1000 	ldr.w	r1, [r9]
 8015714:	b171      	cbz	r1, 8015734 <rmw_wait+0x84>
 8015716:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801571a:	2300      	movs	r3, #0
 801571c:	2001      	movs	r0, #1
 801571e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015722:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015724:	6912      	ldr	r2, [r2, #16]
 8015726:	3301      	adds	r3, #1
 8015728:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801572c:	4299      	cmp	r1, r3
 801572e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015732:	d1f4      	bne.n	801571e <rmw_wait+0x6e>
 8015734:	f1b8 0f00 	cmp.w	r8, #0
 8015738:	f000 8109 	beq.w	801594e <rmw_wait+0x29e>
 801573c:	f8d8 1000 	ldr.w	r1, [r8]
 8015740:	2900      	cmp	r1, #0
 8015742:	f000 8116 	beq.w	8015972 <rmw_wait+0x2c2>
 8015746:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801574a:	2300      	movs	r3, #0
 801574c:	2001      	movs	r0, #1
 801574e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015752:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015754:	6912      	ldr	r2, [r2, #16]
 8015756:	3301      	adds	r3, #1
 8015758:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801575c:	4299      	cmp	r1, r3
 801575e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015762:	d1f4      	bne.n	801574e <rmw_wait+0x9e>
 8015764:	2f00      	cmp	r7, #0
 8015766:	f000 8114 	beq.w	8015992 <rmw_wait+0x2e2>
 801576a:	6839      	ldr	r1, [r7, #0]
 801576c:	b171      	cbz	r1, 801578c <rmw_wait+0xdc>
 801576e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8015772:	2300      	movs	r3, #0
 8015774:	2001      	movs	r0, #1
 8015776:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801577a:	6a12      	ldr	r2, [r2, #32]
 801577c:	6912      	ldr	r2, [r2, #16]
 801577e:	3301      	adds	r3, #1
 8015780:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015784:	4299      	cmp	r1, r3
 8015786:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801578a:	d1f4      	bne.n	8015776 <rmw_wait+0xc6>
 801578c:	b344      	cbz	r4, 80157e0 <rmw_wait+0x130>
 801578e:	4622      	mov	r2, r4
 8015790:	2300      	movs	r3, #0
 8015792:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015796:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801579a:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801579e:	440b      	add	r3, r1
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	2a00      	cmp	r2, #0
 80157a4:	d1f5      	bne.n	8015792 <rmw_wait+0xe2>
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d075      	beq.n	8015896 <rmw_wait+0x1e6>
 80157aa:	1c6a      	adds	r2, r5, #1
 80157ac:	d00d      	beq.n	80157ca <rmw_wait+0x11a>
 80157ae:	ee07 5a90 	vmov	s15, r5
 80157b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80157b6:	ee07 3a90 	vmov	s15, r3
 80157ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80157be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80157c2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80157c6:	ee17 5a90 	vmov	r5, s15
 80157ca:	68a0      	ldr	r0, [r4, #8]
 80157cc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80157d0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f040 808a 	bne.w	80158ee <rmw_wait+0x23e>
 80157da:	6864      	ldr	r4, [r4, #4]
 80157dc:	2c00      	cmp	r4, #0
 80157de:	d1f4      	bne.n	80157ca <rmw_wait+0x11a>
 80157e0:	f1b9 0f00 	cmp.w	r9, #0
 80157e4:	f000 80c3 	beq.w	801596e <rmw_wait+0x2be>
 80157e8:	f8d9 5000 	ldr.w	r5, [r9]
 80157ec:	b185      	cbz	r5, 8015810 <rmw_wait+0x160>
 80157ee:	2400      	movs	r4, #0
 80157f0:	4625      	mov	r5, r4
 80157f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80157f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80157fa:	f7f6 f927 	bl	800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>
 80157fe:	2800      	cmp	r0, #0
 8015800:	d06d      	beq.n	80158de <rmw_wait+0x22e>
 8015802:	f8d9 3000 	ldr.w	r3, [r9]
 8015806:	3401      	adds	r4, #1
 8015808:	42a3      	cmp	r3, r4
 801580a:	f04f 0501 	mov.w	r5, #1
 801580e:	d8f0      	bhi.n	80157f2 <rmw_wait+0x142>
 8015810:	f1b8 0f00 	cmp.w	r8, #0
 8015814:	d012      	beq.n	801583c <rmw_wait+0x18c>
 8015816:	f8d8 1000 	ldr.w	r1, [r8]
 801581a:	2400      	movs	r4, #0
 801581c:	b171      	cbz	r1, 801583c <rmw_wait+0x18c>
 801581e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015822:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015826:	f7f6 f911 	bl	800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>
 801582a:	2800      	cmp	r0, #0
 801582c:	d047      	beq.n	80158be <rmw_wait+0x20e>
 801582e:	f8d8 3000 	ldr.w	r3, [r8]
 8015832:	3401      	adds	r4, #1
 8015834:	42a3      	cmp	r3, r4
 8015836:	f04f 0501 	mov.w	r5, #1
 801583a:	d8f0      	bhi.n	801581e <rmw_wait+0x16e>
 801583c:	b17f      	cbz	r7, 801585e <rmw_wait+0x1ae>
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	2400      	movs	r4, #0
 8015842:	b163      	cbz	r3, 801585e <rmw_wait+0x1ae>
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801584a:	f7f6 f8ff 	bl	800ba4c <rmw_uxrce_find_static_input_buffer_by_owner>
 801584e:	2800      	cmp	r0, #0
 8015850:	d03d      	beq.n	80158ce <rmw_wait+0x21e>
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	3401      	adds	r4, #1
 8015856:	42a3      	cmp	r3, r4
 8015858:	f04f 0501 	mov.w	r5, #1
 801585c:	d8f2      	bhi.n	8015844 <rmw_wait+0x194>
 801585e:	b1a6      	cbz	r6, 801588a <rmw_wait+0x1da>
 8015860:	6834      	ldr	r4, [r6, #0]
 8015862:	b194      	cbz	r4, 801588a <rmw_wait+0x1da>
 8015864:	2300      	movs	r3, #0
 8015866:	461f      	mov	r7, r3
 8015868:	e004      	b.n	8015874 <rmw_wait+0x1c4>
 801586a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801586e:	3301      	adds	r3, #1
 8015870:	429c      	cmp	r4, r3
 8015872:	d00a      	beq.n	801588a <rmw_wait+0x1da>
 8015874:	6870      	ldr	r0, [r6, #4]
 8015876:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801587a:	7c0a      	ldrb	r2, [r1, #16]
 801587c:	2a00      	cmp	r2, #0
 801587e:	d0f4      	beq.n	801586a <rmw_wait+0x1ba>
 8015880:	3301      	adds	r3, #1
 8015882:	429c      	cmp	r4, r3
 8015884:	740f      	strb	r7, [r1, #16]
 8015886:	4615      	mov	r5, r2
 8015888:	d1f4      	bne.n	8015874 <rmw_wait+0x1c4>
 801588a:	f085 0001 	eor.w	r0, r5, #1
 801588e:	0040      	lsls	r0, r0, #1
 8015890:	b009      	add	sp, #36	@ 0x24
 8015892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015896:	68a0      	ldr	r0, [r4, #8]
 8015898:	2100      	movs	r1, #0
 801589a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801589e:	f7f8 fe55 	bl	800e54c <uxr_run_session_timeout>
 80158a2:	6864      	ldr	r4, [r4, #4]
 80158a4:	2c00      	cmp	r4, #0
 80158a6:	d1f6      	bne.n	8015896 <rmw_wait+0x1e6>
 80158a8:	e79a      	b.n	80157e0 <rmw_wait+0x130>
 80158aa:	f7f6 f8f5 	bl	800ba98 <rmw_uxrce_clean_expired_static_input_buffer>
 80158ae:	4b3e      	ldr	r3, [pc, #248]	@ (80159a8 <rmw_wait+0x2f8>)
 80158b0:	681c      	ldr	r4, [r3, #0]
 80158b2:	f04f 35ff 	mov.w	r5, #4294967295
 80158b6:	2c00      	cmp	r4, #0
 80158b8:	f47f af1d 	bne.w	80156f6 <rmw_wait+0x46>
 80158bc:	e728      	b.n	8015710 <rmw_wait+0x60>
 80158be:	e9d8 3200 	ldrd	r3, r2, [r8]
 80158c2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80158c6:	3401      	adds	r4, #1
 80158c8:	429c      	cmp	r4, r3
 80158ca:	d3a8      	bcc.n	801581e <rmw_wait+0x16e>
 80158cc:	e7b6      	b.n	801583c <rmw_wait+0x18c>
 80158ce:	e9d7 3200 	ldrd	r3, r2, [r7]
 80158d2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80158d6:	3401      	adds	r4, #1
 80158d8:	42a3      	cmp	r3, r4
 80158da:	d8b3      	bhi.n	8015844 <rmw_wait+0x194>
 80158dc:	e7bf      	b.n	801585e <rmw_wait+0x1ae>
 80158de:	e9d9 3200 	ldrd	r3, r2, [r9]
 80158e2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80158e6:	3401      	adds	r4, #1
 80158e8:	42a3      	cmp	r3, r4
 80158ea:	d882      	bhi.n	80157f2 <rmw_wait+0x142>
 80158ec:	e790      	b.n	8015810 <rmw_wait+0x160>
 80158ee:	4629      	mov	r1, r5
 80158f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158f4:	f7f8 fe44 	bl	800e580 <uxr_run_session_until_data>
 80158f8:	6864      	ldr	r4, [r4, #4]
 80158fa:	2c00      	cmp	r4, #0
 80158fc:	f47f af65 	bne.w	80157ca <rmw_wait+0x11a>
 8015900:	e76e      	b.n	80157e0 <rmw_wait+0x130>
 8015902:	b1f3      	cbz	r3, 8015942 <rmw_wait+0x292>
 8015904:	2c00      	cmp	r4, #0
 8015906:	f47f aee1 	bne.w	80156cc <rmw_wait+0x1c>
 801590a:	f7f6 f8c5 	bl	800ba98 <rmw_uxrce_clean_expired_static_input_buffer>
 801590e:	4b26      	ldr	r3, [pc, #152]	@ (80159a8 <rmw_wait+0x2f8>)
 8015910:	681c      	ldr	r4, [r3, #0]
 8015912:	f04f 35ff 	mov.w	r5, #4294967295
 8015916:	2c00      	cmp	r4, #0
 8015918:	f47f aeed 	bne.w	80156f6 <rmw_wait+0x46>
 801591c:	e70a      	b.n	8015734 <rmw_wait+0x84>
 801591e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015922:	f7fe fdb5 	bl	8014490 <rmw_time_total_nsec>
 8015926:	4a21      	ldr	r2, [pc, #132]	@ (80159ac <rmw_wait+0x2fc>)
 8015928:	2300      	movs	r3, #0
 801592a:	f7ea fd29 	bl	8000380 <__aeabi_uldivmod>
 801592e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015932:	f171 0100 	sbcs.w	r1, r1, #0
 8015936:	4605      	mov	r5, r0
 8015938:	f6ff aed8 	blt.w	80156ec <rmw_wait+0x3c>
 801593c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015940:	e6d4      	b.n	80156ec <rmw_wait+0x3c>
 8015942:	2800      	cmp	r0, #0
 8015944:	d1de      	bne.n	8015904 <rmw_wait+0x254>
 8015946:	2900      	cmp	r1, #0
 8015948:	d1dc      	bne.n	8015904 <rmw_wait+0x254>
 801594a:	4608      	mov	r0, r1
 801594c:	e7a0      	b.n	8015890 <rmw_wait+0x1e0>
 801594e:	2f00      	cmp	r7, #0
 8015950:	f47f af0b 	bne.w	801576a <rmw_wait+0xba>
 8015954:	2c00      	cmp	r4, #0
 8015956:	f47f af1a 	bne.w	801578e <rmw_wait+0xde>
 801595a:	f1b9 0f00 	cmp.w	r9, #0
 801595e:	d027      	beq.n	80159b0 <rmw_wait+0x300>
 8015960:	f8d9 3000 	ldr.w	r3, [r9]
 8015964:	4625      	mov	r5, r4
 8015966:	2b00      	cmp	r3, #0
 8015968:	f47f af41 	bne.w	80157ee <rmw_wait+0x13e>
 801596c:	e777      	b.n	801585e <rmw_wait+0x1ae>
 801596e:	464d      	mov	r5, r9
 8015970:	e74e      	b.n	8015810 <rmw_wait+0x160>
 8015972:	2f00      	cmp	r7, #0
 8015974:	f47f aef9 	bne.w	801576a <rmw_wait+0xba>
 8015978:	2c00      	cmp	r4, #0
 801597a:	f47f af08 	bne.w	801578e <rmw_wait+0xde>
 801597e:	f1b9 0f00 	cmp.w	r9, #0
 8015982:	d015      	beq.n	80159b0 <rmw_wait+0x300>
 8015984:	f8d9 3000 	ldr.w	r3, [r9]
 8015988:	2b00      	cmp	r3, #0
 801598a:	f47f af30 	bne.w	80157ee <rmw_wait+0x13e>
 801598e:	2500      	movs	r5, #0
 8015990:	e743      	b.n	801581a <rmw_wait+0x16a>
 8015992:	2c00      	cmp	r4, #0
 8015994:	f47f aefb 	bne.w	801578e <rmw_wait+0xde>
 8015998:	f1b9 0f00 	cmp.w	r9, #0
 801599c:	f47f af24 	bne.w	80157e8 <rmw_wait+0x138>
 80159a0:	e7f5      	b.n	801598e <rmw_wait+0x2de>
 80159a2:	bf00      	nop
 80159a4:	08019670 	.word	0x08019670
 80159a8:	2000ebb8 	.word	0x2000ebb8
 80159ac:	000f4240 	.word	0x000f4240
 80159b0:	464d      	mov	r5, r9
 80159b2:	e754      	b.n	801585e <rmw_wait+0x1ae>

080159b4 <rmw_create_wait_set>:
 80159b4:	b508      	push	{r3, lr}
 80159b6:	4803      	ldr	r0, [pc, #12]	@ (80159c4 <rmw_create_wait_set+0x10>)
 80159b8:	f7fe fee0 	bl	801477c <get_memory>
 80159bc:	b108      	cbz	r0, 80159c2 <rmw_create_wait_set+0xe>
 80159be:	6880      	ldr	r0, [r0, #8]
 80159c0:	3010      	adds	r0, #16
 80159c2:	bd08      	pop	{r3, pc}
 80159c4:	2000a374 	.word	0x2000a374

080159c8 <rmw_destroy_wait_set>:
 80159c8:	b508      	push	{r3, lr}
 80159ca:	4b08      	ldr	r3, [pc, #32]	@ (80159ec <rmw_destroy_wait_set+0x24>)
 80159cc:	6819      	ldr	r1, [r3, #0]
 80159ce:	b911      	cbnz	r1, 80159d6 <rmw_destroy_wait_set+0xe>
 80159d0:	e00a      	b.n	80159e8 <rmw_destroy_wait_set+0x20>
 80159d2:	6849      	ldr	r1, [r1, #4]
 80159d4:	b141      	cbz	r1, 80159e8 <rmw_destroy_wait_set+0x20>
 80159d6:	688b      	ldr	r3, [r1, #8]
 80159d8:	3310      	adds	r3, #16
 80159da:	4298      	cmp	r0, r3
 80159dc:	d1f9      	bne.n	80159d2 <rmw_destroy_wait_set+0xa>
 80159de:	4803      	ldr	r0, [pc, #12]	@ (80159ec <rmw_destroy_wait_set+0x24>)
 80159e0:	f7fe fedc 	bl	801479c <put_memory>
 80159e4:	2000      	movs	r0, #0
 80159e6:	bd08      	pop	{r3, pc}
 80159e8:	2001      	movs	r0, #1
 80159ea:	bd08      	pop	{r3, pc}
 80159ec:	2000a374 	.word	0x2000a374

080159f0 <rmw_uros_epoch_nanos>:
 80159f0:	4b05      	ldr	r3, [pc, #20]	@ (8015a08 <rmw_uros_epoch_nanos+0x18>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	b123      	cbz	r3, 8015a00 <rmw_uros_epoch_nanos+0x10>
 80159f6:	6898      	ldr	r0, [r3, #8]
 80159f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159fc:	f7f8 ba3e 	b.w	800de7c <uxr_epoch_nanos>
 8015a00:	2000      	movs	r0, #0
 8015a02:	2100      	movs	r1, #0
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop
 8015a08:	2000ebb8 	.word	0x2000ebb8

08015a0c <rosidl_runtime_c__int32__Sequence__init>:
 8015a0c:	b1b0      	cbz	r0, 8015a3c <rosidl_runtime_c__int32__Sequence__init+0x30>
 8015a0e:	b530      	push	{r4, r5, lr}
 8015a10:	460d      	mov	r5, r1
 8015a12:	b087      	sub	sp, #28
 8015a14:	4604      	mov	r4, r0
 8015a16:	b931      	cbnz	r1, 8015a26 <rosidl_runtime_c__int32__Sequence__init+0x1a>
 8015a18:	4608      	mov	r0, r1
 8015a1a:	e9c4 0500 	strd	r0, r5, [r4]
 8015a1e:	60a5      	str	r5, [r4, #8]
 8015a20:	2001      	movs	r0, #1
 8015a22:	b007      	add	sp, #28
 8015a24:	bd30      	pop	{r4, r5, pc}
 8015a26:	a801      	add	r0, sp, #4
 8015a28:	f7f5 faf2 	bl	800b010 <rcutils_get_default_allocator>
 8015a2c:	9b01      	ldr	r3, [sp, #4]
 8015a2e:	9905      	ldr	r1, [sp, #20]
 8015a30:	00a8      	lsls	r0, r5, #2
 8015a32:	4798      	blx	r3
 8015a34:	2800      	cmp	r0, #0
 8015a36:	d1f0      	bne.n	8015a1a <rosidl_runtime_c__int32__Sequence__init+0xe>
 8015a38:	2000      	movs	r0, #0
 8015a3a:	e7f2      	b.n	8015a22 <rosidl_runtime_c__int32__Sequence__init+0x16>
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	4770      	bx	lr

08015a40 <rosidl_runtime_c__int32__Sequence__fini>:
 8015a40:	b188      	cbz	r0, 8015a66 <rosidl_runtime_c__int32__Sequence__fini+0x26>
 8015a42:	b510      	push	{r4, lr}
 8015a44:	6803      	ldr	r3, [r0, #0]
 8015a46:	b086      	sub	sp, #24
 8015a48:	4604      	mov	r4, r0
 8015a4a:	b153      	cbz	r3, 8015a62 <rosidl_runtime_c__int32__Sequence__fini+0x22>
 8015a4c:	a801      	add	r0, sp, #4
 8015a4e:	f7f5 fadf 	bl	800b010 <rcutils_get_default_allocator>
 8015a52:	9b02      	ldr	r3, [sp, #8]
 8015a54:	9905      	ldr	r1, [sp, #20]
 8015a56:	6820      	ldr	r0, [r4, #0]
 8015a58:	4798      	blx	r3
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	e9c4 3300 	strd	r3, r3, [r4]
 8015a60:	60a3      	str	r3, [r4, #8]
 8015a62:	b006      	add	sp, #24
 8015a64:	bd10      	pop	{r4, pc}
 8015a66:	4770      	bx	lr

08015a68 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a6c:	6805      	ldr	r5, [r0, #0]
 8015a6e:	4604      	mov	r4, r0
 8015a70:	4628      	mov	r0, r5
 8015a72:	460e      	mov	r6, r1
 8015a74:	f7ea fbcc 	bl	8000210 <strcmp>
 8015a78:	b308      	cbz	r0, 8015abe <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8015a7a:	4b12      	ldr	r3, [pc, #72]	@ (8015ac4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	6819      	ldr	r1, [r3, #0]
 8015a80:	f7ea fbc6 	bl	8000210 <strcmp>
 8015a84:	4605      	mov	r5, r0
 8015a86:	b980      	cbnz	r0, 8015aaa <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8015a88:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8015a90:	b1ac      	cbz	r4, 8015abe <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8015a92:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015a96:	3f04      	subs	r7, #4
 8015a98:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8015a9c:	4631      	mov	r1, r6
 8015a9e:	f7ea fbb7 	bl	8000210 <strcmp>
 8015aa2:	b128      	cbz	r0, 8015ab0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8015aa4:	3501      	adds	r5, #1
 8015aa6:	42a5      	cmp	r5, r4
 8015aa8:	d1f6      	bne.n	8015a98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 8015aaa:	2000      	movs	r0, #0
 8015aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015ab4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015abc:	4718      	bx	r3
 8015abe:	4620      	mov	r0, r4
 8015ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac4:	200001fc 	.word	0x200001fc

08015ac8 <std_msgs__msg__Int32MultiArray__get_type_hash>:
 8015ac8:	4800      	ldr	r0, [pc, #0]	@ (8015acc <std_msgs__msg__Int32MultiArray__get_type_hash+0x4>)
 8015aca:	4770      	bx	lr
 8015acc:	20000204 	.word	0x20000204

08015ad0 <std_msgs__msg__Int32MultiArray__get_type_description>:
 8015ad0:	b570      	push	{r4, r5, r6, lr}
 8015ad2:	4e0c      	ldr	r6, [pc, #48]	@ (8015b04 <std_msgs__msg__Int32MultiArray__get_type_description+0x34>)
 8015ad4:	7835      	ldrb	r5, [r6, #0]
 8015ad6:	b10d      	cbz	r5, 8015adc <std_msgs__msg__Int32MultiArray__get_type_description+0xc>
 8015ad8:	480b      	ldr	r0, [pc, #44]	@ (8015b08 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 8015ada:	bd70      	pop	{r4, r5, r6, pc}
 8015adc:	4628      	mov	r0, r5
 8015ade:	f000 f853 	bl	8015b88 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8015ae2:	300c      	adds	r0, #12
 8015ae4:	c807      	ldmia	r0, {r0, r1, r2}
 8015ae6:	4c09      	ldr	r4, [pc, #36]	@ (8015b0c <std_msgs__msg__Int32MultiArray__get_type_description+0x3c>)
 8015ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015aec:	4628      	mov	r0, r5
 8015aee:	f000 f8f9 	bl	8015ce4 <std_msgs__msg__MultiArrayLayout__get_type_description>
 8015af2:	300c      	adds	r0, #12
 8015af4:	c807      	ldmia	r0, {r0, r1, r2}
 8015af6:	3418      	adds	r4, #24
 8015af8:	2301      	movs	r3, #1
 8015afa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015afe:	7033      	strb	r3, [r6, #0]
 8015b00:	4801      	ldr	r0, [pc, #4]	@ (8015b08 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 8015b02:	bd70      	pop	{r4, r5, r6, pc}
 8015b04:	2000ed31 	.word	0x2000ed31
 8015b08:	0801a508 	.word	0x0801a508
 8015b0c:	20000404 	.word	0x20000404

08015b10 <std_msgs__msg__Int32MultiArray__get_type_description_sources>:
 8015b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b12:	4e17      	ldr	r6, [pc, #92]	@ (8015b70 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x60>)
 8015b14:	7837      	ldrb	r7, [r6, #0]
 8015b16:	b10f      	cbz	r7, 8015b1c <std_msgs__msg__Int32MultiArray__get_type_description_sources+0xc>
 8015b18:	4816      	ldr	r0, [pc, #88]	@ (8015b74 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 8015b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b1c:	4d16      	ldr	r5, [pc, #88]	@ (8015b78 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x68>)
 8015b1e:	4c17      	ldr	r4, [pc, #92]	@ (8015b7c <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x6c>)
 8015b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015b28:	682b      	ldr	r3, [r5, #0]
 8015b2a:	4625      	mov	r5, r4
 8015b2c:	4638      	mov	r0, r7
 8015b2e:	f845 3b04 	str.w	r3, [r5], #4
 8015b32:	f000 f835 	bl	8015ba0 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8015b36:	4684      	mov	ip, r0
 8015b38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015b3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015b44:	4638      	mov	r0, r7
 8015b46:	f8dc 3000 	ldr.w	r3, [ip]
 8015b4a:	602b      	str	r3, [r5, #0]
 8015b4c:	f000 f8e2 	bl	8015d14 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 8015b50:	2301      	movs	r3, #1
 8015b52:	4684      	mov	ip, r0
 8015b54:	7033      	strb	r3, [r6, #0]
 8015b56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b5a:	3428      	adds	r4, #40	@ 0x28
 8015b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015b5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015b64:	f8dc 3000 	ldr.w	r3, [ip]
 8015b68:	4802      	ldr	r0, [pc, #8]	@ (8015b74 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 8015b6a:	6023      	str	r3, [r4, #0]
 8015b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	2000ed30 	.word	0x2000ed30
 8015b74:	0801a4d8 	.word	0x0801a4d8
 8015b78:	0801a4e4 	.word	0x0801a4e4
 8015b7c:	2000ecc4 	.word	0x2000ecc4

08015b80 <std_msgs__msg__MultiArrayDimension__get_type_hash>:
 8015b80:	4800      	ldr	r0, [pc, #0]	@ (8015b84 <std_msgs__msg__MultiArrayDimension__get_type_hash+0x4>)
 8015b82:	4770      	bx	lr
 8015b84:	2000052c 	.word	0x2000052c

08015b88 <std_msgs__msg__MultiArrayDimension__get_type_description>:
 8015b88:	4b03      	ldr	r3, [pc, #12]	@ (8015b98 <std_msgs__msg__MultiArrayDimension__get_type_description+0x10>)
 8015b8a:	781a      	ldrb	r2, [r3, #0]
 8015b8c:	b90a      	cbnz	r2, 8015b92 <std_msgs__msg__MultiArrayDimension__get_type_description+0xa>
 8015b8e:	2201      	movs	r2, #1
 8015b90:	701a      	strb	r2, [r3, #0]
 8015b92:	4802      	ldr	r0, [pc, #8]	@ (8015b9c <std_msgs__msg__MultiArrayDimension__get_type_description+0x14>)
 8015b94:	4770      	bx	lr
 8015b96:	bf00      	nop
 8015b98:	2000ed59 	.word	0x2000ed59
 8015b9c:	0801a55c 	.word	0x0801a55c

08015ba0 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>:
 8015ba0:	4800      	ldr	r0, [pc, #0]	@ (8015ba4 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 8015ba2:	4770      	bx	lr
 8015ba4:	0801a538 	.word	0x0801a538

08015ba8 <std_msgs__msg__MultiArrayDimension__get_type_description_sources>:
 8015ba8:	4b09      	ldr	r3, [pc, #36]	@ (8015bd0 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 8015baa:	781a      	ldrb	r2, [r3, #0]
 8015bac:	b96a      	cbnz	r2, 8015bca <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x22>
 8015bae:	b430      	push	{r4, r5}
 8015bb0:	4d08      	ldr	r5, [pc, #32]	@ (8015bd4 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 8015bb2:	4c09      	ldr	r4, [pc, #36]	@ (8015bd8 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	701a      	strb	r2, [r3, #0]
 8015bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bc0:	682b      	ldr	r3, [r5, #0]
 8015bc2:	4806      	ldr	r0, [pc, #24]	@ (8015bdc <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8015bc4:	6023      	str	r3, [r4, #0]
 8015bc6:	bc30      	pop	{r4, r5}
 8015bc8:	4770      	bx	lr
 8015bca:	4804      	ldr	r0, [pc, #16]	@ (8015bdc <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8015bcc:	4770      	bx	lr
 8015bce:	bf00      	nop
 8015bd0:	2000ed58 	.word	0x2000ed58
 8015bd4:	0801a538 	.word	0x0801a538
 8015bd8:	2000ed34 	.word	0x2000ed34
 8015bdc:	0801a52c 	.word	0x0801a52c

08015be0 <std_msgs__msg__MultiArrayDimension__init>:
 8015be0:	b150      	cbz	r0, 8015bf8 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8015be2:	b510      	push	{r4, lr}
 8015be4:	4604      	mov	r4, r0
 8015be6:	f002 f899 	bl	8017d1c <rosidl_runtime_c__String__init>
 8015bea:	b100      	cbz	r0, 8015bee <std_msgs__msg__MultiArrayDimension__init+0xe>
 8015bec:	bd10      	pop	{r4, pc}
 8015bee:	4620      	mov	r0, r4
 8015bf0:	f002 f8ae 	bl	8017d50 <rosidl_runtime_c__String__fini>
 8015bf4:	2000      	movs	r0, #0
 8015bf6:	bd10      	pop	{r4, pc}
 8015bf8:	2000      	movs	r0, #0
 8015bfa:	4770      	bx	lr

08015bfc <std_msgs__msg__MultiArrayDimension__fini>:
 8015bfc:	b108      	cbz	r0, 8015c02 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8015bfe:	f002 b8a7 	b.w	8017d50 <rosidl_runtime_c__String__fini>
 8015c02:	4770      	bx	lr

08015c04 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8015c04:	2800      	cmp	r0, #0
 8015c06:	d03f      	beq.n	8015c88 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x84>
 8015c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c0c:	b087      	sub	sp, #28
 8015c0e:	460d      	mov	r5, r1
 8015c10:	4681      	mov	r9, r0
 8015c12:	a801      	add	r0, sp, #4
 8015c14:	f7f5 f9fc 	bl	800b010 <rcutils_get_default_allocator>
 8015c18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015c1c:	b35d      	cbz	r5, 8015c76 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x72>
 8015c1e:	9b04      	ldr	r3, [sp, #16]
 8015c20:	4642      	mov	r2, r8
 8015c22:	2114      	movs	r1, #20
 8015c24:	4628      	mov	r0, r5
 8015c26:	4798      	blx	r3
 8015c28:	4607      	mov	r7, r0
 8015c2a:	b310      	cbz	r0, 8015c72 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6e>
 8015c2c:	4606      	mov	r6, r0
 8015c2e:	2400      	movs	r4, #0
 8015c30:	e004      	b.n	8015c3c <std_msgs__msg__MultiArrayDimension__Sequence__init+0x38>
 8015c32:	3401      	adds	r4, #1
 8015c34:	42a5      	cmp	r5, r4
 8015c36:	f106 0614 	add.w	r6, r6, #20
 8015c3a:	d01d      	beq.n	8015c78 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8015c3c:	4630      	mov	r0, r6
 8015c3e:	f002 f86d 	bl	8017d1c <rosidl_runtime_c__String__init>
 8015c42:	2800      	cmp	r0, #0
 8015c44:	d1f5      	bne.n	8015c32 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x2e>
 8015c46:	4630      	mov	r0, r6
 8015c48:	f002 f882 	bl	8017d50 <rosidl_runtime_c__String__fini>
 8015c4c:	42a5      	cmp	r5, r4
 8015c4e:	d913      	bls.n	8015c78 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8015c50:	b15c      	cbz	r4, 8015c6a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x66>
 8015c52:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015c56:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8015c5a:	3c14      	subs	r4, #20
 8015c5c:	4620      	mov	r0, r4
 8015c5e:	f002 f877 	bl	8017d50 <rosidl_runtime_c__String__fini>
 8015c62:	42bc      	cmp	r4, r7
 8015c64:	f1a4 0414 	sub.w	r4, r4, #20
 8015c68:	d1f8      	bne.n	8015c5c <std_msgs__msg__MultiArrayDimension__Sequence__init+0x58>
 8015c6a:	9b02      	ldr	r3, [sp, #8]
 8015c6c:	4641      	mov	r1, r8
 8015c6e:	4638      	mov	r0, r7
 8015c70:	4798      	blx	r3
 8015c72:	2000      	movs	r0, #0
 8015c74:	e005      	b.n	8015c82 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x7e>
 8015c76:	462f      	mov	r7, r5
 8015c78:	e9c9 7500 	strd	r7, r5, [r9]
 8015c7c:	f8c9 5008 	str.w	r5, [r9, #8]
 8015c80:	2001      	movs	r0, #1
 8015c82:	b007      	add	sp, #28
 8015c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c88:	2000      	movs	r0, #0
 8015c8a:	4770      	bx	lr

08015c8c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8015c8c:	b320      	cbz	r0, 8015cd8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8015c8e:	b530      	push	{r4, r5, lr}
 8015c90:	4605      	mov	r5, r0
 8015c92:	b087      	sub	sp, #28
 8015c94:	a801      	add	r0, sp, #4
 8015c96:	f7f5 f9bb 	bl	800b010 <rcutils_get_default_allocator>
 8015c9a:	682a      	ldr	r2, [r5, #0]
 8015c9c:	b1b2      	cbz	r2, 8015ccc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8015c9e:	68a9      	ldr	r1, [r5, #8]
 8015ca0:	b161      	cbz	r1, 8015cbc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8015ca2:	2400      	movs	r4, #0
 8015ca4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8015ca8:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8015cac:	d010      	beq.n	8015cd0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8015cae:	f002 f84f 	bl	8017d50 <rosidl_runtime_c__String__fini>
 8015cb2:	68a9      	ldr	r1, [r5, #8]
 8015cb4:	682a      	ldr	r2, [r5, #0]
 8015cb6:	3401      	adds	r4, #1
 8015cb8:	428c      	cmp	r4, r1
 8015cba:	d3f3      	bcc.n	8015ca4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8015cbc:	9b02      	ldr	r3, [sp, #8]
 8015cbe:	9905      	ldr	r1, [sp, #20]
 8015cc0:	4610      	mov	r0, r2
 8015cc2:	4798      	blx	r3
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	e9c5 3300 	strd	r3, r3, [r5]
 8015cca:	60ab      	str	r3, [r5, #8]
 8015ccc:	b007      	add	sp, #28
 8015cce:	bd30      	pop	{r4, r5, pc}
 8015cd0:	3401      	adds	r4, #1
 8015cd2:	428c      	cmp	r4, r1
 8015cd4:	d3e6      	bcc.n	8015ca4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8015cd6:	e7f1      	b.n	8015cbc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop

08015cdc <std_msgs__msg__MultiArrayLayout__get_type_hash>:
 8015cdc:	4800      	ldr	r0, [pc, #0]	@ (8015ce0 <std_msgs__msg__MultiArrayLayout__get_type_hash+0x4>)
 8015cde:	4770      	bx	lr
 8015ce0:	200007f4 	.word	0x200007f4

08015ce4 <std_msgs__msg__MultiArrayLayout__get_type_description>:
 8015ce4:	b510      	push	{r4, lr}
 8015ce6:	4c08      	ldr	r4, [pc, #32]	@ (8015d08 <std_msgs__msg__MultiArrayLayout__get_type_description+0x24>)
 8015ce8:	7820      	ldrb	r0, [r4, #0]
 8015cea:	b108      	cbz	r0, 8015cf0 <std_msgs__msg__MultiArrayLayout__get_type_description+0xc>
 8015cec:	4807      	ldr	r0, [pc, #28]	@ (8015d0c <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8015cee:	bd10      	pop	{r4, pc}
 8015cf0:	f7ff ff4a 	bl	8015b88 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8015cf4:	300c      	adds	r0, #12
 8015cf6:	c807      	ldmia	r0, {r0, r1, r2}
 8015cf8:	4b05      	ldr	r3, [pc, #20]	@ (8015d10 <std_msgs__msg__MultiArrayLayout__get_type_description+0x2c>)
 8015cfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015cfe:	2301      	movs	r3, #1
 8015d00:	4802      	ldr	r0, [pc, #8]	@ (8015d0c <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8015d02:	7023      	strb	r3, [r4, #0]
 8015d04:	bd10      	pop	{r4, pc}
 8015d06:	bf00      	nop
 8015d08:	2000eda5 	.word	0x2000eda5
 8015d0c:	0801a5b0 	.word	0x0801a5b0
 8015d10:	20000cb0 	.word	0x20000cb0

08015d14 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>:
 8015d14:	4800      	ldr	r0, [pc, #0]	@ (8015d18 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 8015d16:	4770      	bx	lr
 8015d18:	0801a58c 	.word	0x0801a58c

08015d1c <std_msgs__msg__MultiArrayLayout__get_type_description_sources>:
 8015d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8015d5c <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 8015d20:	7837      	ldrb	r7, [r6, #0]
 8015d22:	b10f      	cbz	r7, 8015d28 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0xc>
 8015d24:	480e      	ldr	r0, [pc, #56]	@ (8015d60 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8015d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d28:	4d0e      	ldr	r5, [pc, #56]	@ (8015d64 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 8015d2a:	4c0f      	ldr	r4, [pc, #60]	@ (8015d68 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 8015d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d34:	682b      	ldr	r3, [r5, #0]
 8015d36:	f844 3b04 	str.w	r3, [r4], #4
 8015d3a:	4638      	mov	r0, r7
 8015d3c:	f7ff ff30 	bl	8015ba0 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8015d40:	2301      	movs	r3, #1
 8015d42:	4684      	mov	ip, r0
 8015d44:	7033      	strb	r3, [r6, #0]
 8015d46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d52:	f8dc 3000 	ldr.w	r3, [ip]
 8015d56:	4802      	ldr	r0, [pc, #8]	@ (8015d60 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d5c:	2000eda4 	.word	0x2000eda4
 8015d60:	0801a580 	.word	0x0801a580
 8015d64:	0801a58c 	.word	0x0801a58c
 8015d68:	2000ed5c 	.word	0x2000ed5c

08015d6c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8015d6c:	f7ff bf38 	b.w	8015be0 <std_msgs__msg__MultiArrayDimension__init>

08015d70 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8015d70:	f7ff bf44 	b.w	8015bfc <std_msgs__msg__MultiArrayDimension__fini>

08015d74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8015d74:	4b04      	ldr	r3, [pc, #16]	@ (8015d88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8015d76:	681a      	ldr	r2, [r3, #0]
 8015d78:	b10a      	cbz	r2, 8015d7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8015d7a:	4803      	ldr	r0, [pc, #12]	@ (8015d88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8015d7c:	4770      	bx	lr
 8015d7e:	4a03      	ldr	r2, [pc, #12]	@ (8015d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8015d80:	4801      	ldr	r0, [pc, #4]	@ (8015d88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8015d82:	6812      	ldr	r2, [r2, #0]
 8015d84:	601a      	str	r2, [r3, #0]
 8015d86:	4770      	bx	lr
 8015d88:	20000da4 	.word	0x20000da4
 8015d8c:	20000200 	.word	0x20000200

08015d90 <_MultiArrayDimension__cdr_serialize>:
 8015d90:	b1d0      	cbz	r0, 8015dc8 <_MultiArrayDimension__cdr_serialize+0x38>
 8015d92:	b570      	push	{r4, r5, r6, lr}
 8015d94:	6806      	ldr	r6, [r0, #0]
 8015d96:	460d      	mov	r5, r1
 8015d98:	4604      	mov	r4, r0
 8015d9a:	b196      	cbz	r6, 8015dc2 <_MultiArrayDimension__cdr_serialize+0x32>
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	f7ea fa97 	bl	80002d0 <strlen>
 8015da2:	1c42      	adds	r2, r0, #1
 8015da4:	6060      	str	r0, [r4, #4]
 8015da6:	4631      	mov	r1, r6
 8015da8:	4628      	mov	r0, r5
 8015daa:	f7f7 fb17 	bl	800d3dc <ucdr_serialize_sequence_char>
 8015dae:	68e1      	ldr	r1, [r4, #12]
 8015db0:	4628      	mov	r0, r5
 8015db2:	f7f6 fbf9 	bl	800c5a8 <ucdr_serialize_uint32_t>
 8015db6:	6921      	ldr	r1, [r4, #16]
 8015db8:	4628      	mov	r0, r5
 8015dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dbe:	f7f6 bbf3 	b.w	800c5a8 <ucdr_serialize_uint32_t>
 8015dc2:	4632      	mov	r2, r6
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	e7ed      	b.n	8015da4 <_MultiArrayDimension__cdr_serialize+0x14>
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop

08015dcc <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8015dcc:	b570      	push	{r4, r5, r6, lr}
 8015dce:	4604      	mov	r4, r0
 8015dd0:	b1b0      	cbz	r0, 8015e00 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8015dd2:	460d      	mov	r5, r1
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	2104      	movs	r1, #4
 8015dd8:	f7f7 fa94 	bl	800d304 <ucdr_alignment>
 8015ddc:	6863      	ldr	r3, [r4, #4]
 8015dde:	1d6e      	adds	r6, r5, #5
 8015de0:	441e      	add	r6, r3
 8015de2:	4406      	add	r6, r0
 8015de4:	2104      	movs	r1, #4
 8015de6:	4630      	mov	r0, r6
 8015de8:	f7f7 fa8c 	bl	800d304 <ucdr_alignment>
 8015dec:	1d04      	adds	r4, r0, #4
 8015dee:	4434      	add	r4, r6
 8015df0:	2104      	movs	r1, #4
 8015df2:	4620      	mov	r0, r4
 8015df4:	f7f7 fa86 	bl	800d304 <ucdr_alignment>
 8015df8:	f1c5 0504 	rsb	r5, r5, #4
 8015dfc:	4405      	add	r5, r0
 8015dfe:	1928      	adds	r0, r5, r4
 8015e00:	bd70      	pop	{r4, r5, r6, pc}
 8015e02:	bf00      	nop

08015e04 <_MultiArrayDimension__cdr_deserialize>:
 8015e04:	b570      	push	{r4, r5, r6, lr}
 8015e06:	460c      	mov	r4, r1
 8015e08:	b082      	sub	sp, #8
 8015e0a:	b1d9      	cbz	r1, 8015e44 <_MultiArrayDimension__cdr_deserialize+0x40>
 8015e0c:	688e      	ldr	r6, [r1, #8]
 8015e0e:	6809      	ldr	r1, [r1, #0]
 8015e10:	ab01      	add	r3, sp, #4
 8015e12:	4632      	mov	r2, r6
 8015e14:	4605      	mov	r5, r0
 8015e16:	f7f7 faf3 	bl	800d400 <ucdr_deserialize_sequence_char>
 8015e1a:	9b01      	ldr	r3, [sp, #4]
 8015e1c:	b970      	cbnz	r0, 8015e3c <_MultiArrayDimension__cdr_deserialize+0x38>
 8015e1e:	429e      	cmp	r6, r3
 8015e20:	d313      	bcc.n	8015e4a <_MultiArrayDimension__cdr_deserialize+0x46>
 8015e22:	f104 010c 	add.w	r1, r4, #12
 8015e26:	4628      	mov	r0, r5
 8015e28:	f7f6 fce8 	bl	800c7fc <ucdr_deserialize_uint32_t>
 8015e2c:	f104 0110 	add.w	r1, r4, #16
 8015e30:	4628      	mov	r0, r5
 8015e32:	b002      	add	sp, #8
 8015e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e38:	f7f6 bce0 	b.w	800c7fc <ucdr_deserialize_uint32_t>
 8015e3c:	b103      	cbz	r3, 8015e40 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8015e3e:	3b01      	subs	r3, #1
 8015e40:	6063      	str	r3, [r4, #4]
 8015e42:	e7ee      	b.n	8015e22 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8015e44:	4608      	mov	r0, r1
 8015e46:	b002      	add	sp, #8
 8015e48:	bd70      	pop	{r4, r5, r6, pc}
 8015e4a:	2101      	movs	r1, #1
 8015e4c:	75a8      	strb	r0, [r5, #22]
 8015e4e:	7569      	strb	r1, [r5, #21]
 8015e50:	6060      	str	r0, [r4, #4]
 8015e52:	4628      	mov	r0, r5
 8015e54:	f7f7 fa6c 	bl	800d330 <ucdr_align_to>
 8015e58:	9901      	ldr	r1, [sp, #4]
 8015e5a:	4628      	mov	r0, r5
 8015e5c:	f7f7 fa9e 	bl	800d39c <ucdr_advance_buffer>
 8015e60:	e7df      	b.n	8015e22 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8015e62:	bf00      	nop

08015e64 <_MultiArrayDimension__max_serialized_size>:
 8015e64:	b510      	push	{r4, lr}
 8015e66:	2104      	movs	r1, #4
 8015e68:	2000      	movs	r0, #0
 8015e6a:	f7f7 fa4b 	bl	800d304 <ucdr_alignment>
 8015e6e:	1d04      	adds	r4, r0, #4
 8015e70:	2104      	movs	r1, #4
 8015e72:	4620      	mov	r0, r4
 8015e74:	f7f7 fa46 	bl	800d304 <ucdr_alignment>
 8015e78:	3004      	adds	r0, #4
 8015e7a:	4420      	add	r0, r4
 8015e7c:	bd10      	pop	{r4, pc}
 8015e7e:	bf00      	nop

08015e80 <_MultiArrayDimension__get_serialized_size>:
 8015e80:	b538      	push	{r3, r4, r5, lr}
 8015e82:	4604      	mov	r4, r0
 8015e84:	b190      	cbz	r0, 8015eac <_MultiArrayDimension__get_serialized_size+0x2c>
 8015e86:	2104      	movs	r1, #4
 8015e88:	2000      	movs	r0, #0
 8015e8a:	f7f7 fa3b 	bl	800d304 <ucdr_alignment>
 8015e8e:	6865      	ldr	r5, [r4, #4]
 8015e90:	3505      	adds	r5, #5
 8015e92:	4405      	add	r5, r0
 8015e94:	2104      	movs	r1, #4
 8015e96:	4628      	mov	r0, r5
 8015e98:	f7f7 fa34 	bl	800d304 <ucdr_alignment>
 8015e9c:	1d04      	adds	r4, r0, #4
 8015e9e:	442c      	add	r4, r5
 8015ea0:	2104      	movs	r1, #4
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	f7f7 fa2e 	bl	800d304 <ucdr_alignment>
 8015ea8:	3004      	adds	r0, #4
 8015eaa:	4420      	add	r0, r4
 8015eac:	bd38      	pop	{r3, r4, r5, pc}
 8015eae:	bf00      	nop

08015eb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8015eb0:	4800      	ldr	r0, [pc, #0]	@ (8015eb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8015eb2:	4770      	bx	lr
 8015eb4:	20000e70 	.word	0x20000e70

08015eb8 <ucdr_serialize_endian_array_char>:
 8015eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	461f      	mov	r7, r3
 8015ec0:	4605      	mov	r5, r0
 8015ec2:	4690      	mov	r8, r2
 8015ec4:	f7f7 f9c6 	bl	800d254 <ucdr_check_buffer_available_for>
 8015ec8:	b9e0      	cbnz	r0, 8015f04 <ucdr_serialize_endian_array_char+0x4c>
 8015eca:	463e      	mov	r6, r7
 8015ecc:	e009      	b.n	8015ee2 <ucdr_serialize_endian_array_char+0x2a>
 8015ece:	68a8      	ldr	r0, [r5, #8]
 8015ed0:	f002 fd3f 	bl	8018952 <memcpy>
 8015ed4:	68ab      	ldr	r3, [r5, #8]
 8015ed6:	6928      	ldr	r0, [r5, #16]
 8015ed8:	4423      	add	r3, r4
 8015eda:	4420      	add	r0, r4
 8015edc:	1b36      	subs	r6, r6, r4
 8015ede:	60ab      	str	r3, [r5, #8]
 8015ee0:	6128      	str	r0, [r5, #16]
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	4631      	mov	r1, r6
 8015ee6:	4628      	mov	r0, r5
 8015ee8:	f7f7 fa3c 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 8015eec:	1bb9      	subs	r1, r7, r6
 8015eee:	4604      	mov	r4, r0
 8015ef0:	4602      	mov	r2, r0
 8015ef2:	4441      	add	r1, r8
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	d1ea      	bne.n	8015ece <ucdr_serialize_endian_array_char+0x16>
 8015ef8:	2301      	movs	r3, #1
 8015efa:	7da8      	ldrb	r0, [r5, #22]
 8015efc:	756b      	strb	r3, [r5, #21]
 8015efe:	4058      	eors	r0, r3
 8015f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f04:	463a      	mov	r2, r7
 8015f06:	68a8      	ldr	r0, [r5, #8]
 8015f08:	4641      	mov	r1, r8
 8015f0a:	f002 fd22 	bl	8018952 <memcpy>
 8015f0e:	68aa      	ldr	r2, [r5, #8]
 8015f10:	692b      	ldr	r3, [r5, #16]
 8015f12:	443a      	add	r2, r7
 8015f14:	443b      	add	r3, r7
 8015f16:	60aa      	str	r2, [r5, #8]
 8015f18:	612b      	str	r3, [r5, #16]
 8015f1a:	e7ed      	b.n	8015ef8 <ucdr_serialize_endian_array_char+0x40>

08015f1c <ucdr_deserialize_endian_array_char>:
 8015f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f20:	4619      	mov	r1, r3
 8015f22:	461f      	mov	r7, r3
 8015f24:	4605      	mov	r5, r0
 8015f26:	4690      	mov	r8, r2
 8015f28:	f7f7 f994 	bl	800d254 <ucdr_check_buffer_available_for>
 8015f2c:	b9e0      	cbnz	r0, 8015f68 <ucdr_deserialize_endian_array_char+0x4c>
 8015f2e:	463e      	mov	r6, r7
 8015f30:	e009      	b.n	8015f46 <ucdr_deserialize_endian_array_char+0x2a>
 8015f32:	68a9      	ldr	r1, [r5, #8]
 8015f34:	f002 fd0d 	bl	8018952 <memcpy>
 8015f38:	68aa      	ldr	r2, [r5, #8]
 8015f3a:	692b      	ldr	r3, [r5, #16]
 8015f3c:	4422      	add	r2, r4
 8015f3e:	4423      	add	r3, r4
 8015f40:	1b36      	subs	r6, r6, r4
 8015f42:	60aa      	str	r2, [r5, #8]
 8015f44:	612b      	str	r3, [r5, #16]
 8015f46:	2201      	movs	r2, #1
 8015f48:	4631      	mov	r1, r6
 8015f4a:	4628      	mov	r0, r5
 8015f4c:	f7f7 fa0a 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 8015f50:	4604      	mov	r4, r0
 8015f52:	1bb8      	subs	r0, r7, r6
 8015f54:	4622      	mov	r2, r4
 8015f56:	4440      	add	r0, r8
 8015f58:	2c00      	cmp	r4, #0
 8015f5a:	d1ea      	bne.n	8015f32 <ucdr_deserialize_endian_array_char+0x16>
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	7da8      	ldrb	r0, [r5, #22]
 8015f60:	756b      	strb	r3, [r5, #21]
 8015f62:	4058      	eors	r0, r3
 8015f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f68:	463a      	mov	r2, r7
 8015f6a:	68a9      	ldr	r1, [r5, #8]
 8015f6c:	4640      	mov	r0, r8
 8015f6e:	f002 fcf0 	bl	8018952 <memcpy>
 8015f72:	68aa      	ldr	r2, [r5, #8]
 8015f74:	692b      	ldr	r3, [r5, #16]
 8015f76:	443a      	add	r2, r7
 8015f78:	443b      	add	r3, r7
 8015f7a:	60aa      	str	r2, [r5, #8]
 8015f7c:	612b      	str	r3, [r5, #16]
 8015f7e:	e7ed      	b.n	8015f5c <ucdr_deserialize_endian_array_char+0x40>

08015f80 <ucdr_serialize_array_uint8_t>:
 8015f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f84:	4688      	mov	r8, r1
 8015f86:	4611      	mov	r1, r2
 8015f88:	4617      	mov	r7, r2
 8015f8a:	4605      	mov	r5, r0
 8015f8c:	f7f7 f962 	bl	800d254 <ucdr_check_buffer_available_for>
 8015f90:	b9e0      	cbnz	r0, 8015fcc <ucdr_serialize_array_uint8_t+0x4c>
 8015f92:	463e      	mov	r6, r7
 8015f94:	e009      	b.n	8015faa <ucdr_serialize_array_uint8_t+0x2a>
 8015f96:	68a8      	ldr	r0, [r5, #8]
 8015f98:	f002 fcdb 	bl	8018952 <memcpy>
 8015f9c:	68aa      	ldr	r2, [r5, #8]
 8015f9e:	692b      	ldr	r3, [r5, #16]
 8015fa0:	4422      	add	r2, r4
 8015fa2:	4423      	add	r3, r4
 8015fa4:	1b36      	subs	r6, r6, r4
 8015fa6:	60aa      	str	r2, [r5, #8]
 8015fa8:	612b      	str	r3, [r5, #16]
 8015faa:	2201      	movs	r2, #1
 8015fac:	4631      	mov	r1, r6
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f7f7 f9d8 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 8015fb4:	1bb9      	subs	r1, r7, r6
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	4602      	mov	r2, r0
 8015fba:	4441      	add	r1, r8
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	d1ea      	bne.n	8015f96 <ucdr_serialize_array_uint8_t+0x16>
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	7da8      	ldrb	r0, [r5, #22]
 8015fc4:	756b      	strb	r3, [r5, #21]
 8015fc6:	4058      	eors	r0, r3
 8015fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fcc:	463a      	mov	r2, r7
 8015fce:	68a8      	ldr	r0, [r5, #8]
 8015fd0:	4641      	mov	r1, r8
 8015fd2:	f002 fcbe 	bl	8018952 <memcpy>
 8015fd6:	68aa      	ldr	r2, [r5, #8]
 8015fd8:	692b      	ldr	r3, [r5, #16]
 8015fda:	443a      	add	r2, r7
 8015fdc:	443b      	add	r3, r7
 8015fde:	60aa      	str	r2, [r5, #8]
 8015fe0:	612b      	str	r3, [r5, #16]
 8015fe2:	e7ed      	b.n	8015fc0 <ucdr_serialize_array_uint8_t+0x40>

08015fe4 <ucdr_serialize_endian_array_uint8_t>:
 8015fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fe8:	4619      	mov	r1, r3
 8015fea:	461f      	mov	r7, r3
 8015fec:	4605      	mov	r5, r0
 8015fee:	4690      	mov	r8, r2
 8015ff0:	f7f7 f930 	bl	800d254 <ucdr_check_buffer_available_for>
 8015ff4:	b9e0      	cbnz	r0, 8016030 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015ff6:	463e      	mov	r6, r7
 8015ff8:	e009      	b.n	801600e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015ffa:	68a8      	ldr	r0, [r5, #8]
 8015ffc:	f002 fca9 	bl	8018952 <memcpy>
 8016000:	68ab      	ldr	r3, [r5, #8]
 8016002:	6928      	ldr	r0, [r5, #16]
 8016004:	4423      	add	r3, r4
 8016006:	4420      	add	r0, r4
 8016008:	1b36      	subs	r6, r6, r4
 801600a:	60ab      	str	r3, [r5, #8]
 801600c:	6128      	str	r0, [r5, #16]
 801600e:	2201      	movs	r2, #1
 8016010:	4631      	mov	r1, r6
 8016012:	4628      	mov	r0, r5
 8016014:	f7f7 f9a6 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 8016018:	1bb9      	subs	r1, r7, r6
 801601a:	4604      	mov	r4, r0
 801601c:	4602      	mov	r2, r0
 801601e:	4441      	add	r1, r8
 8016020:	2800      	cmp	r0, #0
 8016022:	d1ea      	bne.n	8015ffa <ucdr_serialize_endian_array_uint8_t+0x16>
 8016024:	2301      	movs	r3, #1
 8016026:	7da8      	ldrb	r0, [r5, #22]
 8016028:	756b      	strb	r3, [r5, #21]
 801602a:	4058      	eors	r0, r3
 801602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016030:	463a      	mov	r2, r7
 8016032:	68a8      	ldr	r0, [r5, #8]
 8016034:	4641      	mov	r1, r8
 8016036:	f002 fc8c 	bl	8018952 <memcpy>
 801603a:	68aa      	ldr	r2, [r5, #8]
 801603c:	692b      	ldr	r3, [r5, #16]
 801603e:	443a      	add	r2, r7
 8016040:	443b      	add	r3, r7
 8016042:	60aa      	str	r2, [r5, #8]
 8016044:	612b      	str	r3, [r5, #16]
 8016046:	e7ed      	b.n	8016024 <ucdr_serialize_endian_array_uint8_t+0x40>

08016048 <ucdr_deserialize_array_uint8_t>:
 8016048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801604c:	4688      	mov	r8, r1
 801604e:	4611      	mov	r1, r2
 8016050:	4617      	mov	r7, r2
 8016052:	4605      	mov	r5, r0
 8016054:	f7f7 f8fe 	bl	800d254 <ucdr_check_buffer_available_for>
 8016058:	b9e0      	cbnz	r0, 8016094 <ucdr_deserialize_array_uint8_t+0x4c>
 801605a:	463e      	mov	r6, r7
 801605c:	e009      	b.n	8016072 <ucdr_deserialize_array_uint8_t+0x2a>
 801605e:	68a9      	ldr	r1, [r5, #8]
 8016060:	f002 fc77 	bl	8018952 <memcpy>
 8016064:	68aa      	ldr	r2, [r5, #8]
 8016066:	692b      	ldr	r3, [r5, #16]
 8016068:	4422      	add	r2, r4
 801606a:	4423      	add	r3, r4
 801606c:	1b36      	subs	r6, r6, r4
 801606e:	60aa      	str	r2, [r5, #8]
 8016070:	612b      	str	r3, [r5, #16]
 8016072:	2201      	movs	r2, #1
 8016074:	4631      	mov	r1, r6
 8016076:	4628      	mov	r0, r5
 8016078:	f7f7 f974 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 801607c:	4604      	mov	r4, r0
 801607e:	1bb8      	subs	r0, r7, r6
 8016080:	4622      	mov	r2, r4
 8016082:	4440      	add	r0, r8
 8016084:	2c00      	cmp	r4, #0
 8016086:	d1ea      	bne.n	801605e <ucdr_deserialize_array_uint8_t+0x16>
 8016088:	2301      	movs	r3, #1
 801608a:	7da8      	ldrb	r0, [r5, #22]
 801608c:	756b      	strb	r3, [r5, #21]
 801608e:	4058      	eors	r0, r3
 8016090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016094:	463a      	mov	r2, r7
 8016096:	68a9      	ldr	r1, [r5, #8]
 8016098:	4640      	mov	r0, r8
 801609a:	f002 fc5a 	bl	8018952 <memcpy>
 801609e:	68aa      	ldr	r2, [r5, #8]
 80160a0:	692b      	ldr	r3, [r5, #16]
 80160a2:	443a      	add	r2, r7
 80160a4:	443b      	add	r3, r7
 80160a6:	60aa      	str	r2, [r5, #8]
 80160a8:	612b      	str	r3, [r5, #16]
 80160aa:	e7ed      	b.n	8016088 <ucdr_deserialize_array_uint8_t+0x40>

080160ac <ucdr_deserialize_endian_array_uint8_t>:
 80160ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160b0:	4619      	mov	r1, r3
 80160b2:	461f      	mov	r7, r3
 80160b4:	4605      	mov	r5, r0
 80160b6:	4690      	mov	r8, r2
 80160b8:	f7f7 f8cc 	bl	800d254 <ucdr_check_buffer_available_for>
 80160bc:	b9e0      	cbnz	r0, 80160f8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80160be:	463e      	mov	r6, r7
 80160c0:	e009      	b.n	80160d6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80160c2:	68a9      	ldr	r1, [r5, #8]
 80160c4:	f002 fc45 	bl	8018952 <memcpy>
 80160c8:	68aa      	ldr	r2, [r5, #8]
 80160ca:	692b      	ldr	r3, [r5, #16]
 80160cc:	4422      	add	r2, r4
 80160ce:	4423      	add	r3, r4
 80160d0:	1b36      	subs	r6, r6, r4
 80160d2:	60aa      	str	r2, [r5, #8]
 80160d4:	612b      	str	r3, [r5, #16]
 80160d6:	2201      	movs	r2, #1
 80160d8:	4631      	mov	r1, r6
 80160da:	4628      	mov	r0, r5
 80160dc:	f7f7 f942 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 80160e0:	4604      	mov	r4, r0
 80160e2:	1bb8      	subs	r0, r7, r6
 80160e4:	4622      	mov	r2, r4
 80160e6:	4440      	add	r0, r8
 80160e8:	2c00      	cmp	r4, #0
 80160ea:	d1ea      	bne.n	80160c2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80160ec:	2301      	movs	r3, #1
 80160ee:	7da8      	ldrb	r0, [r5, #22]
 80160f0:	756b      	strb	r3, [r5, #21]
 80160f2:	4058      	eors	r0, r3
 80160f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160f8:	463a      	mov	r2, r7
 80160fa:	68a9      	ldr	r1, [r5, #8]
 80160fc:	4640      	mov	r0, r8
 80160fe:	f002 fc28 	bl	8018952 <memcpy>
 8016102:	68aa      	ldr	r2, [r5, #8]
 8016104:	692b      	ldr	r3, [r5, #16]
 8016106:	443a      	add	r2, r7
 8016108:	443b      	add	r3, r7
 801610a:	60aa      	str	r2, [r5, #8]
 801610c:	612b      	str	r3, [r5, #16]
 801610e:	e7ed      	b.n	80160ec <ucdr_deserialize_endian_array_uint8_t+0x40>

08016110 <ucdr_serialize_endian_array_int32_t>:
 8016110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016114:	4688      	mov	r8, r1
 8016116:	2104      	movs	r1, #4
 8016118:	4604      	mov	r4, r0
 801611a:	4616      	mov	r6, r2
 801611c:	461f      	mov	r7, r3
 801611e:	f7f7 f8f9 	bl	800d314 <ucdr_buffer_alignment>
 8016122:	4601      	mov	r1, r0
 8016124:	4620      	mov	r0, r4
 8016126:	7d65      	ldrb	r5, [r4, #21]
 8016128:	f7f7 f938 	bl	800d39c <ucdr_advance_buffer>
 801612c:	f1b8 0f01 	cmp.w	r8, #1
 8016130:	7565      	strb	r5, [r4, #21]
 8016132:	d010      	beq.n	8016156 <ucdr_serialize_endian_array_int32_t+0x46>
 8016134:	b157      	cbz	r7, 801614c <ucdr_serialize_endian_array_int32_t+0x3c>
 8016136:	3e04      	subs	r6, #4
 8016138:	2500      	movs	r5, #0
 801613a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 801613e:	4641      	mov	r1, r8
 8016140:	4620      	mov	r0, r4
 8016142:	3501      	adds	r5, #1
 8016144:	f7f6 fedc 	bl	800cf00 <ucdr_serialize_endian_int32_t>
 8016148:	42af      	cmp	r7, r5
 801614a:	d1f6      	bne.n	801613a <ucdr_serialize_endian_array_int32_t+0x2a>
 801614c:	7da0      	ldrb	r0, [r4, #22]
 801614e:	f080 0001 	eor.w	r0, r0, #1
 8016152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016156:	00bf      	lsls	r7, r7, #2
 8016158:	4639      	mov	r1, r7
 801615a:	4620      	mov	r0, r4
 801615c:	f7f7 f87a 	bl	800d254 <ucdr_check_buffer_available_for>
 8016160:	b9f8      	cbnz	r0, 80161a2 <ucdr_serialize_endian_array_int32_t+0x92>
 8016162:	46b8      	mov	r8, r7
 8016164:	e00a      	b.n	801617c <ucdr_serialize_endian_array_int32_t+0x6c>
 8016166:	68a0      	ldr	r0, [r4, #8]
 8016168:	f002 fbf3 	bl	8018952 <memcpy>
 801616c:	68a2      	ldr	r2, [r4, #8]
 801616e:	6923      	ldr	r3, [r4, #16]
 8016170:	442a      	add	r2, r5
 8016172:	442b      	add	r3, r5
 8016174:	eba8 0805 	sub.w	r8, r8, r5
 8016178:	60a2      	str	r2, [r4, #8]
 801617a:	6123      	str	r3, [r4, #16]
 801617c:	2204      	movs	r2, #4
 801617e:	4641      	mov	r1, r8
 8016180:	4620      	mov	r0, r4
 8016182:	f7f7 f8ef 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 8016186:	eba7 0108 	sub.w	r1, r7, r8
 801618a:	4605      	mov	r5, r0
 801618c:	4602      	mov	r2, r0
 801618e:	4431      	add	r1, r6
 8016190:	2800      	cmp	r0, #0
 8016192:	d1e8      	bne.n	8016166 <ucdr_serialize_endian_array_int32_t+0x56>
 8016194:	7da0      	ldrb	r0, [r4, #22]
 8016196:	2304      	movs	r3, #4
 8016198:	7563      	strb	r3, [r4, #21]
 801619a:	f080 0001 	eor.w	r0, r0, #1
 801619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a2:	463a      	mov	r2, r7
 80161a4:	68a0      	ldr	r0, [r4, #8]
 80161a6:	4631      	mov	r1, r6
 80161a8:	f002 fbd3 	bl	8018952 <memcpy>
 80161ac:	68a2      	ldr	r2, [r4, #8]
 80161ae:	6923      	ldr	r3, [r4, #16]
 80161b0:	443a      	add	r2, r7
 80161b2:	443b      	add	r3, r7
 80161b4:	60a2      	str	r2, [r4, #8]
 80161b6:	6123      	str	r3, [r4, #16]
 80161b8:	e7ec      	b.n	8016194 <ucdr_serialize_endian_array_int32_t+0x84>
 80161ba:	bf00      	nop

080161bc <ucdr_deserialize_endian_array_int32_t>:
 80161bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c0:	4688      	mov	r8, r1
 80161c2:	2104      	movs	r1, #4
 80161c4:	4605      	mov	r5, r0
 80161c6:	4614      	mov	r4, r2
 80161c8:	461f      	mov	r7, r3
 80161ca:	f7f7 f8a3 	bl	800d314 <ucdr_buffer_alignment>
 80161ce:	4601      	mov	r1, r0
 80161d0:	4628      	mov	r0, r5
 80161d2:	7d6e      	ldrb	r6, [r5, #21]
 80161d4:	f7f7 f8e2 	bl	800d39c <ucdr_advance_buffer>
 80161d8:	f1b8 0f01 	cmp.w	r8, #1
 80161dc:	756e      	strb	r6, [r5, #21]
 80161de:	d010      	beq.n	8016202 <ucdr_deserialize_endian_array_int32_t+0x46>
 80161e0:	2600      	movs	r6, #0
 80161e2:	b14f      	cbz	r7, 80161f8 <ucdr_deserialize_endian_array_int32_t+0x3c>
 80161e4:	4622      	mov	r2, r4
 80161e6:	4641      	mov	r1, r8
 80161e8:	4628      	mov	r0, r5
 80161ea:	3601      	adds	r6, #1
 80161ec:	f7f6 ffa6 	bl	800d13c <ucdr_deserialize_endian_int32_t>
 80161f0:	42b7      	cmp	r7, r6
 80161f2:	f104 0404 	add.w	r4, r4, #4
 80161f6:	d1f5      	bne.n	80161e4 <ucdr_deserialize_endian_array_int32_t+0x28>
 80161f8:	7da8      	ldrb	r0, [r5, #22]
 80161fa:	f080 0001 	eor.w	r0, r0, #1
 80161fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016202:	00bf      	lsls	r7, r7, #2
 8016204:	4639      	mov	r1, r7
 8016206:	4628      	mov	r0, r5
 8016208:	f7f7 f824 	bl	800d254 <ucdr_check_buffer_available_for>
 801620c:	b9f8      	cbnz	r0, 801624e <ucdr_deserialize_endian_array_int32_t+0x92>
 801620e:	46b8      	mov	r8, r7
 8016210:	e00a      	b.n	8016228 <ucdr_deserialize_endian_array_int32_t+0x6c>
 8016212:	68a9      	ldr	r1, [r5, #8]
 8016214:	f002 fb9d 	bl	8018952 <memcpy>
 8016218:	68aa      	ldr	r2, [r5, #8]
 801621a:	692b      	ldr	r3, [r5, #16]
 801621c:	4432      	add	r2, r6
 801621e:	4433      	add	r3, r6
 8016220:	eba8 0806 	sub.w	r8, r8, r6
 8016224:	60aa      	str	r2, [r5, #8]
 8016226:	612b      	str	r3, [r5, #16]
 8016228:	2204      	movs	r2, #4
 801622a:	4641      	mov	r1, r8
 801622c:	4628      	mov	r0, r5
 801622e:	f7f7 f899 	bl	800d364 <ucdr_check_final_buffer_behavior_array>
 8016232:	4606      	mov	r6, r0
 8016234:	eba7 0008 	sub.w	r0, r7, r8
 8016238:	4632      	mov	r2, r6
 801623a:	4420      	add	r0, r4
 801623c:	2e00      	cmp	r6, #0
 801623e:	d1e8      	bne.n	8016212 <ucdr_deserialize_endian_array_int32_t+0x56>
 8016240:	7da8      	ldrb	r0, [r5, #22]
 8016242:	2304      	movs	r3, #4
 8016244:	756b      	strb	r3, [r5, #21]
 8016246:	f080 0001 	eor.w	r0, r0, #1
 801624a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801624e:	463a      	mov	r2, r7
 8016250:	68a9      	ldr	r1, [r5, #8]
 8016252:	4620      	mov	r0, r4
 8016254:	f002 fb7d 	bl	8018952 <memcpy>
 8016258:	68aa      	ldr	r2, [r5, #8]
 801625a:	692b      	ldr	r3, [r5, #16]
 801625c:	443a      	add	r2, r7
 801625e:	443b      	add	r3, r7
 8016260:	60aa      	str	r2, [r5, #8]
 8016262:	612b      	str	r3, [r5, #16]
 8016264:	e7ec      	b.n	8016240 <ucdr_deserialize_endian_array_int32_t+0x84>
 8016266:	bf00      	nop

08016268 <ucdr_serialize_string>:
 8016268:	b538      	push	{r3, r4, r5, lr}
 801626a:	4605      	mov	r5, r0
 801626c:	4608      	mov	r0, r1
 801626e:	460c      	mov	r4, r1
 8016270:	f7ea f82e 	bl	80002d0 <strlen>
 8016274:	4621      	mov	r1, r4
 8016276:	1c42      	adds	r2, r0, #1
 8016278:	4628      	mov	r0, r5
 801627a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801627e:	f7f7 b8ad 	b.w	800d3dc <ucdr_serialize_sequence_char>
 8016282:	bf00      	nop

08016284 <ucdr_deserialize_string>:
 8016284:	b500      	push	{lr}
 8016286:	b083      	sub	sp, #12
 8016288:	ab01      	add	r3, sp, #4
 801628a:	f7f7 f8b9 	bl	800d400 <ucdr_deserialize_sequence_char>
 801628e:	b003      	add	sp, #12
 8016290:	f85d fb04 	ldr.w	pc, [sp], #4

08016294 <uxr_init_input_best_effort_stream>:
 8016294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016298:	8003      	strh	r3, [r0, #0]
 801629a:	4770      	bx	lr

0801629c <uxr_reset_input_best_effort_stream>:
 801629c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80162a0:	8003      	strh	r3, [r0, #0]
 80162a2:	4770      	bx	lr

080162a4 <uxr_receive_best_effort_message>:
 80162a4:	b538      	push	{r3, r4, r5, lr}
 80162a6:	4604      	mov	r4, r0
 80162a8:	8800      	ldrh	r0, [r0, #0]
 80162aa:	460d      	mov	r5, r1
 80162ac:	f000 fe5e 	bl	8016f6c <uxr_seq_num_cmp>
 80162b0:	4603      	mov	r3, r0
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80162b8:	bfb8      	it	lt
 80162ba:	8025      	strhlt	r5, [r4, #0]
 80162bc:	bd38      	pop	{r3, r4, r5, pc}
 80162be:	bf00      	nop

080162c0 <on_full_input_buffer>:
 80162c0:	b570      	push	{r4, r5, r6, lr}
 80162c2:	4605      	mov	r5, r0
 80162c4:	460c      	mov	r4, r1
 80162c6:	682b      	ldr	r3, [r5, #0]
 80162c8:	6809      	ldr	r1, [r1, #0]
 80162ca:	8920      	ldrh	r0, [r4, #8]
 80162cc:	6862      	ldr	r2, [r4, #4]
 80162ce:	fbb2 f2f0 	udiv	r2, r2, r0
 80162d2:	1a5b      	subs	r3, r3, r1
 80162d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80162d8:	3301      	adds	r3, #1
 80162da:	b29b      	uxth	r3, r3
 80162dc:	fbb3 f6f0 	udiv	r6, r3, r0
 80162e0:	fb00 3316 	mls	r3, r0, r6, r3
 80162e4:	b29b      	uxth	r3, r3
 80162e6:	fb02 f303 	mul.w	r3, r2, r3
 80162ea:	1d18      	adds	r0, r3, #4
 80162ec:	4408      	add	r0, r1
 80162ee:	7d26      	ldrb	r6, [r4, #20]
 80162f0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80162f4:	b116      	cbz	r6, 80162fc <on_full_input_buffer+0x3c>
 80162f6:	2600      	movs	r6, #0
 80162f8:	f840 6c04 	str.w	r6, [r0, #-4]
 80162fc:	2a03      	cmp	r2, #3
 80162fe:	d801      	bhi.n	8016304 <on_full_input_buffer+0x44>
 8016300:	2001      	movs	r0, #1
 8016302:	bd70      	pop	{r4, r5, r6, pc}
 8016304:	3308      	adds	r3, #8
 8016306:	4419      	add	r1, r3
 8016308:	4628      	mov	r0, r5
 801630a:	692b      	ldr	r3, [r5, #16]
 801630c:	3a04      	subs	r2, #4
 801630e:	f7f6 ffed 	bl	800d2ec <ucdr_init_buffer_origin>
 8016312:	4628      	mov	r0, r5
 8016314:	4902      	ldr	r1, [pc, #8]	@ (8016320 <on_full_input_buffer+0x60>)
 8016316:	4622      	mov	r2, r4
 8016318:	f7f6 ffc4 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 801631c:	2000      	movs	r0, #0
 801631e:	bd70      	pop	{r4, r5, r6, pc}
 8016320:	080162c1 	.word	0x080162c1

08016324 <uxr_init_input_reliable_stream>:
 8016324:	b500      	push	{lr}
 8016326:	e9c0 1200 	strd	r1, r2, [r0]
 801632a:	f04f 0e00 	mov.w	lr, #0
 801632e:	9a01      	ldr	r2, [sp, #4]
 8016330:	8103      	strh	r3, [r0, #8]
 8016332:	6102      	str	r2, [r0, #16]
 8016334:	f880 e014 	strb.w	lr, [r0, #20]
 8016338:	b1d3      	cbz	r3, 8016370 <uxr_init_input_reliable_stream+0x4c>
 801633a:	f8c1 e000 	str.w	lr, [r1]
 801633e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016342:	f1bc 0f01 	cmp.w	ip, #1
 8016346:	d913      	bls.n	8016370 <uxr_init_input_reliable_stream+0x4c>
 8016348:	2301      	movs	r3, #1
 801634a:	fbb3 f1fc 	udiv	r1, r3, ip
 801634e:	fb0c 3111 	mls	r1, ip, r1, r3
 8016352:	b289      	uxth	r1, r1
 8016354:	6842      	ldr	r2, [r0, #4]
 8016356:	fbb2 f2fc 	udiv	r2, r2, ip
 801635a:	fb01 f202 	mul.w	r2, r1, r2
 801635e:	6801      	ldr	r1, [r0, #0]
 8016360:	f841 e002 	str.w	lr, [r1, r2]
 8016364:	3301      	adds	r3, #1
 8016366:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801636a:	b29b      	uxth	r3, r3
 801636c:	459c      	cmp	ip, r3
 801636e:	d8ec      	bhi.n	801634a <uxr_init_input_reliable_stream+0x26>
 8016370:	f04f 33ff 	mov.w	r3, #4294967295
 8016374:	60c3      	str	r3, [r0, #12]
 8016376:	f85d fb04 	ldr.w	pc, [sp], #4
 801637a:	bf00      	nop

0801637c <uxr_reset_input_reliable_stream>:
 801637c:	8901      	ldrh	r1, [r0, #8]
 801637e:	b1e9      	cbz	r1, 80163bc <uxr_reset_input_reliable_stream+0x40>
 8016380:	f04f 0c00 	mov.w	ip, #0
 8016384:	b500      	push	{lr}
 8016386:	4663      	mov	r3, ip
 8016388:	46e6      	mov	lr, ip
 801638a:	fbb3 f2f1 	udiv	r2, r3, r1
 801638e:	fb01 3312 	mls	r3, r1, r2, r3
 8016392:	b29b      	uxth	r3, r3
 8016394:	6842      	ldr	r2, [r0, #4]
 8016396:	fbb2 f2f1 	udiv	r2, r2, r1
 801639a:	fb03 f202 	mul.w	r2, r3, r2
 801639e:	6803      	ldr	r3, [r0, #0]
 80163a0:	f843 e002 	str.w	lr, [r3, r2]
 80163a4:	f10c 0c01 	add.w	ip, ip, #1
 80163a8:	8901      	ldrh	r1, [r0, #8]
 80163aa:	fa1f f38c 	uxth.w	r3, ip
 80163ae:	4299      	cmp	r1, r3
 80163b0:	d8eb      	bhi.n	801638a <uxr_reset_input_reliable_stream+0xe>
 80163b2:	f04f 33ff 	mov.w	r3, #4294967295
 80163b6:	60c3      	str	r3, [r0, #12]
 80163b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80163bc:	f04f 33ff 	mov.w	r3, #4294967295
 80163c0:	60c3      	str	r3, [r0, #12]
 80163c2:	4770      	bx	lr

080163c4 <uxr_receive_reliable_message>:
 80163c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c8:	4604      	mov	r4, r0
 80163ca:	460d      	mov	r5, r1
 80163cc:	8901      	ldrh	r1, [r0, #8]
 80163ce:	8980      	ldrh	r0, [r0, #12]
 80163d0:	4690      	mov	r8, r2
 80163d2:	461f      	mov	r7, r3
 80163d4:	f000 fdc2 	bl	8016f5c <uxr_seq_num_add>
 80163d8:	4629      	mov	r1, r5
 80163da:	4606      	mov	r6, r0
 80163dc:	89a0      	ldrh	r0, [r4, #12]
 80163de:	f000 fdc5 	bl	8016f6c <uxr_seq_num_cmp>
 80163e2:	2800      	cmp	r0, #0
 80163e4:	db0a      	blt.n	80163fc <uxr_receive_reliable_message+0x38>
 80163e6:	2600      	movs	r6, #0
 80163e8:	89e0      	ldrh	r0, [r4, #14]
 80163ea:	4629      	mov	r1, r5
 80163ec:	f000 fdbe 	bl	8016f6c <uxr_seq_num_cmp>
 80163f0:	2800      	cmp	r0, #0
 80163f2:	bfb8      	it	lt
 80163f4:	81e5      	strhlt	r5, [r4, #14]
 80163f6:	4630      	mov	r0, r6
 80163f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163fc:	4630      	mov	r0, r6
 80163fe:	4629      	mov	r1, r5
 8016400:	f000 fdb4 	bl	8016f6c <uxr_seq_num_cmp>
 8016404:	2800      	cmp	r0, #0
 8016406:	dbee      	blt.n	80163e6 <uxr_receive_reliable_message+0x22>
 8016408:	6923      	ldr	r3, [r4, #16]
 801640a:	4640      	mov	r0, r8
 801640c:	4798      	blx	r3
 801640e:	2101      	movs	r1, #1
 8016410:	4606      	mov	r6, r0
 8016412:	89a0      	ldrh	r0, [r4, #12]
 8016414:	f000 fda2 	bl	8016f5c <uxr_seq_num_add>
 8016418:	b90e      	cbnz	r6, 801641e <uxr_receive_reliable_message+0x5a>
 801641a:	4285      	cmp	r5, r0
 801641c:	d046      	beq.n	80164ac <uxr_receive_reliable_message+0xe8>
 801641e:	8921      	ldrh	r1, [r4, #8]
 8016420:	fbb5 f2f1 	udiv	r2, r5, r1
 8016424:	fb01 5212 	mls	r2, r1, r2, r5
 8016428:	b292      	uxth	r2, r2
 801642a:	6863      	ldr	r3, [r4, #4]
 801642c:	6820      	ldr	r0, [r4, #0]
 801642e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016432:	fb02 f303 	mul.w	r3, r2, r3
 8016436:	3304      	adds	r3, #4
 8016438:	4418      	add	r0, r3
 801643a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d1d1      	bne.n	80163e6 <uxr_receive_reliable_message+0x22>
 8016442:	4641      	mov	r1, r8
 8016444:	463a      	mov	r2, r7
 8016446:	f002 fa84 	bl	8018952 <memcpy>
 801644a:	8921      	ldrh	r1, [r4, #8]
 801644c:	fbb5 f2f1 	udiv	r2, r5, r1
 8016450:	fb01 5212 	mls	r2, r1, r2, r5
 8016454:	b292      	uxth	r2, r2
 8016456:	6863      	ldr	r3, [r4, #4]
 8016458:	fbb3 f3f1 	udiv	r3, r3, r1
 801645c:	fb02 f303 	mul.w	r3, r2, r3
 8016460:	6822      	ldr	r2, [r4, #0]
 8016462:	50d7      	str	r7, [r2, r3]
 8016464:	9a06      	ldr	r2, [sp, #24]
 8016466:	2301      	movs	r3, #1
 8016468:	7013      	strb	r3, [r2, #0]
 801646a:	2e00      	cmp	r6, #0
 801646c:	d0bb      	beq.n	80163e6 <uxr_receive_reliable_message+0x22>
 801646e:	89a6      	ldrh	r6, [r4, #12]
 8016470:	2101      	movs	r1, #1
 8016472:	4630      	mov	r0, r6
 8016474:	f000 fd72 	bl	8016f5c <uxr_seq_num_add>
 8016478:	8921      	ldrh	r1, [r4, #8]
 801647a:	fbb0 f2f1 	udiv	r2, r0, r1
 801647e:	fb01 0212 	mls	r2, r1, r2, r0
 8016482:	b292      	uxth	r2, r2
 8016484:	6863      	ldr	r3, [r4, #4]
 8016486:	fbb3 f3f1 	udiv	r3, r3, r1
 801648a:	4606      	mov	r6, r0
 801648c:	fb02 f303 	mul.w	r3, r2, r3
 8016490:	6820      	ldr	r0, [r4, #0]
 8016492:	3304      	adds	r3, #4
 8016494:	4418      	add	r0, r3
 8016496:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d0a3      	beq.n	80163e6 <uxr_receive_reliable_message+0x22>
 801649e:	6923      	ldr	r3, [r4, #16]
 80164a0:	4798      	blx	r3
 80164a2:	2802      	cmp	r0, #2
 80164a4:	d005      	beq.n	80164b2 <uxr_receive_reliable_message+0xee>
 80164a6:	2801      	cmp	r0, #1
 80164a8:	d0e2      	beq.n	8016470 <uxr_receive_reliable_message+0xac>
 80164aa:	e79c      	b.n	80163e6 <uxr_receive_reliable_message+0x22>
 80164ac:	9b06      	ldr	r3, [sp, #24]
 80164ae:	81a5      	strh	r5, [r4, #12]
 80164b0:	701e      	strb	r6, [r3, #0]
 80164b2:	2601      	movs	r6, #1
 80164b4:	e798      	b.n	80163e8 <uxr_receive_reliable_message+0x24>
 80164b6:	bf00      	nop

080164b8 <uxr_next_input_reliable_buffer_available>:
 80164b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164bc:	4604      	mov	r4, r0
 80164be:	460f      	mov	r7, r1
 80164c0:	8980      	ldrh	r0, [r0, #12]
 80164c2:	2101      	movs	r1, #1
 80164c4:	4690      	mov	r8, r2
 80164c6:	f000 fd49 	bl	8016f5c <uxr_seq_num_add>
 80164ca:	8921      	ldrh	r1, [r4, #8]
 80164cc:	fbb0 f2f1 	udiv	r2, r0, r1
 80164d0:	fb01 0212 	mls	r2, r1, r2, r0
 80164d4:	b292      	uxth	r2, r2
 80164d6:	6863      	ldr	r3, [r4, #4]
 80164d8:	6826      	ldr	r6, [r4, #0]
 80164da:	fbb3 f3f1 	udiv	r3, r3, r1
 80164de:	fb02 f303 	mul.w	r3, r2, r3
 80164e2:	3304      	adds	r3, #4
 80164e4:	441e      	add	r6, r3
 80164e6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80164ea:	f1b9 0f00 	cmp.w	r9, #0
 80164ee:	d023      	beq.n	8016538 <uxr_next_input_reliable_buffer_available+0x80>
 80164f0:	6923      	ldr	r3, [r4, #16]
 80164f2:	4605      	mov	r5, r0
 80164f4:	4630      	mov	r0, r6
 80164f6:	4798      	blx	r3
 80164f8:	4682      	mov	sl, r0
 80164fa:	b300      	cbz	r0, 801653e <uxr_next_input_reliable_buffer_available+0x86>
 80164fc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016500:	2101      	movs	r1, #1
 8016502:	4650      	mov	r0, sl
 8016504:	f000 fd2a 	bl	8016f5c <uxr_seq_num_add>
 8016508:	8921      	ldrh	r1, [r4, #8]
 801650a:	fbb0 f2f1 	udiv	r2, r0, r1
 801650e:	4682      	mov	sl, r0
 8016510:	fb01 0212 	mls	r2, r1, r2, r0
 8016514:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016518:	b292      	uxth	r2, r2
 801651a:	fbb3 f3f1 	udiv	r3, r3, r1
 801651e:	fb02 f303 	mul.w	r3, r2, r3
 8016522:	3304      	adds	r3, #4
 8016524:	4418      	add	r0, r3
 8016526:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801652a:	b12b      	cbz	r3, 8016538 <uxr_next_input_reliable_buffer_available+0x80>
 801652c:	6923      	ldr	r3, [r4, #16]
 801652e:	4798      	blx	r3
 8016530:	2802      	cmp	r0, #2
 8016532:	d01b      	beq.n	801656c <uxr_next_input_reliable_buffer_available+0xb4>
 8016534:	2801      	cmp	r0, #1
 8016536:	d0e3      	beq.n	8016500 <uxr_next_input_reliable_buffer_available+0x48>
 8016538:	2000      	movs	r0, #0
 801653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801653e:	464a      	mov	r2, r9
 8016540:	4631      	mov	r1, r6
 8016542:	4638      	mov	r0, r7
 8016544:	f7f6 feda 	bl	800d2fc <ucdr_init_buffer>
 8016548:	8921      	ldrh	r1, [r4, #8]
 801654a:	fbb5 f2f1 	udiv	r2, r5, r1
 801654e:	fb01 5212 	mls	r2, r1, r2, r5
 8016552:	b292      	uxth	r2, r2
 8016554:	6863      	ldr	r3, [r4, #4]
 8016556:	fbb3 f3f1 	udiv	r3, r3, r1
 801655a:	fb02 f303 	mul.w	r3, r2, r3
 801655e:	6822      	ldr	r2, [r4, #0]
 8016560:	f842 a003 	str.w	sl, [r2, r3]
 8016564:	81a5      	strh	r5, [r4, #12]
 8016566:	2001      	movs	r0, #1
 8016568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801656c:	eb06 0108 	add.w	r1, r6, r8
 8016570:	8926      	ldrh	r6, [r4, #8]
 8016572:	fbb5 f0f6 	udiv	r0, r5, r6
 8016576:	fb06 5010 	mls	r0, r6, r0, r5
 801657a:	b280      	uxth	r0, r0
 801657c:	6863      	ldr	r3, [r4, #4]
 801657e:	fbb3 f3f6 	udiv	r3, r3, r6
 8016582:	fb00 f303 	mul.w	r3, r0, r3
 8016586:	6820      	ldr	r0, [r4, #0]
 8016588:	2500      	movs	r5, #0
 801658a:	50c5      	str	r5, [r0, r3]
 801658c:	eba9 0208 	sub.w	r2, r9, r8
 8016590:	4638      	mov	r0, r7
 8016592:	f7f6 feb3 	bl	800d2fc <ucdr_init_buffer>
 8016596:	4903      	ldr	r1, [pc, #12]	@ (80165a4 <uxr_next_input_reliable_buffer_available+0xec>)
 8016598:	4622      	mov	r2, r4
 801659a:	4638      	mov	r0, r7
 801659c:	f7f6 fe82 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 80165a0:	4655      	mov	r5, sl
 80165a2:	e7df      	b.n	8016564 <uxr_next_input_reliable_buffer_available+0xac>
 80165a4:	080162c1 	.word	0x080162c1

080165a8 <uxr_process_heartbeat>:
 80165a8:	b538      	push	{r3, r4, r5, lr}
 80165aa:	4611      	mov	r1, r2
 80165ac:	4604      	mov	r4, r0
 80165ae:	89c0      	ldrh	r0, [r0, #14]
 80165b0:	4615      	mov	r5, r2
 80165b2:	f000 fcdb 	bl	8016f6c <uxr_seq_num_cmp>
 80165b6:	2800      	cmp	r0, #0
 80165b8:	bfb8      	it	lt
 80165ba:	81e5      	strhlt	r5, [r4, #14]
 80165bc:	bd38      	pop	{r3, r4, r5, pc}
 80165be:	bf00      	nop

080165c0 <uxr_compute_acknack>:
 80165c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c4:	8903      	ldrh	r3, [r0, #8]
 80165c6:	8985      	ldrh	r5, [r0, #12]
 80165c8:	4604      	mov	r4, r0
 80165ca:	460e      	mov	r6, r1
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d048      	beq.n	8016662 <uxr_compute_acknack+0xa2>
 80165d0:	4628      	mov	r0, r5
 80165d2:	2701      	movs	r7, #1
 80165d4:	e003      	b.n	80165de <uxr_compute_acknack+0x1e>
 80165d6:	4567      	cmp	r7, ip
 80165d8:	d243      	bcs.n	8016662 <uxr_compute_acknack+0xa2>
 80165da:	89a0      	ldrh	r0, [r4, #12]
 80165dc:	3701      	adds	r7, #1
 80165de:	b2b9      	uxth	r1, r7
 80165e0:	f000 fcbc 	bl	8016f5c <uxr_seq_num_add>
 80165e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80165e8:	fbb0 f2fc 	udiv	r2, r0, ip
 80165ec:	e9d4 1300 	ldrd	r1, r3, [r4]
 80165f0:	fb0c 0212 	mls	r2, ip, r2, r0
 80165f4:	b292      	uxth	r2, r2
 80165f6:	fbb3 f3fc 	udiv	r3, r3, ip
 80165fa:	fb02 f303 	mul.w	r3, r2, r3
 80165fe:	58cb      	ldr	r3, [r1, r3]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d1e8      	bne.n	80165d6 <uxr_compute_acknack+0x16>
 8016604:	8030      	strh	r0, [r6, #0]
 8016606:	2101      	movs	r1, #1
 8016608:	89e5      	ldrh	r5, [r4, #14]
 801660a:	f000 fcab 	bl	8016f64 <uxr_seq_num_sub>
 801660e:	4601      	mov	r1, r0
 8016610:	4628      	mov	r0, r5
 8016612:	f000 fca7 	bl	8016f64 <uxr_seq_num_sub>
 8016616:	4605      	mov	r5, r0
 8016618:	4607      	mov	r7, r0
 801661a:	b1f8      	cbz	r0, 801665c <uxr_compute_acknack+0x9c>
 801661c:	f04f 0900 	mov.w	r9, #0
 8016620:	464d      	mov	r5, r9
 8016622:	f04f 0801 	mov.w	r8, #1
 8016626:	fa1f f189 	uxth.w	r1, r9
 801662a:	8830      	ldrh	r0, [r6, #0]
 801662c:	f000 fc96 	bl	8016f5c <uxr_seq_num_add>
 8016630:	8921      	ldrh	r1, [r4, #8]
 8016632:	fbb0 f3f1 	udiv	r3, r0, r1
 8016636:	fb03 0011 	mls	r0, r3, r1, r0
 801663a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801663e:	b280      	uxth	r0, r0
 8016640:	fbb3 f3f1 	udiv	r3, r3, r1
 8016644:	fb00 f303 	mul.w	r3, r0, r3
 8016648:	fa08 f109 	lsl.w	r1, r8, r9
 801664c:	58d3      	ldr	r3, [r2, r3]
 801664e:	f109 0901 	add.w	r9, r9, #1
 8016652:	b90b      	cbnz	r3, 8016658 <uxr_compute_acknack+0x98>
 8016654:	4329      	orrs	r1, r5
 8016656:	b28d      	uxth	r5, r1
 8016658:	454f      	cmp	r7, r9
 801665a:	d1e4      	bne.n	8016626 <uxr_compute_acknack+0x66>
 801665c:	4628      	mov	r0, r5
 801665e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016662:	4628      	mov	r0, r5
 8016664:	e7ce      	b.n	8016604 <uxr_compute_acknack+0x44>
 8016666:	bf00      	nop

08016668 <uxr_init_output_best_effort_stream>:
 8016668:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801666c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016670:	6001      	str	r1, [r0, #0]
 8016672:	7303      	strb	r3, [r0, #12]
 8016674:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016678:	4770      	bx	lr
 801667a:	bf00      	nop

0801667c <uxr_reset_output_best_effort_stream>:
 801667c:	7b02      	ldrb	r2, [r0, #12]
 801667e:	6042      	str	r2, [r0, #4]
 8016680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016684:	81c3      	strh	r3, [r0, #14]
 8016686:	4770      	bx	lr

08016688 <uxr_prepare_best_effort_buffer_to_write>:
 8016688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801668a:	4604      	mov	r4, r0
 801668c:	b083      	sub	sp, #12
 801668e:	6840      	ldr	r0, [r0, #4]
 8016690:	460d      	mov	r5, r1
 8016692:	4616      	mov	r6, r2
 8016694:	f7f9 f944 	bl	800f920 <uxr_submessage_padding>
 8016698:	6863      	ldr	r3, [r4, #4]
 801669a:	4418      	add	r0, r3
 801669c:	68a3      	ldr	r3, [r4, #8]
 801669e:	1942      	adds	r2, r0, r5
 80166a0:	4293      	cmp	r3, r2
 80166a2:	bf2c      	ite	cs
 80166a4:	2701      	movcs	r7, #1
 80166a6:	2700      	movcc	r7, #0
 80166a8:	d202      	bcs.n	80166b0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80166aa:	4638      	mov	r0, r7
 80166ac:	b003      	add	sp, #12
 80166ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166b0:	9000      	str	r0, [sp, #0]
 80166b2:	6821      	ldr	r1, [r4, #0]
 80166b4:	4630      	mov	r0, r6
 80166b6:	2300      	movs	r3, #0
 80166b8:	f7f6 fe0e 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 80166bc:	6863      	ldr	r3, [r4, #4]
 80166be:	4638      	mov	r0, r7
 80166c0:	442b      	add	r3, r5
 80166c2:	6063      	str	r3, [r4, #4]
 80166c4:	b003      	add	sp, #12
 80166c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080166c8 <uxr_prepare_best_effort_buffer_to_send>:
 80166c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166cc:	4604      	mov	r4, r0
 80166ce:	461d      	mov	r5, r3
 80166d0:	6840      	ldr	r0, [r0, #4]
 80166d2:	7b23      	ldrb	r3, [r4, #12]
 80166d4:	4298      	cmp	r0, r3
 80166d6:	bf8c      	ite	hi
 80166d8:	2601      	movhi	r6, #1
 80166da:	2600      	movls	r6, #0
 80166dc:	d802      	bhi.n	80166e4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80166de:	4630      	mov	r0, r6
 80166e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166e4:	4688      	mov	r8, r1
 80166e6:	89e0      	ldrh	r0, [r4, #14]
 80166e8:	2101      	movs	r1, #1
 80166ea:	4617      	mov	r7, r2
 80166ec:	f000 fc36 	bl	8016f5c <uxr_seq_num_add>
 80166f0:	6823      	ldr	r3, [r4, #0]
 80166f2:	81e0      	strh	r0, [r4, #14]
 80166f4:	8028      	strh	r0, [r5, #0]
 80166f6:	f8c8 3000 	str.w	r3, [r8]
 80166fa:	6863      	ldr	r3, [r4, #4]
 80166fc:	603b      	str	r3, [r7, #0]
 80166fe:	7b23      	ldrb	r3, [r4, #12]
 8016700:	6063      	str	r3, [r4, #4]
 8016702:	4630      	mov	r0, r6
 8016704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016708 <on_full_output_buffer>:
 8016708:	b538      	push	{r3, r4, r5, lr}
 801670a:	460c      	mov	r4, r1
 801670c:	6803      	ldr	r3, [r0, #0]
 801670e:	6809      	ldr	r1, [r1, #0]
 8016710:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016714:	6862      	ldr	r2, [r4, #4]
 8016716:	fbb2 f2fc 	udiv	r2, r2, ip
 801671a:	1a5b      	subs	r3, r3, r1
 801671c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016720:	3301      	adds	r3, #1
 8016722:	b29b      	uxth	r3, r3
 8016724:	fbb3 fefc 	udiv	lr, r3, ip
 8016728:	fb0c 331e 	mls	r3, ip, lr, r3
 801672c:	b29b      	uxth	r3, r3
 801672e:	fb02 f303 	mul.w	r3, r2, r3
 8016732:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016736:	58ca      	ldr	r2, [r1, r3]
 8016738:	4463      	add	r3, ip
 801673a:	eba2 020c 	sub.w	r2, r2, ip
 801673e:	3308      	adds	r3, #8
 8016740:	4605      	mov	r5, r0
 8016742:	4419      	add	r1, r3
 8016744:	3a04      	subs	r2, #4
 8016746:	6903      	ldr	r3, [r0, #16]
 8016748:	f7f6 fdd0 	bl	800d2ec <ucdr_init_buffer_origin>
 801674c:	4628      	mov	r0, r5
 801674e:	4903      	ldr	r1, [pc, #12]	@ (801675c <on_full_output_buffer+0x54>)
 8016750:	4622      	mov	r2, r4
 8016752:	f7f6 fda7 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 8016756:	2000      	movs	r0, #0
 8016758:	bd38      	pop	{r3, r4, r5, pc}
 801675a:	bf00      	nop
 801675c:	08016709 	.word	0x08016709

08016760 <uxr_init_output_reliable_stream>:
 8016760:	b410      	push	{r4}
 8016762:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016766:	8103      	strh	r3, [r0, #8]
 8016768:	e9c0 1200 	strd	r1, r2, [r0]
 801676c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016770:	b1d3      	cbz	r3, 80167a8 <uxr_init_output_reliable_stream+0x48>
 8016772:	f8c1 c000 	str.w	ip, [r1]
 8016776:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801677a:	f1bc 0f01 	cmp.w	ip, #1
 801677e:	d913      	bls.n	80167a8 <uxr_init_output_reliable_stream+0x48>
 8016780:	2301      	movs	r3, #1
 8016782:	fbb3 f1fc 	udiv	r1, r3, ip
 8016786:	fb0c 3111 	mls	r1, ip, r1, r3
 801678a:	b289      	uxth	r1, r1
 801678c:	6842      	ldr	r2, [r0, #4]
 801678e:	6804      	ldr	r4, [r0, #0]
 8016790:	fbb2 f2fc 	udiv	r2, r2, ip
 8016794:	fb01 f202 	mul.w	r2, r1, r2
 8016798:	7b01      	ldrb	r1, [r0, #12]
 801679a:	50a1      	str	r1, [r4, r2]
 801679c:	3301      	adds	r3, #1
 801679e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	459c      	cmp	ip, r3
 80167a6:	d8ec      	bhi.n	8016782 <uxr_init_output_reliable_stream+0x22>
 80167a8:	f04f 32ff 	mov.w	r2, #4294967295
 80167ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80167b0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80167b4:	4905      	ldr	r1, [pc, #20]	@ (80167cc <uxr_init_output_reliable_stream+0x6c>)
 80167b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167ba:	f8c0 100e 	str.w	r1, [r0, #14]
 80167be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80167c2:	2300      	movs	r3, #0
 80167c4:	8242      	strh	r2, [r0, #18]
 80167c6:	8403      	strh	r3, [r0, #32]
 80167c8:	4770      	bx	lr
 80167ca:	bf00      	nop
 80167cc:	ffff0000 	.word	0xffff0000

080167d0 <uxr_reset_output_reliable_stream>:
 80167d0:	8901      	ldrh	r1, [r0, #8]
 80167d2:	b1b1      	cbz	r1, 8016802 <uxr_reset_output_reliable_stream+0x32>
 80167d4:	f04f 0c00 	mov.w	ip, #0
 80167d8:	4663      	mov	r3, ip
 80167da:	fbb3 f2f1 	udiv	r2, r3, r1
 80167de:	fb01 3312 	mls	r3, r1, r2, r3
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	6842      	ldr	r2, [r0, #4]
 80167e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80167ea:	6801      	ldr	r1, [r0, #0]
 80167ec:	fb03 f202 	mul.w	r2, r3, r2
 80167f0:	7b03      	ldrb	r3, [r0, #12]
 80167f2:	508b      	str	r3, [r1, r2]
 80167f4:	f10c 0c01 	add.w	ip, ip, #1
 80167f8:	8901      	ldrh	r1, [r0, #8]
 80167fa:	fa1f f38c 	uxth.w	r3, ip
 80167fe:	4299      	cmp	r1, r3
 8016800:	d8eb      	bhi.n	80167da <uxr_reset_output_reliable_stream+0xa>
 8016802:	f04f 32ff 	mov.w	r2, #4294967295
 8016806:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801680a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801680e:	4904      	ldr	r1, [pc, #16]	@ (8016820 <uxr_reset_output_reliable_stream+0x50>)
 8016810:	f8c0 100e 	str.w	r1, [r0, #14]
 8016814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016818:	2300      	movs	r3, #0
 801681a:	8242      	strh	r2, [r0, #18]
 801681c:	8403      	strh	r3, [r0, #32]
 801681e:	4770      	bx	lr
 8016820:	ffff0000 	.word	0xffff0000

08016824 <uxr_prepare_reliable_buffer_to_write>:
 8016824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016828:	4604      	mov	r4, r0
 801682a:	b091      	sub	sp, #68	@ 0x44
 801682c:	8900      	ldrh	r0, [r0, #8]
 801682e:	89e7      	ldrh	r7, [r4, #14]
 8016830:	6823      	ldr	r3, [r4, #0]
 8016832:	9204      	str	r2, [sp, #16]
 8016834:	fbb7 f2f0 	udiv	r2, r7, r0
 8016838:	fb00 7212 	mls	r2, r0, r2, r7
 801683c:	b292      	uxth	r2, r2
 801683e:	6865      	ldr	r5, [r4, #4]
 8016840:	fbb5 f5f0 	udiv	r5, r5, r0
 8016844:	fb05 3202 	mla	r2, r5, r2, r3
 8016848:	3204      	adds	r2, #4
 801684a:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801684e:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8016852:	9203      	str	r2, [sp, #12]
 8016854:	4688      	mov	r8, r1
 8016856:	f1a5 0904 	sub.w	r9, r5, #4
 801685a:	2800      	cmp	r0, #0
 801685c:	f000 8143 	beq.w	8016ae6 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8016860:	2100      	movs	r1, #0
 8016862:	460e      	mov	r6, r1
 8016864:	b28a      	uxth	r2, r1
 8016866:	fbb2 fcf0 	udiv	ip, r2, r0
 801686a:	fb00 221c 	mls	r2, r0, ip, r2
 801686e:	b292      	uxth	r2, r2
 8016870:	fb05 f202 	mul.w	r2, r5, r2
 8016874:	3101      	adds	r1, #1
 8016876:	589a      	ldr	r2, [r3, r2]
 8016878:	455a      	cmp	r2, fp
 801687a:	bf04      	itt	eq
 801687c:	3601      	addeq	r6, #1
 801687e:	b2b6      	uxtheq	r6, r6
 8016880:	4281      	cmp	r1, r0
 8016882:	d1ef      	bne.n	8016864 <uxr_prepare_reliable_buffer_to_write+0x40>
 8016884:	4650      	mov	r0, sl
 8016886:	2104      	movs	r1, #4
 8016888:	9605      	str	r6, [sp, #20]
 801688a:	f7f6 fd3b 	bl	800d304 <ucdr_alignment>
 801688e:	4482      	add	sl, r0
 8016890:	eb0a 0208 	add.w	r2, sl, r8
 8016894:	454a      	cmp	r2, r9
 8016896:	f240 80ca 	bls.w	8016a2e <uxr_prepare_reliable_buffer_to_write+0x20a>
 801689a:	7b22      	ldrb	r2, [r4, #12]
 801689c:	4442      	add	r2, r8
 801689e:	454a      	cmp	r2, r9
 80168a0:	f240 80b2 	bls.w	8016a08 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 80168a4:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 80168a8:	32fc      	adds	r2, #252	@ 0xfc
 80168aa:	fa1f f389 	uxth.w	r3, r9
 80168ae:	441a      	add	r2, r3
 80168b0:	b292      	uxth	r2, r2
 80168b2:	fb06 fb02 	mul.w	fp, r6, r2
 80168b6:	45c3      	cmp	fp, r8
 80168b8:	9205      	str	r2, [sp, #20]
 80168ba:	9206      	str	r2, [sp, #24]
 80168bc:	f0c0 80b3 	bcc.w	8016a26 <uxr_prepare_reliable_buffer_to_write+0x202>
 80168c0:	f10a 0204 	add.w	r2, sl, #4
 80168c4:	454a      	cmp	r2, r9
 80168c6:	f080 80db 	bcs.w	8016a80 <uxr_prepare_reliable_buffer_to_write+0x25c>
 80168ca:	f1a3 0b04 	sub.w	fp, r3, #4
 80168ce:	ebab 0b0a 	sub.w	fp, fp, sl
 80168d2:	9b05      	ldr	r3, [sp, #20]
 80168d4:	fa1f fb8b 	uxth.w	fp, fp
 80168d8:	eba8 080b 	sub.w	r8, r8, fp
 80168dc:	fbb8 fcf3 	udiv	ip, r8, r3
 80168e0:	fb03 831c 	mls	r3, r3, ip, r8
 80168e4:	fa1f fc8c 	uxth.w	ip, ip
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	f040 80c1 	bne.w	8016a70 <uxr_prepare_reliable_buffer_to_write+0x24c>
 80168ee:	45b4      	cmp	ip, r6
 80168f0:	f200 8099 	bhi.w	8016a26 <uxr_prepare_reliable_buffer_to_write+0x202>
 80168f4:	f10d 0820 	add.w	r8, sp, #32
 80168f8:	f1bc 0f00 	cmp.w	ip, #0
 80168fc:	d040      	beq.n	8016980 <uxr_prepare_reliable_buffer_to_write+0x15c>
 80168fe:	f8cd a01c 	str.w	sl, [sp, #28]
 8016902:	2600      	movs	r6, #0
 8016904:	f8dd a014 	ldr.w	sl, [sp, #20]
 8016908:	9505      	str	r5, [sp, #20]
 801690a:	f10d 0820 	add.w	r8, sp, #32
 801690e:	4665      	mov	r5, ip
 8016910:	e000      	b.n	8016914 <uxr_prepare_reliable_buffer_to_write+0xf0>
 8016912:	46d3      	mov	fp, sl
 8016914:	8921      	ldrh	r1, [r4, #8]
 8016916:	fbb7 f2f1 	udiv	r2, r7, r1
 801691a:	fb01 7212 	mls	r2, r1, r2, r7
 801691e:	b292      	uxth	r2, r2
 8016920:	6863      	ldr	r3, [r4, #4]
 8016922:	fbb3 f3f1 	udiv	r3, r3, r1
 8016926:	6821      	ldr	r1, [r4, #0]
 8016928:	fb02 f303 	mul.w	r3, r2, r3
 801692c:	3304      	adds	r3, #4
 801692e:	4419      	add	r1, r3
 8016930:	4640      	mov	r0, r8
 8016932:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016936:	9200      	str	r2, [sp, #0]
 8016938:	2300      	movs	r3, #0
 801693a:	464a      	mov	r2, r9
 801693c:	f7f6 fccc 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 8016940:	465a      	mov	r2, fp
 8016942:	2300      	movs	r3, #0
 8016944:	210d      	movs	r1, #13
 8016946:	4640      	mov	r0, r8
 8016948:	f7f8 ffaa 	bl	800f8a0 <uxr_buffer_submessage_header>
 801694c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016950:	fbb7 f2fc 	udiv	r2, r7, ip
 8016954:	fb0c 7212 	mls	r2, ip, r2, r7
 8016958:	b292      	uxth	r2, r2
 801695a:	6863      	ldr	r3, [r4, #4]
 801695c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016960:	fb02 f303 	mul.w	r3, r2, r3
 8016964:	6822      	ldr	r2, [r4, #0]
 8016966:	4638      	mov	r0, r7
 8016968:	f842 9003 	str.w	r9, [r2, r3]
 801696c:	2101      	movs	r1, #1
 801696e:	f000 faf5 	bl	8016f5c <uxr_seq_num_add>
 8016972:	3601      	adds	r6, #1
 8016974:	42ae      	cmp	r6, r5
 8016976:	4607      	mov	r7, r0
 8016978:	d1cb      	bne.n	8016912 <uxr_prepare_reliable_buffer_to_write+0xee>
 801697a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801697e:	9d05      	ldr	r5, [sp, #20]
 8016980:	8920      	ldrh	r0, [r4, #8]
 8016982:	fbb7 f1f0 	udiv	r1, r7, r0
 8016986:	fb00 7111 	mls	r1, r0, r1, r7
 801698a:	b289      	uxth	r1, r1
 801698c:	6863      	ldr	r3, [r4, #4]
 801698e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016992:	fb01 f303 	mul.w	r3, r1, r3
 8016996:	6821      	ldr	r1, [r4, #0]
 8016998:	3304      	adds	r3, #4
 801699a:	4419      	add	r1, r3
 801699c:	464a      	mov	r2, r9
 801699e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80169a2:	9000      	str	r0, [sp, #0]
 80169a4:	2300      	movs	r3, #0
 80169a6:	4640      	mov	r0, r8
 80169a8:	f7f6 fc96 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 80169ac:	4640      	mov	r0, r8
 80169ae:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80169b2:	2302      	movs	r3, #2
 80169b4:	fa1f f288 	uxth.w	r2, r8
 80169b8:	210d      	movs	r1, #13
 80169ba:	f7f8 ff71 	bl	800f8a0 <uxr_buffer_submessage_header>
 80169be:	8926      	ldrh	r6, [r4, #8]
 80169c0:	9b03      	ldr	r3, [sp, #12]
 80169c2:	7b20      	ldrb	r0, [r4, #12]
 80169c4:	f1a5 0208 	sub.w	r2, r5, #8
 80169c8:	f10a 0104 	add.w	r1, sl, #4
 80169cc:	fbb7 f5f6 	udiv	r5, r7, r6
 80169d0:	fb06 7515 	mls	r5, r6, r5, r7
 80169d4:	440b      	add	r3, r1
 80169d6:	b2ad      	uxth	r5, r5
 80169d8:	4619      	mov	r1, r3
 80169da:	3004      	adds	r0, #4
 80169dc:	6863      	ldr	r3, [r4, #4]
 80169de:	fbb3 f3f6 	udiv	r3, r3, r6
 80169e2:	fb05 f303 	mul.w	r3, r5, r3
 80169e6:	6825      	ldr	r5, [r4, #0]
 80169e8:	4440      	add	r0, r8
 80169ea:	50e8      	str	r0, [r5, r3]
 80169ec:	9d04      	ldr	r5, [sp, #16]
 80169ee:	eba2 020a 	sub.w	r2, r2, sl
 80169f2:	4628      	mov	r0, r5
 80169f4:	f7f6 fc82 	bl	800d2fc <ucdr_init_buffer>
 80169f8:	493c      	ldr	r1, [pc, #240]	@ (8016aec <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 80169fa:	4622      	mov	r2, r4
 80169fc:	4628      	mov	r0, r5
 80169fe:	f7f6 fc51 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 8016a02:	81e7      	strh	r7, [r4, #14]
 8016a04:	2001      	movs	r0, #1
 8016a06:	e00f      	b.n	8016a28 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016a08:	2101      	movs	r1, #1
 8016a0a:	89e0      	ldrh	r0, [r4, #14]
 8016a0c:	f000 faa6 	bl	8016f5c <uxr_seq_num_add>
 8016a10:	8921      	ldrh	r1, [r4, #8]
 8016a12:	4605      	mov	r5, r0
 8016a14:	8a60      	ldrh	r0, [r4, #18]
 8016a16:	f000 faa1 	bl	8016f5c <uxr_seq_num_add>
 8016a1a:	4601      	mov	r1, r0
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	f000 faa5 	bl	8016f6c <uxr_seq_num_cmp>
 8016a22:	2800      	cmp	r0, #0
 8016a24:	dd45      	ble.n	8016ab2 <uxr_prepare_reliable_buffer_to_write+0x28e>
 8016a26:	2000      	movs	r0, #0
 8016a28:	b011      	add	sp, #68	@ 0x44
 8016a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a2e:	8921      	ldrh	r1, [r4, #8]
 8016a30:	8a60      	ldrh	r0, [r4, #18]
 8016a32:	9205      	str	r2, [sp, #20]
 8016a34:	f000 fa92 	bl	8016f5c <uxr_seq_num_add>
 8016a38:	4601      	mov	r1, r0
 8016a3a:	4638      	mov	r0, r7
 8016a3c:	f000 fa96 	bl	8016f6c <uxr_seq_num_cmp>
 8016a40:	2800      	cmp	r0, #0
 8016a42:	9a05      	ldr	r2, [sp, #20]
 8016a44:	dcef      	bgt.n	8016a26 <uxr_prepare_reliable_buffer_to_write+0x202>
 8016a46:	8926      	ldrh	r6, [r4, #8]
 8016a48:	fbb7 f5f6 	udiv	r5, r7, r6
 8016a4c:	fb06 7515 	mls	r5, r6, r5, r7
 8016a50:	b2ad      	uxth	r5, r5
 8016a52:	6863      	ldr	r3, [r4, #4]
 8016a54:	6824      	ldr	r4, [r4, #0]
 8016a56:	fbb3 f3f6 	udiv	r3, r3, r6
 8016a5a:	fb05 f303 	mul.w	r3, r5, r3
 8016a5e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016a62:	50e2      	str	r2, [r4, r3]
 8016a64:	2300      	movs	r3, #0
 8016a66:	f8cd a000 	str.w	sl, [sp]
 8016a6a:	f7f6 fc35 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 8016a6e:	e7c9      	b.n	8016a04 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8016a70:	f10c 0c01 	add.w	ip, ip, #1
 8016a74:	fa1f fc8c 	uxth.w	ip, ip
 8016a78:	45b4      	cmp	ip, r6
 8016a7a:	9306      	str	r3, [sp, #24]
 8016a7c:	d8d3      	bhi.n	8016a26 <uxr_prepare_reliable_buffer_to_write+0x202>
 8016a7e:	e739      	b.n	80168f4 <uxr_prepare_reliable_buffer_to_write+0xd0>
 8016a80:	4638      	mov	r0, r7
 8016a82:	2101      	movs	r1, #1
 8016a84:	9307      	str	r3, [sp, #28]
 8016a86:	f000 fa69 	bl	8016f5c <uxr_seq_num_add>
 8016a8a:	8921      	ldrh	r1, [r4, #8]
 8016a8c:	6862      	ldr	r2, [r4, #4]
 8016a8e:	4607      	mov	r7, r0
 8016a90:	fbb0 f0f1 	udiv	r0, r0, r1
 8016a94:	fb01 7010 	mls	r0, r1, r0, r7
 8016a98:	b280      	uxth	r0, r0
 8016a9a:	fbb2 f1f1 	udiv	r1, r2, r1
 8016a9e:	6822      	ldr	r2, [r4, #0]
 8016aa0:	fb00 f101 	mul.w	r1, r0, r1
 8016aa4:	3104      	adds	r1, #4
 8016aa6:	1853      	adds	r3, r2, r1
 8016aa8:	9303      	str	r3, [sp, #12]
 8016aaa:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8016aae:	9b07      	ldr	r3, [sp, #28]
 8016ab0:	e70b      	b.n	80168ca <uxr_prepare_reliable_buffer_to_write+0xa6>
 8016ab2:	8921      	ldrh	r1, [r4, #8]
 8016ab4:	fbb5 f2f1 	udiv	r2, r5, r1
 8016ab8:	fb01 5212 	mls	r2, r1, r2, r5
 8016abc:	b292      	uxth	r2, r2
 8016abe:	6863      	ldr	r3, [r4, #4]
 8016ac0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016ac4:	6821      	ldr	r1, [r4, #0]
 8016ac6:	9804      	ldr	r0, [sp, #16]
 8016ac8:	fb02 f303 	mul.w	r3, r2, r3
 8016acc:	3304      	adds	r3, #4
 8016ace:	7b22      	ldrb	r2, [r4, #12]
 8016ad0:	4419      	add	r1, r3
 8016ad2:	4442      	add	r2, r8
 8016ad4:	f841 2c04 	str.w	r2, [r1, #-4]
 8016ad8:	7b23      	ldrb	r3, [r4, #12]
 8016ada:	9300      	str	r3, [sp, #0]
 8016adc:	2300      	movs	r3, #0
 8016ade:	f7f6 fbfb 	bl	800d2d8 <ucdr_init_buffer_origin_offset>
 8016ae2:	81e5      	strh	r5, [r4, #14]
 8016ae4:	e78e      	b.n	8016a04 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8016ae6:	4606      	mov	r6, r0
 8016ae8:	e6cc      	b.n	8016884 <uxr_prepare_reliable_buffer_to_write+0x60>
 8016aea:	bf00      	nop
 8016aec:	08016709 	.word	0x08016709

08016af0 <uxr_prepare_next_reliable_buffer_to_send>:
 8016af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af2:	4604      	mov	r4, r0
 8016af4:	460f      	mov	r7, r1
 8016af6:	8a00      	ldrh	r0, [r0, #16]
 8016af8:	2101      	movs	r1, #1
 8016afa:	4615      	mov	r5, r2
 8016afc:	461e      	mov	r6, r3
 8016afe:	f000 fa2d 	bl	8016f5c <uxr_seq_num_add>
 8016b02:	8030      	strh	r0, [r6, #0]
 8016b04:	8922      	ldrh	r2, [r4, #8]
 8016b06:	fbb0 f3f2 	udiv	r3, r0, r2
 8016b0a:	fb02 0c13 	mls	ip, r2, r3, r0
 8016b0e:	fa1f fc8c 	uxth.w	ip, ip
 8016b12:	6863      	ldr	r3, [r4, #4]
 8016b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b18:	fb0c fc03 	mul.w	ip, ip, r3
 8016b1c:	6823      	ldr	r3, [r4, #0]
 8016b1e:	89e1      	ldrh	r1, [r4, #14]
 8016b20:	f10c 0c04 	add.w	ip, ip, #4
 8016b24:	4463      	add	r3, ip
 8016b26:	603b      	str	r3, [r7, #0]
 8016b28:	6823      	ldr	r3, [r4, #0]
 8016b2a:	4463      	add	r3, ip
 8016b2c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016b30:	602b      	str	r3, [r5, #0]
 8016b32:	f000 fa1b 	bl	8016f6c <uxr_seq_num_cmp>
 8016b36:	2800      	cmp	r0, #0
 8016b38:	dd01      	ble.n	8016b3e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016b3a:	2000      	movs	r0, #0
 8016b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b3e:	7b23      	ldrb	r3, [r4, #12]
 8016b40:	682a      	ldr	r2, [r5, #0]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d9f9      	bls.n	8016b3a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016b46:	8a61      	ldrh	r1, [r4, #18]
 8016b48:	8a20      	ldrh	r0, [r4, #16]
 8016b4a:	f000 fa0b 	bl	8016f64 <uxr_seq_num_sub>
 8016b4e:	8923      	ldrh	r3, [r4, #8]
 8016b50:	4283      	cmp	r3, r0
 8016b52:	d0f2      	beq.n	8016b3a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016b54:	8830      	ldrh	r0, [r6, #0]
 8016b56:	89e3      	ldrh	r3, [r4, #14]
 8016b58:	8220      	strh	r0, [r4, #16]
 8016b5a:	4298      	cmp	r0, r3
 8016b5c:	d001      	beq.n	8016b62 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016b5e:	2001      	movs	r0, #1
 8016b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b62:	2101      	movs	r1, #1
 8016b64:	f000 f9fa 	bl	8016f5c <uxr_seq_num_add>
 8016b68:	81e0      	strh	r0, [r4, #14]
 8016b6a:	e7f8      	b.n	8016b5e <uxr_prepare_next_reliable_buffer_to_send+0x6e>

08016b6c <uxr_update_output_stream_heartbeat_timestamp>:
 8016b6c:	b570      	push	{r4, r5, r6, lr}
 8016b6e:	8a01      	ldrh	r1, [r0, #16]
 8016b70:	4604      	mov	r4, r0
 8016b72:	8a40      	ldrh	r0, [r0, #18]
 8016b74:	4615      	mov	r5, r2
 8016b76:	461e      	mov	r6, r3
 8016b78:	f000 f9f8 	bl	8016f6c <uxr_seq_num_cmp>
 8016b7c:	2800      	cmp	r0, #0
 8016b7e:	db07      	blt.n	8016b90 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016b80:	f04f 35ff 	mov.w	r5, #4294967295
 8016b84:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8016b88:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016b8c:	2000      	movs	r0, #0
 8016b8e:	bd70      	pop	{r4, r5, r6, pc}
 8016b90:	f894 3020 	ldrb.w	r3, [r4, #32]
 8016b94:	b953      	cbnz	r3, 8016bac <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8016b96:	2301      	movs	r3, #1
 8016b98:	f884 3020 	strb.w	r3, [r4, #32]
 8016b9c:	3564      	adds	r5, #100	@ 0x64
 8016b9e:	f04f 0000 	mov.w	r0, #0
 8016ba2:	f146 0600 	adc.w	r6, r6, #0
 8016ba6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016baa:	bd70      	pop	{r4, r5, r6, pc}
 8016bac:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016bb0:	428d      	cmp	r5, r1
 8016bb2:	eb76 0202 	sbcs.w	r2, r6, r2
 8016bb6:	dbf1      	blt.n	8016b9c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016bb8:	3301      	adds	r3, #1
 8016bba:	3564      	adds	r5, #100	@ 0x64
 8016bbc:	f884 3020 	strb.w	r3, [r4, #32]
 8016bc0:	f04f 0001 	mov.w	r0, #1
 8016bc4:	f146 0600 	adc.w	r6, r6, #0
 8016bc8:	e7ed      	b.n	8016ba6 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8016bca:	bf00      	nop

08016bcc <uxr_begin_output_nack_buffer_it>:
 8016bcc:	8a40      	ldrh	r0, [r0, #18]
 8016bce:	4770      	bx	lr

08016bd0 <uxr_next_reliable_nack_buffer_to_send>:
 8016bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016bd8:	f1b8 0f00 	cmp.w	r8, #0
 8016bdc:	d104      	bne.n	8016be8 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8016bde:	f04f 0800 	mov.w	r8, #0
 8016be2:	4640      	mov	r0, r8
 8016be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be8:	4604      	mov	r4, r0
 8016bea:	460e      	mov	r6, r1
 8016bec:	8818      	ldrh	r0, [r3, #0]
 8016bee:	4617      	mov	r7, r2
 8016bf0:	461d      	mov	r5, r3
 8016bf2:	e019      	b.n	8016c28 <uxr_next_reliable_nack_buffer_to_send+0x58>
 8016bf4:	8921      	ldrh	r1, [r4, #8]
 8016bf6:	8828      	ldrh	r0, [r5, #0]
 8016bf8:	fbb0 fcf1 	udiv	ip, r0, r1
 8016bfc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016c00:	fb01 0c1c 	mls	ip, r1, ip, r0
 8016c04:	fa1f fc8c 	uxth.w	ip, ip
 8016c08:	fbb2 f2f1 	udiv	r2, r2, r1
 8016c0c:	fb02 fc0c 	mul.w	ip, r2, ip
 8016c10:	f10c 0c04 	add.w	ip, ip, #4
 8016c14:	4463      	add	r3, ip
 8016c16:	6033      	str	r3, [r6, #0]
 8016c18:	6823      	ldr	r3, [r4, #0]
 8016c1a:	4463      	add	r3, ip
 8016c1c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016c20:	603b      	str	r3, [r7, #0]
 8016c22:	7b22      	ldrb	r2, [r4, #12]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d1dc      	bne.n	8016be2 <uxr_next_reliable_nack_buffer_to_send+0x12>
 8016c28:	2101      	movs	r1, #1
 8016c2a:	f000 f997 	bl	8016f5c <uxr_seq_num_add>
 8016c2e:	8028      	strh	r0, [r5, #0]
 8016c30:	8a21      	ldrh	r1, [r4, #16]
 8016c32:	f000 f99b 	bl	8016f6c <uxr_seq_num_cmp>
 8016c36:	2800      	cmp	r0, #0
 8016c38:	dddc      	ble.n	8016bf4 <uxr_next_reliable_nack_buffer_to_send+0x24>
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8016c40:	e7cd      	b.n	8016bde <uxr_next_reliable_nack_buffer_to_send+0xe>
 8016c42:	bf00      	nop

08016c44 <uxr_process_acknack>:
 8016c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c46:	4604      	mov	r4, r0
 8016c48:	460e      	mov	r6, r1
 8016c4a:	4610      	mov	r0, r2
 8016c4c:	2101      	movs	r1, #1
 8016c4e:	f000 f989 	bl	8016f64 <uxr_seq_num_sub>
 8016c52:	8a61      	ldrh	r1, [r4, #18]
 8016c54:	f000 f986 	bl	8016f64 <uxr_seq_num_sub>
 8016c58:	b1c0      	cbz	r0, 8016c8c <uxr_process_acknack+0x48>
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	2700      	movs	r7, #0
 8016c5e:	2101      	movs	r1, #1
 8016c60:	8a60      	ldrh	r0, [r4, #18]
 8016c62:	f000 f97b 	bl	8016f5c <uxr_seq_num_add>
 8016c66:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016c6a:	fbb0 f1fc 	udiv	r1, r0, ip
 8016c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016c72:	fb0c 0111 	mls	r1, ip, r1, r0
 8016c76:	b289      	uxth	r1, r1
 8016c78:	3701      	adds	r7, #1
 8016c7a:	fbb3 f3fc 	udiv	r3, r3, ip
 8016c7e:	fb01 f303 	mul.w	r3, r1, r3
 8016c82:	42bd      	cmp	r5, r7
 8016c84:	7b21      	ldrb	r1, [r4, #12]
 8016c86:	8260      	strh	r0, [r4, #18]
 8016c88:	50d1      	str	r1, [r2, r3]
 8016c8a:	d1e8      	bne.n	8016c5e <uxr_process_acknack+0x1a>
 8016c8c:	3e00      	subs	r6, #0
 8016c8e:	f04f 0300 	mov.w	r3, #0
 8016c92:	bf18      	it	ne
 8016c94:	2601      	movne	r6, #1
 8016c96:	f884 3020 	strb.w	r3, [r4, #32]
 8016c9a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016ca0 <uxr_is_output_up_to_date>:
 8016ca0:	8a01      	ldrh	r1, [r0, #16]
 8016ca2:	8a40      	ldrh	r0, [r0, #18]
 8016ca4:	b508      	push	{r3, lr}
 8016ca6:	f000 f961 	bl	8016f6c <uxr_seq_num_cmp>
 8016caa:	fab0 f080 	clz	r0, r0
 8016cae:	0940      	lsrs	r0, r0, #5
 8016cb0:	bd08      	pop	{r3, pc}
 8016cb2:	bf00      	nop

08016cb4 <get_available_free_slots>:
 8016cb4:	8901      	ldrh	r1, [r0, #8]
 8016cb6:	b1c1      	cbz	r1, 8016cea <get_available_free_slots+0x36>
 8016cb8:	b530      	push	{r4, r5, lr}
 8016cba:	2200      	movs	r2, #0
 8016cbc:	6843      	ldr	r3, [r0, #4]
 8016cbe:	6805      	ldr	r5, [r0, #0]
 8016cc0:	7b04      	ldrb	r4, [r0, #12]
 8016cc2:	fbb3 fef1 	udiv	lr, r3, r1
 8016cc6:	4610      	mov	r0, r2
 8016cc8:	b293      	uxth	r3, r2
 8016cca:	fbb3 fcf1 	udiv	ip, r3, r1
 8016cce:	fb01 331c 	mls	r3, r1, ip, r3
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	fb0e f303 	mul.w	r3, lr, r3
 8016cd8:	3201      	adds	r2, #1
 8016cda:	58eb      	ldr	r3, [r5, r3]
 8016cdc:	429c      	cmp	r4, r3
 8016cde:	bf04      	itt	eq
 8016ce0:	3001      	addeq	r0, #1
 8016ce2:	b280      	uxtheq	r0, r0
 8016ce4:	4291      	cmp	r1, r2
 8016ce6:	d1ef      	bne.n	8016cc8 <get_available_free_slots+0x14>
 8016ce8:	bd30      	pop	{r4, r5, pc}
 8016cea:	4608      	mov	r0, r1
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop

08016cf0 <uxr_buffer_request_data>:
 8016cf0:	b530      	push	{r4, r5, lr}
 8016cf2:	b095      	sub	sp, #84	@ 0x54
 8016cf4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016cf8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8016cfa:	f88d 301c 	strb.w	r3, [sp, #28]
 8016cfe:	2200      	movs	r2, #0
 8016d00:	2d00      	cmp	r5, #0
 8016d02:	bf14      	ite	ne
 8016d04:	2101      	movne	r1, #1
 8016d06:	4611      	moveq	r1, r2
 8016d08:	4604      	mov	r4, r0
 8016d0a:	f88d 201d 	strb.w	r2, [sp, #29]
 8016d0e:	f88d 201e 	strb.w	r2, [sp, #30]
 8016d12:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8016d16:	d021      	beq.n	8016d5c <uxr_buffer_request_data+0x6c>
 8016d18:	682a      	ldr	r2, [r5, #0]
 8016d1a:	686b      	ldr	r3, [r5, #4]
 8016d1c:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8016d20:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016d24:	2210      	movs	r2, #16
 8016d26:	2308      	movs	r3, #8
 8016d28:	2100      	movs	r1, #0
 8016d2a:	e9cd 3100 	strd	r3, r1, [sp]
 8016d2e:	4620      	mov	r0, r4
 8016d30:	9905      	ldr	r1, [sp, #20]
 8016d32:	ab0c      	add	r3, sp, #48	@ 0x30
 8016d34:	f7f7 feca 	bl	800eacc <uxr_prepare_stream_to_write_submessage>
 8016d38:	b918      	cbnz	r0, 8016d42 <uxr_buffer_request_data+0x52>
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	b015      	add	sp, #84	@ 0x54
 8016d40:	bd30      	pop	{r4, r5, pc}
 8016d42:	9904      	ldr	r1, [sp, #16]
 8016d44:	aa06      	add	r2, sp, #24
 8016d46:	4620      	mov	r0, r4
 8016d48:	f7f7 fffa 	bl	800ed40 <uxr_init_base_object_request>
 8016d4c:	a906      	add	r1, sp, #24
 8016d4e:	4604      	mov	r4, r0
 8016d50:	a80c      	add	r0, sp, #48	@ 0x30
 8016d52:	f7f9 ff2b 	bl	8010bac <uxr_serialize_READ_DATA_Payload>
 8016d56:	4620      	mov	r0, r4
 8016d58:	b015      	add	sp, #84	@ 0x54
 8016d5a:	bd30      	pop	{r4, r5, pc}
 8016d5c:	2208      	movs	r2, #8
 8016d5e:	e7e2      	b.n	8016d26 <uxr_buffer_request_data+0x36>

08016d60 <uxr_buffer_cancel_data>:
 8016d60:	b510      	push	{r4, lr}
 8016d62:	b094      	sub	sp, #80	@ 0x50
 8016d64:	2300      	movs	r3, #0
 8016d66:	9301      	str	r3, [sp, #4]
 8016d68:	9205      	str	r2, [sp, #20]
 8016d6a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016d6e:	2201      	movs	r2, #1
 8016d70:	f88d 301e 	strb.w	r3, [sp, #30]
 8016d74:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8016d78:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016d7c:	2308      	movs	r3, #8
 8016d7e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016d82:	9300      	str	r3, [sp, #0]
 8016d84:	2210      	movs	r2, #16
 8016d86:	ab0c      	add	r3, sp, #48	@ 0x30
 8016d88:	4604      	mov	r4, r0
 8016d8a:	f7f7 fe9f 	bl	800eacc <uxr_prepare_stream_to_write_submessage>
 8016d8e:	b918      	cbnz	r0, 8016d98 <uxr_buffer_cancel_data+0x38>
 8016d90:	4604      	mov	r4, r0
 8016d92:	4620      	mov	r0, r4
 8016d94:	b014      	add	sp, #80	@ 0x50
 8016d96:	bd10      	pop	{r4, pc}
 8016d98:	9905      	ldr	r1, [sp, #20]
 8016d9a:	aa06      	add	r2, sp, #24
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f7f7 ffcf 	bl	800ed40 <uxr_init_base_object_request>
 8016da2:	a906      	add	r1, sp, #24
 8016da4:	4604      	mov	r4, r0
 8016da6:	a80c      	add	r0, sp, #48	@ 0x30
 8016da8:	f7f9 ff00 	bl	8010bac <uxr_serialize_READ_DATA_Payload>
 8016dac:	4620      	mov	r0, r4
 8016dae:	b014      	add	sp, #80	@ 0x50
 8016db0:	bd10      	pop	{r4, pc}
 8016db2:	bf00      	nop

08016db4 <read_submessage_format>:
 8016db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016db8:	b095      	sub	sp, #84	@ 0x54
 8016dba:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8016dbe:	b113      	cbz	r3, 8016dc6 <read_submessage_format+0x12>
 8016dc0:	b015      	add	sp, #84	@ 0x54
 8016dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dc6:	460c      	mov	r4, r1
 8016dc8:	4616      	mov	r6, r2
 8016dca:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016dce:	461d      	mov	r5, r3
 8016dd0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016dd2:	9304      	str	r3, [sp, #16]
 8016dd4:	1a52      	subs	r2, r2, r1
 8016dd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016dd8:	9305      	str	r3, [sp, #20]
 8016dda:	4680      	mov	r8, r0
 8016ddc:	a80c      	add	r0, sp, #48	@ 0x30
 8016dde:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 8016de2:	f7f6 fa8b 	bl	800d2fc <ucdr_init_buffer>
 8016de6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016dea:	a80c      	add	r0, sp, #48	@ 0x30
 8016dec:	f7f6 fa5a 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 8016df0:	69e3      	ldr	r3, [r4, #28]
 8016df2:	b35b      	cbz	r3, 8016e4c <read_submessage_format+0x98>
 8016df4:	f1b9 0f07 	cmp.w	r9, #7
 8016df8:	751d      	strb	r5, [r3, #20]
 8016dfa:	d043      	beq.n	8016e84 <read_submessage_format+0xd0>
 8016dfc:	f1b9 0f08 	cmp.w	r9, #8
 8016e00:	d032      	beq.n	8016e68 <read_submessage_format+0xb4>
 8016e02:	f1b9 0f06 	cmp.w	r9, #6
 8016e06:	d008      	beq.n	8016e1a <read_submessage_format+0x66>
 8016e08:	2201      	movs	r2, #1
 8016e0a:	751a      	strb	r2, [r3, #20]
 8016e0c:	4631      	mov	r1, r6
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f7f6 fac4 	bl	800d39c <ucdr_advance_buffer>
 8016e14:	b015      	add	sp, #84	@ 0x54
 8016e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e1a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8016e1e:	2d00      	cmp	r5, #0
 8016e20:	d0f2      	beq.n	8016e08 <read_submessage_format+0x54>
 8016e22:	ab0c      	add	r3, sp, #48	@ 0x30
 8016e24:	e9cd 3600 	strd	r3, r6, [sp]
 8016e28:	2306      	movs	r3, #6
 8016e2a:	f88d 3016 	strb.w	r3, [sp, #22]
 8016e2e:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 8016e32:	9302      	str	r3, [sp, #8]
 8016e34:	463a      	mov	r2, r7
 8016e36:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016e3a:	4640      	mov	r0, r8
 8016e3c:	47a8      	blx	r5
 8016e3e:	69e3      	ldr	r3, [r4, #28]
 8016e40:	2201      	movs	r2, #1
 8016e42:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d1de      	bne.n	8016e08 <read_submessage_format+0x54>
 8016e4a:	e7df      	b.n	8016e0c <read_submessage_format+0x58>
 8016e4c:	f1b9 0f07 	cmp.w	r9, #7
 8016e50:	d032      	beq.n	8016eb8 <read_submessage_format+0x104>
 8016e52:	f1b9 0f08 	cmp.w	r9, #8
 8016e56:	d02a      	beq.n	8016eae <read_submessage_format+0xfa>
 8016e58:	f1b9 0f06 	cmp.w	r9, #6
 8016e5c:	d1d6      	bne.n	8016e0c <read_submessage_format+0x58>
 8016e5e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8016e62:	2d00      	cmp	r5, #0
 8016e64:	d1dd      	bne.n	8016e22 <read_submessage_format+0x6e>
 8016e66:	e7d1      	b.n	8016e0c <read_submessage_format+0x58>
 8016e68:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8016e6c:	2a00      	cmp	r2, #0
 8016e6e:	d0cb      	beq.n	8016e08 <read_submessage_format+0x54>
 8016e70:	a906      	add	r1, sp, #24
 8016e72:	a80c      	add	r0, sp, #48	@ 0x30
 8016e74:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016e76:	f7f9 ff5f 	bl	8010d38 <uxr_deserialize_SampleIdentity>
 8016e7a:	bb28      	cbnz	r0, 8016ec8 <read_submessage_format+0x114>
 8016e7c:	69e3      	ldr	r3, [r4, #28]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d1c2      	bne.n	8016e08 <read_submessage_format+0x54>
 8016e82:	e7c3      	b.n	8016e0c <read_submessage_format+0x58>
 8016e84:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8016e88:	b16a      	cbz	r2, 8016ea6 <read_submessage_format+0xf2>
 8016e8a:	a906      	add	r1, sp, #24
 8016e8c:	a80c      	add	r0, sp, #48	@ 0x30
 8016e8e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016e90:	f7f9 fc2c 	bl	80106ec <uxr_deserialize_BaseObjectRequest>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	d13a      	bne.n	8016f0e <read_submessage_format+0x15a>
 8016e98:	68a2      	ldr	r2, [r4, #8]
 8016e9a:	69e3      	ldr	r3, [r4, #28]
 8016e9c:	4432      	add	r2, r6
 8016e9e:	60a2      	str	r2, [r4, #8]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d1b1      	bne.n	8016e08 <read_submessage_format+0x54>
 8016ea4:	e7b2      	b.n	8016e0c <read_submessage_format+0x58>
 8016ea6:	68a2      	ldr	r2, [r4, #8]
 8016ea8:	4432      	add	r2, r6
 8016eaa:	60a2      	str	r2, [r4, #8]
 8016eac:	e7ac      	b.n	8016e08 <read_submessage_format+0x54>
 8016eae:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d1dc      	bne.n	8016e70 <read_submessage_format+0xbc>
 8016eb6:	e7a9      	b.n	8016e0c <read_submessage_format+0x58>
 8016eb8:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d1e4      	bne.n	8016e8a <read_submessage_format+0xd6>
 8016ec0:	68a3      	ldr	r3, [r4, #8]
 8016ec2:	4433      	add	r3, r6
 8016ec4:	60a3      	str	r3, [r4, #8]
 8016ec6:	e7a1      	b.n	8016e0c <read_submessage_format+0x58>
 8016ec8:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016ecc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016ece:	1a52      	subs	r2, r2, r1
 8016ed0:	1aed      	subs	r5, r5, r3
 8016ed2:	a80c      	add	r0, sp, #48	@ 0x30
 8016ed4:	f7f6 fa12 	bl	800d2fc <ucdr_init_buffer>
 8016ed8:	4435      	add	r5, r6
 8016eda:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016ede:	a80c      	add	r0, sp, #48	@ 0x30
 8016ee0:	f7f6 f9e0 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 8016ee4:	b2ad      	uxth	r5, r5
 8016ee6:	ab0c      	add	r3, sp, #48	@ 0x30
 8016ee8:	9300      	str	r3, [sp, #0]
 8016eea:	9501      	str	r5, [sp, #4]
 8016eec:	2108      	movs	r1, #8
 8016eee:	f88d 1016 	strb.w	r1, [sp, #22]
 8016ef2:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8016ef6:	9102      	str	r1, [sp, #8]
 8016ef8:	ab06      	add	r3, sp, #24
 8016efa:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 8016efe:	9905      	ldr	r1, [sp, #20]
 8016f00:	463a      	mov	r2, r7
 8016f02:	4640      	mov	r0, r8
 8016f04:	47a8      	blx	r5
 8016f06:	2301      	movs	r3, #1
 8016f08:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8016f0c:	e7b6      	b.n	8016e7c <read_submessage_format+0xc8>
 8016f0e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016f12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f14:	1a52      	subs	r2, r2, r1
 8016f16:	1aed      	subs	r5, r5, r3
 8016f18:	a80c      	add	r0, sp, #48	@ 0x30
 8016f1a:	f7f6 f9ef 	bl	800d2fc <ucdr_init_buffer>
 8016f1e:	4435      	add	r5, r6
 8016f20:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016f24:	a80c      	add	r0, sp, #48	@ 0x30
 8016f26:	f7f6 f9bd 	bl	800d2a4 <ucdr_set_on_full_buffer_callback>
 8016f2a:	b2ad      	uxth	r5, r5
 8016f2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8016f2e:	9300      	str	r3, [sp, #0]
 8016f30:	9501      	str	r5, [sp, #4]
 8016f32:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016f36:	2107      	movs	r1, #7
 8016f38:	f88d 1016 	strb.w	r1, [sp, #22]
 8016f3c:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8016f40:	9102      	str	r1, [sp, #8]
 8016f42:	ba5b      	rev16	r3, r3
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8016f4a:	9905      	ldr	r1, [sp, #20]
 8016f4c:	463a      	mov	r2, r7
 8016f4e:	4640      	mov	r0, r8
 8016f50:	47a8      	blx	r5
 8016f52:	2301      	movs	r3, #1
 8016f54:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8016f58:	e79e      	b.n	8016e98 <read_submessage_format+0xe4>
 8016f5a:	bf00      	nop

08016f5c <uxr_seq_num_add>:
 8016f5c:	4408      	add	r0, r1
 8016f5e:	b280      	uxth	r0, r0
 8016f60:	4770      	bx	lr
 8016f62:	bf00      	nop

08016f64 <uxr_seq_num_sub>:
 8016f64:	1a40      	subs	r0, r0, r1
 8016f66:	b280      	uxth	r0, r0
 8016f68:	4770      	bx	lr
 8016f6a:	bf00      	nop

08016f6c <uxr_seq_num_cmp>:
 8016f6c:	4288      	cmp	r0, r1
 8016f6e:	d010      	beq.n	8016f92 <uxr_seq_num_cmp+0x26>
 8016f70:	d207      	bcs.n	8016f82 <uxr_seq_num_cmp+0x16>
 8016f72:	1a09      	subs	r1, r1, r0
 8016f74:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016f78:	bfb4      	ite	lt
 8016f7a:	f04f 30ff 	movlt.w	r0, #4294967295
 8016f7e:	2001      	movge	r0, #1
 8016f80:	4770      	bx	lr
 8016f82:	1a41      	subs	r1, r0, r1
 8016f84:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016f88:	bfcc      	ite	gt
 8016f8a:	f04f 30ff 	movgt.w	r0, #4294967295
 8016f8e:	2001      	movle	r0, #1
 8016f90:	4770      	bx	lr
 8016f92:	2000      	movs	r0, #0
 8016f94:	4770      	bx	lr
 8016f96:	bf00      	nop

08016f98 <rcl_get_automatic_discovery_range>:
 8016f98:	b530      	push	{r4, r5, lr}
 8016f9a:	b083      	sub	sp, #12
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	9301      	str	r3, [sp, #4]
 8016fa0:	b1c0      	cbz	r0, 8016fd4 <rcl_get_automatic_discovery_range+0x3c>
 8016fa2:	4604      	mov	r4, r0
 8016fa4:	a901      	add	r1, sp, #4
 8016fa6:	4818      	ldr	r0, [pc, #96]	@ (8017008 <rcl_get_automatic_discovery_range+0x70>)
 8016fa8:	f7fc ff38 	bl	8013e1c <rcutils_get_env>
 8016fac:	b110      	cbz	r0, 8016fb4 <rcl_get_automatic_discovery_range+0x1c>
 8016fae:	2001      	movs	r0, #1
 8016fb0:	b003      	add	sp, #12
 8016fb2:	bd30      	pop	{r4, r5, pc}
 8016fb4:	9d01      	ldr	r5, [sp, #4]
 8016fb6:	782b      	ldrb	r3, [r5, #0]
 8016fb8:	b923      	cbnz	r3, 8016fc4 <rcl_get_automatic_discovery_range+0x2c>
 8016fba:	2303      	movs	r3, #3
 8016fbc:	7023      	strb	r3, [r4, #0]
 8016fbe:	2000      	movs	r0, #0
 8016fc0:	b003      	add	sp, #12
 8016fc2:	bd30      	pop	{r4, r5, pc}
 8016fc4:	4911      	ldr	r1, [pc, #68]	@ (801700c <rcl_get_automatic_discovery_range+0x74>)
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f7e9 f922 	bl	8000210 <strcmp>
 8016fcc:	b928      	cbnz	r0, 8016fda <rcl_get_automatic_discovery_range+0x42>
 8016fce:	2301      	movs	r3, #1
 8016fd0:	7023      	strb	r3, [r4, #0]
 8016fd2:	e7f4      	b.n	8016fbe <rcl_get_automatic_discovery_range+0x26>
 8016fd4:	200b      	movs	r0, #11
 8016fd6:	b003      	add	sp, #12
 8016fd8:	bd30      	pop	{r4, r5, pc}
 8016fda:	490d      	ldr	r1, [pc, #52]	@ (8017010 <rcl_get_automatic_discovery_range+0x78>)
 8016fdc:	4628      	mov	r0, r5
 8016fde:	f7e9 f917 	bl	8000210 <strcmp>
 8016fe2:	b168      	cbz	r0, 8017000 <rcl_get_automatic_discovery_range+0x68>
 8016fe4:	490b      	ldr	r1, [pc, #44]	@ (8017014 <rcl_get_automatic_discovery_range+0x7c>)
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	f7e9 f912 	bl	8000210 <strcmp>
 8016fec:	2800      	cmp	r0, #0
 8016fee:	d0e4      	beq.n	8016fba <rcl_get_automatic_discovery_range+0x22>
 8016ff0:	4909      	ldr	r1, [pc, #36]	@ (8017018 <rcl_get_automatic_discovery_range+0x80>)
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	f7e9 f90c 	bl	8000210 <strcmp>
 8016ff8:	b910      	cbnz	r0, 8017000 <rcl_get_automatic_discovery_range+0x68>
 8016ffa:	2304      	movs	r3, #4
 8016ffc:	7023      	strb	r3, [r4, #0]
 8016ffe:	e7de      	b.n	8016fbe <rcl_get_automatic_discovery_range+0x26>
 8017000:	2302      	movs	r3, #2
 8017002:	7023      	strb	r3, [r4, #0]
 8017004:	e7db      	b.n	8016fbe <rcl_get_automatic_discovery_range+0x26>
 8017006:	bf00      	nop
 8017008:	08019d9c 	.word	0x08019d9c
 801700c:	08019dbc 	.word	0x08019dbc
 8017010:	08019dc0 	.word	0x08019dc0
 8017014:	08019dcc 	.word	0x08019dcc
 8017018:	08019dd4 	.word	0x08019dd4

0801701c <rcl_automatic_discovery_range_to_string>:
 801701c:	2804      	cmp	r0, #4
 801701e:	bf9a      	itte	ls
 8017020:	4b02      	ldrls	r3, [pc, #8]	@ (801702c <rcl_automatic_discovery_range_to_string+0x10>)
 8017022:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017026:	2000      	movhi	r0, #0
 8017028:	4770      	bx	lr
 801702a:	bf00      	nop
 801702c:	0801a5f4 	.word	0x0801a5f4

08017030 <rcl_get_discovery_static_peers>:
 8017030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017034:	b08c      	sub	sp, #48	@ 0x30
 8017036:	2300      	movs	r3, #0
 8017038:	9304      	str	r3, [sp, #16]
 801703a:	2800      	cmp	r0, #0
 801703c:	d04e      	beq.n	80170dc <rcl_get_discovery_static_peers+0xac>
 801703e:	460d      	mov	r5, r1
 8017040:	2900      	cmp	r1, #0
 8017042:	d04b      	beq.n	80170dc <rcl_get_discovery_static_peers+0xac>
 8017044:	4604      	mov	r4, r0
 8017046:	a904      	add	r1, sp, #16
 8017048:	482d      	ldr	r0, [pc, #180]	@ (8017100 <rcl_get_discovery_static_peers+0xd0>)
 801704a:	f7fc fee7 	bl	8013e1c <rcutils_get_env>
 801704e:	b118      	cbz	r0, 8017058 <rcl_get_discovery_static_peers+0x28>
 8017050:	2001      	movs	r0, #1
 8017052:	b00c      	add	sp, #48	@ 0x30
 8017054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017058:	9b04      	ldr	r3, [sp, #16]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d0f8      	beq.n	8017050 <rcl_get_discovery_static_peers+0x20>
 801705e:	af05      	add	r7, sp, #20
 8017060:	4638      	mov	r0, r7
 8017062:	f000 fc7f 	bl	8017964 <rcutils_get_zero_initialized_string_array>
 8017066:	f105 0308 	add.w	r3, r5, #8
 801706a:	9703      	str	r7, [sp, #12]
 801706c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017070:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017074:	9804      	ldr	r0, [sp, #16]
 8017076:	e895 000c 	ldmia.w	r5, {r2, r3}
 801707a:	213b      	movs	r1, #59	@ 0x3b
 801707c:	f000 fbc2 	bl	8017804 <rcutils_split>
 8017080:	2800      	cmp	r0, #0
 8017082:	d1e5      	bne.n	8017050 <rcl_get_discovery_static_peers+0x20>
 8017084:	9905      	ldr	r1, [sp, #20]
 8017086:	462a      	mov	r2, r5
 8017088:	4620      	mov	r0, r4
 801708a:	f000 fcc3 	bl	8017a14 <rmw_discovery_options_init>
 801708e:	4606      	mov	r6, r0
 8017090:	bb90      	cbnz	r0, 80170f8 <rcl_get_discovery_static_peers+0xc8>
 8017092:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017096:	f1b9 0f00 	cmp.w	r9, #0
 801709a:	d026      	beq.n	80170ea <rcl_get_discovery_static_peers+0xba>
 801709c:	f8dd a018 	ldr.w	sl, [sp, #24]
 80170a0:	4680      	mov	r8, r0
 80170a2:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 80170a6:	4628      	mov	r0, r5
 80170a8:	f7e9 f912 	bl	80002d0 <strlen>
 80170ac:	28ff      	cmp	r0, #255	@ 0xff
 80170ae:	4629      	mov	r1, r5
 80170b0:	ea4f 2506 	mov.w	r5, r6, lsl #8
 80170b4:	d816      	bhi.n	80170e4 <rcl_get_discovery_static_peers+0xb4>
 80170b6:	6860      	ldr	r0, [r4, #4]
 80170b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80170bc:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80170c0:	f001 fb93 	bl	80187ea <strncpy>
 80170c4:	6863      	ldr	r3, [r4, #4]
 80170c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80170ca:	3601      	adds	r6, #1
 80170cc:	442b      	add	r3, r5
 80170ce:	454e      	cmp	r6, r9
 80170d0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 80170d4:	d209      	bcs.n	80170ea <rcl_get_discovery_static_peers+0xba>
 80170d6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80170da:	e7e2      	b.n	80170a2 <rcl_get_discovery_static_peers+0x72>
 80170dc:	200b      	movs	r0, #11
 80170de:	b00c      	add	sp, #48	@ 0x30
 80170e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170e4:	3601      	adds	r6, #1
 80170e6:	454e      	cmp	r6, r9
 80170e8:	d3db      	bcc.n	80170a2 <rcl_get_discovery_static_peers+0x72>
 80170ea:	4638      	mov	r0, r7
 80170ec:	f000 fc6c 	bl	80179c8 <rcutils_string_array_fini>
 80170f0:	3800      	subs	r0, #0
 80170f2:	bf18      	it	ne
 80170f4:	2001      	movne	r0, #1
 80170f6:	e7ac      	b.n	8017052 <rcl_get_discovery_static_peers+0x22>
 80170f8:	f7f9 ff18 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 80170fc:	e7a9      	b.n	8017052 <rcl_get_discovery_static_peers+0x22>
 80170fe:	bf00      	nop
 8017100:	08019de4 	.word	0x08019de4

08017104 <rcl_get_default_domain_id>:
 8017104:	b530      	push	{r4, r5, lr}
 8017106:	b083      	sub	sp, #12
 8017108:	2300      	movs	r3, #0
 801710a:	9300      	str	r3, [sp, #0]
 801710c:	b1f0      	cbz	r0, 801714c <rcl_get_default_domain_id+0x48>
 801710e:	4604      	mov	r4, r0
 8017110:	4669      	mov	r1, sp
 8017112:	4812      	ldr	r0, [pc, #72]	@ (801715c <rcl_get_default_domain_id+0x58>)
 8017114:	f7fc fe82 	bl	8013e1c <rcutils_get_env>
 8017118:	4602      	mov	r2, r0
 801711a:	b108      	cbz	r0, 8017120 <rcl_get_default_domain_id+0x1c>
 801711c:	2001      	movs	r0, #1
 801711e:	e004      	b.n	801712a <rcl_get_default_domain_id+0x26>
 8017120:	9800      	ldr	r0, [sp, #0]
 8017122:	b108      	cbz	r0, 8017128 <rcl_get_default_domain_id+0x24>
 8017124:	7803      	ldrb	r3, [r0, #0]
 8017126:	b913      	cbnz	r3, 801712e <rcl_get_default_domain_id+0x2a>
 8017128:	2000      	movs	r0, #0
 801712a:	b003      	add	sp, #12
 801712c:	bd30      	pop	{r4, r5, pc}
 801712e:	a901      	add	r1, sp, #4
 8017130:	9201      	str	r2, [sp, #4]
 8017132:	f001 f899 	bl	8018268 <strtoul>
 8017136:	4605      	mov	r5, r0
 8017138:	b158      	cbz	r0, 8017152 <rcl_get_default_domain_id+0x4e>
 801713a:	1c43      	adds	r3, r0, #1
 801713c:	d104      	bne.n	8017148 <rcl_get_default_domain_id+0x44>
 801713e:	f001 fbd3 	bl	80188e8 <__errno>
 8017142:	6803      	ldr	r3, [r0, #0]
 8017144:	2b22      	cmp	r3, #34	@ 0x22
 8017146:	d0e9      	beq.n	801711c <rcl_get_default_domain_id+0x18>
 8017148:	6025      	str	r5, [r4, #0]
 801714a:	e7ed      	b.n	8017128 <rcl_get_default_domain_id+0x24>
 801714c:	200b      	movs	r0, #11
 801714e:	b003      	add	sp, #12
 8017150:	bd30      	pop	{r4, r5, pc}
 8017152:	9b01      	ldr	r3, [sp, #4]
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d0f6      	beq.n	8017148 <rcl_get_default_domain_id+0x44>
 801715a:	e7df      	b.n	801711c <rcl_get_default_domain_id+0x18>
 801715c:	08019ec4 	.word	0x08019ec4

08017160 <rcl_expand_topic_name>:
 8017160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017164:	b08b      	sub	sp, #44	@ 0x2c
 8017166:	9306      	str	r3, [sp, #24]
 8017168:	2800      	cmp	r0, #0
 801716a:	f000 80ad 	beq.w	80172c8 <rcl_expand_topic_name+0x168>
 801716e:	460e      	mov	r6, r1
 8017170:	2900      	cmp	r1, #0
 8017172:	f000 80a9 	beq.w	80172c8 <rcl_expand_topic_name+0x168>
 8017176:	4617      	mov	r7, r2
 8017178:	2a00      	cmp	r2, #0
 801717a:	f000 80a5 	beq.w	80172c8 <rcl_expand_topic_name+0x168>
 801717e:	2b00      	cmp	r3, #0
 8017180:	f000 80a2 	beq.w	80172c8 <rcl_expand_topic_name+0x168>
 8017184:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017186:	2b00      	cmp	r3, #0
 8017188:	f000 809e 	beq.w	80172c8 <rcl_expand_topic_name+0x168>
 801718c:	2200      	movs	r2, #0
 801718e:	a909      	add	r1, sp, #36	@ 0x24
 8017190:	4680      	mov	r8, r0
 8017192:	f000 fa45 	bl	8017620 <rcl_validate_topic_name>
 8017196:	4605      	mov	r5, r0
 8017198:	2800      	cmp	r0, #0
 801719a:	f040 8096 	bne.w	80172ca <rcl_expand_topic_name+0x16a>
 801719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	f040 809a 	bne.w	80172da <rcl_expand_topic_name+0x17a>
 80171a6:	4602      	mov	r2, r0
 80171a8:	a909      	add	r1, sp, #36	@ 0x24
 80171aa:	4630      	mov	r0, r6
 80171ac:	f7fd fa8e 	bl	80146cc <rmw_validate_node_name>
 80171b0:	2800      	cmp	r0, #0
 80171b2:	f040 808e 	bne.w	80172d2 <rcl_expand_topic_name+0x172>
 80171b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171b8:	2a00      	cmp	r2, #0
 80171ba:	f040 8093 	bne.w	80172e4 <rcl_expand_topic_name+0x184>
 80171be:	a909      	add	r1, sp, #36	@ 0x24
 80171c0:	4638      	mov	r0, r7
 80171c2:	f7fd fa65 	bl	8014690 <rmw_validate_namespace>
 80171c6:	2800      	cmp	r0, #0
 80171c8:	f040 8083 	bne.w	80172d2 <rcl_expand_topic_name+0x172>
 80171cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80171ce:	2d00      	cmp	r5, #0
 80171d0:	f040 80f5 	bne.w	80173be <rcl_expand_topic_name+0x25e>
 80171d4:	217b      	movs	r1, #123	@ 0x7b
 80171d6:	4640      	mov	r0, r8
 80171d8:	f001 fae8 	bl	80187ac <strchr>
 80171dc:	f898 3000 	ldrb.w	r3, [r8]
 80171e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80171e2:	4604      	mov	r4, r0
 80171e4:	f000 809f 	beq.w	8017326 <rcl_expand_topic_name+0x1c6>
 80171e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80171ea:	f040 80ea 	bne.w	80173c2 <rcl_expand_topic_name+0x262>
 80171ee:	4638      	mov	r0, r7
 80171f0:	f7e9 f86e 	bl	80002d0 <strlen>
 80171f4:	4a86      	ldr	r2, [pc, #536]	@ (8017410 <rcl_expand_topic_name+0x2b0>)
 80171f6:	4b87      	ldr	r3, [pc, #540]	@ (8017414 <rcl_expand_topic_name+0x2b4>)
 80171f8:	2801      	cmp	r0, #1
 80171fa:	bf08      	it	eq
 80171fc:	4613      	moveq	r3, r2
 80171fe:	9302      	str	r3, [sp, #8]
 8017200:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017208:	f108 0301 	add.w	r3, r8, #1
 801720c:	9305      	str	r3, [sp, #20]
 801720e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017212:	9301      	str	r3, [sp, #4]
 8017214:	ab14      	add	r3, sp, #80	@ 0x50
 8017216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017218:	f7fc fe18 	bl	8013e4c <rcutils_format_string_limit>
 801721c:	4682      	mov	sl, r0
 801721e:	2800      	cmp	r0, #0
 8017220:	f000 80e1 	beq.w	80173e6 <rcl_expand_topic_name+0x286>
 8017224:	2c00      	cmp	r4, #0
 8017226:	f000 8085 	beq.w	8017334 <rcl_expand_topic_name+0x1d4>
 801722a:	217b      	movs	r1, #123	@ 0x7b
 801722c:	f001 fabe 	bl	80187ac <strchr>
 8017230:	46d1      	mov	r9, sl
 8017232:	4604      	mov	r4, r0
 8017234:	9507      	str	r5, [sp, #28]
 8017236:	464d      	mov	r5, r9
 8017238:	2c00      	cmp	r4, #0
 801723a:	f000 80a1 	beq.w	8017380 <rcl_expand_topic_name+0x220>
 801723e:	217d      	movs	r1, #125	@ 0x7d
 8017240:	4628      	mov	r0, r5
 8017242:	f001 fab3 	bl	80187ac <strchr>
 8017246:	eba0 0904 	sub.w	r9, r0, r4
 801724a:	f109 0b01 	add.w	fp, r9, #1
 801724e:	4872      	ldr	r0, [pc, #456]	@ (8017418 <rcl_expand_topic_name+0x2b8>)
 8017250:	465a      	mov	r2, fp
 8017252:	4621      	mov	r1, r4
 8017254:	f001 fab7 	bl	80187c6 <strncmp>
 8017258:	2800      	cmp	r0, #0
 801725a:	d069      	beq.n	8017330 <rcl_expand_topic_name+0x1d0>
 801725c:	486f      	ldr	r0, [pc, #444]	@ (801741c <rcl_expand_topic_name+0x2bc>)
 801725e:	465a      	mov	r2, fp
 8017260:	4621      	mov	r1, r4
 8017262:	f001 fab0 	bl	80187c6 <strncmp>
 8017266:	b130      	cbz	r0, 8017276 <rcl_expand_topic_name+0x116>
 8017268:	486d      	ldr	r0, [pc, #436]	@ (8017420 <rcl_expand_topic_name+0x2c0>)
 801726a:	465a      	mov	r2, fp
 801726c:	4621      	mov	r1, r4
 801726e:	f001 faaa 	bl	80187c6 <strncmp>
 8017272:	2800      	cmp	r0, #0
 8017274:	d138      	bne.n	80172e8 <rcl_expand_topic_name+0x188>
 8017276:	46b9      	mov	r9, r7
 8017278:	ab16      	add	r3, sp, #88	@ 0x58
 801727a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801727e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017282:	ab14      	add	r3, sp, #80	@ 0x50
 8017284:	4620      	mov	r0, r4
 8017286:	cb0c      	ldmia	r3, {r2, r3}
 8017288:	4659      	mov	r1, fp
 801728a:	f7fc ff33 	bl	80140f4 <rcutils_strndup>
 801728e:	4604      	mov	r4, r0
 8017290:	2800      	cmp	r0, #0
 8017292:	f000 8099 	beq.w	80173c8 <rcl_expand_topic_name+0x268>
 8017296:	464a      	mov	r2, r9
 8017298:	4628      	mov	r0, r5
 801729a:	ab14      	add	r3, sp, #80	@ 0x50
 801729c:	4621      	mov	r1, r4
 801729e:	f7fc fe0f 	bl	8013ec0 <rcutils_repl_str>
 80172a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80172a4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80172a6:	4605      	mov	r5, r0
 80172a8:	4620      	mov	r0, r4
 80172aa:	4798      	blx	r3
 80172ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80172ae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80172b0:	4650      	mov	r0, sl
 80172b2:	4798      	blx	r3
 80172b4:	2d00      	cmp	r5, #0
 80172b6:	f000 8091 	beq.w	80173dc <rcl_expand_topic_name+0x27c>
 80172ba:	217b      	movs	r1, #123	@ 0x7b
 80172bc:	4628      	mov	r0, r5
 80172be:	f001 fa75 	bl	80187ac <strchr>
 80172c2:	46aa      	mov	sl, r5
 80172c4:	4604      	mov	r4, r0
 80172c6:	e7b7      	b.n	8017238 <rcl_expand_topic_name+0xd8>
 80172c8:	250b      	movs	r5, #11
 80172ca:	4628      	mov	r0, r5
 80172cc:	b00b      	add	sp, #44	@ 0x2c
 80172ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d2:	f7f9 fe2b 	bl	8010f2c <rcl_convert_rmw_ret_to_rcl_ret>
 80172d6:	4605      	mov	r5, r0
 80172d8:	e7f7      	b.n	80172ca <rcl_expand_topic_name+0x16a>
 80172da:	2567      	movs	r5, #103	@ 0x67
 80172dc:	4628      	mov	r0, r5
 80172de:	b00b      	add	sp, #44	@ 0x2c
 80172e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e4:	25c9      	movs	r5, #201	@ 0xc9
 80172e6:	e7f0      	b.n	80172ca <rcl_expand_topic_name+0x16a>
 80172e8:	f109 32ff 	add.w	r2, r9, #4294967295
 80172ec:	9806      	ldr	r0, [sp, #24]
 80172ee:	1c61      	adds	r1, r4, #1
 80172f0:	f7fd f81c 	bl	801432c <rcutils_string_map_getn>
 80172f4:	4681      	mov	r9, r0
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d1be      	bne.n	8017278 <rcl_expand_topic_name+0x118>
 80172fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80172fc:	ab16      	add	r3, sp, #88	@ 0x58
 80172fe:	6010      	str	r0, [r2, #0]
 8017300:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017304:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017308:	ab14      	add	r3, sp, #80	@ 0x50
 801730a:	cb0c      	ldmia	r3, {r2, r3}
 801730c:	4659      	mov	r1, fp
 801730e:	4620      	mov	r0, r4
 8017310:	f7fc fef0 	bl	80140f4 <rcutils_strndup>
 8017314:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017316:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017318:	4798      	blx	r3
 801731a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801731c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801731e:	4650      	mov	r0, sl
 8017320:	4798      	blx	r3
 8017322:	2569      	movs	r5, #105	@ 0x69
 8017324:	e7d1      	b.n	80172ca <rcl_expand_topic_name+0x16a>
 8017326:	2800      	cmp	r0, #0
 8017328:	d061      	beq.n	80173ee <rcl_expand_topic_name+0x28e>
 801732a:	46c1      	mov	r9, r8
 801732c:	46aa      	mov	sl, r5
 801732e:	e781      	b.n	8017234 <rcl_expand_topic_name+0xd4>
 8017330:	46b1      	mov	r9, r6
 8017332:	e7a1      	b.n	8017278 <rcl_expand_topic_name+0x118>
 8017334:	f89a 3000 	ldrb.w	r3, [sl]
 8017338:	2b2f      	cmp	r3, #47	@ 0x2f
 801733a:	d01d      	beq.n	8017378 <rcl_expand_topic_name+0x218>
 801733c:	4638      	mov	r0, r7
 801733e:	f7e8 ffc7 	bl	80002d0 <strlen>
 8017342:	4a38      	ldr	r2, [pc, #224]	@ (8017424 <rcl_expand_topic_name+0x2c4>)
 8017344:	4b38      	ldr	r3, [pc, #224]	@ (8017428 <rcl_expand_topic_name+0x2c8>)
 8017346:	f8cd a010 	str.w	sl, [sp, #16]
 801734a:	2801      	cmp	r0, #1
 801734c:	bf18      	it	ne
 801734e:	4613      	movne	r3, r2
 8017350:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017354:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017358:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801735a:	9703      	str	r7, [sp, #12]
 801735c:	9200      	str	r2, [sp, #0]
 801735e:	ab14      	add	r3, sp, #80	@ 0x50
 8017360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017362:	f7fc fd73 	bl	8013e4c <rcutils_format_string_limit>
 8017366:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017368:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801736a:	4604      	mov	r4, r0
 801736c:	4650      	mov	r0, sl
 801736e:	4798      	blx	r3
 8017370:	46a2      	mov	sl, r4
 8017372:	4653      	mov	r3, sl
 8017374:	2b00      	cmp	r3, #0
 8017376:	d036      	beq.n	80173e6 <rcl_expand_topic_name+0x286>
 8017378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801737a:	f8c3 a000 	str.w	sl, [r3]
 801737e:	e7a4      	b.n	80172ca <rcl_expand_topic_name+0x16a>
 8017380:	4653      	mov	r3, sl
 8017382:	9d07      	ldr	r5, [sp, #28]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d1d5      	bne.n	8017334 <rcl_expand_topic_name+0x1d4>
 8017388:	f898 3000 	ldrb.w	r3, [r8]
 801738c:	2b2f      	cmp	r3, #47	@ 0x2f
 801738e:	d0f3      	beq.n	8017378 <rcl_expand_topic_name+0x218>
 8017390:	4638      	mov	r0, r7
 8017392:	f7e8 ff9d 	bl	80002d0 <strlen>
 8017396:	4a23      	ldr	r2, [pc, #140]	@ (8017424 <rcl_expand_topic_name+0x2c4>)
 8017398:	4b23      	ldr	r3, [pc, #140]	@ (8017428 <rcl_expand_topic_name+0x2c8>)
 801739a:	f8cd 8010 	str.w	r8, [sp, #16]
 801739e:	2801      	cmp	r0, #1
 80173a0:	bf18      	it	ne
 80173a2:	4613      	movne	r3, r2
 80173a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80173a8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80173ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80173ae:	9703      	str	r7, [sp, #12]
 80173b0:	9200      	str	r2, [sp, #0]
 80173b2:	ab14      	add	r3, sp, #80	@ 0x50
 80173b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80173b6:	f7fc fd49 	bl	8013e4c <rcutils_format_string_limit>
 80173ba:	4682      	mov	sl, r0
 80173bc:	e7d9      	b.n	8017372 <rcl_expand_topic_name+0x212>
 80173be:	25ca      	movs	r5, #202	@ 0xca
 80173c0:	e783      	b.n	80172ca <rcl_expand_topic_name+0x16a>
 80173c2:	2800      	cmp	r0, #0
 80173c4:	d1b1      	bne.n	801732a <rcl_expand_topic_name+0x1ca>
 80173c6:	e7e3      	b.n	8017390 <rcl_expand_topic_name+0x230>
 80173c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80173ca:	6018      	str	r0, [r3, #0]
 80173cc:	f7f3 fe78 	bl	800b0c0 <rcutils_reset_error>
 80173d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80173d2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80173d4:	4650      	mov	r0, sl
 80173d6:	4798      	blx	r3
 80173d8:	250a      	movs	r5, #10
 80173da:	e776      	b.n	80172ca <rcl_expand_topic_name+0x16a>
 80173dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80173de:	601d      	str	r5, [r3, #0]
 80173e0:	f7f3 fe6e 	bl	800b0c0 <rcutils_reset_error>
 80173e4:	e7f8      	b.n	80173d8 <rcl_expand_topic_name+0x278>
 80173e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80173e8:	2300      	movs	r3, #0
 80173ea:	6013      	str	r3, [r2, #0]
 80173ec:	e7f4      	b.n	80173d8 <rcl_expand_topic_name+0x278>
 80173ee:	ab17      	add	r3, sp, #92	@ 0x5c
 80173f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80173f4:	e88d 0003 	stmia.w	sp, {r0, r1}
 80173f8:	ab14      	add	r3, sp, #80	@ 0x50
 80173fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80173fc:	4640      	mov	r0, r8
 80173fe:	f7fc fe43 	bl	8014088 <rcutils_strdup>
 8017402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017404:	6018      	str	r0, [r3, #0]
 8017406:	2800      	cmp	r0, #0
 8017408:	f47f af5f 	bne.w	80172ca <rcl_expand_topic_name+0x16a>
 801740c:	e7e8      	b.n	80173e0 <rcl_expand_topic_name+0x280>
 801740e:	bf00      	nop
 8017410:	08019890 	.word	0x08019890
 8017414:	08019ed4 	.word	0x08019ed4
 8017418:	08019edc 	.word	0x08019edc
 801741c:	08019ee4 	.word	0x08019ee4
 8017420:	08019eec 	.word	0x08019eec
 8017424:	08019a00 	.word	0x08019a00
 8017428:	080198a0 	.word	0x080198a0

0801742c <rcl_get_default_topic_name_substitutions>:
 801742c:	2800      	cmp	r0, #0
 801742e:	bf0c      	ite	eq
 8017430:	200b      	moveq	r0, #11
 8017432:	2000      	movne	r0, #0
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop

08017438 <rcl_get_zero_initialized_guard_condition>:
 8017438:	4a03      	ldr	r2, [pc, #12]	@ (8017448 <rcl_get_zero_initialized_guard_condition+0x10>)
 801743a:	4603      	mov	r3, r0
 801743c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017440:	e883 0003 	stmia.w	r3, {r0, r1}
 8017444:	4618      	mov	r0, r3
 8017446:	4770      	bx	lr
 8017448:	0801a608 	.word	0x0801a608

0801744c <rcl_guard_condition_init>:
 801744c:	b082      	sub	sp, #8
 801744e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017450:	b087      	sub	sp, #28
 8017452:	ac0c      	add	r4, sp, #48	@ 0x30
 8017454:	e884 000c 	stmia.w	r4, {r2, r3}
 8017458:	46a6      	mov	lr, r4
 801745a:	460d      	mov	r5, r1
 801745c:	4604      	mov	r4, r0
 801745e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017462:	f10d 0c04 	add.w	ip, sp, #4
 8017466:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801746a:	f8de 3000 	ldr.w	r3, [lr]
 801746e:	f8cc 3000 	str.w	r3, [ip]
 8017472:	a801      	add	r0, sp, #4
 8017474:	f7f3 fdf8 	bl	800b068 <rcutils_allocator_is_valid>
 8017478:	b338      	cbz	r0, 80174ca <rcl_guard_condition_init+0x7e>
 801747a:	b334      	cbz	r4, 80174ca <rcl_guard_condition_init+0x7e>
 801747c:	6866      	ldr	r6, [r4, #4]
 801747e:	b9ee      	cbnz	r6, 80174bc <rcl_guard_condition_init+0x70>
 8017480:	b31d      	cbz	r5, 80174ca <rcl_guard_condition_init+0x7e>
 8017482:	4628      	mov	r0, r5
 8017484:	f7f9 fd6c 	bl	8010f60 <rcl_context_is_valid>
 8017488:	b308      	cbz	r0, 80174ce <rcl_guard_condition_init+0x82>
 801748a:	9b01      	ldr	r3, [sp, #4]
 801748c:	9905      	ldr	r1, [sp, #20]
 801748e:	201c      	movs	r0, #28
 8017490:	4798      	blx	r3
 8017492:	4607      	mov	r7, r0
 8017494:	6060      	str	r0, [r4, #4]
 8017496:	b310      	cbz	r0, 80174de <rcl_guard_condition_init+0x92>
 8017498:	6828      	ldr	r0, [r5, #0]
 801749a:	3028      	adds	r0, #40	@ 0x28
 801749c:	f000 fc06 	bl	8017cac <rmw_create_guard_condition>
 80174a0:	6038      	str	r0, [r7, #0]
 80174a2:	6860      	ldr	r0, [r4, #4]
 80174a4:	6807      	ldr	r7, [r0, #0]
 80174a6:	b1a7      	cbz	r7, 80174d2 <rcl_guard_condition_init+0x86>
 80174a8:	2301      	movs	r3, #1
 80174aa:	ac01      	add	r4, sp, #4
 80174ac:	7103      	strb	r3, [r0, #4]
 80174ae:	f100 0708 	add.w	r7, r0, #8
 80174b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80174b6:	6823      	ldr	r3, [r4, #0]
 80174b8:	603b      	str	r3, [r7, #0]
 80174ba:	e000      	b.n	80174be <rcl_guard_condition_init+0x72>
 80174bc:	2664      	movs	r6, #100	@ 0x64
 80174be:	4630      	mov	r0, r6
 80174c0:	b007      	add	sp, #28
 80174c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80174c6:	b002      	add	sp, #8
 80174c8:	4770      	bx	lr
 80174ca:	260b      	movs	r6, #11
 80174cc:	e7f7      	b.n	80174be <rcl_guard_condition_init+0x72>
 80174ce:	2665      	movs	r6, #101	@ 0x65
 80174d0:	e7f5      	b.n	80174be <rcl_guard_condition_init+0x72>
 80174d2:	9b02      	ldr	r3, [sp, #8]
 80174d4:	9905      	ldr	r1, [sp, #20]
 80174d6:	4798      	blx	r3
 80174d8:	2601      	movs	r6, #1
 80174da:	6067      	str	r7, [r4, #4]
 80174dc:	e7ef      	b.n	80174be <rcl_guard_condition_init+0x72>
 80174de:	260a      	movs	r6, #10
 80174e0:	e7ed      	b.n	80174be <rcl_guard_condition_init+0x72>
 80174e2:	bf00      	nop

080174e4 <rcl_guard_condition_init_from_rmw>:
 80174e4:	b082      	sub	sp, #8
 80174e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ea:	b086      	sub	sp, #24
 80174ec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80174f0:	4604      	mov	r4, r0
 80174f2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80174f6:	460e      	mov	r6, r1
 80174f8:	4617      	mov	r7, r2
 80174fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80174fe:	f10d 0e04 	add.w	lr, sp, #4
 8017502:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017506:	f8dc 3000 	ldr.w	r3, [ip]
 801750a:	f8ce 3000 	str.w	r3, [lr]
 801750e:	a801      	add	r0, sp, #4
 8017510:	f7f3 fdaa 	bl	800b068 <rcutils_allocator_is_valid>
 8017514:	b350      	cbz	r0, 801756c <rcl_guard_condition_init_from_rmw+0x88>
 8017516:	b34c      	cbz	r4, 801756c <rcl_guard_condition_init_from_rmw+0x88>
 8017518:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801751c:	f1b8 0f00 	cmp.w	r8, #0
 8017520:	d11e      	bne.n	8017560 <rcl_guard_condition_init_from_rmw+0x7c>
 8017522:	b31f      	cbz	r7, 801756c <rcl_guard_condition_init_from_rmw+0x88>
 8017524:	4638      	mov	r0, r7
 8017526:	f7f9 fd1b 	bl	8010f60 <rcl_context_is_valid>
 801752a:	b328      	cbz	r0, 8017578 <rcl_guard_condition_init_from_rmw+0x94>
 801752c:	9b01      	ldr	r3, [sp, #4]
 801752e:	9905      	ldr	r1, [sp, #20]
 8017530:	201c      	movs	r0, #28
 8017532:	4798      	blx	r3
 8017534:	4605      	mov	r5, r0
 8017536:	6060      	str	r0, [r4, #4]
 8017538:	b358      	cbz	r0, 8017592 <rcl_guard_condition_init_from_rmw+0xae>
 801753a:	b1fe      	cbz	r6, 801757c <rcl_guard_condition_init_from_rmw+0x98>
 801753c:	6006      	str	r6, [r0, #0]
 801753e:	f880 8004 	strb.w	r8, [r0, #4]
 8017542:	ac01      	add	r4, sp, #4
 8017544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017546:	f105 0c08 	add.w	ip, r5, #8
 801754a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	f8cc 3000 	str.w	r3, [ip]
 8017554:	2000      	movs	r0, #0
 8017556:	b006      	add	sp, #24
 8017558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801755c:	b002      	add	sp, #8
 801755e:	4770      	bx	lr
 8017560:	2064      	movs	r0, #100	@ 0x64
 8017562:	b006      	add	sp, #24
 8017564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017568:	b002      	add	sp, #8
 801756a:	4770      	bx	lr
 801756c:	200b      	movs	r0, #11
 801756e:	b006      	add	sp, #24
 8017570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017574:	b002      	add	sp, #8
 8017576:	4770      	bx	lr
 8017578:	2065      	movs	r0, #101	@ 0x65
 801757a:	e7f2      	b.n	8017562 <rcl_guard_condition_init_from_rmw+0x7e>
 801757c:	6838      	ldr	r0, [r7, #0]
 801757e:	3028      	adds	r0, #40	@ 0x28
 8017580:	f000 fb94 	bl	8017cac <rmw_create_guard_condition>
 8017584:	6028      	str	r0, [r5, #0]
 8017586:	6865      	ldr	r5, [r4, #4]
 8017588:	682e      	ldr	r6, [r5, #0]
 801758a:	b126      	cbz	r6, 8017596 <rcl_guard_condition_init_from_rmw+0xb2>
 801758c:	2301      	movs	r3, #1
 801758e:	712b      	strb	r3, [r5, #4]
 8017590:	e7d7      	b.n	8017542 <rcl_guard_condition_init_from_rmw+0x5e>
 8017592:	200a      	movs	r0, #10
 8017594:	e7e5      	b.n	8017562 <rcl_guard_condition_init_from_rmw+0x7e>
 8017596:	4628      	mov	r0, r5
 8017598:	9b02      	ldr	r3, [sp, #8]
 801759a:	9905      	ldr	r1, [sp, #20]
 801759c:	4798      	blx	r3
 801759e:	2001      	movs	r0, #1
 80175a0:	6066      	str	r6, [r4, #4]
 80175a2:	e7de      	b.n	8017562 <rcl_guard_condition_init_from_rmw+0x7e>

080175a4 <rcl_guard_condition_fini>:
 80175a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175a6:	b1d8      	cbz	r0, 80175e0 <rcl_guard_condition_fini+0x3c>
 80175a8:	4604      	mov	r4, r0
 80175aa:	6840      	ldr	r0, [r0, #4]
 80175ac:	b158      	cbz	r0, 80175c6 <rcl_guard_condition_fini+0x22>
 80175ae:	6803      	ldr	r3, [r0, #0]
 80175b0:	68c6      	ldr	r6, [r0, #12]
 80175b2:	6987      	ldr	r7, [r0, #24]
 80175b4:	b153      	cbz	r3, 80175cc <rcl_guard_condition_fini+0x28>
 80175b6:	7905      	ldrb	r5, [r0, #4]
 80175b8:	b955      	cbnz	r5, 80175d0 <rcl_guard_condition_fini+0x2c>
 80175ba:	4639      	mov	r1, r7
 80175bc:	47b0      	blx	r6
 80175be:	2300      	movs	r3, #0
 80175c0:	6063      	str	r3, [r4, #4]
 80175c2:	4628      	mov	r0, r5
 80175c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175c6:	4605      	mov	r5, r0
 80175c8:	4628      	mov	r0, r5
 80175ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175cc:	461d      	mov	r5, r3
 80175ce:	e7f4      	b.n	80175ba <rcl_guard_condition_fini+0x16>
 80175d0:	4618      	mov	r0, r3
 80175d2:	f000 fb7f 	bl	8017cd4 <rmw_destroy_guard_condition>
 80175d6:	1e05      	subs	r5, r0, #0
 80175d8:	bf18      	it	ne
 80175da:	2501      	movne	r5, #1
 80175dc:	6860      	ldr	r0, [r4, #4]
 80175de:	e7ec      	b.n	80175ba <rcl_guard_condition_fini+0x16>
 80175e0:	250b      	movs	r5, #11
 80175e2:	4628      	mov	r0, r5
 80175e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175e6:	bf00      	nop

080175e8 <rcl_guard_condition_get_default_options>:
 80175e8:	b510      	push	{r4, lr}
 80175ea:	4604      	mov	r4, r0
 80175ec:	f7f3 fd10 	bl	800b010 <rcutils_get_default_allocator>
 80175f0:	4620      	mov	r0, r4
 80175f2:	bd10      	pop	{r4, pc}

080175f4 <rcl_trigger_guard_condition>:
 80175f4:	b148      	cbz	r0, 801760a <rcl_trigger_guard_condition+0x16>
 80175f6:	b508      	push	{r3, lr}
 80175f8:	6843      	ldr	r3, [r0, #4]
 80175fa:	b143      	cbz	r3, 801760e <rcl_trigger_guard_condition+0x1a>
 80175fc:	6818      	ldr	r0, [r3, #0]
 80175fe:	f000 fb7d 	bl	8017cfc <rmw_trigger_guard_condition>
 8017602:	3800      	subs	r0, #0
 8017604:	bf18      	it	ne
 8017606:	2001      	movne	r0, #1
 8017608:	bd08      	pop	{r3, pc}
 801760a:	200b      	movs	r0, #11
 801760c:	4770      	bx	lr
 801760e:	200b      	movs	r0, #11
 8017610:	bd08      	pop	{r3, pc}
 8017612:	bf00      	nop

08017614 <rcl_guard_condition_get_rmw_handle>:
 8017614:	b110      	cbz	r0, 801761c <rcl_guard_condition_get_rmw_handle+0x8>
 8017616:	6840      	ldr	r0, [r0, #4]
 8017618:	b100      	cbz	r0, 801761c <rcl_guard_condition_get_rmw_handle+0x8>
 801761a:	6800      	ldr	r0, [r0, #0]
 801761c:	4770      	bx	lr
 801761e:	bf00      	nop

08017620 <rcl_validate_topic_name>:
 8017620:	2800      	cmp	r0, #0
 8017622:	d06b      	beq.n	80176fc <rcl_validate_topic_name+0xdc>
 8017624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017628:	460d      	mov	r5, r1
 801762a:	2900      	cmp	r1, #0
 801762c:	d06d      	beq.n	801770a <rcl_validate_topic_name+0xea>
 801762e:	4616      	mov	r6, r2
 8017630:	4604      	mov	r4, r0
 8017632:	f7e8 fe4d 	bl	80002d0 <strlen>
 8017636:	b190      	cbz	r0, 801765e <rcl_validate_topic_name+0x3e>
 8017638:	7821      	ldrb	r1, [r4, #0]
 801763a:	4a71      	ldr	r2, [pc, #452]	@ (8017800 <rcl_validate_topic_name+0x1e0>)
 801763c:	5c53      	ldrb	r3, [r2, r1]
 801763e:	f013 0304 	ands.w	r3, r3, #4
 8017642:	d15d      	bne.n	8017700 <rcl_validate_topic_name+0xe0>
 8017644:	1e47      	subs	r7, r0, #1
 8017646:	f814 c007 	ldrb.w	ip, [r4, r7]
 801764a:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801764e:	d10d      	bne.n	801766c <rcl_validate_topic_name+0x4c>
 8017650:	2302      	movs	r3, #2
 8017652:	602b      	str	r3, [r5, #0]
 8017654:	b146      	cbz	r6, 8017668 <rcl_validate_topic_name+0x48>
 8017656:	6037      	str	r7, [r6, #0]
 8017658:	2000      	movs	r0, #0
 801765a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801765e:	2301      	movs	r3, #1
 8017660:	602b      	str	r3, [r5, #0]
 8017662:	b10e      	cbz	r6, 8017668 <rcl_validate_topic_name+0x48>
 8017664:	2300      	movs	r3, #0
 8017666:	6033      	str	r3, [r6, #0]
 8017668:	2000      	movs	r0, #0
 801766a:	e7f6      	b.n	801765a <rcl_validate_topic_name+0x3a>
 801766c:	f104 38ff 	add.w	r8, r4, #4294967295
 8017670:	469a      	mov	sl, r3
 8017672:	469e      	mov	lr, r3
 8017674:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8017678:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801767c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8017680:	d85b      	bhi.n	801773a <rcl_validate_topic_name+0x11a>
 8017682:	e8df f00c 	tbb	[pc, ip]
 8017686:	4463      	.short	0x4463
 8017688:	44444444 	.word	0x44444444
 801768c:	44444444 	.word	0x44444444
 8017690:	5a5a5a44 	.word	0x5a5a5a44
 8017694:	5a5a5a5a 	.word	0x5a5a5a5a
 8017698:	44444444 	.word	0x44444444
 801769c:	44444444 	.word	0x44444444
 80176a0:	44444444 	.word	0x44444444
 80176a4:	44444444 	.word	0x44444444
 80176a8:	44444444 	.word	0x44444444
 80176ac:	44444444 	.word	0x44444444
 80176b0:	5a5a4444 	.word	0x5a5a4444
 80176b4:	5a2e5a5a 	.word	0x5a2e5a5a
 80176b8:	44444444 	.word	0x44444444
 80176bc:	44444444 	.word	0x44444444
 80176c0:	44444444 	.word	0x44444444
 80176c4:	44444444 	.word	0x44444444
 80176c8:	44444444 	.word	0x44444444
 80176cc:	44444444 	.word	0x44444444
 80176d0:	5a284444 	.word	0x5a284444
 80176d4:	6b73      	.short	0x6b73
 80176d6:	f1ba 0f00 	cmp.w	sl, #0
 80176da:	d13a      	bne.n	8017752 <rcl_validate_topic_name+0x132>
 80176dc:	4673      	mov	r3, lr
 80176de:	f04f 0a01 	mov.w	sl, #1
 80176e2:	f10e 0e01 	add.w	lr, lr, #1
 80176e6:	4570      	cmp	r0, lr
 80176e8:	d1c4      	bne.n	8017674 <rcl_validate_topic_name+0x54>
 80176ea:	f1ba 0f00 	cmp.w	sl, #0
 80176ee:	d048      	beq.n	8017782 <rcl_validate_topic_name+0x162>
 80176f0:	2205      	movs	r2, #5
 80176f2:	602a      	str	r2, [r5, #0]
 80176f4:	2e00      	cmp	r6, #0
 80176f6:	d0b7      	beq.n	8017668 <rcl_validate_topic_name+0x48>
 80176f8:	6033      	str	r3, [r6, #0]
 80176fa:	e7b5      	b.n	8017668 <rcl_validate_topic_name+0x48>
 80176fc:	200b      	movs	r0, #11
 80176fe:	4770      	bx	lr
 8017700:	2304      	movs	r3, #4
 8017702:	602b      	str	r3, [r5, #0]
 8017704:	2e00      	cmp	r6, #0
 8017706:	d1ad      	bne.n	8017664 <rcl_validate_topic_name+0x44>
 8017708:	e7ae      	b.n	8017668 <rcl_validate_topic_name+0x48>
 801770a:	200b      	movs	r0, #11
 801770c:	e7a5      	b.n	801765a <rcl_validate_topic_name+0x3a>
 801770e:	f812 c009 	ldrb.w	ip, [r2, r9]
 8017712:	f01c 0f04 	tst.w	ip, #4
 8017716:	d0e4      	beq.n	80176e2 <rcl_validate_topic_name+0xc2>
 8017718:	f1ba 0f00 	cmp.w	sl, #0
 801771c:	d0e1      	beq.n	80176e2 <rcl_validate_topic_name+0xc2>
 801771e:	f1be 0f00 	cmp.w	lr, #0
 8017722:	d0de      	beq.n	80176e2 <rcl_validate_topic_name+0xc2>
 8017724:	f10e 3cff 	add.w	ip, lr, #4294967295
 8017728:	4563      	cmp	r3, ip
 801772a:	d1da      	bne.n	80176e2 <rcl_validate_topic_name+0xc2>
 801772c:	2309      	movs	r3, #9
 801772e:	602b      	str	r3, [r5, #0]
 8017730:	2e00      	cmp	r6, #0
 8017732:	d099      	beq.n	8017668 <rcl_validate_topic_name+0x48>
 8017734:	f8c6 e000 	str.w	lr, [r6]
 8017738:	e796      	b.n	8017668 <rcl_validate_topic_name+0x48>
 801773a:	f1ba 0f00 	cmp.w	sl, #0
 801773e:	bf0c      	ite	eq
 8017740:	2303      	moveq	r3, #3
 8017742:	2308      	movne	r3, #8
 8017744:	602b      	str	r3, [r5, #0]
 8017746:	2e00      	cmp	r6, #0
 8017748:	d1f4      	bne.n	8017734 <rcl_validate_topic_name+0x114>
 801774a:	e78d      	b.n	8017668 <rcl_validate_topic_name+0x48>
 801774c:	f1ba 0f00 	cmp.w	sl, #0
 8017750:	d0c7      	beq.n	80176e2 <rcl_validate_topic_name+0xc2>
 8017752:	2308      	movs	r3, #8
 8017754:	602b      	str	r3, [r5, #0]
 8017756:	2e00      	cmp	r6, #0
 8017758:	d1ec      	bne.n	8017734 <rcl_validate_topic_name+0x114>
 801775a:	e785      	b.n	8017668 <rcl_validate_topic_name+0x48>
 801775c:	f1be 0f00 	cmp.w	lr, #0
 8017760:	d0bf      	beq.n	80176e2 <rcl_validate_topic_name+0xc2>
 8017762:	2306      	movs	r3, #6
 8017764:	602b      	str	r3, [r5, #0]
 8017766:	2e00      	cmp	r6, #0
 8017768:	d1e4      	bne.n	8017734 <rcl_validate_topic_name+0x114>
 801776a:	e77d      	b.n	8017668 <rcl_validate_topic_name+0x48>
 801776c:	f1ba 0f00 	cmp.w	sl, #0
 8017770:	d104      	bne.n	801777c <rcl_validate_topic_name+0x15c>
 8017772:	2305      	movs	r3, #5
 8017774:	602b      	str	r3, [r5, #0]
 8017776:	2e00      	cmp	r6, #0
 8017778:	d1dc      	bne.n	8017734 <rcl_validate_topic_name+0x114>
 801777a:	e775      	b.n	8017668 <rcl_validate_topic_name+0x48>
 801777c:	f04f 0a00 	mov.w	sl, #0
 8017780:	e7af      	b.n	80176e2 <rcl_validate_topic_name+0xc2>
 8017782:	297e      	cmp	r1, #126	@ 0x7e
 8017784:	d01d      	beq.n	80177c2 <rcl_validate_topic_name+0x1a2>
 8017786:	2101      	movs	r1, #1
 8017788:	e006      	b.n	8017798 <rcl_validate_topic_name+0x178>
 801778a:	458e      	cmp	lr, r1
 801778c:	f104 0401 	add.w	r4, r4, #1
 8017790:	f101 0301 	add.w	r3, r1, #1
 8017794:	d912      	bls.n	80177bc <rcl_validate_topic_name+0x19c>
 8017796:	4619      	mov	r1, r3
 8017798:	4557      	cmp	r7, sl
 801779a:	f10a 0a01 	add.w	sl, sl, #1
 801779e:	d0f4      	beq.n	801778a <rcl_validate_topic_name+0x16a>
 80177a0:	7823      	ldrb	r3, [r4, #0]
 80177a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80177a4:	d1f1      	bne.n	801778a <rcl_validate_topic_name+0x16a>
 80177a6:	7863      	ldrb	r3, [r4, #1]
 80177a8:	5cd3      	ldrb	r3, [r2, r3]
 80177aa:	075b      	lsls	r3, r3, #29
 80177ac:	d5ed      	bpl.n	801778a <rcl_validate_topic_name+0x16a>
 80177ae:	2304      	movs	r3, #4
 80177b0:	602b      	str	r3, [r5, #0]
 80177b2:	2e00      	cmp	r6, #0
 80177b4:	f43f af58 	beq.w	8017668 <rcl_validate_topic_name+0x48>
 80177b8:	6031      	str	r1, [r6, #0]
 80177ba:	e755      	b.n	8017668 <rcl_validate_topic_name+0x48>
 80177bc:	2300      	movs	r3, #0
 80177be:	602b      	str	r3, [r5, #0]
 80177c0:	e752      	b.n	8017668 <rcl_validate_topic_name+0x48>
 80177c2:	4653      	mov	r3, sl
 80177c4:	2101      	movs	r1, #1
 80177c6:	e00a      	b.n	80177de <rcl_validate_topic_name+0x1be>
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d012      	beq.n	80177f2 <rcl_validate_topic_name+0x1d2>
 80177cc:	458e      	cmp	lr, r1
 80177ce:	f103 0301 	add.w	r3, r3, #1
 80177d2:	f104 0401 	add.w	r4, r4, #1
 80177d6:	f101 0001 	add.w	r0, r1, #1
 80177da:	d9ef      	bls.n	80177bc <rcl_validate_topic_name+0x19c>
 80177dc:	4601      	mov	r1, r0
 80177de:	429f      	cmp	r7, r3
 80177e0:	d0f4      	beq.n	80177cc <rcl_validate_topic_name+0x1ac>
 80177e2:	7820      	ldrb	r0, [r4, #0]
 80177e4:	282f      	cmp	r0, #47	@ 0x2f
 80177e6:	d1ef      	bne.n	80177c8 <rcl_validate_topic_name+0x1a8>
 80177e8:	7860      	ldrb	r0, [r4, #1]
 80177ea:	5c10      	ldrb	r0, [r2, r0]
 80177ec:	0740      	lsls	r0, r0, #29
 80177ee:	d5ed      	bpl.n	80177cc <rcl_validate_topic_name+0x1ac>
 80177f0:	e7dd      	b.n	80177ae <rcl_validate_topic_name+0x18e>
 80177f2:	2207      	movs	r2, #7
 80177f4:	602a      	str	r2, [r5, #0]
 80177f6:	2e00      	cmp	r6, #0
 80177f8:	f47f af7e 	bne.w	80176f8 <rcl_validate_topic_name+0xd8>
 80177fc:	e734      	b.n	8017668 <rcl_validate_topic_name+0x48>
 80177fe:	bf00      	nop
 8017800:	0801a70b 	.word	0x0801a70b

08017804 <rcutils_split>:
 8017804:	b082      	sub	sp, #8
 8017806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801780a:	b08b      	sub	sp, #44	@ 0x2c
 801780c:	ac14      	add	r4, sp, #80	@ 0x50
 801780e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8017810:	e884 000c 	stmia.w	r4, {r2, r3}
 8017814:	2f00      	cmp	r7, #0
 8017816:	f000 8091 	beq.w	801793c <rcutils_split+0x138>
 801781a:	4606      	mov	r6, r0
 801781c:	2800      	cmp	r0, #0
 801781e:	d072      	beq.n	8017906 <rcutils_split+0x102>
 8017820:	7804      	ldrb	r4, [r0, #0]
 8017822:	2c00      	cmp	r4, #0
 8017824:	d06f      	beq.n	8017906 <rcutils_split+0x102>
 8017826:	460d      	mov	r5, r1
 8017828:	f7e8 fd52 	bl	80002d0 <strlen>
 801782c:	1833      	adds	r3, r6, r0
 801782e:	1b64      	subs	r4, r4, r5
 8017830:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017834:	4681      	mov	r9, r0
 8017836:	fab4 f484 	clz	r4, r4
 801783a:	0964      	lsrs	r4, r4, #5
 801783c:	42ab      	cmp	r3, r5
 801783e:	bf08      	it	eq
 8017840:	f1a9 0901 	subeq.w	r9, r9, #1
 8017844:	454c      	cmp	r4, r9
 8017846:	d26a      	bcs.n	801791e <rcutils_split+0x11a>
 8017848:	1933      	adds	r3, r6, r4
 801784a:	eb06 0009 	add.w	r0, r6, r9
 801784e:	2101      	movs	r1, #1
 8017850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017854:	42aa      	cmp	r2, r5
 8017856:	bf08      	it	eq
 8017858:	3101      	addeq	r1, #1
 801785a:	4283      	cmp	r3, r0
 801785c:	d1f8      	bne.n	8017850 <rcutils_split+0x4c>
 801785e:	aa14      	add	r2, sp, #80	@ 0x50
 8017860:	4638      	mov	r0, r7
 8017862:	f000 f88f 	bl	8017984 <rcutils_string_array_init>
 8017866:	2800      	cmp	r0, #0
 8017868:	d141      	bne.n	80178ee <rcutils_split+0xea>
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	4680      	mov	r8, r0
 801786e:	46a2      	mov	sl, r4
 8017870:	e002      	b.n	8017878 <rcutils_split+0x74>
 8017872:	3401      	adds	r4, #1
 8017874:	454c      	cmp	r4, r9
 8017876:	d222      	bcs.n	80178be <rcutils_split+0xba>
 8017878:	5d33      	ldrb	r3, [r6, r4]
 801787a:	42ab      	cmp	r3, r5
 801787c:	d1f9      	bne.n	8017872 <rcutils_split+0x6e>
 801787e:	4554      	cmp	r4, sl
 8017880:	eba4 0b0a 	sub.w	fp, r4, sl
 8017884:	d038      	beq.n	80178f8 <rcutils_split+0xf4>
 8017886:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017888:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801788a:	9201      	str	r2, [sp, #4]
 801788c:	f10b 0002 	add.w	r0, fp, #2
 8017890:	4798      	blx	r3
 8017892:	9a01      	ldr	r2, [sp, #4]
 8017894:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801789e:	eb06 030a 	add.w	r3, r6, sl
 80178a2:	f10b 0101 	add.w	r1, fp, #1
 80178a6:	2800      	cmp	r0, #0
 80178a8:	d04e      	beq.n	8017948 <rcutils_split+0x144>
 80178aa:	4a2d      	ldr	r2, [pc, #180]	@ (8017960 <rcutils_split+0x15c>)
 80178ac:	f000 fe02 	bl	80184b4 <sniprintf>
 80178b0:	687a      	ldr	r2, [r7, #4]
 80178b2:	f108 0801 	add.w	r8, r8, #1
 80178b6:	3401      	adds	r4, #1
 80178b8:	454c      	cmp	r4, r9
 80178ba:	46a2      	mov	sl, r4
 80178bc:	d3dc      	bcc.n	8017878 <rcutils_split+0x74>
 80178be:	4554      	cmp	r4, sl
 80178c0:	d035      	beq.n	801792e <rcutils_split+0x12a>
 80178c2:	eba4 040a 	sub.w	r4, r4, sl
 80178c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80178c8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80178ca:	9201      	str	r2, [sp, #4]
 80178cc:	1ca0      	adds	r0, r4, #2
 80178ce:	4798      	blx	r3
 80178d0:	9a01      	ldr	r2, [sp, #4]
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 80178d8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80178dc:	2800      	cmp	r0, #0
 80178de:	d035      	beq.n	801794c <rcutils_split+0x148>
 80178e0:	4a1f      	ldr	r2, [pc, #124]	@ (8017960 <rcutils_split+0x15c>)
 80178e2:	eb06 030a 	add.w	r3, r6, sl
 80178e6:	1c61      	adds	r1, r4, #1
 80178e8:	f000 fde4 	bl	80184b4 <sniprintf>
 80178ec:	2000      	movs	r0, #0
 80178ee:	b00b      	add	sp, #44	@ 0x2c
 80178f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f4:	b002      	add	sp, #8
 80178f6:	4770      	bx	lr
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	3b01      	subs	r3, #1
 80178fc:	2100      	movs	r1, #0
 80178fe:	603b      	str	r3, [r7, #0]
 8017900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8017904:	e7d7      	b.n	80178b6 <rcutils_split+0xb2>
 8017906:	a802      	add	r0, sp, #8
 8017908:	ac02      	add	r4, sp, #8
 801790a:	f000 f82b 	bl	8017964 <rcutils_get_zero_initialized_string_array>
 801790e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017910:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017912:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017916:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801791a:	2000      	movs	r0, #0
 801791c:	e7e7      	b.n	80178ee <rcutils_split+0xea>
 801791e:	aa14      	add	r2, sp, #80	@ 0x50
 8017920:	2101      	movs	r1, #1
 8017922:	4638      	mov	r0, r7
 8017924:	f000 f82e 	bl	8017984 <rcutils_string_array_init>
 8017928:	2800      	cmp	r0, #0
 801792a:	d1e0      	bne.n	80178ee <rcutils_split+0xea>
 801792c:	687a      	ldr	r2, [r7, #4]
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	3b01      	subs	r3, #1
 8017932:	2100      	movs	r1, #0
 8017934:	603b      	str	r3, [r7, #0]
 8017936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801793a:	e7ee      	b.n	801791a <rcutils_split+0x116>
 801793c:	200b      	movs	r0, #11
 801793e:	b00b      	add	sp, #44	@ 0x2c
 8017940:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017944:	b002      	add	sp, #8
 8017946:	4770      	bx	lr
 8017948:	f8c7 8000 	str.w	r8, [r7]
 801794c:	4638      	mov	r0, r7
 801794e:	f000 f83b 	bl	80179c8 <rcutils_string_array_fini>
 8017952:	b908      	cbnz	r0, 8017958 <rcutils_split+0x154>
 8017954:	200a      	movs	r0, #10
 8017956:	e7ca      	b.n	80178ee <rcutils_split+0xea>
 8017958:	f7f3 fbb2 	bl	800b0c0 <rcutils_reset_error>
 801795c:	e7fa      	b.n	8017954 <rcutils_split+0x150>
 801795e:	bf00      	nop
 8017960:	08019894 	.word	0x08019894

08017964 <rcutils_get_zero_initialized_string_array>:
 8017964:	b510      	push	{r4, lr}
 8017966:	4c06      	ldr	r4, [pc, #24]	@ (8017980 <rcutils_get_zero_initialized_string_array+0x1c>)
 8017968:	4686      	mov	lr, r0
 801796a:	4684      	mov	ip, r0
 801796c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801796e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017972:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017976:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801797a:	4670      	mov	r0, lr
 801797c:	bd10      	pop	{r4, pc}
 801797e:	bf00      	nop
 8017980:	0801a610 	.word	0x0801a610

08017984 <rcutils_string_array_init>:
 8017984:	b1da      	cbz	r2, 80179be <rcutils_string_array_init+0x3a>
 8017986:	b570      	push	{r4, r5, r6, lr}
 8017988:	4605      	mov	r5, r0
 801798a:	b1d0      	cbz	r0, 80179c2 <rcutils_string_array_init+0x3e>
 801798c:	460e      	mov	r6, r1
 801798e:	4614      	mov	r4, r2
 8017990:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8017994:	6001      	str	r1, [r0, #0]
 8017996:	2104      	movs	r1, #4
 8017998:	4630      	mov	r0, r6
 801799a:	4798      	blx	r3
 801799c:	6068      	str	r0, [r5, #4]
 801799e:	b150      	cbz	r0, 80179b6 <rcutils_string_array_init+0x32>
 80179a0:	46a4      	mov	ip, r4
 80179a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80179a6:	f105 0408 	add.w	r4, r5, #8
 80179aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179ac:	f8dc 3000 	ldr.w	r3, [ip]
 80179b0:	6023      	str	r3, [r4, #0]
 80179b2:	2000      	movs	r0, #0
 80179b4:	bd70      	pop	{r4, r5, r6, pc}
 80179b6:	2e00      	cmp	r6, #0
 80179b8:	d0f2      	beq.n	80179a0 <rcutils_string_array_init+0x1c>
 80179ba:	200a      	movs	r0, #10
 80179bc:	bd70      	pop	{r4, r5, r6, pc}
 80179be:	200b      	movs	r0, #11
 80179c0:	4770      	bx	lr
 80179c2:	200b      	movs	r0, #11
 80179c4:	bd70      	pop	{r4, r5, r6, pc}
 80179c6:	bf00      	nop

080179c8 <rcutils_string_array_fini>:
 80179c8:	b310      	cbz	r0, 8017a10 <rcutils_string_array_fini+0x48>
 80179ca:	6843      	ldr	r3, [r0, #4]
 80179cc:	b570      	push	{r4, r5, r6, lr}
 80179ce:	4604      	mov	r4, r0
 80179d0:	b1d3      	cbz	r3, 8017a08 <rcutils_string_array_fini+0x40>
 80179d2:	3008      	adds	r0, #8
 80179d4:	f7f3 fb48 	bl	800b068 <rcutils_allocator_is_valid>
 80179d8:	b1c0      	cbz	r0, 8017a0c <rcutils_string_array_fini+0x44>
 80179da:	e9d4 3000 	ldrd	r3, r0, [r4]
 80179de:	b16b      	cbz	r3, 80179fc <rcutils_string_array_fini+0x34>
 80179e0:	2500      	movs	r5, #0
 80179e2:	462e      	mov	r6, r5
 80179e4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80179e8:	68e3      	ldr	r3, [r4, #12]
 80179ea:	69a1      	ldr	r1, [r4, #24]
 80179ec:	4798      	blx	r3
 80179ee:	e9d4 3000 	ldrd	r3, r0, [r4]
 80179f2:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80179f6:	3501      	adds	r5, #1
 80179f8:	42ab      	cmp	r3, r5
 80179fa:	d8f3      	bhi.n	80179e4 <rcutils_string_array_fini+0x1c>
 80179fc:	68e3      	ldr	r3, [r4, #12]
 80179fe:	69a1      	ldr	r1, [r4, #24]
 8017a00:	4798      	blx	r3
 8017a02:	2300      	movs	r3, #0
 8017a04:	e9c4 3300 	strd	r3, r3, [r4]
 8017a08:	2000      	movs	r0, #0
 8017a0a:	bd70      	pop	{r4, r5, r6, pc}
 8017a0c:	200b      	movs	r0, #11
 8017a0e:	bd70      	pop	{r4, r5, r6, pc}
 8017a10:	200b      	movs	r0, #11
 8017a12:	4770      	bx	lr

08017a14 <rmw_discovery_options_init>:
 8017a14:	b328      	cbz	r0, 8017a62 <rmw_discovery_options_init+0x4e>
 8017a16:	b570      	push	{r4, r5, r6, lr}
 8017a18:	4604      	mov	r4, r0
 8017a1a:	4610      	mov	r0, r2
 8017a1c:	460e      	mov	r6, r1
 8017a1e:	4615      	mov	r5, r2
 8017a20:	f7f3 fb22 	bl	800b068 <rcutils_allocator_is_valid>
 8017a24:	b1d8      	cbz	r0, 8017a5e <rmw_discovery_options_init+0x4a>
 8017a26:	68a3      	ldr	r3, [r4, #8]
 8017a28:	b9cb      	cbnz	r3, 8017a5e <rmw_discovery_options_init+0x4a>
 8017a2a:	6863      	ldr	r3, [r4, #4]
 8017a2c:	b9bb      	cbnz	r3, 8017a5e <rmw_discovery_options_init+0x4a>
 8017a2e:	7823      	ldrb	r3, [r4, #0]
 8017a30:	b90b      	cbnz	r3, 8017a36 <rmw_discovery_options_init+0x22>
 8017a32:	2302      	movs	r3, #2
 8017a34:	7023      	strb	r3, [r4, #0]
 8017a36:	b186      	cbz	r6, 8017a5a <rmw_discovery_options_init+0x46>
 8017a38:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8017a3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017a40:	4630      	mov	r0, r6
 8017a42:	4798      	blx	r3
 8017a44:	6060      	str	r0, [r4, #4]
 8017a46:	b170      	cbz	r0, 8017a66 <rmw_discovery_options_init+0x52>
 8017a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a4a:	f104 0c0c 	add.w	ip, r4, #12
 8017a4e:	60a6      	str	r6, [r4, #8]
 8017a50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a54:	682b      	ldr	r3, [r5, #0]
 8017a56:	f8cc 3000 	str.w	r3, [ip]
 8017a5a:	2000      	movs	r0, #0
 8017a5c:	bd70      	pop	{r4, r5, r6, pc}
 8017a5e:	200b      	movs	r0, #11
 8017a60:	bd70      	pop	{r4, r5, r6, pc}
 8017a62:	200b      	movs	r0, #11
 8017a64:	4770      	bx	lr
 8017a66:	200a      	movs	r0, #10
 8017a68:	bd70      	pop	{r4, r5, r6, pc}
 8017a6a:	bf00      	nop

08017a6c <rmw_enclave_options_copy>:
 8017a6c:	b1e0      	cbz	r0, 8017aa8 <rmw_enclave_options_copy+0x3c>
 8017a6e:	b570      	push	{r4, r5, r6, lr}
 8017a70:	4616      	mov	r6, r2
 8017a72:	b082      	sub	sp, #8
 8017a74:	b1aa      	cbz	r2, 8017aa2 <rmw_enclave_options_copy+0x36>
 8017a76:	4605      	mov	r5, r0
 8017a78:	4608      	mov	r0, r1
 8017a7a:	460c      	mov	r4, r1
 8017a7c:	f7f3 faf4 	bl	800b068 <rcutils_allocator_is_valid>
 8017a80:	b178      	cbz	r0, 8017aa2 <rmw_enclave_options_copy+0x36>
 8017a82:	f104 030c 	add.w	r3, r4, #12
 8017a86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017a8a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017a8e:	4628      	mov	r0, r5
 8017a90:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017a94:	f7fc faf8 	bl	8014088 <rcutils_strdup>
 8017a98:	b140      	cbz	r0, 8017aac <rmw_enclave_options_copy+0x40>
 8017a9a:	6030      	str	r0, [r6, #0]
 8017a9c:	2000      	movs	r0, #0
 8017a9e:	b002      	add	sp, #8
 8017aa0:	bd70      	pop	{r4, r5, r6, pc}
 8017aa2:	200b      	movs	r0, #11
 8017aa4:	b002      	add	sp, #8
 8017aa6:	bd70      	pop	{r4, r5, r6, pc}
 8017aa8:	200b      	movs	r0, #11
 8017aaa:	4770      	bx	lr
 8017aac:	200a      	movs	r0, #10
 8017aae:	e7f6      	b.n	8017a9e <rmw_enclave_options_copy+0x32>

08017ab0 <rmw_enclave_options_fini>:
 8017ab0:	b170      	cbz	r0, 8017ad0 <rmw_enclave_options_fini+0x20>
 8017ab2:	b538      	push	{r3, r4, r5, lr}
 8017ab4:	4605      	mov	r5, r0
 8017ab6:	4608      	mov	r0, r1
 8017ab8:	460c      	mov	r4, r1
 8017aba:	f7f3 fad5 	bl	800b068 <rcutils_allocator_is_valid>
 8017abe:	b128      	cbz	r0, 8017acc <rmw_enclave_options_fini+0x1c>
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	6863      	ldr	r3, [r4, #4]
 8017ac4:	6921      	ldr	r1, [r4, #16]
 8017ac6:	4798      	blx	r3
 8017ac8:	2000      	movs	r0, #0
 8017aca:	bd38      	pop	{r3, r4, r5, pc}
 8017acc:	200b      	movs	r0, #11
 8017ace:	bd38      	pop	{r3, r4, r5, pc}
 8017ad0:	200b      	movs	r0, #11
 8017ad2:	4770      	bx	lr

08017ad4 <rmw_get_default_security_options>:
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	7002      	strb	r2, [r0, #0]
 8017ad8:	6042      	str	r2, [r0, #4]
 8017ada:	4770      	bx	lr

08017adc <on_status>:
 8017adc:	b082      	sub	sp, #8
 8017ade:	b002      	add	sp, #8
 8017ae0:	4770      	bx	lr
 8017ae2:	bf00      	nop

08017ae4 <on_topic>:
 8017ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae8:	4a22      	ldr	r2, [pc, #136]	@ (8017b74 <on_topic+0x90>)
 8017aea:	b094      	sub	sp, #80	@ 0x50
 8017aec:	6812      	ldr	r2, [r2, #0]
 8017aee:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017af0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017af4:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017af8:	b3c2      	cbz	r2, 8017b6c <on_topic+0x88>
 8017afa:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017afe:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017b02:	e001      	b.n	8017b08 <on_topic+0x24>
 8017b04:	6852      	ldr	r2, [r2, #4]
 8017b06:	b38a      	cbz	r2, 8017b6c <on_topic+0x88>
 8017b08:	6894      	ldr	r4, [r2, #8]
 8017b0a:	8aa3      	ldrh	r3, [r4, #20]
 8017b0c:	428b      	cmp	r3, r1
 8017b0e:	d1f9      	bne.n	8017b04 <on_topic+0x20>
 8017b10:	7da3      	ldrb	r3, [r4, #22]
 8017b12:	4283      	cmp	r3, r0
 8017b14:	d1f6      	bne.n	8017b04 <on_topic+0x20>
 8017b16:	2248      	movs	r2, #72	@ 0x48
 8017b18:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017b1c:	4668      	mov	r0, sp
 8017b1e:	f000 ff18 	bl	8018952 <memcpy>
 8017b22:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8017b26:	cb0c      	ldmia	r3, {r2, r3}
 8017b28:	4620      	mov	r0, r4
 8017b2a:	f7f3 ff37 	bl	800b99c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017b2e:	4607      	mov	r7, r0
 8017b30:	b1e0      	cbz	r0, 8017b6c <on_topic+0x88>
 8017b32:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017b36:	4632      	mov	r2, r6
 8017b38:	4628      	mov	r0, r5
 8017b3a:	f108 0110 	add.w	r1, r8, #16
 8017b3e:	f7fe fa83 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8017b42:	b930      	cbnz	r0, 8017b52 <on_topic+0x6e>
 8017b44:	480c      	ldr	r0, [pc, #48]	@ (8017b78 <on_topic+0x94>)
 8017b46:	4639      	mov	r1, r7
 8017b48:	b014      	add	sp, #80	@ 0x50
 8017b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b4e:	f7fc be25 	b.w	801479c <put_memory>
 8017b52:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8017b56:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8017b5a:	f7fd ff49 	bl	80159f0 <rmw_uros_epoch_nanos>
 8017b5e:	2305      	movs	r3, #5
 8017b60:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017b64:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017b68:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017b6c:	b014      	add	sp, #80	@ 0x50
 8017b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b72:	bf00      	nop
 8017b74:	2000ccc8 	.word	0x2000ccc8
 8017b78:	2000c518 	.word	0x2000c518

08017b7c <on_request>:
 8017b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b80:	4823      	ldr	r0, [pc, #140]	@ (8017c10 <on_request+0x94>)
 8017b82:	b094      	sub	sp, #80	@ 0x50
 8017b84:	6800      	ldr	r0, [r0, #0]
 8017b86:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017b88:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017b8c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017b8e:	2800      	cmp	r0, #0
 8017b90:	d03b      	beq.n	8017c0a <on_request+0x8e>
 8017b92:	461d      	mov	r5, r3
 8017b94:	e001      	b.n	8017b9a <on_request+0x1e>
 8017b96:	6840      	ldr	r0, [r0, #4]
 8017b98:	b3b8      	cbz	r0, 8017c0a <on_request+0x8e>
 8017b9a:	6884      	ldr	r4, [r0, #8]
 8017b9c:	8b21      	ldrh	r1, [r4, #24]
 8017b9e:	4291      	cmp	r1, r2
 8017ba0:	d1f9      	bne.n	8017b96 <on_request+0x1a>
 8017ba2:	2248      	movs	r2, #72	@ 0x48
 8017ba4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017ba8:	4668      	mov	r0, sp
 8017baa:	f000 fed2 	bl	8018952 <memcpy>
 8017bae:	f104 0320 	add.w	r3, r4, #32
 8017bb2:	cb0c      	ldmia	r3, {r2, r3}
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f7f3 fef1 	bl	800b99c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017bba:	4680      	mov	r8, r0
 8017bbc:	b328      	cbz	r0, 8017c0a <on_request+0x8e>
 8017bbe:	4638      	mov	r0, r7
 8017bc0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017bc4:	4632      	mov	r2, r6
 8017bc6:	f107 0110 	add.w	r1, r7, #16
 8017bca:	f7fe fa3d 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8017bce:	b930      	cbnz	r0, 8017bde <on_request+0x62>
 8017bd0:	4810      	ldr	r0, [pc, #64]	@ (8017c14 <on_request+0x98>)
 8017bd2:	4641      	mov	r1, r8
 8017bd4:	b014      	add	sp, #80	@ 0x50
 8017bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bda:	f7fc bddf 	b.w	801479c <put_memory>
 8017bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017be0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017be4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017be8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017bf0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017bf4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017bf8:	f7fd fefa 	bl	80159f0 <rmw_uros_epoch_nanos>
 8017bfc:	2303      	movs	r3, #3
 8017bfe:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017c02:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017c06:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017c0a:	b014      	add	sp, #80	@ 0x50
 8017c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c10:	2000c880 	.word	0x2000c880
 8017c14:	2000c518 	.word	0x2000c518

08017c18 <on_reply>:
 8017c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c1c:	4821      	ldr	r0, [pc, #132]	@ (8017ca4 <on_reply+0x8c>)
 8017c1e:	b094      	sub	sp, #80	@ 0x50
 8017c20:	6800      	ldr	r0, [r0, #0]
 8017c22:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017c24:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017c28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017c2a:	b3b8      	cbz	r0, 8017c9c <on_reply+0x84>
 8017c2c:	461d      	mov	r5, r3
 8017c2e:	e001      	b.n	8017c34 <on_reply+0x1c>
 8017c30:	6840      	ldr	r0, [r0, #4]
 8017c32:	b398      	cbz	r0, 8017c9c <on_reply+0x84>
 8017c34:	6884      	ldr	r4, [r0, #8]
 8017c36:	8b21      	ldrh	r1, [r4, #24]
 8017c38:	4291      	cmp	r1, r2
 8017c3a:	d1f9      	bne.n	8017c30 <on_reply+0x18>
 8017c3c:	2248      	movs	r2, #72	@ 0x48
 8017c3e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017c42:	4668      	mov	r0, sp
 8017c44:	f000 fe85 	bl	8018952 <memcpy>
 8017c48:	f104 0320 	add.w	r3, r4, #32
 8017c4c:	cb0c      	ldmia	r3, {r2, r3}
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f7f3 fea4 	bl	800b99c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017c54:	4680      	mov	r8, r0
 8017c56:	b308      	cbz	r0, 8017c9c <on_reply+0x84>
 8017c58:	4638      	mov	r0, r7
 8017c5a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017c5e:	4632      	mov	r2, r6
 8017c60:	f107 0110 	add.w	r1, r7, #16
 8017c64:	f7fe f9f0 	bl	8016048 <ucdr_deserialize_array_uint8_t>
 8017c68:	b930      	cbnz	r0, 8017c78 <on_reply+0x60>
 8017c6a:	480f      	ldr	r0, [pc, #60]	@ (8017ca8 <on_reply+0x90>)
 8017c6c:	4641      	mov	r1, r8
 8017c6e:	b014      	add	sp, #80	@ 0x50
 8017c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c74:	f7fc bd92 	b.w	801479c <put_memory>
 8017c78:	2200      	movs	r2, #0
 8017c7a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017c7e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017c82:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017c86:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017c8a:	f7fd feb1 	bl	80159f0 <rmw_uros_epoch_nanos>
 8017c8e:	2304      	movs	r3, #4
 8017c90:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017c94:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017c98:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017c9c:	b014      	add	sp, #80	@ 0x50
 8017c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ca2:	bf00      	nop
 8017ca4:	2000c7a8 	.word	0x2000c7a8
 8017ca8:	2000c518 	.word	0x2000c518

08017cac <rmw_create_guard_condition>:
 8017cac:	b538      	push	{r3, r4, r5, lr}
 8017cae:	4605      	mov	r5, r0
 8017cb0:	4807      	ldr	r0, [pc, #28]	@ (8017cd0 <rmw_create_guard_condition+0x24>)
 8017cb2:	f7fc fd63 	bl	801477c <get_memory>
 8017cb6:	b148      	cbz	r0, 8017ccc <rmw_create_guard_condition+0x20>
 8017cb8:	6884      	ldr	r4, [r0, #8]
 8017cba:	2300      	movs	r3, #0
 8017cbc:	7423      	strb	r3, [r4, #16]
 8017cbe:	61e5      	str	r5, [r4, #28]
 8017cc0:	f7fc fde2 	bl	8014888 <rmw_get_implementation_identifier>
 8017cc4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017cc8:	f104 0014 	add.w	r0, r4, #20
 8017ccc:	bd38      	pop	{r3, r4, r5, pc}
 8017cce:	bf00      	nop
 8017cd0:	2000a2f4 	.word	0x2000a2f4

08017cd4 <rmw_destroy_guard_condition>:
 8017cd4:	b508      	push	{r3, lr}
 8017cd6:	4b08      	ldr	r3, [pc, #32]	@ (8017cf8 <rmw_destroy_guard_condition+0x24>)
 8017cd8:	6819      	ldr	r1, [r3, #0]
 8017cda:	b911      	cbnz	r1, 8017ce2 <rmw_destroy_guard_condition+0xe>
 8017cdc:	e00a      	b.n	8017cf4 <rmw_destroy_guard_condition+0x20>
 8017cde:	6849      	ldr	r1, [r1, #4]
 8017ce0:	b141      	cbz	r1, 8017cf4 <rmw_destroy_guard_condition+0x20>
 8017ce2:	688b      	ldr	r3, [r1, #8]
 8017ce4:	3314      	adds	r3, #20
 8017ce6:	4298      	cmp	r0, r3
 8017ce8:	d1f9      	bne.n	8017cde <rmw_destroy_guard_condition+0xa>
 8017cea:	4803      	ldr	r0, [pc, #12]	@ (8017cf8 <rmw_destroy_guard_condition+0x24>)
 8017cec:	f7fc fd56 	bl	801479c <put_memory>
 8017cf0:	2000      	movs	r0, #0
 8017cf2:	bd08      	pop	{r3, pc}
 8017cf4:	2001      	movs	r0, #1
 8017cf6:	bd08      	pop	{r3, pc}
 8017cf8:	2000a2f4 	.word	0x2000a2f4

08017cfc <rmw_trigger_guard_condition>:
 8017cfc:	b160      	cbz	r0, 8017d18 <rmw_trigger_guard_condition+0x1c>
 8017cfe:	b510      	push	{r4, lr}
 8017d00:	4604      	mov	r4, r0
 8017d02:	6800      	ldr	r0, [r0, #0]
 8017d04:	f7f3 ffcc 	bl	800bca0 <is_uxrce_rmw_identifier_valid>
 8017d08:	b908      	cbnz	r0, 8017d0e <rmw_trigger_guard_condition+0x12>
 8017d0a:	2001      	movs	r0, #1
 8017d0c:	bd10      	pop	{r4, pc}
 8017d0e:	6863      	ldr	r3, [r4, #4]
 8017d10:	2201      	movs	r2, #1
 8017d12:	741a      	strb	r2, [r3, #16]
 8017d14:	2000      	movs	r0, #0
 8017d16:	bd10      	pop	{r4, pc}
 8017d18:	2001      	movs	r0, #1
 8017d1a:	4770      	bx	lr

08017d1c <rosidl_runtime_c__String__init>:
 8017d1c:	b1b0      	cbz	r0, 8017d4c <rosidl_runtime_c__String__init+0x30>
 8017d1e:	b510      	push	{r4, lr}
 8017d20:	b086      	sub	sp, #24
 8017d22:	4604      	mov	r4, r0
 8017d24:	a801      	add	r0, sp, #4
 8017d26:	f7f3 f973 	bl	800b010 <rcutils_get_default_allocator>
 8017d2a:	9b01      	ldr	r3, [sp, #4]
 8017d2c:	9905      	ldr	r1, [sp, #20]
 8017d2e:	2001      	movs	r0, #1
 8017d30:	4798      	blx	r3
 8017d32:	6020      	str	r0, [r4, #0]
 8017d34:	b138      	cbz	r0, 8017d46 <rosidl_runtime_c__String__init+0x2a>
 8017d36:	2200      	movs	r2, #0
 8017d38:	2301      	movs	r3, #1
 8017d3a:	7002      	strb	r2, [r0, #0]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8017d42:	b006      	add	sp, #24
 8017d44:	bd10      	pop	{r4, pc}
 8017d46:	2000      	movs	r0, #0
 8017d48:	b006      	add	sp, #24
 8017d4a:	bd10      	pop	{r4, pc}
 8017d4c:	2000      	movs	r0, #0
 8017d4e:	4770      	bx	lr

08017d50 <rosidl_runtime_c__String__fini>:
 8017d50:	b320      	cbz	r0, 8017d9c <rosidl_runtime_c__String__fini+0x4c>
 8017d52:	b510      	push	{r4, lr}
 8017d54:	6803      	ldr	r3, [r0, #0]
 8017d56:	b086      	sub	sp, #24
 8017d58:	4604      	mov	r4, r0
 8017d5a:	b173      	cbz	r3, 8017d7a <rosidl_runtime_c__String__fini+0x2a>
 8017d5c:	6883      	ldr	r3, [r0, #8]
 8017d5e:	b1f3      	cbz	r3, 8017d9e <rosidl_runtime_c__String__fini+0x4e>
 8017d60:	a801      	add	r0, sp, #4
 8017d62:	f7f3 f955 	bl	800b010 <rcutils_get_default_allocator>
 8017d66:	9b02      	ldr	r3, [sp, #8]
 8017d68:	9905      	ldr	r1, [sp, #20]
 8017d6a:	6820      	ldr	r0, [r4, #0]
 8017d6c:	4798      	blx	r3
 8017d6e:	2300      	movs	r3, #0
 8017d70:	e9c4 3300 	strd	r3, r3, [r4]
 8017d74:	60a3      	str	r3, [r4, #8]
 8017d76:	b006      	add	sp, #24
 8017d78:	bd10      	pop	{r4, pc}
 8017d7a:	6843      	ldr	r3, [r0, #4]
 8017d7c:	b9db      	cbnz	r3, 8017db6 <rosidl_runtime_c__String__fini+0x66>
 8017d7e:	6883      	ldr	r3, [r0, #8]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d0f8      	beq.n	8017d76 <rosidl_runtime_c__String__fini+0x26>
 8017d84:	4b12      	ldr	r3, [pc, #72]	@ (8017dd0 <rosidl_runtime_c__String__fini+0x80>)
 8017d86:	4813      	ldr	r0, [pc, #76]	@ (8017dd4 <rosidl_runtime_c__String__fini+0x84>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	2251      	movs	r2, #81	@ 0x51
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	2101      	movs	r1, #1
 8017d90:	f000 fb82 	bl	8018498 <fwrite>
 8017d94:	f04f 30ff 	mov.w	r0, #4294967295
 8017d98:	f000 f83e 	bl	8017e18 <exit>
 8017d9c:	4770      	bx	lr
 8017d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8017dd0 <rosidl_runtime_c__String__fini+0x80>)
 8017da0:	480d      	ldr	r0, [pc, #52]	@ (8017dd8 <rosidl_runtime_c__String__fini+0x88>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	224c      	movs	r2, #76	@ 0x4c
 8017da6:	68db      	ldr	r3, [r3, #12]
 8017da8:	2101      	movs	r1, #1
 8017daa:	f000 fb75 	bl	8018498 <fwrite>
 8017dae:	f04f 30ff 	mov.w	r0, #4294967295
 8017db2:	f000 f831 	bl	8017e18 <exit>
 8017db6:	4b06      	ldr	r3, [pc, #24]	@ (8017dd0 <rosidl_runtime_c__String__fini+0x80>)
 8017db8:	4808      	ldr	r0, [pc, #32]	@ (8017ddc <rosidl_runtime_c__String__fini+0x8c>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	224e      	movs	r2, #78	@ 0x4e
 8017dbe:	68db      	ldr	r3, [r3, #12]
 8017dc0:	2101      	movs	r1, #1
 8017dc2:	f000 fb69 	bl	8018498 <fwrite>
 8017dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8017dca:	f000 f825 	bl	8017e18 <exit>
 8017dce:	bf00      	nop
 8017dd0:	20000eb0 	.word	0x20000eb0
 8017dd4:	08019f98 	.word	0x08019f98
 8017dd8:	08019ef8 	.word	0x08019ef8
 8017ddc:	08019f48 	.word	0x08019f48

08017de0 <calloc>:
 8017de0:	4b02      	ldr	r3, [pc, #8]	@ (8017dec <calloc+0xc>)
 8017de2:	460a      	mov	r2, r1
 8017de4:	4601      	mov	r1, r0
 8017de6:	6818      	ldr	r0, [r3, #0]
 8017de8:	f000 b802 	b.w	8017df0 <_calloc_r>
 8017dec:	20000eb0 	.word	0x20000eb0

08017df0 <_calloc_r>:
 8017df0:	b570      	push	{r4, r5, r6, lr}
 8017df2:	fba1 5402 	umull	r5, r4, r1, r2
 8017df6:	b934      	cbnz	r4, 8017e06 <_calloc_r+0x16>
 8017df8:	4629      	mov	r1, r5
 8017dfa:	f000 f899 	bl	8017f30 <_malloc_r>
 8017dfe:	4606      	mov	r6, r0
 8017e00:	b928      	cbnz	r0, 8017e0e <_calloc_r+0x1e>
 8017e02:	4630      	mov	r0, r6
 8017e04:	bd70      	pop	{r4, r5, r6, pc}
 8017e06:	220c      	movs	r2, #12
 8017e08:	6002      	str	r2, [r0, #0]
 8017e0a:	2600      	movs	r6, #0
 8017e0c:	e7f9      	b.n	8017e02 <_calloc_r+0x12>
 8017e0e:	462a      	mov	r2, r5
 8017e10:	4621      	mov	r1, r4
 8017e12:	f000 fcc3 	bl	801879c <memset>
 8017e16:	e7f4      	b.n	8017e02 <_calloc_r+0x12>

08017e18 <exit>:
 8017e18:	b508      	push	{r3, lr}
 8017e1a:	4b06      	ldr	r3, [pc, #24]	@ (8017e34 <exit+0x1c>)
 8017e1c:	4604      	mov	r4, r0
 8017e1e:	b113      	cbz	r3, 8017e26 <exit+0xe>
 8017e20:	2100      	movs	r1, #0
 8017e22:	f3af 8000 	nop.w
 8017e26:	4b04      	ldr	r3, [pc, #16]	@ (8017e38 <exit+0x20>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	b103      	cbz	r3, 8017e2e <exit+0x16>
 8017e2c:	4798      	blx	r3
 8017e2e:	4620      	mov	r0, r4
 8017e30:	f7ea fd58 	bl	80028e4 <_exit>
 8017e34:	00000000 	.word	0x00000000
 8017e38:	2000eee8 	.word	0x2000eee8

08017e3c <getenv>:
 8017e3c:	b507      	push	{r0, r1, r2, lr}
 8017e3e:	4b04      	ldr	r3, [pc, #16]	@ (8017e50 <getenv+0x14>)
 8017e40:	4601      	mov	r1, r0
 8017e42:	aa01      	add	r2, sp, #4
 8017e44:	6818      	ldr	r0, [r3, #0]
 8017e46:	f000 f805 	bl	8017e54 <_findenv_r>
 8017e4a:	b003      	add	sp, #12
 8017e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e50:	20000eb0 	.word	0x20000eb0

08017e54 <_findenv_r>:
 8017e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e58:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017ec8 <_findenv_r+0x74>
 8017e5c:	4606      	mov	r6, r0
 8017e5e:	4689      	mov	r9, r1
 8017e60:	4617      	mov	r7, r2
 8017e62:	f000 fda3 	bl	80189ac <__env_lock>
 8017e66:	f8da 4000 	ldr.w	r4, [sl]
 8017e6a:	b134      	cbz	r4, 8017e7a <_findenv_r+0x26>
 8017e6c:	464b      	mov	r3, r9
 8017e6e:	4698      	mov	r8, r3
 8017e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e74:	b13a      	cbz	r2, 8017e86 <_findenv_r+0x32>
 8017e76:	2a3d      	cmp	r2, #61	@ 0x3d
 8017e78:	d1f9      	bne.n	8017e6e <_findenv_r+0x1a>
 8017e7a:	4630      	mov	r0, r6
 8017e7c:	f000 fd9c 	bl	80189b8 <__env_unlock>
 8017e80:	2000      	movs	r0, #0
 8017e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e86:	eba8 0809 	sub.w	r8, r8, r9
 8017e8a:	46a3      	mov	fp, r4
 8017e8c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017e90:	2800      	cmp	r0, #0
 8017e92:	d0f2      	beq.n	8017e7a <_findenv_r+0x26>
 8017e94:	4642      	mov	r2, r8
 8017e96:	4649      	mov	r1, r9
 8017e98:	f000 fc95 	bl	80187c6 <strncmp>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d1f4      	bne.n	8017e8a <_findenv_r+0x36>
 8017ea0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017ea4:	eb03 0508 	add.w	r5, r3, r8
 8017ea8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017eac:	2b3d      	cmp	r3, #61	@ 0x3d
 8017eae:	d1ec      	bne.n	8017e8a <_findenv_r+0x36>
 8017eb0:	f8da 3000 	ldr.w	r3, [sl]
 8017eb4:	ebab 0303 	sub.w	r3, fp, r3
 8017eb8:	109b      	asrs	r3, r3, #2
 8017eba:	4630      	mov	r0, r6
 8017ebc:	603b      	str	r3, [r7, #0]
 8017ebe:	f000 fd7b 	bl	80189b8 <__env_unlock>
 8017ec2:	1c68      	adds	r0, r5, #1
 8017ec4:	e7dd      	b.n	8017e82 <_findenv_r+0x2e>
 8017ec6:	bf00      	nop
 8017ec8:	2000002c 	.word	0x2000002c

08017ecc <malloc>:
 8017ecc:	4b02      	ldr	r3, [pc, #8]	@ (8017ed8 <malloc+0xc>)
 8017ece:	4601      	mov	r1, r0
 8017ed0:	6818      	ldr	r0, [r3, #0]
 8017ed2:	f000 b82d 	b.w	8017f30 <_malloc_r>
 8017ed6:	bf00      	nop
 8017ed8:	20000eb0 	.word	0x20000eb0

08017edc <free>:
 8017edc:	4b02      	ldr	r3, [pc, #8]	@ (8017ee8 <free+0xc>)
 8017ede:	4601      	mov	r1, r0
 8017ee0:	6818      	ldr	r0, [r3, #0]
 8017ee2:	f000 bd6f 	b.w	80189c4 <_free_r>
 8017ee6:	bf00      	nop
 8017ee8:	20000eb0 	.word	0x20000eb0

08017eec <sbrk_aligned>:
 8017eec:	b570      	push	{r4, r5, r6, lr}
 8017eee:	4e0f      	ldr	r6, [pc, #60]	@ (8017f2c <sbrk_aligned+0x40>)
 8017ef0:	460c      	mov	r4, r1
 8017ef2:	6831      	ldr	r1, [r6, #0]
 8017ef4:	4605      	mov	r5, r0
 8017ef6:	b911      	cbnz	r1, 8017efe <sbrk_aligned+0x12>
 8017ef8:	f000 fcd4 	bl	80188a4 <_sbrk_r>
 8017efc:	6030      	str	r0, [r6, #0]
 8017efe:	4621      	mov	r1, r4
 8017f00:	4628      	mov	r0, r5
 8017f02:	f000 fccf 	bl	80188a4 <_sbrk_r>
 8017f06:	1c43      	adds	r3, r0, #1
 8017f08:	d103      	bne.n	8017f12 <sbrk_aligned+0x26>
 8017f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8017f0e:	4620      	mov	r0, r4
 8017f10:	bd70      	pop	{r4, r5, r6, pc}
 8017f12:	1cc4      	adds	r4, r0, #3
 8017f14:	f024 0403 	bic.w	r4, r4, #3
 8017f18:	42a0      	cmp	r0, r4
 8017f1a:	d0f8      	beq.n	8017f0e <sbrk_aligned+0x22>
 8017f1c:	1a21      	subs	r1, r4, r0
 8017f1e:	4628      	mov	r0, r5
 8017f20:	f000 fcc0 	bl	80188a4 <_sbrk_r>
 8017f24:	3001      	adds	r0, #1
 8017f26:	d1f2      	bne.n	8017f0e <sbrk_aligned+0x22>
 8017f28:	e7ef      	b.n	8017f0a <sbrk_aligned+0x1e>
 8017f2a:	bf00      	nop
 8017f2c:	2000eda8 	.word	0x2000eda8

08017f30 <_malloc_r>:
 8017f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f34:	1ccd      	adds	r5, r1, #3
 8017f36:	f025 0503 	bic.w	r5, r5, #3
 8017f3a:	3508      	adds	r5, #8
 8017f3c:	2d0c      	cmp	r5, #12
 8017f3e:	bf38      	it	cc
 8017f40:	250c      	movcc	r5, #12
 8017f42:	2d00      	cmp	r5, #0
 8017f44:	4606      	mov	r6, r0
 8017f46:	db01      	blt.n	8017f4c <_malloc_r+0x1c>
 8017f48:	42a9      	cmp	r1, r5
 8017f4a:	d904      	bls.n	8017f56 <_malloc_r+0x26>
 8017f4c:	230c      	movs	r3, #12
 8017f4e:	6033      	str	r3, [r6, #0]
 8017f50:	2000      	movs	r0, #0
 8017f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801802c <_malloc_r+0xfc>
 8017f5a:	f000 f869 	bl	8018030 <__malloc_lock>
 8017f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8017f62:	461c      	mov	r4, r3
 8017f64:	bb44      	cbnz	r4, 8017fb8 <_malloc_r+0x88>
 8017f66:	4629      	mov	r1, r5
 8017f68:	4630      	mov	r0, r6
 8017f6a:	f7ff ffbf 	bl	8017eec <sbrk_aligned>
 8017f6e:	1c43      	adds	r3, r0, #1
 8017f70:	4604      	mov	r4, r0
 8017f72:	d158      	bne.n	8018026 <_malloc_r+0xf6>
 8017f74:	f8d8 4000 	ldr.w	r4, [r8]
 8017f78:	4627      	mov	r7, r4
 8017f7a:	2f00      	cmp	r7, #0
 8017f7c:	d143      	bne.n	8018006 <_malloc_r+0xd6>
 8017f7e:	2c00      	cmp	r4, #0
 8017f80:	d04b      	beq.n	801801a <_malloc_r+0xea>
 8017f82:	6823      	ldr	r3, [r4, #0]
 8017f84:	4639      	mov	r1, r7
 8017f86:	4630      	mov	r0, r6
 8017f88:	eb04 0903 	add.w	r9, r4, r3
 8017f8c:	f000 fc8a 	bl	80188a4 <_sbrk_r>
 8017f90:	4581      	cmp	r9, r0
 8017f92:	d142      	bne.n	801801a <_malloc_r+0xea>
 8017f94:	6821      	ldr	r1, [r4, #0]
 8017f96:	1a6d      	subs	r5, r5, r1
 8017f98:	4629      	mov	r1, r5
 8017f9a:	4630      	mov	r0, r6
 8017f9c:	f7ff ffa6 	bl	8017eec <sbrk_aligned>
 8017fa0:	3001      	adds	r0, #1
 8017fa2:	d03a      	beq.n	801801a <_malloc_r+0xea>
 8017fa4:	6823      	ldr	r3, [r4, #0]
 8017fa6:	442b      	add	r3, r5
 8017fa8:	6023      	str	r3, [r4, #0]
 8017faa:	f8d8 3000 	ldr.w	r3, [r8]
 8017fae:	685a      	ldr	r2, [r3, #4]
 8017fb0:	bb62      	cbnz	r2, 801800c <_malloc_r+0xdc>
 8017fb2:	f8c8 7000 	str.w	r7, [r8]
 8017fb6:	e00f      	b.n	8017fd8 <_malloc_r+0xa8>
 8017fb8:	6822      	ldr	r2, [r4, #0]
 8017fba:	1b52      	subs	r2, r2, r5
 8017fbc:	d420      	bmi.n	8018000 <_malloc_r+0xd0>
 8017fbe:	2a0b      	cmp	r2, #11
 8017fc0:	d917      	bls.n	8017ff2 <_malloc_r+0xc2>
 8017fc2:	1961      	adds	r1, r4, r5
 8017fc4:	42a3      	cmp	r3, r4
 8017fc6:	6025      	str	r5, [r4, #0]
 8017fc8:	bf18      	it	ne
 8017fca:	6059      	strne	r1, [r3, #4]
 8017fcc:	6863      	ldr	r3, [r4, #4]
 8017fce:	bf08      	it	eq
 8017fd0:	f8c8 1000 	streq.w	r1, [r8]
 8017fd4:	5162      	str	r2, [r4, r5]
 8017fd6:	604b      	str	r3, [r1, #4]
 8017fd8:	4630      	mov	r0, r6
 8017fda:	f000 f82f 	bl	801803c <__malloc_unlock>
 8017fde:	f104 000b 	add.w	r0, r4, #11
 8017fe2:	1d23      	adds	r3, r4, #4
 8017fe4:	f020 0007 	bic.w	r0, r0, #7
 8017fe8:	1ac2      	subs	r2, r0, r3
 8017fea:	bf1c      	itt	ne
 8017fec:	1a1b      	subne	r3, r3, r0
 8017fee:	50a3      	strne	r3, [r4, r2]
 8017ff0:	e7af      	b.n	8017f52 <_malloc_r+0x22>
 8017ff2:	6862      	ldr	r2, [r4, #4]
 8017ff4:	42a3      	cmp	r3, r4
 8017ff6:	bf0c      	ite	eq
 8017ff8:	f8c8 2000 	streq.w	r2, [r8]
 8017ffc:	605a      	strne	r2, [r3, #4]
 8017ffe:	e7eb      	b.n	8017fd8 <_malloc_r+0xa8>
 8018000:	4623      	mov	r3, r4
 8018002:	6864      	ldr	r4, [r4, #4]
 8018004:	e7ae      	b.n	8017f64 <_malloc_r+0x34>
 8018006:	463c      	mov	r4, r7
 8018008:	687f      	ldr	r7, [r7, #4]
 801800a:	e7b6      	b.n	8017f7a <_malloc_r+0x4a>
 801800c:	461a      	mov	r2, r3
 801800e:	685b      	ldr	r3, [r3, #4]
 8018010:	42a3      	cmp	r3, r4
 8018012:	d1fb      	bne.n	801800c <_malloc_r+0xdc>
 8018014:	2300      	movs	r3, #0
 8018016:	6053      	str	r3, [r2, #4]
 8018018:	e7de      	b.n	8017fd8 <_malloc_r+0xa8>
 801801a:	230c      	movs	r3, #12
 801801c:	6033      	str	r3, [r6, #0]
 801801e:	4630      	mov	r0, r6
 8018020:	f000 f80c 	bl	801803c <__malloc_unlock>
 8018024:	e794      	b.n	8017f50 <_malloc_r+0x20>
 8018026:	6005      	str	r5, [r0, #0]
 8018028:	e7d6      	b.n	8017fd8 <_malloc_r+0xa8>
 801802a:	bf00      	nop
 801802c:	2000edac 	.word	0x2000edac

08018030 <__malloc_lock>:
 8018030:	4801      	ldr	r0, [pc, #4]	@ (8018038 <__malloc_lock+0x8>)
 8018032:	f000 bc84 	b.w	801893e <__retarget_lock_acquire_recursive>
 8018036:	bf00      	nop
 8018038:	2000eef1 	.word	0x2000eef1

0801803c <__malloc_unlock>:
 801803c:	4801      	ldr	r0, [pc, #4]	@ (8018044 <__malloc_unlock+0x8>)
 801803e:	f000 bc7f 	b.w	8018940 <__retarget_lock_release_recursive>
 8018042:	bf00      	nop
 8018044:	2000eef1 	.word	0x2000eef1

08018048 <srand>:
 8018048:	b538      	push	{r3, r4, r5, lr}
 801804a:	4b10      	ldr	r3, [pc, #64]	@ (801808c <srand+0x44>)
 801804c:	681d      	ldr	r5, [r3, #0]
 801804e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018050:	4604      	mov	r4, r0
 8018052:	b9b3      	cbnz	r3, 8018082 <srand+0x3a>
 8018054:	2018      	movs	r0, #24
 8018056:	f7ff ff39 	bl	8017ecc <malloc>
 801805a:	4602      	mov	r2, r0
 801805c:	6328      	str	r0, [r5, #48]	@ 0x30
 801805e:	b920      	cbnz	r0, 801806a <srand+0x22>
 8018060:	4b0b      	ldr	r3, [pc, #44]	@ (8018090 <srand+0x48>)
 8018062:	480c      	ldr	r0, [pc, #48]	@ (8018094 <srand+0x4c>)
 8018064:	2146      	movs	r1, #70	@ 0x46
 8018066:	f000 fc83 	bl	8018970 <__assert_func>
 801806a:	490b      	ldr	r1, [pc, #44]	@ (8018098 <srand+0x50>)
 801806c:	4b0b      	ldr	r3, [pc, #44]	@ (801809c <srand+0x54>)
 801806e:	e9c0 1300 	strd	r1, r3, [r0]
 8018072:	4b0b      	ldr	r3, [pc, #44]	@ (80180a0 <srand+0x58>)
 8018074:	6083      	str	r3, [r0, #8]
 8018076:	230b      	movs	r3, #11
 8018078:	8183      	strh	r3, [r0, #12]
 801807a:	2100      	movs	r1, #0
 801807c:	2001      	movs	r0, #1
 801807e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018082:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018084:	2200      	movs	r2, #0
 8018086:	611c      	str	r4, [r3, #16]
 8018088:	615a      	str	r2, [r3, #20]
 801808a:	bd38      	pop	{r3, r4, r5, pc}
 801808c:	20000eb0 	.word	0x20000eb0
 8018090:	0801a62c 	.word	0x0801a62c
 8018094:	0801a643 	.word	0x0801a643
 8018098:	abcd330e 	.word	0xabcd330e
 801809c:	e66d1234 	.word	0xe66d1234
 80180a0:	0005deec 	.word	0x0005deec

080180a4 <rand>:
 80180a4:	4b16      	ldr	r3, [pc, #88]	@ (8018100 <rand+0x5c>)
 80180a6:	b510      	push	{r4, lr}
 80180a8:	681c      	ldr	r4, [r3, #0]
 80180aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180ac:	b9b3      	cbnz	r3, 80180dc <rand+0x38>
 80180ae:	2018      	movs	r0, #24
 80180b0:	f7ff ff0c 	bl	8017ecc <malloc>
 80180b4:	4602      	mov	r2, r0
 80180b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80180b8:	b920      	cbnz	r0, 80180c4 <rand+0x20>
 80180ba:	4b12      	ldr	r3, [pc, #72]	@ (8018104 <rand+0x60>)
 80180bc:	4812      	ldr	r0, [pc, #72]	@ (8018108 <rand+0x64>)
 80180be:	2152      	movs	r1, #82	@ 0x52
 80180c0:	f000 fc56 	bl	8018970 <__assert_func>
 80180c4:	4911      	ldr	r1, [pc, #68]	@ (801810c <rand+0x68>)
 80180c6:	4b12      	ldr	r3, [pc, #72]	@ (8018110 <rand+0x6c>)
 80180c8:	e9c0 1300 	strd	r1, r3, [r0]
 80180cc:	4b11      	ldr	r3, [pc, #68]	@ (8018114 <rand+0x70>)
 80180ce:	6083      	str	r3, [r0, #8]
 80180d0:	230b      	movs	r3, #11
 80180d2:	8183      	strh	r3, [r0, #12]
 80180d4:	2100      	movs	r1, #0
 80180d6:	2001      	movs	r0, #1
 80180d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80180dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80180de:	480e      	ldr	r0, [pc, #56]	@ (8018118 <rand+0x74>)
 80180e0:	690b      	ldr	r3, [r1, #16]
 80180e2:	694c      	ldr	r4, [r1, #20]
 80180e4:	4a0d      	ldr	r2, [pc, #52]	@ (801811c <rand+0x78>)
 80180e6:	4358      	muls	r0, r3
 80180e8:	fb02 0004 	mla	r0, r2, r4, r0
 80180ec:	fba3 3202 	umull	r3, r2, r3, r2
 80180f0:	3301      	adds	r3, #1
 80180f2:	eb40 0002 	adc.w	r0, r0, r2
 80180f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80180fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80180fe:	bd10      	pop	{r4, pc}
 8018100:	20000eb0 	.word	0x20000eb0
 8018104:	0801a62c 	.word	0x0801a62c
 8018108:	0801a643 	.word	0x0801a643
 801810c:	abcd330e 	.word	0xabcd330e
 8018110:	e66d1234 	.word	0xe66d1234
 8018114:	0005deec 	.word	0x0005deec
 8018118:	5851f42d 	.word	0x5851f42d
 801811c:	4c957f2d 	.word	0x4c957f2d

08018120 <realloc>:
 8018120:	4b02      	ldr	r3, [pc, #8]	@ (801812c <realloc+0xc>)
 8018122:	460a      	mov	r2, r1
 8018124:	4601      	mov	r1, r0
 8018126:	6818      	ldr	r0, [r3, #0]
 8018128:	f000 b802 	b.w	8018130 <_realloc_r>
 801812c:	20000eb0 	.word	0x20000eb0

08018130 <_realloc_r>:
 8018130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018134:	4607      	mov	r7, r0
 8018136:	4614      	mov	r4, r2
 8018138:	460d      	mov	r5, r1
 801813a:	b921      	cbnz	r1, 8018146 <_realloc_r+0x16>
 801813c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018140:	4611      	mov	r1, r2
 8018142:	f7ff bef5 	b.w	8017f30 <_malloc_r>
 8018146:	b92a      	cbnz	r2, 8018154 <_realloc_r+0x24>
 8018148:	f000 fc3c 	bl	80189c4 <_free_r>
 801814c:	4625      	mov	r5, r4
 801814e:	4628      	mov	r0, r5
 8018150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018154:	f000 fc80 	bl	8018a58 <_malloc_usable_size_r>
 8018158:	4284      	cmp	r4, r0
 801815a:	4606      	mov	r6, r0
 801815c:	d802      	bhi.n	8018164 <_realloc_r+0x34>
 801815e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018162:	d8f4      	bhi.n	801814e <_realloc_r+0x1e>
 8018164:	4621      	mov	r1, r4
 8018166:	4638      	mov	r0, r7
 8018168:	f7ff fee2 	bl	8017f30 <_malloc_r>
 801816c:	4680      	mov	r8, r0
 801816e:	b908      	cbnz	r0, 8018174 <_realloc_r+0x44>
 8018170:	4645      	mov	r5, r8
 8018172:	e7ec      	b.n	801814e <_realloc_r+0x1e>
 8018174:	42b4      	cmp	r4, r6
 8018176:	4622      	mov	r2, r4
 8018178:	4629      	mov	r1, r5
 801817a:	bf28      	it	cs
 801817c:	4632      	movcs	r2, r6
 801817e:	f000 fbe8 	bl	8018952 <memcpy>
 8018182:	4629      	mov	r1, r5
 8018184:	4638      	mov	r0, r7
 8018186:	f000 fc1d 	bl	80189c4 <_free_r>
 801818a:	e7f1      	b.n	8018170 <_realloc_r+0x40>

0801818c <_strtoul_l.isra.0>:
 801818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018190:	4e34      	ldr	r6, [pc, #208]	@ (8018264 <_strtoul_l.isra.0+0xd8>)
 8018192:	4686      	mov	lr, r0
 8018194:	460d      	mov	r5, r1
 8018196:	4628      	mov	r0, r5
 8018198:	f815 4b01 	ldrb.w	r4, [r5], #1
 801819c:	5d37      	ldrb	r7, [r6, r4]
 801819e:	f017 0708 	ands.w	r7, r7, #8
 80181a2:	d1f8      	bne.n	8018196 <_strtoul_l.isra.0+0xa>
 80181a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80181a6:	d110      	bne.n	80181ca <_strtoul_l.isra.0+0x3e>
 80181a8:	782c      	ldrb	r4, [r5, #0]
 80181aa:	2701      	movs	r7, #1
 80181ac:	1c85      	adds	r5, r0, #2
 80181ae:	f033 0010 	bics.w	r0, r3, #16
 80181b2:	d115      	bne.n	80181e0 <_strtoul_l.isra.0+0x54>
 80181b4:	2c30      	cmp	r4, #48	@ 0x30
 80181b6:	d10d      	bne.n	80181d4 <_strtoul_l.isra.0+0x48>
 80181b8:	7828      	ldrb	r0, [r5, #0]
 80181ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80181be:	2858      	cmp	r0, #88	@ 0x58
 80181c0:	d108      	bne.n	80181d4 <_strtoul_l.isra.0+0x48>
 80181c2:	786c      	ldrb	r4, [r5, #1]
 80181c4:	3502      	adds	r5, #2
 80181c6:	2310      	movs	r3, #16
 80181c8:	e00a      	b.n	80181e0 <_strtoul_l.isra.0+0x54>
 80181ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80181cc:	bf04      	itt	eq
 80181ce:	782c      	ldrbeq	r4, [r5, #0]
 80181d0:	1c85      	addeq	r5, r0, #2
 80181d2:	e7ec      	b.n	80181ae <_strtoul_l.isra.0+0x22>
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1f6      	bne.n	80181c6 <_strtoul_l.isra.0+0x3a>
 80181d8:	2c30      	cmp	r4, #48	@ 0x30
 80181da:	bf14      	ite	ne
 80181dc:	230a      	movne	r3, #10
 80181de:	2308      	moveq	r3, #8
 80181e0:	f04f 38ff 	mov.w	r8, #4294967295
 80181e4:	2600      	movs	r6, #0
 80181e6:	fbb8 f8f3 	udiv	r8, r8, r3
 80181ea:	fb03 f908 	mul.w	r9, r3, r8
 80181ee:	ea6f 0909 	mvn.w	r9, r9
 80181f2:	4630      	mov	r0, r6
 80181f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80181f8:	f1bc 0f09 	cmp.w	ip, #9
 80181fc:	d810      	bhi.n	8018220 <_strtoul_l.isra.0+0x94>
 80181fe:	4664      	mov	r4, ip
 8018200:	42a3      	cmp	r3, r4
 8018202:	dd1e      	ble.n	8018242 <_strtoul_l.isra.0+0xb6>
 8018204:	f1b6 3fff 	cmp.w	r6, #4294967295
 8018208:	d007      	beq.n	801821a <_strtoul_l.isra.0+0x8e>
 801820a:	4580      	cmp	r8, r0
 801820c:	d316      	bcc.n	801823c <_strtoul_l.isra.0+0xb0>
 801820e:	d101      	bne.n	8018214 <_strtoul_l.isra.0+0x88>
 8018210:	45a1      	cmp	r9, r4
 8018212:	db13      	blt.n	801823c <_strtoul_l.isra.0+0xb0>
 8018214:	fb00 4003 	mla	r0, r0, r3, r4
 8018218:	2601      	movs	r6, #1
 801821a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801821e:	e7e9      	b.n	80181f4 <_strtoul_l.isra.0+0x68>
 8018220:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018224:	f1bc 0f19 	cmp.w	ip, #25
 8018228:	d801      	bhi.n	801822e <_strtoul_l.isra.0+0xa2>
 801822a:	3c37      	subs	r4, #55	@ 0x37
 801822c:	e7e8      	b.n	8018200 <_strtoul_l.isra.0+0x74>
 801822e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018232:	f1bc 0f19 	cmp.w	ip, #25
 8018236:	d804      	bhi.n	8018242 <_strtoul_l.isra.0+0xb6>
 8018238:	3c57      	subs	r4, #87	@ 0x57
 801823a:	e7e1      	b.n	8018200 <_strtoul_l.isra.0+0x74>
 801823c:	f04f 36ff 	mov.w	r6, #4294967295
 8018240:	e7eb      	b.n	801821a <_strtoul_l.isra.0+0x8e>
 8018242:	1c73      	adds	r3, r6, #1
 8018244:	d106      	bne.n	8018254 <_strtoul_l.isra.0+0xc8>
 8018246:	2322      	movs	r3, #34	@ 0x22
 8018248:	f8ce 3000 	str.w	r3, [lr]
 801824c:	4630      	mov	r0, r6
 801824e:	b932      	cbnz	r2, 801825e <_strtoul_l.isra.0+0xd2>
 8018250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018254:	b107      	cbz	r7, 8018258 <_strtoul_l.isra.0+0xcc>
 8018256:	4240      	negs	r0, r0
 8018258:	2a00      	cmp	r2, #0
 801825a:	d0f9      	beq.n	8018250 <_strtoul_l.isra.0+0xc4>
 801825c:	b106      	cbz	r6, 8018260 <_strtoul_l.isra.0+0xd4>
 801825e:	1e69      	subs	r1, r5, #1
 8018260:	6011      	str	r1, [r2, #0]
 8018262:	e7f5      	b.n	8018250 <_strtoul_l.isra.0+0xc4>
 8018264:	0801a70b 	.word	0x0801a70b

08018268 <strtoul>:
 8018268:	4613      	mov	r3, r2
 801826a:	460a      	mov	r2, r1
 801826c:	4601      	mov	r1, r0
 801826e:	4802      	ldr	r0, [pc, #8]	@ (8018278 <strtoul+0x10>)
 8018270:	6800      	ldr	r0, [r0, #0]
 8018272:	f7ff bf8b 	b.w	801818c <_strtoul_l.isra.0>
 8018276:	bf00      	nop
 8018278:	20000eb0 	.word	0x20000eb0

0801827c <std>:
 801827c:	2300      	movs	r3, #0
 801827e:	b510      	push	{r4, lr}
 8018280:	4604      	mov	r4, r0
 8018282:	e9c0 3300 	strd	r3, r3, [r0]
 8018286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801828a:	6083      	str	r3, [r0, #8]
 801828c:	8181      	strh	r1, [r0, #12]
 801828e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018290:	81c2      	strh	r2, [r0, #14]
 8018292:	6183      	str	r3, [r0, #24]
 8018294:	4619      	mov	r1, r3
 8018296:	2208      	movs	r2, #8
 8018298:	305c      	adds	r0, #92	@ 0x5c
 801829a:	f000 fa7f 	bl	801879c <memset>
 801829e:	4b0d      	ldr	r3, [pc, #52]	@ (80182d4 <std+0x58>)
 80182a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80182a2:	4b0d      	ldr	r3, [pc, #52]	@ (80182d8 <std+0x5c>)
 80182a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80182a6:	4b0d      	ldr	r3, [pc, #52]	@ (80182dc <std+0x60>)
 80182a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80182aa:	4b0d      	ldr	r3, [pc, #52]	@ (80182e0 <std+0x64>)
 80182ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80182ae:	4b0d      	ldr	r3, [pc, #52]	@ (80182e4 <std+0x68>)
 80182b0:	6224      	str	r4, [r4, #32]
 80182b2:	429c      	cmp	r4, r3
 80182b4:	d006      	beq.n	80182c4 <std+0x48>
 80182b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80182ba:	4294      	cmp	r4, r2
 80182bc:	d002      	beq.n	80182c4 <std+0x48>
 80182be:	33d0      	adds	r3, #208	@ 0xd0
 80182c0:	429c      	cmp	r4, r3
 80182c2:	d105      	bne.n	80182d0 <std+0x54>
 80182c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80182c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182cc:	f000 bb36 	b.w	801893c <__retarget_lock_init_recursive>
 80182d0:	bd10      	pop	{r4, pc}
 80182d2:	bf00      	nop
 80182d4:	08018521 	.word	0x08018521
 80182d8:	08018543 	.word	0x08018543
 80182dc:	0801857b 	.word	0x0801857b
 80182e0:	0801859f 	.word	0x0801859f
 80182e4:	2000edb0 	.word	0x2000edb0

080182e8 <stdio_exit_handler>:
 80182e8:	4a02      	ldr	r2, [pc, #8]	@ (80182f4 <stdio_exit_handler+0xc>)
 80182ea:	4903      	ldr	r1, [pc, #12]	@ (80182f8 <stdio_exit_handler+0x10>)
 80182ec:	4803      	ldr	r0, [pc, #12]	@ (80182fc <stdio_exit_handler+0x14>)
 80182ee:	f000 b869 	b.w	80183c4 <_fwalk_sglue>
 80182f2:	bf00      	nop
 80182f4:	20000ea4 	.word	0x20000ea4
 80182f8:	08019139 	.word	0x08019139
 80182fc:	20000eb4 	.word	0x20000eb4

08018300 <cleanup_stdio>:
 8018300:	6841      	ldr	r1, [r0, #4]
 8018302:	4b0c      	ldr	r3, [pc, #48]	@ (8018334 <cleanup_stdio+0x34>)
 8018304:	4299      	cmp	r1, r3
 8018306:	b510      	push	{r4, lr}
 8018308:	4604      	mov	r4, r0
 801830a:	d001      	beq.n	8018310 <cleanup_stdio+0x10>
 801830c:	f000 ff14 	bl	8019138 <_fflush_r>
 8018310:	68a1      	ldr	r1, [r4, #8]
 8018312:	4b09      	ldr	r3, [pc, #36]	@ (8018338 <cleanup_stdio+0x38>)
 8018314:	4299      	cmp	r1, r3
 8018316:	d002      	beq.n	801831e <cleanup_stdio+0x1e>
 8018318:	4620      	mov	r0, r4
 801831a:	f000 ff0d 	bl	8019138 <_fflush_r>
 801831e:	68e1      	ldr	r1, [r4, #12]
 8018320:	4b06      	ldr	r3, [pc, #24]	@ (801833c <cleanup_stdio+0x3c>)
 8018322:	4299      	cmp	r1, r3
 8018324:	d004      	beq.n	8018330 <cleanup_stdio+0x30>
 8018326:	4620      	mov	r0, r4
 8018328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801832c:	f000 bf04 	b.w	8019138 <_fflush_r>
 8018330:	bd10      	pop	{r4, pc}
 8018332:	bf00      	nop
 8018334:	2000edb0 	.word	0x2000edb0
 8018338:	2000ee18 	.word	0x2000ee18
 801833c:	2000ee80 	.word	0x2000ee80

08018340 <global_stdio_init.part.0>:
 8018340:	b510      	push	{r4, lr}
 8018342:	4b0b      	ldr	r3, [pc, #44]	@ (8018370 <global_stdio_init.part.0+0x30>)
 8018344:	4c0b      	ldr	r4, [pc, #44]	@ (8018374 <global_stdio_init.part.0+0x34>)
 8018346:	4a0c      	ldr	r2, [pc, #48]	@ (8018378 <global_stdio_init.part.0+0x38>)
 8018348:	601a      	str	r2, [r3, #0]
 801834a:	4620      	mov	r0, r4
 801834c:	2200      	movs	r2, #0
 801834e:	2104      	movs	r1, #4
 8018350:	f7ff ff94 	bl	801827c <std>
 8018354:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018358:	2201      	movs	r2, #1
 801835a:	2109      	movs	r1, #9
 801835c:	f7ff ff8e 	bl	801827c <std>
 8018360:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018364:	2202      	movs	r2, #2
 8018366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801836a:	2112      	movs	r1, #18
 801836c:	f7ff bf86 	b.w	801827c <std>
 8018370:	2000eee8 	.word	0x2000eee8
 8018374:	2000edb0 	.word	0x2000edb0
 8018378:	080182e9 	.word	0x080182e9

0801837c <__sfp_lock_acquire>:
 801837c:	4801      	ldr	r0, [pc, #4]	@ (8018384 <__sfp_lock_acquire+0x8>)
 801837e:	f000 bade 	b.w	801893e <__retarget_lock_acquire_recursive>
 8018382:	bf00      	nop
 8018384:	2000eef2 	.word	0x2000eef2

08018388 <__sfp_lock_release>:
 8018388:	4801      	ldr	r0, [pc, #4]	@ (8018390 <__sfp_lock_release+0x8>)
 801838a:	f000 bad9 	b.w	8018940 <__retarget_lock_release_recursive>
 801838e:	bf00      	nop
 8018390:	2000eef2 	.word	0x2000eef2

08018394 <__sinit>:
 8018394:	b510      	push	{r4, lr}
 8018396:	4604      	mov	r4, r0
 8018398:	f7ff fff0 	bl	801837c <__sfp_lock_acquire>
 801839c:	6a23      	ldr	r3, [r4, #32]
 801839e:	b11b      	cbz	r3, 80183a8 <__sinit+0x14>
 80183a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183a4:	f7ff bff0 	b.w	8018388 <__sfp_lock_release>
 80183a8:	4b04      	ldr	r3, [pc, #16]	@ (80183bc <__sinit+0x28>)
 80183aa:	6223      	str	r3, [r4, #32]
 80183ac:	4b04      	ldr	r3, [pc, #16]	@ (80183c0 <__sinit+0x2c>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d1f5      	bne.n	80183a0 <__sinit+0xc>
 80183b4:	f7ff ffc4 	bl	8018340 <global_stdio_init.part.0>
 80183b8:	e7f2      	b.n	80183a0 <__sinit+0xc>
 80183ba:	bf00      	nop
 80183bc:	08018301 	.word	0x08018301
 80183c0:	2000eee8 	.word	0x2000eee8

080183c4 <_fwalk_sglue>:
 80183c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183c8:	4607      	mov	r7, r0
 80183ca:	4688      	mov	r8, r1
 80183cc:	4614      	mov	r4, r2
 80183ce:	2600      	movs	r6, #0
 80183d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80183d4:	f1b9 0901 	subs.w	r9, r9, #1
 80183d8:	d505      	bpl.n	80183e6 <_fwalk_sglue+0x22>
 80183da:	6824      	ldr	r4, [r4, #0]
 80183dc:	2c00      	cmp	r4, #0
 80183de:	d1f7      	bne.n	80183d0 <_fwalk_sglue+0xc>
 80183e0:	4630      	mov	r0, r6
 80183e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183e6:	89ab      	ldrh	r3, [r5, #12]
 80183e8:	2b01      	cmp	r3, #1
 80183ea:	d907      	bls.n	80183fc <_fwalk_sglue+0x38>
 80183ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80183f0:	3301      	adds	r3, #1
 80183f2:	d003      	beq.n	80183fc <_fwalk_sglue+0x38>
 80183f4:	4629      	mov	r1, r5
 80183f6:	4638      	mov	r0, r7
 80183f8:	47c0      	blx	r8
 80183fa:	4306      	orrs	r6, r0
 80183fc:	3568      	adds	r5, #104	@ 0x68
 80183fe:	e7e9      	b.n	80183d4 <_fwalk_sglue+0x10>

08018400 <_fwrite_r>:
 8018400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018404:	9c08      	ldr	r4, [sp, #32]
 8018406:	468a      	mov	sl, r1
 8018408:	4690      	mov	r8, r2
 801840a:	fb02 f903 	mul.w	r9, r2, r3
 801840e:	4606      	mov	r6, r0
 8018410:	b118      	cbz	r0, 801841a <_fwrite_r+0x1a>
 8018412:	6a03      	ldr	r3, [r0, #32]
 8018414:	b90b      	cbnz	r3, 801841a <_fwrite_r+0x1a>
 8018416:	f7ff ffbd 	bl	8018394 <__sinit>
 801841a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801841c:	07dd      	lsls	r5, r3, #31
 801841e:	d405      	bmi.n	801842c <_fwrite_r+0x2c>
 8018420:	89a3      	ldrh	r3, [r4, #12]
 8018422:	0598      	lsls	r0, r3, #22
 8018424:	d402      	bmi.n	801842c <_fwrite_r+0x2c>
 8018426:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018428:	f000 fa89 	bl	801893e <__retarget_lock_acquire_recursive>
 801842c:	89a3      	ldrh	r3, [r4, #12]
 801842e:	0719      	lsls	r1, r3, #28
 8018430:	d516      	bpl.n	8018460 <_fwrite_r+0x60>
 8018432:	6923      	ldr	r3, [r4, #16]
 8018434:	b1a3      	cbz	r3, 8018460 <_fwrite_r+0x60>
 8018436:	2500      	movs	r5, #0
 8018438:	454d      	cmp	r5, r9
 801843a:	d01f      	beq.n	801847c <_fwrite_r+0x7c>
 801843c:	68a7      	ldr	r7, [r4, #8]
 801843e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018442:	3f01      	subs	r7, #1
 8018444:	2f00      	cmp	r7, #0
 8018446:	60a7      	str	r7, [r4, #8]
 8018448:	da04      	bge.n	8018454 <_fwrite_r+0x54>
 801844a:	69a3      	ldr	r3, [r4, #24]
 801844c:	429f      	cmp	r7, r3
 801844e:	db0f      	blt.n	8018470 <_fwrite_r+0x70>
 8018450:	290a      	cmp	r1, #10
 8018452:	d00d      	beq.n	8018470 <_fwrite_r+0x70>
 8018454:	6823      	ldr	r3, [r4, #0]
 8018456:	1c5a      	adds	r2, r3, #1
 8018458:	6022      	str	r2, [r4, #0]
 801845a:	7019      	strb	r1, [r3, #0]
 801845c:	3501      	adds	r5, #1
 801845e:	e7eb      	b.n	8018438 <_fwrite_r+0x38>
 8018460:	4621      	mov	r1, r4
 8018462:	4630      	mov	r0, r6
 8018464:	f000 f91a 	bl	801869c <__swsetup_r>
 8018468:	2800      	cmp	r0, #0
 801846a:	d0e4      	beq.n	8018436 <_fwrite_r+0x36>
 801846c:	2500      	movs	r5, #0
 801846e:	e005      	b.n	801847c <_fwrite_r+0x7c>
 8018470:	4622      	mov	r2, r4
 8018472:	4630      	mov	r0, r6
 8018474:	f000 f8d4 	bl	8018620 <__swbuf_r>
 8018478:	3001      	adds	r0, #1
 801847a:	d1ef      	bne.n	801845c <_fwrite_r+0x5c>
 801847c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801847e:	07da      	lsls	r2, r3, #31
 8018480:	d405      	bmi.n	801848e <_fwrite_r+0x8e>
 8018482:	89a3      	ldrh	r3, [r4, #12]
 8018484:	059b      	lsls	r3, r3, #22
 8018486:	d402      	bmi.n	801848e <_fwrite_r+0x8e>
 8018488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801848a:	f000 fa59 	bl	8018940 <__retarget_lock_release_recursive>
 801848e:	fbb5 f0f8 	udiv	r0, r5, r8
 8018492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018498 <fwrite>:
 8018498:	b507      	push	{r0, r1, r2, lr}
 801849a:	9300      	str	r3, [sp, #0]
 801849c:	4613      	mov	r3, r2
 801849e:	460a      	mov	r2, r1
 80184a0:	4601      	mov	r1, r0
 80184a2:	4803      	ldr	r0, [pc, #12]	@ (80184b0 <fwrite+0x18>)
 80184a4:	6800      	ldr	r0, [r0, #0]
 80184a6:	f7ff ffab 	bl	8018400 <_fwrite_r>
 80184aa:	b003      	add	sp, #12
 80184ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80184b0:	20000eb0 	.word	0x20000eb0

080184b4 <sniprintf>:
 80184b4:	b40c      	push	{r2, r3}
 80184b6:	b530      	push	{r4, r5, lr}
 80184b8:	4b18      	ldr	r3, [pc, #96]	@ (801851c <sniprintf+0x68>)
 80184ba:	1e0c      	subs	r4, r1, #0
 80184bc:	681d      	ldr	r5, [r3, #0]
 80184be:	b09d      	sub	sp, #116	@ 0x74
 80184c0:	da08      	bge.n	80184d4 <sniprintf+0x20>
 80184c2:	238b      	movs	r3, #139	@ 0x8b
 80184c4:	602b      	str	r3, [r5, #0]
 80184c6:	f04f 30ff 	mov.w	r0, #4294967295
 80184ca:	b01d      	add	sp, #116	@ 0x74
 80184cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184d0:	b002      	add	sp, #8
 80184d2:	4770      	bx	lr
 80184d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80184d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80184dc:	f04f 0300 	mov.w	r3, #0
 80184e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80184e2:	bf14      	ite	ne
 80184e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80184e8:	4623      	moveq	r3, r4
 80184ea:	9304      	str	r3, [sp, #16]
 80184ec:	9307      	str	r3, [sp, #28]
 80184ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80184f2:	9002      	str	r0, [sp, #8]
 80184f4:	9006      	str	r0, [sp, #24]
 80184f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80184fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80184fc:	ab21      	add	r3, sp, #132	@ 0x84
 80184fe:	a902      	add	r1, sp, #8
 8018500:	4628      	mov	r0, r5
 8018502:	9301      	str	r3, [sp, #4]
 8018504:	f000 fb0c 	bl	8018b20 <_svfiprintf_r>
 8018508:	1c43      	adds	r3, r0, #1
 801850a:	bfbc      	itt	lt
 801850c:	238b      	movlt	r3, #139	@ 0x8b
 801850e:	602b      	strlt	r3, [r5, #0]
 8018510:	2c00      	cmp	r4, #0
 8018512:	d0da      	beq.n	80184ca <sniprintf+0x16>
 8018514:	9b02      	ldr	r3, [sp, #8]
 8018516:	2200      	movs	r2, #0
 8018518:	701a      	strb	r2, [r3, #0]
 801851a:	e7d6      	b.n	80184ca <sniprintf+0x16>
 801851c:	20000eb0 	.word	0x20000eb0

08018520 <__sread>:
 8018520:	b510      	push	{r4, lr}
 8018522:	460c      	mov	r4, r1
 8018524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018528:	f000 f9aa 	bl	8018880 <_read_r>
 801852c:	2800      	cmp	r0, #0
 801852e:	bfab      	itete	ge
 8018530:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018532:	89a3      	ldrhlt	r3, [r4, #12]
 8018534:	181b      	addge	r3, r3, r0
 8018536:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801853a:	bfac      	ite	ge
 801853c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801853e:	81a3      	strhlt	r3, [r4, #12]
 8018540:	bd10      	pop	{r4, pc}

08018542 <__swrite>:
 8018542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018546:	461f      	mov	r7, r3
 8018548:	898b      	ldrh	r3, [r1, #12]
 801854a:	05db      	lsls	r3, r3, #23
 801854c:	4605      	mov	r5, r0
 801854e:	460c      	mov	r4, r1
 8018550:	4616      	mov	r6, r2
 8018552:	d505      	bpl.n	8018560 <__swrite+0x1e>
 8018554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018558:	2302      	movs	r3, #2
 801855a:	2200      	movs	r2, #0
 801855c:	f000 f97e 	bl	801885c <_lseek_r>
 8018560:	89a3      	ldrh	r3, [r4, #12]
 8018562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018566:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801856a:	81a3      	strh	r3, [r4, #12]
 801856c:	4632      	mov	r2, r6
 801856e:	463b      	mov	r3, r7
 8018570:	4628      	mov	r0, r5
 8018572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018576:	f000 b9a5 	b.w	80188c4 <_write_r>

0801857a <__sseek>:
 801857a:	b510      	push	{r4, lr}
 801857c:	460c      	mov	r4, r1
 801857e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018582:	f000 f96b 	bl	801885c <_lseek_r>
 8018586:	1c43      	adds	r3, r0, #1
 8018588:	89a3      	ldrh	r3, [r4, #12]
 801858a:	bf15      	itete	ne
 801858c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801858e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018592:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018596:	81a3      	strheq	r3, [r4, #12]
 8018598:	bf18      	it	ne
 801859a:	81a3      	strhne	r3, [r4, #12]
 801859c:	bd10      	pop	{r4, pc}

0801859e <__sclose>:
 801859e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185a2:	f000 b94b 	b.w	801883c <_close_r>

080185a6 <_vsniprintf_r>:
 80185a6:	b530      	push	{r4, r5, lr}
 80185a8:	4614      	mov	r4, r2
 80185aa:	2c00      	cmp	r4, #0
 80185ac:	b09b      	sub	sp, #108	@ 0x6c
 80185ae:	4605      	mov	r5, r0
 80185b0:	461a      	mov	r2, r3
 80185b2:	da05      	bge.n	80185c0 <_vsniprintf_r+0x1a>
 80185b4:	238b      	movs	r3, #139	@ 0x8b
 80185b6:	6003      	str	r3, [r0, #0]
 80185b8:	f04f 30ff 	mov.w	r0, #4294967295
 80185bc:	b01b      	add	sp, #108	@ 0x6c
 80185be:	bd30      	pop	{r4, r5, pc}
 80185c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80185c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80185c8:	f04f 0300 	mov.w	r3, #0
 80185cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80185ce:	bf14      	ite	ne
 80185d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80185d4:	4623      	moveq	r3, r4
 80185d6:	9302      	str	r3, [sp, #8]
 80185d8:	9305      	str	r3, [sp, #20]
 80185da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80185de:	9100      	str	r1, [sp, #0]
 80185e0:	9104      	str	r1, [sp, #16]
 80185e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80185e6:	4669      	mov	r1, sp
 80185e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80185ea:	f000 fa99 	bl	8018b20 <_svfiprintf_r>
 80185ee:	1c43      	adds	r3, r0, #1
 80185f0:	bfbc      	itt	lt
 80185f2:	238b      	movlt	r3, #139	@ 0x8b
 80185f4:	602b      	strlt	r3, [r5, #0]
 80185f6:	2c00      	cmp	r4, #0
 80185f8:	d0e0      	beq.n	80185bc <_vsniprintf_r+0x16>
 80185fa:	9b00      	ldr	r3, [sp, #0]
 80185fc:	2200      	movs	r2, #0
 80185fe:	701a      	strb	r2, [r3, #0]
 8018600:	e7dc      	b.n	80185bc <_vsniprintf_r+0x16>
	...

08018604 <vsniprintf>:
 8018604:	b507      	push	{r0, r1, r2, lr}
 8018606:	9300      	str	r3, [sp, #0]
 8018608:	4613      	mov	r3, r2
 801860a:	460a      	mov	r2, r1
 801860c:	4601      	mov	r1, r0
 801860e:	4803      	ldr	r0, [pc, #12]	@ (801861c <vsniprintf+0x18>)
 8018610:	6800      	ldr	r0, [r0, #0]
 8018612:	f7ff ffc8 	bl	80185a6 <_vsniprintf_r>
 8018616:	b003      	add	sp, #12
 8018618:	f85d fb04 	ldr.w	pc, [sp], #4
 801861c:	20000eb0 	.word	0x20000eb0

08018620 <__swbuf_r>:
 8018620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018622:	460e      	mov	r6, r1
 8018624:	4614      	mov	r4, r2
 8018626:	4605      	mov	r5, r0
 8018628:	b118      	cbz	r0, 8018632 <__swbuf_r+0x12>
 801862a:	6a03      	ldr	r3, [r0, #32]
 801862c:	b90b      	cbnz	r3, 8018632 <__swbuf_r+0x12>
 801862e:	f7ff feb1 	bl	8018394 <__sinit>
 8018632:	69a3      	ldr	r3, [r4, #24]
 8018634:	60a3      	str	r3, [r4, #8]
 8018636:	89a3      	ldrh	r3, [r4, #12]
 8018638:	071a      	lsls	r2, r3, #28
 801863a:	d501      	bpl.n	8018640 <__swbuf_r+0x20>
 801863c:	6923      	ldr	r3, [r4, #16]
 801863e:	b943      	cbnz	r3, 8018652 <__swbuf_r+0x32>
 8018640:	4621      	mov	r1, r4
 8018642:	4628      	mov	r0, r5
 8018644:	f000 f82a 	bl	801869c <__swsetup_r>
 8018648:	b118      	cbz	r0, 8018652 <__swbuf_r+0x32>
 801864a:	f04f 37ff 	mov.w	r7, #4294967295
 801864e:	4638      	mov	r0, r7
 8018650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018652:	6823      	ldr	r3, [r4, #0]
 8018654:	6922      	ldr	r2, [r4, #16]
 8018656:	1a98      	subs	r0, r3, r2
 8018658:	6963      	ldr	r3, [r4, #20]
 801865a:	b2f6      	uxtb	r6, r6
 801865c:	4283      	cmp	r3, r0
 801865e:	4637      	mov	r7, r6
 8018660:	dc05      	bgt.n	801866e <__swbuf_r+0x4e>
 8018662:	4621      	mov	r1, r4
 8018664:	4628      	mov	r0, r5
 8018666:	f000 fd67 	bl	8019138 <_fflush_r>
 801866a:	2800      	cmp	r0, #0
 801866c:	d1ed      	bne.n	801864a <__swbuf_r+0x2a>
 801866e:	68a3      	ldr	r3, [r4, #8]
 8018670:	3b01      	subs	r3, #1
 8018672:	60a3      	str	r3, [r4, #8]
 8018674:	6823      	ldr	r3, [r4, #0]
 8018676:	1c5a      	adds	r2, r3, #1
 8018678:	6022      	str	r2, [r4, #0]
 801867a:	701e      	strb	r6, [r3, #0]
 801867c:	6962      	ldr	r2, [r4, #20]
 801867e:	1c43      	adds	r3, r0, #1
 8018680:	429a      	cmp	r2, r3
 8018682:	d004      	beq.n	801868e <__swbuf_r+0x6e>
 8018684:	89a3      	ldrh	r3, [r4, #12]
 8018686:	07db      	lsls	r3, r3, #31
 8018688:	d5e1      	bpl.n	801864e <__swbuf_r+0x2e>
 801868a:	2e0a      	cmp	r6, #10
 801868c:	d1df      	bne.n	801864e <__swbuf_r+0x2e>
 801868e:	4621      	mov	r1, r4
 8018690:	4628      	mov	r0, r5
 8018692:	f000 fd51 	bl	8019138 <_fflush_r>
 8018696:	2800      	cmp	r0, #0
 8018698:	d0d9      	beq.n	801864e <__swbuf_r+0x2e>
 801869a:	e7d6      	b.n	801864a <__swbuf_r+0x2a>

0801869c <__swsetup_r>:
 801869c:	b538      	push	{r3, r4, r5, lr}
 801869e:	4b29      	ldr	r3, [pc, #164]	@ (8018744 <__swsetup_r+0xa8>)
 80186a0:	4605      	mov	r5, r0
 80186a2:	6818      	ldr	r0, [r3, #0]
 80186a4:	460c      	mov	r4, r1
 80186a6:	b118      	cbz	r0, 80186b0 <__swsetup_r+0x14>
 80186a8:	6a03      	ldr	r3, [r0, #32]
 80186aa:	b90b      	cbnz	r3, 80186b0 <__swsetup_r+0x14>
 80186ac:	f7ff fe72 	bl	8018394 <__sinit>
 80186b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186b4:	0719      	lsls	r1, r3, #28
 80186b6:	d422      	bmi.n	80186fe <__swsetup_r+0x62>
 80186b8:	06da      	lsls	r2, r3, #27
 80186ba:	d407      	bmi.n	80186cc <__swsetup_r+0x30>
 80186bc:	2209      	movs	r2, #9
 80186be:	602a      	str	r2, [r5, #0]
 80186c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80186c4:	81a3      	strh	r3, [r4, #12]
 80186c6:	f04f 30ff 	mov.w	r0, #4294967295
 80186ca:	e033      	b.n	8018734 <__swsetup_r+0x98>
 80186cc:	0758      	lsls	r0, r3, #29
 80186ce:	d512      	bpl.n	80186f6 <__swsetup_r+0x5a>
 80186d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80186d2:	b141      	cbz	r1, 80186e6 <__swsetup_r+0x4a>
 80186d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80186d8:	4299      	cmp	r1, r3
 80186da:	d002      	beq.n	80186e2 <__swsetup_r+0x46>
 80186dc:	4628      	mov	r0, r5
 80186de:	f000 f971 	bl	80189c4 <_free_r>
 80186e2:	2300      	movs	r3, #0
 80186e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80186e6:	89a3      	ldrh	r3, [r4, #12]
 80186e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80186ec:	81a3      	strh	r3, [r4, #12]
 80186ee:	2300      	movs	r3, #0
 80186f0:	6063      	str	r3, [r4, #4]
 80186f2:	6923      	ldr	r3, [r4, #16]
 80186f4:	6023      	str	r3, [r4, #0]
 80186f6:	89a3      	ldrh	r3, [r4, #12]
 80186f8:	f043 0308 	orr.w	r3, r3, #8
 80186fc:	81a3      	strh	r3, [r4, #12]
 80186fe:	6923      	ldr	r3, [r4, #16]
 8018700:	b94b      	cbnz	r3, 8018716 <__swsetup_r+0x7a>
 8018702:	89a3      	ldrh	r3, [r4, #12]
 8018704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801870c:	d003      	beq.n	8018716 <__swsetup_r+0x7a>
 801870e:	4621      	mov	r1, r4
 8018710:	4628      	mov	r0, r5
 8018712:	f000 fd71 	bl	80191f8 <__smakebuf_r>
 8018716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801871a:	f013 0201 	ands.w	r2, r3, #1
 801871e:	d00a      	beq.n	8018736 <__swsetup_r+0x9a>
 8018720:	2200      	movs	r2, #0
 8018722:	60a2      	str	r2, [r4, #8]
 8018724:	6962      	ldr	r2, [r4, #20]
 8018726:	4252      	negs	r2, r2
 8018728:	61a2      	str	r2, [r4, #24]
 801872a:	6922      	ldr	r2, [r4, #16]
 801872c:	b942      	cbnz	r2, 8018740 <__swsetup_r+0xa4>
 801872e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018732:	d1c5      	bne.n	80186c0 <__swsetup_r+0x24>
 8018734:	bd38      	pop	{r3, r4, r5, pc}
 8018736:	0799      	lsls	r1, r3, #30
 8018738:	bf58      	it	pl
 801873a:	6962      	ldrpl	r2, [r4, #20]
 801873c:	60a2      	str	r2, [r4, #8]
 801873e:	e7f4      	b.n	801872a <__swsetup_r+0x8e>
 8018740:	2000      	movs	r0, #0
 8018742:	e7f7      	b.n	8018734 <__swsetup_r+0x98>
 8018744:	20000eb0 	.word	0x20000eb0

08018748 <memcmp>:
 8018748:	b510      	push	{r4, lr}
 801874a:	3901      	subs	r1, #1
 801874c:	4402      	add	r2, r0
 801874e:	4290      	cmp	r0, r2
 8018750:	d101      	bne.n	8018756 <memcmp+0xe>
 8018752:	2000      	movs	r0, #0
 8018754:	e005      	b.n	8018762 <memcmp+0x1a>
 8018756:	7803      	ldrb	r3, [r0, #0]
 8018758:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801875c:	42a3      	cmp	r3, r4
 801875e:	d001      	beq.n	8018764 <memcmp+0x1c>
 8018760:	1b18      	subs	r0, r3, r4
 8018762:	bd10      	pop	{r4, pc}
 8018764:	3001      	adds	r0, #1
 8018766:	e7f2      	b.n	801874e <memcmp+0x6>

08018768 <memmove>:
 8018768:	4288      	cmp	r0, r1
 801876a:	b510      	push	{r4, lr}
 801876c:	eb01 0402 	add.w	r4, r1, r2
 8018770:	d902      	bls.n	8018778 <memmove+0x10>
 8018772:	4284      	cmp	r4, r0
 8018774:	4623      	mov	r3, r4
 8018776:	d807      	bhi.n	8018788 <memmove+0x20>
 8018778:	1e43      	subs	r3, r0, #1
 801877a:	42a1      	cmp	r1, r4
 801877c:	d008      	beq.n	8018790 <memmove+0x28>
 801877e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018786:	e7f8      	b.n	801877a <memmove+0x12>
 8018788:	4402      	add	r2, r0
 801878a:	4601      	mov	r1, r0
 801878c:	428a      	cmp	r2, r1
 801878e:	d100      	bne.n	8018792 <memmove+0x2a>
 8018790:	bd10      	pop	{r4, pc}
 8018792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801879a:	e7f7      	b.n	801878c <memmove+0x24>

0801879c <memset>:
 801879c:	4402      	add	r2, r0
 801879e:	4603      	mov	r3, r0
 80187a0:	4293      	cmp	r3, r2
 80187a2:	d100      	bne.n	80187a6 <memset+0xa>
 80187a4:	4770      	bx	lr
 80187a6:	f803 1b01 	strb.w	r1, [r3], #1
 80187aa:	e7f9      	b.n	80187a0 <memset+0x4>

080187ac <strchr>:
 80187ac:	b2c9      	uxtb	r1, r1
 80187ae:	4603      	mov	r3, r0
 80187b0:	4618      	mov	r0, r3
 80187b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187b6:	b112      	cbz	r2, 80187be <strchr+0x12>
 80187b8:	428a      	cmp	r2, r1
 80187ba:	d1f9      	bne.n	80187b0 <strchr+0x4>
 80187bc:	4770      	bx	lr
 80187be:	2900      	cmp	r1, #0
 80187c0:	bf18      	it	ne
 80187c2:	2000      	movne	r0, #0
 80187c4:	4770      	bx	lr

080187c6 <strncmp>:
 80187c6:	b510      	push	{r4, lr}
 80187c8:	b16a      	cbz	r2, 80187e6 <strncmp+0x20>
 80187ca:	3901      	subs	r1, #1
 80187cc:	1884      	adds	r4, r0, r2
 80187ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80187d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d103      	bne.n	80187e2 <strncmp+0x1c>
 80187da:	42a0      	cmp	r0, r4
 80187dc:	d001      	beq.n	80187e2 <strncmp+0x1c>
 80187de:	2a00      	cmp	r2, #0
 80187e0:	d1f5      	bne.n	80187ce <strncmp+0x8>
 80187e2:	1ad0      	subs	r0, r2, r3
 80187e4:	bd10      	pop	{r4, pc}
 80187e6:	4610      	mov	r0, r2
 80187e8:	e7fc      	b.n	80187e4 <strncmp+0x1e>

080187ea <strncpy>:
 80187ea:	b510      	push	{r4, lr}
 80187ec:	3901      	subs	r1, #1
 80187ee:	4603      	mov	r3, r0
 80187f0:	b132      	cbz	r2, 8018800 <strncpy+0x16>
 80187f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80187f6:	f803 4b01 	strb.w	r4, [r3], #1
 80187fa:	3a01      	subs	r2, #1
 80187fc:	2c00      	cmp	r4, #0
 80187fe:	d1f7      	bne.n	80187f0 <strncpy+0x6>
 8018800:	441a      	add	r2, r3
 8018802:	2100      	movs	r1, #0
 8018804:	4293      	cmp	r3, r2
 8018806:	d100      	bne.n	801880a <strncpy+0x20>
 8018808:	bd10      	pop	{r4, pc}
 801880a:	f803 1b01 	strb.w	r1, [r3], #1
 801880e:	e7f9      	b.n	8018804 <strncpy+0x1a>

08018810 <strstr>:
 8018810:	780a      	ldrb	r2, [r1, #0]
 8018812:	b570      	push	{r4, r5, r6, lr}
 8018814:	b96a      	cbnz	r2, 8018832 <strstr+0x22>
 8018816:	bd70      	pop	{r4, r5, r6, pc}
 8018818:	429a      	cmp	r2, r3
 801881a:	d109      	bne.n	8018830 <strstr+0x20>
 801881c:	460c      	mov	r4, r1
 801881e:	4605      	mov	r5, r0
 8018820:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018824:	2b00      	cmp	r3, #0
 8018826:	d0f6      	beq.n	8018816 <strstr+0x6>
 8018828:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801882c:	429e      	cmp	r6, r3
 801882e:	d0f7      	beq.n	8018820 <strstr+0x10>
 8018830:	3001      	adds	r0, #1
 8018832:	7803      	ldrb	r3, [r0, #0]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d1ef      	bne.n	8018818 <strstr+0x8>
 8018838:	4618      	mov	r0, r3
 801883a:	e7ec      	b.n	8018816 <strstr+0x6>

0801883c <_close_r>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	4d06      	ldr	r5, [pc, #24]	@ (8018858 <_close_r+0x1c>)
 8018840:	2300      	movs	r3, #0
 8018842:	4604      	mov	r4, r0
 8018844:	4608      	mov	r0, r1
 8018846:	602b      	str	r3, [r5, #0]
 8018848:	f7ea f890 	bl	800296c <_close>
 801884c:	1c43      	adds	r3, r0, #1
 801884e:	d102      	bne.n	8018856 <_close_r+0x1a>
 8018850:	682b      	ldr	r3, [r5, #0]
 8018852:	b103      	cbz	r3, 8018856 <_close_r+0x1a>
 8018854:	6023      	str	r3, [r4, #0]
 8018856:	bd38      	pop	{r3, r4, r5, pc}
 8018858:	2000eeec 	.word	0x2000eeec

0801885c <_lseek_r>:
 801885c:	b538      	push	{r3, r4, r5, lr}
 801885e:	4d07      	ldr	r5, [pc, #28]	@ (801887c <_lseek_r+0x20>)
 8018860:	4604      	mov	r4, r0
 8018862:	4608      	mov	r0, r1
 8018864:	4611      	mov	r1, r2
 8018866:	2200      	movs	r2, #0
 8018868:	602a      	str	r2, [r5, #0]
 801886a:	461a      	mov	r2, r3
 801886c:	f7ea f8a5 	bl	80029ba <_lseek>
 8018870:	1c43      	adds	r3, r0, #1
 8018872:	d102      	bne.n	801887a <_lseek_r+0x1e>
 8018874:	682b      	ldr	r3, [r5, #0]
 8018876:	b103      	cbz	r3, 801887a <_lseek_r+0x1e>
 8018878:	6023      	str	r3, [r4, #0]
 801887a:	bd38      	pop	{r3, r4, r5, pc}
 801887c:	2000eeec 	.word	0x2000eeec

08018880 <_read_r>:
 8018880:	b538      	push	{r3, r4, r5, lr}
 8018882:	4d07      	ldr	r5, [pc, #28]	@ (80188a0 <_read_r+0x20>)
 8018884:	4604      	mov	r4, r0
 8018886:	4608      	mov	r0, r1
 8018888:	4611      	mov	r1, r2
 801888a:	2200      	movs	r2, #0
 801888c:	602a      	str	r2, [r5, #0]
 801888e:	461a      	mov	r2, r3
 8018890:	f7ea f833 	bl	80028fa <_read>
 8018894:	1c43      	adds	r3, r0, #1
 8018896:	d102      	bne.n	801889e <_read_r+0x1e>
 8018898:	682b      	ldr	r3, [r5, #0]
 801889a:	b103      	cbz	r3, 801889e <_read_r+0x1e>
 801889c:	6023      	str	r3, [r4, #0]
 801889e:	bd38      	pop	{r3, r4, r5, pc}
 80188a0:	2000eeec 	.word	0x2000eeec

080188a4 <_sbrk_r>:
 80188a4:	b538      	push	{r3, r4, r5, lr}
 80188a6:	4d06      	ldr	r5, [pc, #24]	@ (80188c0 <_sbrk_r+0x1c>)
 80188a8:	2300      	movs	r3, #0
 80188aa:	4604      	mov	r4, r0
 80188ac:	4608      	mov	r0, r1
 80188ae:	602b      	str	r3, [r5, #0]
 80188b0:	f7ea f890 	bl	80029d4 <_sbrk>
 80188b4:	1c43      	adds	r3, r0, #1
 80188b6:	d102      	bne.n	80188be <_sbrk_r+0x1a>
 80188b8:	682b      	ldr	r3, [r5, #0]
 80188ba:	b103      	cbz	r3, 80188be <_sbrk_r+0x1a>
 80188bc:	6023      	str	r3, [r4, #0]
 80188be:	bd38      	pop	{r3, r4, r5, pc}
 80188c0:	2000eeec 	.word	0x2000eeec

080188c4 <_write_r>:
 80188c4:	b538      	push	{r3, r4, r5, lr}
 80188c6:	4d07      	ldr	r5, [pc, #28]	@ (80188e4 <_write_r+0x20>)
 80188c8:	4604      	mov	r4, r0
 80188ca:	4608      	mov	r0, r1
 80188cc:	4611      	mov	r1, r2
 80188ce:	2200      	movs	r2, #0
 80188d0:	602a      	str	r2, [r5, #0]
 80188d2:	461a      	mov	r2, r3
 80188d4:	f7ea f82e 	bl	8002934 <_write>
 80188d8:	1c43      	adds	r3, r0, #1
 80188da:	d102      	bne.n	80188e2 <_write_r+0x1e>
 80188dc:	682b      	ldr	r3, [r5, #0]
 80188de:	b103      	cbz	r3, 80188e2 <_write_r+0x1e>
 80188e0:	6023      	str	r3, [r4, #0]
 80188e2:	bd38      	pop	{r3, r4, r5, pc}
 80188e4:	2000eeec 	.word	0x2000eeec

080188e8 <__errno>:
 80188e8:	4b01      	ldr	r3, [pc, #4]	@ (80188f0 <__errno+0x8>)
 80188ea:	6818      	ldr	r0, [r3, #0]
 80188ec:	4770      	bx	lr
 80188ee:	bf00      	nop
 80188f0:	20000eb0 	.word	0x20000eb0

080188f4 <__libc_init_array>:
 80188f4:	b570      	push	{r4, r5, r6, lr}
 80188f6:	4d0d      	ldr	r5, [pc, #52]	@ (801892c <__libc_init_array+0x38>)
 80188f8:	4c0d      	ldr	r4, [pc, #52]	@ (8018930 <__libc_init_array+0x3c>)
 80188fa:	1b64      	subs	r4, r4, r5
 80188fc:	10a4      	asrs	r4, r4, #2
 80188fe:	2600      	movs	r6, #0
 8018900:	42a6      	cmp	r6, r4
 8018902:	d109      	bne.n	8018918 <__libc_init_array+0x24>
 8018904:	4d0b      	ldr	r5, [pc, #44]	@ (8018934 <__libc_init_array+0x40>)
 8018906:	4c0c      	ldr	r4, [pc, #48]	@ (8018938 <__libc_init_array+0x44>)
 8018908:	f000 fe60 	bl	80195cc <_init>
 801890c:	1b64      	subs	r4, r4, r5
 801890e:	10a4      	asrs	r4, r4, #2
 8018910:	2600      	movs	r6, #0
 8018912:	42a6      	cmp	r6, r4
 8018914:	d105      	bne.n	8018922 <__libc_init_array+0x2e>
 8018916:	bd70      	pop	{r4, r5, r6, pc}
 8018918:	f855 3b04 	ldr.w	r3, [r5], #4
 801891c:	4798      	blx	r3
 801891e:	3601      	adds	r6, #1
 8018920:	e7ee      	b.n	8018900 <__libc_init_array+0xc>
 8018922:	f855 3b04 	ldr.w	r3, [r5], #4
 8018926:	4798      	blx	r3
 8018928:	3601      	adds	r6, #1
 801892a:	e7f2      	b.n	8018912 <__libc_init_array+0x1e>
 801892c:	0801a814 	.word	0x0801a814
 8018930:	0801a814 	.word	0x0801a814
 8018934:	0801a814 	.word	0x0801a814
 8018938:	0801a81c 	.word	0x0801a81c

0801893c <__retarget_lock_init_recursive>:
 801893c:	4770      	bx	lr

0801893e <__retarget_lock_acquire_recursive>:
 801893e:	4770      	bx	lr

08018940 <__retarget_lock_release_recursive>:
 8018940:	4770      	bx	lr

08018942 <strcpy>:
 8018942:	4603      	mov	r3, r0
 8018944:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018948:	f803 2b01 	strb.w	r2, [r3], #1
 801894c:	2a00      	cmp	r2, #0
 801894e:	d1f9      	bne.n	8018944 <strcpy+0x2>
 8018950:	4770      	bx	lr

08018952 <memcpy>:
 8018952:	440a      	add	r2, r1
 8018954:	4291      	cmp	r1, r2
 8018956:	f100 33ff 	add.w	r3, r0, #4294967295
 801895a:	d100      	bne.n	801895e <memcpy+0xc>
 801895c:	4770      	bx	lr
 801895e:	b510      	push	{r4, lr}
 8018960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018968:	4291      	cmp	r1, r2
 801896a:	d1f9      	bne.n	8018960 <memcpy+0xe>
 801896c:	bd10      	pop	{r4, pc}
	...

08018970 <__assert_func>:
 8018970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018972:	4614      	mov	r4, r2
 8018974:	461a      	mov	r2, r3
 8018976:	4b09      	ldr	r3, [pc, #36]	@ (801899c <__assert_func+0x2c>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	4605      	mov	r5, r0
 801897c:	68d8      	ldr	r0, [r3, #12]
 801897e:	b14c      	cbz	r4, 8018994 <__assert_func+0x24>
 8018980:	4b07      	ldr	r3, [pc, #28]	@ (80189a0 <__assert_func+0x30>)
 8018982:	9100      	str	r1, [sp, #0]
 8018984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018988:	4906      	ldr	r1, [pc, #24]	@ (80189a4 <__assert_func+0x34>)
 801898a:	462b      	mov	r3, r5
 801898c:	f000 fbfc 	bl	8019188 <fiprintf>
 8018990:	f000 fc90 	bl	80192b4 <abort>
 8018994:	4b04      	ldr	r3, [pc, #16]	@ (80189a8 <__assert_func+0x38>)
 8018996:	461c      	mov	r4, r3
 8018998:	e7f3      	b.n	8018982 <__assert_func+0x12>
 801899a:	bf00      	nop
 801899c:	20000eb0 	.word	0x20000eb0
 80189a0:	0801a69b 	.word	0x0801a69b
 80189a4:	0801a6a8 	.word	0x0801a6a8
 80189a8:	0801a6d6 	.word	0x0801a6d6

080189ac <__env_lock>:
 80189ac:	4801      	ldr	r0, [pc, #4]	@ (80189b4 <__env_lock+0x8>)
 80189ae:	f7ff bfc6 	b.w	801893e <__retarget_lock_acquire_recursive>
 80189b2:	bf00      	nop
 80189b4:	2000eef0 	.word	0x2000eef0

080189b8 <__env_unlock>:
 80189b8:	4801      	ldr	r0, [pc, #4]	@ (80189c0 <__env_unlock+0x8>)
 80189ba:	f7ff bfc1 	b.w	8018940 <__retarget_lock_release_recursive>
 80189be:	bf00      	nop
 80189c0:	2000eef0 	.word	0x2000eef0

080189c4 <_free_r>:
 80189c4:	b538      	push	{r3, r4, r5, lr}
 80189c6:	4605      	mov	r5, r0
 80189c8:	2900      	cmp	r1, #0
 80189ca:	d041      	beq.n	8018a50 <_free_r+0x8c>
 80189cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189d0:	1f0c      	subs	r4, r1, #4
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	bfb8      	it	lt
 80189d6:	18e4      	addlt	r4, r4, r3
 80189d8:	f7ff fb2a 	bl	8018030 <__malloc_lock>
 80189dc:	4a1d      	ldr	r2, [pc, #116]	@ (8018a54 <_free_r+0x90>)
 80189de:	6813      	ldr	r3, [r2, #0]
 80189e0:	b933      	cbnz	r3, 80189f0 <_free_r+0x2c>
 80189e2:	6063      	str	r3, [r4, #4]
 80189e4:	6014      	str	r4, [r2, #0]
 80189e6:	4628      	mov	r0, r5
 80189e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189ec:	f7ff bb26 	b.w	801803c <__malloc_unlock>
 80189f0:	42a3      	cmp	r3, r4
 80189f2:	d908      	bls.n	8018a06 <_free_r+0x42>
 80189f4:	6820      	ldr	r0, [r4, #0]
 80189f6:	1821      	adds	r1, r4, r0
 80189f8:	428b      	cmp	r3, r1
 80189fa:	bf01      	itttt	eq
 80189fc:	6819      	ldreq	r1, [r3, #0]
 80189fe:	685b      	ldreq	r3, [r3, #4]
 8018a00:	1809      	addeq	r1, r1, r0
 8018a02:	6021      	streq	r1, [r4, #0]
 8018a04:	e7ed      	b.n	80189e2 <_free_r+0x1e>
 8018a06:	461a      	mov	r2, r3
 8018a08:	685b      	ldr	r3, [r3, #4]
 8018a0a:	b10b      	cbz	r3, 8018a10 <_free_r+0x4c>
 8018a0c:	42a3      	cmp	r3, r4
 8018a0e:	d9fa      	bls.n	8018a06 <_free_r+0x42>
 8018a10:	6811      	ldr	r1, [r2, #0]
 8018a12:	1850      	adds	r0, r2, r1
 8018a14:	42a0      	cmp	r0, r4
 8018a16:	d10b      	bne.n	8018a30 <_free_r+0x6c>
 8018a18:	6820      	ldr	r0, [r4, #0]
 8018a1a:	4401      	add	r1, r0
 8018a1c:	1850      	adds	r0, r2, r1
 8018a1e:	4283      	cmp	r3, r0
 8018a20:	6011      	str	r1, [r2, #0]
 8018a22:	d1e0      	bne.n	80189e6 <_free_r+0x22>
 8018a24:	6818      	ldr	r0, [r3, #0]
 8018a26:	685b      	ldr	r3, [r3, #4]
 8018a28:	6053      	str	r3, [r2, #4]
 8018a2a:	4408      	add	r0, r1
 8018a2c:	6010      	str	r0, [r2, #0]
 8018a2e:	e7da      	b.n	80189e6 <_free_r+0x22>
 8018a30:	d902      	bls.n	8018a38 <_free_r+0x74>
 8018a32:	230c      	movs	r3, #12
 8018a34:	602b      	str	r3, [r5, #0]
 8018a36:	e7d6      	b.n	80189e6 <_free_r+0x22>
 8018a38:	6820      	ldr	r0, [r4, #0]
 8018a3a:	1821      	adds	r1, r4, r0
 8018a3c:	428b      	cmp	r3, r1
 8018a3e:	bf04      	itt	eq
 8018a40:	6819      	ldreq	r1, [r3, #0]
 8018a42:	685b      	ldreq	r3, [r3, #4]
 8018a44:	6063      	str	r3, [r4, #4]
 8018a46:	bf04      	itt	eq
 8018a48:	1809      	addeq	r1, r1, r0
 8018a4a:	6021      	streq	r1, [r4, #0]
 8018a4c:	6054      	str	r4, [r2, #4]
 8018a4e:	e7ca      	b.n	80189e6 <_free_r+0x22>
 8018a50:	bd38      	pop	{r3, r4, r5, pc}
 8018a52:	bf00      	nop
 8018a54:	2000edac 	.word	0x2000edac

08018a58 <_malloc_usable_size_r>:
 8018a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a5c:	1f18      	subs	r0, r3, #4
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	bfbc      	itt	lt
 8018a62:	580b      	ldrlt	r3, [r1, r0]
 8018a64:	18c0      	addlt	r0, r0, r3
 8018a66:	4770      	bx	lr

08018a68 <__ssputs_r>:
 8018a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a6c:	688e      	ldr	r6, [r1, #8]
 8018a6e:	461f      	mov	r7, r3
 8018a70:	42be      	cmp	r6, r7
 8018a72:	680b      	ldr	r3, [r1, #0]
 8018a74:	4682      	mov	sl, r0
 8018a76:	460c      	mov	r4, r1
 8018a78:	4690      	mov	r8, r2
 8018a7a:	d82d      	bhi.n	8018ad8 <__ssputs_r+0x70>
 8018a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018a80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018a84:	d026      	beq.n	8018ad4 <__ssputs_r+0x6c>
 8018a86:	6965      	ldr	r5, [r4, #20]
 8018a88:	6909      	ldr	r1, [r1, #16]
 8018a8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a8e:	eba3 0901 	sub.w	r9, r3, r1
 8018a92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018a96:	1c7b      	adds	r3, r7, #1
 8018a98:	444b      	add	r3, r9
 8018a9a:	106d      	asrs	r5, r5, #1
 8018a9c:	429d      	cmp	r5, r3
 8018a9e:	bf38      	it	cc
 8018aa0:	461d      	movcc	r5, r3
 8018aa2:	0553      	lsls	r3, r2, #21
 8018aa4:	d527      	bpl.n	8018af6 <__ssputs_r+0x8e>
 8018aa6:	4629      	mov	r1, r5
 8018aa8:	f7ff fa42 	bl	8017f30 <_malloc_r>
 8018aac:	4606      	mov	r6, r0
 8018aae:	b360      	cbz	r0, 8018b0a <__ssputs_r+0xa2>
 8018ab0:	6921      	ldr	r1, [r4, #16]
 8018ab2:	464a      	mov	r2, r9
 8018ab4:	f7ff ff4d 	bl	8018952 <memcpy>
 8018ab8:	89a3      	ldrh	r3, [r4, #12]
 8018aba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018ac2:	81a3      	strh	r3, [r4, #12]
 8018ac4:	6126      	str	r6, [r4, #16]
 8018ac6:	6165      	str	r5, [r4, #20]
 8018ac8:	444e      	add	r6, r9
 8018aca:	eba5 0509 	sub.w	r5, r5, r9
 8018ace:	6026      	str	r6, [r4, #0]
 8018ad0:	60a5      	str	r5, [r4, #8]
 8018ad2:	463e      	mov	r6, r7
 8018ad4:	42be      	cmp	r6, r7
 8018ad6:	d900      	bls.n	8018ada <__ssputs_r+0x72>
 8018ad8:	463e      	mov	r6, r7
 8018ada:	6820      	ldr	r0, [r4, #0]
 8018adc:	4632      	mov	r2, r6
 8018ade:	4641      	mov	r1, r8
 8018ae0:	f7ff fe42 	bl	8018768 <memmove>
 8018ae4:	68a3      	ldr	r3, [r4, #8]
 8018ae6:	1b9b      	subs	r3, r3, r6
 8018ae8:	60a3      	str	r3, [r4, #8]
 8018aea:	6823      	ldr	r3, [r4, #0]
 8018aec:	4433      	add	r3, r6
 8018aee:	6023      	str	r3, [r4, #0]
 8018af0:	2000      	movs	r0, #0
 8018af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018af6:	462a      	mov	r2, r5
 8018af8:	f7ff fb1a 	bl	8018130 <_realloc_r>
 8018afc:	4606      	mov	r6, r0
 8018afe:	2800      	cmp	r0, #0
 8018b00:	d1e0      	bne.n	8018ac4 <__ssputs_r+0x5c>
 8018b02:	6921      	ldr	r1, [r4, #16]
 8018b04:	4650      	mov	r0, sl
 8018b06:	f7ff ff5d 	bl	80189c4 <_free_r>
 8018b0a:	230c      	movs	r3, #12
 8018b0c:	f8ca 3000 	str.w	r3, [sl]
 8018b10:	89a3      	ldrh	r3, [r4, #12]
 8018b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b16:	81a3      	strh	r3, [r4, #12]
 8018b18:	f04f 30ff 	mov.w	r0, #4294967295
 8018b1c:	e7e9      	b.n	8018af2 <__ssputs_r+0x8a>
	...

08018b20 <_svfiprintf_r>:
 8018b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b24:	4698      	mov	r8, r3
 8018b26:	898b      	ldrh	r3, [r1, #12]
 8018b28:	061b      	lsls	r3, r3, #24
 8018b2a:	b09d      	sub	sp, #116	@ 0x74
 8018b2c:	4607      	mov	r7, r0
 8018b2e:	460d      	mov	r5, r1
 8018b30:	4614      	mov	r4, r2
 8018b32:	d510      	bpl.n	8018b56 <_svfiprintf_r+0x36>
 8018b34:	690b      	ldr	r3, [r1, #16]
 8018b36:	b973      	cbnz	r3, 8018b56 <_svfiprintf_r+0x36>
 8018b38:	2140      	movs	r1, #64	@ 0x40
 8018b3a:	f7ff f9f9 	bl	8017f30 <_malloc_r>
 8018b3e:	6028      	str	r0, [r5, #0]
 8018b40:	6128      	str	r0, [r5, #16]
 8018b42:	b930      	cbnz	r0, 8018b52 <_svfiprintf_r+0x32>
 8018b44:	230c      	movs	r3, #12
 8018b46:	603b      	str	r3, [r7, #0]
 8018b48:	f04f 30ff 	mov.w	r0, #4294967295
 8018b4c:	b01d      	add	sp, #116	@ 0x74
 8018b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b52:	2340      	movs	r3, #64	@ 0x40
 8018b54:	616b      	str	r3, [r5, #20]
 8018b56:	2300      	movs	r3, #0
 8018b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b5a:	2320      	movs	r3, #32
 8018b5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b64:	2330      	movs	r3, #48	@ 0x30
 8018b66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018d04 <_svfiprintf_r+0x1e4>
 8018b6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018b6e:	f04f 0901 	mov.w	r9, #1
 8018b72:	4623      	mov	r3, r4
 8018b74:	469a      	mov	sl, r3
 8018b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b7a:	b10a      	cbz	r2, 8018b80 <_svfiprintf_r+0x60>
 8018b7c:	2a25      	cmp	r2, #37	@ 0x25
 8018b7e:	d1f9      	bne.n	8018b74 <_svfiprintf_r+0x54>
 8018b80:	ebba 0b04 	subs.w	fp, sl, r4
 8018b84:	d00b      	beq.n	8018b9e <_svfiprintf_r+0x7e>
 8018b86:	465b      	mov	r3, fp
 8018b88:	4622      	mov	r2, r4
 8018b8a:	4629      	mov	r1, r5
 8018b8c:	4638      	mov	r0, r7
 8018b8e:	f7ff ff6b 	bl	8018a68 <__ssputs_r>
 8018b92:	3001      	adds	r0, #1
 8018b94:	f000 80a7 	beq.w	8018ce6 <_svfiprintf_r+0x1c6>
 8018b98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b9a:	445a      	add	r2, fp
 8018b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	f000 809f 	beq.w	8018ce6 <_svfiprintf_r+0x1c6>
 8018ba8:	2300      	movs	r3, #0
 8018baa:	f04f 32ff 	mov.w	r2, #4294967295
 8018bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bb2:	f10a 0a01 	add.w	sl, sl, #1
 8018bb6:	9304      	str	r3, [sp, #16]
 8018bb8:	9307      	str	r3, [sp, #28]
 8018bba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8018bc0:	4654      	mov	r4, sl
 8018bc2:	2205      	movs	r2, #5
 8018bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bc8:	484e      	ldr	r0, [pc, #312]	@ (8018d04 <_svfiprintf_r+0x1e4>)
 8018bca:	f7e7 fb31 	bl	8000230 <memchr>
 8018bce:	9a04      	ldr	r2, [sp, #16]
 8018bd0:	b9d8      	cbnz	r0, 8018c0a <_svfiprintf_r+0xea>
 8018bd2:	06d0      	lsls	r0, r2, #27
 8018bd4:	bf44      	itt	mi
 8018bd6:	2320      	movmi	r3, #32
 8018bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018bdc:	0711      	lsls	r1, r2, #28
 8018bde:	bf44      	itt	mi
 8018be0:	232b      	movmi	r3, #43	@ 0x2b
 8018be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018be6:	f89a 3000 	ldrb.w	r3, [sl]
 8018bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8018bec:	d015      	beq.n	8018c1a <_svfiprintf_r+0xfa>
 8018bee:	9a07      	ldr	r2, [sp, #28]
 8018bf0:	4654      	mov	r4, sl
 8018bf2:	2000      	movs	r0, #0
 8018bf4:	f04f 0c0a 	mov.w	ip, #10
 8018bf8:	4621      	mov	r1, r4
 8018bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bfe:	3b30      	subs	r3, #48	@ 0x30
 8018c00:	2b09      	cmp	r3, #9
 8018c02:	d94b      	bls.n	8018c9c <_svfiprintf_r+0x17c>
 8018c04:	b1b0      	cbz	r0, 8018c34 <_svfiprintf_r+0x114>
 8018c06:	9207      	str	r2, [sp, #28]
 8018c08:	e014      	b.n	8018c34 <_svfiprintf_r+0x114>
 8018c0a:	eba0 0308 	sub.w	r3, r0, r8
 8018c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8018c12:	4313      	orrs	r3, r2
 8018c14:	9304      	str	r3, [sp, #16]
 8018c16:	46a2      	mov	sl, r4
 8018c18:	e7d2      	b.n	8018bc0 <_svfiprintf_r+0xa0>
 8018c1a:	9b03      	ldr	r3, [sp, #12]
 8018c1c:	1d19      	adds	r1, r3, #4
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	9103      	str	r1, [sp, #12]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	bfbb      	ittet	lt
 8018c26:	425b      	neglt	r3, r3
 8018c28:	f042 0202 	orrlt.w	r2, r2, #2
 8018c2c:	9307      	strge	r3, [sp, #28]
 8018c2e:	9307      	strlt	r3, [sp, #28]
 8018c30:	bfb8      	it	lt
 8018c32:	9204      	strlt	r2, [sp, #16]
 8018c34:	7823      	ldrb	r3, [r4, #0]
 8018c36:	2b2e      	cmp	r3, #46	@ 0x2e
 8018c38:	d10a      	bne.n	8018c50 <_svfiprintf_r+0x130>
 8018c3a:	7863      	ldrb	r3, [r4, #1]
 8018c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c3e:	d132      	bne.n	8018ca6 <_svfiprintf_r+0x186>
 8018c40:	9b03      	ldr	r3, [sp, #12]
 8018c42:	1d1a      	adds	r2, r3, #4
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	9203      	str	r2, [sp, #12]
 8018c48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018c4c:	3402      	adds	r4, #2
 8018c4e:	9305      	str	r3, [sp, #20]
 8018c50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018d14 <_svfiprintf_r+0x1f4>
 8018c54:	7821      	ldrb	r1, [r4, #0]
 8018c56:	2203      	movs	r2, #3
 8018c58:	4650      	mov	r0, sl
 8018c5a:	f7e7 fae9 	bl	8000230 <memchr>
 8018c5e:	b138      	cbz	r0, 8018c70 <_svfiprintf_r+0x150>
 8018c60:	9b04      	ldr	r3, [sp, #16]
 8018c62:	eba0 000a 	sub.w	r0, r0, sl
 8018c66:	2240      	movs	r2, #64	@ 0x40
 8018c68:	4082      	lsls	r2, r0
 8018c6a:	4313      	orrs	r3, r2
 8018c6c:	3401      	adds	r4, #1
 8018c6e:	9304      	str	r3, [sp, #16]
 8018c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c74:	4824      	ldr	r0, [pc, #144]	@ (8018d08 <_svfiprintf_r+0x1e8>)
 8018c76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018c7a:	2206      	movs	r2, #6
 8018c7c:	f7e7 fad8 	bl	8000230 <memchr>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	d036      	beq.n	8018cf2 <_svfiprintf_r+0x1d2>
 8018c84:	4b21      	ldr	r3, [pc, #132]	@ (8018d0c <_svfiprintf_r+0x1ec>)
 8018c86:	bb1b      	cbnz	r3, 8018cd0 <_svfiprintf_r+0x1b0>
 8018c88:	9b03      	ldr	r3, [sp, #12]
 8018c8a:	3307      	adds	r3, #7
 8018c8c:	f023 0307 	bic.w	r3, r3, #7
 8018c90:	3308      	adds	r3, #8
 8018c92:	9303      	str	r3, [sp, #12]
 8018c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c96:	4433      	add	r3, r6
 8018c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c9a:	e76a      	b.n	8018b72 <_svfiprintf_r+0x52>
 8018c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ca0:	460c      	mov	r4, r1
 8018ca2:	2001      	movs	r0, #1
 8018ca4:	e7a8      	b.n	8018bf8 <_svfiprintf_r+0xd8>
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	3401      	adds	r4, #1
 8018caa:	9305      	str	r3, [sp, #20]
 8018cac:	4619      	mov	r1, r3
 8018cae:	f04f 0c0a 	mov.w	ip, #10
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cb8:	3a30      	subs	r2, #48	@ 0x30
 8018cba:	2a09      	cmp	r2, #9
 8018cbc:	d903      	bls.n	8018cc6 <_svfiprintf_r+0x1a6>
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d0c6      	beq.n	8018c50 <_svfiprintf_r+0x130>
 8018cc2:	9105      	str	r1, [sp, #20]
 8018cc4:	e7c4      	b.n	8018c50 <_svfiprintf_r+0x130>
 8018cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018cca:	4604      	mov	r4, r0
 8018ccc:	2301      	movs	r3, #1
 8018cce:	e7f0      	b.n	8018cb2 <_svfiprintf_r+0x192>
 8018cd0:	ab03      	add	r3, sp, #12
 8018cd2:	9300      	str	r3, [sp, #0]
 8018cd4:	462a      	mov	r2, r5
 8018cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8018d10 <_svfiprintf_r+0x1f0>)
 8018cd8:	a904      	add	r1, sp, #16
 8018cda:	4638      	mov	r0, r7
 8018cdc:	f3af 8000 	nop.w
 8018ce0:	1c42      	adds	r2, r0, #1
 8018ce2:	4606      	mov	r6, r0
 8018ce4:	d1d6      	bne.n	8018c94 <_svfiprintf_r+0x174>
 8018ce6:	89ab      	ldrh	r3, [r5, #12]
 8018ce8:	065b      	lsls	r3, r3, #25
 8018cea:	f53f af2d 	bmi.w	8018b48 <_svfiprintf_r+0x28>
 8018cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018cf0:	e72c      	b.n	8018b4c <_svfiprintf_r+0x2c>
 8018cf2:	ab03      	add	r3, sp, #12
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	462a      	mov	r2, r5
 8018cf8:	4b05      	ldr	r3, [pc, #20]	@ (8018d10 <_svfiprintf_r+0x1f0>)
 8018cfa:	a904      	add	r1, sp, #16
 8018cfc:	4638      	mov	r0, r7
 8018cfe:	f000 f879 	bl	8018df4 <_printf_i>
 8018d02:	e7ed      	b.n	8018ce0 <_svfiprintf_r+0x1c0>
 8018d04:	0801a6d7 	.word	0x0801a6d7
 8018d08:	0801a6e1 	.word	0x0801a6e1
 8018d0c:	00000000 	.word	0x00000000
 8018d10:	08018a69 	.word	0x08018a69
 8018d14:	0801a6dd 	.word	0x0801a6dd

08018d18 <_printf_common>:
 8018d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d1c:	4616      	mov	r6, r2
 8018d1e:	4698      	mov	r8, r3
 8018d20:	688a      	ldr	r2, [r1, #8]
 8018d22:	690b      	ldr	r3, [r1, #16]
 8018d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018d28:	4293      	cmp	r3, r2
 8018d2a:	bfb8      	it	lt
 8018d2c:	4613      	movlt	r3, r2
 8018d2e:	6033      	str	r3, [r6, #0]
 8018d30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018d34:	4607      	mov	r7, r0
 8018d36:	460c      	mov	r4, r1
 8018d38:	b10a      	cbz	r2, 8018d3e <_printf_common+0x26>
 8018d3a:	3301      	adds	r3, #1
 8018d3c:	6033      	str	r3, [r6, #0]
 8018d3e:	6823      	ldr	r3, [r4, #0]
 8018d40:	0699      	lsls	r1, r3, #26
 8018d42:	bf42      	ittt	mi
 8018d44:	6833      	ldrmi	r3, [r6, #0]
 8018d46:	3302      	addmi	r3, #2
 8018d48:	6033      	strmi	r3, [r6, #0]
 8018d4a:	6825      	ldr	r5, [r4, #0]
 8018d4c:	f015 0506 	ands.w	r5, r5, #6
 8018d50:	d106      	bne.n	8018d60 <_printf_common+0x48>
 8018d52:	f104 0a19 	add.w	sl, r4, #25
 8018d56:	68e3      	ldr	r3, [r4, #12]
 8018d58:	6832      	ldr	r2, [r6, #0]
 8018d5a:	1a9b      	subs	r3, r3, r2
 8018d5c:	42ab      	cmp	r3, r5
 8018d5e:	dc26      	bgt.n	8018dae <_printf_common+0x96>
 8018d60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018d64:	6822      	ldr	r2, [r4, #0]
 8018d66:	3b00      	subs	r3, #0
 8018d68:	bf18      	it	ne
 8018d6a:	2301      	movne	r3, #1
 8018d6c:	0692      	lsls	r2, r2, #26
 8018d6e:	d42b      	bmi.n	8018dc8 <_printf_common+0xb0>
 8018d70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018d74:	4641      	mov	r1, r8
 8018d76:	4638      	mov	r0, r7
 8018d78:	47c8      	blx	r9
 8018d7a:	3001      	adds	r0, #1
 8018d7c:	d01e      	beq.n	8018dbc <_printf_common+0xa4>
 8018d7e:	6823      	ldr	r3, [r4, #0]
 8018d80:	6922      	ldr	r2, [r4, #16]
 8018d82:	f003 0306 	and.w	r3, r3, #6
 8018d86:	2b04      	cmp	r3, #4
 8018d88:	bf02      	ittt	eq
 8018d8a:	68e5      	ldreq	r5, [r4, #12]
 8018d8c:	6833      	ldreq	r3, [r6, #0]
 8018d8e:	1aed      	subeq	r5, r5, r3
 8018d90:	68a3      	ldr	r3, [r4, #8]
 8018d92:	bf0c      	ite	eq
 8018d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d98:	2500      	movne	r5, #0
 8018d9a:	4293      	cmp	r3, r2
 8018d9c:	bfc4      	itt	gt
 8018d9e:	1a9b      	subgt	r3, r3, r2
 8018da0:	18ed      	addgt	r5, r5, r3
 8018da2:	2600      	movs	r6, #0
 8018da4:	341a      	adds	r4, #26
 8018da6:	42b5      	cmp	r5, r6
 8018da8:	d11a      	bne.n	8018de0 <_printf_common+0xc8>
 8018daa:	2000      	movs	r0, #0
 8018dac:	e008      	b.n	8018dc0 <_printf_common+0xa8>
 8018dae:	2301      	movs	r3, #1
 8018db0:	4652      	mov	r2, sl
 8018db2:	4641      	mov	r1, r8
 8018db4:	4638      	mov	r0, r7
 8018db6:	47c8      	blx	r9
 8018db8:	3001      	adds	r0, #1
 8018dba:	d103      	bne.n	8018dc4 <_printf_common+0xac>
 8018dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8018dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dc4:	3501      	adds	r5, #1
 8018dc6:	e7c6      	b.n	8018d56 <_printf_common+0x3e>
 8018dc8:	18e1      	adds	r1, r4, r3
 8018dca:	1c5a      	adds	r2, r3, #1
 8018dcc:	2030      	movs	r0, #48	@ 0x30
 8018dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018dd2:	4422      	add	r2, r4
 8018dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018ddc:	3302      	adds	r3, #2
 8018dde:	e7c7      	b.n	8018d70 <_printf_common+0x58>
 8018de0:	2301      	movs	r3, #1
 8018de2:	4622      	mov	r2, r4
 8018de4:	4641      	mov	r1, r8
 8018de6:	4638      	mov	r0, r7
 8018de8:	47c8      	blx	r9
 8018dea:	3001      	adds	r0, #1
 8018dec:	d0e6      	beq.n	8018dbc <_printf_common+0xa4>
 8018dee:	3601      	adds	r6, #1
 8018df0:	e7d9      	b.n	8018da6 <_printf_common+0x8e>
	...

08018df4 <_printf_i>:
 8018df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018df8:	7e0f      	ldrb	r7, [r1, #24]
 8018dfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018dfc:	2f78      	cmp	r7, #120	@ 0x78
 8018dfe:	4691      	mov	r9, r2
 8018e00:	4680      	mov	r8, r0
 8018e02:	460c      	mov	r4, r1
 8018e04:	469a      	mov	sl, r3
 8018e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018e0a:	d807      	bhi.n	8018e1c <_printf_i+0x28>
 8018e0c:	2f62      	cmp	r7, #98	@ 0x62
 8018e0e:	d80a      	bhi.n	8018e26 <_printf_i+0x32>
 8018e10:	2f00      	cmp	r7, #0
 8018e12:	f000 80d1 	beq.w	8018fb8 <_printf_i+0x1c4>
 8018e16:	2f58      	cmp	r7, #88	@ 0x58
 8018e18:	f000 80b8 	beq.w	8018f8c <_printf_i+0x198>
 8018e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018e24:	e03a      	b.n	8018e9c <_printf_i+0xa8>
 8018e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018e2a:	2b15      	cmp	r3, #21
 8018e2c:	d8f6      	bhi.n	8018e1c <_printf_i+0x28>
 8018e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8018e34 <_printf_i+0x40>)
 8018e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018e34:	08018e8d 	.word	0x08018e8d
 8018e38:	08018ea1 	.word	0x08018ea1
 8018e3c:	08018e1d 	.word	0x08018e1d
 8018e40:	08018e1d 	.word	0x08018e1d
 8018e44:	08018e1d 	.word	0x08018e1d
 8018e48:	08018e1d 	.word	0x08018e1d
 8018e4c:	08018ea1 	.word	0x08018ea1
 8018e50:	08018e1d 	.word	0x08018e1d
 8018e54:	08018e1d 	.word	0x08018e1d
 8018e58:	08018e1d 	.word	0x08018e1d
 8018e5c:	08018e1d 	.word	0x08018e1d
 8018e60:	08018f9f 	.word	0x08018f9f
 8018e64:	08018ecb 	.word	0x08018ecb
 8018e68:	08018f59 	.word	0x08018f59
 8018e6c:	08018e1d 	.word	0x08018e1d
 8018e70:	08018e1d 	.word	0x08018e1d
 8018e74:	08018fc1 	.word	0x08018fc1
 8018e78:	08018e1d 	.word	0x08018e1d
 8018e7c:	08018ecb 	.word	0x08018ecb
 8018e80:	08018e1d 	.word	0x08018e1d
 8018e84:	08018e1d 	.word	0x08018e1d
 8018e88:	08018f61 	.word	0x08018f61
 8018e8c:	6833      	ldr	r3, [r6, #0]
 8018e8e:	1d1a      	adds	r2, r3, #4
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	6032      	str	r2, [r6, #0]
 8018e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	e09c      	b.n	8018fda <_printf_i+0x1e6>
 8018ea0:	6833      	ldr	r3, [r6, #0]
 8018ea2:	6820      	ldr	r0, [r4, #0]
 8018ea4:	1d19      	adds	r1, r3, #4
 8018ea6:	6031      	str	r1, [r6, #0]
 8018ea8:	0606      	lsls	r6, r0, #24
 8018eaa:	d501      	bpl.n	8018eb0 <_printf_i+0xbc>
 8018eac:	681d      	ldr	r5, [r3, #0]
 8018eae:	e003      	b.n	8018eb8 <_printf_i+0xc4>
 8018eb0:	0645      	lsls	r5, r0, #25
 8018eb2:	d5fb      	bpl.n	8018eac <_printf_i+0xb8>
 8018eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018eb8:	2d00      	cmp	r5, #0
 8018eba:	da03      	bge.n	8018ec4 <_printf_i+0xd0>
 8018ebc:	232d      	movs	r3, #45	@ 0x2d
 8018ebe:	426d      	negs	r5, r5
 8018ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ec4:	4858      	ldr	r0, [pc, #352]	@ (8019028 <_printf_i+0x234>)
 8018ec6:	230a      	movs	r3, #10
 8018ec8:	e011      	b.n	8018eee <_printf_i+0xfa>
 8018eca:	6821      	ldr	r1, [r4, #0]
 8018ecc:	6833      	ldr	r3, [r6, #0]
 8018ece:	0608      	lsls	r0, r1, #24
 8018ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8018ed4:	d402      	bmi.n	8018edc <_printf_i+0xe8>
 8018ed6:	0649      	lsls	r1, r1, #25
 8018ed8:	bf48      	it	mi
 8018eda:	b2ad      	uxthmi	r5, r5
 8018edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8018ede:	4852      	ldr	r0, [pc, #328]	@ (8019028 <_printf_i+0x234>)
 8018ee0:	6033      	str	r3, [r6, #0]
 8018ee2:	bf14      	ite	ne
 8018ee4:	230a      	movne	r3, #10
 8018ee6:	2308      	moveq	r3, #8
 8018ee8:	2100      	movs	r1, #0
 8018eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018eee:	6866      	ldr	r6, [r4, #4]
 8018ef0:	60a6      	str	r6, [r4, #8]
 8018ef2:	2e00      	cmp	r6, #0
 8018ef4:	db05      	blt.n	8018f02 <_printf_i+0x10e>
 8018ef6:	6821      	ldr	r1, [r4, #0]
 8018ef8:	432e      	orrs	r6, r5
 8018efa:	f021 0104 	bic.w	r1, r1, #4
 8018efe:	6021      	str	r1, [r4, #0]
 8018f00:	d04b      	beq.n	8018f9a <_printf_i+0x1a6>
 8018f02:	4616      	mov	r6, r2
 8018f04:	fbb5 f1f3 	udiv	r1, r5, r3
 8018f08:	fb03 5711 	mls	r7, r3, r1, r5
 8018f0c:	5dc7      	ldrb	r7, [r0, r7]
 8018f0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018f12:	462f      	mov	r7, r5
 8018f14:	42bb      	cmp	r3, r7
 8018f16:	460d      	mov	r5, r1
 8018f18:	d9f4      	bls.n	8018f04 <_printf_i+0x110>
 8018f1a:	2b08      	cmp	r3, #8
 8018f1c:	d10b      	bne.n	8018f36 <_printf_i+0x142>
 8018f1e:	6823      	ldr	r3, [r4, #0]
 8018f20:	07df      	lsls	r7, r3, #31
 8018f22:	d508      	bpl.n	8018f36 <_printf_i+0x142>
 8018f24:	6923      	ldr	r3, [r4, #16]
 8018f26:	6861      	ldr	r1, [r4, #4]
 8018f28:	4299      	cmp	r1, r3
 8018f2a:	bfde      	ittt	le
 8018f2c:	2330      	movle	r3, #48	@ 0x30
 8018f2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018f32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018f36:	1b92      	subs	r2, r2, r6
 8018f38:	6122      	str	r2, [r4, #16]
 8018f3a:	f8cd a000 	str.w	sl, [sp]
 8018f3e:	464b      	mov	r3, r9
 8018f40:	aa03      	add	r2, sp, #12
 8018f42:	4621      	mov	r1, r4
 8018f44:	4640      	mov	r0, r8
 8018f46:	f7ff fee7 	bl	8018d18 <_printf_common>
 8018f4a:	3001      	adds	r0, #1
 8018f4c:	d14a      	bne.n	8018fe4 <_printf_i+0x1f0>
 8018f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8018f52:	b004      	add	sp, #16
 8018f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f58:	6823      	ldr	r3, [r4, #0]
 8018f5a:	f043 0320 	orr.w	r3, r3, #32
 8018f5e:	6023      	str	r3, [r4, #0]
 8018f60:	4832      	ldr	r0, [pc, #200]	@ (801902c <_printf_i+0x238>)
 8018f62:	2778      	movs	r7, #120	@ 0x78
 8018f64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018f68:	6823      	ldr	r3, [r4, #0]
 8018f6a:	6831      	ldr	r1, [r6, #0]
 8018f6c:	061f      	lsls	r7, r3, #24
 8018f6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8018f72:	d402      	bmi.n	8018f7a <_printf_i+0x186>
 8018f74:	065f      	lsls	r7, r3, #25
 8018f76:	bf48      	it	mi
 8018f78:	b2ad      	uxthmi	r5, r5
 8018f7a:	6031      	str	r1, [r6, #0]
 8018f7c:	07d9      	lsls	r1, r3, #31
 8018f7e:	bf44      	itt	mi
 8018f80:	f043 0320 	orrmi.w	r3, r3, #32
 8018f84:	6023      	strmi	r3, [r4, #0]
 8018f86:	b11d      	cbz	r5, 8018f90 <_printf_i+0x19c>
 8018f88:	2310      	movs	r3, #16
 8018f8a:	e7ad      	b.n	8018ee8 <_printf_i+0xf4>
 8018f8c:	4826      	ldr	r0, [pc, #152]	@ (8019028 <_printf_i+0x234>)
 8018f8e:	e7e9      	b.n	8018f64 <_printf_i+0x170>
 8018f90:	6823      	ldr	r3, [r4, #0]
 8018f92:	f023 0320 	bic.w	r3, r3, #32
 8018f96:	6023      	str	r3, [r4, #0]
 8018f98:	e7f6      	b.n	8018f88 <_printf_i+0x194>
 8018f9a:	4616      	mov	r6, r2
 8018f9c:	e7bd      	b.n	8018f1a <_printf_i+0x126>
 8018f9e:	6833      	ldr	r3, [r6, #0]
 8018fa0:	6825      	ldr	r5, [r4, #0]
 8018fa2:	6961      	ldr	r1, [r4, #20]
 8018fa4:	1d18      	adds	r0, r3, #4
 8018fa6:	6030      	str	r0, [r6, #0]
 8018fa8:	062e      	lsls	r6, r5, #24
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	d501      	bpl.n	8018fb2 <_printf_i+0x1be>
 8018fae:	6019      	str	r1, [r3, #0]
 8018fb0:	e002      	b.n	8018fb8 <_printf_i+0x1c4>
 8018fb2:	0668      	lsls	r0, r5, #25
 8018fb4:	d5fb      	bpl.n	8018fae <_printf_i+0x1ba>
 8018fb6:	8019      	strh	r1, [r3, #0]
 8018fb8:	2300      	movs	r3, #0
 8018fba:	6123      	str	r3, [r4, #16]
 8018fbc:	4616      	mov	r6, r2
 8018fbe:	e7bc      	b.n	8018f3a <_printf_i+0x146>
 8018fc0:	6833      	ldr	r3, [r6, #0]
 8018fc2:	1d1a      	adds	r2, r3, #4
 8018fc4:	6032      	str	r2, [r6, #0]
 8018fc6:	681e      	ldr	r6, [r3, #0]
 8018fc8:	6862      	ldr	r2, [r4, #4]
 8018fca:	2100      	movs	r1, #0
 8018fcc:	4630      	mov	r0, r6
 8018fce:	f7e7 f92f 	bl	8000230 <memchr>
 8018fd2:	b108      	cbz	r0, 8018fd8 <_printf_i+0x1e4>
 8018fd4:	1b80      	subs	r0, r0, r6
 8018fd6:	6060      	str	r0, [r4, #4]
 8018fd8:	6863      	ldr	r3, [r4, #4]
 8018fda:	6123      	str	r3, [r4, #16]
 8018fdc:	2300      	movs	r3, #0
 8018fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018fe2:	e7aa      	b.n	8018f3a <_printf_i+0x146>
 8018fe4:	6923      	ldr	r3, [r4, #16]
 8018fe6:	4632      	mov	r2, r6
 8018fe8:	4649      	mov	r1, r9
 8018fea:	4640      	mov	r0, r8
 8018fec:	47d0      	blx	sl
 8018fee:	3001      	adds	r0, #1
 8018ff0:	d0ad      	beq.n	8018f4e <_printf_i+0x15a>
 8018ff2:	6823      	ldr	r3, [r4, #0]
 8018ff4:	079b      	lsls	r3, r3, #30
 8018ff6:	d413      	bmi.n	8019020 <_printf_i+0x22c>
 8018ff8:	68e0      	ldr	r0, [r4, #12]
 8018ffa:	9b03      	ldr	r3, [sp, #12]
 8018ffc:	4298      	cmp	r0, r3
 8018ffe:	bfb8      	it	lt
 8019000:	4618      	movlt	r0, r3
 8019002:	e7a6      	b.n	8018f52 <_printf_i+0x15e>
 8019004:	2301      	movs	r3, #1
 8019006:	4632      	mov	r2, r6
 8019008:	4649      	mov	r1, r9
 801900a:	4640      	mov	r0, r8
 801900c:	47d0      	blx	sl
 801900e:	3001      	adds	r0, #1
 8019010:	d09d      	beq.n	8018f4e <_printf_i+0x15a>
 8019012:	3501      	adds	r5, #1
 8019014:	68e3      	ldr	r3, [r4, #12]
 8019016:	9903      	ldr	r1, [sp, #12]
 8019018:	1a5b      	subs	r3, r3, r1
 801901a:	42ab      	cmp	r3, r5
 801901c:	dcf2      	bgt.n	8019004 <_printf_i+0x210>
 801901e:	e7eb      	b.n	8018ff8 <_printf_i+0x204>
 8019020:	2500      	movs	r5, #0
 8019022:	f104 0619 	add.w	r6, r4, #25
 8019026:	e7f5      	b.n	8019014 <_printf_i+0x220>
 8019028:	0801a6e8 	.word	0x0801a6e8
 801902c:	0801a6f9 	.word	0x0801a6f9

08019030 <__sflush_r>:
 8019030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019038:	0716      	lsls	r6, r2, #28
 801903a:	4605      	mov	r5, r0
 801903c:	460c      	mov	r4, r1
 801903e:	d454      	bmi.n	80190ea <__sflush_r+0xba>
 8019040:	684b      	ldr	r3, [r1, #4]
 8019042:	2b00      	cmp	r3, #0
 8019044:	dc02      	bgt.n	801904c <__sflush_r+0x1c>
 8019046:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019048:	2b00      	cmp	r3, #0
 801904a:	dd48      	ble.n	80190de <__sflush_r+0xae>
 801904c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801904e:	2e00      	cmp	r6, #0
 8019050:	d045      	beq.n	80190de <__sflush_r+0xae>
 8019052:	2300      	movs	r3, #0
 8019054:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019058:	682f      	ldr	r7, [r5, #0]
 801905a:	6a21      	ldr	r1, [r4, #32]
 801905c:	602b      	str	r3, [r5, #0]
 801905e:	d030      	beq.n	80190c2 <__sflush_r+0x92>
 8019060:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019062:	89a3      	ldrh	r3, [r4, #12]
 8019064:	0759      	lsls	r1, r3, #29
 8019066:	d505      	bpl.n	8019074 <__sflush_r+0x44>
 8019068:	6863      	ldr	r3, [r4, #4]
 801906a:	1ad2      	subs	r2, r2, r3
 801906c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801906e:	b10b      	cbz	r3, 8019074 <__sflush_r+0x44>
 8019070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019072:	1ad2      	subs	r2, r2, r3
 8019074:	2300      	movs	r3, #0
 8019076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019078:	6a21      	ldr	r1, [r4, #32]
 801907a:	4628      	mov	r0, r5
 801907c:	47b0      	blx	r6
 801907e:	1c43      	adds	r3, r0, #1
 8019080:	89a3      	ldrh	r3, [r4, #12]
 8019082:	d106      	bne.n	8019092 <__sflush_r+0x62>
 8019084:	6829      	ldr	r1, [r5, #0]
 8019086:	291d      	cmp	r1, #29
 8019088:	d82b      	bhi.n	80190e2 <__sflush_r+0xb2>
 801908a:	4a2a      	ldr	r2, [pc, #168]	@ (8019134 <__sflush_r+0x104>)
 801908c:	40ca      	lsrs	r2, r1
 801908e:	07d6      	lsls	r6, r2, #31
 8019090:	d527      	bpl.n	80190e2 <__sflush_r+0xb2>
 8019092:	2200      	movs	r2, #0
 8019094:	6062      	str	r2, [r4, #4]
 8019096:	04d9      	lsls	r1, r3, #19
 8019098:	6922      	ldr	r2, [r4, #16]
 801909a:	6022      	str	r2, [r4, #0]
 801909c:	d504      	bpl.n	80190a8 <__sflush_r+0x78>
 801909e:	1c42      	adds	r2, r0, #1
 80190a0:	d101      	bne.n	80190a6 <__sflush_r+0x76>
 80190a2:	682b      	ldr	r3, [r5, #0]
 80190a4:	b903      	cbnz	r3, 80190a8 <__sflush_r+0x78>
 80190a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80190a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80190aa:	602f      	str	r7, [r5, #0]
 80190ac:	b1b9      	cbz	r1, 80190de <__sflush_r+0xae>
 80190ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80190b2:	4299      	cmp	r1, r3
 80190b4:	d002      	beq.n	80190bc <__sflush_r+0x8c>
 80190b6:	4628      	mov	r0, r5
 80190b8:	f7ff fc84 	bl	80189c4 <_free_r>
 80190bc:	2300      	movs	r3, #0
 80190be:	6363      	str	r3, [r4, #52]	@ 0x34
 80190c0:	e00d      	b.n	80190de <__sflush_r+0xae>
 80190c2:	2301      	movs	r3, #1
 80190c4:	4628      	mov	r0, r5
 80190c6:	47b0      	blx	r6
 80190c8:	4602      	mov	r2, r0
 80190ca:	1c50      	adds	r0, r2, #1
 80190cc:	d1c9      	bne.n	8019062 <__sflush_r+0x32>
 80190ce:	682b      	ldr	r3, [r5, #0]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d0c6      	beq.n	8019062 <__sflush_r+0x32>
 80190d4:	2b1d      	cmp	r3, #29
 80190d6:	d001      	beq.n	80190dc <__sflush_r+0xac>
 80190d8:	2b16      	cmp	r3, #22
 80190da:	d11e      	bne.n	801911a <__sflush_r+0xea>
 80190dc:	602f      	str	r7, [r5, #0]
 80190de:	2000      	movs	r0, #0
 80190e0:	e022      	b.n	8019128 <__sflush_r+0xf8>
 80190e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80190e6:	b21b      	sxth	r3, r3
 80190e8:	e01b      	b.n	8019122 <__sflush_r+0xf2>
 80190ea:	690f      	ldr	r7, [r1, #16]
 80190ec:	2f00      	cmp	r7, #0
 80190ee:	d0f6      	beq.n	80190de <__sflush_r+0xae>
 80190f0:	0793      	lsls	r3, r2, #30
 80190f2:	680e      	ldr	r6, [r1, #0]
 80190f4:	bf08      	it	eq
 80190f6:	694b      	ldreq	r3, [r1, #20]
 80190f8:	600f      	str	r7, [r1, #0]
 80190fa:	bf18      	it	ne
 80190fc:	2300      	movne	r3, #0
 80190fe:	eba6 0807 	sub.w	r8, r6, r7
 8019102:	608b      	str	r3, [r1, #8]
 8019104:	f1b8 0f00 	cmp.w	r8, #0
 8019108:	dde9      	ble.n	80190de <__sflush_r+0xae>
 801910a:	6a21      	ldr	r1, [r4, #32]
 801910c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801910e:	4643      	mov	r3, r8
 8019110:	463a      	mov	r2, r7
 8019112:	4628      	mov	r0, r5
 8019114:	47b0      	blx	r6
 8019116:	2800      	cmp	r0, #0
 8019118:	dc08      	bgt.n	801912c <__sflush_r+0xfc>
 801911a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801911e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019122:	81a3      	strh	r3, [r4, #12]
 8019124:	f04f 30ff 	mov.w	r0, #4294967295
 8019128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801912c:	4407      	add	r7, r0
 801912e:	eba8 0800 	sub.w	r8, r8, r0
 8019132:	e7e7      	b.n	8019104 <__sflush_r+0xd4>
 8019134:	20400001 	.word	0x20400001

08019138 <_fflush_r>:
 8019138:	b538      	push	{r3, r4, r5, lr}
 801913a:	690b      	ldr	r3, [r1, #16]
 801913c:	4605      	mov	r5, r0
 801913e:	460c      	mov	r4, r1
 8019140:	b913      	cbnz	r3, 8019148 <_fflush_r+0x10>
 8019142:	2500      	movs	r5, #0
 8019144:	4628      	mov	r0, r5
 8019146:	bd38      	pop	{r3, r4, r5, pc}
 8019148:	b118      	cbz	r0, 8019152 <_fflush_r+0x1a>
 801914a:	6a03      	ldr	r3, [r0, #32]
 801914c:	b90b      	cbnz	r3, 8019152 <_fflush_r+0x1a>
 801914e:	f7ff f921 	bl	8018394 <__sinit>
 8019152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d0f3      	beq.n	8019142 <_fflush_r+0xa>
 801915a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801915c:	07d0      	lsls	r0, r2, #31
 801915e:	d404      	bmi.n	801916a <_fflush_r+0x32>
 8019160:	0599      	lsls	r1, r3, #22
 8019162:	d402      	bmi.n	801916a <_fflush_r+0x32>
 8019164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019166:	f7ff fbea 	bl	801893e <__retarget_lock_acquire_recursive>
 801916a:	4628      	mov	r0, r5
 801916c:	4621      	mov	r1, r4
 801916e:	f7ff ff5f 	bl	8019030 <__sflush_r>
 8019172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019174:	07da      	lsls	r2, r3, #31
 8019176:	4605      	mov	r5, r0
 8019178:	d4e4      	bmi.n	8019144 <_fflush_r+0xc>
 801917a:	89a3      	ldrh	r3, [r4, #12]
 801917c:	059b      	lsls	r3, r3, #22
 801917e:	d4e1      	bmi.n	8019144 <_fflush_r+0xc>
 8019180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019182:	f7ff fbdd 	bl	8018940 <__retarget_lock_release_recursive>
 8019186:	e7dd      	b.n	8019144 <_fflush_r+0xc>

08019188 <fiprintf>:
 8019188:	b40e      	push	{r1, r2, r3}
 801918a:	b503      	push	{r0, r1, lr}
 801918c:	4601      	mov	r1, r0
 801918e:	ab03      	add	r3, sp, #12
 8019190:	4805      	ldr	r0, [pc, #20]	@ (80191a8 <fiprintf+0x20>)
 8019192:	f853 2b04 	ldr.w	r2, [r3], #4
 8019196:	6800      	ldr	r0, [r0, #0]
 8019198:	9301      	str	r3, [sp, #4]
 801919a:	f000 f8bb 	bl	8019314 <_vfiprintf_r>
 801919e:	b002      	add	sp, #8
 80191a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80191a4:	b003      	add	sp, #12
 80191a6:	4770      	bx	lr
 80191a8:	20000eb0 	.word	0x20000eb0

080191ac <__swhatbuf_r>:
 80191ac:	b570      	push	{r4, r5, r6, lr}
 80191ae:	460c      	mov	r4, r1
 80191b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191b4:	2900      	cmp	r1, #0
 80191b6:	b096      	sub	sp, #88	@ 0x58
 80191b8:	4615      	mov	r5, r2
 80191ba:	461e      	mov	r6, r3
 80191bc:	da0d      	bge.n	80191da <__swhatbuf_r+0x2e>
 80191be:	89a3      	ldrh	r3, [r4, #12]
 80191c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80191c4:	f04f 0100 	mov.w	r1, #0
 80191c8:	bf14      	ite	ne
 80191ca:	2340      	movne	r3, #64	@ 0x40
 80191cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80191d0:	2000      	movs	r0, #0
 80191d2:	6031      	str	r1, [r6, #0]
 80191d4:	602b      	str	r3, [r5, #0]
 80191d6:	b016      	add	sp, #88	@ 0x58
 80191d8:	bd70      	pop	{r4, r5, r6, pc}
 80191da:	466a      	mov	r2, sp
 80191dc:	f000 f848 	bl	8019270 <_fstat_r>
 80191e0:	2800      	cmp	r0, #0
 80191e2:	dbec      	blt.n	80191be <__swhatbuf_r+0x12>
 80191e4:	9901      	ldr	r1, [sp, #4]
 80191e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80191ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80191ee:	4259      	negs	r1, r3
 80191f0:	4159      	adcs	r1, r3
 80191f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80191f6:	e7eb      	b.n	80191d0 <__swhatbuf_r+0x24>

080191f8 <__smakebuf_r>:
 80191f8:	898b      	ldrh	r3, [r1, #12]
 80191fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191fc:	079d      	lsls	r5, r3, #30
 80191fe:	4606      	mov	r6, r0
 8019200:	460c      	mov	r4, r1
 8019202:	d507      	bpl.n	8019214 <__smakebuf_r+0x1c>
 8019204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019208:	6023      	str	r3, [r4, #0]
 801920a:	6123      	str	r3, [r4, #16]
 801920c:	2301      	movs	r3, #1
 801920e:	6163      	str	r3, [r4, #20]
 8019210:	b003      	add	sp, #12
 8019212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019214:	ab01      	add	r3, sp, #4
 8019216:	466a      	mov	r2, sp
 8019218:	f7ff ffc8 	bl	80191ac <__swhatbuf_r>
 801921c:	9f00      	ldr	r7, [sp, #0]
 801921e:	4605      	mov	r5, r0
 8019220:	4639      	mov	r1, r7
 8019222:	4630      	mov	r0, r6
 8019224:	f7fe fe84 	bl	8017f30 <_malloc_r>
 8019228:	b948      	cbnz	r0, 801923e <__smakebuf_r+0x46>
 801922a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801922e:	059a      	lsls	r2, r3, #22
 8019230:	d4ee      	bmi.n	8019210 <__smakebuf_r+0x18>
 8019232:	f023 0303 	bic.w	r3, r3, #3
 8019236:	f043 0302 	orr.w	r3, r3, #2
 801923a:	81a3      	strh	r3, [r4, #12]
 801923c:	e7e2      	b.n	8019204 <__smakebuf_r+0xc>
 801923e:	89a3      	ldrh	r3, [r4, #12]
 8019240:	6020      	str	r0, [r4, #0]
 8019242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019246:	81a3      	strh	r3, [r4, #12]
 8019248:	9b01      	ldr	r3, [sp, #4]
 801924a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801924e:	b15b      	cbz	r3, 8019268 <__smakebuf_r+0x70>
 8019250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019254:	4630      	mov	r0, r6
 8019256:	f000 f81d 	bl	8019294 <_isatty_r>
 801925a:	b128      	cbz	r0, 8019268 <__smakebuf_r+0x70>
 801925c:	89a3      	ldrh	r3, [r4, #12]
 801925e:	f023 0303 	bic.w	r3, r3, #3
 8019262:	f043 0301 	orr.w	r3, r3, #1
 8019266:	81a3      	strh	r3, [r4, #12]
 8019268:	89a3      	ldrh	r3, [r4, #12]
 801926a:	431d      	orrs	r5, r3
 801926c:	81a5      	strh	r5, [r4, #12]
 801926e:	e7cf      	b.n	8019210 <__smakebuf_r+0x18>

08019270 <_fstat_r>:
 8019270:	b538      	push	{r3, r4, r5, lr}
 8019272:	4d07      	ldr	r5, [pc, #28]	@ (8019290 <_fstat_r+0x20>)
 8019274:	2300      	movs	r3, #0
 8019276:	4604      	mov	r4, r0
 8019278:	4608      	mov	r0, r1
 801927a:	4611      	mov	r1, r2
 801927c:	602b      	str	r3, [r5, #0]
 801927e:	f7e9 fb81 	bl	8002984 <_fstat>
 8019282:	1c43      	adds	r3, r0, #1
 8019284:	d102      	bne.n	801928c <_fstat_r+0x1c>
 8019286:	682b      	ldr	r3, [r5, #0]
 8019288:	b103      	cbz	r3, 801928c <_fstat_r+0x1c>
 801928a:	6023      	str	r3, [r4, #0]
 801928c:	bd38      	pop	{r3, r4, r5, pc}
 801928e:	bf00      	nop
 8019290:	2000eeec 	.word	0x2000eeec

08019294 <_isatty_r>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4d06      	ldr	r5, [pc, #24]	@ (80192b0 <_isatty_r+0x1c>)
 8019298:	2300      	movs	r3, #0
 801929a:	4604      	mov	r4, r0
 801929c:	4608      	mov	r0, r1
 801929e:	602b      	str	r3, [r5, #0]
 80192a0:	f7e9 fb80 	bl	80029a4 <_isatty>
 80192a4:	1c43      	adds	r3, r0, #1
 80192a6:	d102      	bne.n	80192ae <_isatty_r+0x1a>
 80192a8:	682b      	ldr	r3, [r5, #0]
 80192aa:	b103      	cbz	r3, 80192ae <_isatty_r+0x1a>
 80192ac:	6023      	str	r3, [r4, #0]
 80192ae:	bd38      	pop	{r3, r4, r5, pc}
 80192b0:	2000eeec 	.word	0x2000eeec

080192b4 <abort>:
 80192b4:	b508      	push	{r3, lr}
 80192b6:	2006      	movs	r0, #6
 80192b8:	f000 f96c 	bl	8019594 <raise>
 80192bc:	2001      	movs	r0, #1
 80192be:	f7e9 fb11 	bl	80028e4 <_exit>

080192c2 <__sfputc_r>:
 80192c2:	6893      	ldr	r3, [r2, #8]
 80192c4:	3b01      	subs	r3, #1
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	b410      	push	{r4}
 80192ca:	6093      	str	r3, [r2, #8]
 80192cc:	da08      	bge.n	80192e0 <__sfputc_r+0x1e>
 80192ce:	6994      	ldr	r4, [r2, #24]
 80192d0:	42a3      	cmp	r3, r4
 80192d2:	db01      	blt.n	80192d8 <__sfputc_r+0x16>
 80192d4:	290a      	cmp	r1, #10
 80192d6:	d103      	bne.n	80192e0 <__sfputc_r+0x1e>
 80192d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192dc:	f7ff b9a0 	b.w	8018620 <__swbuf_r>
 80192e0:	6813      	ldr	r3, [r2, #0]
 80192e2:	1c58      	adds	r0, r3, #1
 80192e4:	6010      	str	r0, [r2, #0]
 80192e6:	7019      	strb	r1, [r3, #0]
 80192e8:	4608      	mov	r0, r1
 80192ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192ee:	4770      	bx	lr

080192f0 <__sfputs_r>:
 80192f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192f2:	4606      	mov	r6, r0
 80192f4:	460f      	mov	r7, r1
 80192f6:	4614      	mov	r4, r2
 80192f8:	18d5      	adds	r5, r2, r3
 80192fa:	42ac      	cmp	r4, r5
 80192fc:	d101      	bne.n	8019302 <__sfputs_r+0x12>
 80192fe:	2000      	movs	r0, #0
 8019300:	e007      	b.n	8019312 <__sfputs_r+0x22>
 8019302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019306:	463a      	mov	r2, r7
 8019308:	4630      	mov	r0, r6
 801930a:	f7ff ffda 	bl	80192c2 <__sfputc_r>
 801930e:	1c43      	adds	r3, r0, #1
 8019310:	d1f3      	bne.n	80192fa <__sfputs_r+0xa>
 8019312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019314 <_vfiprintf_r>:
 8019314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019318:	460d      	mov	r5, r1
 801931a:	b09d      	sub	sp, #116	@ 0x74
 801931c:	4614      	mov	r4, r2
 801931e:	4698      	mov	r8, r3
 8019320:	4606      	mov	r6, r0
 8019322:	b118      	cbz	r0, 801932c <_vfiprintf_r+0x18>
 8019324:	6a03      	ldr	r3, [r0, #32]
 8019326:	b90b      	cbnz	r3, 801932c <_vfiprintf_r+0x18>
 8019328:	f7ff f834 	bl	8018394 <__sinit>
 801932c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801932e:	07d9      	lsls	r1, r3, #31
 8019330:	d405      	bmi.n	801933e <_vfiprintf_r+0x2a>
 8019332:	89ab      	ldrh	r3, [r5, #12]
 8019334:	059a      	lsls	r2, r3, #22
 8019336:	d402      	bmi.n	801933e <_vfiprintf_r+0x2a>
 8019338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801933a:	f7ff fb00 	bl	801893e <__retarget_lock_acquire_recursive>
 801933e:	89ab      	ldrh	r3, [r5, #12]
 8019340:	071b      	lsls	r3, r3, #28
 8019342:	d501      	bpl.n	8019348 <_vfiprintf_r+0x34>
 8019344:	692b      	ldr	r3, [r5, #16]
 8019346:	b99b      	cbnz	r3, 8019370 <_vfiprintf_r+0x5c>
 8019348:	4629      	mov	r1, r5
 801934a:	4630      	mov	r0, r6
 801934c:	f7ff f9a6 	bl	801869c <__swsetup_r>
 8019350:	b170      	cbz	r0, 8019370 <_vfiprintf_r+0x5c>
 8019352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019354:	07dc      	lsls	r4, r3, #31
 8019356:	d504      	bpl.n	8019362 <_vfiprintf_r+0x4e>
 8019358:	f04f 30ff 	mov.w	r0, #4294967295
 801935c:	b01d      	add	sp, #116	@ 0x74
 801935e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019362:	89ab      	ldrh	r3, [r5, #12]
 8019364:	0598      	lsls	r0, r3, #22
 8019366:	d4f7      	bmi.n	8019358 <_vfiprintf_r+0x44>
 8019368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801936a:	f7ff fae9 	bl	8018940 <__retarget_lock_release_recursive>
 801936e:	e7f3      	b.n	8019358 <_vfiprintf_r+0x44>
 8019370:	2300      	movs	r3, #0
 8019372:	9309      	str	r3, [sp, #36]	@ 0x24
 8019374:	2320      	movs	r3, #32
 8019376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801937a:	f8cd 800c 	str.w	r8, [sp, #12]
 801937e:	2330      	movs	r3, #48	@ 0x30
 8019380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019530 <_vfiprintf_r+0x21c>
 8019384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019388:	f04f 0901 	mov.w	r9, #1
 801938c:	4623      	mov	r3, r4
 801938e:	469a      	mov	sl, r3
 8019390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019394:	b10a      	cbz	r2, 801939a <_vfiprintf_r+0x86>
 8019396:	2a25      	cmp	r2, #37	@ 0x25
 8019398:	d1f9      	bne.n	801938e <_vfiprintf_r+0x7a>
 801939a:	ebba 0b04 	subs.w	fp, sl, r4
 801939e:	d00b      	beq.n	80193b8 <_vfiprintf_r+0xa4>
 80193a0:	465b      	mov	r3, fp
 80193a2:	4622      	mov	r2, r4
 80193a4:	4629      	mov	r1, r5
 80193a6:	4630      	mov	r0, r6
 80193a8:	f7ff ffa2 	bl	80192f0 <__sfputs_r>
 80193ac:	3001      	adds	r0, #1
 80193ae:	f000 80a7 	beq.w	8019500 <_vfiprintf_r+0x1ec>
 80193b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80193b4:	445a      	add	r2, fp
 80193b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80193b8:	f89a 3000 	ldrb.w	r3, [sl]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	f000 809f 	beq.w	8019500 <_vfiprintf_r+0x1ec>
 80193c2:	2300      	movs	r3, #0
 80193c4:	f04f 32ff 	mov.w	r2, #4294967295
 80193c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193cc:	f10a 0a01 	add.w	sl, sl, #1
 80193d0:	9304      	str	r3, [sp, #16]
 80193d2:	9307      	str	r3, [sp, #28]
 80193d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80193d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80193da:	4654      	mov	r4, sl
 80193dc:	2205      	movs	r2, #5
 80193de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193e2:	4853      	ldr	r0, [pc, #332]	@ (8019530 <_vfiprintf_r+0x21c>)
 80193e4:	f7e6 ff24 	bl	8000230 <memchr>
 80193e8:	9a04      	ldr	r2, [sp, #16]
 80193ea:	b9d8      	cbnz	r0, 8019424 <_vfiprintf_r+0x110>
 80193ec:	06d1      	lsls	r1, r2, #27
 80193ee:	bf44      	itt	mi
 80193f0:	2320      	movmi	r3, #32
 80193f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193f6:	0713      	lsls	r3, r2, #28
 80193f8:	bf44      	itt	mi
 80193fa:	232b      	movmi	r3, #43	@ 0x2b
 80193fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019400:	f89a 3000 	ldrb.w	r3, [sl]
 8019404:	2b2a      	cmp	r3, #42	@ 0x2a
 8019406:	d015      	beq.n	8019434 <_vfiprintf_r+0x120>
 8019408:	9a07      	ldr	r2, [sp, #28]
 801940a:	4654      	mov	r4, sl
 801940c:	2000      	movs	r0, #0
 801940e:	f04f 0c0a 	mov.w	ip, #10
 8019412:	4621      	mov	r1, r4
 8019414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019418:	3b30      	subs	r3, #48	@ 0x30
 801941a:	2b09      	cmp	r3, #9
 801941c:	d94b      	bls.n	80194b6 <_vfiprintf_r+0x1a2>
 801941e:	b1b0      	cbz	r0, 801944e <_vfiprintf_r+0x13a>
 8019420:	9207      	str	r2, [sp, #28]
 8019422:	e014      	b.n	801944e <_vfiprintf_r+0x13a>
 8019424:	eba0 0308 	sub.w	r3, r0, r8
 8019428:	fa09 f303 	lsl.w	r3, r9, r3
 801942c:	4313      	orrs	r3, r2
 801942e:	9304      	str	r3, [sp, #16]
 8019430:	46a2      	mov	sl, r4
 8019432:	e7d2      	b.n	80193da <_vfiprintf_r+0xc6>
 8019434:	9b03      	ldr	r3, [sp, #12]
 8019436:	1d19      	adds	r1, r3, #4
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	9103      	str	r1, [sp, #12]
 801943c:	2b00      	cmp	r3, #0
 801943e:	bfbb      	ittet	lt
 8019440:	425b      	neglt	r3, r3
 8019442:	f042 0202 	orrlt.w	r2, r2, #2
 8019446:	9307      	strge	r3, [sp, #28]
 8019448:	9307      	strlt	r3, [sp, #28]
 801944a:	bfb8      	it	lt
 801944c:	9204      	strlt	r2, [sp, #16]
 801944e:	7823      	ldrb	r3, [r4, #0]
 8019450:	2b2e      	cmp	r3, #46	@ 0x2e
 8019452:	d10a      	bne.n	801946a <_vfiprintf_r+0x156>
 8019454:	7863      	ldrb	r3, [r4, #1]
 8019456:	2b2a      	cmp	r3, #42	@ 0x2a
 8019458:	d132      	bne.n	80194c0 <_vfiprintf_r+0x1ac>
 801945a:	9b03      	ldr	r3, [sp, #12]
 801945c:	1d1a      	adds	r2, r3, #4
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	9203      	str	r2, [sp, #12]
 8019462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019466:	3402      	adds	r4, #2
 8019468:	9305      	str	r3, [sp, #20]
 801946a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019540 <_vfiprintf_r+0x22c>
 801946e:	7821      	ldrb	r1, [r4, #0]
 8019470:	2203      	movs	r2, #3
 8019472:	4650      	mov	r0, sl
 8019474:	f7e6 fedc 	bl	8000230 <memchr>
 8019478:	b138      	cbz	r0, 801948a <_vfiprintf_r+0x176>
 801947a:	9b04      	ldr	r3, [sp, #16]
 801947c:	eba0 000a 	sub.w	r0, r0, sl
 8019480:	2240      	movs	r2, #64	@ 0x40
 8019482:	4082      	lsls	r2, r0
 8019484:	4313      	orrs	r3, r2
 8019486:	3401      	adds	r4, #1
 8019488:	9304      	str	r3, [sp, #16]
 801948a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801948e:	4829      	ldr	r0, [pc, #164]	@ (8019534 <_vfiprintf_r+0x220>)
 8019490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019494:	2206      	movs	r2, #6
 8019496:	f7e6 fecb 	bl	8000230 <memchr>
 801949a:	2800      	cmp	r0, #0
 801949c:	d03f      	beq.n	801951e <_vfiprintf_r+0x20a>
 801949e:	4b26      	ldr	r3, [pc, #152]	@ (8019538 <_vfiprintf_r+0x224>)
 80194a0:	bb1b      	cbnz	r3, 80194ea <_vfiprintf_r+0x1d6>
 80194a2:	9b03      	ldr	r3, [sp, #12]
 80194a4:	3307      	adds	r3, #7
 80194a6:	f023 0307 	bic.w	r3, r3, #7
 80194aa:	3308      	adds	r3, #8
 80194ac:	9303      	str	r3, [sp, #12]
 80194ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194b0:	443b      	add	r3, r7
 80194b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80194b4:	e76a      	b.n	801938c <_vfiprintf_r+0x78>
 80194b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80194ba:	460c      	mov	r4, r1
 80194bc:	2001      	movs	r0, #1
 80194be:	e7a8      	b.n	8019412 <_vfiprintf_r+0xfe>
 80194c0:	2300      	movs	r3, #0
 80194c2:	3401      	adds	r4, #1
 80194c4:	9305      	str	r3, [sp, #20]
 80194c6:	4619      	mov	r1, r3
 80194c8:	f04f 0c0a 	mov.w	ip, #10
 80194cc:	4620      	mov	r0, r4
 80194ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194d2:	3a30      	subs	r2, #48	@ 0x30
 80194d4:	2a09      	cmp	r2, #9
 80194d6:	d903      	bls.n	80194e0 <_vfiprintf_r+0x1cc>
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d0c6      	beq.n	801946a <_vfiprintf_r+0x156>
 80194dc:	9105      	str	r1, [sp, #20]
 80194de:	e7c4      	b.n	801946a <_vfiprintf_r+0x156>
 80194e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80194e4:	4604      	mov	r4, r0
 80194e6:	2301      	movs	r3, #1
 80194e8:	e7f0      	b.n	80194cc <_vfiprintf_r+0x1b8>
 80194ea:	ab03      	add	r3, sp, #12
 80194ec:	9300      	str	r3, [sp, #0]
 80194ee:	462a      	mov	r2, r5
 80194f0:	4b12      	ldr	r3, [pc, #72]	@ (801953c <_vfiprintf_r+0x228>)
 80194f2:	a904      	add	r1, sp, #16
 80194f4:	4630      	mov	r0, r6
 80194f6:	f3af 8000 	nop.w
 80194fa:	4607      	mov	r7, r0
 80194fc:	1c78      	adds	r0, r7, #1
 80194fe:	d1d6      	bne.n	80194ae <_vfiprintf_r+0x19a>
 8019500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019502:	07d9      	lsls	r1, r3, #31
 8019504:	d405      	bmi.n	8019512 <_vfiprintf_r+0x1fe>
 8019506:	89ab      	ldrh	r3, [r5, #12]
 8019508:	059a      	lsls	r2, r3, #22
 801950a:	d402      	bmi.n	8019512 <_vfiprintf_r+0x1fe>
 801950c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801950e:	f7ff fa17 	bl	8018940 <__retarget_lock_release_recursive>
 8019512:	89ab      	ldrh	r3, [r5, #12]
 8019514:	065b      	lsls	r3, r3, #25
 8019516:	f53f af1f 	bmi.w	8019358 <_vfiprintf_r+0x44>
 801951a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801951c:	e71e      	b.n	801935c <_vfiprintf_r+0x48>
 801951e:	ab03      	add	r3, sp, #12
 8019520:	9300      	str	r3, [sp, #0]
 8019522:	462a      	mov	r2, r5
 8019524:	4b05      	ldr	r3, [pc, #20]	@ (801953c <_vfiprintf_r+0x228>)
 8019526:	a904      	add	r1, sp, #16
 8019528:	4630      	mov	r0, r6
 801952a:	f7ff fc63 	bl	8018df4 <_printf_i>
 801952e:	e7e4      	b.n	80194fa <_vfiprintf_r+0x1e6>
 8019530:	0801a6d7 	.word	0x0801a6d7
 8019534:	0801a6e1 	.word	0x0801a6e1
 8019538:	00000000 	.word	0x00000000
 801953c:	080192f1 	.word	0x080192f1
 8019540:	0801a6dd 	.word	0x0801a6dd

08019544 <_raise_r>:
 8019544:	291f      	cmp	r1, #31
 8019546:	b538      	push	{r3, r4, r5, lr}
 8019548:	4605      	mov	r5, r0
 801954a:	460c      	mov	r4, r1
 801954c:	d904      	bls.n	8019558 <_raise_r+0x14>
 801954e:	2316      	movs	r3, #22
 8019550:	6003      	str	r3, [r0, #0]
 8019552:	f04f 30ff 	mov.w	r0, #4294967295
 8019556:	bd38      	pop	{r3, r4, r5, pc}
 8019558:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801955a:	b112      	cbz	r2, 8019562 <_raise_r+0x1e>
 801955c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019560:	b94b      	cbnz	r3, 8019576 <_raise_r+0x32>
 8019562:	4628      	mov	r0, r5
 8019564:	f000 f830 	bl	80195c8 <_getpid_r>
 8019568:	4622      	mov	r2, r4
 801956a:	4601      	mov	r1, r0
 801956c:	4628      	mov	r0, r5
 801956e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019572:	f000 b817 	b.w	80195a4 <_kill_r>
 8019576:	2b01      	cmp	r3, #1
 8019578:	d00a      	beq.n	8019590 <_raise_r+0x4c>
 801957a:	1c59      	adds	r1, r3, #1
 801957c:	d103      	bne.n	8019586 <_raise_r+0x42>
 801957e:	2316      	movs	r3, #22
 8019580:	6003      	str	r3, [r0, #0]
 8019582:	2001      	movs	r0, #1
 8019584:	e7e7      	b.n	8019556 <_raise_r+0x12>
 8019586:	2100      	movs	r1, #0
 8019588:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801958c:	4620      	mov	r0, r4
 801958e:	4798      	blx	r3
 8019590:	2000      	movs	r0, #0
 8019592:	e7e0      	b.n	8019556 <_raise_r+0x12>

08019594 <raise>:
 8019594:	4b02      	ldr	r3, [pc, #8]	@ (80195a0 <raise+0xc>)
 8019596:	4601      	mov	r1, r0
 8019598:	6818      	ldr	r0, [r3, #0]
 801959a:	f7ff bfd3 	b.w	8019544 <_raise_r>
 801959e:	bf00      	nop
 80195a0:	20000eb0 	.word	0x20000eb0

080195a4 <_kill_r>:
 80195a4:	b538      	push	{r3, r4, r5, lr}
 80195a6:	4d07      	ldr	r5, [pc, #28]	@ (80195c4 <_kill_r+0x20>)
 80195a8:	2300      	movs	r3, #0
 80195aa:	4604      	mov	r4, r0
 80195ac:	4608      	mov	r0, r1
 80195ae:	4611      	mov	r1, r2
 80195b0:	602b      	str	r3, [r5, #0]
 80195b2:	f7e9 f987 	bl	80028c4 <_kill>
 80195b6:	1c43      	adds	r3, r0, #1
 80195b8:	d102      	bne.n	80195c0 <_kill_r+0x1c>
 80195ba:	682b      	ldr	r3, [r5, #0]
 80195bc:	b103      	cbz	r3, 80195c0 <_kill_r+0x1c>
 80195be:	6023      	str	r3, [r4, #0]
 80195c0:	bd38      	pop	{r3, r4, r5, pc}
 80195c2:	bf00      	nop
 80195c4:	2000eeec 	.word	0x2000eeec

080195c8 <_getpid_r>:
 80195c8:	f7e9 b974 	b.w	80028b4 <_getpid>

080195cc <_init>:
 80195cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ce:	bf00      	nop
 80195d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195d2:	bc08      	pop	{r3}
 80195d4:	469e      	mov	lr, r3
 80195d6:	4770      	bx	lr

080195d8 <_fini>:
 80195d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195da:	bf00      	nop
 80195dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195de:	bc08      	pop	{r3}
 80195e0:	469e      	mov	lr, r3
 80195e2:	4770      	bx	lr
