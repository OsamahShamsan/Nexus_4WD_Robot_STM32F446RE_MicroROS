
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aab4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001398  0801ac88  0801ac88  0001bc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c020  0801c020  0001f2f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c020  0801c020  0001d020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c028  0801c028  0001f2f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801c028  0801c028  0001d028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c034  0801c034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000012f0  20000000  0801c038  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e154  200012f0  0801d328  0001f2f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000f444  0801d328  0001f444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f2f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002015a  00000000  00000000  0001f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004949  00000000  00000000  0003f47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00043dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001408  00000000  00000000  000457b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029aa8  00000000  00000000  00046bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c79  00000000  00000000  00070660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa188  00000000  00000000  000922d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  0018c461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad0  00000000  00000000  0018c4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00193f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200012f0 	.word	0x200012f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ac6c 	.word	0x0801ac6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200012f4 	.word	0x200012f4
 800020c:	0801ac6c 	.word	0x0801ac6c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	@ 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__aeabi_d2iz>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008b4:	d215      	bcs.n	80008e2 <__aeabi_d2iz+0x36>
 80008b6:	d511      	bpl.n	80008dc <__aeabi_d2iz+0x30>
 80008b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d912      	bls.n	80008e8 <__aeabi_d2iz+0x3c>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008d2:	fa23 f002 	lsr.w	r0, r3, r2
 80008d6:	bf18      	it	ne
 80008d8:	4240      	negne	r0, r0
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008e6:	d105      	bne.n	80008f4 <__aeabi_d2iz+0x48>
 80008e8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008ec:	bf08      	it	eq
 80008ee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008f2:	4770      	bx	lr
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_ldivmod>:
 80008fc:	b97b      	cbnz	r3, 800091e <__aeabi_ldivmod+0x22>
 80008fe:	b972      	cbnz	r2, 800091e <__aeabi_ldivmod+0x22>
 8000900:	2900      	cmp	r1, #0
 8000902:	bfbe      	ittt	lt
 8000904:	2000      	movlt	r0, #0
 8000906:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800090a:	e006      	blt.n	800091a <__aeabi_ldivmod+0x1e>
 800090c:	bf08      	it	eq
 800090e:	2800      	cmpeq	r0, #0
 8000910:	bf1c      	itt	ne
 8000912:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000916:	f04f 30ff 	movne.w	r0, #4294967295
 800091a:	f000 b9d3 	b.w	8000cc4 <__aeabi_idiv0>
 800091e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000922:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000926:	2900      	cmp	r1, #0
 8000928:	db09      	blt.n	800093e <__aeabi_ldivmod+0x42>
 800092a:	2b00      	cmp	r3, #0
 800092c:	db1a      	blt.n	8000964 <__aeabi_ldivmod+0x68>
 800092e:	f000 f84d 	bl	80009cc <__udivmoddi4>
 8000932:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800093a:	b004      	add	sp, #16
 800093c:	4770      	bx	lr
 800093e:	4240      	negs	r0, r0
 8000940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	db1b      	blt.n	8000980 <__aeabi_ldivmod+0x84>
 8000948:	f000 f840 	bl	80009cc <__udivmoddi4>
 800094c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000954:	b004      	add	sp, #16
 8000956:	4240      	negs	r0, r0
 8000958:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800095c:	4252      	negs	r2, r2
 800095e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000962:	4770      	bx	lr
 8000964:	4252      	negs	r2, r2
 8000966:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800096a:	f000 f82f 	bl	80009cc <__udivmoddi4>
 800096e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000976:	b004      	add	sp, #16
 8000978:	4240      	negs	r0, r0
 800097a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097e:	4770      	bx	lr
 8000980:	4252      	negs	r2, r2
 8000982:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000986:	f000 f821 	bl	80009cc <__udivmoddi4>
 800098a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000992:	b004      	add	sp, #16
 8000994:	4252      	negs	r2, r2
 8000996:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b988 	b.w	8000cc4 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	9d08      	ldr	r5, [sp, #32]
 80009d2:	468e      	mov	lr, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	4688      	mov	r8, r1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d14a      	bne.n	8000a72 <__udivmoddi4+0xa6>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d962      	bls.n	8000aa8 <__udivmoddi4+0xdc>
 80009e2:	fab2 f682 	clz	r6, r2
 80009e6:	b14e      	cbz	r6, 80009fc <__udivmoddi4+0x30>
 80009e8:	f1c6 0320 	rsb	r3, r6, #32
 80009ec:	fa01 f806 	lsl.w	r8, r1, r6
 80009f0:	fa20 f303 	lsr.w	r3, r0, r3
 80009f4:	40b7      	lsls	r7, r6
 80009f6:	ea43 0808 	orr.w	r8, r3, r8
 80009fa:	40b4      	lsls	r4, r6
 80009fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a00:	fa1f fc87 	uxth.w	ip, r7
 8000a04:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a08:	0c23      	lsrs	r3, r4, #16
 8000a0a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a12:	fb01 f20c 	mul.w	r2, r1, ip
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d909      	bls.n	8000a2e <__udivmoddi4+0x62>
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a20:	f080 80ea 	bcs.w	8000bf8 <__udivmoddi4+0x22c>
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f240 80e7 	bls.w	8000bf8 <__udivmoddi4+0x22c>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	443b      	add	r3, r7
 8000a2e:	1a9a      	subs	r2, r3, r2
 8000a30:	b2a3      	uxth	r3, r4
 8000a32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a42:	459c      	cmp	ip, r3
 8000a44:	d909      	bls.n	8000a5a <__udivmoddi4+0x8e>
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a4c:	f080 80d6 	bcs.w	8000bfc <__udivmoddi4+0x230>
 8000a50:	459c      	cmp	ip, r3
 8000a52:	f240 80d3 	bls.w	8000bfc <__udivmoddi4+0x230>
 8000a56:	443b      	add	r3, r7
 8000a58:	3802      	subs	r0, #2
 8000a5a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5e:	eba3 030c 	sub.w	r3, r3, ip
 8000a62:	2100      	movs	r1, #0
 8000a64:	b11d      	cbz	r5, 8000a6e <__udivmoddi4+0xa2>
 8000a66:	40f3      	lsrs	r3, r6
 8000a68:	2200      	movs	r2, #0
 8000a6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d905      	bls.n	8000a82 <__udivmoddi4+0xb6>
 8000a76:	b10d      	cbz	r5, 8000a7c <__udivmoddi4+0xb0>
 8000a78:	e9c5 0100 	strd	r0, r1, [r5]
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	e7f5      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000a82:	fab3 f183 	clz	r1, r3
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d146      	bne.n	8000b18 <__udivmoddi4+0x14c>
 8000a8a:	4573      	cmp	r3, lr
 8000a8c:	d302      	bcc.n	8000a94 <__udivmoddi4+0xc8>
 8000a8e:	4282      	cmp	r2, r0
 8000a90:	f200 8105 	bhi.w	8000c9e <__udivmoddi4+0x2d2>
 8000a94:	1a84      	subs	r4, r0, r2
 8000a96:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	4690      	mov	r8, r2
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d0e5      	beq.n	8000a6e <__udivmoddi4+0xa2>
 8000aa2:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa6:	e7e2      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	f000 8090 	beq.w	8000bce <__udivmoddi4+0x202>
 8000aae:	fab2 f682 	clz	r6, r2
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	f040 80a4 	bne.w	8000c00 <__udivmoddi4+0x234>
 8000ab8:	1a8a      	subs	r2, r1, r2
 8000aba:	0c03      	lsrs	r3, r0, #16
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	b280      	uxth	r0, r0
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000aca:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ad2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d907      	bls.n	8000aea <__udivmoddi4+0x11e>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x11c>
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	f200 80e0 	bhi.w	8000ca8 <__udivmoddi4+0x2dc>
 8000ae8:	46c4      	mov	ip, r8
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af8:	fb02 f404 	mul.w	r4, r2, r4
 8000afc:	429c      	cmp	r4, r3
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x144>
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x142>
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	f200 80ca 	bhi.w	8000ca2 <__udivmoddi4+0x2d6>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	1b1b      	subs	r3, r3, r4
 8000b12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b16:	e7a5      	b.n	8000a64 <__udivmoddi4+0x98>
 8000b18:	f1c1 0620 	rsb	r6, r1, #32
 8000b1c:	408b      	lsls	r3, r1
 8000b1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b22:	431f      	orrs	r7, r3
 8000b24:	fa0e f401 	lsl.w	r4, lr, r1
 8000b28:	fa20 f306 	lsr.w	r3, r0, r6
 8000b2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b34:	4323      	orrs	r3, r4
 8000b36:	fa00 f801 	lsl.w	r8, r0, r1
 8000b3a:	fa1f fc87 	uxth.w	ip, r7
 8000b3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b42:	0c1c      	lsrs	r4, r3, #16
 8000b44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	fa02 f201 	lsl.w	r2, r2, r1
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x1a0>
 8000b58:	193c      	adds	r4, r7, r4
 8000b5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5e:	f080 809c 	bcs.w	8000c9a <__udivmoddi4+0x2ce>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f240 8099 	bls.w	8000c9a <__udivmoddi4+0x2ce>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	fa1f fe83 	uxth.w	lr, r3
 8000b74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b78:	fb09 4413 	mls	r4, r9, r3, r4
 8000b7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b84:	45a4      	cmp	ip, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x1ce>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8e:	f080 8082 	bcs.w	8000c96 <__udivmoddi4+0x2ca>
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d97f      	bls.n	8000c96 <__udivmoddi4+0x2ca>
 8000b96:	3b02      	subs	r3, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ba2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba6:	4564      	cmp	r4, ip
 8000ba8:	4673      	mov	r3, lr
 8000baa:	46e1      	mov	r9, ip
 8000bac:	d362      	bcc.n	8000c74 <__udivmoddi4+0x2a8>
 8000bae:	d05f      	beq.n	8000c70 <__udivmoddi4+0x2a4>
 8000bb0:	b15d      	cbz	r5, 8000bca <__udivmoddi4+0x1fe>
 8000bb2:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb6:	eb64 0409 	sbc.w	r4, r4, r9
 8000bba:	fa04 f606 	lsl.w	r6, r4, r6
 8000bbe:	fa22 f301 	lsr.w	r3, r2, r1
 8000bc2:	431e      	orrs	r6, r3
 8000bc4:	40cc      	lsrs	r4, r1
 8000bc6:	e9c5 6400 	strd	r6, r4, [r5]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	e74f      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000bce:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bd2:	0c01      	lsrs	r1, r0, #16
 8000bd4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd8:	b280      	uxth	r0, r0
 8000bda:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bde:	463b      	mov	r3, r7
 8000be0:	4638      	mov	r0, r7
 8000be2:	463c      	mov	r4, r7
 8000be4:	46b8      	mov	r8, r7
 8000be6:	46be      	mov	lr, r7
 8000be8:	2620      	movs	r6, #32
 8000bea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bee:	eba2 0208 	sub.w	r2, r2, r8
 8000bf2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf6:	e766      	b.n	8000ac6 <__udivmoddi4+0xfa>
 8000bf8:	4601      	mov	r1, r0
 8000bfa:	e718      	b.n	8000a2e <__udivmoddi4+0x62>
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	e72c      	b.n	8000a5a <__udivmoddi4+0x8e>
 8000c00:	f1c6 0220 	rsb	r2, r6, #32
 8000c04:	fa2e f302 	lsr.w	r3, lr, r2
 8000c08:	40b7      	lsls	r7, r6
 8000c0a:	40b1      	lsls	r1, r6
 8000c0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	430a      	orrs	r2, r1
 8000c16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c1a:	b2bc      	uxth	r4, r7
 8000c1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c26:	fb08 f904 	mul.w	r9, r8, r4
 8000c2a:	40b0      	lsls	r0, r6
 8000c2c:	4589      	cmp	r9, r1
 8000c2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c32:	b280      	uxth	r0, r0
 8000c34:	d93e      	bls.n	8000cb4 <__udivmoddi4+0x2e8>
 8000c36:	1879      	adds	r1, r7, r1
 8000c38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c3c:	d201      	bcs.n	8000c42 <__udivmoddi4+0x276>
 8000c3e:	4589      	cmp	r9, r1
 8000c40:	d81f      	bhi.n	8000c82 <__udivmoddi4+0x2b6>
 8000c42:	eba1 0109 	sub.w	r1, r1, r9
 8000c46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c4a:	fb09 f804 	mul.w	r8, r9, r4
 8000c4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c52:	b292      	uxth	r2, r2
 8000c54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c58:	4542      	cmp	r2, r8
 8000c5a:	d229      	bcs.n	8000cb0 <__udivmoddi4+0x2e4>
 8000c5c:	18ba      	adds	r2, r7, r2
 8000c5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c62:	d2c4      	bcs.n	8000bee <__udivmoddi4+0x222>
 8000c64:	4542      	cmp	r2, r8
 8000c66:	d2c2      	bcs.n	8000bee <__udivmoddi4+0x222>
 8000c68:	f1a9 0102 	sub.w	r1, r9, #2
 8000c6c:	443a      	add	r2, r7
 8000c6e:	e7be      	b.n	8000bee <__udivmoddi4+0x222>
 8000c70:	45f0      	cmp	r8, lr
 8000c72:	d29d      	bcs.n	8000bb0 <__udivmoddi4+0x1e4>
 8000c74:	ebbe 0302 	subs.w	r3, lr, r2
 8000c78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	46e1      	mov	r9, ip
 8000c80:	e796      	b.n	8000bb0 <__udivmoddi4+0x1e4>
 8000c82:	eba7 0909 	sub.w	r9, r7, r9
 8000c86:	4449      	add	r1, r9
 8000c88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c90:	fb09 f804 	mul.w	r8, r9, r4
 8000c94:	e7db      	b.n	8000c4e <__udivmoddi4+0x282>
 8000c96:	4673      	mov	r3, lr
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1ce>
 8000c9a:	4650      	mov	r0, sl
 8000c9c:	e766      	b.n	8000b6c <__udivmoddi4+0x1a0>
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e6fd      	b.n	8000a9e <__udivmoddi4+0xd2>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3a02      	subs	r2, #2
 8000ca6:	e733      	b.n	8000b10 <__udivmoddi4+0x144>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	443b      	add	r3, r7
 8000cae:	e71c      	b.n	8000aea <__udivmoddi4+0x11e>
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x222>
 8000cb4:	eba1 0109 	sub.w	r1, r1, r9
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fb09 f804 	mul.w	r8, r9, r4
 8000cc2:	e7c4      	b.n	8000c4e <__udivmoddi4+0x282>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <ctrlparams_set_steps>:
volatile float g_v_step_mmps   = 20.0f;  // start conservative
volatile float g_wz_step_radps = 0.10f;
volatile int32_t g_ccr_applied[4] = {0, 0, 0, 0};

void ctrlparams_set_steps(float v_step_mmps, float wz_step_radps)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cd2:	edc7 0a00 	vstr	s1, [r7]
    if (v_step_mmps  > 0.0f) g_v_step_mmps   = v_step_mmps;
 8000cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce2:	dd02      	ble.n	8000cea <ctrlparams_set_steps+0x22>
 8000ce4:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <ctrlparams_set_steps+0x44>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
    if (wz_step_radps > 0.0f) g_wz_step_radps = wz_step_radps;
 8000cea:	edd7 7a00 	vldr	s15, [r7]
 8000cee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf6:	dc00      	bgt.n	8000cfa <ctrlparams_set_steps+0x32>
}
 8000cf8:	e002      	b.n	8000d00 <ctrlparams_set_steps+0x38>
    if (wz_step_radps > 0.0f) g_wz_step_radps = wz_step_radps;
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <ctrlparams_set_steps+0x48>)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000004 	.word	0x20000004

08000d14 <clamp>:
static inline void setMotorDir(GPIO_TypeDef* INxA_Port, uint16_t INxA_Pin, GPIO_TypeDef* INxB_Port, uint16_t INxB_Pin, float speed);

// ----------------------------------------------------------------------------------
// ----------- Motor control helpers  -----------------------------------------------
// ----------------------------------------------------------------------------------
static inline float clamp(float v, float lo, float hi){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d22:	ed87 1a01 	vstr	s2, [r7, #4]
    if (v < lo) 		return lo;
 8000d26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	d501      	bpl.n	8000d3c <clamp+0x28>
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	e00b      	b.n	8000d54 <clamp+0x40>
    else if (v > hi) 	return hi;
 8000d3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4c:	dd01      	ble.n	8000d52 <clamp+0x3e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	e000      	b.n	8000d54 <clamp+0x40>
    else 				return v;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <ramp_step>:

static inline float ramp_step(float target, float current, float step)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d70:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d74:	ed87 1a01 	vstr	s2, [r7, #4]
    if (target > current + step) 		 return current + step;
 8000d78:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d84:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	dd06      	ble.n	8000da0 <ramp_step+0x3a>
 8000d92:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d9e:	e015      	b.n	8000dcc <ramp_step+0x66>
    else if (target < current - step) 	 return current - step;
 8000da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dac:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db8:	d506      	bpl.n	8000dc8 <ramp_step+0x62>
 8000dba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc6:	e001      	b.n	8000dcc <ramp_step+0x66>
    else 								 return target;
 8000dc8:	edd7 7a03 	vldr	s15, [r7, #12]
}
 8000dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <setMotorDir>:


static inline void setMotorDir(GPIO_TypeDef* INxA_Port, uint16_t INxA_Pin, GPIO_TypeDef* INxB_Port, uint16_t INxB_Pin, float speed) {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	461a      	mov	r2, r3
 8000de6:	ed87 0a00 	vstr	s0, [r7]
 8000dea:	460b      	mov	r3, r1
 8000dec:	817b      	strh	r3, [r7, #10]
 8000dee:	4613      	mov	r3, r2
 8000df0:	813b      	strh	r3, [r7, #8]

	if (speed > 0.0f) { // Forward
 8000df2:	edd7 7a00 	vldr	s15, [r7]
 8000df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfe:	dd0c      	ble.n	8000e1a <setMotorDir+0x40>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 8000e00:	893b      	ldrh	r3, [r7, #8]
 8000e02:	2200      	movs	r2, #0
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f004 f88e 	bl	8004f28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_SET);
 8000e0c:	897b      	ldrh	r3, [r7, #10]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f004 f888 	bl	8004f28 <HAL_GPIO_WritePin>

	} else { // Stop / Brake
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
	}
}
 8000e18:	e01f      	b.n	8000e5a <setMotorDir+0x80>
	} else if (speed < 0.0f) { // Reverse
 8000e1a:	edd7 7a00 	vldr	s15, [r7]
 8000e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	d50c      	bpl.n	8000e42 <setMotorDir+0x68>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 8000e28:	897b      	ldrh	r3, [r7, #10]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f004 f87a 	bl	8004f28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_SET);
 8000e34:	893b      	ldrh	r3, [r7, #8]
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f004 f874 	bl	8004f28 <HAL_GPIO_WritePin>
}
 8000e40:	e00b      	b.n	8000e5a <setMotorDir+0x80>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 8000e42:	897b      	ldrh	r3, [r7, #10]
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f004 f86d 	bl	8004f28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 8000e4e:	893b      	ldrh	r3, [r7, #8]
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f004 f867 	bl	8004f28 <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <init_car>:

// ----------------------------------------------------------------------------------
// ----------- Motor control functions definitions  ---------------------------------
// ----------------------------------------------------------------------------------
void init_car(void){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

	// Set the direction to Forward (INA = 1) & (INB = 0)
	// Rear Left
	HAL_GPIO_WritePin(RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4830      	ldr	r0, [pc, #192]	@ (8000f30 <init_car+0xcc>)
 8000e6e:	f004 f85b 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2108      	movs	r1, #8
 8000e76:	482e      	ldr	r0, [pc, #184]	@ (8000f30 <init_car+0xcc>)
 8000e78:	f004 f856 	bl	8004f28 <HAL_GPIO_WritePin>
	// Front Left
	HAL_GPIO_WritePin(FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	482b      	ldr	r0, [pc, #172]	@ (8000f30 <init_car+0xcc>)
 8000e82:	f004 f851 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4829      	ldr	r0, [pc, #164]	@ (8000f30 <init_car+0xcc>)
 8000e8c:	f004 f84c 	bl	8004f28 <HAL_GPIO_WritePin>
	// Rear Right
	HAL_GPIO_WritePin(RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2110      	movs	r1, #16
 8000e94:	4826      	ldr	r0, [pc, #152]	@ (8000f30 <init_car+0xcc>)
 8000e96:	f004 f847 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea0:	4824      	ldr	r0, [pc, #144]	@ (8000f34 <init_car+0xd0>)
 8000ea2:	f004 f841 	bl	8004f28 <HAL_GPIO_WritePin>
	// Front Right
	HAL_GPIO_WritePin(FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4822      	ldr	r0, [pc, #136]	@ (8000f34 <init_car+0xd0>)
 8000eac:	f004 f83c 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eb6:	4820      	ldr	r0, [pc, #128]	@ (8000f38 <init_car+0xd4>)
 8000eb8:	f004 f836 	bl	8004f28 <HAL_GPIO_WritePin>

	// Enable the full bridges of the motor drivers (VDD)
	HAL_GPIO_WritePin(RL_VDD_GPO_GPIO_Port, RL_VDD_GPO_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ec2:	481b      	ldr	r0, [pc, #108]	@ (8000f30 <init_car+0xcc>)
 8000ec4:	f004 f830 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_VDD_GPO_GPIO_Port, FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ece:	4818      	ldr	r0, [pc, #96]	@ (8000f30 <init_car+0xcc>)
 8000ed0:	f004 f82a 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_VDD_GPO_GPIO_Port, RR_VDD_GPO_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eda:	4815      	ldr	r0, [pc, #84]	@ (8000f30 <init_car+0xcc>)
 8000edc:	f004 f824 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_VDD_GPO_GPIO_Port, FL_VDD_GPO_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee6:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <init_car+0xcc>)
 8000ee8:	f004 f81e 	bl	8004f28 <HAL_GPIO_WritePin>

	// Start the PWM signals
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// RL Motor
 8000eec:	2100      	movs	r1, #0
 8000eee:	4813      	ldr	r0, [pc, #76]	@ (8000f3c <init_car+0xd8>)
 8000ef0:	f004 ff68 	bl	8005dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// FL Motor
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <init_car+0xd8>)
 8000ef8:	f004 ff64 	bl	8005dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// FR Motor
 8000efc:	2108      	movs	r1, #8
 8000efe:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <init_car+0xd8>)
 8000f00:	f004 ff60 	bl	8005dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// RR Motor
 8000f04:	210c      	movs	r1, #12
 8000f06:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <init_car+0xd8>)
 8000f08:	f004 ff5c 	bl	8005dc4 <HAL_TIM_PWM_Start>

	// Set RL, FL, FR and RR motors to initial speed. For example 0 PWM = 0 CCR = 0% Duty Cycle => t_on = 0 µs
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);	// RL Motor
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <init_car+0xd8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2200      	movs	r2, #0
 8000f12:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);	// FL Motor
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <init_car+0xd8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);	// FR Motor
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <init_car+0xd8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);	// RR Motor
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <init_car+0xd8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	20005838 	.word	0x20005838

08000f40 <Mecanum_Control>:

void Mecanum_Control(float vx_target, float vy_target, float w_target) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b095      	sub	sp, #84	@ 0x54
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f4e:	ed87 1a01 	vstr	s2, [r7, #4]

	// Current velocities
	static float vx = 0, vy = 0, wz = 0;

	// Increment current velocities to the targets using fixed steps (prevent rapid changes for motor safety)
	vx = ramp_step(vx_target, vx, g_v_step_mmps);
 8000f52:	4bbd      	ldr	r3, [pc, #756]	@ (8001248 <Mecanum_Control+0x308>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	4bbc      	ldr	r3, [pc, #752]	@ (800124c <Mecanum_Control+0x30c>)
 8000f5a:	ed93 7a00 	vldr	s14, [r3]
 8000f5e:	eeb0 1a47 	vmov.f32	s2, s14
 8000f62:	eef0 0a67 	vmov.f32	s1, s15
 8000f66:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f6a:	f7ff fefc 	bl	8000d66 <ramp_step>
 8000f6e:	eef0 7a40 	vmov.f32	s15, s0
 8000f72:	4bb5      	ldr	r3, [pc, #724]	@ (8001248 <Mecanum_Control+0x308>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
	vy = ramp_step(vy_target, vy, g_v_step_mmps);
 8000f78:	4bb5      	ldr	r3, [pc, #724]	@ (8001250 <Mecanum_Control+0x310>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	4bb3      	ldr	r3, [pc, #716]	@ (800124c <Mecanum_Control+0x30c>)
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	eeb0 1a47 	vmov.f32	s2, s14
 8000f88:	eef0 0a67 	vmov.f32	s1, s15
 8000f8c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f90:	f7ff fee9 	bl	8000d66 <ramp_step>
 8000f94:	eef0 7a40 	vmov.f32	s15, s0
 8000f98:	4bad      	ldr	r3, [pc, #692]	@ (8001250 <Mecanum_Control+0x310>)
 8000f9a:	edc3 7a00 	vstr	s15, [r3]
	wz = ramp_step(w_target,  wz, g_wz_step_radps);
 8000f9e:	4bad      	ldr	r3, [pc, #692]	@ (8001254 <Mecanum_Control+0x314>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	4bac      	ldr	r3, [pc, #688]	@ (8001258 <Mecanum_Control+0x318>)
 8000fa6:	ed93 7a00 	vldr	s14, [r3]
 8000faa:	eeb0 1a47 	vmov.f32	s2, s14
 8000fae:	eef0 0a67 	vmov.f32	s1, s15
 8000fb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fb6:	f7ff fed6 	bl	8000d66 <ramp_step>
 8000fba:	eef0 7a40 	vmov.f32	s15, s0
 8000fbe:	4ba5      	ldr	r3, [pc, #660]	@ (8001254 <Mecanum_Control+0x314>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]


	float V[4];
	V[0] = +vx + vy - (A_SUM * wz);  // RL
 8000fc4:	4ba0      	ldr	r3, [pc, #640]	@ (8001248 <Mecanum_Control+0x308>)
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	4ba1      	ldr	r3, [pc, #644]	@ (8001250 <Mecanum_Control+0x310>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd4:	4b9f      	ldr	r3, [pc, #636]	@ (8001254 <Mecanum_Control+0x314>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 800125c <Mecanum_Control+0x31c>
 8000fde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	V[1] = +vx - vy - (A_SUM * wz);  // FL
 8000fea:	4b97      	ldr	r3, [pc, #604]	@ (8001248 <Mecanum_Control+0x308>)
 8000fec:	ed93 7a00 	vldr	s14, [r3]
 8000ff0:	4b97      	ldr	r3, [pc, #604]	@ (8001250 <Mecanum_Control+0x310>)
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ffa:	4b96      	ldr	r3, [pc, #600]	@ (8001254 <Mecanum_Control+0x314>)
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	eddf 6a96 	vldr	s13, [pc, #600]	@ 800125c <Mecanum_Control+0x31c>
 8001004:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	V[2] = +vx + vy + (A_SUM * wz);  // FR
 8001010:	4b8d      	ldr	r3, [pc, #564]	@ (8001248 <Mecanum_Control+0x308>)
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	4b8e      	ldr	r3, [pc, #568]	@ (8001250 <Mecanum_Control+0x310>)
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001020:	4b8c      	ldr	r3, [pc, #560]	@ (8001254 <Mecanum_Control+0x314>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800125c <Mecanum_Control+0x31c>
 800102a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	V[3] = +vx - vy + (A_SUM * wz);  // RR
 8001036:	4b84      	ldr	r3, [pc, #528]	@ (8001248 <Mecanum_Control+0x308>)
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	4b84      	ldr	r3, [pc, #528]	@ (8001250 <Mecanum_Control+0x310>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001046:	4b83      	ldr	r3, [pc, #524]	@ (8001254 <Mecanum_Control+0x314>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	eddf 6a83 	vldr	s13, [pc, #524]	@ 800125c <Mecanum_Control+0x31c>
 8001050:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// Clamp velocities to the allowed limits
	 for (int i = 0; i < 4; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001060:	e01a      	b.n	8001098 <Mecanum_Control+0x158>
		 V[i] = clamp(V[i], MIN_WHEEL_LINEAR_V_MMPS, MAX_WHEEL_LINEAR_V_MMPS);
 8001062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3350      	adds	r3, #80	@ 0x50
 8001068:	443b      	add	r3, r7
 800106a:	3b1c      	subs	r3, #28
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 8001260 <Mecanum_Control+0x320>
 8001074:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8001264 <Mecanum_Control+0x324>
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	f7ff fe4a 	bl	8000d14 <clamp>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	3350      	adds	r3, #80	@ 0x50
 800108a:	443b      	add	r3, r7
 800108c:	3b1c      	subs	r3, #28
 800108e:	edc3 7a00 	vstr	s15, [r3]
	 for (int i = 0; i < 4; i++) {
 8001092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001094:	3301      	adds	r3, #1
 8001096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800109a:	2b03      	cmp	r3, #3
 800109c:	dde1      	ble.n	8001062 <Mecanum_Control+0x122>
	 }

	 // PWM Conversion and CCR clamping
	 int CCR[4];

	 for (int i = 0; i < 4; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010a2:	e043      	b.n	800112c <Mecanum_Control+0x1ec>
	 {
		 CCR[i] = (int)((fabsf(V[i]) / MAX_WHEEL_LINEAR_V_MMPS) * CCR_MAX);
 80010a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	3350      	adds	r3, #80	@ 0x50
 80010aa:	443b      	add	r3, r7
 80010ac:	3b1c      	subs	r3, #28
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	eef0 7ae7 	vabs.f32	s15, s15
 80010b6:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001260 <Mecanum_Control+0x320>
 80010ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010be:	ee16 0a90 	vmov	r0, s13
 80010c2:	f7ff fb9b 	bl	80007fc <__aeabi_f2d>
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b67      	ldr	r3, [pc, #412]	@ (8001268 <Mecanum_Control+0x328>)
 80010cc:	f7ff f908 	bl	80002e0 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fbe8 	bl	80008ac <__aeabi_d2iz>
 80010dc:	4602      	mov	r2, r0
 80010de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	3350      	adds	r3, #80	@ 0x50
 80010e4:	443b      	add	r3, r7
 80010e6:	f843 2c2c 	str.w	r2, [r3, #-44]
		 CCR[i] = (int)clamp((float)CCR[i], 0.0f, CCR_MAX);
 80010ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	3350      	adds	r3, #80	@ 0x50
 80010f0:	443b      	add	r3, r7
 80010f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 800126c <Mecanum_Control+0x32c>
 8001102:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001270 <Mecanum_Control+0x330>
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	f7ff fe03 	bl	8000d14 <clamp>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
 8001112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001116:	ee17 2a90 	vmov	r2, s15
 800111a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	3350      	adds	r3, #80	@ 0x50
 8001120:	443b      	add	r3, r7
 8001122:	f843 2c2c 	str.w	r2, [r3, #-44]
	 for (int i = 0; i < 4; i++)
 8001126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001128:	3301      	adds	r3, #1
 800112a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800112c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800112e:	2b03      	cmp	r3, #3
 8001130:	ddb8      	ble.n	80010a4 <Mecanum_Control+0x164>
	 }

	setMotorDir(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin,
 8001132:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	2304      	movs	r3, #4
 800113c:	4a4d      	ldr	r2, [pc, #308]	@ (8001274 <Mecanum_Control+0x334>)
 800113e:	2108      	movs	r1, #8
 8001140:	484c      	ldr	r0, [pc, #304]	@ (8001274 <Mecanum_Control+0x334>)
 8001142:	f7ff fe4a 	bl	8000dda <setMotorDir>
				RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, V[0]);

	setMotorDir(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin,
 8001146:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	2302      	movs	r3, #2
 8001150:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <Mecanum_Control+0x334>)
 8001152:	2101      	movs	r1, #1
 8001154:	4847      	ldr	r0, [pc, #284]	@ (8001274 <Mecanum_Control+0x334>)
 8001156:	f7ff fe40 	bl	8000dda <setMotorDir>
	            FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, V[1]);

	setMotorDir(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin,
 800115a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	2320      	movs	r3, #32
 8001164:	4a44      	ldr	r2, [pc, #272]	@ (8001278 <Mecanum_Control+0x338>)
 8001166:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800116a:	4844      	ldr	r0, [pc, #272]	@ (800127c <Mecanum_Control+0x33c>)
 800116c:	f7ff fe35 	bl	8000dda <setMotorDir>
				FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, V[2]);

	setMotorDir(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin,
 8001170:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	2310      	movs	r3, #16
 800117a:	4a3e      	ldr	r2, [pc, #248]	@ (8001274 <Mecanum_Control+0x334>)
 800117c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001180:	483d      	ldr	r0, [pc, #244]	@ (8001278 <Mecanum_Control+0x338>)
 8001182:	f7ff fe2a 	bl	8000dda <setMotorDir>
				RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, V[3]);

	uint32_t TIM_CHANNELS[4] = {
 8001186:	4b3e      	ldr	r3, [pc, #248]	@ (8001280 <Mecanum_Control+0x340>)
 8001188:	f107 0414 	add.w	r4, r7, #20
 800118c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        TIM_CHANNEL_2, // FL
	        TIM_CHANNEL_3, // FR
	        TIM_CHANNEL_4  // RR
	};

	for (int i = 0; i < 4; i++){
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
 8001196:	e04e      	b.n	8001236 <Mecanum_Control+0x2f6>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNELS[i], CCR[i]);
 8001198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	3350      	adds	r3, #80	@ 0x50
 800119e:	443b      	add	r3, r7
 80011a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <Mecanum_Control+0x27c>
 80011a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	3350      	adds	r3, #80	@ 0x50
 80011ae:	443b      	add	r3, r7
 80011b0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80011b4:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <Mecanum_Control+0x344>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ba:	e02f      	b.n	800121c <Mecanum_Control+0x2dc>
 80011bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	3350      	adds	r3, #80	@ 0x50
 80011c2:	443b      	add	r3, r7
 80011c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d10a      	bne.n	80011e2 <Mecanum_Control+0x2a2>
 80011cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	3350      	adds	r3, #80	@ 0x50
 80011d2:	443b      	add	r3, r7
 80011d4:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80011d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <Mecanum_Control+0x344>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	6393      	str	r3, [r2, #56]	@ 0x38
 80011e0:	e01c      	b.n	800121c <Mecanum_Control+0x2dc>
 80011e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	3350      	adds	r3, #80	@ 0x50
 80011e8:	443b      	add	r3, r7
 80011ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d10a      	bne.n	8001208 <Mecanum_Control+0x2c8>
 80011f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	3350      	adds	r3, #80	@ 0x50
 80011f8:	443b      	add	r3, r7
 80011fa:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <Mecanum_Control+0x344>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	460b      	mov	r3, r1
 8001204:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001206:	e009      	b.n	800121c <Mecanum_Control+0x2dc>
 8001208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	3350      	adds	r3, #80	@ 0x50
 800120e:	443b      	add	r3, r7
 8001210:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <Mecanum_Control+0x344>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	6413      	str	r3, [r2, #64]	@ 0x40
        g_ccr_applied[i] = CCR[i];
 800121c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	3350      	adds	r3, #80	@ 0x50
 8001222:	443b      	add	r3, r7
 8001224:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001228:	4917      	ldr	r1, [pc, #92]	@ (8001288 <Mecanum_Control+0x348>)
 800122a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++){
 8001230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001232:	3301      	adds	r3, #1
 8001234:	647b      	str	r3, [r7, #68]	@ 0x44
 8001236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001238:	2b03      	cmp	r3, #3
 800123a:	ddad      	ble.n	8001198 <Mecanum_Control+0x258>
	}
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3754      	adds	r7, #84	@ 0x54
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	2000131c 	.word	0x2000131c
 800124c:	20000000 	.word	0x20000000
 8001250:	20001320 	.word	0x20001320
 8001254:	20001324 	.word	0x20001324
 8001258:	20000004 	.word	0x20000004
 800125c:	43960000 	.word	0x43960000
 8001260:	44250000 	.word	0x44250000
 8001264:	c4250000 	.word	0xc4250000
 8001268:	407f4000 	.word	0x407f4000
 800126c:	43fa0000 	.word	0x43fa0000
 8001270:	00000000 	.word	0x00000000
 8001274:	40020800 	.word	0x40020800
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000
 8001280:	0801ac88 	.word	0x0801ac88
 8001284:	20005838 	.word	0x20005838
 8001288:	2000130c 	.word	0x2000130c

0800128c <RS485_SetRX>:
#include "mySensors.h"
#include <string.h>


static void RS485_SetTX(void) { HAL_GPIO_WritePin(SONAR_DE_RE_GPIO_Port, SONAR_DE_RE_Pin, GPIO_PIN_SET); }
static void RS485_SetRX(void) { HAL_GPIO_WritePin(SONAR_DE_RE_GPIO_Port, SONAR_DE_RE_Pin, GPIO_PIN_RESET); }
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <RS485_SetRX+0x14>)
 8001296:	f003 fe47 	bl	8004f28 <HAL_GPIO_WritePin>
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020800 	.word	0x40020800

080012a4 <SONAR_Init>:
	uint16_t sum = 0;
	for (uint8_t i = 0; i < len; i++) sum += data[i];
	return (uint8_t)(sum & 0xFF);
}

void SONAR_Init(SONAR_HandleTypeDef *hsonar, UART_HandleTypeDef *huart, uint8_t addr) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	71fb      	strb	r3, [r7, #7]
	hsonar->huart = huart;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
	hsonar->addr = addr;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	711a      	strb	r2, [r3, #4]
	memset(hsonar->rxBuf, 0, SONAR_RX_BUF_SIZE);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3305      	adds	r3, #5
 80012c2:	2210      	movs	r2, #16
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f018 fdb8 	bl	8019e3c <memset>
	RS485_SetRX();
 80012cc:	f7ff ffde 	bl	800128c <RS485_SetRX>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80012e4:	f008 f9a2 	bl	800962c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80012e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001454 <pvPortMallocMicroROS+0x17c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80012f0:	f000 f986 	bl	8001600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80012f4:	4b58      	ldr	r3, [pc, #352]	@ (8001458 <pvPortMallocMicroROS+0x180>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 8090 	bne.w	8001422 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01e      	beq.n	8001346 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001308:	2208      	movs	r2, #8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	2b00      	cmp	r3, #0
 8001318:	d015      	beq.n	8001346 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f023 0307 	bic.w	r3, r3, #7
 8001320:	3308      	adds	r3, #8
 8001322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800132e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001332:	f383 8811 	msr	BASEPRI, r3
 8001336:	f3bf 8f6f 	isb	sy
 800133a:	f3bf 8f4f 	dsb	sy
 800133e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	e7fd      	b.n	8001342 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d06a      	beq.n	8001422 <pvPortMallocMicroROS+0x14a>
 800134c:	4b43      	ldr	r3, [pc, #268]	@ (800145c <pvPortMallocMicroROS+0x184>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	d865      	bhi.n	8001422 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001356:	4b42      	ldr	r3, [pc, #264]	@ (8001460 <pvPortMallocMicroROS+0x188>)
 8001358:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800135a:	4b41      	ldr	r3, [pc, #260]	@ (8001460 <pvPortMallocMicroROS+0x188>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001360:	e004      	b.n	800136c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	d903      	bls.n	800137e <pvPortMallocMicroROS+0xa6>
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f1      	bne.n	8001362 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800137e:	4b35      	ldr	r3, [pc, #212]	@ (8001454 <pvPortMallocMicroROS+0x17c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001384:	429a      	cmp	r2, r3
 8001386:	d04c      	beq.n	8001422 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2208      	movs	r2, #8
 800138e:	4413      	add	r3, r2
 8001390:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	1ad2      	subs	r2, r2, r3
 80013a2:	2308      	movs	r3, #8
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d920      	bls.n	80013ec <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80013aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00b      	beq.n	80013d4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80013bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013c0:	f383 8811 	msr	BASEPRI, r3
 80013c4:	f3bf 8f6f 	isb	sy
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	613b      	str	r3, [r7, #16]
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1ad2      	subs	r2, r2, r3
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80013e6:	69b8      	ldr	r0, [r7, #24]
 80013e8:	f000 f96c 	bl	80016c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <pvPortMallocMicroROS+0x184>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	4a19      	ldr	r2, [pc, #100]	@ (800145c <pvPortMallocMicroROS+0x184>)
 80013f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <pvPortMallocMicroROS+0x184>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <pvPortMallocMicroROS+0x18c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d203      	bcs.n	800140e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <pvPortMallocMicroROS+0x184>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <pvPortMallocMicroROS+0x18c>)
 800140c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <pvPortMallocMicroROS+0x180>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	431a      	orrs	r2, r3
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001422:	f008 f911 	bl	8009648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001434:	f383 8811 	msr	BASEPRI, r3
 8001438:	f3bf 8f6f 	isb	sy
 800143c:	f3bf 8f4f 	dsb	sy
 8001440:	60fb      	str	r3, [r7, #12]
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001448:	69fb      	ldr	r3, [r7, #28]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20004f30 	.word	0x20004f30
 8001458:	20004f3c 	.word	0x20004f3c
 800145c:	20004f34 	.word	0x20004f34
 8001460:	20004f28 	.word	0x20004f28
 8001464:	20004f38 	.word	0x20004f38

08001468 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04a      	beq.n	8001510 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800147a:	2308      	movs	r3, #8
 800147c:	425b      	negs	r3, r3
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <vPortFreeMicroROS+0xb0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10b      	bne.n	80014ae <vPortFreeMicroROS+0x46>
	__asm volatile
 8001496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800149a:	f383 8811 	msr	BASEPRI, r3
 800149e:	f3bf 8f6f 	isb	sy
 80014a2:	f3bf 8f4f 	dsb	sy
 80014a6:	60fb      	str	r3, [r7, #12]
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	e7fd      	b.n	80014aa <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <vPortFreeMicroROS+0x66>
	__asm volatile
 80014b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ba:	f383 8811 	msr	BASEPRI, r3
 80014be:	f3bf 8f6f 	isb	sy
 80014c2:	f3bf 8f4f 	dsb	sy
 80014c6:	60bb      	str	r3, [r7, #8]
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	e7fd      	b.n	80014ca <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <vPortFreeMicroROS+0xb0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d019      	beq.n	8001510 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d115      	bne.n	8001510 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <vPortFreeMicroROS+0xb0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80014f4:	f008 f89a 	bl	800962c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <vPortFreeMicroROS+0xb4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4413      	add	r3, r2
 8001502:	4a06      	ldr	r2, [pc, #24]	@ (800151c <vPortFreeMicroROS+0xb4>)
 8001504:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001506:	6938      	ldr	r0, [r7, #16]
 8001508:	f000 f8dc 	bl	80016c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800150c:	f008 f89c 	bl	8009648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20004f3c 	.word	0x20004f3c
 800151c:	20004f34 	.word	0x20004f34

08001520 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800152c:	2308      	movs	r3, #8
 800152e:	425b      	negs	r3, r3
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4413      	add	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <getBlockSize+0x38>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	43db      	mvns	r3, r3
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]

	return count;
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20004f3c 	.word	0x20004f3c

0800155c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001566:	f008 f861 	bl	800962c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f7ff feb4 	bl	80012d8 <pvPortMallocMicroROS>
 8001570:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d017      	beq.n	80015a8 <pvPortReallocMicroROS+0x4c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d014      	beq.n	80015a8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffce 	bl	8001520 <getBlockSize>
 8001584:	4603      	mov	r3, r0
 8001586:	2208      	movs	r2, #8
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d201      	bcs.n	8001598 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f018 fd28 	bl	8019ff2 <memcpy>

		vPortFreeMicroROS(pv);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff60 	bl	8001468 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80015a8:	f008 f84e 	bl	8009648 <xTaskResumeAll>

	return newmem;
 80015ac:	68bb      	ldr	r3, [r7, #8]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80015c0:	f008 f834 	bl	800962c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff fe82 	bl	80012d8 <pvPortMallocMicroROS>
 80015d4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80015da:	e004      	b.n	80015e6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	613a      	str	r2, [r7, #16]
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	617a      	str	r2, [r7, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f5      	bne.n	80015dc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80015f0:	f008 f82a 	bl	8009648 <xTaskResumeAll>
  	return mem;
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001606:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800160a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800160c:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <prvHeapInit+0xac>)
 800160e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00c      	beq.n	8001634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3307      	adds	r3, #7
 800161e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f023 0307 	bic.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <prvHeapInit+0xac>)
 8001630:	4413      	add	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001638:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <prvHeapInit+0xb0>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <prvHeapInit+0xb0>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800164c:	2208      	movs	r2, #8
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f023 0307 	bic.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a15      	ldr	r2, [pc, #84]	@ (80016b4 <prvHeapInit+0xb4>)
 8001660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <prvHeapInit+0xb4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <prvHeapInit+0xb4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	1ad2      	subs	r2, r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <prvHeapInit+0xb4>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <prvHeapInit+0xb8>)
 800168e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <prvHeapInit+0xbc>)
 8001696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <prvHeapInit+0xc0>)
 800169a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800169e:	601a      	str	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20001328 	.word	0x20001328
 80016b0:	20004f28 	.word	0x20004f28
 80016b4:	20004f30 	.word	0x20004f30
 80016b8:	20004f38 	.word	0x20004f38
 80016bc:	20004f34 	.word	0x20004f34
 80016c0:	20004f3c 	.word	0x20004f3c

080016c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80016cc:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <prvInsertBlockIntoFreeList+0xac>)
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e002      	b.n	80016d8 <prvInsertBlockIntoFreeList+0x14>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d8f7      	bhi.n	80016d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4413      	add	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d108      	bne.n	8001706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	441a      	add	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	441a      	add	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d118      	bne.n	800174c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <prvInsertBlockIntoFreeList+0xb0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d00d      	beq.n	8001742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	441a      	add	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e008      	b.n	8001754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <prvInsertBlockIntoFreeList+0xb0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e003      	b.n	8001754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d002      	beq.n	8001762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20004f28 	.word	0x20004f28
 8001774:	20004f30 	.word	0x20004f30

08001778 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001786:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800178c:	4904      	ldr	r1, [pc, #16]	@ (80017a0 <cubemx_transport_open+0x28>)
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f005 fc28 	bl	8006fe4 <HAL_UART_Receive_DMA>
    return true;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20004f40 	.word	0x20004f40

080017a4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80017b2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f005 fc3a 	bl	800702e <HAL_UART_DMAStop>
    return true;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80017d8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d11c      	bne.n	8001820 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f005 fb7c 	bl	8006eec <HAL_UART_Transmit_DMA>
 80017f4:	4603      	mov	r3, r0
 80017f6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80017f8:	e002      	b.n	8001800 <cubemx_transport_write+0x3c>
            osDelay(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f006 fed4 	bl	80085a8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001800:	7cfb      	ldrb	r3, [r7, #19]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <cubemx_transport_write+0x4e>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	d1f3      	bne.n	80017fa <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001812:	7cfb      	ldrb	r3, [r7, #19]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <cubemx_transport_write+0x58>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	e002      	b.n	8001822 <cubemx_transport_write+0x5e>
 800181c:	2300      	movs	r3, #0
 800181e:	e000      	b.n	8001822 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001820:	2300      	movs	r3, #0
    }
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001840:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001846:	b672      	cpsid	i
}
 8001848:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001856:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <cubemx_transport_read+0x9c>)
 8001858:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800185a:	b662      	cpsie	i
}
 800185c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001864:	2001      	movs	r0, #1
 8001866:	f006 fe9f 	bl	80085a8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <cubemx_transport_read+0xa0>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <cubemx_transport_read+0x9c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d103      	bne.n	800187e <cubemx_transport_read+0x52>
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbe3      	blt.n	8001846 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001882:	e011      	b.n	80018a8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <cubemx_transport_read+0xa0>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	440b      	add	r3, r1
 800188e:	4910      	ldr	r1, [pc, #64]	@ (80018d0 <cubemx_transport_read+0xa4>)
 8001890:	5c8a      	ldrb	r2, [r1, r2]
 8001892:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <cubemx_transport_read+0xa0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800189e:	4a0b      	ldr	r2, [pc, #44]	@ (80018cc <cubemx_transport_read+0xa0>)
 80018a0:	6013      	str	r3, [r2, #0]
        wrote++;
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <cubemx_transport_read+0xa0>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <cubemx_transport_read+0x9c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d003      	beq.n	80018bc <cubemx_transport_read+0x90>
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d3e3      	bcc.n	8001884 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80018bc:	69bb      	ldr	r3, [r7, #24]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20005744 	.word	0x20005744
 80018cc:	20005740 	.word	0x20005740
 80018d0:	20004f40 	.word	0x20004f40

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f001 fefe 	bl	80036d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f874 	bl	80019c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f000 fc22 	bl	8002128 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f000 fbd2 	bl	800208c <MX_DMA_Init>
  MX_TIM1_Init();
 80018e8:	f000 f958 	bl	8001b9c <MX_TIM1_Init>
  MX_TIM3_Init();
 80018ec:	f000 fa44 	bl	8001d78 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018f0:	f000 fa96 	bl	8001e20 <MX_TIM4_Init>
  MX_TIM8_Init();
 80018f4:	f000 fb1e 	bl	8001f34 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80018f8:	f000 fb9e 	bl	8002038 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80018fc:	f000 f9a6 	bl	8001c4c <MX_TIM2_Init>
  MX_UART5_Init();
 8001900:	f000 fb70 	bl	8001fe4 <MX_UART5_Init>
  MX_ADC1_Init();
 8001904:	f000 f8ce 	bl	8001aa4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001908:	f000 fade 	bl	8001ec8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start_IT(&htim6);
 800190c:	481f      	ldr	r0, [pc, #124]	@ (800198c <main+0xb8>)
 800190e:	f004 f98f 	bl	8005c30 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001912:	213c      	movs	r1, #60	@ 0x3c
 8001914:	481e      	ldr	r0, [pc, #120]	@ (8001990 <main+0xbc>)
 8001916:	f004 fbc3 	bl	80060a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800191a:	213c      	movs	r1, #60	@ 0x3c
 800191c:	481d      	ldr	r0, [pc, #116]	@ (8001994 <main+0xc0>)
 800191e:	f004 fbbf 	bl	80060a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001922:	213c      	movs	r1, #60	@ 0x3c
 8001924:	481c      	ldr	r0, [pc, #112]	@ (8001998 <main+0xc4>)
 8001926:	f004 fbbb 	bl	80060a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800192a:	213c      	movs	r1, #60	@ 0x3c
 800192c:	481b      	ldr	r0, [pc, #108]	@ (800199c <main+0xc8>)
 800192e:	f004 fbb7 	bl	80060a0 <HAL_TIM_Encoder_Start>

	SONAR_Init(&sonar1, &huart5, 0x11);
 8001932:	2211      	movs	r2, #17
 8001934:	491a      	ldr	r1, [pc, #104]	@ (80019a0 <main+0xcc>)
 8001936:	481b      	ldr	r0, [pc, #108]	@ (80019a4 <main+0xd0>)
 8001938:	f7ff fcb4 	bl	80012a4 <SONAR_Init>
	SONAR_Init(&sonar2, &huart5, 0x12);
 800193c:	2212      	movs	r2, #18
 800193e:	4918      	ldr	r1, [pc, #96]	@ (80019a0 <main+0xcc>)
 8001940:	4819      	ldr	r0, [pc, #100]	@ (80019a8 <main+0xd4>)
 8001942:	f7ff fcaf 	bl	80012a4 <SONAR_Init>
	SONAR_Init(&sonar3, &huart5, 0x13);
 8001946:	2213      	movs	r2, #19
 8001948:	4915      	ldr	r1, [pc, #84]	@ (80019a0 <main+0xcc>)
 800194a:	4818      	ldr	r0, [pc, #96]	@ (80019ac <main+0xd8>)
 800194c:	f7ff fcaa 	bl	80012a4 <SONAR_Init>
	SONAR_Init(&sonar4, &huart5, 0x14);
 8001950:	2214      	movs	r2, #20
 8001952:	4913      	ldr	r1, [pc, #76]	@ (80019a0 <main+0xcc>)
 8001954:	4816      	ldr	r0, [pc, #88]	@ (80019b0 <main+0xdc>)
 8001956:	f7ff fca5 	bl	80012a4 <SONAR_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, NUM_MOTORS);
 800195a:	2204      	movs	r2, #4
 800195c:	4915      	ldr	r1, [pc, #84]	@ (80019b4 <main+0xe0>)
 800195e:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <main+0xe4>)
 8001960:	f002 f874 	bl	8003a4c <HAL_ADC_Start_DMA>

	HAL_Delay(3000);
 8001964:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001968:	f001 fef8 	bl	800375c <HAL_Delay>

	init_car();
 800196c:	f7ff fa7a 	bl	8000e64 <init_car>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001970:	f006 fd3e 	bl	80083f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001974:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <main+0xe8>)
 8001976:	2100      	movs	r1, #0
 8001978:	4811      	ldr	r0, [pc, #68]	@ (80019c0 <main+0xec>)
 800197a:	f006 fd83 	bl	8008484 <osThreadNew>
 800197e:	4603      	mov	r3, r0
 8001980:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <main+0xf0>)
 8001982:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001984:	f006 fd58 	bl	8008438 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <main+0xb4>
 800198c:	20005910 	.word	0x20005910
 8001990:	200057f0 	.word	0x200057f0
 8001994:	20005880 	.word	0x20005880
 8001998:	200058c8 	.word	0x200058c8
 800199c:	20005958 	.word	0x20005958
 80019a0:	200059a0 	.word	0x200059a0
 80019a4:	20005d04 	.word	0x20005d04
 80019a8:	20005d1c 	.word	0x20005d1c
 80019ac:	20005d34 	.word	0x20005d34
 80019b0:	20005d4c 	.word	0x20005d4c
 80019b4:	20005d64 	.word	0x20005d64
 80019b8:	20005748 	.word	0x20005748
 80019bc:	0801ad28 	.word	0x0801ad28
 80019c0:	08002409 	.word	0x08002409
 80019c4:	20005bb0 	.word	0x20005bb0

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b094      	sub	sp, #80	@ 0x50
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	2234      	movs	r2, #52	@ 0x34
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f018 fa30 	bl	8019e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <SystemClock_Config+0xd4>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	4a29      	ldr	r2, [pc, #164]	@ (8001a9c <SystemClock_Config+0xd4>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fc:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <SystemClock_Config+0xd4>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <SystemClock_Config+0xd8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <SystemClock_Config+0xd8>)
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <SystemClock_Config+0xd8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a30:	2310      	movs	r3, #16
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a46:	2304      	movs	r3, #4
 8001a48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fdfc 	bl	8005654 <HAL_RCC_OscConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a62:	f000 fe47 	bl	80026f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	230f      	movs	r3, #15
 8001a68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	2102      	movs	r1, #2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fa6a 	bl	8004f5c <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001a8e:	f000 fe31 	bl	80026f4 <Error_Handler>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3750      	adds	r7, #80	@ 0x50
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ab8:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <MX_ADC1_Init+0xf0>)
 8001aba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001abc:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001abe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ac2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001aca:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ade:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8001b98 <MX_ADC1_Init+0xf4>)
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aea:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001af2:	2204      	movs	r2, #4
 8001af4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b04:	4822      	ldr	r0, [pc, #136]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b06:	f001 fe4d 	bl	80037a4 <HAL_ADC_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b10:	f000 fdf0 	bl	80026f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b14:	2304      	movs	r3, #4
 8001b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	4619      	mov	r1, r3
 8001b24:	481a      	ldr	r0, [pc, #104]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b26:	f002 f8cd 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b30:	f000 fde0 	bl	80026f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b34:	2305      	movs	r3, #5
 8001b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4813      	ldr	r0, [pc, #76]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b42:	f002 f8bf 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b4c:	f000 fdd2 	bl	80026f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001b50:	2308      	movs	r3, #8
 8001b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b54:	2303      	movs	r3, #3
 8001b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b5e:	f002 f8b1 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b68:	f000 fdc4 	bl	80026f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001b6c:	2309      	movs	r3, #9
 8001b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b70:	2304      	movs	r3, #4
 8001b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b7a:	f002 f8a3 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b84:	f000 fdb6 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20005748 	.word	0x20005748
 8001b94:	40012000 	.word	0x40012000
 8001b98:	0f000001 	.word	0x0f000001

08001b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	@ 0x30
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2224      	movs	r2, #36	@ 0x24
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f018 f946 	bl	8019e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bba:	4a23      	ldr	r2, [pc, #140]	@ (8001c48 <MX_TIM1_Init+0xac>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001be4:	2303      	movs	r3, #3
 8001be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001c10:	f004 f9a0 	bl	8005f54 <HAL_TIM_Encoder_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c1a:	f000 fd6b 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001c2c:	f005 f87e 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c36:	f000 fd5d 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	@ 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200057f0 	.word	0x200057f0
 8001c48:	40010000 	.word	0x40010000

08001c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	@ 0x38
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	615a      	str	r2, [r3, #20]
 8001c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001c7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c84:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8001c90:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001c92:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c9e:	4b35      	ldr	r3, [pc, #212]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca4:	4833      	ldr	r0, [pc, #204]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001ca6:	f003 ff73 	bl	8005b90 <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cb0:	f000 fd20 	bl	80026f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482c      	ldr	r0, [pc, #176]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001cc2:	f004 fc2d 	bl	8006520 <HAL_TIM_ConfigClockSource>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ccc:	f000 fd12 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cd0:	4828      	ldr	r0, [pc, #160]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001cd2:	f004 f81d 	bl	8005d10 <HAL_TIM_PWM_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cdc:	f000 fd0a 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	4619      	mov	r1, r3
 8001cee:	4821      	ldr	r0, [pc, #132]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001cf0:	f005 f81c 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cfa:	f000 fcfb 	bl	80026f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfe:	2360      	movs	r3, #96	@ 0x60
 8001d00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2200      	movs	r2, #0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4817      	ldr	r0, [pc, #92]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001d16:	f004 fb41 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d20:	f000 fce8 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2204      	movs	r2, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4812      	ldr	r0, [pc, #72]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001d2c:	f004 fb36 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d36:	f000 fcdd 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001d42:	f004 fb2b 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001d4c:	f000 fcd2 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	220c      	movs	r2, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001d58:	f004 fb20 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001d62:	f000 fcc7 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d66:	4803      	ldr	r0, [pc, #12]	@ (8001d74 <MX_TIM2_Init+0x128>)
 8001d68:	f001 f872 	bl	8002e50 <HAL_TIM_MspPostInit>

}
 8001d6c:	bf00      	nop
 8001d6e:	3738      	adds	r7, #56	@ 0x38
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20005838 	.word	0x20005838

08001d78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	@ 0x30
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2224      	movs	r2, #36	@ 0x24
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f018 f858 	bl	8019e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001d96:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <MX_TIM3_Init+0xa4>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001da8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001de6:	f004 f8b5 	bl	8005f54 <HAL_TIM_Encoder_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001df0:	f000 fc80 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_TIM3_Init+0xa0>)
 8001e02:	f004 ff93 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e0c:	f000 fc72 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3730      	adds	r7, #48	@ 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20005880 	.word	0x20005880
 8001e1c:	40000400 	.word	0x40000400

08001e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2224      	movs	r2, #36	@ 0x24
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f018 f804 	bl	8019e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001e3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <MX_TIM4_Init+0xa4>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001e50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e62:	2303      	movs	r3, #3
 8001e64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001e8e:	f004 f861 	bl	8005f54 <HAL_TIM_Encoder_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001e98:	f000 fc2c 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_TIM4_Init+0xa0>)
 8001eaa:	f004 ff3f 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001eb4:	f000 fc1e 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	3730      	adds	r7, #48	@ 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200058c8 	.word	0x200058c8
 8001ec4:	40000800 	.word	0x40000800

08001ec8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <MX_TIM6_Init+0x64>)
 8001ed8:	4a15      	ldr	r2, [pc, #84]	@ (8001f30 <MX_TIM6_Init+0x68>)
 8001eda:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <MX_TIM6_Init+0x64>)
 8001ede:	2253      	movs	r2, #83	@ 0x53
 8001ee0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <MX_TIM6_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001ee8:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <MX_TIM6_Init+0x64>)
 8001eea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <MX_TIM6_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ef6:	480d      	ldr	r0, [pc, #52]	@ (8001f2c <MX_TIM6_Init+0x64>)
 8001ef8:	f003 fe4a 	bl	8005b90 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f02:	f000 fbf7 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <MX_TIM6_Init+0x64>)
 8001f14:	f004 ff0a 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f1e:	f000 fbe9 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20005910 	.word	0x20005910
 8001f30:	40001000 	.word	0x40001000

08001f34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	@ 0x30
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f017 ff7a 	bl	8019e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f52:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <MX_TIM8_Init+0xac>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f56:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f68:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f84:	2301      	movs	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f94:	2301      	movs	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001fa8:	f003 ffd4 	bl	8005f54 <HAL_TIM_Encoder_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001fb2:	f000 fb9f 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_TIM8_Init+0xa8>)
 8001fc4:	f004 feb2 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001fce:	f000 fb91 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3730      	adds	r7, #48	@ 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20005958 	.word	0x20005958
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_UART5_Init+0x4c>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <MX_UART5_Init+0x50>)
 8001fec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <MX_UART5_Init+0x4c>)
 8001ff0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001ff4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <MX_UART5_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <MX_UART5_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <MX_UART5_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <MX_UART5_Init+0x4c>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <MX_UART5_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <MX_UART5_Init+0x4c>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_UART5_Init+0x4c>)
 800201c:	f004 ff16 	bl	8006e4c <HAL_UART_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002026:	f000 fb65 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200059a0 	.word	0x200059a0
 8002034:	40005000 	.word	0x40005000

08002038 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800203c:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800203e:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <MX_USART2_UART_Init+0x50>)
 8002040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002044:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	@ (8002084 <MX_USART2_UART_Init+0x4c>)
 8002070:	f004 feec 	bl	8006e4c <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800207a:	f000 fb3b 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200059e8 	.word	0x200059e8
 8002088:	40004400 	.word	0x40004400

0800208c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <MX_DMA_Init+0x98>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <MX_DMA_Init+0x98>)
 800209c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <MX_DMA_Init+0x98>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <MX_DMA_Init+0x98>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002124 <MX_DMA_Init+0x98>)
 80020b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <MX_DMA_Init+0x98>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	200b      	movs	r0, #11
 80020d0:	f002 f96a 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020d4:	200b      	movs	r0, #11
 80020d6:	f002 f983 	bl	80043e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2105      	movs	r1, #5
 80020de:	2010      	movs	r0, #16
 80020e0:	f002 f962 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80020e4:	2010      	movs	r0, #16
 80020e6:	f002 f97b 	bl	80043e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2105      	movs	r1, #5
 80020ee:	2011      	movs	r0, #17
 80020f0:	f002 f95a 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80020f4:	2011      	movs	r0, #17
 80020f6:	f002 f973 	bl	80043e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2105      	movs	r1, #5
 80020fe:	202f      	movs	r0, #47	@ 0x2f
 8002100:	f002 f952 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002104:	202f      	movs	r0, #47	@ 0x2f
 8002106:	f002 f96b 	bl	80043e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2105      	movs	r1, #5
 800210e:	2038      	movs	r0, #56	@ 0x38
 8002110:	f002 f94a 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002114:	2038      	movs	r0, #56	@ 0x38
 8002116:	f002 f963 	bl	80043e0 <HAL_NVIC_EnableIRQ>

}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800

08002128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b3f      	ldr	r3, [pc, #252]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a3e      	ldr	r2, [pc, #248]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b3c      	ldr	r3, [pc, #240]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a37      	ldr	r2, [pc, #220]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <MX_GPIO_Init+0x118>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <MX_GPIO_Init+0x118>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a30      	ldr	r2, [pc, #192]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b2a      	ldr	r3, [pc, #168]	@ (8002240 <MX_GPIO_Init+0x118>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a29      	ldr	r2, [pc, #164]	@ (8002240 <MX_GPIO_Init+0x118>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <MX_GPIO_Init+0x118>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 80021ae:	2200      	movs	r2, #0
 80021b0:	f640 413f 	movw	r1, #3135	@ 0xc3f
 80021b4:	4823      	ldr	r0, [pc, #140]	@ (8002244 <MX_GPIO_Init+0x11c>)
 80021b6:	f002 feb7 	bl	8004f28 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RR_INA_GPO_Pin|FR_INB_GPO_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	f242 0120 	movw	r1, #8224	@ 0x2020
 80021c0:	4821      	ldr	r0, [pc, #132]	@ (8002248 <MX_GPIO_Init+0x120>)
 80021c2:	f002 feb1 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80021cc:	481d      	ldr	r0, [pc, #116]	@ (8002244 <MX_GPIO_Init+0x11c>)
 80021ce:	f002 feab 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021d8:	481c      	ldr	r0, [pc, #112]	@ (800224c <MX_GPIO_Init+0x124>)
 80021da:	f002 fea5 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FL_INA_GPO_Pin FL_INB_GPO_Pin RL_INB_GPO_Pin RL_INA_GPO_Pin
                           RR_INB_GPO_Pin Ultrasonic_DE_RE_Pin RR_VDD_GPO_Pin FR_VDD_GPO_Pin
                           RL_VDD_GPO_Pin FL_VDD_GPO_Pin */
  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 80021de:	f640 733f 	movw	r3, #3903	@ 0xf3f
 80021e2:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin
                          |RL_VDD_GPO_Pin|FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e4:	2301      	movs	r3, #1
 80021e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	4813      	ldr	r0, [pc, #76]	@ (8002244 <MX_GPIO_Init+0x11c>)
 80021f8:	f002 fd02 	bl	8004c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_INA_GPO_Pin FR_INB_GPO_Pin */
  GPIO_InitStruct.Pin = RR_INA_GPO_Pin|FR_INB_GPO_Pin;
 80021fc:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <MX_GPIO_Init+0x120>)
 8002216:	f002 fcf3 	bl	8004c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : FR_INA_GPO_Pin */
  GPIO_InitStruct.Pin = FR_INA_GPO_Pin;
 800221a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_INA_GPO_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4806      	ldr	r0, [pc, #24]	@ (800224c <MX_GPIO_Init+0x124>)
 8002234:	f002 fce4 	bl	8004c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002238:	bf00      	nop
 800223a:	3728      	adds	r7, #40	@ 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	40020800 	.word	0x40020800
 8002248:	40020400 	.word	0x40020400
 800224c:	40020000 	.word	0x40020000

08002250 <init_int_multiarray_4>:
  m->layout.data_offset = 0;
  m->data.data = backing; m->data.size = 4; m->data.capacity = 4;
}
*/
static void init_int_multiarray_4(std_msgs__msg__Int32MultiArray* m, int32_t* backing)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  std_msgs__msg__Int32MultiArray__init(m);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f00a fd26 	bl	800ccac <std_msgs__msg__Int32MultiArray__init>
  m->layout.dim.data = NULL; m->layout.dim.size = 0; m->layout.dim.capacity = 0;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  m->layout.data_offset = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
  m->data.data = backing; m->data.size = 4; m->data.capacity = 4;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2204      	movs	r2, #4
 8002282:	615a      	str	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <init_float_multiarray_fixed>:

static void init_float_multiarray_fixed(std_msgs__msg__Float32MultiArray* m, float* backing, size_t n)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  std_msgs__msg__Float32MultiArray__init(m);
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f00a fcd8 	bl	800cc54 <std_msgs__msg__Float32MultiArray__init>
  m->layout.dim.data = NULL; m->layout.dim.size = 0; m->layout.dim.capacity = 0;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  m->layout.data_offset = 0;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
  m->data.data = backing; m->data.size = n; m->data.capacity = n;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	611a      	str	r2, [r3, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	615a      	str	r2, [r3, #20]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <wheel_cmd_cb>:
}
*/

// Commands: [vx_mmps, vy_mmps, wz_radps]
static void wheel_cmd_cb(const void * msgin)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Float32MultiArray *in =
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	613b      	str	r3, [r7, #16]
      (const std_msgs__msg__Float32MultiArray *)msgin;

  size_t n = (in->data.size < 3) ? in->data.size : 3;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	bf28      	it	cs
 80022ec:	2303      	movcs	r3, #3
 80022ee:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < 3; ++i) {
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e014      	b.n	8002320 <wheel_cmd_cb+0x48>
    last_cmd[i] = (i < n) ? in->data.data[i] : 0.0f;
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d206      	bcs.n	800230c <wheel_cmd_cb+0x34>
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e001      	b.n	8002310 <wheel_cmd_cb+0x38>
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	4908      	ldr	r1, [pc, #32]	@ (8002334 <wheel_cmd_cb+0x5c>)
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	0092      	lsls	r2, r2, #2
 8002316:	440a      	add	r2, r1
 8002318:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 3; ++i) {
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d9e7      	bls.n	80022f6 <wheel_cmd_cb+0x1e>
  }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	20005c78 	.word	0x20005c78

08002338 <cfg_cb>:

// Ramp config: [v_step_mmps, wz_step_radps]
static void cfg_cb(const void * msgin)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Float32MultiArray *m =
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	617b      	str	r3, [r7, #20]
      (const std_msgs__msg__Float32MultiArray *)msgin;

  float vstep  = (m->data.size >= 1) ? m->data.data[0] : g_v_step_mmps;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <cfg_cb+0x1c>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e001      	b.n	8002358 <cfg_cb+0x20>
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <cfg_cb+0x4c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	613b      	str	r3, [r7, #16]
  float wzstep = (m->data.size >= 2) ? m->data.data[1] : g_wz_step_radps;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d903      	bls.n	800236a <cfg_cb+0x32>
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	e001      	b.n	800236e <cfg_cb+0x36>
 800236a:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <cfg_cb+0x50>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]
  ctrlparams_set_steps(vstep, wzstep);
 8002370:	edd7 0a03 	vldr	s1, [r7, #12]
 8002374:	ed97 0a04 	vldr	s0, [r7, #16]
 8002378:	f7fe fca6 	bl	8000cc8 <ctrlparams_set_steps>
}
 800237c:	bf00      	nop
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000000 	.word	0x20000000
 8002388:	20000004 	.word	0x20000004

0800238c <timer_cb>:

// in timer
static void timer_cb(rcl_timer_t * t, int64_t)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	e9c7 2300 	strd	r2, r3, [r7]
  (void)t;
  Mecanum_Control(last_cmd[0], last_cmd[1], last_cmd[2]);
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <timer_cb+0x64>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <timer_cb+0x64>)
 80023a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <timer_cb+0x64>)
 80023a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80023aa:	eeb0 1a66 	vmov.f32	s2, s13
 80023ae:	eef0 0a47 	vmov.f32	s1, s14
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	f7fe fdc3 	bl	8000f40 <Mecanum_Control>

  for (int i = 0; i < 4; ++i) ccr_data[i] = g_ccr_applied[i];
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e00a      	b.n	80023d6 <timer_cb+0x4a>
 80023c0:	4a0c      	ldr	r2, [pc, #48]	@ (80023f4 <timer_cb+0x68>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023c8:	490b      	ldr	r1, [pc, #44]	@ (80023f8 <timer_cb+0x6c>)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	ddf1      	ble.n	80023c0 <timer_cb+0x34>
   (void)rcl_publish(&pub_ccr, &msg_ccr, NULL);
 80023dc:	2200      	movs	r2, #0
 80023de:	4907      	ldr	r1, [pc, #28]	@ (80023fc <timer_cb+0x70>)
 80023e0:	4807      	ldr	r0, [pc, #28]	@ (8002400 <timer_cb+0x74>)
 80023e2:	f008 fe77 	bl	800b0d4 <rcl_publish>

  // if you publish encoders here, keep it
  // read_encoders(enc_data);
  // (void)rcl_publish(&pub_encoders, &msg_enc, NULL);
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20005c78 	.word	0x20005c78
 80023f4:	2000130c 	.word	0x2000130c
 80023f8:	20005cc4 	.word	0x20005cc4
 80023fc:	20005ca8 	.word	0x20005ca8
 8002400:	20005ca4 	.word	0x20005ca4
 8002404:	00000000 	.word	0x00000000

08002408 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b0a0      	sub	sp, #128	@ 0x80
 800240c:	af02      	add	r7, sp, #8
 800240e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	/* -------- transport -------- */
	  rmw_uros_set_custom_transport(
 8002410:	4b53      	ldr	r3, [pc, #332]	@ (8002560 <StartDefaultTask+0x158>)
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <StartDefaultTask+0x15c>)
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4b53      	ldr	r3, [pc, #332]	@ (8002568 <StartDefaultTask+0x160>)
 800241a:	4a54      	ldr	r2, [pc, #336]	@ (800256c <StartDefaultTask+0x164>)
 800241c:	4954      	ldr	r1, [pc, #336]	@ (8002570 <StartDefaultTask+0x168>)
 800241e:	2001      	movs	r0, #1
 8002420:	f009 fe82 	bl	800c128 <rmw_uros_set_custom_transport>

	   In desktop ROS you never do this—DDS handles transport. micro-ROS needs a tiny XRCE transport to reach the Agent.
	   */

	  /* -------- allocators -------- */
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002424:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002428:	4618      	mov	r0, r3
 800242a:	f009 fda3 	bl	800bf74 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 800242e:	4b51      	ldr	r3, [pc, #324]	@ (8002574 <StartDefaultTask+0x16c>)
 8002430:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 8002432:	4b51      	ldr	r3, [pc, #324]	@ (8002578 <StartDefaultTask+0x170>)
 8002434:	663b      	str	r3, [r7, #96]	@ 0x60
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 8002436:	4b51      	ldr	r3, [pc, #324]	@ (800257c <StartDefaultTask+0x174>)
 8002438:	667b      	str	r3, [r7, #100]	@ 0x64
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 800243a:	4b51      	ldr	r3, [pc, #324]	@ (8002580 <StartDefaultTask+0x178>)
 800243c:	66bb      	str	r3, [r7, #104]	@ 0x68
	  rcutils_ret_t rc = rcutils_set_default_allocator(&freeRTOS_allocator);
 800243e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002442:	4618      	mov	r0, r3
 8002444:	f009 fdb2 	bl	800bfac <rcutils_set_default_allocator>
 8002448:	4603      	mov	r3, r0
 800244a:	673b      	str	r3, [r7, #112]	@ 0x70
	   Makes all ROS allocations use your RTOS-safe allocator.

	   ROS 2 Python analogy: not needed; Python/OS memory is already managed.
	   */
	  /* -------- wait for agent (~5 s) -------- */
	  for (int i = 0; i < 50; ++i) {
 800244c:	2300      	movs	r3, #0
 800244e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002450:	e00c      	b.n	800246c <StartDefaultTask+0x64>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8002452:	2101      	movs	r1, #1
 8002454:	2064      	movs	r0, #100	@ 0x64
 8002456:	f009 fe7d 	bl	800c154 <rmw_uros_ping_agent>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <StartDefaultTask+0x6c>
	    osDelay(100);
 8002460:	2064      	movs	r0, #100	@ 0x64
 8002462:	f006 f8a1 	bl	80085a8 <osDelay>
	  for (int i = 0; i < 50; ++i) {
 8002466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002468:	3301      	adds	r3, #1
 800246a:	677b      	str	r3, [r7, #116]	@ 0x74
 800246c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800246e:	2b31      	cmp	r3, #49	@ 0x31
 8002470:	ddef      	ble.n	8002452 <StartDefaultTask+0x4a>
 8002472:	e000      	b.n	8002476 <StartDefaultTask+0x6e>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8002474:	bf00      	nop
	   ROS 2 Python analogy: usually unnecessary; your node just runs and discovers peers later.
	   */

	  /* -------- micro-ROS graph -------- */
	  rclc_support_t support;
	  rcl_allocator_t allocator = rcl_get_default_allocator();
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4618      	mov	r0, r3
 800247c:	f009 fd88 	bl	800bf90 <rcutils_get_default_allocator>
	  rclc_support_init(&support, 0, NULL, &allocator);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	f009 fc4a 	bl	800bd24 <rclc_support_init>
	  //CHECK();

	  rcl_node_t node;
	  rclc_node_init_default(&node, "nucleo_f446re", "", &support);
 8002490:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002494:	f107 000c 	add.w	r0, r7, #12
 8002498:	4a3a      	ldr	r2, [pc, #232]	@ (8002584 <StartDefaultTask+0x17c>)
 800249a:	493b      	ldr	r1, [pc, #236]	@ (8002588 <StartDefaultTask+0x180>)
 800249c:	f009 fc8c 	bl	800bdb8 <rclc_node_init_default>
		pub_enc = node.create_publisher(Int32MultiArray, "wheel_status/encoders", 10)
	   */

	  //CHECK();
	  //init_float_multiarray_3(&msg_cmd_rx, rx_data);
	  init_float_multiarray_fixed(&msg_cmd_rx, rx_data, 3);
 80024a0:	2203      	movs	r2, #3
 80024a2:	493a      	ldr	r1, [pc, #232]	@ (800258c <StartDefaultTask+0x184>)
 80024a4:	483a      	ldr	r0, [pc, #232]	@ (8002590 <StartDefaultTask+0x188>)
 80024a6:	f7ff fef4 	bl	8002292 <init_float_multiarray_fixed>

	  rclc_subscription_init_default(
 80024aa:	f00a fc3f 	bl	800cd2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f107 010c 	add.w	r1, r7, #12
 80024b4:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <StartDefaultTask+0x18c>)
 80024b6:	4838      	ldr	r0, [pc, #224]	@ (8002598 <StartDefaultTask+0x190>)
 80024b8:	f009 fcee 	bl	800be98 <rclc_subscription_init_default>
		sub = node.create_subscription(Int32MultiArray, "wheel_cmd", cb, 10)
	   */

	  /* 100 Hz timer (new API with autostart) */
	  //CHECK();
	  rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(10), timer_cb, true);
 80024bc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80024c0:	2301      	movs	r3, #1
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	4b35      	ldr	r3, [pc, #212]	@ (800259c <StartDefaultTask+0x194>)
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4a35      	ldr	r2, [pc, #212]	@ (80025a0 <StartDefaultTask+0x198>)
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	4835      	ldr	r0, [pc, #212]	@ (80025a4 <StartDefaultTask+0x19c>)
 80024d0:	f009 fd16 	bl	800bf00 <rclc_timer_init_default2>
	   Timer at 100 Hz (10 ms period), starts automatically.
	   ROS 2 Python analogy: node.create_timer(0.01, timer_cb).
	   */
	  //CHECK();
	  //rclc_executor_init(&executor, &support.context, 2, &allocator);
	  init_float_multiarray_fixed(&msg_cfg_rx, cfg_buf, 2);
 80024d4:	2202      	movs	r2, #2
 80024d6:	4934      	ldr	r1, [pc, #208]	@ (80025a8 <StartDefaultTask+0x1a0>)
 80024d8:	4834      	ldr	r0, [pc, #208]	@ (80025ac <StartDefaultTask+0x1a4>)
 80024da:	f7ff feda 	bl	8002292 <init_float_multiarray_fixed>
	  rclc_subscription_init_default(
 80024de:	f00a fc25 	bl	800cd2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 80024e2:	4602      	mov	r2, r0
 80024e4:	f107 010c 	add.w	r1, r7, #12
 80024e8:	4b31      	ldr	r3, [pc, #196]	@ (80025b0 <StartDefaultTask+0x1a8>)
 80024ea:	4832      	ldr	r0, [pc, #200]	@ (80025b4 <StartDefaultTask+0x1ac>)
 80024ec:	f009 fcd4 	bl	800be98 <rclc_subscription_init_default>
	      &sub_cfg, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
	      "nexus_ctrl/config");
	  //CHECK();
	  init_int_multiarray_4(&msg_ccr, ccr_data);
 80024f0:	4931      	ldr	r1, [pc, #196]	@ (80025b8 <StartDefaultTask+0x1b0>)
 80024f2:	4832      	ldr	r0, [pc, #200]	@ (80025bc <StartDefaultTask+0x1b4>)
 80024f4:	f7ff feac 	bl	8002250 <init_int_multiarray_4>
	  rclc_publisher_init_default(
 80024f8:	f00a fc30 	bl	800cd5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f107 010c 	add.w	r1, r7, #12
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <StartDefaultTask+0x1b8>)
 8002504:	482f      	ldr	r0, [pc, #188]	@ (80025c4 <StartDefaultTask+0x1bc>)
 8002506:	f009 fc93 	bl	800be30 <rclc_publisher_init_default>
	      &pub_ccr, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/ccr");

	  rclc_executor_init(&executor, &support.context, /*handles*/ 3, &allocator);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002512:	2203      	movs	r2, #3
 8002514:	482c      	ldr	r0, [pc, #176]	@ (80025c8 <StartDefaultTask+0x1c0>)
 8002516:	f009 f98b 	bl	800b830 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &sub_cmd, &msg_cmd_rx, &wheel_cmd_cb, ON_NEW_DATA);
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <StartDefaultTask+0x1c4>)
 8002520:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <StartDefaultTask+0x188>)
 8002522:	491d      	ldr	r1, [pc, #116]	@ (8002598 <StartDefaultTask+0x190>)
 8002524:	4828      	ldr	r0, [pc, #160]	@ (80025c8 <StartDefaultTask+0x1c0>)
 8002526:	f009 f9ef 	bl	800b908 <rclc_executor_add_subscription>
	  rclc_executor_add_subscription(&executor, &sub_cfg, &msg_cfg_rx, &cfg_cb,     ON_NEW_DATA);
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4b28      	ldr	r3, [pc, #160]	@ (80025d0 <StartDefaultTask+0x1c8>)
 8002530:	4a1e      	ldr	r2, [pc, #120]	@ (80025ac <StartDefaultTask+0x1a4>)
 8002532:	4920      	ldr	r1, [pc, #128]	@ (80025b4 <StartDefaultTask+0x1ac>)
 8002534:	4824      	ldr	r0, [pc, #144]	@ (80025c8 <StartDefaultTask+0x1c0>)
 8002536:	f009 f9e7 	bl	800b908 <rclc_executor_add_subscription>
	  //CHECK();
	  rclc_executor_add_timer(&executor, &timer);
 800253a:	491a      	ldr	r1, [pc, #104]	@ (80025a4 <StartDefaultTask+0x19c>)
 800253c:	4822      	ldr	r0, [pc, #136]	@ (80025c8 <StartDefaultTask+0x1c0>)
 800253e:	f009 fa17 	bl	800b970 <rclc_executor_add_timer>
	  for (;;) {
	    (void)rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));
 8002542:	a305      	add	r3, pc, #20	@ (adr r3, 8002558 <StartDefaultTask+0x150>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	481f      	ldr	r0, [pc, #124]	@ (80025c8 <StartDefaultTask+0x1c0>)
 800254a:	f009 fa85 	bl	800ba58 <rclc_executor_spin_some>
 800254e:	bf00      	nop
 8002550:	e7f7      	b.n	8002542 <StartDefaultTask+0x13a>
 8002552:	bf00      	nop
 8002554:	f3af 8000 	nop.w
 8002558:	004c4b40 	.word	0x004c4b40
 800255c:	00000000 	.word	0x00000000
 8002560:	0800182d 	.word	0x0800182d
 8002564:	080017c5 	.word	0x080017c5
 8002568:	080017a5 	.word	0x080017a5
 800256c:	08001779 	.word	0x08001779
 8002570:	200059e8 	.word	0x200059e8
 8002574:	08002701 	.word	0x08002701
 8002578:	08002745 	.word	0x08002745
 800257c:	0800277d 	.word	0x0800277d
 8002580:	080027e9 	.word	0x080027e9
 8002584:	0801aca4 	.word	0x0801aca4
 8002588:	0801aca8 	.word	0x0801aca8
 800258c:	20005c6c 	.word	0x20005c6c
 8002590:	20005c50 	.word	0x20005c50
 8002594:	0801acb8 	.word	0x0801acb8
 8002598:	20005c4c 	.word	0x20005c4c
 800259c:	0800238d 	.word	0x0800238d
 80025a0:	00989680 	.word	0x00989680
 80025a4:	20005c48 	.word	0x20005c48
 80025a8:	20000008 	.word	0x20000008
 80025ac:	20005c88 	.word	0x20005c88
 80025b0:	0801acc4 	.word	0x0801acc4
 80025b4:	20005c84 	.word	0x20005c84
 80025b8:	20005cc4 	.word	0x20005cc4
 80025bc:	20005ca8 	.word	0x20005ca8
 80025c0:	0801acd8 	.word	0x0801acd8
 80025c4:	20005ca4 	.word	0x20005ca4
 80025c8:	20005bb8 	.word	0x20005bb8
 80025cc:	080022d9 	.word	0x080022d9
 80025d0:	08002339 	.word	0x08002339

080025d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM6) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3a      	ldr	r2, [pc, #232]	@ (80026cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d166      	bne.n	80026b4 <HAL_TIM_PeriodElapsedCallback+0xe0>
		currCount[0] = __HAL_TIM_GET_COUNTER(&htim4);
 80025e6:	4b3a      	ldr	r3, [pc, #232]	@ (80026d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80025f0:	801a      	strh	r2, [r3, #0]
		currCount[1] = __HAL_TIM_GET_COUNTER(&htim1);
 80025f2:	4b39      	ldr	r3, [pc, #228]	@ (80026d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80025fc:	805a      	strh	r2, [r3, #2]
		currCount[2] = __HAL_TIM_GET_COUNTER(&htim3);
 80025fe:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b33      	ldr	r3, [pc, #204]	@ (80026d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002608:	809a      	strh	r2, [r3, #4]
		currCount[3] = __HAL_TIM_GET_COUNTER(&htim8);
 800260a:	4b35      	ldr	r3, [pc, #212]	@ (80026e0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b30      	ldr	r3, [pc, #192]	@ (80026d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002614:	80da      	strh	r2, [r3, #6]

		for (int i=0; i<4; i++) {
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	e048      	b.n	80026ae <HAL_TIM_PeriodElapsedCallback+0xda>

		  deltaEncoder[i] = (int16_t)(currCount[i] - pastcurrCount[i]);		// {RL, FL, FR, RR}
 800261c:	4a2d      	ldr	r2, [pc, #180]	@ (80026d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002624:	b29a      	uxth	r2, r3
 8002626:	492f      	ldr	r1, [pc, #188]	@ (80026e4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	b29b      	uxth	r3, r3
 8002632:	b21b      	sxth	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	4a2c      	ldr	r2, [pc, #176]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		  // Handling 16-bit overflow (if using 16-bit timers)
		  if (deltaEncoder[i] > 32767)       deltaEncoder[i] -= 65536;
 800263e:	4a2a      	ldr	r2, [pc, #168]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800264a:	db0a      	blt.n	8002662 <HAL_TIM_PeriodElapsedCallback+0x8e>
 800264c:	4a26      	ldr	r2, [pc, #152]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8002658:	4923      	ldr	r1, [pc, #140]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002660:	e010      	b.n	8002684 <HAL_TIM_PeriodElapsedCallback+0xb0>
		  else if (deltaEncoder[i] < -32768) deltaEncoder[i] += 65536;
 8002662:	4a21      	ldr	r2, [pc, #132]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800266e:	da09      	bge.n	8002684 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8002670:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002678:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800267c:	491a      	ldr	r1, [pc, #104]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  // Calculating wheel angular velocities (rad/s)
		  omega[i] = (int32_t)(deltaEncoder[i] * 2 );  // omega[i] = (deltaEncoder[i] * 2 * PI) / (3072 * 0.001) = deltaEncoder[i] * 2.05
 8002684:	4a18      	ldr	r2, [pc, #96]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	005a      	lsls	r2, r3, #1
 800268e:	4917      	ldr	r1, [pc, #92]	@ (80026ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  pastcurrCount[i] = currCount[i];
 8002696:	4a0f      	ldr	r2, [pc, #60]	@ (80026d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800269e:	b299      	uxth	r1, r3
 80026a0:	4a10      	ldr	r2, [pc, #64]	@ (80026e4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<4; i++) {
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3301      	adds	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	ddb3      	ble.n	800261c <HAL_TIM_PeriodElapsedCallback+0x48>
	  }
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_PeriodElapsedCallback+0xee>
  {
    HAL_IncTick();
 80026be:	f001 f82d 	bl	800371c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40001000 	.word	0x40001000
 80026d0:	200058c8 	.word	0x200058c8
 80026d4:	20005cd4 	.word	0x20005cd4
 80026d8:	200057f0 	.word	0x200057f0
 80026dc:	20005880 	.word	0x20005880
 80026e0:	20005958 	.word	0x20005958
 80026e4:	20005cdc 	.word	0x20005cdc
 80026e8:	20005ce4 	.word	0x20005ce4
 80026ec:	20005cf4 	.word	0x20005cf4
 80026f0:	40001400 	.word	0x40001400

080026f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026f8:	b672      	cpsid	i
}
 80026fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <Error_Handler+0x8>

08002700 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800270a:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <microros_allocate+0x3c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <microros_allocate+0x3c>)
 8002718:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <microros_allocate+0x40>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <microros_allocate+0x40>)
 8002728:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fdd4 	bl	80012d8 <pvPortMallocMicroROS>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20005d74 	.word	0x20005d74
 8002740:	20005d78 	.word	0x20005d78

08002744 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe fee3 	bl	8001520 <getBlockSize>
 800275a:	4603      	mov	r3, r0
 800275c:	4a06      	ldr	r2, [pc, #24]	@ (8002778 <microros_deallocate+0x34>)
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	461a      	mov	r2, r3
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <microros_deallocate+0x34>)
 8002766:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe fe7d 	bl	8001468 <vPortFreeMicroROS>
  }
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20005d78 	.word	0x20005d78

0800277c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002788:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <microros_reallocate+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4413      	add	r3, r2
 8002792:	461a      	mov	r2, r3
 8002794:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <microros_reallocate+0x64>)
 8002796:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <microros_reallocate+0x68>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4413      	add	r3, r2
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <microros_reallocate+0x68>)
 80027a6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80027ae:	68b8      	ldr	r0, [r7, #8]
 80027b0:	f7fe fd92 	bl	80012d8 <pvPortMallocMicroROS>
 80027b4:	4603      	mov	r3, r0
 80027b6:	e00e      	b.n	80027d6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f7fe feb1 	bl	8001520 <getBlockSize>
 80027be:	4603      	mov	r3, r0
 80027c0:	4a08      	ldr	r2, [pc, #32]	@ (80027e4 <microros_reallocate+0x68>)
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <microros_reallocate+0x68>)
 80027ca:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7fe fec4 	bl	800155c <pvPortReallocMicroROS>
 80027d4:	4603      	mov	r3, r0
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20005d74 	.word	0x20005d74
 80027e4:	20005d78 	.word	0x20005d78

080027e8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <microros_zero_allocate+0x48>)
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	4413      	add	r3, r2
 8002802:	461a      	mov	r2, r3
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <microros_zero_allocate+0x48>)
 8002806:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	fb02 f303 	mul.w	r3, r2, r3
 8002810:	4a08      	ldr	r2, [pc, #32]	@ (8002834 <microros_zero_allocate+0x4c>)
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	4413      	add	r3, r2
 8002816:	461a      	mov	r2, r3
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <microros_zero_allocate+0x4c>)
 800281a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7fe fec9 	bl	80015b6 <pvPortCallocMicroROS>
 8002824:	4603      	mov	r3, r0
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20005d74 	.word	0x20005d74
 8002834:	20005d78 	.word	0x20005d78

08002838 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800284a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800284e:	a320      	add	r3, pc, #128	@ (adr r3, 80028d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fe f852 	bl	80008fc <__aeabi_ldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002866:	a31a      	add	r3, pc, #104	@ (adr r3, 80028d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fe f846 	bl	80008fc <__aeabi_ldivmod>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	da20      	bge.n	80028be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a11      	ldr	r2, [pc, #68]	@ (80028c8 <UTILS_NanosecondsToTimespec+0x90>)
 8002882:	fb82 1203 	smull	r1, r2, r2, r3
 8002886:	1712      	asrs	r2, r2, #28
 8002888:	17db      	asrs	r3, r3, #31
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	6979      	ldr	r1, [r7, #20]
 8002898:	17c8      	asrs	r0, r1, #31
 800289a:	460c      	mov	r4, r1
 800289c:	4605      	mov	r5, r0
 800289e:	ebb2 0804 	subs.w	r8, r2, r4
 80028a2:	eb63 0905 	sbc.w	r9, r3, r5
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4906      	ldr	r1, [pc, #24]	@ (80028cc <UTILS_NanosecondsToTimespec+0x94>)
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	609a      	str	r2, [r3, #8]
    }
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028c8:	44b82fa1 	.word	0x44b82fa1
 80028cc:	3b9aca00 	.word	0x3b9aca00
 80028d0:	3b9aca00 	.word	0x3b9aca00
 80028d4:	00000000 	.word	0x00000000

080028d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b08e      	sub	sp, #56	@ 0x38
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80028e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80028e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80028e8:	2300      	movs	r3, #0
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80028fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028fe:	4618      	mov	r0, r3
 8002900:	f007 f91e 	bl	8009b40 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	17da      	asrs	r2, r3, #31
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	61fa      	str	r2, [r7, #28]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	000b      	movs	r3, r1
 8002918:	2200      	movs	r2, #0
 800291a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800291e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002920:	2200      	movs	r2, #0
 8002922:	461c      	mov	r4, r3
 8002924:	4615      	mov	r5, r2
 8002926:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800292a:	1911      	adds	r1, r2, r4
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	416b      	adcs	r3, r5
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002936:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800293a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	f04f 0400 	mov.w	r4, #0
 8002946:	f04f 0500 	mov.w	r5, #0
 800294a:	015d      	lsls	r5, r3, #5
 800294c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002950:	0154      	lsls	r4, r2, #5
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	ebb2 0800 	subs.w	r8, r2, r0
 800295a:	eb63 0901 	sbc.w	r9, r3, r1
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800296a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800296e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002972:	4690      	mov	r8, r2
 8002974:	4699      	mov	r9, r3
 8002976:	eb18 0a00 	adds.w	sl, r8, r0
 800297a:	eb49 0b01 	adc.w	fp, r9, r1
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800298a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800298e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002992:	ebb2 040a 	subs.w	r4, r2, sl
 8002996:	603c      	str	r4, [r7, #0]
 8002998:	eb63 030b 	sbc.w	r3, r3, fp
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a2:	4623      	mov	r3, r4
 80029a4:	181b      	adds	r3, r3, r0
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	462b      	mov	r3, r5
 80029aa:	eb41 0303 	adc.w	r3, r1, r3
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029b6:	f7ff ff3f 	bl	8002838 <UTILS_NanosecondsToTimespec>

    return 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	3738      	adds	r7, #56	@ 0x38
 80029c0:	46bd      	mov	sp, r7
 80029c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080029c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_MspInit+0x54>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	4a11      	ldr	r2, [pc, #68]	@ (8002a1c <HAL_MspInit+0x54>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029de:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <HAL_MspInit+0x54>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_MspInit+0x54>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <HAL_MspInit+0x54>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fa:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <HAL_MspInit+0x54>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	210f      	movs	r1, #15
 8002a0a:	f06f 0001 	mvn.w	r0, #1
 8002a0e:	f001 fccb 	bl	80043a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	@ 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a40      	ldr	r2, [pc, #256]	@ (8002b40 <HAL_ADC_MspInit+0x120>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d179      	bne.n	8002b36 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b3f      	ldr	r3, [pc, #252]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a52:	4b3c      	ldr	r3, [pc, #240]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b38      	ldr	r3, [pc, #224]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	4a37      	ldr	r2, [pc, #220]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6e:	4b35      	ldr	r3, [pc, #212]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a30      	ldr	r2, [pc, #192]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <HAL_ADC_MspInit+0x124>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RL_CS_ADC1_IN4_Pin|FR_CS_ADC1_IN5_Pin;
 8002a96:	2330      	movs	r3, #48	@ 0x30
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4827      	ldr	r0, [pc, #156]	@ (8002b48 <HAL_ADC_MspInit+0x128>)
 8002aaa:	f002 f8a9 	bl	8004c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FL_CS_ADC1_IN8_Pin|RR_CS_ADC1_IN9_Pin;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4822      	ldr	r0, [pc, #136]	@ (8002b4c <HAL_ADC_MspInit+0x12c>)
 8002ac2:	f002 f89d 	bl	8004c00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ac6:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002ac8:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <HAL_ADC_MspInit+0x134>)
 8002aca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002acc:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ade:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002ae0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ae4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002ae8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002aec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002afe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b0a:	4811      	ldr	r0, [pc, #68]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002b0c:	f001 fc76 	bl	80043fc <HAL_DMA_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002b16:	f7ff fded 	bl	80026f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b20:	4a0b      	ldr	r2, [pc, #44]	@ (8002b50 <HAL_ADC_MspInit+0x130>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2105      	movs	r1, #5
 8002b2a:	2012      	movs	r0, #18
 8002b2c:	f001 fc3c 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b30:	2012      	movs	r0, #18
 8002b32:	f001 fc55 	bl	80043e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	@ 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40012000 	.word	0x40012000
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	20005790 	.word	0x20005790
 8002b54:	40026410 	.word	0x40026410

08002b58 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b090      	sub	sp, #64	@ 0x40
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a8c      	ldr	r2, [pc, #560]	@ (8002da8 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d14d      	bne.n	8002c16 <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a8a      	ldr	r2, [pc, #552]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b88      	ldr	r3, [pc, #544]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9a:	4b84      	ldr	r3, [pc, #528]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	4a83      	ldr	r2, [pc, #524]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba6:	4b81      	ldr	r3, [pc, #516]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_ENC_B_T1C1_Pin|FL_ENC_A_T1C2_Pin;
 8002bb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4878      	ldr	r0, [pc, #480]	@ (8002db0 <HAL_TIM_Encoder_MspInit+0x258>)
 8002bd0:	f002 f816 	bl	8004c00 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2105      	movs	r1, #5
 8002bd8:	2018      	movs	r0, #24
 8002bda:	f001 fbe5 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002bde:	2018      	movs	r0, #24
 8002be0:	f001 fbfe 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2105      	movs	r1, #5
 8002be8:	2019      	movs	r0, #25
 8002bea:	f001 fbdd 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bee:	2019      	movs	r0, #25
 8002bf0:	f001 fbf6 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2105      	movs	r1, #5
 8002bf8:	201a      	movs	r0, #26
 8002bfa:	f001 fbd5 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002bfe:	201a      	movs	r0, #26
 8002c00:	f001 fbee 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002c04:	2200      	movs	r2, #0
 8002c06:	2105      	movs	r1, #5
 8002c08:	201b      	movs	r0, #27
 8002c0a:	f001 fbcd 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c0e:	201b      	movs	r0, #27
 8002c10:	f001 fbe6 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c14:	e0c4      	b.n	8002da0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM3)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a66      	ldr	r2, [pc, #408]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d134      	bne.n	8002c8a <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	4a60      	ldr	r2, [pc, #384]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c30:	4b5e      	ldr	r3, [pc, #376]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	4b5a      	ldr	r3, [pc, #360]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	4a59      	ldr	r2, [pc, #356]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4c:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENC_A_T3C1_Pin|FR_ENC_B_T3C2_Pin;
 8002c58:	23c0      	movs	r3, #192	@ 0xc0
 8002c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c70:	4619      	mov	r1, r3
 8002c72:	484f      	ldr	r0, [pc, #316]	@ (8002db0 <HAL_TIM_Encoder_MspInit+0x258>)
 8002c74:	f001 ffc4 	bl	8004c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2105      	movs	r1, #5
 8002c7c:	201d      	movs	r0, #29
 8002c7e:	f001 fb93 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c82:	201d      	movs	r0, #29
 8002c84:	f001 fbac 	bl	80043e0 <HAL_NVIC_EnableIRQ>
}
 8002c88:	e08a      	b.n	8002da0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM4)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002db8 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d134      	bne.n	8002cfe <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	4b44      	ldr	r3, [pc, #272]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	4a43      	ldr	r2, [pc, #268]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca4:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RL_ENC_B_T4C1_Pin|RL_ENC_A_T4C2_Pin;
 8002ccc:	23c0      	movs	r3, #192	@ 0xc0
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4835      	ldr	r0, [pc, #212]	@ (8002dbc <HAL_TIM_Encoder_MspInit+0x264>)
 8002ce8:	f001 ff8a 	bl	8004c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2105      	movs	r1, #5
 8002cf0:	201e      	movs	r0, #30
 8002cf2:	f001 fb59 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cf6:	201e      	movs	r0, #30
 8002cf8:	f001 fb72 	bl	80043e0 <HAL_NVIC_EnableIRQ>
}
 8002cfc:	e050      	b.n	8002da0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM8)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x268>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d14b      	bne.n	8002da0 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	4b27      	ldr	r3, [pc, #156]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d10:	4a26      	ldr	r2, [pc, #152]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d18:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x254>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RR_ENC_A_T8C1_Pin|RR_ENC_B_T8C2_Pin;
 8002d40:	23c0      	movs	r3, #192	@ 0xc0
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d50:	2303      	movs	r3, #3
 8002d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	481a      	ldr	r0, [pc, #104]	@ (8002dc4 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002d5c:	f001 ff50 	bl	8004c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2105      	movs	r1, #5
 8002d64:	202b      	movs	r0, #43	@ 0x2b
 8002d66:	f001 fb1f 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002d6a:	202b      	movs	r0, #43	@ 0x2b
 8002d6c:	f001 fb38 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2105      	movs	r1, #5
 8002d74:	202c      	movs	r0, #44	@ 0x2c
 8002d76:	f001 fb17 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002d7a:	202c      	movs	r0, #44	@ 0x2c
 8002d7c:	f001 fb30 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2105      	movs	r1, #5
 8002d84:	202d      	movs	r0, #45	@ 0x2d
 8002d86:	f001 fb0f 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002d8a:	202d      	movs	r0, #45	@ 0x2d
 8002d8c:	f001 fb28 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2105      	movs	r1, #5
 8002d94:	202e      	movs	r0, #46	@ 0x2e
 8002d96:	f001 fb07 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002d9a:	202e      	movs	r0, #46	@ 0x2e
 8002d9c:	f001 fb20 	bl	80043e0 <HAL_NVIC_EnableIRQ>
}
 8002da0:	bf00      	nop
 8002da2:	3740      	adds	r7, #64	@ 0x40
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40010400 	.word	0x40010400
 8002dc4:	40020800 	.word	0x40020800

08002dc8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd8:	d116      	bne.n	8002e08 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <HAL_TIM_Base_MspInit+0x80>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	4a19      	ldr	r2, [pc, #100]	@ (8002e48 <HAL_TIM_Base_MspInit+0x80>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dea:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <HAL_TIM_Base_MspInit+0x80>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2105      	movs	r1, #5
 8002dfa:	201c      	movs	r0, #28
 8002dfc:	f001 fad4 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e00:	201c      	movs	r0, #28
 8002e02:	f001 faed 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e06:	e01a      	b.n	8002e3e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e4c <HAL_TIM_Base_MspInit+0x84>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d115      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <HAL_TIM_Base_MspInit+0x80>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e48 <HAL_TIM_Base_MspInit+0x80>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_TIM_Base_MspInit+0x80>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2105      	movs	r1, #5
 8002e32:	2036      	movs	r0, #54	@ 0x36
 8002e34:	f001 fab8 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e38:	2036      	movs	r0, #54	@ 0x36
 8002e3a:	f001 fad1 	bl	80043e0 <HAL_NVIC_EnableIRQ>
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40001000 	.word	0x40001000

08002e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e70:	d13c      	bne.n	8002eec <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef4 <HAL_TIM_MspPostInit+0xa4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef4 <HAL_TIM_MspPostInit+0xa4>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef4 <HAL_TIM_MspPostInit+0xa4>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <HAL_TIM_MspPostInit+0xa4>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a17      	ldr	r2, [pc, #92]	@ (8002ef4 <HAL_TIM_MspPostInit+0xa4>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <HAL_TIM_MspPostInit+0xa4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	480c      	ldr	r0, [pc, #48]	@ (8002ef8 <HAL_TIM_MspPostInit+0xa8>)
 8002ec6:	f001 fe9b 	bl	8004c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 8002eca:	f240 4304 	movw	r3, #1028	@ 0x404
 8002ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002edc:	2301      	movs	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4805      	ldr	r0, [pc, #20]	@ (8002efc <HAL_TIM_MspPostInit+0xac>)
 8002ee8:	f001 fe8a 	bl	8004c00 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	@ 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40020400 	.word	0x40020400

08002f00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	@ 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8003088 <HAL_UART_MspInit+0x188>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	f040 80c2 	bne.w	80030a8 <HAL_UART_MspInit+0x1a8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	4b58      	ldr	r3, [pc, #352]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	4a57      	ldr	r2, [pc, #348]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f34:	4b55      	ldr	r3, [pc, #340]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	4b51      	ldr	r3, [pc, #324]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	4a50      	ldr	r2, [pc, #320]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f50:	4b4e      	ldr	r3, [pc, #312]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	4a49      	ldr	r2, [pc, #292]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6c:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_UART_MspInit+0x18c>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8e:	f107 031c 	add.w	r3, r7, #28
 8002f92:	4619      	mov	r1, r3
 8002f94:	483e      	ldr	r0, [pc, #248]	@ (8003090 <HAL_UART_MspInit+0x190>)
 8002f96:	f001 fe33 	bl	8004c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002faa:	2308      	movs	r3, #8
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4837      	ldr	r0, [pc, #220]	@ (8003094 <HAL_UART_MspInit+0x194>)
 8002fb6:	f001 fe23 	bl	8004c00 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002fba:	4b37      	ldr	r3, [pc, #220]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fbc:	4a37      	ldr	r2, [pc, #220]	@ (800309c <HAL_UART_MspInit+0x19c>)
 8002fbe:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002fc0:	4b35      	ldr	r3, [pc, #212]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fc6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc8:	4b33      	ldr	r3, [pc, #204]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fce:	4b32      	ldr	r3, [pc, #200]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fda:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002fee:	4b2a      	ldr	r3, [pc, #168]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002ff0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ff4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff6:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002ffc:	4826      	ldr	r0, [pc, #152]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8002ffe:	f001 f9fd 	bl	80043fc <HAL_DMA_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003008:	f7ff fb74 	bl	80026f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a22      	ldr	r2, [pc, #136]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8003010:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003012:	4a21      	ldr	r2, [pc, #132]	@ (8003098 <HAL_UART_MspInit+0x198>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8003018:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 800301a:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <HAL_UART_MspInit+0x1a4>)
 800301c:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 8003020:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003024:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003026:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 8003028:	2240      	movs	r2, #64	@ 0x40
 800302a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302c:	4b1c      	ldr	r3, [pc, #112]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003032:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 8003034:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003038:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303a:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003040:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8003046:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 8003048:	2200      	movs	r2, #0
 800304a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800304c:	4b14      	ldr	r3, [pc, #80]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 800304e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003052:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003054:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800305a:	4811      	ldr	r0, [pc, #68]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 800305c:	f001 f9ce 	bl	80043fc <HAL_DMA_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003066:	f7ff fb45 	bl	80026f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0c      	ldr	r2, [pc, #48]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003070:	4a0b      	ldr	r2, [pc, #44]	@ (80030a0 <HAL_UART_MspInit+0x1a0>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2105      	movs	r1, #5
 800307a:	2035      	movs	r0, #53	@ 0x35
 800307c:	f001 f994 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003080:	2035      	movs	r0, #53	@ 0x35
 8003082:	f001 f9ad 	bl	80043e0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003086:	e0a8      	b.n	80031da <HAL_UART_MspInit+0x2da>
 8003088:	40005000 	.word	0x40005000
 800308c:	40023800 	.word	0x40023800
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	20005a30 	.word	0x20005a30
 800309c:	40026010 	.word	0x40026010
 80030a0:	20005a90 	.word	0x20005a90
 80030a4:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a4d      	ldr	r2, [pc, #308]	@ (80031e4 <HAL_UART_MspInit+0x2e4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f040 8093 	bne.w	80031da <HAL_UART_MspInit+0x2da>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	4b4b      	ldr	r3, [pc, #300]	@ (80031e8 <HAL_UART_MspInit+0x2e8>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	4a4a      	ldr	r2, [pc, #296]	@ (80031e8 <HAL_UART_MspInit+0x2e8>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c4:	4b48      	ldr	r3, [pc, #288]	@ (80031e8 <HAL_UART_MspInit+0x2e8>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	4b44      	ldr	r3, [pc, #272]	@ (80031e8 <HAL_UART_MspInit+0x2e8>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	4a43      	ldr	r2, [pc, #268]	@ (80031e8 <HAL_UART_MspInit+0x2e8>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e0:	4b41      	ldr	r3, [pc, #260]	@ (80031e8 <HAL_UART_MspInit+0x2e8>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030ec:	230c      	movs	r3, #12
 80030ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f8:	2303      	movs	r3, #3
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030fc:	2307      	movs	r3, #7
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4619      	mov	r1, r3
 8003106:	4839      	ldr	r0, [pc, #228]	@ (80031ec <HAL_UART_MspInit+0x2ec>)
 8003108:	f001 fd7a 	bl	8004c00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800310c:	4b38      	ldr	r3, [pc, #224]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 800310e:	4a39      	ldr	r2, [pc, #228]	@ (80031f4 <HAL_UART_MspInit+0x2f4>)
 8003110:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003112:	4b37      	ldr	r3, [pc, #220]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003114:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003118:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800311a:	4b35      	ldr	r3, [pc, #212]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003120:	4b33      	ldr	r3, [pc, #204]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003126:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003128:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800312c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800312e:	4b30      	ldr	r3, [pc, #192]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003134:	4b2e      	ldr	r3, [pc, #184]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800313a:	4b2d      	ldr	r3, [pc, #180]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 800313c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003140:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003142:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003144:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003148:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800314a:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 800314c:	2200      	movs	r2, #0
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003150:	4827      	ldr	r0, [pc, #156]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003152:	f001 f953 	bl	80043fc <HAL_DMA_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_MspInit+0x260>
      Error_Handler();
 800315c:	f7ff faca 	bl	80026f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003164:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003166:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_UART_MspInit+0x2f0>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800316c:	4b22      	ldr	r3, [pc, #136]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 800316e:	4a23      	ldr	r2, [pc, #140]	@ (80031fc <HAL_UART_MspInit+0x2fc>)
 8003170:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003172:	4b21      	ldr	r3, [pc, #132]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 8003174:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003178:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800317a:	4b1f      	ldr	r3, [pc, #124]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 800317c:	2240      	movs	r2, #64	@ 0x40
 800317e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003180:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003186:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 8003188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800318c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800318e:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 8003190:	2200      	movs	r2, #0
 8003192:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003194:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800319a:	4b17      	ldr	r3, [pc, #92]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 800319c:	2200      	movs	r2, #0
 800319e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031a0:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 80031a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a8:	4b13      	ldr	r3, [pc, #76]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031ae:	4812      	ldr	r0, [pc, #72]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 80031b0:	f001 f924 	bl	80043fc <HAL_DMA_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_UART_MspInit+0x2be>
      Error_Handler();
 80031ba:	f7ff fa9b 	bl	80026f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a0d      	ldr	r2, [pc, #52]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80031c4:	4a0c      	ldr	r2, [pc, #48]	@ (80031f8 <HAL_UART_MspInit+0x2f8>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2105      	movs	r1, #5
 80031ce:	2026      	movs	r0, #38	@ 0x26
 80031d0:	f001 f8ea 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031d4:	2026      	movs	r0, #38	@ 0x26
 80031d6:	f001 f903 	bl	80043e0 <HAL_NVIC_EnableIRQ>
}
 80031da:	bf00      	nop
 80031dc:	3730      	adds	r7, #48	@ 0x30
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40004400 	.word	0x40004400
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	20005af0 	.word	0x20005af0
 80031f4:	40026088 	.word	0x40026088
 80031f8:	20005b50 	.word	0x20005b50
 80031fc:	400260a0 	.word	0x400260a0

08003200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	@ 0x38
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	4b33      	ldr	r3, [pc, #204]	@ (80032e4 <HAL_InitTick+0xe4>)
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	4a32      	ldr	r2, [pc, #200]	@ (80032e4 <HAL_InitTick+0xe4>)
 800321a:	f043 0320 	orr.w	r3, r3, #32
 800321e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003220:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <HAL_InitTick+0xe4>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800322c:	f107 0210 	add.w	r2, r7, #16
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f001 ffaa 	bl	8005190 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003246:	f001 ff7b 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 800324a:	6378      	str	r0, [r7, #52]	@ 0x34
 800324c:	e004      	b.n	8003258 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800324e:	f001 ff77 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8003252:	4603      	mov	r3, r0
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	4a23      	ldr	r2, [pc, #140]	@ (80032e8 <HAL_InitTick+0xe8>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0c9b      	lsrs	r3, r3, #18
 8003262:	3b01      	subs	r3, #1
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003266:	4b21      	ldr	r3, [pc, #132]	@ (80032ec <HAL_InitTick+0xec>)
 8003268:	4a21      	ldr	r2, [pc, #132]	@ (80032f0 <HAL_InitTick+0xf0>)
 800326a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800326c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <HAL_InitTick+0xec>)
 800326e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003272:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003274:	4a1d      	ldr	r2, [pc, #116]	@ (80032ec <HAL_InitTick+0xec>)
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800327a:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <HAL_InitTick+0xec>)
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003280:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <HAL_InitTick+0xec>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003286:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_InitTick+0xec>)
 8003288:	2200      	movs	r2, #0
 800328a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800328c:	4817      	ldr	r0, [pc, #92]	@ (80032ec <HAL_InitTick+0xec>)
 800328e:	f002 fc7f 	bl	8005b90 <HAL_TIM_Base_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003298:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11b      	bne.n	80032d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80032a0:	4812      	ldr	r0, [pc, #72]	@ (80032ec <HAL_InitTick+0xec>)
 80032a2:	f002 fcc5 	bl	8005c30 <HAL_TIM_Base_Start_IT>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80032ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d111      	bne.n	80032d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032b4:	2037      	movs	r0, #55	@ 0x37
 80032b6:	f001 f893 	bl	80043e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b0f      	cmp	r3, #15
 80032be:	d808      	bhi.n	80032d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80032c0:	2200      	movs	r2, #0
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	2037      	movs	r0, #55	@ 0x37
 80032c6:	f001 f86f 	bl	80043a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032ca:	4a0a      	ldr	r2, [pc, #40]	@ (80032f4 <HAL_InitTick+0xf4>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e002      	b.n	80032d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3738      	adds	r7, #56	@ 0x38
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	431bde83 	.word	0x431bde83
 80032ec:	20005d7c 	.word	0x20005d7c
 80032f0:	40001400 	.word	0x40001400
 80032f4:	20000018 	.word	0x20000018

080032f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <NMI_Handler+0x4>

08003300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <HardFault_Handler+0x4>

08003308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <MemManage_Handler+0x4>

08003310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <BusFault_Handler+0x4>

08003318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <UsageFault_Handler+0x4>

08003320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003334:	4802      	ldr	r0, [pc, #8]	@ (8003340 <DMA1_Stream0_IRQHandler+0x10>)
 8003336:	f001 f9f9 	bl	800472c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20005a30 	.word	0x20005a30

08003344 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <DMA1_Stream5_IRQHandler+0x10>)
 800334a:	f001 f9ef 	bl	800472c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20005af0 	.word	0x20005af0

08003358 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <DMA1_Stream6_IRQHandler+0x10>)
 800335e:	f001 f9e5 	bl	800472c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20005b50 	.word	0x20005b50

0800336c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <ADC_IRQHandler+0x10>)
 8003372:	f000 fa5a 	bl	800382a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20005748 	.word	0x20005748

08003380 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003386:	f002 ff19 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200057f0 	.word	0x200057f0

08003394 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800339a:	f002 ff0f 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200057f0 	.word	0x200057f0

080033a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80033ae:	f002 ff05 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200057f0 	.word	0x200057f0

080033bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <TIM1_CC_IRQHandler+0x10>)
 80033c2:	f002 fefb 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200057f0 	.word	0x200057f0

080033d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <TIM2_IRQHandler+0x10>)
 80033d6:	f002 fef1 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20005838 	.word	0x20005838

080033e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <TIM3_IRQHandler+0x10>)
 80033ea:	f002 fee7 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20005880 	.word	0x20005880

080033f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <TIM4_IRQHandler+0x10>)
 80033fe:	f002 fedd 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200058c8 	.word	0x200058c8

0800340c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003410:	4802      	ldr	r0, [pc, #8]	@ (800341c <USART2_IRQHandler+0x10>)
 8003412:	f003 fe8b 	bl	800712c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200059e8 	.word	0x200059e8

08003420 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003424:	4802      	ldr	r0, [pc, #8]	@ (8003430 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003426:	f002 fec9 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20005958 	.word	0x20005958

08003434 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003438:	4802      	ldr	r0, [pc, #8]	@ (8003444 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800343a:	f002 febf 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20005958 	.word	0x20005958

08003448 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800344c:	4802      	ldr	r0, [pc, #8]	@ (8003458 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800344e:	f002 feb5 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20005958 	.word	0x20005958

0800345c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <TIM8_CC_IRQHandler+0x10>)
 8003462:	f002 feab 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20005958 	.word	0x20005958

08003470 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <DMA1_Stream7_IRQHandler+0x10>)
 8003476:	f001 f959 	bl	800472c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20005a90 	.word	0x20005a90

08003484 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <UART5_IRQHandler+0x10>)
 800348a:	f003 fe4f 	bl	800712c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200059a0 	.word	0x200059a0

08003498 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800349c:	4802      	ldr	r0, [pc, #8]	@ (80034a8 <TIM6_DAC_IRQHandler+0x10>)
 800349e:	f002 fe8d 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20005910 	.word	0x20005910

080034ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034b0:	4802      	ldr	r0, [pc, #8]	@ (80034bc <TIM7_IRQHandler+0x10>)
 80034b2:	f002 fe83 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20005d7c 	.word	0x20005d7c

080034c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034c4:	4802      	ldr	r0, [pc, #8]	@ (80034d0 <DMA2_Stream0_IRQHandler+0x10>)
 80034c6:	f001 f931 	bl	800472c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20005790 	.word	0x20005790

080034d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return 1;
 80034d8:	2301      	movs	r3, #1
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <_kill>:

int _kill(int pid, int sig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034ee:	f016 fd4b 	bl	8019f88 <__errno>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2216      	movs	r2, #22
 80034f6:	601a      	str	r2, [r3, #0]
  return -1;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_exit>:

void _exit (int status)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ffe7 	bl	80034e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003516:	bf00      	nop
 8003518:	e7fd      	b.n	8003516 <_exit+0x12>

0800351a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e00a      	b.n	8003542 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800352c:	f3af 8000 	nop.w
 8003530:	4601      	mov	r1, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	60ba      	str	r2, [r7, #8]
 8003538:	b2ca      	uxtb	r2, r1
 800353a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	dbf0      	blt.n	800352c <_read+0x12>
  }

  return len;
 800354a:	687b      	ldr	r3, [r7, #4]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e009      	b.n	800357a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	60ba      	str	r2, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	dbf1      	blt.n	8003566 <_write+0x12>
  }
  return len;
 8003582:	687b      	ldr	r3, [r7, #4]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <_close>:

int _close(int file)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035b4:	605a      	str	r2, [r3, #4]
  return 0;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_isatty>:

int _isatty(int file)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035cc:	2301      	movs	r3, #1
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035fc:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <_sbrk+0x5c>)
 80035fe:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <_sbrk+0x60>)
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003608:	4b13      	ldr	r3, [pc, #76]	@ (8003658 <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <_sbrk+0x64>)
 8003612:	4a12      	ldr	r2, [pc, #72]	@ (800365c <_sbrk+0x68>)
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <_sbrk+0x64>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	429a      	cmp	r2, r3
 8003622:	d207      	bcs.n	8003634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003624:	f016 fcb0 	bl	8019f88 <__errno>
 8003628:	4603      	mov	r3, r0
 800362a:	220c      	movs	r2, #12
 800362c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	e009      	b.n	8003648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003634:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <_sbrk+0x64>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800363a:	4b07      	ldr	r3, [pc, #28]	@ (8003658 <_sbrk+0x64>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	4a05      	ldr	r2, [pc, #20]	@ (8003658 <_sbrk+0x64>)
 8003644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20020000 	.word	0x20020000
 8003654:	00000400 	.word	0x00000400
 8003658:	20005dc8 	.word	0x20005dc8
 800365c:	2000f448 	.word	0x2000f448

08003660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <SystemInit+0x20>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366a:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <SystemInit+0x20>)
 800366c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003688:	f7ff ffea 	bl	8003660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800368c:	480c      	ldr	r0, [pc, #48]	@ (80036c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800368e:	490d      	ldr	r1, [pc, #52]	@ (80036c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003690:	4a0d      	ldr	r2, [pc, #52]	@ (80036c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003694:	e002      	b.n	800369c <LoopCopyDataInit>

08003696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800369a:	3304      	adds	r3, #4

0800369c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800369c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a0:	d3f9      	bcc.n	8003696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036a2:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036a4:	4c0a      	ldr	r4, [pc, #40]	@ (80036d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a8:	e001      	b.n	80036ae <LoopFillZerobss>

080036aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036ac:	3204      	adds	r2, #4

080036ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b0:	d3fb      	bcc.n	80036aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80036b2:	f016 fc6f 	bl	8019f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b6:	f7fe f90d 	bl	80018d4 <main>
  bx  lr    
 80036ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c4:	200012f0 	.word	0x200012f0
  ldr r2, =_sidata
 80036c8:	0801c038 	.word	0x0801c038
  ldr r2, =_sbss
 80036cc:	200012f0 	.word	0x200012f0
  ldr r4, =_ebss
 80036d0:	2000f444 	.word	0x2000f444

080036d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d4:	e7fe      	b.n	80036d4 <CAN1_RX0_IRQHandler>
	...

080036d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <HAL_Init+0x40>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <HAL_Init+0x40>)
 80036e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <HAL_Init+0x40>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <HAL_Init+0x40>)
 80036ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f4:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <HAL_Init+0x40>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a07      	ldr	r2, [pc, #28]	@ (8003718 <HAL_Init+0x40>)
 80036fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003700:	2003      	movs	r0, #3
 8003702:	f000 fe46 	bl	8004392 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003706:	200f      	movs	r0, #15
 8003708:	f7ff fd7a 	bl	8003200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800370c:	f7ff f95c 	bl	80029c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023c00 	.word	0x40023c00

0800371c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_IncTick+0x20>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_IncTick+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4413      	add	r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_IncTick+0x24>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	2000001c 	.word	0x2000001c
 8003740:	20005dcc 	.word	0x20005dcc

08003744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return uwTick;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_GetTick+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20005dcc 	.word	0x20005dcc

0800375c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff ffee 	bl	8003744 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d005      	beq.n	8003782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <HAL_Delay+0x44>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003782:	bf00      	nop
 8003784:	f7ff ffde 	bl	8003744 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	429a      	cmp	r2, r3
 8003792:	d8f7      	bhi.n	8003784 <HAL_Delay+0x28>
  {
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000001c 	.word	0x2000001c

080037a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e033      	b.n	8003822 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff f92c 	bl	8002a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037ea:	f023 0302 	bic.w	r3, r3, #2
 80037ee:	f043 0202 	orr.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fb96 	bl	8003f28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
 8003812:	e001      	b.n	8003818 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d049      	beq.n	80038f4 <HAL_ADC_IRQHandler+0xca>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d046      	beq.n	80038f4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d12b      	bne.n	80038e4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	d127      	bne.n	80038e4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d006      	beq.n	80038b0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d119      	bne.n	80038e4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0220 	bic.w	r2, r2, #32
 80038be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9c5 	bl	8003c74 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f06f 0212 	mvn.w	r2, #18
 80038f2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d057      	beq.n	80039ba <HAL_ADC_IRQHandler+0x190>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d054      	beq.n	80039ba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d139      	bne.n	80039aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800394e:	2b00      	cmp	r3, #0
 8003950:	d12b      	bne.n	80039aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800395c:	2b00      	cmp	r3, #0
 800395e:	d124      	bne.n	80039aa <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11d      	bne.n	80039aa <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003972:	2b00      	cmp	r3, #0
 8003974:	d119      	bne.n	80039aa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003984:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d105      	bne.n	80039aa <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fc3a 	bl	8004224 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 020c 	mvn.w	r2, #12
 80039b8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d017      	beq.n	8003a00 <HAL_ADC_IRQHandler+0x1d6>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d014      	beq.n	8003a00 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10d      	bne.n	8003a00 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f953 	bl	8003c9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0201 	mvn.w	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d015      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x218>
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a20:	f043 0202 	orr.w	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0220 	mvn.w	r2, #32
 8003a30:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f93c 	bl	8003cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0220 	mvn.w	r2, #32
 8003a40:	601a      	str	r2, [r3, #0]
  }
}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_Start_DMA+0x22>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0eb      	b.n	8003c46 <HAL_ADC_Start_DMA+0x1fa>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d018      	beq.n	8003ab6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a94:	4b6e      	ldr	r3, [pc, #440]	@ (8003c50 <HAL_ADC_Start_DMA+0x204>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6e      	ldr	r2, [pc, #440]	@ (8003c54 <HAL_ADC_Start_DMA+0x208>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0c9a      	lsrs	r2, r3, #18
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003aa8:	e002      	b.n	8003ab0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f9      	bne.n	8003aaa <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac4:	d107      	bne.n	8003ad6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	f040 80a3 	bne.w	8003c2c <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b10:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b24:	d106      	bne.n	8003b34 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	f023 0206 	bic.w	r2, r3, #6
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b32:	e002      	b.n	8003b3a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b42:	4b45      	ldr	r3, [pc, #276]	@ (8003c58 <HAL_ADC_Start_DMA+0x20c>)
 8003b44:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	4a44      	ldr	r2, [pc, #272]	@ (8003c5c <HAL_ADC_Start_DMA+0x210>)
 8003b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b52:	4a43      	ldr	r2, [pc, #268]	@ (8003c60 <HAL_ADC_Start_DMA+0x214>)
 8003b54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	4a42      	ldr	r2, [pc, #264]	@ (8003c64 <HAL_ADC_Start_DMA+0x218>)
 8003b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003b66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003b76:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b86:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	334c      	adds	r3, #76	@ 0x4c
 8003b92:	4619      	mov	r1, r3
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f000 fcde 	bl	8004558 <HAL_DMA_Start_IT>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d12a      	bne.n	8003c02 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c68 <HAL_ADC_Start_DMA+0x21c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d015      	beq.n	8003be2 <HAL_ADC_Start_DMA+0x196>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <HAL_ADC_Start_DMA+0x220>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d105      	bne.n	8003bcc <HAL_ADC_Start_DMA+0x180>
 8003bc0:	4b25      	ldr	r3, [pc, #148]	@ (8003c58 <HAL_ADC_Start_DMA+0x20c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	@ (8003c70 <HAL_ADC_Start_DMA+0x224>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d136      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x1f8>
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_ADC_Start_DMA+0x20c>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d130      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d129      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	e020      	b.n	8003c44 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <HAL_ADC_Start_DMA+0x21c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d11b      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x1f8>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d114      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c28:	609a      	str	r2, [r3, #8]
 8003c2a:	e00b      	b.n	8003c44 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	f043 0210 	orr.w	r2, r3, #16
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000014 	.word	0x20000014
 8003c54:	431bde83 	.word	0x431bde83
 8003c58:	40012300 	.word	0x40012300
 8003c5c:	08004121 	.word	0x08004121
 8003c60:	080041db 	.word	0x080041db
 8003c64:	080041f7 	.word	0x080041f7
 8003c68:	40012000 	.word	0x40012000
 8003c6c:	40012100 	.word	0x40012100
 8003c70:	40012200 	.word	0x40012200

08003c74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x1c>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e113      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x244>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d925      	bls.n	8003d3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68d9      	ldr	r1, [r3, #12]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	3b1e      	subs	r3, #30
 8003d06:	2207      	movs	r2, #7
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	400a      	ands	r2, r1
 8003d14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68d9      	ldr	r1, [r3, #12]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4618      	mov	r0, r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4403      	add	r3, r0
 8003d2e:	3b1e      	subs	r3, #30
 8003d30:	409a      	lsls	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	e022      	b.n	8003d82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6919      	ldr	r1, [r3, #16]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	2207      	movs	r2, #7
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6919      	ldr	r1, [r3, #16]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	4618      	mov	r0, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4403      	add	r3, r0
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b06      	cmp	r3, #6
 8003d88:	d824      	bhi.n	8003dd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	3b05      	subs	r3, #5
 8003d9c:	221f      	movs	r2, #31
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	400a      	ands	r2, r1
 8003daa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b05      	subs	r3, #5
 8003dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dd2:	e04c      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d824      	bhi.n	8003e26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	3b23      	subs	r3, #35	@ 0x23
 8003dee:	221f      	movs	r2, #31
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43da      	mvns	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	3b23      	subs	r3, #35	@ 0x23
 8003e18:	fa00 f203 	lsl.w	r2, r0, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e24:	e023      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	3b41      	subs	r3, #65	@ 0x41
 8003e38:	221f      	movs	r2, #31
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	400a      	ands	r2, r1
 8003e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	4618      	mov	r0, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	3b41      	subs	r3, #65	@ 0x41
 8003e62:	fa00 f203 	lsl.w	r2, r0, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e6e:	4b29      	ldr	r3, [pc, #164]	@ (8003f14 <HAL_ADC_ConfigChannel+0x250>)
 8003e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a28      	ldr	r2, [pc, #160]	@ (8003f18 <HAL_ADC_ConfigChannel+0x254>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10f      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x1d8>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b12      	cmp	r3, #18
 8003e82:	d10b      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <HAL_ADC_ConfigChannel+0x254>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d12b      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x23a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <HAL_ADC_ConfigChannel+0x258>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x1f4>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b11      	cmp	r3, #17
 8003eb6:	d122      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a11      	ldr	r2, [pc, #68]	@ (8003f1c <HAL_ADC_ConfigChannel+0x258>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d111      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eda:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <HAL_ADC_ConfigChannel+0x25c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a11      	ldr	r2, [pc, #68]	@ (8003f24 <HAL_ADC_ConfigChannel+0x260>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0c9a      	lsrs	r2, r3, #18
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ef0:	e002      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f9      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40012300 	.word	0x40012300
 8003f18:	40012000 	.word	0x40012000
 8003f1c:	10000012 	.word	0x10000012
 8003f20:	20000014 	.word	0x20000014
 8003f24:	431bde83 	.word	0x431bde83

08003f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f30:	4b79      	ldr	r3, [pc, #484]	@ (8004118 <ADC_Init+0x1f0>)
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6899      	ldr	r1, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	4a58      	ldr	r2, [pc, #352]	@ (800411c <ADC_Init+0x1f4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6899      	ldr	r1, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	e00f      	b.n	8004026 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004024:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0202 	bic.w	r2, r2, #2
 8004034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7e1b      	ldrb	r3, [r3, #24]
 8004040:	005a      	lsls	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01b      	beq.n	800408c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004062:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	3b01      	subs	r3, #1
 8004080:	035a      	lsls	r2, r3, #13
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	e007      	b.n	800409c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800409a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	051a      	lsls	r2, r3, #20
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040de:	025a      	lsls	r2, r3, #9
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	029a      	lsls	r2, r3, #10
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40012300 	.word	0x40012300
 800411c:	0f000001 	.word	0x0f000001

08004120 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d13c      	bne.n	80041b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d12b      	bne.n	80041ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004158:	2b00      	cmp	r3, #0
 800415a:	d127      	bne.n	80041ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	d119      	bne.n	80041ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0220 	bic.w	r2, r2, #32
 8004186:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	f043 0201 	orr.w	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fd61 	bl	8003c74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041b2:	e00e      	b.n	80041d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fd75 	bl	8003cb0 <HAL_ADC_ErrorCallback>
}
 80041c6:	e004      	b.n	80041d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fd4d 	bl	8003c88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2240      	movs	r2, #64	@ 0x40
 8004208:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff fd4a 	bl	8003cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004248:	4b0c      	ldr	r3, [pc, #48]	@ (800427c <__NVIC_SetPriorityGrouping+0x44>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004254:	4013      	ands	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800426a:	4a04      	ldr	r2, [pc, #16]	@ (800427c <__NVIC_SetPriorityGrouping+0x44>)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	60d3      	str	r3, [r2, #12]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004284:	4b04      	ldr	r3, [pc, #16]	@ (8004298 <__NVIC_GetPriorityGrouping+0x18>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	0a1b      	lsrs	r3, r3, #8
 800428a:	f003 0307 	and.w	r3, r3, #7
}
 800428e:	4618      	mov	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	db0b      	blt.n	80042c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	4907      	ldr	r1, [pc, #28]	@ (80042d4 <__NVIC_EnableIRQ+0x38>)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2001      	movs	r0, #1
 80042be:	fa00 f202 	lsl.w	r2, r0, r2
 80042c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000e100 	.word	0xe000e100

080042d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db0a      	blt.n	8004302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	490c      	ldr	r1, [pc, #48]	@ (8004324 <__NVIC_SetPriority+0x4c>)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	0112      	lsls	r2, r2, #4
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	440b      	add	r3, r1
 80042fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004300:	e00a      	b.n	8004318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4908      	ldr	r1, [pc, #32]	@ (8004328 <__NVIC_SetPriority+0x50>)
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	3b04      	subs	r3, #4
 8004310:	0112      	lsls	r2, r2, #4
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	440b      	add	r3, r1
 8004316:	761a      	strb	r2, [r3, #24]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000e100 	.word	0xe000e100
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800432c:	b480      	push	{r7}
 800432e:	b089      	sub	sp, #36	@ 0x24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f1c3 0307 	rsb	r3, r3, #7
 8004346:	2b04      	cmp	r3, #4
 8004348:	bf28      	it	cs
 800434a:	2304      	movcs	r3, #4
 800434c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3304      	adds	r3, #4
 8004352:	2b06      	cmp	r3, #6
 8004354:	d902      	bls.n	800435c <NVIC_EncodePriority+0x30>
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3b03      	subs	r3, #3
 800435a:	e000      	b.n	800435e <NVIC_EncodePriority+0x32>
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004360:	f04f 32ff 	mov.w	r2, #4294967295
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43da      	mvns	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	401a      	ands	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004374:	f04f 31ff 	mov.w	r1, #4294967295
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	43d9      	mvns	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004384:	4313      	orrs	r3, r2
         );
}
 8004386:	4618      	mov	r0, r3
 8004388:	3724      	adds	r7, #36	@ 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ff4c 	bl	8004238 <__NVIC_SetPriorityGrouping>
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043ba:	f7ff ff61 	bl	8004280 <__NVIC_GetPriorityGrouping>
 80043be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	6978      	ldr	r0, [r7, #20]
 80043c6:	f7ff ffb1 	bl	800432c <NVIC_EncodePriority>
 80043ca:	4602      	mov	r2, r0
 80043cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff80 	bl	80042d8 <__NVIC_SetPriority>
}
 80043d8:	bf00      	nop
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff ff54 	bl	800429c <__NVIC_EnableIRQ>
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff f99c 	bl	8003744 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e099      	b.n	800454c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004438:	e00f      	b.n	800445a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800443a:	f7ff f983 	bl	8003744 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b05      	cmp	r3, #5
 8004446:	d908      	bls.n	800445a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2203      	movs	r2, #3
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e078      	b.n	800454c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e8      	bne.n	800443a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4b38      	ldr	r3, [pc, #224]	@ (8004554 <HAL_DMA_Init+0x158>)
 8004474:	4013      	ands	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d107      	bne.n	80044c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	4313      	orrs	r3, r2
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 0307 	bic.w	r3, r3, #7
 80044da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d117      	bne.n	800451e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00e      	beq.n	800451e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb01 	bl	8004b08 <DMA_CheckFifoParam>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2240      	movs	r2, #64	@ 0x40
 8004510:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800451a:	2301      	movs	r3, #1
 800451c:	e016      	b.n	800454c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fab8 	bl	8004a9c <DMA_CalcBaseAndBitshift>
 800452c:	4603      	mov	r3, r0
 800452e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004534:	223f      	movs	r2, #63	@ 0x3f
 8004536:	409a      	lsls	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	f010803f 	.word	0xf010803f

08004558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_DMA_Start_IT+0x26>
 800457a:	2302      	movs	r3, #2
 800457c:	e040      	b.n	8004600 <HAL_DMA_Start_IT+0xa8>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d12f      	bne.n	80045f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa4a 	bl	8004a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b0:	223f      	movs	r2, #63	@ 0x3f
 80045b2:	409a      	lsls	r2, r3
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0216 	orr.w	r2, r2, #22
 80045c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0208 	orr.w	r2, r2, #8
 80045de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e005      	b.n	80045fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004616:	f7ff f895 	bl	8003744 <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d008      	beq.n	800463a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2280      	movs	r2, #128	@ 0x80
 800462c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e052      	b.n	80046e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0216 	bic.w	r2, r2, #22
 8004648:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004658:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <HAL_DMA_Abort+0x62>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0208 	bic.w	r2, r2, #8
 8004678:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800468a:	e013      	b.n	80046b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800468c:	f7ff f85a 	bl	8003744 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b05      	cmp	r3, #5
 8004698:	d90c      	bls.n	80046b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e015      	b.n	80046e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e4      	bne.n	800468c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c6:	223f      	movs	r2, #63	@ 0x3f
 80046c8:	409a      	lsls	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2280      	movs	r2, #128	@ 0x80
 8004700:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e00c      	b.n	8004720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2205      	movs	r2, #5
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004738:	4b8e      	ldr	r3, [pc, #568]	@ (8004974 <HAL_DMA_IRQHandler+0x248>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a8e      	ldr	r2, [pc, #568]	@ (8004978 <HAL_DMA_IRQHandler+0x24c>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0a9b      	lsrs	r3, r3, #10
 8004744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004756:	2208      	movs	r2, #8
 8004758:	409a      	lsls	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01a      	beq.n	8004798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004784:	2208      	movs	r2, #8
 8004786:	409a      	lsls	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004790:	f043 0201 	orr.w	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479c:	2201      	movs	r2, #1
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	2201      	movs	r2, #1
 80047bc:	409a      	lsls	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c6:	f043 0202 	orr.w	r2, r3, #2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d2:	2204      	movs	r2, #4
 80047d4:	409a      	lsls	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00b      	beq.n	8004804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f0:	2204      	movs	r2, #4
 80047f2:	409a      	lsls	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fc:	f043 0204 	orr.w	r2, r3, #4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	2210      	movs	r2, #16
 800480a:	409a      	lsls	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d043      	beq.n	800489c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d03c      	beq.n	800489c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004826:	2210      	movs	r2, #16
 8004828:	409a      	lsls	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d018      	beq.n	800486e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d108      	bne.n	800485c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d024      	beq.n	800489c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
 800485a:	e01f      	b.n	800489c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
 800486c:	e016      	b.n	800489c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0208 	bic.w	r2, r2, #8
 800488a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a0:	2220      	movs	r2, #32
 80048a2:	409a      	lsls	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 808f 	beq.w	80049cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8087 	beq.w	80049cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c2:	2220      	movs	r2, #32
 80048c4:	409a      	lsls	r2, r3
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d136      	bne.n	8004944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0216 	bic.w	r2, r2, #22
 80048e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <HAL_DMA_IRQHandler+0x1da>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0208 	bic.w	r2, r2, #8
 8004914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491a:	223f      	movs	r2, #63	@ 0x3f
 800491c:	409a      	lsls	r2, r3
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004936:	2b00      	cmp	r3, #0
 8004938:	d07e      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
        }
        return;
 8004942:	e079      	b.n	8004a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01d      	beq.n	800498e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10d      	bne.n	800497c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004964:	2b00      	cmp	r3, #0
 8004966:	d031      	beq.n	80049cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
 8004970:	e02c      	b.n	80049cc <HAL_DMA_IRQHandler+0x2a0>
 8004972:	bf00      	nop
 8004974:	20000014 	.word	0x20000014
 8004978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d023      	beq.n	80049cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
 800498c:	e01e      	b.n	80049cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10f      	bne.n	80049bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0210 	bic.w	r2, r2, #16
 80049aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d032      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2205      	movs	r2, #5
 80049e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	3301      	adds	r3, #1
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d307      	bcc.n	8004a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f2      	bne.n	80049f8 <HAL_DMA_IRQHandler+0x2cc>
 8004a12:	e000      	b.n	8004a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
 8004a36:	e000      	b.n	8004a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a38:	bf00      	nop
    }
  }
}
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b40      	cmp	r3, #64	@ 0x40
 8004a6c:	d108      	bne.n	8004a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a7e:	e007      	b.n	8004a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	3b10      	subs	r3, #16
 8004aac:	4a14      	ldr	r2, [pc, #80]	@ (8004b00 <DMA_CalcBaseAndBitshift+0x64>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ab6:	4a13      	ldr	r2, [pc, #76]	@ (8004b04 <DMA_CalcBaseAndBitshift+0x68>)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d909      	bls.n	8004ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	1d1a      	adds	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	659a      	str	r2, [r3, #88]	@ 0x58
 8004adc:	e007      	b.n	8004aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	aaaaaaab 	.word	0xaaaaaaab
 8004b04:	0801ad64 	.word	0x0801ad64

08004b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d11f      	bne.n	8004b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d856      	bhi.n	8004bd6 <DMA_CheckFifoParam+0xce>
 8004b28:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <DMA_CheckFifoParam+0x28>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b53 	.word	0x08004b53
 8004b38:	08004b41 	.word	0x08004b41
 8004b3c:	08004bd7 	.word	0x08004bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d046      	beq.n	8004bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b50:	e043      	b.n	8004bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b5a:	d140      	bne.n	8004bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b60:	e03d      	b.n	8004bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6a:	d121      	bne.n	8004bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d837      	bhi.n	8004be2 <DMA_CheckFifoParam+0xda>
 8004b72:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <DMA_CheckFifoParam+0x70>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b8f 	.word	0x08004b8f
 8004b80:	08004b89 	.word	0x08004b89
 8004b84:	08004ba1 	.word	0x08004ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8c:	e030      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d025      	beq.n	8004be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9e:	e022      	b.n	8004be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ba8:	d11f      	bne.n	8004bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bae:	e01c      	b.n	8004bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d903      	bls.n	8004bbe <DMA_CheckFifoParam+0xb6>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d003      	beq.n	8004bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bbc:	e018      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc2:	e015      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd4:	e00b      	b.n	8004bee <DMA_CheckFifoParam+0xe6>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e00a      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e008      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bde:	bf00      	nop
 8004be0:	e006      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
 8004be4:	e004      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bee:	bf00      	nop
    }
  } 
  
  return status; 
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b089      	sub	sp, #36	@ 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e165      	b.n	8004ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	f040 8154 	bne.w	8004ee2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d005      	beq.n	8004c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d130      	bne.n	8004cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c88:	2201      	movs	r2, #1
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4013      	ands	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 0201 	and.w	r2, r3, #1
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d017      	beq.n	8004cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2203      	movs	r2, #3
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d123      	bne.n	8004d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	08da      	lsrs	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3208      	adds	r2, #8
 8004d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	220f      	movs	r2, #15
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	08da      	lsrs	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3208      	adds	r2, #8
 8004d3e:	69b9      	ldr	r1, [r7, #24]
 8004d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	2203      	movs	r2, #3
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0203 	and.w	r2, r3, #3
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80ae 	beq.w	8004ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f00 <HAL_GPIO_Init+0x300>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8e:	4a5c      	ldr	r2, [pc, #368]	@ (8004f00 <HAL_GPIO_Init+0x300>)
 8004d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d96:	4b5a      	ldr	r3, [pc, #360]	@ (8004f00 <HAL_GPIO_Init+0x300>)
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004da2:	4a58      	ldr	r2, [pc, #352]	@ (8004f04 <HAL_GPIO_Init+0x304>)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	3302      	adds	r3, #2
 8004daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	220f      	movs	r2, #15
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8004f08 <HAL_GPIO_Init+0x308>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d025      	beq.n	8004e1a <HAL_GPIO_Init+0x21a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8004f0c <HAL_GPIO_Init+0x30c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01f      	beq.n	8004e16 <HAL_GPIO_Init+0x216>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8004f10 <HAL_GPIO_Init+0x310>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d019      	beq.n	8004e12 <HAL_GPIO_Init+0x212>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a4c      	ldr	r2, [pc, #304]	@ (8004f14 <HAL_GPIO_Init+0x314>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_GPIO_Init+0x20e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a4b      	ldr	r2, [pc, #300]	@ (8004f18 <HAL_GPIO_Init+0x318>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00d      	beq.n	8004e0a <HAL_GPIO_Init+0x20a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4a      	ldr	r2, [pc, #296]	@ (8004f1c <HAL_GPIO_Init+0x31c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <HAL_GPIO_Init+0x206>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a49      	ldr	r2, [pc, #292]	@ (8004f20 <HAL_GPIO_Init+0x320>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <HAL_GPIO_Init+0x202>
 8004dfe:	2306      	movs	r3, #6
 8004e00:	e00c      	b.n	8004e1c <HAL_GPIO_Init+0x21c>
 8004e02:	2307      	movs	r3, #7
 8004e04:	e00a      	b.n	8004e1c <HAL_GPIO_Init+0x21c>
 8004e06:	2305      	movs	r3, #5
 8004e08:	e008      	b.n	8004e1c <HAL_GPIO_Init+0x21c>
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	e006      	b.n	8004e1c <HAL_GPIO_Init+0x21c>
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e004      	b.n	8004e1c <HAL_GPIO_Init+0x21c>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e002      	b.n	8004e1c <HAL_GPIO_Init+0x21c>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <HAL_GPIO_Init+0x21c>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	f002 0203 	and.w	r2, r2, #3
 8004e22:	0092      	lsls	r2, r2, #2
 8004e24:	4093      	lsls	r3, r2
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e2c:	4935      	ldr	r1, [pc, #212]	@ (8004f04 <HAL_GPIO_Init+0x304>)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	089b      	lsrs	r3, r3, #2
 8004e32:	3302      	adds	r3, #2
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e5e:	4a31      	ldr	r2, [pc, #196]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e64:	4b2f      	ldr	r3, [pc, #188]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e88:	4a26      	ldr	r2, [pc, #152]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e8e:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004edc:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	f67f ae96 	bls.w	8004c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	3724      	adds	r7, #36	@ 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	40013800 	.word	0x40013800
 8004f08:	40020000 	.word	0x40020000
 8004f0c:	40020400 	.word	0x40020400
 8004f10:	40020800 	.word	0x40020800
 8004f14:	40020c00 	.word	0x40020c00
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40021400 	.word	0x40021400
 8004f20:	40021800 	.word	0x40021800
 8004f24:	40013c00 	.word	0x40013c00

08004f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f38:	787b      	ldrb	r3, [r7, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f44:	e003      	b.n	8004f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f46:	887b      	ldrh	r3, [r7, #2]
 8004f48:	041a      	lsls	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	619a      	str	r2, [r3, #24]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0cc      	b.n	800510a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b68      	ldr	r3, [pc, #416]	@ (8005114 <HAL_RCC_ClockConfig+0x1b8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d90c      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b65      	ldr	r3, [pc, #404]	@ (8005114 <HAL_RCC_ClockConfig+0x1b8>)
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b63      	ldr	r3, [pc, #396]	@ (8005114 <HAL_RCC_ClockConfig+0x1b8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0b8      	b.n	800510a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb0:	4b59      	ldr	r3, [pc, #356]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	4a58      	ldr	r2, [pc, #352]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc8:	4b53      	ldr	r3, [pc, #332]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4a52      	ldr	r2, [pc, #328]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd4:	4b50      	ldr	r3, [pc, #320]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	494d      	ldr	r1, [pc, #308]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d044      	beq.n	800507c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b47      	ldr	r3, [pc, #284]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d119      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e07f      	b.n	800510a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d003      	beq.n	800501a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005016:	2b03      	cmp	r3, #3
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501a:	4b3f      	ldr	r3, [pc, #252]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e06f      	b.n	800510a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502a:	4b3b      	ldr	r3, [pc, #236]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e067      	b.n	800510a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4934      	ldr	r1, [pc, #208]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800504c:	f7fe fb7a 	bl	8003744 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fe fb76 	bl	8003744 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e04f      	b.n	800510a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b2b      	ldr	r3, [pc, #172]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507c:	4b25      	ldr	r3, [pc, #148]	@ (8005114 <HAL_RCC_ClockConfig+0x1b8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d20c      	bcs.n	80050a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508a:	4b22      	ldr	r3, [pc, #136]	@ (8005114 <HAL_RCC_ClockConfig+0x1b8>)
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b20      	ldr	r3, [pc, #128]	@ (8005114 <HAL_RCC_ClockConfig+0x1b8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e032      	b.n	800510a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b0:	4b19      	ldr	r3, [pc, #100]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4916      	ldr	r1, [pc, #88]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	490e      	ldr	r1, [pc, #56]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050e2:	f000 f887 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	490a      	ldr	r1, [pc, #40]	@ (800511c <HAL_RCC_ClockConfig+0x1c0>)
 80050f4:	5ccb      	ldrb	r3, [r1, r3]
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	4a09      	ldr	r2, [pc, #36]	@ (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050fe:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_ClockConfig+0x1c8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe f87c 	bl	8003200 <HAL_InitTick>

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40023c00 	.word	0x40023c00
 8005118:	40023800 	.word	0x40023800
 800511c:	0801ad4c 	.word	0x0801ad4c
 8005120:	20000014 	.word	0x20000014
 8005124:	20000018 	.word	0x20000018

08005128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800512c:	4b03      	ldr	r3, [pc, #12]	@ (800513c <HAL_RCC_GetHCLKFreq+0x14>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000014 	.word	0x20000014

08005140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005144:	f7ff fff0 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0a9b      	lsrs	r3, r3, #10
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4903      	ldr	r1, [pc, #12]	@ (8005164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40023800 	.word	0x40023800
 8005164:	0801ad5c 	.word	0x0801ad5c

08005168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800516c:	f7ff ffdc 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005170:	4602      	mov	r2, r0
 8005172:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	0b5b      	lsrs	r3, r3, #13
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	4903      	ldr	r1, [pc, #12]	@ (800518c <HAL_RCC_GetPCLK2Freq+0x24>)
 800517e:	5ccb      	ldrb	r3, [r1, r3]
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005184:	4618      	mov	r0, r3
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40023800 	.word	0x40023800
 800518c:	0801ad5c 	.word	0x0801ad5c

08005190 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	220f      	movs	r2, #15
 800519e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051a0:	4b12      	ldr	r3, [pc, #72]	@ (80051ec <HAL_RCC_GetClockConfig+0x5c>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0203 	and.w	r2, r3, #3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051ac:	4b0f      	ldr	r3, [pc, #60]	@ (80051ec <HAL_RCC_GetClockConfig+0x5c>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051b8:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <HAL_RCC_GetClockConfig+0x5c>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <HAL_RCC_GetClockConfig+0x5c>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	08db      	lsrs	r3, r3, #3
 80051ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051d2:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <HAL_RCC_GetClockConfig+0x60>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 020f 	and.w	r2, r3, #15
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	601a      	str	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800
 80051f0:	40023c00 	.word	0x40023c00

080051f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b0ae      	sub	sp, #184	@ 0xb8
 80051fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800521a:	4bcb      	ldr	r3, [pc, #812]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b0c      	cmp	r3, #12
 8005224:	f200 8206 	bhi.w	8005634 <HAL_RCC_GetSysClockFreq+0x440>
 8005228:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <HAL_RCC_GetSysClockFreq+0x3c>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005265 	.word	0x08005265
 8005234:	08005635 	.word	0x08005635
 8005238:	08005635 	.word	0x08005635
 800523c:	08005635 	.word	0x08005635
 8005240:	0800526d 	.word	0x0800526d
 8005244:	08005635 	.word	0x08005635
 8005248:	08005635 	.word	0x08005635
 800524c:	08005635 	.word	0x08005635
 8005250:	08005275 	.word	0x08005275
 8005254:	08005635 	.word	0x08005635
 8005258:	08005635 	.word	0x08005635
 800525c:	08005635 	.word	0x08005635
 8005260:	08005465 	.word	0x08005465
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005264:	4bb9      	ldr	r3, [pc, #740]	@ (800554c <HAL_RCC_GetSysClockFreq+0x358>)
 8005266:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800526a:	e1e7      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800526c:	4bb8      	ldr	r3, [pc, #736]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x35c>)
 800526e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005272:	e1e3      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005274:	4bb4      	ldr	r3, [pc, #720]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800527c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005280:	4bb1      	ldr	r3, [pc, #708]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d071      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528c:	4bae      	ldr	r3, [pc, #696]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	099b      	lsrs	r3, r3, #6
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005298:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800529c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052b2:	4622      	mov	r2, r4
 80052b4:	462b      	mov	r3, r5
 80052b6:	f04f 0000 	mov.w	r0, #0
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	0159      	lsls	r1, r3, #5
 80052c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c4:	0150      	lsls	r0, r2, #5
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4621      	mov	r1, r4
 80052cc:	1a51      	subs	r1, r2, r1
 80052ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80052d0:	4629      	mov	r1, r5
 80052d2:	eb63 0301 	sbc.w	r3, r3, r1
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80052e4:	4649      	mov	r1, r9
 80052e6:	018b      	lsls	r3, r1, #6
 80052e8:	4641      	mov	r1, r8
 80052ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ee:	4641      	mov	r1, r8
 80052f0:	018a      	lsls	r2, r1, #6
 80052f2:	4641      	mov	r1, r8
 80052f4:	1a51      	subs	r1, r2, r1
 80052f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052f8:	4649      	mov	r1, r9
 80052fa:	eb63 0301 	sbc.w	r3, r3, r1
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800530c:	4649      	mov	r1, r9
 800530e:	00cb      	lsls	r3, r1, #3
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005316:	4641      	mov	r1, r8
 8005318:	00ca      	lsls	r2, r1, #3
 800531a:	4610      	mov	r0, r2
 800531c:	4619      	mov	r1, r3
 800531e:	4603      	mov	r3, r0
 8005320:	4622      	mov	r2, r4
 8005322:	189b      	adds	r3, r3, r2
 8005324:	633b      	str	r3, [r7, #48]	@ 0x30
 8005326:	462b      	mov	r3, r5
 8005328:	460a      	mov	r2, r1
 800532a:	eb42 0303 	adc.w	r3, r2, r3
 800532e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800533c:	4629      	mov	r1, r5
 800533e:	024b      	lsls	r3, r1, #9
 8005340:	4621      	mov	r1, r4
 8005342:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005346:	4621      	mov	r1, r4
 8005348:	024a      	lsls	r2, r1, #9
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005358:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800535c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005360:	f7fb fb1c 	bl	800099c <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800536e:	e067      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005370:	4b75      	ldr	r3, [pc, #468]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800537c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005380:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	67bb      	str	r3, [r7, #120]	@ 0x78
 800538a:	2300      	movs	r3, #0
 800538c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800538e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f04f 0000 	mov.w	r0, #0
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	0159      	lsls	r1, r3, #5
 80053a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a4:	0150      	lsls	r0, r2, #5
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4621      	mov	r1, r4
 80053ac:	1a51      	subs	r1, r2, r1
 80053ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80053b0:	4629      	mov	r1, r5
 80053b2:	eb63 0301 	sbc.w	r3, r3, r1
 80053b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80053c4:	4649      	mov	r1, r9
 80053c6:	018b      	lsls	r3, r1, #6
 80053c8:	4641      	mov	r1, r8
 80053ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ce:	4641      	mov	r1, r8
 80053d0:	018a      	lsls	r2, r1, #6
 80053d2:	4641      	mov	r1, r8
 80053d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80053d8:	4649      	mov	r1, r9
 80053da:	eb63 0b01 	sbc.w	fp, r3, r1
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f2:	4692      	mov	sl, r2
 80053f4:	469b      	mov	fp, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	eb1a 0303 	adds.w	r3, sl, r3
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	462b      	mov	r3, r5
 8005400:	eb4b 0303 	adc.w	r3, fp, r3
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005412:	4629      	mov	r1, r5
 8005414:	028b      	lsls	r3, r1, #10
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800541c:	4621      	mov	r1, r4
 800541e:	028a      	lsls	r2, r1, #10
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005428:	2200      	movs	r2, #0
 800542a:	673b      	str	r3, [r7, #112]	@ 0x70
 800542c:	677a      	str	r2, [r7, #116]	@ 0x74
 800542e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005432:	f7fb fab3 	bl	800099c <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4613      	mov	r3, r2
 800543c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005440:	4b41      	ldr	r3, [pc, #260]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	3301      	adds	r3, #1
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005462:	e0eb      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005464:	4b38      	ldr	r3, [pc, #224]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800546c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005470:	4b35      	ldr	r3, [pc, #212]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d06b      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547c:	4b32      	ldr	r3, [pc, #200]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x354>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	099b      	lsrs	r3, r3, #6
 8005482:	2200      	movs	r2, #0
 8005484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005486:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005490:	2300      	movs	r3, #0
 8005492:	667b      	str	r3, [r7, #100]	@ 0x64
 8005494:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005498:	4622      	mov	r2, r4
 800549a:	462b      	mov	r3, r5
 800549c:	f04f 0000 	mov.w	r0, #0
 80054a0:	f04f 0100 	mov.w	r1, #0
 80054a4:	0159      	lsls	r1, r3, #5
 80054a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054aa:	0150      	lsls	r0, r2, #5
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4621      	mov	r1, r4
 80054b2:	1a51      	subs	r1, r2, r1
 80054b4:	61b9      	str	r1, [r7, #24]
 80054b6:	4629      	mov	r1, r5
 80054b8:	eb63 0301 	sbc.w	r3, r3, r1
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80054ca:	4659      	mov	r1, fp
 80054cc:	018b      	lsls	r3, r1, #6
 80054ce:	4651      	mov	r1, sl
 80054d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054d4:	4651      	mov	r1, sl
 80054d6:	018a      	lsls	r2, r1, #6
 80054d8:	4651      	mov	r1, sl
 80054da:	ebb2 0801 	subs.w	r8, r2, r1
 80054de:	4659      	mov	r1, fp
 80054e0:	eb63 0901 	sbc.w	r9, r3, r1
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054f8:	4690      	mov	r8, r2
 80054fa:	4699      	mov	r9, r3
 80054fc:	4623      	mov	r3, r4
 80054fe:	eb18 0303 	adds.w	r3, r8, r3
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	462b      	mov	r3, r5
 8005506:	eb49 0303 	adc.w	r3, r9, r3
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005518:	4629      	mov	r1, r5
 800551a:	024b      	lsls	r3, r1, #9
 800551c:	4621      	mov	r1, r4
 800551e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005522:	4621      	mov	r1, r4
 8005524:	024a      	lsls	r2, r1, #9
 8005526:	4610      	mov	r0, r2
 8005528:	4619      	mov	r1, r3
 800552a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800552e:	2200      	movs	r2, #0
 8005530:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005532:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005534:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005538:	f7fb fa30 	bl	800099c <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4613      	mov	r3, r2
 8005542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005546:	e065      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x420>
 8005548:	40023800 	.word	0x40023800
 800554c:	00f42400 	.word	0x00f42400
 8005550:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005554:	4b3d      	ldr	r3, [pc, #244]	@ (800564c <HAL_RCC_GetSysClockFreq+0x458>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	2200      	movs	r2, #0
 800555c:	4618      	mov	r0, r3
 800555e:	4611      	mov	r1, r2
 8005560:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005564:	653b      	str	r3, [r7, #80]	@ 0x50
 8005566:	2300      	movs	r3, #0
 8005568:	657b      	str	r3, [r7, #84]	@ 0x54
 800556a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800556e:	4642      	mov	r2, r8
 8005570:	464b      	mov	r3, r9
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	0159      	lsls	r1, r3, #5
 800557c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005580:	0150      	lsls	r0, r2, #5
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4641      	mov	r1, r8
 8005588:	1a51      	subs	r1, r2, r1
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	4649      	mov	r1, r9
 800558e:	eb63 0301 	sbc.w	r3, r3, r1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80055a0:	4659      	mov	r1, fp
 80055a2:	018b      	lsls	r3, r1, #6
 80055a4:	4651      	mov	r1, sl
 80055a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055aa:	4651      	mov	r1, sl
 80055ac:	018a      	lsls	r2, r1, #6
 80055ae:	4651      	mov	r1, sl
 80055b0:	1a54      	subs	r4, r2, r1
 80055b2:	4659      	mov	r1, fp
 80055b4:	eb63 0501 	sbc.w	r5, r3, r1
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	00eb      	lsls	r3, r5, #3
 80055c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055c6:	00e2      	lsls	r2, r4, #3
 80055c8:	4614      	mov	r4, r2
 80055ca:	461d      	mov	r5, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	18e3      	adds	r3, r4, r3
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	464b      	mov	r3, r9
 80055d4:	eb45 0303 	adc.w	r3, r5, r3
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055e6:	4629      	mov	r1, r5
 80055e8:	028b      	lsls	r3, r1, #10
 80055ea:	4621      	mov	r1, r4
 80055ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f0:	4621      	mov	r1, r4
 80055f2:	028a      	lsls	r2, r1, #10
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055fc:	2200      	movs	r2, #0
 80055fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005600:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005602:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005606:	f7fb f9c9 	bl	800099c <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4613      	mov	r3, r2
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005614:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <HAL_RCC_GetSysClockFreq+0x458>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	0f1b      	lsrs	r3, r3, #28
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005632:	e003      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005634:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800563a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005640:	4618      	mov	r0, r3
 8005642:	37b8      	adds	r7, #184	@ 0xb8
 8005644:	46bd      	mov	sp, r7
 8005646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	00f42400 	.word	0x00f42400

08005654 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e28d      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8083 	beq.w	800577a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005674:	4b94      	ldr	r3, [pc, #592]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b04      	cmp	r3, #4
 800567e:	d019      	beq.n	80056b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005680:	4b91      	ldr	r3, [pc, #580]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 030c 	and.w	r3, r3, #12
        || \
 8005688:	2b08      	cmp	r3, #8
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800568c:	4b8e      	ldr	r3, [pc, #568]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005698:	d00c      	beq.n	80056b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800569a:	4b8b      	ldr	r3, [pc, #556]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80056a2:	2b0c      	cmp	r3, #12
 80056a4:	d112      	bne.n	80056cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056a6:	4b88      	ldr	r3, [pc, #544]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056b2:	d10b      	bne.n	80056cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b4:	4b84      	ldr	r3, [pc, #528]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d05b      	beq.n	8005778 <HAL_RCC_OscConfig+0x124>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d157      	bne.n	8005778 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e25a      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d4:	d106      	bne.n	80056e4 <HAL_RCC_OscConfig+0x90>
 80056d6:	4b7c      	ldr	r3, [pc, #496]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7b      	ldr	r2, [pc, #492]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e01d      	b.n	8005720 <HAL_RCC_OscConfig+0xcc>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0xb4>
 80056ee:	4b76      	ldr	r3, [pc, #472]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a75      	ldr	r2, [pc, #468]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b73      	ldr	r3, [pc, #460]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a72      	ldr	r2, [pc, #456]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0xcc>
 8005708:	4b6f      	ldr	r3, [pc, #444]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a6e      	ldr	r2, [pc, #440]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800570e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4b6c      	ldr	r3, [pc, #432]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6b      	ldr	r2, [pc, #428]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800571a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800571e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fe f80c 	bl	8003744 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005730:	f7fe f808 	bl	8003744 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	@ 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e21f      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	4b61      	ldr	r3, [pc, #388]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0xdc>
 800574e:	e014      	b.n	800577a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fd fff8 	bl	8003744 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005758:	f7fd fff4 	bl	8003744 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	@ 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e20b      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576a:	4b57      	ldr	r3, [pc, #348]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x104>
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d06f      	beq.n	8005866 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005786:	4b50      	ldr	r3, [pc, #320]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	2b00      	cmp	r3, #0
 8005790:	d017      	beq.n	80057c2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005792:	4b4d      	ldr	r3, [pc, #308]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
        || \
 800579a:	2b08      	cmp	r3, #8
 800579c:	d105      	bne.n	80057aa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800579e:	4b4a      	ldr	r3, [pc, #296]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057aa:	4b47      	ldr	r3, [pc, #284]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d11c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057b6:	4b44      	ldr	r3, [pc, #272]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d116      	bne.n	80057f0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c2:	4b41      	ldr	r3, [pc, #260]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_RCC_OscConfig+0x186>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e1d3      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057da:	4b3b      	ldr	r3, [pc, #236]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4937      	ldr	r1, [pc, #220]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	e03a      	b.n	8005866 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f8:	4b34      	ldr	r3, [pc, #208]	@ (80058cc <HAL_RCC_OscConfig+0x278>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fd ffa1 	bl	8003744 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005806:	f7fd ff9d 	bl	8003744 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e1b4      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	4b2b      	ldr	r3, [pc, #172]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005824:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4925      	ldr	r1, [pc, #148]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
 8005838:	e015      	b.n	8005866 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583a:	4b24      	ldr	r3, [pc, #144]	@ (80058cc <HAL_RCC_OscConfig+0x278>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fd ff80 	bl	8003744 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005848:	f7fd ff7c 	bl	8003744 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e193      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d036      	beq.n	80058e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d016      	beq.n	80058a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587a:	4b15      	ldr	r3, [pc, #84]	@ (80058d0 <HAL_RCC_OscConfig+0x27c>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fd ff60 	bl	8003744 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005888:	f7fd ff5c 	bl	8003744 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e173      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <HAL_RCC_OscConfig+0x274>)
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x234>
 80058a6:	e01b      	b.n	80058e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a8:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <HAL_RCC_OscConfig+0x27c>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ae:	f7fd ff49 	bl	8003744 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b4:	e00e      	b.n	80058d4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b6:	f7fd ff45 	bl	8003744 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d907      	bls.n	80058d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e15c      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
 80058c8:	40023800 	.word	0x40023800
 80058cc:	42470000 	.word	0x42470000
 80058d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d4:	4b8a      	ldr	r3, [pc, #552]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80058d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ea      	bne.n	80058b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8097 	beq.w	8005a1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f2:	4b83      	ldr	r3, [pc, #524]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	4b7f      	ldr	r3, [pc, #508]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	4a7e      	ldr	r2, [pc, #504]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800590c:	6413      	str	r3, [r2, #64]	@ 0x40
 800590e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591e:	4b79      	ldr	r3, [pc, #484]	@ (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d118      	bne.n	800595c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592a:	4b76      	ldr	r3, [pc, #472]	@ (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a75      	ldr	r2, [pc, #468]	@ (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005936:	f7fd ff05 	bl	8003744 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593e:	f7fd ff01 	bl	8003744 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e118      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	4b6c      	ldr	r3, [pc, #432]	@ (8005b04 <HAL_RCC_OscConfig+0x4b0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d106      	bne.n	8005972 <HAL_RCC_OscConfig+0x31e>
 8005964:	4b66      	ldr	r3, [pc, #408]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005968:	4a65      	ldr	r2, [pc, #404]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005970:	e01c      	b.n	80059ac <HAL_RCC_OscConfig+0x358>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b05      	cmp	r3, #5
 8005978:	d10c      	bne.n	8005994 <HAL_RCC_OscConfig+0x340>
 800597a:	4b61      	ldr	r3, [pc, #388]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597e:	4a60      	ldr	r2, [pc, #384]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005980:	f043 0304 	orr.w	r3, r3, #4
 8005984:	6713      	str	r3, [r2, #112]	@ 0x70
 8005986:	4b5e      	ldr	r3, [pc, #376]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	4a5d      	ldr	r2, [pc, #372]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	6713      	str	r3, [r2, #112]	@ 0x70
 8005992:	e00b      	b.n	80059ac <HAL_RCC_OscConfig+0x358>
 8005994:	4b5a      	ldr	r3, [pc, #360]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005998:	4a59      	ldr	r2, [pc, #356]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 800599a:	f023 0301 	bic.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a0:	4b57      	ldr	r3, [pc, #348]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a4:	4a56      	ldr	r2, [pc, #344]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80059a6:	f023 0304 	bic.w	r3, r3, #4
 80059aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d015      	beq.n	80059e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fd fec6 	bl	8003744 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ba:	e00a      	b.n	80059d2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059bc:	f7fd fec2 	bl	8003744 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e0d7      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0ee      	beq.n	80059bc <HAL_RCC_OscConfig+0x368>
 80059de:	e014      	b.n	8005a0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fd feb0 	bl	8003744 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e8:	f7fd feac 	bl	8003744 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0c1      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fe:	4b40      	ldr	r3, [pc, #256]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ee      	bne.n	80059e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a10:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	4a3a      	ldr	r2, [pc, #232]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80ad 	beq.w	8005b80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a26:	4b36      	ldr	r3, [pc, #216]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d060      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d145      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <HAL_RCC_OscConfig+0x4b4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd fe80 	bl	8003744 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fd fe7c 	bl	8003744 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e093      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	4b29      	ldr	r3, [pc, #164]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	061b      	lsls	r3, r3, #24
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	491b      	ldr	r1, [pc, #108]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a98:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <HAL_RCC_OscConfig+0x4b4>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fd fe51 	bl	8003744 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7fd fe4d 	bl	8003744 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e064      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab8:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x452>
 8005ac4:	e05c      	b.n	8005b80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac6:	4b10      	ldr	r3, [pc, #64]	@ (8005b08 <HAL_RCC_OscConfig+0x4b4>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fd fe3a 	bl	8003744 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad4:	f7fd fe36 	bl	8003744 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e04d      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <HAL_RCC_OscConfig+0x4ac>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x480>
 8005af2:	e045      	b.n	8005b80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e040      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40007000 	.word	0x40007000
 8005b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005b8c <HAL_RCC_OscConfig+0x538>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d030      	beq.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d129      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d122      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d119      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	3b01      	subs	r3, #1
 8005b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d10f      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023800 	.word	0x40023800

08005b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e041      	b.n	8005c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fd f906 	bl	8002dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f000 fd96 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e04e      	b.n	8005ce6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a23      	ldr	r2, [pc, #140]	@ (8005cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d022      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c72:	d01d      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d018      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a19      	ldr	r2, [pc, #100]	@ (8005d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d111      	bne.n	8005cd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d010      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	e007      	b.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40010400 	.word	0x40010400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40001800 	.word	0x40001800

08005d10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e041      	b.n	8005da6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f839 	bl	8005dae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f000 fcd6 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <HAL_TIM_PWM_Start+0x24>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e022      	b.n	8005e2e <HAL_TIM_PWM_Start+0x6a>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d109      	bne.n	8005e02 <HAL_TIM_PWM_Start+0x3e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	bf14      	ite	ne
 8005dfa:	2301      	movne	r3, #1
 8005dfc:	2300      	moveq	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	e015      	b.n	8005e2e <HAL_TIM_PWM_Start+0x6a>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d109      	bne.n	8005e1c <HAL_TIM_PWM_Start+0x58>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	bf14      	ite	ne
 8005e14:	2301      	movne	r3, #1
 8005e16:	2300      	moveq	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	e008      	b.n	8005e2e <HAL_TIM_PWM_Start+0x6a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	bf14      	ite	ne
 8005e28:	2301      	movne	r3, #1
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e07c      	b.n	8005f30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <HAL_TIM_PWM_Start+0x82>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e44:	e013      	b.n	8005e6e <HAL_TIM_PWM_Start+0xaa>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d104      	bne.n	8005e56 <HAL_TIM_PWM_Start+0x92>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e54:	e00b      	b.n	8005e6e <HAL_TIM_PWM_Start+0xaa>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d104      	bne.n	8005e66 <HAL_TIM_PWM_Start+0xa2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e64:	e003      	b.n	8005e6e <HAL_TIM_PWM_Start+0xaa>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2201      	movs	r2, #1
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 ff32 	bl	8006ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <HAL_TIM_PWM_Start+0x174>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_PWM_Start+0xcc>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005f3c <HAL_TIM_PWM_Start+0x178>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_PWM_Start+0xd0>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <HAL_TIM_PWM_Start+0xd2>
 8005e94:	2300      	movs	r3, #0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a22      	ldr	r2, [pc, #136]	@ (8005f38 <HAL_TIM_PWM_Start+0x174>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d022      	beq.n	8005efa <HAL_TIM_PWM_Start+0x136>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ebc:	d01d      	beq.n	8005efa <HAL_TIM_PWM_Start+0x136>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8005f40 <HAL_TIM_PWM_Start+0x17c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d018      	beq.n	8005efa <HAL_TIM_PWM_Start+0x136>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f44 <HAL_TIM_PWM_Start+0x180>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <HAL_TIM_PWM_Start+0x136>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f48 <HAL_TIM_PWM_Start+0x184>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00e      	beq.n	8005efa <HAL_TIM_PWM_Start+0x136>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <HAL_TIM_PWM_Start+0x178>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_TIM_PWM_Start+0x136>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <HAL_TIM_PWM_Start+0x188>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_TIM_PWM_Start+0x136>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	@ (8005f50 <HAL_TIM_PWM_Start+0x18c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d111      	bne.n	8005f1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b06      	cmp	r3, #6
 8005f0a:	d010      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1c:	e007      	b.n	8005f2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40001800 	.word	0x40001800

08005f54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e097      	b.n	8006098 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fc fdeb 	bl	8002b58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f000 fba9 	bl	8006700 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ff4:	f023 030c 	bic.w	r3, r3, #12
 8005ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006000:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	4313      	orrs	r3, r2
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	011a      	lsls	r2, r3, #4
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	031b      	lsls	r3, r3, #12
 8006024:	4313      	orrs	r3, r2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	4313      	orrs	r3, r2
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d110      	bne.n	80060f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d102      	bne.n	80060dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060d6:	7b7b      	ldrb	r3, [r7, #13]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d001      	beq.n	80060e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e069      	b.n	80061b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f0:	e031      	b.n	8006156 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d110      	bne.n	800611a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d102      	bne.n	8006104 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060fe:	7b3b      	ldrb	r3, [r7, #12]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d001      	beq.n	8006108 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e055      	b.n	80061b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006118:	e01d      	b.n	8006156 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d108      	bne.n	8006132 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d105      	bne.n	8006132 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006126:	7b7b      	ldrb	r3, [r7, #13]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d102      	bne.n	8006132 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800612c:	7b3b      	ldrb	r3, [r7, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e03e      	b.n	80061b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_TIM_Encoder_Start+0xc4>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b04      	cmp	r3, #4
 8006160:	d008      	beq.n	8006174 <HAL_TIM_Encoder_Start+0xd4>
 8006162:	e00f      	b.n	8006184 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2201      	movs	r2, #1
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fdb7 	bl	8006ce0 <TIM_CCxChannelCmd>
      break;
 8006172:	e016      	b.n	80061a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2201      	movs	r2, #1
 800617a:	2104      	movs	r1, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fdaf 	bl	8006ce0 <TIM_CCxChannelCmd>
      break;
 8006182:	e00e      	b.n	80061a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2201      	movs	r2, #1
 800618a:	2100      	movs	r1, #0
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fda7 	bl	8006ce0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	2104      	movs	r1, #4
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fda0 	bl	8006ce0 <TIM_CCxChannelCmd>
      break;
 80061a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0201 	orr.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d020      	beq.n	8006220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01b      	beq.n	8006220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0202 	mvn.w	r2, #2
 80061f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa5b 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fa4d 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa5e 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d020      	beq.n	800626c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01b      	beq.n	800626c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0204 	mvn.w	r2, #4
 800623c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa35 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa27 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fa38 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d020      	beq.n	80062b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01b      	beq.n	80062b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0208 	mvn.w	r2, #8
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2204      	movs	r2, #4
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa0f 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa01 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa12 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d020      	beq.n	8006304 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01b      	beq.n	8006304 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0210 	mvn.w	r2, #16
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2208      	movs	r2, #8
 80062da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f9e9 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f9db 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f9ec 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0201 	mvn.w	r2, #1
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fc f956 	bl	80025d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fd76 	bl	8006e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f9bd 	bl	80066ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00c      	beq.n	8006394 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0220 	mvn.w	r2, #32
 800638c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fd48 	bl	8006e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e0ae      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	f200 809f 	bhi.w	8006508 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063ca:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	08006405 	.word	0x08006405
 80063d4:	08006509 	.word	0x08006509
 80063d8:	08006509 	.word	0x08006509
 80063dc:	08006509 	.word	0x08006509
 80063e0:	08006445 	.word	0x08006445
 80063e4:	08006509 	.word	0x08006509
 80063e8:	08006509 	.word	0x08006509
 80063ec:	08006509 	.word	0x08006509
 80063f0:	08006487 	.word	0x08006487
 80063f4:	08006509 	.word	0x08006509
 80063f8:	08006509 	.word	0x08006509
 80063fc:	08006509 	.word	0x08006509
 8006400:	080064c7 	.word	0x080064c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fa1e 	bl	800684c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0208 	orr.w	r2, r2, #8
 800641e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0204 	bic.w	r2, r2, #4
 800642e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6999      	ldr	r1, [r3, #24]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	619a      	str	r2, [r3, #24]
      break;
 8006442:	e064      	b.n	800650e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fa6e 	bl	800692c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800645e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800646e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6999      	ldr	r1, [r3, #24]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	021a      	lsls	r2, r3, #8
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	619a      	str	r2, [r3, #24]
      break;
 8006484:	e043      	b.n	800650e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fac3 	bl	8006a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0208 	orr.w	r2, r2, #8
 80064a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0204 	bic.w	r2, r2, #4
 80064b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69d9      	ldr	r1, [r3, #28]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	61da      	str	r2, [r3, #28]
      break;
 80064c4:	e023      	b.n	800650e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fb17 	bl	8006b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69d9      	ldr	r1, [r3, #28]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	021a      	lsls	r2, r3, #8
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	61da      	str	r2, [r3, #28]
      break;
 8006506:	e002      	b.n	800650e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
      break;
 800650c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_TIM_ConfigClockSource+0x1c>
 8006538:	2302      	movs	r3, #2
 800653a:	e0b4      	b.n	80066a6 <HAL_TIM_ConfigClockSource+0x186>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800655a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006574:	d03e      	beq.n	80065f4 <HAL_TIM_ConfigClockSource+0xd4>
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800657a:	f200 8087 	bhi.w	800668c <HAL_TIM_ConfigClockSource+0x16c>
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006582:	f000 8086 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x172>
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800658a:	d87f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
 800658c:	2b70      	cmp	r3, #112	@ 0x70
 800658e:	d01a      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0xa6>
 8006590:	2b70      	cmp	r3, #112	@ 0x70
 8006592:	d87b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
 8006594:	2b60      	cmp	r3, #96	@ 0x60
 8006596:	d050      	beq.n	800663a <HAL_TIM_ConfigClockSource+0x11a>
 8006598:	2b60      	cmp	r3, #96	@ 0x60
 800659a:	d877      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
 800659c:	2b50      	cmp	r3, #80	@ 0x50
 800659e:	d03c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0xfa>
 80065a0:	2b50      	cmp	r3, #80	@ 0x50
 80065a2:	d873      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	2b40      	cmp	r3, #64	@ 0x40
 80065a6:	d058      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x13a>
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d86f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
 80065ac:	2b30      	cmp	r3, #48	@ 0x30
 80065ae:	d064      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15a>
 80065b0:	2b30      	cmp	r3, #48	@ 0x30
 80065b2:	d86b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d060      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15a>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d867      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05c      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15a>
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d05a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15a>
 80065c4:	e062      	b.n	800668c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065d6:	f000 fb63 	bl	8006ca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	609a      	str	r2, [r3, #8]
      break;
 80065f2:	e04f      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006604:	f000 fb4c 	bl	8006ca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006616:	609a      	str	r2, [r3, #8]
      break;
 8006618:	e03c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006626:	461a      	mov	r2, r3
 8006628:	f000 fac0 	bl	8006bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2150      	movs	r1, #80	@ 0x50
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fb19 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 8006638:	e02c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006646:	461a      	mov	r2, r3
 8006648:	f000 fadf 	bl	8006c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2160      	movs	r1, #96	@ 0x60
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fb09 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 8006658:	e01c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 faa0 	bl	8006bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2140      	movs	r1, #64	@ 0x40
 8006672:	4618      	mov	r0, r3
 8006674:	f000 faf9 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 8006678:	e00c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f000 faf0 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 800668a:	e003      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]
      break;
 8006690:	e000      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a43      	ldr	r2, [pc, #268]	@ (8006820 <TIM_Base_SetConfig+0x120>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a40      	ldr	r2, [pc, #256]	@ (8006824 <TIM_Base_SetConfig+0x124>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3f      	ldr	r2, [pc, #252]	@ (8006828 <TIM_Base_SetConfig+0x128>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3e      	ldr	r2, [pc, #248]	@ (800682c <TIM_Base_SetConfig+0x12c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a3d      	ldr	r2, [pc, #244]	@ (8006830 <TIM_Base_SetConfig+0x130>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d108      	bne.n	8006752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a32      	ldr	r2, [pc, #200]	@ (8006820 <TIM_Base_SetConfig+0x120>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02b      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006760:	d027      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2f      	ldr	r2, [pc, #188]	@ (8006824 <TIM_Base_SetConfig+0x124>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d023      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2e      	ldr	r2, [pc, #184]	@ (8006828 <TIM_Base_SetConfig+0x128>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d01f      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2d      	ldr	r2, [pc, #180]	@ (800682c <TIM_Base_SetConfig+0x12c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d01b      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2c      	ldr	r2, [pc, #176]	@ (8006830 <TIM_Base_SetConfig+0x130>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d017      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2b      	ldr	r2, [pc, #172]	@ (8006834 <TIM_Base_SetConfig+0x134>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <TIM_Base_SetConfig+0x138>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a29      	ldr	r2, [pc, #164]	@ (800683c <TIM_Base_SetConfig+0x13c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a28      	ldr	r2, [pc, #160]	@ (8006840 <TIM_Base_SetConfig+0x140>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a27      	ldr	r2, [pc, #156]	@ (8006844 <TIM_Base_SetConfig+0x144>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a26      	ldr	r2, [pc, #152]	@ (8006848 <TIM_Base_SetConfig+0x148>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d108      	bne.n	80067c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a0e      	ldr	r2, [pc, #56]	@ (8006820 <TIM_Base_SetConfig+0x120>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_Base_SetConfig+0xf2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a10      	ldr	r2, [pc, #64]	@ (8006830 <TIM_Base_SetConfig+0x130>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d103      	bne.n	80067fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f043 0204 	orr.w	r2, r3, #4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]
}
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40010000 	.word	0x40010000
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40010400 	.word	0x40010400
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800
 8006840:	40001800 	.word	0x40001800
 8006844:	40001c00 	.word	0x40001c00
 8006848:	40002000 	.word	0x40002000

0800684c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f023 0201 	bic.w	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f023 0302 	bic.w	r3, r3, #2
 8006894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a20      	ldr	r2, [pc, #128]	@ (8006924 <TIM_OC1_SetConfig+0xd8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC1_SetConfig+0x64>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006928 <TIM_OC1_SetConfig+0xdc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10c      	bne.n	80068ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0308 	bic.w	r3, r3, #8
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 0304 	bic.w	r3, r3, #4
 80068c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a15      	ldr	r2, [pc, #84]	@ (8006924 <TIM_OC1_SetConfig+0xd8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC1_SetConfig+0x8e>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a14      	ldr	r2, [pc, #80]	@ (8006928 <TIM_OC1_SetConfig+0xdc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d111      	bne.n	80068fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	621a      	str	r2, [r3, #32]
}
 8006918:	bf00      	nop
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40010000 	.word	0x40010000
 8006928:	40010400 	.word	0x40010400

0800692c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f023 0210 	bic.w	r2, r3, #16
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800695a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a22      	ldr	r2, [pc, #136]	@ (8006a10 <TIM_OC2_SetConfig+0xe4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC2_SetConfig+0x68>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a21      	ldr	r2, [pc, #132]	@ (8006a14 <TIM_OC2_SetConfig+0xe8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10d      	bne.n	80069b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a17      	ldr	r2, [pc, #92]	@ (8006a10 <TIM_OC2_SetConfig+0xe4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_OC2_SetConfig+0x94>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a16      	ldr	r2, [pc, #88]	@ (8006a14 <TIM_OC2_SetConfig+0xe8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d113      	bne.n	80069e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	621a      	str	r2, [r3, #32]
}
 8006a02:	bf00      	nop
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40010400 	.word	0x40010400

08006a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a21      	ldr	r2, [pc, #132]	@ (8006af8 <TIM_OC3_SetConfig+0xe0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_OC3_SetConfig+0x66>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a20      	ldr	r2, [pc, #128]	@ (8006afc <TIM_OC3_SetConfig+0xe4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d10d      	bne.n	8006a9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a16      	ldr	r2, [pc, #88]	@ (8006af8 <TIM_OC3_SetConfig+0xe0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d003      	beq.n	8006aaa <TIM_OC3_SetConfig+0x92>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <TIM_OC3_SetConfig+0xe4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d113      	bne.n	8006ad2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	621a      	str	r2, [r3, #32]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40010400 	.word	0x40010400

08006b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	031b      	lsls	r3, r3, #12
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a12      	ldr	r2, [pc, #72]	@ (8006ba4 <TIM_OC4_SetConfig+0xa4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_OC4_SetConfig+0x68>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a11      	ldr	r2, [pc, #68]	@ (8006ba8 <TIM_OC4_SetConfig+0xa8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d109      	bne.n	8006b7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	019b      	lsls	r3, r3, #6
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40010400 	.word	0x40010400

08006bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0201 	bic.w	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f023 030a 	bic.w	r3, r3, #10
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b087      	sub	sp, #28
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	f023 0210 	bic.w	r2, r3, #16
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	621a      	str	r2, [r3, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f043 0307 	orr.w	r3, r3, #7
 8006c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	021a      	lsls	r2, r3, #8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a1a      	ldr	r2, [r3, #32]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	fa01 f303 	lsl.w	r3, r1, r3
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e05a      	b.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a21      	ldr	r2, [pc, #132]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d022      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d90:	d01d      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1d      	ldr	r2, [pc, #116]	@ (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d018      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1a      	ldr	r2, [pc, #104]	@ (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00e      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a18      	ldr	r2, [pc, #96]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d009      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a17      	ldr	r2, [pc, #92]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d004      	beq.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d10c      	bne.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40010400 	.word	0x40010400
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40001800 	.word	0x40001800

08006e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e042      	b.n	8006ee4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fc f844 	bl	8002f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2224      	movs	r2, #36	@ 0x24
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fff5 	bl	8007e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695a      	ldr	r2, [r3, #20]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08c      	sub	sp, #48	@ 0x30
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d162      	bne.n	8006fcc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <HAL_UART_Transmit_DMA+0x26>
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e05b      	b.n	8006fce <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2221      	movs	r2, #33	@ 0x21
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3a:	4a27      	ldr	r2, [pc, #156]	@ (8006fd8 <HAL_UART_Transmit_DMA+0xec>)
 8006f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	4a26      	ldr	r2, [pc, #152]	@ (8006fdc <HAL_UART_Transmit_DMA+0xf0>)
 8006f44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	4a25      	ldr	r2, [pc, #148]	@ (8006fe0 <HAL_UART_Transmit_DMA+0xf4>)
 8006f4c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f52:	2200      	movs	r2, #0
 8006f54:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006f56:	f107 0308 	add.w	r3, r7, #8
 8006f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	f7fd faf3 	bl	8004558 <HAL_DMA_Start_IT>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e021      	b.n	8006fce <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3314      	adds	r3, #20
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006faa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3314      	adds	r3, #20
 8006fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6a39      	ldr	r1, [r7, #32]
 8006fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e000      	b.n	8006fce <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
  }
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3730      	adds	r7, #48	@ 0x30
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	080076fd 	.word	0x080076fd
 8006fdc:	08007797 	.word	0x08007797
 8006fe0:	0800791b 	.word	0x0800791b

08006fe4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d112      	bne.n	8007024 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_UART_Receive_DMA+0x26>
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e00b      	b.n	8007026 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	461a      	mov	r2, r3
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fcc8 	bl	80079b0 <UART_Start_Receive_DMA>
 8007020:	4603      	mov	r3, r0
 8007022:	e000      	b.n	8007026 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007024:	2302      	movs	r3, #2
  }
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b090      	sub	sp, #64	@ 0x40
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007036:	2300      	movs	r3, #0
 8007038:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007044:	2b80      	cmp	r3, #128	@ 0x80
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b21      	cmp	r3, #33	@ 0x21
 800705a:	d128      	bne.n	80070ae <HAL_UART_DMAStop+0x80>
 800705c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d025      	beq.n	80070ae <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	623b      	str	r3, [r7, #32]
   return(result);
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3314      	adds	r3, #20
 8007080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007082:	633a      	str	r2, [r7, #48]	@ 0x30
 8007084:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e5      	bne.n	8007062 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fd fab0 	bl	8004608 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fd27 	bl	8007afc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b8:	2b40      	cmp	r3, #64	@ 0x40
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b22      	cmp	r3, #34	@ 0x22
 80070ce:	d128      	bne.n	8007122 <HAL_UART_DMAStop+0xf4>
 80070d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d025      	beq.n	8007122 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070f6:	61fa      	str	r2, [r7, #28]
 80070f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	69b9      	ldr	r1, [r7, #24]
 80070fc:	69fa      	ldr	r2, [r7, #28]
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	617b      	str	r3, [r7, #20]
   return(result);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e5      	bne.n	80070d6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	4618      	mov	r0, r3
 8007118:	f7fd fa76 	bl	8004608 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fd15 	bl	8007b4c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3740      	adds	r7, #64	@ 0x40
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b0ba      	sub	sp, #232	@ 0xe8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007152:	2300      	movs	r3, #0
 8007154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007158:	2300      	movs	r3, #0
 800715a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800716a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10f      	bne.n	8007192 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_UART_IRQHandler+0x66>
 800717e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fdba 	bl	8007d04 <UART_Receive_IT>
      return;
 8007190:	e273      	b.n	800767a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80de 	beq.w	8007358 <HAL_UART_IRQHandler+0x22c>
 800719c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80d1 	beq.w	8007358 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <HAL_UART_IRQHandler+0xae>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d2:	f043 0201 	orr.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_UART_IRQHandler+0xd2>
 80071e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f6:	f043 0202 	orr.w	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <HAL_UART_IRQHandler+0xf6>
 800720a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721a:	f043 0204 	orr.w	r2, r3, #4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d011      	beq.n	8007252 <HAL_UART_IRQHandler+0x126>
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800723a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724a:	f043 0208 	orr.w	r2, r3, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 820a 	beq.w	8007670 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b00      	cmp	r3, #0
 8007266:	d008      	beq.n	800727a <HAL_UART_IRQHandler+0x14e>
 8007268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800726c:	f003 0320 	and.w	r3, r3, #32
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fd45 	bl	8007d04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007284:	2b40      	cmp	r3, #64	@ 0x40
 8007286:	bf0c      	ite	eq
 8007288:	2301      	moveq	r3, #1
 800728a:	2300      	movne	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <HAL_UART_IRQHandler+0x17a>
 800729e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d04f      	beq.n	8007346 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fc50 	bl	8007b4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b6:	2b40      	cmp	r3, #64	@ 0x40
 80072b8:	d141      	bne.n	800733e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3314      	adds	r3, #20
 80072e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1d9      	bne.n	80072ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d013      	beq.n	8007336 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007312:	4a8a      	ldr	r2, [pc, #552]	@ (800753c <HAL_UART_IRQHandler+0x410>)
 8007314:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731a:	4618      	mov	r0, r3
 800731c:	f7fd f9e4 	bl	80046e8 <HAL_DMA_Abort_IT>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d016      	beq.n	8007354 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007330:	4610      	mov	r0, r2
 8007332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	e00e      	b.n	8007354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9ca 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	e00a      	b.n	8007354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f9c6 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007344:	e006      	b.n	8007354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f9c2 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007352:	e18d      	b.n	8007670 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007354:	bf00      	nop
    return;
 8007356:	e18b      	b.n	8007670 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 8167 	bne.w	8007630 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8160 	beq.w	8007630 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8159 	beq.w	8007630 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739e:	2b40      	cmp	r3, #64	@ 0x40
 80073a0:	f040 80ce 	bne.w	8007540 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80a9 	beq.w	800750c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f080 80a2 	bcs.w	800750c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073da:	f000 8088 	beq.w	80074ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800740a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800740e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1d9      	bne.n	80073de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3314      	adds	r3, #20
 8007430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800743a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3314      	adds	r3, #20
 800744a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800744e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e1      	bne.n	800742a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3314      	adds	r3, #20
 800746c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3314      	adds	r3, #20
 8007486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800748a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800748c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e3      	bne.n	8007466 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	330c      	adds	r3, #12
 80074b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074be:	f023 0310 	bic.w	r3, r3, #16
 80074c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e3      	bne.n	80074ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fd f88d 	bl	8004608 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	b29b      	uxth	r3, r3
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8ed 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800750a:	e0b3      	b.n	8007674 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007510:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007514:	429a      	cmp	r2, r3
 8007516:	f040 80ad 	bne.w	8007674 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007524:	f040 80a6 	bne.w	8007674 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f8d5 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
      return;
 800753a:	e09b      	b.n	8007674 <HAL_UART_IRQHandler+0x548>
 800753c:	08007c13 	.word	0x08007c13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007548:	b29b      	uxth	r3, r3
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 808e 	beq.w	8007678 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800755c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8089 	beq.w	8007678 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800757c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800758a:	647a      	str	r2, [r7, #68]	@ 0x44
 800758c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e3      	bne.n	8007566 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3314      	adds	r3, #20
 80075a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	623b      	str	r3, [r7, #32]
   return(result);
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3314      	adds	r3, #20
 80075be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80075c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e3      	bne.n	800759e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0310 	bic.w	r3, r3, #16
 80075fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007608:	61fa      	str	r2, [r7, #28]
 800760a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	69b9      	ldr	r1, [r7, #24]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	617b      	str	r3, [r7, #20]
   return(result);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e3      	bne.n	80075e4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f85b 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800762e:	e023      	b.n	8007678 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007638:	2b00      	cmp	r3, #0
 800763a:	d009      	beq.n	8007650 <HAL_UART_IRQHandler+0x524>
 800763c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 faf3 	bl	8007c34 <UART_Transmit_IT>
    return;
 800764e:	e014      	b.n	800767a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00e      	beq.n	800767a <HAL_UART_IRQHandler+0x54e>
 800765c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d008      	beq.n	800767a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fb33 	bl	8007cd4 <UART_EndTransmit_IT>
    return;
 800766e:	e004      	b.n	800767a <HAL_UART_IRQHandler+0x54e>
    return;
 8007670:	bf00      	nop
 8007672:	e002      	b.n	800767a <HAL_UART_IRQHandler+0x54e>
      return;
 8007674:	bf00      	nop
 8007676:	e000      	b.n	800767a <HAL_UART_IRQHandler+0x54e>
      return;
 8007678:	bf00      	nop
  }
}
 800767a:	37e8      	adds	r7, #232	@ 0xe8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b090      	sub	sp, #64	@ 0x40
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007714:	2b00      	cmp	r3, #0
 8007716:	d137      	bne.n	8007788 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771a:	2200      	movs	r2, #0
 800771c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3314      	adds	r3, #20
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	623b      	str	r3, [r7, #32]
   return(result);
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007734:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800773e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007740:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e5      	bne.n	800771e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	60fb      	str	r3, [r7, #12]
   return(result);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
 800776a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007772:	61fa      	str	r2, [r7, #28]
 8007774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	69b9      	ldr	r1, [r7, #24]
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	617b      	str	r3, [r7, #20]
   return(result);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e5      	bne.n	8007752 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007786:	e002      	b.n	800778e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007788:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800778a:	f7ff ff79 	bl	8007680 <HAL_UART_TxCpltCallback>
}
 800778e:	bf00      	nop
 8007790:	3740      	adds	r7, #64	@ 0x40
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff ff75 	bl	8007694 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b09c      	sub	sp, #112	@ 0x70
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d172      	bne.n	80078b4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80077ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d0:	2200      	movs	r2, #0
 80077d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80077f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e5      	bne.n	80077d4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3314      	adds	r3, #20
 800780e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3314      	adds	r3, #20
 8007826:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007828:	647a      	str	r2, [r7, #68]	@ 0x44
 800782a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800782e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e5      	bne.n	8007808 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3314      	adds	r3, #20
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	623b      	str	r3, [r7, #32]
   return(result);
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007852:	663b      	str	r3, [r7, #96]	@ 0x60
 8007854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800785c:	633a      	str	r2, [r7, #48]	@ 0x30
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e5      	bne.n	800783c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007872:	2220      	movs	r2, #32
 8007874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800787a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787c:	2b01      	cmp	r3, #1
 800787e:	d119      	bne.n	80078b4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	330c      	adds	r3, #12
 800789e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078a0:	61fa      	str	r2, [r7, #28]
 80078a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	69b9      	ldr	r1, [r7, #24]
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	617b      	str	r3, [r7, #20]
   return(result);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e5      	bne.n	8007880 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078b6:	2200      	movs	r2, #0
 80078b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d106      	bne.n	80078d0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078c6:	4619      	mov	r1, r3
 80078c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078ca:	f7ff ff0b 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078ce:	e002      	b.n	80078d6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80078d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078d2:	f7ff fee9 	bl	80076a8 <HAL_UART_RxCpltCallback>
}
 80078d6:	bf00      	nop
 80078d8:	3770      	adds	r7, #112	@ 0x70
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d108      	bne.n	800790c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	b29b      	uxth	r3, r3
 8007902:	4619      	mov	r1, r3
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7ff feed 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800790a:	e002      	b.n	8007912 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f7ff fed5 	bl	80076bc <HAL_UART_RxHalfCpltCallback>
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007936:	2b80      	cmp	r3, #128	@ 0x80
 8007938:	bf0c      	ite	eq
 800793a:	2301      	moveq	r3, #1
 800793c:	2300      	movne	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b21      	cmp	r3, #33	@ 0x21
 800794c:	d108      	bne.n	8007960 <UART_DMAError+0x46>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2200      	movs	r2, #0
 8007958:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800795a:	68b8      	ldr	r0, [r7, #8]
 800795c:	f000 f8ce 	bl	8007afc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b22      	cmp	r3, #34	@ 0x22
 8007980:	d108      	bne.n	8007994 <UART_DMAError+0x7a>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800798e:	68b8      	ldr	r0, [r7, #8]
 8007990:	f000 f8dc 	bl	8007b4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007998:	f043 0210 	orr.w	r2, r3, #16
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a0:	68b8      	ldr	r0, [r7, #8]
 80079a2:	f7ff fe95 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b098      	sub	sp, #96	@ 0x60
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2222      	movs	r2, #34	@ 0x22
 80079d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079dc:	4a44      	ldr	r2, [pc, #272]	@ (8007af0 <UART_Start_Receive_DMA+0x140>)
 80079de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e4:	4a43      	ldr	r2, [pc, #268]	@ (8007af4 <UART_Start_Receive_DMA+0x144>)
 80079e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ec:	4a42      	ldr	r2, [pc, #264]	@ (8007af8 <UART_Start_Receive_DMA+0x148>)
 80079ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f4:	2200      	movs	r2, #0
 80079f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079f8:	f107 0308 	add.w	r3, r7, #8
 80079fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	f7fc fda2 	bl	8004558 <HAL_DMA_Start_IT>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d008      	beq.n	8007a2c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e05d      	b.n	8007ae8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	613b      	str	r3, [r7, #16]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	613b      	str	r3, [r7, #16]
 8007a40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d019      	beq.n	8007a7e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	330c      	adds	r3, #12
 8007a50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e5      	bne.n	8007a4a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3314      	adds	r3, #20
 8007a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e5      	bne.n	8007a7e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3314      	adds	r3, #20
 8007ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ad2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6a39      	ldr	r1, [r7, #32]
 8007ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e5      	bne.n	8007ab2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3760      	adds	r7, #96	@ 0x60
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	080077b3 	.word	0x080077b3
 8007af4:	080078df 	.word	0x080078df
 8007af8:	0800791b 	.word	0x0800791b

08007afc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b089      	sub	sp, #36	@ 0x24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	330c      	adds	r3, #12
 8007b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b1a:	61fb      	str	r3, [r7, #28]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	61ba      	str	r2, [r7, #24]
 8007b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6979      	ldr	r1, [r7, #20]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	613b      	str	r3, [r7, #16]
   return(result);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e5      	bne.n	8007b04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b40:	bf00      	nop
 8007b42:	3724      	adds	r7, #36	@ 0x24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b095      	sub	sp, #84	@ 0x54
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b74:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f023 0301 	bic.w	r3, r3, #1
 8007b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d119      	bne.n	8007bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f023 0310 	bic.w	r3, r3, #16
 8007bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	330c      	adds	r3, #12
 8007be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be4:	61ba      	str	r2, [r7, #24]
 8007be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6979      	ldr	r1, [r7, #20]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e5      	bne.n	8007bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c06:	bf00      	nop
 8007c08:	3754      	adds	r7, #84	@ 0x54
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fd52 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b21      	cmp	r3, #33	@ 0x21
 8007c46:	d13e      	bne.n	8007cc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c50:	d114      	bne.n	8007c7c <UART_Transmit_IT+0x48>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d110      	bne.n	8007c7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	1c9a      	adds	r2, r3, #2
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]
 8007c7a:	e008      	b.n	8007c8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	1c59      	adds	r1, r3, #1
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6211      	str	r1, [r2, #32]
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10f      	bne.n	8007cc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e000      	b.n	8007cc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cc6:	2302      	movs	r3, #2
  }
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fcc3 	bl	8007680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08c      	sub	sp, #48	@ 0x30
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b22      	cmp	r3, #34	@ 0x22
 8007d1e:	f040 80aa 	bne.w	8007e76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2a:	d115      	bne.n	8007d58 <UART_Receive_IT+0x54>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d111      	bne.n	8007d58 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d56:	e024      	b.n	8007da2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d66:	d007      	beq.n	8007d78 <UART_Receive_IT+0x74>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <UART_Receive_IT+0x82>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	e008      	b.n	8007d98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4619      	mov	r1, r3
 8007db0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d15d      	bne.n	8007e72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0220 	bic.w	r2, r2, #32
 8007dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695a      	ldr	r2, [r3, #20]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0201 	bic.w	r2, r2, #1
 8007de4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d135      	bne.n	8007e68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	613b      	str	r3, [r7, #16]
   return(result);
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f023 0310 	bic.w	r3, r3, #16
 8007e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e22:	623a      	str	r2, [r7, #32]
 8007e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	69f9      	ldr	r1, [r7, #28]
 8007e28:	6a3a      	ldr	r2, [r7, #32]
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e5      	bne.n	8007e02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d10a      	bne.n	8007e5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff fc3f 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
 8007e66:	e002      	b.n	8007e6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff fc1d 	bl	80076a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e002      	b.n	8007e78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e000      	b.n	8007e78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3730      	adds	r7, #48	@ 0x30
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e84:	b0c0      	sub	sp, #256	@ 0x100
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9c:	68d9      	ldr	r1, [r3, #12]
 8007e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	ea40 0301 	orr.w	r3, r0, r1
 8007ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ed8:	f021 010c 	bic.w	r1, r1, #12
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ee6:	430b      	orrs	r3, r1
 8007ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efa:	6999      	ldr	r1, [r3, #24]
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	ea40 0301 	orr.w	r3, r0, r1
 8007f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800814c <UART_SetConfig+0x2cc>)
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d005      	beq.n	8007f20 <UART_SetConfig+0xa0>
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8008150 <UART_SetConfig+0x2d0>)
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d104      	bne.n	8007f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f20:	f7fd f922 	bl	8005168 <HAL_RCC_GetPCLK2Freq>
 8007f24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f28:	e003      	b.n	8007f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f2a:	f7fd f909 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8007f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f3c:	f040 810c 	bne.w	8008158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	1891      	adds	r1, r2, r2
 8007f58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f5a:	415b      	adcs	r3, r3
 8007f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f62:	4621      	mov	r1, r4
 8007f64:	eb12 0801 	adds.w	r8, r2, r1
 8007f68:	4629      	mov	r1, r5
 8007f6a:	eb43 0901 	adc.w	r9, r3, r1
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f82:	4690      	mov	r8, r2
 8007f84:	4699      	mov	r9, r3
 8007f86:	4623      	mov	r3, r4
 8007f88:	eb18 0303 	adds.w	r3, r8, r3
 8007f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f90:	462b      	mov	r3, r5
 8007f92:	eb49 0303 	adc.w	r3, r9, r3
 8007f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fae:	460b      	mov	r3, r1
 8007fb0:	18db      	adds	r3, r3, r3
 8007fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	eb42 0303 	adc.w	r3, r2, r3
 8007fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007fc4:	f7f8 fcea 	bl	800099c <__aeabi_uldivmod>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4b61      	ldr	r3, [pc, #388]	@ (8008154 <UART_SetConfig+0x2d4>)
 8007fce:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	011c      	lsls	r4, r3, #4
 8007fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fe8:	4642      	mov	r2, r8
 8007fea:	464b      	mov	r3, r9
 8007fec:	1891      	adds	r1, r2, r2
 8007fee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ff0:	415b      	adcs	r3, r3
 8007ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8007ffe:	4649      	mov	r1, r9
 8008000:	eb43 0b01 	adc.w	fp, r3, r1
 8008004:	f04f 0200 	mov.w	r2, #0
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008018:	4692      	mov	sl, r2
 800801a:	469b      	mov	fp, r3
 800801c:	4643      	mov	r3, r8
 800801e:	eb1a 0303 	adds.w	r3, sl, r3
 8008022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008026:	464b      	mov	r3, r9
 8008028:	eb4b 0303 	adc.w	r3, fp, r3
 800802c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800803c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008044:	460b      	mov	r3, r1
 8008046:	18db      	adds	r3, r3, r3
 8008048:	643b      	str	r3, [r7, #64]	@ 0x40
 800804a:	4613      	mov	r3, r2
 800804c:	eb42 0303 	adc.w	r3, r2, r3
 8008050:	647b      	str	r3, [r7, #68]	@ 0x44
 8008052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800805a:	f7f8 fc9f 	bl	800099c <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4611      	mov	r1, r2
 8008064:	4b3b      	ldr	r3, [pc, #236]	@ (8008154 <UART_SetConfig+0x2d4>)
 8008066:	fba3 2301 	umull	r2, r3, r3, r1
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	2264      	movs	r2, #100	@ 0x64
 800806e:	fb02 f303 	mul.w	r3, r2, r3
 8008072:	1acb      	subs	r3, r1, r3
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800807a:	4b36      	ldr	r3, [pc, #216]	@ (8008154 <UART_SetConfig+0x2d4>)
 800807c:	fba3 2302 	umull	r2, r3, r3, r2
 8008080:	095b      	lsrs	r3, r3, #5
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008088:	441c      	add	r4, r3
 800808a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800808e:	2200      	movs	r2, #0
 8008090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008094:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800809c:	4642      	mov	r2, r8
 800809e:	464b      	mov	r3, r9
 80080a0:	1891      	adds	r1, r2, r2
 80080a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080a4:	415b      	adcs	r3, r3
 80080a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080ac:	4641      	mov	r1, r8
 80080ae:	1851      	adds	r1, r2, r1
 80080b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80080b2:	4649      	mov	r1, r9
 80080b4:	414b      	adcs	r3, r1
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	f04f 0300 	mov.w	r3, #0
 80080c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80080c4:	4659      	mov	r1, fp
 80080c6:	00cb      	lsls	r3, r1, #3
 80080c8:	4651      	mov	r1, sl
 80080ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ce:	4651      	mov	r1, sl
 80080d0:	00ca      	lsls	r2, r1, #3
 80080d2:	4610      	mov	r0, r2
 80080d4:	4619      	mov	r1, r3
 80080d6:	4603      	mov	r3, r0
 80080d8:	4642      	mov	r2, r8
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080e0:	464b      	mov	r3, r9
 80080e2:	460a      	mov	r2, r1
 80080e4:	eb42 0303 	adc.w	r3, r2, r3
 80080e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80080fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008100:	460b      	mov	r3, r1
 8008102:	18db      	adds	r3, r3, r3
 8008104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008106:	4613      	mov	r3, r2
 8008108:	eb42 0303 	adc.w	r3, r2, r3
 800810c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800810e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008116:	f7f8 fc41 	bl	800099c <__aeabi_uldivmod>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <UART_SetConfig+0x2d4>)
 8008120:	fba3 1302 	umull	r1, r3, r3, r2
 8008124:	095b      	lsrs	r3, r3, #5
 8008126:	2164      	movs	r1, #100	@ 0x64
 8008128:	fb01 f303 	mul.w	r3, r1, r3
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	3332      	adds	r3, #50	@ 0x32
 8008132:	4a08      	ldr	r2, [pc, #32]	@ (8008154 <UART_SetConfig+0x2d4>)
 8008134:	fba2 2303 	umull	r2, r3, r2, r3
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	f003 0207 	and.w	r2, r3, #7
 800813e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4422      	add	r2, r4
 8008146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008148:	e106      	b.n	8008358 <UART_SetConfig+0x4d8>
 800814a:	bf00      	nop
 800814c:	40011000 	.word	0x40011000
 8008150:	40011400 	.word	0x40011400
 8008154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800815c:	2200      	movs	r2, #0
 800815e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008162:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800816a:	4642      	mov	r2, r8
 800816c:	464b      	mov	r3, r9
 800816e:	1891      	adds	r1, r2, r2
 8008170:	6239      	str	r1, [r7, #32]
 8008172:	415b      	adcs	r3, r3
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
 8008176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800817a:	4641      	mov	r1, r8
 800817c:	1854      	adds	r4, r2, r1
 800817e:	4649      	mov	r1, r9
 8008180:	eb43 0501 	adc.w	r5, r3, r1
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	00eb      	lsls	r3, r5, #3
 800818e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008192:	00e2      	lsls	r2, r4, #3
 8008194:	4614      	mov	r4, r2
 8008196:	461d      	mov	r5, r3
 8008198:	4643      	mov	r3, r8
 800819a:	18e3      	adds	r3, r4, r3
 800819c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081a0:	464b      	mov	r3, r9
 80081a2:	eb45 0303 	adc.w	r3, r5, r3
 80081a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081c6:	4629      	mov	r1, r5
 80081c8:	008b      	lsls	r3, r1, #2
 80081ca:	4621      	mov	r1, r4
 80081cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d0:	4621      	mov	r1, r4
 80081d2:	008a      	lsls	r2, r1, #2
 80081d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081d8:	f7f8 fbe0 	bl	800099c <__aeabi_uldivmod>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4b60      	ldr	r3, [pc, #384]	@ (8008364 <UART_SetConfig+0x4e4>)
 80081e2:	fba3 2302 	umull	r2, r3, r3, r2
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	011c      	lsls	r4, r3, #4
 80081ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80081fc:	4642      	mov	r2, r8
 80081fe:	464b      	mov	r3, r9
 8008200:	1891      	adds	r1, r2, r2
 8008202:	61b9      	str	r1, [r7, #24]
 8008204:	415b      	adcs	r3, r3
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800820c:	4641      	mov	r1, r8
 800820e:	1851      	adds	r1, r2, r1
 8008210:	6139      	str	r1, [r7, #16]
 8008212:	4649      	mov	r1, r9
 8008214:	414b      	adcs	r3, r1
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008224:	4659      	mov	r1, fp
 8008226:	00cb      	lsls	r3, r1, #3
 8008228:	4651      	mov	r1, sl
 800822a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800822e:	4651      	mov	r1, sl
 8008230:	00ca      	lsls	r2, r1, #3
 8008232:	4610      	mov	r0, r2
 8008234:	4619      	mov	r1, r3
 8008236:	4603      	mov	r3, r0
 8008238:	4642      	mov	r2, r8
 800823a:	189b      	adds	r3, r3, r2
 800823c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008240:	464b      	mov	r3, r9
 8008242:	460a      	mov	r2, r1
 8008244:	eb42 0303 	adc.w	r3, r2, r3
 8008248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008256:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008264:	4649      	mov	r1, r9
 8008266:	008b      	lsls	r3, r1, #2
 8008268:	4641      	mov	r1, r8
 800826a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800826e:	4641      	mov	r1, r8
 8008270:	008a      	lsls	r2, r1, #2
 8008272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008276:	f7f8 fb91 	bl	800099c <__aeabi_uldivmod>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4611      	mov	r1, r2
 8008280:	4b38      	ldr	r3, [pc, #224]	@ (8008364 <UART_SetConfig+0x4e4>)
 8008282:	fba3 2301 	umull	r2, r3, r3, r1
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	2264      	movs	r2, #100	@ 0x64
 800828a:	fb02 f303 	mul.w	r3, r2, r3
 800828e:	1acb      	subs	r3, r1, r3
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	3332      	adds	r3, #50	@ 0x32
 8008294:	4a33      	ldr	r2, [pc, #204]	@ (8008364 <UART_SetConfig+0x4e4>)
 8008296:	fba2 2303 	umull	r2, r3, r2, r3
 800829a:	095b      	lsrs	r3, r3, #5
 800829c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082a0:	441c      	add	r4, r3
 80082a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082a6:	2200      	movs	r2, #0
 80082a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80082aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80082ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082b0:	4642      	mov	r2, r8
 80082b2:	464b      	mov	r3, r9
 80082b4:	1891      	adds	r1, r2, r2
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	415b      	adcs	r3, r3
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082c0:	4641      	mov	r1, r8
 80082c2:	1851      	adds	r1, r2, r1
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	4649      	mov	r1, r9
 80082c8:	414b      	adcs	r3, r1
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082d8:	4659      	mov	r1, fp
 80082da:	00cb      	lsls	r3, r1, #3
 80082dc:	4651      	mov	r1, sl
 80082de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082e2:	4651      	mov	r1, sl
 80082e4:	00ca      	lsls	r2, r1, #3
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	4642      	mov	r2, r8
 80082ee:	189b      	adds	r3, r3, r2
 80082f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082f2:	464b      	mov	r3, r9
 80082f4:	460a      	mov	r2, r1
 80082f6:	eb42 0303 	adc.w	r3, r2, r3
 80082fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	663b      	str	r3, [r7, #96]	@ 0x60
 8008306:	667a      	str	r2, [r7, #100]	@ 0x64
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008314:	4649      	mov	r1, r9
 8008316:	008b      	lsls	r3, r1, #2
 8008318:	4641      	mov	r1, r8
 800831a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800831e:	4641      	mov	r1, r8
 8008320:	008a      	lsls	r2, r1, #2
 8008322:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008326:	f7f8 fb39 	bl	800099c <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <UART_SetConfig+0x4e4>)
 8008330:	fba3 1302 	umull	r1, r3, r3, r2
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	2164      	movs	r1, #100	@ 0x64
 8008338:	fb01 f303 	mul.w	r3, r1, r3
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	3332      	adds	r3, #50	@ 0x32
 8008342:	4a08      	ldr	r2, [pc, #32]	@ (8008364 <UART_SetConfig+0x4e4>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	f003 020f 	and.w	r2, r3, #15
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4422      	add	r2, r4
 8008356:	609a      	str	r2, [r3, #8]
}
 8008358:	bf00      	nop
 800835a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800835e:	46bd      	mov	sp, r7
 8008360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008364:	51eb851f 	.word	0x51eb851f

08008368 <__NVIC_SetPriority>:
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	6039      	str	r1, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008378:	2b00      	cmp	r3, #0
 800837a:	db0a      	blt.n	8008392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	b2da      	uxtb	r2, r3
 8008380:	490c      	ldr	r1, [pc, #48]	@ (80083b4 <__NVIC_SetPriority+0x4c>)
 8008382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008386:	0112      	lsls	r2, r2, #4
 8008388:	b2d2      	uxtb	r2, r2
 800838a:	440b      	add	r3, r1
 800838c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008390:	e00a      	b.n	80083a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	b2da      	uxtb	r2, r3
 8008396:	4908      	ldr	r1, [pc, #32]	@ (80083b8 <__NVIC_SetPriority+0x50>)
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	3b04      	subs	r3, #4
 80083a0:	0112      	lsls	r2, r2, #4
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	440b      	add	r3, r1
 80083a6:	761a      	strb	r2, [r3, #24]
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	e000e100 	.word	0xe000e100
 80083b8:	e000ed00 	.word	0xe000ed00

080083bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083c0:	4b05      	ldr	r3, [pc, #20]	@ (80083d8 <SysTick_Handler+0x1c>)
 80083c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083c4:	f001 fd40 	bl	8009e48 <xTaskGetSchedulerState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d001      	beq.n	80083d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083ce:	f002 fb3b 	bl	800aa48 <xPortSysTickHandler>
  }
}
 80083d2:	bf00      	nop
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	e000e010 	.word	0xe000e010

080083dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80083e0:	2100      	movs	r1, #0
 80083e2:	f06f 0004 	mvn.w	r0, #4
 80083e6:	f7ff ffbf 	bl	8008368 <__NVIC_SetPriority>
#endif
}
 80083ea:	bf00      	nop
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083f6:	f3ef 8305 	mrs	r3, IPSR
 80083fa:	603b      	str	r3, [r7, #0]
  return(result);
 80083fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008402:	f06f 0305 	mvn.w	r3, #5
 8008406:	607b      	str	r3, [r7, #4]
 8008408:	e00c      	b.n	8008424 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800840a:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <osKernelInitialize+0x44>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008412:	4b08      	ldr	r3, [pc, #32]	@ (8008434 <osKernelInitialize+0x44>)
 8008414:	2201      	movs	r2, #1
 8008416:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008418:	2300      	movs	r3, #0
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	e002      	b.n	8008424 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008424:	687b      	ldr	r3, [r7, #4]
}
 8008426:	4618      	mov	r0, r3
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20005dd0 	.word	0x20005dd0

08008438 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800843e:	f3ef 8305 	mrs	r3, IPSR
 8008442:	603b      	str	r3, [r7, #0]
  return(result);
 8008444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <osKernelStart+0x1a>
    stat = osErrorISR;
 800844a:	f06f 0305 	mvn.w	r3, #5
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	e010      	b.n	8008474 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008452:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <osKernelStart+0x48>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d109      	bne.n	800846e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800845a:	f7ff ffbf 	bl	80083dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800845e:	4b08      	ldr	r3, [pc, #32]	@ (8008480 <osKernelStart+0x48>)
 8008460:	2202      	movs	r2, #2
 8008462:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008464:	f001 f87a 	bl	800955c <vTaskStartScheduler>
      stat = osOK;
 8008468:	2300      	movs	r3, #0
 800846a:	607b      	str	r3, [r7, #4]
 800846c:	e002      	b.n	8008474 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008474:	687b      	ldr	r3, [r7, #4]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20005dd0 	.word	0x20005dd0

08008484 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b08e      	sub	sp, #56	@ 0x38
 8008488:	af04      	add	r7, sp, #16
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008494:	f3ef 8305 	mrs	r3, IPSR
 8008498:	617b      	str	r3, [r7, #20]
  return(result);
 800849a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800849c:	2b00      	cmp	r3, #0
 800849e:	d17e      	bne.n	800859e <osThreadNew+0x11a>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d07b      	beq.n	800859e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80084a6:	2380      	movs	r3, #128	@ 0x80
 80084a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80084aa:	2318      	movs	r3, #24
 80084ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80084b2:	f04f 33ff 	mov.w	r3, #4294967295
 80084b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d045      	beq.n	800854a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <osThreadNew+0x48>
        name = attr->name;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d008      	beq.n	80084f2 <osThreadNew+0x6e>
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	2b38      	cmp	r3, #56	@ 0x38
 80084e4:	d805      	bhi.n	80084f2 <osThreadNew+0x6e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <osThreadNew+0x72>
        return (NULL);
 80084f2:	2300      	movs	r3, #0
 80084f4:	e054      	b.n	80085a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	089b      	lsrs	r3, r3, #2
 8008504:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00e      	beq.n	800852c <osThreadNew+0xa8>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	2b5b      	cmp	r3, #91	@ 0x5b
 8008514:	d90a      	bls.n	800852c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800851a:	2b00      	cmp	r3, #0
 800851c:	d006      	beq.n	800852c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <osThreadNew+0xa8>
        mem = 1;
 8008526:	2301      	movs	r3, #1
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	e010      	b.n	800854e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10c      	bne.n	800854e <osThreadNew+0xca>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d108      	bne.n	800854e <osThreadNew+0xca>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <osThreadNew+0xca>
          mem = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	61bb      	str	r3, [r7, #24]
 8008548:	e001      	b.n	800854e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d110      	bne.n	8008576 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800855c:	9202      	str	r2, [sp, #8]
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fe1a 	bl	80091a4 <xTaskCreateStatic>
 8008570:	4603      	mov	r3, r0
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	e013      	b.n	800859e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d110      	bne.n	800859e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	b29a      	uxth	r2, r3
 8008580:	f107 0310 	add.w	r3, r7, #16
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fe68 	bl	8009264 <xTaskCreate>
 8008594:	4603      	mov	r3, r0
 8008596:	2b01      	cmp	r3, #1
 8008598:	d001      	beq.n	800859e <osThreadNew+0x11a>
            hTask = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800859e:	693b      	ldr	r3, [r7, #16]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3728      	adds	r7, #40	@ 0x28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b0:	f3ef 8305 	mrs	r3, IPSR
 80085b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80085b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <osDelay+0x1c>
    stat = osErrorISR;
 80085bc:	f06f 0305 	mvn.w	r3, #5
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	e007      	b.n	80085d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 ff8e 	bl	80094f0 <vTaskDelay>
    }
  }

  return (stat);
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4a07      	ldr	r2, [pc, #28]	@ (800860c <vApplicationGetIdleTaskMemory+0x2c>)
 80085f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4a06      	ldr	r2, [pc, #24]	@ (8008610 <vApplicationGetIdleTaskMemory+0x30>)
 80085f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2280      	movs	r2, #128	@ 0x80
 80085fc:	601a      	str	r2, [r3, #0]
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20005dd4 	.word	0x20005dd4
 8008610:	20005e30 	.word	0x20005e30

08008614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4a07      	ldr	r2, [pc, #28]	@ (8008640 <vApplicationGetTimerTaskMemory+0x2c>)
 8008624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	4a06      	ldr	r2, [pc, #24]	@ (8008644 <vApplicationGetTimerTaskMemory+0x30>)
 800862a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008632:	601a      	str	r2, [r3, #0]
}
 8008634:	bf00      	nop
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20006030 	.word	0x20006030
 8008644:	2000608c 	.word	0x2000608c

08008648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0208 	add.w	r2, r3, #8
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f04f 32ff 	mov.w	r2, #4294967295
 8008660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f103 0208 	add.w	r2, r3, #8
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f103 0208 	add.w	r2, r3, #8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086a2:	b480      	push	{r7}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	601a      	str	r2, [r3, #0]
}
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d103      	bne.n	800870a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	e00c      	b.n	8008724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3308      	adds	r3, #8
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e002      	b.n	8008718 <vListInsert+0x2e>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	d2f6      	bcs.n	8008712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
}
 8008750:	bf00      	nop
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6892      	ldr	r2, [r2, #8]
 8008772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6852      	ldr	r2, [r2, #4]
 800877c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d103      	bne.n	8008790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	1e5a      	subs	r2, r3, #1
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10b      	bne.n	80087dc <xQueueGenericReset+0x2c>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	60bb      	str	r3, [r7, #8]
}
 80087d6:	bf00      	nop
 80087d8:	bf00      	nop
 80087da:	e7fd      	b.n	80087d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087dc:	f002 f8a4 	bl	800a928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e8:	68f9      	ldr	r1, [r7, #12]
 80087ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800880c:	3b01      	subs	r3, #1
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	441a      	add	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	22ff      	movs	r2, #255	@ 0xff
 8008820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	22ff      	movs	r2, #255	@ 0xff
 8008828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d114      	bne.n	800885c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d01a      	beq.n	8008870 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3310      	adds	r3, #16
 800883e:	4618      	mov	r0, r3
 8008840:	f001 f91a 	bl	8009a78 <xTaskRemoveFromEventList>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d012      	beq.n	8008870 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800884a:	4b0d      	ldr	r3, [pc, #52]	@ (8008880 <xQueueGenericReset+0xd0>)
 800884c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	e009      	b.n	8008870 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3310      	adds	r3, #16
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fef1 	bl	8008648 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3324      	adds	r3, #36	@ 0x24
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff feec 	bl	8008648 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008870:	f002 f88c 	bl	800a98c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008874:	2301      	movs	r3, #1
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08e      	sub	sp, #56	@ 0x38
 8008888:	af02      	add	r7, sp, #8
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	e7fd      	b.n	80088ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10b      	bne.n	80088ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	e7fd      	b.n	80088ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <xQueueGenericCreateStatic+0x56>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <xQueueGenericCreateStatic+0x5a>
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <xQueueGenericCreateStatic+0x5c>
 80088de:	2300      	movs	r3, #0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10b      	bne.n	80088fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	623b      	str	r3, [r7, #32]
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	e7fd      	b.n	80088f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <xQueueGenericCreateStatic+0x84>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <xQueueGenericCreateStatic+0x88>
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <xQueueGenericCreateStatic+0x8a>
 800890c:	2300      	movs	r3, #0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10b      	bne.n	800892a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	61fb      	str	r3, [r7, #28]
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	e7fd      	b.n	8008926 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800892a:	2350      	movs	r3, #80	@ 0x50
 800892c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b50      	cmp	r3, #80	@ 0x50
 8008932:	d00b      	beq.n	800894c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	61bb      	str	r3, [r7, #24]
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800894c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008960:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f805 	bl	800897e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008976:	4618      	mov	r0, r3
 8008978:	3730      	adds	r7, #48	@ 0x30
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e002      	b.n	80089a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089ac:	2101      	movs	r1, #1
 80089ae:	69b8      	ldr	r0, [r7, #24]
 80089b0:	f7ff fefe 	bl	80087b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089bc:	bf00      	nop
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08e      	sub	sp, #56	@ 0x38
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089d2:	2300      	movs	r3, #0
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <xQueueGenericSend+0x34>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d103      	bne.n	8008a06 <xQueueGenericSend+0x42>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <xQueueGenericSend+0x46>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueGenericSend+0x48>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10b      	bne.n	8008a28 <xQueueGenericSend+0x64>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d103      	bne.n	8008a36 <xQueueGenericSend+0x72>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d101      	bne.n	8008a3a <xQueueGenericSend+0x76>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <xQueueGenericSend+0x78>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <xQueueGenericSend+0x94>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	623b      	str	r3, [r7, #32]
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a58:	f001 f9f6 	bl	8009e48 <xTaskGetSchedulerState>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <xQueueGenericSend+0xa4>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <xQueueGenericSend+0xa8>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e000      	b.n	8008a6e <xQueueGenericSend+0xaa>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <xQueueGenericSend+0xc6>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	61fb      	str	r3, [r7, #28]
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	e7fd      	b.n	8008a86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a8a:	f001 ff4d 	bl	800a928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d302      	bcc.n	8008aa0 <xQueueGenericSend+0xdc>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d129      	bne.n	8008af4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aa6:	f000 fa0f 	bl	8008ec8 <prvCopyDataToQueue>
 8008aaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d010      	beq.n	8008ad6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	3324      	adds	r3, #36	@ 0x24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 ffdd 	bl	8009a78 <xTaskRemoveFromEventList>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d013      	beq.n	8008aec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ac4:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc4 <xQueueGenericSend+0x200>)
 8008ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	e00a      	b.n	8008aec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008adc:	4b39      	ldr	r3, [pc, #228]	@ (8008bc4 <xQueueGenericSend+0x200>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008aec:	f001 ff4e 	bl	800a98c <vPortExitCritical>
				return pdPASS;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e063      	b.n	8008bbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d103      	bne.n	8008b02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008afa:	f001 ff47 	bl	800a98c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e05c      	b.n	8008bbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b08:	f107 0314 	add.w	r3, r7, #20
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f001 f83f 	bl	8009b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b12:	2301      	movs	r3, #1
 8008b14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b16:	f001 ff39 	bl	800a98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b1a:	f000 fd87 	bl	800962c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b1e:	f001 ff03 	bl	800a928 <vPortEnterCritical>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2e:	d103      	bne.n	8008b38 <xQueueGenericSend+0x174>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b44:	d103      	bne.n	8008b4e <xQueueGenericSend+0x18a>
 8008b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b4e:	f001 ff1d 	bl	800a98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b52:	1d3a      	adds	r2, r7, #4
 8008b54:	f107 0314 	add.w	r3, r7, #20
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 f82e 	bl	8009bbc <xTaskCheckForTimeOut>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d124      	bne.n	8008bb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b68:	f000 faa6 	bl	80090b8 <prvIsQueueFull>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d018      	beq.n	8008ba4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	3310      	adds	r3, #16
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 ff2a 	bl	80099d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b82:	f000 fa31 	bl	8008fe8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b86:	f000 fd5f 	bl	8009648 <xTaskResumeAll>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f47f af7c 	bne.w	8008a8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b92:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <xQueueGenericSend+0x200>)
 8008b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	e772      	b.n	8008a8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ba6:	f000 fa1f 	bl	8008fe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008baa:	f000 fd4d 	bl	8009648 <xTaskResumeAll>
 8008bae:	e76c      	b.n	8008a8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bb2:	f000 fa19 	bl	8008fe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bb6:	f000 fd47 	bl	8009648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3738      	adds	r7, #56	@ 0x38
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	e000ed04 	.word	0xe000ed04

08008bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b090      	sub	sp, #64	@ 0x40
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10b      	bne.n	8008bf8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <xQueueGenericSendFromISR+0x3e>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <xQueueGenericSendFromISR+0x42>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <xQueueGenericSendFromISR+0x44>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10b      	bne.n	8008c28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	e7fd      	b.n	8008c24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d103      	bne.n	8008c36 <xQueueGenericSendFromISR+0x6e>
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d101      	bne.n	8008c3a <xQueueGenericSendFromISR+0x72>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e000      	b.n	8008c3c <xQueueGenericSendFromISR+0x74>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	623b      	str	r3, [r7, #32]
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c58:	f001 ff46 	bl	800aae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c5c:	f3ef 8211 	mrs	r2, BASEPRI
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	61fa      	str	r2, [r7, #28]
 8008c72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d302      	bcc.n	8008c8a <xQueueGenericSendFromISR+0xc2>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d12f      	bne.n	8008cea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ca0:	f000 f912 	bl	8008ec8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ca4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d112      	bne.n	8008cd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d016      	beq.n	8008ce4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	3324      	adds	r3, #36	@ 0x24
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fedc 	bl	8009a78 <xTaskRemoveFromEventList>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00e      	beq.n	8008ce4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	e007      	b.n	8008ce4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008cd8:	3301      	adds	r3, #1
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	b25a      	sxtb	r2, r3
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ce8:	e001      	b.n	8008cee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3740      	adds	r7, #64	@ 0x40
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08c      	sub	sp, #48	@ 0x30
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d10:	2300      	movs	r3, #0
 8008d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10b      	bne.n	8008d36 <xQueueReceive+0x32>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	623b      	str	r3, [r7, #32]
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	e7fd      	b.n	8008d32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <xQueueReceive+0x40>
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <xQueueReceive+0x44>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e000      	b.n	8008d4a <xQueueReceive+0x46>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <xQueueReceive+0x62>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	61fb      	str	r3, [r7, #28]
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d66:	f001 f86f 	bl	8009e48 <xTaskGetSchedulerState>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <xQueueReceive+0x72>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <xQueueReceive+0x76>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e000      	b.n	8008d7c <xQueueReceive+0x78>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <xQueueReceive+0x94>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	61bb      	str	r3, [r7, #24]
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	e7fd      	b.n	8008d94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d98:	f001 fdc6 	bl	800a928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01f      	beq.n	8008de8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dac:	f000 f8f6 	bl	8008f9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	1e5a      	subs	r2, r3, #1
 8008db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00f      	beq.n	8008de0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	3310      	adds	r3, #16
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fe57 	bl	8009a78 <xTaskRemoveFromEventList>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ec4 <xQueueReceive+0x1c0>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008de0:	f001 fdd4 	bl	800a98c <vPortExitCritical>
				return pdPASS;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e069      	b.n	8008ebc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dee:	f001 fdcd 	bl	800a98c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008df2:	2300      	movs	r3, #0
 8008df4:	e062      	b.n	8008ebc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dfc:	f107 0310 	add.w	r3, r7, #16
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fec5 	bl	8009b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e0a:	f001 fdbf 	bl	800a98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e0e:	f000 fc0d 	bl	800962c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e12:	f001 fd89 	bl	800a928 <vPortEnterCritical>
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e1c:	b25b      	sxtb	r3, r3
 8008e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e22:	d103      	bne.n	8008e2c <xQueueReceive+0x128>
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e32:	b25b      	sxtb	r3, r3
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d103      	bne.n	8008e42 <xQueueReceive+0x13e>
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e42:	f001 fda3 	bl	800a98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e46:	1d3a      	adds	r2, r7, #4
 8008e48:	f107 0310 	add.w	r3, r7, #16
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 feb4 	bl	8009bbc <xTaskCheckForTimeOut>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d123      	bne.n	8008ea2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e5c:	f000 f916 	bl	800908c <prvIsQueueEmpty>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d017      	beq.n	8008e96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e68:	3324      	adds	r3, #36	@ 0x24
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fdb0 	bl	80099d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e76:	f000 f8b7 	bl	8008fe8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e7a:	f000 fbe5 	bl	8009648 <xTaskResumeAll>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d189      	bne.n	8008d98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e84:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec4 <xQueueReceive+0x1c0>)
 8008e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	e780      	b.n	8008d98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e98:	f000 f8a6 	bl	8008fe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e9c:	f000 fbd4 	bl	8009648 <xTaskResumeAll>
 8008ea0:	e77a      	b.n	8008d98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea4:	f000 f8a0 	bl	8008fe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ea8:	f000 fbce 	bl	8009648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eae:	f000 f8ed 	bl	800908c <prvIsQueueEmpty>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f43f af6f 	beq.w	8008d98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008eba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3730      	adds	r7, #48	@ 0x30
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	e000ed04 	.word	0xe000ed04

08008ec8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008edc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10d      	bne.n	8008f02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d14d      	bne.n	8008f8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 ffc6 	bl	8009e84 <xTaskPriorityDisinherit>
 8008ef8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	609a      	str	r2, [r3, #8]
 8008f00:	e043      	b.n	8008f8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d119      	bne.n	8008f3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6858      	ldr	r0, [r3, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f10:	461a      	mov	r2, r3
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	f011 f86d 	bl	8019ff2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f20:	441a      	add	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d32b      	bcc.n	8008f8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	605a      	str	r2, [r3, #4]
 8008f3a:	e026      	b.n	8008f8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68d8      	ldr	r0, [r3, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f44:	461a      	mov	r2, r3
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	f011 f853 	bl	8019ff2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	425b      	negs	r3, r3
 8008f56:	441a      	add	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d207      	bcs.n	8008f78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f70:	425b      	negs	r3, r3
 8008f72:	441a      	add	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d105      	bne.n	8008f8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f92:	697b      	ldr	r3, [r7, #20]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d018      	beq.n	8008fe0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb6:	441a      	add	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d303      	bcc.n	8008fd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68d9      	ldr	r1, [r3, #12]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6838      	ldr	r0, [r7, #0]
 8008fdc:	f011 f809 	bl	8019ff2 <memcpy>
	}
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ff0:	f001 fc9a 	bl	800a928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ffa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ffc:	e011      	b.n	8009022 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009002:	2b00      	cmp	r3, #0
 8009004:	d012      	beq.n	800902c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3324      	adds	r3, #36	@ 0x24
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fd34 	bl	8009a78 <xTaskRemoveFromEventList>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009016:	f000 fe35 	bl	8009c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	3b01      	subs	r3, #1
 800901e:	b2db      	uxtb	r3, r3
 8009020:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dce9      	bgt.n	8008ffe <prvUnlockQueue+0x16>
 800902a:	e000      	b.n	800902e <prvUnlockQueue+0x46>
					break;
 800902c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	22ff      	movs	r2, #255	@ 0xff
 8009032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009036:	f001 fca9 	bl	800a98c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800903a:	f001 fc75 	bl	800a928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009044:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009046:	e011      	b.n	800906c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d012      	beq.n	8009076 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3310      	adds	r3, #16
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fd0f 	bl	8009a78 <xTaskRemoveFromEventList>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009060:	f000 fe10 	bl	8009c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	3b01      	subs	r3, #1
 8009068:	b2db      	uxtb	r3, r3
 800906a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800906c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009070:	2b00      	cmp	r3, #0
 8009072:	dce9      	bgt.n	8009048 <prvUnlockQueue+0x60>
 8009074:	e000      	b.n	8009078 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009076:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	22ff      	movs	r2, #255	@ 0xff
 800907c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009080:	f001 fc84 	bl	800a98c <vPortExitCritical>
}
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009094:	f001 fc48 	bl	800a928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909c:	2b00      	cmp	r3, #0
 800909e:	d102      	bne.n	80090a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	e001      	b.n	80090aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090aa:	f001 fc6f 	bl	800a98c <vPortExitCritical>

	return xReturn;
 80090ae:	68fb      	ldr	r3, [r7, #12]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090c0:	f001 fc32 	bl	800a928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d102      	bne.n	80090d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e001      	b.n	80090da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090da:	f001 fc57 	bl	800a98c <vPortExitCritical>

	return xReturn;
 80090de:	68fb      	ldr	r3, [r7, #12]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e014      	b.n	8009122 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090f8:	4a0f      	ldr	r2, [pc, #60]	@ (8009138 <vQueueAddToRegistry+0x50>)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10b      	bne.n	800911c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009104:	490c      	ldr	r1, [pc, #48]	@ (8009138 <vQueueAddToRegistry+0x50>)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800910e:	4a0a      	ldr	r2, [pc, #40]	@ (8009138 <vQueueAddToRegistry+0x50>)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	4413      	add	r3, r2
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800911a:	e006      	b.n	800912a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	3301      	adds	r3, #1
 8009120:	60fb      	str	r3, [r7, #12]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b07      	cmp	r3, #7
 8009126:	d9e7      	bls.n	80090f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	2000648c 	.word	0x2000648c

0800913c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800914c:	f001 fbec 	bl	800a928 <vPortEnterCritical>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009156:	b25b      	sxtb	r3, r3
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915c:	d103      	bne.n	8009166 <vQueueWaitForMessageRestricted+0x2a>
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800916c:	b25b      	sxtb	r3, r3
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009172:	d103      	bne.n	800917c <vQueueWaitForMessageRestricted+0x40>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800917c:	f001 fc06 	bl	800a98c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d106      	bne.n	8009196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	3324      	adds	r3, #36	@ 0x24
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fc45 	bl	8009a20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009196:	6978      	ldr	r0, [r7, #20]
 8009198:	f7ff ff26 	bl	8008fe8 <prvUnlockQueue>
	}
 800919c:	bf00      	nop
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08e      	sub	sp, #56	@ 0x38
 80091a8:	af04      	add	r7, sp, #16
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10b      	bne.n	80091d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	623b      	str	r3, [r7, #32]
}
 80091ca:	bf00      	nop
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10b      	bne.n	80091ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	61fb      	str	r3, [r7, #28]
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	e7fd      	b.n	80091ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091ee:	235c      	movs	r3, #92	@ 0x5c
 80091f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80091f6:	d00b      	beq.n	8009210 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	61bb      	str	r3, [r7, #24]
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	e7fd      	b.n	800920c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009210:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01e      	beq.n	8009256 <xTaskCreateStatic+0xb2>
 8009218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800921a:	2b00      	cmp	r3, #0
 800921c:	d01b      	beq.n	8009256 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009226:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	2202      	movs	r2, #2
 800922c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009230:	2300      	movs	r3, #0
 8009232:	9303      	str	r3, [sp, #12]
 8009234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	f107 0314 	add.w	r3, r7, #20
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	68b9      	ldr	r1, [r7, #8]
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 f850 	bl	80092ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800924e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009250:	f000 f8de 	bl	8009410 <prvAddNewTaskToReadyList>
 8009254:	e001      	b.n	800925a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800925a:	697b      	ldr	r3, [r7, #20]
	}
 800925c:	4618      	mov	r0, r3
 800925e:	3728      	adds	r7, #40	@ 0x28
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08c      	sub	sp, #48	@ 0x30
 8009268:	af04      	add	r7, sp, #16
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4618      	mov	r0, r3
 800927a:	f001 fc77 	bl	800ab6c <pvPortMalloc>
 800927e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00e      	beq.n	80092a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009286:	205c      	movs	r0, #92	@ 0x5c
 8009288:	f001 fc70 	bl	800ab6c <pvPortMalloc>
 800928c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	631a      	str	r2, [r3, #48]	@ 0x30
 800929a:	e005      	b.n	80092a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800929c:	6978      	ldr	r0, [r7, #20]
 800929e:	f001 fd33 	bl	800ad08 <vPortFree>
 80092a2:	e001      	b.n	80092a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d017      	beq.n	80092de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092b6:	88fa      	ldrh	r2, [r7, #6]
 80092b8:	2300      	movs	r3, #0
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68b9      	ldr	r1, [r7, #8]
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f80e 	bl	80092ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092d2:	69f8      	ldr	r0, [r7, #28]
 80092d4:	f000 f89c 	bl	8009410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092d8:	2301      	movs	r3, #1
 80092da:	61bb      	str	r3, [r7, #24]
 80092dc:	e002      	b.n	80092e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092de:	f04f 33ff 	mov.w	r3, #4294967295
 80092e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092e4:	69bb      	ldr	r3, [r7, #24]
	}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b088      	sub	sp, #32
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	607a      	str	r2, [r7, #4]
 80092fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	461a      	mov	r2, r3
 8009306:	21a5      	movs	r1, #165	@ 0xa5
 8009308:	f010 fd98 	bl	8019e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009316:	3b01      	subs	r3, #1
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	f023 0307 	bic.w	r3, r3, #7
 8009324:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	617b      	str	r3, [r7, #20]
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	e7fd      	b.n	8009344 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01f      	beq.n	800938e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	e012      	b.n	800937a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	4413      	add	r3, r2
 800935a:	7819      	ldrb	r1, [r3, #0]
 800935c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	4413      	add	r3, r2
 8009362:	3334      	adds	r3, #52	@ 0x34
 8009364:	460a      	mov	r2, r1
 8009366:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d006      	beq.n	8009382 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	3301      	adds	r3, #1
 8009378:	61fb      	str	r3, [r7, #28]
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	2b0f      	cmp	r3, #15
 800937e:	d9e9      	bls.n	8009354 <prvInitialiseNewTask+0x66>
 8009380:	e000      	b.n	8009384 <prvInitialiseNewTask+0x96>
			{
				break;
 8009382:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800938c:	e003      	b.n	8009396 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800938e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	2b37      	cmp	r3, #55	@ 0x37
 800939a:	d901      	bls.n	80093a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800939c:	2337      	movs	r3, #55	@ 0x37
 800939e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	2200      	movs	r2, #0
 80093b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	3304      	adds	r3, #4
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff f966 	bl	8008688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	3318      	adds	r3, #24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff f961 	bl	8008688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093de:	2200      	movs	r2, #0
 80093e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	68f9      	ldr	r1, [r7, #12]
 80093ee:	69b8      	ldr	r0, [r7, #24]
 80093f0:	f001 f966 	bl	800a6c0 <pxPortInitialiseStack>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009406:	bf00      	nop
 8009408:	3720      	adds	r7, #32
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009418:	f001 fa86 	bl	800a928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800941c:	4b2d      	ldr	r3, [pc, #180]	@ (80094d4 <prvAddNewTaskToReadyList+0xc4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3301      	adds	r3, #1
 8009422:	4a2c      	ldr	r2, [pc, #176]	@ (80094d4 <prvAddNewTaskToReadyList+0xc4>)
 8009424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009426:	4b2c      	ldr	r3, [pc, #176]	@ (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800942e:	4a2a      	ldr	r2, [pc, #168]	@ (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009434:	4b27      	ldr	r3, [pc, #156]	@ (80094d4 <prvAddNewTaskToReadyList+0xc4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d110      	bne.n	800945e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800943c:	f000 fc46 	bl	8009ccc <prvInitialiseTaskLists>
 8009440:	e00d      	b.n	800945e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009442:	4b26      	ldr	r3, [pc, #152]	@ (80094dc <prvAddNewTaskToReadyList+0xcc>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800944a:	4b23      	ldr	r3, [pc, #140]	@ (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009454:	429a      	cmp	r2, r3
 8009456:	d802      	bhi.n	800945e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009458:	4a1f      	ldr	r2, [pc, #124]	@ (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800945e:	4b20      	ldr	r3, [pc, #128]	@ (80094e0 <prvAddNewTaskToReadyList+0xd0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	4a1e      	ldr	r2, [pc, #120]	@ (80094e0 <prvAddNewTaskToReadyList+0xd0>)
 8009466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009468:	4b1d      	ldr	r3, [pc, #116]	@ (80094e0 <prvAddNewTaskToReadyList+0xd0>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009474:	4b1b      	ldr	r3, [pc, #108]	@ (80094e4 <prvAddNewTaskToReadyList+0xd4>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d903      	bls.n	8009484 <prvAddNewTaskToReadyList+0x74>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009480:	4a18      	ldr	r2, [pc, #96]	@ (80094e4 <prvAddNewTaskToReadyList+0xd4>)
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4a15      	ldr	r2, [pc, #84]	@ (80094e8 <prvAddNewTaskToReadyList+0xd8>)
 8009492:	441a      	add	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3304      	adds	r3, #4
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7ff f901 	bl	80086a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094a0:	f001 fa74 	bl	800a98c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094a4:	4b0d      	ldr	r3, [pc, #52]	@ (80094dc <prvAddNewTaskToReadyList+0xcc>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00e      	beq.n	80094ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094ac:	4b0a      	ldr	r3, [pc, #40]	@ (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d207      	bcs.n	80094ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094ba:	4b0c      	ldr	r3, [pc, #48]	@ (80094ec <prvAddNewTaskToReadyList+0xdc>)
 80094bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ca:	bf00      	nop
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200069a0 	.word	0x200069a0
 80094d8:	200064cc 	.word	0x200064cc
 80094dc:	200069ac 	.word	0x200069ac
 80094e0:	200069bc 	.word	0x200069bc
 80094e4:	200069a8 	.word	0x200069a8
 80094e8:	200064d0 	.word	0x200064d0
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009502:	4b14      	ldr	r3, [pc, #80]	@ (8009554 <vTaskDelay+0x64>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00b      	beq.n	8009522 <vTaskDelay+0x32>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	60bb      	str	r3, [r7, #8]
}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	e7fd      	b.n	800951e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009522:	f000 f883 	bl	800962c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009526:	2100      	movs	r1, #0
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fd1b 	bl	8009f64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800952e:	f000 f88b 	bl	8009648 <xTaskResumeAll>
 8009532:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d107      	bne.n	800954a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800953a:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <vTaskDelay+0x68>)
 800953c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200069c8 	.word	0x200069c8
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	@ 0x28
 8009560:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800956a:	463a      	mov	r2, r7
 800956c:	1d39      	adds	r1, r7, #4
 800956e:	f107 0308 	add.w	r3, r7, #8
 8009572:	4618      	mov	r0, r3
 8009574:	f7ff f834 	bl	80085e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	9202      	str	r2, [sp, #8]
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	2300      	movs	r3, #0
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	2300      	movs	r3, #0
 8009588:	460a      	mov	r2, r1
 800958a:	4922      	ldr	r1, [pc, #136]	@ (8009614 <vTaskStartScheduler+0xb8>)
 800958c:	4822      	ldr	r0, [pc, #136]	@ (8009618 <vTaskStartScheduler+0xbc>)
 800958e:	f7ff fe09 	bl	80091a4 <xTaskCreateStatic>
 8009592:	4603      	mov	r3, r0
 8009594:	4a21      	ldr	r2, [pc, #132]	@ (800961c <vTaskStartScheduler+0xc0>)
 8009596:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009598:	4b20      	ldr	r3, [pc, #128]	@ (800961c <vTaskStartScheduler+0xc0>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e001      	b.n	80095aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d102      	bne.n	80095b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095b0:	f000 fd2c 	bl	800a00c <xTimerCreateTimerTask>
 80095b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d116      	bne.n	80095ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	613b      	str	r3, [r7, #16]
}
 80095ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095d0:	4b13      	ldr	r3, [pc, #76]	@ (8009620 <vTaskStartScheduler+0xc4>)
 80095d2:	f04f 32ff 	mov.w	r2, #4294967295
 80095d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095d8:	4b12      	ldr	r3, [pc, #72]	@ (8009624 <vTaskStartScheduler+0xc8>)
 80095da:	2201      	movs	r2, #1
 80095dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095de:	4b12      	ldr	r3, [pc, #72]	@ (8009628 <vTaskStartScheduler+0xcc>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095e4:	f001 f8fc 	bl	800a7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095e8:	e00f      	b.n	800960a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f0:	d10b      	bne.n	800960a <vTaskStartScheduler+0xae>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	60fb      	str	r3, [r7, #12]
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop
 8009608:	e7fd      	b.n	8009606 <vTaskStartScheduler+0xaa>
}
 800960a:	bf00      	nop
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	0801acec 	.word	0x0801acec
 8009618:	08009c9d 	.word	0x08009c9d
 800961c:	200069c4 	.word	0x200069c4
 8009620:	200069c0 	.word	0x200069c0
 8009624:	200069ac 	.word	0x200069ac
 8009628:	200069a4 	.word	0x200069a4

0800962c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009630:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <vTaskSuspendAll+0x18>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3301      	adds	r3, #1
 8009636:	4a03      	ldr	r2, [pc, #12]	@ (8009644 <vTaskSuspendAll+0x18>)
 8009638:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800963a:	bf00      	nop
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	200069c8 	.word	0x200069c8

08009648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009656:	4b42      	ldr	r3, [pc, #264]	@ (8009760 <xTaskResumeAll+0x118>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10b      	bne.n	8009676 <xTaskResumeAll+0x2e>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	603b      	str	r3, [r7, #0]
}
 8009670:	bf00      	nop
 8009672:	bf00      	nop
 8009674:	e7fd      	b.n	8009672 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009676:	f001 f957 	bl	800a928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800967a:	4b39      	ldr	r3, [pc, #228]	@ (8009760 <xTaskResumeAll+0x118>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3b01      	subs	r3, #1
 8009680:	4a37      	ldr	r2, [pc, #220]	@ (8009760 <xTaskResumeAll+0x118>)
 8009682:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009684:	4b36      	ldr	r3, [pc, #216]	@ (8009760 <xTaskResumeAll+0x118>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d162      	bne.n	8009752 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800968c:	4b35      	ldr	r3, [pc, #212]	@ (8009764 <xTaskResumeAll+0x11c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d05e      	beq.n	8009752 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009694:	e02f      	b.n	80096f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009696:	4b34      	ldr	r3, [pc, #208]	@ (8009768 <xTaskResumeAll+0x120>)
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3318      	adds	r3, #24
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff f85a 	bl	800875c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3304      	adds	r3, #4
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff f855 	bl	800875c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b6:	4b2d      	ldr	r3, [pc, #180]	@ (800976c <xTaskResumeAll+0x124>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d903      	bls.n	80096c6 <xTaskResumeAll+0x7e>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c2:	4a2a      	ldr	r2, [pc, #168]	@ (800976c <xTaskResumeAll+0x124>)
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4a27      	ldr	r2, [pc, #156]	@ (8009770 <xTaskResumeAll+0x128>)
 80096d4:	441a      	add	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3304      	adds	r3, #4
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f7fe ffe0 	bl	80086a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e6:	4b23      	ldr	r3, [pc, #140]	@ (8009774 <xTaskResumeAll+0x12c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d302      	bcc.n	80096f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096f0:	4b21      	ldr	r3, [pc, #132]	@ (8009778 <xTaskResumeAll+0x130>)
 80096f2:	2201      	movs	r2, #1
 80096f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009768 <xTaskResumeAll+0x120>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1cb      	bne.n	8009696 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009704:	f000 fb80 	bl	8009e08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009708:	4b1c      	ldr	r3, [pc, #112]	@ (800977c <xTaskResumeAll+0x134>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d010      	beq.n	8009736 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009714:	f000 f846 	bl	80097a4 <xTaskIncrementTick>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800971e:	4b16      	ldr	r3, [pc, #88]	@ (8009778 <xTaskResumeAll+0x130>)
 8009720:	2201      	movs	r2, #1
 8009722:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3b01      	subs	r3, #1
 8009728:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1f1      	bne.n	8009714 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009730:	4b12      	ldr	r3, [pc, #72]	@ (800977c <xTaskResumeAll+0x134>)
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009736:	4b10      	ldr	r3, [pc, #64]	@ (8009778 <xTaskResumeAll+0x130>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d009      	beq.n	8009752 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800973e:	2301      	movs	r3, #1
 8009740:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009742:	4b0f      	ldr	r3, [pc, #60]	@ (8009780 <xTaskResumeAll+0x138>)
 8009744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009752:	f001 f91b 	bl	800a98c <vPortExitCritical>

	return xAlreadyYielded;
 8009756:	68bb      	ldr	r3, [r7, #8]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	200069c8 	.word	0x200069c8
 8009764:	200069a0 	.word	0x200069a0
 8009768:	20006960 	.word	0x20006960
 800976c:	200069a8 	.word	0x200069a8
 8009770:	200064d0 	.word	0x200064d0
 8009774:	200064cc 	.word	0x200064cc
 8009778:	200069b4 	.word	0x200069b4
 800977c:	200069b0 	.word	0x200069b0
 8009780:	e000ed04 	.word	0xe000ed04

08009784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800978a:	4b05      	ldr	r3, [pc, #20]	@ (80097a0 <xTaskGetTickCount+0x1c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009790:	687b      	ldr	r3, [r7, #4]
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	200069a4 	.word	0x200069a4

080097a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ae:	4b4f      	ldr	r3, [pc, #316]	@ (80098ec <xTaskIncrementTick+0x148>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f040 8090 	bne.w	80098d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097b8:	4b4d      	ldr	r3, [pc, #308]	@ (80098f0 <xTaskIncrementTick+0x14c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3301      	adds	r3, #1
 80097be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097c0:	4a4b      	ldr	r2, [pc, #300]	@ (80098f0 <xTaskIncrementTick+0x14c>)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d121      	bne.n	8009810 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097cc:	4b49      	ldr	r3, [pc, #292]	@ (80098f4 <xTaskIncrementTick+0x150>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	603b      	str	r3, [r7, #0]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <xTaskIncrementTick+0x46>
 80097ee:	4b41      	ldr	r3, [pc, #260]	@ (80098f4 <xTaskIncrementTick+0x150>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	4b40      	ldr	r3, [pc, #256]	@ (80098f8 <xTaskIncrementTick+0x154>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a3e      	ldr	r2, [pc, #248]	@ (80098f4 <xTaskIncrementTick+0x150>)
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	4a3e      	ldr	r2, [pc, #248]	@ (80098f8 <xTaskIncrementTick+0x154>)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	4b3e      	ldr	r3, [pc, #248]	@ (80098fc <xTaskIncrementTick+0x158>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	4a3c      	ldr	r2, [pc, #240]	@ (80098fc <xTaskIncrementTick+0x158>)
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	f000 fafc 	bl	8009e08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009810:	4b3b      	ldr	r3, [pc, #236]	@ (8009900 <xTaskIncrementTick+0x15c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	429a      	cmp	r2, r3
 8009818:	d349      	bcc.n	80098ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800981a:	4b36      	ldr	r3, [pc, #216]	@ (80098f4 <xTaskIncrementTick+0x150>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009824:	4b36      	ldr	r3, [pc, #216]	@ (8009900 <xTaskIncrementTick+0x15c>)
 8009826:	f04f 32ff 	mov.w	r2, #4294967295
 800982a:	601a      	str	r2, [r3, #0]
					break;
 800982c:	e03f      	b.n	80098ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982e:	4b31      	ldr	r3, [pc, #196]	@ (80098f4 <xTaskIncrementTick+0x150>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	429a      	cmp	r2, r3
 8009844:	d203      	bcs.n	800984e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009846:	4a2e      	ldr	r2, [pc, #184]	@ (8009900 <xTaskIncrementTick+0x15c>)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800984c:	e02f      	b.n	80098ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	3304      	adds	r3, #4
 8009852:	4618      	mov	r0, r3
 8009854:	f7fe ff82 	bl	800875c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	3318      	adds	r3, #24
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe ff79 	bl	800875c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986e:	4b25      	ldr	r3, [pc, #148]	@ (8009904 <xTaskIncrementTick+0x160>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d903      	bls.n	800987e <xTaskIncrementTick+0xda>
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987a:	4a22      	ldr	r2, [pc, #136]	@ (8009904 <xTaskIncrementTick+0x160>)
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4a1f      	ldr	r2, [pc, #124]	@ (8009908 <xTaskIncrementTick+0x164>)
 800988c:	441a      	add	r2, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7fe ff04 	bl	80086a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800989e:	4b1b      	ldr	r3, [pc, #108]	@ (800990c <xTaskIncrementTick+0x168>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d3b8      	bcc.n	800981a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80098a8:	2301      	movs	r3, #1
 80098aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098ac:	e7b5      	b.n	800981a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098ae:	4b17      	ldr	r3, [pc, #92]	@ (800990c <xTaskIncrementTick+0x168>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b4:	4914      	ldr	r1, [pc, #80]	@ (8009908 <xTaskIncrementTick+0x164>)
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	440b      	add	r3, r1
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d901      	bls.n	80098ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80098c6:	2301      	movs	r3, #1
 80098c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098ca:	4b11      	ldr	r3, [pc, #68]	@ (8009910 <xTaskIncrementTick+0x16c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80098d2:	2301      	movs	r3, #1
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e004      	b.n	80098e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009914 <xTaskIncrementTick+0x170>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3301      	adds	r3, #1
 80098de:	4a0d      	ldr	r2, [pc, #52]	@ (8009914 <xTaskIncrementTick+0x170>)
 80098e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098e2:	697b      	ldr	r3, [r7, #20]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	200069c8 	.word	0x200069c8
 80098f0:	200069a4 	.word	0x200069a4
 80098f4:	20006958 	.word	0x20006958
 80098f8:	2000695c 	.word	0x2000695c
 80098fc:	200069b8 	.word	0x200069b8
 8009900:	200069c0 	.word	0x200069c0
 8009904:	200069a8 	.word	0x200069a8
 8009908:	200064d0 	.word	0x200064d0
 800990c:	200064cc 	.word	0x200064cc
 8009910:	200069b4 	.word	0x200069b4
 8009914:	200069b0 	.word	0x200069b0

08009918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800991e:	4b28      	ldr	r3, [pc, #160]	@ (80099c0 <vTaskSwitchContext+0xa8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009926:	4b27      	ldr	r3, [pc, #156]	@ (80099c4 <vTaskSwitchContext+0xac>)
 8009928:	2201      	movs	r2, #1
 800992a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800992c:	e042      	b.n	80099b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800992e:	4b25      	ldr	r3, [pc, #148]	@ (80099c4 <vTaskSwitchContext+0xac>)
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009934:	4b24      	ldr	r3, [pc, #144]	@ (80099c8 <vTaskSwitchContext+0xb0>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e011      	b.n	8009960 <vTaskSwitchContext+0x48>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10b      	bne.n	800995a <vTaskSwitchContext+0x42>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	607b      	str	r3, [r7, #4]
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop
 8009958:	e7fd      	b.n	8009956 <vTaskSwitchContext+0x3e>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3b01      	subs	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	491a      	ldr	r1, [pc, #104]	@ (80099cc <vTaskSwitchContext+0xb4>)
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	440b      	add	r3, r1
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0e3      	beq.n	800993c <vTaskSwitchContext+0x24>
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4a13      	ldr	r2, [pc, #76]	@ (80099cc <vTaskSwitchContext+0xb4>)
 8009980:	4413      	add	r3, r2
 8009982:	60bb      	str	r3, [r7, #8]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	685a      	ldr	r2, [r3, #4]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	605a      	str	r2, [r3, #4]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	3308      	adds	r3, #8
 8009996:	429a      	cmp	r2, r3
 8009998:	d104      	bne.n	80099a4 <vTaskSwitchContext+0x8c>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	605a      	str	r2, [r3, #4]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	4a09      	ldr	r2, [pc, #36]	@ (80099d0 <vTaskSwitchContext+0xb8>)
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	4a06      	ldr	r2, [pc, #24]	@ (80099c8 <vTaskSwitchContext+0xb0>)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6013      	str	r3, [r2, #0]
}
 80099b4:	bf00      	nop
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	200069c8 	.word	0x200069c8
 80099c4:	200069b4 	.word	0x200069b4
 80099c8:	200069a8 	.word	0x200069a8
 80099cc:	200064d0 	.word	0x200064d0
 80099d0:	200064cc 	.word	0x200064cc

080099d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60fb      	str	r3, [r7, #12]
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099fc:	4b07      	ldr	r3, [pc, #28]	@ (8009a1c <vTaskPlaceOnEventList+0x48>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3318      	adds	r3, #24
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7fe fe70 	bl	80086ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	6838      	ldr	r0, [r7, #0]
 8009a0e:	f000 faa9 	bl	8009f64 <prvAddCurrentTaskToDelayedList>
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200064cc 	.word	0x200064cc

08009a20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	617b      	str	r3, [r7, #20]
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	e7fd      	b.n	8009a46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a74 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3318      	adds	r3, #24
 8009a50:	4619      	mov	r1, r3
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7fe fe25 	bl	80086a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	68b8      	ldr	r0, [r7, #8]
 8009a68:	f000 fa7c 	bl	8009f64 <prvAddCurrentTaskToDelayedList>
	}
 8009a6c:	bf00      	nop
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200064cc 	.word	0x200064cc

08009a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10b      	bne.n	8009aa6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60fb      	str	r3, [r7, #12]
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	e7fd      	b.n	8009aa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3318      	adds	r3, #24
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fe56 	bl	800875c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b28 <xTaskRemoveFromEventList+0xb0>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d11d      	bne.n	8009af4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe fe4d 	bl	800875c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac6:	4b19      	ldr	r3, [pc, #100]	@ (8009b2c <xTaskRemoveFromEventList+0xb4>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d903      	bls.n	8009ad6 <xTaskRemoveFromEventList+0x5e>
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad2:	4a16      	ldr	r2, [pc, #88]	@ (8009b2c <xTaskRemoveFromEventList+0xb4>)
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4a13      	ldr	r2, [pc, #76]	@ (8009b30 <xTaskRemoveFromEventList+0xb8>)
 8009ae4:	441a      	add	r2, r3
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4619      	mov	r1, r3
 8009aec:	4610      	mov	r0, r2
 8009aee:	f7fe fdd8 	bl	80086a2 <vListInsertEnd>
 8009af2:	e005      	b.n	8009b00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	3318      	adds	r3, #24
 8009af8:	4619      	mov	r1, r3
 8009afa:	480e      	ldr	r0, [pc, #56]	@ (8009b34 <xTaskRemoveFromEventList+0xbc>)
 8009afc:	f7fe fdd1 	bl	80086a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b04:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <xTaskRemoveFromEventList+0xc0>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d905      	bls.n	8009b1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b12:	4b0a      	ldr	r3, [pc, #40]	@ (8009b3c <xTaskRemoveFromEventList+0xc4>)
 8009b14:	2201      	movs	r2, #1
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	e001      	b.n	8009b1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b1e:	697b      	ldr	r3, [r7, #20]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	200069c8 	.word	0x200069c8
 8009b2c:	200069a8 	.word	0x200069a8
 8009b30:	200064d0 	.word	0x200064d0
 8009b34:	20006960 	.word	0x20006960
 8009b38:	200064cc 	.word	0x200064cc
 8009b3c:	200069b4 	.word	0x200069b4

08009b40 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	60fb      	str	r3, [r7, #12]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009b66:	f000 fedf 	bl	800a928 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b6a:	4b07      	ldr	r3, [pc, #28]	@ (8009b88 <vTaskSetTimeOutState+0x48>)
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009b72:	4b06      	ldr	r3, [pc, #24]	@ (8009b8c <vTaskSetTimeOutState+0x4c>)
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009b7a:	f000 ff07 	bl	800a98c <vPortExitCritical>
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200069b8 	.word	0x200069b8
 8009b8c:	200069a4 	.word	0x200069a4

08009b90 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b98:	4b06      	ldr	r3, [pc, #24]	@ (8009bb4 <vTaskInternalSetTimeOutState+0x24>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ba0:	4b05      	ldr	r3, [pc, #20]	@ (8009bb8 <vTaskInternalSetTimeOutState+0x28>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	605a      	str	r2, [r3, #4]
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	200069b8 	.word	0x200069b8
 8009bb8:	200069a4 	.word	0x200069a4

08009bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10b      	bne.n	8009be4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	613b      	str	r3, [r7, #16]
}
 8009bde:	bf00      	nop
 8009be0:	bf00      	nop
 8009be2:	e7fd      	b.n	8009be0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	60fb      	str	r3, [r7, #12]
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	e7fd      	b.n	8009bfe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c02:	f000 fe91 	bl	800a928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c06:	4b1d      	ldr	r3, [pc, #116]	@ (8009c7c <xTaskCheckForTimeOut+0xc0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1e:	d102      	bne.n	8009c26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	e023      	b.n	8009c6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	4b15      	ldr	r3, [pc, #84]	@ (8009c80 <xTaskCheckForTimeOut+0xc4>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d007      	beq.n	8009c42 <xTaskCheckForTimeOut+0x86>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d302      	bcc.n	8009c42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	61fb      	str	r3, [r7, #28]
 8009c40:	e015      	b.n	8009c6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d20b      	bcs.n	8009c64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	1ad2      	subs	r2, r2, r3
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff ff99 	bl	8009b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	e004      	b.n	8009c6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c6e:	f000 fe8d 	bl	800a98c <vPortExitCritical>

	return xReturn;
 8009c72:	69fb      	ldr	r3, [r7, #28]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3720      	adds	r7, #32
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	200069a4 	.word	0x200069a4
 8009c80:	200069b8 	.word	0x200069b8

08009c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c88:	4b03      	ldr	r3, [pc, #12]	@ (8009c98 <vTaskMissedYield+0x14>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
}
 8009c8e:	bf00      	nop
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	200069b4 	.word	0x200069b4

08009c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ca4:	f000 f852 	bl	8009d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ca8:	4b06      	ldr	r3, [pc, #24]	@ (8009cc4 <prvIdleTask+0x28>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d9f9      	bls.n	8009ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cb0:	4b05      	ldr	r3, [pc, #20]	@ (8009cc8 <prvIdleTask+0x2c>)
 8009cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cc0:	e7f0      	b.n	8009ca4 <prvIdleTask+0x8>
 8009cc2:	bf00      	nop
 8009cc4:	200064d0 	.word	0x200064d0
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	607b      	str	r3, [r7, #4]
 8009cd6:	e00c      	b.n	8009cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4a12      	ldr	r2, [pc, #72]	@ (8009d2c <prvInitialiseTaskLists+0x60>)
 8009ce4:	4413      	add	r3, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fcae 	bl	8008648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	607b      	str	r3, [r7, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b37      	cmp	r3, #55	@ 0x37
 8009cf6:	d9ef      	bls.n	8009cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cf8:	480d      	ldr	r0, [pc, #52]	@ (8009d30 <prvInitialiseTaskLists+0x64>)
 8009cfa:	f7fe fca5 	bl	8008648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cfe:	480d      	ldr	r0, [pc, #52]	@ (8009d34 <prvInitialiseTaskLists+0x68>)
 8009d00:	f7fe fca2 	bl	8008648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d04:	480c      	ldr	r0, [pc, #48]	@ (8009d38 <prvInitialiseTaskLists+0x6c>)
 8009d06:	f7fe fc9f 	bl	8008648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d0a:	480c      	ldr	r0, [pc, #48]	@ (8009d3c <prvInitialiseTaskLists+0x70>)
 8009d0c:	f7fe fc9c 	bl	8008648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d10:	480b      	ldr	r0, [pc, #44]	@ (8009d40 <prvInitialiseTaskLists+0x74>)
 8009d12:	f7fe fc99 	bl	8008648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d16:	4b0b      	ldr	r3, [pc, #44]	@ (8009d44 <prvInitialiseTaskLists+0x78>)
 8009d18:	4a05      	ldr	r2, [pc, #20]	@ (8009d30 <prvInitialiseTaskLists+0x64>)
 8009d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d48 <prvInitialiseTaskLists+0x7c>)
 8009d1e:	4a05      	ldr	r2, [pc, #20]	@ (8009d34 <prvInitialiseTaskLists+0x68>)
 8009d20:	601a      	str	r2, [r3, #0]
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200064d0 	.word	0x200064d0
 8009d30:	20006930 	.word	0x20006930
 8009d34:	20006944 	.word	0x20006944
 8009d38:	20006960 	.word	0x20006960
 8009d3c:	20006974 	.word	0x20006974
 8009d40:	2000698c 	.word	0x2000698c
 8009d44:	20006958 	.word	0x20006958
 8009d48:	2000695c 	.word	0x2000695c

08009d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d52:	e019      	b.n	8009d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d54:	f000 fde8 	bl	800a928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d58:	4b10      	ldr	r3, [pc, #64]	@ (8009d9c <prvCheckTasksWaitingTermination+0x50>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fe fcf9 	bl	800875c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009da0 <prvCheckTasksWaitingTermination+0x54>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	4a0b      	ldr	r2, [pc, #44]	@ (8009da0 <prvCheckTasksWaitingTermination+0x54>)
 8009d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d74:	4b0b      	ldr	r3, [pc, #44]	@ (8009da4 <prvCheckTasksWaitingTermination+0x58>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009da4 <prvCheckTasksWaitingTermination+0x58>)
 8009d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d7e:	f000 fe05 	bl	800a98c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f810 	bl	8009da8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d88:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <prvCheckTasksWaitingTermination+0x58>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e1      	bne.n	8009d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20006974 	.word	0x20006974
 8009da0:	200069a0 	.word	0x200069a0
 8009da4:	20006988 	.word	0x20006988

08009da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d108      	bne.n	8009dcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 ffa2 	bl	800ad08 <vPortFree>
				vPortFree( pxTCB );
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 ff9f 	bl	800ad08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009dca:	e019      	b.n	8009e00 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d103      	bne.n	8009dde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 ff96 	bl	800ad08 <vPortFree>
	}
 8009ddc:	e010      	b.n	8009e00 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d00b      	beq.n	8009e00 <prvDeleteTCB+0x58>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	60fb      	str	r3, [r7, #12]
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <prvDeleteTCB+0x54>
	}
 8009e00:	bf00      	nop
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e40 <prvResetNextTaskUnblockTime+0x38>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d104      	bne.n	8009e22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e18:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <prvResetNextTaskUnblockTime+0x3c>)
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e20:	e008      	b.n	8009e34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e22:	4b07      	ldr	r3, [pc, #28]	@ (8009e40 <prvResetNextTaskUnblockTime+0x38>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	4a04      	ldr	r2, [pc, #16]	@ (8009e44 <prvResetNextTaskUnblockTime+0x3c>)
 8009e32:	6013      	str	r3, [r2, #0]
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	20006958 	.word	0x20006958
 8009e44:	200069c0 	.word	0x200069c0

08009e48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e7c <xTaskGetSchedulerState+0x34>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e56:	2301      	movs	r3, #1
 8009e58:	607b      	str	r3, [r7, #4]
 8009e5a:	e008      	b.n	8009e6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e5c:	4b08      	ldr	r3, [pc, #32]	@ (8009e80 <xTaskGetSchedulerState+0x38>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e64:	2302      	movs	r3, #2
 8009e66:	607b      	str	r3, [r7, #4]
 8009e68:	e001      	b.n	8009e6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e6e:	687b      	ldr	r3, [r7, #4]
	}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	200069ac 	.word	0x200069ac
 8009e80:	200069c8 	.word	0x200069c8

08009e84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d058      	beq.n	8009f4c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f58 <xTaskPriorityDisinherit+0xd4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d00b      	beq.n	8009ebc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	60fb      	str	r3, [r7, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	bf00      	nop
 8009eba:	e7fd      	b.n	8009eb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10b      	bne.n	8009edc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	60bb      	str	r3, [r7, #8]
}
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	e7fd      	b.n	8009ed8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee0:	1e5a      	subs	r2, r3, #1
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d02c      	beq.n	8009f4c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d128      	bne.n	8009f4c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fc2c 	bl	800875c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009f5c <xTaskPriorityDisinherit+0xd8>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d903      	bls.n	8009f2c <xTaskPriorityDisinherit+0xa8>
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f28:	4a0c      	ldr	r2, [pc, #48]	@ (8009f5c <xTaskPriorityDisinherit+0xd8>)
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4a09      	ldr	r2, [pc, #36]	@ (8009f60 <xTaskPriorityDisinherit+0xdc>)
 8009f3a:	441a      	add	r2, r3
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f7fe fbad 	bl	80086a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f4c:	697b      	ldr	r3, [r7, #20]
	}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	200064cc 	.word	0x200064cc
 8009f5c:	200069a8 	.word	0x200069a8
 8009f60:	200064d0 	.word	0x200064d0

08009f64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f6e:	4b21      	ldr	r3, [pc, #132]	@ (8009ff4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f74:	4b20      	ldr	r3, [pc, #128]	@ (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fbee 	bl	800875c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f86:	d10a      	bne.n	8009f9e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4619      	mov	r1, r3
 8009f96:	4819      	ldr	r0, [pc, #100]	@ (8009ffc <prvAddCurrentTaskToDelayedList+0x98>)
 8009f98:	f7fe fb83 	bl	80086a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f9c:	e026      	b.n	8009fec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fa6:	4b14      	ldr	r3, [pc, #80]	@ (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d209      	bcs.n	8009fca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fb6:	4b12      	ldr	r3, [pc, #72]	@ (800a000 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fe fb91 	bl	80086ea <vListInsert>
}
 8009fc8:	e010      	b.n	8009fec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fca:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe fb87 	bl	80086ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	@ (800a008 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d202      	bcs.n	8009fec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009fe6:	4a08      	ldr	r2, [pc, #32]	@ (800a008 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	6013      	str	r3, [r2, #0]
}
 8009fec:	bf00      	nop
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	200069a4 	.word	0x200069a4
 8009ff8:	200064cc 	.word	0x200064cc
 8009ffc:	2000698c 	.word	0x2000698c
 800a000:	2000695c 	.word	0x2000695c
 800a004:	20006958 	.word	0x20006958
 800a008:	200069c0 	.word	0x200069c0

0800a00c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	@ 0x28
 800a010:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a012:	2300      	movs	r3, #0
 800a014:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a016:	f000 fb13 	bl	800a640 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a01a:	4b1d      	ldr	r3, [pc, #116]	@ (800a090 <xTimerCreateTimerTask+0x84>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d021      	beq.n	800a066 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a02a:	1d3a      	adds	r2, r7, #4
 800a02c:	f107 0108 	add.w	r1, r7, #8
 800a030:	f107 030c 	add.w	r3, r7, #12
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe faed 	bl	8008614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	9202      	str	r2, [sp, #8]
 800a042:	9301      	str	r3, [sp, #4]
 800a044:	2302      	movs	r3, #2
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	2300      	movs	r3, #0
 800a04a:	460a      	mov	r2, r1
 800a04c:	4911      	ldr	r1, [pc, #68]	@ (800a094 <xTimerCreateTimerTask+0x88>)
 800a04e:	4812      	ldr	r0, [pc, #72]	@ (800a098 <xTimerCreateTimerTask+0x8c>)
 800a050:	f7ff f8a8 	bl	80091a4 <xTaskCreateStatic>
 800a054:	4603      	mov	r3, r0
 800a056:	4a11      	ldr	r2, [pc, #68]	@ (800a09c <xTimerCreateTimerTask+0x90>)
 800a058:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a05a:	4b10      	ldr	r3, [pc, #64]	@ (800a09c <xTimerCreateTimerTask+0x90>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a062:	2301      	movs	r3, #1
 800a064:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10b      	bne.n	800a084 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	613b      	str	r3, [r7, #16]
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	e7fd      	b.n	800a080 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a084:	697b      	ldr	r3, [r7, #20]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	200069fc 	.word	0x200069fc
 800a094:	0801acf4 	.word	0x0801acf4
 800a098:	0800a1d9 	.word	0x0800a1d9
 800a09c:	20006a00 	.word	0x20006a00

0800a0a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08a      	sub	sp, #40	@ 0x28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <xTimerGenericCommand+0x30>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0d0:	4b19      	ldr	r3, [pc, #100]	@ (800a138 <xTimerGenericCommand+0x98>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d02a      	beq.n	800a12e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b05      	cmp	r3, #5
 800a0e8:	dc18      	bgt.n	800a11c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0ea:	f7ff fead 	bl	8009e48 <xTaskGetSchedulerState>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d109      	bne.n	800a108 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0f4:	4b10      	ldr	r3, [pc, #64]	@ (800a138 <xTimerGenericCommand+0x98>)
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	f107 0110 	add.w	r1, r7, #16
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a100:	f7fe fc60 	bl	80089c4 <xQueueGenericSend>
 800a104:	6278      	str	r0, [r7, #36]	@ 0x24
 800a106:	e012      	b.n	800a12e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a108:	4b0b      	ldr	r3, [pc, #44]	@ (800a138 <xTimerGenericCommand+0x98>)
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	f107 0110 	add.w	r1, r7, #16
 800a110:	2300      	movs	r3, #0
 800a112:	2200      	movs	r2, #0
 800a114:	f7fe fc56 	bl	80089c4 <xQueueGenericSend>
 800a118:	6278      	str	r0, [r7, #36]	@ 0x24
 800a11a:	e008      	b.n	800a12e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a11c:	4b06      	ldr	r3, [pc, #24]	@ (800a138 <xTimerGenericCommand+0x98>)
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	f107 0110 	add.w	r1, r7, #16
 800a124:	2300      	movs	r3, #0
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	f7fe fd4e 	bl	8008bc8 <xQueueGenericSendFromISR>
 800a12c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a130:	4618      	mov	r0, r3
 800a132:	3728      	adds	r7, #40	@ 0x28
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	200069fc 	.word	0x200069fc

0800a13c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af02      	add	r7, sp, #8
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a146:	4b23      	ldr	r3, [pc, #140]	@ (800a1d4 <prvProcessExpiredTimer+0x98>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	3304      	adds	r3, #4
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe fb01 	bl	800875c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d023      	beq.n	800a1b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	699a      	ldr	r2, [r3, #24]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	18d1      	adds	r1, r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	6978      	ldr	r0, [r7, #20]
 800a176:	f000 f8d5 	bl	800a324 <prvInsertTimerInActiveList>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d020      	beq.n	800a1c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a180:	2300      	movs	r3, #0
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	2300      	movs	r3, #0
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	2100      	movs	r1, #0
 800a18a:	6978      	ldr	r0, [r7, #20]
 800a18c:	f7ff ff88 	bl	800a0a0 <xTimerGenericCommand>
 800a190:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d114      	bne.n	800a1c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	60fb      	str	r3, [r7, #12]
}
 800a1aa:	bf00      	nop
 800a1ac:	bf00      	nop
 800a1ae:	e7fd      	b.n	800a1ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1b6:	f023 0301 	bic.w	r3, r3, #1
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	6978      	ldr	r0, [r7, #20]
 800a1c8:	4798      	blx	r3
}
 800a1ca:	bf00      	nop
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200069f4 	.word	0x200069f4

0800a1d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 f859 	bl	800a29c <prvGetNextExpireTime>
 800a1ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f805 	bl	800a200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1f6:	f000 f8d7 	bl	800a3a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1fa:	bf00      	nop
 800a1fc:	e7f0      	b.n	800a1e0 <prvTimerTask+0x8>
	...

0800a200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a20a:	f7ff fa0f 	bl	800962c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a20e:	f107 0308 	add.w	r3, r7, #8
 800a212:	4618      	mov	r0, r3
 800a214:	f000 f866 	bl	800a2e4 <prvSampleTimeNow>
 800a218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d130      	bne.n	800a282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <prvProcessTimerOrBlockTask+0x3c>
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d806      	bhi.n	800a23c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a22e:	f7ff fa0b 	bl	8009648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a232:	68f9      	ldr	r1, [r7, #12]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff ff81 	bl	800a13c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a23a:	e024      	b.n	800a286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d008      	beq.n	800a254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a242:	4b13      	ldr	r3, [pc, #76]	@ (800a290 <prvProcessTimerOrBlockTask+0x90>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <prvProcessTimerOrBlockTask+0x50>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e000      	b.n	800a252 <prvProcessTimerOrBlockTask+0x52>
 800a250:	2300      	movs	r3, #0
 800a252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a254:	4b0f      	ldr	r3, [pc, #60]	@ (800a294 <prvProcessTimerOrBlockTask+0x94>)
 800a256:	6818      	ldr	r0, [r3, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4619      	mov	r1, r3
 800a262:	f7fe ff6b 	bl	800913c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a266:	f7ff f9ef 	bl	8009648 <xTaskResumeAll>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a270:	4b09      	ldr	r3, [pc, #36]	@ (800a298 <prvProcessTimerOrBlockTask+0x98>)
 800a272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a276:	601a      	str	r2, [r3, #0]
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	f3bf 8f6f 	isb	sy
}
 800a280:	e001      	b.n	800a286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a282:	f7ff f9e1 	bl	8009648 <xTaskResumeAll>
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	200069f8 	.word	0x200069f8
 800a294:	200069fc 	.word	0x200069fc
 800a298:	e000ed04 	.word	0xe000ed04

0800a29c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a2e0 <prvGetNextExpireTime+0x44>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <prvGetNextExpireTime+0x16>
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	e000      	b.n	800a2b4 <prvGetNextExpireTime+0x18>
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2c0:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <prvGetNextExpireTime+0x44>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	e001      	b.n	800a2d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	200069f4 	.word	0x200069f4

0800a2e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2ec:	f7ff fa4a 	bl	8009784 <xTaskGetTickCount>
 800a2f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a320 <prvSampleTimeNow+0x3c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d205      	bcs.n	800a308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2fc:	f000 f93a 	bl	800a574 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	e002      	b.n	800a30e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a30e:	4a04      	ldr	r2, [pc, #16]	@ (800a320 <prvSampleTimeNow+0x3c>)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a314:	68fb      	ldr	r3, [r7, #12]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20006a04 	.word	0x20006a04

0800a324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a332:	2300      	movs	r3, #0
 800a334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	429a      	cmp	r2, r3
 800a348:	d812      	bhi.n	800a370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	429a      	cmp	r2, r3
 800a356:	d302      	bcc.n	800a35e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a358:	2301      	movs	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	e01b      	b.n	800a396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a35e:	4b10      	ldr	r3, [pc, #64]	@ (800a3a0 <prvInsertTimerInActiveList+0x7c>)
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3304      	adds	r3, #4
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f7fe f9be 	bl	80086ea <vListInsert>
 800a36e:	e012      	b.n	800a396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	429a      	cmp	r2, r3
 800a376:	d206      	bcs.n	800a386 <prvInsertTimerInActiveList+0x62>
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d302      	bcc.n	800a386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	e007      	b.n	800a396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a386:	4b07      	ldr	r3, [pc, #28]	@ (800a3a4 <prvInsertTimerInActiveList+0x80>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4619      	mov	r1, r3
 800a390:	4610      	mov	r0, r2
 800a392:	f7fe f9aa 	bl	80086ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a396:	697b      	ldr	r3, [r7, #20]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	200069f8 	.word	0x200069f8
 800a3a4:	200069f4 	.word	0x200069f4

0800a3a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08e      	sub	sp, #56	@ 0x38
 800a3ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3ae:	e0ce      	b.n	800a54e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	da19      	bge.n	800a3ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3b6:	1d3b      	adds	r3, r7, #4
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	61fb      	str	r3, [r7, #28]
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	e7fd      	b.n	800a3d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3e0:	6850      	ldr	r0, [r2, #4]
 800a3e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3e4:	6892      	ldr	r2, [r2, #8]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f2c0 80ae 	blt.w	800a54e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d004      	beq.n	800a408 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	3304      	adds	r3, #4
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe f9aa 	bl	800875c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a408:	463b      	mov	r3, r7
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff ff6a 	bl	800a2e4 <prvSampleTimeNow>
 800a410:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b09      	cmp	r3, #9
 800a416:	f200 8097 	bhi.w	800a548 <prvProcessReceivedCommands+0x1a0>
 800a41a:	a201      	add	r2, pc, #4	@ (adr r2, 800a420 <prvProcessReceivedCommands+0x78>)
 800a41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a420:	0800a449 	.word	0x0800a449
 800a424:	0800a449 	.word	0x0800a449
 800a428:	0800a449 	.word	0x0800a449
 800a42c:	0800a4bf 	.word	0x0800a4bf
 800a430:	0800a4d3 	.word	0x0800a4d3
 800a434:	0800a51f 	.word	0x0800a51f
 800a438:	0800a449 	.word	0x0800a449
 800a43c:	0800a449 	.word	0x0800a449
 800a440:	0800a4bf 	.word	0x0800a4bf
 800a444:	0800a4d3 	.word	0x0800a4d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a44e:	f043 0301 	orr.w	r3, r3, #1
 800a452:	b2da      	uxtb	r2, r3
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	18d1      	adds	r1, r2, r3
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a468:	f7ff ff5c 	bl	800a324 <prvInsertTimerInActiveList>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d06c      	beq.n	800a54c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a478:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b00      	cmp	r3, #0
 800a486:	d061      	beq.n	800a54c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	441a      	add	r2, r3
 800a490:	2300      	movs	r3, #0
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	2300      	movs	r3, #0
 800a496:	2100      	movs	r1, #0
 800a498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a49a:	f7ff fe01 	bl	800a0a0 <xTimerGenericCommand>
 800a49e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d152      	bne.n	800a54c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	61bb      	str	r3, [r7, #24]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4c4:	f023 0301 	bic.w	r3, r3, #1
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4d0:	e03d      	b.n	800a54e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4d8:	f043 0301 	orr.w	r3, r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10b      	bne.n	800a50a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	617b      	str	r3, [r7, #20]
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	e7fd      	b.n	800a506 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a510:	18d1      	adds	r1, r2, r3
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a518:	f7ff ff04 	bl	800a324 <prvInsertTimerInActiveList>
					break;
 800a51c:	e017      	b.n	800a54e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a524:	f003 0302 	and.w	r3, r3, #2
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a52c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a52e:	f000 fbeb 	bl	800ad08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a532:	e00c      	b.n	800a54e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a53a:	f023 0301 	bic.w	r3, r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a546:	e002      	b.n	800a54e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a548:	bf00      	nop
 800a54a:	e000      	b.n	800a54e <prvProcessReceivedCommands+0x1a6>
					break;
 800a54c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a54e:	4b08      	ldr	r3, [pc, #32]	@ (800a570 <prvProcessReceivedCommands+0x1c8>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	1d39      	adds	r1, r7, #4
 800a554:	2200      	movs	r2, #0
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe fbd4 	bl	8008d04 <xQueueReceive>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f47f af26 	bne.w	800a3b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	3730      	adds	r7, #48	@ 0x30
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	200069fc 	.word	0x200069fc

0800a574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a57a:	e049      	b.n	800a610 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a57c:	4b2e      	ldr	r3, [pc, #184]	@ (800a638 <prvSwitchTimerLists+0xc4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a586:	4b2c      	ldr	r3, [pc, #176]	@ (800a638 <prvSwitchTimerLists+0xc4>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3304      	adds	r3, #4
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe f8e1 	bl	800875c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5a8:	f003 0304 	and.w	r3, r3, #4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d02f      	beq.n	800a610 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d90e      	bls.n	800a5e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a638 <prvSwitchTimerLists+0xc4>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7fe f886 	bl	80086ea <vListInsert>
 800a5de:	e017      	b.n	800a610 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff fd58 	bl	800a0a0 <xTimerGenericCommand>
 800a5f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10b      	bne.n	800a610 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	603b      	str	r3, [r7, #0]
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a610:	4b09      	ldr	r3, [pc, #36]	@ (800a638 <prvSwitchTimerLists+0xc4>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1b0      	bne.n	800a57c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a61a:	4b07      	ldr	r3, [pc, #28]	@ (800a638 <prvSwitchTimerLists+0xc4>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a620:	4b06      	ldr	r3, [pc, #24]	@ (800a63c <prvSwitchTimerLists+0xc8>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a04      	ldr	r2, [pc, #16]	@ (800a638 <prvSwitchTimerLists+0xc4>)
 800a626:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a628:	4a04      	ldr	r2, [pc, #16]	@ (800a63c <prvSwitchTimerLists+0xc8>)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	6013      	str	r3, [r2, #0]
}
 800a62e:	bf00      	nop
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200069f4 	.word	0x200069f4
 800a63c:	200069f8 	.word	0x200069f8

0800a640 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a646:	f000 f96f 	bl	800a928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a64a:	4b15      	ldr	r3, [pc, #84]	@ (800a6a0 <prvCheckForValidListAndQueue+0x60>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d120      	bne.n	800a694 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a652:	4814      	ldr	r0, [pc, #80]	@ (800a6a4 <prvCheckForValidListAndQueue+0x64>)
 800a654:	f7fd fff8 	bl	8008648 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a658:	4813      	ldr	r0, [pc, #76]	@ (800a6a8 <prvCheckForValidListAndQueue+0x68>)
 800a65a:	f7fd fff5 	bl	8008648 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a65e:	4b13      	ldr	r3, [pc, #76]	@ (800a6ac <prvCheckForValidListAndQueue+0x6c>)
 800a660:	4a10      	ldr	r2, [pc, #64]	@ (800a6a4 <prvCheckForValidListAndQueue+0x64>)
 800a662:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a664:	4b12      	ldr	r3, [pc, #72]	@ (800a6b0 <prvCheckForValidListAndQueue+0x70>)
 800a666:	4a10      	ldr	r2, [pc, #64]	@ (800a6a8 <prvCheckForValidListAndQueue+0x68>)
 800a668:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a66a:	2300      	movs	r3, #0
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	4b11      	ldr	r3, [pc, #68]	@ (800a6b4 <prvCheckForValidListAndQueue+0x74>)
 800a670:	4a11      	ldr	r2, [pc, #68]	@ (800a6b8 <prvCheckForValidListAndQueue+0x78>)
 800a672:	2110      	movs	r1, #16
 800a674:	200a      	movs	r0, #10
 800a676:	f7fe f905 	bl	8008884 <xQueueGenericCreateStatic>
 800a67a:	4603      	mov	r3, r0
 800a67c:	4a08      	ldr	r2, [pc, #32]	@ (800a6a0 <prvCheckForValidListAndQueue+0x60>)
 800a67e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a680:	4b07      	ldr	r3, [pc, #28]	@ (800a6a0 <prvCheckForValidListAndQueue+0x60>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d005      	beq.n	800a694 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a688:	4b05      	ldr	r3, [pc, #20]	@ (800a6a0 <prvCheckForValidListAndQueue+0x60>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	490b      	ldr	r1, [pc, #44]	@ (800a6bc <prvCheckForValidListAndQueue+0x7c>)
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fd2a 	bl	80090e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a694:	f000 f97a 	bl	800a98c <vPortExitCritical>
}
 800a698:	bf00      	nop
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200069fc 	.word	0x200069fc
 800a6a4:	200069cc 	.word	0x200069cc
 800a6a8:	200069e0 	.word	0x200069e0
 800a6ac:	200069f4 	.word	0x200069f4
 800a6b0:	200069f8 	.word	0x200069f8
 800a6b4:	20006aa8 	.word	0x20006aa8
 800a6b8:	20006a08 	.word	0x20006a08
 800a6bc:	0801acfc 	.word	0x0801acfc

0800a6c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	3b04      	subs	r3, #4
 800a6d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a6d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b04      	subs	r3, #4
 800a6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f023 0201 	bic.w	r2, r3, #1
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3b04      	subs	r3, #4
 800a6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6f0:	4a0c      	ldr	r2, [pc, #48]	@ (800a724 <pxPortInitialiseStack+0x64>)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3b14      	subs	r3, #20
 800a6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3b04      	subs	r3, #4
 800a706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f06f 0202 	mvn.w	r2, #2
 800a70e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3b20      	subs	r3, #32
 800a714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a716:	68fb      	ldr	r3, [r7, #12]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	0800a729 	.word	0x0800a729

0800a728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a732:	4b13      	ldr	r3, [pc, #76]	@ (800a780 <prvTaskExitError+0x58>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73a:	d00b      	beq.n	800a754 <prvTaskExitError+0x2c>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	60fb      	str	r3, [r7, #12]
}
 800a74e:	bf00      	nop
 800a750:	bf00      	nop
 800a752:	e7fd      	b.n	800a750 <prvTaskExitError+0x28>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	60bb      	str	r3, [r7, #8]
}
 800a766:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a768:	bf00      	nop
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0fc      	beq.n	800a76a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	20000020 	.word	0x20000020
	...

0800a790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a790:	4b07      	ldr	r3, [pc, #28]	@ (800a7b0 <pxCurrentTCBConst2>)
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	6808      	ldr	r0, [r1, #0]
 800a796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	f380 8809 	msr	PSP, r0
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8811 	msr	BASEPRI, r0
 800a7aa:	4770      	bx	lr
 800a7ac:	f3af 8000 	nop.w

0800a7b0 <pxCurrentTCBConst2>:
 800a7b0:	200064cc 	.word	0x200064cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7b4:	bf00      	nop
 800a7b6:	bf00      	nop

0800a7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7b8:	4808      	ldr	r0, [pc, #32]	@ (800a7dc <prvPortStartFirstTask+0x24>)
 800a7ba:	6800      	ldr	r0, [r0, #0]
 800a7bc:	6800      	ldr	r0, [r0, #0]
 800a7be:	f380 8808 	msr	MSP, r0
 800a7c2:	f04f 0000 	mov.w	r0, #0
 800a7c6:	f380 8814 	msr	CONTROL, r0
 800a7ca:	b662      	cpsie	i
 800a7cc:	b661      	cpsie	f
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	df00      	svc	0
 800a7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7da:	bf00      	nop
 800a7dc:	e000ed08 	.word	0xe000ed08

0800a7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7e6:	4b47      	ldr	r3, [pc, #284]	@ (800a904 <xPortStartScheduler+0x124>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a47      	ldr	r2, [pc, #284]	@ (800a908 <xPortStartScheduler+0x128>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d10b      	bne.n	800a808 <xPortStartScheduler+0x28>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a808:	4b3e      	ldr	r3, [pc, #248]	@ (800a904 <xPortStartScheduler+0x124>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a3f      	ldr	r2, [pc, #252]	@ (800a90c <xPortStartScheduler+0x12c>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d10b      	bne.n	800a82a <xPortStartScheduler+0x4a>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	613b      	str	r3, [r7, #16]
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	e7fd      	b.n	800a826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a82a:	4b39      	ldr	r3, [pc, #228]	@ (800a910 <xPortStartScheduler+0x130>)
 800a82c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	22ff      	movs	r2, #255	@ 0xff
 800a83a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	b2db      	uxtb	r3, r3
 800a842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	4b31      	ldr	r3, [pc, #196]	@ (800a914 <xPortStartScheduler+0x134>)
 800a850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a852:	4b31      	ldr	r3, [pc, #196]	@ (800a918 <xPortStartScheduler+0x138>)
 800a854:	2207      	movs	r2, #7
 800a856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a858:	e009      	b.n	800a86e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a85a:	4b2f      	ldr	r3, [pc, #188]	@ (800a918 <xPortStartScheduler+0x138>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3b01      	subs	r3, #1
 800a860:	4a2d      	ldr	r2, [pc, #180]	@ (800a918 <xPortStartScheduler+0x138>)
 800a862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a876:	2b80      	cmp	r3, #128	@ 0x80
 800a878:	d0ef      	beq.n	800a85a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a87a:	4b27      	ldr	r3, [pc, #156]	@ (800a918 <xPortStartScheduler+0x138>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f1c3 0307 	rsb	r3, r3, #7
 800a882:	2b04      	cmp	r3, #4
 800a884:	d00b      	beq.n	800a89e <xPortStartScheduler+0xbe>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	60bb      	str	r3, [r7, #8]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a89e:	4b1e      	ldr	r3, [pc, #120]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8b0:	4a19      	ldr	r2, [pc, #100]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8bc:	4b17      	ldr	r3, [pc, #92]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a16      	ldr	r2, [pc, #88]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a8c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8c8:	4b14      	ldr	r3, [pc, #80]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a13      	ldr	r2, [pc, #76]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a8d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8d4:	f000 f8da 	bl	800aa8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8d8:	4b11      	ldr	r3, [pc, #68]	@ (800a920 <xPortStartScheduler+0x140>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8de:	f000 f8f9 	bl	800aad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <xPortStartScheduler+0x144>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a924 <xPortStartScheduler+0x144>)
 800a8e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a8ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8ee:	f7ff ff63 	bl	800a7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8f2:	f7ff f811 	bl	8009918 <vTaskSwitchContext>
	prvTaskExitError();
 800a8f6:	f7ff ff17 	bl	800a728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	e000ed00 	.word	0xe000ed00
 800a908:	410fc271 	.word	0x410fc271
 800a90c:	410fc270 	.word	0x410fc270
 800a910:	e000e400 	.word	0xe000e400
 800a914:	20006af8 	.word	0x20006af8
 800a918:	20006afc 	.word	0x20006afc
 800a91c:	e000ed20 	.word	0xe000ed20
 800a920:	20000020 	.word	0x20000020
 800a924:	e000ef34 	.word	0xe000ef34

0800a928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a942:	4b10      	ldr	r3, [pc, #64]	@ (800a984 <vPortEnterCritical+0x5c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3301      	adds	r3, #1
 800a948:	4a0e      	ldr	r2, [pc, #56]	@ (800a984 <vPortEnterCritical+0x5c>)
 800a94a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a94c:	4b0d      	ldr	r3, [pc, #52]	@ (800a984 <vPortEnterCritical+0x5c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d110      	bne.n	800a976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a954:	4b0c      	ldr	r3, [pc, #48]	@ (800a988 <vPortEnterCritical+0x60>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00b      	beq.n	800a976 <vPortEnterCritical+0x4e>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	603b      	str	r3, [r7, #0]
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	e7fd      	b.n	800a972 <vPortEnterCritical+0x4a>
	}
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20000020 	.word	0x20000020
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a992:	4b12      	ldr	r3, [pc, #72]	@ (800a9dc <vPortExitCritical+0x50>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10b      	bne.n	800a9b2 <vPortExitCritical+0x26>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	607b      	str	r3, [r7, #4]
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	e7fd      	b.n	800a9ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9dc <vPortExitCritical+0x50>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	4a08      	ldr	r2, [pc, #32]	@ (800a9dc <vPortExitCritical+0x50>)
 800a9ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9bc:	4b07      	ldr	r3, [pc, #28]	@ (800a9dc <vPortExitCritical+0x50>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d105      	bne.n	800a9d0 <vPortExitCritical+0x44>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	f383 8811 	msr	BASEPRI, r3
}
 800a9ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	20000020 	.word	0x20000020

0800a9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9e0:	f3ef 8009 	mrs	r0, PSP
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4b15      	ldr	r3, [pc, #84]	@ (800aa40 <pxCurrentTCBConst>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	f01e 0f10 	tst.w	lr, #16
 800a9f0:	bf08      	it	eq
 800a9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fa:	6010      	str	r0, [r2, #0]
 800a9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa04:	f380 8811 	msr	BASEPRI, r0
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f7fe ff82 	bl	8009918 <vTaskSwitchContext>
 800aa14:	f04f 0000 	mov.w	r0, #0
 800aa18:	f380 8811 	msr	BASEPRI, r0
 800aa1c:	bc09      	pop	{r0, r3}
 800aa1e:	6819      	ldr	r1, [r3, #0]
 800aa20:	6808      	ldr	r0, [r1, #0]
 800aa22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa26:	f01e 0f10 	tst.w	lr, #16
 800aa2a:	bf08      	it	eq
 800aa2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa30:	f380 8809 	msr	PSP, r0
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst>:
 800aa40:	200064cc 	.word	0x200064cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	607b      	str	r3, [r7, #4]
}
 800aa60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa62:	f7fe fe9f 	bl	80097a4 <xTaskIncrementTick>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa6c:	4b06      	ldr	r3, [pc, #24]	@ (800aa88 <xPortSysTickHandler+0x40>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f383 8811 	msr	BASEPRI, r3
}
 800aa7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa90:	4b0b      	ldr	r3, [pc, #44]	@ (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa96:	4b0b      	ldr	r3, [pc, #44]	@ (800aac4 <vPortSetupTimerInterrupt+0x38>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	@ (800aac8 <vPortSetupTimerInterrupt+0x3c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a0a      	ldr	r2, [pc, #40]	@ (800aacc <vPortSetupTimerInterrupt+0x40>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	4a09      	ldr	r2, [pc, #36]	@ (800aad0 <vPortSetupTimerInterrupt+0x44>)
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aaae:	4b04      	ldr	r3, [pc, #16]	@ (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	bf00      	nop
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	e000e010 	.word	0xe000e010
 800aac4:	e000e018 	.word	0xe000e018
 800aac8:	20000014 	.word	0x20000014
 800aacc:	10624dd3 	.word	0x10624dd3
 800aad0:	e000e014 	.word	0xe000e014

0800aad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aae4 <vPortEnableVFP+0x10>
 800aad8:	6801      	ldr	r1, [r0, #0]
 800aada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aade:	6001      	str	r1, [r0, #0]
 800aae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aae2:	bf00      	nop
 800aae4:	e000ed88 	.word	0xe000ed88

0800aae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aaee:	f3ef 8305 	mrs	r3, IPSR
 800aaf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b0f      	cmp	r3, #15
 800aaf8:	d915      	bls.n	800ab26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aafa:	4a18      	ldr	r2, [pc, #96]	@ (800ab5c <vPortValidateInterruptPriority+0x74>)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab04:	4b16      	ldr	r3, [pc, #88]	@ (800ab60 <vPortValidateInterruptPriority+0x78>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	7afa      	ldrb	r2, [r7, #11]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d20b      	bcs.n	800ab26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	607b      	str	r3, [r7, #4]
}
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	e7fd      	b.n	800ab22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab26:	4b0f      	ldr	r3, [pc, #60]	@ (800ab64 <vPortValidateInterruptPriority+0x7c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab68 <vPortValidateInterruptPriority+0x80>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d90b      	bls.n	800ab4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	603b      	str	r3, [r7, #0]
}
 800ab48:	bf00      	nop
 800ab4a:	bf00      	nop
 800ab4c:	e7fd      	b.n	800ab4a <vPortValidateInterruptPriority+0x62>
	}
 800ab4e:	bf00      	nop
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	e000e3f0 	.word	0xe000e3f0
 800ab60:	20006af8 	.word	0x20006af8
 800ab64:	e000ed0c 	.word	0xe000ed0c
 800ab68:	20006afc 	.word	0x20006afc

0800ab6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08a      	sub	sp, #40	@ 0x28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab78:	f7fe fd58 	bl	800962c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab7c:	4b5c      	ldr	r3, [pc, #368]	@ (800acf0 <pvPortMalloc+0x184>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab84:	f000 f924 	bl	800add0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab88:	4b5a      	ldr	r3, [pc, #360]	@ (800acf4 <pvPortMalloc+0x188>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4013      	ands	r3, r2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f040 8095 	bne.w	800acc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01e      	beq.n	800abda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab9c:	2208      	movs	r2, #8
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4413      	add	r3, r2
 800aba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f003 0307 	and.w	r3, r3, #7
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d015      	beq.n	800abda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f023 0307 	bic.w	r3, r3, #7
 800abb4:	3308      	adds	r3, #8
 800abb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f003 0307 	and.w	r3, r3, #7
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00b      	beq.n	800abda <pvPortMalloc+0x6e>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	617b      	str	r3, [r7, #20]
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	e7fd      	b.n	800abd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d06f      	beq.n	800acc0 <pvPortMalloc+0x154>
 800abe0:	4b45      	ldr	r3, [pc, #276]	@ (800acf8 <pvPortMalloc+0x18c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d86a      	bhi.n	800acc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abea:	4b44      	ldr	r3, [pc, #272]	@ (800acfc <pvPortMalloc+0x190>)
 800abec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abee:	4b43      	ldr	r3, [pc, #268]	@ (800acfc <pvPortMalloc+0x190>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abf4:	e004      	b.n	800ac00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d903      	bls.n	800ac12 <pvPortMalloc+0xa6>
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1f1      	bne.n	800abf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac12:	4b37      	ldr	r3, [pc, #220]	@ (800acf0 <pvPortMalloc+0x184>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d051      	beq.n	800acc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2208      	movs	r2, #8
 800ac22:	4413      	add	r3, r2
 800ac24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	1ad2      	subs	r2, r2, r3
 800ac36:	2308      	movs	r3, #8
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d920      	bls.n	800ac80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4413      	add	r3, r2
 800ac44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	f003 0307 	and.w	r3, r3, #7
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00b      	beq.n	800ac68 <pvPortMalloc+0xfc>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	613b      	str	r3, [r7, #16]
}
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac7a:	69b8      	ldr	r0, [r7, #24]
 800ac7c:	f000 f90a 	bl	800ae94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac80:	4b1d      	ldr	r3, [pc, #116]	@ (800acf8 <pvPortMalloc+0x18c>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	4a1b      	ldr	r2, [pc, #108]	@ (800acf8 <pvPortMalloc+0x18c>)
 800ac8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac8e:	4b1a      	ldr	r3, [pc, #104]	@ (800acf8 <pvPortMalloc+0x18c>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b1b      	ldr	r3, [pc, #108]	@ (800ad00 <pvPortMalloc+0x194>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d203      	bcs.n	800aca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac9a:	4b17      	ldr	r3, [pc, #92]	@ (800acf8 <pvPortMalloc+0x18c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a18      	ldr	r2, [pc, #96]	@ (800ad00 <pvPortMalloc+0x194>)
 800aca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	4b13      	ldr	r3, [pc, #76]	@ (800acf4 <pvPortMalloc+0x188>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	431a      	orrs	r2, r3
 800acac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acb6:	4b13      	ldr	r3, [pc, #76]	@ (800ad04 <pvPortMalloc+0x198>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3301      	adds	r3, #1
 800acbc:	4a11      	ldr	r2, [pc, #68]	@ (800ad04 <pvPortMalloc+0x198>)
 800acbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acc0:	f7fe fcc2 	bl	8009648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	f003 0307 	and.w	r3, r3, #7
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00b      	beq.n	800ace6 <pvPortMalloc+0x17a>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	60fb      	str	r3, [r7, #12]
}
 800ace0:	bf00      	nop
 800ace2:	bf00      	nop
 800ace4:	e7fd      	b.n	800ace2 <pvPortMalloc+0x176>
	return pvReturn;
 800ace6:	69fb      	ldr	r3, [r7, #28]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3728      	adds	r7, #40	@ 0x28
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	2000a708 	.word	0x2000a708
 800acf4:	2000a71c 	.word	0x2000a71c
 800acf8:	2000a70c 	.word	0x2000a70c
 800acfc:	2000a700 	.word	0x2000a700
 800ad00:	2000a710 	.word	0x2000a710
 800ad04:	2000a714 	.word	0x2000a714

0800ad08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d04f      	beq.n	800adba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	425b      	negs	r3, r3
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	4413      	add	r3, r2
 800ad22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	4b25      	ldr	r3, [pc, #148]	@ (800adc4 <vPortFree+0xbc>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4013      	ands	r3, r2
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10b      	bne.n	800ad4e <vPortFree+0x46>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60fb      	str	r3, [r7, #12]
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	e7fd      	b.n	800ad4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00b      	beq.n	800ad6e <vPortFree+0x66>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	60bb      	str	r3, [r7, #8]
}
 800ad68:	bf00      	nop
 800ad6a:	bf00      	nop
 800ad6c:	e7fd      	b.n	800ad6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	4b14      	ldr	r3, [pc, #80]	@ (800adc4 <vPortFree+0xbc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4013      	ands	r3, r2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d01e      	beq.n	800adba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d11a      	bne.n	800adba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	685a      	ldr	r2, [r3, #4]
 800ad88:	4b0e      	ldr	r3, [pc, #56]	@ (800adc4 <vPortFree+0xbc>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	43db      	mvns	r3, r3
 800ad8e:	401a      	ands	r2, r3
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad94:	f7fe fc4a 	bl	800962c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	@ (800adc8 <vPortFree+0xc0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4413      	add	r3, r2
 800ada2:	4a09      	ldr	r2, [pc, #36]	@ (800adc8 <vPortFree+0xc0>)
 800ada4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ada6:	6938      	ldr	r0, [r7, #16]
 800ada8:	f000 f874 	bl	800ae94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800adac:	4b07      	ldr	r3, [pc, #28]	@ (800adcc <vPortFree+0xc4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	4a06      	ldr	r2, [pc, #24]	@ (800adcc <vPortFree+0xc4>)
 800adb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adb6:	f7fe fc47 	bl	8009648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adba:	bf00      	nop
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	2000a71c 	.word	0x2000a71c
 800adc8:	2000a70c 	.word	0x2000a70c
 800adcc:	2000a718 	.word	0x2000a718

0800add0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800add6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800adda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800addc:	4b27      	ldr	r3, [pc, #156]	@ (800ae7c <prvHeapInit+0xac>)
 800adde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00c      	beq.n	800ae04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3307      	adds	r3, #7
 800adee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f023 0307 	bic.w	r3, r3, #7
 800adf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	4a1f      	ldr	r2, [pc, #124]	@ (800ae7c <prvHeapInit+0xac>)
 800ae00:	4413      	add	r3, r2
 800ae02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae08:	4a1d      	ldr	r2, [pc, #116]	@ (800ae80 <prvHeapInit+0xb0>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ae80 <prvHeapInit+0xb0>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	4413      	add	r3, r2
 800ae1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	1a9b      	subs	r3, r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0307 	bic.w	r3, r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4a15      	ldr	r2, [pc, #84]	@ (800ae84 <prvHeapInit+0xb4>)
 800ae30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae32:	4b14      	ldr	r3, [pc, #80]	@ (800ae84 <prvHeapInit+0xb4>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2200      	movs	r2, #0
 800ae38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae3a:	4b12      	ldr	r3, [pc, #72]	@ (800ae84 <prvHeapInit+0xb4>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	1ad2      	subs	r2, r2, r3
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae50:	4b0c      	ldr	r3, [pc, #48]	@ (800ae84 <prvHeapInit+0xb4>)
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae88 <prvHeapInit+0xb8>)
 800ae5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4a09      	ldr	r2, [pc, #36]	@ (800ae8c <prvHeapInit+0xbc>)
 800ae66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae68:	4b09      	ldr	r3, [pc, #36]	@ (800ae90 <prvHeapInit+0xc0>)
 800ae6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae6e:	601a      	str	r2, [r3, #0]
}
 800ae70:	bf00      	nop
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20006b00 	.word	0x20006b00
 800ae80:	2000a700 	.word	0x2000a700
 800ae84:	2000a708 	.word	0x2000a708
 800ae88:	2000a710 	.word	0x2000a710
 800ae8c:	2000a70c 	.word	0x2000a70c
 800ae90:	2000a71c 	.word	0x2000a71c

0800ae94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae9c:	4b28      	ldr	r3, [pc, #160]	@ (800af40 <prvInsertBlockIntoFreeList+0xac>)
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	e002      	b.n	800aea8 <prvInsertBlockIntoFreeList+0x14>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60fb      	str	r3, [r7, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d8f7      	bhi.n	800aea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	4413      	add	r3, r2
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d108      	bne.n	800aed6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	441a      	add	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	441a      	add	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d118      	bne.n	800af1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4b15      	ldr	r3, [pc, #84]	@ (800af44 <prvInsertBlockIntoFreeList+0xb0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d00d      	beq.n	800af12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	441a      	add	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	e008      	b.n	800af24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af12:	4b0c      	ldr	r3, [pc, #48]	@ (800af44 <prvInsertBlockIntoFreeList+0xb0>)
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e003      	b.n	800af24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d002      	beq.n	800af32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	2000a700 	.word	0x2000a700
 800af44:	2000a708 	.word	0x2000a708

0800af48 <rcl_get_zero_initialized_publisher>:
 800af48:	4b01      	ldr	r3, [pc, #4]	@ (800af50 <rcl_get_zero_initialized_publisher+0x8>)
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	0801ad6c 	.word	0x0801ad6c

0800af54 <rcl_publisher_init>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	b088      	sub	sp, #32
 800af5a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800af5c:	2d00      	cmp	r5, #0
 800af5e:	d06a      	beq.n	800b036 <rcl_publisher_init+0xe2>
 800af60:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800af64:	4604      	mov	r4, r0
 800af66:	4648      	mov	r0, r9
 800af68:	460e      	mov	r6, r1
 800af6a:	4690      	mov	r8, r2
 800af6c:	461f      	mov	r7, r3
 800af6e:	f001 f83b 	bl	800bfe8 <rcutils_allocator_is_valid>
 800af72:	2800      	cmp	r0, #0
 800af74:	d05f      	beq.n	800b036 <rcl_publisher_init+0xe2>
 800af76:	2c00      	cmp	r4, #0
 800af78:	d05d      	beq.n	800b036 <rcl_publisher_init+0xe2>
 800af7a:	f8d4 a000 	ldr.w	sl, [r4]
 800af7e:	f1ba 0f00 	cmp.w	sl, #0
 800af82:	d004      	beq.n	800af8e <rcl_publisher_init+0x3a>
 800af84:	2764      	movs	r7, #100	@ 0x64
 800af86:	4638      	mov	r0, r7
 800af88:	b008      	add	sp, #32
 800af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8e:	4630      	mov	r0, r6
 800af90:	f007 fdb0 	bl	8012af4 <rcl_node_is_valid>
 800af94:	2800      	cmp	r0, #0
 800af96:	d053      	beq.n	800b040 <rcl_publisher_init+0xec>
 800af98:	f1b8 0f00 	cmp.w	r8, #0
 800af9c:	d04b      	beq.n	800b036 <rcl_publisher_init+0xe2>
 800af9e:	2f00      	cmp	r7, #0
 800afa0:	d049      	beq.n	800b036 <rcl_publisher_init+0xe2>
 800afa2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800afa6:	aa07      	add	r2, sp, #28
 800afa8:	9205      	str	r2, [sp, #20]
 800afaa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800afae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800afb2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800afb6:	f8cd a01c 	str.w	sl, [sp, #28]
 800afba:	4639      	mov	r1, r7
 800afbc:	e899 000c 	ldmia.w	r9, {r2, r3}
 800afc0:	4630      	mov	r0, r6
 800afc2:	f007 fe27 	bl	8012c14 <rcl_node_resolve_name>
 800afc6:	4607      	mov	r7, r0
 800afc8:	2800      	cmp	r0, #0
 800afca:	d150      	bne.n	800b06e <rcl_publisher_init+0x11a>
 800afcc:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800afd0:	21c8      	movs	r1, #200	@ 0xc8
 800afd2:	2001      	movs	r0, #1
 800afd4:	4798      	blx	r3
 800afd6:	6020      	str	r0, [r4, #0]
 800afd8:	2800      	cmp	r0, #0
 800afda:	d04e      	beq.n	800b07a <rcl_publisher_init+0x126>
 800afdc:	4630      	mov	r0, r6
 800afde:	f007 fdab 	bl	8012b38 <rcl_node_get_rmw_handle>
 800afe2:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	9a07      	ldr	r2, [sp, #28]
 800afea:	6827      	ldr	r7, [r4, #0]
 800afec:	462b      	mov	r3, r5
 800afee:	4641      	mov	r1, r8
 800aff0:	f001 f95e 	bl	800c2b0 <rmw_create_publisher>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800affa:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800affe:	b370      	cbz	r0, 800b05e <rcl_publisher_init+0x10a>
 800b000:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b004:	f001 fa30 	bl	800c468 <rmw_publisher_get_actual_qos>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	4607      	mov	r7, r0
 800b00c:	b9d0      	cbnz	r0, 800b044 <rcl_publisher_init+0xf0>
 800b00e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b012:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b016:	4629      	mov	r1, r5
 800b018:	2270      	movs	r2, #112	@ 0x70
 800b01a:	4618      	mov	r0, r3
 800b01c:	f00e ffe9 	bl	8019ff2 <memcpy>
 800b020:	6832      	ldr	r2, [r6, #0]
 800b022:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b026:	9807      	ldr	r0, [sp, #28]
 800b028:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b02a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b02c:	4798      	blx	r3
 800b02e:	4638      	mov	r0, r7
 800b030:	b008      	add	sp, #32
 800b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b036:	270b      	movs	r7, #11
 800b038:	4638      	mov	r0, r7
 800b03a:	b008      	add	sp, #32
 800b03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b040:	27c8      	movs	r7, #200	@ 0xc8
 800b042:	e7a0      	b.n	800af86 <rcl_publisher_init+0x32>
 800b044:	b18b      	cbz	r3, 800b06a <rcl_publisher_init+0x116>
 800b046:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b04a:	b142      	cbz	r2, 800b05e <rcl_publisher_init+0x10a>
 800b04c:	4630      	mov	r0, r6
 800b04e:	f007 fd73 	bl	8012b38 <rcl_node_get_rmw_handle>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b058:	f001 fa14 	bl	800c484 <rmw_destroy_publisher>
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b060:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b062:	4618      	mov	r0, r3
 800b064:	4790      	blx	r2
 800b066:	2300      	movs	r3, #0
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	2701      	movs	r7, #1
 800b06c:	e7db      	b.n	800b026 <rcl_publisher_init+0xd2>
 800b06e:	2867      	cmp	r0, #103	@ 0x67
 800b070:	d0d9      	beq.n	800b026 <rcl_publisher_init+0xd2>
 800b072:	2869      	cmp	r0, #105	@ 0x69
 800b074:	d003      	beq.n	800b07e <rcl_publisher_init+0x12a>
 800b076:	280a      	cmp	r0, #10
 800b078:	d1f7      	bne.n	800b06a <rcl_publisher_init+0x116>
 800b07a:	270a      	movs	r7, #10
 800b07c:	e7d3      	b.n	800b026 <rcl_publisher_init+0xd2>
 800b07e:	2767      	movs	r7, #103	@ 0x67
 800b080:	e7d1      	b.n	800b026 <rcl_publisher_init+0xd2>
 800b082:	bf00      	nop

0800b084 <rcl_publisher_get_default_options>:
 800b084:	b530      	push	{r4, r5, lr}
 800b086:	4912      	ldr	r1, [pc, #72]	@ (800b0d0 <rcl_publisher_get_default_options+0x4c>)
 800b088:	b083      	sub	sp, #12
 800b08a:	2250      	movs	r2, #80	@ 0x50
 800b08c:	4604      	mov	r4, r0
 800b08e:	f00e ffb0 	bl	8019ff2 <memcpy>
 800b092:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b096:	f000 ff7b 	bl	800bf90 <rcutils_get_default_allocator>
 800b09a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800b09e:	f001 f83f 	bl	800c120 <rmw_get_default_publisher_options>
 800b0a2:	2500      	movs	r5, #0
 800b0a4:	f10d 0007 	add.w	r0, sp, #7
 800b0a8:	f88d 5007 	strb.w	r5, [sp, #7]
 800b0ac:	f007 fd4a 	bl	8012b44 <rcl_get_disable_loaned_message>
 800b0b0:	b930      	cbnz	r0, 800b0c0 <rcl_publisher_get_default_options+0x3c>
 800b0b2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800b0b6:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	b003      	add	sp, #12
 800b0be:	bd30      	pop	{r4, r5, pc}
 800b0c0:	f000 ffbe 	bl	800c040 <rcutils_reset_error>
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800b0ca:	b003      	add	sp, #12
 800b0cc:	bd30      	pop	{r4, r5, pc}
 800b0ce:	bf00      	nop
 800b0d0:	0801ad70 	.word	0x0801ad70

0800b0d4 <rcl_publish>:
 800b0d4:	b308      	cbz	r0, 800b11a <rcl_publish+0x46>
 800b0d6:	6803      	ldr	r3, [r0, #0]
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	4604      	mov	r4, r0
 800b0dc:	b1c3      	cbz	r3, 800b110 <rcl_publish+0x3c>
 800b0de:	4616      	mov	r6, r2
 800b0e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b0e4:	b1a2      	cbz	r2, 800b110 <rcl_publish+0x3c>
 800b0e6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	f007 f954 	bl	8012398 <rcl_context_is_valid>
 800b0f0:	b160      	cbz	r0, 800b10c <rcl_publish+0x38>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b0f8:	b150      	cbz	r0, 800b110 <rcl_publish+0x3c>
 800b0fa:	b165      	cbz	r5, 800b116 <rcl_publish+0x42>
 800b0fc:	4632      	mov	r2, r6
 800b0fe:	4629      	mov	r1, r5
 800b100:	f001 f876 	bl	800c1f0 <rmw_publish>
 800b104:	3800      	subs	r0, #0
 800b106:	bf18      	it	ne
 800b108:	2001      	movne	r0, #1
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	f000 ff7a 	bl	800c004 <rcutils_error_is_set>
 800b110:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	200b      	movs	r0, #11
 800b118:	bd70      	pop	{r4, r5, r6, pc}
 800b11a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b11e:	4770      	bx	lr

0800b120 <rcl_publisher_is_valid>:
 800b120:	b1b0      	cbz	r0, 800b150 <rcl_publisher_is_valid+0x30>
 800b122:	6803      	ldr	r3, [r0, #0]
 800b124:	b510      	push	{r4, lr}
 800b126:	4604      	mov	r4, r0
 800b128:	b183      	cbz	r3, 800b14c <rcl_publisher_is_valid+0x2c>
 800b12a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b12e:	b16a      	cbz	r2, 800b14c <rcl_publisher_is_valid+0x2c>
 800b130:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b134:	f007 f930 	bl	8012398 <rcl_context_is_valid>
 800b138:	b130      	cbz	r0, 800b148 <rcl_publisher_is_valid+0x28>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b140:	3800      	subs	r0, #0
 800b142:	bf18      	it	ne
 800b144:	2001      	movne	r0, #1
 800b146:	bd10      	pop	{r4, pc}
 800b148:	f000 ff5c 	bl	800c004 <rcutils_error_is_set>
 800b14c:	2000      	movs	r0, #0
 800b14e:	bd10      	pop	{r4, pc}
 800b150:	2000      	movs	r0, #0
 800b152:	4770      	bx	lr

0800b154 <rcl_publisher_is_valid_except_context>:
 800b154:	b130      	cbz	r0, 800b164 <rcl_publisher_is_valid_except_context+0x10>
 800b156:	6800      	ldr	r0, [r0, #0]
 800b158:	b120      	cbz	r0, 800b164 <rcl_publisher_is_valid_except_context+0x10>
 800b15a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b15e:	3800      	subs	r0, #0
 800b160:	bf18      	it	ne
 800b162:	2001      	movne	r0, #1
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop

0800b168 <_rclc_check_for_new_data>:
 800b168:	2800      	cmp	r0, #0
 800b16a:	d046      	beq.n	800b1fa <_rclc_check_for_new_data+0x92>
 800b16c:	b510      	push	{r4, lr}
 800b16e:	7802      	ldrb	r2, [r0, #0]
 800b170:	b084      	sub	sp, #16
 800b172:	4603      	mov	r3, r0
 800b174:	2a0a      	cmp	r2, #10
 800b176:	d842      	bhi.n	800b1fe <_rclc_check_for_new_data+0x96>
 800b178:	e8df f002 	tbb	[pc, r2]
 800b17c:	14181212 	.word	0x14181212
 800b180:	06060614 	.word	0x06060614
 800b184:	2e1a      	.short	0x2e1a
 800b186:	16          	.byte	0x16
 800b187:	00          	.byte	0x00
 800b188:	6a0a      	ldr	r2, [r1, #32]
 800b18a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b18c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b190:	3a00      	subs	r2, #0
 800b192:	bf18      	it	ne
 800b194:	2201      	movne	r2, #1
 800b196:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b19a:	2000      	movs	r0, #0
 800b19c:	b004      	add	sp, #16
 800b19e:	bd10      	pop	{r4, pc}
 800b1a0:	680a      	ldr	r2, [r1, #0]
 800b1a2:	e7f2      	b.n	800b18a <_rclc_check_for_new_data+0x22>
 800b1a4:	698a      	ldr	r2, [r1, #24]
 800b1a6:	e7f0      	b.n	800b18a <_rclc_check_for_new_data+0x22>
 800b1a8:	688a      	ldr	r2, [r1, #8]
 800b1aa:	e7ee      	b.n	800b18a <_rclc_check_for_new_data+0x22>
 800b1ac:	690a      	ldr	r2, [r1, #16]
 800b1ae:	e7ec      	b.n	800b18a <_rclc_check_for_new_data+0x22>
 800b1b0:	685c      	ldr	r4, [r3, #4]
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800b1b8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800b1bc:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800b1c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800b1ca:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800b1ce:	f104 0110 	add.w	r1, r4, #16
 800b1d2:	f009 fbc5 	bl	8014960 <rcl_action_client_wait_set_get_entities_ready>
 800b1d6:	e7e1      	b.n	800b19c <_rclc_check_for_new_data+0x34>
 800b1d8:	685c      	ldr	r4, [r3, #4]
 800b1da:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800b1de:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800b1e2:	e9cd 3200 	strd	r3, r2, [sp]
 800b1e6:	4608      	mov	r0, r1
 800b1e8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800b1ec:	f104 0220 	add.w	r2, r4, #32
 800b1f0:	f104 0110 	add.w	r1, r4, #16
 800b1f4:	f009 fdb6 	bl	8014d64 <rcl_action_server_wait_set_get_entities_ready>
 800b1f8:	e7d0      	b.n	800b19c <_rclc_check_for_new_data+0x34>
 800b1fa:	200b      	movs	r0, #11
 800b1fc:	4770      	bx	lr
 800b1fe:	2001      	movs	r0, #1
 800b200:	e7cc      	b.n	800b19c <_rclc_check_for_new_data+0x34>
 800b202:	bf00      	nop

0800b204 <_rclc_take_new_data>:
 800b204:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b206:	b099      	sub	sp, #100	@ 0x64
 800b208:	2800      	cmp	r0, #0
 800b20a:	f000 8082 	beq.w	800b312 <_rclc_take_new_data+0x10e>
 800b20e:	7803      	ldrb	r3, [r0, #0]
 800b210:	4604      	mov	r4, r0
 800b212:	2b0a      	cmp	r3, #10
 800b214:	f200 815d 	bhi.w	800b4d2 <_rclc_take_new_data+0x2ce>
 800b218:	e8df f003 	tbb	[pc, r3]
 800b21c:	31531f1f 	.word	0x31531f1f
 800b220:	06060631 	.word	0x06060631
 800b224:	4555      	.short	0x4555
 800b226:	53          	.byte	0x53
 800b227:	00          	.byte	0x00
 800b228:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b22a:	6a0b      	ldr	r3, [r1, #32]
 800b22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d046      	beq.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b234:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b238:	f104 0110 	add.w	r1, r4, #16
 800b23c:	f007 fd98 	bl	8012d70 <rcl_take_request>
 800b240:	4605      	mov	r5, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d03d      	beq.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b246:	f240 2359 	movw	r3, #601	@ 0x259
 800b24a:	4298      	cmp	r0, r3
 800b24c:	d128      	bne.n	800b2a0 <_rclc_take_new_data+0x9c>
 800b24e:	2300      	movs	r3, #0
 800b250:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800b254:	4628      	mov	r0, r5
 800b256:	b019      	add	sp, #100	@ 0x64
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b25c:	680b      	ldr	r3, [r1, #0]
 800b25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b262:	b373      	cbz	r3, 800b2c2 <_rclc_take_new_data+0xbe>
 800b264:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b268:	2300      	movs	r3, #0
 800b26a:	aa0a      	add	r2, sp, #40	@ 0x28
 800b26c:	f007 ff54 	bl	8013118 <rcl_take>
 800b270:	4605      	mov	r5, r0
 800b272:	b330      	cbz	r0, 800b2c2 <_rclc_take_new_data+0xbe>
 800b274:	f240 1391 	movw	r3, #401	@ 0x191
 800b278:	4298      	cmp	r0, r3
 800b27a:	d0e8      	beq.n	800b24e <_rclc_take_new_data+0x4a>
 800b27c:	e010      	b.n	800b2a0 <_rclc_take_new_data+0x9c>
 800b27e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b280:	698b      	ldr	r3, [r1, #24]
 800b282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b286:	b1e3      	cbz	r3, 800b2c2 <_rclc_take_new_data+0xbe>
 800b288:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b28c:	f104 0110 	add.w	r1, r4, #16
 800b290:	f006 fff2 	bl	8012278 <rcl_take_response>
 800b294:	4605      	mov	r5, r0
 800b296:	b1a0      	cbz	r0, 800b2c2 <_rclc_take_new_data+0xbe>
 800b298:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800b29c:	4298      	cmp	r0, r3
 800b29e:	d0d9      	beq.n	800b254 <_rclc_take_new_data+0x50>
 800b2a0:	f000 fece 	bl	800c040 <rcutils_reset_error>
 800b2a4:	e7d6      	b.n	800b254 <_rclc_take_new_data+0x50>
 800b2a6:	6840      	ldr	r0, [r0, #4]
 800b2a8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d15f      	bne.n	800b370 <_rclc_take_new_data+0x16c>
 800b2b0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d179      	bne.n	800b3ac <_rclc_take_new_data+0x1a8>
 800b2b8:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f040 8096 	bne.w	800b3ee <_rclc_take_new_data+0x1ea>
 800b2c2:	2500      	movs	r5, #0
 800b2c4:	e7c6      	b.n	800b254 <_rclc_take_new_data+0x50>
 800b2c6:	6840      	ldr	r0, [r0, #4]
 800b2c8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d138      	bne.n	800b342 <_rclc_take_new_data+0x13e>
 800b2d0:	69c3      	ldr	r3, [r0, #28]
 800b2d2:	b113      	cbz	r3, 800b2da <_rclc_take_new_data+0xd6>
 800b2d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b2d8:	b9fb      	cbnz	r3, 800b31a <_rclc_take_new_data+0x116>
 800b2da:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f040 80a8 	bne.w	800b434 <_rclc_take_new_data+0x230>
 800b2e4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0ea      	beq.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b2ec:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b2ee:	a90a      	add	r1, sp, #40	@ 0x28
 800b2f0:	3010      	adds	r0, #16
 800b2f2:	f009 fa19 	bl	8014728 <rcl_action_take_result_response>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1d1      	bne.n	800b2a0 <_rclc_take_new_data+0x9c>
 800b2fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b300:	6860      	ldr	r0, [r4, #4]
 800b302:	f009 fe59 	bl	8014fb8 <rclc_action_find_handle_by_result_request_sequence_number>
 800b306:	2800      	cmp	r0, #0
 800b308:	d0db      	beq.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b30a:	2301      	movs	r3, #1
 800b30c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800b310:	e7d7      	b.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b312:	250b      	movs	r5, #11
 800b314:	4628      	mov	r0, r5
 800b316:	b019      	add	sp, #100	@ 0x64
 800b318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b31a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b31c:	3010      	adds	r0, #16
 800b31e:	f009 fa7f 	bl	8014820 <rcl_action_take_feedback>
 800b322:	4605      	mov	r5, r0
 800b324:	2800      	cmp	r0, #0
 800b326:	d1bb      	bne.n	800b2a0 <_rclc_take_new_data+0x9c>
 800b328:	6860      	ldr	r0, [r4, #4]
 800b32a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b32c:	f009 fe02 	bl	8014f34 <rclc_action_find_goal_handle_by_uuid>
 800b330:	4603      	mov	r3, r0
 800b332:	2800      	cmp	r0, #0
 800b334:	f000 80c4 	beq.w	800b4c0 <_rclc_take_new_data+0x2bc>
 800b338:	2201      	movs	r2, #1
 800b33a:	6860      	ldr	r0, [r4, #4]
 800b33c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800b340:	e7cb      	b.n	800b2da <_rclc_take_new_data+0xd6>
 800b342:	aa04      	add	r2, sp, #16
 800b344:	a90a      	add	r1, sp, #40	@ 0x28
 800b346:	3010      	adds	r0, #16
 800b348:	f009 f97e 	bl	8014648 <rcl_action_take_goal_response>
 800b34c:	4605      	mov	r5, r0
 800b34e:	2800      	cmp	r0, #0
 800b350:	d1a6      	bne.n	800b2a0 <_rclc_take_new_data+0x9c>
 800b352:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b356:	6860      	ldr	r0, [r4, #4]
 800b358:	f009 fe1c 	bl	8014f94 <rclc_action_find_handle_by_goal_request_sequence_number>
 800b35c:	b130      	cbz	r0, 800b36c <_rclc_take_new_data+0x168>
 800b35e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b362:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b366:	2201      	movs	r2, #1
 800b368:	f880 2020 	strb.w	r2, [r0, #32]
 800b36c:	6860      	ldr	r0, [r4, #4]
 800b36e:	e7af      	b.n	800b2d0 <_rclc_take_new_data+0xcc>
 800b370:	f009 fdba 	bl	8014ee8 <rclc_action_take_goal_handle>
 800b374:	4606      	mov	r6, r0
 800b376:	6860      	ldr	r0, [r4, #4]
 800b378:	2e00      	cmp	r6, #0
 800b37a:	d099      	beq.n	800b2b0 <_rclc_take_new_data+0xac>
 800b37c:	6070      	str	r0, [r6, #4]
 800b37e:	69f2      	ldr	r2, [r6, #28]
 800b380:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800b384:	3010      	adds	r0, #16
 800b386:	f009 fb7b 	bl	8014a80 <rcl_action_take_goal_request>
 800b38a:	4605      	mov	r5, r0
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f040 8099 	bne.w	800b4c4 <_rclc_take_new_data+0x2c0>
 800b392:	69f7      	ldr	r7, [r6, #28]
 800b394:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b396:	7235      	strb	r5, [r6, #8]
 800b398:	f8c6 0009 	str.w	r0, [r6, #9]
 800b39c:	f8c6 100d 	str.w	r1, [r6, #13]
 800b3a0:	6860      	ldr	r0, [r4, #4]
 800b3a2:	f8c6 2011 	str.w	r2, [r6, #17]
 800b3a6:	f8c6 3015 	str.w	r3, [r6, #21]
 800b3aa:	e781      	b.n	800b2b0 <_rclc_take_new_data+0xac>
 800b3ac:	aa04      	add	r2, sp, #16
 800b3ae:	3010      	adds	r0, #16
 800b3b0:	a90a      	add	r1, sp, #40	@ 0x28
 800b3b2:	f009 fbd5 	bl	8014b60 <rcl_action_take_result_request>
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	f47f af71 	bne.w	800b2a0 <_rclc_take_new_data+0x9c>
 800b3be:	6860      	ldr	r0, [r4, #4]
 800b3c0:	a904      	add	r1, sp, #16
 800b3c2:	f009 fdb7 	bl	8014f34 <rclc_action_find_goal_handle_by_uuid>
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	b160      	cbz	r0, 800b3e4 <_rclc_take_new_data+0x1e0>
 800b3ca:	ad0a      	add	r5, sp, #40	@ 0x28
 800b3cc:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800b3d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b3d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b3d8:	f04f 0c02 	mov.w	ip, #2
 800b3dc:	e886 0003 	stmia.w	r6, {r0, r1}
 800b3e0:	f887 c008 	strb.w	ip, [r7, #8]
 800b3e4:	6860      	ldr	r0, [r4, #4]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800b3ec:	e764      	b.n	800b2b8 <_rclc_take_new_data+0xb4>
 800b3ee:	ae04      	add	r6, sp, #16
 800b3f0:	aa0a      	add	r2, sp, #40	@ 0x28
 800b3f2:	3010      	adds	r0, #16
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	f009 fbf1 	bl	8014bdc <rcl_action_take_cancel_request>
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f47f af4f 	bne.w	800b2a0 <_rclc_take_new_data+0x9c>
 800b402:	6860      	ldr	r0, [r4, #4]
 800b404:	a90a      	add	r1, sp, #40	@ 0x28
 800b406:	f009 fd95 	bl	8014f34 <rclc_action_find_goal_handle_by_uuid>
 800b40a:	4605      	mov	r5, r0
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d04c      	beq.n	800b4aa <_rclc_take_new_data+0x2a6>
 800b410:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800b414:	2101      	movs	r1, #1
 800b416:	f009 fd15 	bl	8014e44 <rcl_action_transition_goal_state>
 800b41a:	2803      	cmp	r0, #3
 800b41c:	4607      	mov	r7, r0
 800b41e:	d139      	bne.n	800b494 <_rclc_take_new_data+0x290>
 800b420:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b422:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800b426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b428:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b42c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b430:	722f      	strb	r7, [r5, #8]
 800b432:	e746      	b.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b434:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800b438:	a90a      	add	r1, sp, #40	@ 0x28
 800b43a:	3010      	adds	r0, #16
 800b43c:	f009 f9b2 	bl	80147a4 <rcl_action_take_cancel_response>
 800b440:	4605      	mov	r5, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	f47f af2c 	bne.w	800b2a0 <_rclc_take_new_data+0x9c>
 800b448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b44c:	6860      	ldr	r0, [r4, #4]
 800b44e:	f009 fdc5 	bl	8014fdc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800b452:	4606      	mov	r6, r0
 800b454:	6860      	ldr	r0, [r4, #4]
 800b456:	2e00      	cmp	r6, #0
 800b458:	f43f af44 	beq.w	800b2e4 <_rclc_take_new_data+0xe0>
 800b45c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b45e:	2701      	movs	r7, #1
 800b460:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800b462:	2b00      	cmp	r3, #0
 800b464:	f43f af3e 	beq.w	800b2e4 <_rclc_take_new_data+0xe0>
 800b468:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b46a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b46e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b472:	f009 fd5f 	bl	8014f34 <rclc_action_find_goal_handle_by_uuid>
 800b476:	b138      	cbz	r0, 800b488 <_rclc_take_new_data+0x284>
 800b478:	6860      	ldr	r0, [r4, #4]
 800b47a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b47c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800b480:	3501      	adds	r5, #1
 800b482:	42ab      	cmp	r3, r5
 800b484:	d8f0      	bhi.n	800b468 <_rclc_take_new_data+0x264>
 800b486:	e72d      	b.n	800b2e4 <_rclc_take_new_data+0xe0>
 800b488:	6860      	ldr	r0, [r4, #4]
 800b48a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b48c:	3501      	adds	r5, #1
 800b48e:	42ab      	cmp	r3, r5
 800b490:	d8ea      	bhi.n	800b468 <_rclc_take_new_data+0x264>
 800b492:	e727      	b.n	800b2e4 <_rclc_take_new_data+0xe0>
 800b494:	ab06      	add	r3, sp, #24
 800b496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b498:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b49c:	2103      	movs	r1, #3
 800b49e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b4a2:	6860      	ldr	r0, [r4, #4]
 800b4a4:	f009 fe10 	bl	80150c8 <rclc_action_server_goal_cancel_reject>
 800b4a8:	e70b      	b.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b4aa:	ab06      	add	r3, sp, #24
 800b4ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b4b2:	2102      	movs	r1, #2
 800b4b4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b4b8:	6860      	ldr	r0, [r4, #4]
 800b4ba:	f009 fe05 	bl	80150c8 <rclc_action_server_goal_cancel_reject>
 800b4be:	e700      	b.n	800b2c2 <_rclc_take_new_data+0xbe>
 800b4c0:	6860      	ldr	r0, [r4, #4]
 800b4c2:	e70a      	b.n	800b2da <_rclc_take_new_data+0xd6>
 800b4c4:	6860      	ldr	r0, [r4, #4]
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	f009 fd1e 	bl	8014f08 <rclc_action_remove_used_goal_handle>
 800b4cc:	f000 fdb8 	bl	800c040 <rcutils_reset_error>
 800b4d0:	e6c0      	b.n	800b254 <_rclc_take_new_data+0x50>
 800b4d2:	2501      	movs	r5, #1
 800b4d4:	e6be      	b.n	800b254 <_rclc_take_new_data+0x50>
 800b4d6:	bf00      	nop

0800b4d8 <rclc_executor_trigger_any>:
 800b4d8:	4603      	mov	r3, r0
 800b4da:	b370      	cbz	r0, 800b53a <rclc_executor_trigger_any+0x62>
 800b4dc:	b379      	cbz	r1, 800b53e <rclc_executor_trigger_any+0x66>
 800b4de:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	b350      	cbz	r0, 800b53c <rclc_executor_trigger_any+0x64>
 800b4e6:	b430      	push	{r4, r5}
 800b4e8:	f893 c000 	ldrb.w	ip, [r3]
 800b4ec:	f1bc 0f08 	cmp.w	ip, #8
 800b4f0:	d017      	beq.n	800b522 <rclc_executor_trigger_any+0x4a>
 800b4f2:	f1bc 0f09 	cmp.w	ip, #9
 800b4f6:	d00d      	beq.n	800b514 <rclc_executor_trigger_any+0x3c>
 800b4f8:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b4fc:	b940      	cbnz	r0, 800b510 <rclc_executor_trigger_any+0x38>
 800b4fe:	3201      	adds	r2, #1
 800b500:	4291      	cmp	r1, r2
 800b502:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b506:	d003      	beq.n	800b510 <rclc_executor_trigger_any+0x38>
 800b508:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d1eb      	bne.n	800b4e8 <rclc_executor_trigger_any+0x10>
 800b510:	bc30      	pop	{r4, r5}
 800b512:	4770      	bx	lr
 800b514:	685c      	ldr	r4, [r3, #4]
 800b516:	6a25      	ldr	r5, [r4, #32]
 800b518:	2d00      	cmp	r5, #0
 800b51a:	d1f9      	bne.n	800b510 <rclc_executor_trigger_any+0x38>
 800b51c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b520:	e7ec      	b.n	800b4fc <rclc_executor_trigger_any+0x24>
 800b522:	685c      	ldr	r4, [r3, #4]
 800b524:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b526:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b52a:	d1f1      	bne.n	800b510 <rclc_executor_trigger_any+0x38>
 800b52c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b530:	2800      	cmp	r0, #0
 800b532:	d1ed      	bne.n	800b510 <rclc_executor_trigger_any+0x38>
 800b534:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b538:	e7e0      	b.n	800b4fc <rclc_executor_trigger_any+0x24>
 800b53a:	4770      	bx	lr
 800b53c:	4770      	bx	lr
 800b53e:	4608      	mov	r0, r1
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop

0800b544 <_rclc_execute>:
 800b544:	2800      	cmp	r0, #0
 800b546:	f000 80dc 	beq.w	800b702 <_rclc_execute+0x1be>
 800b54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b54c:	7843      	ldrb	r3, [r0, #1]
 800b54e:	b087      	sub	sp, #28
 800b550:	4604      	mov	r4, r0
 800b552:	b123      	cbz	r3, 800b55e <_rclc_execute+0x1a>
 800b554:	2b01      	cmp	r3, #1
 800b556:	d01c      	beq.n	800b592 <_rclc_execute+0x4e>
 800b558:	2000      	movs	r0, #0
 800b55a:	b007      	add	sp, #28
 800b55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b55e:	7803      	ldrb	r3, [r0, #0]
 800b560:	2b08      	cmp	r3, #8
 800b562:	f000 80a0 	beq.w	800b6a6 <_rclc_execute+0x162>
 800b566:	2b09      	cmp	r3, #9
 800b568:	d024      	beq.n	800b5b4 <_rclc_execute+0x70>
 800b56a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800b56e:	2800      	cmp	r0, #0
 800b570:	d0f2      	beq.n	800b558 <_rclc_execute+0x14>
 800b572:	2b0a      	cmp	r3, #10
 800b574:	f200 815a 	bhi.w	800b82c <_rclc_execute+0x2e8>
 800b578:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b57c:	008e006f 	.word	0x008e006f
 800b580:	006f007c 	.word	0x006f007c
 800b584:	00590073 	.word	0x00590073
 800b588:	00590059 	.word	0x00590059
 800b58c:	01580158 	.word	0x01580158
 800b590:	0079      	.short	0x0079
 800b592:	7803      	ldrb	r3, [r0, #0]
 800b594:	2b0a      	cmp	r3, #10
 800b596:	f200 8149 	bhi.w	800b82c <_rclc_execute+0x2e8>
 800b59a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b59e:	00f9      	.short	0x00f9
 800b5a0:	006b007b 	.word	0x006b007b
 800b5a4:	0062005e 	.word	0x0062005e
 800b5a8:	00480048 	.word	0x00480048
 800b5ac:	01000048 	.word	0x01000048
 800b5b0:	00680102 	.word	0x00680102
 800b5b4:	6840      	ldr	r0, [r0, #4]
 800b5b6:	6a02      	ldr	r2, [r0, #32]
 800b5b8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	f040 80f3 	bne.w	800b7a8 <_rclc_execute+0x264>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0c8      	beq.n	800b558 <_rclc_execute+0x14>
 800b5c6:	e003      	b.n	800b5d0 <_rclc_execute+0x8c>
 800b5c8:	6858      	ldr	r0, [r3, #4]
 800b5ca:	f009 fc9d 	bl	8014f08 <rclc_action_remove_used_goal_handle>
 800b5ce:	6860      	ldr	r0, [r4, #4]
 800b5d0:	f009 fcd4 	bl	8014f7c <rclc_action_find_first_terminated_handle>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d1f5      	bne.n	800b5c8 <_rclc_execute+0x84>
 800b5dc:	6860      	ldr	r0, [r4, #4]
 800b5de:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800b5e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 80eb 	beq.w	800b7c2 <_rclc_execute+0x27e>
 800b5ec:	f241 0604 	movw	r6, #4100	@ 0x1004
 800b5f0:	2701      	movs	r7, #1
 800b5f2:	e007      	b.n	800b604 <_rclc_execute+0xc0>
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f009 fd1b 	bl	8015030 <rclc_action_server_response_goal_request>
 800b5fa:	6860      	ldr	r0, [r4, #4]
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f009 fc83 	bl	8014f08 <rclc_action_remove_used_goal_handle>
 800b602:	6860      	ldr	r0, [r4, #4]
 800b604:	2100      	movs	r1, #0
 800b606:	f009 fcad 	bl	8014f64 <rclc_action_find_first_handle_by_status>
 800b60a:	4605      	mov	r5, r0
 800b60c:	2800      	cmp	r0, #0
 800b60e:	f000 80d5 	beq.w	800b7bc <_rclc_execute+0x278>
 800b612:	6863      	ldr	r3, [r4, #4]
 800b614:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	4798      	blx	r3
 800b61a:	42b0      	cmp	r0, r6
 800b61c:	f04f 0100 	mov.w	r1, #0
 800b620:	d1e8      	bne.n	800b5f4 <_rclc_execute+0xb0>
 800b622:	2101      	movs	r1, #1
 800b624:	4628      	mov	r0, r5
 800b626:	f009 fd03 	bl	8015030 <rclc_action_server_response_goal_request>
 800b62a:	722f      	strb	r7, [r5, #8]
 800b62c:	e7e9      	b.n	800b602 <_rclc_execute+0xbe>
 800b62e:	2b06      	cmp	r3, #6
 800b630:	68a0      	ldr	r0, [r4, #8]
 800b632:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b634:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800b636:	f000 80bb 	beq.w	800b7b0 <_rclc_execute+0x26c>
 800b63a:	2b07      	cmp	r3, #7
 800b63c:	f000 80f1 	beq.w	800b822 <_rclc_execute+0x2de>
 800b640:	47b0      	blx	r6
 800b642:	f104 0510 	add.w	r5, r4, #16
 800b646:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b648:	6860      	ldr	r0, [r4, #4]
 800b64a:	4629      	mov	r1, r5
 800b64c:	f007 fbe0 	bl	8012e10 <rcl_send_response>
 800b650:	2802      	cmp	r0, #2
 800b652:	d117      	bne.n	800b684 <_rclc_execute+0x140>
 800b654:	f000 fcf4 	bl	800c040 <rcutils_reset_error>
 800b658:	e77e      	b.n	800b558 <_rclc_execute+0x14>
 800b65a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b65c:	68a0      	ldr	r0, [r4, #8]
 800b65e:	4798      	blx	r3
 800b660:	e77a      	b.n	800b558 <_rclc_execute+0x14>
 800b662:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b664:	68a0      	ldr	r0, [r4, #8]
 800b666:	f104 0110 	add.w	r1, r4, #16
 800b66a:	4798      	blx	r3
 800b66c:	e774      	b.n	800b558 <_rclc_execute+0x14>
 800b66e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b670:	4798      	blx	r3
 800b672:	e771      	b.n	800b558 <_rclc_execute+0x14>
 800b674:	6860      	ldr	r0, [r4, #4]
 800b676:	f008 f893 	bl	80137a0 <rcl_timer_call>
 800b67a:	f240 3321 	movw	r3, #801	@ 0x321
 800b67e:	4298      	cmp	r0, r3
 800b680:	f43f af6a 	beq.w	800b558 <_rclc_execute+0x14>
 800b684:	2800      	cmp	r0, #0
 800b686:	f43f af68 	beq.w	800b55a <_rclc_execute+0x16>
 800b68a:	9005      	str	r0, [sp, #20]
 800b68c:	f000 fcd8 	bl	800c040 <rcutils_reset_error>
 800b690:	9805      	ldr	r0, [sp, #20]
 800b692:	e762      	b.n	800b55a <_rclc_execute+0x16>
 800b694:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800b698:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d0e4      	beq.n	800b66a <_rclc_execute+0x126>
 800b6a0:	68a0      	ldr	r0, [r4, #8]
 800b6a2:	4798      	blx	r3
 800b6a4:	e758      	b.n	800b558 <_rclc_execute+0x14>
 800b6a6:	6840      	ldr	r0, [r0, #4]
 800b6a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b6aa:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800b6ae:	d107      	bne.n	800b6c0 <_rclc_execute+0x17c>
 800b6b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b6b4:	b923      	cbnz	r3, 800b6c0 <_rclc_execute+0x17c>
 800b6b6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f43f af4c 	beq.w	800b558 <_rclc_execute+0x14>
 800b6c0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b6c4:	b303      	cbz	r3, 800b708 <_rclc_execute+0x1c4>
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	2701      	movs	r7, #1
 800b6ca:	e004      	b.n	800b6d6 <_rclc_execute+0x192>
 800b6cc:	f009 fbe6 	bl	8014e9c <rclc_action_send_result_request>
 800b6d0:	b990      	cbnz	r0, 800b6f8 <_rclc_execute+0x1b4>
 800b6d2:	722f      	strb	r7, [r5, #8]
 800b6d4:	6860      	ldr	r0, [r4, #4]
 800b6d6:	f009 fc93 	bl	8015000 <rclc_action_find_first_handle_with_goal_response>
 800b6da:	4605      	mov	r5, r0
 800b6dc:	b198      	cbz	r0, 800b706 <_rclc_execute+0x1c2>
 800b6de:	6863      	ldr	r3, [r4, #4]
 800b6e0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800b6e8:	f885 6020 	strb.w	r6, [r5, #32]
 800b6ec:	4798      	blx	r3
 800b6ee:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e9      	bne.n	800b6cc <_rclc_execute+0x188>
 800b6f8:	6860      	ldr	r0, [r4, #4]
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	f009 fc04 	bl	8014f08 <rclc_action_remove_used_goal_handle>
 800b700:	e7e8      	b.n	800b6d4 <_rclc_execute+0x190>
 800b702:	200b      	movs	r0, #11
 800b704:	4770      	bx	lr
 800b706:	6860      	ldr	r0, [r4, #4]
 800b708:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b70c:	b18b      	cbz	r3, 800b732 <_rclc_execute+0x1ee>
 800b70e:	68c5      	ldr	r5, [r0, #12]
 800b710:	b32d      	cbz	r5, 800b75e <_rclc_execute+0x21a>
 800b712:	2600      	movs	r6, #0
 800b714:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800b718:	b143      	cbz	r3, 800b72c <_rclc_execute+0x1e8>
 800b71a:	69c3      	ldr	r3, [r0, #28]
 800b71c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800b720:	b123      	cbz	r3, 800b72c <_rclc_execute+0x1e8>
 800b722:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b724:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b726:	4628      	mov	r0, r5
 800b728:	4798      	blx	r3
 800b72a:	6860      	ldr	r0, [r4, #4]
 800b72c:	682d      	ldr	r5, [r5, #0]
 800b72e:	2d00      	cmp	r5, #0
 800b730:	d1f0      	bne.n	800b714 <_rclc_execute+0x1d0>
 800b732:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b736:	b193      	cbz	r3, 800b75e <_rclc_execute+0x21a>
 800b738:	68c5      	ldr	r5, [r0, #12]
 800b73a:	b185      	cbz	r5, 800b75e <_rclc_execute+0x21a>
 800b73c:	2600      	movs	r6, #0
 800b73e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800b742:	b14b      	cbz	r3, 800b758 <_rclc_execute+0x214>
 800b744:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b746:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800b74a:	b12b      	cbz	r3, 800b758 <_rclc_execute+0x214>
 800b74c:	4628      	mov	r0, r5
 800b74e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b750:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800b754:	4798      	blx	r3
 800b756:	6860      	ldr	r0, [r4, #4]
 800b758:	682d      	ldr	r5, [r5, #0]
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	d1ef      	bne.n	800b73e <_rclc_execute+0x1fa>
 800b75e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b762:	2b00      	cmp	r3, #0
 800b764:	f43f aef8 	beq.w	800b558 <_rclc_execute+0x14>
 800b768:	2700      	movs	r7, #0
 800b76a:	e00b      	b.n	800b784 <_rclc_execute+0x240>
 800b76c:	6863      	ldr	r3, [r4, #4]
 800b76e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b772:	6a1e      	ldr	r6, [r3, #32]
 800b774:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800b778:	47b0      	blx	r6
 800b77a:	6860      	ldr	r0, [r4, #4]
 800b77c:	4629      	mov	r1, r5
 800b77e:	f009 fbc3 	bl	8014f08 <rclc_action_remove_used_goal_handle>
 800b782:	6860      	ldr	r0, [r4, #4]
 800b784:	f009 fc48 	bl	8015018 <rclc_action_find_first_handle_with_result_response>
 800b788:	4605      	mov	r5, r0
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d1ee      	bne.n	800b76c <_rclc_execute+0x228>
 800b78e:	e6e3      	b.n	800b558 <_rclc_execute+0x14>
 800b790:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800b794:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f af61 	beq.w	800b65e <_rclc_execute+0x11a>
 800b79c:	e75e      	b.n	800b65c <_rclc_execute+0x118>
 800b79e:	6840      	ldr	r0, [r0, #4]
 800b7a0:	e78e      	b.n	800b6c0 <_rclc_execute+0x17c>
 800b7a2:	6840      	ldr	r0, [r0, #4]
 800b7a4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f43f af1a 	beq.w	800b5e2 <_rclc_execute+0x9e>
 800b7ae:	e70f      	b.n	800b5d0 <_rclc_execute+0x8c>
 800b7b0:	f104 0510 	add.w	r5, r4, #16
 800b7b4:	460a      	mov	r2, r1
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	47b0      	blx	r6
 800b7ba:	e744      	b.n	800b646 <_rclc_execute+0x102>
 800b7bc:	6860      	ldr	r0, [r4, #4]
 800b7be:	f880 5020 	strb.w	r5, [r0, #32]
 800b7c2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f43f aec6 	beq.w	800b558 <_rclc_execute+0x14>
 800b7cc:	68c5      	ldr	r5, [r0, #12]
 800b7ce:	b325      	cbz	r5, 800b81a <_rclc_execute+0x2d6>
 800b7d0:	2602      	movs	r6, #2
 800b7d2:	e001      	b.n	800b7d8 <_rclc_execute+0x294>
 800b7d4:	682d      	ldr	r5, [r5, #0]
 800b7d6:	b305      	cbz	r5, 800b81a <_rclc_execute+0x2d6>
 800b7d8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d1f9      	bne.n	800b7d4 <_rclc_execute+0x290>
 800b7e0:	69c3      	ldr	r3, [r0, #28]
 800b7e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	4798      	blx	r3
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b7f4:	b11b      	cbz	r3, 800b7fe <_rclc_execute+0x2ba>
 800b7f6:	f009 fc3b 	bl	8015070 <rclc_action_server_goal_cancel_accept>
 800b7fa:	6860      	ldr	r0, [r4, #4]
 800b7fc:	e7ea      	b.n	800b7d4 <_rclc_execute+0x290>
 800b7fe:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b800:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b804:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800b808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b80c:	6860      	ldr	r0, [r4, #4]
 800b80e:	2101      	movs	r1, #1
 800b810:	f009 fc5a 	bl	80150c8 <rclc_action_server_goal_cancel_reject>
 800b814:	722e      	strb	r6, [r5, #8]
 800b816:	6860      	ldr	r0, [r4, #4]
 800b818:	e7dc      	b.n	800b7d4 <_rclc_execute+0x290>
 800b81a:	2300      	movs	r3, #0
 800b81c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b820:	e69a      	b.n	800b558 <_rclc_execute+0x14>
 800b822:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b824:	47b0      	blx	r6
 800b826:	f104 0510 	add.w	r5, r4, #16
 800b82a:	e70c      	b.n	800b646 <_rclc_execute+0x102>
 800b82c:	2001      	movs	r0, #1
 800b82e:	e694      	b.n	800b55a <_rclc_execute+0x16>

0800b830 <rclc_executor_init>:
 800b830:	2800      	cmp	r0, #0
 800b832:	d05a      	beq.n	800b8ea <rclc_executor_init+0xba>
 800b834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b838:	460d      	mov	r5, r1
 800b83a:	b0b2      	sub	sp, #200	@ 0xc8
 800b83c:	2900      	cmp	r1, #0
 800b83e:	d050      	beq.n	800b8e2 <rclc_executor_init+0xb2>
 800b840:	4604      	mov	r4, r0
 800b842:	4618      	mov	r0, r3
 800b844:	4616      	mov	r6, r2
 800b846:	461f      	mov	r7, r3
 800b848:	f000 fbce 	bl	800bfe8 <rcutils_allocator_is_valid>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d048      	beq.n	800b8e2 <rclc_executor_init+0xb2>
 800b850:	2e00      	cmp	r6, #0
 800b852:	d046      	beq.n	800b8e2 <rclc_executor_init+0xb2>
 800b854:	492a      	ldr	r1, [pc, #168]	@ (800b900 <rclc_executor_init+0xd0>)
 800b856:	2290      	movs	r2, #144	@ 0x90
 800b858:	a80e      	add	r0, sp, #56	@ 0x38
 800b85a:	f00e fbca 	bl	8019ff2 <memcpy>
 800b85e:	a90e      	add	r1, sp, #56	@ 0x38
 800b860:	2290      	movs	r2, #144	@ 0x90
 800b862:	4620      	mov	r0, r4
 800b864:	f00e fbc5 	bl	8019ff2 <memcpy>
 800b868:	6065      	str	r5, [r4, #4]
 800b86a:	4668      	mov	r0, sp
 800b86c:	60e6      	str	r6, [r4, #12]
 800b86e:	466d      	mov	r5, sp
 800b870:	f008 f888 	bl	8013984 <rcl_get_zero_initialized_wait_set>
 800b874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b876:	f104 0c18 	add.w	ip, r4, #24
 800b87a:	f8d7 8000 	ldr.w	r8, [r7]
 800b87e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b88a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b88e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800b8f8 <rclc_executor_init+0xc8>
 800b892:	682b      	ldr	r3, [r5, #0]
 800b894:	f8cc 3000 	str.w	r3, [ip]
 800b898:	6939      	ldr	r1, [r7, #16]
 800b89a:	6167      	str	r7, [r4, #20]
 800b89c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800b8a0:	01b0      	lsls	r0, r6, #6
 800b8a2:	47c0      	blx	r8
 800b8a4:	60a0      	str	r0, [r4, #8]
 800b8a6:	b310      	cbz	r0, 800b8ee <rclc_executor_init+0xbe>
 800b8a8:	2500      	movs	r5, #0
 800b8aa:	e000      	b.n	800b8ae <rclc_executor_init+0x7e>
 800b8ac:	68a0      	ldr	r0, [r4, #8]
 800b8ae:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	3501      	adds	r5, #1
 800b8b6:	f000 fa25 	bl	800bd04 <rclc_executor_handle_init>
 800b8ba:	42ae      	cmp	r6, r5
 800b8bc:	d1f6      	bne.n	800b8ac <rclc_executor_init+0x7c>
 800b8be:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800b8c2:	f000 fa15 	bl	800bcf0 <rclc_executor_handle_counters_zero_init>
 800b8c6:	490f      	ldr	r1, [pc, #60]	@ (800b904 <rclc_executor_init+0xd4>)
 800b8c8:	68a2      	ldr	r2, [r4, #8]
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800b8d0:	b12a      	cbz	r2, 800b8de <rclc_executor_init+0xae>
 800b8d2:	6962      	ldr	r2, [r4, #20]
 800b8d4:	b11a      	cbz	r2, 800b8de <rclc_executor_init+0xae>
 800b8d6:	68e2      	ldr	r2, [r4, #12]
 800b8d8:	b10a      	cbz	r2, 800b8de <rclc_executor_init+0xae>
 800b8da:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800b8de:	2000      	movs	r0, #0
 800b8e0:	e000      	b.n	800b8e4 <rclc_executor_init+0xb4>
 800b8e2:	200b      	movs	r0, #11
 800b8e4:	b032      	add	sp, #200	@ 0xc8
 800b8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ea:	200b      	movs	r0, #11
 800b8ec:	4770      	bx	lr
 800b8ee:	200a      	movs	r0, #10
 800b8f0:	e7f8      	b.n	800b8e4 <rclc_executor_init+0xb4>
 800b8f2:	bf00      	nop
 800b8f4:	f3af 8000 	nop.w
 800b8f8:	3b9aca00 	.word	0x3b9aca00
 800b8fc:	00000000 	.word	0x00000000
 800b900:	0801adc0 	.word	0x0801adc0
 800b904:	0800b4d9 	.word	0x0800b4d9

0800b908 <rclc_executor_add_subscription>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b90e:	b338      	cbz	r0, 800b960 <rclc_executor_add_subscription+0x58>
 800b910:	b331      	cbz	r1, 800b960 <rclc_executor_add_subscription+0x58>
 800b912:	b32a      	cbz	r2, 800b960 <rclc_executor_add_subscription+0x58>
 800b914:	b323      	cbz	r3, 800b960 <rclc_executor_add_subscription+0x58>
 800b916:	4604      	mov	r4, r0
 800b918:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800b91c:	42a8      	cmp	r0, r5
 800b91e:	d301      	bcc.n	800b924 <rclc_executor_add_subscription+0x1c>
 800b920:	2001      	movs	r0, #1
 800b922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b924:	68a6      	ldr	r6, [r4, #8]
 800b926:	0187      	lsls	r7, r0, #6
 800b928:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b92c:	2500      	movs	r5, #0
 800b92e:	55f5      	strb	r5, [r6, r7]
 800b930:	3001      	adds	r0, #1
 800b932:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b936:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b93a:	2301      	movs	r3, #1
 800b93c:	f104 0518 	add.w	r5, r4, #24
 800b940:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b944:	f88c e001 	strb.w	lr, [ip, #1]
 800b948:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b94c:	6120      	str	r0, [r4, #16]
 800b94e:	4628      	mov	r0, r5
 800b950:	f008 f82c 	bl	80139ac <rcl_wait_set_is_valid>
 800b954:	b930      	cbnz	r0, 800b964 <rclc_executor_add_subscription+0x5c>
 800b956:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b958:	3301      	adds	r3, #1
 800b95a:	2000      	movs	r0, #0
 800b95c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800b95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b960:	200b      	movs	r0, #11
 800b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b964:	4628      	mov	r0, r5
 800b966:	f008 f827 	bl	80139b8 <rcl_wait_set_fini>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d0f3      	beq.n	800b956 <rclc_executor_add_subscription+0x4e>
 800b96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b970 <rclc_executor_add_timer>:
 800b970:	b300      	cbz	r0, 800b9b4 <rclc_executor_add_timer+0x44>
 800b972:	b1f9      	cbz	r1, 800b9b4 <rclc_executor_add_timer+0x44>
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800b97a:	4293      	cmp	r3, r2
 800b97c:	4604      	mov	r4, r0
 800b97e:	d301      	bcc.n	800b984 <rclc_executor_add_timer+0x14>
 800b980:	2001      	movs	r0, #1
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	6880      	ldr	r0, [r0, #8]
 800b986:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800b98a:	019d      	lsls	r5, r3, #6
 800b98c:	6051      	str	r1, [r2, #4]
 800b98e:	2102      	movs	r1, #2
 800b990:	5341      	strh	r1, [r0, r5]
 800b992:	3301      	adds	r3, #1
 800b994:	2000      	movs	r0, #0
 800b996:	2101      	movs	r1, #1
 800b998:	f104 0518 	add.w	r5, r4, #24
 800b99c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800b99e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	6123      	str	r3, [r4, #16]
 800b9a4:	f008 f802 	bl	80139ac <rcl_wait_set_is_valid>
 800b9a8:	b930      	cbnz	r0, 800b9b8 <rclc_executor_add_timer+0x48>
 800b9aa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	6523      	str	r3, [r4, #80]	@ 0x50
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	200b      	movs	r0, #11
 800b9b6:	4770      	bx	lr
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	f007 fffd 	bl	80139b8 <rcl_wait_set_fini>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d0f3      	beq.n	800b9aa <rclc_executor_add_timer+0x3a>
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}

0800b9c4 <rclc_executor_prepare>:
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d044      	beq.n	800ba52 <rclc_executor_prepare+0x8e>
 800b9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ca:	f100 0518 	add.w	r5, r0, #24
 800b9ce:	b09b      	sub	sp, #108	@ 0x6c
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f007 ffea 	bl	80139ac <rcl_wait_set_is_valid>
 800b9d8:	b110      	cbz	r0, 800b9e0 <rclc_executor_prepare+0x1c>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	b01b      	add	sp, #108	@ 0x6c
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f007 ffe9 	bl	80139b8 <rcl_wait_set_fini>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d130      	bne.n	800ba4c <rclc_executor_prepare+0x88>
 800b9ea:	a80c      	add	r0, sp, #48	@ 0x30
 800b9ec:	f007 ffca 	bl	8013984 <rcl_get_zero_initialized_wait_set>
 800b9f0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b9f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9f8:	46ae      	mov	lr, r5
 800b9fa:	6967      	ldr	r7, [r4, #20]
 800b9fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ba0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba10:	f8dc 3000 	ldr.w	r3, [ip]
 800ba14:	f8ce 3000 	str.w	r3, [lr]
 800ba18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ba1a:	ae04      	add	r6, sp, #16
 800ba1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	6862      	ldr	r2, [r4, #4]
 800ba22:	6033      	str	r3, [r6, #0]
 800ba24:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ba26:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ba28:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ba2c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800ba30:	e9cd 2100 	strd	r2, r1, [sp]
 800ba34:	4628      	mov	r0, r5
 800ba36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba38:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800ba3a:	f008 faed 	bl	8014018 <rcl_wait_set_init>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d0cc      	beq.n	800b9dc <rclc_executor_prepare+0x18>
 800ba42:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ba44:	f000 fafc 	bl	800c040 <rcutils_reset_error>
 800ba48:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ba4a:	e7c7      	b.n	800b9dc <rclc_executor_prepare+0x18>
 800ba4c:	f000 faf8 	bl	800c040 <rcutils_reset_error>
 800ba50:	e7cb      	b.n	800b9ea <rclc_executor_prepare+0x26>
 800ba52:	200b      	movs	r0, #11
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop

0800ba58 <rclc_executor_spin_some>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f000 8091 	beq.w	800bb86 <rclc_executor_spin_some+0x12e>
 800ba64:	4604      	mov	r4, r0
 800ba66:	6840      	ldr	r0, [r0, #4]
 800ba68:	4690      	mov	r8, r2
 800ba6a:	4699      	mov	r9, r3
 800ba6c:	f006 fc94 	bl	8012398 <rcl_context_is_valid>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d037      	beq.n	800bae4 <rclc_executor_spin_some+0x8c>
 800ba74:	4620      	mov	r0, r4
 800ba76:	f104 0718 	add.w	r7, r4, #24
 800ba7a:	f7ff ffa3 	bl	800b9c4 <rclc_executor_prepare>
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f008 f87e 	bl	8013b80 <rcl_wait_set_clear>
 800ba84:	4606      	mov	r6, r0
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d177      	bne.n	800bb7a <rclc_executor_spin_some+0x122>
 800ba8a:	68e3      	ldr	r3, [r4, #12]
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	b1eb      	cbz	r3, 800bacc <rclc_executor_spin_some+0x74>
 800ba90:	68a1      	ldr	r1, [r4, #8]
 800ba92:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800ba96:	01aa      	lsls	r2, r5, #6
 800ba98:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ba9c:	b1b3      	cbz	r3, 800bacc <rclc_executor_spin_some+0x74>
 800ba9e:	5c8b      	ldrb	r3, [r1, r2]
 800baa0:	2b0a      	cmp	r3, #10
 800baa2:	d81f      	bhi.n	800bae4 <rclc_executor_spin_some+0x8c>
 800baa4:	e8df f003 	tbb	[pc, r3]
 800baa8:	253e3434 	.word	0x253e3434
 800baac:	06060625 	.word	0x06060625
 800bab0:	525d      	.short	0x525d
 800bab2:	48          	.byte	0x48
 800bab3:	00          	.byte	0x00
 800bab4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bab8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800babc:	4638      	mov	r0, r7
 800babe:	f008 fbb5 	bl	801422c <rcl_wait_set_add_service>
 800bac2:	b9f8      	cbnz	r0, 800bb04 <rclc_executor_spin_some+0xac>
 800bac4:	68e3      	ldr	r3, [r4, #12]
 800bac6:	3501      	adds	r5, #1
 800bac8:	42ab      	cmp	r3, r5
 800baca:	d8e1      	bhi.n	800ba90 <rclc_executor_spin_some+0x38>
 800bacc:	4642      	mov	r2, r8
 800bace:	464b      	mov	r3, r9
 800bad0:	4638      	mov	r0, r7
 800bad2:	f008 fbd9 	bl	8014288 <rcl_wait>
 800bad6:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800bada:	2d00      	cmp	r5, #0
 800badc:	f000 80ab 	beq.w	800bc36 <rclc_executor_spin_some+0x1de>
 800bae0:	2d01      	cmp	r5, #1
 800bae2:	d055      	beq.n	800bb90 <rclc_executor_spin_some+0x138>
 800bae4:	f000 faac 	bl	800c040 <rcutils_reset_error>
 800bae8:	2601      	movs	r6, #1
 800baea:	4630      	mov	r0, r6
 800baec:	b003      	add	sp, #12
 800baee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800baf6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bafa:	4638      	mov	r0, r7
 800bafc:	f008 fb6a 	bl	80141d4 <rcl_wait_set_add_client>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d0df      	beq.n	800bac4 <rclc_executor_spin_some+0x6c>
 800bb04:	9001      	str	r0, [sp, #4]
 800bb06:	f000 fa9b 	bl	800c040 <rcutils_reset_error>
 800bb0a:	9801      	ldr	r0, [sp, #4]
 800bb0c:	4606      	mov	r6, r0
 800bb0e:	e7ec      	b.n	800baea <rclc_executor_spin_some+0x92>
 800bb10:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb14:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb18:	4638      	mov	r0, r7
 800bb1a:	f008 f805 	bl	8013b28 <rcl_wait_set_add_subscription>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d0d0      	beq.n	800bac4 <rclc_executor_spin_some+0x6c>
 800bb22:	e7ef      	b.n	800bb04 <rclc_executor_spin_some+0xac>
 800bb24:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb28:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f008 fb21 	bl	8014174 <rcl_wait_set_add_timer>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0c6      	beq.n	800bac4 <rclc_executor_spin_some+0x6c>
 800bb36:	e7e5      	b.n	800bb04 <rclc_executor_spin_some+0xac>
 800bb38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb3c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb40:	4638      	mov	r0, r7
 800bb42:	f008 faeb 	bl	801411c <rcl_wait_set_add_guard_condition>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d0bc      	beq.n	800bac4 <rclc_executor_spin_some+0x6c>
 800bb4a:	e7db      	b.n	800bb04 <rclc_executor_spin_some+0xac>
 800bb4c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb50:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb54:	3110      	adds	r1, #16
 800bb56:	4638      	mov	r0, r7
 800bb58:	f009 f8b4 	bl	8014cc4 <rcl_action_wait_set_add_action_server>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d0b1      	beq.n	800bac4 <rclc_executor_spin_some+0x6c>
 800bb60:	e7d0      	b.n	800bb04 <rclc_executor_spin_some+0xac>
 800bb62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb66:	2300      	movs	r3, #0
 800bb68:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb6c:	3110      	adds	r1, #16
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f008 fe96 	bl	80148a0 <rcl_action_wait_set_add_action_client>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d0a5      	beq.n	800bac4 <rclc_executor_spin_some+0x6c>
 800bb78:	e7c4      	b.n	800bb04 <rclc_executor_spin_some+0xac>
 800bb7a:	f000 fa61 	bl	800c040 <rcutils_reset_error>
 800bb7e:	4630      	mov	r0, r6
 800bb80:	b003      	add	sp, #12
 800bb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb86:	260b      	movs	r6, #11
 800bb88:	4630      	mov	r0, r6
 800bb8a:	b003      	add	sp, #12
 800bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800bb94:	4663      	mov	r3, ip
 800bb96:	4615      	mov	r5, r2
 800bb98:	b1ca      	cbz	r2, 800bbce <rclc_executor_spin_some+0x176>
 800bb9a:	2500      	movs	r5, #0
 800bb9c:	46a8      	mov	r8, r5
 800bb9e:	f240 1991 	movw	r9, #401	@ 0x191
 800bba2:	e00c      	b.n	800bbbe <rclc_executor_spin_some+0x166>
 800bba4:	f7ff fae0 	bl	800b168 <_rclc_check_for_new_data>
 800bba8:	f108 0801 	add.w	r8, r8, #1
 800bbac:	4605      	mov	r5, r0
 800bbae:	b108      	cbz	r0, 800bbb4 <rclc_executor_spin_some+0x15c>
 800bbb0:	4548      	cmp	r0, r9
 800bbb2:	d13e      	bne.n	800bc32 <rclc_executor_spin_some+0x1da>
 800bbb4:	68e2      	ldr	r2, [r4, #12]
 800bbb6:	4590      	cmp	r8, r2
 800bbb8:	f080 808b 	bcs.w	800bcd2 <rclc_executor_spin_some+0x27a>
 800bbbc:	68a3      	ldr	r3, [r4, #8]
 800bbbe:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800bbc2:	469c      	mov	ip, r3
 800bbc4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800bbc8:	4639      	mov	r1, r7
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1ea      	bne.n	800bba4 <rclc_executor_spin_some+0x14c>
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4660      	mov	r0, ip
 800bbd2:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800bbd6:	4798      	blx	r3
 800bbd8:	b358      	cbz	r0, 800bc32 <rclc_executor_spin_some+0x1da>
 800bbda:	68e3      	ldr	r3, [r4, #12]
 800bbdc:	b34b      	cbz	r3, 800bc32 <rclc_executor_spin_some+0x1da>
 800bbde:	f04f 0800 	mov.w	r8, #0
 800bbe2:	f240 1991 	movw	r9, #401	@ 0x191
 800bbe6:	e00a      	b.n	800bbfe <rclc_executor_spin_some+0x1a6>
 800bbe8:	f7ff fb0c 	bl	800b204 <_rclc_take_new_data>
 800bbec:	f108 0801 	add.w	r8, r8, #1
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	b108      	cbz	r0, 800bbf8 <rclc_executor_spin_some+0x1a0>
 800bbf4:	4548      	cmp	r0, r9
 800bbf6:	d11c      	bne.n	800bc32 <rclc_executor_spin_some+0x1da>
 800bbf8:	68e3      	ldr	r3, [r4, #12]
 800bbfa:	4598      	cmp	r8, r3
 800bbfc:	d26f      	bcs.n	800bcde <rclc_executor_spin_some+0x286>
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800bc0a:	2a00      	cmp	r2, #0
 800bc0c:	d1ec      	bne.n	800bbe8 <rclc_executor_spin_some+0x190>
 800bc0e:	2700      	movs	r7, #0
 800bc10:	e009      	b.n	800bc26 <rclc_executor_spin_some+0x1ce>
 800bc12:	f7ff fc97 	bl	800b544 <_rclc_execute>
 800bc16:	3701      	adds	r7, #1
 800bc18:	4605      	mov	r5, r0
 800bc1a:	b950      	cbnz	r0, 800bc32 <rclc_executor_spin_some+0x1da>
 800bc1c:	68e3      	ldr	r3, [r4, #12]
 800bc1e:	429f      	cmp	r7, r3
 800bc20:	f4bf af63 	bcs.w	800baea <rclc_executor_spin_some+0x92>
 800bc24:	68a3      	ldr	r3, [r4, #8]
 800bc26:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800bc2a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1ef      	bne.n	800bc12 <rclc_executor_spin_some+0x1ba>
 800bc32:	462e      	mov	r6, r5
 800bc34:	e759      	b.n	800baea <rclc_executor_spin_some+0x92>
 800bc36:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800bc3a:	4663      	mov	r3, ip
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	d054      	beq.n	800bcea <rclc_executor_spin_some+0x292>
 800bc40:	46a8      	mov	r8, r5
 800bc42:	f240 1991 	movw	r9, #401	@ 0x191
 800bc46:	e00b      	b.n	800bc60 <rclc_executor_spin_some+0x208>
 800bc48:	f7ff fa8e 	bl	800b168 <_rclc_check_for_new_data>
 800bc4c:	f108 0801 	add.w	r8, r8, #1
 800bc50:	4605      	mov	r5, r0
 800bc52:	b108      	cbz	r0, 800bc58 <rclc_executor_spin_some+0x200>
 800bc54:	4548      	cmp	r0, r9
 800bc56:	d1ec      	bne.n	800bc32 <rclc_executor_spin_some+0x1da>
 800bc58:	68e2      	ldr	r2, [r4, #12]
 800bc5a:	4590      	cmp	r8, r2
 800bc5c:	d23c      	bcs.n	800bcd8 <rclc_executor_spin_some+0x280>
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800bc64:	469c      	mov	ip, r3
 800bc66:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1eb      	bne.n	800bc48 <rclc_executor_spin_some+0x1f0>
 800bc70:	4611      	mov	r1, r2
 800bc72:	4660      	mov	r0, ip
 800bc74:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800bc78:	4798      	blx	r3
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d0d9      	beq.n	800bc32 <rclc_executor_spin_some+0x1da>
 800bc7e:	68e3      	ldr	r3, [r4, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d0d6      	beq.n	800bc32 <rclc_executor_spin_some+0x1da>
 800bc84:	f04f 0a00 	mov.w	sl, #0
 800bc88:	f240 1891 	movw	r8, #401	@ 0x191
 800bc8c:	f240 2959 	movw	r9, #601	@ 0x259
 800bc90:	e013      	b.n	800bcba <rclc_executor_spin_some+0x262>
 800bc92:	f7ff fab7 	bl	800b204 <_rclc_take_new_data>
 800bc96:	b118      	cbz	r0, 800bca0 <rclc_executor_spin_some+0x248>
 800bc98:	4540      	cmp	r0, r8
 800bc9a:	d001      	beq.n	800bca0 <rclc_executor_spin_some+0x248>
 800bc9c:	4548      	cmp	r0, r9
 800bc9e:	d122      	bne.n	800bce6 <rclc_executor_spin_some+0x28e>
 800bca0:	68a0      	ldr	r0, [r4, #8]
 800bca2:	4458      	add	r0, fp
 800bca4:	f7ff fc4e 	bl	800b544 <_rclc_execute>
 800bca8:	f10a 0a01 	add.w	sl, sl, #1
 800bcac:	4605      	mov	r5, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d1bf      	bne.n	800bc32 <rclc_executor_spin_some+0x1da>
 800bcb2:	68e3      	ldr	r3, [r4, #12]
 800bcb4:	459a      	cmp	sl, r3
 800bcb6:	f4bf af18 	bcs.w	800baea <rclc_executor_spin_some+0x92>
 800bcba:	68a0      	ldr	r0, [r4, #8]
 800bcbc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800bcc0:	4639      	mov	r1, r7
 800bcc2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800bcc6:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e1      	bne.n	800bc92 <rclc_executor_spin_some+0x23a>
 800bcce:	462e      	mov	r6, r5
 800bcd0:	e70b      	b.n	800baea <rclc_executor_spin_some+0x92>
 800bcd2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800bcd6:	e77a      	b.n	800bbce <rclc_executor_spin_some+0x176>
 800bcd8:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800bcdc:	e7c8      	b.n	800bc70 <rclc_executor_spin_some+0x218>
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d0a7      	beq.n	800bc32 <rclc_executor_spin_some+0x1da>
 800bce2:	68a3      	ldr	r3, [r4, #8]
 800bce4:	e793      	b.n	800bc0e <rclc_executor_spin_some+0x1b6>
 800bce6:	4606      	mov	r6, r0
 800bce8:	e6ff      	b.n	800baea <rclc_executor_spin_some+0x92>
 800bcea:	4615      	mov	r5, r2
 800bcec:	e7c0      	b.n	800bc70 <rclc_executor_spin_some+0x218>
 800bcee:	bf00      	nop

0800bcf0 <rclc_executor_handle_counters_zero_init>:
 800bcf0:	b130      	cbz	r0, 800bd00 <rclc_executor_handle_counters_zero_init+0x10>
 800bcf2:	b508      	push	{r3, lr}
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	f00e f8a0 	bl	8019e3c <memset>
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	bd08      	pop	{r3, pc}
 800bd00:	200b      	movs	r0, #11
 800bd02:	4770      	bx	lr

0800bd04 <rclc_executor_handle_init>:
 800bd04:	b158      	cbz	r0, 800bd1e <rclc_executor_handle_init+0x1a>
 800bd06:	2300      	movs	r3, #0
 800bd08:	220b      	movs	r2, #11
 800bd0a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800bd0e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800bd12:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800bd16:	8002      	strh	r2, [r0, #0]
 800bd18:	8703      	strh	r3, [r0, #56]	@ 0x38
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	4770      	bx	lr
 800bd1e:	200b      	movs	r0, #11
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop

0800bd24 <rclc_support_init>:
 800bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd28:	b086      	sub	sp, #24
 800bd2a:	b3b8      	cbz	r0, 800bd9c <rclc_support_init+0x78>
 800bd2c:	461c      	mov	r4, r3
 800bd2e:	b3ab      	cbz	r3, 800bd9c <rclc_support_init+0x78>
 800bd30:	460f      	mov	r7, r1
 800bd32:	4690      	mov	r8, r2
 800bd34:	4606      	mov	r6, r0
 800bd36:	f006 fc99 	bl	801266c <rcl_get_zero_initialized_init_options>
 800bd3a:	f104 030c 	add.w	r3, r4, #12
 800bd3e:	9005      	str	r0, [sp, #20]
 800bd40:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd44:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bd48:	a805      	add	r0, sp, #20
 800bd4a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800bd4e:	f006 fc8f 	bl	8012670 <rcl_init_options_init>
 800bd52:	4605      	mov	r5, r0
 800bd54:	b9e0      	cbnz	r0, 800bd90 <rclc_support_init+0x6c>
 800bd56:	ad02      	add	r5, sp, #8
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f006 fb19 	bl	8012390 <rcl_get_zero_initialized_context>
 800bd5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd62:	4633      	mov	r3, r6
 800bd64:	e886 0003 	stmia.w	r6, {r0, r1}
 800bd68:	aa05      	add	r2, sp, #20
 800bd6a:	4641      	mov	r1, r8
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	f006 fb79 	bl	8012464 <rcl_init>
 800bd72:	4605      	mov	r5, r0
 800bd74:	b9b8      	cbnz	r0, 800bda6 <rclc_support_init+0x82>
 800bd76:	60b4      	str	r4, [r6, #8]
 800bd78:	4622      	mov	r2, r4
 800bd7a:	f106 010c 	add.w	r1, r6, #12
 800bd7e:	2003      	movs	r0, #3
 800bd80:	f007 fa56 	bl	8013230 <rcl_clock_init>
 800bd84:	4605      	mov	r5, r0
 800bd86:	b970      	cbnz	r0, 800bda6 <rclc_support_init+0x82>
 800bd88:	a805      	add	r0, sp, #20
 800bd8a:	f006 fccd 	bl	8012728 <rcl_init_options_fini>
 800bd8e:	b108      	cbz	r0, 800bd94 <rclc_support_init+0x70>
 800bd90:	f000 f956 	bl	800c040 <rcutils_reset_error>
 800bd94:	4628      	mov	r0, r5
 800bd96:	b006      	add	sp, #24
 800bd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9c:	250b      	movs	r5, #11
 800bd9e:	4628      	mov	r0, r5
 800bda0:	b006      	add	sp, #24
 800bda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda6:	f000 f94b 	bl	800c040 <rcutils_reset_error>
 800bdaa:	a805      	add	r0, sp, #20
 800bdac:	f006 fcbc 	bl	8012728 <rcl_init_options_fini>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d0ef      	beq.n	800bd94 <rclc_support_init+0x70>
 800bdb4:	e7ec      	b.n	800bd90 <rclc_support_init+0x6c>
 800bdb6:	bf00      	nop

0800bdb8 <rclc_node_init_default>:
 800bdb8:	b3b8      	cbz	r0, 800be2a <rclc_node_init_default+0x72>
 800bdba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdbe:	460d      	mov	r5, r1
 800bdc0:	b0a1      	sub	sp, #132	@ 0x84
 800bdc2:	b329      	cbz	r1, 800be10 <rclc_node_init_default+0x58>
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	b31a      	cbz	r2, 800be10 <rclc_node_init_default+0x58>
 800bdc8:	461f      	mov	r7, r3
 800bdca:	b30b      	cbz	r3, 800be10 <rclc_node_init_default+0x58>
 800bdcc:	f10d 0810 	add.w	r8, sp, #16
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	f006 fd2e 	bl	8012834 <rcl_get_zero_initialized_node>
 800bdd8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bddc:	f10d 0918 	add.w	r9, sp, #24
 800bde0:	e884 0003 	stmia.w	r4, {r0, r1}
 800bde4:	4648      	mov	r0, r9
 800bde6:	f006 fecd 	bl	8012b84 <rcl_node_get_default_options>
 800bdea:	4640      	mov	r0, r8
 800bdec:	f006 fd22 	bl	8012834 <rcl_get_zero_initialized_node>
 800bdf0:	f8cd 9000 	str.w	r9, [sp]
 800bdf4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bdf8:	463b      	mov	r3, r7
 800bdfa:	e884 0003 	stmia.w	r4, {r0, r1}
 800bdfe:	4632      	mov	r2, r6
 800be00:	4629      	mov	r1, r5
 800be02:	4620      	mov	r0, r4
 800be04:	f006 fd20 	bl	8012848 <rcl_node_init>
 800be08:	b930      	cbnz	r0, 800be18 <rclc_node_init_default+0x60>
 800be0a:	b021      	add	sp, #132	@ 0x84
 800be0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be10:	200b      	movs	r0, #11
 800be12:	b021      	add	sp, #132	@ 0x84
 800be14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be18:	9003      	str	r0, [sp, #12]
 800be1a:	f000 f911 	bl	800c040 <rcutils_reset_error>
 800be1e:	f000 f90f 	bl	800c040 <rcutils_reset_error>
 800be22:	9803      	ldr	r0, [sp, #12]
 800be24:	b021      	add	sp, #132	@ 0x84
 800be26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be2a:	200b      	movs	r0, #11
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop

0800be30 <rclc_publisher_init_default>:
 800be30:	b368      	cbz	r0, 800be8e <rclc_publisher_init_default+0x5e>
 800be32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be36:	460d      	mov	r5, r1
 800be38:	b0a0      	sub	sp, #128	@ 0x80
 800be3a:	b321      	cbz	r1, 800be86 <rclc_publisher_init_default+0x56>
 800be3c:	4616      	mov	r6, r2
 800be3e:	b312      	cbz	r2, 800be86 <rclc_publisher_init_default+0x56>
 800be40:	461f      	mov	r7, r3
 800be42:	b303      	cbz	r3, 800be86 <rclc_publisher_init_default+0x56>
 800be44:	4604      	mov	r4, r0
 800be46:	f7ff f87f 	bl	800af48 <rcl_get_zero_initialized_publisher>
 800be4a:	f10d 0810 	add.w	r8, sp, #16
 800be4e:	6020      	str	r0, [r4, #0]
 800be50:	4640      	mov	r0, r8
 800be52:	f7ff f917 	bl	800b084 <rcl_publisher_get_default_options>
 800be56:	490f      	ldr	r1, [pc, #60]	@ (800be94 <rclc_publisher_init_default+0x64>)
 800be58:	2250      	movs	r2, #80	@ 0x50
 800be5a:	4640      	mov	r0, r8
 800be5c:	f00e f8c9 	bl	8019ff2 <memcpy>
 800be60:	f8cd 8000 	str.w	r8, [sp]
 800be64:	463b      	mov	r3, r7
 800be66:	4632      	mov	r2, r6
 800be68:	4629      	mov	r1, r5
 800be6a:	4620      	mov	r0, r4
 800be6c:	f7ff f872 	bl	800af54 <rcl_publisher_init>
 800be70:	b910      	cbnz	r0, 800be78 <rclc_publisher_init_default+0x48>
 800be72:	b020      	add	sp, #128	@ 0x80
 800be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be78:	9003      	str	r0, [sp, #12]
 800be7a:	f000 f8e1 	bl	800c040 <rcutils_reset_error>
 800be7e:	9803      	ldr	r0, [sp, #12]
 800be80:	b020      	add	sp, #128	@ 0x80
 800be82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be86:	200b      	movs	r0, #11
 800be88:	b020      	add	sp, #128	@ 0x80
 800be8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be8e:	200b      	movs	r0, #11
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	0801ae50 	.word	0x0801ae50

0800be98 <rclc_subscription_init_default>:
 800be98:	b368      	cbz	r0, 800bef6 <rclc_subscription_init_default+0x5e>
 800be9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9e:	460d      	mov	r5, r1
 800bea0:	b0a2      	sub	sp, #136	@ 0x88
 800bea2:	b321      	cbz	r1, 800beee <rclc_subscription_init_default+0x56>
 800bea4:	4616      	mov	r6, r2
 800bea6:	b312      	cbz	r2, 800beee <rclc_subscription_init_default+0x56>
 800bea8:	461f      	mov	r7, r3
 800beaa:	b303      	cbz	r3, 800beee <rclc_subscription_init_default+0x56>
 800beac:	4604      	mov	r4, r0
 800beae:	f007 f873 	bl	8012f98 <rcl_get_zero_initialized_subscription>
 800beb2:	f10d 0810 	add.w	r8, sp, #16
 800beb6:	6020      	str	r0, [r4, #0]
 800beb8:	4640      	mov	r0, r8
 800beba:	f007 f91b 	bl	80130f4 <rcl_subscription_get_default_options>
 800bebe:	490f      	ldr	r1, [pc, #60]	@ (800befc <rclc_subscription_init_default+0x64>)
 800bec0:	2250      	movs	r2, #80	@ 0x50
 800bec2:	4640      	mov	r0, r8
 800bec4:	f00e f895 	bl	8019ff2 <memcpy>
 800bec8:	f8cd 8000 	str.w	r8, [sp]
 800becc:	463b      	mov	r3, r7
 800bece:	4632      	mov	r2, r6
 800bed0:	4629      	mov	r1, r5
 800bed2:	4620      	mov	r0, r4
 800bed4:	f007 f866 	bl	8012fa4 <rcl_subscription_init>
 800bed8:	b910      	cbnz	r0, 800bee0 <rclc_subscription_init_default+0x48>
 800beda:	b022      	add	sp, #136	@ 0x88
 800bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee0:	9003      	str	r0, [sp, #12]
 800bee2:	f000 f8ad 	bl	800c040 <rcutils_reset_error>
 800bee6:	9803      	ldr	r0, [sp, #12]
 800bee8:	b022      	add	sp, #136	@ 0x88
 800beea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beee:	200b      	movs	r0, #11
 800bef0:	b022      	add	sp, #136	@ 0x88
 800bef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef6:	200b      	movs	r0, #11
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	0801aea0 	.word	0x0801aea0

0800bf00 <rclc_timer_init_default2>:
 800bf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf04:	b08c      	sub	sp, #48	@ 0x30
 800bf06:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800bf0a:	b330      	cbz	r0, 800bf5a <rclc_timer_init_default2+0x5a>
 800bf0c:	460e      	mov	r6, r1
 800bf0e:	b321      	cbz	r1, 800bf5a <rclc_timer_init_default2+0x5a>
 800bf10:	4690      	mov	r8, r2
 800bf12:	461f      	mov	r7, r3
 800bf14:	4605      	mov	r5, r0
 800bf16:	f007 fb6b 	bl	80135f0 <rcl_get_zero_initialized_timer>
 800bf1a:	9408      	str	r4, [sp, #32]
 800bf1c:	68b4      	ldr	r4, [r6, #8]
 800bf1e:	6028      	str	r0, [r5, #0]
 800bf20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf22:	f10d 0c0c 	add.w	ip, sp, #12
 800bf26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	f8cc 3000 	str.w	r3, [ip]
 800bf30:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf32:	9302      	str	r3, [sp, #8]
 800bf34:	e9cd 8700 	strd	r8, r7, [sp]
 800bf38:	4628      	mov	r0, r5
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	f106 010c 	add.w	r1, r6, #12
 800bf40:	f007 fb5e 	bl	8013600 <rcl_timer_init2>
 800bf44:	b910      	cbnz	r0, 800bf4c <rclc_timer_init_default2+0x4c>
 800bf46:	b00c      	add	sp, #48	@ 0x30
 800bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bf4e:	f000 f877 	bl	800c040 <rcutils_reset_error>
 800bf52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bf54:	b00c      	add	sp, #48	@ 0x30
 800bf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf5a:	200b      	movs	r0, #11
 800bf5c:	b00c      	add	sp, #48	@ 0x30
 800bf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf62:	bf00      	nop

0800bf64 <__default_zero_allocate>:
 800bf64:	f00d ba8c 	b.w	8019480 <calloc>

0800bf68 <__default_reallocate>:
 800bf68:	f00d bc2a 	b.w	80197c0 <realloc>

0800bf6c <__default_deallocate>:
 800bf6c:	f00d bb06 	b.w	801957c <free>

0800bf70 <__default_allocate>:
 800bf70:	f00d bafc 	b.w	801956c <malloc>

0800bf74 <rcutils_get_zero_initialized_allocator>:
 800bf74:	b510      	push	{r4, lr}
 800bf76:	4c05      	ldr	r4, [pc, #20]	@ (800bf8c <rcutils_get_zero_initialized_allocator+0x18>)
 800bf78:	4686      	mov	lr, r0
 800bf7a:	4684      	mov	ip, r0
 800bf7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	f8cc 3000 	str.w	r3, [ip]
 800bf88:	4670      	mov	r0, lr
 800bf8a:	bd10      	pop	{r4, pc}
 800bf8c:	0801aef0 	.word	0x0801aef0

0800bf90 <rcutils_get_default_allocator>:
 800bf90:	b510      	push	{r4, lr}
 800bf92:	4c05      	ldr	r4, [pc, #20]	@ (800bfa8 <rcutils_get_default_allocator+0x18>)
 800bf94:	4686      	mov	lr, r0
 800bf96:	4684      	mov	ip, r0
 800bf98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	f8cc 3000 	str.w	r3, [ip]
 800bfa4:	4670      	mov	r0, lr
 800bfa6:	bd10      	pop	{r4, pc}
 800bfa8:	20000024 	.word	0x20000024

0800bfac <rcutils_set_default_allocator>:
 800bfac:	b1a8      	cbz	r0, 800bfda <rcutils_set_default_allocator+0x2e>
 800bfae:	6802      	ldr	r2, [r0, #0]
 800bfb0:	b1a2      	cbz	r2, 800bfdc <rcutils_set_default_allocator+0x30>
 800bfb2:	6841      	ldr	r1, [r0, #4]
 800bfb4:	b1a1      	cbz	r1, 800bfe0 <rcutils_set_default_allocator+0x34>
 800bfb6:	b410      	push	{r4}
 800bfb8:	68c4      	ldr	r4, [r0, #12]
 800bfba:	b164      	cbz	r4, 800bfd6 <rcutils_set_default_allocator+0x2a>
 800bfbc:	6880      	ldr	r0, [r0, #8]
 800bfbe:	b138      	cbz	r0, 800bfd0 <rcutils_set_default_allocator+0x24>
 800bfc0:	4b08      	ldr	r3, [pc, #32]	@ (800bfe4 <rcutils_set_default_allocator+0x38>)
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800bfca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800bfce:	2001      	movs	r0, #1
 800bfd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	e7fa      	b.n	800bfd0 <rcutils_set_default_allocator+0x24>
 800bfda:	4770      	bx	lr
 800bfdc:	4610      	mov	r0, r2
 800bfde:	4770      	bx	lr
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	4770      	bx	lr
 800bfe4:	20000024 	.word	0x20000024

0800bfe8 <rcutils_allocator_is_valid>:
 800bfe8:	b158      	cbz	r0, 800c002 <rcutils_allocator_is_valid+0x1a>
 800bfea:	6803      	ldr	r3, [r0, #0]
 800bfec:	b143      	cbz	r3, 800c000 <rcutils_allocator_is_valid+0x18>
 800bfee:	6843      	ldr	r3, [r0, #4]
 800bff0:	b133      	cbz	r3, 800c000 <rcutils_allocator_is_valid+0x18>
 800bff2:	68c3      	ldr	r3, [r0, #12]
 800bff4:	b123      	cbz	r3, 800c000 <rcutils_allocator_is_valid+0x18>
 800bff6:	6880      	ldr	r0, [r0, #8]
 800bff8:	3800      	subs	r0, #0
 800bffa:	bf18      	it	ne
 800bffc:	2001      	movne	r0, #1
 800bffe:	4770      	bx	lr
 800c000:	4618      	mov	r0, r3
 800c002:	4770      	bx	lr

0800c004 <rcutils_error_is_set>:
 800c004:	4b01      	ldr	r3, [pc, #4]	@ (800c00c <rcutils_error_is_set+0x8>)
 800c006:	7818      	ldrb	r0, [r3, #0]
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	2000a720 	.word	0x2000a720

0800c010 <rcutils_get_error_string>:
 800c010:	4b06      	ldr	r3, [pc, #24]	@ (800c02c <rcutils_get_error_string+0x1c>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	b13b      	cbz	r3, 800c026 <rcutils_get_error_string+0x16>
 800c016:	4b06      	ldr	r3, [pc, #24]	@ (800c030 <rcutils_get_error_string+0x20>)
 800c018:	781a      	ldrb	r2, [r3, #0]
 800c01a:	b90a      	cbnz	r2, 800c020 <rcutils_get_error_string+0x10>
 800c01c:	2201      	movs	r2, #1
 800c01e:	701a      	strb	r2, [r3, #0]
 800c020:	4b04      	ldr	r3, [pc, #16]	@ (800c034 <rcutils_get_error_string+0x24>)
 800c022:	7818      	ldrb	r0, [r3, #0]
 800c024:	4770      	bx	lr
 800c026:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <rcutils_get_error_string+0x28>)
 800c028:	7818      	ldrb	r0, [r3, #0]
 800c02a:	4770      	bx	lr
 800c02c:	2000a720 	.word	0x2000a720
 800c030:	2000a725 	.word	0x2000a725
 800c034:	2000a724 	.word	0x2000a724
 800c038:	0801af04 	.word	0x0801af04
 800c03c:	00000000 	.word	0x00000000

0800c040 <rcutils_reset_error>:
 800c040:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800c060 <rcutils_reset_error+0x20>
 800c044:	4a08      	ldr	r2, [pc, #32]	@ (800c068 <rcutils_reset_error+0x28>)
 800c046:	4809      	ldr	r0, [pc, #36]	@ (800c06c <rcutils_reset_error+0x2c>)
 800c048:	4909      	ldr	r1, [pc, #36]	@ (800c070 <rcutils_reset_error+0x30>)
 800c04a:	2300      	movs	r3, #0
 800c04c:	8013      	strh	r3, [r2, #0]
 800c04e:	ed82 7b02 	vstr	d7, [r2, #8]
 800c052:	4a08      	ldr	r2, [pc, #32]	@ (800c074 <rcutils_reset_error+0x34>)
 800c054:	7003      	strb	r3, [r0, #0]
 800c056:	700b      	strb	r3, [r1, #0]
 800c058:	7013      	strb	r3, [r2, #0]
 800c05a:	4770      	bx	lr
 800c05c:	f3af 8000 	nop.w
	...
 800c068:	2000a728 	.word	0x2000a728
 800c06c:	2000a725 	.word	0x2000a725
 800c070:	2000a724 	.word	0x2000a724
 800c074:	2000a720 	.word	0x2000a720

0800c078 <rcutils_system_time_now>:
 800c078:	b318      	cbz	r0, 800c0c2 <rcutils_system_time_now+0x4a>
 800c07a:	b570      	push	{r4, r5, r6, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	4604      	mov	r4, r0
 800c080:	4669      	mov	r1, sp
 800c082:	2001      	movs	r0, #1
 800c084:	f7f6 fc28 	bl	80028d8 <clock_gettime>
 800c088:	2800      	cmp	r0, #0
 800c08a:	db17      	blt.n	800c0bc <rcutils_system_time_now+0x44>
 800c08c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c090:	2900      	cmp	r1, #0
 800c092:	db13      	blt.n	800c0bc <rcutils_system_time_now+0x44>
 800c094:	9d02      	ldr	r5, [sp, #8]
 800c096:	2d00      	cmp	r5, #0
 800c098:	db0d      	blt.n	800c0b6 <rcutils_system_time_now+0x3e>
 800c09a:	4e0b      	ldr	r6, [pc, #44]	@ (800c0c8 <rcutils_system_time_now+0x50>)
 800c09c:	fba3 3206 	umull	r3, r2, r3, r6
 800c0a0:	195b      	adds	r3, r3, r5
 800c0a2:	fb06 2201 	mla	r2, r6, r1, r2
 800c0a6:	f04f 0000 	mov.w	r0, #0
 800c0aa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c0ae:	e9c4 3200 	strd	r3, r2, [r4]
 800c0b2:	b004      	add	sp, #16
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
 800c0b6:	ea53 0201 	orrs.w	r2, r3, r1
 800c0ba:	d1ee      	bne.n	800c09a <rcutils_system_time_now+0x22>
 800c0bc:	2002      	movs	r0, #2
 800c0be:	b004      	add	sp, #16
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	200b      	movs	r0, #11
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	3b9aca00 	.word	0x3b9aca00

0800c0cc <rcutils_steady_time_now>:
 800c0cc:	b318      	cbz	r0, 800c116 <rcutils_steady_time_now+0x4a>
 800c0ce:	b570      	push	{r4, r5, r6, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4669      	mov	r1, sp
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	f7f6 fbfe 	bl	80028d8 <clock_gettime>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	db17      	blt.n	800c110 <rcutils_steady_time_now+0x44>
 800c0e0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	db13      	blt.n	800c110 <rcutils_steady_time_now+0x44>
 800c0e8:	9d02      	ldr	r5, [sp, #8]
 800c0ea:	2d00      	cmp	r5, #0
 800c0ec:	db0d      	blt.n	800c10a <rcutils_steady_time_now+0x3e>
 800c0ee:	4e0b      	ldr	r6, [pc, #44]	@ (800c11c <rcutils_steady_time_now+0x50>)
 800c0f0:	fba3 3206 	umull	r3, r2, r3, r6
 800c0f4:	195b      	adds	r3, r3, r5
 800c0f6:	fb06 2201 	mla	r2, r6, r1, r2
 800c0fa:	f04f 0000 	mov.w	r0, #0
 800c0fe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c102:	e9c4 3200 	strd	r3, r2, [r4]
 800c106:	b004      	add	sp, #16
 800c108:	bd70      	pop	{r4, r5, r6, pc}
 800c10a:	ea53 0201 	orrs.w	r2, r3, r1
 800c10e:	d1ee      	bne.n	800c0ee <rcutils_steady_time_now+0x22>
 800c110:	2002      	movs	r0, #2
 800c112:	b004      	add	sp, #16
 800c114:	bd70      	pop	{r4, r5, r6, pc}
 800c116:	200b      	movs	r0, #11
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	3b9aca00 	.word	0x3b9aca00

0800c120 <rmw_get_default_publisher_options>:
 800c120:	2200      	movs	r2, #0
 800c122:	6002      	str	r2, [r0, #0]
 800c124:	7102      	strb	r2, [r0, #4]
 800c126:	4770      	bx	lr

0800c128 <rmw_uros_set_custom_transport>:
 800c128:	b470      	push	{r4, r5, r6}
 800c12a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c12e:	b162      	cbz	r2, 800c14a <rmw_uros_set_custom_transport+0x22>
 800c130:	b15b      	cbz	r3, 800c14a <rmw_uros_set_custom_transport+0x22>
 800c132:	b155      	cbz	r5, 800c14a <rmw_uros_set_custom_transport+0x22>
 800c134:	b14e      	cbz	r6, 800c14a <rmw_uros_set_custom_transport+0x22>
 800c136:	4c06      	ldr	r4, [pc, #24]	@ (800c150 <rmw_uros_set_custom_transport+0x28>)
 800c138:	7020      	strb	r0, [r4, #0]
 800c13a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c13e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c142:	6166      	str	r6, [r4, #20]
 800c144:	2000      	movs	r0, #0
 800c146:	bc70      	pop	{r4, r5, r6}
 800c148:	4770      	bx	lr
 800c14a:	200b      	movs	r0, #11
 800c14c:	bc70      	pop	{r4, r5, r6}
 800c14e:	4770      	bx	lr
 800c150:	2000a738 	.word	0x2000a738

0800c154 <rmw_uros_ping_agent>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	4b22      	ldr	r3, [pc, #136]	@ (800c1e0 <rmw_uros_ping_agent+0x8c>)
 800c158:	7b1a      	ldrb	r2, [r3, #12]
 800c15a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c15e:	4605      	mov	r5, r0
 800c160:	460e      	mov	r6, r1
 800c162:	b10a      	cbz	r2, 800c168 <rmw_uros_ping_agent+0x14>
 800c164:	681c      	ldr	r4, [r3, #0]
 800c166:	b9bc      	cbnz	r4, 800c198 <rmw_uros_ping_agent+0x44>
 800c168:	4b1e      	ldr	r3, [pc, #120]	@ (800c1e4 <rmw_uros_ping_agent+0x90>)
 800c16a:	781a      	ldrb	r2, [r3, #0]
 800c16c:	6918      	ldr	r0, [r3, #16]
 800c16e:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800c176:	2100      	movs	r1, #0
 800c178:	68da      	ldr	r2, [r3, #12]
 800c17a:	909c      	str	r0, [sp, #624]	@ 0x270
 800c17c:	6958      	ldr	r0, [r3, #20]
 800c17e:	929b      	str	r2, [sp, #620]	@ 0x26c
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	909d      	str	r0, [sp, #628]	@ 0x274
 800c184:	466a      	mov	r2, sp
 800c186:	4608      	mov	r0, r1
 800c188:	939a      	str	r3, [sp, #616]	@ 0x268
 800c18a:	f000 f9cd 	bl	800c528 <rmw_uxrce_transport_init>
 800c18e:	b198      	cbz	r0, 800c1b8 <rmw_uros_ping_agent+0x64>
 800c190:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c194:	bd70      	pop	{r4, r5, r6, pc}
 800c196:	b9f0      	cbnz	r0, 800c1d6 <rmw_uros_ping_agent+0x82>
 800c198:	68a0      	ldr	r0, [r4, #8]
 800c19a:	4632      	mov	r2, r6
 800c19c:	4629      	mov	r1, r5
 800c19e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1a2:	f002 fe87 	bl	800eeb4 <uxr_ping_agent_session>
 800c1a6:	6864      	ldr	r4, [r4, #4]
 800c1a8:	2c00      	cmp	r4, #0
 800c1aa:	d1f4      	bne.n	800c196 <rmw_uros_ping_agent+0x42>
 800c1ac:	f080 0001 	eor.w	r0, r0, #1
 800c1b0:	b2c0      	uxtb	r0, r0
 800c1b2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	a89e      	add	r0, sp, #632	@ 0x278
 800c1be:	f002 fec9 	bl	800ef54 <uxr_ping_agent_attempts>
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4668      	mov	r0, sp
 800c1c6:	f002 fe43 	bl	800ee50 <uxr_close_custom_transport>
 800c1ca:	f084 0001 	eor.w	r0, r4, #1
 800c1ce:	b2c0      	uxtb	r0, r0
 800c1d0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c1d4:	bd70      	pop	{r4, r5, r6, pc}
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
 800c1de:	bf00      	nop
 800c1e0:	2000f098 	.word	0x2000f098
 800c1e4:	2000a738 	.word	0x2000a738

0800c1e8 <flush_session>:
 800c1e8:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c1ea:	f003 bc05 	b.w	800f9f8 <uxr_run_session_until_confirm_delivery>
 800c1ee:	bf00      	nop

0800c1f0 <rmw_publish>:
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d053      	beq.n	800c29c <rmw_publish+0xac>
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	b08e      	sub	sp, #56	@ 0x38
 800c1fa:	2900      	cmp	r1, #0
 800c1fc:	d04b      	beq.n	800c296 <rmw_publish+0xa6>
 800c1fe:	4604      	mov	r4, r0
 800c200:	6800      	ldr	r0, [r0, #0]
 800c202:	f000 fd0d 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 800c206:	2800      	cmp	r0, #0
 800c208:	d045      	beq.n	800c296 <rmw_publish+0xa6>
 800c20a:	6866      	ldr	r6, [r4, #4]
 800c20c:	2e00      	cmp	r6, #0
 800c20e:	d042      	beq.n	800c296 <rmw_publish+0xa6>
 800c210:	69b4      	ldr	r4, [r6, #24]
 800c212:	4628      	mov	r0, r5
 800c214:	6923      	ldr	r3, [r4, #16]
 800c216:	4798      	blx	r3
 800c218:	69f3      	ldr	r3, [r6, #28]
 800c21a:	9005      	str	r0, [sp, #20]
 800c21c:	b113      	cbz	r3, 800c224 <rmw_publish+0x34>
 800c21e:	a805      	add	r0, sp, #20
 800c220:	4798      	blx	r3
 800c222:	9805      	ldr	r0, [sp, #20]
 800c224:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	9000      	str	r0, [sp, #0]
 800c22c:	6972      	ldr	r2, [r6, #20]
 800c22e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c230:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c234:	ab06      	add	r3, sp, #24
 800c236:	f004 fe51 	bl	8010edc <uxr_prepare_output_stream>
 800c23a:	b1d8      	cbz	r0, 800c274 <rmw_publish+0x84>
 800c23c:	68a3      	ldr	r3, [r4, #8]
 800c23e:	a906      	add	r1, sp, #24
 800c240:	4628      	mov	r0, r5
 800c242:	4798      	blx	r3
 800c244:	6a33      	ldr	r3, [r6, #32]
 800c246:	4604      	mov	r4, r0
 800c248:	b10b      	cbz	r3, 800c24e <rmw_publish+0x5e>
 800c24a:	a806      	add	r0, sp, #24
 800c24c:	4798      	blx	r3
 800c24e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c252:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800c256:	2b01      	cmp	r3, #1
 800c258:	6910      	ldr	r0, [r2, #16]
 800c25a:	d021      	beq.n	800c2a0 <rmw_publish+0xb0>
 800c25c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c25e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c262:	f003 fbc9 	bl	800f9f8 <uxr_run_session_until_confirm_delivery>
 800c266:	4004      	ands	r4, r0
 800c268:	b2e4      	uxtb	r4, r4
 800c26a:	f084 0001 	eor.w	r0, r4, #1
 800c26e:	b2c0      	uxtb	r0, r0
 800c270:	b00e      	add	sp, #56	@ 0x38
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c278:	6918      	ldr	r0, [r3, #16]
 800c27a:	4b0c      	ldr	r3, [pc, #48]	@ (800c2ac <rmw_publish+0xbc>)
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	9b05      	ldr	r3, [sp, #20]
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	9602      	str	r6, [sp, #8]
 800c284:	6972      	ldr	r2, [r6, #20]
 800c286:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c288:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c28c:	ab06      	add	r3, sp, #24
 800c28e:	f004 fe55 	bl	8010f3c <uxr_prepare_output_stream_fragmented>
 800c292:	2800      	cmp	r0, #0
 800c294:	d1d2      	bne.n	800c23c <rmw_publish+0x4c>
 800c296:	2001      	movs	r0, #1
 800c298:	b00e      	add	sp, #56	@ 0x38
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	2001      	movs	r0, #1
 800c29e:	4770      	bx	lr
 800c2a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c2a4:	f003 f810 	bl	800f2c8 <uxr_flash_output_streams>
 800c2a8:	e7df      	b.n	800c26a <rmw_publish+0x7a>
 800c2aa:	bf00      	nop
 800c2ac:	0800c1e9 	.word	0x0800c1e9

0800c2b0 <rmw_create_publisher>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	b087      	sub	sp, #28
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f000 80c9 	beq.w	800c44e <rmw_create_publisher+0x19e>
 800c2bc:	460f      	mov	r7, r1
 800c2be:	2900      	cmp	r1, #0
 800c2c0:	f000 80c5 	beq.w	800c44e <rmw_create_publisher+0x19e>
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	6800      	ldr	r0, [r0, #0]
 800c2c8:	4615      	mov	r5, r2
 800c2ca:	461e      	mov	r6, r3
 800c2cc:	f000 fca8 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	f000 80bc 	beq.w	800c44e <rmw_create_publisher+0x19e>
 800c2d6:	2d00      	cmp	r5, #0
 800c2d8:	f000 80b9 	beq.w	800c44e <rmw_create_publisher+0x19e>
 800c2dc:	782b      	ldrb	r3, [r5, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 80b5 	beq.w	800c44e <rmw_create_publisher+0x19e>
 800c2e4:	2e00      	cmp	r6, #0
 800c2e6:	f000 80b2 	beq.w	800c44e <rmw_create_publisher+0x19e>
 800c2ea:	485c      	ldr	r0, [pc, #368]	@ (800c45c <rmw_create_publisher+0x1ac>)
 800c2ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c2f0:	f009 fc60 	bl	8015bb4 <get_memory>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	f000 80aa 	beq.w	800c44e <rmw_create_publisher+0x19e>
 800c2fa:	6884      	ldr	r4, [r0, #8]
 800c2fc:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c300:	f009 fcde 	bl	8015cc0 <rmw_get_implementation_identifier>
 800c304:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c308:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c30c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c310:	4628      	mov	r0, r5
 800c312:	f7f3 ffdd 	bl	80002d0 <strlen>
 800c316:	3001      	adds	r0, #1
 800c318:	283c      	cmp	r0, #60	@ 0x3c
 800c31a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800c31e:	f200 808f 	bhi.w	800c440 <rmw_create_publisher+0x190>
 800c322:	4a4f      	ldr	r2, [pc, #316]	@ (800c460 <rmw_create_publisher+0x1b0>)
 800c324:	462b      	mov	r3, r5
 800c326:	213c      	movs	r1, #60	@ 0x3c
 800c328:	4650      	mov	r0, sl
 800c32a:	f00d fc13 	bl	8019b54 <sniprintf>
 800c32e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c332:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c334:	4631      	mov	r1, r6
 800c336:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c33a:	2250      	movs	r2, #80	@ 0x50
 800c33c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c340:	f00d fe57 	bl	8019ff2 <memcpy>
 800c344:	7a33      	ldrb	r3, [r6, #8]
 800c346:	4947      	ldr	r1, [pc, #284]	@ (800c464 <rmw_create_publisher+0x1b4>)
 800c348:	2b02      	cmp	r3, #2
 800c34a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c34e:	bf0c      	ite	eq
 800c350:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c354:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c358:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c35a:	2300      	movs	r3, #0
 800c35c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c360:	4638      	mov	r0, r7
 800c362:	f000 fc6b 	bl	800cc3c <get_message_typesupport_handle>
 800c366:	2800      	cmp	r0, #0
 800c368:	d06a      	beq.n	800c440 <rmw_create_publisher+0x190>
 800c36a:	6842      	ldr	r2, [r0, #4]
 800c36c:	61a2      	str	r2, [r4, #24]
 800c36e:	2a00      	cmp	r2, #0
 800c370:	d066      	beq.n	800c440 <rmw_create_publisher+0x190>
 800c372:	4629      	mov	r1, r5
 800c374:	4633      	mov	r3, r6
 800c376:	4648      	mov	r0, r9
 800c378:	f009 fefe 	bl	8016178 <create_topic>
 800c37c:	6260      	str	r0, [r4, #36]	@ 0x24
 800c37e:	2800      	cmp	r0, #0
 800c380:	d062      	beq.n	800c448 <rmw_create_publisher+0x198>
 800c382:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c38a:	2103      	movs	r1, #3
 800c38c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c390:	1c42      	adds	r2, r0, #1
 800c392:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c396:	f002 fd5f 	bl	800ee58 <uxr_object_id>
 800c39a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c39e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3a2:	6120      	str	r0, [r4, #16]
 800c3a4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c3a8:	6910      	ldr	r0, [r2, #16]
 800c3aa:	2506      	movs	r5, #6
 800c3ac:	9500      	str	r5, [sp, #0]
 800c3ae:	6819      	ldr	r1, [r3, #0]
 800c3b0:	6922      	ldr	r2, [r4, #16]
 800c3b2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c3b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3ba:	f002 fb63 	bl	800ea84 <uxr_buffer_create_publisher_bin>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c3c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c3cc:	f000 fba2 	bl	800cb14 <run_xrce_session>
 800c3d0:	b3b0      	cbz	r0, 800c440 <rmw_create_publisher+0x190>
 800c3d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3da:	2105      	movs	r1, #5
 800c3dc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c3e0:	1c42      	adds	r2, r0, #1
 800c3e2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c3e6:	f002 fd37 	bl	800ee58 <uxr_object_id>
 800c3ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c3ee:	6160      	str	r0, [r4, #20]
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	af04      	add	r7, sp, #16
 800c3f4:	691e      	ldr	r6, [r3, #16]
 800c3f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3fa:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c3fe:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800c402:	4638      	mov	r0, r7
 800c404:	f000 fba6 	bl	800cb54 <convert_qos_profile>
 800c408:	9503      	str	r5, [sp, #12]
 800c40a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c40e:	9001      	str	r0, [sp, #4]
 800c410:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c414:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c41e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c422:	f8da 1000 	ldr.w	r1, [sl]
 800c426:	4630      	mov	r0, r6
 800c428:	f002 fb8a 	bl	800eb40 <uxr_buffer_create_datawriter_bin>
 800c42c:	4602      	mov	r2, r0
 800c42e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c432:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c436:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c43a:	f000 fb6b 	bl	800cb14 <run_xrce_session>
 800c43e:	b940      	cbnz	r0, 800c452 <rmw_create_publisher+0x1a2>
 800c440:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c442:	b108      	cbz	r0, 800c448 <rmw_create_publisher+0x198>
 800c444:	f000 fa5e 	bl	800c904 <rmw_uxrce_fini_topic_memory>
 800c448:	4640      	mov	r0, r8
 800c44a:	f000 fa03 	bl	800c854 <rmw_uxrce_fini_publisher_memory>
 800c44e:	f04f 0800 	mov.w	r8, #0
 800c452:	4640      	mov	r0, r8
 800c454:	b007      	add	sp, #28
 800c456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45a:	bf00      	nop
 800c45c:	2000da28 	.word	0x2000da28
 800c460:	0801af3c 	.word	0x0801af3c
 800c464:	0801af08 	.word	0x0801af08

0800c468 <rmw_publisher_get_actual_qos>:
 800c468:	b508      	push	{r3, lr}
 800c46a:	4603      	mov	r3, r0
 800c46c:	b140      	cbz	r0, 800c480 <rmw_publisher_get_actual_qos+0x18>
 800c46e:	4608      	mov	r0, r1
 800c470:	b131      	cbz	r1, 800c480 <rmw_publisher_get_actual_qos+0x18>
 800c472:	6859      	ldr	r1, [r3, #4]
 800c474:	2250      	movs	r2, #80	@ 0x50
 800c476:	3128      	adds	r1, #40	@ 0x28
 800c478:	f00d fdbb 	bl	8019ff2 <memcpy>
 800c47c:	2000      	movs	r0, #0
 800c47e:	bd08      	pop	{r3, pc}
 800c480:	200b      	movs	r0, #11
 800c482:	bd08      	pop	{r3, pc}

0800c484 <rmw_destroy_publisher>:
 800c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c488:	b128      	cbz	r0, 800c496 <rmw_destroy_publisher+0x12>
 800c48a:	4604      	mov	r4, r0
 800c48c:	6800      	ldr	r0, [r0, #0]
 800c48e:	460d      	mov	r5, r1
 800c490:	f000 fbc6 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 800c494:	b918      	cbnz	r0, 800c49e <rmw_destroy_publisher+0x1a>
 800c496:	2401      	movs	r4, #1
 800c498:	4620      	mov	r0, r4
 800c49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49e:	6863      	ldr	r3, [r4, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0f8      	beq.n	800c496 <rmw_destroy_publisher+0x12>
 800c4a4:	2d00      	cmp	r5, #0
 800c4a6:	d0f6      	beq.n	800c496 <rmw_destroy_publisher+0x12>
 800c4a8:	6828      	ldr	r0, [r5, #0]
 800c4aa:	f000 fbb9 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d0f1      	beq.n	800c496 <rmw_destroy_publisher+0x12>
 800c4b2:	686c      	ldr	r4, [r5, #4]
 800c4b4:	2c00      	cmp	r4, #0
 800c4b6:	d0ee      	beq.n	800c496 <rmw_destroy_publisher+0x12>
 800c4b8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c4ba:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c4be:	f009 feaf 	bl	8016220 <destroy_topic>
 800c4c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c4c6:	6962      	ldr	r2, [r4, #20]
 800c4c8:	6918      	ldr	r0, [r3, #16]
 800c4ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c4ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c4d2:	6819      	ldr	r1, [r3, #0]
 800c4d4:	f002 fa26 	bl	800e924 <uxr_buffer_delete_entity>
 800c4d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c4dc:	6922      	ldr	r2, [r4, #16]
 800c4de:	4680      	mov	r8, r0
 800c4e0:	6918      	ldr	r0, [r3, #16]
 800c4e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c4e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c4ea:	6819      	ldr	r1, [r3, #0]
 800c4ec:	f002 fa1a 	bl	800e924 <uxr_buffer_delete_entity>
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	6938      	ldr	r0, [r7, #16]
 800c4f4:	4642      	mov	r2, r8
 800c4f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c4fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c4fe:	f000 fb09 	bl	800cb14 <run_xrce_session>
 800c502:	4604      	mov	r4, r0
 800c504:	6938      	ldr	r0, [r7, #16]
 800c506:	4632      	mov	r2, r6
 800c508:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c50c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c510:	f000 fb00 	bl	800cb14 <run_xrce_session>
 800c514:	4004      	ands	r4, r0
 800c516:	f084 0401 	eor.w	r4, r4, #1
 800c51a:	b2e4      	uxtb	r4, r4
 800c51c:	4628      	mov	r0, r5
 800c51e:	0064      	lsls	r4, r4, #1
 800c520:	f000 f998 	bl	800c854 <rmw_uxrce_fini_publisher_memory>
 800c524:	e7b8      	b.n	800c498 <rmw_destroy_publisher+0x14>
 800c526:	bf00      	nop

0800c528 <rmw_uxrce_transport_init>:
 800c528:	b508      	push	{r3, lr}
 800c52a:	b108      	cbz	r0, 800c530 <rmw_uxrce_transport_init+0x8>
 800c52c:	f100 0210 	add.w	r2, r0, #16
 800c530:	b139      	cbz	r1, 800c542 <rmw_uxrce_transport_init+0x1a>
 800c532:	6949      	ldr	r1, [r1, #20]
 800c534:	4610      	mov	r0, r2
 800c536:	f002 fc57 	bl	800ede8 <uxr_init_custom_transport>
 800c53a:	f080 0001 	eor.w	r0, r0, #1
 800c53e:	b2c0      	uxtb	r0, r0
 800c540:	bd08      	pop	{r3, pc}
 800c542:	4b04      	ldr	r3, [pc, #16]	@ (800c554 <rmw_uxrce_transport_init+0x2c>)
 800c544:	4610      	mov	r0, r2
 800c546:	6859      	ldr	r1, [r3, #4]
 800c548:	f002 fc4e 	bl	800ede8 <uxr_init_custom_transport>
 800c54c:	f080 0001 	eor.w	r0, r0, #1
 800c550:	b2c0      	uxtb	r0, r0
 800c552:	bd08      	pop	{r3, pc}
 800c554:	2000a738 	.word	0x2000a738

0800c558 <rmw_uxrce_init_service_memory>:
 800c558:	b1e2      	cbz	r2, 800c594 <rmw_uxrce_init_service_memory+0x3c>
 800c55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55e:	7b05      	ldrb	r5, [r0, #12]
 800c560:	4606      	mov	r6, r0
 800c562:	b9ad      	cbnz	r5, 800c590 <rmw_uxrce_init_service_memory+0x38>
 800c564:	23c8      	movs	r3, #200	@ 0xc8
 800c566:	e9c0 5500 	strd	r5, r5, [r0]
 800c56a:	6083      	str	r3, [r0, #8]
 800c56c:	f240 1301 	movw	r3, #257	@ 0x101
 800c570:	4617      	mov	r7, r2
 800c572:	8183      	strh	r3, [r0, #12]
 800c574:	460c      	mov	r4, r1
 800c576:	46a8      	mov	r8, r5
 800c578:	4621      	mov	r1, r4
 800c57a:	4630      	mov	r0, r6
 800c57c:	3501      	adds	r5, #1
 800c57e:	f009 fb29 	bl	8015bd4 <put_memory>
 800c582:	42af      	cmp	r7, r5
 800c584:	60a4      	str	r4, [r4, #8]
 800c586:	f884 800c 	strb.w	r8, [r4, #12]
 800c58a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c58e:	d1f3      	bne.n	800c578 <rmw_uxrce_init_service_memory+0x20>
 800c590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop

0800c598 <rmw_uxrce_init_client_memory>:
 800c598:	b1e2      	cbz	r2, 800c5d4 <rmw_uxrce_init_client_memory+0x3c>
 800c59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c59e:	7b05      	ldrb	r5, [r0, #12]
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	b9ad      	cbnz	r5, 800c5d0 <rmw_uxrce_init_client_memory+0x38>
 800c5a4:	23c8      	movs	r3, #200	@ 0xc8
 800c5a6:	e9c0 5500 	strd	r5, r5, [r0]
 800c5aa:	6083      	str	r3, [r0, #8]
 800c5ac:	f240 1301 	movw	r3, #257	@ 0x101
 800c5b0:	4617      	mov	r7, r2
 800c5b2:	8183      	strh	r3, [r0, #12]
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	46a8      	mov	r8, r5
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	3501      	adds	r5, #1
 800c5be:	f009 fb09 	bl	8015bd4 <put_memory>
 800c5c2:	42af      	cmp	r7, r5
 800c5c4:	60a4      	str	r4, [r4, #8]
 800c5c6:	f884 800c 	strb.w	r8, [r4, #12]
 800c5ca:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c5ce:	d1f3      	bne.n	800c5b8 <rmw_uxrce_init_client_memory+0x20>
 800c5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop

0800c5d8 <rmw_uxrce_init_publisher_memory>:
 800c5d8:	b1e2      	cbz	r2, 800c614 <rmw_uxrce_init_publisher_memory+0x3c>
 800c5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5de:	7b05      	ldrb	r5, [r0, #12]
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	b9ad      	cbnz	r5, 800c610 <rmw_uxrce_init_publisher_memory+0x38>
 800c5e4:	23d8      	movs	r3, #216	@ 0xd8
 800c5e6:	e9c0 5500 	strd	r5, r5, [r0]
 800c5ea:	6083      	str	r3, [r0, #8]
 800c5ec:	f240 1301 	movw	r3, #257	@ 0x101
 800c5f0:	4617      	mov	r7, r2
 800c5f2:	8183      	strh	r3, [r0, #12]
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	46a8      	mov	r8, r5
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	3501      	adds	r5, #1
 800c5fe:	f009 fae9 	bl	8015bd4 <put_memory>
 800c602:	42af      	cmp	r7, r5
 800c604:	60a4      	str	r4, [r4, #8]
 800c606:	f884 800c 	strb.w	r8, [r4, #12]
 800c60a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c60e:	d1f3      	bne.n	800c5f8 <rmw_uxrce_init_publisher_memory+0x20>
 800c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop

0800c618 <rmw_uxrce_init_subscription_memory>:
 800c618:	b1e2      	cbz	r2, 800c654 <rmw_uxrce_init_subscription_memory+0x3c>
 800c61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61e:	7b05      	ldrb	r5, [r0, #12]
 800c620:	4606      	mov	r6, r0
 800c622:	b9ad      	cbnz	r5, 800c650 <rmw_uxrce_init_subscription_memory+0x38>
 800c624:	23d8      	movs	r3, #216	@ 0xd8
 800c626:	e9c0 5500 	strd	r5, r5, [r0]
 800c62a:	6083      	str	r3, [r0, #8]
 800c62c:	f240 1301 	movw	r3, #257	@ 0x101
 800c630:	4617      	mov	r7, r2
 800c632:	8183      	strh	r3, [r0, #12]
 800c634:	460c      	mov	r4, r1
 800c636:	46a8      	mov	r8, r5
 800c638:	4621      	mov	r1, r4
 800c63a:	4630      	mov	r0, r6
 800c63c:	3501      	adds	r5, #1
 800c63e:	f009 fac9 	bl	8015bd4 <put_memory>
 800c642:	42af      	cmp	r7, r5
 800c644:	60a4      	str	r4, [r4, #8]
 800c646:	f884 800c 	strb.w	r8, [r4, #12]
 800c64a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c64e:	d1f3      	bne.n	800c638 <rmw_uxrce_init_subscription_memory+0x20>
 800c650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop

0800c658 <rmw_uxrce_init_node_memory>:
 800c658:	b1e2      	cbz	r2, 800c694 <rmw_uxrce_init_node_memory+0x3c>
 800c65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c65e:	7b05      	ldrb	r5, [r0, #12]
 800c660:	4606      	mov	r6, r0
 800c662:	b9ad      	cbnz	r5, 800c690 <rmw_uxrce_init_node_memory+0x38>
 800c664:	23a4      	movs	r3, #164	@ 0xa4
 800c666:	e9c0 5500 	strd	r5, r5, [r0]
 800c66a:	6083      	str	r3, [r0, #8]
 800c66c:	f240 1301 	movw	r3, #257	@ 0x101
 800c670:	4617      	mov	r7, r2
 800c672:	8183      	strh	r3, [r0, #12]
 800c674:	460c      	mov	r4, r1
 800c676:	46a8      	mov	r8, r5
 800c678:	4621      	mov	r1, r4
 800c67a:	4630      	mov	r0, r6
 800c67c:	3501      	adds	r5, #1
 800c67e:	f009 faa9 	bl	8015bd4 <put_memory>
 800c682:	42af      	cmp	r7, r5
 800c684:	60a4      	str	r4, [r4, #8]
 800c686:	f884 800c 	strb.w	r8, [r4, #12]
 800c68a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c68e:	d1f3      	bne.n	800c678 <rmw_uxrce_init_node_memory+0x20>
 800c690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop

0800c698 <rmw_uxrce_init_session_memory>:
 800c698:	b1ea      	cbz	r2, 800c6d6 <rmw_uxrce_init_session_memory+0x3e>
 800c69a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69e:	7b05      	ldrb	r5, [r0, #12]
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	b9b5      	cbnz	r5, 800c6d2 <rmw_uxrce_init_session_memory+0x3a>
 800c6a4:	e9c0 5500 	strd	r5, r5, [r0]
 800c6a8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c6ac:	f240 1301 	movw	r3, #257	@ 0x101
 800c6b0:	4617      	mov	r7, r2
 800c6b2:	f8c0 8008 	str.w	r8, [r0, #8]
 800c6b6:	460c      	mov	r4, r1
 800c6b8:	8183      	strh	r3, [r0, #12]
 800c6ba:	46a9      	mov	r9, r5
 800c6bc:	4621      	mov	r1, r4
 800c6be:	4630      	mov	r0, r6
 800c6c0:	3501      	adds	r5, #1
 800c6c2:	f009 fa87 	bl	8015bd4 <put_memory>
 800c6c6:	42af      	cmp	r7, r5
 800c6c8:	60a4      	str	r4, [r4, #8]
 800c6ca:	f884 900c 	strb.w	r9, [r4, #12]
 800c6ce:	4444      	add	r4, r8
 800c6d0:	d1f4      	bne.n	800c6bc <rmw_uxrce_init_session_memory+0x24>
 800c6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d6:	4770      	bx	lr

0800c6d8 <rmw_uxrce_init_topic_memory>:
 800c6d8:	b1e2      	cbz	r2, 800c714 <rmw_uxrce_init_topic_memory+0x3c>
 800c6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6de:	7b05      	ldrb	r5, [r0, #12]
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	b9ad      	cbnz	r5, 800c710 <rmw_uxrce_init_topic_memory+0x38>
 800c6e4:	231c      	movs	r3, #28
 800c6e6:	e9c0 5500 	strd	r5, r5, [r0]
 800c6ea:	6083      	str	r3, [r0, #8]
 800c6ec:	f240 1301 	movw	r3, #257	@ 0x101
 800c6f0:	4617      	mov	r7, r2
 800c6f2:	8183      	strh	r3, [r0, #12]
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	46a8      	mov	r8, r5
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	3501      	adds	r5, #1
 800c6fe:	f009 fa69 	bl	8015bd4 <put_memory>
 800c702:	42af      	cmp	r7, r5
 800c704:	60a4      	str	r4, [r4, #8]
 800c706:	f884 800c 	strb.w	r8, [r4, #12]
 800c70a:	f104 041c 	add.w	r4, r4, #28
 800c70e:	d1f3      	bne.n	800c6f8 <rmw_uxrce_init_topic_memory+0x20>
 800c710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop

0800c718 <rmw_uxrce_init_static_input_buffer_memory>:
 800c718:	b1ea      	cbz	r2, 800c756 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71e:	7b05      	ldrb	r5, [r0, #12]
 800c720:	4606      	mov	r6, r0
 800c722:	b9b5      	cbnz	r5, 800c752 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c724:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c728:	e9c0 5500 	strd	r5, r5, [r0]
 800c72c:	6083      	str	r3, [r0, #8]
 800c72e:	f240 1301 	movw	r3, #257	@ 0x101
 800c732:	4617      	mov	r7, r2
 800c734:	8183      	strh	r3, [r0, #12]
 800c736:	460c      	mov	r4, r1
 800c738:	46a8      	mov	r8, r5
 800c73a:	4621      	mov	r1, r4
 800c73c:	4630      	mov	r0, r6
 800c73e:	3501      	adds	r5, #1
 800c740:	f009 fa48 	bl	8015bd4 <put_memory>
 800c744:	42af      	cmp	r7, r5
 800c746:	60a4      	str	r4, [r4, #8]
 800c748:	f884 800c 	strb.w	r8, [r4, #12]
 800c74c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c750:	d1f3      	bne.n	800c73a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c756:	4770      	bx	lr

0800c758 <rmw_uxrce_init_init_options_impl_memory>:
 800c758:	b1e2      	cbz	r2, 800c794 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75e:	7b05      	ldrb	r5, [r0, #12]
 800c760:	4606      	mov	r6, r0
 800c762:	b9ad      	cbnz	r5, 800c790 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c764:	232c      	movs	r3, #44	@ 0x2c
 800c766:	e9c0 5500 	strd	r5, r5, [r0]
 800c76a:	6083      	str	r3, [r0, #8]
 800c76c:	f240 1301 	movw	r3, #257	@ 0x101
 800c770:	4617      	mov	r7, r2
 800c772:	8183      	strh	r3, [r0, #12]
 800c774:	460c      	mov	r4, r1
 800c776:	46a8      	mov	r8, r5
 800c778:	4621      	mov	r1, r4
 800c77a:	4630      	mov	r0, r6
 800c77c:	3501      	adds	r5, #1
 800c77e:	f009 fa29 	bl	8015bd4 <put_memory>
 800c782:	42af      	cmp	r7, r5
 800c784:	60a4      	str	r4, [r4, #8]
 800c786:	f884 800c 	strb.w	r8, [r4, #12]
 800c78a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c78e:	d1f3      	bne.n	800c778 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop

0800c798 <rmw_uxrce_init_wait_set_memory>:
 800c798:	b1e2      	cbz	r2, 800c7d4 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79e:	7b05      	ldrb	r5, [r0, #12]
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	b9ad      	cbnz	r5, 800c7d0 <rmw_uxrce_init_wait_set_memory+0x38>
 800c7a4:	231c      	movs	r3, #28
 800c7a6:	e9c0 5500 	strd	r5, r5, [r0]
 800c7aa:	6083      	str	r3, [r0, #8]
 800c7ac:	f240 1301 	movw	r3, #257	@ 0x101
 800c7b0:	4617      	mov	r7, r2
 800c7b2:	8183      	strh	r3, [r0, #12]
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	46a8      	mov	r8, r5
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	3501      	adds	r5, #1
 800c7be:	f009 fa09 	bl	8015bd4 <put_memory>
 800c7c2:	42af      	cmp	r7, r5
 800c7c4:	60a4      	str	r4, [r4, #8]
 800c7c6:	f884 800c 	strb.w	r8, [r4, #12]
 800c7ca:	f104 041c 	add.w	r4, r4, #28
 800c7ce:	d1f3      	bne.n	800c7b8 <rmw_uxrce_init_wait_set_memory+0x20>
 800c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop

0800c7d8 <rmw_uxrce_init_guard_condition_memory>:
 800c7d8:	b1e2      	cbz	r2, 800c814 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7de:	7b05      	ldrb	r5, [r0, #12]
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	b9ad      	cbnz	r5, 800c810 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c7e4:	2320      	movs	r3, #32
 800c7e6:	e9c0 5500 	strd	r5, r5, [r0]
 800c7ea:	6083      	str	r3, [r0, #8]
 800c7ec:	f240 1301 	movw	r3, #257	@ 0x101
 800c7f0:	4617      	mov	r7, r2
 800c7f2:	8183      	strh	r3, [r0, #12]
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	46a8      	mov	r8, r5
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	3501      	adds	r5, #1
 800c7fe:	f009 f9e9 	bl	8015bd4 <put_memory>
 800c802:	42af      	cmp	r7, r5
 800c804:	60a4      	str	r4, [r4, #8]
 800c806:	f884 800c 	strb.w	r8, [r4, #12]
 800c80a:	f104 0420 	add.w	r4, r4, #32
 800c80e:	d1f3      	bne.n	800c7f8 <rmw_uxrce_init_guard_condition_memory+0x20>
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop

0800c818 <rmw_uxrce_fini_session_memory>:
 800c818:	4601      	mov	r1, r0
 800c81a:	4801      	ldr	r0, [pc, #4]	@ (800c820 <rmw_uxrce_fini_session_memory+0x8>)
 800c81c:	f009 b9da 	b.w	8015bd4 <put_memory>
 800c820:	2000f098 	.word	0x2000f098

0800c824 <rmw_uxrce_fini_node_memory>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	4604      	mov	r4, r0
 800c828:	6800      	ldr	r0, [r0, #0]
 800c82a:	b128      	cbz	r0, 800c838 <rmw_uxrce_fini_node_memory+0x14>
 800c82c:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <rmw_uxrce_fini_node_memory+0x28>)
 800c82e:	6819      	ldr	r1, [r3, #0]
 800c830:	f7f3 fcee 	bl	8000210 <strcmp>
 800c834:	b940      	cbnz	r0, 800c848 <rmw_uxrce_fini_node_memory+0x24>
 800c836:	6020      	str	r0, [r4, #0]
 800c838:	6861      	ldr	r1, [r4, #4]
 800c83a:	b129      	cbz	r1, 800c848 <rmw_uxrce_fini_node_memory+0x24>
 800c83c:	2500      	movs	r5, #0
 800c83e:	4804      	ldr	r0, [pc, #16]	@ (800c850 <rmw_uxrce_fini_node_memory+0x2c>)
 800c840:	610d      	str	r5, [r1, #16]
 800c842:	f009 f9c7 	bl	8015bd4 <put_memory>
 800c846:	6065      	str	r5, [r4, #4]
 800c848:	bd38      	pop	{r3, r4, r5, pc}
 800c84a:	bf00      	nop
 800c84c:	0801bc94 	.word	0x0801bc94
 800c850:	2000dadc 	.word	0x2000dadc

0800c854 <rmw_uxrce_fini_publisher_memory>:
 800c854:	b510      	push	{r4, lr}
 800c856:	4604      	mov	r4, r0
 800c858:	6800      	ldr	r0, [r0, #0]
 800c85a:	b128      	cbz	r0, 800c868 <rmw_uxrce_fini_publisher_memory+0x14>
 800c85c:	4b06      	ldr	r3, [pc, #24]	@ (800c878 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c85e:	6819      	ldr	r1, [r3, #0]
 800c860:	f7f3 fcd6 	bl	8000210 <strcmp>
 800c864:	b938      	cbnz	r0, 800c876 <rmw_uxrce_fini_publisher_memory+0x22>
 800c866:	6020      	str	r0, [r4, #0]
 800c868:	6861      	ldr	r1, [r4, #4]
 800c86a:	b121      	cbz	r1, 800c876 <rmw_uxrce_fini_publisher_memory+0x22>
 800c86c:	4803      	ldr	r0, [pc, #12]	@ (800c87c <rmw_uxrce_fini_publisher_memory+0x28>)
 800c86e:	f009 f9b1 	bl	8015bd4 <put_memory>
 800c872:	2300      	movs	r3, #0
 800c874:	6063      	str	r3, [r4, #4]
 800c876:	bd10      	pop	{r4, pc}
 800c878:	0801bc94 	.word	0x0801bc94
 800c87c:	2000da28 	.word	0x2000da28

0800c880 <rmw_uxrce_fini_subscription_memory>:
 800c880:	b510      	push	{r4, lr}
 800c882:	4604      	mov	r4, r0
 800c884:	6800      	ldr	r0, [r0, #0]
 800c886:	b128      	cbz	r0, 800c894 <rmw_uxrce_fini_subscription_memory+0x14>
 800c888:	4b06      	ldr	r3, [pc, #24]	@ (800c8a4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c88a:	6819      	ldr	r1, [r3, #0]
 800c88c:	f7f3 fcc0 	bl	8000210 <strcmp>
 800c890:	b938      	cbnz	r0, 800c8a2 <rmw_uxrce_fini_subscription_memory+0x22>
 800c892:	6020      	str	r0, [r4, #0]
 800c894:	6861      	ldr	r1, [r4, #4]
 800c896:	b121      	cbz	r1, 800c8a2 <rmw_uxrce_fini_subscription_memory+0x22>
 800c898:	4803      	ldr	r0, [pc, #12]	@ (800c8a8 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c89a:	f009 f99b 	bl	8015bd4 <put_memory>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	6063      	str	r3, [r4, #4]
 800c8a2:	bd10      	pop	{r4, pc}
 800c8a4:	0801bc94 	.word	0x0801bc94
 800c8a8:	2000d1a8 	.word	0x2000d1a8

0800c8ac <rmw_uxrce_fini_service_memory>:
 800c8ac:	b510      	push	{r4, lr}
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	6800      	ldr	r0, [r0, #0]
 800c8b2:	b128      	cbz	r0, 800c8c0 <rmw_uxrce_fini_service_memory+0x14>
 800c8b4:	4b06      	ldr	r3, [pc, #24]	@ (800c8d0 <rmw_uxrce_fini_service_memory+0x24>)
 800c8b6:	6819      	ldr	r1, [r3, #0]
 800c8b8:	f7f3 fcaa 	bl	8000210 <strcmp>
 800c8bc:	b938      	cbnz	r0, 800c8ce <rmw_uxrce_fini_service_memory+0x22>
 800c8be:	6020      	str	r0, [r4, #0]
 800c8c0:	6861      	ldr	r1, [r4, #4]
 800c8c2:	b121      	cbz	r1, 800c8ce <rmw_uxrce_fini_service_memory+0x22>
 800c8c4:	4803      	ldr	r0, [pc, #12]	@ (800c8d4 <rmw_uxrce_fini_service_memory+0x28>)
 800c8c6:	f009 f985 	bl	8015bd4 <put_memory>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	6063      	str	r3, [r4, #4]
 800c8ce:	bd10      	pop	{r4, pc}
 800c8d0:	0801bc94 	.word	0x0801bc94
 800c8d4:	2000cd60 	.word	0x2000cd60

0800c8d8 <rmw_uxrce_fini_client_memory>:
 800c8d8:	b510      	push	{r4, lr}
 800c8da:	4604      	mov	r4, r0
 800c8dc:	6800      	ldr	r0, [r0, #0]
 800c8de:	b128      	cbz	r0, 800c8ec <rmw_uxrce_fini_client_memory+0x14>
 800c8e0:	4b06      	ldr	r3, [pc, #24]	@ (800c8fc <rmw_uxrce_fini_client_memory+0x24>)
 800c8e2:	6819      	ldr	r1, [r3, #0]
 800c8e4:	f7f3 fc94 	bl	8000210 <strcmp>
 800c8e8:	b938      	cbnz	r0, 800c8fa <rmw_uxrce_fini_client_memory+0x22>
 800c8ea:	6020      	str	r0, [r4, #0]
 800c8ec:	6861      	ldr	r1, [r4, #4]
 800c8ee:	b121      	cbz	r1, 800c8fa <rmw_uxrce_fini_client_memory+0x22>
 800c8f0:	4803      	ldr	r0, [pc, #12]	@ (800c900 <rmw_uxrce_fini_client_memory+0x28>)
 800c8f2:	f009 f96f 	bl	8015bd4 <put_memory>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	6063      	str	r3, [r4, #4]
 800c8fa:	bd10      	pop	{r4, pc}
 800c8fc:	0801bc94 	.word	0x0801bc94
 800c900:	2000cc88 	.word	0x2000cc88

0800c904 <rmw_uxrce_fini_topic_memory>:
 800c904:	b510      	push	{r4, lr}
 800c906:	4604      	mov	r4, r0
 800c908:	4621      	mov	r1, r4
 800c90a:	4803      	ldr	r0, [pc, #12]	@ (800c918 <rmw_uxrce_fini_topic_memory+0x14>)
 800c90c:	f009 f962 	bl	8015bd4 <put_memory>
 800c910:	2300      	movs	r3, #0
 800c912:	61a3      	str	r3, [r4, #24]
 800c914:	bd10      	pop	{r4, pc}
 800c916:	bf00      	nop
 800c918:	2000cbac 	.word	0x2000cbac

0800c91c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c91c:	b082      	sub	sp, #8
 800c91e:	b530      	push	{r4, r5, lr}
 800c920:	4929      	ldr	r1, [pc, #164]	@ (800c9c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800c922:	ac03      	add	r4, sp, #12
 800c924:	e884 000c 	stmia.w	r4, {r2, r3}
 800c928:	680c      	ldr	r4, [r1, #0]
 800c92a:	461d      	mov	r5, r3
 800c92c:	4602      	mov	r2, r0
 800c92e:	2c00      	cmp	r4, #0
 800c930:	d043      	beq.n	800c9ba <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800c932:	4620      	mov	r0, r4
 800c934:	2100      	movs	r1, #0
 800c936:	6883      	ldr	r3, [r0, #8]
 800c938:	6840      	ldr	r0, [r0, #4]
 800c93a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c93e:	429a      	cmp	r2, r3
 800c940:	bf08      	it	eq
 800c942:	3101      	addeq	r1, #1
 800c944:	2800      	cmp	r0, #0
 800c946:	d1f6      	bne.n	800c936 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800c948:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d027      	beq.n	800c9a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800c950:	d906      	bls.n	800c960 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c952:	2b03      	cmp	r3, #3
 800c954:	d004      	beq.n	800c960 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c956:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c95a:	2000      	movs	r0, #0
 800c95c:	b002      	add	sp, #8
 800c95e:	4770      	bx	lr
 800c960:	b1fd      	cbz	r5, 800c9a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c962:	428d      	cmp	r5, r1
 800c964:	d81d      	bhi.n	800c9a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c966:	2c00      	cmp	r4, #0
 800c968:	d0f5      	beq.n	800c956 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c96a:	2000      	movs	r0, #0
 800c96c:	f04f 3cff 	mov.w	ip, #4294967295
 800c970:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800c974:	e001      	b.n	800c97a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800c976:	6864      	ldr	r4, [r4, #4]
 800c978:	b1dc      	cbz	r4, 800c9b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800c97a:	68a3      	ldr	r3, [r4, #8]
 800c97c:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800c980:	428a      	cmp	r2, r1
 800c982:	d1f8      	bne.n	800c976 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c984:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800c988:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c98c:	4561      	cmp	r1, ip
 800c98e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c992:	eb73 0e05 	sbcs.w	lr, r3, r5
 800c996:	daee      	bge.n	800c976 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c998:	468c      	mov	ip, r1
 800c99a:	461d      	mov	r5, r3
 800c99c:	4620      	mov	r0, r4
 800c99e:	e7ea      	b.n	800c976 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c9a0:	b92d      	cbnz	r5, 800c9ae <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800c9a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9a6:	4808      	ldr	r0, [pc, #32]	@ (800c9c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800c9a8:	b002      	add	sp, #8
 800c9aa:	f009 b903 	b.w	8015bb4 <get_memory>
 800c9ae:	428d      	cmp	r5, r1
 800c9b0:	d8f7      	bhi.n	800c9a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c9b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9b6:	b002      	add	sp, #8
 800c9b8:	4770      	bx	lr
 800c9ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d0ef      	beq.n	800c9a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c9c2:	d9ee      	bls.n	800c9a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	e7c4      	b.n	800c952 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800c9c8:	2000c9f8 	.word	0x2000c9f8

0800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c9cc:	4b11      	ldr	r3, [pc, #68]	@ (800ca14 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	b1eb      	cbz	r3, 800ca0e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c9d2:	b530      	push	{r4, r5, lr}
 800c9d4:	4684      	mov	ip, r0
 800c9d6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9da:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e001      	b.n	800c9e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	b193      	cbz	r3, 800ca0c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800c9e6:	689a      	ldr	r2, [r3, #8]
 800c9e8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c9ec:	458c      	cmp	ip, r1
 800c9ee:	d1f8      	bne.n	800c9e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800c9f0:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c9f4:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c9f8:	42a1      	cmp	r1, r4
 800c9fa:	eb72 050e 	sbcs.w	r5, r2, lr
 800c9fe:	daf0      	bge.n	800c9e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ca00:	4618      	mov	r0, r3
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	460c      	mov	r4, r1
 800ca06:	4696      	mov	lr, r2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1ec      	bne.n	800c9e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ca0c:	bd30      	pop	{r4, r5, pc}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	2000c9f8 	.word	0x2000c9f8

0800ca18 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	4b3c      	ldr	r3, [pc, #240]	@ (800cb10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ca1e:	ed2d 8b06 	vpush	{d8-d10}
 800ca22:	f8d3 8000 	ldr.w	r8, [r3]
 800ca26:	b08d      	sub	sp, #52	@ 0x34
 800ca28:	f00a f9fe 	bl	8016e28 <rmw_uros_epoch_nanos>
 800ca2c:	f1b8 0f00 	cmp.w	r8, #0
 800ca30:	d05c      	beq.n	800caec <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800ca32:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ca36:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800caf8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ca40:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800cb00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ca44:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800cb08 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ca48:	4683      	mov	fp, r0
 800ca4a:	ac04      	add	r4, sp, #16
 800ca4c:	468a      	mov	sl, r1
 800ca4e:	d03f      	beq.n	800cad0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800ca50:	2b05      	cmp	r3, #5
 800ca52:	d044      	beq.n	800cade <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	d03b      	beq.n	800cad0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800ca58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ca5c:	ed8d ab06 	vstr	d10, [sp, #24]
 800ca60:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ca64:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ca68:	ab08      	add	r3, sp, #32
 800ca6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca6c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ca70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ca74:	f008 fed4 	bl	8015820 <rmw_time_equal>
 800ca78:	b118      	cbz	r0, 800ca82 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800ca7a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ca7e:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ca82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ca86:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800ca8a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800ca8e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800ca92:	f008 ff19 	bl	80158c8 <rmw_time_total_nsec>
 800ca96:	183f      	adds	r7, r7, r0
 800ca98:	eb46 0601 	adc.w	r6, r6, r1
 800ca9c:	455f      	cmp	r7, fp
 800ca9e:	eb76 060a 	sbcs.w	r6, r6, sl
 800caa2:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800caa6:	db05      	blt.n	800cab4 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800caa8:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800caac:	4593      	cmp	fp, r2
 800caae:	eb7a 0303 	sbcs.w	r3, sl, r3
 800cab2:	da03      	bge.n	800cabc <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800cab4:	4816      	ldr	r0, [pc, #88]	@ (800cb10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cab6:	4641      	mov	r1, r8
 800cab8:	f009 f88c 	bl	8015bd4 <put_memory>
 800cabc:	f1b9 0f00 	cmp.w	r9, #0
 800cac0:	d014      	beq.n	800caec <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800cac2:	46c8      	mov	r8, r9
 800cac4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cac8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d1bf      	bne.n	800ca50 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800cad0:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cad4:	3340      	adds	r3, #64	@ 0x40
 800cad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cadc:	e7c0      	b.n	800ca60 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800cade:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cae2:	3348      	adds	r3, #72	@ 0x48
 800cae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cae6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800caea:	e7b9      	b.n	800ca60 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800caec:	b00d      	add	sp, #52	@ 0x34
 800caee:	ecbd 8b06 	vpop	{d8-d10}
 800caf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf6:	bf00      	nop
	...
 800cb00:	00000001 	.word	0x00000001
 800cb04:	00000000 	.word	0x00000000
 800cb08:	0000001e 	.word	0x0000001e
 800cb0c:	00000000 	.word	0x00000000
 800cb10:	2000c9f8 	.word	0x2000c9f8

0800cb14 <run_xrce_session>:
 800cb14:	b500      	push	{lr}
 800cb16:	f891 c002 	ldrb.w	ip, [r1, #2]
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	f1bc 0f01 	cmp.w	ip, #1
 800cb20:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cb24:	d00f      	beq.n	800cb46 <run_xrce_session+0x32>
 800cb26:	4619      	mov	r1, r3
 800cb28:	2301      	movs	r3, #1
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	f10d 020e 	add.w	r2, sp, #14
 800cb30:	f10d 0317 	add.w	r3, sp, #23
 800cb34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb38:	f002 ff84 	bl	800fa44 <uxr_run_session_until_all_status>
 800cb3c:	b100      	cbz	r0, 800cb40 <run_xrce_session+0x2c>
 800cb3e:	2001      	movs	r0, #1
 800cb40:	b007      	add	sp, #28
 800cb42:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb4a:	f002 fbbd 	bl	800f2c8 <uxr_flash_output_streams>
 800cb4e:	2001      	movs	r0, #1
 800cb50:	e7f6      	b.n	800cb40 <run_xrce_session+0x2c>
 800cb52:	bf00      	nop

0800cb54 <convert_qos_profile>:
 800cb54:	780a      	ldrb	r2, [r1, #0]
 800cb56:	f891 c008 	ldrb.w	ip, [r1, #8]
 800cb5a:	f1a2 0202 	sub.w	r2, r2, #2
 800cb5e:	fab2 f282 	clz	r2, r2
 800cb62:	0952      	lsrs	r2, r2, #5
 800cb64:	7082      	strb	r2, [r0, #2]
 800cb66:	7a4a      	ldrb	r2, [r1, #9]
 800cb68:	8889      	ldrh	r1, [r1, #4]
 800cb6a:	8081      	strh	r1, [r0, #4]
 800cb6c:	f1a2 0202 	sub.w	r2, r2, #2
 800cb70:	f1ac 0c02 	sub.w	ip, ip, #2
 800cb74:	fab2 f282 	clz	r2, r2
 800cb78:	fabc fc8c 	clz	ip, ip
 800cb7c:	0952      	lsrs	r2, r2, #5
 800cb7e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800cb82:	0052      	lsls	r2, r2, #1
 800cb84:	f880 c001 	strb.w	ip, [r0, #1]
 800cb88:	7002      	strb	r2, [r0, #0]
 800cb8a:	4770      	bx	lr

0800cb8c <generate_type_name>:
 800cb8c:	b530      	push	{r4, r5, lr}
 800cb8e:	2300      	movs	r3, #0
 800cb90:	700b      	strb	r3, [r1, #0]
 800cb92:	6803      	ldr	r3, [r0, #0]
 800cb94:	b087      	sub	sp, #28
 800cb96:	4614      	mov	r4, r2
 800cb98:	b1d3      	cbz	r3, 800cbd0 <generate_type_name+0x44>
 800cb9a:	4a0f      	ldr	r2, [pc, #60]	@ (800cbd8 <generate_type_name+0x4c>)
 800cb9c:	4615      	mov	r5, r2
 800cb9e:	9203      	str	r2, [sp, #12]
 800cba0:	9500      	str	r5, [sp, #0]
 800cba2:	6842      	ldr	r2, [r0, #4]
 800cba4:	480d      	ldr	r0, [pc, #52]	@ (800cbdc <generate_type_name+0x50>)
 800cba6:	9001      	str	r0, [sp, #4]
 800cba8:	4608      	mov	r0, r1
 800cbaa:	490d      	ldr	r1, [pc, #52]	@ (800cbe0 <generate_type_name+0x54>)
 800cbac:	9204      	str	r2, [sp, #16]
 800cbae:	9105      	str	r1, [sp, #20]
 800cbb0:	9102      	str	r1, [sp, #8]
 800cbb2:	4a0c      	ldr	r2, [pc, #48]	@ (800cbe4 <generate_type_name+0x58>)
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	f00c ffcd 	bl	8019b54 <sniprintf>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	db05      	blt.n	800cbca <generate_type_name+0x3e>
 800cbbe:	4284      	cmp	r4, r0
 800cbc0:	bfd4      	ite	le
 800cbc2:	2000      	movle	r0, #0
 800cbc4:	2001      	movgt	r0, #1
 800cbc6:	b007      	add	sp, #28
 800cbc8:	bd30      	pop	{r4, r5, pc}
 800cbca:	2000      	movs	r0, #0
 800cbcc:	b007      	add	sp, #28
 800cbce:	bd30      	pop	{r4, r5, pc}
 800cbd0:	4b05      	ldr	r3, [pc, #20]	@ (800cbe8 <generate_type_name+0x5c>)
 800cbd2:	4a01      	ldr	r2, [pc, #4]	@ (800cbd8 <generate_type_name+0x4c>)
 800cbd4:	461d      	mov	r5, r3
 800cbd6:	e7e2      	b.n	800cb9e <generate_type_name+0x12>
 800cbd8:	0801af2c 	.word	0x0801af2c
 800cbdc:	0801af44 	.word	0x0801af44
 800cbe0:	0801af40 	.word	0x0801af40
 800cbe4:	0801af30 	.word	0x0801af30
 800cbe8:	0801b6bc 	.word	0x0801b6bc

0800cbec <generate_topic_name>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	9000      	str	r0, [sp, #0]
 800cbf4:	4b08      	ldr	r3, [pc, #32]	@ (800cc18 <generate_topic_name+0x2c>)
 800cbf6:	4a09      	ldr	r2, [pc, #36]	@ (800cc1c <generate_topic_name+0x30>)
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	f00c ffaa 	bl	8019b54 <sniprintf>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	db05      	blt.n	800cc10 <generate_topic_name+0x24>
 800cc04:	4284      	cmp	r4, r0
 800cc06:	bfd4      	ite	le
 800cc08:	2000      	movle	r0, #0
 800cc0a:	2001      	movgt	r0, #1
 800cc0c:	b002      	add	sp, #8
 800cc0e:	bd10      	pop	{r4, pc}
 800cc10:	2000      	movs	r0, #0
 800cc12:	b002      	add	sp, #8
 800cc14:	bd10      	pop	{r4, pc}
 800cc16:	bf00      	nop
 800cc18:	0801b764 	.word	0x0801b764
 800cc1c:	0801af48 	.word	0x0801af48

0800cc20 <is_uxrce_rmw_identifier_valid>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	b140      	cbz	r0, 800cc38 <is_uxrce_rmw_identifier_valid+0x18>
 800cc26:	f009 f84b 	bl	8015cc0 <rmw_get_implementation_identifier>
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7f3 faef 	bl	8000210 <strcmp>
 800cc32:	fab0 f080 	clz	r0, r0
 800cc36:	0940      	lsrs	r0, r0, #5
 800cc38:	bd10      	pop	{r4, pc}
 800cc3a:	bf00      	nop

0800cc3c <get_message_typesupport_handle>:
 800cc3c:	6883      	ldr	r3, [r0, #8]
 800cc3e:	4718      	bx	r3

0800cc40 <get_message_typesupport_handle_function>:
 800cc40:	b510      	push	{r4, lr}
 800cc42:	4604      	mov	r4, r0
 800cc44:	6800      	ldr	r0, [r0, #0]
 800cc46:	f7f3 fae3 	bl	8000210 <strcmp>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	bf0c      	ite	eq
 800cc4e:	4620      	moveq	r0, r4
 800cc50:	2000      	movne	r0, #0
 800cc52:	bd10      	pop	{r4, pc}

0800cc54 <std_msgs__msg__Float32MultiArray__init>:
 800cc54:	b1e0      	cbz	r0, 800cc90 <std_msgs__msg__Float32MultiArray__init+0x3c>
 800cc56:	b538      	push	{r3, r4, r5, lr}
 800cc58:	4604      	mov	r4, r0
 800cc5a:	f000 f853 	bl	800cd04 <std_msgs__msg__MultiArrayLayout__init>
 800cc5e:	b138      	cbz	r0, 800cc70 <std_msgs__msg__Float32MultiArray__init+0x1c>
 800cc60:	f104 0510 	add.w	r5, r4, #16
 800cc64:	2100      	movs	r1, #0
 800cc66:	4628      	mov	r0, r5
 800cc68:	f00a f8ec 	bl	8016e44 <rosidl_runtime_c__float__Sequence__init>
 800cc6c:	b148      	cbz	r0, 800cc82 <std_msgs__msg__Float32MultiArray__init+0x2e>
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	4620      	mov	r0, r4
 800cc72:	f000 f857 	bl	800cd24 <std_msgs__msg__MultiArrayLayout__fini>
 800cc76:	f104 0010 	add.w	r0, r4, #16
 800cc7a:	f00a f8fd 	bl	8016e78 <rosidl_runtime_c__float__Sequence__fini>
 800cc7e:	2000      	movs	r0, #0
 800cc80:	bd38      	pop	{r3, r4, r5, pc}
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 f84e 	bl	800cd24 <std_msgs__msg__MultiArrayLayout__fini>
 800cc88:	4628      	mov	r0, r5
 800cc8a:	f00a f8f5 	bl	8016e78 <rosidl_runtime_c__float__Sequence__fini>
 800cc8e:	e7f6      	b.n	800cc7e <std_msgs__msg__Float32MultiArray__init+0x2a>
 800cc90:	2000      	movs	r0, #0
 800cc92:	4770      	bx	lr

0800cc94 <std_msgs__msg__Float32MultiArray__fini>:
 800cc94:	b148      	cbz	r0, 800ccaa <std_msgs__msg__Float32MultiArray__fini+0x16>
 800cc96:	b510      	push	{r4, lr}
 800cc98:	4604      	mov	r4, r0
 800cc9a:	f000 f843 	bl	800cd24 <std_msgs__msg__MultiArrayLayout__fini>
 800cc9e:	f104 0010 	add.w	r0, r4, #16
 800cca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca6:	f00a b8e7 	b.w	8016e78 <rosidl_runtime_c__float__Sequence__fini>
 800ccaa:	4770      	bx	lr

0800ccac <std_msgs__msg__Int32MultiArray__init>:
 800ccac:	b1e0      	cbz	r0, 800cce8 <std_msgs__msg__Int32MultiArray__init+0x3c>
 800ccae:	b538      	push	{r3, r4, r5, lr}
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	f000 f827 	bl	800cd04 <std_msgs__msg__MultiArrayLayout__init>
 800ccb6:	b138      	cbz	r0, 800ccc8 <std_msgs__msg__Int32MultiArray__init+0x1c>
 800ccb8:	f104 0510 	add.w	r5, r4, #16
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f00a f8ee 	bl	8016ea0 <rosidl_runtime_c__int32__Sequence__init>
 800ccc4:	b148      	cbz	r0, 800ccda <std_msgs__msg__Int32MultiArray__init+0x2e>
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 f82b 	bl	800cd24 <std_msgs__msg__MultiArrayLayout__fini>
 800ccce:	f104 0010 	add.w	r0, r4, #16
 800ccd2:	f00a f8ff 	bl	8016ed4 <rosidl_runtime_c__int32__Sequence__fini>
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	bd38      	pop	{r3, r4, r5, pc}
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f000 f822 	bl	800cd24 <std_msgs__msg__MultiArrayLayout__fini>
 800cce0:	4628      	mov	r0, r5
 800cce2:	f00a f8f7 	bl	8016ed4 <rosidl_runtime_c__int32__Sequence__fini>
 800cce6:	e7f6      	b.n	800ccd6 <std_msgs__msg__Int32MultiArray__init+0x2a>
 800cce8:	2000      	movs	r0, #0
 800ccea:	4770      	bx	lr

0800ccec <std_msgs__msg__Int32MultiArray__fini>:
 800ccec:	b148      	cbz	r0, 800cd02 <std_msgs__msg__Int32MultiArray__fini+0x16>
 800ccee:	b510      	push	{r4, lr}
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	f000 f817 	bl	800cd24 <std_msgs__msg__MultiArrayLayout__fini>
 800ccf6:	f104 0010 	add.w	r0, r4, #16
 800ccfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccfe:	f00a b8e9 	b.w	8016ed4 <rosidl_runtime_c__int32__Sequence__fini>
 800cd02:	4770      	bx	lr

0800cd04 <std_msgs__msg__MultiArrayLayout__init>:
 800cd04:	b158      	cbz	r0, 800cd1e <std_msgs__msg__MultiArrayLayout__init+0x1a>
 800cd06:	b510      	push	{r4, lr}
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	f00a fa20 	bl	8017150 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800cd10:	b100      	cbz	r0, 800cd14 <std_msgs__msg__MultiArrayLayout__init+0x10>
 800cd12:	bd10      	pop	{r4, pc}
 800cd14:	4620      	mov	r0, r4
 800cd16:	f00a fa5f 	bl	80171d8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	bd10      	pop	{r4, pc}
 800cd1e:	2000      	movs	r0, #0
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop

0800cd24 <std_msgs__msg__MultiArrayLayout__fini>:
 800cd24:	b108      	cbz	r0, 800cd2a <std_msgs__msg__MultiArrayLayout__fini+0x6>
 800cd26:	f00a ba57 	b.w	80171d8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800cd2a:	4770      	bx	lr

0800cd2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800cd2c:	4b04      	ldr	r3, [pc, #16]	@ (800cd40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	b10a      	cbz	r2, 800cd36 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xa>
 800cd32:	4803      	ldr	r0, [pc, #12]	@ (800cd40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800cd34:	4770      	bx	lr
 800cd36:	4a03      	ldr	r2, [pc, #12]	@ (800cd44 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x18>)
 800cd38:	4801      	ldr	r0, [pc, #4]	@ (800cd40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800cd3a:	6812      	ldr	r2, [r2, #0]
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	4770      	bx	lr
 800cd40:	20000038 	.word	0x20000038
 800cd44:	200002c4 	.word	0x200002c4

0800cd48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800cd48:	4a02      	ldr	r2, [pc, #8]	@ (800cd54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xc>)
 800cd4a:	4b03      	ldr	r3, [pc, #12]	@ (800cd58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x10>)
 800cd4c:	6812      	ldr	r2, [r2, #0]
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	200002c4 	.word	0x200002c4
 800cd58:	20000038 	.word	0x20000038

0800cd5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800cd5c:	4b04      	ldr	r3, [pc, #16]	@ (800cd70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	b10a      	cbz	r2, 800cd66 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xa>
 800cd62:	4803      	ldr	r0, [pc, #12]	@ (800cd70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800cd64:	4770      	bx	lr
 800cd66:	4a03      	ldr	r2, [pc, #12]	@ (800cd74 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x18>)
 800cd68:	4801      	ldr	r0, [pc, #4]	@ (800cd70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800cd6a:	6812      	ldr	r2, [r2, #0]
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	4770      	bx	lr
 800cd70:	20000058 	.word	0x20000058
 800cd74:	200002c4 	.word	0x200002c4

0800cd78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800cd78:	4a02      	ldr	r2, [pc, #8]	@ (800cd84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xc>)
 800cd7a:	4b03      	ldr	r3, [pc, #12]	@ (800cd88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x10>)
 800cd7c:	6812      	ldr	r2, [r2, #0]
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	200002c4 	.word	0x200002c4
 800cd88:	20000058 	.word	0x20000058

0800cd8c <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__size_function__Float32MultiArray__data>:
 800cd8c:	6840      	ldr	r0, [r0, #4]
 800cd8e:	4770      	bx	lr

0800cd90 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float32MultiArray__data>:
 800cd90:	6800      	ldr	r0, [r0, #0]
 800cd92:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cd96:	4770      	bx	lr

0800cd98 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float32MultiArray__data>:
 800cd98:	6803      	ldr	r3, [r0, #0]
 800cd9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6013      	str	r3, [r2, #0]
 800cda2:	4770      	bx	lr

0800cda4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__assign_function__Float32MultiArray__data>:
 800cda4:	6803      	ldr	r3, [r0, #0]
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	4770      	bx	lr

0800cdb0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_init_function>:
 800cdb0:	f7ff bf50 	b.w	800cc54 <std_msgs__msg__Float32MultiArray__init>

0800cdb4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_fini_function>:
 800cdb4:	f7ff bf6e 	b.w	800cc94 <std_msgs__msg__Float32MultiArray__fini>

0800cdb8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__resize_function__Float32MultiArray__data>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4604      	mov	r4, r0
 800cdbc:	460d      	mov	r5, r1
 800cdbe:	f00a f85b 	bl	8016e78 <rosidl_runtime_c__float__Sequence__fini>
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdca:	f00a b83b 	b.w	8016e44 <rosidl_runtime_c__float__Sequence__init>
 800cdce:	bf00      	nop

0800cdd0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_function__Float32MultiArray__data>:
 800cdd0:	6800      	ldr	r0, [r0, #0]
 800cdd2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cdd6:	4770      	bx	lr

0800cdd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800cdd8:	b508      	push	{r3, lr}
 800cdda:	f000 f891 	bl	800cf00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800cdde:	4b06      	ldr	r3, [pc, #24]	@ (800cdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800cde0:	4906      	ldr	r1, [pc, #24]	@ (800cdfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x24>)
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	60c8      	str	r0, [r1, #12]
 800cde6:	b10a      	cbz	r2, 800cdec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>
 800cde8:	4803      	ldr	r0, [pc, #12]	@ (800cdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800cdea:	bd08      	pop	{r3, pc}
 800cdec:	4a04      	ldr	r2, [pc, #16]	@ (800ce00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x28>)
 800cdee:	4802      	ldr	r0, [pc, #8]	@ (800cdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800cdf0:	6812      	ldr	r2, [r2, #0]
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	bd08      	pop	{r3, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20000078 	.word	0x20000078
 800cdfc:	20000090 	.word	0x20000090
 800ce00:	200002c8 	.word	0x200002c8

0800ce04 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__size_function__Int32MultiArray__data>:
 800ce04:	6840      	ldr	r0, [r0, #4]
 800ce06:	4770      	bx	lr

0800ce08 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Int32MultiArray__data>:
 800ce08:	6800      	ldr	r0, [r0, #0]
 800ce0a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce0e:	4770      	bx	lr

0800ce10 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Int32MultiArray__data>:
 800ce10:	6803      	ldr	r3, [r0, #0]
 800ce12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop

0800ce1c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__assign_function__Int32MultiArray__data>:
 800ce1c:	6803      	ldr	r3, [r0, #0]
 800ce1e:	6812      	ldr	r2, [r2, #0]
 800ce20:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop

0800ce28 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_init_function>:
 800ce28:	f7ff bf40 	b.w	800ccac <std_msgs__msg__Int32MultiArray__init>

0800ce2c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_fini_function>:
 800ce2c:	f7ff bf5e 	b.w	800ccec <std_msgs__msg__Int32MultiArray__fini>

0800ce30 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__resize_function__Int32MultiArray__data>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4604      	mov	r4, r0
 800ce34:	460d      	mov	r5, r1
 800ce36:	f00a f84d 	bl	8016ed4 <rosidl_runtime_c__int32__Sequence__fini>
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce42:	f00a b82d 	b.w	8016ea0 <rosidl_runtime_c__int32__Sequence__init>
 800ce46:	bf00      	nop

0800ce48 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_function__Int32MultiArray__data>:
 800ce48:	6800      	ldr	r0, [r0, #0]
 800ce4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce4e:	4770      	bx	lr

0800ce50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800ce50:	b508      	push	{r3, lr}
 800ce52:	f000 f855 	bl	800cf00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ce56:	4b06      	ldr	r3, [pc, #24]	@ (800ce70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800ce58:	4906      	ldr	r1, [pc, #24]	@ (800ce74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x24>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	60c8      	str	r0, [r1, #12]
 800ce5e:	b10a      	cbz	r2, 800ce64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>
 800ce60:	4803      	ldr	r0, [pc, #12]	@ (800ce70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800ce62:	bd08      	pop	{r3, pc}
 800ce64:	4a04      	ldr	r2, [pc, #16]	@ (800ce78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x28>)
 800ce66:	4802      	ldr	r0, [pc, #8]	@ (800ce70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800ce68:	6812      	ldr	r2, [r2, #0]
 800ce6a:	601a      	str	r2, [r3, #0]
 800ce6c:	bd08      	pop	{r3, pc}
 800ce6e:	bf00      	nop
 800ce70:	20000108 	.word	0x20000108
 800ce74:	20000120 	.word	0x20000120
 800ce78:	200002c8 	.word	0x200002c8

0800ce7c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800ce7c:	6840      	ldr	r0, [r0, #4]
 800ce7e:	4770      	bx	lr

0800ce80 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800ce80:	6800      	ldr	r0, [r0, #0]
 800ce82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ce86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce8a:	4770      	bx	lr

0800ce8c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800ce8c:	6803      	ldr	r3, [r0, #0]
 800ce8e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ce92:	b500      	push	{lr}
 800ce94:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800ce98:	4694      	mov	ip, r2
 800ce9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cea2:	f8de 3000 	ldr.w	r3, [lr]
 800cea6:	f8cc 3000 	str.w	r3, [ip]
 800ceaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800ceae:	bf00      	nop

0800ceb0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800ceb0:	6803      	ldr	r3, [r0, #0]
 800ceb2:	b500      	push	{lr}
 800ceb4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ceb8:	4696      	mov	lr, r2
 800ceba:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800cebe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cec6:	f8de 3000 	ldr.w	r3, [lr]
 800ceca:	f8cc 3000 	str.w	r3, [ip]
 800cece:	f85d fb04 	ldr.w	pc, [sp], #4
 800ced2:	bf00      	nop

0800ced4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800ced4:	f7ff bf16 	b.w	800cd04 <std_msgs__msg__MultiArrayLayout__init>

0800ced8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800ced8:	f7ff bf24 	b.w	800cd24 <std_msgs__msg__MultiArrayLayout__fini>

0800cedc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	460d      	mov	r5, r1
 800cee2:	f00a f979 	bl	80171d8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800cee6:	4629      	mov	r1, r5
 800cee8:	4620      	mov	r0, r4
 800ceea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceee:	f00a b92f 	b.w	8017150 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800cef2:	bf00      	nop

0800cef4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800cef4:	6800      	ldr	r0, [r0, #0]
 800cef6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cefa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cefe:	4770      	bx	lr

0800cf00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800cf00:	b508      	push	{r3, lr}
 800cf02:	f00a f9dd 	bl	80172c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800cf06:	4b06      	ldr	r3, [pc, #24]	@ (800cf20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800cf08:	4906      	ldr	r1, [pc, #24]	@ (800cf24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	60c8      	str	r0, [r1, #12]
 800cf0e:	b10a      	cbz	r2, 800cf14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800cf10:	4803      	ldr	r0, [pc, #12]	@ (800cf20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800cf12:	bd08      	pop	{r3, pc}
 800cf14:	4a04      	ldr	r2, [pc, #16]	@ (800cf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800cf16:	4802      	ldr	r0, [pc, #8]	@ (800cf20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800cf18:	6812      	ldr	r2, [r2, #0]
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	bd08      	pop	{r3, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000198 	.word	0x20000198
 800cf24:	200001b0 	.word	0x200001b0
 800cf28:	200002c8 	.word	0x200002c8

0800cf2c <_Float32MultiArray__max_serialized_size>:
 800cf2c:	b500      	push	{lr}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	2301      	movs	r3, #1
 800cf32:	2100      	movs	r1, #0
 800cf34:	f10d 0007 	add.w	r0, sp, #7
 800cf38:	f88d 3007 	strb.w	r3, [sp, #7]
 800cf3c:	f000 f9aa 	bl	800d294 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800cf40:	b003      	add	sp, #12
 800cf42:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf46:	bf00      	nop

0800cf48 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	b160      	cbz	r0, 800cf68 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>
 800cf4e:	460d      	mov	r5, r1
 800cf50:	f000 f972 	bl	800d238 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800cf54:	182e      	adds	r6, r5, r0
 800cf56:	2104      	movs	r1, #4
 800cf58:	4630      	mov	r0, r6
 800cf5a:	6967      	ldr	r7, [r4, #20]
 800cf5c:	f001 fbbe 	bl	800e6dc <ucdr_alignment>
 800cf60:	1d04      	adds	r4, r0, #4
 800cf62:	4434      	add	r4, r6
 800cf64:	b90f      	cbnz	r7, 800cf6a <get_serialized_size_std_msgs__msg__Float32MultiArray+0x22>
 800cf66:	1b60      	subs	r0, r4, r5
 800cf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	2104      	movs	r1, #4
 800cf6e:	f001 fbb5 	bl	800e6dc <ucdr_alignment>
 800cf72:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800cf76:	4404      	add	r4, r0
 800cf78:	1b60      	subs	r0, r4, r5
 800cf7a:	e7f5      	b.n	800cf68 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>

0800cf7c <_Float32MultiArray__cdr_deserialize>:
 800cf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf7e:	460c      	mov	r4, r1
 800cf80:	b083      	sub	sp, #12
 800cf82:	b1d1      	cbz	r1, 800cfba <_Float32MultiArray__cdr_deserialize+0x3e>
 800cf84:	4606      	mov	r6, r0
 800cf86:	f000 f98f 	bl	800d2a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800cf8a:	6843      	ldr	r3, [r0, #4]
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	4630      	mov	r0, r6
 800cf92:	4798      	blx	r3
 800cf94:	69a7      	ldr	r7, [r4, #24]
 800cf96:	6921      	ldr	r1, [r4, #16]
 800cf98:	ab01      	add	r3, sp, #4
 800cf9a:	463a      	mov	r2, r7
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f001 fca5 	bl	800e8ec <ucdr_deserialize_sequence_float>
 800cfa2:	9b01      	ldr	r3, [sp, #4]
 800cfa4:	4605      	mov	r5, r0
 800cfa6:	b920      	cbnz	r0, 800cfb2 <_Float32MultiArray__cdr_deserialize+0x36>
 800cfa8:	429f      	cmp	r7, r3
 800cfaa:	d30a      	bcc.n	800cfc2 <_Float32MultiArray__cdr_deserialize+0x46>
 800cfac:	4628      	mov	r0, r5
 800cfae:	b003      	add	sp, #12
 800cfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	6163      	str	r3, [r4, #20]
 800cfb6:	b003      	add	sp, #12
 800cfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfba:	460d      	mov	r5, r1
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	b003      	add	sp, #12
 800cfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	75b0      	strb	r0, [r6, #22]
 800cfc6:	7573      	strb	r3, [r6, #21]
 800cfc8:	2104      	movs	r1, #4
 800cfca:	6160      	str	r0, [r4, #20]
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f001 fb9b 	bl	800e708 <ucdr_align_to>
 800cfd2:	9901      	ldr	r1, [sp, #4]
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	0089      	lsls	r1, r1, #2
 800cfd8:	f001 fbcc 	bl	800e774 <ucdr_advance_buffer>
 800cfdc:	4628      	mov	r0, r5
 800cfde:	b003      	add	sp, #12
 800cfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfe2:	bf00      	nop

0800cfe4 <_Float32MultiArray__cdr_serialize>:
 800cfe4:	b180      	cbz	r0, 800d008 <_Float32MultiArray__cdr_serialize+0x24>
 800cfe6:	b538      	push	{r3, r4, r5, lr}
 800cfe8:	460d      	mov	r5, r1
 800cfea:	4604      	mov	r4, r0
 800cfec:	f000 f95c 	bl	800d2a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800cff0:	6843      	ldr	r3, [r0, #4]
 800cff2:	4629      	mov	r1, r5
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	4620      	mov	r0, r4
 800cff8:	4798      	blx	r3
 800cffa:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800cffe:	4628      	mov	r0, r5
 800d000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d004:	f001 bc60 	b.w	800e8c8 <ucdr_serialize_sequence_float>
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop

0800d00c <_Float32MultiArray__get_serialized_size>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4604      	mov	r4, r0
 800d010:	b150      	cbz	r0, 800d028 <_Float32MultiArray__get_serialized_size+0x1c>
 800d012:	2100      	movs	r1, #0
 800d014:	f000 f910 	bl	800d238 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d018:	2104      	movs	r1, #4
 800d01a:	6965      	ldr	r5, [r4, #20]
 800d01c:	4604      	mov	r4, r0
 800d01e:	f001 fb5d 	bl	800e6dc <ucdr_alignment>
 800d022:	4404      	add	r4, r0
 800d024:	3404      	adds	r4, #4
 800d026:	b90d      	cbnz	r5, 800d02c <_Float32MultiArray__get_serialized_size+0x20>
 800d028:	4620      	mov	r0, r4
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	2104      	movs	r1, #4
 800d02e:	4620      	mov	r0, r4
 800d030:	f001 fb54 	bl	800e6dc <ucdr_alignment>
 800d034:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d038:	4404      	add	r4, r0
 800d03a:	4620      	mov	r0, r4
 800d03c:	bd38      	pop	{r3, r4, r5, pc}
 800d03e:	bf00      	nop

0800d040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d040:	4800      	ldr	r0, [pc, #0]	@ (800d044 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800d042:	4770      	bx	lr
 800d044:	20000228 	.word	0x20000228

0800d048 <_Int32MultiArray__max_serialized_size>:
 800d048:	b500      	push	{lr}
 800d04a:	b083      	sub	sp, #12
 800d04c:	2301      	movs	r3, #1
 800d04e:	2100      	movs	r1, #0
 800d050:	f10d 0007 	add.w	r0, sp, #7
 800d054:	f88d 3007 	strb.w	r3, [sp, #7]
 800d058:	f000 f91c 	bl	800d294 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d05c:	b003      	add	sp, #12
 800d05e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d062:	bf00      	nop

0800d064 <get_serialized_size_std_msgs__msg__Int32MultiArray>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	4604      	mov	r4, r0
 800d068:	b160      	cbz	r0, 800d084 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>
 800d06a:	460d      	mov	r5, r1
 800d06c:	f000 f8e4 	bl	800d238 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d070:	182e      	adds	r6, r5, r0
 800d072:	2104      	movs	r1, #4
 800d074:	4630      	mov	r0, r6
 800d076:	6967      	ldr	r7, [r4, #20]
 800d078:	f001 fb30 	bl	800e6dc <ucdr_alignment>
 800d07c:	1d04      	adds	r4, r0, #4
 800d07e:	4434      	add	r4, r6
 800d080:	b90f      	cbnz	r7, 800d086 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x22>
 800d082:	1b60      	subs	r0, r4, r5
 800d084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d086:	4620      	mov	r0, r4
 800d088:	2104      	movs	r1, #4
 800d08a:	f001 fb27 	bl	800e6dc <ucdr_alignment>
 800d08e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d092:	4404      	add	r4, r0
 800d094:	1b60      	subs	r0, r4, r5
 800d096:	e7f5      	b.n	800d084 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>

0800d098 <_Int32MultiArray__cdr_deserialize>:
 800d098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d09a:	460c      	mov	r4, r1
 800d09c:	b083      	sub	sp, #12
 800d09e:	b1d1      	cbz	r1, 800d0d6 <_Int32MultiArray__cdr_deserialize+0x3e>
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	f000 f901 	bl	800d2a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d0a6:	6843      	ldr	r3, [r0, #4]
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	4798      	blx	r3
 800d0b0:	69a7      	ldr	r7, [r4, #24]
 800d0b2:	6921      	ldr	r1, [r4, #16]
 800d0b4:	ab01      	add	r3, sp, #4
 800d0b6:	463a      	mov	r2, r7
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f001 fbe9 	bl	800e890 <ucdr_deserialize_sequence_int32_t>
 800d0be:	9b01      	ldr	r3, [sp, #4]
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	b920      	cbnz	r0, 800d0ce <_Int32MultiArray__cdr_deserialize+0x36>
 800d0c4:	429f      	cmp	r7, r3
 800d0c6:	d30a      	bcc.n	800d0de <_Int32MultiArray__cdr_deserialize+0x46>
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	b003      	add	sp, #12
 800d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	6163      	str	r3, [r4, #20]
 800d0d2:	b003      	add	sp, #12
 800d0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	4628      	mov	r0, r5
 800d0da:	b003      	add	sp, #12
 800d0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0de:	2301      	movs	r3, #1
 800d0e0:	75b0      	strb	r0, [r6, #22]
 800d0e2:	7573      	strb	r3, [r6, #21]
 800d0e4:	2104      	movs	r1, #4
 800d0e6:	6160      	str	r0, [r4, #20]
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f001 fb0d 	bl	800e708 <ucdr_align_to>
 800d0ee:	9901      	ldr	r1, [sp, #4]
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	0089      	lsls	r1, r1, #2
 800d0f4:	f001 fb3e 	bl	800e774 <ucdr_advance_buffer>
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	b003      	add	sp, #12
 800d0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0fe:	bf00      	nop

0800d100 <_Int32MultiArray__cdr_serialize>:
 800d100:	b180      	cbz	r0, 800d124 <_Int32MultiArray__cdr_serialize+0x24>
 800d102:	b538      	push	{r3, r4, r5, lr}
 800d104:	460d      	mov	r5, r1
 800d106:	4604      	mov	r4, r0
 800d108:	f000 f8ce 	bl	800d2a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d10c:	6843      	ldr	r3, [r0, #4]
 800d10e:	4629      	mov	r1, r5
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	4620      	mov	r0, r4
 800d114:	4798      	blx	r3
 800d116:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d11a:	4628      	mov	r0, r5
 800d11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d120:	f001 bba4 	b.w	800e86c <ucdr_serialize_sequence_int32_t>
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop

0800d128 <_Int32MultiArray__get_serialized_size>:
 800d128:	b538      	push	{r3, r4, r5, lr}
 800d12a:	4604      	mov	r4, r0
 800d12c:	b150      	cbz	r0, 800d144 <_Int32MultiArray__get_serialized_size+0x1c>
 800d12e:	2100      	movs	r1, #0
 800d130:	f000 f882 	bl	800d238 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d134:	2104      	movs	r1, #4
 800d136:	6965      	ldr	r5, [r4, #20]
 800d138:	4604      	mov	r4, r0
 800d13a:	f001 facf 	bl	800e6dc <ucdr_alignment>
 800d13e:	4404      	add	r4, r0
 800d140:	3404      	adds	r4, #4
 800d142:	b90d      	cbnz	r5, 800d148 <_Int32MultiArray__get_serialized_size+0x20>
 800d144:	4620      	mov	r0, r4
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	2104      	movs	r1, #4
 800d14a:	4620      	mov	r0, r4
 800d14c:	f001 fac6 	bl	800e6dc <ucdr_alignment>
 800d150:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d154:	4404      	add	r4, r0
 800d156:	4620      	mov	r0, r4
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop

0800d15c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800d15c:	4800      	ldr	r0, [pc, #0]	@ (800d160 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x4>)
 800d15e:	4770      	bx	lr
 800d160:	2000025c 	.word	0x2000025c

0800d164 <_MultiArrayLayout__max_serialized_size>:
 800d164:	b508      	push	{r3, lr}
 800d166:	2104      	movs	r1, #4
 800d168:	2000      	movs	r0, #0
 800d16a:	f001 fab7 	bl	800e6dc <ucdr_alignment>
 800d16e:	3004      	adds	r0, #4
 800d170:	bd08      	pop	{r3, pc}
 800d172:	bf00      	nop

0800d174 <_MultiArrayLayout__cdr_deserialize>:
 800d174:	b351      	cbz	r1, 800d1cc <_MultiArrayLayout__cdr_deserialize+0x58>
 800d176:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d178:	460e      	mov	r6, r1
 800d17a:	b083      	sub	sp, #12
 800d17c:	a901      	add	r1, sp, #4
 800d17e:	4607      	mov	r7, r0
 800d180:	f000 fc0a 	bl	800d998 <ucdr_deserialize_uint32_t>
 800d184:	9b01      	ldr	r3, [sp, #4]
 800d186:	68b2      	ldr	r2, [r6, #8]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d31c      	bcc.n	800d1c6 <_MultiArrayLayout__cdr_deserialize+0x52>
 800d18c:	6073      	str	r3, [r6, #4]
 800d18e:	b193      	cbz	r3, 800d1b6 <_MultiArrayLayout__cdr_deserialize+0x42>
 800d190:	2400      	movs	r4, #0
 800d192:	4625      	mov	r5, r4
 800d194:	e005      	b.n	800d1a2 <_MultiArrayLayout__cdr_deserialize+0x2e>
 800d196:	9b01      	ldr	r3, [sp, #4]
 800d198:	3501      	adds	r5, #1
 800d19a:	42ab      	cmp	r3, r5
 800d19c:	f104 0414 	add.w	r4, r4, #20
 800d1a0:	d909      	bls.n	800d1b6 <_MultiArrayLayout__cdr_deserialize+0x42>
 800d1a2:	f00a f92b 	bl	80173fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d1a6:	6831      	ldr	r1, [r6, #0]
 800d1a8:	6843      	ldr	r3, [r0, #4]
 800d1aa:	4421      	add	r1, r4
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	4798      	blx	r3
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d1ef      	bne.n	800d196 <_MultiArrayLayout__cdr_deserialize+0x22>
 800d1b6:	f106 010c 	add.w	r1, r6, #12
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	b003      	add	sp, #12
 800d1be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d1c2:	f000 bbe9 	b.w	800d998 <ucdr_deserialize_uint32_t>
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	b003      	add	sp, #12
 800d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	4770      	bx	lr

0800d1d0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800d1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d4:	4689      	mov	r9, r1
 800d1d6:	4607      	mov	r7, r0
 800d1d8:	2104      	movs	r1, #4
 800d1da:	4648      	mov	r0, r9
 800d1dc:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800d1e0:	f001 fa7c 	bl	800e6dc <ucdr_alignment>
 800d1e4:	f109 0304 	add.w	r3, r9, #4
 800d1e8:	18c6      	adds	r6, r0, r3
 800d1ea:	f1b8 0f00 	cmp.w	r8, #0
 800d1ee:	d019      	beq.n	800d224 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x54>
 800d1f0:	2500      	movs	r5, #0
 800d1f2:	f00a f903 	bl	80173fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	6843      	ldr	r3, [r0, #4]
 800d1fa:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800d1fe:	4631      	mov	r1, r6
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d206:	4798      	blx	r3
 800d208:	2804      	cmp	r0, #4
 800d20a:	4601      	mov	r1, r0
 800d20c:	4604      	mov	r4, r0
 800d20e:	bf28      	it	cs
 800d210:	2104      	movcs	r1, #4
 800d212:	4630      	mov	r0, r6
 800d214:	f001 fa62 	bl	800e6dc <ucdr_alignment>
 800d218:	3501      	adds	r5, #1
 800d21a:	4434      	add	r4, r6
 800d21c:	45a8      	cmp	r8, r5
 800d21e:	eb00 0604 	add.w	r6, r0, r4
 800d222:	d1e6      	bne.n	800d1f2 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800d224:	2104      	movs	r1, #4
 800d226:	4630      	mov	r0, r6
 800d228:	f001 fa58 	bl	800e6dc <ucdr_alignment>
 800d22c:	f1c9 0904 	rsb	r9, r9, #4
 800d230:	44b1      	add	r9, r6
 800d232:	4448      	add	r0, r9
 800d234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d238 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d238:	b108      	cbz	r0, 800d23e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800d23a:	f7ff bfc9 	b.w	800d1d0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d23e:	4770      	bx	lr

0800d240 <_MultiArrayLayout__get_serialized_size>:
 800d240:	b110      	cbz	r0, 800d248 <_MultiArrayLayout__get_serialized_size+0x8>
 800d242:	2100      	movs	r1, #0
 800d244:	f7ff bfc4 	b.w	800d1d0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop

0800d24c <_MultiArrayLayout__cdr_serialize>:
 800d24c:	b308      	cbz	r0, 800d292 <_MultiArrayLayout__cdr_serialize+0x46>
 800d24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d250:	6847      	ldr	r7, [r0, #4]
 800d252:	460e      	mov	r6, r1
 800d254:	4605      	mov	r5, r0
 800d256:	4608      	mov	r0, r1
 800d258:	4639      	mov	r1, r7
 800d25a:	f000 fa73 	bl	800d744 <ucdr_serialize_uint32_t>
 800d25e:	b190      	cbz	r0, 800d286 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d260:	b18f      	cbz	r7, 800d286 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d262:	2400      	movs	r4, #0
 800d264:	e002      	b.n	800d26c <_MultiArrayLayout__cdr_serialize+0x20>
 800d266:	3401      	adds	r4, #1
 800d268:	42a7      	cmp	r7, r4
 800d26a:	d00c      	beq.n	800d286 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d26c:	f00a f8c6 	bl	80173fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d270:	6841      	ldr	r1, [r0, #4]
 800d272:	6828      	ldr	r0, [r5, #0]
 800d274:	688a      	ldr	r2, [r1, #8]
 800d276:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800d27a:	4631      	mov	r1, r6
 800d27c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d280:	4790      	blx	r2
 800d282:	2800      	cmp	r0, #0
 800d284:	d1ef      	bne.n	800d266 <_MultiArrayLayout__cdr_serialize+0x1a>
 800d286:	68e9      	ldr	r1, [r5, #12]
 800d288:	4630      	mov	r0, r6
 800d28a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d28e:	f000 ba59 	b.w	800d744 <ucdr_serialize_uint32_t>
 800d292:	4770      	bx	lr

0800d294 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d294:	b508      	push	{r3, lr}
 800d296:	4603      	mov	r3, r0
 800d298:	2200      	movs	r2, #0
 800d29a:	4608      	mov	r0, r1
 800d29c:	701a      	strb	r2, [r3, #0]
 800d29e:	2104      	movs	r1, #4
 800d2a0:	f001 fa1c 	bl	800e6dc <ucdr_alignment>
 800d2a4:	3004      	adds	r0, #4
 800d2a6:	bd08      	pop	{r3, pc}

0800d2a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800d2a8:	4800      	ldr	r0, [pc, #0]	@ (800d2ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800d2aa:	4770      	bx	lr
 800d2ac:	20000290 	.word	0x20000290

0800d2b0 <ucdr_serialize_bool>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	2101      	movs	r1, #1
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	f001 f9c4 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d2bc:	b148      	cbz	r0, 800d2d2 <ucdr_serialize_bool+0x22>
 800d2be:	68a3      	ldr	r3, [r4, #8]
 800d2c0:	701d      	strb	r5, [r3, #0]
 800d2c2:	68a2      	ldr	r2, [r4, #8]
 800d2c4:	6923      	ldr	r3, [r4, #16]
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	440a      	add	r2, r1
 800d2ca:	440b      	add	r3, r1
 800d2cc:	60a2      	str	r2, [r4, #8]
 800d2ce:	6123      	str	r3, [r4, #16]
 800d2d0:	7561      	strb	r1, [r4, #21]
 800d2d2:	7da0      	ldrb	r0, [r4, #22]
 800d2d4:	f080 0001 	eor.w	r0, r0, #1
 800d2d8:	bd38      	pop	{r3, r4, r5, pc}
 800d2da:	bf00      	nop

0800d2dc <ucdr_deserialize_bool>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	460d      	mov	r5, r1
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	f001 f9ae 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d2e8:	b160      	cbz	r0, 800d304 <ucdr_deserialize_bool+0x28>
 800d2ea:	68a2      	ldr	r2, [r4, #8]
 800d2ec:	6923      	ldr	r3, [r4, #16]
 800d2ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d2f2:	3900      	subs	r1, #0
 800d2f4:	bf18      	it	ne
 800d2f6:	2101      	movne	r1, #1
 800d2f8:	7029      	strb	r1, [r5, #0]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	2101      	movs	r1, #1
 800d2fe:	60a2      	str	r2, [r4, #8]
 800d300:	6123      	str	r3, [r4, #16]
 800d302:	7561      	strb	r1, [r4, #21]
 800d304:	7da0      	ldrb	r0, [r4, #22]
 800d306:	f080 0001 	eor.w	r0, r0, #1
 800d30a:	bd38      	pop	{r3, r4, r5, pc}

0800d30c <ucdr_serialize_uint8_t>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	460d      	mov	r5, r1
 800d310:	2101      	movs	r1, #1
 800d312:	4604      	mov	r4, r0
 800d314:	f001 f996 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d318:	b148      	cbz	r0, 800d32e <ucdr_serialize_uint8_t+0x22>
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	701d      	strb	r5, [r3, #0]
 800d31e:	68a2      	ldr	r2, [r4, #8]
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	2101      	movs	r1, #1
 800d324:	440a      	add	r2, r1
 800d326:	440b      	add	r3, r1
 800d328:	60a2      	str	r2, [r4, #8]
 800d32a:	6123      	str	r3, [r4, #16]
 800d32c:	7561      	strb	r1, [r4, #21]
 800d32e:	7da0      	ldrb	r0, [r4, #22]
 800d330:	f080 0001 	eor.w	r0, r0, #1
 800d334:	bd38      	pop	{r3, r4, r5, pc}
 800d336:	bf00      	nop

0800d338 <ucdr_deserialize_uint8_t>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	460d      	mov	r5, r1
 800d33c:	2101      	movs	r1, #1
 800d33e:	4604      	mov	r4, r0
 800d340:	f001 f980 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d344:	b150      	cbz	r0, 800d35c <ucdr_deserialize_uint8_t+0x24>
 800d346:	68a3      	ldr	r3, [r4, #8]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	702b      	strb	r3, [r5, #0]
 800d34c:	68a2      	ldr	r2, [r4, #8]
 800d34e:	6923      	ldr	r3, [r4, #16]
 800d350:	2101      	movs	r1, #1
 800d352:	440a      	add	r2, r1
 800d354:	440b      	add	r3, r1
 800d356:	60a2      	str	r2, [r4, #8]
 800d358:	6123      	str	r3, [r4, #16]
 800d35a:	7561      	strb	r1, [r4, #21]
 800d35c:	7da0      	ldrb	r0, [r4, #22]
 800d35e:	f080 0001 	eor.w	r0, r0, #1
 800d362:	bd38      	pop	{r3, r4, r5, pc}

0800d364 <ucdr_serialize_uint16_t>:
 800d364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d368:	b082      	sub	sp, #8
 800d36a:	460b      	mov	r3, r1
 800d36c:	2102      	movs	r1, #2
 800d36e:	4604      	mov	r4, r0
 800d370:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d374:	f001 f9ba 	bl	800e6ec <ucdr_buffer_alignment>
 800d378:	4601      	mov	r1, r0
 800d37a:	4620      	mov	r0, r4
 800d37c:	7d67      	ldrb	r7, [r4, #21]
 800d37e:	f001 f9f9 	bl	800e774 <ucdr_advance_buffer>
 800d382:	2102      	movs	r1, #2
 800d384:	4620      	mov	r0, r4
 800d386:	f001 f951 	bl	800e62c <ucdr_check_buffer_available_for>
 800d38a:	b1c0      	cbz	r0, 800d3be <ucdr_serialize_uint16_t+0x5a>
 800d38c:	7d22      	ldrb	r2, [r4, #20]
 800d38e:	68a3      	ldr	r3, [r4, #8]
 800d390:	2a01      	cmp	r2, #1
 800d392:	d04e      	beq.n	800d432 <ucdr_serialize_uint16_t+0xce>
 800d394:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	68a3      	ldr	r3, [r4, #8]
 800d39c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3a0:	705a      	strb	r2, [r3, #1]
 800d3a2:	68a2      	ldr	r2, [r4, #8]
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	3202      	adds	r2, #2
 800d3a8:	3302      	adds	r3, #2
 800d3aa:	2102      	movs	r1, #2
 800d3ac:	60a2      	str	r2, [r4, #8]
 800d3ae:	6123      	str	r3, [r4, #16]
 800d3b0:	7561      	strb	r1, [r4, #21]
 800d3b2:	7da0      	ldrb	r0, [r4, #22]
 800d3b4:	f080 0001 	eor.w	r0, r0, #1
 800d3b8:	b002      	add	sp, #8
 800d3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d3c2:	42ab      	cmp	r3, r5
 800d3c4:	d923      	bls.n	800d40e <ucdr_serialize_uint16_t+0xaa>
 800d3c6:	1b5e      	subs	r6, r3, r5
 800d3c8:	60a3      	str	r3, [r4, #8]
 800d3ca:	6923      	ldr	r3, [r4, #16]
 800d3cc:	f1c6 0802 	rsb	r8, r6, #2
 800d3d0:	4433      	add	r3, r6
 800d3d2:	6123      	str	r3, [r4, #16]
 800d3d4:	4641      	mov	r1, r8
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f001 f934 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d3dc:	b368      	cbz	r0, 800d43a <ucdr_serialize_uint16_t+0xd6>
 800d3de:	7d23      	ldrb	r3, [r4, #20]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d03b      	beq.n	800d45c <ucdr_serialize_uint16_t+0xf8>
 800d3e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d3e8:	702b      	strb	r3, [r5, #0]
 800d3ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d3ee:	706b      	strb	r3, [r5, #1]
 800d3f0:	6923      	ldr	r3, [r4, #16]
 800d3f2:	68a2      	ldr	r2, [r4, #8]
 800d3f4:	7da0      	ldrb	r0, [r4, #22]
 800d3f6:	3302      	adds	r3, #2
 800d3f8:	4442      	add	r2, r8
 800d3fa:	1b9b      	subs	r3, r3, r6
 800d3fc:	2102      	movs	r1, #2
 800d3fe:	f080 0001 	eor.w	r0, r0, #1
 800d402:	60a2      	str	r2, [r4, #8]
 800d404:	6123      	str	r3, [r4, #16]
 800d406:	7561      	strb	r1, [r4, #21]
 800d408:	b002      	add	sp, #8
 800d40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40e:	2102      	movs	r1, #2
 800d410:	4620      	mov	r0, r4
 800d412:	f001 f917 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d416:	2800      	cmp	r0, #0
 800d418:	d0cb      	beq.n	800d3b2 <ucdr_serialize_uint16_t+0x4e>
 800d41a:	7d23      	ldrb	r3, [r4, #20]
 800d41c:	68a2      	ldr	r2, [r4, #8]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d018      	beq.n	800d454 <ucdr_serialize_uint16_t+0xf0>
 800d422:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d426:	7013      	strb	r3, [r2, #0]
 800d428:	68a3      	ldr	r3, [r4, #8]
 800d42a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d42e:	705a      	strb	r2, [r3, #1]
 800d430:	e7b7      	b.n	800d3a2 <ucdr_serialize_uint16_t+0x3e>
 800d432:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d436:	801a      	strh	r2, [r3, #0]
 800d438:	e7b3      	b.n	800d3a2 <ucdr_serialize_uint16_t+0x3e>
 800d43a:	68a2      	ldr	r2, [r4, #8]
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	7da0      	ldrb	r0, [r4, #22]
 800d440:	7567      	strb	r7, [r4, #21]
 800d442:	1b92      	subs	r2, r2, r6
 800d444:	1b9b      	subs	r3, r3, r6
 800d446:	f080 0001 	eor.w	r0, r0, #1
 800d44a:	60a2      	str	r2, [r4, #8]
 800d44c:	6123      	str	r3, [r4, #16]
 800d44e:	b002      	add	sp, #8
 800d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d454:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d458:	8013      	strh	r3, [r2, #0]
 800d45a:	e7a2      	b.n	800d3a2 <ucdr_serialize_uint16_t+0x3e>
 800d45c:	4628      	mov	r0, r5
 800d45e:	f10d 0506 	add.w	r5, sp, #6
 800d462:	4632      	mov	r2, r6
 800d464:	4629      	mov	r1, r5
 800d466:	f00c fdc4 	bl	8019ff2 <memcpy>
 800d46a:	68a0      	ldr	r0, [r4, #8]
 800d46c:	4642      	mov	r2, r8
 800d46e:	19a9      	adds	r1, r5, r6
 800d470:	f00c fdbf 	bl	8019ff2 <memcpy>
 800d474:	e7bc      	b.n	800d3f0 <ucdr_serialize_uint16_t+0x8c>
 800d476:	bf00      	nop

0800d478 <ucdr_serialize_endian_uint16_t>:
 800d478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d47c:	b083      	sub	sp, #12
 800d47e:	460d      	mov	r5, r1
 800d480:	2102      	movs	r1, #2
 800d482:	4604      	mov	r4, r0
 800d484:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d488:	f001 f930 	bl	800e6ec <ucdr_buffer_alignment>
 800d48c:	4601      	mov	r1, r0
 800d48e:	4620      	mov	r0, r4
 800d490:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d494:	f001 f96e 	bl	800e774 <ucdr_advance_buffer>
 800d498:	2102      	movs	r1, #2
 800d49a:	4620      	mov	r0, r4
 800d49c:	f001 f8c6 	bl	800e62c <ucdr_check_buffer_available_for>
 800d4a0:	bb60      	cbnz	r0, 800d4fc <ucdr_serialize_endian_uint16_t+0x84>
 800d4a2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d4a6:	42be      	cmp	r6, r7
 800d4a8:	d923      	bls.n	800d4f2 <ucdr_serialize_endian_uint16_t+0x7a>
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	60a6      	str	r6, [r4, #8]
 800d4ae:	1bf6      	subs	r6, r6, r7
 800d4b0:	4433      	add	r3, r6
 800d4b2:	f1c6 0902 	rsb	r9, r6, #2
 800d4b6:	6123      	str	r3, [r4, #16]
 800d4b8:	4649      	mov	r1, r9
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f001 f8c2 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d037      	beq.n	800d534 <ucdr_serialize_endian_uint16_t+0xbc>
 800d4c4:	2d01      	cmp	r5, #1
 800d4c6:	d043      	beq.n	800d550 <ucdr_serialize_endian_uint16_t+0xd8>
 800d4c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4cc:	703b      	strb	r3, [r7, #0]
 800d4ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4d2:	707b      	strb	r3, [r7, #1]
 800d4d4:	6923      	ldr	r3, [r4, #16]
 800d4d6:	68a2      	ldr	r2, [r4, #8]
 800d4d8:	7da0      	ldrb	r0, [r4, #22]
 800d4da:	3302      	adds	r3, #2
 800d4dc:	444a      	add	r2, r9
 800d4de:	1b9b      	subs	r3, r3, r6
 800d4e0:	2102      	movs	r1, #2
 800d4e2:	f080 0001 	eor.w	r0, r0, #1
 800d4e6:	60a2      	str	r2, [r4, #8]
 800d4e8:	6123      	str	r3, [r4, #16]
 800d4ea:	7561      	strb	r1, [r4, #21]
 800d4ec:	b003      	add	sp, #12
 800d4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4f2:	2102      	movs	r1, #2
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f001 f8a5 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d4fa:	b188      	cbz	r0, 800d520 <ucdr_serialize_endian_uint16_t+0xa8>
 800d4fc:	2d01      	cmp	r5, #1
 800d4fe:	68a3      	ldr	r3, [r4, #8]
 800d500:	d014      	beq.n	800d52c <ucdr_serialize_endian_uint16_t+0xb4>
 800d502:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d50e:	705a      	strb	r2, [r3, #1]
 800d510:	68a2      	ldr	r2, [r4, #8]
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	3202      	adds	r2, #2
 800d516:	3302      	adds	r3, #2
 800d518:	2102      	movs	r1, #2
 800d51a:	60a2      	str	r2, [r4, #8]
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	7561      	strb	r1, [r4, #21]
 800d520:	7da0      	ldrb	r0, [r4, #22]
 800d522:	f080 0001 	eor.w	r0, r0, #1
 800d526:	b003      	add	sp, #12
 800d528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d52c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d530:	801a      	strh	r2, [r3, #0]
 800d532:	e7ed      	b.n	800d510 <ucdr_serialize_endian_uint16_t+0x98>
 800d534:	68a2      	ldr	r2, [r4, #8]
 800d536:	6923      	ldr	r3, [r4, #16]
 800d538:	7da0      	ldrb	r0, [r4, #22]
 800d53a:	f884 8015 	strb.w	r8, [r4, #21]
 800d53e:	1b92      	subs	r2, r2, r6
 800d540:	1b9b      	subs	r3, r3, r6
 800d542:	f080 0001 	eor.w	r0, r0, #1
 800d546:	60a2      	str	r2, [r4, #8]
 800d548:	6123      	str	r3, [r4, #16]
 800d54a:	b003      	add	sp, #12
 800d54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d550:	f10d 0506 	add.w	r5, sp, #6
 800d554:	4632      	mov	r2, r6
 800d556:	4629      	mov	r1, r5
 800d558:	4638      	mov	r0, r7
 800d55a:	f00c fd4a 	bl	8019ff2 <memcpy>
 800d55e:	68a0      	ldr	r0, [r4, #8]
 800d560:	464a      	mov	r2, r9
 800d562:	19a9      	adds	r1, r5, r6
 800d564:	f00c fd45 	bl	8019ff2 <memcpy>
 800d568:	e7b4      	b.n	800d4d4 <ucdr_serialize_endian_uint16_t+0x5c>
 800d56a:	bf00      	nop

0800d56c <ucdr_deserialize_uint16_t>:
 800d56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d570:	460d      	mov	r5, r1
 800d572:	2102      	movs	r1, #2
 800d574:	4604      	mov	r4, r0
 800d576:	f001 f8b9 	bl	800e6ec <ucdr_buffer_alignment>
 800d57a:	4601      	mov	r1, r0
 800d57c:	4620      	mov	r0, r4
 800d57e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d582:	f001 f8f7 	bl	800e774 <ucdr_advance_buffer>
 800d586:	2102      	movs	r1, #2
 800d588:	4620      	mov	r0, r4
 800d58a:	f001 f84f 	bl	800e62c <ucdr_check_buffer_available_for>
 800d58e:	b1a8      	cbz	r0, 800d5bc <ucdr_deserialize_uint16_t+0x50>
 800d590:	7d22      	ldrb	r2, [r4, #20]
 800d592:	68a3      	ldr	r3, [r4, #8]
 800d594:	2a01      	cmp	r2, #1
 800d596:	d046      	beq.n	800d626 <ucdr_deserialize_uint16_t+0xba>
 800d598:	785b      	ldrb	r3, [r3, #1]
 800d59a:	702b      	strb	r3, [r5, #0]
 800d59c:	68a3      	ldr	r3, [r4, #8]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	706b      	strb	r3, [r5, #1]
 800d5a2:	68a2      	ldr	r2, [r4, #8]
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	3202      	adds	r2, #2
 800d5a8:	3302      	adds	r3, #2
 800d5aa:	2102      	movs	r1, #2
 800d5ac:	60a2      	str	r2, [r4, #8]
 800d5ae:	6123      	str	r3, [r4, #16]
 800d5b0:	7561      	strb	r1, [r4, #21]
 800d5b2:	7da0      	ldrb	r0, [r4, #22]
 800d5b4:	f080 0001 	eor.w	r0, r0, #1
 800d5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5bc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d5c0:	42be      	cmp	r6, r7
 800d5c2:	d920      	bls.n	800d606 <ucdr_deserialize_uint16_t+0x9a>
 800d5c4:	6923      	ldr	r3, [r4, #16]
 800d5c6:	60a6      	str	r6, [r4, #8]
 800d5c8:	1bf6      	subs	r6, r6, r7
 800d5ca:	4433      	add	r3, r6
 800d5cc:	f1c6 0902 	rsb	r9, r6, #2
 800d5d0:	6123      	str	r3, [r4, #16]
 800d5d2:	4649      	mov	r1, r9
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f001 f835 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d5da:	b338      	cbz	r0, 800d62c <ucdr_deserialize_uint16_t+0xc0>
 800d5dc:	7d23      	ldrb	r3, [r4, #20]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d034      	beq.n	800d64c <ucdr_deserialize_uint16_t+0xe0>
 800d5e2:	787b      	ldrb	r3, [r7, #1]
 800d5e4:	702b      	strb	r3, [r5, #0]
 800d5e6:	783b      	ldrb	r3, [r7, #0]
 800d5e8:	706b      	strb	r3, [r5, #1]
 800d5ea:	6923      	ldr	r3, [r4, #16]
 800d5ec:	68a2      	ldr	r2, [r4, #8]
 800d5ee:	7da0      	ldrb	r0, [r4, #22]
 800d5f0:	2102      	movs	r1, #2
 800d5f2:	3302      	adds	r3, #2
 800d5f4:	444a      	add	r2, r9
 800d5f6:	1b9b      	subs	r3, r3, r6
 800d5f8:	7561      	strb	r1, [r4, #21]
 800d5fa:	60a2      	str	r2, [r4, #8]
 800d5fc:	6123      	str	r3, [r4, #16]
 800d5fe:	f080 0001 	eor.w	r0, r0, #1
 800d602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d606:	2102      	movs	r1, #2
 800d608:	4620      	mov	r0, r4
 800d60a:	f001 f81b 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d0cf      	beq.n	800d5b2 <ucdr_deserialize_uint16_t+0x46>
 800d612:	7d23      	ldrb	r3, [r4, #20]
 800d614:	68a2      	ldr	r2, [r4, #8]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d015      	beq.n	800d646 <ucdr_deserialize_uint16_t+0xda>
 800d61a:	7853      	ldrb	r3, [r2, #1]
 800d61c:	702b      	strb	r3, [r5, #0]
 800d61e:	68a3      	ldr	r3, [r4, #8]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	706b      	strb	r3, [r5, #1]
 800d624:	e7bd      	b.n	800d5a2 <ucdr_deserialize_uint16_t+0x36>
 800d626:	881b      	ldrh	r3, [r3, #0]
 800d628:	802b      	strh	r3, [r5, #0]
 800d62a:	e7ba      	b.n	800d5a2 <ucdr_deserialize_uint16_t+0x36>
 800d62c:	68a2      	ldr	r2, [r4, #8]
 800d62e:	6923      	ldr	r3, [r4, #16]
 800d630:	7da0      	ldrb	r0, [r4, #22]
 800d632:	f884 8015 	strb.w	r8, [r4, #21]
 800d636:	1b92      	subs	r2, r2, r6
 800d638:	1b9b      	subs	r3, r3, r6
 800d63a:	60a2      	str	r2, [r4, #8]
 800d63c:	6123      	str	r3, [r4, #16]
 800d63e:	f080 0001 	eor.w	r0, r0, #1
 800d642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d646:	8813      	ldrh	r3, [r2, #0]
 800d648:	802b      	strh	r3, [r5, #0]
 800d64a:	e7aa      	b.n	800d5a2 <ucdr_deserialize_uint16_t+0x36>
 800d64c:	4639      	mov	r1, r7
 800d64e:	4632      	mov	r2, r6
 800d650:	4628      	mov	r0, r5
 800d652:	f00c fcce 	bl	8019ff2 <memcpy>
 800d656:	68a1      	ldr	r1, [r4, #8]
 800d658:	464a      	mov	r2, r9
 800d65a:	19a8      	adds	r0, r5, r6
 800d65c:	f00c fcc9 	bl	8019ff2 <memcpy>
 800d660:	e7c3      	b.n	800d5ea <ucdr_deserialize_uint16_t+0x7e>
 800d662:	bf00      	nop

0800d664 <ucdr_deserialize_endian_uint16_t>:
 800d664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d668:	460e      	mov	r6, r1
 800d66a:	2102      	movs	r1, #2
 800d66c:	4604      	mov	r4, r0
 800d66e:	4615      	mov	r5, r2
 800d670:	f001 f83c 	bl	800e6ec <ucdr_buffer_alignment>
 800d674:	4601      	mov	r1, r0
 800d676:	4620      	mov	r0, r4
 800d678:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d67c:	f001 f87a 	bl	800e774 <ucdr_advance_buffer>
 800d680:	2102      	movs	r1, #2
 800d682:	4620      	mov	r0, r4
 800d684:	f000 ffd2 	bl	800e62c <ucdr_check_buffer_available_for>
 800d688:	bb60      	cbnz	r0, 800d6e4 <ucdr_deserialize_endian_uint16_t+0x80>
 800d68a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d68e:	4547      	cmp	r7, r8
 800d690:	d923      	bls.n	800d6da <ucdr_deserialize_endian_uint16_t+0x76>
 800d692:	6923      	ldr	r3, [r4, #16]
 800d694:	60a7      	str	r7, [r4, #8]
 800d696:	eba7 0708 	sub.w	r7, r7, r8
 800d69a:	443b      	add	r3, r7
 800d69c:	f1c7 0a02 	rsb	sl, r7, #2
 800d6a0:	6123      	str	r3, [r4, #16]
 800d6a2:	4651      	mov	r1, sl
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f000 ffcd 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d032      	beq.n	800d714 <ucdr_deserialize_endian_uint16_t+0xb0>
 800d6ae:	2e01      	cmp	r6, #1
 800d6b0:	d03d      	beq.n	800d72e <ucdr_deserialize_endian_uint16_t+0xca>
 800d6b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d6b6:	702b      	strb	r3, [r5, #0]
 800d6b8:	f898 3000 	ldrb.w	r3, [r8]
 800d6bc:	706b      	strb	r3, [r5, #1]
 800d6be:	6923      	ldr	r3, [r4, #16]
 800d6c0:	68a2      	ldr	r2, [r4, #8]
 800d6c2:	7da0      	ldrb	r0, [r4, #22]
 800d6c4:	2102      	movs	r1, #2
 800d6c6:	3302      	adds	r3, #2
 800d6c8:	4452      	add	r2, sl
 800d6ca:	1bdb      	subs	r3, r3, r7
 800d6cc:	7561      	strb	r1, [r4, #21]
 800d6ce:	60a2      	str	r2, [r4, #8]
 800d6d0:	6123      	str	r3, [r4, #16]
 800d6d2:	f080 0001 	eor.w	r0, r0, #1
 800d6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6da:	2102      	movs	r1, #2
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f000 ffb1 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d6e2:	b178      	cbz	r0, 800d704 <ucdr_deserialize_endian_uint16_t+0xa0>
 800d6e4:	2e01      	cmp	r6, #1
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	d011      	beq.n	800d70e <ucdr_deserialize_endian_uint16_t+0xaa>
 800d6ea:	785b      	ldrb	r3, [r3, #1]
 800d6ec:	702b      	strb	r3, [r5, #0]
 800d6ee:	68a3      	ldr	r3, [r4, #8]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	706b      	strb	r3, [r5, #1]
 800d6f4:	68a2      	ldr	r2, [r4, #8]
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	3202      	adds	r2, #2
 800d6fa:	3302      	adds	r3, #2
 800d6fc:	2102      	movs	r1, #2
 800d6fe:	60a2      	str	r2, [r4, #8]
 800d700:	6123      	str	r3, [r4, #16]
 800d702:	7561      	strb	r1, [r4, #21]
 800d704:	7da0      	ldrb	r0, [r4, #22]
 800d706:	f080 0001 	eor.w	r0, r0, #1
 800d70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	802b      	strh	r3, [r5, #0]
 800d712:	e7ef      	b.n	800d6f4 <ucdr_deserialize_endian_uint16_t+0x90>
 800d714:	68a2      	ldr	r2, [r4, #8]
 800d716:	6923      	ldr	r3, [r4, #16]
 800d718:	7da0      	ldrb	r0, [r4, #22]
 800d71a:	f884 9015 	strb.w	r9, [r4, #21]
 800d71e:	1bd2      	subs	r2, r2, r7
 800d720:	1bdb      	subs	r3, r3, r7
 800d722:	60a2      	str	r2, [r4, #8]
 800d724:	6123      	str	r3, [r4, #16]
 800d726:	f080 0001 	eor.w	r0, r0, #1
 800d72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72e:	4641      	mov	r1, r8
 800d730:	463a      	mov	r2, r7
 800d732:	4628      	mov	r0, r5
 800d734:	f00c fc5d 	bl	8019ff2 <memcpy>
 800d738:	68a1      	ldr	r1, [r4, #8]
 800d73a:	4652      	mov	r2, sl
 800d73c:	19e8      	adds	r0, r5, r7
 800d73e:	f00c fc58 	bl	8019ff2 <memcpy>
 800d742:	e7bc      	b.n	800d6be <ucdr_deserialize_endian_uint16_t+0x5a>

0800d744 <ucdr_serialize_uint32_t>:
 800d744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d748:	b082      	sub	sp, #8
 800d74a:	4604      	mov	r4, r0
 800d74c:	9101      	str	r1, [sp, #4]
 800d74e:	2104      	movs	r1, #4
 800d750:	f000 ffcc 	bl	800e6ec <ucdr_buffer_alignment>
 800d754:	4601      	mov	r1, r0
 800d756:	4620      	mov	r0, r4
 800d758:	7d67      	ldrb	r7, [r4, #21]
 800d75a:	f001 f80b 	bl	800e774 <ucdr_advance_buffer>
 800d75e:	2104      	movs	r1, #4
 800d760:	4620      	mov	r0, r4
 800d762:	f000 ff63 	bl	800e62c <ucdr_check_buffer_available_for>
 800d766:	b300      	cbz	r0, 800d7aa <ucdr_serialize_uint32_t+0x66>
 800d768:	7d22      	ldrb	r2, [r4, #20]
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	2a01      	cmp	r2, #1
 800d76e:	d05d      	beq.n	800d82c <ucdr_serialize_uint32_t+0xe8>
 800d770:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d774:	701a      	strb	r2, [r3, #0]
 800d776:	68a3      	ldr	r3, [r4, #8]
 800d778:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d77c:	705a      	strb	r2, [r3, #1]
 800d77e:	68a3      	ldr	r3, [r4, #8]
 800d780:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d784:	709a      	strb	r2, [r3, #2]
 800d786:	68a3      	ldr	r3, [r4, #8]
 800d788:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d78c:	70da      	strb	r2, [r3, #3]
 800d78e:	68a2      	ldr	r2, [r4, #8]
 800d790:	6923      	ldr	r3, [r4, #16]
 800d792:	3204      	adds	r2, #4
 800d794:	3304      	adds	r3, #4
 800d796:	2104      	movs	r1, #4
 800d798:	60a2      	str	r2, [r4, #8]
 800d79a:	6123      	str	r3, [r4, #16]
 800d79c:	7561      	strb	r1, [r4, #21]
 800d79e:	7da0      	ldrb	r0, [r4, #22]
 800d7a0:	f080 0001 	eor.w	r0, r0, #1
 800d7a4:	b002      	add	sp, #8
 800d7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7aa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7ae:	42ab      	cmp	r3, r5
 800d7b0:	d92e      	bls.n	800d810 <ucdr_serialize_uint32_t+0xcc>
 800d7b2:	1b5e      	subs	r6, r3, r5
 800d7b4:	60a3      	str	r3, [r4, #8]
 800d7b6:	6923      	ldr	r3, [r4, #16]
 800d7b8:	f1c6 0804 	rsb	r8, r6, #4
 800d7bc:	4433      	add	r3, r6
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	4641      	mov	r1, r8
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f000 ff3e 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d7c8:	b398      	cbz	r0, 800d832 <ucdr_serialize_uint32_t+0xee>
 800d7ca:	7d23      	ldrb	r3, [r4, #20]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d046      	beq.n	800d85e <ucdr_serialize_uint32_t+0x11a>
 800d7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d7d4:	702b      	strb	r3, [r5, #0]
 800d7d6:	2e01      	cmp	r6, #1
 800d7d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7dc:	706b      	strb	r3, [r5, #1]
 800d7de:	d035      	beq.n	800d84c <ucdr_serialize_uint32_t+0x108>
 800d7e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d7e4:	70ab      	strb	r3, [r5, #2]
 800d7e6:	2e02      	cmp	r6, #2
 800d7e8:	d034      	beq.n	800d854 <ucdr_serialize_uint32_t+0x110>
 800d7ea:	3503      	adds	r5, #3
 800d7ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d7f0:	702b      	strb	r3, [r5, #0]
 800d7f2:	6923      	ldr	r3, [r4, #16]
 800d7f4:	68a2      	ldr	r2, [r4, #8]
 800d7f6:	7da0      	ldrb	r0, [r4, #22]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	4442      	add	r2, r8
 800d7fc:	1b9b      	subs	r3, r3, r6
 800d7fe:	2104      	movs	r1, #4
 800d800:	f080 0001 	eor.w	r0, r0, #1
 800d804:	60a2      	str	r2, [r4, #8]
 800d806:	6123      	str	r3, [r4, #16]
 800d808:	7561      	strb	r1, [r4, #21]
 800d80a:	b002      	add	sp, #8
 800d80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d810:	2104      	movs	r1, #4
 800d812:	4620      	mov	r0, r4
 800d814:	f000 ff16 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d818:	2800      	cmp	r0, #0
 800d81a:	d0c0      	beq.n	800d79e <ucdr_serialize_uint32_t+0x5a>
 800d81c:	7d23      	ldrb	r3, [r4, #20]
 800d81e:	68a2      	ldr	r2, [r4, #8]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d019      	beq.n	800d858 <ucdr_serialize_uint32_t+0x114>
 800d824:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d828:	7013      	strb	r3, [r2, #0]
 800d82a:	e7a4      	b.n	800d776 <ucdr_serialize_uint32_t+0x32>
 800d82c:	9a01      	ldr	r2, [sp, #4]
 800d82e:	601a      	str	r2, [r3, #0]
 800d830:	e7ad      	b.n	800d78e <ucdr_serialize_uint32_t+0x4a>
 800d832:	68a2      	ldr	r2, [r4, #8]
 800d834:	6923      	ldr	r3, [r4, #16]
 800d836:	7da0      	ldrb	r0, [r4, #22]
 800d838:	7567      	strb	r7, [r4, #21]
 800d83a:	1b92      	subs	r2, r2, r6
 800d83c:	1b9b      	subs	r3, r3, r6
 800d83e:	f080 0001 	eor.w	r0, r0, #1
 800d842:	60a2      	str	r2, [r4, #8]
 800d844:	6123      	str	r3, [r4, #16]
 800d846:	b002      	add	sp, #8
 800d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d84c:	68a3      	ldr	r3, [r4, #8]
 800d84e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d852:	701a      	strb	r2, [r3, #0]
 800d854:	68a5      	ldr	r5, [r4, #8]
 800d856:	e7c9      	b.n	800d7ec <ucdr_serialize_uint32_t+0xa8>
 800d858:	9b01      	ldr	r3, [sp, #4]
 800d85a:	6013      	str	r3, [r2, #0]
 800d85c:	e797      	b.n	800d78e <ucdr_serialize_uint32_t+0x4a>
 800d85e:	4628      	mov	r0, r5
 800d860:	ad01      	add	r5, sp, #4
 800d862:	4632      	mov	r2, r6
 800d864:	4629      	mov	r1, r5
 800d866:	f00c fbc4 	bl	8019ff2 <memcpy>
 800d86a:	68a0      	ldr	r0, [r4, #8]
 800d86c:	4642      	mov	r2, r8
 800d86e:	19a9      	adds	r1, r5, r6
 800d870:	f00c fbbf 	bl	8019ff2 <memcpy>
 800d874:	e7bd      	b.n	800d7f2 <ucdr_serialize_uint32_t+0xae>
 800d876:	bf00      	nop

0800d878 <ucdr_serialize_endian_uint32_t>:
 800d878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d87c:	b083      	sub	sp, #12
 800d87e:	460d      	mov	r5, r1
 800d880:	2104      	movs	r1, #4
 800d882:	4604      	mov	r4, r0
 800d884:	9201      	str	r2, [sp, #4]
 800d886:	f000 ff31 	bl	800e6ec <ucdr_buffer_alignment>
 800d88a:	4601      	mov	r1, r0
 800d88c:	4620      	mov	r0, r4
 800d88e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d892:	f000 ff6f 	bl	800e774 <ucdr_advance_buffer>
 800d896:	2104      	movs	r1, #4
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 fec7 	bl	800e62c <ucdr_check_buffer_available_for>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d137      	bne.n	800d912 <ucdr_serialize_endian_uint32_t+0x9a>
 800d8a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d8a6:	42b7      	cmp	r7, r6
 800d8a8:	d92e      	bls.n	800d908 <ucdr_serialize_endian_uint32_t+0x90>
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	60a7      	str	r7, [r4, #8]
 800d8ae:	1bbf      	subs	r7, r7, r6
 800d8b0:	443b      	add	r3, r7
 800d8b2:	f1c7 0904 	rsb	r9, r7, #4
 800d8b6:	6123      	str	r3, [r4, #16]
 800d8b8:	4649      	mov	r1, r9
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f000 fec2 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d049      	beq.n	800d958 <ucdr_serialize_endian_uint32_t+0xe0>
 800d8c4:	2d01      	cmp	r5, #1
 800d8c6:	d05b      	beq.n	800d980 <ucdr_serialize_endian_uint32_t+0x108>
 800d8c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8cc:	7033      	strb	r3, [r6, #0]
 800d8ce:	2f01      	cmp	r7, #1
 800d8d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8d4:	7073      	strb	r3, [r6, #1]
 800d8d6:	d04d      	beq.n	800d974 <ucdr_serialize_endian_uint32_t+0xfc>
 800d8d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8dc:	70b3      	strb	r3, [r6, #2]
 800d8de:	2f02      	cmp	r7, #2
 800d8e0:	d04c      	beq.n	800d97c <ucdr_serialize_endian_uint32_t+0x104>
 800d8e2:	3603      	adds	r6, #3
 800d8e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8e8:	7033      	strb	r3, [r6, #0]
 800d8ea:	6923      	ldr	r3, [r4, #16]
 800d8ec:	68a2      	ldr	r2, [r4, #8]
 800d8ee:	7da0      	ldrb	r0, [r4, #22]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	444a      	add	r2, r9
 800d8f4:	1bdb      	subs	r3, r3, r7
 800d8f6:	2104      	movs	r1, #4
 800d8f8:	f080 0001 	eor.w	r0, r0, #1
 800d8fc:	60a2      	str	r2, [r4, #8]
 800d8fe:	6123      	str	r3, [r4, #16]
 800d900:	7561      	strb	r1, [r4, #21]
 800d902:	b003      	add	sp, #12
 800d904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d908:	2104      	movs	r1, #4
 800d90a:	4620      	mov	r0, r4
 800d90c:	f000 fe9a 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800d910:	b1c8      	cbz	r0, 800d946 <ucdr_serialize_endian_uint32_t+0xce>
 800d912:	2d01      	cmp	r5, #1
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	d01c      	beq.n	800d952 <ucdr_serialize_endian_uint32_t+0xda>
 800d918:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d91c:	701a      	strb	r2, [r3, #0]
 800d91e:	68a3      	ldr	r3, [r4, #8]
 800d920:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d924:	705a      	strb	r2, [r3, #1]
 800d926:	68a3      	ldr	r3, [r4, #8]
 800d928:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d92c:	709a      	strb	r2, [r3, #2]
 800d92e:	68a3      	ldr	r3, [r4, #8]
 800d930:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d934:	70da      	strb	r2, [r3, #3]
 800d936:	68a2      	ldr	r2, [r4, #8]
 800d938:	6923      	ldr	r3, [r4, #16]
 800d93a:	3204      	adds	r2, #4
 800d93c:	3304      	adds	r3, #4
 800d93e:	2104      	movs	r1, #4
 800d940:	60a2      	str	r2, [r4, #8]
 800d942:	6123      	str	r3, [r4, #16]
 800d944:	7561      	strb	r1, [r4, #21]
 800d946:	7da0      	ldrb	r0, [r4, #22]
 800d948:	f080 0001 	eor.w	r0, r0, #1
 800d94c:	b003      	add	sp, #12
 800d94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d952:	9a01      	ldr	r2, [sp, #4]
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	e7ee      	b.n	800d936 <ucdr_serialize_endian_uint32_t+0xbe>
 800d958:	68a2      	ldr	r2, [r4, #8]
 800d95a:	6923      	ldr	r3, [r4, #16]
 800d95c:	7da0      	ldrb	r0, [r4, #22]
 800d95e:	f884 8015 	strb.w	r8, [r4, #21]
 800d962:	1bd2      	subs	r2, r2, r7
 800d964:	1bdb      	subs	r3, r3, r7
 800d966:	f080 0001 	eor.w	r0, r0, #1
 800d96a:	60a2      	str	r2, [r4, #8]
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	b003      	add	sp, #12
 800d970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d974:	68a3      	ldr	r3, [r4, #8]
 800d976:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d97a:	701a      	strb	r2, [r3, #0]
 800d97c:	68a6      	ldr	r6, [r4, #8]
 800d97e:	e7b1      	b.n	800d8e4 <ucdr_serialize_endian_uint32_t+0x6c>
 800d980:	ad01      	add	r5, sp, #4
 800d982:	463a      	mov	r2, r7
 800d984:	4629      	mov	r1, r5
 800d986:	4630      	mov	r0, r6
 800d988:	f00c fb33 	bl	8019ff2 <memcpy>
 800d98c:	68a0      	ldr	r0, [r4, #8]
 800d98e:	464a      	mov	r2, r9
 800d990:	19e9      	adds	r1, r5, r7
 800d992:	f00c fb2e 	bl	8019ff2 <memcpy>
 800d996:	e7a8      	b.n	800d8ea <ucdr_serialize_endian_uint32_t+0x72>

0800d998 <ucdr_deserialize_uint32_t>:
 800d998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d99c:	460d      	mov	r5, r1
 800d99e:	2104      	movs	r1, #4
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	f000 fea3 	bl	800e6ec <ucdr_buffer_alignment>
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9ae:	f000 fee1 	bl	800e774 <ucdr_advance_buffer>
 800d9b2:	2104      	movs	r1, #4
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f000 fe39 	bl	800e62c <ucdr_check_buffer_available_for>
 800d9ba:	b1d8      	cbz	r0, 800d9f4 <ucdr_deserialize_uint32_t+0x5c>
 800d9bc:	7d22      	ldrb	r2, [r4, #20]
 800d9be:	68a3      	ldr	r3, [r4, #8]
 800d9c0:	2a01      	cmp	r2, #1
 800d9c2:	d052      	beq.n	800da6a <ucdr_deserialize_uint32_t+0xd2>
 800d9c4:	78db      	ldrb	r3, [r3, #3]
 800d9c6:	702b      	strb	r3, [r5, #0]
 800d9c8:	68a3      	ldr	r3, [r4, #8]
 800d9ca:	789b      	ldrb	r3, [r3, #2]
 800d9cc:	706b      	strb	r3, [r5, #1]
 800d9ce:	68a3      	ldr	r3, [r4, #8]
 800d9d0:	785b      	ldrb	r3, [r3, #1]
 800d9d2:	70ab      	strb	r3, [r5, #2]
 800d9d4:	68a3      	ldr	r3, [r4, #8]
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	70eb      	strb	r3, [r5, #3]
 800d9da:	68a2      	ldr	r2, [r4, #8]
 800d9dc:	6923      	ldr	r3, [r4, #16]
 800d9de:	3204      	adds	r2, #4
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	2104      	movs	r1, #4
 800d9e4:	60a2      	str	r2, [r4, #8]
 800d9e6:	6123      	str	r3, [r4, #16]
 800d9e8:	7561      	strb	r1, [r4, #21]
 800d9ea:	7da0      	ldrb	r0, [r4, #22]
 800d9ec:	f080 0001 	eor.w	r0, r0, #1
 800d9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9f4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d9f8:	42b7      	cmp	r7, r6
 800d9fa:	d92a      	bls.n	800da52 <ucdr_deserialize_uint32_t+0xba>
 800d9fc:	6923      	ldr	r3, [r4, #16]
 800d9fe:	60a7      	str	r7, [r4, #8]
 800da00:	1bbf      	subs	r7, r7, r6
 800da02:	443b      	add	r3, r7
 800da04:	f1c7 0904 	rsb	r9, r7, #4
 800da08:	6123      	str	r3, [r4, #16]
 800da0a:	4649      	mov	r1, r9
 800da0c:	4620      	mov	r0, r4
 800da0e:	f000 fe19 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800da12:	b368      	cbz	r0, 800da70 <ucdr_deserialize_uint32_t+0xd8>
 800da14:	7d23      	ldrb	r3, [r4, #20]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d040      	beq.n	800da9c <ucdr_deserialize_uint32_t+0x104>
 800da1a:	78f3      	ldrb	r3, [r6, #3]
 800da1c:	702b      	strb	r3, [r5, #0]
 800da1e:	78b3      	ldrb	r3, [r6, #2]
 800da20:	706b      	strb	r3, [r5, #1]
 800da22:	2f01      	cmp	r7, #1
 800da24:	d031      	beq.n	800da8a <ucdr_deserialize_uint32_t+0xf2>
 800da26:	7873      	ldrb	r3, [r6, #1]
 800da28:	70ab      	strb	r3, [r5, #2]
 800da2a:	2f02      	cmp	r7, #2
 800da2c:	f105 0503 	add.w	r5, r5, #3
 800da30:	d02f      	beq.n	800da92 <ucdr_deserialize_uint32_t+0xfa>
 800da32:	7833      	ldrb	r3, [r6, #0]
 800da34:	702b      	strb	r3, [r5, #0]
 800da36:	6923      	ldr	r3, [r4, #16]
 800da38:	68a2      	ldr	r2, [r4, #8]
 800da3a:	7da0      	ldrb	r0, [r4, #22]
 800da3c:	2104      	movs	r1, #4
 800da3e:	3304      	adds	r3, #4
 800da40:	444a      	add	r2, r9
 800da42:	1bdb      	subs	r3, r3, r7
 800da44:	7561      	strb	r1, [r4, #21]
 800da46:	60a2      	str	r2, [r4, #8]
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	f080 0001 	eor.w	r0, r0, #1
 800da4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da52:	2104      	movs	r1, #4
 800da54:	4620      	mov	r0, r4
 800da56:	f000 fdf5 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d0c5      	beq.n	800d9ea <ucdr_deserialize_uint32_t+0x52>
 800da5e:	7d23      	ldrb	r3, [r4, #20]
 800da60:	68a2      	ldr	r2, [r4, #8]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d017      	beq.n	800da96 <ucdr_deserialize_uint32_t+0xfe>
 800da66:	78d3      	ldrb	r3, [r2, #3]
 800da68:	e7ad      	b.n	800d9c6 <ucdr_deserialize_uint32_t+0x2e>
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	602b      	str	r3, [r5, #0]
 800da6e:	e7b4      	b.n	800d9da <ucdr_deserialize_uint32_t+0x42>
 800da70:	68a2      	ldr	r2, [r4, #8]
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	7da0      	ldrb	r0, [r4, #22]
 800da76:	f884 8015 	strb.w	r8, [r4, #21]
 800da7a:	1bd2      	subs	r2, r2, r7
 800da7c:	1bdb      	subs	r3, r3, r7
 800da7e:	60a2      	str	r2, [r4, #8]
 800da80:	6123      	str	r3, [r4, #16]
 800da82:	f080 0001 	eor.w	r0, r0, #1
 800da86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da8a:	68a3      	ldr	r3, [r4, #8]
 800da8c:	785b      	ldrb	r3, [r3, #1]
 800da8e:	70ab      	strb	r3, [r5, #2]
 800da90:	3503      	adds	r5, #3
 800da92:	68a6      	ldr	r6, [r4, #8]
 800da94:	e7cd      	b.n	800da32 <ucdr_deserialize_uint32_t+0x9a>
 800da96:	6813      	ldr	r3, [r2, #0]
 800da98:	602b      	str	r3, [r5, #0]
 800da9a:	e79e      	b.n	800d9da <ucdr_deserialize_uint32_t+0x42>
 800da9c:	4631      	mov	r1, r6
 800da9e:	463a      	mov	r2, r7
 800daa0:	4628      	mov	r0, r5
 800daa2:	f00c faa6 	bl	8019ff2 <memcpy>
 800daa6:	68a1      	ldr	r1, [r4, #8]
 800daa8:	464a      	mov	r2, r9
 800daaa:	19e8      	adds	r0, r5, r7
 800daac:	f00c faa1 	bl	8019ff2 <memcpy>
 800dab0:	e7c1      	b.n	800da36 <ucdr_deserialize_uint32_t+0x9e>
 800dab2:	bf00      	nop

0800dab4 <ucdr_deserialize_endian_uint32_t>:
 800dab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab8:	460e      	mov	r6, r1
 800daba:	2104      	movs	r1, #4
 800dabc:	4604      	mov	r4, r0
 800dabe:	4615      	mov	r5, r2
 800dac0:	f000 fe14 	bl	800e6ec <ucdr_buffer_alignment>
 800dac4:	4601      	mov	r1, r0
 800dac6:	4620      	mov	r0, r4
 800dac8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dacc:	f000 fe52 	bl	800e774 <ucdr_advance_buffer>
 800dad0:	2104      	movs	r1, #4
 800dad2:	4620      	mov	r0, r4
 800dad4:	f000 fdaa 	bl	800e62c <ucdr_check_buffer_available_for>
 800dad8:	2800      	cmp	r0, #0
 800dada:	d137      	bne.n	800db4c <ucdr_deserialize_endian_uint32_t+0x98>
 800dadc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800dae0:	42bb      	cmp	r3, r7
 800dae2:	d92e      	bls.n	800db42 <ucdr_deserialize_endian_uint32_t+0x8e>
 800dae4:	eba3 0807 	sub.w	r8, r3, r7
 800dae8:	60a3      	str	r3, [r4, #8]
 800daea:	6923      	ldr	r3, [r4, #16]
 800daec:	f1c8 0a04 	rsb	sl, r8, #4
 800daf0:	4443      	add	r3, r8
 800daf2:	6123      	str	r3, [r4, #16]
 800daf4:	4651      	mov	r1, sl
 800daf6:	4620      	mov	r0, r4
 800daf8:	f000 fda4 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d043      	beq.n	800db88 <ucdr_deserialize_endian_uint32_t+0xd4>
 800db00:	2e01      	cmp	r6, #1
 800db02:	d056      	beq.n	800dbb2 <ucdr_deserialize_endian_uint32_t+0xfe>
 800db04:	78fb      	ldrb	r3, [r7, #3]
 800db06:	702b      	strb	r3, [r5, #0]
 800db08:	78bb      	ldrb	r3, [r7, #2]
 800db0a:	706b      	strb	r3, [r5, #1]
 800db0c:	f1b8 0f01 	cmp.w	r8, #1
 800db10:	d049      	beq.n	800dba6 <ucdr_deserialize_endian_uint32_t+0xf2>
 800db12:	787b      	ldrb	r3, [r7, #1]
 800db14:	70ab      	strb	r3, [r5, #2]
 800db16:	f1b8 0f02 	cmp.w	r8, #2
 800db1a:	f105 0503 	add.w	r5, r5, #3
 800db1e:	d046      	beq.n	800dbae <ucdr_deserialize_endian_uint32_t+0xfa>
 800db20:	783b      	ldrb	r3, [r7, #0]
 800db22:	702b      	strb	r3, [r5, #0]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	68a2      	ldr	r2, [r4, #8]
 800db28:	7da0      	ldrb	r0, [r4, #22]
 800db2a:	2104      	movs	r1, #4
 800db2c:	3304      	adds	r3, #4
 800db2e:	4452      	add	r2, sl
 800db30:	eba3 0308 	sub.w	r3, r3, r8
 800db34:	7561      	strb	r1, [r4, #21]
 800db36:	60a2      	str	r2, [r4, #8]
 800db38:	6123      	str	r3, [r4, #16]
 800db3a:	f080 0001 	eor.w	r0, r0, #1
 800db3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db42:	2104      	movs	r1, #4
 800db44:	4620      	mov	r0, r4
 800db46:	f000 fd7d 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800db4a:	b1a8      	cbz	r0, 800db78 <ucdr_deserialize_endian_uint32_t+0xc4>
 800db4c:	2e01      	cmp	r6, #1
 800db4e:	68a3      	ldr	r3, [r4, #8]
 800db50:	d017      	beq.n	800db82 <ucdr_deserialize_endian_uint32_t+0xce>
 800db52:	78db      	ldrb	r3, [r3, #3]
 800db54:	702b      	strb	r3, [r5, #0]
 800db56:	68a3      	ldr	r3, [r4, #8]
 800db58:	789b      	ldrb	r3, [r3, #2]
 800db5a:	706b      	strb	r3, [r5, #1]
 800db5c:	68a3      	ldr	r3, [r4, #8]
 800db5e:	785b      	ldrb	r3, [r3, #1]
 800db60:	70ab      	strb	r3, [r5, #2]
 800db62:	68a3      	ldr	r3, [r4, #8]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	70eb      	strb	r3, [r5, #3]
 800db68:	68a2      	ldr	r2, [r4, #8]
 800db6a:	6923      	ldr	r3, [r4, #16]
 800db6c:	3204      	adds	r2, #4
 800db6e:	3304      	adds	r3, #4
 800db70:	2104      	movs	r1, #4
 800db72:	60a2      	str	r2, [r4, #8]
 800db74:	6123      	str	r3, [r4, #16]
 800db76:	7561      	strb	r1, [r4, #21]
 800db78:	7da0      	ldrb	r0, [r4, #22]
 800db7a:	f080 0001 	eor.w	r0, r0, #1
 800db7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	602b      	str	r3, [r5, #0]
 800db86:	e7ef      	b.n	800db68 <ucdr_deserialize_endian_uint32_t+0xb4>
 800db88:	68a2      	ldr	r2, [r4, #8]
 800db8a:	6923      	ldr	r3, [r4, #16]
 800db8c:	7da0      	ldrb	r0, [r4, #22]
 800db8e:	f884 9015 	strb.w	r9, [r4, #21]
 800db92:	eba2 0208 	sub.w	r2, r2, r8
 800db96:	eba3 0308 	sub.w	r3, r3, r8
 800db9a:	60a2      	str	r2, [r4, #8]
 800db9c:	6123      	str	r3, [r4, #16]
 800db9e:	f080 0001 	eor.w	r0, r0, #1
 800dba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba6:	68a3      	ldr	r3, [r4, #8]
 800dba8:	785b      	ldrb	r3, [r3, #1]
 800dbaa:	70ab      	strb	r3, [r5, #2]
 800dbac:	3503      	adds	r5, #3
 800dbae:	68a7      	ldr	r7, [r4, #8]
 800dbb0:	e7b6      	b.n	800db20 <ucdr_deserialize_endian_uint32_t+0x6c>
 800dbb2:	4639      	mov	r1, r7
 800dbb4:	4642      	mov	r2, r8
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	f00c fa1b 	bl	8019ff2 <memcpy>
 800dbbc:	68a1      	ldr	r1, [r4, #8]
 800dbbe:	4652      	mov	r2, sl
 800dbc0:	eb05 0008 	add.w	r0, r5, r8
 800dbc4:	f00c fa15 	bl	8019ff2 <memcpy>
 800dbc8:	e7ac      	b.n	800db24 <ucdr_deserialize_endian_uint32_t+0x70>
 800dbca:	bf00      	nop

0800dbcc <ucdr_serialize_uint64_t>:
 800dbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd0:	2108      	movs	r1, #8
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	e9cd 2300 	strd	r2, r3, [sp]
 800dbda:	f000 fd87 	bl	800e6ec <ucdr_buffer_alignment>
 800dbde:	4601      	mov	r1, r0
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	7d67      	ldrb	r7, [r4, #21]
 800dbe4:	f000 fdc6 	bl	800e774 <ucdr_advance_buffer>
 800dbe8:	2108      	movs	r1, #8
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 fd1e 	bl	800e62c <ucdr_check_buffer_available_for>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d14d      	bne.n	800dc90 <ucdr_serialize_uint64_t+0xc4>
 800dbf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dbf8:	42ab      	cmp	r3, r5
 800dbfa:	d944      	bls.n	800dc86 <ucdr_serialize_uint64_t+0xba>
 800dbfc:	1b5e      	subs	r6, r3, r5
 800dbfe:	60a3      	str	r3, [r4, #8]
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	f1c6 0808 	rsb	r8, r6, #8
 800dc06:	4433      	add	r3, r6
 800dc08:	6123      	str	r3, [r4, #16]
 800dc0a:	4641      	mov	r1, r8
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f000 fd19 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d072      	beq.n	800dcfc <ucdr_serialize_uint64_t+0x130>
 800dc16:	7d23      	ldrb	r3, [r4, #20]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	f000 8092 	beq.w	800dd42 <ucdr_serialize_uint64_t+0x176>
 800dc1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc22:	702b      	strb	r3, [r5, #0]
 800dc24:	2e01      	cmp	r6, #1
 800dc26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc2a:	706b      	strb	r3, [r5, #1]
 800dc2c:	d073      	beq.n	800dd16 <ucdr_serialize_uint64_t+0x14a>
 800dc2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dc32:	70ab      	strb	r3, [r5, #2]
 800dc34:	2e02      	cmp	r6, #2
 800dc36:	d072      	beq.n	800dd1e <ucdr_serialize_uint64_t+0x152>
 800dc38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dc3c:	70eb      	strb	r3, [r5, #3]
 800dc3e:	2e03      	cmp	r6, #3
 800dc40:	d071      	beq.n	800dd26 <ucdr_serialize_uint64_t+0x15a>
 800dc42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dc46:	712b      	strb	r3, [r5, #4]
 800dc48:	2e04      	cmp	r6, #4
 800dc4a:	d070      	beq.n	800dd2e <ucdr_serialize_uint64_t+0x162>
 800dc4c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dc50:	716b      	strb	r3, [r5, #5]
 800dc52:	2e05      	cmp	r6, #5
 800dc54:	d06f      	beq.n	800dd36 <ucdr_serialize_uint64_t+0x16a>
 800dc56:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dc5a:	71ab      	strb	r3, [r5, #6]
 800dc5c:	2e06      	cmp	r6, #6
 800dc5e:	d06e      	beq.n	800dd3e <ucdr_serialize_uint64_t+0x172>
 800dc60:	3507      	adds	r5, #7
 800dc62:	f89d 3000 	ldrb.w	r3, [sp]
 800dc66:	702b      	strb	r3, [r5, #0]
 800dc68:	6923      	ldr	r3, [r4, #16]
 800dc6a:	68a2      	ldr	r2, [r4, #8]
 800dc6c:	7da0      	ldrb	r0, [r4, #22]
 800dc6e:	3308      	adds	r3, #8
 800dc70:	4442      	add	r2, r8
 800dc72:	1b9b      	subs	r3, r3, r6
 800dc74:	2108      	movs	r1, #8
 800dc76:	f080 0001 	eor.w	r0, r0, #1
 800dc7a:	60a2      	str	r2, [r4, #8]
 800dc7c:	6123      	str	r3, [r4, #16]
 800dc7e:	7561      	strb	r1, [r4, #21]
 800dc80:	b002      	add	sp, #8
 800dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc86:	2108      	movs	r1, #8
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f000 fcdb 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800dc8e:	b350      	cbz	r0, 800dce6 <ucdr_serialize_uint64_t+0x11a>
 800dc90:	7d22      	ldrb	r2, [r4, #20]
 800dc92:	68a3      	ldr	r3, [r4, #8]
 800dc94:	2a01      	cmp	r2, #1
 800dc96:	d02c      	beq.n	800dcf2 <ucdr_serialize_uint64_t+0x126>
 800dc98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dc9c:	701a      	strb	r2, [r3, #0]
 800dc9e:	68a3      	ldr	r3, [r4, #8]
 800dca0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dca4:	705a      	strb	r2, [r3, #1]
 800dca6:	68a3      	ldr	r3, [r4, #8]
 800dca8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dcac:	709a      	strb	r2, [r3, #2]
 800dcae:	68a3      	ldr	r3, [r4, #8]
 800dcb0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dcb4:	70da      	strb	r2, [r3, #3]
 800dcb6:	68a3      	ldr	r3, [r4, #8]
 800dcb8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dcbc:	711a      	strb	r2, [r3, #4]
 800dcbe:	68a3      	ldr	r3, [r4, #8]
 800dcc0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dcc4:	715a      	strb	r2, [r3, #5]
 800dcc6:	68a3      	ldr	r3, [r4, #8]
 800dcc8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dccc:	719a      	strb	r2, [r3, #6]
 800dcce:	68a3      	ldr	r3, [r4, #8]
 800dcd0:	f89d 2000 	ldrb.w	r2, [sp]
 800dcd4:	71da      	strb	r2, [r3, #7]
 800dcd6:	68a2      	ldr	r2, [r4, #8]
 800dcd8:	6923      	ldr	r3, [r4, #16]
 800dcda:	3208      	adds	r2, #8
 800dcdc:	3308      	adds	r3, #8
 800dcde:	2108      	movs	r1, #8
 800dce0:	60a2      	str	r2, [r4, #8]
 800dce2:	6123      	str	r3, [r4, #16]
 800dce4:	7561      	strb	r1, [r4, #21]
 800dce6:	7da0      	ldrb	r0, [r4, #22]
 800dce8:	f080 0001 	eor.w	r0, r0, #1
 800dcec:	b002      	add	sp, #8
 800dcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dcf6:	6019      	str	r1, [r3, #0]
 800dcf8:	605a      	str	r2, [r3, #4]
 800dcfa:	e7ec      	b.n	800dcd6 <ucdr_serialize_uint64_t+0x10a>
 800dcfc:	68a2      	ldr	r2, [r4, #8]
 800dcfe:	6923      	ldr	r3, [r4, #16]
 800dd00:	7da0      	ldrb	r0, [r4, #22]
 800dd02:	7567      	strb	r7, [r4, #21]
 800dd04:	1b92      	subs	r2, r2, r6
 800dd06:	1b9b      	subs	r3, r3, r6
 800dd08:	f080 0001 	eor.w	r0, r0, #1
 800dd0c:	60a2      	str	r2, [r4, #8]
 800dd0e:	6123      	str	r3, [r4, #16]
 800dd10:	b002      	add	sp, #8
 800dd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd16:	68a3      	ldr	r3, [r4, #8]
 800dd18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd1c:	701a      	strb	r2, [r3, #0]
 800dd1e:	68a3      	ldr	r3, [r4, #8]
 800dd20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd24:	701a      	strb	r2, [r3, #0]
 800dd26:	68a3      	ldr	r3, [r4, #8]
 800dd28:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dd2c:	701a      	strb	r2, [r3, #0]
 800dd2e:	68a3      	ldr	r3, [r4, #8]
 800dd30:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	68a3      	ldr	r3, [r4, #8]
 800dd38:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dd3c:	701a      	strb	r2, [r3, #0]
 800dd3e:	68a5      	ldr	r5, [r4, #8]
 800dd40:	e78f      	b.n	800dc62 <ucdr_serialize_uint64_t+0x96>
 800dd42:	4628      	mov	r0, r5
 800dd44:	466d      	mov	r5, sp
 800dd46:	4632      	mov	r2, r6
 800dd48:	4629      	mov	r1, r5
 800dd4a:	f00c f952 	bl	8019ff2 <memcpy>
 800dd4e:	68a0      	ldr	r0, [r4, #8]
 800dd50:	4642      	mov	r2, r8
 800dd52:	19a9      	adds	r1, r5, r6
 800dd54:	f00c f94d 	bl	8019ff2 <memcpy>
 800dd58:	e786      	b.n	800dc68 <ucdr_serialize_uint64_t+0x9c>
 800dd5a:	bf00      	nop

0800dd5c <ucdr_serialize_int16_t>:
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	b082      	sub	sp, #8
 800dd62:	460b      	mov	r3, r1
 800dd64:	2102      	movs	r1, #2
 800dd66:	4604      	mov	r4, r0
 800dd68:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dd6c:	f000 fcbe 	bl	800e6ec <ucdr_buffer_alignment>
 800dd70:	4601      	mov	r1, r0
 800dd72:	4620      	mov	r0, r4
 800dd74:	7d67      	ldrb	r7, [r4, #21]
 800dd76:	f000 fcfd 	bl	800e774 <ucdr_advance_buffer>
 800dd7a:	2102      	movs	r1, #2
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f000 fc55 	bl	800e62c <ucdr_check_buffer_available_for>
 800dd82:	b1c0      	cbz	r0, 800ddb6 <ucdr_serialize_int16_t+0x5a>
 800dd84:	7d22      	ldrb	r2, [r4, #20]
 800dd86:	68a3      	ldr	r3, [r4, #8]
 800dd88:	2a01      	cmp	r2, #1
 800dd8a:	d04e      	beq.n	800de2a <ucdr_serialize_int16_t+0xce>
 800dd8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd90:	701a      	strb	r2, [r3, #0]
 800dd92:	68a3      	ldr	r3, [r4, #8]
 800dd94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd98:	705a      	strb	r2, [r3, #1]
 800dd9a:	68a2      	ldr	r2, [r4, #8]
 800dd9c:	6923      	ldr	r3, [r4, #16]
 800dd9e:	3202      	adds	r2, #2
 800dda0:	3302      	adds	r3, #2
 800dda2:	2102      	movs	r1, #2
 800dda4:	60a2      	str	r2, [r4, #8]
 800dda6:	6123      	str	r3, [r4, #16]
 800dda8:	7561      	strb	r1, [r4, #21]
 800ddaa:	7da0      	ldrb	r0, [r4, #22]
 800ddac:	f080 0001 	eor.w	r0, r0, #1
 800ddb0:	b002      	add	sp, #8
 800ddb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ddba:	42ab      	cmp	r3, r5
 800ddbc:	d923      	bls.n	800de06 <ucdr_serialize_int16_t+0xaa>
 800ddbe:	1b5e      	subs	r6, r3, r5
 800ddc0:	60a3      	str	r3, [r4, #8]
 800ddc2:	6923      	ldr	r3, [r4, #16]
 800ddc4:	f1c6 0802 	rsb	r8, r6, #2
 800ddc8:	4433      	add	r3, r6
 800ddca:	6123      	str	r3, [r4, #16]
 800ddcc:	4641      	mov	r1, r8
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f000 fc38 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800ddd4:	b368      	cbz	r0, 800de32 <ucdr_serialize_int16_t+0xd6>
 800ddd6:	7d23      	ldrb	r3, [r4, #20]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d03b      	beq.n	800de54 <ucdr_serialize_int16_t+0xf8>
 800dddc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dde0:	702b      	strb	r3, [r5, #0]
 800dde2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dde6:	706b      	strb	r3, [r5, #1]
 800dde8:	6923      	ldr	r3, [r4, #16]
 800ddea:	68a2      	ldr	r2, [r4, #8]
 800ddec:	7da0      	ldrb	r0, [r4, #22]
 800ddee:	3302      	adds	r3, #2
 800ddf0:	4442      	add	r2, r8
 800ddf2:	1b9b      	subs	r3, r3, r6
 800ddf4:	2102      	movs	r1, #2
 800ddf6:	f080 0001 	eor.w	r0, r0, #1
 800ddfa:	60a2      	str	r2, [r4, #8]
 800ddfc:	6123      	str	r3, [r4, #16]
 800ddfe:	7561      	strb	r1, [r4, #21]
 800de00:	b002      	add	sp, #8
 800de02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de06:	2102      	movs	r1, #2
 800de08:	4620      	mov	r0, r4
 800de0a:	f000 fc1b 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d0cb      	beq.n	800ddaa <ucdr_serialize_int16_t+0x4e>
 800de12:	7d23      	ldrb	r3, [r4, #20]
 800de14:	68a2      	ldr	r2, [r4, #8]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d018      	beq.n	800de4c <ucdr_serialize_int16_t+0xf0>
 800de1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de1e:	7013      	strb	r3, [r2, #0]
 800de20:	68a3      	ldr	r3, [r4, #8]
 800de22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de26:	705a      	strb	r2, [r3, #1]
 800de28:	e7b7      	b.n	800dd9a <ucdr_serialize_int16_t+0x3e>
 800de2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800de2e:	801a      	strh	r2, [r3, #0]
 800de30:	e7b3      	b.n	800dd9a <ucdr_serialize_int16_t+0x3e>
 800de32:	68a2      	ldr	r2, [r4, #8]
 800de34:	6923      	ldr	r3, [r4, #16]
 800de36:	7da0      	ldrb	r0, [r4, #22]
 800de38:	7567      	strb	r7, [r4, #21]
 800de3a:	1b92      	subs	r2, r2, r6
 800de3c:	1b9b      	subs	r3, r3, r6
 800de3e:	f080 0001 	eor.w	r0, r0, #1
 800de42:	60a2      	str	r2, [r4, #8]
 800de44:	6123      	str	r3, [r4, #16]
 800de46:	b002      	add	sp, #8
 800de48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800de50:	8013      	strh	r3, [r2, #0]
 800de52:	e7a2      	b.n	800dd9a <ucdr_serialize_int16_t+0x3e>
 800de54:	4628      	mov	r0, r5
 800de56:	f10d 0506 	add.w	r5, sp, #6
 800de5a:	4632      	mov	r2, r6
 800de5c:	4629      	mov	r1, r5
 800de5e:	f00c f8c8 	bl	8019ff2 <memcpy>
 800de62:	68a0      	ldr	r0, [r4, #8]
 800de64:	4642      	mov	r2, r8
 800de66:	19a9      	adds	r1, r5, r6
 800de68:	f00c f8c3 	bl	8019ff2 <memcpy>
 800de6c:	e7bc      	b.n	800dde8 <ucdr_serialize_int16_t+0x8c>
 800de6e:	bf00      	nop

0800de70 <ucdr_deserialize_int16_t>:
 800de70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de74:	460d      	mov	r5, r1
 800de76:	2102      	movs	r1, #2
 800de78:	4604      	mov	r4, r0
 800de7a:	f000 fc37 	bl	800e6ec <ucdr_buffer_alignment>
 800de7e:	4601      	mov	r1, r0
 800de80:	4620      	mov	r0, r4
 800de82:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de86:	f000 fc75 	bl	800e774 <ucdr_advance_buffer>
 800de8a:	2102      	movs	r1, #2
 800de8c:	4620      	mov	r0, r4
 800de8e:	f000 fbcd 	bl	800e62c <ucdr_check_buffer_available_for>
 800de92:	b1a8      	cbz	r0, 800dec0 <ucdr_deserialize_int16_t+0x50>
 800de94:	7d22      	ldrb	r2, [r4, #20]
 800de96:	68a3      	ldr	r3, [r4, #8]
 800de98:	2a01      	cmp	r2, #1
 800de9a:	d046      	beq.n	800df2a <ucdr_deserialize_int16_t+0xba>
 800de9c:	785b      	ldrb	r3, [r3, #1]
 800de9e:	702b      	strb	r3, [r5, #0]
 800dea0:	68a3      	ldr	r3, [r4, #8]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	706b      	strb	r3, [r5, #1]
 800dea6:	68a2      	ldr	r2, [r4, #8]
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	3202      	adds	r2, #2
 800deac:	3302      	adds	r3, #2
 800deae:	2102      	movs	r1, #2
 800deb0:	60a2      	str	r2, [r4, #8]
 800deb2:	6123      	str	r3, [r4, #16]
 800deb4:	7561      	strb	r1, [r4, #21]
 800deb6:	7da0      	ldrb	r0, [r4, #22]
 800deb8:	f080 0001 	eor.w	r0, r0, #1
 800debc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dec0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dec4:	42be      	cmp	r6, r7
 800dec6:	d920      	bls.n	800df0a <ucdr_deserialize_int16_t+0x9a>
 800dec8:	6923      	ldr	r3, [r4, #16]
 800deca:	60a6      	str	r6, [r4, #8]
 800decc:	1bf6      	subs	r6, r6, r7
 800dece:	4433      	add	r3, r6
 800ded0:	f1c6 0902 	rsb	r9, r6, #2
 800ded4:	6123      	str	r3, [r4, #16]
 800ded6:	4649      	mov	r1, r9
 800ded8:	4620      	mov	r0, r4
 800deda:	f000 fbb3 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800dede:	b338      	cbz	r0, 800df30 <ucdr_deserialize_int16_t+0xc0>
 800dee0:	7d23      	ldrb	r3, [r4, #20]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d034      	beq.n	800df50 <ucdr_deserialize_int16_t+0xe0>
 800dee6:	787b      	ldrb	r3, [r7, #1]
 800dee8:	702b      	strb	r3, [r5, #0]
 800deea:	783b      	ldrb	r3, [r7, #0]
 800deec:	706b      	strb	r3, [r5, #1]
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	68a2      	ldr	r2, [r4, #8]
 800def2:	7da0      	ldrb	r0, [r4, #22]
 800def4:	2102      	movs	r1, #2
 800def6:	3302      	adds	r3, #2
 800def8:	444a      	add	r2, r9
 800defa:	1b9b      	subs	r3, r3, r6
 800defc:	7561      	strb	r1, [r4, #21]
 800defe:	60a2      	str	r2, [r4, #8]
 800df00:	6123      	str	r3, [r4, #16]
 800df02:	f080 0001 	eor.w	r0, r0, #1
 800df06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df0a:	2102      	movs	r1, #2
 800df0c:	4620      	mov	r0, r4
 800df0e:	f000 fb99 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800df12:	2800      	cmp	r0, #0
 800df14:	d0cf      	beq.n	800deb6 <ucdr_deserialize_int16_t+0x46>
 800df16:	7d23      	ldrb	r3, [r4, #20]
 800df18:	68a2      	ldr	r2, [r4, #8]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d015      	beq.n	800df4a <ucdr_deserialize_int16_t+0xda>
 800df1e:	7853      	ldrb	r3, [r2, #1]
 800df20:	702b      	strb	r3, [r5, #0]
 800df22:	68a3      	ldr	r3, [r4, #8]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	706b      	strb	r3, [r5, #1]
 800df28:	e7bd      	b.n	800dea6 <ucdr_deserialize_int16_t+0x36>
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	802b      	strh	r3, [r5, #0]
 800df2e:	e7ba      	b.n	800dea6 <ucdr_deserialize_int16_t+0x36>
 800df30:	68a2      	ldr	r2, [r4, #8]
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	7da0      	ldrb	r0, [r4, #22]
 800df36:	f884 8015 	strb.w	r8, [r4, #21]
 800df3a:	1b92      	subs	r2, r2, r6
 800df3c:	1b9b      	subs	r3, r3, r6
 800df3e:	60a2      	str	r2, [r4, #8]
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	f080 0001 	eor.w	r0, r0, #1
 800df46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df4a:	8813      	ldrh	r3, [r2, #0]
 800df4c:	802b      	strh	r3, [r5, #0]
 800df4e:	e7aa      	b.n	800dea6 <ucdr_deserialize_int16_t+0x36>
 800df50:	4639      	mov	r1, r7
 800df52:	4632      	mov	r2, r6
 800df54:	4628      	mov	r0, r5
 800df56:	f00c f84c 	bl	8019ff2 <memcpy>
 800df5a:	68a1      	ldr	r1, [r4, #8]
 800df5c:	464a      	mov	r2, r9
 800df5e:	19a8      	adds	r0, r5, r6
 800df60:	f00c f847 	bl	8019ff2 <memcpy>
 800df64:	e7c3      	b.n	800deee <ucdr_deserialize_int16_t+0x7e>
 800df66:	bf00      	nop

0800df68 <ucdr_serialize_int32_t>:
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	b082      	sub	sp, #8
 800df6e:	4604      	mov	r4, r0
 800df70:	9101      	str	r1, [sp, #4]
 800df72:	2104      	movs	r1, #4
 800df74:	f000 fbba 	bl	800e6ec <ucdr_buffer_alignment>
 800df78:	4601      	mov	r1, r0
 800df7a:	4620      	mov	r0, r4
 800df7c:	7d67      	ldrb	r7, [r4, #21]
 800df7e:	f000 fbf9 	bl	800e774 <ucdr_advance_buffer>
 800df82:	2104      	movs	r1, #4
 800df84:	4620      	mov	r0, r4
 800df86:	f000 fb51 	bl	800e62c <ucdr_check_buffer_available_for>
 800df8a:	b300      	cbz	r0, 800dfce <ucdr_serialize_int32_t+0x66>
 800df8c:	7d22      	ldrb	r2, [r4, #20]
 800df8e:	68a3      	ldr	r3, [r4, #8]
 800df90:	2a01      	cmp	r2, #1
 800df92:	d05d      	beq.n	800e050 <ucdr_serialize_int32_t+0xe8>
 800df94:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800df98:	701a      	strb	r2, [r3, #0]
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dfa0:	705a      	strb	r2, [r3, #1]
 800dfa2:	68a3      	ldr	r3, [r4, #8]
 800dfa4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dfa8:	709a      	strb	r2, [r3, #2]
 800dfaa:	68a3      	ldr	r3, [r4, #8]
 800dfac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dfb0:	70da      	strb	r2, [r3, #3]
 800dfb2:	68a2      	ldr	r2, [r4, #8]
 800dfb4:	6923      	ldr	r3, [r4, #16]
 800dfb6:	3204      	adds	r2, #4
 800dfb8:	3304      	adds	r3, #4
 800dfba:	2104      	movs	r1, #4
 800dfbc:	60a2      	str	r2, [r4, #8]
 800dfbe:	6123      	str	r3, [r4, #16]
 800dfc0:	7561      	strb	r1, [r4, #21]
 800dfc2:	7da0      	ldrb	r0, [r4, #22]
 800dfc4:	f080 0001 	eor.w	r0, r0, #1
 800dfc8:	b002      	add	sp, #8
 800dfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dfd2:	42ab      	cmp	r3, r5
 800dfd4:	d92e      	bls.n	800e034 <ucdr_serialize_int32_t+0xcc>
 800dfd6:	1b5e      	subs	r6, r3, r5
 800dfd8:	60a3      	str	r3, [r4, #8]
 800dfda:	6923      	ldr	r3, [r4, #16]
 800dfdc:	f1c6 0804 	rsb	r8, r6, #4
 800dfe0:	4433      	add	r3, r6
 800dfe2:	6123      	str	r3, [r4, #16]
 800dfe4:	4641      	mov	r1, r8
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f000 fb2c 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800dfec:	b398      	cbz	r0, 800e056 <ucdr_serialize_int32_t+0xee>
 800dfee:	7d23      	ldrb	r3, [r4, #20]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d046      	beq.n	800e082 <ucdr_serialize_int32_t+0x11a>
 800dff4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dff8:	702b      	strb	r3, [r5, #0]
 800dffa:	2e01      	cmp	r6, #1
 800dffc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e000:	706b      	strb	r3, [r5, #1]
 800e002:	d035      	beq.n	800e070 <ucdr_serialize_int32_t+0x108>
 800e004:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e008:	70ab      	strb	r3, [r5, #2]
 800e00a:	2e02      	cmp	r6, #2
 800e00c:	d034      	beq.n	800e078 <ucdr_serialize_int32_t+0x110>
 800e00e:	3503      	adds	r5, #3
 800e010:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e014:	702b      	strb	r3, [r5, #0]
 800e016:	6923      	ldr	r3, [r4, #16]
 800e018:	68a2      	ldr	r2, [r4, #8]
 800e01a:	7da0      	ldrb	r0, [r4, #22]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4442      	add	r2, r8
 800e020:	1b9b      	subs	r3, r3, r6
 800e022:	2104      	movs	r1, #4
 800e024:	f080 0001 	eor.w	r0, r0, #1
 800e028:	60a2      	str	r2, [r4, #8]
 800e02a:	6123      	str	r3, [r4, #16]
 800e02c:	7561      	strb	r1, [r4, #21]
 800e02e:	b002      	add	sp, #8
 800e030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e034:	2104      	movs	r1, #4
 800e036:	4620      	mov	r0, r4
 800e038:	f000 fb04 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d0c0      	beq.n	800dfc2 <ucdr_serialize_int32_t+0x5a>
 800e040:	7d23      	ldrb	r3, [r4, #20]
 800e042:	68a2      	ldr	r2, [r4, #8]
 800e044:	2b01      	cmp	r3, #1
 800e046:	d019      	beq.n	800e07c <ucdr_serialize_int32_t+0x114>
 800e048:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e04c:	7013      	strb	r3, [r2, #0]
 800e04e:	e7a4      	b.n	800df9a <ucdr_serialize_int32_t+0x32>
 800e050:	9a01      	ldr	r2, [sp, #4]
 800e052:	601a      	str	r2, [r3, #0]
 800e054:	e7ad      	b.n	800dfb2 <ucdr_serialize_int32_t+0x4a>
 800e056:	68a2      	ldr	r2, [r4, #8]
 800e058:	6923      	ldr	r3, [r4, #16]
 800e05a:	7da0      	ldrb	r0, [r4, #22]
 800e05c:	7567      	strb	r7, [r4, #21]
 800e05e:	1b92      	subs	r2, r2, r6
 800e060:	1b9b      	subs	r3, r3, r6
 800e062:	f080 0001 	eor.w	r0, r0, #1
 800e066:	60a2      	str	r2, [r4, #8]
 800e068:	6123      	str	r3, [r4, #16]
 800e06a:	b002      	add	sp, #8
 800e06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e070:	68a3      	ldr	r3, [r4, #8]
 800e072:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e076:	701a      	strb	r2, [r3, #0]
 800e078:	68a5      	ldr	r5, [r4, #8]
 800e07a:	e7c9      	b.n	800e010 <ucdr_serialize_int32_t+0xa8>
 800e07c:	9b01      	ldr	r3, [sp, #4]
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	e797      	b.n	800dfb2 <ucdr_serialize_int32_t+0x4a>
 800e082:	4628      	mov	r0, r5
 800e084:	ad01      	add	r5, sp, #4
 800e086:	4632      	mov	r2, r6
 800e088:	4629      	mov	r1, r5
 800e08a:	f00b ffb2 	bl	8019ff2 <memcpy>
 800e08e:	68a0      	ldr	r0, [r4, #8]
 800e090:	4642      	mov	r2, r8
 800e092:	19a9      	adds	r1, r5, r6
 800e094:	f00b ffad 	bl	8019ff2 <memcpy>
 800e098:	e7bd      	b.n	800e016 <ucdr_serialize_int32_t+0xae>
 800e09a:	bf00      	nop

0800e09c <ucdr_serialize_endian_int32_t>:
 800e09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0a0:	b083      	sub	sp, #12
 800e0a2:	460d      	mov	r5, r1
 800e0a4:	2104      	movs	r1, #4
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	9201      	str	r2, [sp, #4]
 800e0aa:	f000 fb1f 	bl	800e6ec <ucdr_buffer_alignment>
 800e0ae:	4601      	mov	r1, r0
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e0b6:	f000 fb5d 	bl	800e774 <ucdr_advance_buffer>
 800e0ba:	2104      	movs	r1, #4
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f000 fab5 	bl	800e62c <ucdr_check_buffer_available_for>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d137      	bne.n	800e136 <ucdr_serialize_endian_int32_t+0x9a>
 800e0c6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e0ca:	42b7      	cmp	r7, r6
 800e0cc:	d92e      	bls.n	800e12c <ucdr_serialize_endian_int32_t+0x90>
 800e0ce:	6923      	ldr	r3, [r4, #16]
 800e0d0:	60a7      	str	r7, [r4, #8]
 800e0d2:	1bbf      	subs	r7, r7, r6
 800e0d4:	443b      	add	r3, r7
 800e0d6:	f1c7 0904 	rsb	r9, r7, #4
 800e0da:	6123      	str	r3, [r4, #16]
 800e0dc:	4649      	mov	r1, r9
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f000 fab0 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d049      	beq.n	800e17c <ucdr_serialize_endian_int32_t+0xe0>
 800e0e8:	2d01      	cmp	r5, #1
 800e0ea:	d05b      	beq.n	800e1a4 <ucdr_serialize_endian_int32_t+0x108>
 800e0ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e0f0:	7033      	strb	r3, [r6, #0]
 800e0f2:	2f01      	cmp	r7, #1
 800e0f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0f8:	7073      	strb	r3, [r6, #1]
 800e0fa:	d04d      	beq.n	800e198 <ucdr_serialize_endian_int32_t+0xfc>
 800e0fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e100:	70b3      	strb	r3, [r6, #2]
 800e102:	2f02      	cmp	r7, #2
 800e104:	d04c      	beq.n	800e1a0 <ucdr_serialize_endian_int32_t+0x104>
 800e106:	3603      	adds	r6, #3
 800e108:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e10c:	7033      	strb	r3, [r6, #0]
 800e10e:	6923      	ldr	r3, [r4, #16]
 800e110:	68a2      	ldr	r2, [r4, #8]
 800e112:	7da0      	ldrb	r0, [r4, #22]
 800e114:	3304      	adds	r3, #4
 800e116:	444a      	add	r2, r9
 800e118:	1bdb      	subs	r3, r3, r7
 800e11a:	2104      	movs	r1, #4
 800e11c:	f080 0001 	eor.w	r0, r0, #1
 800e120:	60a2      	str	r2, [r4, #8]
 800e122:	6123      	str	r3, [r4, #16]
 800e124:	7561      	strb	r1, [r4, #21]
 800e126:	b003      	add	sp, #12
 800e128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e12c:	2104      	movs	r1, #4
 800e12e:	4620      	mov	r0, r4
 800e130:	f000 fa88 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e134:	b1c8      	cbz	r0, 800e16a <ucdr_serialize_endian_int32_t+0xce>
 800e136:	2d01      	cmp	r5, #1
 800e138:	68a3      	ldr	r3, [r4, #8]
 800e13a:	d01c      	beq.n	800e176 <ucdr_serialize_endian_int32_t+0xda>
 800e13c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e140:	701a      	strb	r2, [r3, #0]
 800e142:	68a3      	ldr	r3, [r4, #8]
 800e144:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e148:	705a      	strb	r2, [r3, #1]
 800e14a:	68a3      	ldr	r3, [r4, #8]
 800e14c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e150:	709a      	strb	r2, [r3, #2]
 800e152:	68a3      	ldr	r3, [r4, #8]
 800e154:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e158:	70da      	strb	r2, [r3, #3]
 800e15a:	68a2      	ldr	r2, [r4, #8]
 800e15c:	6923      	ldr	r3, [r4, #16]
 800e15e:	3204      	adds	r2, #4
 800e160:	3304      	adds	r3, #4
 800e162:	2104      	movs	r1, #4
 800e164:	60a2      	str	r2, [r4, #8]
 800e166:	6123      	str	r3, [r4, #16]
 800e168:	7561      	strb	r1, [r4, #21]
 800e16a:	7da0      	ldrb	r0, [r4, #22]
 800e16c:	f080 0001 	eor.w	r0, r0, #1
 800e170:	b003      	add	sp, #12
 800e172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e176:	9a01      	ldr	r2, [sp, #4]
 800e178:	601a      	str	r2, [r3, #0]
 800e17a:	e7ee      	b.n	800e15a <ucdr_serialize_endian_int32_t+0xbe>
 800e17c:	68a2      	ldr	r2, [r4, #8]
 800e17e:	6923      	ldr	r3, [r4, #16]
 800e180:	7da0      	ldrb	r0, [r4, #22]
 800e182:	f884 8015 	strb.w	r8, [r4, #21]
 800e186:	1bd2      	subs	r2, r2, r7
 800e188:	1bdb      	subs	r3, r3, r7
 800e18a:	f080 0001 	eor.w	r0, r0, #1
 800e18e:	60a2      	str	r2, [r4, #8]
 800e190:	6123      	str	r3, [r4, #16]
 800e192:	b003      	add	sp, #12
 800e194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e19e:	701a      	strb	r2, [r3, #0]
 800e1a0:	68a6      	ldr	r6, [r4, #8]
 800e1a2:	e7b1      	b.n	800e108 <ucdr_serialize_endian_int32_t+0x6c>
 800e1a4:	ad01      	add	r5, sp, #4
 800e1a6:	463a      	mov	r2, r7
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f00b ff21 	bl	8019ff2 <memcpy>
 800e1b0:	68a0      	ldr	r0, [r4, #8]
 800e1b2:	464a      	mov	r2, r9
 800e1b4:	19e9      	adds	r1, r5, r7
 800e1b6:	f00b ff1c 	bl	8019ff2 <memcpy>
 800e1ba:	e7a8      	b.n	800e10e <ucdr_serialize_endian_int32_t+0x72>

0800e1bc <ucdr_deserialize_int32_t>:
 800e1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c0:	460d      	mov	r5, r1
 800e1c2:	2104      	movs	r1, #4
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	f000 fa91 	bl	800e6ec <ucdr_buffer_alignment>
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e1d2:	f000 facf 	bl	800e774 <ucdr_advance_buffer>
 800e1d6:	2104      	movs	r1, #4
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f000 fa27 	bl	800e62c <ucdr_check_buffer_available_for>
 800e1de:	b1d8      	cbz	r0, 800e218 <ucdr_deserialize_int32_t+0x5c>
 800e1e0:	7d22      	ldrb	r2, [r4, #20]
 800e1e2:	68a3      	ldr	r3, [r4, #8]
 800e1e4:	2a01      	cmp	r2, #1
 800e1e6:	d052      	beq.n	800e28e <ucdr_deserialize_int32_t+0xd2>
 800e1e8:	78db      	ldrb	r3, [r3, #3]
 800e1ea:	702b      	strb	r3, [r5, #0]
 800e1ec:	68a3      	ldr	r3, [r4, #8]
 800e1ee:	789b      	ldrb	r3, [r3, #2]
 800e1f0:	706b      	strb	r3, [r5, #1]
 800e1f2:	68a3      	ldr	r3, [r4, #8]
 800e1f4:	785b      	ldrb	r3, [r3, #1]
 800e1f6:	70ab      	strb	r3, [r5, #2]
 800e1f8:	68a3      	ldr	r3, [r4, #8]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	70eb      	strb	r3, [r5, #3]
 800e1fe:	68a2      	ldr	r2, [r4, #8]
 800e200:	6923      	ldr	r3, [r4, #16]
 800e202:	3204      	adds	r2, #4
 800e204:	3304      	adds	r3, #4
 800e206:	2104      	movs	r1, #4
 800e208:	60a2      	str	r2, [r4, #8]
 800e20a:	6123      	str	r3, [r4, #16]
 800e20c:	7561      	strb	r1, [r4, #21]
 800e20e:	7da0      	ldrb	r0, [r4, #22]
 800e210:	f080 0001 	eor.w	r0, r0, #1
 800e214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e218:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e21c:	42b7      	cmp	r7, r6
 800e21e:	d92a      	bls.n	800e276 <ucdr_deserialize_int32_t+0xba>
 800e220:	6923      	ldr	r3, [r4, #16]
 800e222:	60a7      	str	r7, [r4, #8]
 800e224:	1bbf      	subs	r7, r7, r6
 800e226:	443b      	add	r3, r7
 800e228:	f1c7 0904 	rsb	r9, r7, #4
 800e22c:	6123      	str	r3, [r4, #16]
 800e22e:	4649      	mov	r1, r9
 800e230:	4620      	mov	r0, r4
 800e232:	f000 fa07 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e236:	b368      	cbz	r0, 800e294 <ucdr_deserialize_int32_t+0xd8>
 800e238:	7d23      	ldrb	r3, [r4, #20]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d040      	beq.n	800e2c0 <ucdr_deserialize_int32_t+0x104>
 800e23e:	78f3      	ldrb	r3, [r6, #3]
 800e240:	702b      	strb	r3, [r5, #0]
 800e242:	78b3      	ldrb	r3, [r6, #2]
 800e244:	706b      	strb	r3, [r5, #1]
 800e246:	2f01      	cmp	r7, #1
 800e248:	d031      	beq.n	800e2ae <ucdr_deserialize_int32_t+0xf2>
 800e24a:	7873      	ldrb	r3, [r6, #1]
 800e24c:	70ab      	strb	r3, [r5, #2]
 800e24e:	2f02      	cmp	r7, #2
 800e250:	f105 0503 	add.w	r5, r5, #3
 800e254:	d02f      	beq.n	800e2b6 <ucdr_deserialize_int32_t+0xfa>
 800e256:	7833      	ldrb	r3, [r6, #0]
 800e258:	702b      	strb	r3, [r5, #0]
 800e25a:	6923      	ldr	r3, [r4, #16]
 800e25c:	68a2      	ldr	r2, [r4, #8]
 800e25e:	7da0      	ldrb	r0, [r4, #22]
 800e260:	2104      	movs	r1, #4
 800e262:	3304      	adds	r3, #4
 800e264:	444a      	add	r2, r9
 800e266:	1bdb      	subs	r3, r3, r7
 800e268:	7561      	strb	r1, [r4, #21]
 800e26a:	60a2      	str	r2, [r4, #8]
 800e26c:	6123      	str	r3, [r4, #16]
 800e26e:	f080 0001 	eor.w	r0, r0, #1
 800e272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e276:	2104      	movs	r1, #4
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 f9e3 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d0c5      	beq.n	800e20e <ucdr_deserialize_int32_t+0x52>
 800e282:	7d23      	ldrb	r3, [r4, #20]
 800e284:	68a2      	ldr	r2, [r4, #8]
 800e286:	2b01      	cmp	r3, #1
 800e288:	d017      	beq.n	800e2ba <ucdr_deserialize_int32_t+0xfe>
 800e28a:	78d3      	ldrb	r3, [r2, #3]
 800e28c:	e7ad      	b.n	800e1ea <ucdr_deserialize_int32_t+0x2e>
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	602b      	str	r3, [r5, #0]
 800e292:	e7b4      	b.n	800e1fe <ucdr_deserialize_int32_t+0x42>
 800e294:	68a2      	ldr	r2, [r4, #8]
 800e296:	6923      	ldr	r3, [r4, #16]
 800e298:	7da0      	ldrb	r0, [r4, #22]
 800e29a:	f884 8015 	strb.w	r8, [r4, #21]
 800e29e:	1bd2      	subs	r2, r2, r7
 800e2a0:	1bdb      	subs	r3, r3, r7
 800e2a2:	60a2      	str	r2, [r4, #8]
 800e2a4:	6123      	str	r3, [r4, #16]
 800e2a6:	f080 0001 	eor.w	r0, r0, #1
 800e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ae:	68a3      	ldr	r3, [r4, #8]
 800e2b0:	785b      	ldrb	r3, [r3, #1]
 800e2b2:	70ab      	strb	r3, [r5, #2]
 800e2b4:	3503      	adds	r5, #3
 800e2b6:	68a6      	ldr	r6, [r4, #8]
 800e2b8:	e7cd      	b.n	800e256 <ucdr_deserialize_int32_t+0x9a>
 800e2ba:	6813      	ldr	r3, [r2, #0]
 800e2bc:	602b      	str	r3, [r5, #0]
 800e2be:	e79e      	b.n	800e1fe <ucdr_deserialize_int32_t+0x42>
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	463a      	mov	r2, r7
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	f00b fe94 	bl	8019ff2 <memcpy>
 800e2ca:	68a1      	ldr	r1, [r4, #8]
 800e2cc:	464a      	mov	r2, r9
 800e2ce:	19e8      	adds	r0, r5, r7
 800e2d0:	f00b fe8f 	bl	8019ff2 <memcpy>
 800e2d4:	e7c1      	b.n	800e25a <ucdr_deserialize_int32_t+0x9e>
 800e2d6:	bf00      	nop

0800e2d8 <ucdr_deserialize_endian_int32_t>:
 800e2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2dc:	460e      	mov	r6, r1
 800e2de:	2104      	movs	r1, #4
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	4615      	mov	r5, r2
 800e2e4:	f000 fa02 	bl	800e6ec <ucdr_buffer_alignment>
 800e2e8:	4601      	mov	r1, r0
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e2f0:	f000 fa40 	bl	800e774 <ucdr_advance_buffer>
 800e2f4:	2104      	movs	r1, #4
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 f998 	bl	800e62c <ucdr_check_buffer_available_for>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d137      	bne.n	800e370 <ucdr_deserialize_endian_int32_t+0x98>
 800e300:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e304:	42bb      	cmp	r3, r7
 800e306:	d92e      	bls.n	800e366 <ucdr_deserialize_endian_int32_t+0x8e>
 800e308:	eba3 0807 	sub.w	r8, r3, r7
 800e30c:	60a3      	str	r3, [r4, #8]
 800e30e:	6923      	ldr	r3, [r4, #16]
 800e310:	f1c8 0a04 	rsb	sl, r8, #4
 800e314:	4443      	add	r3, r8
 800e316:	6123      	str	r3, [r4, #16]
 800e318:	4651      	mov	r1, sl
 800e31a:	4620      	mov	r0, r4
 800e31c:	f000 f992 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e320:	2800      	cmp	r0, #0
 800e322:	d043      	beq.n	800e3ac <ucdr_deserialize_endian_int32_t+0xd4>
 800e324:	2e01      	cmp	r6, #1
 800e326:	d056      	beq.n	800e3d6 <ucdr_deserialize_endian_int32_t+0xfe>
 800e328:	78fb      	ldrb	r3, [r7, #3]
 800e32a:	702b      	strb	r3, [r5, #0]
 800e32c:	78bb      	ldrb	r3, [r7, #2]
 800e32e:	706b      	strb	r3, [r5, #1]
 800e330:	f1b8 0f01 	cmp.w	r8, #1
 800e334:	d049      	beq.n	800e3ca <ucdr_deserialize_endian_int32_t+0xf2>
 800e336:	787b      	ldrb	r3, [r7, #1]
 800e338:	70ab      	strb	r3, [r5, #2]
 800e33a:	f1b8 0f02 	cmp.w	r8, #2
 800e33e:	f105 0503 	add.w	r5, r5, #3
 800e342:	d046      	beq.n	800e3d2 <ucdr_deserialize_endian_int32_t+0xfa>
 800e344:	783b      	ldrb	r3, [r7, #0]
 800e346:	702b      	strb	r3, [r5, #0]
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	68a2      	ldr	r2, [r4, #8]
 800e34c:	7da0      	ldrb	r0, [r4, #22]
 800e34e:	2104      	movs	r1, #4
 800e350:	3304      	adds	r3, #4
 800e352:	4452      	add	r2, sl
 800e354:	eba3 0308 	sub.w	r3, r3, r8
 800e358:	7561      	strb	r1, [r4, #21]
 800e35a:	60a2      	str	r2, [r4, #8]
 800e35c:	6123      	str	r3, [r4, #16]
 800e35e:	f080 0001 	eor.w	r0, r0, #1
 800e362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e366:	2104      	movs	r1, #4
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 f96b 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e36e:	b1a8      	cbz	r0, 800e39c <ucdr_deserialize_endian_int32_t+0xc4>
 800e370:	2e01      	cmp	r6, #1
 800e372:	68a3      	ldr	r3, [r4, #8]
 800e374:	d017      	beq.n	800e3a6 <ucdr_deserialize_endian_int32_t+0xce>
 800e376:	78db      	ldrb	r3, [r3, #3]
 800e378:	702b      	strb	r3, [r5, #0]
 800e37a:	68a3      	ldr	r3, [r4, #8]
 800e37c:	789b      	ldrb	r3, [r3, #2]
 800e37e:	706b      	strb	r3, [r5, #1]
 800e380:	68a3      	ldr	r3, [r4, #8]
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	70ab      	strb	r3, [r5, #2]
 800e386:	68a3      	ldr	r3, [r4, #8]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	70eb      	strb	r3, [r5, #3]
 800e38c:	68a2      	ldr	r2, [r4, #8]
 800e38e:	6923      	ldr	r3, [r4, #16]
 800e390:	3204      	adds	r2, #4
 800e392:	3304      	adds	r3, #4
 800e394:	2104      	movs	r1, #4
 800e396:	60a2      	str	r2, [r4, #8]
 800e398:	6123      	str	r3, [r4, #16]
 800e39a:	7561      	strb	r1, [r4, #21]
 800e39c:	7da0      	ldrb	r0, [r4, #22]
 800e39e:	f080 0001 	eor.w	r0, r0, #1
 800e3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	602b      	str	r3, [r5, #0]
 800e3aa:	e7ef      	b.n	800e38c <ucdr_deserialize_endian_int32_t+0xb4>
 800e3ac:	68a2      	ldr	r2, [r4, #8]
 800e3ae:	6923      	ldr	r3, [r4, #16]
 800e3b0:	7da0      	ldrb	r0, [r4, #22]
 800e3b2:	f884 9015 	strb.w	r9, [r4, #21]
 800e3b6:	eba2 0208 	sub.w	r2, r2, r8
 800e3ba:	eba3 0308 	sub.w	r3, r3, r8
 800e3be:	60a2      	str	r2, [r4, #8]
 800e3c0:	6123      	str	r3, [r4, #16]
 800e3c2:	f080 0001 	eor.w	r0, r0, #1
 800e3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ca:	68a3      	ldr	r3, [r4, #8]
 800e3cc:	785b      	ldrb	r3, [r3, #1]
 800e3ce:	70ab      	strb	r3, [r5, #2]
 800e3d0:	3503      	adds	r5, #3
 800e3d2:	68a7      	ldr	r7, [r4, #8]
 800e3d4:	e7b6      	b.n	800e344 <ucdr_deserialize_endian_int32_t+0x6c>
 800e3d6:	4639      	mov	r1, r7
 800e3d8:	4642      	mov	r2, r8
 800e3da:	4628      	mov	r0, r5
 800e3dc:	f00b fe09 	bl	8019ff2 <memcpy>
 800e3e0:	68a1      	ldr	r1, [r4, #8]
 800e3e2:	4652      	mov	r2, sl
 800e3e4:	eb05 0008 	add.w	r0, r5, r8
 800e3e8:	f00b fe03 	bl	8019ff2 <memcpy>
 800e3ec:	e7ac      	b.n	800e348 <ucdr_deserialize_endian_int32_t+0x70>
 800e3ee:	bf00      	nop

0800e3f0 <ucdr_serialize_endian_float>:
 800e3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	2104      	movs	r1, #4
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e400:	f000 f974 	bl	800e6ec <ucdr_buffer_alignment>
 800e404:	4601      	mov	r1, r0
 800e406:	4620      	mov	r0, r4
 800e408:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e40c:	f000 f9b2 	bl	800e774 <ucdr_advance_buffer>
 800e410:	2104      	movs	r1, #4
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f90a 	bl	800e62c <ucdr_check_buffer_available_for>
 800e418:	2800      	cmp	r0, #0
 800e41a:	d137      	bne.n	800e48c <ucdr_serialize_endian_float+0x9c>
 800e41c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e420:	42b7      	cmp	r7, r6
 800e422:	d92e      	bls.n	800e482 <ucdr_serialize_endian_float+0x92>
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	60a7      	str	r7, [r4, #8]
 800e428:	1bbf      	subs	r7, r7, r6
 800e42a:	443b      	add	r3, r7
 800e42c:	f1c7 0904 	rsb	r9, r7, #4
 800e430:	6123      	str	r3, [r4, #16]
 800e432:	4649      	mov	r1, r9
 800e434:	4620      	mov	r0, r4
 800e436:	f000 f905 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d049      	beq.n	800e4d2 <ucdr_serialize_endian_float+0xe2>
 800e43e:	2d01      	cmp	r5, #1
 800e440:	d05b      	beq.n	800e4fa <ucdr_serialize_endian_float+0x10a>
 800e442:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e446:	7033      	strb	r3, [r6, #0]
 800e448:	2f01      	cmp	r7, #1
 800e44a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e44e:	7073      	strb	r3, [r6, #1]
 800e450:	d04d      	beq.n	800e4ee <ucdr_serialize_endian_float+0xfe>
 800e452:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e456:	70b3      	strb	r3, [r6, #2]
 800e458:	2f02      	cmp	r7, #2
 800e45a:	d04c      	beq.n	800e4f6 <ucdr_serialize_endian_float+0x106>
 800e45c:	3603      	adds	r6, #3
 800e45e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e462:	7033      	strb	r3, [r6, #0]
 800e464:	6923      	ldr	r3, [r4, #16]
 800e466:	68a2      	ldr	r2, [r4, #8]
 800e468:	7da0      	ldrb	r0, [r4, #22]
 800e46a:	3304      	adds	r3, #4
 800e46c:	444a      	add	r2, r9
 800e46e:	1bdb      	subs	r3, r3, r7
 800e470:	2104      	movs	r1, #4
 800e472:	f080 0001 	eor.w	r0, r0, #1
 800e476:	60a2      	str	r2, [r4, #8]
 800e478:	6123      	str	r3, [r4, #16]
 800e47a:	7561      	strb	r1, [r4, #21]
 800e47c:	b003      	add	sp, #12
 800e47e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e482:	2104      	movs	r1, #4
 800e484:	4620      	mov	r0, r4
 800e486:	f000 f8dd 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e48a:	b1c8      	cbz	r0, 800e4c0 <ucdr_serialize_endian_float+0xd0>
 800e48c:	2d01      	cmp	r5, #1
 800e48e:	68a3      	ldr	r3, [r4, #8]
 800e490:	d01c      	beq.n	800e4cc <ucdr_serialize_endian_float+0xdc>
 800e492:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e496:	701a      	strb	r2, [r3, #0]
 800e498:	68a3      	ldr	r3, [r4, #8]
 800e49a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e49e:	705a      	strb	r2, [r3, #1]
 800e4a0:	68a3      	ldr	r3, [r4, #8]
 800e4a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e4a6:	709a      	strb	r2, [r3, #2]
 800e4a8:	68a3      	ldr	r3, [r4, #8]
 800e4aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e4ae:	70da      	strb	r2, [r3, #3]
 800e4b0:	68a2      	ldr	r2, [r4, #8]
 800e4b2:	6923      	ldr	r3, [r4, #16]
 800e4b4:	3204      	adds	r2, #4
 800e4b6:	3304      	adds	r3, #4
 800e4b8:	2104      	movs	r1, #4
 800e4ba:	60a2      	str	r2, [r4, #8]
 800e4bc:	6123      	str	r3, [r4, #16]
 800e4be:	7561      	strb	r1, [r4, #21]
 800e4c0:	7da0      	ldrb	r0, [r4, #22]
 800e4c2:	f080 0001 	eor.w	r0, r0, #1
 800e4c6:	b003      	add	sp, #12
 800e4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4cc:	9a01      	ldr	r2, [sp, #4]
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	e7ee      	b.n	800e4b0 <ucdr_serialize_endian_float+0xc0>
 800e4d2:	68a2      	ldr	r2, [r4, #8]
 800e4d4:	6923      	ldr	r3, [r4, #16]
 800e4d6:	7da0      	ldrb	r0, [r4, #22]
 800e4d8:	f884 8015 	strb.w	r8, [r4, #21]
 800e4dc:	1bd2      	subs	r2, r2, r7
 800e4de:	1bdb      	subs	r3, r3, r7
 800e4e0:	f080 0001 	eor.w	r0, r0, #1
 800e4e4:	60a2      	str	r2, [r4, #8]
 800e4e6:	6123      	str	r3, [r4, #16]
 800e4e8:	b003      	add	sp, #12
 800e4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	68a6      	ldr	r6, [r4, #8]
 800e4f8:	e7b1      	b.n	800e45e <ucdr_serialize_endian_float+0x6e>
 800e4fa:	ad01      	add	r5, sp, #4
 800e4fc:	463a      	mov	r2, r7
 800e4fe:	4629      	mov	r1, r5
 800e500:	4630      	mov	r0, r6
 800e502:	f00b fd76 	bl	8019ff2 <memcpy>
 800e506:	68a0      	ldr	r0, [r4, #8]
 800e508:	464a      	mov	r2, r9
 800e50a:	19e9      	adds	r1, r5, r7
 800e50c:	f00b fd71 	bl	8019ff2 <memcpy>
 800e510:	e7a8      	b.n	800e464 <ucdr_serialize_endian_float+0x74>
 800e512:	bf00      	nop

0800e514 <ucdr_deserialize_endian_float>:
 800e514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e518:	460e      	mov	r6, r1
 800e51a:	2104      	movs	r1, #4
 800e51c:	4604      	mov	r4, r0
 800e51e:	4615      	mov	r5, r2
 800e520:	f000 f8e4 	bl	800e6ec <ucdr_buffer_alignment>
 800e524:	4601      	mov	r1, r0
 800e526:	4620      	mov	r0, r4
 800e528:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e52c:	f000 f922 	bl	800e774 <ucdr_advance_buffer>
 800e530:	2104      	movs	r1, #4
 800e532:	4620      	mov	r0, r4
 800e534:	f000 f87a 	bl	800e62c <ucdr_check_buffer_available_for>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d137      	bne.n	800e5ac <ucdr_deserialize_endian_float+0x98>
 800e53c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e540:	42bb      	cmp	r3, r7
 800e542:	d92e      	bls.n	800e5a2 <ucdr_deserialize_endian_float+0x8e>
 800e544:	eba3 0807 	sub.w	r8, r3, r7
 800e548:	60a3      	str	r3, [r4, #8]
 800e54a:	6923      	ldr	r3, [r4, #16]
 800e54c:	f1c8 0a04 	rsb	sl, r8, #4
 800e550:	4443      	add	r3, r8
 800e552:	6123      	str	r3, [r4, #16]
 800e554:	4651      	mov	r1, sl
 800e556:	4620      	mov	r0, r4
 800e558:	f000 f874 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d043      	beq.n	800e5e8 <ucdr_deserialize_endian_float+0xd4>
 800e560:	2e01      	cmp	r6, #1
 800e562:	d056      	beq.n	800e612 <ucdr_deserialize_endian_float+0xfe>
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	702b      	strb	r3, [r5, #0]
 800e568:	78bb      	ldrb	r3, [r7, #2]
 800e56a:	706b      	strb	r3, [r5, #1]
 800e56c:	f1b8 0f01 	cmp.w	r8, #1
 800e570:	d049      	beq.n	800e606 <ucdr_deserialize_endian_float+0xf2>
 800e572:	787b      	ldrb	r3, [r7, #1]
 800e574:	70ab      	strb	r3, [r5, #2]
 800e576:	f1b8 0f02 	cmp.w	r8, #2
 800e57a:	f105 0503 	add.w	r5, r5, #3
 800e57e:	d046      	beq.n	800e60e <ucdr_deserialize_endian_float+0xfa>
 800e580:	783b      	ldrb	r3, [r7, #0]
 800e582:	702b      	strb	r3, [r5, #0]
 800e584:	6923      	ldr	r3, [r4, #16]
 800e586:	68a2      	ldr	r2, [r4, #8]
 800e588:	7da0      	ldrb	r0, [r4, #22]
 800e58a:	2104      	movs	r1, #4
 800e58c:	3304      	adds	r3, #4
 800e58e:	4452      	add	r2, sl
 800e590:	eba3 0308 	sub.w	r3, r3, r8
 800e594:	7561      	strb	r1, [r4, #21]
 800e596:	60a2      	str	r2, [r4, #8]
 800e598:	6123      	str	r3, [r4, #16]
 800e59a:	f080 0001 	eor.w	r0, r0, #1
 800e59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a2:	2104      	movs	r1, #4
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f000 f84d 	bl	800e644 <ucdr_check_final_buffer_behavior>
 800e5aa:	b1a8      	cbz	r0, 800e5d8 <ucdr_deserialize_endian_float+0xc4>
 800e5ac:	2e01      	cmp	r6, #1
 800e5ae:	68a3      	ldr	r3, [r4, #8]
 800e5b0:	d017      	beq.n	800e5e2 <ucdr_deserialize_endian_float+0xce>
 800e5b2:	78db      	ldrb	r3, [r3, #3]
 800e5b4:	702b      	strb	r3, [r5, #0]
 800e5b6:	68a3      	ldr	r3, [r4, #8]
 800e5b8:	789b      	ldrb	r3, [r3, #2]
 800e5ba:	706b      	strb	r3, [r5, #1]
 800e5bc:	68a3      	ldr	r3, [r4, #8]
 800e5be:	785b      	ldrb	r3, [r3, #1]
 800e5c0:	70ab      	strb	r3, [r5, #2]
 800e5c2:	68a3      	ldr	r3, [r4, #8]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	70eb      	strb	r3, [r5, #3]
 800e5c8:	68a2      	ldr	r2, [r4, #8]
 800e5ca:	6923      	ldr	r3, [r4, #16]
 800e5cc:	3204      	adds	r2, #4
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	2104      	movs	r1, #4
 800e5d2:	60a2      	str	r2, [r4, #8]
 800e5d4:	6123      	str	r3, [r4, #16]
 800e5d6:	7561      	strb	r1, [r4, #21]
 800e5d8:	7da0      	ldrb	r0, [r4, #22]
 800e5da:	f080 0001 	eor.w	r0, r0, #1
 800e5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	602b      	str	r3, [r5, #0]
 800e5e6:	e7ef      	b.n	800e5c8 <ucdr_deserialize_endian_float+0xb4>
 800e5e8:	68a2      	ldr	r2, [r4, #8]
 800e5ea:	6923      	ldr	r3, [r4, #16]
 800e5ec:	7da0      	ldrb	r0, [r4, #22]
 800e5ee:	f884 9015 	strb.w	r9, [r4, #21]
 800e5f2:	eba2 0208 	sub.w	r2, r2, r8
 800e5f6:	eba3 0308 	sub.w	r3, r3, r8
 800e5fa:	60a2      	str	r2, [r4, #8]
 800e5fc:	6123      	str	r3, [r4, #16]
 800e5fe:	f080 0001 	eor.w	r0, r0, #1
 800e602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e606:	68a3      	ldr	r3, [r4, #8]
 800e608:	785b      	ldrb	r3, [r3, #1]
 800e60a:	70ab      	strb	r3, [r5, #2]
 800e60c:	3503      	adds	r5, #3
 800e60e:	68a7      	ldr	r7, [r4, #8]
 800e610:	e7b6      	b.n	800e580 <ucdr_deserialize_endian_float+0x6c>
 800e612:	4639      	mov	r1, r7
 800e614:	4642      	mov	r2, r8
 800e616:	4628      	mov	r0, r5
 800e618:	f00b fceb 	bl	8019ff2 <memcpy>
 800e61c:	68a1      	ldr	r1, [r4, #8]
 800e61e:	4652      	mov	r2, sl
 800e620:	eb05 0008 	add.w	r0, r5, r8
 800e624:	f00b fce5 	bl	8019ff2 <memcpy>
 800e628:	e7ac      	b.n	800e584 <ucdr_deserialize_endian_float+0x70>
 800e62a:	bf00      	nop

0800e62c <ucdr_check_buffer_available_for>:
 800e62c:	7d83      	ldrb	r3, [r0, #22]
 800e62e:	b93b      	cbnz	r3, 800e640 <ucdr_check_buffer_available_for+0x14>
 800e630:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e634:	440b      	add	r3, r1
 800e636:	4298      	cmp	r0, r3
 800e638:	bf34      	ite	cc
 800e63a:	2000      	movcc	r0, #0
 800e63c:	2001      	movcs	r0, #1
 800e63e:	4770      	bx	lr
 800e640:	2000      	movs	r0, #0
 800e642:	4770      	bx	lr

0800e644 <ucdr_check_final_buffer_behavior>:
 800e644:	7d83      	ldrb	r3, [r0, #22]
 800e646:	b943      	cbnz	r3, 800e65a <ucdr_check_final_buffer_behavior+0x16>
 800e648:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e64c:	4291      	cmp	r1, r2
 800e64e:	b510      	push	{r4, lr}
 800e650:	4604      	mov	r4, r0
 800e652:	d205      	bcs.n	800e660 <ucdr_check_final_buffer_behavior+0x1c>
 800e654:	2301      	movs	r3, #1
 800e656:	4618      	mov	r0, r3
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	2300      	movs	r3, #0
 800e65c:	4618      	mov	r0, r3
 800e65e:	4770      	bx	lr
 800e660:	6982      	ldr	r2, [r0, #24]
 800e662:	b13a      	cbz	r2, 800e674 <ucdr_check_final_buffer_behavior+0x30>
 800e664:	69c1      	ldr	r1, [r0, #28]
 800e666:	4790      	blx	r2
 800e668:	f080 0301 	eor.w	r3, r0, #1
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	75a0      	strb	r0, [r4, #22]
 800e670:	4618      	mov	r0, r3
 800e672:	bd10      	pop	{r4, pc}
 800e674:	2001      	movs	r0, #1
 800e676:	75a0      	strb	r0, [r4, #22]
 800e678:	e7fa      	b.n	800e670 <ucdr_check_final_buffer_behavior+0x2c>
 800e67a:	bf00      	nop

0800e67c <ucdr_set_on_full_buffer_callback>:
 800e67c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop

0800e684 <ucdr_init_buffer_origin_offset_endian>:
 800e684:	b410      	push	{r4}
 800e686:	9c01      	ldr	r4, [sp, #4]
 800e688:	6001      	str	r1, [r0, #0]
 800e68a:	440a      	add	r2, r1
 800e68c:	6042      	str	r2, [r0, #4]
 800e68e:	190a      	adds	r2, r1, r4
 800e690:	441c      	add	r4, r3
 800e692:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e696:	6082      	str	r2, [r0, #8]
 800e698:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e69c:	7503      	strb	r3, [r0, #20]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6a8:	7542      	strb	r2, [r0, #21]
 800e6aa:	7582      	strb	r2, [r0, #22]
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop

0800e6b0 <ucdr_init_buffer_origin_offset>:
 800e6b0:	b510      	push	{r4, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	9c04      	ldr	r4, [sp, #16]
 800e6b6:	9400      	str	r4, [sp, #0]
 800e6b8:	2401      	movs	r4, #1
 800e6ba:	9401      	str	r4, [sp, #4]
 800e6bc:	f7ff ffe2 	bl	800e684 <ucdr_init_buffer_origin_offset_endian>
 800e6c0:	b002      	add	sp, #8
 800e6c2:	bd10      	pop	{r4, pc}

0800e6c4 <ucdr_init_buffer_origin>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	2400      	movs	r4, #0
 800e6ca:	9400      	str	r4, [sp, #0]
 800e6cc:	f7ff fff0 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 800e6d0:	b002      	add	sp, #8
 800e6d2:	bd10      	pop	{r4, pc}

0800e6d4 <ucdr_init_buffer>:
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	f7ff bff5 	b.w	800e6c4 <ucdr_init_buffer_origin>
 800e6da:	bf00      	nop

0800e6dc <ucdr_alignment>:
 800e6dc:	fbb0 f3f1 	udiv	r3, r0, r1
 800e6e0:	fb03 0011 	mls	r0, r3, r1, r0
 800e6e4:	1a08      	subs	r0, r1, r0
 800e6e6:	3901      	subs	r1, #1
 800e6e8:	4008      	ands	r0, r1
 800e6ea:	4770      	bx	lr

0800e6ec <ucdr_buffer_alignment>:
 800e6ec:	7d43      	ldrb	r3, [r0, #21]
 800e6ee:	428b      	cmp	r3, r1
 800e6f0:	d208      	bcs.n	800e704 <ucdr_buffer_alignment+0x18>
 800e6f2:	6900      	ldr	r0, [r0, #16]
 800e6f4:	fbb0 f3f1 	udiv	r3, r0, r1
 800e6f8:	fb01 0013 	mls	r0, r1, r3, r0
 800e6fc:	1a08      	subs	r0, r1, r0
 800e6fe:	3901      	subs	r1, #1
 800e700:	4008      	ands	r0, r1
 800e702:	4770      	bx	lr
 800e704:	2000      	movs	r0, #0
 800e706:	4770      	bx	lr

0800e708 <ucdr_align_to>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4604      	mov	r4, r0
 800e70c:	460d      	mov	r5, r1
 800e70e:	f7ff ffed 	bl	800e6ec <ucdr_buffer_alignment>
 800e712:	68a3      	ldr	r3, [r4, #8]
 800e714:	6861      	ldr	r1, [r4, #4]
 800e716:	6922      	ldr	r2, [r4, #16]
 800e718:	7565      	strb	r5, [r4, #21]
 800e71a:	4403      	add	r3, r0
 800e71c:	428b      	cmp	r3, r1
 800e71e:	bf28      	it	cs
 800e720:	460b      	movcs	r3, r1
 800e722:	4402      	add	r2, r0
 800e724:	60a3      	str	r3, [r4, #8]
 800e726:	6122      	str	r2, [r4, #16]
 800e728:	bd38      	pop	{r3, r4, r5, pc}
 800e72a:	bf00      	nop

0800e72c <ucdr_buffer_length>:
 800e72c:	6882      	ldr	r2, [r0, #8]
 800e72e:	6800      	ldr	r0, [r0, #0]
 800e730:	1a10      	subs	r0, r2, r0
 800e732:	4770      	bx	lr

0800e734 <ucdr_buffer_remaining>:
 800e734:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e738:	1a10      	subs	r0, r2, r0
 800e73a:	4770      	bx	lr

0800e73c <ucdr_check_final_buffer_behavior_array>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	7d83      	ldrb	r3, [r0, #22]
 800e740:	b963      	cbnz	r3, 800e75c <ucdr_check_final_buffer_behavior_array+0x20>
 800e742:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e746:	429a      	cmp	r2, r3
 800e748:	4604      	mov	r4, r0
 800e74a:	460d      	mov	r5, r1
 800e74c:	d308      	bcc.n	800e760 <ucdr_check_final_buffer_behavior_array+0x24>
 800e74e:	b139      	cbz	r1, 800e760 <ucdr_check_final_buffer_behavior_array+0x24>
 800e750:	6983      	ldr	r3, [r0, #24]
 800e752:	b163      	cbz	r3, 800e76e <ucdr_check_final_buffer_behavior_array+0x32>
 800e754:	69c1      	ldr	r1, [r0, #28]
 800e756:	4798      	blx	r3
 800e758:	75a0      	strb	r0, [r4, #22]
 800e75a:	b108      	cbz	r0, 800e760 <ucdr_check_final_buffer_behavior_array+0x24>
 800e75c:	2000      	movs	r0, #0
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	4620      	mov	r0, r4
 800e762:	f7ff ffe7 	bl	800e734 <ucdr_buffer_remaining>
 800e766:	42a8      	cmp	r0, r5
 800e768:	bf28      	it	cs
 800e76a:	4628      	movcs	r0, r5
 800e76c:	bd38      	pop	{r3, r4, r5, pc}
 800e76e:	2301      	movs	r3, #1
 800e770:	7583      	strb	r3, [r0, #22]
 800e772:	e7f3      	b.n	800e75c <ucdr_check_final_buffer_behavior_array+0x20>

0800e774 <ucdr_advance_buffer>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	4604      	mov	r4, r0
 800e778:	460d      	mov	r5, r1
 800e77a:	f7ff ff57 	bl	800e62c <ucdr_check_buffer_available_for>
 800e77e:	b178      	cbz	r0, 800e7a0 <ucdr_advance_buffer+0x2c>
 800e780:	6923      	ldr	r3, [r4, #16]
 800e782:	68a2      	ldr	r2, [r4, #8]
 800e784:	442b      	add	r3, r5
 800e786:	6123      	str	r3, [r4, #16]
 800e788:	2301      	movs	r3, #1
 800e78a:	442a      	add	r2, r5
 800e78c:	7563      	strb	r3, [r4, #21]
 800e78e:	60a2      	str	r2, [r4, #8]
 800e790:	bd38      	pop	{r3, r4, r5, pc}
 800e792:	68a2      	ldr	r2, [r4, #8]
 800e794:	6923      	ldr	r3, [r4, #16]
 800e796:	4402      	add	r2, r0
 800e798:	4403      	add	r3, r0
 800e79a:	1a2d      	subs	r5, r5, r0
 800e79c:	60a2      	str	r2, [r4, #8]
 800e79e:	6123      	str	r3, [r4, #16]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f7ff ffc9 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d1f1      	bne.n	800e792 <ucdr_advance_buffer+0x1e>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	7563      	strb	r3, [r4, #21]
 800e7b2:	bd38      	pop	{r3, r4, r5, pc}

0800e7b4 <ucdr_serialize_sequence_char>:
 800e7b4:	b570      	push	{r4, r5, r6, lr}
 800e7b6:	460e      	mov	r6, r1
 800e7b8:	4615      	mov	r5, r2
 800e7ba:	7d01      	ldrb	r1, [r0, #20]
 800e7bc:	4604      	mov	r4, r0
 800e7be:	f7ff f85b 	bl	800d878 <ucdr_serialize_endian_uint32_t>
 800e7c2:	b90d      	cbnz	r5, 800e7c8 <ucdr_serialize_sequence_char+0x14>
 800e7c4:	2001      	movs	r0, #1
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	7d21      	ldrb	r1, [r4, #20]
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	4632      	mov	r2, r6
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7d4:	f008 be16 	b.w	8017404 <ucdr_serialize_endian_array_char>

0800e7d8 <ucdr_deserialize_sequence_char>:
 800e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	461d      	mov	r5, r3
 800e7de:	4616      	mov	r6, r2
 800e7e0:	460f      	mov	r7, r1
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	7d01      	ldrb	r1, [r0, #20]
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	f7ff f964 	bl	800dab4 <ucdr_deserialize_endian_uint32_t>
 800e7ec:	682b      	ldr	r3, [r5, #0]
 800e7ee:	429e      	cmp	r6, r3
 800e7f0:	d208      	bcs.n	800e804 <ucdr_deserialize_sequence_char+0x2c>
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	75a2      	strb	r2, [r4, #22]
 800e7f6:	7d21      	ldrb	r1, [r4, #20]
 800e7f8:	463a      	mov	r2, r7
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e800:	f008 be32 	b.w	8017468 <ucdr_deserialize_endian_array_char>
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1f6      	bne.n	800e7f6 <ucdr_deserialize_sequence_char+0x1e>
 800e808:	2001      	movs	r0, #1
 800e80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e80e:	bf00      	nop

0800e810 <ucdr_serialize_sequence_uint8_t>:
 800e810:	b570      	push	{r4, r5, r6, lr}
 800e812:	460e      	mov	r6, r1
 800e814:	4615      	mov	r5, r2
 800e816:	7d01      	ldrb	r1, [r0, #20]
 800e818:	4604      	mov	r4, r0
 800e81a:	f7ff f82d 	bl	800d878 <ucdr_serialize_endian_uint32_t>
 800e81e:	b90d      	cbnz	r5, 800e824 <ucdr_serialize_sequence_uint8_t+0x14>
 800e820:	2001      	movs	r0, #1
 800e822:	bd70      	pop	{r4, r5, r6, pc}
 800e824:	7d21      	ldrb	r1, [r4, #20]
 800e826:	462b      	mov	r3, r5
 800e828:	4632      	mov	r2, r6
 800e82a:	4620      	mov	r0, r4
 800e82c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e830:	f008 be7e 	b.w	8017530 <ucdr_serialize_endian_array_uint8_t>

0800e834 <ucdr_deserialize_sequence_uint8_t>:
 800e834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e838:	461d      	mov	r5, r3
 800e83a:	4616      	mov	r6, r2
 800e83c:	460f      	mov	r7, r1
 800e83e:	461a      	mov	r2, r3
 800e840:	7d01      	ldrb	r1, [r0, #20]
 800e842:	4604      	mov	r4, r0
 800e844:	f7ff f936 	bl	800dab4 <ucdr_deserialize_endian_uint32_t>
 800e848:	682b      	ldr	r3, [r5, #0]
 800e84a:	429e      	cmp	r6, r3
 800e84c:	d208      	bcs.n	800e860 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800e84e:	2201      	movs	r2, #1
 800e850:	75a2      	strb	r2, [r4, #22]
 800e852:	7d21      	ldrb	r1, [r4, #20]
 800e854:	463a      	mov	r2, r7
 800e856:	4620      	mov	r0, r4
 800e858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e85c:	f008 becc 	b.w	80175f8 <ucdr_deserialize_endian_array_uint8_t>
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1f6      	bne.n	800e852 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800e864:	2001      	movs	r0, #1
 800e866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e86a:	bf00      	nop

0800e86c <ucdr_serialize_sequence_int32_t>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	460e      	mov	r6, r1
 800e870:	4615      	mov	r5, r2
 800e872:	7d01      	ldrb	r1, [r0, #20]
 800e874:	4604      	mov	r4, r0
 800e876:	f7fe ffff 	bl	800d878 <ucdr_serialize_endian_uint32_t>
 800e87a:	b90d      	cbnz	r5, 800e880 <ucdr_serialize_sequence_int32_t+0x14>
 800e87c:	2001      	movs	r0, #1
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	7d21      	ldrb	r1, [r4, #20]
 800e882:	462b      	mov	r3, r5
 800e884:	4632      	mov	r2, r6
 800e886:	4620      	mov	r0, r4
 800e888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e88c:	f008 bee6 	b.w	801765c <ucdr_serialize_endian_array_int32_t>

0800e890 <ucdr_deserialize_sequence_int32_t>:
 800e890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e894:	461d      	mov	r5, r3
 800e896:	4616      	mov	r6, r2
 800e898:	460f      	mov	r7, r1
 800e89a:	461a      	mov	r2, r3
 800e89c:	7d01      	ldrb	r1, [r0, #20]
 800e89e:	4604      	mov	r4, r0
 800e8a0:	f7ff f908 	bl	800dab4 <ucdr_deserialize_endian_uint32_t>
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	429e      	cmp	r6, r3
 800e8a8:	d208      	bcs.n	800e8bc <ucdr_deserialize_sequence_int32_t+0x2c>
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	75a2      	strb	r2, [r4, #22]
 800e8ae:	7d21      	ldrb	r1, [r4, #20]
 800e8b0:	463a      	mov	r2, r7
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b8:	f008 bf26 	b.w	8017708 <ucdr_deserialize_endian_array_int32_t>
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1f6      	bne.n	800e8ae <ucdr_deserialize_sequence_int32_t+0x1e>
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c6:	bf00      	nop

0800e8c8 <ucdr_serialize_sequence_float>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	460e      	mov	r6, r1
 800e8cc:	4615      	mov	r5, r2
 800e8ce:	7d01      	ldrb	r1, [r0, #20]
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	f7fe ffd1 	bl	800d878 <ucdr_serialize_endian_uint32_t>
 800e8d6:	b90d      	cbnz	r5, 800e8dc <ucdr_serialize_sequence_float+0x14>
 800e8d8:	2001      	movs	r0, #1
 800e8da:	bd70      	pop	{r4, r5, r6, pc}
 800e8dc:	7d21      	ldrb	r1, [r4, #20]
 800e8de:	462b      	mov	r3, r5
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8e8:	f008 bf64 	b.w	80177b4 <ucdr_serialize_endian_array_float>

0800e8ec <ucdr_deserialize_sequence_float>:
 800e8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f0:	461d      	mov	r5, r3
 800e8f2:	4616      	mov	r6, r2
 800e8f4:	460f      	mov	r7, r1
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	7d01      	ldrb	r1, [r0, #20]
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	f7ff f8da 	bl	800dab4 <ucdr_deserialize_endian_uint32_t>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	429e      	cmp	r6, r3
 800e904:	d208      	bcs.n	800e918 <ucdr_deserialize_sequence_float+0x2c>
 800e906:	2201      	movs	r2, #1
 800e908:	75a2      	strb	r2, [r4, #22]
 800e90a:	7d21      	ldrb	r1, [r4, #20]
 800e90c:	463a      	mov	r2, r7
 800e90e:	4620      	mov	r0, r4
 800e910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	f008 bfa2 	b.w	801785c <ucdr_deserialize_endian_array_float>
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d1f6      	bne.n	800e90a <ucdr_deserialize_sequence_float+0x1e>
 800e91c:	2001      	movs	r0, #1
 800e91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e922:	bf00      	nop

0800e924 <uxr_buffer_delete_entity>:
 800e924:	b510      	push	{r4, lr}
 800e926:	2300      	movs	r3, #0
 800e928:	b08e      	sub	sp, #56	@ 0x38
 800e92a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e92e:	2303      	movs	r3, #3
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	2204      	movs	r2, #4
 800e934:	ab06      	add	r3, sp, #24
 800e936:	4604      	mov	r4, r0
 800e938:	f001 fae4 	bl	800ff04 <uxr_prepare_stream_to_write_submessage>
 800e93c:	b918      	cbnz	r0, 800e946 <uxr_buffer_delete_entity+0x22>
 800e93e:	4604      	mov	r4, r0
 800e940:	4620      	mov	r0, r4
 800e942:	b00e      	add	sp, #56	@ 0x38
 800e944:	bd10      	pop	{r4, pc}
 800e946:	9902      	ldr	r1, [sp, #8]
 800e948:	aa05      	add	r2, sp, #20
 800e94a:	4620      	mov	r0, r4
 800e94c:	f001 fc14 	bl	8010178 <uxr_init_base_object_request>
 800e950:	a905      	add	r1, sp, #20
 800e952:	4604      	mov	r4, r0
 800e954:	a806      	add	r0, sp, #24
 800e956:	f003 fa9b 	bl	8011e90 <uxr_serialize_DELETE_Payload>
 800e95a:	4620      	mov	r0, r4
 800e95c:	b00e      	add	sp, #56	@ 0x38
 800e95e:	bd10      	pop	{r4, pc}

0800e960 <uxr_common_create_entity>:
 800e960:	b510      	push	{r4, lr}
 800e962:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e966:	b08c      	sub	sp, #48	@ 0x30
 800e968:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e96c:	f1bc 0f01 	cmp.w	ip, #1
 800e970:	bf08      	it	eq
 800e972:	f003 0201 	andeq.w	r2, r3, #1
 800e976:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e97a:	bf18      	it	ne
 800e97c:	2200      	movne	r2, #0
 800e97e:	330e      	adds	r3, #14
 800e980:	441a      	add	r2, r3
 800e982:	2301      	movs	r3, #1
 800e984:	e9cd 3100 	strd	r3, r1, [sp]
 800e988:	b292      	uxth	r2, r2
 800e98a:	9903      	ldr	r1, [sp, #12]
 800e98c:	ab04      	add	r3, sp, #16
 800e98e:	4604      	mov	r4, r0
 800e990:	f001 fab8 	bl	800ff04 <uxr_prepare_stream_to_write_submessage>
 800e994:	b918      	cbnz	r0, 800e99e <uxr_common_create_entity+0x3e>
 800e996:	4604      	mov	r4, r0
 800e998:	4620      	mov	r0, r4
 800e99a:	b00c      	add	sp, #48	@ 0x30
 800e99c:	bd10      	pop	{r4, pc}
 800e99e:	9902      	ldr	r1, [sp, #8]
 800e9a0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f001 fbe8 	bl	8010178 <uxr_init_base_object_request>
 800e9a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	a804      	add	r0, sp, #16
 800e9ae:	f003 f9b9 	bl	8011d24 <uxr_serialize_CREATE_Payload>
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	b00c      	add	sp, #48	@ 0x30
 800e9b6:	bd10      	pop	{r4, pc}

0800e9b8 <uxr_buffer_create_participant_bin>:
 800e9b8:	b570      	push	{r4, r5, r6, lr}
 800e9ba:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e9be:	ac11      	add	r4, sp, #68	@ 0x44
 800e9c0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	7223      	strb	r3, [r4, #8]
 800e9c8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e9ca:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e9ce:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	7122      	strb	r2, [r4, #4]
 800e9da:	f88d 1014 	strb.w	r1, [sp, #20]
 800e9de:	b1cb      	cbz	r3, 800ea14 <uxr_buffer_create_participant_bin+0x5c>
 800e9e0:	f88d 201c 	strb.w	r2, [sp, #28]
 800e9e4:	9308      	str	r3, [sp, #32]
 800e9e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9ea:	a915      	add	r1, sp, #84	@ 0x54
 800e9ec:	a809      	add	r0, sp, #36	@ 0x24
 800e9ee:	f7ff fe71 	bl	800e6d4 <ucdr_init_buffer>
 800e9f2:	a905      	add	r1, sp, #20
 800e9f4:	a809      	add	r0, sp, #36	@ 0x24
 800e9f6:	f002 fd9d 	bl	8011534 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e9fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9fc:	9600      	str	r6, [sp, #0]
 800e9fe:	9401      	str	r4, [sp, #4]
 800ea00:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ea04:	60e3      	str	r3, [r4, #12]
 800ea06:	4628      	mov	r0, r5
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	f7ff ffa9 	bl	800e960 <uxr_common_create_entity>
 800ea0e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800ea12:	bd70      	pop	{r4, r5, r6, pc}
 800ea14:	f88d 301c 	strb.w	r3, [sp, #28]
 800ea18:	e7e5      	b.n	800e9e6 <uxr_buffer_create_participant_bin+0x2e>
 800ea1a:	bf00      	nop

0800ea1c <uxr_buffer_create_topic_bin>:
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800ea22:	4605      	mov	r5, r0
 800ea24:	9105      	str	r1, [sp, #20]
 800ea26:	4618      	mov	r0, r3
 800ea28:	a997      	add	r1, sp, #604	@ 0x25c
 800ea2a:	2302      	movs	r3, #2
 800ea2c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800ea30:	9204      	str	r2, [sp, #16]
 800ea32:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800ea36:	f000 fa31 	bl	800ee9c <uxr_object_id_to_raw>
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ea40:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800ea42:	9306      	str	r3, [sp, #24]
 800ea44:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800ea46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea48:	2301      	movs	r3, #1
 800ea4a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ea4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea52:	2300      	movs	r3, #0
 800ea54:	a917      	add	r1, sp, #92	@ 0x5c
 800ea56:	a80b      	add	r0, sp, #44	@ 0x2c
 800ea58:	f88d 301c 	strb.w	r3, [sp, #28]
 800ea5c:	f7ff fe3a 	bl	800e6d4 <ucdr_init_buffer>
 800ea60:	a906      	add	r1, sp, #24
 800ea62:	a80b      	add	r0, sp, #44	@ 0x2c
 800ea64:	f002 fd88 	bl	8011578 <uxr_serialize_OBJK_Topic_Binary>
 800ea68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea6a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ea6c:	ac13      	add	r4, sp, #76	@ 0x4c
 800ea6e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ea72:	9600      	str	r6, [sp, #0]
 800ea74:	9401      	str	r4, [sp, #4]
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	4628      	mov	r0, r5
 800ea7a:	f7ff ff71 	bl	800e960 <uxr_common_create_entity>
 800ea7e:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800ea82:	bd70      	pop	{r4, r5, r6, pc}

0800ea84 <uxr_buffer_create_publisher_bin>:
 800ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea86:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800ea8a:	4605      	mov	r5, r0
 800ea8c:	9105      	str	r1, [sp, #20]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	2603      	movs	r6, #3
 800ea92:	a992      	add	r1, sp, #584	@ 0x248
 800ea94:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800ea98:	9204      	str	r2, [sp, #16]
 800ea9a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800ea9e:	f000 f9fd 	bl	800ee9c <uxr_object_id_to_raw>
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eaa8:	a912      	add	r1, sp, #72	@ 0x48
 800eaaa:	a806      	add	r0, sp, #24
 800eaac:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800eab0:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800eab4:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800eab8:	f7ff fe0c 	bl	800e6d4 <ucdr_init_buffer>
 800eabc:	a993      	add	r1, sp, #588	@ 0x24c
 800eabe:	a806      	add	r0, sp, #24
 800eac0:	f002 fe10 	bl	80116e4 <uxr_serialize_OBJK_Publisher_Binary>
 800eac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eac6:	9311      	str	r3, [sp, #68]	@ 0x44
 800eac8:	ac0e      	add	r4, sp, #56	@ 0x38
 800eaca:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800eace:	9700      	str	r7, [sp, #0]
 800ead0:	9401      	str	r4, [sp, #4]
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	4628      	mov	r0, r5
 800ead6:	f7ff ff43 	bl	800e960 <uxr_common_create_entity>
 800eada:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800eade:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eae0 <uxr_buffer_create_subscriber_bin>:
 800eae0:	b570      	push	{r4, r5, r6, lr}
 800eae2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800eae6:	4605      	mov	r5, r0
 800eae8:	9105      	str	r1, [sp, #20]
 800eaea:	4618      	mov	r0, r3
 800eaec:	a992      	add	r1, sp, #584	@ 0x248
 800eaee:	2304      	movs	r3, #4
 800eaf0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800eaf4:	9204      	str	r2, [sp, #16]
 800eaf6:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800eafa:	f000 f9cf 	bl	800ee9c <uxr_object_id_to_raw>
 800eafe:	2203      	movs	r2, #3
 800eb00:	2300      	movs	r3, #0
 800eb02:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800eb06:	a912      	add	r1, sp, #72	@ 0x48
 800eb08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb0c:	a806      	add	r0, sp, #24
 800eb0e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800eb12:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800eb16:	f7ff fddd 	bl	800e6d4 <ucdr_init_buffer>
 800eb1a:	a993      	add	r1, sp, #588	@ 0x24c
 800eb1c:	a806      	add	r0, sp, #24
 800eb1e:	f002 fe93 	bl	8011848 <uxr_serialize_OBJK_Subscriber_Binary>
 800eb22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb24:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb26:	ac0e      	add	r4, sp, #56	@ 0x38
 800eb28:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800eb2c:	9600      	str	r6, [sp, #0]
 800eb2e:	9401      	str	r4, [sp, #4]
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	4628      	mov	r0, r5
 800eb34:	f7ff ff14 	bl	800e960 <uxr_common_create_entity>
 800eb38:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800eb3c:	bd70      	pop	{r4, r5, r6, pc}
 800eb3e:	bf00      	nop

0800eb40 <uxr_buffer_create_datawriter_bin>:
 800eb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb42:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800eb46:	ac1d      	add	r4, sp, #116	@ 0x74
 800eb48:	9105      	str	r1, [sp, #20]
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	a9a1      	add	r1, sp, #644	@ 0x284
 800eb4e:	4618      	mov	r0, r3
 800eb50:	2305      	movs	r3, #5
 800eb52:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800eb56:	9204      	str	r2, [sp, #16]
 800eb58:	7123      	strb	r3, [r4, #4]
 800eb5a:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800eb5e:	f000 f99d 	bl	800ee9c <uxr_object_id_to_raw>
 800eb62:	2303      	movs	r3, #3
 800eb64:	a90e      	add	r1, sp, #56	@ 0x38
 800eb66:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800eb68:	7223      	strb	r3, [r4, #8]
 800eb6a:	f000 f997 	bl	800ee9c <uxr_object_id_to_raw>
 800eb6e:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800eb72:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800eb76:	2200      	movs	r2, #0
 800eb78:	3f00      	subs	r7, #0
 800eb7a:	fab3 f383 	clz	r3, r3
 800eb7e:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800eb82:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800eb86:	bf18      	it	ne
 800eb88:	2701      	movne	r7, #1
 800eb8a:	095b      	lsrs	r3, r3, #5
 800eb8c:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800eb90:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800eb94:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800eb98:	2201      	movs	r2, #1
 800eb9a:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800eb9e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800eba2:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800eba6:	b919      	cbnz	r1, 800ebb0 <uxr_buffer_create_datawriter_bin+0x70>
 800eba8:	f043 0302 	orr.w	r3, r3, #2
 800ebac:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebb0:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800ebb4:	2a01      	cmp	r2, #1
 800ebb6:	d022      	beq.n	800ebfe <uxr_buffer_create_datawriter_bin+0xbe>
 800ebb8:	2a03      	cmp	r2, #3
 800ebba:	d01b      	beq.n	800ebf4 <uxr_buffer_create_datawriter_bin+0xb4>
 800ebbc:	b91a      	cbnz	r2, 800ebc6 <uxr_buffer_create_datawriter_bin+0x86>
 800ebbe:	f043 0308 	orr.w	r3, r3, #8
 800ebc2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebca:	a921      	add	r1, sp, #132	@ 0x84
 800ebcc:	a806      	add	r0, sp, #24
 800ebce:	f7ff fd81 	bl	800e6d4 <ucdr_init_buffer>
 800ebd2:	a90e      	add	r1, sp, #56	@ 0x38
 800ebd4:	a806      	add	r0, sp, #24
 800ebd6:	f002 fed9 	bl	801198c <uxr_serialize_OBJK_DataWriter_Binary>
 800ebda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebdc:	9600      	str	r6, [sp, #0]
 800ebde:	9401      	str	r4, [sp, #4]
 800ebe0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ebe4:	60e3      	str	r3, [r4, #12]
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	f7ff feb9 	bl	800e960 <uxr_common_create_entity>
 800ebee:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebf4:	f043 0320 	orr.w	r3, r3, #32
 800ebf8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebfc:	e7e3      	b.n	800ebc6 <uxr_buffer_create_datawriter_bin+0x86>
 800ebfe:	f043 0310 	orr.w	r3, r3, #16
 800ec02:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec06:	e7de      	b.n	800ebc6 <uxr_buffer_create_datawriter_bin+0x86>

0800ec08 <uxr_buffer_create_datareader_bin>:
 800ec08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec0a:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800ec0e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ec10:	9105      	str	r1, [sp, #20]
 800ec12:	4605      	mov	r5, r0
 800ec14:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ec16:	4618      	mov	r0, r3
 800ec18:	2306      	movs	r3, #6
 800ec1a:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800ec1e:	9204      	str	r2, [sp, #16]
 800ec20:	7123      	strb	r3, [r4, #4]
 800ec22:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800ec26:	f000 f939 	bl	800ee9c <uxr_object_id_to_raw>
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	a90e      	add	r1, sp, #56	@ 0x38
 800ec2e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ec30:	7223      	strb	r3, [r4, #8]
 800ec32:	f000 f933 	bl	800ee9c <uxr_object_id_to_raw>
 800ec36:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800ec3a:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800ec3e:	2200      	movs	r2, #0
 800ec40:	3f00      	subs	r7, #0
 800ec42:	fab3 f383 	clz	r3, r3
 800ec46:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800ec4a:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800ec4e:	bf18      	it	ne
 800ec50:	2701      	movne	r7, #1
 800ec52:	095b      	lsrs	r3, r3, #5
 800ec54:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800ec58:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800ec5c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800ec60:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800ec64:	2201      	movs	r2, #1
 800ec66:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800ec6a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec6e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800ec72:	b919      	cbnz	r1, 800ec7c <uxr_buffer_create_datareader_bin+0x74>
 800ec74:	f043 0302 	orr.w	r3, r3, #2
 800ec78:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec7c:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800ec80:	2a01      	cmp	r2, #1
 800ec82:	d022      	beq.n	800ecca <uxr_buffer_create_datareader_bin+0xc2>
 800ec84:	2a03      	cmp	r2, #3
 800ec86:	d01b      	beq.n	800ecc0 <uxr_buffer_create_datareader_bin+0xb8>
 800ec88:	b91a      	cbnz	r2, 800ec92 <uxr_buffer_create_datareader_bin+0x8a>
 800ec8a:	f043 0308 	orr.w	r3, r3, #8
 800ec8e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec96:	a923      	add	r1, sp, #140	@ 0x8c
 800ec98:	a806      	add	r0, sp, #24
 800ec9a:	f7ff fd1b 	bl	800e6d4 <ucdr_init_buffer>
 800ec9e:	a90e      	add	r1, sp, #56	@ 0x38
 800eca0:	a806      	add	r0, sp, #24
 800eca2:	f002 fe37 	bl	8011914 <uxr_serialize_OBJK_DataReader_Binary>
 800eca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eca8:	9600      	str	r6, [sp, #0]
 800ecaa:	9401      	str	r4, [sp, #4]
 800ecac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ecb0:	60e3      	str	r3, [r4, #12]
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	f7ff fe53 	bl	800e960 <uxr_common_create_entity>
 800ecba:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800ecbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc0:	f043 0320 	orr.w	r3, r3, #32
 800ecc4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ecc8:	e7e3      	b.n	800ec92 <uxr_buffer_create_datareader_bin+0x8a>
 800ecca:	f043 0310 	orr.w	r3, r3, #16
 800ecce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ecd2:	e7de      	b.n	800ec92 <uxr_buffer_create_datareader_bin+0x8a>

0800ecd4 <get_custom_error>:
 800ecd4:	4b01      	ldr	r3, [pc, #4]	@ (800ecdc <get_custom_error+0x8>)
 800ecd6:	7818      	ldrb	r0, [r3, #0]
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	2000f0a8 	.word	0x2000f0a8

0800ece0 <recv_custom_msg>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	b089      	sub	sp, #36	@ 0x24
 800ece6:	4693      	mov	fp, r2
 800ece8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ecec:	9104      	str	r1, [sp, #16]
 800ecee:	2100      	movs	r1, #0
 800ecf0:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ecf4:	9305      	str	r3, [sp, #20]
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	f88d 101e 	strb.w	r1, [sp, #30]
 800ecfc:	b332      	cbz	r2, 800ed4c <recv_custom_msg+0x6c>
 800ecfe:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800ed02:	f10d 091f 	add.w	r9, sp, #31
 800ed06:	f10d 0814 	add.w	r8, sp, #20
 800ed0a:	f10d 071e 	add.w	r7, sp, #30
 800ed0e:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800ed12:	e004      	b.n	800ed1e <recv_custom_msg+0x3e>
 800ed14:	9b05      	ldr	r3, [sp, #20]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	dd10      	ble.n	800ed3c <recv_custom_msg+0x5c>
 800ed1a:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800ed1e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ed22:	e9cd 6700 	strd	r6, r7, [sp]
 800ed26:	4623      	mov	r3, r4
 800ed28:	4622      	mov	r2, r4
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	4650      	mov	r0, sl
 800ed2e:	f001 fc35 	bl	801059c <uxr_read_framed_msg>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d0ee      	beq.n	800ed14 <recv_custom_msg+0x34>
 800ed36:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ed3a:	b1a3      	cbz	r3, 800ed66 <recv_custom_msg+0x86>
 800ed3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ed78 <recv_custom_msg+0x98>)
 800ed3e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ed42:	701a      	strb	r2, [r3, #0]
 800ed44:	2000      	movs	r0, #0
 800ed46:	b009      	add	sp, #36	@ 0x24
 800ed48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4c:	f10d 021f 	add.w	r2, sp, #31
 800ed50:	9200      	str	r2, [sp, #0]
 800ed52:	4601      	mov	r1, r0
 800ed54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed58:	47a8      	blx	r5
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0ee      	beq.n	800ed3c <recv_custom_msg+0x5c>
 800ed5e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1ea      	bne.n	800ed3c <recv_custom_msg+0x5c>
 800ed66:	9b04      	ldr	r3, [sp, #16]
 800ed68:	f8cb 0000 	str.w	r0, [fp]
 800ed6c:	2001      	movs	r0, #1
 800ed6e:	601c      	str	r4, [r3, #0]
 800ed70:	b009      	add	sp, #36	@ 0x24
 800ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed76:	bf00      	nop
 800ed78:	2000f0a8 	.word	0x2000f0a8

0800ed7c <send_custom_msg>:
 800ed7c:	b570      	push	{r4, r5, r6, lr}
 800ed7e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800ed82:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800ed86:	b086      	sub	sp, #24
 800ed88:	4616      	mov	r6, r2
 800ed8a:	b965      	cbnz	r5, 800eda6 <send_custom_msg+0x2a>
 800ed8c:	f10d 0317 	add.w	r3, sp, #23
 800ed90:	47a0      	blx	r4
 800ed92:	b108      	cbz	r0, 800ed98 <send_custom_msg+0x1c>
 800ed94:	42b0      	cmp	r0, r6
 800ed96:	d014      	beq.n	800edc2 <send_custom_msg+0x46>
 800ed98:	4b0b      	ldr	r3, [pc, #44]	@ (800edc8 <send_custom_msg+0x4c>)
 800ed9a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ed9e:	701a      	strb	r2, [r3, #0]
 800eda0:	2000      	movs	r0, #0
 800eda2:	b006      	add	sp, #24
 800eda4:	bd70      	pop	{r4, r5, r6, pc}
 800eda6:	f10d 0217 	add.w	r2, sp, #23
 800edaa:	9202      	str	r2, [sp, #8]
 800edac:	2200      	movs	r2, #0
 800edae:	e9cd 6200 	strd	r6, r2, [sp]
 800edb2:	460b      	mov	r3, r1
 800edb4:	4602      	mov	r2, r0
 800edb6:	4621      	mov	r1, r4
 800edb8:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800edbc:	f001 fa10 	bl	80101e0 <uxr_write_framed_msg>
 800edc0:	e7e7      	b.n	800ed92 <send_custom_msg+0x16>
 800edc2:	2001      	movs	r0, #1
 800edc4:	b006      	add	sp, #24
 800edc6:	bd70      	pop	{r4, r5, r6, pc}
 800edc8:	2000f0a8 	.word	0x2000f0a8

0800edcc <uxr_set_custom_transport_callbacks>:
 800edcc:	b410      	push	{r4}
 800edce:	9c01      	ldr	r4, [sp, #4]
 800edd0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800edd4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800edd8:	9b02      	ldr	r3, [sp, #8]
 800edda:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800edde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800ede6:	4770      	bx	lr

0800ede8 <uxr_init_custom_transport>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800edee:	b303      	cbz	r3, 800ee32 <uxr_init_custom_transport+0x4a>
 800edf0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800edf4:	4604      	mov	r4, r0
 800edf6:	b1e2      	cbz	r2, 800ee32 <uxr_init_custom_transport+0x4a>
 800edf8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800edfc:	b1ca      	cbz	r2, 800ee32 <uxr_init_custom_transport+0x4a>
 800edfe:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800ee02:	b1b2      	cbz	r2, 800ee32 <uxr_init_custom_transport+0x4a>
 800ee04:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800ee08:	4798      	blx	r3
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	b188      	cbz	r0, 800ee32 <uxr_init_custom_transport+0x4a>
 800ee0e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ee12:	b98b      	cbnz	r3, 800ee38 <uxr_init_custom_transport+0x50>
 800ee14:	490b      	ldr	r1, [pc, #44]	@ (800ee44 <uxr_init_custom_transport+0x5c>)
 800ee16:	4b0c      	ldr	r3, [pc, #48]	@ (800ee48 <uxr_init_custom_transport+0x60>)
 800ee18:	4a0c      	ldr	r2, [pc, #48]	@ (800ee4c <uxr_init_custom_transport+0x64>)
 800ee1a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800ee1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee22:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800ee26:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ee2a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800ee2e:	4628      	mov	r0, r5
 800ee30:	bd38      	pop	{r3, r4, r5, pc}
 800ee32:	2500      	movs	r5, #0
 800ee34:	4628      	mov	r0, r5
 800ee36:	bd38      	pop	{r3, r4, r5, pc}
 800ee38:	2100      	movs	r1, #0
 800ee3a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ee3e:	f001 f9c9 	bl	80101d4 <uxr_init_framing_io>
 800ee42:	e7e7      	b.n	800ee14 <uxr_init_custom_transport+0x2c>
 800ee44:	0800ed7d 	.word	0x0800ed7d
 800ee48:	0800ece1 	.word	0x0800ece1
 800ee4c:	0800ecd5 	.word	0x0800ecd5

0800ee50 <uxr_close_custom_transport>:
 800ee50:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ee54:	4718      	bx	r3
 800ee56:	bf00      	nop

0800ee58 <uxr_object_id>:
 800ee58:	b082      	sub	sp, #8
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f88d 1006 	strb.w	r1, [sp, #6]
 800ee60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee64:	f360 030f 	bfi	r3, r0, #0, #16
 800ee68:	f362 431f 	bfi	r3, r2, #16, #16
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	b002      	add	sp, #8
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop

0800ee74 <uxr_object_id_from_raw>:
 800ee74:	7843      	ldrb	r3, [r0, #1]
 800ee76:	7801      	ldrb	r1, [r0, #0]
 800ee78:	b082      	sub	sp, #8
 800ee7a:	f003 020f 	and.w	r2, r3, #15
 800ee7e:	f88d 2006 	strb.w	r2, [sp, #6]
 800ee82:	091b      	lsrs	r3, r3, #4
 800ee84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee88:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f363 000f 	bfi	r0, r3, #0, #16
 800ee92:	f362 401f 	bfi	r0, r2, #16, #16
 800ee96:	b002      	add	sp, #8
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop

0800ee9c <uxr_object_id_to_raw>:
 800ee9c:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800eea0:	b082      	sub	sp, #8
 800eea2:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800eea6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800eeaa:	700a      	strb	r2, [r1, #0]
 800eeac:	704b      	strb	r3, [r1, #1]
 800eeae:	b002      	add	sp, #8
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop

0800eeb4 <uxr_ping_agent_session>:
 800eeb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeb8:	4616      	mov	r6, r2
 800eeba:	b091      	sub	sp, #68	@ 0x44
 800eebc:	2210      	movs	r2, #16
 800eebe:	4605      	mov	r5, r0
 800eec0:	460f      	mov	r7, r1
 800eec2:	a808      	add	r0, sp, #32
 800eec4:	eb0d 0102 	add.w	r1, sp, r2
 800eec8:	f7ff fc04 	bl	800e6d4 <ucdr_init_buffer>
 800eecc:	4b20      	ldr	r3, [pc, #128]	@ (800ef50 <uxr_ping_agent_session+0x9c>)
 800eece:	2400      	movs	r4, #0
 800eed0:	881b      	ldrh	r3, [r3, #0]
 800eed2:	f8ad 300a 	strh.w	r3, [sp, #10]
 800eed6:	9400      	str	r4, [sp, #0]
 800eed8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800eedc:	f04f 0802 	mov.w	r8, #2
 800eee0:	7829      	ldrb	r1, [r5, #0]
 800eee2:	f8ad 3008 	strh.w	r3, [sp, #8]
 800eee6:	4622      	mov	r2, r4
 800eee8:	4623      	mov	r3, r4
 800eeea:	a808      	add	r0, sp, #32
 800eeec:	f8cd 800c 	str.w	r8, [sp, #12]
 800eef0:	f002 f8f0 	bl	80110d4 <uxr_serialize_message_header>
 800eef4:	4641      	mov	r1, r8
 800eef6:	4623      	mov	r3, r4
 800eef8:	2208      	movs	r2, #8
 800eefa:	a808      	add	r0, sp, #32
 800eefc:	f001 feec 	bl	8010cd8 <uxr_buffer_submessage_header>
 800ef00:	a902      	add	r1, sp, #8
 800ef02:	4680      	mov	r8, r0
 800ef04:	a808      	add	r0, sp, #32
 800ef06:	f002 ff9b 	bl	8011e40 <uxr_serialize_GET_INFO_Payload>
 800ef0a:	f1b8 0f00 	cmp.w	r8, #0
 800ef0e:	d000      	beq.n	800ef12 <uxr_ping_agent_session+0x5e>
 800ef10:	b918      	cbnz	r0, 800ef1a <uxr_ping_agent_session+0x66>
 800ef12:	2000      	movs	r0, #0
 800ef14:	b011      	add	sp, #68	@ 0x44
 800ef16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef1a:	a808      	add	r0, sp, #32
 800ef1c:	f7ff fc06 	bl	800e72c <ucdr_buffer_length>
 800ef20:	4680      	mov	r8, r0
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	d0f5      	beq.n	800ef12 <uxr_ping_agent_session+0x5e>
 800ef26:	46a1      	mov	r9, r4
 800ef28:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ef2a:	4642      	mov	r2, r8
 800ef2c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ef30:	a904      	add	r1, sp, #16
 800ef32:	47a0      	blx	r4
 800ef34:	4639      	mov	r1, r7
 800ef36:	4604      	mov	r4, r0
 800ef38:	4628      	mov	r0, r5
 800ef3a:	f000 fdd7 	bl	800faec <uxr_run_session_until_pong>
 800ef3e:	4020      	ands	r0, r4
 800ef40:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800ef44:	f109 0901 	add.w	r9, r9, #1
 800ef48:	d1e4      	bne.n	800ef14 <uxr_ping_agent_session+0x60>
 800ef4a:	454e      	cmp	r6, r9
 800ef4c:	d1ec      	bne.n	800ef28 <uxr_ping_agent_session+0x74>
 800ef4e:	e7e0      	b.n	800ef12 <uxr_ping_agent_session+0x5e>
 800ef50:	0801ad04 	.word	0x0801ad04

0800ef54 <uxr_ping_agent_attempts>:
 800ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef58:	b0d3      	sub	sp, #332	@ 0x14c
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	4688      	mov	r8, r1
 800ef5e:	a810      	add	r0, sp, #64	@ 0x40
 800ef60:	a90c      	add	r1, sp, #48	@ 0x30
 800ef62:	4692      	mov	sl, r2
 800ef64:	2210      	movs	r2, #16
 800ef66:	f7ff fbb5 	bl	800e6d4 <ucdr_init_buffer>
 800ef6a:	4b56      	ldr	r3, [pc, #344]	@ (800f0c4 <uxr_ping_agent_attempts+0x170>)
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800ef72:	2400      	movs	r4, #0
 800ef74:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ef78:	2502      	movs	r5, #2
 800ef7a:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800ef7e:	4622      	mov	r2, r4
 800ef80:	4623      	mov	r3, r4
 800ef82:	2180      	movs	r1, #128	@ 0x80
 800ef84:	a810      	add	r0, sp, #64	@ 0x40
 800ef86:	9400      	str	r4, [sp, #0]
 800ef88:	9521      	str	r5, [sp, #132]	@ 0x84
 800ef8a:	f002 f8a3 	bl	80110d4 <uxr_serialize_message_header>
 800ef8e:	4629      	mov	r1, r5
 800ef90:	4623      	mov	r3, r4
 800ef92:	2208      	movs	r2, #8
 800ef94:	a810      	add	r0, sp, #64	@ 0x40
 800ef96:	f001 fe9f 	bl	8010cd8 <uxr_buffer_submessage_header>
 800ef9a:	a920      	add	r1, sp, #128	@ 0x80
 800ef9c:	4605      	mov	r5, r0
 800ef9e:	a810      	add	r0, sp, #64	@ 0x40
 800efa0:	f002 ff4e 	bl	8011e40 <uxr_serialize_GET_INFO_Payload>
 800efa4:	4005      	ands	r5, r0
 800efa6:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800efaa:	d104      	bne.n	800efb6 <uxr_ping_agent_attempts+0x62>
 800efac:	2500      	movs	r5, #0
 800efae:	4628      	mov	r0, r5
 800efb0:	b053      	add	sp, #332	@ 0x14c
 800efb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb6:	a810      	add	r0, sp, #64	@ 0x40
 800efb8:	f7ff fbb8 	bl	800e72c <ucdr_buffer_length>
 800efbc:	9004      	str	r0, [sp, #16]
 800efbe:	f1ba 0f00 	cmp.w	sl, #0
 800efc2:	d0f3      	beq.n	800efac <uxr_ping_agent_attempts+0x58>
 800efc4:	9505      	str	r5, [sp, #20]
 800efc6:	46a1      	mov	r9, r4
 800efc8:	4627      	mov	r7, r4
 800efca:	4655      	mov	r5, sl
 800efcc:	e9d6 0300 	ldrd	r0, r3, [r6]
 800efd0:	9a04      	ldr	r2, [sp, #16]
 800efd2:	a90c      	add	r1, sp, #48	@ 0x30
 800efd4:	4798      	blx	r3
 800efd6:	f001 fec5 	bl	8010d64 <uxr_millis>
 800efda:	46c2      	mov	sl, r8
 800efdc:	4604      	mov	r4, r0
 800efde:	9503      	str	r5, [sp, #12]
 800efe0:	6830      	ldr	r0, [r6, #0]
 800efe2:	68b5      	ldr	r5, [r6, #8]
 800efe4:	9708      	str	r7, [sp, #32]
 800efe6:	4643      	mov	r3, r8
 800efe8:	aa09      	add	r2, sp, #36	@ 0x24
 800efea:	a908      	add	r1, sp, #32
 800efec:	47a8      	blx	r5
 800efee:	4683      	mov	fp, r0
 800eff0:	b998      	cbnz	r0, 800f01a <uxr_ping_agent_attempts+0xc6>
 800eff2:	f001 feb7 	bl	8010d64 <uxr_millis>
 800eff6:	1b00      	subs	r0, r0, r4
 800eff8:	ebaa 0a00 	sub.w	sl, sl, r0
 800effc:	f001 feb2 	bl	8010d64 <uxr_millis>
 800f000:	f1ba 0f00 	cmp.w	sl, #0
 800f004:	4604      	mov	r4, r0
 800f006:	dceb      	bgt.n	800efe0 <uxr_ping_agent_attempts+0x8c>
 800f008:	9d03      	ldr	r5, [sp, #12]
 800f00a:	f109 0901 	add.w	r9, r9, #1
 800f00e:	f1bb 0f00 	cmp.w	fp, #0
 800f012:	d12a      	bne.n	800f06a <uxr_ping_agent_attempts+0x116>
 800f014:	45a9      	cmp	r9, r5
 800f016:	d1d9      	bne.n	800efcc <uxr_ping_agent_attempts+0x78>
 800f018:	e7c8      	b.n	800efac <uxr_ping_agent_attempts+0x58>
 800f01a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f01e:	a818      	add	r0, sp, #96	@ 0x60
 800f020:	f7ff fb58 	bl	800e6d4 <ucdr_init_buffer>
 800f024:	ab07      	add	r3, sp, #28
 800f026:	f10d 0219 	add.w	r2, sp, #25
 800f02a:	a918      	add	r1, sp, #96	@ 0x60
 800f02c:	a80a      	add	r0, sp, #40	@ 0x28
 800f02e:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 800f032:	f001 f85b 	bl	80100ec <uxr_read_session_header>
 800f036:	22c8      	movs	r2, #200	@ 0xc8
 800f038:	2100      	movs	r1, #0
 800f03a:	a820      	add	r0, sp, #128	@ 0x80
 800f03c:	f00a fefe 	bl	8019e3c <memset>
 800f040:	a818      	add	r0, sp, #96	@ 0x60
 800f042:	f7ff fb77 	bl	800e734 <ucdr_buffer_remaining>
 800f046:	2804      	cmp	r0, #4
 800f048:	d814      	bhi.n	800f074 <uxr_ping_agent_attempts+0x120>
 800f04a:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 800f04e:	f001 fe89 	bl	8010d64 <uxr_millis>
 800f052:	1b00      	subs	r0, r0, r4
 800f054:	ebaa 0a00 	sub.w	sl, sl, r0
 800f058:	f001 fe84 	bl	8010d64 <uxr_millis>
 800f05c:	f1ba 0f00 	cmp.w	sl, #0
 800f060:	4604      	mov	r4, r0
 800f062:	dd28      	ble.n	800f0b6 <uxr_ping_agent_attempts+0x162>
 800f064:	f1bb 0f00 	cmp.w	fp, #0
 800f068:	d0ba      	beq.n	800efe0 <uxr_ping_agent_attempts+0x8c>
 800f06a:	9d05      	ldr	r5, [sp, #20]
 800f06c:	4628      	mov	r0, r5
 800f06e:	b053      	add	sp, #332	@ 0x14c
 800f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f074:	f10d 031e 	add.w	r3, sp, #30
 800f078:	f10d 021b 	add.w	r2, sp, #27
 800f07c:	f10d 011a 	add.w	r1, sp, #26
 800f080:	a818      	add	r0, sp, #96	@ 0x60
 800f082:	f88d 701a 	strb.w	r7, [sp, #26]
 800f086:	f88d 701b 	strb.w	r7, [sp, #27]
 800f08a:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f08e:	f002 f871 	bl	8011174 <uxr_deserialize_submessage_header>
 800f092:	a818      	add	r0, sp, #96	@ 0x60
 800f094:	f7ff fb4e 	bl	800e734 <ucdr_buffer_remaining>
 800f098:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f09c:	4298      	cmp	r0, r3
 800f09e:	d3d4      	bcc.n	800f04a <uxr_ping_agent_attempts+0xf6>
 800f0a0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800f0a4:	2b06      	cmp	r3, #6
 800f0a6:	d1d0      	bne.n	800f04a <uxr_ping_agent_attempts+0xf6>
 800f0a8:	a918      	add	r1, sp, #96	@ 0x60
 800f0aa:	a820      	add	r0, sp, #128	@ 0x80
 800f0ac:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 800f0b0:	f000 f976 	bl	800f3a0 <read_submessage_info>
 800f0b4:	e7c9      	b.n	800f04a <uxr_ping_agent_attempts+0xf6>
 800f0b6:	f1bb 0b00 	subs.w	fp, fp, #0
 800f0ba:	9d03      	ldr	r5, [sp, #12]
 800f0bc:	bf18      	it	ne
 800f0be:	f04f 0b01 	movne.w	fp, #1
 800f0c2:	e7a2      	b.n	800f00a <uxr_ping_agent_attempts+0xb6>
 800f0c4:	0801ad04 	.word	0x0801ad04

0800f0c8 <on_get_fragmentation_info>:
 800f0c8:	b500      	push	{lr}
 800f0ca:	b08b      	sub	sp, #44	@ 0x2c
 800f0cc:	4601      	mov	r1, r0
 800f0ce:	2204      	movs	r2, #4
 800f0d0:	a802      	add	r0, sp, #8
 800f0d2:	f7ff faff 	bl	800e6d4 <ucdr_init_buffer>
 800f0d6:	f10d 0305 	add.w	r3, sp, #5
 800f0da:	f10d 0206 	add.w	r2, sp, #6
 800f0de:	a901      	add	r1, sp, #4
 800f0e0:	a802      	add	r0, sp, #8
 800f0e2:	f001 fe13 	bl	8010d0c <uxr_read_submessage_header>
 800f0e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0ea:	2b0d      	cmp	r3, #13
 800f0ec:	d003      	beq.n	800f0f6 <on_get_fragmentation_info+0x2e>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	b00b      	add	sp, #44	@ 0x2c
 800f0f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0fa:	f013 0f02 	tst.w	r3, #2
 800f0fe:	bf0c      	ite	eq
 800f100:	2001      	moveq	r0, #1
 800f102:	2002      	movne	r0, #2
 800f104:	b00b      	add	sp, #44	@ 0x2c
 800f106:	f85d fb04 	ldr.w	pc, [sp], #4
 800f10a:	bf00      	nop

0800f10c <read_submessage_get_info>:
 800f10c:	b570      	push	{r4, r5, r6, lr}
 800f10e:	2500      	movs	r5, #0
 800f110:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f114:	4604      	mov	r4, r0
 800f116:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f11a:	460e      	mov	r6, r1
 800f11c:	a810      	add	r0, sp, #64	@ 0x40
 800f11e:	4629      	mov	r1, r5
 800f120:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f124:	f00a fe8a 	bl	8019e3c <memset>
 800f128:	a903      	add	r1, sp, #12
 800f12a:	4630      	mov	r0, r6
 800f12c:	f002 fe9c 	bl	8011e68 <uxr_deserialize_GET_INFO_Payload>
 800f130:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f134:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f138:	4620      	mov	r0, r4
 800f13a:	f001 f815 	bl	8010168 <uxr_session_header_offset>
 800f13e:	462b      	mov	r3, r5
 800f140:	9000      	str	r0, [sp, #0]
 800f142:	220c      	movs	r2, #12
 800f144:	a905      	add	r1, sp, #20
 800f146:	a808      	add	r0, sp, #32
 800f148:	f7ff fab2 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 800f14c:	a910      	add	r1, sp, #64	@ 0x40
 800f14e:	a808      	add	r0, sp, #32
 800f150:	f002 fefc 	bl	8011f4c <uxr_serialize_INFO_Payload>
 800f154:	9b08      	ldr	r3, [sp, #32]
 800f156:	462a      	mov	r2, r5
 800f158:	4629      	mov	r1, r5
 800f15a:	4620      	mov	r0, r4
 800f15c:	f000 ffb0 	bl	80100c0 <uxr_stamp_session_header>
 800f160:	a808      	add	r0, sp, #32
 800f162:	f7ff fae3 	bl	800e72c <ucdr_buffer_length>
 800f166:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f168:	4602      	mov	r2, r0
 800f16a:	a905      	add	r1, sp, #20
 800f16c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f170:	47a0      	blx	r4
 800f172:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f176:	bd70      	pop	{r4, r5, r6, pc}

0800f178 <write_submessage_acknack.isra.0>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	b092      	sub	sp, #72	@ 0x48
 800f17c:	4605      	mov	r5, r0
 800f17e:	460e      	mov	r6, r1
 800f180:	4614      	mov	r4, r2
 800f182:	f000 fff1 	bl	8010168 <uxr_session_header_offset>
 800f186:	a905      	add	r1, sp, #20
 800f188:	9000      	str	r0, [sp, #0]
 800f18a:	2300      	movs	r3, #0
 800f18c:	a80a      	add	r0, sp, #40	@ 0x28
 800f18e:	2211      	movs	r2, #17
 800f190:	f7ff fa8e 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 800f194:	2318      	movs	r3, #24
 800f196:	fb03 5404 	mla	r4, r3, r4, r5
 800f19a:	2205      	movs	r2, #5
 800f19c:	2300      	movs	r3, #0
 800f19e:	3450      	adds	r4, #80	@ 0x50
 800f1a0:	210a      	movs	r1, #10
 800f1a2:	a80a      	add	r0, sp, #40	@ 0x28
 800f1a4:	f001 fd98 	bl	8010cd8 <uxr_buffer_submessage_header>
 800f1a8:	a903      	add	r1, sp, #12
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	f008 fd58 	bl	8017c60 <uxr_compute_acknack>
 800f1b0:	ba40      	rev16	r0, r0
 800f1b2:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f1b6:	a903      	add	r1, sp, #12
 800f1b8:	a80a      	add	r0, sp, #40	@ 0x28
 800f1ba:	f88d 6010 	strb.w	r6, [sp, #16]
 800f1be:	f002 ff35 	bl	801202c <uxr_serialize_ACKNACK_Payload>
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f000 ff79 	bl	80100c0 <uxr_stamp_session_header>
 800f1ce:	a80a      	add	r0, sp, #40	@ 0x28
 800f1d0:	f7ff faac 	bl	800e72c <ucdr_buffer_length>
 800f1d4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	a905      	add	r1, sp, #20
 800f1da:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f1de:	47a0      	blx	r4
 800f1e0:	b012      	add	sp, #72	@ 0x48
 800f1e2:	bd70      	pop	{r4, r5, r6, pc}
 800f1e4:	0000      	movs	r0, r0
	...

0800f1e8 <uxr_init_session>:
 800f1e8:	b510      	push	{r4, lr}
 800f1ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f220 <uxr_init_session+0x38>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f1fa:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f1fe:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f202:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f206:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f20a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f20e:	2181      	movs	r1, #129	@ 0x81
 800f210:	f000 feba 	bl	800ff88 <uxr_init_session_info>
 800f214:	f104 0008 	add.w	r0, r4, #8
 800f218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f21c:	f001 bc78 	b.w	8010b10 <uxr_init_stream_storage>
	...

0800f228 <uxr_set_status_callback>:
 800f228:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop

0800f230 <uxr_set_topic_callback>:
 800f230:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop

0800f238 <uxr_set_request_callback>:
 800f238:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop

0800f240 <uxr_set_reply_callback>:
 800f240:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop

0800f248 <uxr_create_output_best_effort_stream>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	4604      	mov	r4, r0
 800f24e:	460d      	mov	r5, r1
 800f250:	4616      	mov	r6, r2
 800f252:	f000 ff89 	bl	8010168 <uxr_session_header_offset>
 800f256:	4632      	mov	r2, r6
 800f258:	4603      	mov	r3, r0
 800f25a:	4629      	mov	r1, r5
 800f25c:	f104 0008 	add.w	r0, r4, #8
 800f260:	b002      	add	sp, #8
 800f262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f266:	f001 bc9d 	b.w	8010ba4 <uxr_add_output_best_effort_buffer>
 800f26a:	bf00      	nop

0800f26c <uxr_create_output_reliable_stream>:
 800f26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f26e:	b085      	sub	sp, #20
 800f270:	4604      	mov	r4, r0
 800f272:	460d      	mov	r5, r1
 800f274:	4616      	mov	r6, r2
 800f276:	461f      	mov	r7, r3
 800f278:	f000 ff76 	bl	8010168 <uxr_session_header_offset>
 800f27c:	463b      	mov	r3, r7
 800f27e:	9000      	str	r0, [sp, #0]
 800f280:	4632      	mov	r2, r6
 800f282:	4629      	mov	r1, r5
 800f284:	f104 0008 	add.w	r0, r4, #8
 800f288:	f001 fca0 	bl	8010bcc <uxr_add_output_reliable_buffer>
 800f28c:	b005      	add	sp, #20
 800f28e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f290 <uxr_create_input_best_effort_stream>:
 800f290:	b082      	sub	sp, #8
 800f292:	3008      	adds	r0, #8
 800f294:	b002      	add	sp, #8
 800f296:	f001 bcb3 	b.w	8010c00 <uxr_add_input_best_effort_buffer>
 800f29a:	bf00      	nop

0800f29c <uxr_create_input_reliable_stream>:
 800f29c:	b510      	push	{r4, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	4c03      	ldr	r4, [pc, #12]	@ (800f2b0 <uxr_create_input_reliable_stream+0x14>)
 800f2a2:	9400      	str	r4, [sp, #0]
 800f2a4:	3008      	adds	r0, #8
 800f2a6:	f001 fcc1 	bl	8010c2c <uxr_add_input_reliable_buffer>
 800f2aa:	b004      	add	sp, #16
 800f2ac:	bd10      	pop	{r4, pc}
 800f2ae:	bf00      	nop
 800f2b0:	0800f0c9 	.word	0x0800f0c9

0800f2b4 <uxr_epoch_nanos>:
 800f2b4:	b510      	push	{r4, lr}
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	f001 fd6e 	bl	8010d98 <uxr_nanos>
 800f2bc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f2c0:	1ac0      	subs	r0, r0, r3
 800f2c2:	eb61 0102 	sbc.w	r1, r1, r2
 800f2c6:	bd10      	pop	{r4, pc}

0800f2c8 <uxr_flash_output_streams>:
 800f2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2cc:	7e03      	ldrb	r3, [r0, #24]
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	b373      	cbz	r3, 800f332 <uxr_flash_output_streams+0x6a>
 800f2d4:	2500      	movs	r5, #0
 800f2d6:	f100 0908 	add.w	r9, r0, #8
 800f2da:	f10d 0802 	add.w	r8, sp, #2
 800f2de:	4628      	mov	r0, r5
 800f2e0:	af03      	add	r7, sp, #12
 800f2e2:	ae02      	add	r6, sp, #8
 800f2e4:	e006      	b.n	800f2f4 <uxr_flash_output_streams+0x2c>
 800f2e6:	7e23      	ldrb	r3, [r4, #24]
 800f2e8:	3501      	adds	r5, #1
 800f2ea:	b2e8      	uxtb	r0, r5
 800f2ec:	4283      	cmp	r3, r0
 800f2ee:	f109 0910 	add.w	r9, r9, #16
 800f2f2:	d91e      	bls.n	800f332 <uxr_flash_output_streams+0x6a>
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	4611      	mov	r1, r2
 800f2f8:	f001 fbd2 	bl	8010aa0 <uxr_stream_id>
 800f2fc:	4643      	mov	r3, r8
 800f2fe:	4684      	mov	ip, r0
 800f300:	463a      	mov	r2, r7
 800f302:	4631      	mov	r1, r6
 800f304:	4648      	mov	r0, r9
 800f306:	f8cd c004 	str.w	ip, [sp, #4]
 800f30a:	f008 fd2d 	bl	8017d68 <uxr_prepare_best_effort_buffer_to_send>
 800f30e:	2800      	cmp	r0, #0
 800f310:	d0e9      	beq.n	800f2e6 <uxr_flash_output_streams+0x1e>
 800f312:	9b02      	ldr	r3, [sp, #8]
 800f314:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f318:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f31c:	4620      	mov	r0, r4
 800f31e:	f000 fecf 	bl	80100c0 <uxr_stamp_session_header>
 800f322:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f324:	9a03      	ldr	r2, [sp, #12]
 800f326:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f32a:	9902      	ldr	r1, [sp, #8]
 800f32c:	6818      	ldr	r0, [r3, #0]
 800f32e:	47d0      	blx	sl
 800f330:	e7d9      	b.n	800f2e6 <uxr_flash_output_streams+0x1e>
 800f332:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f336:	b37b      	cbz	r3, 800f398 <uxr_flash_output_streams+0xd0>
 800f338:	f04f 0900 	mov.w	r9, #0
 800f33c:	f104 0520 	add.w	r5, r4, #32
 800f340:	f10d 0802 	add.w	r8, sp, #2
 800f344:	af03      	add	r7, sp, #12
 800f346:	ae02      	add	r6, sp, #8
 800f348:	4648      	mov	r0, r9
 800f34a:	2201      	movs	r2, #1
 800f34c:	2102      	movs	r1, #2
 800f34e:	f001 fba7 	bl	8010aa0 <uxr_stream_id>
 800f352:	9001      	str	r0, [sp, #4]
 800f354:	e00e      	b.n	800f374 <uxr_flash_output_streams+0xac>
 800f356:	9b02      	ldr	r3, [sp, #8]
 800f358:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f35c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f360:	4620      	mov	r0, r4
 800f362:	f000 fead 	bl	80100c0 <uxr_stamp_session_header>
 800f366:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f368:	9a03      	ldr	r2, [sp, #12]
 800f36a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f36e:	9902      	ldr	r1, [sp, #8]
 800f370:	6818      	ldr	r0, [r3, #0]
 800f372:	47d0      	blx	sl
 800f374:	4643      	mov	r3, r8
 800f376:	463a      	mov	r2, r7
 800f378:	4631      	mov	r1, r6
 800f37a:	4628      	mov	r0, r5
 800f37c:	f008 ff08 	bl	8018190 <uxr_prepare_next_reliable_buffer_to_send>
 800f380:	2800      	cmp	r0, #0
 800f382:	d1e8      	bne.n	800f356 <uxr_flash_output_streams+0x8e>
 800f384:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f388:	f109 0901 	add.w	r9, r9, #1
 800f38c:	fa5f f089 	uxtb.w	r0, r9
 800f390:	4283      	cmp	r3, r0
 800f392:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800f396:	d8d8      	bhi.n	800f34a <uxr_flash_output_streams+0x82>
 800f398:	b004      	add	sp, #16
 800f39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f39e:	bf00      	nop

0800f3a0 <read_submessage_info>:
 800f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a4:	460d      	mov	r5, r1
 800f3a6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f3aa:	4669      	mov	r1, sp
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f002 fc56 	bl	8011c60 <uxr_deserialize_BaseObjectReply>
 800f3b4:	a902      	add	r1, sp, #8
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f3be:	f7fd ff8d 	bl	800d2dc <ucdr_deserialize_bool>
 800f3c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f3c6:	4004      	ands	r4, r0
 800f3c8:	b2e4      	uxtb	r4, r4
 800f3ca:	b95b      	cbnz	r3, 800f3e4 <read_submessage_info+0x44>
 800f3cc:	a987      	add	r1, sp, #540	@ 0x21c
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7fd ff84 	bl	800d2dc <ucdr_deserialize_bool>
 800f3d4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f3d8:	4606      	mov	r6, r0
 800f3da:	b94b      	cbnz	r3, 800f3f0 <read_submessage_info+0x50>
 800f3dc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e4:	a903      	add	r1, sp, #12
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f002 fafc 	bl	80119e4 <uxr_deserialize_ObjectVariant>
 800f3ec:	4004      	ands	r4, r0
 800f3ee:	e7ed      	b.n	800f3cc <read_submessage_info+0x2c>
 800f3f0:	a988      	add	r1, sp, #544	@ 0x220
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f7fd ffa0 	bl	800d338 <ucdr_deserialize_uint8_t>
 800f3f8:	4234      	tst	r4, r6
 800f3fa:	d0ef      	beq.n	800f3dc <read_submessage_info+0x3c>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d0ed      	beq.n	800f3dc <read_submessage_info+0x3c>
 800f400:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f404:	2b0d      	cmp	r3, #13
 800f406:	d1e9      	bne.n	800f3dc <read_submessage_info+0x3c>
 800f408:	a98a      	add	r1, sp, #552	@ 0x228
 800f40a:	4628      	mov	r0, r5
 800f40c:	f7fe fd30 	bl	800de70 <ucdr_deserialize_int16_t>
 800f410:	b140      	cbz	r0, 800f424 <read_submessage_info+0x84>
 800f412:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f416:	2b00      	cmp	r3, #0
 800f418:	dd07      	ble.n	800f42a <read_submessage_info+0x8a>
 800f41a:	f1b8 0f00 	cmp.w	r8, #0
 800f41e:	bf0c      	ite	eq
 800f420:	2002      	moveq	r0, #2
 800f422:	2001      	movne	r0, #1
 800f424:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f428:	e7d8      	b.n	800f3dc <read_submessage_info+0x3c>
 800f42a:	2000      	movs	r0, #0
 800f42c:	e7fa      	b.n	800f424 <read_submessage_info+0x84>
 800f42e:	bf00      	nop

0800f430 <read_submessage_list>:
 800f430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f434:	b097      	sub	sp, #92	@ 0x5c
 800f436:	4604      	mov	r4, r0
 800f438:	460d      	mov	r5, r1
 800f43a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f43c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f440:	aa0c      	add	r2, sp, #48	@ 0x30
 800f442:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f446:	4628      	mov	r0, r5
 800f448:	f001 fc60 	bl	8010d0c <uxr_read_submessage_header>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	f000 812c 	beq.w	800f6aa <read_submessage_list+0x27a>
 800f452:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800f456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f458:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800f45c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800f460:	3902      	subs	r1, #2
 800f462:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f466:	290d      	cmp	r1, #13
 800f468:	d8e8      	bhi.n	800f43c <read_submessage_list+0xc>
 800f46a:	a201      	add	r2, pc, #4	@ (adr r2, 800f470 <read_submessage_list+0x40>)
 800f46c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800f470:	0800f6a1 	.word	0x0800f6a1
 800f474:	0800f43d 	.word	0x0800f43d
 800f478:	0800f691 	.word	0x0800f691
 800f47c:	0800f633 	.word	0x0800f633
 800f480:	0800f629 	.word	0x0800f629
 800f484:	0800f43d 	.word	0x0800f43d
 800f488:	0800f43d 	.word	0x0800f43d
 800f48c:	0800f5ad 	.word	0x0800f5ad
 800f490:	0800f545 	.word	0x0800f545
 800f494:	0800f505 	.word	0x0800f505
 800f498:	0800f43d 	.word	0x0800f43d
 800f49c:	0800f43d 	.word	0x0800f43d
 800f4a0:	0800f43d 	.word	0x0800f43d
 800f4a4:	0800f4a9 	.word	0x0800f4a9
 800f4a8:	a910      	add	r1, sp, #64	@ 0x40
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	f002 fe0e 	bl	80120cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f4b0:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800f4b4:	2e00      	cmp	r6, #0
 800f4b6:	f000 8100 	beq.w	800f6ba <read_submessage_list+0x28a>
 800f4ba:	f001 fc6d 	bl	8010d98 <uxr_nanos>
 800f4be:	f04f 0800 	mov.w	r8, #0
 800f4c2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f4ca:	4990      	ldr	r1, [pc, #576]	@ (800f70c <read_submessage_list+0x2dc>)
 800f4cc:	46c4      	mov	ip, r8
 800f4ce:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800f4d2:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f4d6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f4d8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f4da:	46c6      	mov	lr, r8
 800f4dc:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800f4e0:	46bc      	mov	ip, r7
 800f4e2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f4e6:	fbc0 7801 	smlal	r7, r8, r0, r1
 800f4ea:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800f4ee:	e9cd 7800 	strd	r7, r8, [sp]
 800f4f2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f4f6:	9106      	str	r1, [sp, #24]
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	47b0      	blx	r6
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800f502:	e79b      	b.n	800f43c <read_submessage_list+0xc>
 800f504:	a910      	add	r1, sp, #64	@ 0x40
 800f506:	4628      	mov	r0, r5
 800f508:	f002 fdce 	bl	80120a8 <uxr_deserialize_HEARTBEAT_Payload>
 800f50c:	2100      	movs	r1, #0
 800f50e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f512:	f001 fae1 	bl	8010ad8 <uxr_stream_id_from_raw>
 800f516:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f51a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f51c:	4631      	mov	r1, r6
 800f51e:	f104 0008 	add.w	r0, r4, #8
 800f522:	f001 fbb9 	bl	8010c98 <uxr_get_input_reliable_stream>
 800f526:	2800      	cmp	r0, #0
 800f528:	d088      	beq.n	800f43c <read_submessage_list+0xc>
 800f52a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f52e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f532:	f008 fb89 	bl	8017c48 <uxr_process_heartbeat>
 800f536:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f53a:	4632      	mov	r2, r6
 800f53c:	4620      	mov	r0, r4
 800f53e:	f7ff fe1b 	bl	800f178 <write_submessage_acknack.isra.0>
 800f542:	e77b      	b.n	800f43c <read_submessage_list+0xc>
 800f544:	a910      	add	r1, sp, #64	@ 0x40
 800f546:	4628      	mov	r0, r5
 800f548:	f002 fd86 	bl	8012058 <uxr_deserialize_ACKNACK_Payload>
 800f54c:	2100      	movs	r1, #0
 800f54e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f552:	f001 fac1 	bl	8010ad8 <uxr_stream_id_from_raw>
 800f556:	900d      	str	r0, [sp, #52]	@ 0x34
 800f558:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f55c:	f104 0008 	add.w	r0, r4, #8
 800f560:	f001 fb86 	bl	8010c70 <uxr_get_output_reliable_stream>
 800f564:	4606      	mov	r6, r0
 800f566:	2800      	cmp	r0, #0
 800f568:	f43f af68 	beq.w	800f43c <read_submessage_list+0xc>
 800f56c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800f570:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f574:	ba49      	rev16	r1, r1
 800f576:	b289      	uxth	r1, r1
 800f578:	f008 feb4 	bl	80182e4 <uxr_process_acknack>
 800f57c:	4630      	mov	r0, r6
 800f57e:	f008 fe75 	bl	801826c <uxr_begin_output_nack_buffer_it>
 800f582:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f586:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f58a:	e005      	b.n	800f598 <read_submessage_list+0x168>
 800f58c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f58e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f590:	685f      	ldr	r7, [r3, #4]
 800f592:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f594:	6818      	ldr	r0, [r3, #0]
 800f596:	47b8      	blx	r7
 800f598:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f59c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f59e:	4641      	mov	r1, r8
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f008 fe65 	bl	8018270 <uxr_next_reliable_nack_buffer_to_send>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d1f0      	bne.n	800f58c <read_submessage_list+0x15c>
 800f5aa:	e747      	b.n	800f43c <read_submessage_list+0xc>
 800f5ac:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f5b0:	4641      	mov	r1, r8
 800f5b2:	900d      	str	r0, [sp, #52]	@ 0x34
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	f002 fab5 	bl	8011b24 <uxr_deserialize_BaseObjectRequest>
 800f5ba:	3e04      	subs	r6, #4
 800f5bc:	4640      	mov	r0, r8
 800f5be:	a90f      	add	r1, sp, #60	@ 0x3c
 800f5c0:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f5c4:	f000 fdf6 	bl	80101b4 <uxr_parse_base_object_request>
 800f5c8:	fa1f f886 	uxth.w	r8, r6
 800f5cc:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800f5d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f5d2:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800f5d6:	9110      	str	r1, [sp, #64]	@ 0x40
 800f5d8:	f007 070e 	and.w	r7, r7, #14
 800f5dc:	b136      	cbz	r6, 800f5ec <read_submessage_list+0x1bc>
 800f5de:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	464a      	mov	r2, r9
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	47b0      	blx	r6
 800f5ec:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800f5ee:	b16b      	cbz	r3, 800f60c <read_submessage_list+0x1dc>
 800f5f0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	3802      	subs	r0, #2
 800f5f6:	e002      	b.n	800f5fe <read_submessage_list+0x1ce>
 800f5f8:	3101      	adds	r1, #1
 800f5fa:	428b      	cmp	r3, r1
 800f5fc:	d006      	beq.n	800f60c <read_submessage_list+0x1dc>
 800f5fe:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800f602:	454e      	cmp	r6, r9
 800f604:	d1f8      	bne.n	800f5f8 <read_submessage_list+0x1c8>
 800f606:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f608:	2200      	movs	r2, #0
 800f60a:	545a      	strb	r2, [r3, r1]
 800f60c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f610:	9102      	str	r1, [sp, #8]
 800f612:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f614:	9101      	str	r1, [sp, #4]
 800f616:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f618:	9100      	str	r1, [sp, #0]
 800f61a:	463b      	mov	r3, r7
 800f61c:	4642      	mov	r2, r8
 800f61e:	4629      	mov	r1, r5
 800f620:	4620      	mov	r0, r4
 800f622:	f008 ff17 	bl	8018454 <read_submessage_format>
 800f626:	e709      	b.n	800f43c <read_submessage_list+0xc>
 800f628:	4629      	mov	r1, r5
 800f62a:	4620      	mov	r0, r4
 800f62c:	f7ff feb8 	bl	800f3a0 <read_submessage_info>
 800f630:	e704      	b.n	800f43c <read_submessage_list+0xc>
 800f632:	2b00      	cmp	r3, #0
 800f634:	d03c      	beq.n	800f6b0 <read_submessage_list+0x280>
 800f636:	a910      	add	r1, sp, #64	@ 0x40
 800f638:	4628      	mov	r0, r5
 800f63a:	f002 fc69 	bl	8011f10 <uxr_deserialize_STATUS_Payload>
 800f63e:	a90e      	add	r1, sp, #56	@ 0x38
 800f640:	a810      	add	r0, sp, #64	@ 0x40
 800f642:	aa0d      	add	r2, sp, #52	@ 0x34
 800f644:	f000 fdb6 	bl	80101b4 <uxr_parse_base_object_request>
 800f648:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800f64c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f64e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800f652:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f656:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f658:	b136      	cbz	r6, 800f668 <read_submessage_list+0x238>
 800f65a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	463a      	mov	r2, r7
 800f662:	4643      	mov	r3, r8
 800f664:	4620      	mov	r0, r4
 800f666:	47b0      	blx	r6
 800f668:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f66a:	2a00      	cmp	r2, #0
 800f66c:	f43f aee6 	beq.w	800f43c <read_submessage_list+0xc>
 800f670:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f672:	2100      	movs	r1, #0
 800f674:	3802      	subs	r0, #2
 800f676:	e003      	b.n	800f680 <read_submessage_list+0x250>
 800f678:	3101      	adds	r1, #1
 800f67a:	4291      	cmp	r1, r2
 800f67c:	f43f aede 	beq.w	800f43c <read_submessage_list+0xc>
 800f680:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800f684:	42be      	cmp	r6, r7
 800f686:	d1f7      	bne.n	800f678 <read_submessage_list+0x248>
 800f688:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f68a:	f803 8001 	strb.w	r8, [r3, r1]
 800f68e:	e6d5      	b.n	800f43c <read_submessage_list+0xc>
 800f690:	2b00      	cmp	r3, #0
 800f692:	f47f aed3 	bne.w	800f43c <read_submessage_list+0xc>
 800f696:	4629      	mov	r1, r5
 800f698:	4620      	mov	r0, r4
 800f69a:	f000 fcd3 	bl	8010044 <uxr_read_create_session_status>
 800f69e:	e6cd      	b.n	800f43c <read_submessage_list+0xc>
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f7ff fd32 	bl	800f10c <read_submessage_get_info>
 800f6a8:	e6c8      	b.n	800f43c <read_submessage_list+0xc>
 800f6aa:	b017      	add	sp, #92	@ 0x5c
 800f6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f000 fcd4 	bl	8010060 <uxr_read_delete_session_status>
 800f6b8:	e6c0      	b.n	800f43c <read_submessage_list+0xc>
 800f6ba:	f001 fb6d 	bl	8010d98 <uxr_nanos>
 800f6be:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800f6c2:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800f70c <read_submessage_list+0x2dc>
 800f6c6:	4633      	mov	r3, r6
 800f6c8:	fbc7 230c 	smlal	r2, r3, r7, ip
 800f6cc:	1810      	adds	r0, r2, r0
 800f6ce:	eb43 0301 	adc.w	r3, r3, r1
 800f6d2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800f6d6:	46b6      	mov	lr, r6
 800f6d8:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800f6dc:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800f6e0:	fbc1 760c 	smlal	r7, r6, r1, ip
 800f6e4:	19d2      	adds	r2, r2, r7
 800f6e6:	eb4e 0106 	adc.w	r1, lr, r6
 800f6ea:	1a80      	subs	r0, r0, r2
 800f6ec:	eb63 0301 	sbc.w	r3, r3, r1
 800f6f0:	0fda      	lsrs	r2, r3, #31
 800f6f2:	1812      	adds	r2, r2, r0
 800f6f4:	f143 0300 	adc.w	r3, r3, #0
 800f6f8:	0852      	lsrs	r2, r2, #1
 800f6fa:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f6fe:	105b      	asrs	r3, r3, #1
 800f700:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f704:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f708:	e6f8      	b.n	800f4fc <read_submessage_list+0xcc>
 800f70a:	bf00      	nop
 800f70c:	3b9aca00 	.word	0x3b9aca00

0800f710 <listen_message_reliably>:
 800f710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f714:	f1b1 0b00 	subs.w	fp, r1, #0
 800f718:	b09f      	sub	sp, #124	@ 0x7c
 800f71a:	4606      	mov	r6, r0
 800f71c:	bfb8      	it	lt
 800f71e:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800f722:	f001 fb1f 	bl	8010d64 <uxr_millis>
 800f726:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f72a:	9003      	str	r0, [sp, #12]
 800f72c:	9104      	str	r1, [sp, #16]
 800f72e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800f732:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 80a4 	beq.w	800f884 <listen_message_reliably+0x174>
 800f73c:	2500      	movs	r5, #0
 800f73e:	e9cd b806 	strd	fp, r8, [sp, #24]
 800f742:	f106 0420 	add.w	r4, r6, #32
 800f746:	f04f 37ff 	mov.w	r7, #4294967295
 800f74a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800f74e:	4628      	mov	r0, r5
 800f750:	e011      	b.n	800f776 <listen_message_reliably+0x66>
 800f752:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800f756:	42ba      	cmp	r2, r7
 800f758:	eb73 0109 	sbcs.w	r1, r3, r9
 800f75c:	bfb8      	it	lt
 800f75e:	4699      	movlt	r9, r3
 800f760:	f105 0501 	add.w	r5, r5, #1
 800f764:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f768:	b2e8      	uxtb	r0, r5
 800f76a:	bfb8      	it	lt
 800f76c:	4617      	movlt	r7, r2
 800f76e:	4283      	cmp	r3, r0
 800f770:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800f774:	d94a      	bls.n	800f80c <listen_message_reliably+0xfc>
 800f776:	2201      	movs	r2, #1
 800f778:	2102      	movs	r1, #2
 800f77a:	f001 f991 	bl	8010aa0 <uxr_stream_id>
 800f77e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800f782:	4601      	mov	r1, r0
 800f784:	4620      	mov	r0, r4
 800f786:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f788:	f008 fd40 	bl	801820c <uxr_update_output_stream_heartbeat_timestamp>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d0e0      	beq.n	800f752 <listen_message_reliably+0x42>
 800f790:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800f794:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800f798:	9305      	str	r3, [sp, #20]
 800f79a:	4630      	mov	r0, r6
 800f79c:	f000 fce4 	bl	8010168 <uxr_session_header_offset>
 800f7a0:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800f7a4:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800f7a8:	9000      	str	r0, [sp, #0]
 800f7aa:	a90e      	add	r1, sp, #56	@ 0x38
 800f7ac:	4640      	mov	r0, r8
 800f7ae:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	2211      	movs	r2, #17
 800f7b6:	f7fe ff7b 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	2205      	movs	r2, #5
 800f7be:	210b      	movs	r1, #11
 800f7c0:	4640      	mov	r0, r8
 800f7c2:	f001 fa89 	bl	8010cd8 <uxr_buffer_submessage_header>
 800f7c6:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800f7ca:	2101      	movs	r1, #1
 800f7cc:	f008 ff16 	bl	80185fc <uxr_seq_num_add>
 800f7d0:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800f7d4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800f7d8:	4602      	mov	r2, r0
 800f7da:	9b05      	ldr	r3, [sp, #20]
 800f7dc:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800f7e0:	a90c      	add	r1, sp, #48	@ 0x30
 800f7e2:	4640      	mov	r0, r8
 800f7e4:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f7e8:	f002 fc4a 	bl	8012080 <uxr_serialize_HEARTBEAT_Payload>
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f000 fc64 	bl	80100c0 <uxr_stamp_session_header>
 800f7f8:	4640      	mov	r0, r8
 800f7fa:	f7fe ff97 	bl	800e72c <ucdr_buffer_length>
 800f7fe:	4602      	mov	r2, r0
 800f800:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800f802:	a90e      	add	r1, sp, #56	@ 0x38
 800f804:	e9d0 0300 	ldrd	r0, r3, [r0]
 800f808:	4798      	blx	r3
 800f80a:	e7a2      	b.n	800f752 <listen_message_reliably+0x42>
 800f80c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f810:	4599      	cmp	r9, r3
 800f812:	bf08      	it	eq
 800f814:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 800f818:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800f81c:	d032      	beq.n	800f884 <listen_message_reliably+0x174>
 800f81e:	9b03      	ldr	r3, [sp, #12]
 800f820:	1aff      	subs	r7, r7, r3
 800f822:	2f00      	cmp	r7, #0
 800f824:	bf08      	it	eq
 800f826:	2701      	moveq	r7, #1
 800f828:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800f82a:	455f      	cmp	r7, fp
 800f82c:	bfa8      	it	ge
 800f82e:	465f      	movge	r7, fp
 800f830:	689c      	ldr	r4, [r3, #8]
 800f832:	6818      	ldr	r0, [r3, #0]
 800f834:	4642      	mov	r2, r8
 800f836:	463b      	mov	r3, r7
 800f838:	4651      	mov	r1, sl
 800f83a:	47a0      	blx	r4
 800f83c:	ebab 0b07 	sub.w	fp, fp, r7
 800f840:	b958      	cbnz	r0, 800f85a <listen_message_reliably+0x14a>
 800f842:	f1bb 0f00 	cmp.w	fp, #0
 800f846:	dd44      	ble.n	800f8d2 <listen_message_reliably+0x1c2>
 800f848:	f001 fa8c 	bl	8010d64 <uxr_millis>
 800f84c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f850:	2b00      	cmp	r3, #0
 800f852:	d03c      	beq.n	800f8ce <listen_message_reliably+0x1be>
 800f854:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800f858:	e770      	b.n	800f73c <listen_message_reliably+0x2c>
 800f85a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800f85e:	4604      	mov	r4, r0
 800f860:	a80e      	add	r0, sp, #56	@ 0x38
 800f862:	f7fe ff37 	bl	800e6d4 <ucdr_init_buffer>
 800f866:	2500      	movs	r5, #0
 800f868:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800f86c:	aa08      	add	r2, sp, #32
 800f86e:	a90e      	add	r1, sp, #56	@ 0x38
 800f870:	4630      	mov	r0, r6
 800f872:	f88d 5020 	strb.w	r5, [sp, #32]
 800f876:	f000 fc39 	bl	80100ec <uxr_read_session_header>
 800f87a:	b928      	cbnz	r0, 800f888 <listen_message_reliably+0x178>
 800f87c:	4620      	mov	r0, r4
 800f87e:	b01f      	add	sp, #124	@ 0x7c
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	465f      	mov	r7, fp
 800f886:	e7cc      	b.n	800f822 <listen_message_reliably+0x112>
 800f888:	4629      	mov	r1, r5
 800f88a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800f88e:	f001 f923 	bl	8010ad8 <uxr_stream_id_from_raw>
 800f892:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f896:	2f01      	cmp	r7, #1
 800f898:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800f89c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800f8a0:	fa5f f880 	uxtb.w	r8, r0
 800f8a4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800f8a8:	d050      	beq.n	800f94c <listen_message_reliably+0x23c>
 800f8aa:	2f02      	cmp	r7, #2
 800f8ac:	d016      	beq.n	800f8dc <listen_message_reliably+0x1cc>
 800f8ae:	2f00      	cmp	r7, #0
 800f8b0:	d1e4      	bne.n	800f87c <listen_message_reliably+0x16c>
 800f8b2:	4639      	mov	r1, r7
 800f8b4:	4638      	mov	r0, r7
 800f8b6:	f001 f90f 	bl	8010ad8 <uxr_stream_id_from_raw>
 800f8ba:	a90e      	add	r1, sp, #56	@ 0x38
 800f8bc:	4602      	mov	r2, r0
 800f8be:	4630      	mov	r0, r6
 800f8c0:	920c      	str	r2, [sp, #48]	@ 0x30
 800f8c2:	f7ff fdb5 	bl	800f430 <read_submessage_list>
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	b01f      	add	sp, #124	@ 0x7c
 800f8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ce:	465f      	mov	r7, fp
 800f8d0:	e7aa      	b.n	800f828 <listen_message_reliably+0x118>
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	b01f      	add	sp, #124	@ 0x7c
 800f8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8dc:	4629      	mov	r1, r5
 800f8de:	f106 0008 	add.w	r0, r6, #8
 800f8e2:	f001 f9d9 	bl	8010c98 <uxr_get_input_reliable_stream>
 800f8e6:	4681      	mov	r9, r0
 800f8e8:	b338      	cbz	r0, 800f93a <listen_message_reliably+0x22a>
 800f8ea:	a80e      	add	r0, sp, #56	@ 0x38
 800f8ec:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800f8f0:	f7fe ff20 	bl	800e734 <ucdr_buffer_remaining>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800f8fa:	9000      	str	r0, [sp, #0]
 800f8fc:	465a      	mov	r2, fp
 800f8fe:	4651      	mov	r1, sl
 800f900:	4648      	mov	r0, r9
 800f902:	f008 f8af 	bl	8017a64 <uxr_receive_reliable_message>
 800f906:	b1c0      	cbz	r0, 800f93a <listen_message_reliably+0x22a>
 800f908:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800f90c:	b393      	cbz	r3, 800f974 <listen_message_reliably+0x264>
 800f90e:	af16      	add	r7, sp, #88	@ 0x58
 800f910:	f04f 0a02 	mov.w	sl, #2
 800f914:	e00a      	b.n	800f92c <listen_message_reliably+0x21c>
 800f916:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800f91a:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800f91e:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800f922:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f924:	4639      	mov	r1, r7
 800f926:	4630      	mov	r0, r6
 800f928:	f7ff fd82 	bl	800f430 <read_submessage_list>
 800f92c:	2204      	movs	r2, #4
 800f92e:	4639      	mov	r1, r7
 800f930:	4648      	mov	r0, r9
 800f932:	f008 f911 	bl	8017b58 <uxr_next_input_reliable_buffer_available>
 800f936:	2800      	cmp	r0, #0
 800f938:	d1ed      	bne.n	800f916 <listen_message_reliably+0x206>
 800f93a:	4630      	mov	r0, r6
 800f93c:	462a      	mov	r2, r5
 800f93e:	4641      	mov	r1, r8
 800f940:	f7ff fc1a 	bl	800f178 <write_submessage_acknack.isra.0>
 800f944:	4620      	mov	r0, r4
 800f946:	b01f      	add	sp, #124	@ 0x7c
 800f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f94c:	4629      	mov	r1, r5
 800f94e:	f106 0008 	add.w	r0, r6, #8
 800f952:	f001 f997 	bl	8010c84 <uxr_get_input_best_effort_stream>
 800f956:	2800      	cmp	r0, #0
 800f958:	d090      	beq.n	800f87c <listen_message_reliably+0x16c>
 800f95a:	4651      	mov	r1, sl
 800f95c:	f007 fff2 	bl	8017944 <uxr_receive_best_effort_message>
 800f960:	2800      	cmp	r0, #0
 800f962:	d08b      	beq.n	800f87c <listen_message_reliably+0x16c>
 800f964:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800f968:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f96a:	a90e      	add	r1, sp, #56	@ 0x38
 800f96c:	4630      	mov	r0, r6
 800f96e:	f7ff fd5f 	bl	800f430 <read_submessage_list>
 800f972:	e783      	b.n	800f87c <listen_message_reliably+0x16c>
 800f974:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800f978:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f97a:	a90e      	add	r1, sp, #56	@ 0x38
 800f97c:	4630      	mov	r0, r6
 800f97e:	f7ff fd57 	bl	800f430 <read_submessage_list>
 800f982:	e7c4      	b.n	800f90e <listen_message_reliably+0x1fe>

0800f984 <uxr_run_session_timeout>:
 800f984:	b570      	push	{r4, r5, r6, lr}
 800f986:	4604      	mov	r4, r0
 800f988:	460d      	mov	r5, r1
 800f98a:	f001 f9eb 	bl	8010d64 <uxr_millis>
 800f98e:	4606      	mov	r6, r0
 800f990:	4620      	mov	r0, r4
 800f992:	f7ff fc99 	bl	800f2c8 <uxr_flash_output_streams>
 800f996:	4629      	mov	r1, r5
 800f998:	4620      	mov	r0, r4
 800f99a:	f7ff feb9 	bl	800f710 <listen_message_reliably>
 800f99e:	f001 f9e1 	bl	8010d64 <uxr_millis>
 800f9a2:	1b81      	subs	r1, r0, r6
 800f9a4:	1a69      	subs	r1, r5, r1
 800f9a6:	2900      	cmp	r1, #0
 800f9a8:	dcf6      	bgt.n	800f998 <uxr_run_session_timeout+0x14>
 800f9aa:	f104 0008 	add.w	r0, r4, #8
 800f9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9b2:	f001 b97b 	b.w	8010cac <uxr_output_streams_confirmed>
 800f9b6:	bf00      	nop

0800f9b8 <uxr_run_session_until_data>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	460d      	mov	r5, r1
 800f9be:	f001 f9d1 	bl	8010d64 <uxr_millis>
 800f9c2:	4606      	mov	r6, r0
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f7ff fc7f 	bl	800f2c8 <uxr_flash_output_streams>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f9d0:	4629      	mov	r1, r5
 800f9d2:	e005      	b.n	800f9e0 <uxr_run_session_until_data+0x28>
 800f9d4:	f001 f9c6 	bl	8010d64 <uxr_millis>
 800f9d8:	1b81      	subs	r1, r0, r6
 800f9da:	1a69      	subs	r1, r5, r1
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	dd07      	ble.n	800f9f0 <uxr_run_session_until_data+0x38>
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f7ff fe95 	bl	800f710 <listen_message_reliably>
 800f9e6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d0f2      	beq.n	800f9d4 <uxr_run_session_until_data+0x1c>
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}
 800f9f0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f9f4:	bd70      	pop	{r4, r5, r6, pc}
 800f9f6:	bf00      	nop

0800f9f8 <uxr_run_session_until_confirm_delivery>:
 800f9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	460d      	mov	r5, r1
 800fa00:	f001 f9b0 	bl	8010d64 <uxr_millis>
 800fa04:	4607      	mov	r7, r0
 800fa06:	4630      	mov	r0, r6
 800fa08:	f7ff fc5e 	bl	800f2c8 <uxr_flash_output_streams>
 800fa0c:	2d00      	cmp	r5, #0
 800fa0e:	db16      	blt.n	800fa3e <uxr_run_session_until_confirm_delivery+0x46>
 800fa10:	462c      	mov	r4, r5
 800fa12:	f106 0808 	add.w	r8, r6, #8
 800fa16:	e008      	b.n	800fa2a <uxr_run_session_until_confirm_delivery+0x32>
 800fa18:	4621      	mov	r1, r4
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f7ff fe78 	bl	800f710 <listen_message_reliably>
 800fa20:	f001 f9a0 	bl	8010d64 <uxr_millis>
 800fa24:	1bc1      	subs	r1, r0, r7
 800fa26:	1a6c      	subs	r4, r5, r1
 800fa28:	d404      	bmi.n	800fa34 <uxr_run_session_until_confirm_delivery+0x3c>
 800fa2a:	4640      	mov	r0, r8
 800fa2c:	f001 f93e 	bl	8010cac <uxr_output_streams_confirmed>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d0f1      	beq.n	800fa18 <uxr_run_session_until_confirm_delivery+0x20>
 800fa34:	4640      	mov	r0, r8
 800fa36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3a:	f001 b937 	b.w	8010cac <uxr_output_streams_confirmed>
 800fa3e:	f106 0808 	add.w	r8, r6, #8
 800fa42:	e7f7      	b.n	800fa34 <uxr_run_session_until_confirm_delivery+0x3c>

0800fa44 <uxr_run_session_until_all_status>:
 800fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa48:	9c08      	ldr	r4, [sp, #32]
 800fa4a:	4605      	mov	r5, r0
 800fa4c:	460f      	mov	r7, r1
 800fa4e:	4690      	mov	r8, r2
 800fa50:	461e      	mov	r6, r3
 800fa52:	f7ff fc39 	bl	800f2c8 <uxr_flash_output_streams>
 800fa56:	b124      	cbz	r4, 800fa62 <uxr_run_session_until_all_status+0x1e>
 800fa58:	4622      	mov	r2, r4
 800fa5a:	21ff      	movs	r1, #255	@ 0xff
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f00a f9ed 	bl	8019e3c <memset>
 800fa62:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800fa66:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800fa68:	f001 f97c 	bl	8010d64 <uxr_millis>
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	4681      	mov	r9, r0
 800fa70:	4628      	mov	r0, r5
 800fa72:	f7ff fe4d 	bl	800f710 <listen_message_reliably>
 800fa76:	f001 f975 	bl	8010d64 <uxr_millis>
 800fa7a:	eba0 0109 	sub.w	r1, r0, r9
 800fa7e:	1a79      	subs	r1, r7, r1
 800fa80:	b36c      	cbz	r4, 800fade <uxr_run_session_until_all_status+0x9a>
 800fa82:	1e70      	subs	r0, r6, #1
 800fa84:	46c6      	mov	lr, r8
 800fa86:	1902      	adds	r2, r0, r4
 800fa88:	4684      	mov	ip, r0
 800fa8a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800fa8e:	2bff      	cmp	r3, #255	@ 0xff
 800fa90:	d007      	beq.n	800faa2 <uxr_run_session_until_all_status+0x5e>
 800fa92:	4594      	cmp	ip, r2
 800fa94:	d00f      	beq.n	800fab6 <uxr_run_session_until_all_status+0x72>
 800fa96:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800fa9a:	2bff      	cmp	r3, #255	@ 0xff
 800fa9c:	f10e 0e02 	add.w	lr, lr, #2
 800faa0:	d1f7      	bne.n	800fa92 <uxr_run_session_until_all_status+0x4e>
 800faa2:	4594      	cmp	ip, r2
 800faa4:	f8be 3000 	ldrh.w	r3, [lr]
 800faa8:	d014      	beq.n	800fad4 <uxr_run_session_until_all_status+0x90>
 800faaa:	f10e 0e02 	add.w	lr, lr, #2
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d0eb      	beq.n	800fa8a <uxr_run_session_until_all_status+0x46>
 800fab2:	2900      	cmp	r1, #0
 800fab4:	dcdc      	bgt.n	800fa70 <uxr_run_session_until_all_status+0x2c>
 800fab6:	2300      	movs	r3, #0
 800fab8:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800faba:	e001      	b.n	800fac0 <uxr_run_session_until_all_status+0x7c>
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d812      	bhi.n	800fae6 <uxr_run_session_until_all_status+0xa2>
 800fac0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800fac4:	4290      	cmp	r0, r2
 800fac6:	d1f9      	bne.n	800fabc <uxr_run_session_until_all_status+0x78>
 800fac8:	2b01      	cmp	r3, #1
 800faca:	bf8c      	ite	hi
 800facc:	2000      	movhi	r0, #0
 800face:	2001      	movls	r0, #1
 800fad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad4:	2900      	cmp	r1, #0
 800fad6:	ddee      	ble.n	800fab6 <uxr_run_session_until_all_status+0x72>
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1c9      	bne.n	800fa70 <uxr_run_session_until_all_status+0x2c>
 800fadc:	e7eb      	b.n	800fab6 <uxr_run_session_until_all_status+0x72>
 800fade:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800fae0:	2001      	movs	r0, #1
 800fae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fae6:	2000      	movs	r0, #0
 800fae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800faec <uxr_run_session_until_pong>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	4604      	mov	r4, r0
 800faf0:	460d      	mov	r5, r1
 800faf2:	f001 f937 	bl	8010d64 <uxr_millis>
 800faf6:	4606      	mov	r6, r0
 800faf8:	4620      	mov	r0, r4
 800fafa:	f7ff fbe5 	bl	800f2c8 <uxr_flash_output_streams>
 800fafe:	2300      	movs	r3, #0
 800fb00:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 800fb04:	4629      	mov	r1, r5
 800fb06:	e005      	b.n	800fb14 <uxr_run_session_until_pong+0x28>
 800fb08:	f001 f92c 	bl	8010d64 <uxr_millis>
 800fb0c:	1b81      	subs	r1, r0, r6
 800fb0e:	1a69      	subs	r1, r5, r1
 800fb10:	2900      	cmp	r1, #0
 800fb12:	dd0c      	ble.n	800fb2e <uxr_run_session_until_pong+0x42>
 800fb14:	4620      	mov	r0, r4
 800fb16:	f7ff fdfb 	bl	800f710 <listen_message_reliably>
 800fb1a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d0f2      	beq.n	800fb08 <uxr_run_session_until_pong+0x1c>
 800fb22:	f1a0 0001 	sub.w	r0, r0, #1
 800fb26:	fab0 f080 	clz	r0, r0
 800fb2a:	0940      	lsrs	r0, r0, #5
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
 800fb2e:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800fb32:	f1a0 0001 	sub.w	r0, r0, #1
 800fb36:	fab0 f080 	clz	r0, r0
 800fb3a:	0940      	lsrs	r0, r0, #5
 800fb3c:	bd70      	pop	{r4, r5, r6, pc}
 800fb3e:	bf00      	nop

0800fb40 <wait_session_status>:
 800fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	4604      	mov	r4, r0
 800fb46:	20ff      	movs	r0, #255	@ 0xff
 800fb48:	b09f      	sub	sp, #124	@ 0x7c
 800fb4a:	7160      	strb	r0, [r4, #5]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 80bb 	beq.w	800fcc8 <wait_session_status+0x188>
 800fb52:	4692      	mov	sl, r2
 800fb54:	469b      	mov	fp, r3
 800fb56:	f04f 0800 	mov.w	r8, #0
 800fb5a:	9105      	str	r1, [sp, #20]
 800fb5c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb5e:	9905      	ldr	r1, [sp, #20]
 800fb60:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fb64:	4652      	mov	r2, sl
 800fb66:	47a8      	blx	r5
 800fb68:	f001 f8fc 	bl	8010d64 <uxr_millis>
 800fb6c:	2700      	movs	r7, #0
 800fb6e:	4605      	mov	r5, r0
 800fb70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb74:	e009      	b.n	800fb8a <wait_session_status+0x4a>
 800fb76:	f001 f8f5 	bl	8010d64 <uxr_millis>
 800fb7a:	1b43      	subs	r3, r0, r5
 800fb7c:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	7962      	ldrb	r2, [r4, #5]
 800fb84:	dd3d      	ble.n	800fc02 <wait_session_status+0xc2>
 800fb86:	2aff      	cmp	r2, #255	@ 0xff
 800fb88:	d13b      	bne.n	800fc02 <wait_session_status+0xc2>
 800fb8a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fb8c:	a90a      	add	r1, sp, #40	@ 0x28
 800fb8e:	6896      	ldr	r6, [r2, #8]
 800fb90:	6810      	ldr	r0, [r2, #0]
 800fb92:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fb94:	47b0      	blx	r6
 800fb96:	2800      	cmp	r0, #0
 800fb98:	d0ed      	beq.n	800fb76 <wait_session_status+0x36>
 800fb9a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800fb9e:	a80e      	add	r0, sp, #56	@ 0x38
 800fba0:	f7fe fd98 	bl	800e6d4 <ucdr_init_buffer>
 800fba4:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800fba8:	aa09      	add	r2, sp, #36	@ 0x24
 800fbaa:	a90e      	add	r1, sp, #56	@ 0x38
 800fbac:	4620      	mov	r0, r4
 800fbae:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800fbb2:	f000 fa9b 	bl	80100ec <uxr_read_session_header>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d0dd      	beq.n	800fb76 <wait_session_status+0x36>
 800fbba:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	f000 ff8a 	bl	8010ad8 <uxr_stream_id_from_raw>
 800fbc4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800fbc8:	9304      	str	r3, [sp, #16]
 800fbca:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800fbce:	b2c3      	uxtb	r3, r0
 800fbd0:	f1b9 0f01 	cmp.w	r9, #1
 800fbd4:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800fbd8:	9303      	str	r3, [sp, #12]
 800fbda:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fbde:	d05d      	beq.n	800fc9c <wait_session_status+0x15c>
 800fbe0:	f1b9 0f02 	cmp.w	r9, #2
 800fbe4:	d01a      	beq.n	800fc1c <wait_session_status+0xdc>
 800fbe6:	f1b9 0f00 	cmp.w	r9, #0
 800fbea:	d1c4      	bne.n	800fb76 <wait_session_status+0x36>
 800fbec:	4649      	mov	r1, r9
 800fbee:	4648      	mov	r0, r9
 800fbf0:	f000 ff72 	bl	8010ad8 <uxr_stream_id_from_raw>
 800fbf4:	a90e      	add	r1, sp, #56	@ 0x38
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	900d      	str	r0, [sp, #52]	@ 0x34
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f7ff fc18 	bl	800f430 <read_submessage_list>
 800fc00:	e7b9      	b.n	800fb76 <wait_session_status+0x36>
 800fc02:	f108 0801 	add.w	r8, r8, #1
 800fc06:	45c3      	cmp	fp, r8
 800fc08:	d001      	beq.n	800fc0e <wait_session_status+0xce>
 800fc0a:	2aff      	cmp	r2, #255	@ 0xff
 800fc0c:	d0a6      	beq.n	800fb5c <wait_session_status+0x1c>
 800fc0e:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800fc12:	bf18      	it	ne
 800fc14:	2001      	movne	r0, #1
 800fc16:	b01f      	add	sp, #124	@ 0x7c
 800fc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	f104 0008 	add.w	r0, r4, #8
 800fc22:	f001 f839 	bl	8010c98 <uxr_get_input_reliable_stream>
 800fc26:	9006      	str	r0, [sp, #24]
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	d031      	beq.n	800fc90 <wait_session_status+0x150>
 800fc2c:	aa0e      	add	r2, sp, #56	@ 0x38
 800fc2e:	4610      	mov	r0, r2
 800fc30:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800fc32:	9207      	str	r2, [sp, #28]
 800fc34:	f7fe fd7e 	bl	800e734 <ucdr_buffer_remaining>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800fc3e:	9000      	str	r0, [sp, #0]
 800fc40:	9a07      	ldr	r2, [sp, #28]
 800fc42:	9904      	ldr	r1, [sp, #16]
 800fc44:	9806      	ldr	r0, [sp, #24]
 800fc46:	f007 ff0d 	bl	8017a64 <uxr_receive_reliable_message>
 800fc4a:	b308      	cbz	r0, 800fc90 <wait_session_status+0x150>
 800fc4c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d041      	beq.n	800fcd8 <wait_session_status+0x198>
 800fc54:	f8cd 8010 	str.w	r8, [sp, #16]
 800fc58:	9507      	str	r5, [sp, #28]
 800fc5a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fc5e:	9d06      	ldr	r5, [sp, #24]
 800fc60:	f04f 0902 	mov.w	r9, #2
 800fc64:	e00a      	b.n	800fc7c <wait_session_status+0x13c>
 800fc66:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800fc6a:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800fc6e:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800fc72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc74:	a916      	add	r1, sp, #88	@ 0x58
 800fc76:	4620      	mov	r0, r4
 800fc78:	f7ff fbda 	bl	800f430 <read_submessage_list>
 800fc7c:	2204      	movs	r2, #4
 800fc7e:	a916      	add	r1, sp, #88	@ 0x58
 800fc80:	4628      	mov	r0, r5
 800fc82:	f007 ff69 	bl	8017b58 <uxr_next_input_reliable_buffer_available>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d1ed      	bne.n	800fc66 <wait_session_status+0x126>
 800fc8a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fc8e:	9d07      	ldr	r5, [sp, #28]
 800fc90:	9903      	ldr	r1, [sp, #12]
 800fc92:	4632      	mov	r2, r6
 800fc94:	4620      	mov	r0, r4
 800fc96:	f7ff fa6f 	bl	800f178 <write_submessage_acknack.isra.0>
 800fc9a:	e76c      	b.n	800fb76 <wait_session_status+0x36>
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	f104 0008 	add.w	r0, r4, #8
 800fca2:	f000 ffef 	bl	8010c84 <uxr_get_input_best_effort_stream>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	f43f af65 	beq.w	800fb76 <wait_session_status+0x36>
 800fcac:	9904      	ldr	r1, [sp, #16]
 800fcae:	f007 fe49 	bl	8017944 <uxr_receive_best_effort_message>
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	f43f af5f 	beq.w	800fb76 <wait_session_status+0x36>
 800fcb8:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800fcbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fcbe:	a90e      	add	r1, sp, #56	@ 0x38
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f7ff fbb5 	bl	800f430 <read_submessage_list>
 800fcc6:	e756      	b.n	800fb76 <wait_session_status+0x36>
 800fcc8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fcca:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fcce:	47a0      	blx	r4
 800fcd0:	2001      	movs	r0, #1
 800fcd2:	b01f      	add	sp, #124	@ 0x7c
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800fcdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fcde:	a90e      	add	r1, sp, #56	@ 0x38
 800fce0:	4620      	mov	r0, r4
 800fce2:	f7ff fba5 	bl	800f430 <read_submessage_list>
 800fce6:	e7b5      	b.n	800fc54 <wait_session_status+0x114>

0800fce8 <uxr_delete_session_retries>:
 800fce8:	b530      	push	{r4, r5, lr}
 800fcea:	b08f      	sub	sp, #60	@ 0x3c
 800fcec:	4604      	mov	r4, r0
 800fcee:	460d      	mov	r5, r1
 800fcf0:	f000 fa3a 	bl	8010168 <uxr_session_header_offset>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	2210      	movs	r2, #16
 800fcf8:	9000      	str	r0, [sp, #0]
 800fcfa:	a902      	add	r1, sp, #8
 800fcfc:	a806      	add	r0, sp, #24
 800fcfe:	f7fe fcd7 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 800fd02:	a906      	add	r1, sp, #24
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 f981 	bl	801000c <uxr_buffer_delete_session>
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	4611      	mov	r1, r2
 800fd0e:	9b06      	ldr	r3, [sp, #24]
 800fd10:	4620      	mov	r0, r4
 800fd12:	f000 f9d5 	bl	80100c0 <uxr_stamp_session_header>
 800fd16:	a806      	add	r0, sp, #24
 800fd18:	f7fe fd08 	bl	800e72c <ucdr_buffer_length>
 800fd1c:	462b      	mov	r3, r5
 800fd1e:	4602      	mov	r2, r0
 800fd20:	a902      	add	r1, sp, #8
 800fd22:	4620      	mov	r0, r4
 800fd24:	f7ff ff0c 	bl	800fb40 <wait_session_status>
 800fd28:	b118      	cbz	r0, 800fd32 <uxr_delete_session_retries+0x4a>
 800fd2a:	7960      	ldrb	r0, [r4, #5]
 800fd2c:	fab0 f080 	clz	r0, r0
 800fd30:	0940      	lsrs	r0, r0, #5
 800fd32:	b00f      	add	sp, #60	@ 0x3c
 800fd34:	bd30      	pop	{r4, r5, pc}
 800fd36:	bf00      	nop

0800fd38 <uxr_create_session>:
 800fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3c:	f100 0308 	add.w	r3, r0, #8
 800fd40:	b0ab      	sub	sp, #172	@ 0xac
 800fd42:	4604      	mov	r4, r0
 800fd44:	4618      	mov	r0, r3
 800fd46:	9303      	str	r3, [sp, #12]
 800fd48:	f000 feec 	bl	8010b24 <uxr_reset_stream_storage>
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f000 fa0b 	bl	8010168 <uxr_session_header_offset>
 800fd52:	2300      	movs	r3, #0
 800fd54:	9000      	str	r0, [sp, #0]
 800fd56:	221c      	movs	r2, #28
 800fd58:	a90b      	add	r1, sp, #44	@ 0x2c
 800fd5a:	a812      	add	r0, sp, #72	@ 0x48
 800fd5c:	f7fe fca8 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 800fd60:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd62:	8a1a      	ldrh	r2, [r3, #16]
 800fd64:	3a04      	subs	r2, #4
 800fd66:	b292      	uxth	r2, r2
 800fd68:	a912      	add	r1, sp, #72	@ 0x48
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f000 f924 	bl	800ffb8 <uxr_buffer_create_session>
 800fd70:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fd72:	4620      	mov	r0, r4
 800fd74:	f000 f990 	bl	8010098 <uxr_stamp_create_session_header>
 800fd78:	a812      	add	r0, sp, #72	@ 0x48
 800fd7a:	f7fe fcd7 	bl	800e72c <ucdr_buffer_length>
 800fd7e:	23ff      	movs	r3, #255	@ 0xff
 800fd80:	4683      	mov	fp, r0
 800fd82:	7163      	strb	r3, [r4, #5]
 800fd84:	f04f 080a 	mov.w	r8, #10
 800fd88:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd8a:	465a      	mov	r2, fp
 800fd8c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fd90:	a90b      	add	r1, sp, #44	@ 0x2c
 800fd92:	47a8      	blx	r5
 800fd94:	f000 ffe6 	bl	8010d64 <uxr_millis>
 800fd98:	2700      	movs	r7, #0
 800fd9a:	4605      	mov	r5, r0
 800fd9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fda0:	e009      	b.n	800fdb6 <uxr_create_session+0x7e>
 800fda2:	f000 ffdf 	bl	8010d64 <uxr_millis>
 800fda6:	1b43      	subs	r3, r0, r5
 800fda8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	7962      	ldrb	r2, [r4, #5]
 800fdb0:	dd3d      	ble.n	800fe2e <uxr_create_session+0xf6>
 800fdb2:	2aff      	cmp	r2, #255	@ 0xff
 800fdb4:	d13b      	bne.n	800fe2e <uxr_create_session+0xf6>
 800fdb6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fdb8:	a907      	add	r1, sp, #28
 800fdba:	6896      	ldr	r6, [r2, #8]
 800fdbc:	6810      	ldr	r0, [r2, #0]
 800fdbe:	aa08      	add	r2, sp, #32
 800fdc0:	47b0      	blx	r6
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d0ed      	beq.n	800fda2 <uxr_create_session+0x6a>
 800fdc6:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fdca:	a81a      	add	r0, sp, #104	@ 0x68
 800fdcc:	f7fe fc82 	bl	800e6d4 <ucdr_init_buffer>
 800fdd0:	f10d 031a 	add.w	r3, sp, #26
 800fdd4:	aa06      	add	r2, sp, #24
 800fdd6:	a91a      	add	r1, sp, #104	@ 0x68
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f88d 7018 	strb.w	r7, [sp, #24]
 800fdde:	f000 f985 	bl	80100ec <uxr_read_session_header>
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d0dd      	beq.n	800fda2 <uxr_create_session+0x6a>
 800fde6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fdea:	2100      	movs	r1, #0
 800fdec:	f000 fe74 	bl	8010ad8 <uxr_stream_id_from_raw>
 800fdf0:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800fdf4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	f1b9 0f01 	cmp.w	r9, #1
 800fdfe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fe02:	fa5f fa80 	uxtb.w	sl, r0
 800fe06:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fe0a:	d056      	beq.n	800feba <uxr_create_session+0x182>
 800fe0c:	f1b9 0f02 	cmp.w	r9, #2
 800fe10:	d018      	beq.n	800fe44 <uxr_create_session+0x10c>
 800fe12:	f1b9 0f00 	cmp.w	r9, #0
 800fe16:	d1c4      	bne.n	800fda2 <uxr_create_session+0x6a>
 800fe18:	4649      	mov	r1, r9
 800fe1a:	4648      	mov	r0, r9
 800fe1c:	f000 fe5c 	bl	8010ad8 <uxr_stream_id_from_raw>
 800fe20:	a91a      	add	r1, sp, #104	@ 0x68
 800fe22:	4602      	mov	r2, r0
 800fe24:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe26:	4620      	mov	r0, r4
 800fe28:	f7ff fb02 	bl	800f430 <read_submessage_list>
 800fe2c:	e7b9      	b.n	800fda2 <uxr_create_session+0x6a>
 800fe2e:	f1b8 0801 	subs.w	r8, r8, #1
 800fe32:	d001      	beq.n	800fe38 <uxr_create_session+0x100>
 800fe34:	2aff      	cmp	r2, #255	@ 0xff
 800fe36:	d0a7      	beq.n	800fd88 <uxr_create_session+0x50>
 800fe38:	2a00      	cmp	r2, #0
 800fe3a:	d05b      	beq.n	800fef4 <uxr_create_session+0x1bc>
 800fe3c:	2000      	movs	r0, #0
 800fe3e:	b02b      	add	sp, #172	@ 0xac
 800fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe44:	9803      	ldr	r0, [sp, #12]
 800fe46:	4631      	mov	r1, r6
 800fe48:	f000 ff26 	bl	8010c98 <uxr_get_input_reliable_stream>
 800fe4c:	9004      	str	r0, [sp, #16]
 800fe4e:	b370      	cbz	r0, 800feae <uxr_create_session+0x176>
 800fe50:	aa1a      	add	r2, sp, #104	@ 0x68
 800fe52:	4610      	mov	r0, r2
 800fe54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fe56:	9205      	str	r2, [sp, #20]
 800fe58:	f7fe fc6c 	bl	800e734 <ucdr_buffer_remaining>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f10d 0019 	add.w	r0, sp, #25
 800fe62:	9000      	str	r0, [sp, #0]
 800fe64:	9a05      	ldr	r2, [sp, #20]
 800fe66:	9902      	ldr	r1, [sp, #8]
 800fe68:	9804      	ldr	r0, [sp, #16]
 800fe6a:	f007 fdfb 	bl	8017a64 <uxr_receive_reliable_message>
 800fe6e:	b1f0      	cbz	r0, 800feae <uxr_create_session+0x176>
 800fe70:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d035      	beq.n	800fee4 <uxr_create_session+0x1ac>
 800fe78:	f8cd b008 	str.w	fp, [sp, #8]
 800fe7c:	f04f 0902 	mov.w	r9, #2
 800fe80:	f8dd b010 	ldr.w	fp, [sp, #16]
 800fe84:	e00a      	b.n	800fe9c <uxr_create_session+0x164>
 800fe86:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800fe8a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800fe8e:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800fe92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe94:	a922      	add	r1, sp, #136	@ 0x88
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7ff faca 	bl	800f430 <read_submessage_list>
 800fe9c:	2204      	movs	r2, #4
 800fe9e:	a922      	add	r1, sp, #136	@ 0x88
 800fea0:	4658      	mov	r0, fp
 800fea2:	f007 fe59 	bl	8017b58 <uxr_next_input_reliable_buffer_available>
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d1ed      	bne.n	800fe86 <uxr_create_session+0x14e>
 800feaa:	f8dd b008 	ldr.w	fp, [sp, #8]
 800feae:	4632      	mov	r2, r6
 800feb0:	4651      	mov	r1, sl
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7ff f960 	bl	800f178 <write_submessage_acknack.isra.0>
 800feb8:	e773      	b.n	800fda2 <uxr_create_session+0x6a>
 800feba:	9803      	ldr	r0, [sp, #12]
 800febc:	4631      	mov	r1, r6
 800febe:	f000 fee1 	bl	8010c84 <uxr_get_input_best_effort_stream>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	f43f af6d 	beq.w	800fda2 <uxr_create_session+0x6a>
 800fec8:	9902      	ldr	r1, [sp, #8]
 800feca:	f007 fd3b 	bl	8017944 <uxr_receive_best_effort_message>
 800fece:	2800      	cmp	r0, #0
 800fed0:	f43f af67 	beq.w	800fda2 <uxr_create_session+0x6a>
 800fed4:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800fed8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800feda:	a91a      	add	r1, sp, #104	@ 0x68
 800fedc:	4620      	mov	r0, r4
 800fede:	f7ff faa7 	bl	800f430 <read_submessage_list>
 800fee2:	e75e      	b.n	800fda2 <uxr_create_session+0x6a>
 800fee4:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800fee8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800feea:	a91a      	add	r1, sp, #104	@ 0x68
 800feec:	4620      	mov	r0, r4
 800feee:	f7ff fa9f 	bl	800f430 <read_submessage_list>
 800fef2:	e7c1      	b.n	800fe78 <uxr_create_session+0x140>
 800fef4:	9803      	ldr	r0, [sp, #12]
 800fef6:	f000 fe15 	bl	8010b24 <uxr_reset_stream_storage>
 800fefa:	2001      	movs	r0, #1
 800fefc:	b02b      	add	sp, #172	@ 0xac
 800fefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff02:	bf00      	nop

0800ff04 <uxr_prepare_stream_to_write_submessage>:
 800ff04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff08:	b082      	sub	sp, #8
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	4610      	mov	r0, r2
 800ff0e:	4614      	mov	r4, r2
 800ff10:	9101      	str	r1, [sp, #4]
 800ff12:	461f      	mov	r7, r3
 800ff14:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800ff18:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800ff1c:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800ff20:	f000 ff1a 	bl	8010d58 <uxr_submessage_padding>
 800ff24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff28:	1d21      	adds	r1, r4, #4
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	eb01 0a00 	add.w	sl, r1, r0
 800ff30:	d012      	beq.n	800ff58 <uxr_prepare_stream_to_write_submessage+0x54>
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d003      	beq.n	800ff3e <uxr_prepare_stream_to_write_submessage+0x3a>
 800ff36:	2000      	movs	r0, #0
 800ff38:	b002      	add	sp, #8
 800ff3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff3e:	4629      	mov	r1, r5
 800ff40:	f106 0008 	add.w	r0, r6, #8
 800ff44:	f000 fe94 	bl	8010c70 <uxr_get_output_reliable_stream>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d0f4      	beq.n	800ff36 <uxr_prepare_stream_to_write_submessage+0x32>
 800ff4c:	4651      	mov	r1, sl
 800ff4e:	463a      	mov	r2, r7
 800ff50:	f007 ffb8 	bl	8017ec4 <uxr_prepare_reliable_buffer_to_write>
 800ff54:	b968      	cbnz	r0, 800ff72 <uxr_prepare_stream_to_write_submessage+0x6e>
 800ff56:	e7ee      	b.n	800ff36 <uxr_prepare_stream_to_write_submessage+0x32>
 800ff58:	4629      	mov	r1, r5
 800ff5a:	f106 0008 	add.w	r0, r6, #8
 800ff5e:	f000 fe7f 	bl	8010c60 <uxr_get_output_best_effort_stream>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d0e7      	beq.n	800ff36 <uxr_prepare_stream_to_write_submessage+0x32>
 800ff66:	4651      	mov	r1, sl
 800ff68:	463a      	mov	r2, r7
 800ff6a:	f007 fedd 	bl	8017d28 <uxr_prepare_best_effort_buffer_to_write>
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d0e1      	beq.n	800ff36 <uxr_prepare_stream_to_write_submessage+0x32>
 800ff72:	464b      	mov	r3, r9
 800ff74:	b2a2      	uxth	r2, r4
 800ff76:	4641      	mov	r1, r8
 800ff78:	4638      	mov	r0, r7
 800ff7a:	f000 fead 	bl	8010cd8 <uxr_buffer_submessage_header>
 800ff7e:	2001      	movs	r0, #1
 800ff80:	b002      	add	sp, #8
 800ff82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff86:	bf00      	nop

0800ff88 <uxr_init_session_info>:
 800ff88:	2300      	movs	r3, #0
 800ff8a:	f361 0307 	bfi	r3, r1, #0, #8
 800ff8e:	0e11      	lsrs	r1, r2, #24
 800ff90:	f361 230f 	bfi	r3, r1, #8, #8
 800ff94:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800ff98:	f361 4317 	bfi	r3, r1, #16, #8
 800ff9c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ffa0:	f361 631f 	bfi	r3, r1, #24, #8
 800ffa4:	f04f 0c09 	mov.w	ip, #9
 800ffa8:	21ff      	movs	r1, #255	@ 0xff
 800ffaa:	6003      	str	r3, [r0, #0]
 800ffac:	7102      	strb	r2, [r0, #4]
 800ffae:	f8a0 c006 	strh.w	ip, [r0, #6]
 800ffb2:	7141      	strb	r1, [r0, #5]
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop

0800ffb8 <uxr_buffer_create_session>:
 800ffb8:	b530      	push	{r4, r5, lr}
 800ffba:	4d13      	ldr	r5, [pc, #76]	@ (8010008 <uxr_buffer_create_session+0x50>)
 800ffbc:	b089      	sub	sp, #36	@ 0x24
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	9307      	str	r3, [sp, #28]
 800ffc2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ffc6:	682a      	ldr	r2, [r5, #0]
 800ffc8:	9200      	str	r2, [sp, #0]
 800ffca:	460c      	mov	r4, r1
 800ffcc:	2201      	movs	r2, #1
 800ffce:	88a9      	ldrh	r1, [r5, #4]
 800ffd0:	9301      	str	r3, [sp, #4]
 800ffd2:	80c2      	strh	r2, [r0, #6]
 800ffd4:	f8ad 1006 	strh.w	r1, [sp, #6]
 800ffd8:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800ffdc:	7800      	ldrb	r0, [r0, #0]
 800ffde:	9303      	str	r3, [sp, #12]
 800ffe0:	f88d 2004 	strb.w	r2, [sp, #4]
 800ffe4:	9102      	str	r1, [sp, #8]
 800ffe6:	2210      	movs	r2, #16
 800ffe8:	4619      	mov	r1, r3
 800ffea:	f88d 000c 	strb.w	r0, [sp, #12]
 800ffee:	4620      	mov	r0, r4
 800fff0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800fff4:	9306      	str	r3, [sp, #24]
 800fff6:	f000 fe6f 	bl	8010cd8 <uxr_buffer_submessage_header>
 800fffa:	4669      	mov	r1, sp
 800fffc:	4620      	mov	r0, r4
 800fffe:	f001 fe8f 	bl	8011d20 <uxr_serialize_CREATE_CLIENT_Payload>
 8010002:	b009      	add	sp, #36	@ 0x24
 8010004:	bd30      	pop	{r4, r5, pc}
 8010006:	bf00      	nop
 8010008:	0801ad08 	.word	0x0801ad08

0801000c <uxr_buffer_delete_session>:
 801000c:	b510      	push	{r4, lr}
 801000e:	4a0c      	ldr	r2, [pc, #48]	@ (8010040 <uxr_buffer_delete_session+0x34>)
 8010010:	b082      	sub	sp, #8
 8010012:	460c      	mov	r4, r1
 8010014:	2302      	movs	r3, #2
 8010016:	8911      	ldrh	r1, [r2, #8]
 8010018:	80c3      	strh	r3, [r0, #6]
 801001a:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801001e:	2300      	movs	r3, #0
 8010020:	2204      	movs	r2, #4
 8010022:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010026:	4620      	mov	r0, r4
 8010028:	2103      	movs	r1, #3
 801002a:	f8ad c004 	strh.w	ip, [sp, #4]
 801002e:	f000 fe53 	bl	8010cd8 <uxr_buffer_submessage_header>
 8010032:	a901      	add	r1, sp, #4
 8010034:	4620      	mov	r0, r4
 8010036:	f001 ff2b 	bl	8011e90 <uxr_serialize_DELETE_Payload>
 801003a:	b002      	add	sp, #8
 801003c:	bd10      	pop	{r4, pc}
 801003e:	bf00      	nop
 8010040:	0801ad08 	.word	0x0801ad08

08010044 <uxr_read_create_session_status>:
 8010044:	b510      	push	{r4, lr}
 8010046:	460b      	mov	r3, r1
 8010048:	b088      	sub	sp, #32
 801004a:	4604      	mov	r4, r0
 801004c:	a901      	add	r1, sp, #4
 801004e:	4618      	mov	r0, r3
 8010050:	f001 ff2e 	bl	8011eb0 <uxr_deserialize_STATUS_AGENT_Payload>
 8010054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010058:	7163      	strb	r3, [r4, #5]
 801005a:	b008      	add	sp, #32
 801005c:	bd10      	pop	{r4, pc}
 801005e:	bf00      	nop

08010060 <uxr_read_delete_session_status>:
 8010060:	b510      	push	{r4, lr}
 8010062:	460b      	mov	r3, r1
 8010064:	b082      	sub	sp, #8
 8010066:	4604      	mov	r4, r0
 8010068:	4669      	mov	r1, sp
 801006a:	4618      	mov	r0, r3
 801006c:	f001 ff50 	bl	8011f10 <uxr_deserialize_STATUS_Payload>
 8010070:	88e3      	ldrh	r3, [r4, #6]
 8010072:	2b02      	cmp	r3, #2
 8010074:	d001      	beq.n	801007a <uxr_read_delete_session_status+0x1a>
 8010076:	b002      	add	sp, #8
 8010078:	bd10      	pop	{r4, pc}
 801007a:	f10d 0002 	add.w	r0, sp, #2
 801007e:	f7fe fef9 	bl	800ee74 <uxr_object_id_from_raw>
 8010082:	f8bd 3000 	ldrh.w	r3, [sp]
 8010086:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801008a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801008e:	bf08      	it	eq
 8010090:	7162      	strbeq	r2, [r4, #5]
 8010092:	b002      	add	sp, #8
 8010094:	bd10      	pop	{r4, pc}
 8010096:	bf00      	nop

08010098 <uxr_stamp_create_session_header>:
 8010098:	b510      	push	{r4, lr}
 801009a:	2208      	movs	r2, #8
 801009c:	b08a      	sub	sp, #40	@ 0x28
 801009e:	4604      	mov	r4, r0
 80100a0:	eb0d 0002 	add.w	r0, sp, r2
 80100a4:	f7fe fb16 	bl	800e6d4 <ucdr_init_buffer>
 80100a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ac:	9400      	str	r4, [sp, #0]
 80100ae:	2300      	movs	r3, #0
 80100b0:	461a      	mov	r2, r3
 80100b2:	a802      	add	r0, sp, #8
 80100b4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80100b8:	f001 f80c 	bl	80110d4 <uxr_serialize_message_header>
 80100bc:	b00a      	add	sp, #40	@ 0x28
 80100be:	bd10      	pop	{r4, pc}

080100c0 <uxr_stamp_session_header>:
 80100c0:	b570      	push	{r4, r5, r6, lr}
 80100c2:	4604      	mov	r4, r0
 80100c4:	b08a      	sub	sp, #40	@ 0x28
 80100c6:	4616      	mov	r6, r2
 80100c8:	2208      	movs	r2, #8
 80100ca:	eb0d 0002 	add.w	r0, sp, r2
 80100ce:	460d      	mov	r5, r1
 80100d0:	4619      	mov	r1, r3
 80100d2:	f7fe faff 	bl	800e6d4 <ucdr_init_buffer>
 80100d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100da:	9400      	str	r4, [sp, #0]
 80100dc:	4633      	mov	r3, r6
 80100de:	462a      	mov	r2, r5
 80100e0:	a802      	add	r0, sp, #8
 80100e2:	f000 fff7 	bl	80110d4 <uxr_serialize_message_header>
 80100e6:	b00a      	add	sp, #40	@ 0x28
 80100e8:	bd70      	pop	{r4, r5, r6, pc}
 80100ea:	bf00      	nop

080100ec <uxr_read_session_header>:
 80100ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ee:	4607      	mov	r7, r0
 80100f0:	b085      	sub	sp, #20
 80100f2:	4608      	mov	r0, r1
 80100f4:	460c      	mov	r4, r1
 80100f6:	4615      	mov	r5, r2
 80100f8:	461e      	mov	r6, r3
 80100fa:	f7fe fb1b 	bl	800e734 <ucdr_buffer_remaining>
 80100fe:	2808      	cmp	r0, #8
 8010100:	d802      	bhi.n	8010108 <uxr_read_session_header+0x1c>
 8010102:	2000      	movs	r0, #0
 8010104:	b005      	add	sp, #20
 8010106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010108:	ab03      	add	r3, sp, #12
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	462a      	mov	r2, r5
 801010e:	4633      	mov	r3, r6
 8010110:	f10d 010b 	add.w	r1, sp, #11
 8010114:	4620      	mov	r0, r4
 8010116:	f000 fffb 	bl	8011110 <uxr_deserialize_message_header>
 801011a:	783a      	ldrb	r2, [r7, #0]
 801011c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010120:	4293      	cmp	r3, r2
 8010122:	d1ee      	bne.n	8010102 <uxr_read_session_header+0x16>
 8010124:	061b      	lsls	r3, r3, #24
 8010126:	d41c      	bmi.n	8010162 <uxr_read_session_header+0x76>
 8010128:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801012c:	787b      	ldrb	r3, [r7, #1]
 801012e:	429a      	cmp	r2, r3
 8010130:	d003      	beq.n	801013a <uxr_read_session_header+0x4e>
 8010132:	2001      	movs	r0, #1
 8010134:	f080 0001 	eor.w	r0, r0, #1
 8010138:	e7e4      	b.n	8010104 <uxr_read_session_header+0x18>
 801013a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801013e:	78bb      	ldrb	r3, [r7, #2]
 8010140:	429a      	cmp	r2, r3
 8010142:	f107 0102 	add.w	r1, r7, #2
 8010146:	d1f4      	bne.n	8010132 <uxr_read_session_header+0x46>
 8010148:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801014c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010150:	429a      	cmp	r2, r3
 8010152:	d1ee      	bne.n	8010132 <uxr_read_session_header+0x46>
 8010154:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010158:	784b      	ldrb	r3, [r1, #1]
 801015a:	429a      	cmp	r2, r3
 801015c:	d1e9      	bne.n	8010132 <uxr_read_session_header+0x46>
 801015e:	2000      	movs	r0, #0
 8010160:	e7e8      	b.n	8010134 <uxr_read_session_header+0x48>
 8010162:	2001      	movs	r0, #1
 8010164:	e7ce      	b.n	8010104 <uxr_read_session_header+0x18>
 8010166:	bf00      	nop

08010168 <uxr_session_header_offset>:
 8010168:	f990 3000 	ldrsb.w	r3, [r0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	bfb4      	ite	lt
 8010170:	2004      	movlt	r0, #4
 8010172:	2008      	movge	r0, #8
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop

08010178 <uxr_init_base_object_request>:
 8010178:	b510      	push	{r4, lr}
 801017a:	88c3      	ldrh	r3, [r0, #6]
 801017c:	b082      	sub	sp, #8
 801017e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010182:	9101      	str	r1, [sp, #4]
 8010184:	f1a3 010a 	sub.w	r1, r3, #10
 8010188:	b289      	uxth	r1, r1
 801018a:	42a1      	cmp	r1, r4
 801018c:	d80e      	bhi.n	80101ac <uxr_init_base_object_request+0x34>
 801018e:	3301      	adds	r3, #1
 8010190:	b29c      	uxth	r4, r3
 8010192:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010196:	b2db      	uxtb	r3, r3
 8010198:	80c4      	strh	r4, [r0, #6]
 801019a:	9801      	ldr	r0, [sp, #4]
 801019c:	7011      	strb	r1, [r2, #0]
 801019e:	7053      	strb	r3, [r2, #1]
 80101a0:	1c91      	adds	r1, r2, #2
 80101a2:	f7fe fe7b 	bl	800ee9c <uxr_object_id_to_raw>
 80101a6:	4620      	mov	r0, r4
 80101a8:	b002      	add	sp, #8
 80101aa:	bd10      	pop	{r4, pc}
 80101ac:	230a      	movs	r3, #10
 80101ae:	2100      	movs	r1, #0
 80101b0:	461c      	mov	r4, r3
 80101b2:	e7f1      	b.n	8010198 <uxr_init_base_object_request+0x20>

080101b4 <uxr_parse_base_object_request>:
 80101b4:	b570      	push	{r4, r5, r6, lr}
 80101b6:	4604      	mov	r4, r0
 80101b8:	3002      	adds	r0, #2
 80101ba:	460d      	mov	r5, r1
 80101bc:	4616      	mov	r6, r2
 80101be:	f7fe fe59 	bl	800ee74 <uxr_object_id_from_raw>
 80101c2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80101c6:	8028      	strh	r0, [r5, #0]
 80101c8:	806b      	strh	r3, [r5, #2]
 80101ca:	8823      	ldrh	r3, [r4, #0]
 80101cc:	ba5b      	rev16	r3, r3
 80101ce:	8033      	strh	r3, [r6, #0]
 80101d0:	bd70      	pop	{r4, r5, r6, pc}
 80101d2:	bf00      	nop

080101d4 <uxr_init_framing_io>:
 80101d4:	2300      	movs	r3, #0
 80101d6:	7041      	strb	r1, [r0, #1]
 80101d8:	7003      	strb	r3, [r0, #0]
 80101da:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80101dc:	4770      	bx	lr
 80101de:	bf00      	nop

080101e0 <uxr_write_framed_msg>:
 80101e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e4:	f890 c001 	ldrb.w	ip, [r0, #1]
 80101e8:	4617      	mov	r7, r2
 80101ea:	227e      	movs	r2, #126	@ 0x7e
 80101ec:	b085      	sub	sp, #20
 80101ee:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 80101f2:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 80101f6:	2a01      	cmp	r2, #1
 80101f8:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80101fc:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8010200:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010204:	4604      	mov	r4, r0
 8010206:	460e      	mov	r6, r1
 8010208:	469a      	mov	sl, r3
 801020a:	f240 812e 	bls.w	801046a <uxr_write_framed_msg+0x28a>
 801020e:	2003      	movs	r0, #3
 8010210:	2102      	movs	r1, #2
 8010212:	f04f 0905 	mov.w	r9, #5
 8010216:	2204      	movs	r2, #4
 8010218:	4686      	mov	lr, r0
 801021a:	460b      	mov	r3, r1
 801021c:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 8010220:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8010224:	f1bc 0f01 	cmp.w	ip, #1
 8010228:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801022c:	4421      	add	r1, r4
 801022e:	f240 8110 	bls.w	8010452 <uxr_write_framed_msg+0x272>
 8010232:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8010236:	fa5f fc8b 	uxtb.w	ip, fp
 801023a:	f3cb 2107 	ubfx	r1, fp, #8, #8
 801023e:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 8010242:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 8010246:	f1be 0f01 	cmp.w	lr, #1
 801024a:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 801024e:	b2ed      	uxtb	r5, r5
 8010250:	d94c      	bls.n	80102ec <uxr_write_framed_msg+0x10c>
 8010252:	4420      	add	r0, r4
 8010254:	2d01      	cmp	r5, #1
 8010256:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801025a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801025e:	d95d      	bls.n	801031c <uxr_write_framed_msg+0x13c>
 8010260:	18a0      	adds	r0, r4, r2
 8010262:	3201      	adds	r2, #1
 8010264:	b2d2      	uxtb	r2, r2
 8010266:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801026a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801026e:	f1bb 0f00 	cmp.w	fp, #0
 8010272:	f000 8108 	beq.w	8010486 <uxr_write_framed_msg+0x2a6>
 8010276:	f04f 0c00 	mov.w	ip, #0
 801027a:	4661      	mov	r1, ip
 801027c:	46de      	mov	lr, fp
 801027e:	46e3      	mov	fp, ip
 8010280:	46d4      	mov	ip, sl
 8010282:	468a      	mov	sl, r1
 8010284:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 8010490 <uxr_write_framed_msg+0x2b0>
 8010288:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801028c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010290:	2901      	cmp	r1, #1
 8010292:	d91b      	bls.n	80102cc <uxr_write_framed_msg+0xec>
 8010294:	2a29      	cmp	r2, #41	@ 0x29
 8010296:	d84e      	bhi.n	8010336 <uxr_write_framed_msg+0x156>
 8010298:	18a1      	adds	r1, r4, r2
 801029a:	3201      	adds	r2, #1
 801029c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80102a0:	b2d2      	uxtb	r2, r2
 80102a2:	ea8b 0303 	eor.w	r3, fp, r3
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80102ac:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80102b0:	f10a 0a01 	add.w	sl, sl, #1
 80102b4:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 80102b8:	45d6      	cmp	lr, sl
 80102ba:	d95a      	bls.n	8010372 <uxr_write_framed_msg+0x192>
 80102bc:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80102c0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80102c4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80102c8:	2901      	cmp	r1, #1
 80102ca:	d8e3      	bhi.n	8010294 <uxr_write_framed_msg+0xb4>
 80102cc:	1c51      	adds	r1, r2, #1
 80102ce:	b2c9      	uxtb	r1, r1
 80102d0:	2929      	cmp	r1, #41	@ 0x29
 80102d2:	d830      	bhi.n	8010336 <uxr_write_framed_msg+0x156>
 80102d4:	18a1      	adds	r1, r4, r2
 80102d6:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 80102da:	3202      	adds	r2, #2
 80102dc:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80102e0:	f083 0020 	eor.w	r0, r3, #32
 80102e4:	b2d2      	uxtb	r2, r2
 80102e6:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 80102ea:	e7da      	b.n	80102a2 <uxr_write_framed_msg+0xc2>
 80102ec:	eb04 0e00 	add.w	lr, r4, r0
 80102f0:	f08c 0c20 	eor.w	ip, ip, #32
 80102f4:	1c82      	adds	r2, r0, #2
 80102f6:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 80102fa:	b2d2      	uxtb	r2, r2
 80102fc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8010300:	2d01      	cmp	r5, #1
 8010302:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8010306:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801030a:	d907      	bls.n	801031c <uxr_write_framed_msg+0x13c>
 801030c:	4422      	add	r2, r4
 801030e:	3003      	adds	r0, #3
 8010310:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 8010314:	b2c2      	uxtb	r2, r0
 8010316:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801031a:	e7ac      	b.n	8010276 <uxr_write_framed_msg+0x96>
 801031c:	18a0      	adds	r0, r4, r2
 801031e:	f081 0120 	eor.w	r1, r1, #32
 8010322:	3202      	adds	r2, #2
 8010324:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8010328:	b2d2      	uxtb	r2, r2
 801032a:	217d      	movs	r1, #125	@ 0x7d
 801032c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010330:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010334:	e79f      	b.n	8010276 <uxr_write_framed_msg+0x96>
 8010336:	e9cd ba00 	strd	fp, sl, [sp]
 801033a:	2500      	movs	r5, #0
 801033c:	46e2      	mov	sl, ip
 801033e:	46f3      	mov	fp, lr
 8010340:	e000      	b.n	8010344 <uxr_write_framed_msg+0x164>
 8010342:	b190      	cbz	r0, 801036a <uxr_write_framed_msg+0x18a>
 8010344:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010348:	1b52      	subs	r2, r2, r5
 801034a:	4643      	mov	r3, r8
 801034c:	4421      	add	r1, r4
 801034e:	4638      	mov	r0, r7
 8010350:	47b0      	blx	r6
 8010352:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010356:	4405      	add	r5, r0
 8010358:	4295      	cmp	r5, r2
 801035a:	d3f2      	bcc.n	8010342 <uxr_write_framed_msg+0x162>
 801035c:	46d4      	mov	ip, sl
 801035e:	46de      	mov	lr, fp
 8010360:	f8dd a004 	ldr.w	sl, [sp, #4]
 8010364:	f8dd b000 	ldr.w	fp, [sp]
 8010368:	d06f      	beq.n	801044a <uxr_write_framed_msg+0x26a>
 801036a:	2000      	movs	r0, #0
 801036c:	b005      	add	sp, #20
 801036e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010372:	46dc      	mov	ip, fp
 8010374:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010378:	f8ad c00c 	strh.w	ip, [sp, #12]
 801037c:	46f3      	mov	fp, lr
 801037e:	fa5f fc8c 	uxtb.w	ip, ip
 8010382:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8010386:	2b01      	cmp	r3, #1
 8010388:	f04f 0900 	mov.w	r9, #0
 801038c:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 8010390:	d930      	bls.n	80103f4 <uxr_write_framed_msg+0x214>
 8010392:	2a29      	cmp	r2, #41	@ 0x29
 8010394:	d91c      	bls.n	80103d0 <uxr_write_framed_msg+0x1f0>
 8010396:	2500      	movs	r5, #0
 8010398:	e001      	b.n	801039e <uxr_write_framed_msg+0x1be>
 801039a:	2800      	cmp	r0, #0
 801039c:	d0e5      	beq.n	801036a <uxr_write_framed_msg+0x18a>
 801039e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80103a2:	1b52      	subs	r2, r2, r5
 80103a4:	4643      	mov	r3, r8
 80103a6:	4421      	add	r1, r4
 80103a8:	4638      	mov	r0, r7
 80103aa:	47b0      	blx	r6
 80103ac:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80103b0:	4405      	add	r5, r0
 80103b2:	4295      	cmp	r5, r2
 80103b4:	d3f1      	bcc.n	801039a <uxr_write_framed_msg+0x1ba>
 80103b6:	d1d8      	bne.n	801036a <uxr_write_framed_msg+0x18a>
 80103b8:	f109 0310 	add.w	r3, r9, #16
 80103bc:	446b      	add	r3, sp
 80103be:	2200      	movs	r2, #0
 80103c0:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 80103c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80103c8:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d911      	bls.n	80103f4 <uxr_write_framed_msg+0x214>
 80103d0:	18a3      	adds	r3, r4, r2
 80103d2:	3201      	adds	r2, #1
 80103d4:	b2d2      	uxtb	r2, r2
 80103d6:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80103da:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80103de:	f1b9 0f00 	cmp.w	r9, #0
 80103e2:	d119      	bne.n	8010418 <uxr_write_framed_msg+0x238>
 80103e4:	f89d c00d 	ldrb.w	ip, [sp, #13]
 80103e8:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	f04f 0901 	mov.w	r9, #1
 80103f2:	d8ce      	bhi.n	8010392 <uxr_write_framed_msg+0x1b2>
 80103f4:	1c53      	adds	r3, r2, #1
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b29      	cmp	r3, #41	@ 0x29
 80103fa:	d8cc      	bhi.n	8010396 <uxr_write_framed_msg+0x1b6>
 80103fc:	18a3      	adds	r3, r4, r2
 80103fe:	3202      	adds	r2, #2
 8010400:	f08c 0c20 	eor.w	ip, ip, #32
 8010404:	b2d2      	uxtb	r2, r2
 8010406:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 801040a:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 801040e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010412:	f1b9 0f00 	cmp.w	r9, #0
 8010416:	d0e5      	beq.n	80103e4 <uxr_write_framed_msg+0x204>
 8010418:	2500      	movs	r5, #0
 801041a:	e001      	b.n	8010420 <uxr_write_framed_msg+0x240>
 801041c:	2800      	cmp	r0, #0
 801041e:	d0a4      	beq.n	801036a <uxr_write_framed_msg+0x18a>
 8010420:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010424:	1b52      	subs	r2, r2, r5
 8010426:	4643      	mov	r3, r8
 8010428:	4421      	add	r1, r4
 801042a:	4638      	mov	r0, r7
 801042c:	47b0      	blx	r6
 801042e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010432:	4405      	add	r5, r0
 8010434:	4295      	cmp	r5, r2
 8010436:	d3f1      	bcc.n	801041c <uxr_write_framed_msg+0x23c>
 8010438:	d197      	bne.n	801036a <uxr_write_framed_msg+0x18a>
 801043a:	2300      	movs	r3, #0
 801043c:	fa1f f08b 	uxth.w	r0, fp
 8010440:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010444:	b005      	add	sp, #20
 8010446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801044a:	2300      	movs	r3, #0
 801044c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010450:	e732      	b.n	80102b8 <uxr_write_framed_msg+0xd8>
 8010452:	44a6      	add	lr, r4
 8010454:	f085 0520 	eor.w	r5, r5, #32
 8010458:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801045c:	4610      	mov	r0, r2
 801045e:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8010462:	464a      	mov	r2, r9
 8010464:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 8010468:	e6e5      	b.n	8010236 <uxr_write_framed_msg+0x56>
 801046a:	f08c 0c20 	eor.w	ip, ip, #32
 801046e:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 8010472:	2103      	movs	r1, #3
 8010474:	2004      	movs	r0, #4
 8010476:	f04f 0906 	mov.w	r9, #6
 801047a:	2205      	movs	r2, #5
 801047c:	4686      	mov	lr, r0
 801047e:	460b      	mov	r3, r1
 8010480:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8010484:	e6ca      	b.n	801021c <uxr_write_framed_msg+0x3c>
 8010486:	f8ad b00c 	strh.w	fp, [sp, #12]
 801048a:	46dc      	mov	ip, fp
 801048c:	e779      	b.n	8010382 <uxr_write_framed_msg+0x1a2>
 801048e:	bf00      	nop
 8010490:	0801b810 	.word	0x0801b810

08010494 <uxr_framing_read_transport>:
 8010494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010498:	4604      	mov	r4, r0
 801049a:	b083      	sub	sp, #12
 801049c:	461f      	mov	r7, r3
 801049e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80104a2:	4689      	mov	r9, r1
 80104a4:	4692      	mov	sl, r2
 80104a6:	f000 fc5d 	bl	8010d64 <uxr_millis>
 80104aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80104ae:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80104b2:	42b3      	cmp	r3, r6
 80104b4:	4680      	mov	r8, r0
 80104b6:	d062      	beq.n	801057e <uxr_framing_read_transport+0xea>
 80104b8:	d81c      	bhi.n	80104f4 <uxr_framing_read_transport+0x60>
 80104ba:	1e75      	subs	r5, r6, #1
 80104bc:	1aed      	subs	r5, r5, r3
 80104be:	b2ed      	uxtb	r5, r5
 80104c0:	2600      	movs	r6, #0
 80104c2:	455d      	cmp	r5, fp
 80104c4:	d81f      	bhi.n	8010506 <uxr_framing_read_transport+0x72>
 80104c6:	19ab      	adds	r3, r5, r6
 80104c8:	455b      	cmp	r3, fp
 80104ca:	bf84      	itt	hi
 80104cc:	ebab 0b05 	subhi.w	fp, fp, r5
 80104d0:	fa5f f68b 	uxtbhi.w	r6, fp
 80104d4:	b9e5      	cbnz	r5, 8010510 <uxr_framing_read_transport+0x7c>
 80104d6:	f04f 0b00 	mov.w	fp, #0
 80104da:	f000 fc43 	bl	8010d64 <uxr_millis>
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	eba0 0108 	sub.w	r1, r0, r8
 80104e4:	1a5b      	subs	r3, r3, r1
 80104e6:	4658      	mov	r0, fp
 80104e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104ec:	603b      	str	r3, [r7, #0]
 80104ee:	b003      	add	sp, #12
 80104f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f4:	2e00      	cmp	r6, #0
 80104f6:	d04a      	beq.n	801058e <uxr_framing_read_transport+0xfa>
 80104f8:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80104fc:	b2dd      	uxtb	r5, r3
 80104fe:	3e01      	subs	r6, #1
 8010500:	455d      	cmp	r5, fp
 8010502:	b2f6      	uxtb	r6, r6
 8010504:	d9df      	bls.n	80104c6 <uxr_framing_read_transport+0x32>
 8010506:	fa5f f58b 	uxtb.w	r5, fp
 801050a:	2600      	movs	r6, #0
 801050c:	2d00      	cmp	r5, #0
 801050e:	d0e2      	beq.n	80104d6 <uxr_framing_read_transport+0x42>
 8010510:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010514:	3102      	adds	r1, #2
 8010516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010518:	9300      	str	r3, [sp, #0]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	4421      	add	r1, r4
 801051e:	462a      	mov	r2, r5
 8010520:	4650      	mov	r0, sl
 8010522:	47c8      	blx	r9
 8010524:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010528:	4a1b      	ldr	r2, [pc, #108]	@ (8010598 <uxr_framing_read_transport+0x104>)
 801052a:	4403      	add	r3, r0
 801052c:	0859      	lsrs	r1, r3, #1
 801052e:	4683      	mov	fp, r0
 8010530:	fba2 0101 	umull	r0, r1, r2, r1
 8010534:	0889      	lsrs	r1, r1, #2
 8010536:	222a      	movs	r2, #42	@ 0x2a
 8010538:	fb02 3111 	mls	r1, r2, r1, r3
 801053c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8010540:	f1bb 0f00 	cmp.w	fp, #0
 8010544:	d0c7      	beq.n	80104d6 <uxr_framing_read_transport+0x42>
 8010546:	45ab      	cmp	fp, r5
 8010548:	d1c7      	bne.n	80104da <uxr_framing_read_transport+0x46>
 801054a:	2e00      	cmp	r6, #0
 801054c:	d0c5      	beq.n	80104da <uxr_framing_read_transport+0x46>
 801054e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010550:	9300      	str	r3, [sp, #0]
 8010552:	3102      	adds	r1, #2
 8010554:	4632      	mov	r2, r6
 8010556:	4421      	add	r1, r4
 8010558:	2300      	movs	r3, #0
 801055a:	4650      	mov	r0, sl
 801055c:	47c8      	blx	r9
 801055e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010562:	4a0d      	ldr	r2, [pc, #52]	@ (8010598 <uxr_framing_read_transport+0x104>)
 8010564:	4403      	add	r3, r0
 8010566:	0859      	lsrs	r1, r3, #1
 8010568:	fba2 2101 	umull	r2, r1, r2, r1
 801056c:	0889      	lsrs	r1, r1, #2
 801056e:	222a      	movs	r2, #42	@ 0x2a
 8010570:	fb02 3311 	mls	r3, r2, r1, r3
 8010574:	eb00 0b05 	add.w	fp, r0, r5
 8010578:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801057c:	e7ad      	b.n	80104da <uxr_framing_read_transport+0x46>
 801057e:	2600      	movs	r6, #0
 8010580:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8010584:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8010586:	d9be      	bls.n	8010506 <uxr_framing_read_transport+0x72>
 8010588:	2529      	movs	r5, #41	@ 0x29
 801058a:	2102      	movs	r1, #2
 801058c:	e7c3      	b.n	8010516 <uxr_framing_read_transport+0x82>
 801058e:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 8010592:	b2dd      	uxtb	r5, r3
 8010594:	e795      	b.n	80104c2 <uxr_framing_read_transport+0x2e>
 8010596:	bf00      	nop
 8010598:	30c30c31 	.word	0x30c30c31

0801059c <uxr_read_framed_msg>:
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	461d      	mov	r5, r3
 80105a2:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 80105a6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80105aa:	b085      	sub	sp, #20
 80105ac:	459c      	cmp	ip, r3
 80105ae:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 80105b2:	4604      	mov	r4, r0
 80105b4:	460f      	mov	r7, r1
 80105b6:	4616      	mov	r6, r2
 80105b8:	f000 81ae 	beq.w	8010918 <uxr_read_framed_msg+0x37c>
 80105bc:	2000      	movs	r0, #0
 80105be:	4639      	mov	r1, r7
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d138      	bne.n	8010636 <uxr_read_framed_msg+0x9a>
 80105c4:	468a      	mov	sl, r1
 80105c6:	7823      	ldrb	r3, [r4, #0]
 80105c8:	2b07      	cmp	r3, #7
 80105ca:	d8fd      	bhi.n	80105c8 <uxr_read_framed_msg+0x2c>
 80105cc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80105d0:	0116013b 	.word	0x0116013b
 80105d4:	00cd00f0 	.word	0x00cd00f0
 80105d8:	005a00a0 	.word	0x005a00a0
 80105dc:	00080037 	.word	0x00080037
 80105e0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80105e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80105e8:	4290      	cmp	r0, r2
 80105ea:	f000 8167 	beq.w	80108bc <uxr_read_framed_msg+0x320>
 80105ee:	18a3      	adds	r3, r4, r2
 80105f0:	1c57      	adds	r7, r2, #1
 80105f2:	49c7      	ldr	r1, [pc, #796]	@ (8010910 <uxr_read_framed_msg+0x374>)
 80105f4:	f893 c002 	ldrb.w	ip, [r3, #2]
 80105f8:	087b      	lsrs	r3, r7, #1
 80105fa:	fba1 8303 	umull	r8, r3, r1, r3
 80105fe:	089b      	lsrs	r3, r3, #2
 8010600:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010604:	fb08 7313 	mls	r3, r8, r3, r7
 8010608:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801060c:	b2df      	uxtb	r7, r3
 801060e:	f000 81b2 	beq.w	8010976 <uxr_read_framed_msg+0x3da>
 8010612:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010616:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 801061a:	f000 8220 	beq.w	8010a5e <uxr_read_framed_msg+0x4c2>
 801061e:	4661      	mov	r1, ip
 8010620:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010622:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8010624:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010628:	b29b      	uxth	r3, r3
 801062a:	2100      	movs	r1, #0
 801062c:	429a      	cmp	r2, r3
 801062e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010630:	7021      	strb	r1, [r4, #0]
 8010632:	f000 8198 	beq.w	8010966 <uxr_read_framed_msg+0x3ca>
 8010636:	2000      	movs	r0, #0
 8010638:	b005      	add	sp, #20
 801063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801063e:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8010642:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010646:	4297      	cmp	r7, r2
 8010648:	f000 8148 	beq.w	80108dc <uxr_read_framed_msg+0x340>
 801064c:	18a3      	adds	r3, r4, r2
 801064e:	f102 0c01 	add.w	ip, r2, #1
 8010652:	49af      	ldr	r1, [pc, #700]	@ (8010910 <uxr_read_framed_msg+0x374>)
 8010654:	7898      	ldrb	r0, [r3, #2]
 8010656:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801065a:	fba1 8303 	umull	r8, r3, r1, r3
 801065e:	089b      	lsrs	r3, r3, #2
 8010660:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010664:	fb08 c313 	mls	r3, r8, r3, ip
 8010668:	287d      	cmp	r0, #125	@ 0x7d
 801066a:	fa5f fc83 	uxtb.w	ip, r3
 801066e:	f000 8194 	beq.w	801099a <uxr_read_framed_msg+0x3fe>
 8010672:	287e      	cmp	r0, #126	@ 0x7e
 8010674:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8010678:	f000 8200 	beq.w	8010a7c <uxr_read_framed_msg+0x4e0>
 801067c:	2307      	movs	r3, #7
 801067e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8010680:	7023      	strb	r3, [r4, #0]
 8010682:	e7a0      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 8010684:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010686:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8010688:	429f      	cmp	r7, r3
 801068a:	f240 8164 	bls.w	8010956 <uxr_read_framed_msg+0x3ba>
 801068e:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8010910 <uxr_read_framed_msg+0x374>
 8010692:	f8cd a00c 	str.w	sl, [sp, #12]
 8010696:	212a      	movs	r1, #42	@ 0x2a
 8010698:	e01f      	b.n	80106da <uxr_read_framed_msg+0x13e>
 801069a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801069e:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 80106a2:	f000 80ea 	beq.w	801087a <uxr_read_framed_msg+0x2de>
 80106a6:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80106aa:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80106ae:	f000 8142 	beq.w	8010936 <uxr_read_framed_msg+0x39a>
 80106b2:	f805 e003 	strb.w	lr, [r5, r3]
 80106b6:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80106b8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80106ba:	4f96      	ldr	r7, [pc, #600]	@ (8010914 <uxr_read_framed_msg+0x378>)
 80106bc:	ea80 020e 	eor.w	r2, r0, lr
 80106c0:	b2d2      	uxtb	r2, r2
 80106c2:	3301      	adds	r3, #1
 80106c4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80106c8:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80106d0:	42bb      	cmp	r3, r7
 80106d2:	8663      	strh	r3, [r4, #50]	@ 0x32
 80106d4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80106d6:	f080 80e7 	bcs.w	80108a8 <uxr_read_framed_msg+0x30c>
 80106da:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80106de:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 80106e2:	f100 0c01 	add.w	ip, r0, #1
 80106e6:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 80106ea:	fba9 e20e 	umull	lr, r2, r9, lr
 80106ee:	0892      	lsrs	r2, r2, #2
 80106f0:	fb01 c212 	mls	r2, r1, r2, ip
 80106f4:	4580      	cmp	r8, r0
 80106f6:	eb04 0a00 	add.w	sl, r4, r0
 80106fa:	fa5f fc82 	uxtb.w	ip, r2
 80106fe:	d1cc      	bne.n	801069a <uxr_read_framed_msg+0xfe>
 8010700:	42bb      	cmp	r3, r7
 8010702:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8010706:	f040 8128 	bne.w	801095a <uxr_read_framed_msg+0x3be>
 801070a:	2306      	movs	r3, #6
 801070c:	7023      	strb	r3, [r4, #0]
 801070e:	e75a      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 8010710:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8010714:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010718:	4297      	cmp	r7, r2
 801071a:	f000 80cf 	beq.w	80108bc <uxr_read_framed_msg+0x320>
 801071e:	18a3      	adds	r3, r4, r2
 8010720:	f102 0c01 	add.w	ip, r2, #1
 8010724:	497a      	ldr	r1, [pc, #488]	@ (8010910 <uxr_read_framed_msg+0x374>)
 8010726:	7898      	ldrb	r0, [r3, #2]
 8010728:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801072c:	fba1 8303 	umull	r8, r3, r1, r3
 8010730:	089b      	lsrs	r3, r3, #2
 8010732:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010736:	fb08 c313 	mls	r3, r8, r3, ip
 801073a:	287d      	cmp	r0, #125	@ 0x7d
 801073c:	fa5f fc83 	uxtb.w	ip, r3
 8010740:	f000 813d 	beq.w	80109be <uxr_read_framed_msg+0x422>
 8010744:	287e      	cmp	r0, #126	@ 0x7e
 8010746:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801074a:	f000 8188 	beq.w	8010a5e <uxr_read_framed_msg+0x4c2>
 801074e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8010750:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010752:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8010756:	b29b      	uxth	r3, r3
 8010758:	2200      	movs	r2, #0
 801075a:	428b      	cmp	r3, r1
 801075c:	8623      	strh	r3, [r4, #48]	@ 0x30
 801075e:	8662      	strh	r2, [r4, #50]	@ 0x32
 8010760:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010762:	f240 80f5 	bls.w	8010950 <uxr_read_framed_msg+0x3b4>
 8010766:	7022      	strb	r2, [r4, #0]
 8010768:	e765      	b.n	8010636 <uxr_read_framed_msg+0x9a>
 801076a:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801076e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010772:	4297      	cmp	r7, r2
 8010774:	f000 80b2 	beq.w	80108dc <uxr_read_framed_msg+0x340>
 8010778:	18a3      	adds	r3, r4, r2
 801077a:	f102 0c01 	add.w	ip, r2, #1
 801077e:	4964      	ldr	r1, [pc, #400]	@ (8010910 <uxr_read_framed_msg+0x374>)
 8010780:	7898      	ldrb	r0, [r3, #2]
 8010782:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8010786:	fba1 8303 	umull	r8, r3, r1, r3
 801078a:	089b      	lsrs	r3, r3, #2
 801078c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010790:	fb08 c313 	mls	r3, r8, r3, ip
 8010794:	287d      	cmp	r0, #125	@ 0x7d
 8010796:	fa5f fc83 	uxtb.w	ip, r3
 801079a:	f000 813b 	beq.w	8010a14 <uxr_read_framed_msg+0x478>
 801079e:	287e      	cmp	r0, #126	@ 0x7e
 80107a0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80107a4:	f000 816a 	beq.w	8010a7c <uxr_read_framed_msg+0x4e0>
 80107a8:	2304      	movs	r3, #4
 80107aa:	8620      	strh	r0, [r4, #48]	@ 0x30
 80107ac:	7023      	strb	r3, [r4, #0]
 80107ae:	e70a      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 80107b0:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80107b4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80107b8:	4297      	cmp	r7, r2
 80107ba:	f000 80c4 	beq.w	8010946 <uxr_read_framed_msg+0x3aa>
 80107be:	18a3      	adds	r3, r4, r2
 80107c0:	f102 0c01 	add.w	ip, r2, #1
 80107c4:	4952      	ldr	r1, [pc, #328]	@ (8010910 <uxr_read_framed_msg+0x374>)
 80107c6:	7898      	ldrb	r0, [r3, #2]
 80107c8:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80107cc:	fba1 8303 	umull	r8, r3, r1, r3
 80107d0:	089b      	lsrs	r3, r3, #2
 80107d2:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80107d6:	fb08 c313 	mls	r3, r8, r3, ip
 80107da:	287d      	cmp	r0, #125	@ 0x7d
 80107dc:	fa5f fc83 	uxtb.w	ip, r3
 80107e0:	f000 812b 	beq.w	8010a3a <uxr_read_framed_msg+0x49e>
 80107e4:	287e      	cmp	r0, #126	@ 0x7e
 80107e6:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80107ea:	f000 8155 	beq.w	8010a98 <uxr_read_framed_msg+0x4fc>
 80107ee:	7863      	ldrb	r3, [r4, #1]
 80107f0:	4283      	cmp	r3, r0
 80107f2:	bf0c      	ite	eq
 80107f4:	2303      	moveq	r3, #3
 80107f6:	2300      	movne	r3, #0
 80107f8:	7023      	strb	r3, [r4, #0]
 80107fa:	e6e4      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 80107fc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010800:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010804:	2300      	movs	r3, #0
 8010806:	4290      	cmp	r0, r2
 8010808:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801080c:	d06b      	beq.n	80108e6 <uxr_read_framed_msg+0x34a>
 801080e:	18a3      	adds	r3, r4, r2
 8010810:	f102 0c01 	add.w	ip, r2, #1
 8010814:	493e      	ldr	r1, [pc, #248]	@ (8010910 <uxr_read_framed_msg+0x374>)
 8010816:	789f      	ldrb	r7, [r3, #2]
 8010818:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801081c:	fba1 8303 	umull	r8, r3, r1, r3
 8010820:	089b      	lsrs	r3, r3, #2
 8010822:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010826:	fb08 c313 	mls	r3, r8, r3, ip
 801082a:	2f7d      	cmp	r7, #125	@ 0x7d
 801082c:	fa5f fc83 	uxtb.w	ip, r3
 8010830:	f000 80d8 	beq.w	80109e4 <uxr_read_framed_msg+0x448>
 8010834:	2f7e      	cmp	r7, #126	@ 0x7e
 8010836:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801083a:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 801083e:	d052      	beq.n	80108e6 <uxr_read_framed_msg+0x34a>
 8010840:	2302      	movs	r3, #2
 8010842:	7023      	strb	r3, [r4, #0]
 8010844:	e6bf      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 8010846:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801084a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801084e:	4930      	ldr	r1, [pc, #192]	@ (8010910 <uxr_read_framed_msg+0x374>)
 8010850:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010854:	e004      	b.n	8010860 <uxr_read_framed_msg+0x2c4>
 8010856:	78bb      	ldrb	r3, [r7, #2]
 8010858:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801085c:	2b7e      	cmp	r3, #126	@ 0x7e
 801085e:	d02a      	beq.n	80108b6 <uxr_read_framed_msg+0x31a>
 8010860:	1c50      	adds	r0, r2, #1
 8010862:	0843      	lsrs	r3, r0, #1
 8010864:	fba1 e303 	umull	lr, r3, r1, r3
 8010868:	089b      	lsrs	r3, r3, #2
 801086a:	fb0c 0013 	mls	r0, ip, r3, r0
 801086e:	4590      	cmp	r8, r2
 8010870:	eb04 0702 	add.w	r7, r4, r2
 8010874:	b2c2      	uxtb	r2, r0
 8010876:	d1ee      	bne.n	8010856 <uxr_read_framed_msg+0x2ba>
 8010878:	e6dd      	b.n	8010636 <uxr_read_framed_msg+0x9a>
 801087a:	3002      	adds	r0, #2
 801087c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8010880:	eb04 0a02 	add.w	sl, r4, r2
 8010884:	fba9 e20e 	umull	lr, r2, r9, lr
 8010888:	0892      	lsrs	r2, r2, #2
 801088a:	45e0      	cmp	r8, ip
 801088c:	fb01 0012 	mls	r0, r1, r2, r0
 8010890:	f43f af36 	beq.w	8010700 <uxr_read_framed_msg+0x164>
 8010894:	f89a e002 	ldrb.w	lr, [sl, #2]
 8010898:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801089c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80108a0:	d049      	beq.n	8010936 <uxr_read_framed_msg+0x39a>
 80108a2:	f08e 0e20 	eor.w	lr, lr, #32
 80108a6:	e704      	b.n	80106b2 <uxr_read_framed_msg+0x116>
 80108a8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80108ac:	f43f af2d 	beq.w	801070a <uxr_read_framed_msg+0x16e>
 80108b0:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80108b4:	d151      	bne.n	801095a <uxr_read_framed_msg+0x3be>
 80108b6:	2301      	movs	r3, #1
 80108b8:	7023      	strb	r3, [r4, #0]
 80108ba:	e684      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 80108bc:	4651      	mov	r1, sl
 80108be:	f8cd b000 	str.w	fp, [sp]
 80108c2:	2301      	movs	r3, #1
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80108c8:	9103      	str	r1, [sp, #12]
 80108ca:	4632      	mov	r2, r6
 80108cc:	4620      	mov	r0, r4
 80108ce:	f7ff fde1 	bl	8010494 <uxr_framing_read_transport>
 80108d2:	fab0 f080 	clz	r0, r0
 80108d6:	9903      	ldr	r1, [sp, #12]
 80108d8:	0940      	lsrs	r0, r0, #5
 80108da:	e671      	b.n	80105c0 <uxr_read_framed_msg+0x24>
 80108dc:	4651      	mov	r1, sl
 80108de:	f8cd b000 	str.w	fp, [sp]
 80108e2:	2302      	movs	r3, #2
 80108e4:	e7ee      	b.n	80108c4 <uxr_read_framed_msg+0x328>
 80108e6:	2304      	movs	r3, #4
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	f8cd b000 	str.w	fp, [sp]
 80108ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80108f0:	4632      	mov	r2, r6
 80108f2:	4651      	mov	r1, sl
 80108f4:	4620      	mov	r0, r4
 80108f6:	f7ff fdcd 	bl	8010494 <uxr_framing_read_transport>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	f47f ae63 	bne.w	80105c6 <uxr_read_framed_msg+0x2a>
 8010900:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8010904:	387e      	subs	r0, #126	@ 0x7e
 8010906:	4651      	mov	r1, sl
 8010908:	bf18      	it	ne
 801090a:	2001      	movne	r0, #1
 801090c:	e658      	b.n	80105c0 <uxr_read_framed_msg+0x24>
 801090e:	bf00      	nop
 8010910:	30c30c31 	.word	0x30c30c31
 8010914:	0801b810 	.word	0x0801b810
 8010918:	2305      	movs	r3, #5
 801091a:	9301      	str	r3, [sp, #4]
 801091c:	f8cd b000 	str.w	fp, [sp]
 8010920:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010922:	f7ff fdb7 	bl	8010494 <uxr_framing_read_transport>
 8010926:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801092a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801092e:	429a      	cmp	r2, r3
 8010930:	f43f ae81 	beq.w	8010636 <uxr_read_framed_msg+0x9a>
 8010934:	e642      	b.n	80105bc <uxr_read_framed_msg+0x20>
 8010936:	42bb      	cmp	r3, r7
 8010938:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801093c:	f43f aee5 	beq.w	801070a <uxr_read_framed_msg+0x16e>
 8010940:	2301      	movs	r3, #1
 8010942:	7023      	strb	r3, [r4, #0]
 8010944:	e63f      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 8010946:	4651      	mov	r1, sl
 8010948:	f8cd b000 	str.w	fp, [sp]
 801094c:	2303      	movs	r3, #3
 801094e:	e7b9      	b.n	80108c4 <uxr_read_framed_msg+0x328>
 8010950:	2305      	movs	r3, #5
 8010952:	7023      	strb	r3, [r4, #0]
 8010954:	e637      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 8010956:	f43f aed8 	beq.w	801070a <uxr_read_framed_msg+0x16e>
 801095a:	1afb      	subs	r3, r7, r3
 801095c:	3302      	adds	r3, #2
 801095e:	e9cd b300 	strd	fp, r3, [sp]
 8010962:	4651      	mov	r1, sl
 8010964:	e7af      	b.n	80108c6 <uxr_read_framed_msg+0x32a>
 8010966:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010968:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801096c:	7013      	strb	r3, [r2, #0]
 801096e:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8010970:	b005      	add	sp, #20
 8010972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010976:	4287      	cmp	r7, r0
 8010978:	d0a0      	beq.n	80108bc <uxr_read_framed_msg+0x320>
 801097a:	4423      	add	r3, r4
 801097c:	3202      	adds	r2, #2
 801097e:	7898      	ldrb	r0, [r3, #2]
 8010980:	0853      	lsrs	r3, r2, #1
 8010982:	fba1 e303 	umull	lr, r3, r1, r3
 8010986:	089b      	lsrs	r3, r3, #2
 8010988:	fb08 2213 	mls	r2, r8, r3, r2
 801098c:	287e      	cmp	r0, #126	@ 0x7e
 801098e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010992:	d064      	beq.n	8010a5e <uxr_read_framed_msg+0x4c2>
 8010994:	f080 0120 	eor.w	r1, r0, #32
 8010998:	e642      	b.n	8010620 <uxr_read_framed_msg+0x84>
 801099a:	45bc      	cmp	ip, r7
 801099c:	d09e      	beq.n	80108dc <uxr_read_framed_msg+0x340>
 801099e:	4423      	add	r3, r4
 80109a0:	3202      	adds	r2, #2
 80109a2:	7898      	ldrb	r0, [r3, #2]
 80109a4:	0853      	lsrs	r3, r2, #1
 80109a6:	fba1 e303 	umull	lr, r3, r1, r3
 80109aa:	089b      	lsrs	r3, r3, #2
 80109ac:	fb08 2213 	mls	r2, r8, r3, r2
 80109b0:	287e      	cmp	r0, #126	@ 0x7e
 80109b2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80109b6:	d061      	beq.n	8010a7c <uxr_read_framed_msg+0x4e0>
 80109b8:	f080 0020 	eor.w	r0, r0, #32
 80109bc:	e65e      	b.n	801067c <uxr_read_framed_msg+0xe0>
 80109be:	4567      	cmp	r7, ip
 80109c0:	f43f af7c 	beq.w	80108bc <uxr_read_framed_msg+0x320>
 80109c4:	4423      	add	r3, r4
 80109c6:	3202      	adds	r2, #2
 80109c8:	7898      	ldrb	r0, [r3, #2]
 80109ca:	0853      	lsrs	r3, r2, #1
 80109cc:	fba1 e303 	umull	lr, r3, r1, r3
 80109d0:	089b      	lsrs	r3, r3, #2
 80109d2:	fb08 2213 	mls	r2, r8, r3, r2
 80109d6:	287e      	cmp	r0, #126	@ 0x7e
 80109d8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80109dc:	d03f      	beq.n	8010a5e <uxr_read_framed_msg+0x4c2>
 80109de:	f080 0020 	eor.w	r0, r0, #32
 80109e2:	e6b4      	b.n	801074e <uxr_read_framed_msg+0x1b2>
 80109e4:	4560      	cmp	r0, ip
 80109e6:	f43f af7e 	beq.w	80108e6 <uxr_read_framed_msg+0x34a>
 80109ea:	4423      	add	r3, r4
 80109ec:	3202      	adds	r2, #2
 80109ee:	7898      	ldrb	r0, [r3, #2]
 80109f0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80109f4:	0853      	lsrs	r3, r2, #1
 80109f6:	fba1 e303 	umull	lr, r3, r1, r3
 80109fa:	089b      	lsrs	r3, r3, #2
 80109fc:	fb08 2213 	mls	r2, r8, r3, r2
 8010a00:	287e      	cmp	r0, #126	@ 0x7e
 8010a02:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a06:	f43f af6e 	beq.w	80108e6 <uxr_read_framed_msg+0x34a>
 8010a0a:	f080 0020 	eor.w	r0, r0, #32
 8010a0e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8010a12:	e715      	b.n	8010840 <uxr_read_framed_msg+0x2a4>
 8010a14:	4567      	cmp	r7, ip
 8010a16:	f43f af61 	beq.w	80108dc <uxr_read_framed_msg+0x340>
 8010a1a:	4423      	add	r3, r4
 8010a1c:	3202      	adds	r2, #2
 8010a1e:	7898      	ldrb	r0, [r3, #2]
 8010a20:	0853      	lsrs	r3, r2, #1
 8010a22:	fba1 e303 	umull	lr, r3, r1, r3
 8010a26:	089b      	lsrs	r3, r3, #2
 8010a28:	fb08 2213 	mls	r2, r8, r3, r2
 8010a2c:	287e      	cmp	r0, #126	@ 0x7e
 8010a2e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a32:	d023      	beq.n	8010a7c <uxr_read_framed_msg+0x4e0>
 8010a34:	f080 0020 	eor.w	r0, r0, #32
 8010a38:	e6b6      	b.n	80107a8 <uxr_read_framed_msg+0x20c>
 8010a3a:	45bc      	cmp	ip, r7
 8010a3c:	d083      	beq.n	8010946 <uxr_read_framed_msg+0x3aa>
 8010a3e:	4423      	add	r3, r4
 8010a40:	3202      	adds	r2, #2
 8010a42:	7898      	ldrb	r0, [r3, #2]
 8010a44:	0853      	lsrs	r3, r2, #1
 8010a46:	fba1 e303 	umull	lr, r3, r1, r3
 8010a4a:	089b      	lsrs	r3, r3, #2
 8010a4c:	fb08 2213 	mls	r2, r8, r3, r2
 8010a50:	287e      	cmp	r0, #126	@ 0x7e
 8010a52:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a56:	d01f      	beq.n	8010a98 <uxr_read_framed_msg+0x4fc>
 8010a58:	f080 0020 	eor.w	r0, r0, #32
 8010a5c:	e6c7      	b.n	80107ee <uxr_read_framed_msg+0x252>
 8010a5e:	2701      	movs	r7, #1
 8010a60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a62:	f8cd b000 	str.w	fp, [sp]
 8010a66:	9701      	str	r7, [sp, #4]
 8010a68:	4632      	mov	r2, r6
 8010a6a:	4651      	mov	r1, sl
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f7ff fd11 	bl	8010494 <uxr_framing_read_transport>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	f47f ada7 	bne.w	80105c6 <uxr_read_framed_msg+0x2a>
 8010a78:	7027      	strb	r7, [r4, #0]
 8010a7a:	e5a4      	b.n	80105c6 <uxr_read_framed_msg+0x2a>
 8010a7c:	f8cd b000 	str.w	fp, [sp]
 8010a80:	2302      	movs	r3, #2
 8010a82:	9301      	str	r3, [sp, #4]
 8010a84:	4632      	mov	r2, r6
 8010a86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a88:	4651      	mov	r1, sl
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	f7ff fd02 	bl	8010494 <uxr_framing_read_transport>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	f47f ad98 	bne.w	80105c6 <uxr_read_framed_msg+0x2a>
 8010a96:	e70e      	b.n	80108b6 <uxr_read_framed_msg+0x31a>
 8010a98:	f8cd b000 	str.w	fp, [sp]
 8010a9c:	2303      	movs	r3, #3
 8010a9e:	e7f0      	b.n	8010a82 <uxr_read_framed_msg+0x4e6>

08010aa0 <uxr_stream_id>:
 8010aa0:	2901      	cmp	r1, #1
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	d011      	beq.n	8010acc <uxr_stream_id+0x2c>
 8010aa8:	2902      	cmp	r1, #2
 8010aaa:	f04f 0c00 	mov.w	ip, #0
 8010aae:	d00a      	beq.n	8010ac6 <uxr_stream_id+0x26>
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	f36c 0007 	bfi	r0, ip, #0, #8
 8010ab6:	f363 200f 	bfi	r0, r3, #8, #8
 8010aba:	f361 4017 	bfi	r0, r1, #16, #8
 8010abe:	f362 601f 	bfi	r0, r2, #24, #8
 8010ac2:	b002      	add	sp, #8
 8010ac4:	4770      	bx	lr
 8010ac6:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010aca:	e7f1      	b.n	8010ab0 <uxr_stream_id+0x10>
 8010acc:	f100 0c01 	add.w	ip, r0, #1
 8010ad0:	fa5f fc8c 	uxtb.w	ip, ip
 8010ad4:	e7ec      	b.n	8010ab0 <uxr_stream_id+0x10>
 8010ad6:	bf00      	nop

08010ad8 <uxr_stream_id_from_raw>:
 8010ad8:	b082      	sub	sp, #8
 8010ada:	4603      	mov	r3, r0
 8010adc:	b130      	cbz	r0, 8010aec <uxr_stream_id_from_raw+0x14>
 8010ade:	0602      	lsls	r2, r0, #24
 8010ae0:	d411      	bmi.n	8010b06 <uxr_stream_id_from_raw+0x2e>
 8010ae2:	1e42      	subs	r2, r0, #1
 8010ae4:	b2d2      	uxtb	r2, r2
 8010ae6:	f04f 0c01 	mov.w	ip, #1
 8010aea:	e001      	b.n	8010af0 <uxr_stream_id_from_raw+0x18>
 8010aec:	4684      	mov	ip, r0
 8010aee:	4602      	mov	r2, r0
 8010af0:	2000      	movs	r0, #0
 8010af2:	f363 0007 	bfi	r0, r3, #0, #8
 8010af6:	f362 200f 	bfi	r0, r2, #8, #8
 8010afa:	f36c 4017 	bfi	r0, ip, #16, #8
 8010afe:	f361 601f 	bfi	r0, r1, #24, #8
 8010b02:	b002      	add	sp, #8
 8010b04:	4770      	bx	lr
 8010b06:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010b0a:	f04f 0c02 	mov.w	ip, #2
 8010b0e:	e7ef      	b.n	8010af0 <uxr_stream_id_from_raw+0x18>

08010b10 <uxr_init_stream_storage>:
 8010b10:	2300      	movs	r3, #0
 8010b12:	7403      	strb	r3, [r0, #16]
 8010b14:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010b18:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010b1c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop

08010b24 <uxr_reset_stream_storage>:
 8010b24:	b570      	push	{r4, r5, r6, lr}
 8010b26:	7c03      	ldrb	r3, [r0, #16]
 8010b28:	4604      	mov	r4, r0
 8010b2a:	b153      	cbz	r3, 8010b42 <uxr_reset_stream_storage+0x1e>
 8010b2c:	4606      	mov	r6, r0
 8010b2e:	2500      	movs	r5, #0
 8010b30:	4630      	mov	r0, r6
 8010b32:	f007 f8f3 	bl	8017d1c <uxr_reset_output_best_effort_stream>
 8010b36:	7c23      	ldrb	r3, [r4, #16]
 8010b38:	3501      	adds	r5, #1
 8010b3a:	42ab      	cmp	r3, r5
 8010b3c:	f106 0610 	add.w	r6, r6, #16
 8010b40:	d8f6      	bhi.n	8010b30 <uxr_reset_stream_storage+0xc>
 8010b42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010b46:	b163      	cbz	r3, 8010b62 <uxr_reset_stream_storage+0x3e>
 8010b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b4c:	2500      	movs	r5, #0
 8010b4e:	4630      	mov	r0, r6
 8010b50:	f006 fef4 	bl	801793c <uxr_reset_input_best_effort_stream>
 8010b54:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010b58:	3501      	adds	r5, #1
 8010b5a:	42ab      	cmp	r3, r5
 8010b5c:	f106 0602 	add.w	r6, r6, #2
 8010b60:	d8f5      	bhi.n	8010b4e <uxr_reset_stream_storage+0x2a>
 8010b62:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010b66:	b163      	cbz	r3, 8010b82 <uxr_reset_stream_storage+0x5e>
 8010b68:	f104 0618 	add.w	r6, r4, #24
 8010b6c:	2500      	movs	r5, #0
 8010b6e:	4630      	mov	r0, r6
 8010b70:	f007 f97e 	bl	8017e70 <uxr_reset_output_reliable_stream>
 8010b74:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010b78:	3501      	adds	r5, #1
 8010b7a:	42ab      	cmp	r3, r5
 8010b7c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010b80:	d8f5      	bhi.n	8010b6e <uxr_reset_stream_storage+0x4a>
 8010b82:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010b86:	b163      	cbz	r3, 8010ba2 <uxr_reset_stream_storage+0x7e>
 8010b88:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010b8c:	2500      	movs	r5, #0
 8010b8e:	4630      	mov	r0, r6
 8010b90:	f006 ff44 	bl	8017a1c <uxr_reset_input_reliable_stream>
 8010b94:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010b98:	3501      	adds	r5, #1
 8010b9a:	42ab      	cmp	r3, r5
 8010b9c:	f106 0618 	add.w	r6, r6, #24
 8010ba0:	d8f5      	bhi.n	8010b8e <uxr_reset_stream_storage+0x6a>
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}

08010ba4 <uxr_add_output_best_effort_buffer>:
 8010ba4:	b510      	push	{r4, lr}
 8010ba6:	7c04      	ldrb	r4, [r0, #16]
 8010ba8:	f104 0c01 	add.w	ip, r4, #1
 8010bac:	b082      	sub	sp, #8
 8010bae:	f880 c010 	strb.w	ip, [r0, #16]
 8010bb2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010bb6:	f007 f8a7 	bl	8017d08 <uxr_init_output_best_effort_stream>
 8010bba:	2201      	movs	r2, #1
 8010bbc:	4611      	mov	r1, r2
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	b002      	add	sp, #8
 8010bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc6:	f7ff bf6b 	b.w	8010aa0 <uxr_stream_id>
 8010bca:	bf00      	nop

08010bcc <uxr_add_output_reliable_buffer>:
 8010bcc:	b510      	push	{r4, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	4684      	mov	ip, r0
 8010bd2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010bd6:	9000      	str	r0, [sp, #0]
 8010bd8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010bdc:	2028      	movs	r0, #40	@ 0x28
 8010bde:	fb00 c004 	mla	r0, r0, r4, ip
 8010be2:	f104 0e01 	add.w	lr, r4, #1
 8010be6:	3018      	adds	r0, #24
 8010be8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010bec:	f007 f908 	bl	8017e00 <uxr_init_output_reliable_stream>
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	2102      	movs	r1, #2
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	b004      	add	sp, #16
 8010bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bfc:	f7ff bf50 	b.w	8010aa0 <uxr_stream_id>

08010c00 <uxr_add_input_best_effort_buffer>:
 8010c00:	b510      	push	{r4, lr}
 8010c02:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010c06:	1c62      	adds	r2, r4, #1
 8010c08:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010c0c:	b082      	sub	sp, #8
 8010c0e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8010c12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010c16:	f006 fe8d 	bl	8017934 <uxr_init_input_best_effort_stream>
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	4620      	mov	r0, r4
 8010c20:	b002      	add	sp, #8
 8010c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c26:	f7ff bf3b 	b.w	8010aa0 <uxr_stream_id>
 8010c2a:	bf00      	nop

08010c2c <uxr_add_input_reliable_buffer>:
 8010c2c:	b510      	push	{r4, lr}
 8010c2e:	b084      	sub	sp, #16
 8010c30:	4684      	mov	ip, r0
 8010c32:	9806      	ldr	r0, [sp, #24]
 8010c34:	9000      	str	r0, [sp, #0]
 8010c36:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010c3a:	2018      	movs	r0, #24
 8010c3c:	fb00 c004 	mla	r0, r0, r4, ip
 8010c40:	f104 0e01 	add.w	lr, r4, #1
 8010c44:	3048      	adds	r0, #72	@ 0x48
 8010c46:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010c4a:	f006 febb 	bl	80179c4 <uxr_init_input_reliable_stream>
 8010c4e:	2200      	movs	r2, #0
 8010c50:	2102      	movs	r1, #2
 8010c52:	4620      	mov	r0, r4
 8010c54:	b004      	add	sp, #16
 8010c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c5a:	f7ff bf21 	b.w	8010aa0 <uxr_stream_id>
 8010c5e:	bf00      	nop

08010c60 <uxr_get_output_best_effort_stream>:
 8010c60:	7c03      	ldrb	r3, [r0, #16]
 8010c62:	428b      	cmp	r3, r1
 8010c64:	bf8c      	ite	hi
 8010c66:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010c6a:	2000      	movls	r0, #0
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop

08010c70 <uxr_get_output_reliable_stream>:
 8010c70:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010c74:	428b      	cmp	r3, r1
 8010c76:	bf83      	ittte	hi
 8010c78:	2328      	movhi	r3, #40	@ 0x28
 8010c7a:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010c7e:	3018      	addhi	r0, #24
 8010c80:	2000      	movls	r0, #0
 8010c82:	4770      	bx	lr

08010c84 <uxr_get_input_best_effort_stream>:
 8010c84:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010c88:	428b      	cmp	r3, r1
 8010c8a:	bf86      	itte	hi
 8010c8c:	3121      	addhi	r1, #33	@ 0x21
 8010c8e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010c92:	2000      	movls	r0, #0
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop

08010c98 <uxr_get_input_reliable_stream>:
 8010c98:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010c9c:	428b      	cmp	r3, r1
 8010c9e:	bf83      	ittte	hi
 8010ca0:	2318      	movhi	r3, #24
 8010ca2:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010ca6:	3048      	addhi	r0, #72	@ 0x48
 8010ca8:	2000      	movls	r0, #0
 8010caa:	4770      	bx	lr

08010cac <uxr_output_streams_confirmed>:
 8010cac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010cb0:	b183      	cbz	r3, 8010cd4 <uxr_output_streams_confirmed+0x28>
 8010cb2:	b570      	push	{r4, r5, r6, lr}
 8010cb4:	4606      	mov	r6, r0
 8010cb6:	f100 0518 	add.w	r5, r0, #24
 8010cba:	2400      	movs	r4, #0
 8010cbc:	e001      	b.n	8010cc2 <uxr_output_streams_confirmed+0x16>
 8010cbe:	3528      	adds	r5, #40	@ 0x28
 8010cc0:	b138      	cbz	r0, 8010cd2 <uxr_output_streams_confirmed+0x26>
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f007 fb3c 	bl	8018340 <uxr_is_output_up_to_date>
 8010cc8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010ccc:	3401      	adds	r4, #1
 8010cce:	42a3      	cmp	r3, r4
 8010cd0:	d8f5      	bhi.n	8010cbe <uxr_output_streams_confirmed+0x12>
 8010cd2:	bd70      	pop	{r4, r5, r6, pc}
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	4770      	bx	lr

08010cd8 <uxr_buffer_submessage_header>:
 8010cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cda:	4604      	mov	r4, r0
 8010cdc:	460e      	mov	r6, r1
 8010cde:	2104      	movs	r1, #4
 8010ce0:	4615      	mov	r5, r2
 8010ce2:	461f      	mov	r7, r3
 8010ce4:	f7fd fd10 	bl	800e708 <ucdr_align_to>
 8010ce8:	2301      	movs	r3, #1
 8010cea:	7523      	strb	r3, [r4, #20]
 8010cec:	f047 0201 	orr.w	r2, r7, #1
 8010cf0:	462b      	mov	r3, r5
 8010cf2:	4631      	mov	r1, r6
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f000 fa2b 	bl	8011150 <uxr_serialize_submessage_header>
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f7fd fd1a 	bl	800e734 <ucdr_buffer_remaining>
 8010d00:	42a8      	cmp	r0, r5
 8010d02:	bf34      	ite	cc
 8010d04:	2000      	movcc	r0, #0
 8010d06:	2001      	movcs	r0, #1
 8010d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d0a:	bf00      	nop

08010d0c <uxr_read_submessage_header>:
 8010d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d10:	4604      	mov	r4, r0
 8010d12:	460d      	mov	r5, r1
 8010d14:	2104      	movs	r1, #4
 8010d16:	4616      	mov	r6, r2
 8010d18:	4698      	mov	r8, r3
 8010d1a:	f7fd fcf5 	bl	800e708 <ucdr_align_to>
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f7fd fd08 	bl	800e734 <ucdr_buffer_remaining>
 8010d24:	2803      	cmp	r0, #3
 8010d26:	bf8c      	ite	hi
 8010d28:	2701      	movhi	r7, #1
 8010d2a:	2700      	movls	r7, #0
 8010d2c:	d802      	bhi.n	8010d34 <uxr_read_submessage_header+0x28>
 8010d2e:	4638      	mov	r0, r7
 8010d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d34:	4633      	mov	r3, r6
 8010d36:	4642      	mov	r2, r8
 8010d38:	4620      	mov	r0, r4
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	f000 fa1a 	bl	8011174 <uxr_deserialize_submessage_header>
 8010d40:	f898 3000 	ldrb.w	r3, [r8]
 8010d44:	f003 0201 	and.w	r2, r3, #1
 8010d48:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010d4c:	f888 3000 	strb.w	r3, [r8]
 8010d50:	7522      	strb	r2, [r4, #20]
 8010d52:	4638      	mov	r0, r7
 8010d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d58 <uxr_submessage_padding>:
 8010d58:	f010 0003 	ands.w	r0, r0, #3
 8010d5c:	bf18      	it	ne
 8010d5e:	f1c0 0004 	rsbne	r0, r0, #4
 8010d62:	4770      	bx	lr

08010d64 <uxr_millis>:
 8010d64:	b510      	push	{r4, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	4669      	mov	r1, sp
 8010d6a:	2001      	movs	r0, #1
 8010d6c:	f7f1 fdb4 	bl	80028d8 <clock_gettime>
 8010d70:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010d74:	4b06      	ldr	r3, [pc, #24]	@ (8010d90 <uxr_millis+0x2c>)
 8010d76:	fba0 0103 	umull	r0, r1, r0, r3
 8010d7a:	1900      	adds	r0, r0, r4
 8010d7c:	fb03 1102 	mla	r1, r3, r2, r1
 8010d80:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010d84:	4a03      	ldr	r2, [pc, #12]	@ (8010d94 <uxr_millis+0x30>)
 8010d86:	2300      	movs	r3, #0
 8010d88:	f7ef fdb8 	bl	80008fc <__aeabi_ldivmod>
 8010d8c:	b004      	add	sp, #16
 8010d8e:	bd10      	pop	{r4, pc}
 8010d90:	3b9aca00 	.word	0x3b9aca00
 8010d94:	000f4240 	.word	0x000f4240

08010d98 <uxr_nanos>:
 8010d98:	b510      	push	{r4, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	4669      	mov	r1, sp
 8010d9e:	2001      	movs	r0, #1
 8010da0:	f7f1 fd9a 	bl	80028d8 <clock_gettime>
 8010da4:	4a06      	ldr	r2, [pc, #24]	@ (8010dc0 <uxr_nanos+0x28>)
 8010da6:	9800      	ldr	r0, [sp, #0]
 8010da8:	9902      	ldr	r1, [sp, #8]
 8010daa:	9c01      	ldr	r4, [sp, #4]
 8010dac:	fba0 0302 	umull	r0, r3, r0, r2
 8010db0:	1840      	adds	r0, r0, r1
 8010db2:	fb02 3304 	mla	r3, r2, r4, r3
 8010db6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010dba:	b004      	add	sp, #16
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	bf00      	nop
 8010dc0:	3b9aca00 	.word	0x3b9aca00

08010dc4 <on_full_output_buffer_fragmented>:
 8010dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc8:	460c      	mov	r4, r1
 8010dca:	b08a      	sub	sp, #40	@ 0x28
 8010dcc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010dd0:	4606      	mov	r6, r0
 8010dd2:	f104 0008 	add.w	r0, r4, #8
 8010dd6:	f7ff ff4b 	bl	8010c70 <uxr_get_output_reliable_stream>
 8010dda:	4605      	mov	r5, r0
 8010ddc:	f007 faba 	bl	8018354 <get_available_free_slots>
 8010de0:	b968      	cbnz	r0, 8010dfe <on_full_output_buffer_fragmented+0x3a>
 8010de2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010de6:	4620      	mov	r0, r4
 8010de8:	4798      	blx	r3
 8010dea:	b918      	cbnz	r0, 8010df4 <on_full_output_buffer_fragmented+0x30>
 8010dec:	2001      	movs	r0, #1
 8010dee:	b00a      	add	sp, #40	@ 0x28
 8010df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df4:	4628      	mov	r0, r5
 8010df6:	f007 faad 	bl	8018354 <get_available_free_slots>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	d0f6      	beq.n	8010dec <on_full_output_buffer_fragmented+0x28>
 8010dfe:	892a      	ldrh	r2, [r5, #8]
 8010e00:	686b      	ldr	r3, [r5, #4]
 8010e02:	fbb3 f8f2 	udiv	r8, r3, r2
 8010e06:	89eb      	ldrh	r3, [r5, #14]
 8010e08:	7b29      	ldrb	r1, [r5, #12]
 8010e0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e0e:	fb02 3310 	mls	r3, r2, r0, r3
 8010e12:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	fb08 f303 	mul.w	r3, r8, r3
 8010e1c:	31fc      	adds	r1, #252	@ 0xfc
 8010e1e:	f1a8 0804 	sub.w	r8, r8, #4
 8010e22:	4441      	add	r1, r8
 8010e24:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010e28:	b28f      	uxth	r7, r1
 8010e2a:	6829      	ldr	r1, [r5, #0]
 8010e2c:	3304      	adds	r3, #4
 8010e2e:	1bd2      	subs	r2, r2, r7
 8010e30:	4419      	add	r1, r3
 8010e32:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8010e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	4642      	mov	r2, r8
 8010e3e:	2300      	movs	r3, #0
 8010e40:	a802      	add	r0, sp, #8
 8010e42:	f7fd fc35 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 8010e46:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010e4a:	f102 0308 	add.w	r3, r2, #8
 8010e4e:	4543      	cmp	r3, r8
 8010e50:	d928      	bls.n	8010ea4 <on_full_output_buffer_fragmented+0xe0>
 8010e52:	463a      	mov	r2, r7
 8010e54:	2300      	movs	r3, #0
 8010e56:	210d      	movs	r1, #13
 8010e58:	a802      	add	r0, sp, #8
 8010e5a:	f7ff ff3d 	bl	8010cd8 <uxr_buffer_submessage_header>
 8010e5e:	8929      	ldrh	r1, [r5, #8]
 8010e60:	89eb      	ldrh	r3, [r5, #14]
 8010e62:	fbb3 f2f1 	udiv	r2, r3, r1
 8010e66:	fb01 3312 	mls	r3, r1, r2, r3
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	686a      	ldr	r2, [r5, #4]
 8010e6e:	fbb2 f2f1 	udiv	r2, r2, r1
 8010e72:	fb02 f303 	mul.w	r3, r2, r3
 8010e76:	682a      	ldr	r2, [r5, #0]
 8010e78:	f842 8003 	str.w	r8, [r2, r3]
 8010e7c:	89e8      	ldrh	r0, [r5, #14]
 8010e7e:	2101      	movs	r1, #1
 8010e80:	f007 fbbc 	bl	80185fc <uxr_seq_num_add>
 8010e84:	9904      	ldr	r1, [sp, #16]
 8010e86:	9a03      	ldr	r2, [sp, #12]
 8010e88:	81e8      	strh	r0, [r5, #14]
 8010e8a:	1a52      	subs	r2, r2, r1
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f7fd fc21 	bl	800e6d4 <ucdr_init_buffer>
 8010e92:	4630      	mov	r0, r6
 8010e94:	4910      	ldr	r1, [pc, #64]	@ (8010ed8 <on_full_output_buffer_fragmented+0x114>)
 8010e96:	4622      	mov	r2, r4
 8010e98:	f7fd fbf0 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	b00a      	add	sp, #40	@ 0x28
 8010ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea4:	b292      	uxth	r2, r2
 8010ea6:	2302      	movs	r3, #2
 8010ea8:	210d      	movs	r1, #13
 8010eaa:	a802      	add	r0, sp, #8
 8010eac:	f7ff ff14 	bl	8010cd8 <uxr_buffer_submessage_header>
 8010eb0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010eb4:	8928      	ldrh	r0, [r5, #8]
 8010eb6:	f103 0208 	add.w	r2, r3, #8
 8010eba:	89eb      	ldrh	r3, [r5, #14]
 8010ebc:	fbb3 f1f0 	udiv	r1, r3, r0
 8010ec0:	fb00 3311 	mls	r3, r0, r1, r3
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	6869      	ldr	r1, [r5, #4]
 8010ec8:	fbb1 f1f0 	udiv	r1, r1, r0
 8010ecc:	fb01 f303 	mul.w	r3, r1, r3
 8010ed0:	6829      	ldr	r1, [r5, #0]
 8010ed2:	50ca      	str	r2, [r1, r3]
 8010ed4:	e7d2      	b.n	8010e7c <on_full_output_buffer_fragmented+0xb8>
 8010ed6:	bf00      	nop
 8010ed8:	08010dc5 	.word	0x08010dc5

08010edc <uxr_prepare_output_stream>:
 8010edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ede:	b087      	sub	sp, #28
 8010ee0:	2707      	movs	r7, #7
 8010ee2:	9202      	str	r2, [sp, #8]
 8010ee4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010ee6:	2500      	movs	r5, #0
 8010ee8:	3204      	adds	r2, #4
 8010eea:	e9cd 7500 	strd	r7, r5, [sp]
 8010eee:	461c      	mov	r4, r3
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	f7ff f807 	bl	800ff04 <uxr_prepare_stream_to_write_submessage>
 8010ef6:	f080 0201 	eor.w	r2, r0, #1
 8010efa:	b2d2      	uxtb	r2, r2
 8010efc:	75a2      	strb	r2, [r4, #22]
 8010efe:	b112      	cbz	r2, 8010f06 <uxr_prepare_output_stream+0x2a>
 8010f00:	4628      	mov	r0, r5
 8010f02:	b007      	add	sp, #28
 8010f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f06:	aa05      	add	r2, sp, #20
 8010f08:	9902      	ldr	r1, [sp, #8]
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	f7ff f934 	bl	8010178 <uxr_init_base_object_request>
 8010f10:	a905      	add	r1, sp, #20
 8010f12:	4605      	mov	r5, r0
 8010f14:	4620      	mov	r0, r4
 8010f16:	f001 f879 	bl	801200c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010f1a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010f1e:	69a6      	ldr	r6, [r4, #24]
 8010f20:	69e7      	ldr	r7, [r4, #28]
 8010f22:	1a52      	subs	r2, r2, r1
 8010f24:	4620      	mov	r0, r4
 8010f26:	f7fd fbd5 	bl	800e6d4 <ucdr_init_buffer>
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	463a      	mov	r2, r7
 8010f2e:	4631      	mov	r1, r6
 8010f30:	f7fd fba4 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 8010f34:	4628      	mov	r0, r5
 8010f36:	b007      	add	sp, #28
 8010f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f3a:	bf00      	nop

08010f3c <uxr_prepare_output_stream_fragmented>:
 8010f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f40:	b093      	sub	sp, #76	@ 0x4c
 8010f42:	4605      	mov	r5, r0
 8010f44:	9107      	str	r1, [sp, #28]
 8010f46:	3008      	adds	r0, #8
 8010f48:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010f4c:	9303      	str	r3, [sp, #12]
 8010f4e:	9206      	str	r2, [sp, #24]
 8010f50:	f7ff fe8e 	bl	8010c70 <uxr_get_output_reliable_stream>
 8010f54:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	f000 8095 	beq.w	8011088 <uxr_prepare_output_stream_fragmented+0x14c>
 8010f5e:	4604      	mov	r4, r0
 8010f60:	2800      	cmp	r0, #0
 8010f62:	f000 8091 	beq.w	8011088 <uxr_prepare_output_stream_fragmented+0x14c>
 8010f66:	f007 f9f5 	bl	8018354 <get_available_free_slots>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	f000 8087 	beq.w	801107e <uxr_prepare_output_stream_fragmented+0x142>
 8010f70:	8922      	ldrh	r2, [r4, #8]
 8010f72:	89e7      	ldrh	r7, [r4, #14]
 8010f74:	fbb7 f3f2 	udiv	r3, r7, r2
 8010f78:	fb02 7313 	mls	r3, r2, r3, r7
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	6861      	ldr	r1, [r4, #4]
 8010f80:	fbb1 f1f2 	udiv	r1, r1, r2
 8010f84:	6822      	ldr	r2, [r4, #0]
 8010f86:	9105      	str	r1, [sp, #20]
 8010f88:	fb01 f303 	mul.w	r3, r1, r3
 8010f8c:	3304      	adds	r3, #4
 8010f8e:	eb02 0903 	add.w	r9, r2, r3
 8010f92:	7b23      	ldrb	r3, [r4, #12]
 8010f94:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010f98:	4543      	cmp	r3, r8
 8010f9a:	f1a1 0b04 	sub.w	fp, r1, #4
 8010f9e:	d37f      	bcc.n	80110a0 <uxr_prepare_output_stream_fragmented+0x164>
 8010fa0:	f1ab 0a04 	sub.w	sl, fp, #4
 8010fa4:	ebaa 0a03 	sub.w	sl, sl, r3
 8010fa8:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010faa:	f8cd 8000 	str.w	r8, [sp]
 8010fae:	fa1f f38a 	uxth.w	r3, sl
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	465a      	mov	r2, fp
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	4649      	mov	r1, r9
 8010fba:	a80a      	add	r0, sp, #40	@ 0x28
 8010fbc:	f7fd fb78 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 8010fc0:	f106 0a08 	add.w	sl, r6, #8
 8010fc4:	45da      	cmp	sl, fp
 8010fc6:	bf2c      	ite	cs
 8010fc8:	2300      	movcs	r3, #0
 8010fca:	2301      	movcc	r3, #1
 8010fcc:	9a04      	ldr	r2, [sp, #16]
 8010fce:	005b      	lsls	r3, r3, #1
 8010fd0:	210d      	movs	r1, #13
 8010fd2:	a80a      	add	r0, sp, #40	@ 0x28
 8010fd4:	f7ff fe80 	bl	8010cd8 <uxr_buffer_submessage_header>
 8010fd8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010fdc:	fbb7 f2fc 	udiv	r2, r7, ip
 8010fe0:	fb0c 7212 	mls	r2, ip, r2, r7
 8010fe4:	b292      	uxth	r2, r2
 8010fe6:	6863      	ldr	r3, [r4, #4]
 8010fe8:	fbb3 f3fc 	udiv	r3, r3, ip
 8010fec:	fb02 f303 	mul.w	r3, r2, r3
 8010ff0:	6822      	ldr	r2, [r4, #0]
 8010ff2:	2101      	movs	r1, #1
 8010ff4:	f842 b003 	str.w	fp, [r2, r3]
 8010ff8:	4638      	mov	r0, r7
 8010ffa:	f007 faff 	bl	80185fc <uxr_seq_num_add>
 8010ffe:	9b05      	ldr	r3, [sp, #20]
 8011000:	9e03      	ldr	r6, [sp, #12]
 8011002:	f1a3 0208 	sub.w	r2, r3, #8
 8011006:	f108 0104 	add.w	r1, r8, #4
 801100a:	4607      	mov	r7, r0
 801100c:	eba2 0208 	sub.w	r2, r2, r8
 8011010:	4449      	add	r1, r9
 8011012:	4630      	mov	r0, r6
 8011014:	f7fd fb5e 	bl	800e6d4 <ucdr_init_buffer>
 8011018:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801101a:	81e7      	strh	r7, [r4, #14]
 801101c:	1d1a      	adds	r2, r3, #4
 801101e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011022:	bf28      	it	cs
 8011024:	2200      	movcs	r2, #0
 8011026:	2300      	movs	r3, #0
 8011028:	b292      	uxth	r2, r2
 801102a:	2107      	movs	r1, #7
 801102c:	4630      	mov	r0, r6
 801102e:	f7ff fe53 	bl	8010cd8 <uxr_buffer_submessage_header>
 8011032:	9906      	ldr	r1, [sp, #24]
 8011034:	aa09      	add	r2, sp, #36	@ 0x24
 8011036:	4628      	mov	r0, r5
 8011038:	f7ff f89e 	bl	8010178 <uxr_init_base_object_request>
 801103c:	4604      	mov	r4, r0
 801103e:	b320      	cbz	r0, 801108a <uxr_prepare_output_stream_fragmented+0x14e>
 8011040:	9e03      	ldr	r6, [sp, #12]
 8011042:	a909      	add	r1, sp, #36	@ 0x24
 8011044:	4630      	mov	r0, r6
 8011046:	f000 ffe1 	bl	801200c <uxr_serialize_WRITE_DATA_Payload_Data>
 801104a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801104e:	4630      	mov	r0, r6
 8011050:	1a52      	subs	r2, r2, r1
 8011052:	f7fd fb3f 	bl	800e6d4 <ucdr_init_buffer>
 8011056:	9b07      	ldr	r3, [sp, #28]
 8011058:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801105c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801105e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8011062:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011064:	491a      	ldr	r1, [pc, #104]	@ (80110d0 <uxr_prepare_output_stream_fragmented+0x194>)
 8011066:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801106a:	4630      	mov	r0, r6
 801106c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011070:	462a      	mov	r2, r5
 8011072:	f7fd fb03 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 8011076:	4620      	mov	r0, r4
 8011078:	b013      	add	sp, #76	@ 0x4c
 801107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801107e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011080:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011082:	4628      	mov	r0, r5
 8011084:	4798      	blx	r3
 8011086:	b920      	cbnz	r0, 8011092 <uxr_prepare_output_stream_fragmented+0x156>
 8011088:	2400      	movs	r4, #0
 801108a:	4620      	mov	r0, r4
 801108c:	b013      	add	sp, #76	@ 0x4c
 801108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011092:	4620      	mov	r0, r4
 8011094:	f007 f95e 	bl	8018354 <get_available_free_slots>
 8011098:	2800      	cmp	r0, #0
 801109a:	f47f af69 	bne.w	8010f70 <uxr_prepare_output_stream_fragmented+0x34>
 801109e:	e7f3      	b.n	8011088 <uxr_prepare_output_stream_fragmented+0x14c>
 80110a0:	4638      	mov	r0, r7
 80110a2:	2101      	movs	r1, #1
 80110a4:	f007 faaa 	bl	80185fc <uxr_seq_num_add>
 80110a8:	8921      	ldrh	r1, [r4, #8]
 80110aa:	fbb0 f2f1 	udiv	r2, r0, r1
 80110ae:	fb01 0212 	mls	r2, r1, r2, r0
 80110b2:	b292      	uxth	r2, r2
 80110b4:	6863      	ldr	r3, [r4, #4]
 80110b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80110ba:	fb02 f303 	mul.w	r3, r2, r3
 80110be:	6822      	ldr	r2, [r4, #0]
 80110c0:	3304      	adds	r3, #4
 80110c2:	eb02 0903 	add.w	r9, r2, r3
 80110c6:	4607      	mov	r7, r0
 80110c8:	7b23      	ldrb	r3, [r4, #12]
 80110ca:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80110ce:	e767      	b.n	8010fa0 <uxr_prepare_output_stream_fragmented+0x64>
 80110d0:	08010dc5 	.word	0x08010dc5

080110d4 <uxr_serialize_message_header>:
 80110d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110d8:	4617      	mov	r7, r2
 80110da:	4604      	mov	r4, r0
 80110dc:	461e      	mov	r6, r3
 80110de:	460d      	mov	r5, r1
 80110e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80110e4:	f7fc f912 	bl	800d30c <ucdr_serialize_uint8_t>
 80110e8:	4639      	mov	r1, r7
 80110ea:	4620      	mov	r0, r4
 80110ec:	f7fc f90e 	bl	800d30c <ucdr_serialize_uint8_t>
 80110f0:	4632      	mov	r2, r6
 80110f2:	2101      	movs	r1, #1
 80110f4:	4620      	mov	r0, r4
 80110f6:	f7fc f9bf 	bl	800d478 <ucdr_serialize_endian_uint16_t>
 80110fa:	062b      	lsls	r3, r5, #24
 80110fc:	d501      	bpl.n	8011102 <uxr_serialize_message_header+0x2e>
 80110fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011102:	4641      	mov	r1, r8
 8011104:	4620      	mov	r0, r4
 8011106:	2204      	movs	r2, #4
 8011108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801110c:	f006 b9de 	b.w	80174cc <ucdr_serialize_array_uint8_t>

08011110 <uxr_deserialize_message_header>:
 8011110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011114:	4617      	mov	r7, r2
 8011116:	4604      	mov	r4, r0
 8011118:	461e      	mov	r6, r3
 801111a:	460d      	mov	r5, r1
 801111c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011120:	f7fc f90a 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011124:	4639      	mov	r1, r7
 8011126:	4620      	mov	r0, r4
 8011128:	f7fc f906 	bl	800d338 <ucdr_deserialize_uint8_t>
 801112c:	4632      	mov	r2, r6
 801112e:	2101      	movs	r1, #1
 8011130:	4620      	mov	r0, r4
 8011132:	f7fc fa97 	bl	800d664 <ucdr_deserialize_endian_uint16_t>
 8011136:	f995 3000 	ldrsb.w	r3, [r5]
 801113a:	2b00      	cmp	r3, #0
 801113c:	da01      	bge.n	8011142 <uxr_deserialize_message_header+0x32>
 801113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011142:	4641      	mov	r1, r8
 8011144:	4620      	mov	r0, r4
 8011146:	2204      	movs	r2, #4
 8011148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801114c:	f006 ba22 	b.w	8017594 <ucdr_deserialize_array_uint8_t>

08011150 <uxr_serialize_submessage_header>:
 8011150:	b570      	push	{r4, r5, r6, lr}
 8011152:	4616      	mov	r6, r2
 8011154:	4604      	mov	r4, r0
 8011156:	461d      	mov	r5, r3
 8011158:	f7fc f8d8 	bl	800d30c <ucdr_serialize_uint8_t>
 801115c:	4631      	mov	r1, r6
 801115e:	4620      	mov	r0, r4
 8011160:	f7fc f8d4 	bl	800d30c <ucdr_serialize_uint8_t>
 8011164:	462a      	mov	r2, r5
 8011166:	4620      	mov	r0, r4
 8011168:	2101      	movs	r1, #1
 801116a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801116e:	f7fc b983 	b.w	800d478 <ucdr_serialize_endian_uint16_t>
 8011172:	bf00      	nop

08011174 <uxr_deserialize_submessage_header>:
 8011174:	b570      	push	{r4, r5, r6, lr}
 8011176:	4616      	mov	r6, r2
 8011178:	4604      	mov	r4, r0
 801117a:	461d      	mov	r5, r3
 801117c:	f7fc f8dc 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011180:	4631      	mov	r1, r6
 8011182:	4620      	mov	r0, r4
 8011184:	f7fc f8d8 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011188:	462a      	mov	r2, r5
 801118a:	4620      	mov	r0, r4
 801118c:	2101      	movs	r1, #1
 801118e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011192:	f7fc ba67 	b.w	800d664 <ucdr_deserialize_endian_uint16_t>
 8011196:	bf00      	nop

08011198 <uxr_serialize_CLIENT_Representation>:
 8011198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801119c:	2204      	movs	r2, #4
 801119e:	460e      	mov	r6, r1
 80111a0:	4605      	mov	r5, r0
 80111a2:	f006 f993 	bl	80174cc <ucdr_serialize_array_uint8_t>
 80111a6:	2202      	movs	r2, #2
 80111a8:	1d31      	adds	r1, r6, #4
 80111aa:	4604      	mov	r4, r0
 80111ac:	4628      	mov	r0, r5
 80111ae:	f006 f98d 	bl	80174cc <ucdr_serialize_array_uint8_t>
 80111b2:	2202      	movs	r2, #2
 80111b4:	4004      	ands	r4, r0
 80111b6:	1db1      	adds	r1, r6, #6
 80111b8:	4628      	mov	r0, r5
 80111ba:	f006 f987 	bl	80174cc <ucdr_serialize_array_uint8_t>
 80111be:	b2e4      	uxtb	r4, r4
 80111c0:	2204      	movs	r2, #4
 80111c2:	4004      	ands	r4, r0
 80111c4:	f106 0108 	add.w	r1, r6, #8
 80111c8:	4628      	mov	r0, r5
 80111ca:	f006 f97f 	bl	80174cc <ucdr_serialize_array_uint8_t>
 80111ce:	7b31      	ldrb	r1, [r6, #12]
 80111d0:	ea00 0804 	and.w	r8, r0, r4
 80111d4:	4628      	mov	r0, r5
 80111d6:	f7fc f899 	bl	800d30c <ucdr_serialize_uint8_t>
 80111da:	7b71      	ldrb	r1, [r6, #13]
 80111dc:	ea08 0800 	and.w	r8, r8, r0
 80111e0:	4628      	mov	r0, r5
 80111e2:	f7fc f865 	bl	800d2b0 <ucdr_serialize_bool>
 80111e6:	7b73      	ldrb	r3, [r6, #13]
 80111e8:	ea08 0800 	and.w	r8, r8, r0
 80111ec:	b93b      	cbnz	r3, 80111fe <uxr_serialize_CLIENT_Representation+0x66>
 80111ee:	8bb1      	ldrh	r1, [r6, #28]
 80111f0:	4628      	mov	r0, r5
 80111f2:	f7fc f8b7 	bl	800d364 <ucdr_serialize_uint16_t>
 80111f6:	ea08 0000 	and.w	r0, r8, r0
 80111fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111fe:	6931      	ldr	r1, [r6, #16]
 8011200:	4628      	mov	r0, r5
 8011202:	f7fc fa9f 	bl	800d744 <ucdr_serialize_uint32_t>
 8011206:	6933      	ldr	r3, [r6, #16]
 8011208:	b1e3      	cbz	r3, 8011244 <uxr_serialize_CLIENT_Representation+0xac>
 801120a:	b1c0      	cbz	r0, 801123e <uxr_serialize_CLIENT_Representation+0xa6>
 801120c:	4637      	mov	r7, r6
 801120e:	f04f 0900 	mov.w	r9, #0
 8011212:	e001      	b.n	8011218 <uxr_serialize_CLIENT_Representation+0x80>
 8011214:	3708      	adds	r7, #8
 8011216:	b194      	cbz	r4, 801123e <uxr_serialize_CLIENT_Representation+0xa6>
 8011218:	6979      	ldr	r1, [r7, #20]
 801121a:	4628      	mov	r0, r5
 801121c:	f006 fb74 	bl	8017908 <ucdr_serialize_string>
 8011220:	69b9      	ldr	r1, [r7, #24]
 8011222:	4604      	mov	r4, r0
 8011224:	4628      	mov	r0, r5
 8011226:	f006 fb6f 	bl	8017908 <ucdr_serialize_string>
 801122a:	6933      	ldr	r3, [r6, #16]
 801122c:	f109 0901 	add.w	r9, r9, #1
 8011230:	4004      	ands	r4, r0
 8011232:	4599      	cmp	r9, r3
 8011234:	b2e4      	uxtb	r4, r4
 8011236:	d3ed      	bcc.n	8011214 <uxr_serialize_CLIENT_Representation+0x7c>
 8011238:	ea08 0804 	and.w	r8, r8, r4
 801123c:	e7d7      	b.n	80111ee <uxr_serialize_CLIENT_Representation+0x56>
 801123e:	f04f 0800 	mov.w	r8, #0
 8011242:	e7d4      	b.n	80111ee <uxr_serialize_CLIENT_Representation+0x56>
 8011244:	ea08 0800 	and.w	r8, r8, r0
 8011248:	e7d1      	b.n	80111ee <uxr_serialize_CLIENT_Representation+0x56>
 801124a:	bf00      	nop

0801124c <uxr_deserialize_CLIENT_Representation>:
 801124c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011250:	2204      	movs	r2, #4
 8011252:	460c      	mov	r4, r1
 8011254:	4605      	mov	r5, r0
 8011256:	f006 f99d 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 801125a:	2202      	movs	r2, #2
 801125c:	1d21      	adds	r1, r4, #4
 801125e:	4606      	mov	r6, r0
 8011260:	4628      	mov	r0, r5
 8011262:	f006 f997 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011266:	2202      	movs	r2, #2
 8011268:	4006      	ands	r6, r0
 801126a:	1da1      	adds	r1, r4, #6
 801126c:	4628      	mov	r0, r5
 801126e:	f006 f991 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011272:	b2f6      	uxtb	r6, r6
 8011274:	2204      	movs	r2, #4
 8011276:	4006      	ands	r6, r0
 8011278:	f104 0108 	add.w	r1, r4, #8
 801127c:	4628      	mov	r0, r5
 801127e:	f006 f989 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011282:	f104 010c 	add.w	r1, r4, #12
 8011286:	ea00 0706 	and.w	r7, r0, r6
 801128a:	4628      	mov	r0, r5
 801128c:	f7fc f854 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011290:	f104 010d 	add.w	r1, r4, #13
 8011294:	4007      	ands	r7, r0
 8011296:	4628      	mov	r0, r5
 8011298:	f7fc f820 	bl	800d2dc <ucdr_deserialize_bool>
 801129c:	7b63      	ldrb	r3, [r4, #13]
 801129e:	4007      	ands	r7, r0
 80112a0:	b93b      	cbnz	r3, 80112b2 <uxr_deserialize_CLIENT_Representation+0x66>
 80112a2:	f104 011c 	add.w	r1, r4, #28
 80112a6:	4628      	mov	r0, r5
 80112a8:	f7fc f960 	bl	800d56c <ucdr_deserialize_uint16_t>
 80112ac:	4038      	ands	r0, r7
 80112ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112b2:	f104 0110 	add.w	r1, r4, #16
 80112b6:	4628      	mov	r0, r5
 80112b8:	f7fc fb6e 	bl	800d998 <ucdr_deserialize_uint32_t>
 80112bc:	6923      	ldr	r3, [r4, #16]
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d903      	bls.n	80112ca <uxr_deserialize_CLIENT_Representation+0x7e>
 80112c2:	2301      	movs	r3, #1
 80112c4:	75ab      	strb	r3, [r5, #22]
 80112c6:	2700      	movs	r7, #0
 80112c8:	e7eb      	b.n	80112a2 <uxr_deserialize_CLIENT_Representation+0x56>
 80112ca:	b30b      	cbz	r3, 8011310 <uxr_deserialize_CLIENT_Representation+0xc4>
 80112cc:	2800      	cmp	r0, #0
 80112ce:	d0fa      	beq.n	80112c6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80112d0:	46a0      	mov	r8, r4
 80112d2:	f04f 0900 	mov.w	r9, #0
 80112d6:	e003      	b.n	80112e0 <uxr_deserialize_CLIENT_Representation+0x94>
 80112d8:	f108 0808 	add.w	r8, r8, #8
 80112dc:	2e00      	cmp	r6, #0
 80112de:	d0f2      	beq.n	80112c6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80112e0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80112e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112e8:	4628      	mov	r0, r5
 80112ea:	f006 fb1b 	bl	8017924 <ucdr_deserialize_string>
 80112ee:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80112f2:	4606      	mov	r6, r0
 80112f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112f8:	4628      	mov	r0, r5
 80112fa:	f006 fb13 	bl	8017924 <ucdr_deserialize_string>
 80112fe:	6923      	ldr	r3, [r4, #16]
 8011300:	f109 0901 	add.w	r9, r9, #1
 8011304:	4006      	ands	r6, r0
 8011306:	4599      	cmp	r9, r3
 8011308:	b2f6      	uxtb	r6, r6
 801130a:	d3e5      	bcc.n	80112d8 <uxr_deserialize_CLIENT_Representation+0x8c>
 801130c:	4037      	ands	r7, r6
 801130e:	e7c8      	b.n	80112a2 <uxr_deserialize_CLIENT_Representation+0x56>
 8011310:	4007      	ands	r7, r0
 8011312:	e7c6      	b.n	80112a2 <uxr_deserialize_CLIENT_Representation+0x56>

08011314 <uxr_serialize_AGENT_Representation>:
 8011314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011318:	2204      	movs	r2, #4
 801131a:	460f      	mov	r7, r1
 801131c:	4605      	mov	r5, r0
 801131e:	f006 f8d5 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011322:	2202      	movs	r2, #2
 8011324:	4604      	mov	r4, r0
 8011326:	1d39      	adds	r1, r7, #4
 8011328:	4628      	mov	r0, r5
 801132a:	f006 f8cf 	bl	80174cc <ucdr_serialize_array_uint8_t>
 801132e:	4020      	ands	r0, r4
 8011330:	2202      	movs	r2, #2
 8011332:	b2c4      	uxtb	r4, r0
 8011334:	1db9      	adds	r1, r7, #6
 8011336:	4628      	mov	r0, r5
 8011338:	f006 f8c8 	bl	80174cc <ucdr_serialize_array_uint8_t>
 801133c:	7a39      	ldrb	r1, [r7, #8]
 801133e:	4004      	ands	r4, r0
 8011340:	4628      	mov	r0, r5
 8011342:	f7fb ffb5 	bl	800d2b0 <ucdr_serialize_bool>
 8011346:	7a3b      	ldrb	r3, [r7, #8]
 8011348:	ea00 0804 	and.w	r8, r0, r4
 801134c:	b913      	cbnz	r3, 8011354 <uxr_serialize_AGENT_Representation+0x40>
 801134e:	4640      	mov	r0, r8
 8011350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011354:	68f9      	ldr	r1, [r7, #12]
 8011356:	4628      	mov	r0, r5
 8011358:	f7fc f9f4 	bl	800d744 <ucdr_serialize_uint32_t>
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	b303      	cbz	r3, 80113a2 <uxr_serialize_AGENT_Representation+0x8e>
 8011360:	b1d0      	cbz	r0, 8011398 <uxr_serialize_AGENT_Representation+0x84>
 8011362:	463e      	mov	r6, r7
 8011364:	f04f 0900 	mov.w	r9, #0
 8011368:	e001      	b.n	801136e <uxr_serialize_AGENT_Representation+0x5a>
 801136a:	3608      	adds	r6, #8
 801136c:	b1a4      	cbz	r4, 8011398 <uxr_serialize_AGENT_Representation+0x84>
 801136e:	6931      	ldr	r1, [r6, #16]
 8011370:	4628      	mov	r0, r5
 8011372:	f006 fac9 	bl	8017908 <ucdr_serialize_string>
 8011376:	6971      	ldr	r1, [r6, #20]
 8011378:	4604      	mov	r4, r0
 801137a:	4628      	mov	r0, r5
 801137c:	f006 fac4 	bl	8017908 <ucdr_serialize_string>
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f109 0901 	add.w	r9, r9, #1
 8011386:	4004      	ands	r4, r0
 8011388:	4599      	cmp	r9, r3
 801138a:	b2e4      	uxtb	r4, r4
 801138c:	d3ed      	bcc.n	801136a <uxr_serialize_AGENT_Representation+0x56>
 801138e:	ea08 0804 	and.w	r8, r8, r4
 8011392:	4640      	mov	r0, r8
 8011394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011398:	f04f 0800 	mov.w	r8, #0
 801139c:	4640      	mov	r0, r8
 801139e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113a2:	ea08 0800 	and.w	r8, r8, r0
 80113a6:	e7d2      	b.n	801134e <uxr_serialize_AGENT_Representation+0x3a>

080113a8 <uxr_serialize_DATAWRITER_Representation>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	460d      	mov	r5, r1
 80113ac:	7809      	ldrb	r1, [r1, #0]
 80113ae:	4606      	mov	r6, r0
 80113b0:	f7fb ffac 	bl	800d30c <ucdr_serialize_uint8_t>
 80113b4:	4604      	mov	r4, r0
 80113b6:	b130      	cbz	r0, 80113c6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80113b8:	782b      	ldrb	r3, [r5, #0]
 80113ba:	2b02      	cmp	r3, #2
 80113bc:	d00c      	beq.n	80113d8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d010      	beq.n	80113e4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d008      	beq.n	80113d8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80113c6:	2202      	movs	r2, #2
 80113c8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80113cc:	4630      	mov	r0, r6
 80113ce:	f006 f87d 	bl	80174cc <ucdr_serialize_array_uint8_t>
 80113d2:	4020      	ands	r0, r4
 80113d4:	b2c0      	uxtb	r0, r0
 80113d6:	bd70      	pop	{r4, r5, r6, pc}
 80113d8:	6869      	ldr	r1, [r5, #4]
 80113da:	4630      	mov	r0, r6
 80113dc:	f006 fa94 	bl	8017908 <ucdr_serialize_string>
 80113e0:	4604      	mov	r4, r0
 80113e2:	e7f0      	b.n	80113c6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80113e4:	4629      	mov	r1, r5
 80113e6:	4630      	mov	r0, r6
 80113e8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80113ec:	3104      	adds	r1, #4
 80113ee:	f7fd fa0f 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 80113f2:	4604      	mov	r4, r0
 80113f4:	e7e7      	b.n	80113c6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80113f6:	bf00      	nop

080113f8 <uxr_serialize_ObjectVariant.part.0>:
 80113f8:	b570      	push	{r4, r5, r6, lr}
 80113fa:	780b      	ldrb	r3, [r1, #0]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	460c      	mov	r4, r1
 8011400:	4605      	mov	r5, r0
 8011402:	2b0d      	cmp	r3, #13
 8011404:	d816      	bhi.n	8011434 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011406:	e8df f003 	tbb	[pc, r3]
 801140a:	0733      	.short	0x0733
 801140c:	07071717 	.word	0x07071717
 8011410:	0c150707 	.word	0x0c150707
 8011414:	4c510c0c 	.word	0x4c510c0c
 8011418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801141c:	3104      	adds	r1, #4
 801141e:	f7ff bfc3 	b.w	80113a8 <uxr_serialize_DATAWRITER_Representation>
 8011422:	7909      	ldrb	r1, [r1, #4]
 8011424:	f7fb ff72 	bl	800d30c <ucdr_serialize_uint8_t>
 8011428:	b300      	cbz	r0, 801146c <uxr_serialize_ObjectVariant.part.0+0x74>
 801142a:	7923      	ldrb	r3, [r4, #4]
 801142c:	2b01      	cmp	r3, #1
 801142e:	d042      	beq.n	80114b6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011430:	2b02      	cmp	r3, #2
 8011432:	d040      	beq.n	80114b6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011434:	2001      	movs	r0, #1
 8011436:	bd70      	pop	{r4, r5, r6, pc}
 8011438:	7909      	ldrb	r1, [r1, #4]
 801143a:	f7fb ff67 	bl	800d30c <ucdr_serialize_uint8_t>
 801143e:	4606      	mov	r6, r0
 8011440:	b158      	cbz	r0, 801145a <uxr_serialize_ObjectVariant.part.0+0x62>
 8011442:	7923      	ldrb	r3, [r4, #4]
 8011444:	2b02      	cmp	r3, #2
 8011446:	d03c      	beq.n	80114c2 <uxr_serialize_ObjectVariant.part.0+0xca>
 8011448:	2b03      	cmp	r3, #3
 801144a:	d106      	bne.n	801145a <uxr_serialize_ObjectVariant.part.0+0x62>
 801144c:	68a2      	ldr	r2, [r4, #8]
 801144e:	f104 010c 	add.w	r1, r4, #12
 8011452:	4628      	mov	r0, r5
 8011454:	f7fd f9dc 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 8011458:	4606      	mov	r6, r0
 801145a:	2202      	movs	r2, #2
 801145c:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8011460:	4628      	mov	r0, r5
 8011462:	f006 f833 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011466:	4030      	ands	r0, r6
 8011468:	b2c0      	uxtb	r0, r0
 801146a:	bd70      	pop	{r4, r5, r6, pc}
 801146c:	2000      	movs	r0, #0
 801146e:	bd70      	pop	{r4, r5, r6, pc}
 8011470:	7909      	ldrb	r1, [r1, #4]
 8011472:	f7fb ff4b 	bl	800d30c <ucdr_serialize_uint8_t>
 8011476:	4606      	mov	r6, r0
 8011478:	b158      	cbz	r0, 8011492 <uxr_serialize_ObjectVariant.part.0+0x9a>
 801147a:	7923      	ldrb	r3, [r4, #4]
 801147c:	2b02      	cmp	r3, #2
 801147e:	d003      	beq.n	8011488 <uxr_serialize_ObjectVariant.part.0+0x90>
 8011480:	2b03      	cmp	r3, #3
 8011482:	d024      	beq.n	80114ce <uxr_serialize_ObjectVariant.part.0+0xd6>
 8011484:	2b01      	cmp	r3, #1
 8011486:	d104      	bne.n	8011492 <uxr_serialize_ObjectVariant.part.0+0x9a>
 8011488:	68a1      	ldr	r1, [r4, #8]
 801148a:	4628      	mov	r0, r5
 801148c:	f006 fa3c 	bl	8017908 <ucdr_serialize_string>
 8011490:	4606      	mov	r6, r0
 8011492:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011496:	4628      	mov	r0, r5
 8011498:	f7fc fc60 	bl	800dd5c <ucdr_serialize_int16_t>
 801149c:	4030      	ands	r0, r6
 801149e:	b2c0      	uxtb	r0, r0
 80114a0:	bd70      	pop	{r4, r5, r6, pc}
 80114a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114a6:	3104      	adds	r1, #4
 80114a8:	f7ff be76 	b.w	8011198 <uxr_serialize_CLIENT_Representation>
 80114ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114b0:	3104      	adds	r1, #4
 80114b2:	f7ff bf2f 	b.w	8011314 <uxr_serialize_AGENT_Representation>
 80114b6:	68a1      	ldr	r1, [r4, #8]
 80114b8:	4628      	mov	r0, r5
 80114ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114be:	f006 ba23 	b.w	8017908 <ucdr_serialize_string>
 80114c2:	68a1      	ldr	r1, [r4, #8]
 80114c4:	4628      	mov	r0, r5
 80114c6:	f006 fa1f 	bl	8017908 <ucdr_serialize_string>
 80114ca:	4606      	mov	r6, r0
 80114cc:	e7c5      	b.n	801145a <uxr_serialize_ObjectVariant.part.0+0x62>
 80114ce:	68a2      	ldr	r2, [r4, #8]
 80114d0:	f104 010c 	add.w	r1, r4, #12
 80114d4:	4628      	mov	r0, r5
 80114d6:	f7fd f99b 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 80114da:	4606      	mov	r6, r0
 80114dc:	e7d9      	b.n	8011492 <uxr_serialize_ObjectVariant.part.0+0x9a>
 80114de:	bf00      	nop

080114e0 <uxr_deserialize_DATAWRITER_Representation>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	4606      	mov	r6, r0
 80114e4:	460d      	mov	r5, r1
 80114e6:	f7fb ff27 	bl	800d338 <ucdr_deserialize_uint8_t>
 80114ea:	4604      	mov	r4, r0
 80114ec:	b130      	cbz	r0, 80114fc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80114ee:	782b      	ldrb	r3, [r5, #0]
 80114f0:	2b02      	cmp	r3, #2
 80114f2:	d00c      	beq.n	801150e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80114f4:	2b03      	cmp	r3, #3
 80114f6:	d012      	beq.n	801151e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d008      	beq.n	801150e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80114fc:	2202      	movs	r2, #2
 80114fe:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011502:	4630      	mov	r0, r6
 8011504:	f006 f846 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011508:	4020      	ands	r0, r4
 801150a:	b2c0      	uxtb	r0, r0
 801150c:	bd70      	pop	{r4, r5, r6, pc}
 801150e:	6869      	ldr	r1, [r5, #4]
 8011510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011514:	4630      	mov	r0, r6
 8011516:	f006 fa05 	bl	8017924 <ucdr_deserialize_string>
 801151a:	4604      	mov	r4, r0
 801151c:	e7ee      	b.n	80114fc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801151e:	1d2b      	adds	r3, r5, #4
 8011520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011524:	f105 0108 	add.w	r1, r5, #8
 8011528:	4630      	mov	r0, r6
 801152a:	f7fd f983 	bl	800e834 <ucdr_deserialize_sequence_uint8_t>
 801152e:	4604      	mov	r4, r0
 8011530:	e7e4      	b.n	80114fc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011532:	bf00      	nop

08011534 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	460d      	mov	r5, r1
 8011538:	7809      	ldrb	r1, [r1, #0]
 801153a:	4606      	mov	r6, r0
 801153c:	f7fb feb8 	bl	800d2b0 <ucdr_serialize_bool>
 8011540:	782b      	ldrb	r3, [r5, #0]
 8011542:	4604      	mov	r4, r0
 8011544:	b94b      	cbnz	r3, 801155a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011546:	7a29      	ldrb	r1, [r5, #8]
 8011548:	4630      	mov	r0, r6
 801154a:	f7fb feb1 	bl	800d2b0 <ucdr_serialize_bool>
 801154e:	7a2b      	ldrb	r3, [r5, #8]
 8011550:	4004      	ands	r4, r0
 8011552:	b2e4      	uxtb	r4, r4
 8011554:	b943      	cbnz	r3, 8011568 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011556:	4620      	mov	r0, r4
 8011558:	bd70      	pop	{r4, r5, r6, pc}
 801155a:	6869      	ldr	r1, [r5, #4]
 801155c:	4630      	mov	r0, r6
 801155e:	f006 f9d3 	bl	8017908 <ucdr_serialize_string>
 8011562:	4004      	ands	r4, r0
 8011564:	b2e4      	uxtb	r4, r4
 8011566:	e7ee      	b.n	8011546 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011568:	68e9      	ldr	r1, [r5, #12]
 801156a:	4630      	mov	r0, r6
 801156c:	f006 f9cc 	bl	8017908 <ucdr_serialize_string>
 8011570:	4004      	ands	r4, r0
 8011572:	4620      	mov	r0, r4
 8011574:	bd70      	pop	{r4, r5, r6, pc}
 8011576:	bf00      	nop

08011578 <uxr_serialize_OBJK_Topic_Binary>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	460d      	mov	r5, r1
 801157c:	6809      	ldr	r1, [r1, #0]
 801157e:	4606      	mov	r6, r0
 8011580:	f006 f9c2 	bl	8017908 <ucdr_serialize_string>
 8011584:	7929      	ldrb	r1, [r5, #4]
 8011586:	4604      	mov	r4, r0
 8011588:	4630      	mov	r0, r6
 801158a:	f7fb fe91 	bl	800d2b0 <ucdr_serialize_bool>
 801158e:	792b      	ldrb	r3, [r5, #4]
 8011590:	4004      	ands	r4, r0
 8011592:	b2e4      	uxtb	r4, r4
 8011594:	b943      	cbnz	r3, 80115a8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011596:	7b29      	ldrb	r1, [r5, #12]
 8011598:	4630      	mov	r0, r6
 801159a:	f7fb fe89 	bl	800d2b0 <ucdr_serialize_bool>
 801159e:	7b2b      	ldrb	r3, [r5, #12]
 80115a0:	4004      	ands	r4, r0
 80115a2:	b93b      	cbnz	r3, 80115b4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80115a4:	4620      	mov	r0, r4
 80115a6:	bd70      	pop	{r4, r5, r6, pc}
 80115a8:	68a9      	ldr	r1, [r5, #8]
 80115aa:	4630      	mov	r0, r6
 80115ac:	f006 f9ac 	bl	8017908 <ucdr_serialize_string>
 80115b0:	4004      	ands	r4, r0
 80115b2:	e7f0      	b.n	8011596 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80115b4:	6929      	ldr	r1, [r5, #16]
 80115b6:	4630      	mov	r0, r6
 80115b8:	f006 f9a6 	bl	8017908 <ucdr_serialize_string>
 80115bc:	4004      	ands	r4, r0
 80115be:	b2e4      	uxtb	r4, r4
 80115c0:	4620      	mov	r0, r4
 80115c2:	bd70      	pop	{r4, r5, r6, pc}

080115c4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80115c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c8:	460c      	mov	r4, r1
 80115ca:	7809      	ldrb	r1, [r1, #0]
 80115cc:	4606      	mov	r6, r0
 80115ce:	f7fb fe6f 	bl	800d2b0 <ucdr_serialize_bool>
 80115d2:	7823      	ldrb	r3, [r4, #0]
 80115d4:	4605      	mov	r5, r0
 80115d6:	b96b      	cbnz	r3, 80115f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80115d8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80115dc:	4630      	mov	r0, r6
 80115de:	f7fb fe67 	bl	800d2b0 <ucdr_serialize_bool>
 80115e2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80115e6:	4005      	ands	r5, r0
 80115e8:	b2ed      	uxtb	r5, r5
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d16a      	bne.n	80116c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80115ee:	4628      	mov	r0, r5
 80115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f4:	6861      	ldr	r1, [r4, #4]
 80115f6:	4630      	mov	r0, r6
 80115f8:	f7fc f8a4 	bl	800d744 <ucdr_serialize_uint32_t>
 80115fc:	6863      	ldr	r3, [r4, #4]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d06c      	beq.n	80116dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 8011602:	2800      	cmp	r0, #0
 8011604:	d068      	beq.n	80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011606:	68a1      	ldr	r1, [r4, #8]
 8011608:	4630      	mov	r0, r6
 801160a:	f006 f97d 	bl	8017908 <ucdr_serialize_string>
 801160e:	6862      	ldr	r2, [r4, #4]
 8011610:	2a01      	cmp	r2, #1
 8011612:	d953      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011614:	2800      	cmp	r0, #0
 8011616:	d05f      	beq.n	80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011618:	68e1      	ldr	r1, [r4, #12]
 801161a:	4630      	mov	r0, r6
 801161c:	f006 f974 	bl	8017908 <ucdr_serialize_string>
 8011620:	6862      	ldr	r2, [r4, #4]
 8011622:	2a02      	cmp	r2, #2
 8011624:	d94a      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011626:	2800      	cmp	r0, #0
 8011628:	d056      	beq.n	80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801162a:	6921      	ldr	r1, [r4, #16]
 801162c:	4630      	mov	r0, r6
 801162e:	f006 f96b 	bl	8017908 <ucdr_serialize_string>
 8011632:	6862      	ldr	r2, [r4, #4]
 8011634:	2a03      	cmp	r2, #3
 8011636:	d941      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011638:	2800      	cmp	r0, #0
 801163a:	d04d      	beq.n	80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801163c:	6961      	ldr	r1, [r4, #20]
 801163e:	4630      	mov	r0, r6
 8011640:	f006 f962 	bl	8017908 <ucdr_serialize_string>
 8011644:	6862      	ldr	r2, [r4, #4]
 8011646:	2a04      	cmp	r2, #4
 8011648:	d938      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801164a:	2800      	cmp	r0, #0
 801164c:	d044      	beq.n	80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801164e:	69a1      	ldr	r1, [r4, #24]
 8011650:	4630      	mov	r0, r6
 8011652:	f006 f959 	bl	8017908 <ucdr_serialize_string>
 8011656:	6862      	ldr	r2, [r4, #4]
 8011658:	2a05      	cmp	r2, #5
 801165a:	d92f      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801165c:	2800      	cmp	r0, #0
 801165e:	d03b      	beq.n	80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011660:	69e1      	ldr	r1, [r4, #28]
 8011662:	4630      	mov	r0, r6
 8011664:	f006 f950 	bl	8017908 <ucdr_serialize_string>
 8011668:	6862      	ldr	r2, [r4, #4]
 801166a:	2a06      	cmp	r2, #6
 801166c:	d926      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801166e:	b398      	cbz	r0, 80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011670:	6a21      	ldr	r1, [r4, #32]
 8011672:	4630      	mov	r0, r6
 8011674:	f006 f948 	bl	8017908 <ucdr_serialize_string>
 8011678:	6862      	ldr	r2, [r4, #4]
 801167a:	2a07      	cmp	r2, #7
 801167c:	d91e      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801167e:	b358      	cbz	r0, 80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011680:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011682:	4630      	mov	r0, r6
 8011684:	f006 f940 	bl	8017908 <ucdr_serialize_string>
 8011688:	6862      	ldr	r2, [r4, #4]
 801168a:	2a08      	cmp	r2, #8
 801168c:	d916      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801168e:	b318      	cbz	r0, 80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011690:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011692:	4630      	mov	r0, r6
 8011694:	f006 f938 	bl	8017908 <ucdr_serialize_string>
 8011698:	6862      	ldr	r2, [r4, #4]
 801169a:	2a09      	cmp	r2, #9
 801169c:	d90e      	bls.n	80116bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801169e:	b1d8      	cbz	r0, 80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116a0:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80116a4:	2709      	movs	r7, #9
 80116a6:	e000      	b.n	80116aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80116a8:	b1b0      	cbz	r0, 80116d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116aa:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80116ae:	4630      	mov	r0, r6
 80116b0:	f006 f92a 	bl	8017908 <ucdr_serialize_string>
 80116b4:	6862      	ldr	r2, [r4, #4]
 80116b6:	3701      	adds	r7, #1
 80116b8:	4297      	cmp	r7, r2
 80116ba:	d3f5      	bcc.n	80116a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80116bc:	ea05 0300 	and.w	r3, r5, r0
 80116c0:	b2dd      	uxtb	r5, r3
 80116c2:	e789      	b.n	80115d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80116c4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80116c6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80116ca:	4630      	mov	r0, r6
 80116cc:	f7fd f8a0 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 80116d0:	4005      	ands	r5, r0
 80116d2:	4628      	mov	r0, r5
 80116d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d8:	2500      	movs	r5, #0
 80116da:	e77d      	b.n	80115d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80116dc:	4028      	ands	r0, r5
 80116de:	b2c5      	uxtb	r5, r0
 80116e0:	e77a      	b.n	80115d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80116e2:	bf00      	nop

080116e4 <uxr_serialize_OBJK_Publisher_Binary>:
 80116e4:	b570      	push	{r4, r5, r6, lr}
 80116e6:	460d      	mov	r5, r1
 80116e8:	7809      	ldrb	r1, [r1, #0]
 80116ea:	4606      	mov	r6, r0
 80116ec:	f7fb fde0 	bl	800d2b0 <ucdr_serialize_bool>
 80116f0:	782b      	ldrb	r3, [r5, #0]
 80116f2:	4604      	mov	r4, r0
 80116f4:	b94b      	cbnz	r3, 801170a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80116f6:	7a29      	ldrb	r1, [r5, #8]
 80116f8:	4630      	mov	r0, r6
 80116fa:	f7fb fdd9 	bl	800d2b0 <ucdr_serialize_bool>
 80116fe:	7a2b      	ldrb	r3, [r5, #8]
 8011700:	4004      	ands	r4, r0
 8011702:	b2e4      	uxtb	r4, r4
 8011704:	b943      	cbnz	r3, 8011718 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011706:	4620      	mov	r0, r4
 8011708:	bd70      	pop	{r4, r5, r6, pc}
 801170a:	6869      	ldr	r1, [r5, #4]
 801170c:	4630      	mov	r0, r6
 801170e:	f006 f8fb 	bl	8017908 <ucdr_serialize_string>
 8011712:	4004      	ands	r4, r0
 8011714:	b2e4      	uxtb	r4, r4
 8011716:	e7ee      	b.n	80116f6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011718:	f105 010c 	add.w	r1, r5, #12
 801171c:	4630      	mov	r0, r6
 801171e:	f7ff ff51 	bl	80115c4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011722:	4004      	ands	r4, r0
 8011724:	4620      	mov	r0, r4
 8011726:	bd70      	pop	{r4, r5, r6, pc}

08011728 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801172c:	460c      	mov	r4, r1
 801172e:	7809      	ldrb	r1, [r1, #0]
 8011730:	4606      	mov	r6, r0
 8011732:	f7fb fdbd 	bl	800d2b0 <ucdr_serialize_bool>
 8011736:	7823      	ldrb	r3, [r4, #0]
 8011738:	4605      	mov	r5, r0
 801173a:	b96b      	cbnz	r3, 8011758 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801173c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011740:	4630      	mov	r0, r6
 8011742:	f7fb fdb5 	bl	800d2b0 <ucdr_serialize_bool>
 8011746:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801174a:	4005      	ands	r5, r0
 801174c:	b2ed      	uxtb	r5, r5
 801174e:	2b00      	cmp	r3, #0
 8011750:	d16a      	bne.n	8011828 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 8011752:	4628      	mov	r0, r5
 8011754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011758:	6861      	ldr	r1, [r4, #4]
 801175a:	4630      	mov	r0, r6
 801175c:	f7fb fff2 	bl	800d744 <ucdr_serialize_uint32_t>
 8011760:	6863      	ldr	r3, [r4, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d06c      	beq.n	8011840 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 8011766:	2800      	cmp	r0, #0
 8011768:	d068      	beq.n	801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801176a:	68a1      	ldr	r1, [r4, #8]
 801176c:	4630      	mov	r0, r6
 801176e:	f006 f8cb 	bl	8017908 <ucdr_serialize_string>
 8011772:	6862      	ldr	r2, [r4, #4]
 8011774:	2a01      	cmp	r2, #1
 8011776:	d953      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011778:	2800      	cmp	r0, #0
 801177a:	d05f      	beq.n	801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801177c:	68e1      	ldr	r1, [r4, #12]
 801177e:	4630      	mov	r0, r6
 8011780:	f006 f8c2 	bl	8017908 <ucdr_serialize_string>
 8011784:	6862      	ldr	r2, [r4, #4]
 8011786:	2a02      	cmp	r2, #2
 8011788:	d94a      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801178a:	2800      	cmp	r0, #0
 801178c:	d056      	beq.n	801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801178e:	6921      	ldr	r1, [r4, #16]
 8011790:	4630      	mov	r0, r6
 8011792:	f006 f8b9 	bl	8017908 <ucdr_serialize_string>
 8011796:	6862      	ldr	r2, [r4, #4]
 8011798:	2a03      	cmp	r2, #3
 801179a:	d941      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801179c:	2800      	cmp	r0, #0
 801179e:	d04d      	beq.n	801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117a0:	6961      	ldr	r1, [r4, #20]
 80117a2:	4630      	mov	r0, r6
 80117a4:	f006 f8b0 	bl	8017908 <ucdr_serialize_string>
 80117a8:	6862      	ldr	r2, [r4, #4]
 80117aa:	2a04      	cmp	r2, #4
 80117ac:	d938      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80117ae:	2800      	cmp	r0, #0
 80117b0:	d044      	beq.n	801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117b2:	69a1      	ldr	r1, [r4, #24]
 80117b4:	4630      	mov	r0, r6
 80117b6:	f006 f8a7 	bl	8017908 <ucdr_serialize_string>
 80117ba:	6862      	ldr	r2, [r4, #4]
 80117bc:	2a05      	cmp	r2, #5
 80117be:	d92f      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d03b      	beq.n	801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117c4:	69e1      	ldr	r1, [r4, #28]
 80117c6:	4630      	mov	r0, r6
 80117c8:	f006 f89e 	bl	8017908 <ucdr_serialize_string>
 80117cc:	6862      	ldr	r2, [r4, #4]
 80117ce:	2a06      	cmp	r2, #6
 80117d0:	d926      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80117d2:	b398      	cbz	r0, 801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117d4:	6a21      	ldr	r1, [r4, #32]
 80117d6:	4630      	mov	r0, r6
 80117d8:	f006 f896 	bl	8017908 <ucdr_serialize_string>
 80117dc:	6862      	ldr	r2, [r4, #4]
 80117de:	2a07      	cmp	r2, #7
 80117e0:	d91e      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80117e2:	b358      	cbz	r0, 801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80117e6:	4630      	mov	r0, r6
 80117e8:	f006 f88e 	bl	8017908 <ucdr_serialize_string>
 80117ec:	6862      	ldr	r2, [r4, #4]
 80117ee:	2a08      	cmp	r2, #8
 80117f0:	d916      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80117f2:	b318      	cbz	r0, 801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117f4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80117f6:	4630      	mov	r0, r6
 80117f8:	f006 f886 	bl	8017908 <ucdr_serialize_string>
 80117fc:	6862      	ldr	r2, [r4, #4]
 80117fe:	2a09      	cmp	r2, #9
 8011800:	d90e      	bls.n	8011820 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011802:	b1d8      	cbz	r0, 801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8011804:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8011808:	2709      	movs	r7, #9
 801180a:	e000      	b.n	801180e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801180c:	b1b0      	cbz	r0, 801183c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801180e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8011812:	4630      	mov	r0, r6
 8011814:	f006 f878 	bl	8017908 <ucdr_serialize_string>
 8011818:	6862      	ldr	r2, [r4, #4]
 801181a:	3701      	adds	r7, #1
 801181c:	4297      	cmp	r7, r2
 801181e:	d3f5      	bcc.n	801180c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011820:	ea05 0300 	and.w	r3, r5, r0
 8011824:	b2dd      	uxtb	r5, r3
 8011826:	e789      	b.n	801173c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011828:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801182a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801182e:	4630      	mov	r0, r6
 8011830:	f7fc ffee 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 8011834:	4005      	ands	r5, r0
 8011836:	4628      	mov	r0, r5
 8011838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801183c:	2500      	movs	r5, #0
 801183e:	e77d      	b.n	801173c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011840:	4028      	ands	r0, r5
 8011842:	b2c5      	uxtb	r5, r0
 8011844:	e77a      	b.n	801173c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011846:	bf00      	nop

08011848 <uxr_serialize_OBJK_Subscriber_Binary>:
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	460d      	mov	r5, r1
 801184c:	7809      	ldrb	r1, [r1, #0]
 801184e:	4606      	mov	r6, r0
 8011850:	f7fb fd2e 	bl	800d2b0 <ucdr_serialize_bool>
 8011854:	782b      	ldrb	r3, [r5, #0]
 8011856:	4604      	mov	r4, r0
 8011858:	b94b      	cbnz	r3, 801186e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801185a:	7a29      	ldrb	r1, [r5, #8]
 801185c:	4630      	mov	r0, r6
 801185e:	f7fb fd27 	bl	800d2b0 <ucdr_serialize_bool>
 8011862:	7a2b      	ldrb	r3, [r5, #8]
 8011864:	4004      	ands	r4, r0
 8011866:	b2e4      	uxtb	r4, r4
 8011868:	b943      	cbnz	r3, 801187c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801186a:	4620      	mov	r0, r4
 801186c:	bd70      	pop	{r4, r5, r6, pc}
 801186e:	6869      	ldr	r1, [r5, #4]
 8011870:	4630      	mov	r0, r6
 8011872:	f006 f849 	bl	8017908 <ucdr_serialize_string>
 8011876:	4004      	ands	r4, r0
 8011878:	b2e4      	uxtb	r4, r4
 801187a:	e7ee      	b.n	801185a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801187c:	f105 010c 	add.w	r1, r5, #12
 8011880:	4630      	mov	r0, r6
 8011882:	f7ff ff51 	bl	8011728 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8011886:	4004      	ands	r4, r0
 8011888:	4620      	mov	r0, r4
 801188a:	bd70      	pop	{r4, r5, r6, pc}

0801188c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801188c:	b570      	push	{r4, r5, r6, lr}
 801188e:	460d      	mov	r5, r1
 8011890:	8809      	ldrh	r1, [r1, #0]
 8011892:	4606      	mov	r6, r0
 8011894:	f7fb fd66 	bl	800d364 <ucdr_serialize_uint16_t>
 8011898:	78a9      	ldrb	r1, [r5, #2]
 801189a:	4604      	mov	r4, r0
 801189c:	4630      	mov	r0, r6
 801189e:	f7fb fd07 	bl	800d2b0 <ucdr_serialize_bool>
 80118a2:	78ab      	ldrb	r3, [r5, #2]
 80118a4:	4004      	ands	r4, r0
 80118a6:	b2e4      	uxtb	r4, r4
 80118a8:	b9b3      	cbnz	r3, 80118d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 80118aa:	79a9      	ldrb	r1, [r5, #6]
 80118ac:	4630      	mov	r0, r6
 80118ae:	f7fb fcff 	bl	800d2b0 <ucdr_serialize_bool>
 80118b2:	79ab      	ldrb	r3, [r5, #6]
 80118b4:	4004      	ands	r4, r0
 80118b6:	bb33      	cbnz	r3, 8011906 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 80118b8:	7b29      	ldrb	r1, [r5, #12]
 80118ba:	4630      	mov	r0, r6
 80118bc:	f7fb fcf8 	bl	800d2b0 <ucdr_serialize_bool>
 80118c0:	7b2b      	ldrb	r3, [r5, #12]
 80118c2:	4004      	ands	r4, r0
 80118c4:	b9c3      	cbnz	r3, 80118f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 80118c6:	7d29      	ldrb	r1, [r5, #20]
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7fb fcf1 	bl	800d2b0 <ucdr_serialize_bool>
 80118ce:	7d2b      	ldrb	r3, [r5, #20]
 80118d0:	4004      	ands	r4, r0
 80118d2:	b93b      	cbnz	r3, 80118e4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 80118d4:	4620      	mov	r0, r4
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
 80118d8:	88a9      	ldrh	r1, [r5, #4]
 80118da:	4630      	mov	r0, r6
 80118dc:	f7fb fd42 	bl	800d364 <ucdr_serialize_uint16_t>
 80118e0:	4004      	ands	r4, r0
 80118e2:	e7e2      	b.n	80118aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 80118e4:	69aa      	ldr	r2, [r5, #24]
 80118e6:	f105 011c 	add.w	r1, r5, #28
 80118ea:	4630      	mov	r0, r6
 80118ec:	f7fc ff90 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 80118f0:	4004      	ands	r4, r0
 80118f2:	b2e4      	uxtb	r4, r4
 80118f4:	4620      	mov	r0, r4
 80118f6:	bd70      	pop	{r4, r5, r6, pc}
 80118f8:	6929      	ldr	r1, [r5, #16]
 80118fa:	4630      	mov	r0, r6
 80118fc:	f7fb ff22 	bl	800d744 <ucdr_serialize_uint32_t>
 8011900:	4004      	ands	r4, r0
 8011902:	b2e4      	uxtb	r4, r4
 8011904:	e7df      	b.n	80118c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8011906:	68a9      	ldr	r1, [r5, #8]
 8011908:	4630      	mov	r0, r6
 801190a:	f7fb ff1b 	bl	800d744 <ucdr_serialize_uint32_t>
 801190e:	4004      	ands	r4, r0
 8011910:	b2e4      	uxtb	r4, r4
 8011912:	e7d1      	b.n	80118b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08011914 <uxr_serialize_OBJK_DataReader_Binary>:
 8011914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011916:	2202      	movs	r2, #2
 8011918:	460c      	mov	r4, r1
 801191a:	4606      	mov	r6, r0
 801191c:	f005 fdd6 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011920:	78a1      	ldrb	r1, [r4, #2]
 8011922:	4605      	mov	r5, r0
 8011924:	4630      	mov	r0, r6
 8011926:	f7fb fcc3 	bl	800d2b0 <ucdr_serialize_bool>
 801192a:	78a3      	ldrb	r3, [r4, #2]
 801192c:	4005      	ands	r5, r0
 801192e:	b2ed      	uxtb	r5, r5
 8011930:	b90b      	cbnz	r3, 8011936 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8011932:	4628      	mov	r0, r5
 8011934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011936:	f104 0108 	add.w	r1, r4, #8
 801193a:	4630      	mov	r0, r6
 801193c:	f7ff ffa6 	bl	801188c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011940:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011944:	4607      	mov	r7, r0
 8011946:	4630      	mov	r0, r6
 8011948:	f7fb fcb2 	bl	800d2b0 <ucdr_serialize_bool>
 801194c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011950:	4007      	ands	r7, r0
 8011952:	b2ff      	uxtb	r7, r7
 8011954:	b95b      	cbnz	r3, 801196e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8011956:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801195a:	4630      	mov	r0, r6
 801195c:	f7fb fca8 	bl	800d2b0 <ucdr_serialize_bool>
 8011960:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8011964:	4007      	ands	r7, r0
 8011966:	b94b      	cbnz	r3, 801197c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8011968:	403d      	ands	r5, r7
 801196a:	4628      	mov	r0, r5
 801196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801196e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8011972:	4630      	mov	r0, r6
 8011974:	f7fc f92a 	bl	800dbcc <ucdr_serialize_uint64_t>
 8011978:	4007      	ands	r7, r0
 801197a:	e7ec      	b.n	8011956 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801197c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801197e:	4630      	mov	r0, r6
 8011980:	f005 ffc2 	bl	8017908 <ucdr_serialize_string>
 8011984:	4007      	ands	r7, r0
 8011986:	b2ff      	uxtb	r7, r7
 8011988:	e7ee      	b.n	8011968 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801198a:	bf00      	nop

0801198c <uxr_serialize_OBJK_DataWriter_Binary>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	2202      	movs	r2, #2
 8011990:	460d      	mov	r5, r1
 8011992:	4606      	mov	r6, r0
 8011994:	f005 fd9a 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011998:	78a9      	ldrb	r1, [r5, #2]
 801199a:	4604      	mov	r4, r0
 801199c:	4630      	mov	r0, r6
 801199e:	f7fb fc87 	bl	800d2b0 <ucdr_serialize_bool>
 80119a2:	78ab      	ldrb	r3, [r5, #2]
 80119a4:	4004      	ands	r4, r0
 80119a6:	b2e4      	uxtb	r4, r4
 80119a8:	b90b      	cbnz	r3, 80119ae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80119aa:	4620      	mov	r0, r4
 80119ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ae:	f105 0108 	add.w	r1, r5, #8
 80119b2:	4630      	mov	r0, r6
 80119b4:	f7ff ff6a 	bl	801188c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80119b8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80119bc:	4607      	mov	r7, r0
 80119be:	4630      	mov	r0, r6
 80119c0:	f7fb fc76 	bl	800d2b0 <ucdr_serialize_bool>
 80119c4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80119c8:	4007      	ands	r7, r0
 80119ca:	b2ff      	uxtb	r7, r7
 80119cc:	b913      	cbnz	r3, 80119d4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80119ce:	403c      	ands	r4, r7
 80119d0:	4620      	mov	r0, r4
 80119d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119d4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80119d8:	4630      	mov	r0, r6
 80119da:	f7fc f8f7 	bl	800dbcc <ucdr_serialize_uint64_t>
 80119de:	4007      	ands	r7, r0
 80119e0:	e7f5      	b.n	80119ce <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80119e2:	bf00      	nop

080119e4 <uxr_deserialize_ObjectVariant>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	4605      	mov	r5, r0
 80119e8:	460e      	mov	r6, r1
 80119ea:	f7fb fca5 	bl	800d338 <ucdr_deserialize_uint8_t>
 80119ee:	b168      	cbz	r0, 8011a0c <uxr_deserialize_ObjectVariant+0x28>
 80119f0:	7833      	ldrb	r3, [r6, #0]
 80119f2:	3b01      	subs	r3, #1
 80119f4:	4604      	mov	r4, r0
 80119f6:	2b0d      	cmp	r3, #13
 80119f8:	d809      	bhi.n	8011a0e <uxr_deserialize_ObjectVariant+0x2a>
 80119fa:	e8df f003 	tbb	[pc, r3]
 80119fe:	0a64      	.short	0x0a64
 8011a00:	0a0a2323 	.word	0x0a0a2323
 8011a04:	10080a0a 	.word	0x10080a0a
 8011a08:	5e411010 	.word	0x5e411010
 8011a0c:	2400      	movs	r4, #0
 8011a0e:	4620      	mov	r0, r4
 8011a10:	bd70      	pop	{r4, r5, r6, pc}
 8011a12:	1d31      	adds	r1, r6, #4
 8011a14:	4628      	mov	r0, r5
 8011a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a1a:	f7ff bd61 	b.w	80114e0 <uxr_deserialize_DATAWRITER_Representation>
 8011a1e:	1d31      	adds	r1, r6, #4
 8011a20:	4628      	mov	r0, r5
 8011a22:	f7fb fc89 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d0f0      	beq.n	8011a0c <uxr_deserialize_ObjectVariant+0x28>
 8011a2a:	7933      	ldrb	r3, [r6, #4]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d001      	beq.n	8011a34 <uxr_deserialize_ObjectVariant+0x50>
 8011a30:	2b02      	cmp	r3, #2
 8011a32:	d1ec      	bne.n	8011a0e <uxr_deserialize_ObjectVariant+0x2a>
 8011a34:	68b1      	ldr	r1, [r6, #8]
 8011a36:	4628      	mov	r0, r5
 8011a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a40:	f005 bf70 	b.w	8017924 <ucdr_deserialize_string>
 8011a44:	1d31      	adds	r1, r6, #4
 8011a46:	4628      	mov	r0, r5
 8011a48:	f7fb fc76 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	b170      	cbz	r0, 8011a6e <uxr_deserialize_ObjectVariant+0x8a>
 8011a50:	7933      	ldrb	r3, [r6, #4]
 8011a52:	2b02      	cmp	r3, #2
 8011a54:	d053      	beq.n	8011afe <uxr_deserialize_ObjectVariant+0x11a>
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d109      	bne.n	8011a6e <uxr_deserialize_ObjectVariant+0x8a>
 8011a5a:	f106 0308 	add.w	r3, r6, #8
 8011a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a62:	f106 010c 	add.w	r1, r6, #12
 8011a66:	4628      	mov	r0, r5
 8011a68:	f7fc fee4 	bl	800e834 <ucdr_deserialize_sequence_uint8_t>
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	2202      	movs	r2, #2
 8011a70:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011a74:	4628      	mov	r0, r5
 8011a76:	f005 fd8d 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011a7a:	4004      	ands	r4, r0
 8011a7c:	b2e4      	uxtb	r4, r4
 8011a7e:	e7c6      	b.n	8011a0e <uxr_deserialize_ObjectVariant+0x2a>
 8011a80:	2204      	movs	r2, #4
 8011a82:	18b1      	adds	r1, r6, r2
 8011a84:	4628      	mov	r0, r5
 8011a86:	f005 fd85 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011a8a:	2202      	movs	r2, #2
 8011a8c:	f106 0108 	add.w	r1, r6, #8
 8011a90:	4604      	mov	r4, r0
 8011a92:	4628      	mov	r0, r5
 8011a94:	f005 fd7e 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011a98:	2202      	movs	r2, #2
 8011a9a:	4004      	ands	r4, r0
 8011a9c:	f106 010a 	add.w	r1, r6, #10
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	f005 fd77 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011aa6:	b2e4      	uxtb	r4, r4
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	f106 010c 	add.w	r1, r6, #12
 8011aae:	4628      	mov	r0, r5
 8011ab0:	401c      	ands	r4, r3
 8011ab2:	f7fb fc13 	bl	800d2dc <ucdr_deserialize_bool>
 8011ab6:	4004      	ands	r4, r0
 8011ab8:	e7a9      	b.n	8011a0e <uxr_deserialize_ObjectVariant+0x2a>
 8011aba:	1d31      	adds	r1, r6, #4
 8011abc:	4628      	mov	r0, r5
 8011abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ac2:	f7ff bbc3 	b.w	801124c <uxr_deserialize_CLIENT_Representation>
 8011ac6:	1d31      	adds	r1, r6, #4
 8011ac8:	4628      	mov	r0, r5
 8011aca:	f7fb fc35 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011ace:	4604      	mov	r4, r0
 8011ad0:	b168      	cbz	r0, 8011aee <uxr_deserialize_ObjectVariant+0x10a>
 8011ad2:	7933      	ldrb	r3, [r6, #4]
 8011ad4:	2b02      	cmp	r3, #2
 8011ad6:	d003      	beq.n	8011ae0 <uxr_deserialize_ObjectVariant+0xfc>
 8011ad8:	2b03      	cmp	r3, #3
 8011ada:	d018      	beq.n	8011b0e <uxr_deserialize_ObjectVariant+0x12a>
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d106      	bne.n	8011aee <uxr_deserialize_ObjectVariant+0x10a>
 8011ae0:	68b1      	ldr	r1, [r6, #8]
 8011ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	f005 ff1c 	bl	8017924 <ucdr_deserialize_string>
 8011aec:	4604      	mov	r4, r0
 8011aee:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011af2:	4628      	mov	r0, r5
 8011af4:	f7fc f9bc 	bl	800de70 <ucdr_deserialize_int16_t>
 8011af8:	4004      	ands	r4, r0
 8011afa:	b2e4      	uxtb	r4, r4
 8011afc:	e787      	b.n	8011a0e <uxr_deserialize_ObjectVariant+0x2a>
 8011afe:	68b1      	ldr	r1, [r6, #8]
 8011b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b04:	4628      	mov	r0, r5
 8011b06:	f005 ff0d 	bl	8017924 <ucdr_deserialize_string>
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	e7af      	b.n	8011a6e <uxr_deserialize_ObjectVariant+0x8a>
 8011b0e:	f106 0308 	add.w	r3, r6, #8
 8011b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b16:	f106 010c 	add.w	r1, r6, #12
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f7fc fe8a 	bl	800e834 <ucdr_deserialize_sequence_uint8_t>
 8011b20:	4604      	mov	r4, r0
 8011b22:	e7e4      	b.n	8011aee <uxr_deserialize_ObjectVariant+0x10a>

08011b24 <uxr_deserialize_BaseObjectRequest>:
 8011b24:	b570      	push	{r4, r5, r6, lr}
 8011b26:	2202      	movs	r2, #2
 8011b28:	4605      	mov	r5, r0
 8011b2a:	460e      	mov	r6, r1
 8011b2c:	f005 fd32 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011b30:	2202      	movs	r2, #2
 8011b32:	4604      	mov	r4, r0
 8011b34:	18b1      	adds	r1, r6, r2
 8011b36:	4628      	mov	r0, r5
 8011b38:	f005 fd2c 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011b3c:	4020      	ands	r0, r4
 8011b3e:	b2c0      	uxtb	r0, r0
 8011b40:	bd70      	pop	{r4, r5, r6, pc}
 8011b42:	bf00      	nop

08011b44 <uxr_serialize_ActivityInfoVariant>:
 8011b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b48:	460d      	mov	r5, r1
 8011b4a:	7809      	ldrb	r1, [r1, #0]
 8011b4c:	4606      	mov	r6, r0
 8011b4e:	f7fb fbdd 	bl	800d30c <ucdr_serialize_uint8_t>
 8011b52:	b130      	cbz	r0, 8011b62 <uxr_serialize_ActivityInfoVariant+0x1e>
 8011b54:	782b      	ldrb	r3, [r5, #0]
 8011b56:	2b06      	cmp	r3, #6
 8011b58:	d014      	beq.n	8011b84 <uxr_serialize_ActivityInfoVariant+0x40>
 8011b5a:	2b0d      	cmp	r3, #13
 8011b5c:	d019      	beq.n	8011b92 <uxr_serialize_ActivityInfoVariant+0x4e>
 8011b5e:	2b05      	cmp	r3, #5
 8011b60:	d001      	beq.n	8011b66 <uxr_serialize_ActivityInfoVariant+0x22>
 8011b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b66:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f7fc f8f6 	bl	800dd5c <ucdr_serialize_int16_t>
 8011b70:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011b74:	4604      	mov	r4, r0
 8011b76:	4630      	mov	r0, r6
 8011b78:	f7fc f828 	bl	800dbcc <ucdr_serialize_uint64_t>
 8011b7c:	4020      	ands	r0, r4
 8011b7e:	b2c0      	uxtb	r0, r0
 8011b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b84:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011b88:	4630      	mov	r0, r6
 8011b8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b8e:	f7fc b8e5 	b.w	800dd5c <ucdr_serialize_int16_t>
 8011b92:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011b96:	4630      	mov	r0, r6
 8011b98:	f7fc f8e0 	bl	800dd5c <ucdr_serialize_int16_t>
 8011b9c:	68e9      	ldr	r1, [r5, #12]
 8011b9e:	4681      	mov	r9, r0
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	f7fb fdcf 	bl	800d744 <ucdr_serialize_uint32_t>
 8011ba6:	68eb      	ldr	r3, [r5, #12]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d051      	beq.n	8011c50 <uxr_serialize_ActivityInfoVariant+0x10c>
 8011bac:	b1e8      	cbz	r0, 8011bea <uxr_serialize_ActivityInfoVariant+0xa6>
 8011bae:	f105 0714 	add.w	r7, r5, #20
 8011bb2:	f04f 0800 	mov.w	r8, #0
 8011bb6:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8011bba:	4630      	mov	r0, r6
 8011bbc:	f7fb fba6 	bl	800d30c <ucdr_serialize_uint8_t>
 8011bc0:	b198      	cbz	r0, 8011bea <uxr_serialize_ActivityInfoVariant+0xa6>
 8011bc2:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8011bc6:	2b03      	cmp	r3, #3
 8011bc8:	d839      	bhi.n	8011c3e <uxr_serialize_ActivityInfoVariant+0xfa>
 8011bca:	e8df f003 	tbb	[pc, r3]
 8011bce:	1e2b      	.short	0x1e2b
 8011bd0:	0211      	.short	0x0211
 8011bd2:	6839      	ldr	r1, [r7, #0]
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	f005 fe97 	bl	8017908 <ucdr_serialize_string>
 8011bda:	68eb      	ldr	r3, [r5, #12]
 8011bdc:	f108 0801 	add.w	r8, r8, #1
 8011be0:	4598      	cmp	r8, r3
 8011be2:	d231      	bcs.n	8011c48 <uxr_serialize_ActivityInfoVariant+0x104>
 8011be4:	3718      	adds	r7, #24
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d1e5      	bne.n	8011bb6 <uxr_serialize_ActivityInfoVariant+0x72>
 8011bea:	2000      	movs	r0, #0
 8011bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bf0:	2210      	movs	r2, #16
 8011bf2:	4639      	mov	r1, r7
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	f005 fc69 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011bfa:	6939      	ldr	r1, [r7, #16]
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	4630      	mov	r0, r6
 8011c00:	f7fb fda0 	bl	800d744 <ucdr_serialize_uint32_t>
 8011c04:	4020      	ands	r0, r4
 8011c06:	b2c0      	uxtb	r0, r0
 8011c08:	e7e7      	b.n	8011bda <uxr_serialize_ActivityInfoVariant+0x96>
 8011c0a:	2204      	movs	r2, #4
 8011c0c:	4639      	mov	r1, r7
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f005 fc5c 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011c14:	88b9      	ldrh	r1, [r7, #4]
 8011c16:	4604      	mov	r4, r0
 8011c18:	4630      	mov	r0, r6
 8011c1a:	f7fb fba3 	bl	800d364 <ucdr_serialize_uint16_t>
 8011c1e:	4020      	ands	r0, r4
 8011c20:	b2c0      	uxtb	r0, r0
 8011c22:	e7da      	b.n	8011bda <uxr_serialize_ActivityInfoVariant+0x96>
 8011c24:	2202      	movs	r2, #2
 8011c26:	4639      	mov	r1, r7
 8011c28:	4630      	mov	r0, r6
 8011c2a:	f005 fc4f 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011c2e:	78b9      	ldrb	r1, [r7, #2]
 8011c30:	4604      	mov	r4, r0
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7fb fb6a 	bl	800d30c <ucdr_serialize_uint8_t>
 8011c38:	4020      	ands	r0, r4
 8011c3a:	b2c0      	uxtb	r0, r0
 8011c3c:	e7cd      	b.n	8011bda <uxr_serialize_ActivityInfoVariant+0x96>
 8011c3e:	68eb      	ldr	r3, [r5, #12]
 8011c40:	f108 0801 	add.w	r8, r8, #1
 8011c44:	4598      	cmp	r8, r3
 8011c46:	d308      	bcc.n	8011c5a <uxr_serialize_ActivityInfoVariant+0x116>
 8011c48:	ea09 0000 	and.w	r0, r9, r0
 8011c4c:	b2c0      	uxtb	r0, r0
 8011c4e:	e788      	b.n	8011b62 <uxr_serialize_ActivityInfoVariant+0x1e>
 8011c50:	ea09 0900 	and.w	r9, r9, r0
 8011c54:	fa5f f089 	uxtb.w	r0, r9
 8011c58:	e783      	b.n	8011b62 <uxr_serialize_ActivityInfoVariant+0x1e>
 8011c5a:	3718      	adds	r7, #24
 8011c5c:	e7ab      	b.n	8011bb6 <uxr_serialize_ActivityInfoVariant+0x72>
 8011c5e:	bf00      	nop

08011c60 <uxr_deserialize_BaseObjectReply>:
 8011c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c64:	2202      	movs	r2, #2
 8011c66:	4606      	mov	r6, r0
 8011c68:	460f      	mov	r7, r1
 8011c6a:	f005 fc93 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011c6e:	2202      	movs	r2, #2
 8011c70:	18b9      	adds	r1, r7, r2
 8011c72:	4605      	mov	r5, r0
 8011c74:	4630      	mov	r0, r6
 8011c76:	f005 fc8d 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011c7a:	1d39      	adds	r1, r7, #4
 8011c7c:	4680      	mov	r8, r0
 8011c7e:	4630      	mov	r0, r6
 8011c80:	f7fb fb5a 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011c84:	1d79      	adds	r1, r7, #5
 8011c86:	4604      	mov	r4, r0
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f7fb fb55 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011c8e:	ea05 0508 	and.w	r5, r5, r8
 8011c92:	402c      	ands	r4, r5
 8011c94:	4020      	ands	r0, r4
 8011c96:	b2c0      	uxtb	r0, r0
 8011c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c9c <uxr_serialize_ReadSpecification>:
 8011c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca0:	460d      	mov	r5, r1
 8011ca2:	7809      	ldrb	r1, [r1, #0]
 8011ca4:	4606      	mov	r6, r0
 8011ca6:	f7fb fb31 	bl	800d30c <ucdr_serialize_uint8_t>
 8011caa:	7869      	ldrb	r1, [r5, #1]
 8011cac:	4604      	mov	r4, r0
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f7fb fb2c 	bl	800d30c <ucdr_serialize_uint8_t>
 8011cb4:	78a9      	ldrb	r1, [r5, #2]
 8011cb6:	4004      	ands	r4, r0
 8011cb8:	4630      	mov	r0, r6
 8011cba:	f7fb faf9 	bl	800d2b0 <ucdr_serialize_bool>
 8011cbe:	78ab      	ldrb	r3, [r5, #2]
 8011cc0:	b2e4      	uxtb	r4, r4
 8011cc2:	4004      	ands	r4, r0
 8011cc4:	b94b      	cbnz	r3, 8011cda <uxr_serialize_ReadSpecification+0x3e>
 8011cc6:	7a29      	ldrb	r1, [r5, #8]
 8011cc8:	4630      	mov	r0, r6
 8011cca:	f7fb faf1 	bl	800d2b0 <ucdr_serialize_bool>
 8011cce:	7a2b      	ldrb	r3, [r5, #8]
 8011cd0:	4004      	ands	r4, r0
 8011cd2:	b943      	cbnz	r3, 8011ce6 <uxr_serialize_ReadSpecification+0x4a>
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cda:	6869      	ldr	r1, [r5, #4]
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f005 fe13 	bl	8017908 <ucdr_serialize_string>
 8011ce2:	4004      	ands	r4, r0
 8011ce4:	e7ef      	b.n	8011cc6 <uxr_serialize_ReadSpecification+0x2a>
 8011ce6:	8969      	ldrh	r1, [r5, #10]
 8011ce8:	4630      	mov	r0, r6
 8011cea:	f7fb fb3b 	bl	800d364 <ucdr_serialize_uint16_t>
 8011cee:	89a9      	ldrh	r1, [r5, #12]
 8011cf0:	4607      	mov	r7, r0
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f7fb fb36 	bl	800d364 <ucdr_serialize_uint16_t>
 8011cf8:	89e9      	ldrh	r1, [r5, #14]
 8011cfa:	4007      	ands	r7, r0
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	f7fb fb31 	bl	800d364 <ucdr_serialize_uint16_t>
 8011d02:	8a29      	ldrh	r1, [r5, #16]
 8011d04:	4680      	mov	r8, r0
 8011d06:	4630      	mov	r0, r6
 8011d08:	f7fb fb2c 	bl	800d364 <ucdr_serialize_uint16_t>
 8011d0c:	b2ff      	uxtb	r7, r7
 8011d0e:	ea04 0507 	and.w	r5, r4, r7
 8011d12:	ea05 0508 	and.w	r5, r5, r8
 8011d16:	ea00 0405 	and.w	r4, r0, r5
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d20 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011d20:	f7ff ba3a 	b.w	8011198 <uxr_serialize_CLIENT_Representation>

08011d24 <uxr_serialize_CREATE_Payload>:
 8011d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d26:	2202      	movs	r2, #2
 8011d28:	4606      	mov	r6, r0
 8011d2a:	460d      	mov	r5, r1
 8011d2c:	f005 fbce 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011d30:	2202      	movs	r2, #2
 8011d32:	18a9      	adds	r1, r5, r2
 8011d34:	4604      	mov	r4, r0
 8011d36:	4630      	mov	r0, r6
 8011d38:	f005 fbc8 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011d3c:	7929      	ldrb	r1, [r5, #4]
 8011d3e:	4607      	mov	r7, r0
 8011d40:	4630      	mov	r0, r6
 8011d42:	f7fb fae3 	bl	800d30c <ucdr_serialize_uint8_t>
 8011d46:	b170      	cbz	r0, 8011d66 <uxr_serialize_CREATE_Payload+0x42>
 8011d48:	792b      	ldrb	r3, [r5, #4]
 8011d4a:	403c      	ands	r4, r7
 8011d4c:	3b01      	subs	r3, #1
 8011d4e:	b2e4      	uxtb	r4, r4
 8011d50:	2b0d      	cmp	r3, #13
 8011d52:	d809      	bhi.n	8011d68 <uxr_serialize_CREATE_Payload+0x44>
 8011d54:	e8df f003 	tbb	[pc, r3]
 8011d58:	23230a3e 	.word	0x23230a3e
 8011d5c:	0a0a0a0a 	.word	0x0a0a0a0a
 8011d60:	12121208 	.word	0x12121208
 8011d64:	5f58      	.short	0x5f58
 8011d66:	2400      	movs	r4, #0
 8011d68:	4620      	mov	r0, r4
 8011d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d6c:	f105 0108 	add.w	r1, r5, #8
 8011d70:	4630      	mov	r0, r6
 8011d72:	f7ff fb19 	bl	80113a8 <uxr_serialize_DATAWRITER_Representation>
 8011d76:	4004      	ands	r4, r0
 8011d78:	4620      	mov	r0, r4
 8011d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d7c:	7a29      	ldrb	r1, [r5, #8]
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f7fb fac4 	bl	800d30c <ucdr_serialize_uint8_t>
 8011d84:	2800      	cmp	r0, #0
 8011d86:	d0ee      	beq.n	8011d66 <uxr_serialize_CREATE_Payload+0x42>
 8011d88:	7a2b      	ldrb	r3, [r5, #8]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d001      	beq.n	8011d92 <uxr_serialize_CREATE_Payload+0x6e>
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d1ea      	bne.n	8011d68 <uxr_serialize_CREATE_Payload+0x44>
 8011d92:	68e9      	ldr	r1, [r5, #12]
 8011d94:	4630      	mov	r0, r6
 8011d96:	f005 fdb7 	bl	8017908 <ucdr_serialize_string>
 8011d9a:	4004      	ands	r4, r0
 8011d9c:	e7e4      	b.n	8011d68 <uxr_serialize_CREATE_Payload+0x44>
 8011d9e:	7a29      	ldrb	r1, [r5, #8]
 8011da0:	4630      	mov	r0, r6
 8011da2:	f7fb fab3 	bl	800d30c <ucdr_serialize_uint8_t>
 8011da6:	4607      	mov	r7, r0
 8011da8:	b158      	cbz	r0, 8011dc2 <uxr_serialize_CREATE_Payload+0x9e>
 8011daa:	7a2b      	ldrb	r3, [r5, #8]
 8011dac:	2b02      	cmp	r3, #2
 8011dae:	d039      	beq.n	8011e24 <uxr_serialize_CREATE_Payload+0x100>
 8011db0:	2b03      	cmp	r3, #3
 8011db2:	d106      	bne.n	8011dc2 <uxr_serialize_CREATE_Payload+0x9e>
 8011db4:	68ea      	ldr	r2, [r5, #12]
 8011db6:	f105 0110 	add.w	r1, r5, #16
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f7fc fd28 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 8011dc0:	4607      	mov	r7, r0
 8011dc2:	2202      	movs	r2, #2
 8011dc4:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8011dc8:	4630      	mov	r0, r6
 8011dca:	f005 fb7f 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011dce:	4038      	ands	r0, r7
 8011dd0:	4004      	ands	r4, r0
 8011dd2:	e7c9      	b.n	8011d68 <uxr_serialize_CREATE_Payload+0x44>
 8011dd4:	7a29      	ldrb	r1, [r5, #8]
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f7fb fa98 	bl	800d30c <ucdr_serialize_uint8_t>
 8011ddc:	4607      	mov	r7, r0
 8011dde:	b158      	cbz	r0, 8011df8 <uxr_serialize_CREATE_Payload+0xd4>
 8011de0:	7a2b      	ldrb	r3, [r5, #8]
 8011de2:	2b02      	cmp	r3, #2
 8011de4:	d003      	beq.n	8011dee <uxr_serialize_CREATE_Payload+0xca>
 8011de6:	2b03      	cmp	r3, #3
 8011de8:	d022      	beq.n	8011e30 <uxr_serialize_CREATE_Payload+0x10c>
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d104      	bne.n	8011df8 <uxr_serialize_CREATE_Payload+0xd4>
 8011dee:	68e9      	ldr	r1, [r5, #12]
 8011df0:	4630      	mov	r0, r6
 8011df2:	f005 fd89 	bl	8017908 <ucdr_serialize_string>
 8011df6:	4607      	mov	r7, r0
 8011df8:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f7fb ffad 	bl	800dd5c <ucdr_serialize_int16_t>
 8011e02:	4038      	ands	r0, r7
 8011e04:	4004      	ands	r4, r0
 8011e06:	e7af      	b.n	8011d68 <uxr_serialize_CREATE_Payload+0x44>
 8011e08:	f105 0108 	add.w	r1, r5, #8
 8011e0c:	4630      	mov	r0, r6
 8011e0e:	f7ff fa81 	bl	8011314 <uxr_serialize_AGENT_Representation>
 8011e12:	4004      	ands	r4, r0
 8011e14:	e7a8      	b.n	8011d68 <uxr_serialize_CREATE_Payload+0x44>
 8011e16:	f105 0108 	add.w	r1, r5, #8
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f7ff f9bc 	bl	8011198 <uxr_serialize_CLIENT_Representation>
 8011e20:	4004      	ands	r4, r0
 8011e22:	e7a1      	b.n	8011d68 <uxr_serialize_CREATE_Payload+0x44>
 8011e24:	68e9      	ldr	r1, [r5, #12]
 8011e26:	4630      	mov	r0, r6
 8011e28:	f005 fd6e 	bl	8017908 <ucdr_serialize_string>
 8011e2c:	4607      	mov	r7, r0
 8011e2e:	e7c8      	b.n	8011dc2 <uxr_serialize_CREATE_Payload+0x9e>
 8011e30:	68ea      	ldr	r2, [r5, #12]
 8011e32:	f105 0110 	add.w	r1, r5, #16
 8011e36:	4630      	mov	r0, r6
 8011e38:	f7fc fcea 	bl	800e810 <ucdr_serialize_sequence_uint8_t>
 8011e3c:	4607      	mov	r7, r0
 8011e3e:	e7db      	b.n	8011df8 <uxr_serialize_CREATE_Payload+0xd4>

08011e40 <uxr_serialize_GET_INFO_Payload>:
 8011e40:	b570      	push	{r4, r5, r6, lr}
 8011e42:	2202      	movs	r2, #2
 8011e44:	4605      	mov	r5, r0
 8011e46:	460e      	mov	r6, r1
 8011e48:	f005 fb40 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011e4c:	2202      	movs	r2, #2
 8011e4e:	18b1      	adds	r1, r6, r2
 8011e50:	4604      	mov	r4, r0
 8011e52:	4628      	mov	r0, r5
 8011e54:	f005 fb3a 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011e58:	6871      	ldr	r1, [r6, #4]
 8011e5a:	4004      	ands	r4, r0
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	f7fb fc71 	bl	800d744 <ucdr_serialize_uint32_t>
 8011e62:	b2e4      	uxtb	r4, r4
 8011e64:	4020      	ands	r0, r4
 8011e66:	bd70      	pop	{r4, r5, r6, pc}

08011e68 <uxr_deserialize_GET_INFO_Payload>:
 8011e68:	b570      	push	{r4, r5, r6, lr}
 8011e6a:	2202      	movs	r2, #2
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	460e      	mov	r6, r1
 8011e70:	f005 fb90 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011e74:	2202      	movs	r2, #2
 8011e76:	18b1      	adds	r1, r6, r2
 8011e78:	4604      	mov	r4, r0
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f005 fb8a 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011e80:	1d31      	adds	r1, r6, #4
 8011e82:	4004      	ands	r4, r0
 8011e84:	4628      	mov	r0, r5
 8011e86:	f7fb fd87 	bl	800d998 <ucdr_deserialize_uint32_t>
 8011e8a:	b2e4      	uxtb	r4, r4
 8011e8c:	4020      	ands	r0, r4
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}

08011e90 <uxr_serialize_DELETE_Payload>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	2202      	movs	r2, #2
 8011e94:	4605      	mov	r5, r0
 8011e96:	460e      	mov	r6, r1
 8011e98:	f005 fb18 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011e9c:	2202      	movs	r2, #2
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	18b1      	adds	r1, r6, r2
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	f005 fb12 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011ea8:	4020      	ands	r0, r4
 8011eaa:	b2c0      	uxtb	r0, r0
 8011eac:	bd70      	pop	{r4, r5, r6, pc}
 8011eae:	bf00      	nop

08011eb0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	460e      	mov	r6, r1
 8011eb8:	f7fb fa3e 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011ebc:	1c71      	adds	r1, r6, #1
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	4628      	mov	r0, r5
 8011ec2:	f7fb fa39 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011ec6:	2204      	movs	r2, #4
 8011ec8:	18b1      	adds	r1, r6, r2
 8011eca:	4681      	mov	r9, r0
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f005 fb61 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011ed2:	f106 0108 	add.w	r1, r6, #8
 8011ed6:	4680      	mov	r8, r0
 8011ed8:	2202      	movs	r2, #2
 8011eda:	4628      	mov	r0, r5
 8011edc:	f005 fb5a 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	f106 010a 	add.w	r1, r6, #10
 8011ee6:	4607      	mov	r7, r0
 8011ee8:	4628      	mov	r0, r5
 8011eea:	f005 fb53 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011eee:	ea04 0409 	and.w	r4, r4, r9
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	f106 010c 	add.w	r1, r6, #12
 8011ef8:	4628      	mov	r0, r5
 8011efa:	b2e4      	uxtb	r4, r4
 8011efc:	461d      	mov	r5, r3
 8011efe:	ea04 0408 	and.w	r4, r4, r8
 8011f02:	f7fb f9eb 	bl	800d2dc <ucdr_deserialize_bool>
 8011f06:	4027      	ands	r7, r4
 8011f08:	403d      	ands	r5, r7
 8011f0a:	4028      	ands	r0, r5
 8011f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011f10 <uxr_deserialize_STATUS_Payload>:
 8011f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f14:	2202      	movs	r2, #2
 8011f16:	4606      	mov	r6, r0
 8011f18:	460f      	mov	r7, r1
 8011f1a:	f005 fb3b 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011f1e:	2202      	movs	r2, #2
 8011f20:	18b9      	adds	r1, r7, r2
 8011f22:	4605      	mov	r5, r0
 8011f24:	4630      	mov	r0, r6
 8011f26:	f005 fb35 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8011f2a:	1d39      	adds	r1, r7, #4
 8011f2c:	4680      	mov	r8, r0
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f7fb fa02 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011f34:	1d79      	adds	r1, r7, #5
 8011f36:	4604      	mov	r4, r0
 8011f38:	4630      	mov	r0, r6
 8011f3a:	f7fb f9fd 	bl	800d338 <ucdr_deserialize_uint8_t>
 8011f3e:	ea05 0508 	and.w	r5, r5, r8
 8011f42:	402c      	ands	r4, r5
 8011f44:	4020      	ands	r0, r4
 8011f46:	b2c0      	uxtb	r0, r0
 8011f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f4c <uxr_serialize_INFO_Payload>:
 8011f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f50:	2202      	movs	r2, #2
 8011f52:	460c      	mov	r4, r1
 8011f54:	4605      	mov	r5, r0
 8011f56:	f005 fab9 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011f5a:	2202      	movs	r2, #2
 8011f5c:	18a1      	adds	r1, r4, r2
 8011f5e:	4680      	mov	r8, r0
 8011f60:	4628      	mov	r0, r5
 8011f62:	f005 fab3 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011f66:	7921      	ldrb	r1, [r4, #4]
 8011f68:	4607      	mov	r7, r0
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	f7fb f9ce 	bl	800d30c <ucdr_serialize_uint8_t>
 8011f70:	7961      	ldrb	r1, [r4, #5]
 8011f72:	4606      	mov	r6, r0
 8011f74:	4628      	mov	r0, r5
 8011f76:	f7fb f9c9 	bl	800d30c <ucdr_serialize_uint8_t>
 8011f7a:	ea08 0807 	and.w	r8, r8, r7
 8011f7e:	ea06 0608 	and.w	r6, r6, r8
 8011f82:	ea00 0706 	and.w	r7, r0, r6
 8011f86:	7a21      	ldrb	r1, [r4, #8]
 8011f88:	4628      	mov	r0, r5
 8011f8a:	f7fb f991 	bl	800d2b0 <ucdr_serialize_bool>
 8011f8e:	7a23      	ldrb	r3, [r4, #8]
 8011f90:	b2ff      	uxtb	r7, r7
 8011f92:	4606      	mov	r6, r0
 8011f94:	b96b      	cbnz	r3, 8011fb2 <uxr_serialize_INFO_Payload+0x66>
 8011f96:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	f7fb f988 	bl	800d2b0 <ucdr_serialize_bool>
 8011fa0:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011fa4:	4030      	ands	r0, r6
 8011fa6:	b2c6      	uxtb	r6, r0
 8011fa8:	b983      	cbnz	r3, 8011fcc <uxr_serialize_INFO_Payload+0x80>
 8011faa:	ea06 0007 	and.w	r0, r6, r7
 8011fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fb2:	7b21      	ldrb	r1, [r4, #12]
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	f7fb f9a9 	bl	800d30c <ucdr_serialize_uint8_t>
 8011fba:	b188      	cbz	r0, 8011fe0 <uxr_serialize_INFO_Payload+0x94>
 8011fbc:	f104 010c 	add.w	r1, r4, #12
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	f7ff fa19 	bl	80113f8 <uxr_serialize_ObjectVariant.part.0>
 8011fc6:	4030      	ands	r0, r6
 8011fc8:	b2c6      	uxtb	r6, r0
 8011fca:	e7e4      	b.n	8011f96 <uxr_serialize_INFO_Payload+0x4a>
 8011fcc:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011fd0:	4628      	mov	r0, r5
 8011fd2:	f7ff fdb7 	bl	8011b44 <uxr_serialize_ActivityInfoVariant>
 8011fd6:	4006      	ands	r6, r0
 8011fd8:	ea06 0007 	and.w	r0, r6, r7
 8011fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe0:	4606      	mov	r6, r0
 8011fe2:	e7d8      	b.n	8011f96 <uxr_serialize_INFO_Payload+0x4a>

08011fe4 <uxr_serialize_READ_DATA_Payload>:
 8011fe4:	b570      	push	{r4, r5, r6, lr}
 8011fe6:	2202      	movs	r2, #2
 8011fe8:	4605      	mov	r5, r0
 8011fea:	460e      	mov	r6, r1
 8011fec:	f005 fa6e 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011ff0:	2202      	movs	r2, #2
 8011ff2:	18b1      	adds	r1, r6, r2
 8011ff4:	4604      	mov	r4, r0
 8011ff6:	4628      	mov	r0, r5
 8011ff8:	f005 fa68 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8011ffc:	1d31      	adds	r1, r6, #4
 8011ffe:	4004      	ands	r4, r0
 8012000:	4628      	mov	r0, r5
 8012002:	f7ff fe4b 	bl	8011c9c <uxr_serialize_ReadSpecification>
 8012006:	b2e4      	uxtb	r4, r4
 8012008:	4020      	ands	r0, r4
 801200a:	bd70      	pop	{r4, r5, r6, pc}

0801200c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801200c:	b570      	push	{r4, r5, r6, lr}
 801200e:	2202      	movs	r2, #2
 8012010:	4605      	mov	r5, r0
 8012012:	460e      	mov	r6, r1
 8012014:	f005 fa5a 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8012018:	2202      	movs	r2, #2
 801201a:	4604      	mov	r4, r0
 801201c:	18b1      	adds	r1, r6, r2
 801201e:	4628      	mov	r0, r5
 8012020:	f005 fa54 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8012024:	4020      	ands	r0, r4
 8012026:	b2c0      	uxtb	r0, r0
 8012028:	bd70      	pop	{r4, r5, r6, pc}
 801202a:	bf00      	nop

0801202c <uxr_serialize_ACKNACK_Payload>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	460c      	mov	r4, r1
 8012030:	460e      	mov	r6, r1
 8012032:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012036:	4605      	mov	r5, r0
 8012038:	f7fb f994 	bl	800d364 <ucdr_serialize_uint16_t>
 801203c:	2202      	movs	r2, #2
 801203e:	4621      	mov	r1, r4
 8012040:	4604      	mov	r4, r0
 8012042:	4628      	mov	r0, r5
 8012044:	f005 fa42 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8012048:	7931      	ldrb	r1, [r6, #4]
 801204a:	4004      	ands	r4, r0
 801204c:	4628      	mov	r0, r5
 801204e:	f7fb f95d 	bl	800d30c <ucdr_serialize_uint8_t>
 8012052:	b2e4      	uxtb	r4, r4
 8012054:	4020      	ands	r0, r4
 8012056:	bd70      	pop	{r4, r5, r6, pc}

08012058 <uxr_deserialize_ACKNACK_Payload>:
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	4605      	mov	r5, r0
 801205c:	460e      	mov	r6, r1
 801205e:	f7fb fa85 	bl	800d56c <ucdr_deserialize_uint16_t>
 8012062:	2202      	movs	r2, #2
 8012064:	18b1      	adds	r1, r6, r2
 8012066:	4604      	mov	r4, r0
 8012068:	4628      	mov	r0, r5
 801206a:	f005 fa93 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 801206e:	1d31      	adds	r1, r6, #4
 8012070:	4004      	ands	r4, r0
 8012072:	4628      	mov	r0, r5
 8012074:	f7fb f960 	bl	800d338 <ucdr_deserialize_uint8_t>
 8012078:	b2e4      	uxtb	r4, r4
 801207a:	4020      	ands	r0, r4
 801207c:	bd70      	pop	{r4, r5, r6, pc}
 801207e:	bf00      	nop

08012080 <uxr_serialize_HEARTBEAT_Payload>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	460d      	mov	r5, r1
 8012084:	8809      	ldrh	r1, [r1, #0]
 8012086:	4606      	mov	r6, r0
 8012088:	f7fb f96c 	bl	800d364 <ucdr_serialize_uint16_t>
 801208c:	8869      	ldrh	r1, [r5, #2]
 801208e:	4604      	mov	r4, r0
 8012090:	4630      	mov	r0, r6
 8012092:	f7fb f967 	bl	800d364 <ucdr_serialize_uint16_t>
 8012096:	7929      	ldrb	r1, [r5, #4]
 8012098:	4004      	ands	r4, r0
 801209a:	4630      	mov	r0, r6
 801209c:	f7fb f936 	bl	800d30c <ucdr_serialize_uint8_t>
 80120a0:	b2e4      	uxtb	r4, r4
 80120a2:	4020      	ands	r0, r4
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
 80120a6:	bf00      	nop

080120a8 <uxr_deserialize_HEARTBEAT_Payload>:
 80120a8:	b570      	push	{r4, r5, r6, lr}
 80120aa:	4605      	mov	r5, r0
 80120ac:	460e      	mov	r6, r1
 80120ae:	f7fb fa5d 	bl	800d56c <ucdr_deserialize_uint16_t>
 80120b2:	1cb1      	adds	r1, r6, #2
 80120b4:	4604      	mov	r4, r0
 80120b6:	4628      	mov	r0, r5
 80120b8:	f7fb fa58 	bl	800d56c <ucdr_deserialize_uint16_t>
 80120bc:	1d31      	adds	r1, r6, #4
 80120be:	4004      	ands	r4, r0
 80120c0:	4628      	mov	r0, r5
 80120c2:	f7fb f939 	bl	800d338 <ucdr_deserialize_uint8_t>
 80120c6:	b2e4      	uxtb	r4, r4
 80120c8:	4020      	ands	r0, r4
 80120ca:	bd70      	pop	{r4, r5, r6, pc}

080120cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80120cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d0:	4605      	mov	r5, r0
 80120d2:	460e      	mov	r6, r1
 80120d4:	f7fc f872 	bl	800e1bc <ucdr_deserialize_int32_t>
 80120d8:	1d31      	adds	r1, r6, #4
 80120da:	4607      	mov	r7, r0
 80120dc:	4628      	mov	r0, r5
 80120de:	f7fb fc5b 	bl	800d998 <ucdr_deserialize_uint32_t>
 80120e2:	f106 0108 	add.w	r1, r6, #8
 80120e6:	4680      	mov	r8, r0
 80120e8:	4628      	mov	r0, r5
 80120ea:	f7fc f867 	bl	800e1bc <ucdr_deserialize_int32_t>
 80120ee:	f106 010c 	add.w	r1, r6, #12
 80120f2:	4604      	mov	r4, r0
 80120f4:	4628      	mov	r0, r5
 80120f6:	f7fb fc4f 	bl	800d998 <ucdr_deserialize_uint32_t>
 80120fa:	ea07 0708 	and.w	r7, r7, r8
 80120fe:	403c      	ands	r4, r7
 8012100:	f106 0110 	add.w	r1, r6, #16
 8012104:	4004      	ands	r4, r0
 8012106:	4628      	mov	r0, r5
 8012108:	f7fc f858 	bl	800e1bc <ucdr_deserialize_int32_t>
 801210c:	f106 0114 	add.w	r1, r6, #20
 8012110:	4607      	mov	r7, r0
 8012112:	4628      	mov	r0, r5
 8012114:	f7fb fc40 	bl	800d998 <ucdr_deserialize_uint32_t>
 8012118:	b2e4      	uxtb	r4, r4
 801211a:	403c      	ands	r4, r7
 801211c:	4020      	ands	r0, r4
 801211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012122:	bf00      	nop

08012124 <uxr_serialize_SampleIdentity>:
 8012124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012128:	220c      	movs	r2, #12
 801212a:	4604      	mov	r4, r0
 801212c:	460d      	mov	r5, r1
 801212e:	f005 f9cd 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8012132:	2203      	movs	r2, #3
 8012134:	f105 010c 	add.w	r1, r5, #12
 8012138:	4680      	mov	r8, r0
 801213a:	4620      	mov	r0, r4
 801213c:	f005 f9c6 	bl	80174cc <ucdr_serialize_array_uint8_t>
 8012140:	7be9      	ldrb	r1, [r5, #15]
 8012142:	4681      	mov	r9, r0
 8012144:	4620      	mov	r0, r4
 8012146:	f7fb f8e1 	bl	800d30c <ucdr_serialize_uint8_t>
 801214a:	6929      	ldr	r1, [r5, #16]
 801214c:	4607      	mov	r7, r0
 801214e:	4620      	mov	r0, r4
 8012150:	f7fb ff0a 	bl	800df68 <ucdr_serialize_int32_t>
 8012154:	6969      	ldr	r1, [r5, #20]
 8012156:	4606      	mov	r6, r0
 8012158:	4620      	mov	r0, r4
 801215a:	f7fb faf3 	bl	800d744 <ucdr_serialize_uint32_t>
 801215e:	ea08 0809 	and.w	r8, r8, r9
 8012162:	ea07 0708 	and.w	r7, r7, r8
 8012166:	403e      	ands	r6, r7
 8012168:	4030      	ands	r0, r6
 801216a:	b2c0      	uxtb	r0, r0
 801216c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012170 <uxr_deserialize_SampleIdentity>:
 8012170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012174:	220c      	movs	r2, #12
 8012176:	4604      	mov	r4, r0
 8012178:	460d      	mov	r5, r1
 801217a:	f005 fa0b 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 801217e:	2203      	movs	r2, #3
 8012180:	f105 010c 	add.w	r1, r5, #12
 8012184:	4680      	mov	r8, r0
 8012186:	4620      	mov	r0, r4
 8012188:	f005 fa04 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 801218c:	f105 010f 	add.w	r1, r5, #15
 8012190:	4681      	mov	r9, r0
 8012192:	4620      	mov	r0, r4
 8012194:	f7fb f8d0 	bl	800d338 <ucdr_deserialize_uint8_t>
 8012198:	f105 0110 	add.w	r1, r5, #16
 801219c:	4607      	mov	r7, r0
 801219e:	4620      	mov	r0, r4
 80121a0:	f7fc f80c 	bl	800e1bc <ucdr_deserialize_int32_t>
 80121a4:	f105 0114 	add.w	r1, r5, #20
 80121a8:	4606      	mov	r6, r0
 80121aa:	4620      	mov	r0, r4
 80121ac:	f7fb fbf4 	bl	800d998 <ucdr_deserialize_uint32_t>
 80121b0:	ea08 0809 	and.w	r8, r8, r9
 80121b4:	ea07 0708 	and.w	r7, r7, r8
 80121b8:	403e      	ands	r6, r7
 80121ba:	4030      	ands	r0, r6
 80121bc:	b2c0      	uxtb	r0, r0
 80121be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121c2:	bf00      	nop

080121c4 <rcl_client_get_rmw_handle>:
 80121c4:	b118      	cbz	r0, 80121ce <rcl_client_get_rmw_handle+0xa>
 80121c6:	6800      	ldr	r0, [r0, #0]
 80121c8:	b108      	cbz	r0, 80121ce <rcl_client_get_rmw_handle+0xa>
 80121ca:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80121ce:	4770      	bx	lr

080121d0 <rcl_send_request>:
 80121d0:	2800      	cmp	r0, #0
 80121d2:	d048      	beq.n	8012266 <rcl_send_request+0x96>
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	4604      	mov	r4, r0
 80121d8:	6800      	ldr	r0, [r0, #0]
 80121da:	b08a      	sub	sp, #40	@ 0x28
 80121dc:	b1c0      	cbz	r0, 8012210 <rcl_send_request+0x40>
 80121de:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80121e2:	b1ab      	cbz	r3, 8012210 <rcl_send_request+0x40>
 80121e4:	460e      	mov	r6, r1
 80121e6:	b1b9      	cbz	r1, 8012218 <rcl_send_request+0x48>
 80121e8:	4615      	mov	r5, r2
 80121ea:	b1aa      	cbz	r2, 8012218 <rcl_send_request+0x48>
 80121ec:	2105      	movs	r1, #5
 80121ee:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80121f2:	f002 ff89 	bl	8015108 <__atomic_load_8>
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	e9c5 0100 	strd	r0, r1, [r5]
 80121fc:	462a      	mov	r2, r5
 80121fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012202:	4631      	mov	r1, r6
 8012204:	f004 f942 	bl	801648c <rmw_send_request>
 8012208:	b148      	cbz	r0, 801221e <rcl_send_request+0x4e>
 801220a:	2001      	movs	r0, #1
 801220c:	b00a      	add	sp, #40	@ 0x28
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8012214:	b00a      	add	sp, #40	@ 0x28
 8012216:	bd70      	pop	{r4, r5, r6, pc}
 8012218:	200b      	movs	r0, #11
 801221a:	b00a      	add	sp, #40	@ 0x28
 801221c:	bd70      	pop	{r4, r5, r6, pc}
 801221e:	6820      	ldr	r0, [r4, #0]
 8012220:	2305      	movs	r3, #5
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012228:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801222c:	f002 ffd8 	bl	80151e0 <__atomic_exchange_8>
 8012230:	6823      	ldr	r3, [r4, #0]
 8012232:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8012236:	b1a2      	cbz	r2, 8012262 <rcl_send_request+0x92>
 8012238:	a905      	add	r1, sp, #20
 801223a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801223e:	f003 fd21 	bl	8015c84 <rmw_get_gid_for_client>
 8012242:	4601      	mov	r1, r0
 8012244:	b990      	cbnz	r0, 801226c <rcl_send_request+0x9c>
 8012246:	6822      	ldr	r2, [r4, #0]
 8012248:	ab06      	add	r3, sp, #24
 801224a:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 801224e:	9302      	str	r3, [sp, #8]
 8012250:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012254:	4632      	mov	r2, r6
 8012256:	e9cd 4500 	strd	r4, r5, [sp]
 801225a:	f000 fe15 	bl	8012e88 <rcl_send_service_event_message>
 801225e:	2800      	cmp	r0, #0
 8012260:	d1d4      	bne.n	801220c <rcl_send_request+0x3c>
 8012262:	2000      	movs	r0, #0
 8012264:	e7d2      	b.n	801220c <rcl_send_request+0x3c>
 8012266:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801226a:	4770      	bx	lr
 801226c:	f000 f87a 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 8012270:	e7cc      	b.n	801220c <rcl_send_request+0x3c>
 8012272:	bf00      	nop
 8012274:	0000      	movs	r0, r0
	...

08012278 <rcl_take_response>:
 8012278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227a:	468e      	mov	lr, r1
 801227c:	460c      	mov	r4, r1
 801227e:	4617      	mov	r7, r2
 8012280:	4605      	mov	r5, r0
 8012282:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012286:	b095      	sub	sp, #84	@ 0x54
 8012288:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801228c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012290:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012294:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012298:	2d00      	cmp	r5, #0
 801229a:	d044      	beq.n	8012326 <rcl_take_response+0xae>
 801229c:	682b      	ldr	r3, [r5, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d041      	beq.n	8012326 <rcl_take_response+0xae>
 80122a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d03d      	beq.n	8012326 <rcl_take_response+0xae>
 80122aa:	2f00      	cmp	r7, #0
 80122ac:	d03e      	beq.n	801232c <rcl_take_response+0xb4>
 80122ae:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8012348 <rcl_take_response+0xd0>
 80122b2:	2300      	movs	r3, #0
 80122b4:	f88d 3013 	strb.w	r3, [sp, #19]
 80122b8:	463a      	mov	r2, r7
 80122ba:	f10d 0313 	add.w	r3, sp, #19
 80122be:	a90a      	add	r1, sp, #40	@ 0x28
 80122c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80122c4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80122c8:	f004 f9e0 	bl	801668c <rmw_take_response>
 80122cc:	4606      	mov	r6, r0
 80122ce:	bb78      	cbnz	r0, 8012330 <rcl_take_response+0xb8>
 80122d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80122d4:	b373      	cbz	r3, 8012334 <rcl_take_response+0xbc>
 80122d6:	682b      	ldr	r3, [r5, #0]
 80122d8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80122dc:	b1aa      	cbz	r2, 801230a <rcl_take_response+0x92>
 80122de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80122e2:	a905      	add	r1, sp, #20
 80122e4:	f003 fcce 	bl	8015c84 <rmw_get_gid_for_client>
 80122e8:	bb38      	cbnz	r0, 801233a <rcl_take_response+0xc2>
 80122ea:	682b      	ldr	r3, [r5, #0]
 80122ec:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 80122f0:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 80122f4:	ab06      	add	r3, sp, #24
 80122f6:	ed8d 7b00 	vstr	d7, [sp]
 80122fa:	463a      	mov	r2, r7
 80122fc:	9302      	str	r3, [sp, #8]
 80122fe:	2103      	movs	r1, #3
 8012300:	f000 fdc2 	bl	8012e88 <rcl_send_service_event_message>
 8012304:	2800      	cmp	r0, #0
 8012306:	bf18      	it	ne
 8012308:	4606      	movne	r6, r0
 801230a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801230e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012312:	46a4      	mov	ip, r4
 8012314:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012318:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801231c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012320:	4630      	mov	r0, r6
 8012322:	b015      	add	sp, #84	@ 0x54
 8012324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012326:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801232a:	e7ee      	b.n	801230a <rcl_take_response+0x92>
 801232c:	260b      	movs	r6, #11
 801232e:	e7ec      	b.n	801230a <rcl_take_response+0x92>
 8012330:	2601      	movs	r6, #1
 8012332:	e7ea      	b.n	801230a <rcl_take_response+0x92>
 8012334:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8012338:	e7e7      	b.n	801230a <rcl_take_response+0x92>
 801233a:	f000 f813 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 801233e:	4606      	mov	r6, r0
 8012340:	e7e3      	b.n	801230a <rcl_take_response+0x92>
 8012342:	bf00      	nop
 8012344:	f3af 8000 	nop.w
	...

08012350 <rcl_client_is_valid>:
 8012350:	b130      	cbz	r0, 8012360 <rcl_client_is_valid+0x10>
 8012352:	6800      	ldr	r0, [r0, #0]
 8012354:	b120      	cbz	r0, 8012360 <rcl_client_is_valid+0x10>
 8012356:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801235a:	3800      	subs	r0, #0
 801235c:	bf18      	it	ne
 801235e:	2001      	movne	r0, #1
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop

08012364 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012364:	280b      	cmp	r0, #11
 8012366:	dc0d      	bgt.n	8012384 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012368:	2800      	cmp	r0, #0
 801236a:	db09      	blt.n	8012380 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801236c:	280b      	cmp	r0, #11
 801236e:	d807      	bhi.n	8012380 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012370:	e8df f000 	tbb	[pc, r0]
 8012374:	07060607 	.word	0x07060607
 8012378:	06060606 	.word	0x06060606
 801237c:	07070606 	.word	0x07070606
 8012380:	2001      	movs	r0, #1
 8012382:	4770      	bx	lr
 8012384:	28cb      	cmp	r0, #203	@ 0xcb
 8012386:	bf14      	ite	ne
 8012388:	2001      	movne	r0, #1
 801238a:	20cb      	moveq	r0, #203	@ 0xcb
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop

08012390 <rcl_get_zero_initialized_context>:
 8012390:	2200      	movs	r2, #0
 8012392:	e9c0 2200 	strd	r2, r2, [r0]
 8012396:	4770      	bx	lr

08012398 <rcl_context_is_valid>:
 8012398:	b118      	cbz	r0, 80123a2 <rcl_context_is_valid+0xa>
 801239a:	6840      	ldr	r0, [r0, #4]
 801239c:	3800      	subs	r0, #0
 801239e:	bf18      	it	ne
 80123a0:	2001      	movne	r0, #1
 80123a2:	4770      	bx	lr

080123a4 <__cleanup_context>:
 80123a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123a8:	4606      	mov	r6, r0
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	2300      	movs	r3, #0
 80123ae:	6073      	str	r3, [r6, #4]
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d042      	beq.n	801243a <__cleanup_context+0x96>
 80123b4:	6943      	ldr	r3, [r0, #20]
 80123b6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80123ba:	6907      	ldr	r7, [r0, #16]
 80123bc:	b39b      	cbz	r3, 8012426 <__cleanup_context+0x82>
 80123be:	3014      	adds	r0, #20
 80123c0:	f000 f9b2 	bl	8012728 <rcl_init_options_fini>
 80123c4:	4680      	mov	r8, r0
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d144      	bne.n	8012454 <__cleanup_context+0xb0>
 80123ca:	6830      	ldr	r0, [r6, #0]
 80123cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80123ce:	b123      	cbz	r3, 80123da <__cleanup_context+0x36>
 80123d0:	3028      	adds	r0, #40	@ 0x28
 80123d2:	f003 fe9f 	bl	8016114 <rmw_context_fini>
 80123d6:	bbb8      	cbnz	r0, 8012448 <__cleanup_context+0xa4>
 80123d8:	6830      	ldr	r0, [r6, #0]
 80123da:	6a03      	ldr	r3, [r0, #32]
 80123dc:	b1db      	cbz	r3, 8012416 <__cleanup_context+0x72>
 80123de:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80123e2:	2a01      	cmp	r2, #1
 80123e4:	f17c 0100 	sbcs.w	r1, ip, #0
 80123e8:	db11      	blt.n	801240e <__cleanup_context+0x6a>
 80123ea:	2400      	movs	r4, #0
 80123ec:	4625      	mov	r5, r4
 80123ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80123f2:	4639      	mov	r1, r7
 80123f4:	b1c8      	cbz	r0, 801242a <__cleanup_context+0x86>
 80123f6:	47c8      	blx	r9
 80123f8:	6833      	ldr	r3, [r6, #0]
 80123fa:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80123fe:	3401      	adds	r4, #1
 8012400:	f145 0500 	adc.w	r5, r5, #0
 8012404:	4294      	cmp	r4, r2
 8012406:	eb75 010c 	sbcs.w	r1, r5, ip
 801240a:	6a1b      	ldr	r3, [r3, #32]
 801240c:	dbef      	blt.n	80123ee <__cleanup_context+0x4a>
 801240e:	4618      	mov	r0, r3
 8012410:	4639      	mov	r1, r7
 8012412:	47c8      	blx	r9
 8012414:	6830      	ldr	r0, [r6, #0]
 8012416:	4639      	mov	r1, r7
 8012418:	47c8      	blx	r9
 801241a:	2300      	movs	r3, #0
 801241c:	e9c6 3300 	strd	r3, r3, [r6]
 8012420:	4640      	mov	r0, r8
 8012422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012426:	4698      	mov	r8, r3
 8012428:	e7d0      	b.n	80123cc <__cleanup_context+0x28>
 801242a:	3401      	adds	r4, #1
 801242c:	f145 0500 	adc.w	r5, r5, #0
 8012430:	4294      	cmp	r4, r2
 8012432:	eb75 010c 	sbcs.w	r1, r5, ip
 8012436:	dbda      	blt.n	80123ee <__cleanup_context+0x4a>
 8012438:	e7e9      	b.n	801240e <__cleanup_context+0x6a>
 801243a:	4680      	mov	r8, r0
 801243c:	2300      	movs	r3, #0
 801243e:	e9c6 3300 	strd	r3, r3, [r6]
 8012442:	4640      	mov	r0, r8
 8012444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012448:	f1b8 0f00 	cmp.w	r8, #0
 801244c:	d005      	beq.n	801245a <__cleanup_context+0xb6>
 801244e:	f7f9 fdf7 	bl	800c040 <rcutils_reset_error>
 8012452:	e7c1      	b.n	80123d8 <__cleanup_context+0x34>
 8012454:	f7f9 fdf4 	bl	800c040 <rcutils_reset_error>
 8012458:	e7b7      	b.n	80123ca <__cleanup_context+0x26>
 801245a:	f7ff ff83 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 801245e:	4680      	mov	r8, r0
 8012460:	e7f5      	b.n	801244e <__cleanup_context+0xaa>
 8012462:	bf00      	nop

08012464 <rcl_init>:
 8012464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012468:	1e04      	subs	r4, r0, #0
 801246a:	b0a5      	sub	sp, #148	@ 0x94
 801246c:	460d      	mov	r5, r1
 801246e:	4617      	mov	r7, r2
 8012470:	461e      	mov	r6, r3
 8012472:	dd13      	ble.n	801249c <rcl_init+0x38>
 8012474:	b161      	cbz	r1, 8012490 <rcl_init+0x2c>
 8012476:	f1a1 0e04 	sub.w	lr, r1, #4
 801247a:	f04f 0c00 	mov.w	ip, #0
 801247e:	e001      	b.n	8012484 <rcl_init+0x20>
 8012480:	4564      	cmp	r4, ip
 8012482:	d00d      	beq.n	80124a0 <rcl_init+0x3c>
 8012484:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8012488:	f10c 0c01 	add.w	ip, ip, #1
 801248c:	2800      	cmp	r0, #0
 801248e:	d1f7      	bne.n	8012480 <rcl_init+0x1c>
 8012490:	f04f 080b 	mov.w	r8, #11
 8012494:	4640      	mov	r0, r8
 8012496:	b025      	add	sp, #148	@ 0x94
 8012498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249c:	2900      	cmp	r1, #0
 801249e:	d1f7      	bne.n	8012490 <rcl_init+0x2c>
 80124a0:	2f00      	cmp	r7, #0
 80124a2:	d0f5      	beq.n	8012490 <rcl_init+0x2c>
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d0f2      	beq.n	8012490 <rcl_init+0x2c>
 80124aa:	469c      	mov	ip, r3
 80124ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124b0:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80124b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80124b8:	f8dc 3000 	ldr.w	r3, [ip]
 80124bc:	f8ce 3000 	str.w	r3, [lr]
 80124c0:	a81f      	add	r0, sp, #124	@ 0x7c
 80124c2:	f7f9 fd91 	bl	800bfe8 <rcutils_allocator_is_valid>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d0e2      	beq.n	8012490 <rcl_init+0x2c>
 80124ca:	2e00      	cmp	r6, #0
 80124cc:	d0e0      	beq.n	8012490 <rcl_init+0x2c>
 80124ce:	6833      	ldr	r3, [r6, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d173      	bne.n	80125bc <rcl_init+0x158>
 80124d4:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 80124d8:	2198      	movs	r1, #152	@ 0x98
 80124da:	2001      	movs	r0, #1
 80124dc:	4798      	blx	r3
 80124de:	4680      	mov	r8, r0
 80124e0:	6030      	str	r0, [r6, #0]
 80124e2:	2800      	cmp	r0, #0
 80124e4:	f000 80ac 	beq.w	8012640 <rcl_init+0x1dc>
 80124e8:	a802      	add	r0, sp, #8
 80124ea:	f003 f965 	bl	80157b8 <rmw_get_zero_initialized_context>
 80124ee:	a902      	add	r1, sp, #8
 80124f0:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80124f4:	2270      	movs	r2, #112	@ 0x70
 80124f6:	f007 fd7c 	bl	8019ff2 <memcpy>
 80124fa:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80124fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012502:	f8d6 8000 	ldr.w	r8, [r6]
 8012506:	46c4      	mov	ip, r8
 8012508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801250c:	f8de 3000 	ldr.w	r3, [lr]
 8012510:	f8cc 3000 	str.w	r3, [ip]
 8012514:	f108 0114 	add.w	r1, r8, #20
 8012518:	4638      	mov	r0, r7
 801251a:	f000 f92f 	bl	801277c <rcl_init_options_copy>
 801251e:	4680      	mov	r8, r0
 8012520:	2800      	cmp	r0, #0
 8012522:	d147      	bne.n	80125b4 <rcl_init+0x150>
 8012524:	f8d6 9000 	ldr.w	r9, [r6]
 8012528:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 801252c:	f8c9 0020 	str.w	r0, [r9, #32]
 8012530:	f8c9 4018 	str.w	r4, [r9, #24]
 8012534:	f8c9 a01c 	str.w	sl, [r9, #28]
 8012538:	2c00      	cmp	r4, #0
 801253a:	d047      	beq.n	80125cc <rcl_init+0x168>
 801253c:	2d00      	cmp	r5, #0
 801253e:	d045      	beq.n	80125cc <rcl_init+0x168>
 8012540:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8012544:	2104      	movs	r1, #4
 8012546:	4620      	mov	r0, r4
 8012548:	4798      	blx	r3
 801254a:	f8c9 0020 	str.w	r0, [r9, #32]
 801254e:	f8d6 9000 	ldr.w	r9, [r6]
 8012552:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8012556:	f1bb 0f00 	cmp.w	fp, #0
 801255a:	d029      	beq.n	80125b0 <rcl_init+0x14c>
 801255c:	2c01      	cmp	r4, #1
 801255e:	f17a 0300 	sbcs.w	r3, sl, #0
 8012562:	db33      	blt.n	80125cc <rcl_init+0x168>
 8012564:	f04f 0800 	mov.w	r8, #0
 8012568:	3d04      	subs	r5, #4
 801256a:	46c1      	mov	r9, r8
 801256c:	e00d      	b.n	801258a <rcl_init+0x126>
 801256e:	6829      	ldr	r1, [r5, #0]
 8012570:	f007 fd3f 	bl	8019ff2 <memcpy>
 8012574:	f118 0801 	adds.w	r8, r8, #1
 8012578:	f149 0900 	adc.w	r9, r9, #0
 801257c:	45ca      	cmp	sl, r9
 801257e:	bf08      	it	eq
 8012580:	4544      	cmpeq	r4, r8
 8012582:	d021      	beq.n	80125c8 <rcl_init+0x164>
 8012584:	6833      	ldr	r3, [r6, #0]
 8012586:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801258a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801258e:	f7ed fe9f 	bl	80002d0 <strlen>
 8012592:	1c42      	adds	r2, r0, #1
 8012594:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012596:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8012598:	9201      	str	r2, [sp, #4]
 801259a:	4610      	mov	r0, r2
 801259c:	4798      	blx	r3
 801259e:	6833      	ldr	r3, [r6, #0]
 80125a0:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 80125a4:	6a1b      	ldr	r3, [r3, #32]
 80125a6:	9a01      	ldr	r2, [sp, #4]
 80125a8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d1de      	bne.n	801256e <rcl_init+0x10a>
 80125b0:	f04f 080a 	mov.w	r8, #10
 80125b4:	4630      	mov	r0, r6
 80125b6:	f7ff fef5 	bl	80123a4 <__cleanup_context>
 80125ba:	e76b      	b.n	8012494 <rcl_init+0x30>
 80125bc:	f04f 0864 	mov.w	r8, #100	@ 0x64
 80125c0:	4640      	mov	r0, r8
 80125c2:	b025      	add	sp, #148	@ 0x94
 80125c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c8:	f8d6 9000 	ldr.w	r9, [r6]
 80125cc:	4a26      	ldr	r2, [pc, #152]	@ (8012668 <rcl_init+0x204>)
 80125ce:	6813      	ldr	r3, [r2, #0]
 80125d0:	3301      	adds	r3, #1
 80125d2:	d030      	beq.n	8012636 <rcl_init+0x1d2>
 80125d4:	461d      	mov	r5, r3
 80125d6:	2000      	movs	r0, #0
 80125d8:	4619      	mov	r1, r3
 80125da:	f8d9 4014 	ldr.w	r4, [r9, #20]
 80125de:	6073      	str	r3, [r6, #4]
 80125e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80125e2:	6011      	str	r1, [r2, #0]
 80125e4:	3301      	adds	r3, #1
 80125e6:	e9c4 5006 	strd	r5, r0, [r4, #24]
 80125ea:	d033      	beq.n	8012654 <rcl_init+0x1f0>
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80125f2:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 80125f6:	b333      	cbz	r3, 8012646 <rcl_init+0x1e2>
 80125f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80125fa:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80125fe:	b953      	cbnz	r3, 8012616 <rcl_init+0x1b2>
 8012600:	2801      	cmp	r0, #1
 8012602:	d008      	beq.n	8012616 <rcl_init+0x1b2>
 8012604:	a91f      	add	r1, sp, #124	@ 0x7c
 8012606:	4628      	mov	r0, r5
 8012608:	f006 f862 	bl	80186d0 <rcl_get_discovery_static_peers>
 801260c:	4680      	mov	r8, r0
 801260e:	2800      	cmp	r0, #0
 8012610:	d1d0      	bne.n	80125b4 <rcl_init+0x150>
 8012612:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8012616:	f006 f851 	bl	80186bc <rcl_automatic_discovery_range_to_string>
 801261a:	6831      	ldr	r1, [r6, #0]
 801261c:	6948      	ldr	r0, [r1, #20]
 801261e:	3128      	adds	r1, #40	@ 0x28
 8012620:	3018      	adds	r0, #24
 8012622:	f003 fc43 	bl	8015eac <rmw_init>
 8012626:	4680      	mov	r8, r0
 8012628:	2800      	cmp	r0, #0
 801262a:	f43f af33 	beq.w	8012494 <rcl_init+0x30>
 801262e:	f7ff fe99 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 8012632:	4680      	mov	r8, r0
 8012634:	e7be      	b.n	80125b4 <rcl_init+0x150>
 8012636:	2101      	movs	r1, #1
 8012638:	4618      	mov	r0, r3
 801263a:	460d      	mov	r5, r1
 801263c:	460b      	mov	r3, r1
 801263e:	e7cc      	b.n	80125da <rcl_init+0x176>
 8012640:	f04f 080a 	mov.w	r8, #10
 8012644:	e726      	b.n	8012494 <rcl_init+0x30>
 8012646:	4628      	mov	r0, r5
 8012648:	f005 fff6 	bl	8018638 <rcl_get_automatic_discovery_range>
 801264c:	4680      	mov	r8, r0
 801264e:	2800      	cmp	r0, #0
 8012650:	d0d2      	beq.n	80125f8 <rcl_init+0x194>
 8012652:	e7af      	b.n	80125b4 <rcl_init+0x150>
 8012654:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8012658:	f006 f8a4 	bl	80187a4 <rcl_get_default_domain_id>
 801265c:	4680      	mov	r8, r0
 801265e:	2800      	cmp	r0, #0
 8012660:	d1a8      	bne.n	80125b4 <rcl_init+0x150>
 8012662:	6833      	ldr	r3, [r6, #0]
 8012664:	695c      	ldr	r4, [r3, #20]
 8012666:	e7c1      	b.n	80125ec <rcl_init+0x188>
 8012668:	2000f0ac 	.word	0x2000f0ac

0801266c <rcl_get_zero_initialized_init_options>:
 801266c:	2000      	movs	r0, #0
 801266e:	4770      	bx	lr

08012670 <rcl_init_options_init>:
 8012670:	b084      	sub	sp, #16
 8012672:	b570      	push	{r4, r5, r6, lr}
 8012674:	b09e      	sub	sp, #120	@ 0x78
 8012676:	ad23      	add	r5, sp, #140	@ 0x8c
 8012678:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801267c:	2800      	cmp	r0, #0
 801267e:	d046      	beq.n	801270e <rcl_init_options_init+0x9e>
 8012680:	6803      	ldr	r3, [r0, #0]
 8012682:	4604      	mov	r4, r0
 8012684:	b133      	cbz	r3, 8012694 <rcl_init_options_init+0x24>
 8012686:	2564      	movs	r5, #100	@ 0x64
 8012688:	4628      	mov	r0, r5
 801268a:	b01e      	add	sp, #120	@ 0x78
 801268c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012690:	b004      	add	sp, #16
 8012692:	4770      	bx	lr
 8012694:	4628      	mov	r0, r5
 8012696:	f7f9 fca7 	bl	800bfe8 <rcutils_allocator_is_valid>
 801269a:	2800      	cmp	r0, #0
 801269c:	d037      	beq.n	801270e <rcl_init_options_init+0x9e>
 801269e:	46ae      	mov	lr, r5
 80126a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80126a4:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80126a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126ac:	f8de 3000 	ldr.w	r3, [lr]
 80126b0:	f8cc 3000 	str.w	r3, [ip]
 80126b4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80126b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80126b8:	2070      	movs	r0, #112	@ 0x70
 80126ba:	4798      	blx	r3
 80126bc:	4606      	mov	r6, r0
 80126be:	6020      	str	r0, [r4, #0]
 80126c0:	b338      	cbz	r0, 8012712 <rcl_init_options_init+0xa2>
 80126c2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80126c6:	4686      	mov	lr, r0
 80126c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126d0:	f8dc 3000 	ldr.w	r3, [ip]
 80126d4:	f8ce 3000 	str.w	r3, [lr]
 80126d8:	a802      	add	r0, sp, #8
 80126da:	f003 f877 	bl	80157cc <rmw_get_zero_initialized_init_options>
 80126de:	2258      	movs	r2, #88	@ 0x58
 80126e0:	a902      	add	r1, sp, #8
 80126e2:	f106 0018 	add.w	r0, r6, #24
 80126e6:	f007 fc84 	bl	8019ff2 <memcpy>
 80126ea:	ab26      	add	r3, sp, #152	@ 0x98
 80126ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80126f0:	6826      	ldr	r6, [r4, #0]
 80126f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80126f6:	f106 0018 	add.w	r0, r6, #24
 80126fa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80126fe:	f003 fae5 	bl	8015ccc <rmw_init_options_init>
 8012702:	4605      	mov	r5, r0
 8012704:	b938      	cbnz	r0, 8012716 <rcl_init_options_init+0xa6>
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 801270c:	e7bc      	b.n	8012688 <rcl_init_options_init+0x18>
 801270e:	250b      	movs	r5, #11
 8012710:	e7ba      	b.n	8012688 <rcl_init_options_init+0x18>
 8012712:	250a      	movs	r5, #10
 8012714:	e7b8      	b.n	8012688 <rcl_init_options_init+0x18>
 8012716:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8012718:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801271a:	6820      	ldr	r0, [r4, #0]
 801271c:	4798      	blx	r3
 801271e:	4628      	mov	r0, r5
 8012720:	f7ff fe20 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 8012724:	4605      	mov	r5, r0
 8012726:	e7af      	b.n	8012688 <rcl_init_options_init+0x18>

08012728 <rcl_init_options_fini>:
 8012728:	b530      	push	{r4, r5, lr}
 801272a:	b087      	sub	sp, #28
 801272c:	b1f0      	cbz	r0, 801276c <rcl_init_options_fini+0x44>
 801272e:	6803      	ldr	r3, [r0, #0]
 8012730:	4604      	mov	r4, r0
 8012732:	b1db      	cbz	r3, 801276c <rcl_init_options_fini+0x44>
 8012734:	469c      	mov	ip, r3
 8012736:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801273a:	f10d 0e04 	add.w	lr, sp, #4
 801273e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012742:	f8dc 3000 	ldr.w	r3, [ip]
 8012746:	f8ce 3000 	str.w	r3, [lr]
 801274a:	a801      	add	r0, sp, #4
 801274c:	f7f9 fc4c 	bl	800bfe8 <rcutils_allocator_is_valid>
 8012750:	b160      	cbz	r0, 801276c <rcl_init_options_fini+0x44>
 8012752:	6820      	ldr	r0, [r4, #0]
 8012754:	3018      	adds	r0, #24
 8012756:	f003 fb6b 	bl	8015e30 <rmw_init_options_fini>
 801275a:	4605      	mov	r5, r0
 801275c:	b950      	cbnz	r0, 8012774 <rcl_init_options_fini+0x4c>
 801275e:	6820      	ldr	r0, [r4, #0]
 8012760:	9b02      	ldr	r3, [sp, #8]
 8012762:	9905      	ldr	r1, [sp, #20]
 8012764:	4798      	blx	r3
 8012766:	4628      	mov	r0, r5
 8012768:	b007      	add	sp, #28
 801276a:	bd30      	pop	{r4, r5, pc}
 801276c:	250b      	movs	r5, #11
 801276e:	4628      	mov	r0, r5
 8012770:	b007      	add	sp, #28
 8012772:	bd30      	pop	{r4, r5, pc}
 8012774:	f7ff fdf6 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 8012778:	4605      	mov	r5, r0
 801277a:	e7f8      	b.n	801276e <rcl_init_options_fini+0x46>

0801277c <rcl_init_options_copy>:
 801277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801277e:	b09d      	sub	sp, #116	@ 0x74
 8012780:	2800      	cmp	r0, #0
 8012782:	d04a      	beq.n	801281a <rcl_init_options_copy+0x9e>
 8012784:	4604      	mov	r4, r0
 8012786:	6800      	ldr	r0, [r0, #0]
 8012788:	2800      	cmp	r0, #0
 801278a:	d046      	beq.n	801281a <rcl_init_options_copy+0x9e>
 801278c:	460d      	mov	r5, r1
 801278e:	f7f9 fc2b 	bl	800bfe8 <rcutils_allocator_is_valid>
 8012792:	2800      	cmp	r0, #0
 8012794:	d041      	beq.n	801281a <rcl_init_options_copy+0x9e>
 8012796:	2d00      	cmp	r5, #0
 8012798:	d03f      	beq.n	801281a <rcl_init_options_copy+0x9e>
 801279a:	682b      	ldr	r3, [r5, #0]
 801279c:	b11b      	cbz	r3, 80127a6 <rcl_init_options_copy+0x2a>
 801279e:	2464      	movs	r4, #100	@ 0x64
 80127a0:	4620      	mov	r0, r4
 80127a2:	b01d      	add	sp, #116	@ 0x74
 80127a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127a6:	6826      	ldr	r6, [r4, #0]
 80127a8:	46b6      	mov	lr, r6
 80127aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127ae:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80127b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127b6:	f8de 3000 	ldr.w	r3, [lr]
 80127ba:	6837      	ldr	r7, [r6, #0]
 80127bc:	f8cc 3000 	str.w	r3, [ip]
 80127c0:	4619      	mov	r1, r3
 80127c2:	2070      	movs	r0, #112	@ 0x70
 80127c4:	47b8      	blx	r7
 80127c6:	4606      	mov	r6, r0
 80127c8:	6028      	str	r0, [r5, #0]
 80127ca:	b350      	cbz	r0, 8012822 <rcl_init_options_copy+0xa6>
 80127cc:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80127d0:	4686      	mov	lr, r0
 80127d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80127da:	f8dc 3000 	ldr.w	r3, [ip]
 80127de:	f8ce 3000 	str.w	r3, [lr]
 80127e2:	4668      	mov	r0, sp
 80127e4:	f002 fff2 	bl	80157cc <rmw_get_zero_initialized_init_options>
 80127e8:	2258      	movs	r2, #88	@ 0x58
 80127ea:	4669      	mov	r1, sp
 80127ec:	f106 0018 	add.w	r0, r6, #24
 80127f0:	f007 fbff 	bl	8019ff2 <memcpy>
 80127f4:	6820      	ldr	r0, [r4, #0]
 80127f6:	6829      	ldr	r1, [r5, #0]
 80127f8:	3018      	adds	r0, #24
 80127fa:	3118      	adds	r1, #24
 80127fc:	f003 fac8 	bl	8015d90 <rmw_init_options_copy>
 8012800:	4604      	mov	r4, r0
 8012802:	2800      	cmp	r0, #0
 8012804:	d0cc      	beq.n	80127a0 <rcl_init_options_copy+0x24>
 8012806:	f7f9 fc03 	bl	800c010 <rcutils_get_error_string>
 801280a:	f7f9 fc19 	bl	800c040 <rcutils_reset_error>
 801280e:	4628      	mov	r0, r5
 8012810:	f7ff ff8a 	bl	8012728 <rcl_init_options_fini>
 8012814:	b138      	cbz	r0, 8012826 <rcl_init_options_copy+0xaa>
 8012816:	4604      	mov	r4, r0
 8012818:	e7c2      	b.n	80127a0 <rcl_init_options_copy+0x24>
 801281a:	240b      	movs	r4, #11
 801281c:	4620      	mov	r0, r4
 801281e:	b01d      	add	sp, #116	@ 0x74
 8012820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012822:	240a      	movs	r4, #10
 8012824:	e7bc      	b.n	80127a0 <rcl_init_options_copy+0x24>
 8012826:	4620      	mov	r0, r4
 8012828:	b01d      	add	sp, #116	@ 0x74
 801282a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801282e:	f7ff bd99 	b.w	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 8012832:	bf00      	nop

08012834 <rcl_get_zero_initialized_node>:
 8012834:	4a03      	ldr	r2, [pc, #12]	@ (8012844 <rcl_get_zero_initialized_node+0x10>)
 8012836:	4603      	mov	r3, r0
 8012838:	e892 0003 	ldmia.w	r2, {r0, r1}
 801283c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012840:	4618      	mov	r0, r3
 8012842:	4770      	bx	lr
 8012844:	0801ba10 	.word	0x0801ba10

08012848 <rcl_node_init>:
 8012848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801284c:	b0ab      	sub	sp, #172	@ 0xac
 801284e:	4604      	mov	r4, r0
 8012850:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8012852:	a825      	add	r0, sp, #148	@ 0x94
 8012854:	4689      	mov	r9, r1
 8012856:	4690      	mov	r8, r2
 8012858:	461f      	mov	r7, r3
 801285a:	f006 fa15 	bl	8018c88 <rcl_guard_condition_get_default_options>
 801285e:	2d00      	cmp	r5, #0
 8012860:	f000 80d8 	beq.w	8012a14 <rcl_node_init+0x1cc>
 8012864:	4628      	mov	r0, r5
 8012866:	f7f9 fbbf 	bl	800bfe8 <rcutils_allocator_is_valid>
 801286a:	2800      	cmp	r0, #0
 801286c:	f000 80d2 	beq.w	8012a14 <rcl_node_init+0x1cc>
 8012870:	f1b9 0f00 	cmp.w	r9, #0
 8012874:	f000 80ce 	beq.w	8012a14 <rcl_node_init+0x1cc>
 8012878:	f1b8 0f00 	cmp.w	r8, #0
 801287c:	f000 80ca 	beq.w	8012a14 <rcl_node_init+0x1cc>
 8012880:	2c00      	cmp	r4, #0
 8012882:	f000 80c7 	beq.w	8012a14 <rcl_node_init+0x1cc>
 8012886:	6866      	ldr	r6, [r4, #4]
 8012888:	2e00      	cmp	r6, #0
 801288a:	f040 80ca 	bne.w	8012a22 <rcl_node_init+0x1da>
 801288e:	2f00      	cmp	r7, #0
 8012890:	f000 80c0 	beq.w	8012a14 <rcl_node_init+0x1cc>
 8012894:	4638      	mov	r0, r7
 8012896:	f7ff fd7f 	bl	8012398 <rcl_context_is_valid>
 801289a:	2800      	cmp	r0, #0
 801289c:	f000 80bf 	beq.w	8012a1e <rcl_node_init+0x1d6>
 80128a0:	4632      	mov	r2, r6
 80128a2:	a924      	add	r1, sp, #144	@ 0x90
 80128a4:	4648      	mov	r0, r9
 80128a6:	9624      	str	r6, [sp, #144]	@ 0x90
 80128a8:	f003 f92c 	bl	8015b04 <rmw_validate_node_name>
 80128ac:	4606      	mov	r6, r0
 80128ae:	2800      	cmp	r0, #0
 80128b0:	f040 80b1 	bne.w	8012a16 <rcl_node_init+0x1ce>
 80128b4:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80128b6:	2800      	cmp	r0, #0
 80128b8:	f040 8104 	bne.w	8012ac4 <rcl_node_init+0x27c>
 80128bc:	f898 3000 	ldrb.w	r3, [r8]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f000 80f0 	beq.w	8012aa6 <rcl_node_init+0x25e>
 80128c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80128c8:	f000 80b0 	beq.w	8012a2c <rcl_node_init+0x1e4>
 80128cc:	4b85      	ldr	r3, [pc, #532]	@ (8012ae4 <rcl_node_init+0x29c>)
 80128ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80128d2:	9302      	str	r3, [sp, #8]
 80128d4:	692b      	ldr	r3, [r5, #16]
 80128d6:	9300      	str	r3, [sp, #0]
 80128d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80128dc:	9301      	str	r3, [sp, #4]
 80128de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80128e2:	f002 fccf 	bl	8015284 <rcutils_format_string_limit>
 80128e6:	4680      	mov	r8, r0
 80128e8:	f1b8 0f00 	cmp.w	r8, #0
 80128ec:	f000 80e8 	beq.w	8012ac0 <rcl_node_init+0x278>
 80128f0:	2200      	movs	r2, #0
 80128f2:	a924      	add	r1, sp, #144	@ 0x90
 80128f4:	4640      	mov	r0, r8
 80128f6:	9224      	str	r2, [sp, #144]	@ 0x90
 80128f8:	f003 f8e6 	bl	8015ac8 <rmw_validate_namespace>
 80128fc:	4606      	mov	r6, r0
 80128fe:	2800      	cmp	r0, #0
 8012900:	f040 80a4 	bne.w	8012a4c <rcl_node_init+0x204>
 8012904:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8012906:	2800      	cmp	r0, #0
 8012908:	f040 809d 	bne.w	8012a46 <rcl_node_init+0x1fe>
 801290c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8012910:	2178      	movs	r1, #120	@ 0x78
 8012912:	2001      	movs	r0, #1
 8012914:	4798      	blx	r3
 8012916:	4606      	mov	r6, r0
 8012918:	6060      	str	r0, [r4, #4]
 801291a:	2800      	cmp	r0, #0
 801291c:	f000 80d6 	beq.w	8012acc <rcl_node_init+0x284>
 8012920:	a80a      	add	r0, sp, #40	@ 0x28
 8012922:	f000 f92f 	bl	8012b84 <rcl_node_get_default_options>
 8012926:	a90a      	add	r1, sp, #40	@ 0x28
 8012928:	4630      	mov	r0, r6
 801292a:	2268      	movs	r2, #104	@ 0x68
 801292c:	f007 fb61 	bl	8019ff2 <memcpy>
 8012930:	6861      	ldr	r1, [r4, #4]
 8012932:	6027      	str	r7, [r4, #0]
 8012934:	4628      	mov	r0, r5
 8012936:	f000 f933 	bl	8012ba0 <rcl_node_options_copy>
 801293a:	4606      	mov	r6, r0
 801293c:	2800      	cmp	r0, #0
 801293e:	f040 8085 	bne.w	8012a4c <rcl_node_init+0x204>
 8012942:	4640      	mov	r0, r8
 8012944:	f7ed fcc4 	bl	80002d0 <strlen>
 8012948:	eb08 0300 	add.w	r3, r8, r0
 801294c:	6866      	ldr	r6, [r4, #4]
 801294e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012952:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8012956:	2b2f      	cmp	r3, #47	@ 0x2f
 8012958:	bf0c      	ite	eq
 801295a:	4b63      	ldreq	r3, [pc, #396]	@ (8012ae8 <rcl_node_init+0x2a0>)
 801295c:	4b63      	ldrne	r3, [pc, #396]	@ (8012aec <rcl_node_init+0x2a4>)
 801295e:	9302      	str	r3, [sp, #8]
 8012960:	692b      	ldr	r3, [r5, #16]
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801296e:	f002 fc89 	bl	8015284 <rcutils_format_string_limit>
 8012972:	6863      	ldr	r3, [r4, #4]
 8012974:	6770      	str	r0, [r6, #116]	@ 0x74
 8012976:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8012978:	2a00      	cmp	r2, #0
 801297a:	f000 80a9 	beq.w	8012ad0 <rcl_node_init+0x288>
 801297e:	6822      	ldr	r2, [r4, #0]
 8012980:	9307      	str	r3, [sp, #28]
 8012982:	6810      	ldr	r0, [r2, #0]
 8012984:	4649      	mov	r1, r9
 8012986:	3028      	adds	r0, #40	@ 0x28
 8012988:	4642      	mov	r2, r8
 801298a:	f003 fce7 	bl	801635c <rmw_create_node>
 801298e:	9b07      	ldr	r3, [sp, #28]
 8012990:	6698      	str	r0, [r3, #104]	@ 0x68
 8012992:	6863      	ldr	r3, [r4, #4]
 8012994:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012996:	2800      	cmp	r0, #0
 8012998:	f000 809d 	beq.w	8012ad6 <rcl_node_init+0x28e>
 801299c:	f003 fd70 	bl	8016480 <rmw_node_get_graph_guard_condition>
 80129a0:	4681      	mov	r9, r0
 80129a2:	2800      	cmp	r0, #0
 80129a4:	f000 809c 	beq.w	8012ae0 <rcl_node_init+0x298>
 80129a8:	682b      	ldr	r3, [r5, #0]
 80129aa:	6929      	ldr	r1, [r5, #16]
 80129ac:	6866      	ldr	r6, [r4, #4]
 80129ae:	2008      	movs	r0, #8
 80129b0:	4798      	blx	r3
 80129b2:	6863      	ldr	r3, [r4, #4]
 80129b4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80129b6:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 80129ba:	f1ba 0f00 	cmp.w	sl, #0
 80129be:	f000 808d 	beq.w	8012adc <rcl_node_init+0x294>
 80129c2:	f10d 0b20 	add.w	fp, sp, #32
 80129c6:	4658      	mov	r0, fp
 80129c8:	f006 f886 	bl	8018ad8 <rcl_get_zero_initialized_guard_condition>
 80129cc:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80129d0:	6863      	ldr	r3, [r4, #4]
 80129d2:	46ac      	mov	ip, r5
 80129d4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80129d8:	e88a 0003 	stmia.w	sl, {r0, r1}
 80129dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80129e0:	ae25      	add	r6, sp, #148	@ 0x94
 80129e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80129e4:	f8dc 3000 	ldr.w	r3, [ip]
 80129e8:	6033      	str	r3, [r6, #0]
 80129ea:	ab2a      	add	r3, sp, #168	@ 0xa8
 80129ec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80129f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80129f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80129f6:	463a      	mov	r2, r7
 80129f8:	4649      	mov	r1, r9
 80129fa:	4670      	mov	r0, lr
 80129fc:	f006 f8c2 	bl	8018b84 <rcl_guard_condition_init_from_rmw>
 8012a00:	4606      	mov	r6, r0
 8012a02:	bb18      	cbnz	r0, 8012a4c <rcl_node_init+0x204>
 8012a04:	686b      	ldr	r3, [r5, #4]
 8012a06:	6929      	ldr	r1, [r5, #16]
 8012a08:	4798      	blx	r3
 8012a0a:	686b      	ldr	r3, [r5, #4]
 8012a0c:	6929      	ldr	r1, [r5, #16]
 8012a0e:	4640      	mov	r0, r8
 8012a10:	4798      	blx	r3
 8012a12:	e000      	b.n	8012a16 <rcl_node_init+0x1ce>
 8012a14:	260b      	movs	r6, #11
 8012a16:	4630      	mov	r0, r6
 8012a18:	b02b      	add	sp, #172	@ 0xac
 8012a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a1e:	2665      	movs	r6, #101	@ 0x65
 8012a20:	e7f9      	b.n	8012a16 <rcl_node_init+0x1ce>
 8012a22:	2664      	movs	r6, #100	@ 0x64
 8012a24:	4630      	mov	r0, r6
 8012a26:	b02b      	add	sp, #172	@ 0xac
 8012a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a2c:	f105 030c 	add.w	r3, r5, #12
 8012a30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a34:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a38:	4640      	mov	r0, r8
 8012a3a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8012a3e:	f002 fd3f 	bl	80154c0 <rcutils_strdup>
 8012a42:	4680      	mov	r8, r0
 8012a44:	e750      	b.n	80128e8 <rcl_node_init+0xa0>
 8012a46:	f003 f851 	bl	8015aec <rmw_namespace_validation_result_string>
 8012a4a:	26ca      	movs	r6, #202	@ 0xca
 8012a4c:	6863      	ldr	r3, [r4, #4]
 8012a4e:	b1f3      	cbz	r3, 8012a8e <rcl_node_init+0x246>
 8012a50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012a52:	b138      	cbz	r0, 8012a64 <rcl_node_init+0x21c>
 8012a54:	f006 f8f6 	bl	8018c44 <rcl_guard_condition_fini>
 8012a58:	6863      	ldr	r3, [r4, #4]
 8012a5a:	6929      	ldr	r1, [r5, #16]
 8012a5c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012a5e:	686b      	ldr	r3, [r5, #4]
 8012a60:	4798      	blx	r3
 8012a62:	6863      	ldr	r3, [r4, #4]
 8012a64:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012a66:	b110      	cbz	r0, 8012a6e <rcl_node_init+0x226>
 8012a68:	f003 fc8e 	bl	8016388 <rmw_destroy_node>
 8012a6c:	6863      	ldr	r3, [r4, #4]
 8012a6e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8012a70:	6929      	ldr	r1, [r5, #16]
 8012a72:	686b      	ldr	r3, [r5, #4]
 8012a74:	4798      	blx	r3
 8012a76:	6863      	ldr	r3, [r4, #4]
 8012a78:	6929      	ldr	r1, [r5, #16]
 8012a7a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012a7c:	686b      	ldr	r3, [r5, #4]
 8012a7e:	4798      	blx	r3
 8012a80:	6860      	ldr	r0, [r4, #4]
 8012a82:	f000 f8ab 	bl	8012bdc <rcl_node_options_fini>
 8012a86:	686b      	ldr	r3, [r5, #4]
 8012a88:	6929      	ldr	r1, [r5, #16]
 8012a8a:	6860      	ldr	r0, [r4, #4]
 8012a8c:	4798      	blx	r3
 8012a8e:	686b      	ldr	r3, [r5, #4]
 8012a90:	6929      	ldr	r1, [r5, #16]
 8012a92:	2000      	movs	r0, #0
 8012a94:	4798      	blx	r3
 8012a96:	686b      	ldr	r3, [r5, #4]
 8012a98:	6929      	ldr	r1, [r5, #16]
 8012a9a:	4640      	mov	r0, r8
 8012a9c:	4798      	blx	r3
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	e9c4 3300 	strd	r3, r3, [r4]
 8012aa4:	e7b7      	b.n	8012a16 <rcl_node_init+0x1ce>
 8012aa6:	f105 030c 	add.w	r3, r5, #12
 8012aaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012aae:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012ab2:	480f      	ldr	r0, [pc, #60]	@ (8012af0 <rcl_node_init+0x2a8>)
 8012ab4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8012ab8:	f002 fd02 	bl	80154c0 <rcutils_strdup>
 8012abc:	4680      	mov	r8, r0
 8012abe:	e713      	b.n	80128e8 <rcl_node_init+0xa0>
 8012ac0:	260a      	movs	r6, #10
 8012ac2:	e7a8      	b.n	8012a16 <rcl_node_init+0x1ce>
 8012ac4:	f003 f86a 	bl	8015b9c <rmw_node_name_validation_result_string>
 8012ac8:	26c9      	movs	r6, #201	@ 0xc9
 8012aca:	e7a4      	b.n	8012a16 <rcl_node_init+0x1ce>
 8012acc:	260a      	movs	r6, #10
 8012ace:	e7de      	b.n	8012a8e <rcl_node_init+0x246>
 8012ad0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012ad2:	260a      	movs	r6, #10
 8012ad4:	e7bd      	b.n	8012a52 <rcl_node_init+0x20a>
 8012ad6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012ad8:	2601      	movs	r6, #1
 8012ada:	e7ba      	b.n	8012a52 <rcl_node_init+0x20a>
 8012adc:	260a      	movs	r6, #10
 8012ade:	e7c1      	b.n	8012a64 <rcl_node_init+0x21c>
 8012ae0:	2601      	movs	r6, #1
 8012ae2:	e7b3      	b.n	8012a4c <rcl_node_init+0x204>
 8012ae4:	0801b174 	.word	0x0801b174
 8012ae8:	0801af48 	.word	0x0801af48
 8012aec:	0801b178 	.word	0x0801b178
 8012af0:	0801b170 	.word	0x0801b170

08012af4 <rcl_node_is_valid>:
 8012af4:	b130      	cbz	r0, 8012b04 <rcl_node_is_valid+0x10>
 8012af6:	6843      	ldr	r3, [r0, #4]
 8012af8:	b123      	cbz	r3, 8012b04 <rcl_node_is_valid+0x10>
 8012afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012afc:	b113      	cbz	r3, 8012b04 <rcl_node_is_valid+0x10>
 8012afe:	6800      	ldr	r0, [r0, #0]
 8012b00:	f7ff bc4a 	b.w	8012398 <rcl_context_is_valid>
 8012b04:	2000      	movs	r0, #0
 8012b06:	4770      	bx	lr

08012b08 <rcl_node_get_name>:
 8012b08:	b120      	cbz	r0, 8012b14 <rcl_node_get_name+0xc>
 8012b0a:	6840      	ldr	r0, [r0, #4]
 8012b0c:	b110      	cbz	r0, 8012b14 <rcl_node_get_name+0xc>
 8012b0e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012b10:	b100      	cbz	r0, 8012b14 <rcl_node_get_name+0xc>
 8012b12:	6880      	ldr	r0, [r0, #8]
 8012b14:	4770      	bx	lr
 8012b16:	bf00      	nop

08012b18 <rcl_node_get_namespace>:
 8012b18:	b120      	cbz	r0, 8012b24 <rcl_node_get_namespace+0xc>
 8012b1a:	6840      	ldr	r0, [r0, #4]
 8012b1c:	b110      	cbz	r0, 8012b24 <rcl_node_get_namespace+0xc>
 8012b1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012b20:	b100      	cbz	r0, 8012b24 <rcl_node_get_namespace+0xc>
 8012b22:	68c0      	ldr	r0, [r0, #12]
 8012b24:	4770      	bx	lr
 8012b26:	bf00      	nop

08012b28 <rcl_node_get_options>:
 8012b28:	b128      	cbz	r0, 8012b36 <rcl_node_get_options+0xe>
 8012b2a:	6840      	ldr	r0, [r0, #4]
 8012b2c:	b118      	cbz	r0, 8012b36 <rcl_node_get_options+0xe>
 8012b2e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	bf08      	it	eq
 8012b34:	2000      	moveq	r0, #0
 8012b36:	4770      	bx	lr

08012b38 <rcl_node_get_rmw_handle>:
 8012b38:	b110      	cbz	r0, 8012b40 <rcl_node_get_rmw_handle+0x8>
 8012b3a:	6840      	ldr	r0, [r0, #4]
 8012b3c:	b100      	cbz	r0, 8012b40 <rcl_node_get_rmw_handle+0x8>
 8012b3e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop

08012b44 <rcl_get_disable_loaned_message>:
 8012b44:	b510      	push	{r4, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	2300      	movs	r3, #0
 8012b4a:	9301      	str	r3, [sp, #4]
 8012b4c:	b1a0      	cbz	r0, 8012b78 <rcl_get_disable_loaned_message+0x34>
 8012b4e:	4604      	mov	r4, r0
 8012b50:	a901      	add	r1, sp, #4
 8012b52:	480b      	ldr	r0, [pc, #44]	@ (8012b80 <rcl_get_disable_loaned_message+0x3c>)
 8012b54:	f002 fb7e 	bl	8015254 <rcutils_get_env>
 8012b58:	b110      	cbz	r0, 8012b60 <rcl_get_disable_loaned_message+0x1c>
 8012b5a:	2001      	movs	r0, #1
 8012b5c:	b002      	add	sp, #8
 8012b5e:	bd10      	pop	{r4, pc}
 8012b60:	9a01      	ldr	r2, [sp, #4]
 8012b62:	7813      	ldrb	r3, [r2, #0]
 8012b64:	3b31      	subs	r3, #49	@ 0x31
 8012b66:	bf08      	it	eq
 8012b68:	7853      	ldrbeq	r3, [r2, #1]
 8012b6a:	fab3 f383 	clz	r3, r3
 8012b6e:	095b      	lsrs	r3, r3, #5
 8012b70:	2000      	movs	r0, #0
 8012b72:	7023      	strb	r3, [r4, #0]
 8012b74:	b002      	add	sp, #8
 8012b76:	bd10      	pop	{r4, pc}
 8012b78:	200b      	movs	r0, #11
 8012b7a:	b002      	add	sp, #8
 8012b7c:	bd10      	pop	{r4, pc}
 8012b7e:	bf00      	nop
 8012b80:	0801b180 	.word	0x0801b180

08012b84 <rcl_node_get_default_options>:
 8012b84:	b510      	push	{r4, lr}
 8012b86:	2253      	movs	r2, #83	@ 0x53
 8012b88:	4604      	mov	r4, r0
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	3015      	adds	r0, #21
 8012b8e:	f007 f955 	bl	8019e3c <memset>
 8012b92:	4620      	mov	r0, r4
 8012b94:	f7f9 f9fc 	bl	800bf90 <rcutils_get_default_allocator>
 8012b98:	2301      	movs	r3, #1
 8012b9a:	7523      	strb	r3, [r4, #20]
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	bd10      	pop	{r4, pc}

08012ba0 <rcl_node_options_copy>:
 8012ba0:	b1d0      	cbz	r0, 8012bd8 <rcl_node_options_copy+0x38>
 8012ba2:	b570      	push	{r4, r5, r6, lr}
 8012ba4:	460c      	mov	r4, r1
 8012ba6:	b1a9      	cbz	r1, 8012bd4 <rcl_node_options_copy+0x34>
 8012ba8:	4288      	cmp	r0, r1
 8012baa:	4684      	mov	ip, r0
 8012bac:	d012      	beq.n	8012bd4 <rcl_node_options_copy+0x34>
 8012bae:	4605      	mov	r5, r0
 8012bb0:	8a86      	ldrh	r6, [r0, #20]
 8012bb2:	468e      	mov	lr, r1
 8012bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012bba:	682b      	ldr	r3, [r5, #0]
 8012bbc:	f8ce 3000 	str.w	r3, [lr]
 8012bc0:	f10c 0118 	add.w	r1, ip, #24
 8012bc4:	2250      	movs	r2, #80	@ 0x50
 8012bc6:	82a6      	strh	r6, [r4, #20]
 8012bc8:	f104 0018 	add.w	r0, r4, #24
 8012bcc:	f007 fa11 	bl	8019ff2 <memcpy>
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	200b      	movs	r0, #11
 8012bd6:	bd70      	pop	{r4, r5, r6, pc}
 8012bd8:	200b      	movs	r0, #11
 8012bda:	4770      	bx	lr

08012bdc <rcl_node_options_fini>:
 8012bdc:	b1c0      	cbz	r0, 8012c10 <rcl_node_options_fini+0x34>
 8012bde:	b500      	push	{lr}
 8012be0:	4684      	mov	ip, r0
 8012be2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012be6:	b087      	sub	sp, #28
 8012be8:	f10d 0e04 	add.w	lr, sp, #4
 8012bec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012bf0:	f8dc 3000 	ldr.w	r3, [ip]
 8012bf4:	f8ce 3000 	str.w	r3, [lr]
 8012bf8:	a801      	add	r0, sp, #4
 8012bfa:	f7f9 f9f5 	bl	800bfe8 <rcutils_allocator_is_valid>
 8012bfe:	b118      	cbz	r0, 8012c08 <rcl_node_options_fini+0x2c>
 8012c00:	2000      	movs	r0, #0
 8012c02:	b007      	add	sp, #28
 8012c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c08:	200b      	movs	r0, #11
 8012c0a:	b007      	add	sp, #28
 8012c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c10:	200b      	movs	r0, #11
 8012c12:	4770      	bx	lr

08012c14 <rcl_node_resolve_name>:
 8012c14:	b082      	sub	sp, #8
 8012c16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1a:	b091      	sub	sp, #68	@ 0x44
 8012c1c:	ac1a      	add	r4, sp, #104	@ 0x68
 8012c1e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012c22:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d03a      	beq.n	8012ca0 <rcl_node_resolve_name+0x8c>
 8012c2a:	460c      	mov	r4, r1
 8012c2c:	4605      	mov	r5, r0
 8012c2e:	f7ff ff7b 	bl	8012b28 <rcl_node_get_options>
 8012c32:	b370      	cbz	r0, 8012c92 <rcl_node_resolve_name+0x7e>
 8012c34:	4628      	mov	r0, r5
 8012c36:	f7ff ff67 	bl	8012b08 <rcl_node_get_name>
 8012c3a:	4681      	mov	r9, r0
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	f7ff ff6b 	bl	8012b18 <rcl_node_get_namespace>
 8012c42:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012c46:	4607      	mov	r7, r0
 8012c48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c4c:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012c4e:	46ac      	mov	ip, r5
 8012c50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c54:	f8de 3000 	ldr.w	r3, [lr]
 8012c58:	f8cc 3000 	str.w	r3, [ip]
 8012c5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012c5e:	b1fb      	cbz	r3, 8012ca0 <rcl_node_resolve_name+0x8c>
 8012c60:	468a      	mov	sl, r1
 8012c62:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012c66:	f002 fc8b 	bl	8015580 <rcutils_get_zero_initialized_string_map>
 8012c6a:	ab10      	add	r3, sp, #64	@ 0x40
 8012c6c:	9008      	str	r0, [sp, #32]
 8012c6e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012c72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c76:	2100      	movs	r1, #0
 8012c78:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012c7c:	a808      	add	r0, sp, #32
 8012c7e:	f002 fcd9 	bl	8015634 <rcutils_string_map_init>
 8012c82:	4606      	mov	r6, r0
 8012c84:	b170      	cbz	r0, 8012ca4 <rcl_node_resolve_name+0x90>
 8012c86:	f7f9 f9c3 	bl	800c010 <rcutils_get_error_string>
 8012c8a:	f7f9 f9d9 	bl	800c040 <rcutils_reset_error>
 8012c8e:	2e0a      	cmp	r6, #10
 8012c90:	d000      	beq.n	8012c94 <rcl_node_resolve_name+0x80>
 8012c92:	2601      	movs	r6, #1
 8012c94:	4630      	mov	r0, r6
 8012c96:	b011      	add	sp, #68	@ 0x44
 8012c98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c9c:	b002      	add	sp, #8
 8012c9e:	4770      	bx	lr
 8012ca0:	260b      	movs	r6, #11
 8012ca2:	e7f7      	b.n	8012c94 <rcl_node_resolve_name+0x80>
 8012ca4:	9009      	str	r0, [sp, #36]	@ 0x24
 8012ca6:	9007      	str	r0, [sp, #28]
 8012ca8:	a808      	add	r0, sp, #32
 8012caa:	f005 ff0f 	bl	8018acc <rcl_get_default_topic_name_substitutions>
 8012cae:	4606      	mov	r6, r0
 8012cb0:	b1b0      	cbz	r0, 8012ce0 <rcl_node_resolve_name+0xcc>
 8012cb2:	280a      	cmp	r0, #10
 8012cb4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8012cb8:	d000      	beq.n	8012cbc <rcl_node_resolve_name+0xa8>
 8012cba:	2601      	movs	r6, #1
 8012cbc:	a808      	add	r0, sp, #32
 8012cbe:	f002 fcf7 	bl	80156b0 <rcutils_string_map_fini>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d132      	bne.n	8012d2c <rcl_node_resolve_name+0x118>
 8012cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012cc8:	4659      	mov	r1, fp
 8012cca:	47d0      	blx	sl
 8012ccc:	4659      	mov	r1, fp
 8012cce:	4648      	mov	r0, r9
 8012cd0:	47d0      	blx	sl
 8012cd2:	f1b8 0f00 	cmp.w	r8, #0
 8012cd6:	d0dd      	beq.n	8012c94 <rcl_node_resolve_name+0x80>
 8012cd8:	2e67      	cmp	r6, #103	@ 0x67
 8012cda:	bf08      	it	eq
 8012cdc:	2668      	moveq	r6, #104	@ 0x68
 8012cde:	e7d9      	b.n	8012c94 <rcl_node_resolve_name+0x80>
 8012ce0:	ab09      	add	r3, sp, #36	@ 0x24
 8012ce2:	9305      	str	r3, [sp, #20]
 8012ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ce6:	46ec      	mov	ip, sp
 8012ce8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cec:	682b      	ldr	r3, [r5, #0]
 8012cee:	f8cc 3000 	str.w	r3, [ip]
 8012cf2:	463a      	mov	r2, r7
 8012cf4:	4649      	mov	r1, r9
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	ab08      	add	r3, sp, #32
 8012cfa:	f005 fd81 	bl	8018800 <rcl_expand_topic_name>
 8012cfe:	4606      	mov	r6, r0
 8012d00:	b9c8      	cbnz	r0, 8012d36 <rcl_node_resolve_name+0x122>
 8012d02:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8012d06:	9009      	str	r0, [sp, #36]	@ 0x24
 8012d08:	4602      	mov	r2, r0
 8012d0a:	a90a      	add	r1, sp, #40	@ 0x28
 8012d0c:	4648      	mov	r0, r9
 8012d0e:	f002 fe23 	bl	8015958 <rmw_validate_full_topic_name>
 8012d12:	b998      	cbnz	r0, 8012d3c <rcl_node_resolve_name+0x128>
 8012d14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012d16:	bb14      	cbnz	r4, 8012d5e <rcl_node_resolve_name+0x14a>
 8012d18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012d1a:	a808      	add	r0, sp, #32
 8012d1c:	f8c3 9000 	str.w	r9, [r3]
 8012d20:	f002 fcc6 	bl	80156b0 <rcutils_string_map_fini>
 8012d24:	4606      	mov	r6, r0
 8012d26:	b978      	cbnz	r0, 8012d48 <rcl_node_resolve_name+0x134>
 8012d28:	4681      	mov	r9, r0
 8012d2a:	e7cc      	b.n	8012cc6 <rcl_node_resolve_name+0xb2>
 8012d2c:	f7f9 f970 	bl	800c010 <rcutils_get_error_string>
 8012d30:	f7f9 f986 	bl	800c040 <rcutils_reset_error>
 8012d34:	e7c7      	b.n	8012cc6 <rcl_node_resolve_name+0xb2>
 8012d36:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8012d3a:	e7bf      	b.n	8012cbc <rcl_node_resolve_name+0xa8>
 8012d3c:	f7f9 f968 	bl	800c010 <rcutils_get_error_string>
 8012d40:	2601      	movs	r6, #1
 8012d42:	f7f9 f97d 	bl	800c040 <rcutils_reset_error>
 8012d46:	e7b9      	b.n	8012cbc <rcl_node_resolve_name+0xa8>
 8012d48:	f7f9 f962 	bl	800c010 <rcutils_get_error_string>
 8012d4c:	f7f9 f978 	bl	800c040 <rcutils_reset_error>
 8012d50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d52:	4659      	mov	r1, fp
 8012d54:	47d0      	blx	sl
 8012d56:	4659      	mov	r1, fp
 8012d58:	4620      	mov	r0, r4
 8012d5a:	47d0      	blx	sl
 8012d5c:	e799      	b.n	8012c92 <rcl_node_resolve_name+0x7e>
 8012d5e:	2667      	movs	r6, #103	@ 0x67
 8012d60:	e7ac      	b.n	8012cbc <rcl_node_resolve_name+0xa8>
 8012d62:	bf00      	nop

08012d64 <rcl_service_get_rmw_handle>:
 8012d64:	b118      	cbz	r0, 8012d6e <rcl_service_get_rmw_handle+0xa>
 8012d66:	6800      	ldr	r0, [r0, #0]
 8012d68:	b108      	cbz	r0, 8012d6e <rcl_service_get_rmw_handle+0xa>
 8012d6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012d6e:	4770      	bx	lr

08012d70 <rcl_take_request>:
 8012d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d72:	468e      	mov	lr, r1
 8012d74:	460c      	mov	r4, r1
 8012d76:	4617      	mov	r7, r2
 8012d78:	4605      	mov	r5, r0
 8012d7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d7e:	b091      	sub	sp, #68	@ 0x44
 8012d80:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8012d84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012d8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012d90:	b30d      	cbz	r5, 8012dd6 <rcl_take_request+0x66>
 8012d92:	682b      	ldr	r3, [r5, #0]
 8012d94:	b1fb      	cbz	r3, 8012dd6 <rcl_take_request+0x66>
 8012d96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012d9a:	b1e0      	cbz	r0, 8012dd6 <rcl_take_request+0x66>
 8012d9c:	b397      	cbz	r7, 8012e04 <rcl_take_request+0x94>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	f88d 3017 	strb.w	r3, [sp, #23]
 8012da4:	463a      	mov	r2, r7
 8012da6:	f10d 0317 	add.w	r3, sp, #23
 8012daa:	a906      	add	r1, sp, #24
 8012dac:	f003 fbb6 	bl	801651c <rmw_take_request>
 8012db0:	4606      	mov	r6, r0
 8012db2:	b198      	cbz	r0, 8012ddc <rcl_take_request+0x6c>
 8012db4:	280a      	cmp	r0, #10
 8012db6:	bf18      	it	ne
 8012db8:	2601      	movne	r6, #1
 8012dba:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8012dbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dc2:	46a6      	mov	lr, r4
 8012dc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012dc8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012dcc:	e88e 0003 	stmia.w	lr, {r0, r1}
 8012dd0:	4630      	mov	r0, r6
 8012dd2:	b011      	add	sp, #68	@ 0x44
 8012dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dd6:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8012dda:	e7ee      	b.n	8012dba <rcl_take_request+0x4a>
 8012ddc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8012de0:	b193      	cbz	r3, 8012e08 <rcl_take_request+0x98>
 8012de2:	682b      	ldr	r3, [r5, #0]
 8012de4:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8012de8:	2800      	cmp	r0, #0
 8012dea:	d0e6      	beq.n	8012dba <rcl_take_request+0x4a>
 8012dec:	463a      	mov	r2, r7
 8012dee:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8012df2:	ab0a      	add	r3, sp, #40	@ 0x28
 8012df4:	e9cd 6700 	strd	r6, r7, [sp]
 8012df8:	9302      	str	r3, [sp, #8]
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	f000 f844 	bl	8012e88 <rcl_send_service_event_message>
 8012e00:	4606      	mov	r6, r0
 8012e02:	e7da      	b.n	8012dba <rcl_take_request+0x4a>
 8012e04:	260b      	movs	r6, #11
 8012e06:	e7d8      	b.n	8012dba <rcl_take_request+0x4a>
 8012e08:	f240 2659 	movw	r6, #601	@ 0x259
 8012e0c:	e7d5      	b.n	8012dba <rcl_take_request+0x4a>
 8012e0e:	bf00      	nop

08012e10 <rcl_send_response>:
 8012e10:	b350      	cbz	r0, 8012e68 <rcl_send_response+0x58>
 8012e12:	b570      	push	{r4, r5, r6, lr}
 8012e14:	6803      	ldr	r3, [r0, #0]
 8012e16:	b084      	sub	sp, #16
 8012e18:	4604      	mov	r4, r0
 8012e1a:	b1cb      	cbz	r3, 8012e50 <rcl_send_response+0x40>
 8012e1c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012e20:	b1b0      	cbz	r0, 8012e50 <rcl_send_response+0x40>
 8012e22:	460e      	mov	r6, r1
 8012e24:	b1e9      	cbz	r1, 8012e62 <rcl_send_response+0x52>
 8012e26:	4615      	mov	r5, r2
 8012e28:	b1da      	cbz	r2, 8012e62 <rcl_send_response+0x52>
 8012e2a:	f003 fbd5 	bl	80165d8 <rmw_send_response>
 8012e2e:	b998      	cbnz	r0, 8012e58 <rcl_send_response+0x48>
 8012e30:	6823      	ldr	r3, [r4, #0]
 8012e32:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012e36:	b16b      	cbz	r3, 8012e54 <rcl_send_response+0x44>
 8012e38:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8012e3c:	462a      	mov	r2, r5
 8012e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8012e42:	9602      	str	r6, [sp, #8]
 8012e44:	2102      	movs	r1, #2
 8012e46:	4618      	mov	r0, r3
 8012e48:	f000 f81e 	bl	8012e88 <rcl_send_service_event_message>
 8012e4c:	b004      	add	sp, #16
 8012e4e:	bd70      	pop	{r4, r5, r6, pc}
 8012e50:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012e54:	b004      	add	sp, #16
 8012e56:	bd70      	pop	{r4, r5, r6, pc}
 8012e58:	2802      	cmp	r0, #2
 8012e5a:	bf18      	it	ne
 8012e5c:	2001      	movne	r0, #1
 8012e5e:	b004      	add	sp, #16
 8012e60:	bd70      	pop	{r4, r5, r6, pc}
 8012e62:	200b      	movs	r0, #11
 8012e64:	b004      	add	sp, #16
 8012e66:	bd70      	pop	{r4, r5, r6, pc}
 8012e68:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012e6c:	4770      	bx	lr
 8012e6e:	bf00      	nop

08012e70 <rcl_service_is_valid>:
 8012e70:	b130      	cbz	r0, 8012e80 <rcl_service_is_valid+0x10>
 8012e72:	6800      	ldr	r0, [r0, #0]
 8012e74:	b120      	cbz	r0, 8012e80 <rcl_service_is_valid+0x10>
 8012e76:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012e7a:	3800      	subs	r0, #0
 8012e7c:	bf18      	it	ne
 8012e7e:	2001      	movne	r0, #1
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop
 8012e84:	0000      	movs	r0, r0
	...

08012e88 <rcl_send_service_event_message>:
 8012e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e8a:	b093      	sub	sp, #76	@ 0x4c
 8012e8c:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8012e8e:	b17a      	cbz	r2, 8012eb0 <rcl_send_service_event_message+0x28>
 8012e90:	b176      	cbz	r6, 8012eb0 <rcl_send_service_event_message+0x28>
 8012e92:	4604      	mov	r4, r0
 8012e94:	b150      	cbz	r0, 8012eac <rcl_send_service_event_message+0x24>
 8012e96:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8012e9a:	b13b      	cbz	r3, 8012eac <rcl_send_service_event_message+0x24>
 8012e9c:	68c0      	ldr	r0, [r0, #12]
 8012e9e:	460f      	mov	r7, r1
 8012ea0:	4615      	mov	r5, r2
 8012ea2:	f000 f9bb 	bl	801321c <rcl_clock_valid>
 8012ea6:	b108      	cbz	r0, 8012eac <rcl_send_service_event_message+0x24>
 8012ea8:	7a23      	ldrb	r3, [r4, #8]
 8012eaa:	b92b      	cbnz	r3, 8012eb8 <rcl_send_service_event_message+0x30>
 8012eac:	2501      	movs	r5, #1
 8012eae:	e000      	b.n	8012eb2 <rcl_send_service_event_message+0x2a>
 8012eb0:	250b      	movs	r5, #11
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	b013      	add	sp, #76	@ 0x4c
 8012eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eb8:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8012ebc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ec0:	f10d 0c0c 	add.w	ip, sp, #12
 8012ec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ec8:	f8de 3000 	ldr.w	r3, [lr]
 8012ecc:	f8cc 3000 	str.w	r3, [ip]
 8012ed0:	a803      	add	r0, sp, #12
 8012ed2:	f7f9 f889 	bl	800bfe8 <rcutils_allocator_is_valid>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	d0ea      	beq.n	8012eb0 <rcl_send_service_event_message+0x28>
 8012eda:	6820      	ldr	r0, [r4, #0]
 8012edc:	f7f8 f920 	bl	800b120 <rcl_publisher_is_valid>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	d045      	beq.n	8012f70 <rcl_send_service_event_message+0xe8>
 8012ee4:	4669      	mov	r1, sp
 8012ee6:	68e0      	ldr	r0, [r4, #12]
 8012ee8:	f000 fa10 	bl	801330c <rcl_clock_get_now>
 8012eec:	4601      	mov	r1, r0
 8012eee:	2800      	cmp	r0, #0
 8012ef0:	d13b      	bne.n	8012f6a <rcl_send_service_event_message+0xe2>
 8012ef2:	2220      	movs	r2, #32
 8012ef4:	eb0d 0002 	add.w	r0, sp, r2
 8012ef8:	f006 ffa0 	bl	8019e3c <memset>
 8012efc:	a324      	add	r3, pc, #144	@ (adr r3, 8012f90 <rcl_send_service_event_message+0x108>)
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f06:	f88d 7020 	strb.w	r7, [sp, #32]
 8012f0a:	f7ed fcf7 	bl	80008fc <__aeabi_ldivmod>
 8012f0e:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8012f12:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8012f16:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012f1a:	7a23      	ldrb	r3, [r4, #8]
 8012f1c:	6830      	ldr	r0, [r6, #0]
 8012f1e:	6871      	ldr	r1, [r6, #4]
 8012f20:	68b2      	ldr	r2, [r6, #8]
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	68f3      	ldr	r3, [r6, #12]
 8012f26:	bf08      	it	eq
 8012f28:	2500      	moveq	r5, #0
 8012f2a:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012f2c:	2f01      	cmp	r7, #1
 8012f2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012f30:	d821      	bhi.n	8012f76 <rcl_send_service_event_message+0xee>
 8012f32:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8012f36:	462a      	mov	r2, r5
 8012f38:	a808      	add	r0, sp, #32
 8012f3a:	699d      	ldr	r5, [r3, #24]
 8012f3c:	a903      	add	r1, sp, #12
 8012f3e:	2300      	movs	r3, #0
 8012f40:	47a8      	blx	r5
 8012f42:	4606      	mov	r6, r0
 8012f44:	2e00      	cmp	r6, #0
 8012f46:	d0b1      	beq.n	8012eac <rcl_send_service_event_message+0x24>
 8012f48:	4631      	mov	r1, r6
 8012f4a:	6820      	ldr	r0, [r4, #0]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	f7f8 f8c1 	bl	800b0d4 <rcl_publish>
 8012f52:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8012f56:	4605      	mov	r5, r0
 8012f58:	69db      	ldr	r3, [r3, #28]
 8012f5a:	a903      	add	r1, sp, #12
 8012f5c:	4630      	mov	r0, r6
 8012f5e:	4798      	blx	r3
 8012f60:	2d00      	cmp	r5, #0
 8012f62:	d0a6      	beq.n	8012eb2 <rcl_send_service_event_message+0x2a>
 8012f64:	f7f9 f86c 	bl	800c040 <rcutils_reset_error>
 8012f68:	e7a3      	b.n	8012eb2 <rcl_send_service_event_message+0x2a>
 8012f6a:	f7f9 f869 	bl	800c040 <rcutils_reset_error>
 8012f6e:	e79d      	b.n	8012eac <rcl_send_service_event_message+0x24>
 8012f70:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8012f74:	e79d      	b.n	8012eb2 <rcl_send_service_event_message+0x2a>
 8012f76:	1eb9      	subs	r1, r7, #2
 8012f78:	2901      	cmp	r1, #1
 8012f7a:	d8f6      	bhi.n	8012f6a <rcl_send_service_event_message+0xe2>
 8012f7c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8012f80:	462b      	mov	r3, r5
 8012f82:	a808      	add	r0, sp, #32
 8012f84:	6995      	ldr	r5, [r2, #24]
 8012f86:	a903      	add	r1, sp, #12
 8012f88:	2200      	movs	r2, #0
 8012f8a:	47a8      	blx	r5
 8012f8c:	4606      	mov	r6, r0
 8012f8e:	e7d9      	b.n	8012f44 <rcl_send_service_event_message+0xbc>
 8012f90:	3b9aca00 	.word	0x3b9aca00
 8012f94:	00000000 	.word	0x00000000

08012f98 <rcl_get_zero_initialized_subscription>:
 8012f98:	4b01      	ldr	r3, [pc, #4]	@ (8012fa0 <rcl_get_zero_initialized_subscription+0x8>)
 8012f9a:	6818      	ldr	r0, [r3, #0]
 8012f9c:	4770      	bx	lr
 8012f9e:	bf00      	nop
 8012fa0:	0801ba18 	.word	0x0801ba18

08012fa4 <rcl_subscription_init>:
 8012fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fa8:	b089      	sub	sp, #36	@ 0x24
 8012faa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012fac:	b1d6      	cbz	r6, 8012fe4 <rcl_subscription_init+0x40>
 8012fae:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	4648      	mov	r0, r9
 8012fb6:	460d      	mov	r5, r1
 8012fb8:	4690      	mov	r8, r2
 8012fba:	461f      	mov	r7, r3
 8012fbc:	f7f9 f814 	bl	800bfe8 <rcutils_allocator_is_valid>
 8012fc0:	b180      	cbz	r0, 8012fe4 <rcl_subscription_init+0x40>
 8012fc2:	b17c      	cbz	r4, 8012fe4 <rcl_subscription_init+0x40>
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	f7ff fd95 	bl	8012af4 <rcl_node_is_valid>
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d054      	beq.n	8013078 <rcl_subscription_init+0xd4>
 8012fce:	f1b8 0f00 	cmp.w	r8, #0
 8012fd2:	d007      	beq.n	8012fe4 <rcl_subscription_init+0x40>
 8012fd4:	b137      	cbz	r7, 8012fe4 <rcl_subscription_init+0x40>
 8012fd6:	6823      	ldr	r3, [r4, #0]
 8012fd8:	b14b      	cbz	r3, 8012fee <rcl_subscription_init+0x4a>
 8012fda:	2764      	movs	r7, #100	@ 0x64
 8012fdc:	4638      	mov	r0, r7
 8012fde:	b009      	add	sp, #36	@ 0x24
 8012fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fe4:	270b      	movs	r7, #11
 8012fe6:	4638      	mov	r0, r7
 8012fe8:	b009      	add	sp, #36	@ 0x24
 8012fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fee:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012ff2:	aa07      	add	r2, sp, #28
 8012ff4:	9205      	str	r2, [sp, #20]
 8012ff6:	9307      	str	r3, [sp, #28]
 8012ff8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8012ffc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013000:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013004:	4639      	mov	r1, r7
 8013006:	e899 000c 	ldmia.w	r9, {r2, r3}
 801300a:	4628      	mov	r0, r5
 801300c:	f7ff fe02 	bl	8012c14 <rcl_node_resolve_name>
 8013010:	4607      	mov	r7, r0
 8013012:	2800      	cmp	r0, #0
 8013014:	d15f      	bne.n	80130d6 <rcl_subscription_init+0x132>
 8013016:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801301a:	21d0      	movs	r1, #208	@ 0xd0
 801301c:	2001      	movs	r0, #1
 801301e:	4798      	blx	r3
 8013020:	6020      	str	r0, [r4, #0]
 8013022:	2800      	cmp	r0, #0
 8013024:	d05d      	beq.n	80130e2 <rcl_subscription_init+0x13e>
 8013026:	2278      	movs	r2, #120	@ 0x78
 8013028:	4631      	mov	r1, r6
 801302a:	f006 ffe2 	bl	8019ff2 <memcpy>
 801302e:	4628      	mov	r0, r5
 8013030:	f7ff fd82 	bl	8012b38 <rcl_node_get_rmw_handle>
 8013034:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	9a07      	ldr	r2, [sp, #28]
 801303c:	6827      	ldr	r7, [r4, #0]
 801303e:	4641      	mov	r1, r8
 8013040:	4633      	mov	r3, r6
 8013042:	f003 fbb1 	bl	80167a8 <rmw_create_subscription>
 8013046:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 801304a:	6827      	ldr	r7, [r4, #0]
 801304c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8013050:	b338      	cbz	r0, 80130a2 <rcl_subscription_init+0xfe>
 8013052:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8013056:	f003 fc87 	bl	8016968 <rmw_subscription_get_actual_qos>
 801305a:	4607      	mov	r7, r0
 801305c:	b988      	cbnz	r0, 8013082 <rcl_subscription_init+0xde>
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8013064:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8013068:	9807      	ldr	r0, [sp, #28]
 801306a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801306c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801306e:	4798      	blx	r3
 8013070:	4638      	mov	r0, r7
 8013072:	b009      	add	sp, #36	@ 0x24
 8013074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013078:	27c8      	movs	r7, #200	@ 0xc8
 801307a:	4638      	mov	r0, r7
 801307c:	b009      	add	sp, #36	@ 0x24
 801307e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013082:	6827      	ldr	r7, [r4, #0]
 8013084:	b32f      	cbz	r7, 80130d2 <rcl_subscription_init+0x12e>
 8013086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801308a:	b153      	cbz	r3, 80130a2 <rcl_subscription_init+0xfe>
 801308c:	4628      	mov	r0, r5
 801308e:	f7ff fd53 	bl	8012b38 <rcl_node_get_rmw_handle>
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8013098:	f003 fc74 	bl	8016984 <rmw_destroy_subscription>
 801309c:	6827      	ldr	r7, [r4, #0]
 801309e:	4638      	mov	r0, r7
 80130a0:	b197      	cbz	r7, 80130c8 <rcl_subscription_init+0x124>
 80130a2:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80130a6:	4628      	mov	r0, r5
 80130a8:	f7f8 ff9e 	bl	800bfe8 <rcutils_allocator_is_valid>
 80130ac:	b1e8      	cbz	r0, 80130ea <rcl_subscription_init+0x146>
 80130ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80130b0:	b1d8      	cbz	r0, 80130ea <rcl_subscription_init+0x146>
 80130b2:	4629      	mov	r1, r5
 80130b4:	f002 fb94 	bl	80157e0 <rmw_subscription_content_filter_options_fini>
 80130b8:	4605      	mov	r5, r0
 80130ba:	b9a0      	cbnz	r0, 80130e6 <rcl_subscription_init+0x142>
 80130bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80130be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80130c2:	4798      	blx	r3
 80130c4:	6820      	ldr	r0, [r4, #0]
 80130c6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80130c8:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80130ca:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80130cc:	4798      	blx	r3
 80130ce:	2300      	movs	r3, #0
 80130d0:	6023      	str	r3, [r4, #0]
 80130d2:	2701      	movs	r7, #1
 80130d4:	e7c8      	b.n	8013068 <rcl_subscription_init+0xc4>
 80130d6:	2867      	cmp	r0, #103	@ 0x67
 80130d8:	d0c6      	beq.n	8013068 <rcl_subscription_init+0xc4>
 80130da:	2869      	cmp	r0, #105	@ 0x69
 80130dc:	d007      	beq.n	80130ee <rcl_subscription_init+0x14a>
 80130de:	280a      	cmp	r0, #10
 80130e0:	d1f7      	bne.n	80130d2 <rcl_subscription_init+0x12e>
 80130e2:	270a      	movs	r7, #10
 80130e4:	e7c0      	b.n	8013068 <rcl_subscription_init+0xc4>
 80130e6:	f7ff f93d 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 80130ea:	6820      	ldr	r0, [r4, #0]
 80130ec:	e7ec      	b.n	80130c8 <rcl_subscription_init+0x124>
 80130ee:	2767      	movs	r7, #103	@ 0x67
 80130f0:	e7ba      	b.n	8013068 <rcl_subscription_init+0xc4>
 80130f2:	bf00      	nop

080130f4 <rcl_subscription_get_default_options>:
 80130f4:	b510      	push	{r4, lr}
 80130f6:	4907      	ldr	r1, [pc, #28]	@ (8013114 <rcl_subscription_get_default_options+0x20>)
 80130f8:	4604      	mov	r4, r0
 80130fa:	2250      	movs	r2, #80	@ 0x50
 80130fc:	f006 ff79 	bl	8019ff2 <memcpy>
 8013100:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013104:	f7f8 ff44 	bl	800bf90 <rcutils_get_default_allocator>
 8013108:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801310c:	f002 fb82 	bl	8015814 <rmw_get_default_subscription_options>
 8013110:	4620      	mov	r0, r4
 8013112:	bd10      	pop	{r4, pc}
 8013114:	0801ba20 	.word	0x0801ba20

08013118 <rcl_take>:
 8013118:	2800      	cmp	r0, #0
 801311a:	d04b      	beq.n	80131b4 <rcl_take+0x9c>
 801311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013120:	4615      	mov	r5, r2
 8013122:	6802      	ldr	r2, [r0, #0]
 8013124:	b0a0      	sub	sp, #128	@ 0x80
 8013126:	4604      	mov	r4, r0
 8013128:	2a00      	cmp	r2, #0
 801312a:	d03b      	beq.n	80131a4 <rcl_take+0x8c>
 801312c:	461f      	mov	r7, r3
 801312e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8013132:	2b00      	cmp	r3, #0
 8013134:	d036      	beq.n	80131a4 <rcl_take+0x8c>
 8013136:	460e      	mov	r6, r1
 8013138:	2900      	cmp	r1, #0
 801313a:	d039      	beq.n	80131b0 <rcl_take+0x98>
 801313c:	2d00      	cmp	r5, #0
 801313e:	d03d      	beq.n	80131bc <rcl_take+0xa4>
 8013140:	a802      	add	r0, sp, #8
 8013142:	f002 fbf3 	bl	801592c <rmw_get_zero_initialized_message_info>
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	f10d 0c08 	add.w	ip, sp, #8
 801314c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8013150:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013154:	46ae      	mov	lr, r5
 8013156:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801315a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801315e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013162:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013166:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801316a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801316e:	462b      	mov	r3, r5
 8013170:	e88e 0003 	stmia.w	lr, {r0, r1}
 8013174:	f04f 0800 	mov.w	r8, #0
 8013178:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 801317c:	4631      	mov	r1, r6
 801317e:	4620      	mov	r0, r4
 8013180:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8013184:	9700      	str	r7, [sp, #0]
 8013186:	f003 fc5d 	bl	8016a44 <rmw_take_with_info>
 801318a:	4603      	mov	r3, r0
 801318c:	b9c0      	cbnz	r0, 80131c0 <rcl_take+0xa8>
 801318e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8013192:	f240 1291 	movw	r2, #401	@ 0x191
 8013196:	2900      	cmp	r1, #0
 8013198:	bf08      	it	eq
 801319a:	4613      	moveq	r3, r2
 801319c:	4618      	mov	r0, r3
 801319e:	b020      	add	sp, #128	@ 0x80
 80131a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80131a8:	4618      	mov	r0, r3
 80131aa:	b020      	add	sp, #128	@ 0x80
 80131ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b0:	230b      	movs	r3, #11
 80131b2:	e7f3      	b.n	801319c <rcl_take+0x84>
 80131b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80131b8:	4618      	mov	r0, r3
 80131ba:	4770      	bx	lr
 80131bc:	ad12      	add	r5, sp, #72	@ 0x48
 80131be:	e7bf      	b.n	8013140 <rcl_take+0x28>
 80131c0:	f7ff f8d0 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 80131c4:	4603      	mov	r3, r0
 80131c6:	e7e9      	b.n	801319c <rcl_take+0x84>

080131c8 <rcl_subscription_get_rmw_handle>:
 80131c8:	b118      	cbz	r0, 80131d2 <rcl_subscription_get_rmw_handle+0xa>
 80131ca:	6800      	ldr	r0, [r0, #0]
 80131cc:	b108      	cbz	r0, 80131d2 <rcl_subscription_get_rmw_handle+0xa>
 80131ce:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80131d2:	4770      	bx	lr

080131d4 <rcl_subscription_is_valid>:
 80131d4:	b130      	cbz	r0, 80131e4 <rcl_subscription_is_valid+0x10>
 80131d6:	6800      	ldr	r0, [r0, #0]
 80131d8:	b120      	cbz	r0, 80131e4 <rcl_subscription_is_valid+0x10>
 80131da:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80131de:	3800      	subs	r0, #0
 80131e0:	bf18      	it	ne
 80131e2:	2001      	movne	r0, #1
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop

080131e8 <rcl_get_system_time>:
 80131e8:	4608      	mov	r0, r1
 80131ea:	f7f8 bf45 	b.w	800c078 <rcutils_system_time_now>
 80131ee:	bf00      	nop

080131f0 <rcl_get_steady_time>:
 80131f0:	4608      	mov	r0, r1
 80131f2:	f7f8 bf6b 	b.w	800c0cc <rcutils_steady_time_now>
 80131f6:	bf00      	nop

080131f8 <rcl_get_ros_time>:
 80131f8:	7a03      	ldrb	r3, [r0, #8]
 80131fa:	b510      	push	{r4, lr}
 80131fc:	460c      	mov	r4, r1
 80131fe:	b143      	cbz	r3, 8013212 <rcl_get_ros_time+0x1a>
 8013200:	2105      	movs	r1, #5
 8013202:	f001 ff81 	bl	8015108 <__atomic_load_8>
 8013206:	4602      	mov	r2, r0
 8013208:	460b      	mov	r3, r1
 801320a:	e9c4 2300 	strd	r2, r3, [r4]
 801320e:	2000      	movs	r0, #0
 8013210:	bd10      	pop	{r4, pc}
 8013212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013216:	4608      	mov	r0, r1
 8013218:	f7f8 bf2e 	b.w	800c078 <rcutils_system_time_now>

0801321c <rcl_clock_valid>:
 801321c:	b138      	cbz	r0, 801322e <rcl_clock_valid+0x12>
 801321e:	7803      	ldrb	r3, [r0, #0]
 8013220:	b123      	cbz	r3, 801322c <rcl_clock_valid+0x10>
 8013222:	68c0      	ldr	r0, [r0, #12]
 8013224:	3800      	subs	r0, #0
 8013226:	bf18      	it	ne
 8013228:	2001      	movne	r0, #1
 801322a:	4770      	bx	lr
 801322c:	4618      	mov	r0, r3
 801322e:	4770      	bx	lr

08013230 <rcl_clock_init>:
 8013230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013232:	4605      	mov	r5, r0
 8013234:	4610      	mov	r0, r2
 8013236:	4614      	mov	r4, r2
 8013238:	460e      	mov	r6, r1
 801323a:	f7f8 fed5 	bl	800bfe8 <rcutils_allocator_is_valid>
 801323e:	b128      	cbz	r0, 801324c <rcl_clock_init+0x1c>
 8013240:	2d03      	cmp	r5, #3
 8013242:	d803      	bhi.n	801324c <rcl_clock_init+0x1c>
 8013244:	e8df f005 	tbb	[pc, r5]
 8013248:	044c291a 	.word	0x044c291a
 801324c:	200b      	movs	r0, #11
 801324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013250:	2e00      	cmp	r6, #0
 8013252:	d0fb      	beq.n	801324c <rcl_clock_init+0x1c>
 8013254:	2c00      	cmp	r4, #0
 8013256:	d0f9      	beq.n	801324c <rcl_clock_init+0x1c>
 8013258:	2300      	movs	r3, #0
 801325a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801325e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8013304 <rcl_clock_init+0xd4>
 8013262:	6133      	str	r3, [r6, #16]
 8013264:	f106 0514 	add.w	r5, r6, #20
 8013268:	2703      	movs	r7, #3
 801326a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801326c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801326e:	6823      	ldr	r3, [r4, #0]
 8013270:	602b      	str	r3, [r5, #0]
 8013272:	f8c6 c00c 	str.w	ip, [r6, #12]
 8013276:	7037      	strb	r7, [r6, #0]
 8013278:	2000      	movs	r0, #0
 801327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801327c:	2e00      	cmp	r6, #0
 801327e:	d0e5      	beq.n	801324c <rcl_clock_init+0x1c>
 8013280:	2300      	movs	r3, #0
 8013282:	7033      	strb	r3, [r6, #0]
 8013284:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013288:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801328c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801328e:	f106 0514 	add.w	r5, r6, #20
 8013292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013294:	6823      	ldr	r3, [r4, #0]
 8013296:	602b      	str	r3, [r5, #0]
 8013298:	e7ee      	b.n	8013278 <rcl_clock_init+0x48>
 801329a:	2e00      	cmp	r6, #0
 801329c:	d0d6      	beq.n	801324c <rcl_clock_init+0x1c>
 801329e:	2c00      	cmp	r4, #0
 80132a0:	d0d4      	beq.n	801324c <rcl_clock_init+0x1c>
 80132a2:	2700      	movs	r7, #0
 80132a4:	7037      	strb	r7, [r6, #0]
 80132a6:	46a4      	mov	ip, r4
 80132a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132ac:	f106 0514 	add.w	r5, r6, #20
 80132b0:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80132b4:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80132b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132ba:	f8dc 3000 	ldr.w	r3, [ip]
 80132be:	602b      	str	r3, [r5, #0]
 80132c0:	6921      	ldr	r1, [r4, #16]
 80132c2:	6823      	ldr	r3, [r4, #0]
 80132c4:	2010      	movs	r0, #16
 80132c6:	4798      	blx	r3
 80132c8:	6130      	str	r0, [r6, #16]
 80132ca:	b1b8      	cbz	r0, 80132fc <rcl_clock_init+0xcc>
 80132cc:	2200      	movs	r2, #0
 80132ce:	2300      	movs	r3, #0
 80132d0:	e9c0 2300 	strd	r2, r3, [r0]
 80132d4:	4a0a      	ldr	r2, [pc, #40]	@ (8013300 <rcl_clock_init+0xd0>)
 80132d6:	7207      	strb	r7, [r0, #8]
 80132d8:	2301      	movs	r3, #1
 80132da:	60f2      	str	r2, [r6, #12]
 80132dc:	7033      	strb	r3, [r6, #0]
 80132de:	e7cb      	b.n	8013278 <rcl_clock_init+0x48>
 80132e0:	2e00      	cmp	r6, #0
 80132e2:	d0b3      	beq.n	801324c <rcl_clock_init+0x1c>
 80132e4:	2c00      	cmp	r4, #0
 80132e6:	d0b1      	beq.n	801324c <rcl_clock_init+0x1c>
 80132e8:	2300      	movs	r3, #0
 80132ea:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80132ee:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8013308 <rcl_clock_init+0xd8>
 80132f2:	6133      	str	r3, [r6, #16]
 80132f4:	f106 0514 	add.w	r5, r6, #20
 80132f8:	2702      	movs	r7, #2
 80132fa:	e7b6      	b.n	801326a <rcl_clock_init+0x3a>
 80132fc:	200a      	movs	r0, #10
 80132fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013300:	080131f9 	.word	0x080131f9
 8013304:	080131f1 	.word	0x080131f1
 8013308:	080131e9 	.word	0x080131e9

0801330c <rcl_clock_get_now>:
 801330c:	b140      	cbz	r0, 8013320 <rcl_clock_get_now+0x14>
 801330e:	b139      	cbz	r1, 8013320 <rcl_clock_get_now+0x14>
 8013310:	7803      	ldrb	r3, [r0, #0]
 8013312:	b11b      	cbz	r3, 801331c <rcl_clock_get_now+0x10>
 8013314:	68c3      	ldr	r3, [r0, #12]
 8013316:	b10b      	cbz	r3, 801331c <rcl_clock_get_now+0x10>
 8013318:	6900      	ldr	r0, [r0, #16]
 801331a:	4718      	bx	r3
 801331c:	2001      	movs	r0, #1
 801331e:	4770      	bx	lr
 8013320:	200b      	movs	r0, #11
 8013322:	4770      	bx	lr

08013324 <rcl_is_enabled_ros_time_override>:
 8013324:	b158      	cbz	r0, 801333e <rcl_is_enabled_ros_time_override+0x1a>
 8013326:	b151      	cbz	r1, 801333e <rcl_is_enabled_ros_time_override+0x1a>
 8013328:	7803      	ldrb	r3, [r0, #0]
 801332a:	2b01      	cmp	r3, #1
 801332c:	d105      	bne.n	801333a <rcl_is_enabled_ros_time_override+0x16>
 801332e:	6902      	ldr	r2, [r0, #16]
 8013330:	b11a      	cbz	r2, 801333a <rcl_is_enabled_ros_time_override+0x16>
 8013332:	7a13      	ldrb	r3, [r2, #8]
 8013334:	700b      	strb	r3, [r1, #0]
 8013336:	2000      	movs	r0, #0
 8013338:	4770      	bx	lr
 801333a:	2001      	movs	r0, #1
 801333c:	4770      	bx	lr
 801333e:	200b      	movs	r0, #11
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop

08013344 <rcl_clock_add_jump_callback>:
 8013344:	b082      	sub	sp, #8
 8013346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334a:	a906      	add	r1, sp, #24
 801334c:	e881 000c 	stmia.w	r1, {r2, r3}
 8013350:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8013354:	b320      	cbz	r0, 80133a0 <rcl_clock_add_jump_callback+0x5c>
 8013356:	4605      	mov	r5, r0
 8013358:	3014      	adds	r0, #20
 801335a:	f7f8 fe45 	bl	800bfe8 <rcutils_allocator_is_valid>
 801335e:	b1f8      	cbz	r0, 80133a0 <rcl_clock_add_jump_callback+0x5c>
 8013360:	b1f7      	cbz	r7, 80133a0 <rcl_clock_add_jump_callback+0x5c>
 8013362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013364:	2b00      	cmp	r3, #0
 8013366:	db1b      	blt.n	80133a0 <rcl_clock_add_jump_callback+0x5c>
 8013368:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801336c:	2a01      	cmp	r2, #1
 801336e:	f173 0300 	sbcs.w	r3, r3, #0
 8013372:	da15      	bge.n	80133a0 <rcl_clock_add_jump_callback+0x5c>
 8013374:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8013378:	2c00      	cmp	r4, #0
 801337a:	d042      	beq.n	8013402 <rcl_clock_add_jump_callback+0xbe>
 801337c:	4603      	mov	r3, r0
 801337e:	2200      	movs	r2, #0
 8013380:	e003      	b.n	801338a <rcl_clock_add_jump_callback+0x46>
 8013382:	4294      	cmp	r4, r2
 8013384:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8013388:	d011      	beq.n	80133ae <rcl_clock_add_jump_callback+0x6a>
 801338a:	6819      	ldr	r1, [r3, #0]
 801338c:	42b9      	cmp	r1, r7
 801338e:	f102 0201 	add.w	r2, r2, #1
 8013392:	d1f6      	bne.n	8013382 <rcl_clock_add_jump_callback+0x3e>
 8013394:	6a19      	ldr	r1, [r3, #32]
 8013396:	42b1      	cmp	r1, r6
 8013398:	d1f3      	bne.n	8013382 <rcl_clock_add_jump_callback+0x3e>
 801339a:	f04f 0e01 	mov.w	lr, #1
 801339e:	e001      	b.n	80133a4 <rcl_clock_add_jump_callback+0x60>
 80133a0:	f04f 0e0b 	mov.w	lr, #11
 80133a4:	4670      	mov	r0, lr
 80133a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133aa:	b002      	add	sp, #8
 80133ac:	4770      	bx	lr
 80133ae:	3401      	adds	r4, #1
 80133b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80133b4:	00e1      	lsls	r1, r4, #3
 80133b6:	69eb      	ldr	r3, [r5, #28]
 80133b8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80133ba:	4798      	blx	r3
 80133bc:	b1f0      	cbz	r0, 80133fc <rcl_clock_add_jump_callback+0xb8>
 80133be:	68ab      	ldr	r3, [r5, #8]
 80133c0:	6068      	str	r0, [r5, #4]
 80133c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80133c6:	f10d 0c18 	add.w	ip, sp, #24
 80133ca:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 80133ce:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 80133d2:	f103 0801 	add.w	r8, r3, #1
 80133d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133da:	f104 0708 	add.w	r7, r4, #8
 80133de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80133e0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80133e4:	f04f 0e00 	mov.w	lr, #0
 80133e8:	e887 0003 	stmia.w	r7, {r0, r1}
 80133ec:	6226      	str	r6, [r4, #32]
 80133ee:	4670      	mov	r0, lr
 80133f0:	f8c5 8008 	str.w	r8, [r5, #8]
 80133f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133f8:	b002      	add	sp, #8
 80133fa:	4770      	bx	lr
 80133fc:	f04f 0e0a 	mov.w	lr, #10
 8013400:	e7d0      	b.n	80133a4 <rcl_clock_add_jump_callback+0x60>
 8013402:	2128      	movs	r1, #40	@ 0x28
 8013404:	e7d7      	b.n	80133b6 <rcl_clock_add_jump_callback+0x72>
 8013406:	bf00      	nop

08013408 <rcl_clock_remove_jump_callback>:
 8013408:	2800      	cmp	r0, #0
 801340a:	d05a      	beq.n	80134c2 <rcl_clock_remove_jump_callback+0xba>
 801340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013410:	4605      	mov	r5, r0
 8013412:	3014      	adds	r0, #20
 8013414:	460f      	mov	r7, r1
 8013416:	4692      	mov	sl, r2
 8013418:	f7f8 fde6 	bl	800bfe8 <rcutils_allocator_is_valid>
 801341c:	2800      	cmp	r0, #0
 801341e:	d03f      	beq.n	80134a0 <rcl_clock_remove_jump_callback+0x98>
 8013420:	2f00      	cmp	r7, #0
 8013422:	d03d      	beq.n	80134a0 <rcl_clock_remove_jump_callback+0x98>
 8013424:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8013428:	f1b8 0f00 	cmp.w	r8, #0
 801342c:	d00c      	beq.n	8013448 <rcl_clock_remove_jump_callback+0x40>
 801342e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013432:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8013436:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801343a:	464c      	mov	r4, r9
 801343c:	6823      	ldr	r3, [r4, #0]
 801343e:	42bb      	cmp	r3, r7
 8013440:	d005      	beq.n	801344e <rcl_clock_remove_jump_callback+0x46>
 8013442:	3428      	adds	r4, #40	@ 0x28
 8013444:	42b4      	cmp	r4, r6
 8013446:	d1f9      	bne.n	801343c <rcl_clock_remove_jump_callback+0x34>
 8013448:	2001      	movs	r0, #1
 801344a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801344e:	6a23      	ldr	r3, [r4, #32]
 8013450:	3428      	adds	r4, #40	@ 0x28
 8013452:	42b4      	cmp	r4, r6
 8013454:	d02c      	beq.n	80134b0 <rcl_clock_remove_jump_callback+0xa8>
 8013456:	4553      	cmp	r3, sl
 8013458:	d1f0      	bne.n	801343c <rcl_clock_remove_jump_callback+0x34>
 801345a:	46a6      	mov	lr, r4
 801345c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013460:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8013464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013468:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801346c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013470:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013474:	3428      	adds	r4, #40	@ 0x28
 8013476:	42a6      	cmp	r6, r4
 8013478:	e88c 0003 	stmia.w	ip, {r0, r1}
 801347c:	d1ed      	bne.n	801345a <rcl_clock_remove_jump_callback+0x52>
 801347e:	f108 34ff 	add.w	r4, r8, #4294967295
 8013482:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8013484:	60ac      	str	r4, [r5, #8]
 8013486:	b174      	cbz	r4, 80134a6 <rcl_clock_remove_jump_callback+0x9e>
 8013488:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801348c:	00e1      	lsls	r1, r4, #3
 801348e:	69eb      	ldr	r3, [r5, #28]
 8013490:	4648      	mov	r0, r9
 8013492:	4798      	blx	r3
 8013494:	4604      	mov	r4, r0
 8013496:	b1b0      	cbz	r0, 80134c6 <rcl_clock_remove_jump_callback+0xbe>
 8013498:	606c      	str	r4, [r5, #4]
 801349a:	2000      	movs	r0, #0
 801349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a0:	200b      	movs	r0, #11
 80134a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a6:	69ab      	ldr	r3, [r5, #24]
 80134a8:	4611      	mov	r1, r2
 80134aa:	4648      	mov	r0, r9
 80134ac:	4798      	blx	r3
 80134ae:	e7f3      	b.n	8013498 <rcl_clock_remove_jump_callback+0x90>
 80134b0:	4553      	cmp	r3, sl
 80134b2:	d1c9      	bne.n	8013448 <rcl_clock_remove_jump_callback+0x40>
 80134b4:	f108 34ff 	add.w	r4, r8, #4294967295
 80134b8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80134ba:	60ac      	str	r4, [r5, #8]
 80134bc:	2c00      	cmp	r4, #0
 80134be:	d1e3      	bne.n	8013488 <rcl_clock_remove_jump_callback+0x80>
 80134c0:	e7f1      	b.n	80134a6 <rcl_clock_remove_jump_callback+0x9e>
 80134c2:	200b      	movs	r0, #11
 80134c4:	4770      	bx	lr
 80134c6:	200a      	movs	r0, #10
 80134c8:	e7eb      	b.n	80134a2 <rcl_clock_remove_jump_callback+0x9a>
 80134ca:	bf00      	nop

080134cc <_rcl_timer_time_jump>:
 80134cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	4681      	mov	r9, r0
 80134d2:	b087      	sub	sp, #28
 80134d4:	4614      	mov	r4, r2
 80134d6:	b131      	cbz	r1, 80134e6 <_rcl_timer_time_jump+0x1a>
 80134d8:	7803      	ldrb	r3, [r0, #0]
 80134da:	3b02      	subs	r3, #2
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d93e      	bls.n	801355e <_rcl_timer_time_jump+0x92>
 80134e0:	b007      	add	sp, #28
 80134e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e6:	6810      	ldr	r0, [r2, #0]
 80134e8:	a904      	add	r1, sp, #16
 80134ea:	f7ff ff0f 	bl	801330c <rcl_clock_get_now>
 80134ee:	2800      	cmp	r0, #0
 80134f0:	d1f6      	bne.n	80134e0 <_rcl_timer_time_jump+0x14>
 80134f2:	f104 0a20 	add.w	sl, r4, #32
 80134f6:	2105      	movs	r1, #5
 80134f8:	4650      	mov	r0, sl
 80134fa:	f001 fe05 	bl	8015108 <__atomic_load_8>
 80134fe:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 8013502:	4680      	mov	r8, r0
 8013504:	460e      	mov	r6, r1
 8013506:	4658      	mov	r0, fp
 8013508:	2105      	movs	r1, #5
 801350a:	f001 fdfd 	bl	8015108 <__atomic_load_8>
 801350e:	4607      	mov	r7, r0
 8013510:	460d      	mov	r5, r1
 8013512:	f104 0018 	add.w	r0, r4, #24
 8013516:	2105      	movs	r1, #5
 8013518:	f001 fdf6 	bl	8015108 <__atomic_load_8>
 801351c:	f899 3000 	ldrb.w	r3, [r9]
 8013520:	9003      	str	r0, [sp, #12]
 8013522:	3b02      	subs	r3, #2
 8013524:	2b01      	cmp	r3, #1
 8013526:	4689      	mov	r9, r1
 8013528:	d935      	bls.n	8013596 <_rcl_timer_time_jump+0xca>
 801352a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801352e:	42ba      	cmp	r2, r7
 8013530:	eb73 0505 	sbcs.w	r5, r3, r5
 8013534:	da57      	bge.n	80135e6 <_rcl_timer_time_jump+0x11a>
 8013536:	4542      	cmp	r2, r8
 8013538:	eb73 0606 	sbcs.w	r6, r3, r6
 801353c:	dad0      	bge.n	80134e0 <_rcl_timer_time_jump+0x14>
 801353e:	1882      	adds	r2, r0, r2
 8013540:	f04f 0405 	mov.w	r4, #5
 8013544:	eb43 0309 	adc.w	r3, r3, r9
 8013548:	4658      	mov	r0, fp
 801354a:	9400      	str	r4, [sp, #0]
 801354c:	f001 fe12 	bl	8015174 <__atomic_store_8>
 8013550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013554:	9400      	str	r4, [sp, #0]
 8013556:	4650      	mov	r0, sl
 8013558:	f001 fe0c 	bl	8015174 <__atomic_store_8>
 801355c:	e7c0      	b.n	80134e0 <_rcl_timer_time_jump+0x14>
 801355e:	6810      	ldr	r0, [r2, #0]
 8013560:	a904      	add	r1, sp, #16
 8013562:	f7ff fed3 	bl	801330c <rcl_clock_get_now>
 8013566:	2800      	cmp	r0, #0
 8013568:	d1ba      	bne.n	80134e0 <_rcl_timer_time_jump+0x14>
 801356a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801356e:	4313      	orrs	r3, r2
 8013570:	d0b6      	beq.n	80134e0 <_rcl_timer_time_jump+0x14>
 8013572:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013576:	2105      	movs	r1, #5
 8013578:	f001 fdc6 	bl	8015108 <__atomic_load_8>
 801357c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013580:	1a82      	subs	r2, r0, r2
 8013582:	f04f 0005 	mov.w	r0, #5
 8013586:	9000      	str	r0, [sp, #0]
 8013588:	eb61 0303 	sbc.w	r3, r1, r3
 801358c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8013590:	f001 fdf0 	bl	8015174 <__atomic_store_8>
 8013594:	e7a4      	b.n	80134e0 <_rcl_timer_time_jump+0x14>
 8013596:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801359a:	4313      	orrs	r3, r2
 801359c:	d0a0      	beq.n	80134e0 <_rcl_timer_time_jump+0x14>
 801359e:	2605      	movs	r6, #5
 80135a0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80135a4:	2300      	movs	r3, #0
 80135a6:	9600      	str	r6, [sp, #0]
 80135a8:	2200      	movs	r2, #0
 80135aa:	f001 fe19 	bl	80151e0 <__atomic_exchange_8>
 80135ae:	ea51 0300 	orrs.w	r3, r1, r0
 80135b2:	4604      	mov	r4, r0
 80135b4:	460d      	mov	r5, r1
 80135b6:	d093      	beq.n	80134e0 <_rcl_timer_time_jump+0x14>
 80135b8:	9a04      	ldr	r2, [sp, #16]
 80135ba:	9b05      	ldr	r3, [sp, #20]
 80135bc:	9600      	str	r6, [sp, #0]
 80135be:	1b12      	subs	r2, r2, r4
 80135c0:	eb63 0301 	sbc.w	r3, r3, r1
 80135c4:	9903      	ldr	r1, [sp, #12]
 80135c6:	1852      	adds	r2, r2, r1
 80135c8:	eb43 0309 	adc.w	r3, r3, r9
 80135cc:	4658      	mov	r0, fp
 80135ce:	f001 fdd1 	bl	8015174 <__atomic_store_8>
 80135d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135d6:	1b12      	subs	r2, r2, r4
 80135d8:	9600      	str	r6, [sp, #0]
 80135da:	eb63 0305 	sbc.w	r3, r3, r5
 80135de:	4650      	mov	r0, sl
 80135e0:	f001 fdc8 	bl	8015174 <__atomic_store_8>
 80135e4:	e77c      	b.n	80134e0 <_rcl_timer_time_jump+0x14>
 80135e6:	f104 0008 	add.w	r0, r4, #8
 80135ea:	f005 fb53 	bl	8018c94 <rcl_trigger_guard_condition>
 80135ee:	e777      	b.n	80134e0 <_rcl_timer_time_jump+0x14>

080135f0 <rcl_get_zero_initialized_timer>:
 80135f0:	4b01      	ldr	r3, [pc, #4]	@ (80135f8 <rcl_get_zero_initialized_timer+0x8>)
 80135f2:	6818      	ldr	r0, [r3, #0]
 80135f4:	4770      	bx	lr
 80135f6:	bf00      	nop
 80135f8:	0801ba70 	.word	0x0801ba70
 80135fc:	00000000 	.word	0x00000000

08013600 <rcl_timer_init2>:
 8013600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013604:	b0ae      	sub	sp, #184	@ 0xb8
 8013606:	4604      	mov	r4, r0
 8013608:	a839      	add	r0, sp, #228	@ 0xe4
 801360a:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 801360e:	460d      	mov	r5, r1
 8013610:	4691      	mov	r9, r2
 8013612:	f7f8 fce9 	bl	800bfe8 <rcutils_allocator_is_valid>
 8013616:	2800      	cmp	r0, #0
 8013618:	f000 8097 	beq.w	801374a <rcl_timer_init2+0x14a>
 801361c:	2c00      	cmp	r4, #0
 801361e:	f000 8094 	beq.w	801374a <rcl_timer_init2+0x14a>
 8013622:	2d00      	cmp	r5, #0
 8013624:	f000 8091 	beq.w	801374a <rcl_timer_init2+0x14a>
 8013628:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801362a:	2b00      	cmp	r3, #0
 801362c:	f2c0 808d 	blt.w	801374a <rcl_timer_init2+0x14a>
 8013630:	6823      	ldr	r3, [r4, #0]
 8013632:	b123      	cbz	r3, 801363e <rcl_timer_init2+0x3e>
 8013634:	2664      	movs	r6, #100	@ 0x64
 8013636:	4630      	mov	r0, r6
 8013638:	b02e      	add	sp, #184	@ 0xb8
 801363a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801363e:	a908      	add	r1, sp, #32
 8013640:	4628      	mov	r0, r5
 8013642:	f7ff fe63 	bl	801330c <rcl_clock_get_now>
 8013646:	4606      	mov	r6, r0
 8013648:	2800      	cmp	r0, #0
 801364a:	d1f4      	bne.n	8013636 <rcl_timer_init2+0x36>
 801364c:	ae06      	add	r6, sp, #24
 801364e:	4630      	mov	r0, r6
 8013650:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 8013654:	f005 fa40 	bl	8018ad8 <rcl_get_zero_initialized_guard_condition>
 8013658:	e896 0003 	ldmia.w	r6, {r0, r1}
 801365c:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8013660:	ae0b      	add	r6, sp, #44	@ 0x2c
 8013662:	e88a 0003 	stmia.w	sl, {r0, r1}
 8013666:	4630      	mov	r0, r6
 8013668:	f005 fb0e 	bl	8018c88 <rcl_guard_condition_get_default_options>
 801366c:	ab0d      	add	r3, sp, #52	@ 0x34
 801366e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013672:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013676:	4649      	mov	r1, r9
 8013678:	e896 000c 	ldmia.w	r6, {r2, r3}
 801367c:	4650      	mov	r0, sl
 801367e:	f005 fa35 	bl	8018aec <rcl_guard_condition_init>
 8013682:	4606      	mov	r6, r0
 8013684:	2800      	cmp	r0, #0
 8013686:	d1d6      	bne.n	8013636 <rcl_timer_init2+0x36>
 8013688:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801368a:	931a      	str	r3, [sp, #104]	@ 0x68
 801368c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8013690:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8013694:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013698:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 801369a:	902a      	str	r0, [sp, #168]	@ 0xa8
 801369c:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 80136a0:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8013778 <rcl_timer_init2+0x178>
 80136a4:	19d0      	adds	r0, r2, r7
 80136a6:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 80136a8:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 80136ac:	eb43 0107 	adc.w	r1, r3, r7
 80136b0:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80136b4:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80136b8:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80136bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80136c0:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 80136c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80136c8:	f8dc 3000 	ldr.w	r3, [ip]
 80136cc:	f8ce 3000 	str.w	r3, [lr]
 80136d0:	f088 0801 	eor.w	r8, r8, #1
 80136d4:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 80136d8:	4619      	mov	r1, r3
 80136da:	2060      	movs	r0, #96	@ 0x60
 80136dc:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80136de:	4798      	blx	r3
 80136e0:	4680      	mov	r8, r0
 80136e2:	6020      	str	r0, [r4, #0]
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d035      	beq.n	8013754 <rcl_timer_init2+0x154>
 80136e8:	a916      	add	r1, sp, #88	@ 0x58
 80136ea:	2260      	movs	r2, #96	@ 0x60
 80136ec:	f006 fc81 	bl	8019ff2 <memcpy>
 80136f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d19e      	bne.n	8013636 <rcl_timer_init2+0x36>
 80136f8:	2001      	movs	r0, #1
 80136fa:	2100      	movs	r1, #0
 80136fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8013700:	f04f 30ff 	mov.w	r0, #4294967295
 8013704:	f04f 31ff 	mov.w	r1, #4294967295
 8013708:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801370c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013710:	4b1b      	ldr	r3, [pc, #108]	@ (8013780 <rcl_timer_init2+0x180>)
 8013712:	9304      	str	r3, [sp, #16]
 8013714:	f8cd 8014 	str.w	r8, [sp, #20]
 8013718:	ab12      	add	r3, sp, #72	@ 0x48
 801371a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801371c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013720:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013724:	4628      	mov	r0, r5
 8013726:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801372a:	f7ff fe0b 	bl	8013344 <rcl_clock_add_jump_callback>
 801372e:	4605      	mov	r5, r0
 8013730:	2800      	cmp	r0, #0
 8013732:	d080      	beq.n	8013636 <rcl_timer_init2+0x36>
 8013734:	4650      	mov	r0, sl
 8013736:	f005 fa85 	bl	8018c44 <rcl_guard_condition_fini>
 801373a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 801373c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801373e:	6820      	ldr	r0, [r4, #0]
 8013740:	4798      	blx	r3
 8013742:	2300      	movs	r3, #0
 8013744:	6023      	str	r3, [r4, #0]
 8013746:	462e      	mov	r6, r5
 8013748:	e775      	b.n	8013636 <rcl_timer_init2+0x36>
 801374a:	260b      	movs	r6, #11
 801374c:	4630      	mov	r0, r6
 801374e:	b02e      	add	sp, #184	@ 0xb8
 8013750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013754:	4650      	mov	r0, sl
 8013756:	f005 fa75 	bl	8018c44 <rcl_guard_condition_fini>
 801375a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	2b01      	cmp	r3, #1
 8013760:	d001      	beq.n	8013766 <rcl_timer_init2+0x166>
 8013762:	260a      	movs	r6, #10
 8013764:	e767      	b.n	8013636 <rcl_timer_init2+0x36>
 8013766:	4906      	ldr	r1, [pc, #24]	@ (8013780 <rcl_timer_init2+0x180>)
 8013768:	4622      	mov	r2, r4
 801376a:	4628      	mov	r0, r5
 801376c:	f7ff fe4c 	bl	8013408 <rcl_clock_remove_jump_callback>
 8013770:	e7f7      	b.n	8013762 <rcl_timer_init2+0x162>
 8013772:	bf00      	nop
 8013774:	f3af 8000 	nop.w
	...
 8013780:	080134cd 	.word	0x080134cd

08013784 <rcl_timer_clock>:
 8013784:	b130      	cbz	r0, 8013794 <rcl_timer_clock+0x10>
 8013786:	b129      	cbz	r1, 8013794 <rcl_timer_clock+0x10>
 8013788:	6803      	ldr	r3, [r0, #0]
 801378a:	b12b      	cbz	r3, 8013798 <rcl_timer_clock+0x14>
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	600b      	str	r3, [r1, #0]
 8013790:	2000      	movs	r0, #0
 8013792:	4770      	bx	lr
 8013794:	200b      	movs	r0, #11
 8013796:	4770      	bx	lr
 8013798:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop

080137a0 <rcl_timer_call>:
 80137a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a4:	b087      	sub	sp, #28
 80137a6:	2800      	cmp	r0, #0
 80137a8:	d067      	beq.n	801387a <rcl_timer_call+0xda>
 80137aa:	6803      	ldr	r3, [r0, #0]
 80137ac:	4604      	mov	r4, r0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d068      	beq.n	8013884 <rcl_timer_call+0xe4>
 80137b2:	f3bf 8f5b 	dmb	ish
 80137b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80137ba:	f3bf 8f5b 	dmb	ish
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d150      	bne.n	8013864 <rcl_timer_call+0xc4>
 80137c2:	6803      	ldr	r3, [r0, #0]
 80137c4:	a904      	add	r1, sp, #16
 80137c6:	6818      	ldr	r0, [r3, #0]
 80137c8:	f7ff fda0 	bl	801330c <rcl_clock_get_now>
 80137cc:	4605      	mov	r5, r0
 80137ce:	2800      	cmp	r0, #0
 80137d0:	d144      	bne.n	801385c <rcl_timer_call+0xbc>
 80137d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	db4a      	blt.n	8013870 <rcl_timer_call+0xd0>
 80137da:	6820      	ldr	r0, [r4, #0]
 80137dc:	f04f 0a05 	mov.w	sl, #5
 80137e0:	f8cd a000 	str.w	sl, [sp]
 80137e4:	3020      	adds	r0, #32
 80137e6:	f001 fcfb 	bl	80151e0 <__atomic_exchange_8>
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	f3bf 8f5b 	dmb	ish
 80137f0:	4680      	mov	r8, r0
 80137f2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80137f6:	f3bf 8f5b 	dmb	ish
 80137fa:	6820      	ldr	r0, [r4, #0]
 80137fc:	4689      	mov	r9, r1
 80137fe:	3028      	adds	r0, #40	@ 0x28
 8013800:	4651      	mov	r1, sl
 8013802:	f001 fc81 	bl	8015108 <__atomic_load_8>
 8013806:	4606      	mov	r6, r0
 8013808:	6820      	ldr	r0, [r4, #0]
 801380a:	460f      	mov	r7, r1
 801380c:	3018      	adds	r0, #24
 801380e:	4651      	mov	r1, sl
 8013810:	f001 fc7a 	bl	8015108 <__atomic_load_8>
 8013814:	1836      	adds	r6, r6, r0
 8013816:	eb41 0707 	adc.w	r7, r1, r7
 801381a:	4602      	mov	r2, r0
 801381c:	460b      	mov	r3, r1
 801381e:	4682      	mov	sl, r0
 8013820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013824:	42b0      	cmp	r0, r6
 8013826:	eb71 0c07 	sbcs.w	ip, r1, r7
 801382a:	db04      	blt.n	8013836 <rcl_timer_call+0x96>
 801382c:	ea53 0c02 	orrs.w	ip, r3, r2
 8013830:	d12b      	bne.n	801388a <rcl_timer_call+0xea>
 8013832:	4606      	mov	r6, r0
 8013834:	460f      	mov	r7, r1
 8013836:	6820      	ldr	r0, [r4, #0]
 8013838:	2105      	movs	r1, #5
 801383a:	4632      	mov	r2, r6
 801383c:	463b      	mov	r3, r7
 801383e:	3028      	adds	r0, #40	@ 0x28
 8013840:	9100      	str	r1, [sp, #0]
 8013842:	f001 fc97 	bl	8015174 <__atomic_store_8>
 8013846:	f1bb 0f00 	cmp.w	fp, #0
 801384a:	d007      	beq.n	801385c <rcl_timer_call+0xbc>
 801384c:	9a04      	ldr	r2, [sp, #16]
 801384e:	9b05      	ldr	r3, [sp, #20]
 8013850:	ebb2 0208 	subs.w	r2, r2, r8
 8013854:	4620      	mov	r0, r4
 8013856:	eb63 0309 	sbc.w	r3, r3, r9
 801385a:	47d8      	blx	fp
 801385c:	4628      	mov	r0, r5
 801385e:	b007      	add	sp, #28
 8013860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013864:	f240 3521 	movw	r5, #801	@ 0x321
 8013868:	4628      	mov	r0, r5
 801386a:	b007      	add	sp, #28
 801386c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013870:	2501      	movs	r5, #1
 8013872:	4628      	mov	r0, r5
 8013874:	b007      	add	sp, #28
 8013876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387a:	250b      	movs	r5, #11
 801387c:	4628      	mov	r0, r5
 801387e:	b007      	add	sp, #28
 8013880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013884:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013888:	e7e8      	b.n	801385c <rcl_timer_call+0xbc>
 801388a:	1b80      	subs	r0, r0, r6
 801388c:	eb61 0107 	sbc.w	r1, r1, r7
 8013890:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013894:	f7ed f832 	bl	80008fc <__aeabi_ldivmod>
 8013898:	9b02      	ldr	r3, [sp, #8]
 801389a:	3001      	adds	r0, #1
 801389c:	f141 0100 	adc.w	r1, r1, #0
 80138a0:	fb00 f303 	mul.w	r3, r0, r3
 80138a4:	fb01 330a 	mla	r3, r1, sl, r3
 80138a8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80138ac:	1830      	adds	r0, r6, r0
 80138ae:	4453      	add	r3, sl
 80138b0:	eb43 0707 	adc.w	r7, r3, r7
 80138b4:	4606      	mov	r6, r0
 80138b6:	e7be      	b.n	8013836 <rcl_timer_call+0x96>

080138b8 <rcl_timer_is_ready>:
 80138b8:	b398      	cbz	r0, 8013922 <rcl_timer_is_ready+0x6a>
 80138ba:	b530      	push	{r4, r5, lr}
 80138bc:	6803      	ldr	r3, [r0, #0]
 80138be:	b083      	sub	sp, #12
 80138c0:	4604      	mov	r4, r0
 80138c2:	b383      	cbz	r3, 8013926 <rcl_timer_is_ready+0x6e>
 80138c4:	460d      	mov	r5, r1
 80138c6:	b349      	cbz	r1, 801391c <rcl_timer_is_ready+0x64>
 80138c8:	f3bf 8f5b 	dmb	ish
 80138cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80138d0:	f3bf 8f5b 	dmb	ish
 80138d4:	b9fb      	cbnz	r3, 8013916 <rcl_timer_is_ready+0x5e>
 80138d6:	6803      	ldr	r3, [r0, #0]
 80138d8:	4669      	mov	r1, sp
 80138da:	6818      	ldr	r0, [r3, #0]
 80138dc:	f7ff fd16 	bl	801330c <rcl_clock_get_now>
 80138e0:	b128      	cbz	r0, 80138ee <rcl_timer_is_ready+0x36>
 80138e2:	f240 3321 	movw	r3, #801	@ 0x321
 80138e6:	4298      	cmp	r0, r3
 80138e8:	d015      	beq.n	8013916 <rcl_timer_is_ready+0x5e>
 80138ea:	b003      	add	sp, #12
 80138ec:	bd30      	pop	{r4, r5, pc}
 80138ee:	6820      	ldr	r0, [r4, #0]
 80138f0:	2105      	movs	r1, #5
 80138f2:	3028      	adds	r0, #40	@ 0x28
 80138f4:	f001 fc08 	bl	8015108 <__atomic_load_8>
 80138f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80138fc:	1ac0      	subs	r0, r0, r3
 80138fe:	eb61 0102 	sbc.w	r1, r1, r2
 8013902:	2801      	cmp	r0, #1
 8013904:	f171 0100 	sbcs.w	r1, r1, #0
 8013908:	bfb4      	ite	lt
 801390a:	2301      	movlt	r3, #1
 801390c:	2300      	movge	r3, #0
 801390e:	702b      	strb	r3, [r5, #0]
 8013910:	2000      	movs	r0, #0
 8013912:	b003      	add	sp, #12
 8013914:	bd30      	pop	{r4, r5, pc}
 8013916:	2300      	movs	r3, #0
 8013918:	702b      	strb	r3, [r5, #0]
 801391a:	e7f9      	b.n	8013910 <rcl_timer_is_ready+0x58>
 801391c:	200b      	movs	r0, #11
 801391e:	b003      	add	sp, #12
 8013920:	bd30      	pop	{r4, r5, pc}
 8013922:	200b      	movs	r0, #11
 8013924:	4770      	bx	lr
 8013926:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801392a:	e7de      	b.n	80138ea <rcl_timer_is_ready+0x32>

0801392c <rcl_timer_get_next_call_time>:
 801392c:	b1d8      	cbz	r0, 8013966 <rcl_timer_get_next_call_time+0x3a>
 801392e:	b538      	push	{r3, r4, r5, lr}
 8013930:	6803      	ldr	r3, [r0, #0]
 8013932:	b1d3      	cbz	r3, 801396a <rcl_timer_get_next_call_time+0x3e>
 8013934:	460c      	mov	r4, r1
 8013936:	b1a1      	cbz	r1, 8013962 <rcl_timer_get_next_call_time+0x36>
 8013938:	f3bf 8f5b 	dmb	ish
 801393c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013940:	f3bf 8f5b 	dmb	ish
 8013944:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8013948:	b943      	cbnz	r3, 801395c <rcl_timer_get_next_call_time+0x30>
 801394a:	6800      	ldr	r0, [r0, #0]
 801394c:	2105      	movs	r1, #5
 801394e:	3028      	adds	r0, #40	@ 0x28
 8013950:	f001 fbda 	bl	8015108 <__atomic_load_8>
 8013954:	e9c4 0100 	strd	r0, r1, [r4]
 8013958:	4628      	mov	r0, r5
 801395a:	bd38      	pop	{r3, r4, r5, pc}
 801395c:	f240 3021 	movw	r0, #801	@ 0x321
 8013960:	bd38      	pop	{r3, r4, r5, pc}
 8013962:	200b      	movs	r0, #11
 8013964:	bd38      	pop	{r3, r4, r5, pc}
 8013966:	200b      	movs	r0, #11
 8013968:	4770      	bx	lr
 801396a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801396e:	bd38      	pop	{r3, r4, r5, pc}

08013970 <rcl_timer_get_guard_condition>:
 8013970:	b130      	cbz	r0, 8013980 <rcl_timer_get_guard_condition+0x10>
 8013972:	6800      	ldr	r0, [r0, #0]
 8013974:	b120      	cbz	r0, 8013980 <rcl_timer_get_guard_condition+0x10>
 8013976:	68c3      	ldr	r3, [r0, #12]
 8013978:	b10b      	cbz	r3, 801397e <rcl_timer_get_guard_condition+0xe>
 801397a:	3008      	adds	r0, #8
 801397c:	4770      	bx	lr
 801397e:	4618      	mov	r0, r3
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop

08013984 <rcl_get_zero_initialized_wait_set>:
 8013984:	b510      	push	{r4, lr}
 8013986:	4c08      	ldr	r4, [pc, #32]	@ (80139a8 <rcl_get_zero_initialized_wait_set+0x24>)
 8013988:	4686      	mov	lr, r0
 801398a:	4684      	mov	ip, r0
 801398c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801398e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013994:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801399a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801399e:	6823      	ldr	r3, [r4, #0]
 80139a0:	f8cc 3000 	str.w	r3, [ip]
 80139a4:	4670      	mov	r0, lr
 80139a6:	bd10      	pop	{r4, pc}
 80139a8:	0801ba74 	.word	0x0801ba74

080139ac <rcl_wait_set_is_valid>:
 80139ac:	b118      	cbz	r0, 80139b6 <rcl_wait_set_is_valid+0xa>
 80139ae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80139b0:	3800      	subs	r0, #0
 80139b2:	bf18      	it	ne
 80139b4:	2001      	movne	r0, #1
 80139b6:	4770      	bx	lr

080139b8 <rcl_wait_set_fini>:
 80139b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139bc:	2800      	cmp	r0, #0
 80139be:	f000 80ab 	beq.w	8013b18 <rcl_wait_set_fini+0x160>
 80139c2:	4605      	mov	r5, r0
 80139c4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80139c6:	2800      	cmp	r0, #0
 80139c8:	f000 809c 	beq.w	8013b04 <rcl_wait_set_fini+0x14c>
 80139cc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80139ce:	f003 fa17 	bl	8016e00 <rmw_destroy_wait_set>
 80139d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139d4:	4680      	mov	r8, r0
 80139d6:	2800      	cmp	r0, #0
 80139d8:	f040 808e 	bne.w	8013af8 <rcl_wait_set_fini+0x140>
 80139dc:	2c00      	cmp	r4, #0
 80139de:	f000 80a0 	beq.w	8013b22 <rcl_wait_set_fini+0x16a>
 80139e2:	6828      	ldr	r0, [r5, #0]
 80139e4:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80139e6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80139ea:	2600      	movs	r6, #0
 80139ec:	606e      	str	r6, [r5, #4]
 80139ee:	6026      	str	r6, [r4, #0]
 80139f0:	b118      	cbz	r0, 80139fa <rcl_wait_set_fini+0x42>
 80139f2:	4649      	mov	r1, r9
 80139f4:	47b8      	blx	r7
 80139f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139f8:	602e      	str	r6, [r5, #0]
 80139fa:	68a0      	ldr	r0, [r4, #8]
 80139fc:	b128      	cbz	r0, 8013a0a <rcl_wait_set_fini+0x52>
 80139fe:	4649      	mov	r1, r9
 8013a00:	47b8      	blx	r7
 8013a02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a04:	2300      	movs	r3, #0
 8013a06:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013a0a:	68a8      	ldr	r0, [r5, #8]
 8013a0c:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013a0e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013a10:	f04f 0900 	mov.w	r9, #0
 8013a14:	f8c5 900c 	str.w	r9, [r5, #12]
 8013a18:	f8c4 900c 	str.w	r9, [r4, #12]
 8013a1c:	b130      	cbz	r0, 8013a2c <rcl_wait_set_fini+0x74>
 8013a1e:	4639      	mov	r1, r7
 8013a20:	47b0      	blx	r6
 8013a22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a24:	f8c5 9008 	str.w	r9, [r5, #8]
 8013a28:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013a2a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013a2c:	6960      	ldr	r0, [r4, #20]
 8013a2e:	f04f 0900 	mov.w	r9, #0
 8013a32:	f8c4 9010 	str.w	r9, [r4, #16]
 8013a36:	b130      	cbz	r0, 8013a46 <rcl_wait_set_fini+0x8e>
 8013a38:	4639      	mov	r1, r7
 8013a3a:	47b0      	blx	r6
 8013a3c:	f8c4 9014 	str.w	r9, [r4, #20]
 8013a40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a42:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013a44:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013a46:	6928      	ldr	r0, [r5, #16]
 8013a48:	f04f 0900 	mov.w	r9, #0
 8013a4c:	f8c5 9014 	str.w	r9, [r5, #20]
 8013a50:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 8013a54:	b130      	cbz	r0, 8013a64 <rcl_wait_set_fini+0xac>
 8013a56:	4639      	mov	r1, r7
 8013a58:	47b0      	blx	r6
 8013a5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a5c:	f8c5 9010 	str.w	r9, [r5, #16]
 8013a60:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013a62:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013a64:	69a8      	ldr	r0, [r5, #24]
 8013a66:	f04f 0900 	mov.w	r9, #0
 8013a6a:	f8c5 901c 	str.w	r9, [r5, #28]
 8013a6e:	f8c4 9018 	str.w	r9, [r4, #24]
 8013a72:	b120      	cbz	r0, 8013a7e <rcl_wait_set_fini+0xc6>
 8013a74:	4639      	mov	r1, r7
 8013a76:	47b0      	blx	r6
 8013a78:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a7a:	f8c5 9018 	str.w	r9, [r5, #24]
 8013a7e:	6a20      	ldr	r0, [r4, #32]
 8013a80:	b128      	cbz	r0, 8013a8e <rcl_wait_set_fini+0xd6>
 8013a82:	4639      	mov	r1, r7
 8013a84:	47b0      	blx	r6
 8013a86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a88:	2300      	movs	r3, #0
 8013a8a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013a8e:	6a28      	ldr	r0, [r5, #32]
 8013a90:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8013a92:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a96:	2600      	movs	r6, #0
 8013a98:	626e      	str	r6, [r5, #36]	@ 0x24
 8013a9a:	6266      	str	r6, [r4, #36]	@ 0x24
 8013a9c:	b118      	cbz	r0, 8013aa6 <rcl_wait_set_fini+0xee>
 8013a9e:	4649      	mov	r1, r9
 8013aa0:	47b8      	blx	r7
 8013aa2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013aa4:	622e      	str	r6, [r5, #32]
 8013aa6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013aa8:	b128      	cbz	r0, 8013ab6 <rcl_wait_set_fini+0xfe>
 8013aaa:	4649      	mov	r1, r9
 8013aac:	47b8      	blx	r7
 8013aae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013ab6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013ab8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8013aba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013abe:	2600      	movs	r6, #0
 8013ac0:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013ac2:	6326      	str	r6, [r4, #48]	@ 0x30
 8013ac4:	b118      	cbz	r0, 8013ace <rcl_wait_set_fini+0x116>
 8013ac6:	4649      	mov	r1, r9
 8013ac8:	47b8      	blx	r7
 8013aca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013acc:	62ae      	str	r6, [r5, #40]	@ 0x28
 8013ace:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013ad0:	b1e0      	cbz	r0, 8013b0c <rcl_wait_set_fini+0x154>
 8013ad2:	4649      	mov	r1, r9
 8013ad4:	47b8      	blx	r7
 8013ad6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013ad8:	2300      	movs	r3, #0
 8013ada:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8013ade:	4598      	cmp	r8, r3
 8013ae0:	bf18      	it	ne
 8013ae2:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8013ae6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8013ae8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8013aea:	4620      	mov	r0, r4
 8013aec:	4798      	blx	r3
 8013aee:	2300      	movs	r3, #0
 8013af0:	632b      	str	r3, [r5, #48]	@ 0x30
 8013af2:	4640      	mov	r0, r8
 8013af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013af8:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8013afc:	2c00      	cmp	r4, #0
 8013afe:	f47f af70 	bne.w	80139e2 <rcl_wait_set_fini+0x2a>
 8013b02:	e7f6      	b.n	8013af2 <rcl_wait_set_fini+0x13a>
 8013b04:	4680      	mov	r8, r0
 8013b06:	4640      	mov	r0, r8
 8013b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b0c:	f1b8 0f00 	cmp.w	r8, #0
 8013b10:	bf18      	it	ne
 8013b12:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8013b16:	e7e6      	b.n	8013ae6 <rcl_wait_set_fini+0x12e>
 8013b18:	f04f 080b 	mov.w	r8, #11
 8013b1c:	4640      	mov	r0, r8
 8013b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b22:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8013b26:	e7e4      	b.n	8013af2 <rcl_wait_set_fini+0x13a>

08013b28 <rcl_wait_set_add_subscription>:
 8013b28:	b318      	cbz	r0, 8013b72 <rcl_wait_set_add_subscription+0x4a>
 8013b2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b2c:	b570      	push	{r4, r5, r6, lr}
 8013b2e:	4604      	mov	r4, r0
 8013b30:	b30b      	cbz	r3, 8013b76 <rcl_wait_set_add_subscription+0x4e>
 8013b32:	b319      	cbz	r1, 8013b7c <rcl_wait_set_add_subscription+0x54>
 8013b34:	681d      	ldr	r5, [r3, #0]
 8013b36:	6840      	ldr	r0, [r0, #4]
 8013b38:	4285      	cmp	r5, r0
 8013b3a:	d217      	bcs.n	8013b6c <rcl_wait_set_add_subscription+0x44>
 8013b3c:	6820      	ldr	r0, [r4, #0]
 8013b3e:	1c6e      	adds	r6, r5, #1
 8013b40:	601e      	str	r6, [r3, #0]
 8013b42:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013b46:	b102      	cbz	r2, 8013b4a <rcl_wait_set_add_subscription+0x22>
 8013b48:	6015      	str	r5, [r2, #0]
 8013b4a:	4608      	mov	r0, r1
 8013b4c:	f7ff fb3c 	bl	80131c8 <rcl_subscription_get_rmw_handle>
 8013b50:	b150      	cbz	r0, 8013b68 <rcl_wait_set_add_subscription+0x40>
 8013b52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b54:	6842      	ldr	r2, [r0, #4]
 8013b56:	689b      	ldr	r3, [r3, #8]
 8013b58:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b5e:	6853      	ldr	r3, [r2, #4]
 8013b60:	3301      	adds	r3, #1
 8013b62:	2000      	movs	r0, #0
 8013b64:	6053      	str	r3, [r2, #4]
 8013b66:	bd70      	pop	{r4, r5, r6, pc}
 8013b68:	2001      	movs	r0, #1
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	f240 3086 	movw	r0, #902	@ 0x386
 8013b70:	bd70      	pop	{r4, r5, r6, pc}
 8013b72:	200b      	movs	r0, #11
 8013b74:	4770      	bx	lr
 8013b76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b7a:	bd70      	pop	{r4, r5, r6, pc}
 8013b7c:	200b      	movs	r0, #11
 8013b7e:	bd70      	pop	{r4, r5, r6, pc}

08013b80 <rcl_wait_set_clear>:
 8013b80:	2800      	cmp	r0, #0
 8013b82:	d074      	beq.n	8013c6e <rcl_wait_set_clear+0xee>
 8013b84:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b86:	b510      	push	{r4, lr}
 8013b88:	4604      	mov	r4, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d071      	beq.n	8013c72 <rcl_wait_set_clear+0xf2>
 8013b8e:	6800      	ldr	r0, [r0, #0]
 8013b90:	b138      	cbz	r0, 8013ba2 <rcl_wait_set_clear+0x22>
 8013b92:	6862      	ldr	r2, [r4, #4]
 8013b94:	2100      	movs	r1, #0
 8013b96:	0092      	lsls	r2, r2, #2
 8013b98:	f006 f950 	bl	8019e3c <memset>
 8013b9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	601a      	str	r2, [r3, #0]
 8013ba2:	68a0      	ldr	r0, [r4, #8]
 8013ba4:	b138      	cbz	r0, 8013bb6 <rcl_wait_set_clear+0x36>
 8013ba6:	68e2      	ldr	r2, [r4, #12]
 8013ba8:	2100      	movs	r1, #0
 8013baa:	0092      	lsls	r2, r2, #2
 8013bac:	f006 f946 	bl	8019e3c <memset>
 8013bb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	60da      	str	r2, [r3, #12]
 8013bb6:	69a0      	ldr	r0, [r4, #24]
 8013bb8:	b138      	cbz	r0, 8013bca <rcl_wait_set_clear+0x4a>
 8013bba:	69e2      	ldr	r2, [r4, #28]
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	0092      	lsls	r2, r2, #2
 8013bc0:	f006 f93c 	bl	8019e3c <memset>
 8013bc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	619a      	str	r2, [r3, #24]
 8013bca:	6a20      	ldr	r0, [r4, #32]
 8013bcc:	b138      	cbz	r0, 8013bde <rcl_wait_set_clear+0x5e>
 8013bce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013bd0:	2100      	movs	r1, #0
 8013bd2:	0092      	lsls	r2, r2, #2
 8013bd4:	f006 f932 	bl	8019e3c <memset>
 8013bd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013bda:	2200      	movs	r2, #0
 8013bdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8013bde:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013be0:	b138      	cbz	r0, 8013bf2 <rcl_wait_set_clear+0x72>
 8013be2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013be4:	2100      	movs	r1, #0
 8013be6:	0092      	lsls	r2, r2, #2
 8013be8:	f006 f928 	bl	8019e3c <memset>
 8013bec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013bee:	2200      	movs	r2, #0
 8013bf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8013bf2:	6920      	ldr	r0, [r4, #16]
 8013bf4:	b138      	cbz	r0, 8013c06 <rcl_wait_set_clear+0x86>
 8013bf6:	6962      	ldr	r2, [r4, #20]
 8013bf8:	2100      	movs	r1, #0
 8013bfa:	0092      	lsls	r2, r2, #2
 8013bfc:	f006 f91e 	bl	8019e3c <memset>
 8013c00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c02:	2200      	movs	r2, #0
 8013c04:	641a      	str	r2, [r3, #64]	@ 0x40
 8013c06:	6898      	ldr	r0, [r3, #8]
 8013c08:	b138      	cbz	r0, 8013c1a <rcl_wait_set_clear+0x9a>
 8013c0a:	685a      	ldr	r2, [r3, #4]
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	0092      	lsls	r2, r2, #2
 8013c10:	f006 f914 	bl	8019e3c <memset>
 8013c14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c16:	2200      	movs	r2, #0
 8013c18:	605a      	str	r2, [r3, #4]
 8013c1a:	6958      	ldr	r0, [r3, #20]
 8013c1c:	b138      	cbz	r0, 8013c2e <rcl_wait_set_clear+0xae>
 8013c1e:	691a      	ldr	r2, [r3, #16]
 8013c20:	2100      	movs	r1, #0
 8013c22:	0092      	lsls	r2, r2, #2
 8013c24:	f006 f90a 	bl	8019e3c <memset>
 8013c28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	611a      	str	r2, [r3, #16]
 8013c2e:	6a18      	ldr	r0, [r3, #32]
 8013c30:	b138      	cbz	r0, 8013c42 <rcl_wait_set_clear+0xc2>
 8013c32:	69da      	ldr	r2, [r3, #28]
 8013c34:	2100      	movs	r1, #0
 8013c36:	0092      	lsls	r2, r2, #2
 8013c38:	f006 f900 	bl	8019e3c <memset>
 8013c3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c3e:	2200      	movs	r2, #0
 8013c40:	61da      	str	r2, [r3, #28]
 8013c42:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013c44:	b138      	cbz	r0, 8013c56 <rcl_wait_set_clear+0xd6>
 8013c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013c48:	2100      	movs	r1, #0
 8013c4a:	0092      	lsls	r2, r2, #2
 8013c4c:	f006 f8f6 	bl	8019e3c <memset>
 8013c50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c52:	2200      	movs	r2, #0
 8013c54:	629a      	str	r2, [r3, #40]	@ 0x28
 8013c56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013c58:	b138      	cbz	r0, 8013c6a <rcl_wait_set_clear+0xea>
 8013c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	0092      	lsls	r2, r2, #2
 8013c60:	f006 f8ec 	bl	8019e3c <memset>
 8013c64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c66:	2200      	movs	r2, #0
 8013c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	bd10      	pop	{r4, pc}
 8013c6e:	200b      	movs	r0, #11
 8013c70:	4770      	bx	lr
 8013c72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013c76:	bd10      	pop	{r4, pc}

08013c78 <rcl_wait_set_resize>:
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	f000 81a1 	beq.w	8013fc0 <rcl_wait_set_resize+0x348>
 8013c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c82:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8013c86:	b083      	sub	sp, #12
 8013c88:	4604      	mov	r4, r0
 8013c8a:	f1ba 0f00 	cmp.w	sl, #0
 8013c8e:	f000 8199 	beq.w	8013fc4 <rcl_wait_set_resize+0x34c>
 8013c92:	f04f 0800 	mov.w	r8, #0
 8013c96:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8013c9a:	461e      	mov	r6, r3
 8013c9c:	460f      	mov	r7, r1
 8013c9e:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8013ca2:	4615      	mov	r5, r2
 8013ca4:	f8c0 8004 	str.w	r8, [r0, #4]
 8013ca8:	6800      	ldr	r0, [r0, #0]
 8013caa:	f8ca 8000 	str.w	r8, [sl]
 8013cae:	2900      	cmp	r1, #0
 8013cb0:	f000 80cf 	beq.w	8013e52 <rcl_wait_set_resize+0x1da>
 8013cb4:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8013cb8:	464a      	mov	r2, r9
 8013cba:	4651      	mov	r1, sl
 8013cbc:	9301      	str	r3, [sp, #4]
 8013cbe:	4798      	blx	r3
 8013cc0:	9b01      	ldr	r3, [sp, #4]
 8013cc2:	6020      	str	r0, [r4, #0]
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	f000 8109 	beq.w	8013edc <rcl_wait_set_resize+0x264>
 8013cca:	4652      	mov	r2, sl
 8013ccc:	4641      	mov	r1, r8
 8013cce:	9301      	str	r3, [sp, #4]
 8013cd0:	f006 f8b4 	bl	8019e3c <memset>
 8013cd4:	6067      	str	r7, [r4, #4]
 8013cd6:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8013cd8:	9b01      	ldr	r3, [sp, #4]
 8013cda:	68b8      	ldr	r0, [r7, #8]
 8013cdc:	f8c7 8004 	str.w	r8, [r7, #4]
 8013ce0:	464a      	mov	r2, r9
 8013ce2:	4651      	mov	r1, sl
 8013ce4:	4798      	blx	r3
 8013ce6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ce8:	60b8      	str	r0, [r7, #8]
 8013cea:	689f      	ldr	r7, [r3, #8]
 8013cec:	2f00      	cmp	r7, #0
 8013cee:	f000 80f0 	beq.w	8013ed2 <rcl_wait_set_resize+0x25a>
 8013cf2:	4652      	mov	r2, sl
 8013cf4:	4641      	mov	r1, r8
 8013cf6:	4638      	mov	r0, r7
 8013cf8:	f006 f8a0 	bl	8019e3c <memset>
 8013cfc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013d00:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8013d04:	68a0      	ldr	r0, [r4, #8]
 8013d06:	2700      	movs	r7, #0
 8013d08:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8013d0c:	60e7      	str	r7, [r4, #12]
 8013d0e:	f8ca 700c 	str.w	r7, [sl, #12]
 8013d12:	2d00      	cmp	r5, #0
 8013d14:	f040 80b0 	bne.w	8013e78 <rcl_wait_set_resize+0x200>
 8013d18:	b130      	cbz	r0, 8013d28 <rcl_wait_set_resize+0xb0>
 8013d1a:	4641      	mov	r1, r8
 8013d1c:	4790      	blx	r2
 8013d1e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013d22:	60a5      	str	r5, [r4, #8]
 8013d24:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8013d28:	f8da 0014 	ldr.w	r0, [sl, #20]
 8013d2c:	2700      	movs	r7, #0
 8013d2e:	19ad      	adds	r5, r5, r6
 8013d30:	f8ca 7010 	str.w	r7, [sl, #16]
 8013d34:	f040 80b8 	bne.w	8013ea8 <rcl_wait_set_resize+0x230>
 8013d38:	b148      	cbz	r0, 8013d4e <rcl_wait_set_resize+0xd6>
 8013d3a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8013d3e:	4641      	mov	r1, r8
 8013d40:	4798      	blx	r3
 8013d42:	f8ca 5014 	str.w	r5, [sl, #20]
 8013d46:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013d4a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8013d4e:	6920      	ldr	r0, [r4, #16]
 8013d50:	2500      	movs	r5, #0
 8013d52:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8013d56:	6165      	str	r5, [r4, #20]
 8013d58:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8013d5c:	2e00      	cmp	r6, #0
 8013d5e:	f040 80c1 	bne.w	8013ee4 <rcl_wait_set_resize+0x26c>
 8013d62:	b140      	cbz	r0, 8013d76 <rcl_wait_set_resize+0xfe>
 8013d64:	4641      	mov	r1, r8
 8013d66:	47c8      	blx	r9
 8013d68:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013d6c:	6126      	str	r6, [r4, #16]
 8013d6e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8013d72:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8013d76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d78:	69a0      	ldr	r0, [r4, #24]
 8013d7a:	2500      	movs	r5, #0
 8013d7c:	61e5      	str	r5, [r4, #28]
 8013d7e:	f8ca 5018 	str.w	r5, [sl, #24]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	f040 80c2 	bne.w	8013f0c <rcl_wait_set_resize+0x294>
 8013d88:	b128      	cbz	r0, 8013d96 <rcl_wait_set_resize+0x11e>
 8013d8a:	4641      	mov	r1, r8
 8013d8c:	47c8      	blx	r9
 8013d8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d90:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013d94:	61a3      	str	r3, [r4, #24]
 8013d96:	f8da 0020 	ldr.w	r0, [sl, #32]
 8013d9a:	b130      	cbz	r0, 8013daa <rcl_wait_set_resize+0x132>
 8013d9c:	4641      	mov	r1, r8
 8013d9e:	47c8      	blx	r9
 8013da0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013da4:	2300      	movs	r3, #0
 8013da6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8013daa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013dac:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8013db0:	6a20      	ldr	r0, [r4, #32]
 8013db2:	2500      	movs	r5, #0
 8013db4:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8013db8:	6265      	str	r5, [r4, #36]	@ 0x24
 8013dba:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f000 80c8 	beq.w	8013f54 <rcl_wait_set_resize+0x2dc>
 8013dc4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8013dc8:	4632      	mov	r2, r6
 8013dca:	4649      	mov	r1, r9
 8013dcc:	47c0      	blx	r8
 8013dce:	6220      	str	r0, [r4, #32]
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	f000 8083 	beq.w	8013edc <rcl_wait_set_resize+0x264>
 8013dd6:	464a      	mov	r2, r9
 8013dd8:	4629      	mov	r1, r5
 8013dda:	f006 f82f 	bl	8019e3c <memset>
 8013dde:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013de4:	6263      	str	r3, [r4, #36]	@ 0x24
 8013de6:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8013dea:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8013dee:	4632      	mov	r2, r6
 8013df0:	4649      	mov	r1, r9
 8013df2:	47c0      	blx	r8
 8013df4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013df6:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8013dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	f000 80fb 	beq.w	8013ff8 <rcl_wait_set_resize+0x380>
 8013e02:	464a      	mov	r2, r9
 8013e04:	4629      	mov	r1, r5
 8013e06:	4618      	mov	r0, r3
 8013e08:	f006 f818 	bl	8019e3c <memset>
 8013e0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e12:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8013e16:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013e18:	2500      	movs	r5, #0
 8013e1a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8013e1e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8013e20:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	f040 80a9 	bne.w	8013f7c <rcl_wait_set_resize+0x304>
 8013e2a:	b128      	cbz	r0, 8013e38 <rcl_wait_set_resize+0x1c0>
 8013e2c:	4631      	mov	r1, r6
 8013e2e:	47b8      	blx	r7
 8013e30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e32:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013e36:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013e38:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013e3c:	b128      	cbz	r0, 8013e4a <rcl_wait_set_resize+0x1d2>
 8013e3e:	4631      	mov	r1, r6
 8013e40:	47b8      	blx	r7
 8013e42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e44:	2200      	movs	r2, #0
 8013e46:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	b003      	add	sp, #12
 8013e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e52:	b120      	cbz	r0, 8013e5e <rcl_wait_set_resize+0x1e6>
 8013e54:	4649      	mov	r1, r9
 8013e56:	47d8      	blx	fp
 8013e58:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013e5c:	6027      	str	r7, [r4, #0]
 8013e5e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8013e62:	2800      	cmp	r0, #0
 8013e64:	f43f af4c 	beq.w	8013d00 <rcl_wait_set_resize+0x88>
 8013e68:	4649      	mov	r1, r9
 8013e6a:	47d8      	blx	fp
 8013e6c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013e70:	2300      	movs	r3, #0
 8013e72:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8013e76:	e743      	b.n	8013d00 <rcl_wait_set_resize+0x88>
 8013e78:	4642      	mov	r2, r8
 8013e7a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8013e7e:	4641      	mov	r1, r8
 8013e80:	4798      	blx	r3
 8013e82:	60a0      	str	r0, [r4, #8]
 8013e84:	b350      	cbz	r0, 8013edc <rcl_wait_set_resize+0x264>
 8013e86:	4642      	mov	r2, r8
 8013e88:	4639      	mov	r1, r7
 8013e8a:	f005 ffd7 	bl	8019e3c <memset>
 8013e8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013e92:	60e5      	str	r5, [r4, #12]
 8013e94:	2700      	movs	r7, #0
 8013e96:	19ad      	adds	r5, r5, r6
 8013e98:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8013e9c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8013ea0:	f8ca 7010 	str.w	r7, [sl, #16]
 8013ea4:	f43f af48 	beq.w	8013d38 <rcl_wait_set_resize+0xc0>
 8013ea8:	00ad      	lsls	r5, r5, #2
 8013eaa:	4642      	mov	r2, r8
 8013eac:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8013eb0:	4629      	mov	r1, r5
 8013eb2:	4798      	blx	r3
 8013eb4:	4680      	mov	r8, r0
 8013eb6:	f8ca 0014 	str.w	r0, [sl, #20]
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	f000 8085 	beq.w	8013fca <rcl_wait_set_resize+0x352>
 8013ec0:	462a      	mov	r2, r5
 8013ec2:	4639      	mov	r1, r7
 8013ec4:	f005 ffba 	bl	8019e3c <memset>
 8013ec8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013ecc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8013ed0:	e73d      	b.n	8013d4e <rcl_wait_set_resize+0xd6>
 8013ed2:	6820      	ldr	r0, [r4, #0]
 8013ed4:	4649      	mov	r1, r9
 8013ed6:	47d8      	blx	fp
 8013ed8:	e9c4 7700 	strd	r7, r7, [r4]
 8013edc:	200a      	movs	r0, #10
 8013ede:	b003      	add	sp, #12
 8013ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ee4:	4642      	mov	r2, r8
 8013ee6:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8013eea:	4641      	mov	r1, r8
 8013eec:	47b8      	blx	r7
 8013eee:	6120      	str	r0, [r4, #16]
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d0f3      	beq.n	8013edc <rcl_wait_set_resize+0x264>
 8013ef4:	4642      	mov	r2, r8
 8013ef6:	4629      	mov	r1, r5
 8013ef8:	f005 ffa0 	bl	8019e3c <memset>
 8013efc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013f00:	6166      	str	r6, [r4, #20]
 8013f02:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8013f06:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8013f0a:	e734      	b.n	8013d76 <rcl_wait_set_resize+0xfe>
 8013f0c:	009e      	lsls	r6, r3, #2
 8013f0e:	4642      	mov	r2, r8
 8013f10:	4631      	mov	r1, r6
 8013f12:	47b8      	blx	r7
 8013f14:	61a0      	str	r0, [r4, #24]
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d0e0      	beq.n	8013edc <rcl_wait_set_resize+0x264>
 8013f1a:	4632      	mov	r2, r6
 8013f1c:	4629      	mov	r1, r5
 8013f1e:	f005 ff8d 	bl	8019e3c <memset>
 8013f22:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013f26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f28:	61e3      	str	r3, [r4, #28]
 8013f2a:	f8da 0020 	ldr.w	r0, [sl, #32]
 8013f2e:	f8ca 501c 	str.w	r5, [sl, #28]
 8013f32:	4642      	mov	r2, r8
 8013f34:	4631      	mov	r1, r6
 8013f36:	47b8      	blx	r7
 8013f38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f3a:	f8ca 0020 	str.w	r0, [sl, #32]
 8013f3e:	6a1f      	ldr	r7, [r3, #32]
 8013f40:	2f00      	cmp	r7, #0
 8013f42:	d053      	beq.n	8013fec <rcl_wait_set_resize+0x374>
 8013f44:	4632      	mov	r2, r6
 8013f46:	4629      	mov	r1, r5
 8013f48:	4638      	mov	r0, r7
 8013f4a:	f005 ff77 	bl	8019e3c <memset>
 8013f4e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013f52:	e72a      	b.n	8013daa <rcl_wait_set_resize+0x132>
 8013f54:	b128      	cbz	r0, 8013f62 <rcl_wait_set_resize+0x2ea>
 8013f56:	4631      	mov	r1, r6
 8013f58:	47b8      	blx	r7
 8013f5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f5c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013f60:	6223      	str	r3, [r4, #32]
 8013f62:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8013f66:	2800      	cmp	r0, #0
 8013f68:	f43f af52 	beq.w	8013e10 <rcl_wait_set_resize+0x198>
 8013f6c:	4631      	mov	r1, r6
 8013f6e:	47b8      	blx	r7
 8013f70:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013f74:	2300      	movs	r3, #0
 8013f76:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8013f7a:	e749      	b.n	8013e10 <rcl_wait_set_resize+0x198>
 8013f7c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8013f80:	4632      	mov	r2, r6
 8013f82:	4649      	mov	r1, r9
 8013f84:	47c0      	blx	r8
 8013f86:	62a0      	str	r0, [r4, #40]	@ 0x28
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d0a7      	beq.n	8013edc <rcl_wait_set_resize+0x264>
 8013f8c:	464a      	mov	r2, r9
 8013f8e:	4629      	mov	r1, r5
 8013f90:	f005 ff54 	bl	8019e3c <memset>
 8013f94:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8013f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013f9c:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013fa0:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8013fa4:	4632      	mov	r2, r6
 8013fa6:	4649      	mov	r1, r9
 8013fa8:	47c0      	blx	r8
 8013faa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fac:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fb2:	b34b      	cbz	r3, 8014008 <rcl_wait_set_resize+0x390>
 8013fb4:	464a      	mov	r2, r9
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f005 ff3f 	bl	8019e3c <memset>
 8013fbe:	e744      	b.n	8013e4a <rcl_wait_set_resize+0x1d2>
 8013fc0:	200b      	movs	r0, #11
 8013fc2:	4770      	bx	lr
 8013fc4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013fc8:	e789      	b.n	8013ede <rcl_wait_set_resize+0x266>
 8013fca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fcc:	68a0      	ldr	r0, [r4, #8]
 8013fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013fd0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013fd2:	4790      	blx	r2
 8013fd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fd6:	6920      	ldr	r0, [r4, #16]
 8013fd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013fda:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013fdc:	f8c4 800c 	str.w	r8, [r4, #12]
 8013fe0:	f8c4 8008 	str.w	r8, [r4, #8]
 8013fe4:	4790      	blx	r2
 8013fe6:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8013fea:	e777      	b.n	8013edc <rcl_wait_set_resize+0x264>
 8013fec:	69a0      	ldr	r0, [r4, #24]
 8013fee:	4641      	mov	r1, r8
 8013ff0:	47c8      	blx	r9
 8013ff2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8013ff6:	e771      	b.n	8013edc <rcl_wait_set_resize+0x264>
 8013ff8:	6a20      	ldr	r0, [r4, #32]
 8013ffa:	9301      	str	r3, [sp, #4]
 8013ffc:	4631      	mov	r1, r6
 8013ffe:	47b8      	blx	r7
 8014000:	9b01      	ldr	r3, [sp, #4]
 8014002:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8014006:	e769      	b.n	8013edc <rcl_wait_set_resize+0x264>
 8014008:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801400a:	9301      	str	r3, [sp, #4]
 801400c:	4631      	mov	r1, r6
 801400e:	47b8      	blx	r7
 8014010:	9b01      	ldr	r3, [sp, #4]
 8014012:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014016:	e761      	b.n	8013edc <rcl_wait_set_resize+0x264>

08014018 <rcl_wait_set_init>:
 8014018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801401c:	b084      	sub	sp, #16
 801401e:	4604      	mov	r4, r0
 8014020:	a810      	add	r0, sp, #64	@ 0x40
 8014022:	460d      	mov	r5, r1
 8014024:	4690      	mov	r8, r2
 8014026:	461f      	mov	r7, r3
 8014028:	f7f7 ffde 	bl	800bfe8 <rcutils_allocator_is_valid>
 801402c:	2800      	cmp	r0, #0
 801402e:	d068      	beq.n	8014102 <rcl_wait_set_init+0xea>
 8014030:	2c00      	cmp	r4, #0
 8014032:	d066      	beq.n	8014102 <rcl_wait_set_init+0xea>
 8014034:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014036:	b126      	cbz	r6, 8014042 <rcl_wait_set_init+0x2a>
 8014038:	2564      	movs	r5, #100	@ 0x64
 801403a:	4628      	mov	r0, r5
 801403c:	b004      	add	sp, #16
 801403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014044:	2b00      	cmp	r3, #0
 8014046:	d05c      	beq.n	8014102 <rcl_wait_set_init+0xea>
 8014048:	4618      	mov	r0, r3
 801404a:	f7fe f9a5 	bl	8012398 <rcl_context_is_valid>
 801404e:	2800      	cmp	r0, #0
 8014050:	d05c      	beq.n	801410c <rcl_wait_set_init+0xf4>
 8014052:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014054:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014056:	205c      	movs	r0, #92	@ 0x5c
 8014058:	4798      	blx	r3
 801405a:	6320      	str	r0, [r4, #48]	@ 0x30
 801405c:	2800      	cmp	r0, #0
 801405e:	d059      	beq.n	8014114 <rcl_wait_set_init+0xfc>
 8014060:	4631      	mov	r1, r6
 8014062:	225c      	movs	r2, #92	@ 0x5c
 8014064:	f005 feea 	bl	8019e3c <memset>
 8014068:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 801406c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801406e:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8014072:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014076:	eb03 0e02 	add.w	lr, r3, r2
 801407a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801407c:	449e      	add	lr, r3
 801407e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014080:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014084:	f8d3 a000 	ldr.w	sl, [r3]
 8014088:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801408c:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8014090:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8014094:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8014098:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 801409c:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 80140a0:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 80140a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80140a6:	44c6      	add	lr, r8
 80140a8:	f8dc 3000 	ldr.w	r3, [ip]
 80140ac:	6033      	str	r3, [r6, #0]
 80140ae:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 80140b2:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80140b6:	f002 fe99 	bl	8016dec <rmw_create_wait_set>
 80140ba:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 80140be:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80140c0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80140c2:	b32b      	cbz	r3, 8014110 <rcl_wait_set_init+0xf8>
 80140c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140c6:	9302      	str	r3, [sp, #8]
 80140c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80140ca:	9301      	str	r3, [sp, #4]
 80140cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	4629      	mov	r1, r5
 80140d2:	463b      	mov	r3, r7
 80140d4:	4642      	mov	r2, r8
 80140d6:	4620      	mov	r0, r4
 80140d8:	f7ff fdce 	bl	8013c78 <rcl_wait_set_resize>
 80140dc:	4605      	mov	r5, r0
 80140de:	2800      	cmp	r0, #0
 80140e0:	d0ab      	beq.n	801403a <rcl_wait_set_init+0x22>
 80140e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80140e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80140e6:	b133      	cbz	r3, 80140f6 <rcl_wait_set_init+0xde>
 80140e8:	4618      	mov	r0, r3
 80140ea:	f002 fe89 	bl	8016e00 <rmw_destroy_wait_set>
 80140ee:	b198      	cbz	r0, 8014118 <rcl_wait_set_init+0x100>
 80140f0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80140f2:	f44f 7561 	mov.w	r5, #900	@ 0x384
 80140f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80140f8:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80140fa:	4798      	blx	r3
 80140fc:	2300      	movs	r3, #0
 80140fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8014100:	e79b      	b.n	801403a <rcl_wait_set_init+0x22>
 8014102:	250b      	movs	r5, #11
 8014104:	4628      	mov	r0, r5
 8014106:	b004      	add	sp, #16
 8014108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801410c:	2565      	movs	r5, #101	@ 0x65
 801410e:	e794      	b.n	801403a <rcl_wait_set_init+0x22>
 8014110:	250a      	movs	r5, #10
 8014112:	e7f0      	b.n	80140f6 <rcl_wait_set_init+0xde>
 8014114:	250a      	movs	r5, #10
 8014116:	e790      	b.n	801403a <rcl_wait_set_init+0x22>
 8014118:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801411a:	e7ec      	b.n	80140f6 <rcl_wait_set_init+0xde>

0801411c <rcl_wait_set_add_guard_condition>:
 801411c:	b318      	cbz	r0, 8014166 <rcl_wait_set_add_guard_condition+0x4a>
 801411e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014120:	b570      	push	{r4, r5, r6, lr}
 8014122:	4604      	mov	r4, r0
 8014124:	b30b      	cbz	r3, 801416a <rcl_wait_set_add_guard_condition+0x4e>
 8014126:	b319      	cbz	r1, 8014170 <rcl_wait_set_add_guard_condition+0x54>
 8014128:	68dd      	ldr	r5, [r3, #12]
 801412a:	68c0      	ldr	r0, [r0, #12]
 801412c:	4285      	cmp	r5, r0
 801412e:	d217      	bcs.n	8014160 <rcl_wait_set_add_guard_condition+0x44>
 8014130:	68a0      	ldr	r0, [r4, #8]
 8014132:	1c6e      	adds	r6, r5, #1
 8014134:	60de      	str	r6, [r3, #12]
 8014136:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801413a:	b102      	cbz	r2, 801413e <rcl_wait_set_add_guard_condition+0x22>
 801413c:	6015      	str	r5, [r2, #0]
 801413e:	4608      	mov	r0, r1
 8014140:	f004 fdb8 	bl	8018cb4 <rcl_guard_condition_get_rmw_handle>
 8014144:	b150      	cbz	r0, 801415c <rcl_wait_set_add_guard_condition+0x40>
 8014146:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014148:	6842      	ldr	r2, [r0, #4]
 801414a:	695b      	ldr	r3, [r3, #20]
 801414c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014150:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014152:	6913      	ldr	r3, [r2, #16]
 8014154:	3301      	adds	r3, #1
 8014156:	2000      	movs	r0, #0
 8014158:	6113      	str	r3, [r2, #16]
 801415a:	bd70      	pop	{r4, r5, r6, pc}
 801415c:	2001      	movs	r0, #1
 801415e:	bd70      	pop	{r4, r5, r6, pc}
 8014160:	f240 3086 	movw	r0, #902	@ 0x386
 8014164:	bd70      	pop	{r4, r5, r6, pc}
 8014166:	200b      	movs	r0, #11
 8014168:	4770      	bx	lr
 801416a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801416e:	bd70      	pop	{r4, r5, r6, pc}
 8014170:	200b      	movs	r0, #11
 8014172:	bd70      	pop	{r4, r5, r6, pc}

08014174 <rcl_wait_set_add_timer>:
 8014174:	b328      	cbz	r0, 80141c2 <rcl_wait_set_add_timer+0x4e>
 8014176:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014178:	b570      	push	{r4, r5, r6, lr}
 801417a:	4604      	mov	r4, r0
 801417c:	b31b      	cbz	r3, 80141c6 <rcl_wait_set_add_timer+0x52>
 801417e:	b329      	cbz	r1, 80141cc <rcl_wait_set_add_timer+0x58>
 8014180:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014182:	6965      	ldr	r5, [r4, #20]
 8014184:	42a8      	cmp	r0, r5
 8014186:	d219      	bcs.n	80141bc <rcl_wait_set_add_timer+0x48>
 8014188:	6925      	ldr	r5, [r4, #16]
 801418a:	1c46      	adds	r6, r0, #1
 801418c:	641e      	str	r6, [r3, #64]	@ 0x40
 801418e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014192:	b102      	cbz	r2, 8014196 <rcl_wait_set_add_timer+0x22>
 8014194:	6010      	str	r0, [r2, #0]
 8014196:	4608      	mov	r0, r1
 8014198:	f7ff fbea 	bl	8013970 <rcl_timer_get_guard_condition>
 801419c:	b160      	cbz	r0, 80141b8 <rcl_wait_set_add_timer+0x44>
 801419e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80141a0:	68e3      	ldr	r3, [r4, #12]
 80141a2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80141a4:	3b01      	subs	r3, #1
 80141a6:	441d      	add	r5, r3
 80141a8:	f004 fd84 	bl	8018cb4 <rcl_guard_condition_get_rmw_handle>
 80141ac:	b180      	cbz	r0, 80141d0 <rcl_wait_set_add_timer+0x5c>
 80141ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141b0:	6842      	ldr	r2, [r0, #4]
 80141b2:	695b      	ldr	r3, [r3, #20]
 80141b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80141b8:	2000      	movs	r0, #0
 80141ba:	bd70      	pop	{r4, r5, r6, pc}
 80141bc:	f240 3086 	movw	r0, #902	@ 0x386
 80141c0:	bd70      	pop	{r4, r5, r6, pc}
 80141c2:	200b      	movs	r0, #11
 80141c4:	4770      	bx	lr
 80141c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80141ca:	bd70      	pop	{r4, r5, r6, pc}
 80141cc:	200b      	movs	r0, #11
 80141ce:	bd70      	pop	{r4, r5, r6, pc}
 80141d0:	2001      	movs	r0, #1
 80141d2:	bd70      	pop	{r4, r5, r6, pc}

080141d4 <rcl_wait_set_add_client>:
 80141d4:	b318      	cbz	r0, 801421e <rcl_wait_set_add_client+0x4a>
 80141d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80141d8:	b570      	push	{r4, r5, r6, lr}
 80141da:	4604      	mov	r4, r0
 80141dc:	b30b      	cbz	r3, 8014222 <rcl_wait_set_add_client+0x4e>
 80141de:	b319      	cbz	r1, 8014228 <rcl_wait_set_add_client+0x54>
 80141e0:	699d      	ldr	r5, [r3, #24]
 80141e2:	69c0      	ldr	r0, [r0, #28]
 80141e4:	4285      	cmp	r5, r0
 80141e6:	d217      	bcs.n	8014218 <rcl_wait_set_add_client+0x44>
 80141e8:	69a0      	ldr	r0, [r4, #24]
 80141ea:	1c6e      	adds	r6, r5, #1
 80141ec:	619e      	str	r6, [r3, #24]
 80141ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80141f2:	b102      	cbz	r2, 80141f6 <rcl_wait_set_add_client+0x22>
 80141f4:	6015      	str	r5, [r2, #0]
 80141f6:	4608      	mov	r0, r1
 80141f8:	f7fd ffe4 	bl	80121c4 <rcl_client_get_rmw_handle>
 80141fc:	b150      	cbz	r0, 8014214 <rcl_wait_set_add_client+0x40>
 80141fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014200:	6842      	ldr	r2, [r0, #4]
 8014202:	6a1b      	ldr	r3, [r3, #32]
 8014204:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014208:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801420a:	69d3      	ldr	r3, [r2, #28]
 801420c:	3301      	adds	r3, #1
 801420e:	2000      	movs	r0, #0
 8014210:	61d3      	str	r3, [r2, #28]
 8014212:	bd70      	pop	{r4, r5, r6, pc}
 8014214:	2001      	movs	r0, #1
 8014216:	bd70      	pop	{r4, r5, r6, pc}
 8014218:	f240 3086 	movw	r0, #902	@ 0x386
 801421c:	bd70      	pop	{r4, r5, r6, pc}
 801421e:	200b      	movs	r0, #11
 8014220:	4770      	bx	lr
 8014222:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014226:	bd70      	pop	{r4, r5, r6, pc}
 8014228:	200b      	movs	r0, #11
 801422a:	bd70      	pop	{r4, r5, r6, pc}

0801422c <rcl_wait_set_add_service>:
 801422c:	b318      	cbz	r0, 8014276 <rcl_wait_set_add_service+0x4a>
 801422e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014230:	b570      	push	{r4, r5, r6, lr}
 8014232:	4604      	mov	r4, r0
 8014234:	b30b      	cbz	r3, 801427a <rcl_wait_set_add_service+0x4e>
 8014236:	b319      	cbz	r1, 8014280 <rcl_wait_set_add_service+0x54>
 8014238:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801423a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801423c:	4285      	cmp	r5, r0
 801423e:	d217      	bcs.n	8014270 <rcl_wait_set_add_service+0x44>
 8014240:	6a20      	ldr	r0, [r4, #32]
 8014242:	1c6e      	adds	r6, r5, #1
 8014244:	625e      	str	r6, [r3, #36]	@ 0x24
 8014246:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801424a:	b102      	cbz	r2, 801424e <rcl_wait_set_add_service+0x22>
 801424c:	6015      	str	r5, [r2, #0]
 801424e:	4608      	mov	r0, r1
 8014250:	f7fe fd88 	bl	8012d64 <rcl_service_get_rmw_handle>
 8014254:	b150      	cbz	r0, 801426c <rcl_wait_set_add_service+0x40>
 8014256:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014258:	6842      	ldr	r2, [r0, #4]
 801425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801425c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014260:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014262:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014264:	3301      	adds	r3, #1
 8014266:	2000      	movs	r0, #0
 8014268:	6293      	str	r3, [r2, #40]	@ 0x28
 801426a:	bd70      	pop	{r4, r5, r6, pc}
 801426c:	2001      	movs	r0, #1
 801426e:	bd70      	pop	{r4, r5, r6, pc}
 8014270:	f240 3086 	movw	r0, #902	@ 0x386
 8014274:	bd70      	pop	{r4, r5, r6, pc}
 8014276:	200b      	movs	r0, #11
 8014278:	4770      	bx	lr
 801427a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801427e:	bd70      	pop	{r4, r5, r6, pc}
 8014280:	200b      	movs	r0, #11
 8014282:	bd70      	pop	{r4, r5, r6, pc}
 8014284:	0000      	movs	r0, r0
	...

08014288 <rcl_wait>:
 8014288:	2800      	cmp	r0, #0
 801428a:	f000 81d4 	beq.w	8014636 <rcl_wait+0x3ae>
 801428e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014292:	ed2d 8b02 	vpush	{d8}
 8014296:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8014298:	b099      	sub	sp, #100	@ 0x64
 801429a:	4604      	mov	r4, r0
 801429c:	2d00      	cmp	r5, #0
 801429e:	f000 8178 	beq.w	8014592 <rcl_wait+0x30a>
 80142a2:	461f      	mov	r7, r3
 80142a4:	6843      	ldr	r3, [r0, #4]
 80142a6:	4690      	mov	r8, r2
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f000 809b 	beq.w	80143e4 <rcl_wait+0x15c>
 80142ae:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80142b0:	2e00      	cmp	r6, #0
 80142b2:	f000 80b2 	beq.w	801441a <rcl_wait+0x192>
 80142b6:	2100      	movs	r1, #0
 80142b8:	468c      	mov	ip, r1
 80142ba:	460a      	mov	r2, r1
 80142bc:	46a6      	mov	lr, r4
 80142be:	f8de 3010 	ldr.w	r3, [lr, #16]
 80142c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142c6:	b173      	cbz	r3, 80142e6 <rcl_wait+0x5e>
 80142c8:	f8de 300c 	ldr.w	r3, [lr, #12]
 80142cc:	6968      	ldr	r0, [r5, #20]
 80142ce:	440b      	add	r3, r1
 80142d0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80142d4:	b13c      	cbz	r4, 80142e6 <rcl_wait+0x5e>
 80142d6:	692b      	ldr	r3, [r5, #16]
 80142d8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80142dc:	3301      	adds	r3, #1
 80142de:	612b      	str	r3, [r5, #16]
 80142e0:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 80142e4:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80142e6:	3101      	adds	r1, #1
 80142e8:	f14c 0c00 	adc.w	ip, ip, #0
 80142ec:	42b1      	cmp	r1, r6
 80142ee:	f17c 0300 	sbcs.w	r3, ip, #0
 80142f2:	d3e4      	bcc.n	80142be <rcl_wait+0x36>
 80142f4:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 80145a0 <rcl_wait+0x318>
 80142f8:	ea58 0307 	orrs.w	r3, r8, r7
 80142fc:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8014300:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8014304:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8014308:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 801430c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8014310:	4674      	mov	r4, lr
 8014312:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8014316:	f000 8094 	beq.w	8014442 <rcl_wait+0x1ba>
 801431a:	2e00      	cmp	r6, #0
 801431c:	f000 8145 	beq.w	80145aa <rcl_wait+0x322>
 8014320:	2500      	movs	r5, #0
 8014322:	46bb      	mov	fp, r7
 8014324:	e02c      	b.n	8014380 <rcl_wait+0xf8>
 8014326:	6923      	ldr	r3, [r4, #16]
 8014328:	f853 0009 	ldr.w	r0, [r3, r9]
 801432c:	a908      	add	r1, sp, #32
 801432e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014332:	f7ff fafb 	bl	801392c <rcl_timer_get_next_call_time>
 8014336:	f240 3321 	movw	r3, #801	@ 0x321
 801433a:	4298      	cmp	r0, r3
 801433c:	f000 80bb 	beq.w	80144b6 <rcl_wait+0x22e>
 8014340:	2800      	cmp	r0, #0
 8014342:	d165      	bne.n	8014410 <rcl_wait+0x188>
 8014344:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8014348:	7830      	ldrb	r0, [r6, #0]
 801434a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801434c:	ab18      	add	r3, sp, #96	@ 0x60
 801434e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8014352:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8014356:	9205      	str	r2, [sp, #20]
 8014358:	f853 2c20 	ldr.w	r2, [r3, #-32]
 801435c:	4297      	cmp	r7, r2
 801435e:	9a05      	ldr	r2, [sp, #20]
 8014360:	eb71 0202 	sbcs.w	r2, r1, r2
 8014364:	da06      	bge.n	8014374 <rcl_wait+0xec>
 8014366:	e943 7108 	strd	r7, r1, [r3, #-32]
 801436a:	ab18      	add	r3, sp, #96	@ 0x60
 801436c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014370:	f840 6c30 	str.w	r6, [r0, #-48]
 8014374:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014376:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8014378:	3501      	adds	r5, #1
 801437a:	42b5      	cmp	r5, r6
 801437c:	f080 8114 	bcs.w	80145a8 <rcl_wait+0x320>
 8014380:	6923      	ldr	r3, [r4, #16]
 8014382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014386:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801438a:	2800      	cmp	r0, #0
 801438c:	d0f4      	beq.n	8014378 <rcl_wait+0xf0>
 801438e:	a907      	add	r1, sp, #28
 8014390:	f7ff f9f8 	bl	8013784 <rcl_timer_clock>
 8014394:	4603      	mov	r3, r0
 8014396:	2800      	cmp	r0, #0
 8014398:	f040 8141 	bne.w	801461e <rcl_wait+0x396>
 801439c:	9807      	ldr	r0, [sp, #28]
 801439e:	7802      	ldrb	r2, [r0, #0]
 80143a0:	2a01      	cmp	r2, #1
 80143a2:	d1c0      	bne.n	8014326 <rcl_wait+0x9e>
 80143a4:	f10d 011b 	add.w	r1, sp, #27
 80143a8:	f88d 301b 	strb.w	r3, [sp, #27]
 80143ac:	f7fe ffba 	bl	8013324 <rcl_is_enabled_ros_time_override>
 80143b0:	4602      	mov	r2, r0
 80143b2:	2800      	cmp	r0, #0
 80143b4:	f040 8133 	bne.w	801461e <rcl_wait+0x396>
 80143b8:	6923      	ldr	r3, [r4, #16]
 80143ba:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80143be:	f853 0009 	ldr.w	r0, [r3, r9]
 80143c2:	2900      	cmp	r1, #0
 80143c4:	d0b0      	beq.n	8014328 <rcl_wait+0xa0>
 80143c6:	ae08      	add	r6, sp, #32
 80143c8:	4631      	mov	r1, r6
 80143ca:	f88d 2020 	strb.w	r2, [sp, #32]
 80143ce:	f7ff fa73 	bl	80138b8 <rcl_timer_is_ready>
 80143d2:	2800      	cmp	r0, #0
 80143d4:	f040 8123 	bne.w	801461e <rcl_wait+0x396>
 80143d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d0c9      	beq.n	8014374 <rcl_wait+0xec>
 80143e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143e2:	e02f      	b.n	8014444 <rcl_wait+0x1bc>
 80143e4:	68c3      	ldr	r3, [r0, #12]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f47f af61 	bne.w	80142ae <rcl_wait+0x26>
 80143ec:	6943      	ldr	r3, [r0, #20]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f47f af5d 	bne.w	80142ae <rcl_wait+0x26>
 80143f4:	69c3      	ldr	r3, [r0, #28]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	f47f af59 	bne.w	80142ae <rcl_wait+0x26>
 80143fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80143fe:	2b00      	cmp	r3, #0
 8014400:	f47f af55 	bne.w	80142ae <rcl_wait+0x26>
 8014404:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014406:	2b00      	cmp	r3, #0
 8014408:	f47f af51 	bne.w	80142ae <rcl_wait+0x26>
 801440c:	f240 3085 	movw	r0, #901	@ 0x385
 8014410:	b019      	add	sp, #100	@ 0x64
 8014412:	ecbd 8b02 	vpop	{d8}
 8014416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801441a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801441e:	f04f 32ff 	mov.w	r2, #4294967295
 8014422:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8014426:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 801442a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801442e:	ea58 0307 	orrs.w	r3, r8, r7
 8014432:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8014436:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 801443a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801443e:	f040 80b4 	bne.w	80145aa <rcl_wait+0x322>
 8014442:	ae08      	add	r6, sp, #32
 8014444:	2200      	movs	r2, #0
 8014446:	2300      	movs	r3, #0
 8014448:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801444c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014450:	9602      	str	r6, [sp, #8]
 8014452:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8014454:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8014458:	e9cd 3200 	strd	r3, r2, [sp]
 801445c:	f105 0110 	add.w	r1, r5, #16
 8014460:	f105 031c 	add.w	r3, r5, #28
 8014464:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8014468:	1d28      	adds	r0, r5, #4
 801446a:	f002 fb3d 	bl	8016ae8 <rmw_wait>
 801446e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014472:	4680      	mov	r8, r0
 8014474:	b332      	cbz	r2, 80144c4 <rcl_wait+0x23c>
 8014476:	2500      	movs	r5, #0
 8014478:	462f      	mov	r7, r5
 801447a:	462e      	mov	r6, r5
 801447c:	e007      	b.n	801448e <rcl_wait+0x206>
 801447e:	6922      	ldr	r2, [r4, #16]
 8014480:	f842 3009 	str.w	r3, [r2, r9]
 8014484:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014488:	3501      	adds	r5, #1
 801448a:	4295      	cmp	r5, r2
 801448c:	d21b      	bcs.n	80144c6 <rcl_wait+0x23e>
 801448e:	6920      	ldr	r0, [r4, #16]
 8014490:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014494:	a907      	add	r1, sp, #28
 8014496:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801449a:	2800      	cmp	r0, #0
 801449c:	d0f4      	beq.n	8014488 <rcl_wait+0x200>
 801449e:	f88d 601c 	strb.w	r6, [sp, #28]
 80144a2:	f7ff fa09 	bl	80138b8 <rcl_timer_is_ready>
 80144a6:	2800      	cmp	r0, #0
 80144a8:	d1b2      	bne.n	8014410 <rcl_wait+0x188>
 80144aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d0e5      	beq.n	801447e <rcl_wait+0x1f6>
 80144b2:	461f      	mov	r7, r3
 80144b4:	e7e6      	b.n	8014484 <rcl_wait+0x1fc>
 80144b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80144b8:	6923      	ldr	r3, [r4, #16]
 80144ba:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 80144bc:	2200      	movs	r2, #0
 80144be:	f843 2009 	str.w	r2, [r3, r9]
 80144c2:	e759      	b.n	8014378 <rcl_wait+0xf0>
 80144c4:	4617      	mov	r7, r2
 80144c6:	f038 0002 	bics.w	r0, r8, #2
 80144ca:	f040 80a8 	bne.w	801461e <rcl_wait+0x396>
 80144ce:	6866      	ldr	r6, [r4, #4]
 80144d0:	4602      	mov	r2, r0
 80144d2:	b91e      	cbnz	r6, 80144dc <rcl_wait+0x254>
 80144d4:	e00d      	b.n	80144f2 <rcl_wait+0x26a>
 80144d6:	3201      	adds	r2, #1
 80144d8:	4296      	cmp	r6, r2
 80144da:	d00a      	beq.n	80144f2 <rcl_wait+0x26a>
 80144dc:	6899      	ldr	r1, [r3, #8]
 80144de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80144e2:	2900      	cmp	r1, #0
 80144e4:	d1f7      	bne.n	80144d6 <rcl_wait+0x24e>
 80144e6:	6825      	ldr	r5, [r4, #0]
 80144e8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80144ec:	3201      	adds	r2, #1
 80144ee:	4296      	cmp	r6, r2
 80144f0:	d1f4      	bne.n	80144dc <rcl_wait+0x254>
 80144f2:	68e6      	ldr	r6, [r4, #12]
 80144f4:	2200      	movs	r2, #0
 80144f6:	b91e      	cbnz	r6, 8014500 <rcl_wait+0x278>
 80144f8:	e00d      	b.n	8014516 <rcl_wait+0x28e>
 80144fa:	3201      	adds	r2, #1
 80144fc:	42b2      	cmp	r2, r6
 80144fe:	d00a      	beq.n	8014516 <rcl_wait+0x28e>
 8014500:	6959      	ldr	r1, [r3, #20]
 8014502:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014506:	2900      	cmp	r1, #0
 8014508:	d1f7      	bne.n	80144fa <rcl_wait+0x272>
 801450a:	68a5      	ldr	r5, [r4, #8]
 801450c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014510:	3201      	adds	r2, #1
 8014512:	42b2      	cmp	r2, r6
 8014514:	d1f4      	bne.n	8014500 <rcl_wait+0x278>
 8014516:	69e6      	ldr	r6, [r4, #28]
 8014518:	2200      	movs	r2, #0
 801451a:	b91e      	cbnz	r6, 8014524 <rcl_wait+0x29c>
 801451c:	e00d      	b.n	801453a <rcl_wait+0x2b2>
 801451e:	3201      	adds	r2, #1
 8014520:	4296      	cmp	r6, r2
 8014522:	d00a      	beq.n	801453a <rcl_wait+0x2b2>
 8014524:	6a19      	ldr	r1, [r3, #32]
 8014526:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801452a:	2900      	cmp	r1, #0
 801452c:	d1f7      	bne.n	801451e <rcl_wait+0x296>
 801452e:	69a5      	ldr	r5, [r4, #24]
 8014530:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014534:	3201      	adds	r2, #1
 8014536:	4296      	cmp	r6, r2
 8014538:	d1f4      	bne.n	8014524 <rcl_wait+0x29c>
 801453a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801453c:	2200      	movs	r2, #0
 801453e:	b91e      	cbnz	r6, 8014548 <rcl_wait+0x2c0>
 8014540:	e00d      	b.n	801455e <rcl_wait+0x2d6>
 8014542:	3201      	adds	r2, #1
 8014544:	42b2      	cmp	r2, r6
 8014546:	d00a      	beq.n	801455e <rcl_wait+0x2d6>
 8014548:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801454a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801454e:	2900      	cmp	r1, #0
 8014550:	d1f7      	bne.n	8014542 <rcl_wait+0x2ba>
 8014552:	6a25      	ldr	r5, [r4, #32]
 8014554:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014558:	3201      	adds	r2, #1
 801455a:	42b2      	cmp	r2, r6
 801455c:	d1f4      	bne.n	8014548 <rcl_wait+0x2c0>
 801455e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014560:	2200      	movs	r2, #0
 8014562:	b91e      	cbnz	r6, 801456c <rcl_wait+0x2e4>
 8014564:	e00d      	b.n	8014582 <rcl_wait+0x2fa>
 8014566:	3201      	adds	r2, #1
 8014568:	42b2      	cmp	r2, r6
 801456a:	d00a      	beq.n	8014582 <rcl_wait+0x2fa>
 801456c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801456e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014572:	2900      	cmp	r1, #0
 8014574:	d1f7      	bne.n	8014566 <rcl_wait+0x2de>
 8014576:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8014578:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801457c:	3201      	adds	r2, #1
 801457e:	42b2      	cmp	r2, r6
 8014580:	d1f4      	bne.n	801456c <rcl_wait+0x2e4>
 8014582:	f1b8 0f02 	cmp.w	r8, #2
 8014586:	f47f af43 	bne.w	8014410 <rcl_wait+0x188>
 801458a:	f087 0701 	eor.w	r7, r7, #1
 801458e:	0078      	lsls	r0, r7, #1
 8014590:	e73e      	b.n	8014410 <rcl_wait+0x188>
 8014592:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014596:	b019      	add	sp, #100	@ 0x64
 8014598:	ecbd 8b02 	vpop	{d8}
 801459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a0:	ffffffff 	.word	0xffffffff
 80145a4:	7fffffff 	.word	0x7fffffff
 80145a8:	465f      	mov	r7, fp
 80145aa:	f1b8 0f01 	cmp.w	r8, #1
 80145ae:	f177 0300 	sbcs.w	r3, r7, #0
 80145b2:	db3a      	blt.n	801462a <rcl_wait+0x3a2>
 80145b4:	2601      	movs	r6, #1
 80145b6:	ad10      	add	r5, sp, #64	@ 0x40
 80145b8:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 80145bc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80145c0:	a908      	add	r1, sp, #32
 80145c2:	b1a0      	cbz	r0, 80145ee <rcl_wait+0x366>
 80145c4:	f7fe fea2 	bl	801330c <rcl_clock_get_now>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	f47f af21 	bne.w	8014410 <rcl_wait+0x188>
 80145ce:	9a08      	ldr	r2, [sp, #32]
 80145d0:	68ab      	ldr	r3, [r5, #8]
 80145d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80145d4:	1a9b      	subs	r3, r3, r2
 80145d6:	68ea      	ldr	r2, [r5, #12]
 80145d8:	eb62 0201 	sbc.w	r2, r2, r1
 80145dc:	4598      	cmp	r8, r3
 80145de:	eb77 0102 	sbcs.w	r1, r7, r2
 80145e2:	bfba      	itte	lt
 80145e4:	4643      	movlt	r3, r8
 80145e6:	463a      	movlt	r2, r7
 80145e8:	2601      	movge	r6, #1
 80145ea:	4698      	mov	r8, r3
 80145ec:	4617      	mov	r7, r2
 80145ee:	3508      	adds	r5, #8
 80145f0:	45a9      	cmp	r9, r5
 80145f2:	d1e3      	bne.n	80145bc <rcl_wait+0x334>
 80145f4:	2f00      	cmp	r7, #0
 80145f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80145f8:	bfab      	itete	ge
 80145fa:	4640      	movge	r0, r8
 80145fc:	2000      	movlt	r0, #0
 80145fe:	4639      	movge	r1, r7
 8014600:	2100      	movlt	r1, #0
 8014602:	2e00      	cmp	r6, #0
 8014604:	f43f af24 	beq.w	8014450 <rcl_wait+0x1c8>
 8014608:	a30d      	add	r3, pc, #52	@ (adr r3, 8014640 <rcl_wait+0x3b8>)
 801460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460e:	f7ec f975 	bl	80008fc <__aeabi_ldivmod>
 8014612:	ae08      	add	r6, sp, #32
 8014614:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014618:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801461c:	e718      	b.n	8014450 <rcl_wait+0x1c8>
 801461e:	2001      	movs	r0, #1
 8014620:	b019      	add	sp, #100	@ 0x64
 8014622:	ecbd 8b02 	vpop	{d8}
 8014626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801462a:	2600      	movs	r6, #0
 801462c:	f04f 38ff 	mov.w	r8, #4294967295
 8014630:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014634:	e7bf      	b.n	80145b6 <rcl_wait+0x32e>
 8014636:	200b      	movs	r0, #11
 8014638:	4770      	bx	lr
 801463a:	bf00      	nop
 801463c:	f3af 8000 	nop.w
 8014640:	3b9aca00 	.word	0x3b9aca00
 8014644:	00000000 	.word	0x00000000

08014648 <rcl_action_take_goal_response>:
 8014648:	b3b0      	cbz	r0, 80146b8 <rcl_action_take_goal_response+0x70>
 801464a:	b570      	push	{r4, r5, r6, lr}
 801464c:	4604      	mov	r4, r0
 801464e:	6800      	ldr	r0, [r0, #0]
 8014650:	b368      	cbz	r0, 80146ae <rcl_action_take_goal_response+0x66>
 8014652:	460d      	mov	r5, r1
 8014654:	4616      	mov	r6, r2
 8014656:	f7fd fe7b 	bl	8012350 <rcl_client_is_valid>
 801465a:	b330      	cbz	r0, 80146aa <rcl_action_take_goal_response+0x62>
 801465c:	6820      	ldr	r0, [r4, #0]
 801465e:	3004      	adds	r0, #4
 8014660:	f7fd fe76 	bl	8012350 <rcl_client_is_valid>
 8014664:	b308      	cbz	r0, 80146aa <rcl_action_take_goal_response+0x62>
 8014666:	6820      	ldr	r0, [r4, #0]
 8014668:	3008      	adds	r0, #8
 801466a:	f7fd fe71 	bl	8012350 <rcl_client_is_valid>
 801466e:	b1e0      	cbz	r0, 80146aa <rcl_action_take_goal_response+0x62>
 8014670:	6820      	ldr	r0, [r4, #0]
 8014672:	300c      	adds	r0, #12
 8014674:	f7fe fdae 	bl	80131d4 <rcl_subscription_is_valid>
 8014678:	b1b8      	cbz	r0, 80146aa <rcl_action_take_goal_response+0x62>
 801467a:	6820      	ldr	r0, [r4, #0]
 801467c:	3010      	adds	r0, #16
 801467e:	f7fe fda9 	bl	80131d4 <rcl_subscription_is_valid>
 8014682:	b190      	cbz	r0, 80146aa <rcl_action_take_goal_response+0x62>
 8014684:	b1b5      	cbz	r5, 80146b4 <rcl_action_take_goal_response+0x6c>
 8014686:	b1ae      	cbz	r6, 80146b4 <rcl_action_take_goal_response+0x6c>
 8014688:	6820      	ldr	r0, [r4, #0]
 801468a:	4632      	mov	r2, r6
 801468c:	4629      	mov	r1, r5
 801468e:	f7fd fdf3 	bl	8012278 <rcl_take_response>
 8014692:	b148      	cbz	r0, 80146a8 <rcl_action_take_goal_response+0x60>
 8014694:	280a      	cmp	r0, #10
 8014696:	d007      	beq.n	80146a8 <rcl_action_take_goal_response+0x60>
 8014698:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801469c:	f241 0307 	movw	r3, #4103	@ 0x1007
 80146a0:	4290      	cmp	r0, r2
 80146a2:	bf0c      	ite	eq
 80146a4:	4618      	moveq	r0, r3
 80146a6:	2001      	movne	r0, #1
 80146a8:	bd70      	pop	{r4, r5, r6, pc}
 80146aa:	f7f7 fcc9 	bl	800c040 <rcutils_reset_error>
 80146ae:	f241 0006 	movw	r0, #4102	@ 0x1006
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	200b      	movs	r0, #11
 80146b6:	bd70      	pop	{r4, r5, r6, pc}
 80146b8:	f241 0006 	movw	r0, #4102	@ 0x1006
 80146bc:	4770      	bx	lr
 80146be:	bf00      	nop

080146c0 <rcl_action_send_result_request>:
 80146c0:	b378      	cbz	r0, 8014722 <rcl_action_send_result_request+0x62>
 80146c2:	b570      	push	{r4, r5, r6, lr}
 80146c4:	4604      	mov	r4, r0
 80146c6:	6800      	ldr	r0, [r0, #0]
 80146c8:	b330      	cbz	r0, 8014718 <rcl_action_send_result_request+0x58>
 80146ca:	460d      	mov	r5, r1
 80146cc:	4616      	mov	r6, r2
 80146ce:	f7fd fe3f 	bl	8012350 <rcl_client_is_valid>
 80146d2:	b1f8      	cbz	r0, 8014714 <rcl_action_send_result_request+0x54>
 80146d4:	6820      	ldr	r0, [r4, #0]
 80146d6:	3004      	adds	r0, #4
 80146d8:	f7fd fe3a 	bl	8012350 <rcl_client_is_valid>
 80146dc:	b1d0      	cbz	r0, 8014714 <rcl_action_send_result_request+0x54>
 80146de:	6820      	ldr	r0, [r4, #0]
 80146e0:	3008      	adds	r0, #8
 80146e2:	f7fd fe35 	bl	8012350 <rcl_client_is_valid>
 80146e6:	b1a8      	cbz	r0, 8014714 <rcl_action_send_result_request+0x54>
 80146e8:	6820      	ldr	r0, [r4, #0]
 80146ea:	300c      	adds	r0, #12
 80146ec:	f7fe fd72 	bl	80131d4 <rcl_subscription_is_valid>
 80146f0:	b180      	cbz	r0, 8014714 <rcl_action_send_result_request+0x54>
 80146f2:	6820      	ldr	r0, [r4, #0]
 80146f4:	3010      	adds	r0, #16
 80146f6:	f7fe fd6d 	bl	80131d4 <rcl_subscription_is_valid>
 80146fa:	b158      	cbz	r0, 8014714 <rcl_action_send_result_request+0x54>
 80146fc:	b17d      	cbz	r5, 801471e <rcl_action_send_result_request+0x5e>
 80146fe:	b176      	cbz	r6, 801471e <rcl_action_send_result_request+0x5e>
 8014700:	6820      	ldr	r0, [r4, #0]
 8014702:	4632      	mov	r2, r6
 8014704:	4629      	mov	r1, r5
 8014706:	3008      	adds	r0, #8
 8014708:	f7fd fd62 	bl	80121d0 <rcl_send_request>
 801470c:	3800      	subs	r0, #0
 801470e:	bf18      	it	ne
 8014710:	2001      	movne	r0, #1
 8014712:	bd70      	pop	{r4, r5, r6, pc}
 8014714:	f7f7 fc94 	bl	800c040 <rcutils_reset_error>
 8014718:	f241 0006 	movw	r0, #4102	@ 0x1006
 801471c:	bd70      	pop	{r4, r5, r6, pc}
 801471e:	200b      	movs	r0, #11
 8014720:	bd70      	pop	{r4, r5, r6, pc}
 8014722:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014726:	4770      	bx	lr

08014728 <rcl_action_take_result_response>:
 8014728:	2800      	cmp	r0, #0
 801472a:	d037      	beq.n	801479c <rcl_action_take_result_response+0x74>
 801472c:	b570      	push	{r4, r5, r6, lr}
 801472e:	4604      	mov	r4, r0
 8014730:	6800      	ldr	r0, [r0, #0]
 8014732:	b370      	cbz	r0, 8014792 <rcl_action_take_result_response+0x6a>
 8014734:	460d      	mov	r5, r1
 8014736:	4616      	mov	r6, r2
 8014738:	f7fd fe0a 	bl	8012350 <rcl_client_is_valid>
 801473c:	b338      	cbz	r0, 801478e <rcl_action_take_result_response+0x66>
 801473e:	6820      	ldr	r0, [r4, #0]
 8014740:	3004      	adds	r0, #4
 8014742:	f7fd fe05 	bl	8012350 <rcl_client_is_valid>
 8014746:	b310      	cbz	r0, 801478e <rcl_action_take_result_response+0x66>
 8014748:	6820      	ldr	r0, [r4, #0]
 801474a:	3008      	adds	r0, #8
 801474c:	f7fd fe00 	bl	8012350 <rcl_client_is_valid>
 8014750:	b1e8      	cbz	r0, 801478e <rcl_action_take_result_response+0x66>
 8014752:	6820      	ldr	r0, [r4, #0]
 8014754:	300c      	adds	r0, #12
 8014756:	f7fe fd3d 	bl	80131d4 <rcl_subscription_is_valid>
 801475a:	b1c0      	cbz	r0, 801478e <rcl_action_take_result_response+0x66>
 801475c:	6820      	ldr	r0, [r4, #0]
 801475e:	3010      	adds	r0, #16
 8014760:	f7fe fd38 	bl	80131d4 <rcl_subscription_is_valid>
 8014764:	b198      	cbz	r0, 801478e <rcl_action_take_result_response+0x66>
 8014766:	b1bd      	cbz	r5, 8014798 <rcl_action_take_result_response+0x70>
 8014768:	b1b6      	cbz	r6, 8014798 <rcl_action_take_result_response+0x70>
 801476a:	6820      	ldr	r0, [r4, #0]
 801476c:	4632      	mov	r2, r6
 801476e:	4629      	mov	r1, r5
 8014770:	3008      	adds	r0, #8
 8014772:	f7fd fd81 	bl	8012278 <rcl_take_response>
 8014776:	b148      	cbz	r0, 801478c <rcl_action_take_result_response+0x64>
 8014778:	280a      	cmp	r0, #10
 801477a:	d007      	beq.n	801478c <rcl_action_take_result_response+0x64>
 801477c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014780:	f241 0307 	movw	r3, #4103	@ 0x1007
 8014784:	4290      	cmp	r0, r2
 8014786:	bf0c      	ite	eq
 8014788:	4618      	moveq	r0, r3
 801478a:	2001      	movne	r0, #1
 801478c:	bd70      	pop	{r4, r5, r6, pc}
 801478e:	f7f7 fc57 	bl	800c040 <rcutils_reset_error>
 8014792:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014796:	bd70      	pop	{r4, r5, r6, pc}
 8014798:	200b      	movs	r0, #11
 801479a:	bd70      	pop	{r4, r5, r6, pc}
 801479c:	f241 0006 	movw	r0, #4102	@ 0x1006
 80147a0:	4770      	bx	lr
 80147a2:	bf00      	nop

080147a4 <rcl_action_take_cancel_response>:
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d037      	beq.n	8014818 <rcl_action_take_cancel_response+0x74>
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	4604      	mov	r4, r0
 80147ac:	6800      	ldr	r0, [r0, #0]
 80147ae:	b370      	cbz	r0, 801480e <rcl_action_take_cancel_response+0x6a>
 80147b0:	460d      	mov	r5, r1
 80147b2:	4616      	mov	r6, r2
 80147b4:	f7fd fdcc 	bl	8012350 <rcl_client_is_valid>
 80147b8:	b338      	cbz	r0, 801480a <rcl_action_take_cancel_response+0x66>
 80147ba:	6820      	ldr	r0, [r4, #0]
 80147bc:	3004      	adds	r0, #4
 80147be:	f7fd fdc7 	bl	8012350 <rcl_client_is_valid>
 80147c2:	b310      	cbz	r0, 801480a <rcl_action_take_cancel_response+0x66>
 80147c4:	6820      	ldr	r0, [r4, #0]
 80147c6:	3008      	adds	r0, #8
 80147c8:	f7fd fdc2 	bl	8012350 <rcl_client_is_valid>
 80147cc:	b1e8      	cbz	r0, 801480a <rcl_action_take_cancel_response+0x66>
 80147ce:	6820      	ldr	r0, [r4, #0]
 80147d0:	300c      	adds	r0, #12
 80147d2:	f7fe fcff 	bl	80131d4 <rcl_subscription_is_valid>
 80147d6:	b1c0      	cbz	r0, 801480a <rcl_action_take_cancel_response+0x66>
 80147d8:	6820      	ldr	r0, [r4, #0]
 80147da:	3010      	adds	r0, #16
 80147dc:	f7fe fcfa 	bl	80131d4 <rcl_subscription_is_valid>
 80147e0:	b198      	cbz	r0, 801480a <rcl_action_take_cancel_response+0x66>
 80147e2:	b1bd      	cbz	r5, 8014814 <rcl_action_take_cancel_response+0x70>
 80147e4:	b1b6      	cbz	r6, 8014814 <rcl_action_take_cancel_response+0x70>
 80147e6:	6820      	ldr	r0, [r4, #0]
 80147e8:	4632      	mov	r2, r6
 80147ea:	4629      	mov	r1, r5
 80147ec:	3004      	adds	r0, #4
 80147ee:	f7fd fd43 	bl	8012278 <rcl_take_response>
 80147f2:	b148      	cbz	r0, 8014808 <rcl_action_take_cancel_response+0x64>
 80147f4:	280a      	cmp	r0, #10
 80147f6:	d007      	beq.n	8014808 <rcl_action_take_cancel_response+0x64>
 80147f8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80147fc:	f241 0307 	movw	r3, #4103	@ 0x1007
 8014800:	4290      	cmp	r0, r2
 8014802:	bf0c      	ite	eq
 8014804:	4618      	moveq	r0, r3
 8014806:	2001      	movne	r0, #1
 8014808:	bd70      	pop	{r4, r5, r6, pc}
 801480a:	f7f7 fc19 	bl	800c040 <rcutils_reset_error>
 801480e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014812:	bd70      	pop	{r4, r5, r6, pc}
 8014814:	200b      	movs	r0, #11
 8014816:	bd70      	pop	{r4, r5, r6, pc}
 8014818:	f241 0006 	movw	r0, #4102	@ 0x1006
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop

08014820 <rcl_action_take_feedback>:
 8014820:	2800      	cmp	r0, #0
 8014822:	d037      	beq.n	8014894 <rcl_action_take_feedback+0x74>
 8014824:	b530      	push	{r4, r5, lr}
 8014826:	4604      	mov	r4, r0
 8014828:	6800      	ldr	r0, [r0, #0]
 801482a:	b08f      	sub	sp, #60	@ 0x3c
 801482c:	b358      	cbz	r0, 8014886 <rcl_action_take_feedback+0x66>
 801482e:	460d      	mov	r5, r1
 8014830:	f7fd fd8e 	bl	8012350 <rcl_client_is_valid>
 8014834:	b328      	cbz	r0, 8014882 <rcl_action_take_feedback+0x62>
 8014836:	6820      	ldr	r0, [r4, #0]
 8014838:	3004      	adds	r0, #4
 801483a:	f7fd fd89 	bl	8012350 <rcl_client_is_valid>
 801483e:	b300      	cbz	r0, 8014882 <rcl_action_take_feedback+0x62>
 8014840:	6820      	ldr	r0, [r4, #0]
 8014842:	3008      	adds	r0, #8
 8014844:	f7fd fd84 	bl	8012350 <rcl_client_is_valid>
 8014848:	b1d8      	cbz	r0, 8014882 <rcl_action_take_feedback+0x62>
 801484a:	6820      	ldr	r0, [r4, #0]
 801484c:	300c      	adds	r0, #12
 801484e:	f7fe fcc1 	bl	80131d4 <rcl_subscription_is_valid>
 8014852:	b1b0      	cbz	r0, 8014882 <rcl_action_take_feedback+0x62>
 8014854:	6820      	ldr	r0, [r4, #0]
 8014856:	3010      	adds	r0, #16
 8014858:	f7fe fcbc 	bl	80131d4 <rcl_subscription_is_valid>
 801485c:	b188      	cbz	r0, 8014882 <rcl_action_take_feedback+0x62>
 801485e:	b1b5      	cbz	r5, 801488e <rcl_action_take_feedback+0x6e>
 8014860:	6820      	ldr	r0, [r4, #0]
 8014862:	2300      	movs	r3, #0
 8014864:	466a      	mov	r2, sp
 8014866:	4629      	mov	r1, r5
 8014868:	300c      	adds	r0, #12
 801486a:	f7fe fc55 	bl	8013118 <rcl_take>
 801486e:	b160      	cbz	r0, 801488a <rcl_action_take_feedback+0x6a>
 8014870:	f240 1391 	movw	r3, #401	@ 0x191
 8014874:	4298      	cmp	r0, r3
 8014876:	d010      	beq.n	801489a <rcl_action_take_feedback+0x7a>
 8014878:	280a      	cmp	r0, #10
 801487a:	bf18      	it	ne
 801487c:	2001      	movne	r0, #1
 801487e:	b00f      	add	sp, #60	@ 0x3c
 8014880:	bd30      	pop	{r4, r5, pc}
 8014882:	f7f7 fbdd 	bl	800c040 <rcutils_reset_error>
 8014886:	f241 0006 	movw	r0, #4102	@ 0x1006
 801488a:	b00f      	add	sp, #60	@ 0x3c
 801488c:	bd30      	pop	{r4, r5, pc}
 801488e:	200b      	movs	r0, #11
 8014890:	b00f      	add	sp, #60	@ 0x3c
 8014892:	bd30      	pop	{r4, r5, pc}
 8014894:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014898:	4770      	bx	lr
 801489a:	f241 0007 	movw	r0, #4103	@ 0x1007
 801489e:	e7f4      	b.n	801488a <rcl_action_take_feedback+0x6a>

080148a0 <rcl_action_wait_set_add_action_client>:
 80148a0:	2800      	cmp	r0, #0
 80148a2:	d045      	beq.n	8014930 <rcl_action_wait_set_add_action_client+0x90>
 80148a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a6:	460c      	mov	r4, r1
 80148a8:	2900      	cmp	r1, #0
 80148aa:	d03e      	beq.n	801492a <rcl_action_wait_set_add_action_client+0x8a>
 80148ac:	4605      	mov	r5, r0
 80148ae:	6808      	ldr	r0, [r1, #0]
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d03a      	beq.n	801492a <rcl_action_wait_set_add_action_client+0x8a>
 80148b4:	4617      	mov	r7, r2
 80148b6:	461e      	mov	r6, r3
 80148b8:	f7fd fd4a 	bl	8012350 <rcl_client_is_valid>
 80148bc:	b398      	cbz	r0, 8014926 <rcl_action_wait_set_add_action_client+0x86>
 80148be:	6820      	ldr	r0, [r4, #0]
 80148c0:	3004      	adds	r0, #4
 80148c2:	f7fd fd45 	bl	8012350 <rcl_client_is_valid>
 80148c6:	b370      	cbz	r0, 8014926 <rcl_action_wait_set_add_action_client+0x86>
 80148c8:	6820      	ldr	r0, [r4, #0]
 80148ca:	3008      	adds	r0, #8
 80148cc:	f7fd fd40 	bl	8012350 <rcl_client_is_valid>
 80148d0:	b348      	cbz	r0, 8014926 <rcl_action_wait_set_add_action_client+0x86>
 80148d2:	6820      	ldr	r0, [r4, #0]
 80148d4:	300c      	adds	r0, #12
 80148d6:	f7fe fc7d 	bl	80131d4 <rcl_subscription_is_valid>
 80148da:	b320      	cbz	r0, 8014926 <rcl_action_wait_set_add_action_client+0x86>
 80148dc:	6820      	ldr	r0, [r4, #0]
 80148de:	3010      	adds	r0, #16
 80148e0:	f7fe fc78 	bl	80131d4 <rcl_subscription_is_valid>
 80148e4:	b1f8      	cbz	r0, 8014926 <rcl_action_wait_set_add_action_client+0x86>
 80148e6:	6821      	ldr	r1, [r4, #0]
 80148e8:	4628      	mov	r0, r5
 80148ea:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80148ee:	f7ff fc71 	bl	80141d4 <rcl_wait_set_add_client>
 80148f2:	b9b8      	cbnz	r0, 8014924 <rcl_action_wait_set_add_action_client+0x84>
 80148f4:	6821      	ldr	r1, [r4, #0]
 80148f6:	4628      	mov	r0, r5
 80148f8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80148fc:	3104      	adds	r1, #4
 80148fe:	f7ff fc69 	bl	80141d4 <rcl_wait_set_add_client>
 8014902:	b978      	cbnz	r0, 8014924 <rcl_action_wait_set_add_action_client+0x84>
 8014904:	6821      	ldr	r1, [r4, #0]
 8014906:	4628      	mov	r0, r5
 8014908:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801490c:	3108      	adds	r1, #8
 801490e:	f7ff fc61 	bl	80141d4 <rcl_wait_set_add_client>
 8014912:	b938      	cbnz	r0, 8014924 <rcl_action_wait_set_add_action_client+0x84>
 8014914:	6821      	ldr	r1, [r4, #0]
 8014916:	4628      	mov	r0, r5
 8014918:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801491c:	310c      	adds	r1, #12
 801491e:	f7ff f903 	bl	8013b28 <rcl_wait_set_add_subscription>
 8014922:	b140      	cbz	r0, 8014936 <rcl_action_wait_set_add_action_client+0x96>
 8014924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014926:	f7f7 fb8b 	bl	800c040 <rcutils_reset_error>
 801492a:	f241 0006 	movw	r0, #4102	@ 0x1006
 801492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014930:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014934:	4770      	bx	lr
 8014936:	6821      	ldr	r1, [r4, #0]
 8014938:	4628      	mov	r0, r5
 801493a:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801493e:	3110      	adds	r1, #16
 8014940:	f7ff f8f2 	bl	8013b28 <rcl_wait_set_add_subscription>
 8014944:	2800      	cmp	r0, #0
 8014946:	d1ed      	bne.n	8014924 <rcl_action_wait_set_add_action_client+0x84>
 8014948:	b11f      	cbz	r7, 8014952 <rcl_action_wait_set_add_action_client+0xb2>
 801494a:	6823      	ldr	r3, [r4, #0]
 801494c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014950:	603b      	str	r3, [r7, #0]
 8014952:	2e00      	cmp	r6, #0
 8014954:	d0e6      	beq.n	8014924 <rcl_action_wait_set_add_action_client+0x84>
 8014956:	6823      	ldr	r3, [r4, #0]
 8014958:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801495c:	6033      	str	r3, [r6, #0]
 801495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014960 <rcl_action_client_wait_set_get_entities_ready>:
 8014960:	2800      	cmp	r0, #0
 8014962:	f000 8089 	beq.w	8014a78 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8014966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801496a:	460c      	mov	r4, r1
 801496c:	2900      	cmp	r1, #0
 801496e:	d079      	beq.n	8014a64 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014970:	4605      	mov	r5, r0
 8014972:	6808      	ldr	r0, [r1, #0]
 8014974:	2800      	cmp	r0, #0
 8014976:	d075      	beq.n	8014a64 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014978:	4616      	mov	r6, r2
 801497a:	461f      	mov	r7, r3
 801497c:	f7fd fce8 	bl	8012350 <rcl_client_is_valid>
 8014980:	2800      	cmp	r0, #0
 8014982:	d06d      	beq.n	8014a60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014984:	6820      	ldr	r0, [r4, #0]
 8014986:	3004      	adds	r0, #4
 8014988:	f7fd fce2 	bl	8012350 <rcl_client_is_valid>
 801498c:	2800      	cmp	r0, #0
 801498e:	d067      	beq.n	8014a60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014990:	6820      	ldr	r0, [r4, #0]
 8014992:	3008      	adds	r0, #8
 8014994:	f7fd fcdc 	bl	8012350 <rcl_client_is_valid>
 8014998:	2800      	cmp	r0, #0
 801499a:	d061      	beq.n	8014a60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801499c:	6820      	ldr	r0, [r4, #0]
 801499e:	300c      	adds	r0, #12
 80149a0:	f7fe fc18 	bl	80131d4 <rcl_subscription_is_valid>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d05b      	beq.n	8014a60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80149a8:	6820      	ldr	r0, [r4, #0]
 80149aa:	3010      	adds	r0, #16
 80149ac:	f7fe fc12 	bl	80131d4 <rcl_subscription_is_valid>
 80149b0:	2800      	cmp	r0, #0
 80149b2:	d055      	beq.n	8014a60 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80149b4:	2e00      	cmp	r6, #0
 80149b6:	d05c      	beq.n	8014a72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 80149b8:	2f00      	cmp	r7, #0
 80149ba:	d05a      	beq.n	8014a72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 80149bc:	9b06      	ldr	r3, [sp, #24]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d057      	beq.n	8014a72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 80149c2:	9b07      	ldr	r3, [sp, #28]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d054      	beq.n	8014a72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 80149c8:	9b08      	ldr	r3, [sp, #32]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d051      	beq.n	8014a72 <rcl_action_client_wait_set_get_entities_ready+0x112>
 80149ce:	6823      	ldr	r3, [r4, #0]
 80149d0:	686a      	ldr	r2, [r5, #4]
 80149d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80149d6:	428a      	cmp	r2, r1
 80149d8:	d948      	bls.n	8014a6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80149da:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80149de:	4282      	cmp	r2, r0
 80149e0:	d944      	bls.n	8014a6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80149e2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80149e6:	69ea      	ldr	r2, [r5, #28]
 80149e8:	42a2      	cmp	r2, r4
 80149ea:	d93f      	bls.n	8014a6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80149ec:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80149f0:	4562      	cmp	r2, ip
 80149f2:	d93b      	bls.n	8014a6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80149f4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80149f8:	4572      	cmp	r2, lr
 80149fa:	d937      	bls.n	8014a6c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80149fc:	69aa      	ldr	r2, [r5, #24]
 80149fe:	682d      	ldr	r5, [r5, #0]
 8014a00:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014a04:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014a08:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8014a0c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014a10:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014a14:	f103 0c0c 	add.w	ip, r3, #12
 8014a18:	eba5 050c 	sub.w	r5, r5, ip
 8014a1c:	fab5 f585 	clz	r5, r5
 8014a20:	096d      	lsrs	r5, r5, #5
 8014a22:	7035      	strb	r5, [r6, #0]
 8014a24:	f103 0510 	add.w	r5, r3, #16
 8014a28:	1b64      	subs	r4, r4, r5
 8014a2a:	fab4 f484 	clz	r4, r4
 8014a2e:	0964      	lsrs	r4, r4, #5
 8014a30:	703c      	strb	r4, [r7, #0]
 8014a32:	eba3 0008 	sub.w	r0, r3, r8
 8014a36:	1d1c      	adds	r4, r3, #4
 8014a38:	3308      	adds	r3, #8
 8014a3a:	1ad3      	subs	r3, r2, r3
 8014a3c:	fab0 f080 	clz	r0, r0
 8014a40:	9a06      	ldr	r2, [sp, #24]
 8014a42:	0940      	lsrs	r0, r0, #5
 8014a44:	1b09      	subs	r1, r1, r4
 8014a46:	7010      	strb	r0, [r2, #0]
 8014a48:	fab1 f181 	clz	r1, r1
 8014a4c:	9a07      	ldr	r2, [sp, #28]
 8014a4e:	0949      	lsrs	r1, r1, #5
 8014a50:	7011      	strb	r1, [r2, #0]
 8014a52:	fab3 f383 	clz	r3, r3
 8014a56:	9a08      	ldr	r2, [sp, #32]
 8014a58:	095b      	lsrs	r3, r3, #5
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	7013      	strb	r3, [r2, #0]
 8014a5e:	e003      	b.n	8014a68 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014a60:	f7f7 faee 	bl	800c040 <rcutils_reset_error>
 8014a64:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a6c:	2001      	movs	r0, #1
 8014a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a72:	200b      	movs	r0, #11
 8014a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a78:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014a7c:	4770      	bx	lr
 8014a7e:	bf00      	nop

08014a80 <rcl_action_take_goal_request>:
 8014a80:	b3b0      	cbz	r0, 8014af0 <rcl_action_take_goal_request+0x70>
 8014a82:	b570      	push	{r4, r5, r6, lr}
 8014a84:	4604      	mov	r4, r0
 8014a86:	6800      	ldr	r0, [r0, #0]
 8014a88:	b368      	cbz	r0, 8014ae6 <rcl_action_take_goal_request+0x66>
 8014a8a:	460d      	mov	r5, r1
 8014a8c:	4616      	mov	r6, r2
 8014a8e:	f7fe f9ef 	bl	8012e70 <rcl_service_is_valid>
 8014a92:	b330      	cbz	r0, 8014ae2 <rcl_action_take_goal_request+0x62>
 8014a94:	6820      	ldr	r0, [r4, #0]
 8014a96:	3004      	adds	r0, #4
 8014a98:	f7fe f9ea 	bl	8012e70 <rcl_service_is_valid>
 8014a9c:	b308      	cbz	r0, 8014ae2 <rcl_action_take_goal_request+0x62>
 8014a9e:	6820      	ldr	r0, [r4, #0]
 8014aa0:	3008      	adds	r0, #8
 8014aa2:	f7fe f9e5 	bl	8012e70 <rcl_service_is_valid>
 8014aa6:	b1e0      	cbz	r0, 8014ae2 <rcl_action_take_goal_request+0x62>
 8014aa8:	6820      	ldr	r0, [r4, #0]
 8014aaa:	300c      	adds	r0, #12
 8014aac:	f7f6 fb38 	bl	800b120 <rcl_publisher_is_valid>
 8014ab0:	b1b8      	cbz	r0, 8014ae2 <rcl_action_take_goal_request+0x62>
 8014ab2:	6820      	ldr	r0, [r4, #0]
 8014ab4:	3010      	adds	r0, #16
 8014ab6:	f7f6 fb33 	bl	800b120 <rcl_publisher_is_valid>
 8014aba:	b190      	cbz	r0, 8014ae2 <rcl_action_take_goal_request+0x62>
 8014abc:	b1b5      	cbz	r5, 8014aec <rcl_action_take_goal_request+0x6c>
 8014abe:	b1ae      	cbz	r6, 8014aec <rcl_action_take_goal_request+0x6c>
 8014ac0:	6820      	ldr	r0, [r4, #0]
 8014ac2:	4632      	mov	r2, r6
 8014ac4:	4629      	mov	r1, r5
 8014ac6:	f7fe f953 	bl	8012d70 <rcl_take_request>
 8014aca:	b148      	cbz	r0, 8014ae0 <rcl_action_take_goal_request+0x60>
 8014acc:	280a      	cmp	r0, #10
 8014ace:	d007      	beq.n	8014ae0 <rcl_action_take_goal_request+0x60>
 8014ad0:	f240 2259 	movw	r2, #601	@ 0x259
 8014ad4:	f241 0369 	movw	r3, #4201	@ 0x1069
 8014ad8:	4290      	cmp	r0, r2
 8014ada:	bf0c      	ite	eq
 8014adc:	4618      	moveq	r0, r3
 8014ade:	2001      	movne	r0, #1
 8014ae0:	bd70      	pop	{r4, r5, r6, pc}
 8014ae2:	f7f7 faad 	bl	800c040 <rcutils_reset_error>
 8014ae6:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014aea:	bd70      	pop	{r4, r5, r6, pc}
 8014aec:	200b      	movs	r0, #11
 8014aee:	bd70      	pop	{r4, r5, r6, pc}
 8014af0:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014af4:	4770      	bx	lr
 8014af6:	bf00      	nop

08014af8 <rcl_action_send_goal_response>:
 8014af8:	b378      	cbz	r0, 8014b5a <rcl_action_send_goal_response+0x62>
 8014afa:	b570      	push	{r4, r5, r6, lr}
 8014afc:	4604      	mov	r4, r0
 8014afe:	6800      	ldr	r0, [r0, #0]
 8014b00:	b330      	cbz	r0, 8014b50 <rcl_action_send_goal_response+0x58>
 8014b02:	460d      	mov	r5, r1
 8014b04:	4616      	mov	r6, r2
 8014b06:	f7fe f9b3 	bl	8012e70 <rcl_service_is_valid>
 8014b0a:	b1f8      	cbz	r0, 8014b4c <rcl_action_send_goal_response+0x54>
 8014b0c:	6820      	ldr	r0, [r4, #0]
 8014b0e:	3004      	adds	r0, #4
 8014b10:	f7fe f9ae 	bl	8012e70 <rcl_service_is_valid>
 8014b14:	b1d0      	cbz	r0, 8014b4c <rcl_action_send_goal_response+0x54>
 8014b16:	6820      	ldr	r0, [r4, #0]
 8014b18:	3008      	adds	r0, #8
 8014b1a:	f7fe f9a9 	bl	8012e70 <rcl_service_is_valid>
 8014b1e:	b1a8      	cbz	r0, 8014b4c <rcl_action_send_goal_response+0x54>
 8014b20:	6820      	ldr	r0, [r4, #0]
 8014b22:	300c      	adds	r0, #12
 8014b24:	f7f6 fafc 	bl	800b120 <rcl_publisher_is_valid>
 8014b28:	b180      	cbz	r0, 8014b4c <rcl_action_send_goal_response+0x54>
 8014b2a:	6820      	ldr	r0, [r4, #0]
 8014b2c:	3010      	adds	r0, #16
 8014b2e:	f7f6 faf7 	bl	800b120 <rcl_publisher_is_valid>
 8014b32:	b158      	cbz	r0, 8014b4c <rcl_action_send_goal_response+0x54>
 8014b34:	b17d      	cbz	r5, 8014b56 <rcl_action_send_goal_response+0x5e>
 8014b36:	b176      	cbz	r6, 8014b56 <rcl_action_send_goal_response+0x5e>
 8014b38:	6820      	ldr	r0, [r4, #0]
 8014b3a:	4632      	mov	r2, r6
 8014b3c:	4629      	mov	r1, r5
 8014b3e:	f7fe f967 	bl	8012e10 <rcl_send_response>
 8014b42:	b110      	cbz	r0, 8014b4a <rcl_action_send_goal_response+0x52>
 8014b44:	2802      	cmp	r0, #2
 8014b46:	bf18      	it	ne
 8014b48:	2001      	movne	r0, #1
 8014b4a:	bd70      	pop	{r4, r5, r6, pc}
 8014b4c:	f7f7 fa78 	bl	800c040 <rcutils_reset_error>
 8014b50:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014b54:	bd70      	pop	{r4, r5, r6, pc}
 8014b56:	200b      	movs	r0, #11
 8014b58:	bd70      	pop	{r4, r5, r6, pc}
 8014b5a:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014b5e:	4770      	bx	lr

08014b60 <rcl_action_take_result_request>:
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d037      	beq.n	8014bd4 <rcl_action_take_result_request+0x74>
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	4604      	mov	r4, r0
 8014b68:	6800      	ldr	r0, [r0, #0]
 8014b6a:	b370      	cbz	r0, 8014bca <rcl_action_take_result_request+0x6a>
 8014b6c:	460d      	mov	r5, r1
 8014b6e:	4616      	mov	r6, r2
 8014b70:	f7fe f97e 	bl	8012e70 <rcl_service_is_valid>
 8014b74:	b338      	cbz	r0, 8014bc6 <rcl_action_take_result_request+0x66>
 8014b76:	6820      	ldr	r0, [r4, #0]
 8014b78:	3004      	adds	r0, #4
 8014b7a:	f7fe f979 	bl	8012e70 <rcl_service_is_valid>
 8014b7e:	b310      	cbz	r0, 8014bc6 <rcl_action_take_result_request+0x66>
 8014b80:	6820      	ldr	r0, [r4, #0]
 8014b82:	3008      	adds	r0, #8
 8014b84:	f7fe f974 	bl	8012e70 <rcl_service_is_valid>
 8014b88:	b1e8      	cbz	r0, 8014bc6 <rcl_action_take_result_request+0x66>
 8014b8a:	6820      	ldr	r0, [r4, #0]
 8014b8c:	300c      	adds	r0, #12
 8014b8e:	f7f6 fac7 	bl	800b120 <rcl_publisher_is_valid>
 8014b92:	b1c0      	cbz	r0, 8014bc6 <rcl_action_take_result_request+0x66>
 8014b94:	6820      	ldr	r0, [r4, #0]
 8014b96:	3010      	adds	r0, #16
 8014b98:	f7f6 fac2 	bl	800b120 <rcl_publisher_is_valid>
 8014b9c:	b198      	cbz	r0, 8014bc6 <rcl_action_take_result_request+0x66>
 8014b9e:	b1bd      	cbz	r5, 8014bd0 <rcl_action_take_result_request+0x70>
 8014ba0:	b1b6      	cbz	r6, 8014bd0 <rcl_action_take_result_request+0x70>
 8014ba2:	6820      	ldr	r0, [r4, #0]
 8014ba4:	4632      	mov	r2, r6
 8014ba6:	4629      	mov	r1, r5
 8014ba8:	3008      	adds	r0, #8
 8014baa:	f7fe f8e1 	bl	8012d70 <rcl_take_request>
 8014bae:	b148      	cbz	r0, 8014bc4 <rcl_action_take_result_request+0x64>
 8014bb0:	280a      	cmp	r0, #10
 8014bb2:	d007      	beq.n	8014bc4 <rcl_action_take_result_request+0x64>
 8014bb4:	f240 2259 	movw	r2, #601	@ 0x259
 8014bb8:	f241 0369 	movw	r3, #4201	@ 0x1069
 8014bbc:	4290      	cmp	r0, r2
 8014bbe:	bf0c      	ite	eq
 8014bc0:	4618      	moveq	r0, r3
 8014bc2:	2001      	movne	r0, #1
 8014bc4:	bd70      	pop	{r4, r5, r6, pc}
 8014bc6:	f7f7 fa3b 	bl	800c040 <rcutils_reset_error>
 8014bca:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014bce:	bd70      	pop	{r4, r5, r6, pc}
 8014bd0:	200b      	movs	r0, #11
 8014bd2:	bd70      	pop	{r4, r5, r6, pc}
 8014bd4:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014bd8:	4770      	bx	lr
 8014bda:	bf00      	nop

08014bdc <rcl_action_take_cancel_request>:
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d037      	beq.n	8014c50 <rcl_action_take_cancel_request+0x74>
 8014be0:	b570      	push	{r4, r5, r6, lr}
 8014be2:	4604      	mov	r4, r0
 8014be4:	6800      	ldr	r0, [r0, #0]
 8014be6:	b370      	cbz	r0, 8014c46 <rcl_action_take_cancel_request+0x6a>
 8014be8:	460d      	mov	r5, r1
 8014bea:	4616      	mov	r6, r2
 8014bec:	f7fe f940 	bl	8012e70 <rcl_service_is_valid>
 8014bf0:	b338      	cbz	r0, 8014c42 <rcl_action_take_cancel_request+0x66>
 8014bf2:	6820      	ldr	r0, [r4, #0]
 8014bf4:	3004      	adds	r0, #4
 8014bf6:	f7fe f93b 	bl	8012e70 <rcl_service_is_valid>
 8014bfa:	b310      	cbz	r0, 8014c42 <rcl_action_take_cancel_request+0x66>
 8014bfc:	6820      	ldr	r0, [r4, #0]
 8014bfe:	3008      	adds	r0, #8
 8014c00:	f7fe f936 	bl	8012e70 <rcl_service_is_valid>
 8014c04:	b1e8      	cbz	r0, 8014c42 <rcl_action_take_cancel_request+0x66>
 8014c06:	6820      	ldr	r0, [r4, #0]
 8014c08:	300c      	adds	r0, #12
 8014c0a:	f7f6 fa89 	bl	800b120 <rcl_publisher_is_valid>
 8014c0e:	b1c0      	cbz	r0, 8014c42 <rcl_action_take_cancel_request+0x66>
 8014c10:	6820      	ldr	r0, [r4, #0]
 8014c12:	3010      	adds	r0, #16
 8014c14:	f7f6 fa84 	bl	800b120 <rcl_publisher_is_valid>
 8014c18:	b198      	cbz	r0, 8014c42 <rcl_action_take_cancel_request+0x66>
 8014c1a:	b1bd      	cbz	r5, 8014c4c <rcl_action_take_cancel_request+0x70>
 8014c1c:	b1b6      	cbz	r6, 8014c4c <rcl_action_take_cancel_request+0x70>
 8014c1e:	6820      	ldr	r0, [r4, #0]
 8014c20:	4632      	mov	r2, r6
 8014c22:	4629      	mov	r1, r5
 8014c24:	3004      	adds	r0, #4
 8014c26:	f7fe f8a3 	bl	8012d70 <rcl_take_request>
 8014c2a:	b148      	cbz	r0, 8014c40 <rcl_action_take_cancel_request+0x64>
 8014c2c:	280a      	cmp	r0, #10
 8014c2e:	d007      	beq.n	8014c40 <rcl_action_take_cancel_request+0x64>
 8014c30:	f240 2259 	movw	r2, #601	@ 0x259
 8014c34:	f241 0369 	movw	r3, #4201	@ 0x1069
 8014c38:	4290      	cmp	r0, r2
 8014c3a:	bf0c      	ite	eq
 8014c3c:	4618      	moveq	r0, r3
 8014c3e:	2001      	movne	r0, #1
 8014c40:	bd70      	pop	{r4, r5, r6, pc}
 8014c42:	f7f7 f9fd 	bl	800c040 <rcutils_reset_error>
 8014c46:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014c4a:	bd70      	pop	{r4, r5, r6, pc}
 8014c4c:	200b      	movs	r0, #11
 8014c4e:	bd70      	pop	{r4, r5, r6, pc}
 8014c50:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop

08014c58 <rcl_action_send_cancel_response>:
 8014c58:	b380      	cbz	r0, 8014cbc <rcl_action_send_cancel_response+0x64>
 8014c5a:	b570      	push	{r4, r5, r6, lr}
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	6800      	ldr	r0, [r0, #0]
 8014c60:	b338      	cbz	r0, 8014cb2 <rcl_action_send_cancel_response+0x5a>
 8014c62:	460d      	mov	r5, r1
 8014c64:	4616      	mov	r6, r2
 8014c66:	f7fe f903 	bl	8012e70 <rcl_service_is_valid>
 8014c6a:	b300      	cbz	r0, 8014cae <rcl_action_send_cancel_response+0x56>
 8014c6c:	6820      	ldr	r0, [r4, #0]
 8014c6e:	3004      	adds	r0, #4
 8014c70:	f7fe f8fe 	bl	8012e70 <rcl_service_is_valid>
 8014c74:	b1d8      	cbz	r0, 8014cae <rcl_action_send_cancel_response+0x56>
 8014c76:	6820      	ldr	r0, [r4, #0]
 8014c78:	3008      	adds	r0, #8
 8014c7a:	f7fe f8f9 	bl	8012e70 <rcl_service_is_valid>
 8014c7e:	b1b0      	cbz	r0, 8014cae <rcl_action_send_cancel_response+0x56>
 8014c80:	6820      	ldr	r0, [r4, #0]
 8014c82:	300c      	adds	r0, #12
 8014c84:	f7f6 fa4c 	bl	800b120 <rcl_publisher_is_valid>
 8014c88:	b188      	cbz	r0, 8014cae <rcl_action_send_cancel_response+0x56>
 8014c8a:	6820      	ldr	r0, [r4, #0]
 8014c8c:	3010      	adds	r0, #16
 8014c8e:	f7f6 fa47 	bl	800b120 <rcl_publisher_is_valid>
 8014c92:	b160      	cbz	r0, 8014cae <rcl_action_send_cancel_response+0x56>
 8014c94:	b185      	cbz	r5, 8014cb8 <rcl_action_send_cancel_response+0x60>
 8014c96:	b17e      	cbz	r6, 8014cb8 <rcl_action_send_cancel_response+0x60>
 8014c98:	6820      	ldr	r0, [r4, #0]
 8014c9a:	4632      	mov	r2, r6
 8014c9c:	4629      	mov	r1, r5
 8014c9e:	3004      	adds	r0, #4
 8014ca0:	f7fe f8b6 	bl	8012e10 <rcl_send_response>
 8014ca4:	b110      	cbz	r0, 8014cac <rcl_action_send_cancel_response+0x54>
 8014ca6:	2802      	cmp	r0, #2
 8014ca8:	bf18      	it	ne
 8014caa:	2001      	movne	r0, #1
 8014cac:	bd70      	pop	{r4, r5, r6, pc}
 8014cae:	f7f7 f9c7 	bl	800c040 <rcutils_reset_error>
 8014cb2:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014cb6:	bd70      	pop	{r4, r5, r6, pc}
 8014cb8:	200b      	movs	r0, #11
 8014cba:	bd70      	pop	{r4, r5, r6, pc}
 8014cbc:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014cc0:	4770      	bx	lr
 8014cc2:	bf00      	nop

08014cc4 <rcl_action_wait_set_add_action_server>:
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d04a      	beq.n	8014d5e <rcl_action_wait_set_add_action_server+0x9a>
 8014cc8:	b570      	push	{r4, r5, r6, lr}
 8014cca:	460c      	mov	r4, r1
 8014ccc:	2900      	cmp	r1, #0
 8014cce:	d043      	beq.n	8014d58 <rcl_action_wait_set_add_action_server+0x94>
 8014cd0:	4605      	mov	r5, r0
 8014cd2:	6808      	ldr	r0, [r1, #0]
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	d03f      	beq.n	8014d58 <rcl_action_wait_set_add_action_server+0x94>
 8014cd8:	4616      	mov	r6, r2
 8014cda:	f7fe f8c9 	bl	8012e70 <rcl_service_is_valid>
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	d038      	beq.n	8014d54 <rcl_action_wait_set_add_action_server+0x90>
 8014ce2:	6820      	ldr	r0, [r4, #0]
 8014ce4:	3004      	adds	r0, #4
 8014ce6:	f7fe f8c3 	bl	8012e70 <rcl_service_is_valid>
 8014cea:	b398      	cbz	r0, 8014d54 <rcl_action_wait_set_add_action_server+0x90>
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	3008      	adds	r0, #8
 8014cf0:	f7fe f8be 	bl	8012e70 <rcl_service_is_valid>
 8014cf4:	b370      	cbz	r0, 8014d54 <rcl_action_wait_set_add_action_server+0x90>
 8014cf6:	6820      	ldr	r0, [r4, #0]
 8014cf8:	300c      	adds	r0, #12
 8014cfa:	f7f6 fa2b 	bl	800b154 <rcl_publisher_is_valid_except_context>
 8014cfe:	b348      	cbz	r0, 8014d54 <rcl_action_wait_set_add_action_server+0x90>
 8014d00:	6820      	ldr	r0, [r4, #0]
 8014d02:	3010      	adds	r0, #16
 8014d04:	f7f6 fa26 	bl	800b154 <rcl_publisher_is_valid_except_context>
 8014d08:	b320      	cbz	r0, 8014d54 <rcl_action_wait_set_add_action_server+0x90>
 8014d0a:	6821      	ldr	r1, [r4, #0]
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8014d12:	f7ff fa8b 	bl	801422c <rcl_wait_set_add_service>
 8014d16:	b9e0      	cbnz	r0, 8014d52 <rcl_action_wait_set_add_action_server+0x8e>
 8014d18:	6821      	ldr	r1, [r4, #0]
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8014d20:	3104      	adds	r1, #4
 8014d22:	f7ff fa83 	bl	801422c <rcl_wait_set_add_service>
 8014d26:	b9a0      	cbnz	r0, 8014d52 <rcl_action_wait_set_add_action_server+0x8e>
 8014d28:	6821      	ldr	r1, [r4, #0]
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8014d30:	3108      	adds	r1, #8
 8014d32:	f7ff fa7b 	bl	801422c <rcl_wait_set_add_service>
 8014d36:	b960      	cbnz	r0, 8014d52 <rcl_action_wait_set_add_action_server+0x8e>
 8014d38:	6821      	ldr	r1, [r4, #0]
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014d40:	3114      	adds	r1, #20
 8014d42:	f7ff fa17 	bl	8014174 <rcl_wait_set_add_timer>
 8014d46:	b920      	cbnz	r0, 8014d52 <rcl_action_wait_set_add_action_server+0x8e>
 8014d48:	b11e      	cbz	r6, 8014d52 <rcl_action_wait_set_add_action_server+0x8e>
 8014d4a:	6823      	ldr	r3, [r4, #0]
 8014d4c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8014d50:	6033      	str	r3, [r6, #0]
 8014d52:	bd70      	pop	{r4, r5, r6, pc}
 8014d54:	f7f7 f974 	bl	800c040 <rcutils_reset_error>
 8014d58:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014d5c:	bd70      	pop	{r4, r5, r6, pc}
 8014d5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014d62:	4770      	bx	lr

08014d64 <rcl_action_server_wait_set_get_entities_ready>:
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d060      	beq.n	8014e2a <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8014d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d6a:	460c      	mov	r4, r1
 8014d6c:	2900      	cmp	r1, #0
 8014d6e:	d057      	beq.n	8014e20 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8014d70:	4605      	mov	r5, r0
 8014d72:	6808      	ldr	r0, [r1, #0]
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d053      	beq.n	8014e20 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8014d78:	4616      	mov	r6, r2
 8014d7a:	461f      	mov	r7, r3
 8014d7c:	f7fe f878 	bl	8012e70 <rcl_service_is_valid>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d04b      	beq.n	8014e1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8014d84:	6820      	ldr	r0, [r4, #0]
 8014d86:	3004      	adds	r0, #4
 8014d88:	f7fe f872 	bl	8012e70 <rcl_service_is_valid>
 8014d8c:	2800      	cmp	r0, #0
 8014d8e:	d045      	beq.n	8014e1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8014d90:	6820      	ldr	r0, [r4, #0]
 8014d92:	3008      	adds	r0, #8
 8014d94:	f7fe f86c 	bl	8012e70 <rcl_service_is_valid>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d03f      	beq.n	8014e1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8014d9c:	6820      	ldr	r0, [r4, #0]
 8014d9e:	300c      	adds	r0, #12
 8014da0:	f7f6 f9d8 	bl	800b154 <rcl_publisher_is_valid_except_context>
 8014da4:	2800      	cmp	r0, #0
 8014da6:	d039      	beq.n	8014e1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8014da8:	6820      	ldr	r0, [r4, #0]
 8014daa:	3010      	adds	r0, #16
 8014dac:	f7f6 f9d2 	bl	800b154 <rcl_publisher_is_valid_except_context>
 8014db0:	b3a0      	cbz	r0, 8014e1c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8014db2:	b3c6      	cbz	r6, 8014e26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8014db4:	b3bf      	cbz	r7, 8014e26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8014db6:	9b06      	ldr	r3, [sp, #24]
 8014db8:	b3ab      	cbz	r3, 8014e26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8014dba:	9b07      	ldr	r3, [sp, #28]
 8014dbc:	b39b      	cbz	r3, 8014e26 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8014dbe:	6823      	ldr	r3, [r4, #0]
 8014dc0:	692a      	ldr	r2, [r5, #16]
 8014dc2:	6a2c      	ldr	r4, [r5, #32]
 8014dc4:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8014dc8:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 8014dcc:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8014dd0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014dd4:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8014dd8:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 8014ddc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8014de0:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014de4:	1ae4      	subs	r4, r4, r3
 8014de6:	fab4 f484 	clz	r4, r4
 8014dea:	0964      	lsrs	r4, r4, #5
 8014dec:	7034      	strb	r4, [r6, #0]
 8014dee:	1d1c      	adds	r4, r3, #4
 8014df0:	1b00      	subs	r0, r0, r4
 8014df2:	fab0 f080 	clz	r0, r0
 8014df6:	0940      	lsrs	r0, r0, #5
 8014df8:	7038      	strb	r0, [r7, #0]
 8014dfa:	f103 0008 	add.w	r0, r3, #8
 8014dfe:	1a09      	subs	r1, r1, r0
 8014e00:	3314      	adds	r3, #20
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	fab1 f181 	clz	r1, r1
 8014e08:	9a06      	ldr	r2, [sp, #24]
 8014e0a:	0949      	lsrs	r1, r1, #5
 8014e0c:	7011      	strb	r1, [r2, #0]
 8014e0e:	fab3 f383 	clz	r3, r3
 8014e12:	9a07      	ldr	r2, [sp, #28]
 8014e14:	095b      	lsrs	r3, r3, #5
 8014e16:	2000      	movs	r0, #0
 8014e18:	7013      	strb	r3, [r2, #0]
 8014e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e1c:	f7f7 f910 	bl	800c040 <rcutils_reset_error>
 8014e20:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e26:	200b      	movs	r0, #11
 8014e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014e2e:	4770      	bx	lr

08014e30 <_execute_event_handler>:
 8014e30:	2002      	movs	r0, #2
 8014e32:	4770      	bx	lr

08014e34 <_cancel_goal_event_handler>:
 8014e34:	2003      	movs	r0, #3
 8014e36:	4770      	bx	lr

08014e38 <_succeed_event_handler>:
 8014e38:	2004      	movs	r0, #4
 8014e3a:	4770      	bx	lr

08014e3c <_abort_event_handler>:
 8014e3c:	2006      	movs	r0, #6
 8014e3e:	4770      	bx	lr

08014e40 <_canceled_event_handler>:
 8014e40:	2005      	movs	r0, #5
 8014e42:	4770      	bx	lr

08014e44 <rcl_action_transition_goal_state>:
 8014e44:	fa5f fc80 	uxtb.w	ip, r0
 8014e48:	f1bc 0f06 	cmp.w	ip, #6
 8014e4c:	d80c      	bhi.n	8014e68 <rcl_action_transition_goal_state+0x24>
 8014e4e:	2904      	cmp	r1, #4
 8014e50:	d80a      	bhi.n	8014e68 <rcl_action_transition_goal_state+0x24>
 8014e52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8014e56:	b410      	push	{r4}
 8014e58:	440b      	add	r3, r1
 8014e5a:	4c06      	ldr	r4, [pc, #24]	@ (8014e74 <rcl_action_transition_goal_state+0x30>)
 8014e5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014e60:	b123      	cbz	r3, 8014e6c <rcl_action_transition_goal_state+0x28>
 8014e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e66:	4718      	bx	r3
 8014e68:	2000      	movs	r0, #0
 8014e6a:	4770      	bx	lr
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e72:	4770      	bx	lr
 8014e74:	0801baa8 	.word	0x0801baa8

08014e78 <rcl_action_get_zero_initialized_cancel_response>:
 8014e78:	b510      	push	{r4, lr}
 8014e7a:	4c07      	ldr	r4, [pc, #28]	@ (8014e98 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014e7c:	4686      	mov	lr, r0
 8014e7e:	4684      	mov	ip, r0
 8014e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e8c:	6823      	ldr	r3, [r4, #0]
 8014e8e:	f8cc 3000 	str.w	r3, [ip]
 8014e92:	4670      	mov	r0, lr
 8014e94:	bd10      	pop	{r4, pc}
 8014e96:	bf00      	nop
 8014e98:	0801bb34 	.word	0x0801bb34

08014e9c <rclc_action_send_result_request>:
 8014e9c:	b1d0      	cbz	r0, 8014ed4 <rclc_action_send_result_request+0x38>
 8014e9e:	b500      	push	{lr}
 8014ea0:	4684      	mov	ip, r0
 8014ea2:	b087      	sub	sp, #28
 8014ea4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014ea8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014eac:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014eb0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8014eb4:	f10d 0e08 	add.w	lr, sp, #8
 8014eb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014ebc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014ec0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8014ec4:	a902      	add	r1, sp, #8
 8014ec6:	3010      	adds	r0, #16
 8014ec8:	f7ff fbfa 	bl	80146c0 <rcl_action_send_result_request>
 8014ecc:	b920      	cbnz	r0, 8014ed8 <rclc_action_send_result_request+0x3c>
 8014ece:	b007      	add	sp, #28
 8014ed0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ed4:	200b      	movs	r0, #11
 8014ed6:	4770      	bx	lr
 8014ed8:	9001      	str	r0, [sp, #4]
 8014eda:	f7f7 f8b1 	bl	800c040 <rcutils_reset_error>
 8014ede:	9801      	ldr	r0, [sp, #4]
 8014ee0:	b007      	add	sp, #28
 8014ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ee6:	bf00      	nop

08014ee8 <rclc_action_take_goal_handle>:
 8014ee8:	4603      	mov	r3, r0
 8014eea:	b158      	cbz	r0, 8014f04 <rclc_action_take_goal_handle+0x1c>
 8014eec:	6880      	ldr	r0, [r0, #8]
 8014eee:	b148      	cbz	r0, 8014f04 <rclc_action_take_goal_handle+0x1c>
 8014ef0:	6801      	ldr	r1, [r0, #0]
 8014ef2:	6099      	str	r1, [r3, #8]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	7202      	strb	r2, [r0, #8]
 8014ef8:	68d9      	ldr	r1, [r3, #12]
 8014efa:	6001      	str	r1, [r0, #0]
 8014efc:	6202      	str	r2, [r0, #32]
 8014efe:	8482      	strh	r2, [r0, #36]	@ 0x24
 8014f00:	60d8      	str	r0, [r3, #12]
 8014f02:	4770      	bx	lr
 8014f04:	4770      	bx	lr
 8014f06:	bf00      	nop

08014f08 <rclc_action_remove_used_goal_handle>:
 8014f08:	b180      	cbz	r0, 8014f2c <rclc_action_remove_used_goal_handle+0x24>
 8014f0a:	b179      	cbz	r1, 8014f2c <rclc_action_remove_used_goal_handle+0x24>
 8014f0c:	68c3      	ldr	r3, [r0, #12]
 8014f0e:	4299      	cmp	r1, r3
 8014f10:	d00d      	beq.n	8014f2e <rclc_action_remove_used_goal_handle+0x26>
 8014f12:	b12b      	cbz	r3, 8014f20 <rclc_action_remove_used_goal_handle+0x18>
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	4291      	cmp	r1, r2
 8014f18:	d003      	beq.n	8014f22 <rclc_action_remove_used_goal_handle+0x1a>
 8014f1a:	4613      	mov	r3, r2
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d1f9      	bne.n	8014f14 <rclc_action_remove_used_goal_handle+0xc>
 8014f20:	4770      	bx	lr
 8014f22:	680a      	ldr	r2, [r1, #0]
 8014f24:	601a      	str	r2, [r3, #0]
 8014f26:	6883      	ldr	r3, [r0, #8]
 8014f28:	600b      	str	r3, [r1, #0]
 8014f2a:	6081      	str	r1, [r0, #8]
 8014f2c:	4770      	bx	lr
 8014f2e:	680b      	ldr	r3, [r1, #0]
 8014f30:	60c3      	str	r3, [r0, #12]
 8014f32:	e7f8      	b.n	8014f26 <rclc_action_remove_used_goal_handle+0x1e>

08014f34 <rclc_action_find_goal_handle_by_uuid>:
 8014f34:	b538      	push	{r3, r4, r5, lr}
 8014f36:	b180      	cbz	r0, 8014f5a <rclc_action_find_goal_handle_by_uuid+0x26>
 8014f38:	460d      	mov	r5, r1
 8014f3a:	b181      	cbz	r1, 8014f5e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8014f3c:	68c4      	ldr	r4, [r0, #12]
 8014f3e:	b914      	cbnz	r4, 8014f46 <rclc_action_find_goal_handle_by_uuid+0x12>
 8014f40:	e009      	b.n	8014f56 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014f42:	6824      	ldr	r4, [r4, #0]
 8014f44:	b13c      	cbz	r4, 8014f56 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014f46:	2210      	movs	r2, #16
 8014f48:	4629      	mov	r1, r5
 8014f4a:	f104 0009 	add.w	r0, r4, #9
 8014f4e:	f004 ff4b 	bl	8019de8 <memcmp>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d1f5      	bne.n	8014f42 <rclc_action_find_goal_handle_by_uuid+0xe>
 8014f56:	4620      	mov	r0, r4
 8014f58:	bd38      	pop	{r3, r4, r5, pc}
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	e7fb      	b.n	8014f56 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014f5e:	460c      	mov	r4, r1
 8014f60:	e7f9      	b.n	8014f56 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014f62:	bf00      	nop

08014f64 <rclc_action_find_first_handle_by_status>:
 8014f64:	b140      	cbz	r0, 8014f78 <rclc_action_find_first_handle_by_status+0x14>
 8014f66:	68c0      	ldr	r0, [r0, #12]
 8014f68:	b910      	cbnz	r0, 8014f70 <rclc_action_find_first_handle_by_status+0xc>
 8014f6a:	e005      	b.n	8014f78 <rclc_action_find_first_handle_by_status+0x14>
 8014f6c:	6800      	ldr	r0, [r0, #0]
 8014f6e:	b118      	cbz	r0, 8014f78 <rclc_action_find_first_handle_by_status+0x14>
 8014f70:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014f74:	428b      	cmp	r3, r1
 8014f76:	d1f9      	bne.n	8014f6c <rclc_action_find_first_handle_by_status+0x8>
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop

08014f7c <rclc_action_find_first_terminated_handle>:
 8014f7c:	b140      	cbz	r0, 8014f90 <rclc_action_find_first_terminated_handle+0x14>
 8014f7e:	68c0      	ldr	r0, [r0, #12]
 8014f80:	b910      	cbnz	r0, 8014f88 <rclc_action_find_first_terminated_handle+0xc>
 8014f82:	e005      	b.n	8014f90 <rclc_action_find_first_terminated_handle+0x14>
 8014f84:	6800      	ldr	r0, [r0, #0]
 8014f86:	b118      	cbz	r0, 8014f90 <rclc_action_find_first_terminated_handle+0x14>
 8014f88:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014f8c:	2b03      	cmp	r3, #3
 8014f8e:	ddf9      	ble.n	8014f84 <rclc_action_find_first_terminated_handle+0x8>
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop

08014f94 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014f94:	b170      	cbz	r0, 8014fb4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014f96:	68c0      	ldr	r0, [r0, #12]
 8014f98:	b160      	cbz	r0, 8014fb4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014f9a:	b410      	push	{r4}
 8014f9c:	e001      	b.n	8014fa2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014f9e:	6800      	ldr	r0, [r0, #0]
 8014fa0:	b128      	cbz	r0, 8014fae <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014fa2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014fa6:	4299      	cmp	r1, r3
 8014fa8:	bf08      	it	eq
 8014faa:	4294      	cmpeq	r4, r2
 8014fac:	d1f7      	bne.n	8014f9e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fb2:	4770      	bx	lr
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop

08014fb8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014fb8:	b170      	cbz	r0, 8014fd8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014fba:	68c0      	ldr	r0, [r0, #12]
 8014fbc:	b160      	cbz	r0, 8014fd8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014fbe:	b410      	push	{r4}
 8014fc0:	e001      	b.n	8014fc6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014fc2:	6800      	ldr	r0, [r0, #0]
 8014fc4:	b128      	cbz	r0, 8014fd2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014fc6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014fca:	4299      	cmp	r1, r3
 8014fcc:	bf08      	it	eq
 8014fce:	4294      	cmpeq	r4, r2
 8014fd0:	d1f7      	bne.n	8014fc2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fd6:	4770      	bx	lr
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop

08014fdc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014fdc:	b170      	cbz	r0, 8014ffc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014fde:	68c0      	ldr	r0, [r0, #12]
 8014fe0:	b160      	cbz	r0, 8014ffc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014fe2:	b410      	push	{r4}
 8014fe4:	e001      	b.n	8014fea <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014fe6:	6800      	ldr	r0, [r0, #0]
 8014fe8:	b128      	cbz	r0, 8014ff6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014fea:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014fee:	4299      	cmp	r1, r3
 8014ff0:	bf08      	it	eq
 8014ff2:	4294      	cmpeq	r4, r2
 8014ff4:	d1f7      	bne.n	8014fe6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ffa:	4770      	bx	lr
 8014ffc:	4770      	bx	lr
 8014ffe:	bf00      	nop

08015000 <rclc_action_find_first_handle_with_goal_response>:
 8015000:	b140      	cbz	r0, 8015014 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015002:	68c0      	ldr	r0, [r0, #12]
 8015004:	b910      	cbnz	r0, 801500c <rclc_action_find_first_handle_with_goal_response+0xc>
 8015006:	e005      	b.n	8015014 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015008:	6800      	ldr	r0, [r0, #0]
 801500a:	b118      	cbz	r0, 8015014 <rclc_action_find_first_handle_with_goal_response+0x14>
 801500c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d0f9      	beq.n	8015008 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015014:	4770      	bx	lr
 8015016:	bf00      	nop

08015018 <rclc_action_find_first_handle_with_result_response>:
 8015018:	b140      	cbz	r0, 801502c <rclc_action_find_first_handle_with_result_response+0x14>
 801501a:	68c0      	ldr	r0, [r0, #12]
 801501c:	b910      	cbnz	r0, 8015024 <rclc_action_find_first_handle_with_result_response+0xc>
 801501e:	e005      	b.n	801502c <rclc_action_find_first_handle_with_result_response+0x14>
 8015020:	6800      	ldr	r0, [r0, #0]
 8015022:	b118      	cbz	r0, 801502c <rclc_action_find_first_handle_with_result_response+0x14>
 8015024:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015028:	2b00      	cmp	r3, #0
 801502a:	d0f9      	beq.n	8015020 <rclc_action_find_first_handle_with_result_response+0x8>
 801502c:	4770      	bx	lr
 801502e:	bf00      	nop

08015030 <rclc_action_server_response_goal_request>:
 8015030:	b198      	cbz	r0, 801505a <rclc_action_server_response_goal_request+0x2a>
 8015032:	b510      	push	{r4, lr}
 8015034:	6844      	ldr	r4, [r0, #4]
 8015036:	b086      	sub	sp, #24
 8015038:	2200      	movs	r2, #0
 801503a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801503e:	460b      	mov	r3, r1
 8015040:	9205      	str	r2, [sp, #20]
 8015042:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015046:	aa03      	add	r2, sp, #12
 8015048:	f104 0010 	add.w	r0, r4, #16
 801504c:	f88d 300c 	strb.w	r3, [sp, #12]
 8015050:	f7ff fd52 	bl	8014af8 <rcl_action_send_goal_response>
 8015054:	b918      	cbnz	r0, 801505e <rclc_action_server_response_goal_request+0x2e>
 8015056:	b006      	add	sp, #24
 8015058:	bd10      	pop	{r4, pc}
 801505a:	200b      	movs	r0, #11
 801505c:	4770      	bx	lr
 801505e:	9001      	str	r0, [sp, #4]
 8015060:	f7f6 ffee 	bl	800c040 <rcutils_reset_error>
 8015064:	9801      	ldr	r0, [sp, #4]
 8015066:	b006      	add	sp, #24
 8015068:	bd10      	pop	{r4, pc}
 801506a:	bf00      	nop
 801506c:	0000      	movs	r0, r0
	...

08015070 <rclc_action_server_goal_cancel_accept>:
 8015070:	b310      	cbz	r0, 80150b8 <rclc_action_server_goal_cancel_accept+0x48>
 8015072:	b510      	push	{r4, lr}
 8015074:	b090      	sub	sp, #64	@ 0x40
 8015076:	4604      	mov	r4, r0
 8015078:	a806      	add	r0, sp, #24
 801507a:	f7ff fefd 	bl	8014e78 <rcl_action_get_zero_initialized_cancel_response>
 801507e:	2300      	movs	r3, #0
 8015080:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015084:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015088:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801508c:	f88d 3018 	strb.w	r3, [sp, #24]
 8015090:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015094:	f8cd d01c 	str.w	sp, [sp, #28]
 8015098:	46ec      	mov	ip, sp
 801509a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801509e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80150c0 <rclc_action_server_goal_cancel_accept+0x50>
 80150a2:	6860      	ldr	r0, [r4, #4]
 80150a4:	aa06      	add	r2, sp, #24
 80150a6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80150aa:	3010      	adds	r0, #16
 80150ac:	ed8d 7b08 	vstr	d7, [sp, #32]
 80150b0:	f7ff fdd2 	bl	8014c58 <rcl_action_send_cancel_response>
 80150b4:	b010      	add	sp, #64	@ 0x40
 80150b6:	bd10      	pop	{r4, pc}
 80150b8:	200b      	movs	r0, #11
 80150ba:	4770      	bx	lr
 80150bc:	f3af 8000 	nop.w
 80150c0:	00000001 	.word	0x00000001
 80150c4:	00000001 	.word	0x00000001

080150c8 <rclc_action_server_goal_cancel_reject>:
 80150c8:	b082      	sub	sp, #8
 80150ca:	b530      	push	{r4, r5, lr}
 80150cc:	b08b      	sub	sp, #44	@ 0x2c
 80150ce:	ac0e      	add	r4, sp, #56	@ 0x38
 80150d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80150d4:	b188      	cbz	r0, 80150fa <rclc_action_server_goal_cancel_reject+0x32>
 80150d6:	4604      	mov	r4, r0
 80150d8:	a801      	add	r0, sp, #4
 80150da:	460d      	mov	r5, r1
 80150dc:	f7ff fecc 	bl	8014e78 <rcl_action_get_zero_initialized_cancel_response>
 80150e0:	aa01      	add	r2, sp, #4
 80150e2:	a90e      	add	r1, sp, #56	@ 0x38
 80150e4:	f104 0010 	add.w	r0, r4, #16
 80150e8:	f88d 5004 	strb.w	r5, [sp, #4]
 80150ec:	f7ff fdb4 	bl	8014c58 <rcl_action_send_cancel_response>
 80150f0:	b00b      	add	sp, #44	@ 0x2c
 80150f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80150f6:	b002      	add	sp, #8
 80150f8:	4770      	bx	lr
 80150fa:	200b      	movs	r0, #11
 80150fc:	b00b      	add	sp, #44	@ 0x2c
 80150fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015102:	b002      	add	sp, #8
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop

08015108 <__atomic_load_8>:
 8015108:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801510c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015110:	4a15      	ldr	r2, [pc, #84]	@ (8015168 <__atomic_load_8+0x60>)
 8015112:	4b16      	ldr	r3, [pc, #88]	@ (801516c <__atomic_load_8+0x64>)
 8015114:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015118:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801511c:	fb02 f101 	mul.w	r1, r2, r1
 8015120:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015124:	fba3 2301 	umull	r2, r3, r3, r1
 8015128:	091b      	lsrs	r3, r3, #4
 801512a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801512e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015132:	b4f0      	push	{r4, r5, r6, r7}
 8015134:	4d0e      	ldr	r5, [pc, #56]	@ (8015170 <__atomic_load_8+0x68>)
 8015136:	1ac9      	subs	r1, r1, r3
 8015138:	194a      	adds	r2, r1, r5
 801513a:	f04f 0c01 	mov.w	ip, #1
 801513e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015142:	e8c2 cf44 	strexb	r4, ip, [r2]
 8015146:	2c00      	cmp	r4, #0
 8015148:	d1f9      	bne.n	801513e <__atomic_load_8+0x36>
 801514a:	f3bf 8f5b 	dmb	ish
 801514e:	b2dc      	uxtb	r4, r3
 8015150:	2c00      	cmp	r4, #0
 8015152:	d1f4      	bne.n	801513e <__atomic_load_8+0x36>
 8015154:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015158:	f3bf 8f5b 	dmb	ish
 801515c:	546b      	strb	r3, [r5, r1]
 801515e:	4630      	mov	r0, r6
 8015160:	4639      	mov	r1, r7
 8015162:	bcf0      	pop	{r4, r5, r6, r7}
 8015164:	4770      	bx	lr
 8015166:	bf00      	nop
 8015168:	27d4eb2d 	.word	0x27d4eb2d
 801516c:	b21642c9 	.word	0xb21642c9
 8015170:	2000f0b0 	.word	0x2000f0b0

08015174 <__atomic_store_8>:
 8015174:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015178:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801517c:	b570      	push	{r4, r5, r6, lr}
 801517e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015182:	4c14      	ldr	r4, [pc, #80]	@ (80151d4 <__atomic_store_8+0x60>)
 8015184:	4e14      	ldr	r6, [pc, #80]	@ (80151d8 <__atomic_store_8+0x64>)
 8015186:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801518a:	fb04 f101 	mul.w	r1, r4, r1
 801518e:	4c13      	ldr	r4, [pc, #76]	@ (80151dc <__atomic_store_8+0x68>)
 8015190:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015194:	fba4 5401 	umull	r5, r4, r4, r1
 8015198:	0924      	lsrs	r4, r4, #4
 801519a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801519e:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80151a2:	eba1 0e04 	sub.w	lr, r1, r4
 80151a6:	f04f 0501 	mov.w	r5, #1
 80151aa:	eb0e 0c06 	add.w	ip, lr, r6
 80151ae:	e8dc 1f4f 	ldrexb	r1, [ip]
 80151b2:	e8cc 5f44 	strexb	r4, r5, [ip]
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	d1f9      	bne.n	80151ae <__atomic_store_8+0x3a>
 80151ba:	f3bf 8f5b 	dmb	ish
 80151be:	b2cc      	uxtb	r4, r1
 80151c0:	2c00      	cmp	r4, #0
 80151c2:	d1f4      	bne.n	80151ae <__atomic_store_8+0x3a>
 80151c4:	e9c0 2300 	strd	r2, r3, [r0]
 80151c8:	f3bf 8f5b 	dmb	ish
 80151cc:	f806 100e 	strb.w	r1, [r6, lr]
 80151d0:	bd70      	pop	{r4, r5, r6, pc}
 80151d2:	bf00      	nop
 80151d4:	27d4eb2d 	.word	0x27d4eb2d
 80151d8:	2000f0b0 	.word	0x2000f0b0
 80151dc:	b21642c9 	.word	0xb21642c9

080151e0 <__atomic_exchange_8>:
 80151e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151e2:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80151e6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80151ea:	4917      	ldr	r1, [pc, #92]	@ (8015248 <__atomic_exchange_8+0x68>)
 80151ec:	4f17      	ldr	r7, [pc, #92]	@ (801524c <__atomic_exchange_8+0x6c>)
 80151ee:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80151f2:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80151f6:	fb01 fe0e 	mul.w	lr, r1, lr
 80151fa:	4915      	ldr	r1, [pc, #84]	@ (8015250 <__atomic_exchange_8+0x70>)
 80151fc:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8015200:	4606      	mov	r6, r0
 8015202:	fba1 010e 	umull	r0, r1, r1, lr
 8015206:	0909      	lsrs	r1, r1, #4
 8015208:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801520c:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015210:	ebae 0e01 	sub.w	lr, lr, r1
 8015214:	f04f 0501 	mov.w	r5, #1
 8015218:	eb0e 0107 	add.w	r1, lr, r7
 801521c:	e8d1 cf4f 	ldrexb	ip, [r1]
 8015220:	e8c1 5f40 	strexb	r0, r5, [r1]
 8015224:	2800      	cmp	r0, #0
 8015226:	d1f9      	bne.n	801521c <__atomic_exchange_8+0x3c>
 8015228:	f3bf 8f5b 	dmb	ish
 801522c:	fa5f f48c 	uxtb.w	r4, ip
 8015230:	2c00      	cmp	r4, #0
 8015232:	d1f3      	bne.n	801521c <__atomic_exchange_8+0x3c>
 8015234:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015238:	e9c6 2300 	strd	r2, r3, [r6]
 801523c:	f3bf 8f5b 	dmb	ish
 8015240:	f807 c00e 	strb.w	ip, [r7, lr]
 8015244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015246:	bf00      	nop
 8015248:	27d4eb2d 	.word	0x27d4eb2d
 801524c:	2000f0b0 	.word	0x2000f0b0
 8015250:	b21642c9 	.word	0xb21642c9

08015254 <rcutils_get_env>:
 8015254:	b150      	cbz	r0, 801526c <rcutils_get_env+0x18>
 8015256:	b510      	push	{r4, lr}
 8015258:	460c      	mov	r4, r1
 801525a:	b909      	cbnz	r1, 8015260 <rcutils_get_env+0xc>
 801525c:	4806      	ldr	r0, [pc, #24]	@ (8015278 <rcutils_get_env+0x24>)
 801525e:	bd10      	pop	{r4, pc}
 8015260:	f004 f93c 	bl	80194dc <getenv>
 8015264:	b120      	cbz	r0, 8015270 <rcutils_get_env+0x1c>
 8015266:	6020      	str	r0, [r4, #0]
 8015268:	2000      	movs	r0, #0
 801526a:	bd10      	pop	{r4, pc}
 801526c:	4803      	ldr	r0, [pc, #12]	@ (801527c <rcutils_get_env+0x28>)
 801526e:	4770      	bx	lr
 8015270:	4b03      	ldr	r3, [pc, #12]	@ (8015280 <rcutils_get_env+0x2c>)
 8015272:	6023      	str	r3, [r4, #0]
 8015274:	e7f8      	b.n	8015268 <rcutils_get_env+0x14>
 8015276:	bf00      	nop
 8015278:	0801b1b8 	.word	0x0801b1b8
 801527c:	0801b19c 	.word	0x0801b19c
 8015280:	0801b6bc 	.word	0x0801b6bc

08015284 <rcutils_format_string_limit>:
 8015284:	b40f      	push	{r0, r1, r2, r3}
 8015286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015288:	b083      	sub	sp, #12
 801528a:	ac08      	add	r4, sp, #32
 801528c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801528e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015292:	b376      	cbz	r6, 80152f2 <rcutils_format_string_limit+0x6e>
 8015294:	4620      	mov	r0, r4
 8015296:	f7f6 fea7 	bl	800bfe8 <rcutils_allocator_is_valid>
 801529a:	b350      	cbz	r0, 80152f2 <rcutils_format_string_limit+0x6e>
 801529c:	2100      	movs	r1, #0
 801529e:	ab0f      	add	r3, sp, #60	@ 0x3c
 80152a0:	4632      	mov	r2, r6
 80152a2:	4608      	mov	r0, r1
 80152a4:	e9cd 3300 	strd	r3, r3, [sp]
 80152a8:	f000 f8f8 	bl	801549c <rcutils_vsnprintf>
 80152ac:	1c43      	adds	r3, r0, #1
 80152ae:	4605      	mov	r5, r0
 80152b0:	d01f      	beq.n	80152f2 <rcutils_format_string_limit+0x6e>
 80152b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80152b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80152b6:	1c47      	adds	r7, r0, #1
 80152b8:	429f      	cmp	r7, r3
 80152ba:	bf84      	itt	hi
 80152bc:	461f      	movhi	r7, r3
 80152be:	f103 35ff 	addhi.w	r5, r3, #4294967295
 80152c2:	4638      	mov	r0, r7
 80152c4:	9b08      	ldr	r3, [sp, #32]
 80152c6:	4798      	blx	r3
 80152c8:	4604      	mov	r4, r0
 80152ca:	b190      	cbz	r0, 80152f2 <rcutils_format_string_limit+0x6e>
 80152cc:	9b01      	ldr	r3, [sp, #4]
 80152ce:	4632      	mov	r2, r6
 80152d0:	4639      	mov	r1, r7
 80152d2:	f000 f8e3 	bl	801549c <rcutils_vsnprintf>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	db07      	blt.n	80152ea <rcutils_format_string_limit+0x66>
 80152da:	2300      	movs	r3, #0
 80152dc:	5563      	strb	r3, [r4, r5]
 80152de:	4620      	mov	r0, r4
 80152e0:	b003      	add	sp, #12
 80152e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80152e6:	b004      	add	sp, #16
 80152e8:	4770      	bx	lr
 80152ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80152ee:	4620      	mov	r0, r4
 80152f0:	4798      	blx	r3
 80152f2:	2400      	movs	r4, #0
 80152f4:	e7f3      	b.n	80152de <rcutils_format_string_limit+0x5a>
 80152f6:	bf00      	nop

080152f8 <rcutils_repl_str>:
 80152f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152fc:	4699      	mov	r9, r3
 80152fe:	b089      	sub	sp, #36	@ 0x24
 8015300:	4603      	mov	r3, r0
 8015302:	4648      	mov	r0, r9
 8015304:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015308:	4698      	mov	r8, r3
 801530a:	9300      	str	r3, [sp, #0]
 801530c:	460c      	mov	r4, r1
 801530e:	f7f6 fe6b 	bl	800bfe8 <rcutils_allocator_is_valid>
 8015312:	2800      	cmp	r0, #0
 8015314:	f000 80a3 	beq.w	801545e <rcutils_repl_str+0x166>
 8015318:	4620      	mov	r0, r4
 801531a:	f7ea ffd9 	bl	80002d0 <strlen>
 801531e:	f04f 0a00 	mov.w	sl, #0
 8015322:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8015326:	9001      	str	r0, [sp, #4]
 8015328:	4657      	mov	r7, sl
 801532a:	4655      	mov	r5, sl
 801532c:	2610      	movs	r6, #16
 801532e:	e01e      	b.n	801536e <rcutils_repl_str+0x76>
 8015330:	3501      	adds	r5, #1
 8015332:	45aa      	cmp	sl, r5
 8015334:	d212      	bcs.n	801535c <rcutils_repl_str+0x64>
 8015336:	44b2      	add	sl, r6
 8015338:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801533c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8015340:	4798      	blx	r3
 8015342:	2800      	cmp	r0, #0
 8015344:	f000 8088 	beq.w	8015458 <rcutils_repl_str+0x160>
 8015348:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801534c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8015350:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8015354:	4607      	mov	r7, r0
 8015356:	bf28      	it	cs
 8015358:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 801535c:	9a00      	ldr	r2, [sp, #0]
 801535e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8015362:	1aa2      	subs	r2, r4, r2
 8015364:	f843 2c04 	str.w	r2, [r3, #-4]
 8015368:	9b01      	ldr	r3, [sp, #4]
 801536a:	eb04 0803 	add.w	r8, r4, r3
 801536e:	9902      	ldr	r1, [sp, #8]
 8015370:	4640      	mov	r0, r8
 8015372:	f004 fd9d 	bl	8019eb0 <strstr>
 8015376:	4604      	mov	r4, r0
 8015378:	465a      	mov	r2, fp
 801537a:	4638      	mov	r0, r7
 801537c:	2c00      	cmp	r4, #0
 801537e:	d1d7      	bne.n	8015330 <rcutils_repl_str+0x38>
 8015380:	4640      	mov	r0, r8
 8015382:	f7ea ffa5 	bl	80002d0 <strlen>
 8015386:	9b00      	ldr	r3, [sp, #0]
 8015388:	eba8 0803 	sub.w	r8, r8, r3
 801538c:	eb08 0300 	add.w	r3, r8, r0
 8015390:	9304      	str	r3, [sp, #16]
 8015392:	f8d9 8000 	ldr.w	r8, [r9]
 8015396:	2d00      	cmp	r5, #0
 8015398:	d03f      	beq.n	801541a <rcutils_repl_str+0x122>
 801539a:	9803      	ldr	r0, [sp, #12]
 801539c:	f7ea ff98 	bl	80002d0 <strlen>
 80153a0:	4606      	mov	r6, r0
 80153a2:	9801      	ldr	r0, [sp, #4]
 80153a4:	9a04      	ldr	r2, [sp, #16]
 80153a6:	1a33      	subs	r3, r6, r0
 80153a8:	fb05 2a03 	mla	sl, r5, r3, r2
 80153ac:	4659      	mov	r1, fp
 80153ae:	f10a 0001 	add.w	r0, sl, #1
 80153b2:	47c0      	blx	r8
 80153b4:	4683      	mov	fp, r0
 80153b6:	2800      	cmp	r0, #0
 80153b8:	d04e      	beq.n	8015458 <rcutils_repl_str+0x160>
 80153ba:	683a      	ldr	r2, [r7, #0]
 80153bc:	9900      	ldr	r1, [sp, #0]
 80153be:	f004 fe18 	bl	8019ff2 <memcpy>
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	9706      	str	r7, [sp, #24]
 80153c6:	1e6a      	subs	r2, r5, #1
 80153c8:	445b      	add	r3, fp
 80153ca:	46a8      	mov	r8, r5
 80153cc:	9202      	str	r2, [sp, #8]
 80153ce:	4625      	mov	r5, r4
 80153d0:	f8cd 901c 	str.w	r9, [sp, #28]
 80153d4:	461c      	mov	r4, r3
 80153d6:	9903      	ldr	r1, [sp, #12]
 80153d8:	4632      	mov	r2, r6
 80153da:	4620      	mov	r0, r4
 80153dc:	f004 fe09 	bl	8019ff2 <memcpy>
 80153e0:	9b01      	ldr	r3, [sp, #4]
 80153e2:	f857 2b04 	ldr.w	r2, [r7], #4
 80153e6:	eb02 0c03 	add.w	ip, r2, r3
 80153ea:	9b00      	ldr	r3, [sp, #0]
 80153ec:	eb03 010c 	add.w	r1, r3, ip
 80153f0:	9b02      	ldr	r3, [sp, #8]
 80153f2:	4434      	add	r4, r6
 80153f4:	429d      	cmp	r5, r3
 80153f6:	4620      	mov	r0, r4
 80153f8:	d022      	beq.n	8015440 <rcutils_repl_str+0x148>
 80153fa:	683a      	ldr	r2, [r7, #0]
 80153fc:	eba2 090c 	sub.w	r9, r2, ip
 8015400:	464a      	mov	r2, r9
 8015402:	3501      	adds	r5, #1
 8015404:	f004 fdf5 	bl	8019ff2 <memcpy>
 8015408:	45a8      	cmp	r8, r5
 801540a:	444c      	add	r4, r9
 801540c:	d1e3      	bne.n	80153d6 <rcutils_repl_str+0xde>
 801540e:	2300      	movs	r3, #0
 8015410:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8015414:	f80b 300a 	strb.w	r3, [fp, sl]
 8015418:	e008      	b.n	801542c <rcutils_repl_str+0x134>
 801541a:	4618      	mov	r0, r3
 801541c:	4659      	mov	r1, fp
 801541e:	3001      	adds	r0, #1
 8015420:	47c0      	blx	r8
 8015422:	4683      	mov	fp, r0
 8015424:	b110      	cbz	r0, 801542c <rcutils_repl_str+0x134>
 8015426:	9900      	ldr	r1, [sp, #0]
 8015428:	f004 fddb 	bl	8019fe2 <strcpy>
 801542c:	4638      	mov	r0, r7
 801542e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015432:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015436:	4798      	blx	r3
 8015438:	4658      	mov	r0, fp
 801543a:	b009      	add	sp, #36	@ 0x24
 801543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015440:	9b04      	ldr	r3, [sp, #16]
 8015442:	eba3 020c 	sub.w	r2, r3, ip
 8015446:	9205      	str	r2, [sp, #20]
 8015448:	3501      	adds	r5, #1
 801544a:	f004 fdd2 	bl	8019ff2 <memcpy>
 801544e:	9a05      	ldr	r2, [sp, #20]
 8015450:	45a8      	cmp	r8, r5
 8015452:	4414      	add	r4, r2
 8015454:	d1bf      	bne.n	80153d6 <rcutils_repl_str+0xde>
 8015456:	e7da      	b.n	801540e <rcutils_repl_str+0x116>
 8015458:	f04f 0b00 	mov.w	fp, #0
 801545c:	e7e6      	b.n	801542c <rcutils_repl_str+0x134>
 801545e:	4683      	mov	fp, r0
 8015460:	4658      	mov	r0, fp
 8015462:	b009      	add	sp, #36	@ 0x24
 8015464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015468 <rcutils_snprintf>:
 8015468:	b40c      	push	{r2, r3}
 801546a:	b530      	push	{r4, r5, lr}
 801546c:	b083      	sub	sp, #12
 801546e:	ab06      	add	r3, sp, #24
 8015470:	f853 2b04 	ldr.w	r2, [r3], #4
 8015474:	9301      	str	r3, [sp, #4]
 8015476:	b152      	cbz	r2, 801548e <rcutils_snprintf+0x26>
 8015478:	b138      	cbz	r0, 801548a <rcutils_snprintf+0x22>
 801547a:	b141      	cbz	r1, 801548e <rcutils_snprintf+0x26>
 801547c:	f004 fc12 	bl	8019ca4 <vsniprintf>
 8015480:	b003      	add	sp, #12
 8015482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015486:	b002      	add	sp, #8
 8015488:	4770      	bx	lr
 801548a:	2900      	cmp	r1, #0
 801548c:	d0f6      	beq.n	801547c <rcutils_snprintf+0x14>
 801548e:	f004 fd7b 	bl	8019f88 <__errno>
 8015492:	2316      	movs	r3, #22
 8015494:	6003      	str	r3, [r0, #0]
 8015496:	f04f 30ff 	mov.w	r0, #4294967295
 801549a:	e7f1      	b.n	8015480 <rcutils_snprintf+0x18>

0801549c <rcutils_vsnprintf>:
 801549c:	b570      	push	{r4, r5, r6, lr}
 801549e:	b13a      	cbz	r2, 80154b0 <rcutils_vsnprintf+0x14>
 80154a0:	b120      	cbz	r0, 80154ac <rcutils_vsnprintf+0x10>
 80154a2:	b129      	cbz	r1, 80154b0 <rcutils_vsnprintf+0x14>
 80154a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154a8:	f004 bbfc 	b.w	8019ca4 <vsniprintf>
 80154ac:	2900      	cmp	r1, #0
 80154ae:	d0f9      	beq.n	80154a4 <rcutils_vsnprintf+0x8>
 80154b0:	f004 fd6a 	bl	8019f88 <__errno>
 80154b4:	2316      	movs	r3, #22
 80154b6:	6003      	str	r3, [r0, #0]
 80154b8:	f04f 30ff 	mov.w	r0, #4294967295
 80154bc:	bd70      	pop	{r4, r5, r6, pc}
 80154be:	bf00      	nop

080154c0 <rcutils_strdup>:
 80154c0:	b084      	sub	sp, #16
 80154c2:	b570      	push	{r4, r5, r6, lr}
 80154c4:	b086      	sub	sp, #24
 80154c6:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 80154ca:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80154ce:	4604      	mov	r4, r0
 80154d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154d4:	f10d 0e04 	add.w	lr, sp, #4
 80154d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80154dc:	f8dc 3000 	ldr.w	r3, [ip]
 80154e0:	f8ce 3000 	str.w	r3, [lr]
 80154e4:	b304      	cbz	r4, 8015528 <rcutils_strdup+0x68>
 80154e6:	a801      	add	r0, sp, #4
 80154e8:	f7f6 fd7e 	bl	800bfe8 <rcutils_allocator_is_valid>
 80154ec:	b1e0      	cbz	r0, 8015528 <rcutils_strdup+0x68>
 80154ee:	f04f 32ff 	mov.w	r2, #4294967295
 80154f2:	2100      	movs	r1, #0
 80154f4:	4620      	mov	r0, r4
 80154f6:	f7ea fe9b 	bl	8000230 <memchr>
 80154fa:	b190      	cbz	r0, 8015522 <rcutils_strdup+0x62>
 80154fc:	1b06      	subs	r6, r0, r4
 80154fe:	1c70      	adds	r0, r6, #1
 8015500:	9b01      	ldr	r3, [sp, #4]
 8015502:	9905      	ldr	r1, [sp, #20]
 8015504:	4798      	blx	r3
 8015506:	4605      	mov	r5, r0
 8015508:	b128      	cbz	r0, 8015516 <rcutils_strdup+0x56>
 801550a:	4632      	mov	r2, r6
 801550c:	4621      	mov	r1, r4
 801550e:	f004 fd70 	bl	8019ff2 <memcpy>
 8015512:	2300      	movs	r3, #0
 8015514:	55ab      	strb	r3, [r5, r6]
 8015516:	4628      	mov	r0, r5
 8015518:	b006      	add	sp, #24
 801551a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801551e:	b004      	add	sp, #16
 8015520:	4770      	bx	lr
 8015522:	f04f 36ff 	mov.w	r6, #4294967295
 8015526:	e7eb      	b.n	8015500 <rcutils_strdup+0x40>
 8015528:	2500      	movs	r5, #0
 801552a:	e7f4      	b.n	8015516 <rcutils_strdup+0x56>

0801552c <rcutils_strndup>:
 801552c:	b082      	sub	sp, #8
 801552e:	b570      	push	{r4, r5, r6, lr}
 8015530:	ac04      	add	r4, sp, #16
 8015532:	e884 000c 	stmia.w	r4, {r2, r3}
 8015536:	b1e8      	cbz	r0, 8015574 <rcutils_strndup+0x48>
 8015538:	4605      	mov	r5, r0
 801553a:	a804      	add	r0, sp, #16
 801553c:	460c      	mov	r4, r1
 801553e:	f7f6 fd53 	bl	800bfe8 <rcutils_allocator_is_valid>
 8015542:	b1b8      	cbz	r0, 8015574 <rcutils_strndup+0x48>
 8015544:	4622      	mov	r2, r4
 8015546:	2100      	movs	r1, #0
 8015548:	4628      	mov	r0, r5
 801554a:	f7ea fe71 	bl	8000230 <memchr>
 801554e:	b100      	cbz	r0, 8015552 <rcutils_strndup+0x26>
 8015550:	1b44      	subs	r4, r0, r5
 8015552:	9b04      	ldr	r3, [sp, #16]
 8015554:	9908      	ldr	r1, [sp, #32]
 8015556:	1c60      	adds	r0, r4, #1
 8015558:	4798      	blx	r3
 801555a:	4606      	mov	r6, r0
 801555c:	b128      	cbz	r0, 801556a <rcutils_strndup+0x3e>
 801555e:	4622      	mov	r2, r4
 8015560:	4629      	mov	r1, r5
 8015562:	f004 fd46 	bl	8019ff2 <memcpy>
 8015566:	2300      	movs	r3, #0
 8015568:	5533      	strb	r3, [r6, r4]
 801556a:	4630      	mov	r0, r6
 801556c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015570:	b002      	add	sp, #8
 8015572:	4770      	bx	lr
 8015574:	2600      	movs	r6, #0
 8015576:	4630      	mov	r0, r6
 8015578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801557c:	b002      	add	sp, #8
 801557e:	4770      	bx	lr

08015580 <rcutils_get_zero_initialized_string_map>:
 8015580:	4b01      	ldr	r3, [pc, #4]	@ (8015588 <rcutils_get_zero_initialized_string_map+0x8>)
 8015582:	6818      	ldr	r0, [r3, #0]
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop
 8015588:	0801bb58 	.word	0x0801bb58

0801558c <rcutils_string_map_reserve>:
 801558c:	2800      	cmp	r0, #0
 801558e:	d04e      	beq.n	801562e <rcutils_string_map_reserve+0xa2>
 8015590:	b530      	push	{r4, r5, lr}
 8015592:	6803      	ldr	r3, [r0, #0]
 8015594:	b087      	sub	sp, #28
 8015596:	4604      	mov	r4, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	d043      	beq.n	8015624 <rcutils_string_map_reserve+0x98>
 801559c:	f103 0c0c 	add.w	ip, r3, #12
 80155a0:	460d      	mov	r5, r1
 80155a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80155a6:	f10d 0e04 	add.w	lr, sp, #4
 80155aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80155ae:	f8dc 3000 	ldr.w	r3, [ip]
 80155b2:	f8ce 3000 	str.w	r3, [lr]
 80155b6:	a801      	add	r0, sp, #4
 80155b8:	f7f6 fd16 	bl	800bfe8 <rcutils_allocator_is_valid>
 80155bc:	b308      	cbz	r0, 8015602 <rcutils_string_map_reserve+0x76>
 80155be:	6823      	ldr	r3, [r4, #0]
 80155c0:	6899      	ldr	r1, [r3, #8]
 80155c2:	42a9      	cmp	r1, r5
 80155c4:	d829      	bhi.n	801561a <rcutils_string_map_reserve+0x8e>
 80155c6:	685a      	ldr	r2, [r3, #4]
 80155c8:	42aa      	cmp	r2, r5
 80155ca:	d024      	beq.n	8015616 <rcutils_string_map_reserve+0x8a>
 80155cc:	b1e5      	cbz	r5, 8015608 <rcutils_string_map_reserve+0x7c>
 80155ce:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 80155d2:	d22a      	bcs.n	801562a <rcutils_string_map_reserve+0x9e>
 80155d4:	6818      	ldr	r0, [r3, #0]
 80155d6:	9a05      	ldr	r2, [sp, #20]
 80155d8:	9b03      	ldr	r3, [sp, #12]
 80155da:	00e9      	lsls	r1, r5, #3
 80155dc:	4798      	blx	r3
 80155de:	b320      	cbz	r0, 801562a <rcutils_string_map_reserve+0x9e>
 80155e0:	6824      	ldr	r4, [r4, #0]
 80155e2:	6861      	ldr	r1, [r4, #4]
 80155e4:	6020      	str	r0, [r4, #0]
 80155e6:	42a9      	cmp	r1, r5
 80155e8:	d214      	bcs.n	8015614 <rcutils_string_map_reserve+0x88>
 80155ea:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80155ee:	1a69      	subs	r1, r5, r1
 80155f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80155f4:	2200      	movs	r2, #0
 80155f6:	e9c3 2200 	strd	r2, r2, [r3]
 80155fa:	3308      	adds	r3, #8
 80155fc:	428b      	cmp	r3, r1
 80155fe:	d1fa      	bne.n	80155f6 <rcutils_string_map_reserve+0x6a>
 8015600:	e008      	b.n	8015614 <rcutils_string_map_reserve+0x88>
 8015602:	200b      	movs	r0, #11
 8015604:	b007      	add	sp, #28
 8015606:	bd30      	pop	{r4, r5, pc}
 8015608:	9a02      	ldr	r2, [sp, #8]
 801560a:	9905      	ldr	r1, [sp, #20]
 801560c:	6818      	ldr	r0, [r3, #0]
 801560e:	4790      	blx	r2
 8015610:	6824      	ldr	r4, [r4, #0]
 8015612:	6025      	str	r5, [r4, #0]
 8015614:	6065      	str	r5, [r4, #4]
 8015616:	2000      	movs	r0, #0
 8015618:	e7f4      	b.n	8015604 <rcutils_string_map_reserve+0x78>
 801561a:	4620      	mov	r0, r4
 801561c:	f7ff ffb6 	bl	801558c <rcutils_string_map_reserve>
 8015620:	b007      	add	sp, #28
 8015622:	bd30      	pop	{r4, r5, pc}
 8015624:	201f      	movs	r0, #31
 8015626:	b007      	add	sp, #28
 8015628:	bd30      	pop	{r4, r5, pc}
 801562a:	200a      	movs	r0, #10
 801562c:	e7ea      	b.n	8015604 <rcutils_string_map_reserve+0x78>
 801562e:	200b      	movs	r0, #11
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop

08015634 <rcutils_string_map_init>:
 8015634:	b082      	sub	sp, #8
 8015636:	b570      	push	{r4, r5, r6, lr}
 8015638:	ac04      	add	r4, sp, #16
 801563a:	e884 000c 	stmia.w	r4, {r2, r3}
 801563e:	b378      	cbz	r0, 80156a0 <rcutils_string_map_init+0x6c>
 8015640:	6806      	ldr	r6, [r0, #0]
 8015642:	4604      	mov	r4, r0
 8015644:	b12e      	cbz	r6, 8015652 <rcutils_string_map_init+0x1e>
 8015646:	251e      	movs	r5, #30
 8015648:	4628      	mov	r0, r5
 801564a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801564e:	b002      	add	sp, #8
 8015650:	4770      	bx	lr
 8015652:	a804      	add	r0, sp, #16
 8015654:	460d      	mov	r5, r1
 8015656:	f7f6 fcc7 	bl	800bfe8 <rcutils_allocator_is_valid>
 801565a:	b308      	cbz	r0, 80156a0 <rcutils_string_map_init+0x6c>
 801565c:	9b04      	ldr	r3, [sp, #16]
 801565e:	9908      	ldr	r1, [sp, #32]
 8015660:	2020      	movs	r0, #32
 8015662:	4798      	blx	r3
 8015664:	6020      	str	r0, [r4, #0]
 8015666:	b308      	cbz	r0, 80156ac <rcutils_string_map_init+0x78>
 8015668:	f10d 0e10 	add.w	lr, sp, #16
 801566c:	e9c0 6600 	strd	r6, r6, [r0]
 8015670:	6086      	str	r6, [r0, #8]
 8015672:	f100 0c0c 	add.w	ip, r0, #12
 8015676:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801567a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801567e:	f8de 3000 	ldr.w	r3, [lr]
 8015682:	f8cc 3000 	str.w	r3, [ip]
 8015686:	4629      	mov	r1, r5
 8015688:	4620      	mov	r0, r4
 801568a:	f7ff ff7f 	bl	801558c <rcutils_string_map_reserve>
 801568e:	4605      	mov	r5, r0
 8015690:	2800      	cmp	r0, #0
 8015692:	d0d9      	beq.n	8015648 <rcutils_string_map_init+0x14>
 8015694:	9b05      	ldr	r3, [sp, #20]
 8015696:	9908      	ldr	r1, [sp, #32]
 8015698:	6820      	ldr	r0, [r4, #0]
 801569a:	4798      	blx	r3
 801569c:	6026      	str	r6, [r4, #0]
 801569e:	e7d3      	b.n	8015648 <rcutils_string_map_init+0x14>
 80156a0:	250b      	movs	r5, #11
 80156a2:	4628      	mov	r0, r5
 80156a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156a8:	b002      	add	sp, #8
 80156aa:	4770      	bx	lr
 80156ac:	250a      	movs	r5, #10
 80156ae:	e7cb      	b.n	8015648 <rcutils_string_map_init+0x14>

080156b0 <rcutils_string_map_fini>:
 80156b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156b4:	b086      	sub	sp, #24
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d04f      	beq.n	801575a <rcutils_string_map_fini+0xaa>
 80156ba:	6805      	ldr	r5, [r0, #0]
 80156bc:	4606      	mov	r6, r0
 80156be:	2d00      	cmp	r5, #0
 80156c0:	d046      	beq.n	8015750 <rcutils_string_map_fini+0xa0>
 80156c2:	686b      	ldr	r3, [r5, #4]
 80156c4:	b353      	cbz	r3, 801571c <rcutils_string_map_fini+0x6c>
 80156c6:	2400      	movs	r4, #0
 80156c8:	682a      	ldr	r2, [r5, #0]
 80156ca:	4627      	mov	r7, r4
 80156cc:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80156d0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80156d4:	b1f8      	cbz	r0, 8015716 <rcutils_string_map_fini+0x66>
 80156d6:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 80156da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80156de:	4651      	mov	r1, sl
 80156e0:	47c8      	blx	r9
 80156e2:	682b      	ldr	r3, [r5, #0]
 80156e4:	eb03 0208 	add.w	r2, r3, r8
 80156e8:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 80156ec:	6850      	ldr	r0, [r2, #4]
 80156ee:	4651      	mov	r1, sl
 80156f0:	47c8      	blx	r9
 80156f2:	682a      	ldr	r2, [r5, #0]
 80156f4:	68ab      	ldr	r3, [r5, #8]
 80156f6:	4442      	add	r2, r8
 80156f8:	3b01      	subs	r3, #1
 80156fa:	6057      	str	r7, [r2, #4]
 80156fc:	60ab      	str	r3, [r5, #8]
 80156fe:	6835      	ldr	r5, [r6, #0]
 8015700:	686b      	ldr	r3, [r5, #4]
 8015702:	3401      	adds	r4, #1
 8015704:	429c      	cmp	r4, r3
 8015706:	d209      	bcs.n	801571c <rcutils_string_map_fini+0x6c>
 8015708:	682a      	ldr	r2, [r5, #0]
 801570a:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801570e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8015712:	2800      	cmp	r0, #0
 8015714:	d1df      	bne.n	80156d6 <rcutils_string_map_fini+0x26>
 8015716:	3401      	adds	r4, #1
 8015718:	42a3      	cmp	r3, r4
 801571a:	d8d7      	bhi.n	80156cc <rcutils_string_map_fini+0x1c>
 801571c:	2100      	movs	r1, #0
 801571e:	4630      	mov	r0, r6
 8015720:	f7ff ff34 	bl	801558c <rcutils_string_map_reserve>
 8015724:	4604      	mov	r4, r0
 8015726:	b118      	cbz	r0, 8015730 <rcutils_string_map_fini+0x80>
 8015728:	4620      	mov	r0, r4
 801572a:	b006      	add	sp, #24
 801572c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015730:	6835      	ldr	r5, [r6, #0]
 8015732:	350c      	adds	r5, #12
 8015734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015736:	af01      	add	r7, sp, #4
 8015738:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801573a:	682b      	ldr	r3, [r5, #0]
 801573c:	603b      	str	r3, [r7, #0]
 801573e:	a801      	add	r0, sp, #4
 8015740:	f7f6 fc52 	bl	800bfe8 <rcutils_allocator_is_valid>
 8015744:	b148      	cbz	r0, 801575a <rcutils_string_map_fini+0xaa>
 8015746:	9b02      	ldr	r3, [sp, #8]
 8015748:	9905      	ldr	r1, [sp, #20]
 801574a:	6830      	ldr	r0, [r6, #0]
 801574c:	4798      	blx	r3
 801574e:	6034      	str	r4, [r6, #0]
 8015750:	2400      	movs	r4, #0
 8015752:	4620      	mov	r0, r4
 8015754:	b006      	add	sp, #24
 8015756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801575a:	240b      	movs	r4, #11
 801575c:	4620      	mov	r0, r4
 801575e:	b006      	add	sp, #24
 8015760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015764 <rcutils_string_map_getn>:
 8015764:	b338      	cbz	r0, 80157b6 <rcutils_string_map_getn+0x52>
 8015766:	6800      	ldr	r0, [r0, #0]
 8015768:	b328      	cbz	r0, 80157b6 <rcutils_string_map_getn+0x52>
 801576a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801576e:	460e      	mov	r6, r1
 8015770:	b1c1      	cbz	r1, 80157a4 <rcutils_string_map_getn+0x40>
 8015772:	e9d0 9800 	ldrd	r9, r8, [r0]
 8015776:	f1b8 0f00 	cmp.w	r8, #0
 801577a:	d013      	beq.n	80157a4 <rcutils_string_map_getn+0x40>
 801577c:	4617      	mov	r7, r2
 801577e:	2400      	movs	r4, #0
 8015780:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8015784:	4628      	mov	r0, r5
 8015786:	b155      	cbz	r5, 801579e <rcutils_string_map_getn+0x3a>
 8015788:	f7ea fda2 	bl	80002d0 <strlen>
 801578c:	42b8      	cmp	r0, r7
 801578e:	4602      	mov	r2, r0
 8015790:	4629      	mov	r1, r5
 8015792:	bf38      	it	cc
 8015794:	463a      	movcc	r2, r7
 8015796:	4630      	mov	r0, r6
 8015798:	f004 fb65 	bl	8019e66 <strncmp>
 801579c:	b128      	cbz	r0, 80157aa <rcutils_string_map_getn+0x46>
 801579e:	3401      	adds	r4, #1
 80157a0:	45a0      	cmp	r8, r4
 80157a2:	d1ed      	bne.n	8015780 <rcutils_string_map_getn+0x1c>
 80157a4:	2000      	movs	r0, #0
 80157a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157aa:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 80157ae:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80157b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157b6:	4770      	bx	lr

080157b8 <rmw_get_zero_initialized_context>:
 80157b8:	b510      	push	{r4, lr}
 80157ba:	4903      	ldr	r1, [pc, #12]	@ (80157c8 <rmw_get_zero_initialized_context+0x10>)
 80157bc:	4604      	mov	r4, r0
 80157be:	2270      	movs	r2, #112	@ 0x70
 80157c0:	f004 fc17 	bl	8019ff2 <memcpy>
 80157c4:	4620      	mov	r0, r4
 80157c6:	bd10      	pop	{r4, pc}
 80157c8:	0801bb60 	.word	0x0801bb60

080157cc <rmw_get_zero_initialized_init_options>:
 80157cc:	b510      	push	{r4, lr}
 80157ce:	4903      	ldr	r1, [pc, #12]	@ (80157dc <rmw_get_zero_initialized_init_options+0x10>)
 80157d0:	4604      	mov	r4, r0
 80157d2:	2258      	movs	r2, #88	@ 0x58
 80157d4:	f004 fc0d 	bl	8019ff2 <memcpy>
 80157d8:	4620      	mov	r0, r4
 80157da:	bd10      	pop	{r4, pc}
 80157dc:	0801bbd0 	.word	0x0801bbd0

080157e0 <rmw_subscription_content_filter_options_fini>:
 80157e0:	b1b0      	cbz	r0, 8015810 <rmw_subscription_content_filter_options_fini+0x30>
 80157e2:	b538      	push	{r3, r4, r5, lr}
 80157e4:	4604      	mov	r4, r0
 80157e6:	4608      	mov	r0, r1
 80157e8:	460d      	mov	r5, r1
 80157ea:	f7f6 fbfd 	bl	800bfe8 <rcutils_allocator_is_valid>
 80157ee:	b168      	cbz	r0, 801580c <rmw_subscription_content_filter_options_fini+0x2c>
 80157f0:	6820      	ldr	r0, [r4, #0]
 80157f2:	b120      	cbz	r0, 80157fe <rmw_subscription_content_filter_options_fini+0x1e>
 80157f4:	686b      	ldr	r3, [r5, #4]
 80157f6:	6929      	ldr	r1, [r5, #16]
 80157f8:	4798      	blx	r3
 80157fa:	2300      	movs	r3, #0
 80157fc:	6023      	str	r3, [r4, #0]
 80157fe:	1d20      	adds	r0, r4, #4
 8015800:	f003 fc32 	bl	8019068 <rcutils_string_array_fini>
 8015804:	3800      	subs	r0, #0
 8015806:	bf18      	it	ne
 8015808:	2001      	movne	r0, #1
 801580a:	bd38      	pop	{r3, r4, r5, pc}
 801580c:	200b      	movs	r0, #11
 801580e:	bd38      	pop	{r3, r4, r5, pc}
 8015810:	200b      	movs	r0, #11
 8015812:	4770      	bx	lr

08015814 <rmw_get_default_subscription_options>:
 8015814:	2200      	movs	r2, #0
 8015816:	e9c0 2200 	strd	r2, r2, [r0]
 801581a:	6082      	str	r2, [r0, #8]
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop

08015820 <rmw_time_equal>:
 8015820:	b570      	push	{r4, r5, r6, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	ac04      	add	r4, sp, #16
 8015826:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801582a:	4925      	ldr	r1, [pc, #148]	@ (80158c0 <rmw_time_equal+0xa0>)
 801582c:	9c01      	ldr	r4, [sp, #4]
 801582e:	2202      	movs	r2, #2
 8015830:	4281      	cmp	r1, r0
 8015832:	41a2      	sbcs	r2, r4
 8015834:	d333      	bcc.n	801589e <rmw_time_equal+0x7e>
 8015836:	4603      	mov	r3, r0
 8015838:	4822      	ldr	r0, [pc, #136]	@ (80158c4 <rmw_time_equal+0xa4>)
 801583a:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 801583e:	fba3 3200 	umull	r3, r2, r3, r0
 8015842:	fb00 2204 	mla	r2, r0, r4, r2
 8015846:	43de      	mvns	r6, r3
 8015848:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801584c:	1a84      	subs	r4, r0, r2
 801584e:	428e      	cmp	r6, r1
 8015850:	41ac      	sbcs	r4, r5
 8015852:	d332      	bcc.n	80158ba <rmw_time_equal+0x9a>
 8015854:	eb11 0e03 	adds.w	lr, r1, r3
 8015858:	eb42 0005 	adc.w	r0, r2, r5
 801585c:	9b08      	ldr	r3, [sp, #32]
 801585e:	4918      	ldr	r1, [pc, #96]	@ (80158c0 <rmw_time_equal+0xa0>)
 8015860:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015862:	2202      	movs	r2, #2
 8015864:	4299      	cmp	r1, r3
 8015866:	41aa      	sbcs	r2, r5
 8015868:	d31e      	bcc.n	80158a8 <rmw_time_equal+0x88>
 801586a:	4c16      	ldr	r4, [pc, #88]	@ (80158c4 <rmw_time_equal+0xa4>)
 801586c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801586e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8015870:	fba3 3104 	umull	r3, r1, r3, r4
 8015874:	fb04 1105 	mla	r1, r4, r5, r1
 8015878:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801587c:	43dd      	mvns	r5, r3
 801587e:	ebac 0401 	sub.w	r4, ip, r1
 8015882:	4295      	cmp	r5, r2
 8015884:	41b4      	sbcs	r4, r6
 8015886:	d314      	bcc.n	80158b2 <rmw_time_equal+0x92>
 8015888:	18d2      	adds	r2, r2, r3
 801588a:	eb41 0306 	adc.w	r3, r1, r6
 801588e:	4283      	cmp	r3, r0
 8015890:	bf08      	it	eq
 8015892:	4572      	cmpeq	r2, lr
 8015894:	bf0c      	ite	eq
 8015896:	2001      	moveq	r0, #1
 8015898:	2000      	movne	r0, #0
 801589a:	b004      	add	sp, #16
 801589c:	bd70      	pop	{r4, r5, r6, pc}
 801589e:	f04f 3eff 	mov.w	lr, #4294967295
 80158a2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80158a6:	e7d9      	b.n	801585c <rmw_time_equal+0x3c>
 80158a8:	f04f 32ff 	mov.w	r2, #4294967295
 80158ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158b0:	e7ed      	b.n	801588e <rmw_time_equal+0x6e>
 80158b2:	f04f 32ff 	mov.w	r2, #4294967295
 80158b6:	4663      	mov	r3, ip
 80158b8:	e7e9      	b.n	801588e <rmw_time_equal+0x6e>
 80158ba:	f04f 3eff 	mov.w	lr, #4294967295
 80158be:	e7cd      	b.n	801585c <rmw_time_equal+0x3c>
 80158c0:	25c17d04 	.word	0x25c17d04
 80158c4:	3b9aca00 	.word	0x3b9aca00

080158c8 <rmw_time_total_nsec>:
 80158c8:	b430      	push	{r4, r5}
 80158ca:	b084      	sub	sp, #16
 80158cc:	ac04      	add	r4, sp, #16
 80158ce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80158d2:	4914      	ldr	r1, [pc, #80]	@ (8015924 <rmw_time_total_nsec+0x5c>)
 80158d4:	9c01      	ldr	r4, [sp, #4]
 80158d6:	2202      	movs	r2, #2
 80158d8:	4281      	cmp	r1, r0
 80158da:	41a2      	sbcs	r2, r4
 80158dc:	d315      	bcc.n	801590a <rmw_time_total_nsec+0x42>
 80158de:	4912      	ldr	r1, [pc, #72]	@ (8015928 <rmw_time_total_nsec+0x60>)
 80158e0:	4603      	mov	r3, r0
 80158e2:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 80158e6:	fba3 3201 	umull	r3, r2, r3, r1
 80158ea:	fb01 2204 	mla	r2, r1, r4, r2
 80158ee:	ea6f 0c03 	mvn.w	ip, r3
 80158f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80158f6:	1a8c      	subs	r4, r1, r2
 80158f8:	4584      	cmp	ip, r0
 80158fa:	41ac      	sbcs	r4, r5
 80158fc:	d30c      	bcc.n	8015918 <rmw_time_total_nsec+0x50>
 80158fe:	1818      	adds	r0, r3, r0
 8015900:	eb42 0105 	adc.w	r1, r2, r5
 8015904:	b004      	add	sp, #16
 8015906:	bc30      	pop	{r4, r5}
 8015908:	4770      	bx	lr
 801590a:	f04f 30ff 	mov.w	r0, #4294967295
 801590e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015912:	b004      	add	sp, #16
 8015914:	bc30      	pop	{r4, r5}
 8015916:	4770      	bx	lr
 8015918:	f04f 30ff 	mov.w	r0, #4294967295
 801591c:	b004      	add	sp, #16
 801591e:	bc30      	pop	{r4, r5}
 8015920:	4770      	bx	lr
 8015922:	bf00      	nop
 8015924:	25c17d04 	.word	0x25c17d04
 8015928:	3b9aca00 	.word	0x3b9aca00

0801592c <rmw_get_zero_initialized_message_info>:
 801592c:	b510      	push	{r4, lr}
 801592e:	4c09      	ldr	r4, [pc, #36]	@ (8015954 <rmw_get_zero_initialized_message_info+0x28>)
 8015930:	4686      	mov	lr, r0
 8015932:	4684      	mov	ip, r0
 8015934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015936:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801593a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801593c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015942:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015946:	e894 0003 	ldmia.w	r4, {r0, r1}
 801594a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801594e:	4670      	mov	r0, lr
 8015950:	bd10      	pop	{r4, pc}
 8015952:	bf00      	nop
 8015954:	0801bc28 	.word	0x0801bc28

08015958 <rmw_validate_full_topic_name>:
 8015958:	2800      	cmp	r0, #0
 801595a:	d049      	beq.n	80159f0 <rmw_validate_full_topic_name+0x98>
 801595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015960:	460e      	mov	r6, r1
 8015962:	2900      	cmp	r1, #0
 8015964:	d056      	beq.n	8015a14 <rmw_validate_full_topic_name+0xbc>
 8015966:	4615      	mov	r5, r2
 8015968:	4604      	mov	r4, r0
 801596a:	f7ea fcb1 	bl	80002d0 <strlen>
 801596e:	b150      	cbz	r0, 8015986 <rmw_validate_full_topic_name+0x2e>
 8015970:	7823      	ldrb	r3, [r4, #0]
 8015972:	2b2f      	cmp	r3, #47	@ 0x2f
 8015974:	d00c      	beq.n	8015990 <rmw_validate_full_topic_name+0x38>
 8015976:	2302      	movs	r3, #2
 8015978:	6033      	str	r3, [r6, #0]
 801597a:	b10d      	cbz	r5, 8015980 <rmw_validate_full_topic_name+0x28>
 801597c:	2300      	movs	r3, #0
 801597e:	602b      	str	r3, [r5, #0]
 8015980:	2000      	movs	r0, #0
 8015982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015986:	2301      	movs	r3, #1
 8015988:	6033      	str	r3, [r6, #0]
 801598a:	2d00      	cmp	r5, #0
 801598c:	d1f6      	bne.n	801597c <rmw_validate_full_topic_name+0x24>
 801598e:	e7f7      	b.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015990:	1e47      	subs	r7, r0, #1
 8015992:	5de3      	ldrb	r3, [r4, r7]
 8015994:	2b2f      	cmp	r3, #47	@ 0x2f
 8015996:	d03f      	beq.n	8015a18 <rmw_validate_full_topic_name+0xc0>
 8015998:	1e63      	subs	r3, r4, #1
 801599a:	4621      	mov	r1, r4
 801599c:	eb03 0e00 	add.w	lr, r3, r0
 80159a0:	469c      	mov	ip, r3
 80159a2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80159a6:	2a5f      	cmp	r2, #95	@ 0x5f
 80159a8:	d006      	beq.n	80159b8 <rmw_validate_full_topic_name+0x60>
 80159aa:	d823      	bhi.n	80159f4 <rmw_validate_full_topic_name+0x9c>
 80159ac:	2a39      	cmp	r2, #57	@ 0x39
 80159ae:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 80159b2:	d82b      	bhi.n	8015a0c <rmw_validate_full_topic_name+0xb4>
 80159b4:	2a2e      	cmp	r2, #46	@ 0x2e
 80159b6:	d920      	bls.n	80159fa <rmw_validate_full_topic_name+0xa2>
 80159b8:	4573      	cmp	r3, lr
 80159ba:	d1f1      	bne.n	80159a0 <rmw_validate_full_topic_name+0x48>
 80159bc:	4c21      	ldr	r4, [pc, #132]	@ (8015a44 <rmw_validate_full_topic_name+0xec>)
 80159be:	2300      	movs	r3, #0
 80159c0:	e003      	b.n	80159ca <rmw_validate_full_topic_name+0x72>
 80159c2:	4298      	cmp	r0, r3
 80159c4:	f101 0101 	add.w	r1, r1, #1
 80159c8:	d02c      	beq.n	8015a24 <rmw_validate_full_topic_name+0xcc>
 80159ca:	429f      	cmp	r7, r3
 80159cc:	f103 0301 	add.w	r3, r3, #1
 80159d0:	d0f7      	beq.n	80159c2 <rmw_validate_full_topic_name+0x6a>
 80159d2:	780a      	ldrb	r2, [r1, #0]
 80159d4:	2a2f      	cmp	r2, #47	@ 0x2f
 80159d6:	d1f4      	bne.n	80159c2 <rmw_validate_full_topic_name+0x6a>
 80159d8:	784a      	ldrb	r2, [r1, #1]
 80159da:	2a2f      	cmp	r2, #47	@ 0x2f
 80159dc:	d02d      	beq.n	8015a3a <rmw_validate_full_topic_name+0xe2>
 80159de:	5ca2      	ldrb	r2, [r4, r2]
 80159e0:	0752      	lsls	r2, r2, #29
 80159e2:	d5ee      	bpl.n	80159c2 <rmw_validate_full_topic_name+0x6a>
 80159e4:	2206      	movs	r2, #6
 80159e6:	6032      	str	r2, [r6, #0]
 80159e8:	2d00      	cmp	r5, #0
 80159ea:	d0c9      	beq.n	8015980 <rmw_validate_full_topic_name+0x28>
 80159ec:	602b      	str	r3, [r5, #0]
 80159ee:	e7c7      	b.n	8015980 <rmw_validate_full_topic_name+0x28>
 80159f0:	200b      	movs	r0, #11
 80159f2:	4770      	bx	lr
 80159f4:	3a61      	subs	r2, #97	@ 0x61
 80159f6:	2a19      	cmp	r2, #25
 80159f8:	d9de      	bls.n	80159b8 <rmw_validate_full_topic_name+0x60>
 80159fa:	2304      	movs	r3, #4
 80159fc:	6033      	str	r3, [r6, #0]
 80159fe:	2d00      	cmp	r5, #0
 8015a00:	d0be      	beq.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015a02:	f1c4 0401 	rsb	r4, r4, #1
 8015a06:	4464      	add	r4, ip
 8015a08:	602c      	str	r4, [r5, #0]
 8015a0a:	e7b9      	b.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015a0c:	f1b8 0f19 	cmp.w	r8, #25
 8015a10:	d9d2      	bls.n	80159b8 <rmw_validate_full_topic_name+0x60>
 8015a12:	e7f2      	b.n	80159fa <rmw_validate_full_topic_name+0xa2>
 8015a14:	200b      	movs	r0, #11
 8015a16:	e7b4      	b.n	8015982 <rmw_validate_full_topic_name+0x2a>
 8015a18:	2303      	movs	r3, #3
 8015a1a:	6033      	str	r3, [r6, #0]
 8015a1c:	2d00      	cmp	r5, #0
 8015a1e:	d0af      	beq.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015a20:	602f      	str	r7, [r5, #0]
 8015a22:	e7ad      	b.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015a24:	28f7      	cmp	r0, #247	@ 0xf7
 8015a26:	d802      	bhi.n	8015a2e <rmw_validate_full_topic_name+0xd6>
 8015a28:	2300      	movs	r3, #0
 8015a2a:	6033      	str	r3, [r6, #0]
 8015a2c:	e7a8      	b.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015a2e:	2307      	movs	r3, #7
 8015a30:	6033      	str	r3, [r6, #0]
 8015a32:	2d00      	cmp	r5, #0
 8015a34:	d0a4      	beq.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015a36:	23f6      	movs	r3, #246	@ 0xf6
 8015a38:	e7d8      	b.n	80159ec <rmw_validate_full_topic_name+0x94>
 8015a3a:	2205      	movs	r2, #5
 8015a3c:	6032      	str	r2, [r6, #0]
 8015a3e:	2d00      	cmp	r5, #0
 8015a40:	d1d4      	bne.n	80159ec <rmw_validate_full_topic_name+0x94>
 8015a42:	e79d      	b.n	8015980 <rmw_validate_full_topic_name+0x28>
 8015a44:	0801bf1f 	.word	0x0801bf1f

08015a48 <rmw_validate_namespace_with_size>:
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	d031      	beq.n	8015ab0 <rmw_validate_namespace_with_size+0x68>
 8015a4c:	b570      	push	{r4, r5, r6, lr}
 8015a4e:	4614      	mov	r4, r2
 8015a50:	b0c2      	sub	sp, #264	@ 0x108
 8015a52:	b1ba      	cbz	r2, 8015a84 <rmw_validate_namespace_with_size+0x3c>
 8015a54:	2901      	cmp	r1, #1
 8015a56:	460e      	mov	r6, r1
 8015a58:	461d      	mov	r5, r3
 8015a5a:	d102      	bne.n	8015a62 <rmw_validate_namespace_with_size+0x1a>
 8015a5c:	7803      	ldrb	r3, [r0, #0]
 8015a5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8015a60:	d015      	beq.n	8015a8e <rmw_validate_namespace_with_size+0x46>
 8015a62:	aa01      	add	r2, sp, #4
 8015a64:	4669      	mov	r1, sp
 8015a66:	f7ff ff77 	bl	8015958 <rmw_validate_full_topic_name>
 8015a6a:	b960      	cbnz	r0, 8015a86 <rmw_validate_namespace_with_size+0x3e>
 8015a6c:	9b00      	ldr	r3, [sp, #0]
 8015a6e:	b163      	cbz	r3, 8015a8a <rmw_validate_namespace_with_size+0x42>
 8015a70:	2b07      	cmp	r3, #7
 8015a72:	d00a      	beq.n	8015a8a <rmw_validate_namespace_with_size+0x42>
 8015a74:	1e5a      	subs	r2, r3, #1
 8015a76:	2a05      	cmp	r2, #5
 8015a78:	d81c      	bhi.n	8015ab4 <rmw_validate_namespace_with_size+0x6c>
 8015a7a:	e8df f002 	tbb	[pc, r2]
 8015a7e:	0c0c      	.short	0x0c0c
 8015a80:	0c0c0c0c 	.word	0x0c0c0c0c
 8015a84:	200b      	movs	r0, #11
 8015a86:	b042      	add	sp, #264	@ 0x108
 8015a88:	bd70      	pop	{r4, r5, r6, pc}
 8015a8a:	2ef5      	cmp	r6, #245	@ 0xf5
 8015a8c:	d809      	bhi.n	8015aa2 <rmw_validate_namespace_with_size+0x5a>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	6023      	str	r3, [r4, #0]
 8015a92:	2000      	movs	r0, #0
 8015a94:	e7f7      	b.n	8015a86 <rmw_validate_namespace_with_size+0x3e>
 8015a96:	6023      	str	r3, [r4, #0]
 8015a98:	2d00      	cmp	r5, #0
 8015a9a:	d0fa      	beq.n	8015a92 <rmw_validate_namespace_with_size+0x4a>
 8015a9c:	9b01      	ldr	r3, [sp, #4]
 8015a9e:	602b      	str	r3, [r5, #0]
 8015aa0:	e7f7      	b.n	8015a92 <rmw_validate_namespace_with_size+0x4a>
 8015aa2:	2307      	movs	r3, #7
 8015aa4:	6023      	str	r3, [r4, #0]
 8015aa6:	2d00      	cmp	r5, #0
 8015aa8:	d0f3      	beq.n	8015a92 <rmw_validate_namespace_with_size+0x4a>
 8015aaa:	23f4      	movs	r3, #244	@ 0xf4
 8015aac:	602b      	str	r3, [r5, #0]
 8015aae:	e7f0      	b.n	8015a92 <rmw_validate_namespace_with_size+0x4a>
 8015ab0:	200b      	movs	r0, #11
 8015ab2:	4770      	bx	lr
 8015ab4:	4a03      	ldr	r2, [pc, #12]	@ (8015ac4 <rmw_validate_namespace_with_size+0x7c>)
 8015ab6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015aba:	a802      	add	r0, sp, #8
 8015abc:	f7ff fcd4 	bl	8015468 <rcutils_snprintf>
 8015ac0:	2001      	movs	r0, #1
 8015ac2:	e7e0      	b.n	8015a86 <rmw_validate_namespace_with_size+0x3e>
 8015ac4:	0801b1d4 	.word	0x0801b1d4

08015ac8 <rmw_validate_namespace>:
 8015ac8:	b168      	cbz	r0, 8015ae6 <rmw_validate_namespace+0x1e>
 8015aca:	b570      	push	{r4, r5, r6, lr}
 8015acc:	460d      	mov	r5, r1
 8015ace:	4616      	mov	r6, r2
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	f7ea fbfd 	bl	80002d0 <strlen>
 8015ad6:	4633      	mov	r3, r6
 8015ad8:	4601      	mov	r1, r0
 8015ada:	462a      	mov	r2, r5
 8015adc:	4620      	mov	r0, r4
 8015ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ae2:	f7ff bfb1 	b.w	8015a48 <rmw_validate_namespace_with_size>
 8015ae6:	200b      	movs	r0, #11
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop

08015aec <rmw_namespace_validation_result_string>:
 8015aec:	2807      	cmp	r0, #7
 8015aee:	bf9a      	itte	ls
 8015af0:	4b02      	ldrls	r3, [pc, #8]	@ (8015afc <rmw_namespace_validation_result_string+0x10>)
 8015af2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015af6:	4802      	ldrhi	r0, [pc, #8]	@ (8015b00 <rmw_namespace_validation_result_string+0x14>)
 8015af8:	4770      	bx	lr
 8015afa:	bf00      	nop
 8015afc:	0801bc60 	.word	0x0801bc60
 8015b00:	0801b224 	.word	0x0801b224

08015b04 <rmw_validate_node_name>:
 8015b04:	2800      	cmp	r0, #0
 8015b06:	d037      	beq.n	8015b78 <rmw_validate_node_name+0x74>
 8015b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0a:	460e      	mov	r6, r1
 8015b0c:	2900      	cmp	r1, #0
 8015b0e:	d035      	beq.n	8015b7c <rmw_validate_node_name+0x78>
 8015b10:	4617      	mov	r7, r2
 8015b12:	4604      	mov	r4, r0
 8015b14:	f7ea fbdc 	bl	80002d0 <strlen>
 8015b18:	b1d8      	cbz	r0, 8015b52 <rmw_validate_node_name+0x4e>
 8015b1a:	1e63      	subs	r3, r4, #1
 8015b1c:	1819      	adds	r1, r3, r0
 8015b1e:	461a      	mov	r2, r3
 8015b20:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015b24:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8015b28:	f02e 0c20 	bic.w	ip, lr, #32
 8015b2c:	2d09      	cmp	r5, #9
 8015b2e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015b32:	d915      	bls.n	8015b60 <rmw_validate_node_name+0x5c>
 8015b34:	f1bc 0f19 	cmp.w	ip, #25
 8015b38:	d912      	bls.n	8015b60 <rmw_validate_node_name+0x5c>
 8015b3a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015b3e:	d00f      	beq.n	8015b60 <rmw_validate_node_name+0x5c>
 8015b40:	2302      	movs	r3, #2
 8015b42:	6033      	str	r3, [r6, #0]
 8015b44:	b11f      	cbz	r7, 8015b4e <rmw_validate_node_name+0x4a>
 8015b46:	f1c4 0401 	rsb	r4, r4, #1
 8015b4a:	4414      	add	r4, r2
 8015b4c:	603c      	str	r4, [r7, #0]
 8015b4e:	2000      	movs	r0, #0
 8015b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b52:	2301      	movs	r3, #1
 8015b54:	6033      	str	r3, [r6, #0]
 8015b56:	2f00      	cmp	r7, #0
 8015b58:	d0f9      	beq.n	8015b4e <rmw_validate_node_name+0x4a>
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	603b      	str	r3, [r7, #0]
 8015b5e:	e7f6      	b.n	8015b4e <rmw_validate_node_name+0x4a>
 8015b60:	4299      	cmp	r1, r3
 8015b62:	d1dc      	bne.n	8015b1e <rmw_validate_node_name+0x1a>
 8015b64:	7823      	ldrb	r3, [r4, #0]
 8015b66:	4a0c      	ldr	r2, [pc, #48]	@ (8015b98 <rmw_validate_node_name+0x94>)
 8015b68:	5cd3      	ldrb	r3, [r2, r3]
 8015b6a:	f013 0304 	ands.w	r3, r3, #4
 8015b6e:	d10e      	bne.n	8015b8e <rmw_validate_node_name+0x8a>
 8015b70:	28ff      	cmp	r0, #255	@ 0xff
 8015b72:	d805      	bhi.n	8015b80 <rmw_validate_node_name+0x7c>
 8015b74:	6033      	str	r3, [r6, #0]
 8015b76:	e7ea      	b.n	8015b4e <rmw_validate_node_name+0x4a>
 8015b78:	200b      	movs	r0, #11
 8015b7a:	4770      	bx	lr
 8015b7c:	200b      	movs	r0, #11
 8015b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b80:	2304      	movs	r3, #4
 8015b82:	6033      	str	r3, [r6, #0]
 8015b84:	2f00      	cmp	r7, #0
 8015b86:	d0e2      	beq.n	8015b4e <rmw_validate_node_name+0x4a>
 8015b88:	23fe      	movs	r3, #254	@ 0xfe
 8015b8a:	603b      	str	r3, [r7, #0]
 8015b8c:	e7df      	b.n	8015b4e <rmw_validate_node_name+0x4a>
 8015b8e:	2303      	movs	r3, #3
 8015b90:	6033      	str	r3, [r6, #0]
 8015b92:	2f00      	cmp	r7, #0
 8015b94:	d1e1      	bne.n	8015b5a <rmw_validate_node_name+0x56>
 8015b96:	e7da      	b.n	8015b4e <rmw_validate_node_name+0x4a>
 8015b98:	0801bf1f 	.word	0x0801bf1f

08015b9c <rmw_node_name_validation_result_string>:
 8015b9c:	2804      	cmp	r0, #4
 8015b9e:	bf9a      	itte	ls
 8015ba0:	4b02      	ldrls	r3, [pc, #8]	@ (8015bac <rmw_node_name_validation_result_string+0x10>)
 8015ba2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015ba6:	4802      	ldrhi	r0, [pc, #8]	@ (8015bb0 <rmw_node_name_validation_result_string+0x14>)
 8015ba8:	4770      	bx	lr
 8015baa:	bf00      	nop
 8015bac:	0801bc80 	.word	0x0801bc80
 8015bb0:	0801b3cc 	.word	0x0801b3cc

08015bb4 <get_memory>:
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	6840      	ldr	r0, [r0, #4]
 8015bb8:	b158      	cbz	r0, 8015bd2 <get_memory+0x1e>
 8015bba:	6842      	ldr	r2, [r0, #4]
 8015bbc:	605a      	str	r2, [r3, #4]
 8015bbe:	b10a      	cbz	r2, 8015bc4 <get_memory+0x10>
 8015bc0:	2100      	movs	r1, #0
 8015bc2:	6011      	str	r1, [r2, #0]
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	6042      	str	r2, [r0, #4]
 8015bc8:	b102      	cbz	r2, 8015bcc <get_memory+0x18>
 8015bca:	6010      	str	r0, [r2, #0]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	6002      	str	r2, [r0, #0]
 8015bd0:	6018      	str	r0, [r3, #0]
 8015bd2:	4770      	bx	lr

08015bd4 <put_memory>:
 8015bd4:	680b      	ldr	r3, [r1, #0]
 8015bd6:	b10b      	cbz	r3, 8015bdc <put_memory+0x8>
 8015bd8:	684a      	ldr	r2, [r1, #4]
 8015bda:	605a      	str	r2, [r3, #4]
 8015bdc:	684a      	ldr	r2, [r1, #4]
 8015bde:	b102      	cbz	r2, 8015be2 <put_memory+0xe>
 8015be0:	6013      	str	r3, [r2, #0]
 8015be2:	6803      	ldr	r3, [r0, #0]
 8015be4:	428b      	cmp	r3, r1
 8015be6:	6843      	ldr	r3, [r0, #4]
 8015be8:	bf08      	it	eq
 8015bea:	6002      	streq	r2, [r0, #0]
 8015bec:	604b      	str	r3, [r1, #4]
 8015bee:	b103      	cbz	r3, 8015bf2 <put_memory+0x1e>
 8015bf0:	6019      	str	r1, [r3, #0]
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	600b      	str	r3, [r1, #0]
 8015bf6:	6041      	str	r1, [r0, #4]
 8015bf8:	4770      	bx	lr
 8015bfa:	bf00      	nop

08015bfc <rmw_destroy_client>:
 8015bfc:	b570      	push	{r4, r5, r6, lr}
 8015bfe:	b128      	cbz	r0, 8015c0c <rmw_destroy_client+0x10>
 8015c00:	4604      	mov	r4, r0
 8015c02:	6800      	ldr	r0, [r0, #0]
 8015c04:	460d      	mov	r5, r1
 8015c06:	f7f7 f80b 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 8015c0a:	b910      	cbnz	r0, 8015c12 <rmw_destroy_client+0x16>
 8015c0c:	2401      	movs	r4, #1
 8015c0e:	4620      	mov	r0, r4
 8015c10:	bd70      	pop	{r4, r5, r6, pc}
 8015c12:	6863      	ldr	r3, [r4, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d0f9      	beq.n	8015c0c <rmw_destroy_client+0x10>
 8015c18:	2d00      	cmp	r5, #0
 8015c1a:	d0f7      	beq.n	8015c0c <rmw_destroy_client+0x10>
 8015c1c:	6828      	ldr	r0, [r5, #0]
 8015c1e:	f7f6 ffff 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d0f2      	beq.n	8015c0c <rmw_destroy_client+0x10>
 8015c26:	686e      	ldr	r6, [r5, #4]
 8015c28:	2e00      	cmp	r6, #0
 8015c2a:	d0ef      	beq.n	8015c0c <rmw_destroy_client+0x10>
 8015c2c:	6864      	ldr	r4, [r4, #4]
 8015c2e:	6932      	ldr	r2, [r6, #16]
 8015c30:	6920      	ldr	r0, [r4, #16]
 8015c32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015c36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c3a:	6819      	ldr	r1, [r3, #0]
 8015c3c:	f002 fbe0 	bl	8018400 <uxr_buffer_cancel_data>
 8015c40:	4602      	mov	r2, r0
 8015c42:	6920      	ldr	r0, [r4, #16]
 8015c44:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015c48:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015c4c:	f7f6 ff62 	bl	800cb14 <run_xrce_session>
 8015c50:	6920      	ldr	r0, [r4, #16]
 8015c52:	6932      	ldr	r2, [r6, #16]
 8015c54:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015c58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c5c:	6819      	ldr	r1, [r3, #0]
 8015c5e:	f7f8 fe61 	bl	800e924 <uxr_buffer_delete_entity>
 8015c62:	4602      	mov	r2, r0
 8015c64:	6920      	ldr	r0, [r4, #16]
 8015c66:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015c6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015c6e:	f7f6 ff51 	bl	800cb14 <run_xrce_session>
 8015c72:	f080 0401 	eor.w	r4, r0, #1
 8015c76:	b2e4      	uxtb	r4, r4
 8015c78:	4628      	mov	r0, r5
 8015c7a:	0064      	lsls	r4, r4, #1
 8015c7c:	f7f6 fe2c 	bl	800c8d8 <rmw_uxrce_fini_client_memory>
 8015c80:	e7c5      	b.n	8015c0e <rmw_destroy_client+0x12>
 8015c82:	bf00      	nop

08015c84 <rmw_get_gid_for_client>:
 8015c84:	b1a8      	cbz	r0, 8015cb2 <rmw_get_gid_for_client+0x2e>
 8015c86:	b538      	push	{r3, r4, r5, lr}
 8015c88:	460c      	mov	r4, r1
 8015c8a:	b1a1      	cbz	r1, 8015cb6 <rmw_get_gid_for_client+0x32>
 8015c8c:	4605      	mov	r5, r0
 8015c8e:	6800      	ldr	r0, [r0, #0]
 8015c90:	b120      	cbz	r0, 8015c9c <rmw_get_gid_for_client+0x18>
 8015c92:	4b0a      	ldr	r3, [pc, #40]	@ (8015cbc <rmw_get_gid_for_client+0x38>)
 8015c94:	6819      	ldr	r1, [r3, #0]
 8015c96:	f7ea fabb 	bl	8000210 <strcmp>
 8015c9a:	b940      	cbnz	r0, 8015cae <rmw_get_gid_for_client+0x2a>
 8015c9c:	686b      	ldr	r3, [r5, #4]
 8015c9e:	2000      	movs	r0, #0
 8015ca0:	6060      	str	r0, [r4, #4]
 8015ca2:	60a0      	str	r0, [r4, #8]
 8015ca4:	60e0      	str	r0, [r4, #12]
 8015ca6:	6120      	str	r0, [r4, #16]
 8015ca8:	691b      	ldr	r3, [r3, #16]
 8015caa:	6063      	str	r3, [r4, #4]
 8015cac:	bd38      	pop	{r3, r4, r5, pc}
 8015cae:	200c      	movs	r0, #12
 8015cb0:	bd38      	pop	{r3, r4, r5, pc}
 8015cb2:	200b      	movs	r0, #11
 8015cb4:	4770      	bx	lr
 8015cb6:	200b      	movs	r0, #11
 8015cb8:	bd38      	pop	{r3, r4, r5, pc}
 8015cba:	bf00      	nop
 8015cbc:	0801bc94 	.word	0x0801bc94

08015cc0 <rmw_get_implementation_identifier>:
 8015cc0:	4b01      	ldr	r3, [pc, #4]	@ (8015cc8 <rmw_get_implementation_identifier+0x8>)
 8015cc2:	6818      	ldr	r0, [r3, #0]
 8015cc4:	4770      	bx	lr
 8015cc6:	bf00      	nop
 8015cc8:	0801bc94 	.word	0x0801bc94

08015ccc <rmw_init_options_init>:
 8015ccc:	b084      	sub	sp, #16
 8015cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cd0:	b083      	sub	sp, #12
 8015cd2:	ad09      	add	r5, sp, #36	@ 0x24
 8015cd4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015cd8:	b130      	cbz	r0, 8015ce8 <rmw_init_options_init+0x1c>
 8015cda:	4604      	mov	r4, r0
 8015cdc:	4628      	mov	r0, r5
 8015cde:	f7f6 f983 	bl	800bfe8 <rcutils_allocator_is_valid>
 8015ce2:	b108      	cbz	r0, 8015ce8 <rmw_init_options_init+0x1c>
 8015ce4:	68a6      	ldr	r6, [r4, #8]
 8015ce6:	b12e      	cbz	r6, 8015cf4 <rmw_init_options_init+0x28>
 8015ce8:	200b      	movs	r0, #11
 8015cea:	b003      	add	sp, #12
 8015cec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015cf0:	b004      	add	sp, #16
 8015cf2:	4770      	bx	lr
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	e9c4 2300 	strd	r2, r3, [r4]
 8015cfc:	4b20      	ldr	r3, [pc, #128]	@ (8015d80 <rmw_init_options_init+0xb4>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	60a3      	str	r3, [r4, #8]
 8015d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d04:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 8015d08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d0c:	466f      	mov	r7, sp
 8015d0e:	682b      	ldr	r3, [r5, #0]
 8015d10:	f8cc 3000 	str.w	r3, [ip]
 8015d14:	4638      	mov	r0, r7
 8015d16:	63a6      	str	r6, [r4, #56]	@ 0x38
 8015d18:	60e6      	str	r6, [r4, #12]
 8015d1a:	f003 fa2b 	bl	8019174 <rmw_get_default_security_options>
 8015d1e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015d22:	f104 0310 	add.w	r3, r4, #16
 8015d26:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d2a:	2203      	movs	r2, #3
 8015d2c:	4815      	ldr	r0, [pc, #84]	@ (8015d84 <rmw_init_options_init+0xb8>)
 8015d2e:	4916      	ldr	r1, [pc, #88]	@ (8015d88 <rmw_init_options_init+0xbc>)
 8015d30:	f7f6 fd12 	bl	800c758 <rmw_uxrce_init_init_options_impl_memory>
 8015d34:	4813      	ldr	r0, [pc, #76]	@ (8015d84 <rmw_init_options_init+0xb8>)
 8015d36:	f7ff ff3d 	bl	8015bb4 <get_memory>
 8015d3a:	b1f0      	cbz	r0, 8015d7a <rmw_init_options_init+0xae>
 8015d3c:	4a13      	ldr	r2, [pc, #76]	@ (8015d8c <rmw_init_options_init+0xc0>)
 8015d3e:	6883      	ldr	r3, [r0, #8]
 8015d40:	6851      	ldr	r1, [r2, #4]
 8015d42:	7810      	ldrb	r0, [r2, #0]
 8015d44:	6523      	str	r3, [r4, #80]	@ 0x50
 8015d46:	7418      	strb	r0, [r3, #16]
 8015d48:	6159      	str	r1, [r3, #20]
 8015d4a:	68d1      	ldr	r1, [r2, #12]
 8015d4c:	61d9      	str	r1, [r3, #28]
 8015d4e:	6911      	ldr	r1, [r2, #16]
 8015d50:	6219      	str	r1, [r3, #32]
 8015d52:	6951      	ldr	r1, [r2, #20]
 8015d54:	6892      	ldr	r2, [r2, #8]
 8015d56:	619a      	str	r2, [r3, #24]
 8015d58:	6259      	str	r1, [r3, #36]	@ 0x24
 8015d5a:	f7fb f81d 	bl	8010d98 <uxr_nanos>
 8015d5e:	f003 fcc3 	bl	80196e8 <srand>
 8015d62:	f003 fcef 	bl	8019744 <rand>
 8015d66:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015d68:	6298      	str	r0, [r3, #40]	@ 0x28
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d0f9      	beq.n	8015d62 <rmw_init_options_init+0x96>
 8015d6e:	2000      	movs	r0, #0
 8015d70:	b003      	add	sp, #12
 8015d72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015d76:	b004      	add	sp, #16
 8015d78:	4770      	bx	lr
 8015d7a:	2001      	movs	r0, #1
 8015d7c:	e7b5      	b.n	8015cea <rmw_init_options_init+0x1e>
 8015d7e:	bf00      	nop
 8015d80:	0801bc94 	.word	0x0801bc94
 8015d84:	2000a8e8 	.word	0x2000a8e8
 8015d88:	2000a864 	.word	0x2000a864
 8015d8c:	2000a738 	.word	0x2000a738

08015d90 <rmw_init_options_copy>:
 8015d90:	2800      	cmp	r0, #0
 8015d92:	d03e      	beq.n	8015e12 <rmw_init_options_copy+0x82>
 8015d94:	b570      	push	{r4, r5, r6, lr}
 8015d96:	460d      	mov	r5, r1
 8015d98:	b149      	cbz	r1, 8015dae <rmw_init_options_copy+0x1e>
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	6880      	ldr	r0, [r0, #8]
 8015d9e:	b120      	cbz	r0, 8015daa <rmw_init_options_copy+0x1a>
 8015da0:	4b21      	ldr	r3, [pc, #132]	@ (8015e28 <rmw_init_options_copy+0x98>)
 8015da2:	6819      	ldr	r1, [r3, #0]
 8015da4:	f7ea fa34 	bl	8000210 <strcmp>
 8015da8:	bb78      	cbnz	r0, 8015e0a <rmw_init_options_copy+0x7a>
 8015daa:	68ab      	ldr	r3, [r5, #8]
 8015dac:	b11b      	cbz	r3, 8015db6 <rmw_init_options_copy+0x26>
 8015dae:	f04f 0c0b 	mov.w	ip, #11
 8015db2:	4660      	mov	r0, ip
 8015db4:	bd70      	pop	{r4, r5, r6, pc}
 8015db6:	2258      	movs	r2, #88	@ 0x58
 8015db8:	4621      	mov	r1, r4
 8015dba:	4628      	mov	r0, r5
 8015dbc:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8015dc0:	f004 f917 	bl	8019ff2 <memcpy>
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	f7f6 f90f 	bl	800bfe8 <rcutils_allocator_is_valid>
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	d0ef      	beq.n	8015dae <rmw_init_options_copy+0x1e>
 8015dce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015dd0:	b138      	cbz	r0, 8015de2 <rmw_init_options_copy+0x52>
 8015dd2:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 8015dd6:	4631      	mov	r1, r6
 8015dd8:	f003 f998 	bl	801910c <rmw_enclave_options_copy>
 8015ddc:	4684      	mov	ip, r0
 8015dde:	2800      	cmp	r0, #0
 8015de0:	d1e7      	bne.n	8015db2 <rmw_init_options_copy+0x22>
 8015de2:	4812      	ldr	r0, [pc, #72]	@ (8015e2c <rmw_init_options_copy+0x9c>)
 8015de4:	f7ff fee6 	bl	8015bb4 <get_memory>
 8015de8:	b1b8      	cbz	r0, 8015e1a <rmw_init_options_copy+0x8a>
 8015dea:	6883      	ldr	r3, [r0, #8]
 8015dec:	652b      	str	r3, [r5, #80]	@ 0x50
 8015dee:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8015df0:	3510      	adds	r5, #16
 8015df2:	f103 0410 	add.w	r4, r3, #16
 8015df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015dfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015dfe:	f04f 0c00 	mov.w	ip, #0
 8015e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015e06:	4660      	mov	r0, ip
 8015e08:	bd70      	pop	{r4, r5, r6, pc}
 8015e0a:	f04f 0c0c 	mov.w	ip, #12
 8015e0e:	4660      	mov	r0, ip
 8015e10:	bd70      	pop	{r4, r5, r6, pc}
 8015e12:	f04f 0c0b 	mov.w	ip, #11
 8015e16:	4660      	mov	r0, ip
 8015e18:	4770      	bx	lr
 8015e1a:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015e1c:	4631      	mov	r1, r6
 8015e1e:	f003 f997 	bl	8019150 <rmw_enclave_options_fini>
 8015e22:	f04f 0c01 	mov.w	ip, #1
 8015e26:	e7c4      	b.n	8015db2 <rmw_init_options_copy+0x22>
 8015e28:	0801bc94 	.word	0x0801bc94
 8015e2c:	2000a8e8 	.word	0x2000a8e8

08015e30 <rmw_init_options_fini>:
 8015e30:	2800      	cmp	r0, #0
 8015e32:	d035      	beq.n	8015ea0 <rmw_init_options_fini+0x70>
 8015e34:	b530      	push	{r4, r5, lr}
 8015e36:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 8015e3a:	b097      	sub	sp, #92	@ 0x5c
 8015e3c:	4604      	mov	r4, r0
 8015e3e:	4628      	mov	r0, r5
 8015e40:	f7f6 f8d2 	bl	800bfe8 <rcutils_allocator_is_valid>
 8015e44:	b320      	cbz	r0, 8015e90 <rmw_init_options_fini+0x60>
 8015e46:	68a0      	ldr	r0, [r4, #8]
 8015e48:	b120      	cbz	r0, 8015e54 <rmw_init_options_fini+0x24>
 8015e4a:	4b16      	ldr	r3, [pc, #88]	@ (8015ea4 <rmw_init_options_fini+0x74>)
 8015e4c:	6819      	ldr	r1, [r3, #0]
 8015e4e:	f7ea f9df 	bl	8000210 <strcmp>
 8015e52:	bb18      	cbnz	r0, 8015e9c <rmw_init_options_fini+0x6c>
 8015e54:	4b14      	ldr	r3, [pc, #80]	@ (8015ea8 <rmw_init_options_fini+0x78>)
 8015e56:	6819      	ldr	r1, [r3, #0]
 8015e58:	b1e9      	cbz	r1, 8015e96 <rmw_init_options_fini+0x66>
 8015e5a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8015e5c:	e001      	b.n	8015e62 <rmw_init_options_fini+0x32>
 8015e5e:	6849      	ldr	r1, [r1, #4]
 8015e60:	b1c9      	cbz	r1, 8015e96 <rmw_init_options_fini+0x66>
 8015e62:	688b      	ldr	r3, [r1, #8]
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d1fa      	bne.n	8015e5e <rmw_init_options_fini+0x2e>
 8015e68:	480f      	ldr	r0, [pc, #60]	@ (8015ea8 <rmw_init_options_fini+0x78>)
 8015e6a:	f7ff feb3 	bl	8015bd4 <put_memory>
 8015e6e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015e70:	b118      	cbz	r0, 8015e7a <rmw_init_options_fini+0x4a>
 8015e72:	4629      	mov	r1, r5
 8015e74:	f003 f96c 	bl	8019150 <rmw_enclave_options_fini>
 8015e78:	b940      	cbnz	r0, 8015e8c <rmw_init_options_fini+0x5c>
 8015e7a:	4668      	mov	r0, sp
 8015e7c:	f7ff fca6 	bl	80157cc <rmw_get_zero_initialized_init_options>
 8015e80:	2258      	movs	r2, #88	@ 0x58
 8015e82:	4669      	mov	r1, sp
 8015e84:	4620      	mov	r0, r4
 8015e86:	f004 f8b4 	bl	8019ff2 <memcpy>
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	b017      	add	sp, #92	@ 0x5c
 8015e8e:	bd30      	pop	{r4, r5, pc}
 8015e90:	200b      	movs	r0, #11
 8015e92:	b017      	add	sp, #92	@ 0x5c
 8015e94:	bd30      	pop	{r4, r5, pc}
 8015e96:	2001      	movs	r0, #1
 8015e98:	b017      	add	sp, #92	@ 0x5c
 8015e9a:	bd30      	pop	{r4, r5, pc}
 8015e9c:	200c      	movs	r0, #12
 8015e9e:	e7f5      	b.n	8015e8c <rmw_init_options_fini+0x5c>
 8015ea0:	200b      	movs	r0, #11
 8015ea2:	4770      	bx	lr
 8015ea4:	0801bc94 	.word	0x0801bc94
 8015ea8:	2000a8e8 	.word	0x2000a8e8

08015eac <rmw_init>:
 8015eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015eb0:	b083      	sub	sp, #12
 8015eb2:	2800      	cmp	r0, #0
 8015eb4:	f000 80d4 	beq.w	8016060 <rmw_init+0x1b4>
 8015eb8:	460e      	mov	r6, r1
 8015eba:	2900      	cmp	r1, #0
 8015ebc:	f000 80d0 	beq.w	8016060 <rmw_init+0x1b4>
 8015ec0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8015ec2:	4605      	mov	r5, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	f000 80cb 	beq.w	8016060 <rmw_init+0x1b4>
 8015eca:	4b77      	ldr	r3, [pc, #476]	@ (80160a8 <rmw_init+0x1fc>)
 8015ecc:	6880      	ldr	r0, [r0, #8]
 8015ece:	681f      	ldr	r7, [r3, #0]
 8015ed0:	b128      	cbz	r0, 8015ede <rmw_init+0x32>
 8015ed2:	4639      	mov	r1, r7
 8015ed4:	f7ea f99c 	bl	8000210 <strcmp>
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	f040 80d3 	bne.w	8016084 <rmw_init+0x1d8>
 8015ede:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ee2:	4c72      	ldr	r4, [pc, #456]	@ (80160ac <rmw_init+0x200>)
 8015ee4:	4972      	ldr	r1, [pc, #456]	@ (80160b0 <rmw_init+0x204>)
 8015ee6:	4873      	ldr	r0, [pc, #460]	@ (80160b4 <rmw_init+0x208>)
 8015ee8:	60b7      	str	r7, [r6, #8]
 8015eea:	e9c6 2300 	strd	r2, r3, [r6]
 8015eee:	68eb      	ldr	r3, [r5, #12]
 8015ef0:	66b3      	str	r3, [r6, #104]	@ 0x68
 8015ef2:	2201      	movs	r2, #1
 8015ef4:	f7f6 fbd0 	bl	800c698 <rmw_uxrce_init_session_memory>
 8015ef8:	4620      	mov	r0, r4
 8015efa:	496f      	ldr	r1, [pc, #444]	@ (80160b8 <rmw_init+0x20c>)
 8015efc:	2204      	movs	r2, #4
 8015efe:	f7f6 fc0b 	bl	800c718 <rmw_uxrce_init_static_input_buffer_memory>
 8015f02:	f04f 0800 	mov.w	r8, #0
 8015f06:	486b      	ldr	r0, [pc, #428]	@ (80160b4 <rmw_init+0x208>)
 8015f08:	f884 800d 	strb.w	r8, [r4, #13]
 8015f0c:	f7ff fe52 	bl	8015bb4 <get_memory>
 8015f10:	2800      	cmp	r0, #0
 8015f12:	f000 80b2 	beq.w	801607a <rmw_init+0x1ce>
 8015f16:	6884      	ldr	r4, [r0, #8]
 8015f18:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8015f1a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8015f1c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015f20:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015f24:	9101      	str	r1, [sp, #4]
 8015f26:	6a00      	ldr	r0, [r0, #32]
 8015f28:	9000      	str	r0, [sp, #0]
 8015f2a:	f104 0910 	add.w	r9, r4, #16
 8015f2e:	4661      	mov	r1, ip
 8015f30:	4648      	mov	r0, r9
 8015f32:	f7f8 ff4b 	bl	800edcc <uxr_set_custom_transport_callbacks>
 8015f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015f3a:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8015f3e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8015f42:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8015f46:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8015f4a:	495c      	ldr	r1, [pc, #368]	@ (80160bc <rmw_init+0x210>)
 8015f4c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8015f50:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8015f54:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8015f58:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8015f5c:	4858      	ldr	r0, [pc, #352]	@ (80160c0 <rmw_init+0x214>)
 8015f5e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8015f62:	2201      	movs	r2, #1
 8015f64:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8015f66:	f7f6 fb77 	bl	800c658 <rmw_uxrce_init_node_memory>
 8015f6a:	4956      	ldr	r1, [pc, #344]	@ (80160c4 <rmw_init+0x218>)
 8015f6c:	4856      	ldr	r0, [pc, #344]	@ (80160c8 <rmw_init+0x21c>)
 8015f6e:	2205      	movs	r2, #5
 8015f70:	f7f6 fb52 	bl	800c618 <rmw_uxrce_init_subscription_memory>
 8015f74:	4955      	ldr	r1, [pc, #340]	@ (80160cc <rmw_init+0x220>)
 8015f76:	4856      	ldr	r0, [pc, #344]	@ (80160d0 <rmw_init+0x224>)
 8015f78:	220a      	movs	r2, #10
 8015f7a:	f7f6 fb2d 	bl	800c5d8 <rmw_uxrce_init_publisher_memory>
 8015f7e:	4955      	ldr	r1, [pc, #340]	@ (80160d4 <rmw_init+0x228>)
 8015f80:	4855      	ldr	r0, [pc, #340]	@ (80160d8 <rmw_init+0x22c>)
 8015f82:	2201      	movs	r2, #1
 8015f84:	f7f6 fae8 	bl	800c558 <rmw_uxrce_init_service_memory>
 8015f88:	4954      	ldr	r1, [pc, #336]	@ (80160dc <rmw_init+0x230>)
 8015f8a:	4855      	ldr	r0, [pc, #340]	@ (80160e0 <rmw_init+0x234>)
 8015f8c:	2201      	movs	r2, #1
 8015f8e:	f7f6 fb03 	bl	800c598 <rmw_uxrce_init_client_memory>
 8015f92:	4954      	ldr	r1, [pc, #336]	@ (80160e4 <rmw_init+0x238>)
 8015f94:	4854      	ldr	r0, [pc, #336]	@ (80160e8 <rmw_init+0x23c>)
 8015f96:	220f      	movs	r2, #15
 8015f98:	f7f6 fb9e 	bl	800c6d8 <rmw_uxrce_init_topic_memory>
 8015f9c:	4953      	ldr	r1, [pc, #332]	@ (80160ec <rmw_init+0x240>)
 8015f9e:	4854      	ldr	r0, [pc, #336]	@ (80160f0 <rmw_init+0x244>)
 8015fa0:	2203      	movs	r2, #3
 8015fa2:	f7f6 fbd9 	bl	800c758 <rmw_uxrce_init_init_options_impl_memory>
 8015fa6:	4953      	ldr	r1, [pc, #332]	@ (80160f4 <rmw_init+0x248>)
 8015fa8:	4853      	ldr	r0, [pc, #332]	@ (80160f8 <rmw_init+0x24c>)
 8015faa:	2204      	movs	r2, #4
 8015fac:	f7f6 fbf4 	bl	800c798 <rmw_uxrce_init_wait_set_memory>
 8015fb0:	4952      	ldr	r1, [pc, #328]	@ (80160fc <rmw_init+0x250>)
 8015fb2:	4853      	ldr	r0, [pc, #332]	@ (8016100 <rmw_init+0x254>)
 8015fb4:	2204      	movs	r2, #4
 8015fb6:	f7f6 fc0f 	bl	800c7d8 <rmw_uxrce_init_guard_condition_memory>
 8015fba:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8015fbc:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8015fbe:	4642      	mov	r2, r8
 8015fc0:	f7f6 fab2 	bl	800c528 <rmw_uxrce_transport_init>
 8015fc4:	4607      	mov	r7, r0
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d161      	bne.n	801608e <rmw_init+0x1e2>
 8015fca:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8015fcc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8015fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015fd2:	4628      	mov	r0, r5
 8015fd4:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8015fd8:	f7f9 f906 	bl	800f1e8 <uxr_init_session>
 8015fdc:	4628      	mov	r0, r5
 8015fde:	4949      	ldr	r1, [pc, #292]	@ (8016104 <rmw_init+0x258>)
 8015fe0:	4622      	mov	r2, r4
 8015fe2:	f7f9 f925 	bl	800f230 <uxr_set_topic_callback>
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	4947      	ldr	r1, [pc, #284]	@ (8016108 <rmw_init+0x25c>)
 8015fea:	463a      	mov	r2, r7
 8015fec:	f7f9 f91c 	bl	800f228 <uxr_set_status_callback>
 8015ff0:	4628      	mov	r0, r5
 8015ff2:	4946      	ldr	r1, [pc, #280]	@ (801610c <rmw_init+0x260>)
 8015ff4:	463a      	mov	r2, r7
 8015ff6:	f7f9 f91f 	bl	800f238 <uxr_set_request_callback>
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	4944      	ldr	r1, [pc, #272]	@ (8016110 <rmw_init+0x264>)
 8015ffe:	463a      	mov	r2, r7
 8016000:	f7f9 f91e 	bl	800f240 <uxr_set_reply_callback>
 8016004:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016008:	2304      	movs	r3, #4
 801600a:	0092      	lsls	r2, r2, #2
 801600c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8016010:	4628      	mov	r0, r5
 8016012:	f7f9 f943 	bl	800f29c <uxr_create_input_reliable_stream>
 8016016:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801601a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801601e:	2304      	movs	r3, #4
 8016020:	0092      	lsls	r2, r2, #2
 8016022:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016026:	4628      	mov	r0, r5
 8016028:	f7f9 f920 	bl	800f26c <uxr_create_output_reliable_stream>
 801602c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8016030:	4628      	mov	r0, r5
 8016032:	f7f9 f92d 	bl	800f290 <uxr_create_input_best_effort_stream>
 8016036:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801603a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801603e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8016042:	3114      	adds	r1, #20
 8016044:	4628      	mov	r0, r5
 8016046:	f7f9 f8ff 	bl	800f248 <uxr_create_output_best_effort_stream>
 801604a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801604e:	4628      	mov	r0, r5
 8016050:	f7f9 fe72 	bl	800fd38 <uxr_create_session>
 8016054:	4605      	mov	r5, r0
 8016056:	b140      	cbz	r0, 801606a <rmw_init+0x1be>
 8016058:	4638      	mov	r0, r7
 801605a:	b003      	add	sp, #12
 801605c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016060:	270b      	movs	r7, #11
 8016062:	4638      	mov	r0, r7
 8016064:	b003      	add	sp, #12
 8016066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801606a:	4648      	mov	r0, r9
 801606c:	f7f8 fef0 	bl	800ee50 <uxr_close_custom_transport>
 8016070:	4810      	ldr	r0, [pc, #64]	@ (80160b4 <rmw_init+0x208>)
 8016072:	4621      	mov	r1, r4
 8016074:	f7ff fdae 	bl	8015bd4 <put_memory>
 8016078:	66f5      	str	r5, [r6, #108]	@ 0x6c
 801607a:	2701      	movs	r7, #1
 801607c:	4638      	mov	r0, r7
 801607e:	b003      	add	sp, #12
 8016080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016084:	270c      	movs	r7, #12
 8016086:	4638      	mov	r0, r7
 8016088:	b003      	add	sp, #12
 801608a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801608e:	4648      	mov	r0, r9
 8016090:	f7f8 fede 	bl	800ee50 <uxr_close_custom_transport>
 8016094:	4807      	ldr	r0, [pc, #28]	@ (80160b4 <rmw_init+0x208>)
 8016096:	4621      	mov	r1, r4
 8016098:	f7ff fd9c 	bl	8015bd4 <put_memory>
 801609c:	4638      	mov	r0, r7
 801609e:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 80160a2:	b003      	add	sp, #12
 80160a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160a8:	0801bc94 	.word	0x0801bc94
 80160ac:	2000c9f8 	.word	0x2000c9f8
 80160b0:	2000daf0 	.word	0x2000daf0
 80160b4:	2000f098 	.word	0x2000f098
 80160b8:	2000a8f8 	.word	0x2000a8f8
 80160bc:	2000da38 	.word	0x2000da38
 80160c0:	2000dadc 	.word	0x2000dadc
 80160c4:	2000cd70 	.word	0x2000cd70
 80160c8:	2000d1a8 	.word	0x2000d1a8
 80160cc:	2000d1b8 	.word	0x2000d1b8
 80160d0:	2000da28 	.word	0x2000da28
 80160d4:	2000cc98 	.word	0x2000cc98
 80160d8:	2000cd60 	.word	0x2000cd60
 80160dc:	2000cbc0 	.word	0x2000cbc0
 80160e0:	2000cc88 	.word	0x2000cc88
 80160e4:	2000ca08 	.word	0x2000ca08
 80160e8:	2000cbac 	.word	0x2000cbac
 80160ec:	2000a864 	.word	0x2000a864
 80160f0:	2000a8e8 	.word	0x2000a8e8
 80160f4:	2000a7e4 	.word	0x2000a7e4
 80160f8:	2000a854 	.word	0x2000a854
 80160fc:	2000a754 	.word	0x2000a754
 8016100:	2000a7d4 	.word	0x2000a7d4
 8016104:	08019185 	.word	0x08019185
 8016108:	0801917d 	.word	0x0801917d
 801610c:	0801921d 	.word	0x0801921d
 8016110:	080192b9 	.word	0x080192b9

08016114 <rmw_context_fini>:
 8016114:	4b17      	ldr	r3, [pc, #92]	@ (8016174 <rmw_context_fini+0x60>)
 8016116:	b570      	push	{r4, r5, r6, lr}
 8016118:	681c      	ldr	r4, [r3, #0]
 801611a:	4605      	mov	r5, r0
 801611c:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801611e:	b33c      	cbz	r4, 8016170 <rmw_context_fini+0x5c>
 8016120:	2600      	movs	r6, #0
 8016122:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 8016126:	691a      	ldr	r2, [r3, #16]
 8016128:	4282      	cmp	r2, r0
 801612a:	d018      	beq.n	801615e <rmw_context_fini+0x4a>
 801612c:	2c00      	cmp	r4, #0
 801612e:	d1f8      	bne.n	8016122 <rmw_context_fini+0xe>
 8016130:	b188      	cbz	r0, 8016156 <rmw_context_fini+0x42>
 8016132:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016136:	789b      	ldrb	r3, [r3, #2]
 8016138:	2b01      	cmp	r3, #1
 801613a:	bf14      	ite	ne
 801613c:	210a      	movne	r1, #10
 801613e:	2100      	moveq	r1, #0
 8016140:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016144:	f7f9 fdd0 	bl	800fce8 <uxr_delete_session_retries>
 8016148:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801614a:	f7f6 fb65 	bl	800c818 <rmw_uxrce_fini_session_memory>
 801614e:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8016150:	3010      	adds	r0, #16
 8016152:	f7f8 fe7d 	bl	800ee50 <uxr_close_custom_transport>
 8016156:	2300      	movs	r3, #0
 8016158:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801615a:	4630      	mov	r0, r6
 801615c:	bd70      	pop	{r4, r5, r6, pc}
 801615e:	f103 0018 	add.w	r0, r3, #24
 8016162:	f000 f911 	bl	8016388 <rmw_destroy_node>
 8016166:	4606      	mov	r6, r0
 8016168:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801616a:	2c00      	cmp	r4, #0
 801616c:	d1d9      	bne.n	8016122 <rmw_context_fini+0xe>
 801616e:	e7df      	b.n	8016130 <rmw_context_fini+0x1c>
 8016170:	4626      	mov	r6, r4
 8016172:	e7dd      	b.n	8016130 <rmw_context_fini+0x1c>
 8016174:	2000dadc 	.word	0x2000dadc

08016178 <create_topic>:
 8016178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801617c:	4604      	mov	r4, r0
 801617e:	b084      	sub	sp, #16
 8016180:	4824      	ldr	r0, [pc, #144]	@ (8016214 <create_topic+0x9c>)
 8016182:	460f      	mov	r7, r1
 8016184:	4616      	mov	r6, r2
 8016186:	f7ff fd15 	bl	8015bb4 <get_memory>
 801618a:	2800      	cmp	r0, #0
 801618c:	d03c      	beq.n	8016208 <create_topic+0x90>
 801618e:	6923      	ldr	r3, [r4, #16]
 8016190:	6885      	ldr	r5, [r0, #8]
 8016192:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801621c <create_topic+0xa4>
 8016196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801619a:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801619e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80161a2:	1c42      	adds	r2, r0, #1
 80161a4:	2102      	movs	r1, #2
 80161a6:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80161aa:	f7f8 fe55 	bl	800ee58 <uxr_object_id>
 80161ae:	223c      	movs	r2, #60	@ 0x3c
 80161b0:	6128      	str	r0, [r5, #16]
 80161b2:	4641      	mov	r1, r8
 80161b4:	4638      	mov	r0, r7
 80161b6:	f7f6 fd19 	bl	800cbec <generate_topic_name>
 80161ba:	b310      	cbz	r0, 8016202 <create_topic+0x8a>
 80161bc:	4f16      	ldr	r7, [pc, #88]	@ (8016218 <create_topic+0xa0>)
 80161be:	4630      	mov	r0, r6
 80161c0:	2264      	movs	r2, #100	@ 0x64
 80161c2:	4639      	mov	r1, r7
 80161c4:	f7f6 fce2 	bl	800cb8c <generate_type_name>
 80161c8:	b1d8      	cbz	r0, 8016202 <create_topic+0x8a>
 80161ca:	6920      	ldr	r0, [r4, #16]
 80161cc:	2306      	movs	r3, #6
 80161ce:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80161d2:	f8cd 8000 	str.w	r8, [sp]
 80161d6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80161da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161de:	6811      	ldr	r1, [r2, #0]
 80161e0:	6963      	ldr	r3, [r4, #20]
 80161e2:	692a      	ldr	r2, [r5, #16]
 80161e4:	f7f8 fc1a 	bl	800ea1c <uxr_buffer_create_topic_bin>
 80161e8:	4602      	mov	r2, r0
 80161ea:	6920      	ldr	r0, [r4, #16]
 80161ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80161f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80161f4:	f7f6 fc8e 	bl	800cb14 <run_xrce_session>
 80161f8:	b118      	cbz	r0, 8016202 <create_topic+0x8a>
 80161fa:	4628      	mov	r0, r5
 80161fc:	b004      	add	sp, #16
 80161fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016202:	4628      	mov	r0, r5
 8016204:	f7f6 fb7e 	bl	800c904 <rmw_uxrce_fini_topic_memory>
 8016208:	2500      	movs	r5, #0
 801620a:	4628      	mov	r0, r5
 801620c:	b004      	add	sp, #16
 801620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016212:	bf00      	nop
 8016214:	2000cbac 	.word	0x2000cbac
 8016218:	2000f0c8 	.word	0x2000f0c8
 801621c:	2000f12c 	.word	0x2000f12c

08016220 <destroy_topic>:
 8016220:	b538      	push	{r3, r4, r5, lr}
 8016222:	6984      	ldr	r4, [r0, #24]
 8016224:	b1d4      	cbz	r4, 801625c <destroy_topic+0x3c>
 8016226:	4605      	mov	r5, r0
 8016228:	6920      	ldr	r0, [r4, #16]
 801622a:	692a      	ldr	r2, [r5, #16]
 801622c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016230:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016234:	6819      	ldr	r1, [r3, #0]
 8016236:	f7f8 fb75 	bl	800e924 <uxr_buffer_delete_entity>
 801623a:	4602      	mov	r2, r0
 801623c:	6920      	ldr	r0, [r4, #16]
 801623e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016242:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016246:	f7f6 fc65 	bl	800cb14 <run_xrce_session>
 801624a:	f080 0401 	eor.w	r4, r0, #1
 801624e:	b2e4      	uxtb	r4, r4
 8016250:	4628      	mov	r0, r5
 8016252:	0064      	lsls	r4, r4, #1
 8016254:	f7f6 fb56 	bl	800c904 <rmw_uxrce_fini_topic_memory>
 8016258:	4620      	mov	r0, r4
 801625a:	bd38      	pop	{r3, r4, r5, pc}
 801625c:	2401      	movs	r4, #1
 801625e:	4620      	mov	r0, r4
 8016260:	bd38      	pop	{r3, r4, r5, pc}
 8016262:	bf00      	nop

08016264 <create_node>:
 8016264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016268:	b083      	sub	sp, #12
 801626a:	2b00      	cmp	r3, #0
 801626c:	d063      	beq.n	8016336 <create_node+0xd2>
 801626e:	4606      	mov	r6, r0
 8016270:	4836      	ldr	r0, [pc, #216]	@ (801634c <create_node+0xe8>)
 8016272:	460f      	mov	r7, r1
 8016274:	4690      	mov	r8, r2
 8016276:	461d      	mov	r5, r3
 8016278:	f7ff fc9c 	bl	8015bb4 <get_memory>
 801627c:	2800      	cmp	r0, #0
 801627e:	d05a      	beq.n	8016336 <create_node+0xd2>
 8016280:	6884      	ldr	r4, [r0, #8]
 8016282:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8016284:	6123      	str	r3, [r4, #16]
 8016286:	f7ff fd1b 	bl	8015cc0 <rmw_get_implementation_identifier>
 801628a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801628e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8016292:	f8c4 9020 	str.w	r9, [r4, #32]
 8016296:	4630      	mov	r0, r6
 8016298:	f7ea f81a 	bl	80002d0 <strlen>
 801629c:	1c42      	adds	r2, r0, #1
 801629e:	2a3c      	cmp	r2, #60	@ 0x3c
 80162a0:	f104 0518 	add.w	r5, r4, #24
 80162a4:	d844      	bhi.n	8016330 <create_node+0xcc>
 80162a6:	4648      	mov	r0, r9
 80162a8:	4631      	mov	r1, r6
 80162aa:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80162ae:	f003 fea0 	bl	8019ff2 <memcpy>
 80162b2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80162b6:	4638      	mov	r0, r7
 80162b8:	f7ea f80a 	bl	80002d0 <strlen>
 80162bc:	1c42      	adds	r2, r0, #1
 80162be:	2a3c      	cmp	r2, #60	@ 0x3c
 80162c0:	d836      	bhi.n	8016330 <create_node+0xcc>
 80162c2:	4639      	mov	r1, r7
 80162c4:	4648      	mov	r0, r9
 80162c6:	f003 fe94 	bl	8019ff2 <memcpy>
 80162ca:	6923      	ldr	r3, [r4, #16]
 80162cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80162d0:	2101      	movs	r1, #1
 80162d2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80162d6:	1842      	adds	r2, r0, r1
 80162d8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80162dc:	f7f8 fdbc 	bl	800ee58 <uxr_object_id>
 80162e0:	6160      	str	r0, [r4, #20]
 80162e2:	783b      	ldrb	r3, [r7, #0]
 80162e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80162e6:	d128      	bne.n	801633a <create_node+0xd6>
 80162e8:	787b      	ldrb	r3, [r7, #1]
 80162ea:	bb33      	cbnz	r3, 801633a <create_node+0xd6>
 80162ec:	4a18      	ldr	r2, [pc, #96]	@ (8016350 <create_node+0xec>)
 80162ee:	4819      	ldr	r0, [pc, #100]	@ (8016354 <create_node+0xf0>)
 80162f0:	4633      	mov	r3, r6
 80162f2:	213c      	movs	r1, #60	@ 0x3c
 80162f4:	f003 fc2e 	bl	8019b54 <sniprintf>
 80162f8:	6920      	ldr	r0, [r4, #16]
 80162fa:	4916      	ldr	r1, [pc, #88]	@ (8016354 <create_node+0xf0>)
 80162fc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016300:	9100      	str	r1, [sp, #0]
 8016302:	2106      	movs	r1, #6
 8016304:	9101      	str	r1, [sp, #4]
 8016306:	6811      	ldr	r1, [r2, #0]
 8016308:	6962      	ldr	r2, [r4, #20]
 801630a:	fa1f f388 	uxth.w	r3, r8
 801630e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016312:	f7f8 fb51 	bl	800e9b8 <uxr_buffer_create_participant_bin>
 8016316:	4602      	mov	r2, r0
 8016318:	6920      	ldr	r0, [r4, #16]
 801631a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801631e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016322:	f7f6 fbf7 	bl	800cb14 <run_xrce_session>
 8016326:	b118      	cbz	r0, 8016330 <create_node+0xcc>
 8016328:	4628      	mov	r0, r5
 801632a:	b003      	add	sp, #12
 801632c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016330:	4628      	mov	r0, r5
 8016332:	f7f6 fa77 	bl	800c824 <rmw_uxrce_fini_node_memory>
 8016336:	2500      	movs	r5, #0
 8016338:	e7f6      	b.n	8016328 <create_node+0xc4>
 801633a:	4a07      	ldr	r2, [pc, #28]	@ (8016358 <create_node+0xf4>)
 801633c:	9600      	str	r6, [sp, #0]
 801633e:	463b      	mov	r3, r7
 8016340:	213c      	movs	r1, #60	@ 0x3c
 8016342:	4804      	ldr	r0, [pc, #16]	@ (8016354 <create_node+0xf0>)
 8016344:	f003 fc06 	bl	8019b54 <sniprintf>
 8016348:	e7d6      	b.n	80162f8 <create_node+0x94>
 801634a:	bf00      	nop
 801634c:	2000dadc 	.word	0x2000dadc
 8016350:	0801af3c 	.word	0x0801af3c
 8016354:	2000f168 	.word	0x2000f168
 8016358:	0801b178 	.word	0x0801b178

0801635c <rmw_create_node>:
 801635c:	b191      	cbz	r1, 8016384 <rmw_create_node+0x28>
 801635e:	b410      	push	{r4}
 8016360:	4614      	mov	r4, r2
 8016362:	780a      	ldrb	r2, [r1, #0]
 8016364:	4603      	mov	r3, r0
 8016366:	4608      	mov	r0, r1
 8016368:	b142      	cbz	r2, 801637c <rmw_create_node+0x20>
 801636a:	b13c      	cbz	r4, 801637c <rmw_create_node+0x20>
 801636c:	7822      	ldrb	r2, [r4, #0]
 801636e:	b12a      	cbz	r2, 801637c <rmw_create_node+0x20>
 8016370:	4621      	mov	r1, r4
 8016372:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8016374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016378:	f7ff bf74 	b.w	8016264 <create_node>
 801637c:	2000      	movs	r0, #0
 801637e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016382:	4770      	bx	lr
 8016384:	2000      	movs	r0, #0
 8016386:	4770      	bx	lr

08016388 <rmw_destroy_node>:
 8016388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801638a:	b328      	cbz	r0, 80163d8 <rmw_destroy_node+0x50>
 801638c:	4607      	mov	r7, r0
 801638e:	6800      	ldr	r0, [r0, #0]
 8016390:	b120      	cbz	r0, 801639c <rmw_destroy_node+0x14>
 8016392:	4b36      	ldr	r3, [pc, #216]	@ (801646c <rmw_destroy_node+0xe4>)
 8016394:	6819      	ldr	r1, [r3, #0]
 8016396:	f7e9 ff3b 	bl	8000210 <strcmp>
 801639a:	b9e8      	cbnz	r0, 80163d8 <rmw_destroy_node+0x50>
 801639c:	687d      	ldr	r5, [r7, #4]
 801639e:	b1dd      	cbz	r5, 80163d8 <rmw_destroy_node+0x50>
 80163a0:	4b33      	ldr	r3, [pc, #204]	@ (8016470 <rmw_destroy_node+0xe8>)
 80163a2:	681c      	ldr	r4, [r3, #0]
 80163a4:	2c00      	cmp	r4, #0
 80163a6:	d05f      	beq.n	8016468 <rmw_destroy_node+0xe0>
 80163a8:	2600      	movs	r6, #0
 80163aa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80163ae:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80163b2:	429d      	cmp	r5, r3
 80163b4:	d013      	beq.n	80163de <rmw_destroy_node+0x56>
 80163b6:	2c00      	cmp	r4, #0
 80163b8:	d1f7      	bne.n	80163aa <rmw_destroy_node+0x22>
 80163ba:	4b2e      	ldr	r3, [pc, #184]	@ (8016474 <rmw_destroy_node+0xec>)
 80163bc:	681c      	ldr	r4, [r3, #0]
 80163be:	b1c4      	cbz	r4, 80163f2 <rmw_destroy_node+0x6a>
 80163c0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80163c4:	6a0b      	ldr	r3, [r1, #32]
 80163c6:	429d      	cmp	r5, r3
 80163c8:	d1f9      	bne.n	80163be <rmw_destroy_node+0x36>
 80163ca:	317c      	adds	r1, #124	@ 0x7c
 80163cc:	4638      	mov	r0, r7
 80163ce:	f000 fad9 	bl	8016984 <rmw_destroy_subscription>
 80163d2:	2801      	cmp	r0, #1
 80163d4:	4606      	mov	r6, r0
 80163d6:	d1f2      	bne.n	80163be <rmw_destroy_node+0x36>
 80163d8:	2601      	movs	r6, #1
 80163da:	4630      	mov	r0, r6
 80163dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163de:	3184      	adds	r1, #132	@ 0x84
 80163e0:	4638      	mov	r0, r7
 80163e2:	f7f6 f84f 	bl	800c484 <rmw_destroy_publisher>
 80163e6:	2801      	cmp	r0, #1
 80163e8:	4606      	mov	r6, r0
 80163ea:	d0f5      	beq.n	80163d8 <rmw_destroy_node+0x50>
 80163ec:	2c00      	cmp	r4, #0
 80163ee:	d1dc      	bne.n	80163aa <rmw_destroy_node+0x22>
 80163f0:	e7e3      	b.n	80163ba <rmw_destroy_node+0x32>
 80163f2:	4b21      	ldr	r3, [pc, #132]	@ (8016478 <rmw_destroy_node+0xf0>)
 80163f4:	681c      	ldr	r4, [r3, #0]
 80163f6:	b16c      	cbz	r4, 8016414 <rmw_destroy_node+0x8c>
 80163f8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80163fc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80163fe:	429d      	cmp	r5, r3
 8016400:	d1f9      	bne.n	80163f6 <rmw_destroy_node+0x6e>
 8016402:	317c      	adds	r1, #124	@ 0x7c
 8016404:	4638      	mov	r0, r7
 8016406:	f000 f98b 	bl	8016720 <rmw_destroy_service>
 801640a:	2801      	cmp	r0, #1
 801640c:	4606      	mov	r6, r0
 801640e:	d0e3      	beq.n	80163d8 <rmw_destroy_node+0x50>
 8016410:	2c00      	cmp	r4, #0
 8016412:	d1f1      	bne.n	80163f8 <rmw_destroy_node+0x70>
 8016414:	4b19      	ldr	r3, [pc, #100]	@ (801647c <rmw_destroy_node+0xf4>)
 8016416:	681c      	ldr	r4, [r3, #0]
 8016418:	b16c      	cbz	r4, 8016436 <rmw_destroy_node+0xae>
 801641a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801641e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016420:	429d      	cmp	r5, r3
 8016422:	d1f9      	bne.n	8016418 <rmw_destroy_node+0x90>
 8016424:	317c      	adds	r1, #124	@ 0x7c
 8016426:	4638      	mov	r0, r7
 8016428:	f7ff fbe8 	bl	8015bfc <rmw_destroy_client>
 801642c:	2801      	cmp	r0, #1
 801642e:	4606      	mov	r6, r0
 8016430:	d0d2      	beq.n	80163d8 <rmw_destroy_node+0x50>
 8016432:	2c00      	cmp	r4, #0
 8016434:	d1f1      	bne.n	801641a <rmw_destroy_node+0x92>
 8016436:	6928      	ldr	r0, [r5, #16]
 8016438:	696a      	ldr	r2, [r5, #20]
 801643a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801643e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016442:	6819      	ldr	r1, [r3, #0]
 8016444:	f7f8 fa6e 	bl	800e924 <uxr_buffer_delete_entity>
 8016448:	4602      	mov	r2, r0
 801644a:	6928      	ldr	r0, [r5, #16]
 801644c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016450:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016454:	f7f6 fb5e 	bl	800cb14 <run_xrce_session>
 8016458:	2800      	cmp	r0, #0
 801645a:	bf08      	it	eq
 801645c:	2602      	moveq	r6, #2
 801645e:	4638      	mov	r0, r7
 8016460:	f7f6 f9e0 	bl	800c824 <rmw_uxrce_fini_node_memory>
 8016464:	4630      	mov	r0, r6
 8016466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016468:	4626      	mov	r6, r4
 801646a:	e7a6      	b.n	80163ba <rmw_destroy_node+0x32>
 801646c:	0801bc94 	.word	0x0801bc94
 8016470:	2000da28 	.word	0x2000da28
 8016474:	2000d1a8 	.word	0x2000d1a8
 8016478:	2000cd60 	.word	0x2000cd60
 801647c:	2000cc88 	.word	0x2000cc88

08016480 <rmw_node_get_graph_guard_condition>:
 8016480:	6843      	ldr	r3, [r0, #4]
 8016482:	6918      	ldr	r0, [r3, #16]
 8016484:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8016488:	4770      	bx	lr
 801648a:	bf00      	nop

0801648c <rmw_send_request>:
 801648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016490:	4604      	mov	r4, r0
 8016492:	6800      	ldr	r0, [r0, #0]
 8016494:	b08a      	sub	sp, #40	@ 0x28
 8016496:	460e      	mov	r6, r1
 8016498:	4615      	mov	r5, r2
 801649a:	b128      	cbz	r0, 80164a8 <rmw_send_request+0x1c>
 801649c:	4b1e      	ldr	r3, [pc, #120]	@ (8016518 <rmw_send_request+0x8c>)
 801649e:	6819      	ldr	r1, [r3, #0]
 80164a0:	f7e9 feb6 	bl	8000210 <strcmp>
 80164a4:	2800      	cmp	r0, #0
 80164a6:	d133      	bne.n	8016510 <rmw_send_request+0x84>
 80164a8:	6864      	ldr	r4, [r4, #4]
 80164aa:	6963      	ldr	r3, [r4, #20]
 80164ac:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 80164ae:	689b      	ldr	r3, [r3, #8]
 80164b0:	4798      	blx	r3
 80164b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80164b6:	4630      	mov	r0, r6
 80164b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80164bc:	4798      	blx	r3
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	9000      	str	r0, [sp, #0]
 80164c2:	6922      	ldr	r2, [r4, #16]
 80164c4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80164c6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80164ca:	ab02      	add	r3, sp, #8
 80164cc:	f7fa fd06 	bl	8010edc <uxr_prepare_output_stream>
 80164d0:	2300      	movs	r3, #0
 80164d2:	6028      	str	r0, [r5, #0]
 80164d4:	606b      	str	r3, [r5, #4]
 80164d6:	b190      	cbz	r0, 80164fe <rmw_send_request+0x72>
 80164d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80164dc:	a902      	add	r1, sp, #8
 80164de:	4630      	mov	r0, r6
 80164e0:	4798      	blx	r3
 80164e2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80164e6:	6938      	ldr	r0, [r7, #16]
 80164e8:	2b01      	cmp	r3, #1
 80164ea:	d00c      	beq.n	8016506 <rmw_send_request+0x7a>
 80164ec:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80164ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164f2:	f7f9 fa81 	bl	800f9f8 <uxr_run_session_until_confirm_delivery>
 80164f6:	2000      	movs	r0, #0
 80164f8:	b00a      	add	sp, #40	@ 0x28
 80164fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164fe:	2001      	movs	r0, #1
 8016500:	b00a      	add	sp, #40	@ 0x28
 8016502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016506:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801650a:	f7f8 fedd 	bl	800f2c8 <uxr_flash_output_streams>
 801650e:	e7f2      	b.n	80164f6 <rmw_send_request+0x6a>
 8016510:	200c      	movs	r0, #12
 8016512:	b00a      	add	sp, #40	@ 0x28
 8016514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016518:	0801bc94 	.word	0x0801bc94

0801651c <rmw_take_request>:
 801651c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016520:	4605      	mov	r5, r0
 8016522:	6800      	ldr	r0, [r0, #0]
 8016524:	b089      	sub	sp, #36	@ 0x24
 8016526:	460c      	mov	r4, r1
 8016528:	4690      	mov	r8, r2
 801652a:	461e      	mov	r6, r3
 801652c:	b128      	cbz	r0, 801653a <rmw_take_request+0x1e>
 801652e:	4b28      	ldr	r3, [pc, #160]	@ (80165d0 <rmw_take_request+0xb4>)
 8016530:	6819      	ldr	r1, [r3, #0]
 8016532:	f7e9 fe6d 	bl	8000210 <strcmp>
 8016536:	2800      	cmp	r0, #0
 8016538:	d146      	bne.n	80165c8 <rmw_take_request+0xac>
 801653a:	b10e      	cbz	r6, 8016540 <rmw_take_request+0x24>
 801653c:	2300      	movs	r3, #0
 801653e:	7033      	strb	r3, [r6, #0]
 8016540:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016544:	f7f6 fa68 	bl	800ca18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016548:	4648      	mov	r0, r9
 801654a:	f7f6 fa3f 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 801654e:	4607      	mov	r7, r0
 8016550:	b3b0      	cbz	r0, 80165c0 <rmw_take_request+0xa4>
 8016552:	6885      	ldr	r5, [r0, #8]
 8016554:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016558:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801655c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016560:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016564:	7423      	strb	r3, [r4, #16]
 8016566:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801656a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801656e:	74e2      	strb	r2, [r4, #19]
 8016570:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016574:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016578:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801657c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016580:	61e1      	str	r1, [r4, #28]
 8016582:	6162      	str	r2, [r4, #20]
 8016584:	61a3      	str	r3, [r4, #24]
 8016586:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801658a:	689b      	ldr	r3, [r3, #8]
 801658c:	4798      	blx	r3
 801658e:	6844      	ldr	r4, [r0, #4]
 8016590:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016594:	f105 0110 	add.w	r1, r5, #16
 8016598:	4668      	mov	r0, sp
 801659a:	f7f8 f89b 	bl	800e6d4 <ucdr_init_buffer>
 801659e:	68e3      	ldr	r3, [r4, #12]
 80165a0:	4641      	mov	r1, r8
 80165a2:	4668      	mov	r0, sp
 80165a4:	4798      	blx	r3
 80165a6:	4639      	mov	r1, r7
 80165a8:	4604      	mov	r4, r0
 80165aa:	480a      	ldr	r0, [pc, #40]	@ (80165d4 <rmw_take_request+0xb8>)
 80165ac:	f7ff fb12 	bl	8015bd4 <put_memory>
 80165b0:	b106      	cbz	r6, 80165b4 <rmw_take_request+0x98>
 80165b2:	7034      	strb	r4, [r6, #0]
 80165b4:	f084 0001 	eor.w	r0, r4, #1
 80165b8:	b2c0      	uxtb	r0, r0
 80165ba:	b009      	add	sp, #36	@ 0x24
 80165bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165c0:	2001      	movs	r0, #1
 80165c2:	b009      	add	sp, #36	@ 0x24
 80165c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165c8:	200c      	movs	r0, #12
 80165ca:	b009      	add	sp, #36	@ 0x24
 80165cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165d0:	0801bc94 	.word	0x0801bc94
 80165d4:	2000c9f8 	.word	0x2000c9f8

080165d8 <rmw_send_response>:
 80165d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165da:	4605      	mov	r5, r0
 80165dc:	6800      	ldr	r0, [r0, #0]
 80165de:	b091      	sub	sp, #68	@ 0x44
 80165e0:	460c      	mov	r4, r1
 80165e2:	4616      	mov	r6, r2
 80165e4:	b128      	cbz	r0, 80165f2 <rmw_send_response+0x1a>
 80165e6:	4b28      	ldr	r3, [pc, #160]	@ (8016688 <rmw_send_response+0xb0>)
 80165e8:	6819      	ldr	r1, [r3, #0]
 80165ea:	f7e9 fe11 	bl	8000210 <strcmp>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	d141      	bne.n	8016676 <rmw_send_response+0x9e>
 80165f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80165f6:	9306      	str	r3, [sp, #24]
 80165f8:	4623      	mov	r3, r4
 80165fa:	9207      	str	r2, [sp, #28]
 80165fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016600:	686d      	ldr	r5, [r5, #4]
 8016602:	789b      	ldrb	r3, [r3, #2]
 8016604:	68a1      	ldr	r1, [r4, #8]
 8016606:	f88d 2017 	strb.w	r2, [sp, #23]
 801660a:	f88d 3016 	strb.w	r3, [sp, #22]
 801660e:	68e2      	ldr	r2, [r4, #12]
 8016610:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016614:	6860      	ldr	r0, [r4, #4]
 8016616:	f8ad 3014 	strh.w	r3, [sp, #20]
 801661a:	ab02      	add	r3, sp, #8
 801661c:	c307      	stmia	r3!, {r0, r1, r2}
 801661e:	696b      	ldr	r3, [r5, #20]
 8016620:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016622:	68db      	ldr	r3, [r3, #12]
 8016624:	4798      	blx	r3
 8016626:	6844      	ldr	r4, [r0, #4]
 8016628:	4630      	mov	r0, r6
 801662a:	6923      	ldr	r3, [r4, #16]
 801662c:	4798      	blx	r3
 801662e:	f100 0318 	add.w	r3, r0, #24
 8016632:	6938      	ldr	r0, [r7, #16]
 8016634:	9300      	str	r3, [sp, #0]
 8016636:	692a      	ldr	r2, [r5, #16]
 8016638:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801663a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801663e:	ab08      	add	r3, sp, #32
 8016640:	f7fa fc4c 	bl	8010edc <uxr_prepare_output_stream>
 8016644:	b910      	cbnz	r0, 801664c <rmw_send_response+0x74>
 8016646:	2001      	movs	r0, #1
 8016648:	b011      	add	sp, #68	@ 0x44
 801664a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801664c:	a902      	add	r1, sp, #8
 801664e:	a808      	add	r0, sp, #32
 8016650:	f7fb fd68 	bl	8012124 <uxr_serialize_SampleIdentity>
 8016654:	68a3      	ldr	r3, [r4, #8]
 8016656:	a908      	add	r1, sp, #32
 8016658:	4630      	mov	r0, r6
 801665a:	4798      	blx	r3
 801665c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016660:	6938      	ldr	r0, [r7, #16]
 8016662:	2b01      	cmp	r3, #1
 8016664:	d00a      	beq.n	801667c <rmw_send_response+0xa4>
 8016666:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016668:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801666c:	f7f9 f9c4 	bl	800f9f8 <uxr_run_session_until_confirm_delivery>
 8016670:	2000      	movs	r0, #0
 8016672:	b011      	add	sp, #68	@ 0x44
 8016674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016676:	200c      	movs	r0, #12
 8016678:	b011      	add	sp, #68	@ 0x44
 801667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801667c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016680:	f7f8 fe22 	bl	800f2c8 <uxr_flash_output_streams>
 8016684:	e7f4      	b.n	8016670 <rmw_send_response+0x98>
 8016686:	bf00      	nop
 8016688:	0801bc94 	.word	0x0801bc94

0801668c <rmw_take_response>:
 801668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016690:	4604      	mov	r4, r0
 8016692:	6800      	ldr	r0, [r0, #0]
 8016694:	b088      	sub	sp, #32
 8016696:	4688      	mov	r8, r1
 8016698:	4617      	mov	r7, r2
 801669a:	461d      	mov	r5, r3
 801669c:	b120      	cbz	r0, 80166a8 <rmw_take_response+0x1c>
 801669e:	4b1e      	ldr	r3, [pc, #120]	@ (8016718 <rmw_take_response+0x8c>)
 80166a0:	6819      	ldr	r1, [r3, #0]
 80166a2:	f7e9 fdb5 	bl	8000210 <strcmp>
 80166a6:	bb78      	cbnz	r0, 8016708 <rmw_take_response+0x7c>
 80166a8:	b10d      	cbz	r5, 80166ae <rmw_take_response+0x22>
 80166aa:	2300      	movs	r3, #0
 80166ac:	702b      	strb	r3, [r5, #0]
 80166ae:	6864      	ldr	r4, [r4, #4]
 80166b0:	f7f6 f9b2 	bl	800ca18 <rmw_uxrce_clean_expired_static_input_buffer>
 80166b4:	4620      	mov	r0, r4
 80166b6:	f7f6 f989 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 80166ba:	4606      	mov	r6, r0
 80166bc:	b340      	cbz	r0, 8016710 <rmw_take_response+0x84>
 80166be:	6963      	ldr	r3, [r4, #20]
 80166c0:	6884      	ldr	r4, [r0, #8]
 80166c2:	68db      	ldr	r3, [r3, #12]
 80166c4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80166c8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80166cc:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80166d0:	4798      	blx	r3
 80166d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80166d6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80166da:	f104 0110 	add.w	r1, r4, #16
 80166de:	4668      	mov	r0, sp
 80166e0:	f7f7 fff8 	bl	800e6d4 <ucdr_init_buffer>
 80166e4:	4639      	mov	r1, r7
 80166e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80166ea:	4668      	mov	r0, sp
 80166ec:	4798      	blx	r3
 80166ee:	4631      	mov	r1, r6
 80166f0:	4604      	mov	r4, r0
 80166f2:	480a      	ldr	r0, [pc, #40]	@ (801671c <rmw_take_response+0x90>)
 80166f4:	f7ff fa6e 	bl	8015bd4 <put_memory>
 80166f8:	b105      	cbz	r5, 80166fc <rmw_take_response+0x70>
 80166fa:	702c      	strb	r4, [r5, #0]
 80166fc:	f084 0001 	eor.w	r0, r4, #1
 8016700:	b2c0      	uxtb	r0, r0
 8016702:	b008      	add	sp, #32
 8016704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016708:	200c      	movs	r0, #12
 801670a:	b008      	add	sp, #32
 801670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016710:	2001      	movs	r0, #1
 8016712:	b008      	add	sp, #32
 8016714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016718:	0801bc94 	.word	0x0801bc94
 801671c:	2000c9f8 	.word	0x2000c9f8

08016720 <rmw_destroy_service>:
 8016720:	b570      	push	{r4, r5, r6, lr}
 8016722:	b128      	cbz	r0, 8016730 <rmw_destroy_service+0x10>
 8016724:	4604      	mov	r4, r0
 8016726:	6800      	ldr	r0, [r0, #0]
 8016728:	460d      	mov	r5, r1
 801672a:	f7f6 fa79 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 801672e:	b910      	cbnz	r0, 8016736 <rmw_destroy_service+0x16>
 8016730:	2401      	movs	r4, #1
 8016732:	4620      	mov	r0, r4
 8016734:	bd70      	pop	{r4, r5, r6, pc}
 8016736:	6863      	ldr	r3, [r4, #4]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d0f9      	beq.n	8016730 <rmw_destroy_service+0x10>
 801673c:	2d00      	cmp	r5, #0
 801673e:	d0f7      	beq.n	8016730 <rmw_destroy_service+0x10>
 8016740:	6828      	ldr	r0, [r5, #0]
 8016742:	f7f6 fa6d 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 8016746:	2800      	cmp	r0, #0
 8016748:	d0f2      	beq.n	8016730 <rmw_destroy_service+0x10>
 801674a:	686e      	ldr	r6, [r5, #4]
 801674c:	2e00      	cmp	r6, #0
 801674e:	d0ef      	beq.n	8016730 <rmw_destroy_service+0x10>
 8016750:	6864      	ldr	r4, [r4, #4]
 8016752:	6932      	ldr	r2, [r6, #16]
 8016754:	6920      	ldr	r0, [r4, #16]
 8016756:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801675a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801675e:	6819      	ldr	r1, [r3, #0]
 8016760:	f001 fe4e 	bl	8018400 <uxr_buffer_cancel_data>
 8016764:	4602      	mov	r2, r0
 8016766:	6920      	ldr	r0, [r4, #16]
 8016768:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801676c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016770:	f7f6 f9d0 	bl	800cb14 <run_xrce_session>
 8016774:	6920      	ldr	r0, [r4, #16]
 8016776:	6932      	ldr	r2, [r6, #16]
 8016778:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801677c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016780:	6819      	ldr	r1, [r3, #0]
 8016782:	f7f8 f8cf 	bl	800e924 <uxr_buffer_delete_entity>
 8016786:	4602      	mov	r2, r0
 8016788:	6920      	ldr	r0, [r4, #16]
 801678a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801678e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016792:	f7f6 f9bf 	bl	800cb14 <run_xrce_session>
 8016796:	f080 0401 	eor.w	r4, r0, #1
 801679a:	b2e4      	uxtb	r4, r4
 801679c:	4628      	mov	r0, r5
 801679e:	0064      	lsls	r4, r4, #1
 80167a0:	f7f6 f884 	bl	800c8ac <rmw_uxrce_fini_service_memory>
 80167a4:	e7c5      	b.n	8016732 <rmw_destroy_service+0x12>
 80167a6:	bf00      	nop

080167a8 <rmw_create_subscription>:
 80167a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ac:	b08d      	sub	sp, #52	@ 0x34
 80167ae:	2800      	cmp	r0, #0
 80167b0:	f000 80d1 	beq.w	8016956 <rmw_create_subscription+0x1ae>
 80167b4:	460f      	mov	r7, r1
 80167b6:	2900      	cmp	r1, #0
 80167b8:	f000 80cd 	beq.w	8016956 <rmw_create_subscription+0x1ae>
 80167bc:	4604      	mov	r4, r0
 80167be:	6800      	ldr	r0, [r0, #0]
 80167c0:	4615      	mov	r5, r2
 80167c2:	461e      	mov	r6, r3
 80167c4:	f7f6 fa2c 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 80167c8:	2800      	cmp	r0, #0
 80167ca:	f000 80c4 	beq.w	8016956 <rmw_create_subscription+0x1ae>
 80167ce:	2d00      	cmp	r5, #0
 80167d0:	f000 80c1 	beq.w	8016956 <rmw_create_subscription+0x1ae>
 80167d4:	782b      	ldrb	r3, [r5, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	f000 80bd 	beq.w	8016956 <rmw_create_subscription+0x1ae>
 80167dc:	2e00      	cmp	r6, #0
 80167de:	f000 80ba 	beq.w	8016956 <rmw_create_subscription+0x1ae>
 80167e2:	485e      	ldr	r0, [pc, #376]	@ (801695c <rmw_create_subscription+0x1b4>)
 80167e4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80167e8:	f7ff f9e4 	bl	8015bb4 <get_memory>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	f000 80b2 	beq.w	8016956 <rmw_create_subscription+0x1ae>
 80167f2:	6884      	ldr	r4, [r0, #8]
 80167f4:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 80167f8:	f7ff fa62 	bl	8015cc0 <rmw_get_implementation_identifier>
 80167fc:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8016800:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8016802:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8016806:	4628      	mov	r0, r5
 8016808:	f7e9 fd62 	bl	80002d0 <strlen>
 801680c:	3001      	adds	r0, #1
 801680e:	283c      	cmp	r0, #60	@ 0x3c
 8016810:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8016814:	f200 8098 	bhi.w	8016948 <rmw_create_subscription+0x1a0>
 8016818:	4a51      	ldr	r2, [pc, #324]	@ (8016960 <rmw_create_subscription+0x1b8>)
 801681a:	462b      	mov	r3, r5
 801681c:	213c      	movs	r1, #60	@ 0x3c
 801681e:	4650      	mov	r0, sl
 8016820:	f003 f998 	bl	8019b54 <sniprintf>
 8016824:	4631      	mov	r1, r6
 8016826:	f8c4 9020 	str.w	r9, [r4, #32]
 801682a:	2250      	movs	r2, #80	@ 0x50
 801682c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016830:	f003 fbdf 	bl	8019ff2 <memcpy>
 8016834:	494b      	ldr	r1, [pc, #300]	@ (8016964 <rmw_create_subscription+0x1bc>)
 8016836:	4638      	mov	r0, r7
 8016838:	f7f6 fa00 	bl	800cc3c <get_message_typesupport_handle>
 801683c:	2800      	cmp	r0, #0
 801683e:	f000 8083 	beq.w	8016948 <rmw_create_subscription+0x1a0>
 8016842:	6842      	ldr	r2, [r0, #4]
 8016844:	61a2      	str	r2, [r4, #24]
 8016846:	2a00      	cmp	r2, #0
 8016848:	d07e      	beq.n	8016948 <rmw_create_subscription+0x1a0>
 801684a:	4629      	mov	r1, r5
 801684c:	4633      	mov	r3, r6
 801684e:	4648      	mov	r0, r9
 8016850:	f7ff fc92 	bl	8016178 <create_topic>
 8016854:	61e0      	str	r0, [r4, #28]
 8016856:	2800      	cmp	r0, #0
 8016858:	d07a      	beq.n	8016950 <rmw_create_subscription+0x1a8>
 801685a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801685e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016862:	2104      	movs	r1, #4
 8016864:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8016868:	1c42      	adds	r2, r0, #1
 801686a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801686e:	f7f8 faf3 	bl	800ee58 <uxr_object_id>
 8016872:	6120      	str	r0, [r4, #16]
 8016874:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016878:	2506      	movs	r5, #6
 801687a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801687e:	9500      	str	r5, [sp, #0]
 8016880:	6819      	ldr	r1, [r3, #0]
 8016882:	6922      	ldr	r2, [r4, #16]
 8016884:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016888:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801688c:	f7f8 f928 	bl	800eae0 <uxr_buffer_create_subscriber_bin>
 8016890:	4602      	mov	r2, r0
 8016892:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016896:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801689a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801689e:	f7f6 f939 	bl	800cb14 <run_xrce_session>
 80168a2:	2800      	cmp	r0, #0
 80168a4:	d050      	beq.n	8016948 <rmw_create_subscription+0x1a0>
 80168a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80168aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80168ae:	4629      	mov	r1, r5
 80168b0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80168b4:	1c42      	adds	r2, r0, #1
 80168b6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80168ba:	f7f8 facd 	bl	800ee58 <uxr_object_id>
 80168be:	af08      	add	r7, sp, #32
 80168c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80168c4:	69e3      	ldr	r3, [r4, #28]
 80168c6:	6160      	str	r0, [r4, #20]
 80168c8:	4631      	mov	r1, r6
 80168ca:	4638      	mov	r0, r7
 80168cc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80168d0:	9305      	str	r3, [sp, #20]
 80168d2:	f7f6 f93f 	bl	800cb54 <convert_qos_profile>
 80168d6:	9503      	str	r5, [sp, #12]
 80168d8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80168dc:	9b05      	ldr	r3, [sp, #20]
 80168de:	9001      	str	r0, [sp, #4]
 80168e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80168e4:	691b      	ldr	r3, [r3, #16]
 80168e6:	9300      	str	r3, [sp, #0]
 80168e8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80168ec:	f8db 1000 	ldr.w	r1, [fp]
 80168f0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80168f4:	f7f8 f988 	bl	800ec08 <uxr_buffer_create_datareader_bin>
 80168f8:	4602      	mov	r2, r0
 80168fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80168fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016902:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016906:	f7f6 f905 	bl	800cb14 <run_xrce_session>
 801690a:	b1e8      	cbz	r0, 8016948 <rmw_create_subscription+0x1a0>
 801690c:	7a33      	ldrb	r3, [r6, #8]
 801690e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016912:	2b02      	cmp	r3, #2
 8016914:	bf0c      	ite	eq
 8016916:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801691a:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801691e:	9307      	str	r3, [sp, #28]
 8016920:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016924:	2200      	movs	r2, #0
 8016926:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801692a:	ab0a      	add	r3, sp, #40	@ 0x28
 801692c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016930:	9300      	str	r3, [sp, #0]
 8016932:	6962      	ldr	r2, [r4, #20]
 8016934:	9b07      	ldr	r3, [sp, #28]
 8016936:	6809      	ldr	r1, [r1, #0]
 8016938:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801693c:	f001 fd28 	bl	8018390 <uxr_buffer_request_data>
 8016940:	4640      	mov	r0, r8
 8016942:	b00d      	add	sp, #52	@ 0x34
 8016944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016948:	69e0      	ldr	r0, [r4, #28]
 801694a:	b108      	cbz	r0, 8016950 <rmw_create_subscription+0x1a8>
 801694c:	f7f5 ffda 	bl	800c904 <rmw_uxrce_fini_topic_memory>
 8016950:	4640      	mov	r0, r8
 8016952:	f7f5 ff95 	bl	800c880 <rmw_uxrce_fini_subscription_memory>
 8016956:	f04f 0800 	mov.w	r8, #0
 801695a:	e7f1      	b.n	8016940 <rmw_create_subscription+0x198>
 801695c:	2000d1a8 	.word	0x2000d1a8
 8016960:	0801af3c 	.word	0x0801af3c
 8016964:	0801af08 	.word	0x0801af08

08016968 <rmw_subscription_get_actual_qos>:
 8016968:	b508      	push	{r3, lr}
 801696a:	4603      	mov	r3, r0
 801696c:	b140      	cbz	r0, 8016980 <rmw_subscription_get_actual_qos+0x18>
 801696e:	4608      	mov	r0, r1
 8016970:	b131      	cbz	r1, 8016980 <rmw_subscription_get_actual_qos+0x18>
 8016972:	6859      	ldr	r1, [r3, #4]
 8016974:	2250      	movs	r2, #80	@ 0x50
 8016976:	3128      	adds	r1, #40	@ 0x28
 8016978:	f003 fb3b 	bl	8019ff2 <memcpy>
 801697c:	2000      	movs	r0, #0
 801697e:	bd08      	pop	{r3, pc}
 8016980:	200b      	movs	r0, #11
 8016982:	bd08      	pop	{r3, pc}

08016984 <rmw_destroy_subscription>:
 8016984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016988:	b128      	cbz	r0, 8016996 <rmw_destroy_subscription+0x12>
 801698a:	4604      	mov	r4, r0
 801698c:	6800      	ldr	r0, [r0, #0]
 801698e:	460d      	mov	r5, r1
 8016990:	f7f6 f946 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 8016994:	b918      	cbnz	r0, 801699e <rmw_destroy_subscription+0x1a>
 8016996:	2401      	movs	r4, #1
 8016998:	4620      	mov	r0, r4
 801699a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801699e:	6863      	ldr	r3, [r4, #4]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d0f8      	beq.n	8016996 <rmw_destroy_subscription+0x12>
 80169a4:	2d00      	cmp	r5, #0
 80169a6:	d0f6      	beq.n	8016996 <rmw_destroy_subscription+0x12>
 80169a8:	6828      	ldr	r0, [r5, #0]
 80169aa:	f7f6 f939 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 80169ae:	2800      	cmp	r0, #0
 80169b0:	d0f1      	beq.n	8016996 <rmw_destroy_subscription+0x12>
 80169b2:	686c      	ldr	r4, [r5, #4]
 80169b4:	2c00      	cmp	r4, #0
 80169b6:	d0ee      	beq.n	8016996 <rmw_destroy_subscription+0x12>
 80169b8:	6a26      	ldr	r6, [r4, #32]
 80169ba:	6962      	ldr	r2, [r4, #20]
 80169bc:	6930      	ldr	r0, [r6, #16]
 80169be:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80169c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169c6:	6819      	ldr	r1, [r3, #0]
 80169c8:	f001 fd1a 	bl	8018400 <uxr_buffer_cancel_data>
 80169cc:	4602      	mov	r2, r0
 80169ce:	6930      	ldr	r0, [r6, #16]
 80169d0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80169d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80169d8:	f7f6 f89c 	bl	800cb14 <run_xrce_session>
 80169dc:	69e0      	ldr	r0, [r4, #28]
 80169de:	f7ff fc1f 	bl	8016220 <destroy_topic>
 80169e2:	6a23      	ldr	r3, [r4, #32]
 80169e4:	6962      	ldr	r2, [r4, #20]
 80169e6:	6918      	ldr	r0, [r3, #16]
 80169e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80169ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169f0:	6819      	ldr	r1, [r3, #0]
 80169f2:	f7f7 ff97 	bl	800e924 <uxr_buffer_delete_entity>
 80169f6:	6a23      	ldr	r3, [r4, #32]
 80169f8:	6922      	ldr	r2, [r4, #16]
 80169fa:	4680      	mov	r8, r0
 80169fc:	6918      	ldr	r0, [r3, #16]
 80169fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016a02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a06:	6819      	ldr	r1, [r3, #0]
 8016a08:	f7f7 ff8c 	bl	800e924 <uxr_buffer_delete_entity>
 8016a0c:	4607      	mov	r7, r0
 8016a0e:	6930      	ldr	r0, [r6, #16]
 8016a10:	4642      	mov	r2, r8
 8016a12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016a16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016a1a:	f7f6 f87b 	bl	800cb14 <run_xrce_session>
 8016a1e:	4604      	mov	r4, r0
 8016a20:	6930      	ldr	r0, [r6, #16]
 8016a22:	463a      	mov	r2, r7
 8016a24:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016a28:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016a2c:	f7f6 f872 	bl	800cb14 <run_xrce_session>
 8016a30:	4004      	ands	r4, r0
 8016a32:	f084 0401 	eor.w	r4, r4, #1
 8016a36:	b2e4      	uxtb	r4, r4
 8016a38:	4628      	mov	r0, r5
 8016a3a:	0064      	lsls	r4, r4, #1
 8016a3c:	f7f5 ff20 	bl	800c880 <rmw_uxrce_fini_subscription_memory>
 8016a40:	e7aa      	b.n	8016998 <rmw_destroy_subscription+0x14>
 8016a42:	bf00      	nop

08016a44 <rmw_take_with_info>:
 8016a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a46:	4604      	mov	r4, r0
 8016a48:	6800      	ldr	r0, [r0, #0]
 8016a4a:	b089      	sub	sp, #36	@ 0x24
 8016a4c:	460f      	mov	r7, r1
 8016a4e:	4615      	mov	r5, r2
 8016a50:	b128      	cbz	r0, 8016a5e <rmw_take_with_info+0x1a>
 8016a52:	4b23      	ldr	r3, [pc, #140]	@ (8016ae0 <rmw_take_with_info+0x9c>)
 8016a54:	6819      	ldr	r1, [r3, #0]
 8016a56:	f7e9 fbdb 	bl	8000210 <strcmp>
 8016a5a:	2800      	cmp	r0, #0
 8016a5c:	d13d      	bne.n	8016ada <rmw_take_with_info+0x96>
 8016a5e:	6864      	ldr	r4, [r4, #4]
 8016a60:	b1fd      	cbz	r5, 8016aa2 <rmw_take_with_info+0x5e>
 8016a62:	2300      	movs	r3, #0
 8016a64:	702b      	strb	r3, [r5, #0]
 8016a66:	f7f5 ffd7 	bl	800ca18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	f7f5 ffae 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a70:	4606      	mov	r6, r0
 8016a72:	b1e8      	cbz	r0, 8016ab0 <rmw_take_with_info+0x6c>
 8016a74:	6881      	ldr	r1, [r0, #8]
 8016a76:	4668      	mov	r0, sp
 8016a78:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016a7c:	3110      	adds	r1, #16
 8016a7e:	f7f7 fe29 	bl	800e6d4 <ucdr_init_buffer>
 8016a82:	69a3      	ldr	r3, [r4, #24]
 8016a84:	4639      	mov	r1, r7
 8016a86:	68db      	ldr	r3, [r3, #12]
 8016a88:	4668      	mov	r0, sp
 8016a8a:	4798      	blx	r3
 8016a8c:	4631      	mov	r1, r6
 8016a8e:	4604      	mov	r4, r0
 8016a90:	4814      	ldr	r0, [pc, #80]	@ (8016ae4 <rmw_take_with_info+0xa0>)
 8016a92:	f7ff f89f 	bl	8015bd4 <put_memory>
 8016a96:	702c      	strb	r4, [r5, #0]
 8016a98:	f084 0001 	eor.w	r0, r4, #1
 8016a9c:	b2c0      	uxtb	r0, r0
 8016a9e:	b009      	add	sp, #36	@ 0x24
 8016aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016aa2:	f7f5 ffb9 	bl	800ca18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016aa6:	4620      	mov	r0, r4
 8016aa8:	f7f5 ff90 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016aac:	4605      	mov	r5, r0
 8016aae:	b910      	cbnz	r0, 8016ab6 <rmw_take_with_info+0x72>
 8016ab0:	2001      	movs	r0, #1
 8016ab2:	b009      	add	sp, #36	@ 0x24
 8016ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ab6:	68a9      	ldr	r1, [r5, #8]
 8016ab8:	4668      	mov	r0, sp
 8016aba:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016abe:	3110      	adds	r1, #16
 8016ac0:	f7f7 fe08 	bl	800e6d4 <ucdr_init_buffer>
 8016ac4:	69a3      	ldr	r3, [r4, #24]
 8016ac6:	4639      	mov	r1, r7
 8016ac8:	68db      	ldr	r3, [r3, #12]
 8016aca:	4668      	mov	r0, sp
 8016acc:	4798      	blx	r3
 8016ace:	4629      	mov	r1, r5
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	4804      	ldr	r0, [pc, #16]	@ (8016ae4 <rmw_take_with_info+0xa0>)
 8016ad4:	f7ff f87e 	bl	8015bd4 <put_memory>
 8016ad8:	e7de      	b.n	8016a98 <rmw_take_with_info+0x54>
 8016ada:	200c      	movs	r0, #12
 8016adc:	b009      	add	sp, #36	@ 0x24
 8016ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae0:	0801bc94 	.word	0x0801bc94
 8016ae4:	2000c9f8 	.word	0x2000c9f8

08016ae8 <rmw_wait>:
 8016ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aec:	b089      	sub	sp, #36	@ 0x24
 8016aee:	4607      	mov	r7, r0
 8016af0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016af2:	460e      	mov	r6, r1
 8016af4:	4698      	mov	r8, r3
 8016af6:	4691      	mov	r9, r2
 8016af8:	2a00      	cmp	r2, #0
 8016afa:	f000 811e 	beq.w	8016d3a <rmw_wait+0x252>
 8016afe:	2c00      	cmp	r4, #0
 8016b00:	f000 80ef 	beq.w	8016ce2 <rmw_wait+0x1fa>
 8016b04:	4bb5      	ldr	r3, [pc, #724]	@ (8016ddc <rmw_wait+0x2f4>)
 8016b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b08:	ad04      	add	r5, sp, #16
 8016b0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8016b0e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016b16:	f7fe fe83 	bl	8015820 <rmw_time_equal>
 8016b1a:	2800      	cmp	r0, #0
 8016b1c:	f000 811b 	beq.w	8016d56 <rmw_wait+0x26e>
 8016b20:	f04f 35ff 	mov.w	r5, #4294967295
 8016b24:	f7f5 ff78 	bl	800ca18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016b28:	4bad      	ldr	r3, [pc, #692]	@ (8016de0 <rmw_wait+0x2f8>)
 8016b2a:	681c      	ldr	r4, [r3, #0]
 8016b2c:	b14c      	cbz	r4, 8016b42 <rmw_wait+0x5a>
 8016b2e:	4623      	mov	r3, r4
 8016b30:	2100      	movs	r1, #0
 8016b32:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016b36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016b3a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d1f7      	bne.n	8016b32 <rmw_wait+0x4a>
 8016b42:	f1b9 0f00 	cmp.w	r9, #0
 8016b46:	d011      	beq.n	8016b6c <rmw_wait+0x84>
 8016b48:	f8d9 1000 	ldr.w	r1, [r9]
 8016b4c:	b171      	cbz	r1, 8016b6c <rmw_wait+0x84>
 8016b4e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016b52:	2300      	movs	r3, #0
 8016b54:	2001      	movs	r0, #1
 8016b56:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016b5a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016b5c:	6912      	ldr	r2, [r2, #16]
 8016b5e:	3301      	adds	r3, #1
 8016b60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016b64:	4299      	cmp	r1, r3
 8016b66:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016b6a:	d1f4      	bne.n	8016b56 <rmw_wait+0x6e>
 8016b6c:	f1b8 0f00 	cmp.w	r8, #0
 8016b70:	f000 8109 	beq.w	8016d86 <rmw_wait+0x29e>
 8016b74:	f8d8 1000 	ldr.w	r1, [r8]
 8016b78:	2900      	cmp	r1, #0
 8016b7a:	f000 8116 	beq.w	8016daa <rmw_wait+0x2c2>
 8016b7e:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016b82:	2300      	movs	r3, #0
 8016b84:	2001      	movs	r0, #1
 8016b86:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016b8a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016b8c:	6912      	ldr	r2, [r2, #16]
 8016b8e:	3301      	adds	r3, #1
 8016b90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016b94:	4299      	cmp	r1, r3
 8016b96:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016b9a:	d1f4      	bne.n	8016b86 <rmw_wait+0x9e>
 8016b9c:	2f00      	cmp	r7, #0
 8016b9e:	f000 8114 	beq.w	8016dca <rmw_wait+0x2e2>
 8016ba2:	6839      	ldr	r1, [r7, #0]
 8016ba4:	b171      	cbz	r1, 8016bc4 <rmw_wait+0xdc>
 8016ba6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8016baa:	2300      	movs	r3, #0
 8016bac:	2001      	movs	r0, #1
 8016bae:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016bb2:	6a12      	ldr	r2, [r2, #32]
 8016bb4:	6912      	ldr	r2, [r2, #16]
 8016bb6:	3301      	adds	r3, #1
 8016bb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016bbc:	4299      	cmp	r1, r3
 8016bbe:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016bc2:	d1f4      	bne.n	8016bae <rmw_wait+0xc6>
 8016bc4:	b344      	cbz	r4, 8016c18 <rmw_wait+0x130>
 8016bc6:	4622      	mov	r2, r4
 8016bc8:	2300      	movs	r3, #0
 8016bca:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016bce:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016bd2:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016bd6:	440b      	add	r3, r1
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	2a00      	cmp	r2, #0
 8016bdc:	d1f5      	bne.n	8016bca <rmw_wait+0xe2>
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d075      	beq.n	8016cce <rmw_wait+0x1e6>
 8016be2:	1c6a      	adds	r2, r5, #1
 8016be4:	d00d      	beq.n	8016c02 <rmw_wait+0x11a>
 8016be6:	ee07 5a90 	vmov	s15, r5
 8016bea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016bee:	ee07 3a90 	vmov	s15, r3
 8016bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bfa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016bfe:	ee17 5a90 	vmov	r5, s15
 8016c02:	68a0      	ldr	r0, [r4, #8]
 8016c04:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016c08:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	f040 808a 	bne.w	8016d26 <rmw_wait+0x23e>
 8016c12:	6864      	ldr	r4, [r4, #4]
 8016c14:	2c00      	cmp	r4, #0
 8016c16:	d1f4      	bne.n	8016c02 <rmw_wait+0x11a>
 8016c18:	f1b9 0f00 	cmp.w	r9, #0
 8016c1c:	f000 80c3 	beq.w	8016da6 <rmw_wait+0x2be>
 8016c20:	f8d9 5000 	ldr.w	r5, [r9]
 8016c24:	b185      	cbz	r5, 8016c48 <rmw_wait+0x160>
 8016c26:	2400      	movs	r4, #0
 8016c28:	4625      	mov	r5, r4
 8016c2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016c2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c32:	f7f5 fecb 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c36:	2800      	cmp	r0, #0
 8016c38:	d06d      	beq.n	8016d16 <rmw_wait+0x22e>
 8016c3a:	f8d9 3000 	ldr.w	r3, [r9]
 8016c3e:	3401      	adds	r4, #1
 8016c40:	42a3      	cmp	r3, r4
 8016c42:	f04f 0501 	mov.w	r5, #1
 8016c46:	d8f0      	bhi.n	8016c2a <rmw_wait+0x142>
 8016c48:	f1b8 0f00 	cmp.w	r8, #0
 8016c4c:	d012      	beq.n	8016c74 <rmw_wait+0x18c>
 8016c4e:	f8d8 1000 	ldr.w	r1, [r8]
 8016c52:	2400      	movs	r4, #0
 8016c54:	b171      	cbz	r1, 8016c74 <rmw_wait+0x18c>
 8016c56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c5e:	f7f5 feb5 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c62:	2800      	cmp	r0, #0
 8016c64:	d047      	beq.n	8016cf6 <rmw_wait+0x20e>
 8016c66:	f8d8 3000 	ldr.w	r3, [r8]
 8016c6a:	3401      	adds	r4, #1
 8016c6c:	42a3      	cmp	r3, r4
 8016c6e:	f04f 0501 	mov.w	r5, #1
 8016c72:	d8f0      	bhi.n	8016c56 <rmw_wait+0x16e>
 8016c74:	b17f      	cbz	r7, 8016c96 <rmw_wait+0x1ae>
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	2400      	movs	r4, #0
 8016c7a:	b163      	cbz	r3, 8016c96 <rmw_wait+0x1ae>
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c82:	f7f5 fea3 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c86:	2800      	cmp	r0, #0
 8016c88:	d03d      	beq.n	8016d06 <rmw_wait+0x21e>
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	3401      	adds	r4, #1
 8016c8e:	42a3      	cmp	r3, r4
 8016c90:	f04f 0501 	mov.w	r5, #1
 8016c94:	d8f2      	bhi.n	8016c7c <rmw_wait+0x194>
 8016c96:	b1a6      	cbz	r6, 8016cc2 <rmw_wait+0x1da>
 8016c98:	6834      	ldr	r4, [r6, #0]
 8016c9a:	b194      	cbz	r4, 8016cc2 <rmw_wait+0x1da>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	461f      	mov	r7, r3
 8016ca0:	e004      	b.n	8016cac <rmw_wait+0x1c4>
 8016ca2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	429c      	cmp	r4, r3
 8016caa:	d00a      	beq.n	8016cc2 <rmw_wait+0x1da>
 8016cac:	6870      	ldr	r0, [r6, #4]
 8016cae:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016cb2:	7c0a      	ldrb	r2, [r1, #16]
 8016cb4:	2a00      	cmp	r2, #0
 8016cb6:	d0f4      	beq.n	8016ca2 <rmw_wait+0x1ba>
 8016cb8:	3301      	adds	r3, #1
 8016cba:	429c      	cmp	r4, r3
 8016cbc:	740f      	strb	r7, [r1, #16]
 8016cbe:	4615      	mov	r5, r2
 8016cc0:	d1f4      	bne.n	8016cac <rmw_wait+0x1c4>
 8016cc2:	f085 0001 	eor.w	r0, r5, #1
 8016cc6:	0040      	lsls	r0, r0, #1
 8016cc8:	b009      	add	sp, #36	@ 0x24
 8016cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cce:	68a0      	ldr	r0, [r4, #8]
 8016cd0:	2100      	movs	r1, #0
 8016cd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016cd6:	f7f8 fe55 	bl	800f984 <uxr_run_session_timeout>
 8016cda:	6864      	ldr	r4, [r4, #4]
 8016cdc:	2c00      	cmp	r4, #0
 8016cde:	d1f6      	bne.n	8016cce <rmw_wait+0x1e6>
 8016ce0:	e79a      	b.n	8016c18 <rmw_wait+0x130>
 8016ce2:	f7f5 fe99 	bl	800ca18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8016de0 <rmw_wait+0x2f8>)
 8016ce8:	681c      	ldr	r4, [r3, #0]
 8016cea:	f04f 35ff 	mov.w	r5, #4294967295
 8016cee:	2c00      	cmp	r4, #0
 8016cf0:	f47f af1d 	bne.w	8016b2e <rmw_wait+0x46>
 8016cf4:	e728      	b.n	8016b48 <rmw_wait+0x60>
 8016cf6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8016cfa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016cfe:	3401      	adds	r4, #1
 8016d00:	429c      	cmp	r4, r3
 8016d02:	d3a8      	bcc.n	8016c56 <rmw_wait+0x16e>
 8016d04:	e7b6      	b.n	8016c74 <rmw_wait+0x18c>
 8016d06:	e9d7 3200 	ldrd	r3, r2, [r7]
 8016d0a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016d0e:	3401      	adds	r4, #1
 8016d10:	42a3      	cmp	r3, r4
 8016d12:	d8b3      	bhi.n	8016c7c <rmw_wait+0x194>
 8016d14:	e7bf      	b.n	8016c96 <rmw_wait+0x1ae>
 8016d16:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016d1a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016d1e:	3401      	adds	r4, #1
 8016d20:	42a3      	cmp	r3, r4
 8016d22:	d882      	bhi.n	8016c2a <rmw_wait+0x142>
 8016d24:	e790      	b.n	8016c48 <rmw_wait+0x160>
 8016d26:	4629      	mov	r1, r5
 8016d28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d2c:	f7f8 fe44 	bl	800f9b8 <uxr_run_session_until_data>
 8016d30:	6864      	ldr	r4, [r4, #4]
 8016d32:	2c00      	cmp	r4, #0
 8016d34:	f47f af65 	bne.w	8016c02 <rmw_wait+0x11a>
 8016d38:	e76e      	b.n	8016c18 <rmw_wait+0x130>
 8016d3a:	b1f3      	cbz	r3, 8016d7a <rmw_wait+0x292>
 8016d3c:	2c00      	cmp	r4, #0
 8016d3e:	f47f aee1 	bne.w	8016b04 <rmw_wait+0x1c>
 8016d42:	f7f5 fe69 	bl	800ca18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016d46:	4b26      	ldr	r3, [pc, #152]	@ (8016de0 <rmw_wait+0x2f8>)
 8016d48:	681c      	ldr	r4, [r3, #0]
 8016d4a:	f04f 35ff 	mov.w	r5, #4294967295
 8016d4e:	2c00      	cmp	r4, #0
 8016d50:	f47f aeed 	bne.w	8016b2e <rmw_wait+0x46>
 8016d54:	e70a      	b.n	8016b6c <rmw_wait+0x84>
 8016d56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016d5a:	f7fe fdb5 	bl	80158c8 <rmw_time_total_nsec>
 8016d5e:	4a21      	ldr	r2, [pc, #132]	@ (8016de4 <rmw_wait+0x2fc>)
 8016d60:	2300      	movs	r3, #0
 8016d62:	f7e9 fe1b 	bl	800099c <__aeabi_uldivmod>
 8016d66:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016d6a:	f171 0100 	sbcs.w	r1, r1, #0
 8016d6e:	4605      	mov	r5, r0
 8016d70:	f6ff aed8 	blt.w	8016b24 <rmw_wait+0x3c>
 8016d74:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8016d78:	e6d4      	b.n	8016b24 <rmw_wait+0x3c>
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	d1de      	bne.n	8016d3c <rmw_wait+0x254>
 8016d7e:	2900      	cmp	r1, #0
 8016d80:	d1dc      	bne.n	8016d3c <rmw_wait+0x254>
 8016d82:	4608      	mov	r0, r1
 8016d84:	e7a0      	b.n	8016cc8 <rmw_wait+0x1e0>
 8016d86:	2f00      	cmp	r7, #0
 8016d88:	f47f af0b 	bne.w	8016ba2 <rmw_wait+0xba>
 8016d8c:	2c00      	cmp	r4, #0
 8016d8e:	f47f af1a 	bne.w	8016bc6 <rmw_wait+0xde>
 8016d92:	f1b9 0f00 	cmp.w	r9, #0
 8016d96:	d027      	beq.n	8016de8 <rmw_wait+0x300>
 8016d98:	f8d9 3000 	ldr.w	r3, [r9]
 8016d9c:	4625      	mov	r5, r4
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	f47f af41 	bne.w	8016c26 <rmw_wait+0x13e>
 8016da4:	e777      	b.n	8016c96 <rmw_wait+0x1ae>
 8016da6:	464d      	mov	r5, r9
 8016da8:	e74e      	b.n	8016c48 <rmw_wait+0x160>
 8016daa:	2f00      	cmp	r7, #0
 8016dac:	f47f aef9 	bne.w	8016ba2 <rmw_wait+0xba>
 8016db0:	2c00      	cmp	r4, #0
 8016db2:	f47f af08 	bne.w	8016bc6 <rmw_wait+0xde>
 8016db6:	f1b9 0f00 	cmp.w	r9, #0
 8016dba:	d015      	beq.n	8016de8 <rmw_wait+0x300>
 8016dbc:	f8d9 3000 	ldr.w	r3, [r9]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f47f af30 	bne.w	8016c26 <rmw_wait+0x13e>
 8016dc6:	2500      	movs	r5, #0
 8016dc8:	e743      	b.n	8016c52 <rmw_wait+0x16a>
 8016dca:	2c00      	cmp	r4, #0
 8016dcc:	f47f aefb 	bne.w	8016bc6 <rmw_wait+0xde>
 8016dd0:	f1b9 0f00 	cmp.w	r9, #0
 8016dd4:	f47f af24 	bne.w	8016c20 <rmw_wait+0x138>
 8016dd8:	e7f5      	b.n	8016dc6 <rmw_wait+0x2de>
 8016dda:	bf00      	nop
 8016ddc:	0801ad18 	.word	0x0801ad18
 8016de0:	2000f098 	.word	0x2000f098
 8016de4:	000f4240 	.word	0x000f4240
 8016de8:	464d      	mov	r5, r9
 8016dea:	e754      	b.n	8016c96 <rmw_wait+0x1ae>

08016dec <rmw_create_wait_set>:
 8016dec:	b508      	push	{r3, lr}
 8016dee:	4803      	ldr	r0, [pc, #12]	@ (8016dfc <rmw_create_wait_set+0x10>)
 8016df0:	f7fe fee0 	bl	8015bb4 <get_memory>
 8016df4:	b108      	cbz	r0, 8016dfa <rmw_create_wait_set+0xe>
 8016df6:	6880      	ldr	r0, [r0, #8]
 8016df8:	3010      	adds	r0, #16
 8016dfa:	bd08      	pop	{r3, pc}
 8016dfc:	2000a854 	.word	0x2000a854

08016e00 <rmw_destroy_wait_set>:
 8016e00:	b508      	push	{r3, lr}
 8016e02:	4b08      	ldr	r3, [pc, #32]	@ (8016e24 <rmw_destroy_wait_set+0x24>)
 8016e04:	6819      	ldr	r1, [r3, #0]
 8016e06:	b911      	cbnz	r1, 8016e0e <rmw_destroy_wait_set+0xe>
 8016e08:	e00a      	b.n	8016e20 <rmw_destroy_wait_set+0x20>
 8016e0a:	6849      	ldr	r1, [r1, #4]
 8016e0c:	b141      	cbz	r1, 8016e20 <rmw_destroy_wait_set+0x20>
 8016e0e:	688b      	ldr	r3, [r1, #8]
 8016e10:	3310      	adds	r3, #16
 8016e12:	4298      	cmp	r0, r3
 8016e14:	d1f9      	bne.n	8016e0a <rmw_destroy_wait_set+0xa>
 8016e16:	4803      	ldr	r0, [pc, #12]	@ (8016e24 <rmw_destroy_wait_set+0x24>)
 8016e18:	f7fe fedc 	bl	8015bd4 <put_memory>
 8016e1c:	2000      	movs	r0, #0
 8016e1e:	bd08      	pop	{r3, pc}
 8016e20:	2001      	movs	r0, #1
 8016e22:	bd08      	pop	{r3, pc}
 8016e24:	2000a854 	.word	0x2000a854

08016e28 <rmw_uros_epoch_nanos>:
 8016e28:	4b05      	ldr	r3, [pc, #20]	@ (8016e40 <rmw_uros_epoch_nanos+0x18>)
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	b123      	cbz	r3, 8016e38 <rmw_uros_epoch_nanos+0x10>
 8016e2e:	6898      	ldr	r0, [r3, #8]
 8016e30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e34:	f7f8 ba3e 	b.w	800f2b4 <uxr_epoch_nanos>
 8016e38:	2000      	movs	r0, #0
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	4770      	bx	lr
 8016e3e:	bf00      	nop
 8016e40:	2000f098 	.word	0x2000f098

08016e44 <rosidl_runtime_c__float__Sequence__init>:
 8016e44:	b1b0      	cbz	r0, 8016e74 <rosidl_runtime_c__float__Sequence__init+0x30>
 8016e46:	b530      	push	{r4, r5, lr}
 8016e48:	460d      	mov	r5, r1
 8016e4a:	b087      	sub	sp, #28
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	b931      	cbnz	r1, 8016e5e <rosidl_runtime_c__float__Sequence__init+0x1a>
 8016e50:	4608      	mov	r0, r1
 8016e52:	e9c4 0500 	strd	r0, r5, [r4]
 8016e56:	60a5      	str	r5, [r4, #8]
 8016e58:	2001      	movs	r0, #1
 8016e5a:	b007      	add	sp, #28
 8016e5c:	bd30      	pop	{r4, r5, pc}
 8016e5e:	a801      	add	r0, sp, #4
 8016e60:	f7f5 f896 	bl	800bf90 <rcutils_get_default_allocator>
 8016e64:	9b01      	ldr	r3, [sp, #4]
 8016e66:	9905      	ldr	r1, [sp, #20]
 8016e68:	00a8      	lsls	r0, r5, #2
 8016e6a:	4798      	blx	r3
 8016e6c:	2800      	cmp	r0, #0
 8016e6e:	d1f0      	bne.n	8016e52 <rosidl_runtime_c__float__Sequence__init+0xe>
 8016e70:	2000      	movs	r0, #0
 8016e72:	e7f2      	b.n	8016e5a <rosidl_runtime_c__float__Sequence__init+0x16>
 8016e74:	2000      	movs	r0, #0
 8016e76:	4770      	bx	lr

08016e78 <rosidl_runtime_c__float__Sequence__fini>:
 8016e78:	b188      	cbz	r0, 8016e9e <rosidl_runtime_c__float__Sequence__fini+0x26>
 8016e7a:	b510      	push	{r4, lr}
 8016e7c:	6803      	ldr	r3, [r0, #0]
 8016e7e:	b086      	sub	sp, #24
 8016e80:	4604      	mov	r4, r0
 8016e82:	b153      	cbz	r3, 8016e9a <rosidl_runtime_c__float__Sequence__fini+0x22>
 8016e84:	a801      	add	r0, sp, #4
 8016e86:	f7f5 f883 	bl	800bf90 <rcutils_get_default_allocator>
 8016e8a:	9b02      	ldr	r3, [sp, #8]
 8016e8c:	9905      	ldr	r1, [sp, #20]
 8016e8e:	6820      	ldr	r0, [r4, #0]
 8016e90:	4798      	blx	r3
 8016e92:	2300      	movs	r3, #0
 8016e94:	e9c4 3300 	strd	r3, r3, [r4]
 8016e98:	60a3      	str	r3, [r4, #8]
 8016e9a:	b006      	add	sp, #24
 8016e9c:	bd10      	pop	{r4, pc}
 8016e9e:	4770      	bx	lr

08016ea0 <rosidl_runtime_c__int32__Sequence__init>:
 8016ea0:	b1b0      	cbz	r0, 8016ed0 <rosidl_runtime_c__int32__Sequence__init+0x30>
 8016ea2:	b530      	push	{r4, r5, lr}
 8016ea4:	460d      	mov	r5, r1
 8016ea6:	b087      	sub	sp, #28
 8016ea8:	4604      	mov	r4, r0
 8016eaa:	b931      	cbnz	r1, 8016eba <rosidl_runtime_c__int32__Sequence__init+0x1a>
 8016eac:	4608      	mov	r0, r1
 8016eae:	e9c4 0500 	strd	r0, r5, [r4]
 8016eb2:	60a5      	str	r5, [r4, #8]
 8016eb4:	2001      	movs	r0, #1
 8016eb6:	b007      	add	sp, #28
 8016eb8:	bd30      	pop	{r4, r5, pc}
 8016eba:	a801      	add	r0, sp, #4
 8016ebc:	f7f5 f868 	bl	800bf90 <rcutils_get_default_allocator>
 8016ec0:	9b01      	ldr	r3, [sp, #4]
 8016ec2:	9905      	ldr	r1, [sp, #20]
 8016ec4:	00a8      	lsls	r0, r5, #2
 8016ec6:	4798      	blx	r3
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d1f0      	bne.n	8016eae <rosidl_runtime_c__int32__Sequence__init+0xe>
 8016ecc:	2000      	movs	r0, #0
 8016ece:	e7f2      	b.n	8016eb6 <rosidl_runtime_c__int32__Sequence__init+0x16>
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	4770      	bx	lr

08016ed4 <rosidl_runtime_c__int32__Sequence__fini>:
 8016ed4:	b188      	cbz	r0, 8016efa <rosidl_runtime_c__int32__Sequence__fini+0x26>
 8016ed6:	b510      	push	{r4, lr}
 8016ed8:	6803      	ldr	r3, [r0, #0]
 8016eda:	b086      	sub	sp, #24
 8016edc:	4604      	mov	r4, r0
 8016ede:	b153      	cbz	r3, 8016ef6 <rosidl_runtime_c__int32__Sequence__fini+0x22>
 8016ee0:	a801      	add	r0, sp, #4
 8016ee2:	f7f5 f855 	bl	800bf90 <rcutils_get_default_allocator>
 8016ee6:	9b02      	ldr	r3, [sp, #8]
 8016ee8:	9905      	ldr	r1, [sp, #20]
 8016eea:	6820      	ldr	r0, [r4, #0]
 8016eec:	4798      	blx	r3
 8016eee:	2300      	movs	r3, #0
 8016ef0:	e9c4 3300 	strd	r3, r3, [r4]
 8016ef4:	60a3      	str	r3, [r4, #8]
 8016ef6:	b006      	add	sp, #24
 8016ef8:	bd10      	pop	{r4, pc}
 8016efa:	4770      	bx	lr

08016efc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f00:	6805      	ldr	r5, [r0, #0]
 8016f02:	4604      	mov	r4, r0
 8016f04:	4628      	mov	r0, r5
 8016f06:	460e      	mov	r6, r1
 8016f08:	f7e9 f982 	bl	8000210 <strcmp>
 8016f0c:	b308      	cbz	r0, 8016f52 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8016f0e:	4b12      	ldr	r3, [pc, #72]	@ (8016f58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 8016f10:	4628      	mov	r0, r5
 8016f12:	6819      	ldr	r1, [r3, #0]
 8016f14:	f7e9 f97c 	bl	8000210 <strcmp>
 8016f18:	4605      	mov	r5, r0
 8016f1a:	b980      	cbnz	r0, 8016f3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8016f1c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016f20:	f8d8 4000 	ldr.w	r4, [r8]
 8016f24:	b1ac      	cbz	r4, 8016f52 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8016f26:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016f2a:	3f04      	subs	r7, #4
 8016f2c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8016f30:	4631      	mov	r1, r6
 8016f32:	f7e9 f96d 	bl	8000210 <strcmp>
 8016f36:	b128      	cbz	r0, 8016f44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8016f38:	3501      	adds	r5, #1
 8016f3a:	42a5      	cmp	r5, r4
 8016f3c:	d1f6      	bne.n	8016f2c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 8016f3e:	2000      	movs	r0, #0
 8016f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f44:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016f48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f50:	4718      	bx	r3
 8016f52:	4620      	mov	r0, r4
 8016f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f58:	200002c4 	.word	0x200002c4

08016f5c <std_msgs__msg__Float32MultiArray__get_type_hash>:
 8016f5c:	4800      	ldr	r0, [pc, #0]	@ (8016f60 <std_msgs__msg__Float32MultiArray__get_type_hash+0x4>)
 8016f5e:	4770      	bx	lr
 8016f60:	200002cc 	.word	0x200002cc

08016f64 <std_msgs__msg__Float32MultiArray__get_type_description>:
 8016f64:	b570      	push	{r4, r5, r6, lr}
 8016f66:	4e0c      	ldr	r6, [pc, #48]	@ (8016f98 <std_msgs__msg__Float32MultiArray__get_type_description+0x34>)
 8016f68:	7835      	ldrb	r5, [r6, #0]
 8016f6a:	b10d      	cbz	r5, 8016f70 <std_msgs__msg__Float32MultiArray__get_type_description+0xc>
 8016f6c:	480b      	ldr	r0, [pc, #44]	@ (8016f9c <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 8016f6e:	bd70      	pop	{r4, r5, r6, pc}
 8016f70:	4628      	mov	r0, r5
 8016f72:	f000 f8af 	bl	80170d4 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8016f76:	300c      	adds	r0, #12
 8016f78:	c807      	ldmia	r0, {r0, r1, r2}
 8016f7a:	4c09      	ldr	r4, [pc, #36]	@ (8016fa0 <std_msgs__msg__Float32MultiArray__get_type_description+0x3c>)
 8016f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016f80:	4628      	mov	r0, r5
 8016f82:	f000 f955 	bl	8017230 <std_msgs__msg__MultiArrayLayout__get_type_description>
 8016f86:	300c      	adds	r0, #12
 8016f88:	c807      	ldmia	r0, {r0, r1, r2}
 8016f8a:	3418      	adds	r4, #24
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016f92:	7033      	strb	r3, [r6, #0]
 8016f94:	4801      	ldr	r0, [pc, #4]	@ (8016f9c <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 8016f96:	bd70      	pop	{r4, r5, r6, pc}
 8016f98:	2000f211 	.word	0x2000f211
 8016f9c:	0801bcc8 	.word	0x0801bcc8
 8016fa0:	200004cc 	.word	0x200004cc

08016fa4 <std_msgs__msg__Float32MultiArray__get_type_description_sources>:
 8016fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fa6:	4e17      	ldr	r6, [pc, #92]	@ (8017004 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x60>)
 8016fa8:	7837      	ldrb	r7, [r6, #0]
 8016faa:	b10f      	cbz	r7, 8016fb0 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0xc>
 8016fac:	4816      	ldr	r0, [pc, #88]	@ (8017008 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 8016fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fb0:	4d16      	ldr	r5, [pc, #88]	@ (801700c <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x68>)
 8016fb2:	4c17      	ldr	r4, [pc, #92]	@ (8017010 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x6c>)
 8016fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fbc:	682b      	ldr	r3, [r5, #0]
 8016fbe:	4625      	mov	r5, r4
 8016fc0:	4638      	mov	r0, r7
 8016fc2:	f845 3b04 	str.w	r3, [r5], #4
 8016fc6:	f000 f891 	bl	80170ec <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8016fca:	4684      	mov	ip, r0
 8016fcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016fd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016fd8:	4638      	mov	r0, r7
 8016fda:	f8dc 3000 	ldr.w	r3, [ip]
 8016fde:	602b      	str	r3, [r5, #0]
 8016fe0:	f000 f93e 	bl	8017260 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	4684      	mov	ip, r0
 8016fe8:	7033      	strb	r3, [r6, #0]
 8016fea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016fee:	3428      	adds	r4, #40	@ 0x28
 8016ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ff2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ff8:	f8dc 3000 	ldr.w	r3, [ip]
 8016ffc:	4802      	ldr	r0, [pc, #8]	@ (8017008 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 8016ffe:	6023      	str	r3, [r4, #0]
 8017000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017002:	bf00      	nop
 8017004:	2000f210 	.word	0x2000f210
 8017008:	0801bc98 	.word	0x0801bc98
 801700c:	0801bca4 	.word	0x0801bca4
 8017010:	2000f1a4 	.word	0x2000f1a4

08017014 <std_msgs__msg__Int32MultiArray__get_type_hash>:
 8017014:	4800      	ldr	r0, [pc, #0]	@ (8017018 <std_msgs__msg__Int32MultiArray__get_type_hash+0x4>)
 8017016:	4770      	bx	lr
 8017018:	200005f4 	.word	0x200005f4

0801701c <std_msgs__msg__Int32MultiArray__get_type_description>:
 801701c:	b570      	push	{r4, r5, r6, lr}
 801701e:	4e0c      	ldr	r6, [pc, #48]	@ (8017050 <std_msgs__msg__Int32MultiArray__get_type_description+0x34>)
 8017020:	7835      	ldrb	r5, [r6, #0]
 8017022:	b10d      	cbz	r5, 8017028 <std_msgs__msg__Int32MultiArray__get_type_description+0xc>
 8017024:	480b      	ldr	r0, [pc, #44]	@ (8017054 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 8017026:	bd70      	pop	{r4, r5, r6, pc}
 8017028:	4628      	mov	r0, r5
 801702a:	f000 f853 	bl	80170d4 <std_msgs__msg__MultiArrayDimension__get_type_description>
 801702e:	300c      	adds	r0, #12
 8017030:	c807      	ldmia	r0, {r0, r1, r2}
 8017032:	4c09      	ldr	r4, [pc, #36]	@ (8017058 <std_msgs__msg__Int32MultiArray__get_type_description+0x3c>)
 8017034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017038:	4628      	mov	r0, r5
 801703a:	f000 f8f9 	bl	8017230 <std_msgs__msg__MultiArrayLayout__get_type_description>
 801703e:	300c      	adds	r0, #12
 8017040:	c807      	ldmia	r0, {r0, r1, r2}
 8017042:	3418      	adds	r4, #24
 8017044:	2301      	movs	r3, #1
 8017046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801704a:	7033      	strb	r3, [r6, #0]
 801704c:	4801      	ldr	r0, [pc, #4]	@ (8017054 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 801704e:	bd70      	pop	{r4, r5, r6, pc}
 8017050:	2000f281 	.word	0x2000f281
 8017054:	0801bd1c 	.word	0x0801bd1c
 8017058:	200007f4 	.word	0x200007f4

0801705c <std_msgs__msg__Int32MultiArray__get_type_description_sources>:
 801705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705e:	4e17      	ldr	r6, [pc, #92]	@ (80170bc <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x60>)
 8017060:	7837      	ldrb	r7, [r6, #0]
 8017062:	b10f      	cbz	r7, 8017068 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0xc>
 8017064:	4816      	ldr	r0, [pc, #88]	@ (80170c0 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 8017066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017068:	4d16      	ldr	r5, [pc, #88]	@ (80170c4 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x68>)
 801706a:	4c17      	ldr	r4, [pc, #92]	@ (80170c8 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x6c>)
 801706c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801706e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	4625      	mov	r5, r4
 8017078:	4638      	mov	r0, r7
 801707a:	f845 3b04 	str.w	r3, [r5], #4
 801707e:	f000 f835 	bl	80170ec <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8017082:	4684      	mov	ip, r0
 8017084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801708a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801708e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017090:	4638      	mov	r0, r7
 8017092:	f8dc 3000 	ldr.w	r3, [ip]
 8017096:	602b      	str	r3, [r5, #0]
 8017098:	f000 f8e2 	bl	8017260 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 801709c:	2301      	movs	r3, #1
 801709e:	4684      	mov	ip, r0
 80170a0:	7033      	strb	r3, [r6, #0]
 80170a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80170a6:	3428      	adds	r4, #40	@ 0x28
 80170a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80170ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170b0:	f8dc 3000 	ldr.w	r3, [ip]
 80170b4:	4802      	ldr	r0, [pc, #8]	@ (80170c0 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 80170b6:	6023      	str	r3, [r4, #0]
 80170b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170ba:	bf00      	nop
 80170bc:	2000f280 	.word	0x2000f280
 80170c0:	0801bcec 	.word	0x0801bcec
 80170c4:	0801bcf8 	.word	0x0801bcf8
 80170c8:	2000f214 	.word	0x2000f214

080170cc <std_msgs__msg__MultiArrayDimension__get_type_hash>:
 80170cc:	4800      	ldr	r0, [pc, #0]	@ (80170d0 <std_msgs__msg__MultiArrayDimension__get_type_hash+0x4>)
 80170ce:	4770      	bx	lr
 80170d0:	2000091c 	.word	0x2000091c

080170d4 <std_msgs__msg__MultiArrayDimension__get_type_description>:
 80170d4:	4b03      	ldr	r3, [pc, #12]	@ (80170e4 <std_msgs__msg__MultiArrayDimension__get_type_description+0x10>)
 80170d6:	781a      	ldrb	r2, [r3, #0]
 80170d8:	b90a      	cbnz	r2, 80170de <std_msgs__msg__MultiArrayDimension__get_type_description+0xa>
 80170da:	2201      	movs	r2, #1
 80170dc:	701a      	strb	r2, [r3, #0]
 80170de:	4802      	ldr	r0, [pc, #8]	@ (80170e8 <std_msgs__msg__MultiArrayDimension__get_type_description+0x14>)
 80170e0:	4770      	bx	lr
 80170e2:	bf00      	nop
 80170e4:	2000f2a9 	.word	0x2000f2a9
 80170e8:	0801bd70 	.word	0x0801bd70

080170ec <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>:
 80170ec:	4800      	ldr	r0, [pc, #0]	@ (80170f0 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 80170ee:	4770      	bx	lr
 80170f0:	0801bd4c 	.word	0x0801bd4c

080170f4 <std_msgs__msg__MultiArrayDimension__get_type_description_sources>:
 80170f4:	4b09      	ldr	r3, [pc, #36]	@ (801711c <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 80170f6:	781a      	ldrb	r2, [r3, #0]
 80170f8:	b96a      	cbnz	r2, 8017116 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x22>
 80170fa:	b430      	push	{r4, r5}
 80170fc:	4d08      	ldr	r5, [pc, #32]	@ (8017120 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 80170fe:	4c09      	ldr	r4, [pc, #36]	@ (8017124 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 8017100:	2201      	movs	r2, #1
 8017102:	701a      	strb	r2, [r3, #0]
 8017104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801710c:	682b      	ldr	r3, [r5, #0]
 801710e:	4806      	ldr	r0, [pc, #24]	@ (8017128 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8017110:	6023      	str	r3, [r4, #0]
 8017112:	bc30      	pop	{r4, r5}
 8017114:	4770      	bx	lr
 8017116:	4804      	ldr	r0, [pc, #16]	@ (8017128 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8017118:	4770      	bx	lr
 801711a:	bf00      	nop
 801711c:	2000f2a8 	.word	0x2000f2a8
 8017120:	0801bd4c 	.word	0x0801bd4c
 8017124:	2000f284 	.word	0x2000f284
 8017128:	0801bd40 	.word	0x0801bd40

0801712c <std_msgs__msg__MultiArrayDimension__init>:
 801712c:	b150      	cbz	r0, 8017144 <std_msgs__msg__MultiArrayDimension__init+0x18>
 801712e:	b510      	push	{r4, lr}
 8017130:	4604      	mov	r4, r0
 8017132:	f002 f943 	bl	80193bc <rosidl_runtime_c__String__init>
 8017136:	b100      	cbz	r0, 801713a <std_msgs__msg__MultiArrayDimension__init+0xe>
 8017138:	bd10      	pop	{r4, pc}
 801713a:	4620      	mov	r0, r4
 801713c:	f002 f958 	bl	80193f0 <rosidl_runtime_c__String__fini>
 8017140:	2000      	movs	r0, #0
 8017142:	bd10      	pop	{r4, pc}
 8017144:	2000      	movs	r0, #0
 8017146:	4770      	bx	lr

08017148 <std_msgs__msg__MultiArrayDimension__fini>:
 8017148:	b108      	cbz	r0, 801714e <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801714a:	f002 b951 	b.w	80193f0 <rosidl_runtime_c__String__fini>
 801714e:	4770      	bx	lr

08017150 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8017150:	2800      	cmp	r0, #0
 8017152:	d03f      	beq.n	80171d4 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x84>
 8017154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017158:	b087      	sub	sp, #28
 801715a:	460d      	mov	r5, r1
 801715c:	4681      	mov	r9, r0
 801715e:	a801      	add	r0, sp, #4
 8017160:	f7f4 ff16 	bl	800bf90 <rcutils_get_default_allocator>
 8017164:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017168:	b35d      	cbz	r5, 80171c2 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x72>
 801716a:	9b04      	ldr	r3, [sp, #16]
 801716c:	4642      	mov	r2, r8
 801716e:	2114      	movs	r1, #20
 8017170:	4628      	mov	r0, r5
 8017172:	4798      	blx	r3
 8017174:	4607      	mov	r7, r0
 8017176:	b310      	cbz	r0, 80171be <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6e>
 8017178:	4606      	mov	r6, r0
 801717a:	2400      	movs	r4, #0
 801717c:	e004      	b.n	8017188 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x38>
 801717e:	3401      	adds	r4, #1
 8017180:	42a5      	cmp	r5, r4
 8017182:	f106 0614 	add.w	r6, r6, #20
 8017186:	d01d      	beq.n	80171c4 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8017188:	4630      	mov	r0, r6
 801718a:	f002 f917 	bl	80193bc <rosidl_runtime_c__String__init>
 801718e:	2800      	cmp	r0, #0
 8017190:	d1f5      	bne.n	801717e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x2e>
 8017192:	4630      	mov	r0, r6
 8017194:	f002 f92c 	bl	80193f0 <rosidl_runtime_c__String__fini>
 8017198:	42a5      	cmp	r5, r4
 801719a:	d913      	bls.n	80171c4 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 801719c:	b15c      	cbz	r4, 80171b6 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x66>
 801719e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80171a2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80171a6:	3c14      	subs	r4, #20
 80171a8:	4620      	mov	r0, r4
 80171aa:	f002 f921 	bl	80193f0 <rosidl_runtime_c__String__fini>
 80171ae:	42bc      	cmp	r4, r7
 80171b0:	f1a4 0414 	sub.w	r4, r4, #20
 80171b4:	d1f8      	bne.n	80171a8 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x58>
 80171b6:	9b02      	ldr	r3, [sp, #8]
 80171b8:	4641      	mov	r1, r8
 80171ba:	4638      	mov	r0, r7
 80171bc:	4798      	blx	r3
 80171be:	2000      	movs	r0, #0
 80171c0:	e005      	b.n	80171ce <std_msgs__msg__MultiArrayDimension__Sequence__init+0x7e>
 80171c2:	462f      	mov	r7, r5
 80171c4:	e9c9 7500 	strd	r7, r5, [r9]
 80171c8:	f8c9 5008 	str.w	r5, [r9, #8]
 80171cc:	2001      	movs	r0, #1
 80171ce:	b007      	add	sp, #28
 80171d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171d4:	2000      	movs	r0, #0
 80171d6:	4770      	bx	lr

080171d8 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 80171d8:	b320      	cbz	r0, 8017224 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 80171da:	b530      	push	{r4, r5, lr}
 80171dc:	4605      	mov	r5, r0
 80171de:	b087      	sub	sp, #28
 80171e0:	a801      	add	r0, sp, #4
 80171e2:	f7f4 fed5 	bl	800bf90 <rcutils_get_default_allocator>
 80171e6:	682a      	ldr	r2, [r5, #0]
 80171e8:	b1b2      	cbz	r2, 8017218 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 80171ea:	68a9      	ldr	r1, [r5, #8]
 80171ec:	b161      	cbz	r1, 8017208 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80171ee:	2400      	movs	r4, #0
 80171f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80171f4:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 80171f8:	d010      	beq.n	801721c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 80171fa:	f002 f8f9 	bl	80193f0 <rosidl_runtime_c__String__fini>
 80171fe:	68a9      	ldr	r1, [r5, #8]
 8017200:	682a      	ldr	r2, [r5, #0]
 8017202:	3401      	adds	r4, #1
 8017204:	428c      	cmp	r4, r1
 8017206:	d3f3      	bcc.n	80171f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8017208:	9b02      	ldr	r3, [sp, #8]
 801720a:	9905      	ldr	r1, [sp, #20]
 801720c:	4610      	mov	r0, r2
 801720e:	4798      	blx	r3
 8017210:	2300      	movs	r3, #0
 8017212:	e9c5 3300 	strd	r3, r3, [r5]
 8017216:	60ab      	str	r3, [r5, #8]
 8017218:	b007      	add	sp, #28
 801721a:	bd30      	pop	{r4, r5, pc}
 801721c:	3401      	adds	r4, #1
 801721e:	428c      	cmp	r4, r1
 8017220:	d3e6      	bcc.n	80171f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8017222:	e7f1      	b.n	8017208 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8017224:	4770      	bx	lr
 8017226:	bf00      	nop

08017228 <std_msgs__msg__MultiArrayLayout__get_type_hash>:
 8017228:	4800      	ldr	r0, [pc, #0]	@ (801722c <std_msgs__msg__MultiArrayLayout__get_type_hash+0x4>)
 801722a:	4770      	bx	lr
 801722c:	20000be4 	.word	0x20000be4

08017230 <std_msgs__msg__MultiArrayLayout__get_type_description>:
 8017230:	b510      	push	{r4, lr}
 8017232:	4c08      	ldr	r4, [pc, #32]	@ (8017254 <std_msgs__msg__MultiArrayLayout__get_type_description+0x24>)
 8017234:	7820      	ldrb	r0, [r4, #0]
 8017236:	b108      	cbz	r0, 801723c <std_msgs__msg__MultiArrayLayout__get_type_description+0xc>
 8017238:	4807      	ldr	r0, [pc, #28]	@ (8017258 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 801723a:	bd10      	pop	{r4, pc}
 801723c:	f7ff ff4a 	bl	80170d4 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8017240:	300c      	adds	r0, #12
 8017242:	c807      	ldmia	r0, {r0, r1, r2}
 8017244:	4b05      	ldr	r3, [pc, #20]	@ (801725c <std_msgs__msg__MultiArrayLayout__get_type_description+0x2c>)
 8017246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801724a:	2301      	movs	r3, #1
 801724c:	4802      	ldr	r0, [pc, #8]	@ (8017258 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 801724e:	7023      	strb	r3, [r4, #0]
 8017250:	bd10      	pop	{r4, pc}
 8017252:	bf00      	nop
 8017254:	2000f2f5 	.word	0x2000f2f5
 8017258:	0801bdc4 	.word	0x0801bdc4
 801725c:	200010a0 	.word	0x200010a0

08017260 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>:
 8017260:	4800      	ldr	r0, [pc, #0]	@ (8017264 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 8017262:	4770      	bx	lr
 8017264:	0801bda0 	.word	0x0801bda0

08017268 <std_msgs__msg__MultiArrayLayout__get_type_description_sources>:
 8017268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801726a:	4e0f      	ldr	r6, [pc, #60]	@ (80172a8 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 801726c:	7837      	ldrb	r7, [r6, #0]
 801726e:	b10f      	cbz	r7, 8017274 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0xc>
 8017270:	480e      	ldr	r0, [pc, #56]	@ (80172ac <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8017272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017274:	4d0e      	ldr	r5, [pc, #56]	@ (80172b0 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 8017276:	4c0f      	ldr	r4, [pc, #60]	@ (80172b4 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 8017278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801727a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801727c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801727e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017280:	682b      	ldr	r3, [r5, #0]
 8017282:	f844 3b04 	str.w	r3, [r4], #4
 8017286:	4638      	mov	r0, r7
 8017288:	f7ff ff30 	bl	80170ec <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 801728c:	2301      	movs	r3, #1
 801728e:	4684      	mov	ip, r0
 8017290:	7033      	strb	r3, [r6, #0]
 8017292:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017298:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801729c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801729e:	f8dc 3000 	ldr.w	r3, [ip]
 80172a2:	4802      	ldr	r0, [pc, #8]	@ (80172ac <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 80172a4:	6023      	str	r3, [r4, #0]
 80172a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a8:	2000f2f4 	.word	0x2000f2f4
 80172ac:	0801bd94 	.word	0x0801bd94
 80172b0:	0801bda0 	.word	0x0801bda0
 80172b4:	2000f2ac 	.word	0x2000f2ac

080172b8 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 80172b8:	f7ff bf38 	b.w	801712c <std_msgs__msg__MultiArrayDimension__init>

080172bc <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 80172bc:	f7ff bf44 	b.w	8017148 <std_msgs__msg__MultiArrayDimension__fini>

080172c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80172c0:	4b04      	ldr	r3, [pc, #16]	@ (80172d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	b10a      	cbz	r2, 80172ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 80172c6:	4803      	ldr	r0, [pc, #12]	@ (80172d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80172c8:	4770      	bx	lr
 80172ca:	4a03      	ldr	r2, [pc, #12]	@ (80172d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 80172cc:	4801      	ldr	r0, [pc, #4]	@ (80172d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80172ce:	6812      	ldr	r2, [r2, #0]
 80172d0:	601a      	str	r2, [r3, #0]
 80172d2:	4770      	bx	lr
 80172d4:	20001194 	.word	0x20001194
 80172d8:	200002c8 	.word	0x200002c8

080172dc <_MultiArrayDimension__cdr_serialize>:
 80172dc:	b1d0      	cbz	r0, 8017314 <_MultiArrayDimension__cdr_serialize+0x38>
 80172de:	b570      	push	{r4, r5, r6, lr}
 80172e0:	6806      	ldr	r6, [r0, #0]
 80172e2:	460d      	mov	r5, r1
 80172e4:	4604      	mov	r4, r0
 80172e6:	b196      	cbz	r6, 801730e <_MultiArrayDimension__cdr_serialize+0x32>
 80172e8:	4630      	mov	r0, r6
 80172ea:	f7e8 fff1 	bl	80002d0 <strlen>
 80172ee:	1c42      	adds	r2, r0, #1
 80172f0:	6060      	str	r0, [r4, #4]
 80172f2:	4631      	mov	r1, r6
 80172f4:	4628      	mov	r0, r5
 80172f6:	f7f7 fa5d 	bl	800e7b4 <ucdr_serialize_sequence_char>
 80172fa:	68e1      	ldr	r1, [r4, #12]
 80172fc:	4628      	mov	r0, r5
 80172fe:	f7f6 fa21 	bl	800d744 <ucdr_serialize_uint32_t>
 8017302:	6921      	ldr	r1, [r4, #16]
 8017304:	4628      	mov	r0, r5
 8017306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801730a:	f7f6 ba1b 	b.w	800d744 <ucdr_serialize_uint32_t>
 801730e:	4632      	mov	r2, r6
 8017310:	4630      	mov	r0, r6
 8017312:	e7ed      	b.n	80172f0 <_MultiArrayDimension__cdr_serialize+0x14>
 8017314:	4770      	bx	lr
 8017316:	bf00      	nop

08017318 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8017318:	b570      	push	{r4, r5, r6, lr}
 801731a:	4604      	mov	r4, r0
 801731c:	b1b0      	cbz	r0, 801734c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801731e:	460d      	mov	r5, r1
 8017320:	4628      	mov	r0, r5
 8017322:	2104      	movs	r1, #4
 8017324:	f7f7 f9da 	bl	800e6dc <ucdr_alignment>
 8017328:	6863      	ldr	r3, [r4, #4]
 801732a:	1d6e      	adds	r6, r5, #5
 801732c:	441e      	add	r6, r3
 801732e:	4406      	add	r6, r0
 8017330:	2104      	movs	r1, #4
 8017332:	4630      	mov	r0, r6
 8017334:	f7f7 f9d2 	bl	800e6dc <ucdr_alignment>
 8017338:	1d04      	adds	r4, r0, #4
 801733a:	4434      	add	r4, r6
 801733c:	2104      	movs	r1, #4
 801733e:	4620      	mov	r0, r4
 8017340:	f7f7 f9cc 	bl	800e6dc <ucdr_alignment>
 8017344:	f1c5 0504 	rsb	r5, r5, #4
 8017348:	4405      	add	r5, r0
 801734a:	1928      	adds	r0, r5, r4
 801734c:	bd70      	pop	{r4, r5, r6, pc}
 801734e:	bf00      	nop

08017350 <_MultiArrayDimension__cdr_deserialize>:
 8017350:	b570      	push	{r4, r5, r6, lr}
 8017352:	460c      	mov	r4, r1
 8017354:	b082      	sub	sp, #8
 8017356:	b1d9      	cbz	r1, 8017390 <_MultiArrayDimension__cdr_deserialize+0x40>
 8017358:	688e      	ldr	r6, [r1, #8]
 801735a:	6809      	ldr	r1, [r1, #0]
 801735c:	ab01      	add	r3, sp, #4
 801735e:	4632      	mov	r2, r6
 8017360:	4605      	mov	r5, r0
 8017362:	f7f7 fa39 	bl	800e7d8 <ucdr_deserialize_sequence_char>
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	b970      	cbnz	r0, 8017388 <_MultiArrayDimension__cdr_deserialize+0x38>
 801736a:	429e      	cmp	r6, r3
 801736c:	d313      	bcc.n	8017396 <_MultiArrayDimension__cdr_deserialize+0x46>
 801736e:	f104 010c 	add.w	r1, r4, #12
 8017372:	4628      	mov	r0, r5
 8017374:	f7f6 fb10 	bl	800d998 <ucdr_deserialize_uint32_t>
 8017378:	f104 0110 	add.w	r1, r4, #16
 801737c:	4628      	mov	r0, r5
 801737e:	b002      	add	sp, #8
 8017380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017384:	f7f6 bb08 	b.w	800d998 <ucdr_deserialize_uint32_t>
 8017388:	b103      	cbz	r3, 801738c <_MultiArrayDimension__cdr_deserialize+0x3c>
 801738a:	3b01      	subs	r3, #1
 801738c:	6063      	str	r3, [r4, #4]
 801738e:	e7ee      	b.n	801736e <_MultiArrayDimension__cdr_deserialize+0x1e>
 8017390:	4608      	mov	r0, r1
 8017392:	b002      	add	sp, #8
 8017394:	bd70      	pop	{r4, r5, r6, pc}
 8017396:	2101      	movs	r1, #1
 8017398:	75a8      	strb	r0, [r5, #22]
 801739a:	7569      	strb	r1, [r5, #21]
 801739c:	6060      	str	r0, [r4, #4]
 801739e:	4628      	mov	r0, r5
 80173a0:	f7f7 f9b2 	bl	800e708 <ucdr_align_to>
 80173a4:	9901      	ldr	r1, [sp, #4]
 80173a6:	4628      	mov	r0, r5
 80173a8:	f7f7 f9e4 	bl	800e774 <ucdr_advance_buffer>
 80173ac:	e7df      	b.n	801736e <_MultiArrayDimension__cdr_deserialize+0x1e>
 80173ae:	bf00      	nop

080173b0 <_MultiArrayDimension__max_serialized_size>:
 80173b0:	b510      	push	{r4, lr}
 80173b2:	2104      	movs	r1, #4
 80173b4:	2000      	movs	r0, #0
 80173b6:	f7f7 f991 	bl	800e6dc <ucdr_alignment>
 80173ba:	1d04      	adds	r4, r0, #4
 80173bc:	2104      	movs	r1, #4
 80173be:	4620      	mov	r0, r4
 80173c0:	f7f7 f98c 	bl	800e6dc <ucdr_alignment>
 80173c4:	3004      	adds	r0, #4
 80173c6:	4420      	add	r0, r4
 80173c8:	bd10      	pop	{r4, pc}
 80173ca:	bf00      	nop

080173cc <_MultiArrayDimension__get_serialized_size>:
 80173cc:	b538      	push	{r3, r4, r5, lr}
 80173ce:	4604      	mov	r4, r0
 80173d0:	b190      	cbz	r0, 80173f8 <_MultiArrayDimension__get_serialized_size+0x2c>
 80173d2:	2104      	movs	r1, #4
 80173d4:	2000      	movs	r0, #0
 80173d6:	f7f7 f981 	bl	800e6dc <ucdr_alignment>
 80173da:	6865      	ldr	r5, [r4, #4]
 80173dc:	3505      	adds	r5, #5
 80173de:	4405      	add	r5, r0
 80173e0:	2104      	movs	r1, #4
 80173e2:	4628      	mov	r0, r5
 80173e4:	f7f7 f97a 	bl	800e6dc <ucdr_alignment>
 80173e8:	1d04      	adds	r4, r0, #4
 80173ea:	442c      	add	r4, r5
 80173ec:	2104      	movs	r1, #4
 80173ee:	4620      	mov	r0, r4
 80173f0:	f7f7 f974 	bl	800e6dc <ucdr_alignment>
 80173f4:	3004      	adds	r0, #4
 80173f6:	4420      	add	r0, r4
 80173f8:	bd38      	pop	{r3, r4, r5, pc}
 80173fa:	bf00      	nop

080173fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80173fc:	4800      	ldr	r0, [pc, #0]	@ (8017400 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 80173fe:	4770      	bx	lr
 8017400:	20001260 	.word	0x20001260

08017404 <ucdr_serialize_endian_array_char>:
 8017404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017408:	4619      	mov	r1, r3
 801740a:	461f      	mov	r7, r3
 801740c:	4605      	mov	r5, r0
 801740e:	4690      	mov	r8, r2
 8017410:	f7f7 f90c 	bl	800e62c <ucdr_check_buffer_available_for>
 8017414:	b9e0      	cbnz	r0, 8017450 <ucdr_serialize_endian_array_char+0x4c>
 8017416:	463e      	mov	r6, r7
 8017418:	e009      	b.n	801742e <ucdr_serialize_endian_array_char+0x2a>
 801741a:	68a8      	ldr	r0, [r5, #8]
 801741c:	f002 fde9 	bl	8019ff2 <memcpy>
 8017420:	68ab      	ldr	r3, [r5, #8]
 8017422:	6928      	ldr	r0, [r5, #16]
 8017424:	4423      	add	r3, r4
 8017426:	4420      	add	r0, r4
 8017428:	1b36      	subs	r6, r6, r4
 801742a:	60ab      	str	r3, [r5, #8]
 801742c:	6128      	str	r0, [r5, #16]
 801742e:	2201      	movs	r2, #1
 8017430:	4631      	mov	r1, r6
 8017432:	4628      	mov	r0, r5
 8017434:	f7f7 f982 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 8017438:	1bb9      	subs	r1, r7, r6
 801743a:	4604      	mov	r4, r0
 801743c:	4602      	mov	r2, r0
 801743e:	4441      	add	r1, r8
 8017440:	2800      	cmp	r0, #0
 8017442:	d1ea      	bne.n	801741a <ucdr_serialize_endian_array_char+0x16>
 8017444:	2301      	movs	r3, #1
 8017446:	7da8      	ldrb	r0, [r5, #22]
 8017448:	756b      	strb	r3, [r5, #21]
 801744a:	4058      	eors	r0, r3
 801744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017450:	463a      	mov	r2, r7
 8017452:	68a8      	ldr	r0, [r5, #8]
 8017454:	4641      	mov	r1, r8
 8017456:	f002 fdcc 	bl	8019ff2 <memcpy>
 801745a:	68aa      	ldr	r2, [r5, #8]
 801745c:	692b      	ldr	r3, [r5, #16]
 801745e:	443a      	add	r2, r7
 8017460:	443b      	add	r3, r7
 8017462:	60aa      	str	r2, [r5, #8]
 8017464:	612b      	str	r3, [r5, #16]
 8017466:	e7ed      	b.n	8017444 <ucdr_serialize_endian_array_char+0x40>

08017468 <ucdr_deserialize_endian_array_char>:
 8017468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801746c:	4619      	mov	r1, r3
 801746e:	461f      	mov	r7, r3
 8017470:	4605      	mov	r5, r0
 8017472:	4690      	mov	r8, r2
 8017474:	f7f7 f8da 	bl	800e62c <ucdr_check_buffer_available_for>
 8017478:	b9e0      	cbnz	r0, 80174b4 <ucdr_deserialize_endian_array_char+0x4c>
 801747a:	463e      	mov	r6, r7
 801747c:	e009      	b.n	8017492 <ucdr_deserialize_endian_array_char+0x2a>
 801747e:	68a9      	ldr	r1, [r5, #8]
 8017480:	f002 fdb7 	bl	8019ff2 <memcpy>
 8017484:	68aa      	ldr	r2, [r5, #8]
 8017486:	692b      	ldr	r3, [r5, #16]
 8017488:	4422      	add	r2, r4
 801748a:	4423      	add	r3, r4
 801748c:	1b36      	subs	r6, r6, r4
 801748e:	60aa      	str	r2, [r5, #8]
 8017490:	612b      	str	r3, [r5, #16]
 8017492:	2201      	movs	r2, #1
 8017494:	4631      	mov	r1, r6
 8017496:	4628      	mov	r0, r5
 8017498:	f7f7 f950 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 801749c:	4604      	mov	r4, r0
 801749e:	1bb8      	subs	r0, r7, r6
 80174a0:	4622      	mov	r2, r4
 80174a2:	4440      	add	r0, r8
 80174a4:	2c00      	cmp	r4, #0
 80174a6:	d1ea      	bne.n	801747e <ucdr_deserialize_endian_array_char+0x16>
 80174a8:	2301      	movs	r3, #1
 80174aa:	7da8      	ldrb	r0, [r5, #22]
 80174ac:	756b      	strb	r3, [r5, #21]
 80174ae:	4058      	eors	r0, r3
 80174b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174b4:	463a      	mov	r2, r7
 80174b6:	68a9      	ldr	r1, [r5, #8]
 80174b8:	4640      	mov	r0, r8
 80174ba:	f002 fd9a 	bl	8019ff2 <memcpy>
 80174be:	68aa      	ldr	r2, [r5, #8]
 80174c0:	692b      	ldr	r3, [r5, #16]
 80174c2:	443a      	add	r2, r7
 80174c4:	443b      	add	r3, r7
 80174c6:	60aa      	str	r2, [r5, #8]
 80174c8:	612b      	str	r3, [r5, #16]
 80174ca:	e7ed      	b.n	80174a8 <ucdr_deserialize_endian_array_char+0x40>

080174cc <ucdr_serialize_array_uint8_t>:
 80174cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174d0:	4688      	mov	r8, r1
 80174d2:	4611      	mov	r1, r2
 80174d4:	4617      	mov	r7, r2
 80174d6:	4605      	mov	r5, r0
 80174d8:	f7f7 f8a8 	bl	800e62c <ucdr_check_buffer_available_for>
 80174dc:	b9e0      	cbnz	r0, 8017518 <ucdr_serialize_array_uint8_t+0x4c>
 80174de:	463e      	mov	r6, r7
 80174e0:	e009      	b.n	80174f6 <ucdr_serialize_array_uint8_t+0x2a>
 80174e2:	68a8      	ldr	r0, [r5, #8]
 80174e4:	f002 fd85 	bl	8019ff2 <memcpy>
 80174e8:	68aa      	ldr	r2, [r5, #8]
 80174ea:	692b      	ldr	r3, [r5, #16]
 80174ec:	4422      	add	r2, r4
 80174ee:	4423      	add	r3, r4
 80174f0:	1b36      	subs	r6, r6, r4
 80174f2:	60aa      	str	r2, [r5, #8]
 80174f4:	612b      	str	r3, [r5, #16]
 80174f6:	2201      	movs	r2, #1
 80174f8:	4631      	mov	r1, r6
 80174fa:	4628      	mov	r0, r5
 80174fc:	f7f7 f91e 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 8017500:	1bb9      	subs	r1, r7, r6
 8017502:	4604      	mov	r4, r0
 8017504:	4602      	mov	r2, r0
 8017506:	4441      	add	r1, r8
 8017508:	2800      	cmp	r0, #0
 801750a:	d1ea      	bne.n	80174e2 <ucdr_serialize_array_uint8_t+0x16>
 801750c:	2301      	movs	r3, #1
 801750e:	7da8      	ldrb	r0, [r5, #22]
 8017510:	756b      	strb	r3, [r5, #21]
 8017512:	4058      	eors	r0, r3
 8017514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017518:	463a      	mov	r2, r7
 801751a:	68a8      	ldr	r0, [r5, #8]
 801751c:	4641      	mov	r1, r8
 801751e:	f002 fd68 	bl	8019ff2 <memcpy>
 8017522:	68aa      	ldr	r2, [r5, #8]
 8017524:	692b      	ldr	r3, [r5, #16]
 8017526:	443a      	add	r2, r7
 8017528:	443b      	add	r3, r7
 801752a:	60aa      	str	r2, [r5, #8]
 801752c:	612b      	str	r3, [r5, #16]
 801752e:	e7ed      	b.n	801750c <ucdr_serialize_array_uint8_t+0x40>

08017530 <ucdr_serialize_endian_array_uint8_t>:
 8017530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017534:	4619      	mov	r1, r3
 8017536:	461f      	mov	r7, r3
 8017538:	4605      	mov	r5, r0
 801753a:	4690      	mov	r8, r2
 801753c:	f7f7 f876 	bl	800e62c <ucdr_check_buffer_available_for>
 8017540:	b9e0      	cbnz	r0, 801757c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017542:	463e      	mov	r6, r7
 8017544:	e009      	b.n	801755a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017546:	68a8      	ldr	r0, [r5, #8]
 8017548:	f002 fd53 	bl	8019ff2 <memcpy>
 801754c:	68ab      	ldr	r3, [r5, #8]
 801754e:	6928      	ldr	r0, [r5, #16]
 8017550:	4423      	add	r3, r4
 8017552:	4420      	add	r0, r4
 8017554:	1b36      	subs	r6, r6, r4
 8017556:	60ab      	str	r3, [r5, #8]
 8017558:	6128      	str	r0, [r5, #16]
 801755a:	2201      	movs	r2, #1
 801755c:	4631      	mov	r1, r6
 801755e:	4628      	mov	r0, r5
 8017560:	f7f7 f8ec 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 8017564:	1bb9      	subs	r1, r7, r6
 8017566:	4604      	mov	r4, r0
 8017568:	4602      	mov	r2, r0
 801756a:	4441      	add	r1, r8
 801756c:	2800      	cmp	r0, #0
 801756e:	d1ea      	bne.n	8017546 <ucdr_serialize_endian_array_uint8_t+0x16>
 8017570:	2301      	movs	r3, #1
 8017572:	7da8      	ldrb	r0, [r5, #22]
 8017574:	756b      	strb	r3, [r5, #21]
 8017576:	4058      	eors	r0, r3
 8017578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801757c:	463a      	mov	r2, r7
 801757e:	68a8      	ldr	r0, [r5, #8]
 8017580:	4641      	mov	r1, r8
 8017582:	f002 fd36 	bl	8019ff2 <memcpy>
 8017586:	68aa      	ldr	r2, [r5, #8]
 8017588:	692b      	ldr	r3, [r5, #16]
 801758a:	443a      	add	r2, r7
 801758c:	443b      	add	r3, r7
 801758e:	60aa      	str	r2, [r5, #8]
 8017590:	612b      	str	r3, [r5, #16]
 8017592:	e7ed      	b.n	8017570 <ucdr_serialize_endian_array_uint8_t+0x40>

08017594 <ucdr_deserialize_array_uint8_t>:
 8017594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017598:	4688      	mov	r8, r1
 801759a:	4611      	mov	r1, r2
 801759c:	4617      	mov	r7, r2
 801759e:	4605      	mov	r5, r0
 80175a0:	f7f7 f844 	bl	800e62c <ucdr_check_buffer_available_for>
 80175a4:	b9e0      	cbnz	r0, 80175e0 <ucdr_deserialize_array_uint8_t+0x4c>
 80175a6:	463e      	mov	r6, r7
 80175a8:	e009      	b.n	80175be <ucdr_deserialize_array_uint8_t+0x2a>
 80175aa:	68a9      	ldr	r1, [r5, #8]
 80175ac:	f002 fd21 	bl	8019ff2 <memcpy>
 80175b0:	68aa      	ldr	r2, [r5, #8]
 80175b2:	692b      	ldr	r3, [r5, #16]
 80175b4:	4422      	add	r2, r4
 80175b6:	4423      	add	r3, r4
 80175b8:	1b36      	subs	r6, r6, r4
 80175ba:	60aa      	str	r2, [r5, #8]
 80175bc:	612b      	str	r3, [r5, #16]
 80175be:	2201      	movs	r2, #1
 80175c0:	4631      	mov	r1, r6
 80175c2:	4628      	mov	r0, r5
 80175c4:	f7f7 f8ba 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 80175c8:	4604      	mov	r4, r0
 80175ca:	1bb8      	subs	r0, r7, r6
 80175cc:	4622      	mov	r2, r4
 80175ce:	4440      	add	r0, r8
 80175d0:	2c00      	cmp	r4, #0
 80175d2:	d1ea      	bne.n	80175aa <ucdr_deserialize_array_uint8_t+0x16>
 80175d4:	2301      	movs	r3, #1
 80175d6:	7da8      	ldrb	r0, [r5, #22]
 80175d8:	756b      	strb	r3, [r5, #21]
 80175da:	4058      	eors	r0, r3
 80175dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175e0:	463a      	mov	r2, r7
 80175e2:	68a9      	ldr	r1, [r5, #8]
 80175e4:	4640      	mov	r0, r8
 80175e6:	f002 fd04 	bl	8019ff2 <memcpy>
 80175ea:	68aa      	ldr	r2, [r5, #8]
 80175ec:	692b      	ldr	r3, [r5, #16]
 80175ee:	443a      	add	r2, r7
 80175f0:	443b      	add	r3, r7
 80175f2:	60aa      	str	r2, [r5, #8]
 80175f4:	612b      	str	r3, [r5, #16]
 80175f6:	e7ed      	b.n	80175d4 <ucdr_deserialize_array_uint8_t+0x40>

080175f8 <ucdr_deserialize_endian_array_uint8_t>:
 80175f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175fc:	4619      	mov	r1, r3
 80175fe:	461f      	mov	r7, r3
 8017600:	4605      	mov	r5, r0
 8017602:	4690      	mov	r8, r2
 8017604:	f7f7 f812 	bl	800e62c <ucdr_check_buffer_available_for>
 8017608:	b9e0      	cbnz	r0, 8017644 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801760a:	463e      	mov	r6, r7
 801760c:	e009      	b.n	8017622 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801760e:	68a9      	ldr	r1, [r5, #8]
 8017610:	f002 fcef 	bl	8019ff2 <memcpy>
 8017614:	68aa      	ldr	r2, [r5, #8]
 8017616:	692b      	ldr	r3, [r5, #16]
 8017618:	4422      	add	r2, r4
 801761a:	4423      	add	r3, r4
 801761c:	1b36      	subs	r6, r6, r4
 801761e:	60aa      	str	r2, [r5, #8]
 8017620:	612b      	str	r3, [r5, #16]
 8017622:	2201      	movs	r2, #1
 8017624:	4631      	mov	r1, r6
 8017626:	4628      	mov	r0, r5
 8017628:	f7f7 f888 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 801762c:	4604      	mov	r4, r0
 801762e:	1bb8      	subs	r0, r7, r6
 8017630:	4622      	mov	r2, r4
 8017632:	4440      	add	r0, r8
 8017634:	2c00      	cmp	r4, #0
 8017636:	d1ea      	bne.n	801760e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017638:	2301      	movs	r3, #1
 801763a:	7da8      	ldrb	r0, [r5, #22]
 801763c:	756b      	strb	r3, [r5, #21]
 801763e:	4058      	eors	r0, r3
 8017640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017644:	463a      	mov	r2, r7
 8017646:	68a9      	ldr	r1, [r5, #8]
 8017648:	4640      	mov	r0, r8
 801764a:	f002 fcd2 	bl	8019ff2 <memcpy>
 801764e:	68aa      	ldr	r2, [r5, #8]
 8017650:	692b      	ldr	r3, [r5, #16]
 8017652:	443a      	add	r2, r7
 8017654:	443b      	add	r3, r7
 8017656:	60aa      	str	r2, [r5, #8]
 8017658:	612b      	str	r3, [r5, #16]
 801765a:	e7ed      	b.n	8017638 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801765c <ucdr_serialize_endian_array_int32_t>:
 801765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017660:	4688      	mov	r8, r1
 8017662:	2104      	movs	r1, #4
 8017664:	4604      	mov	r4, r0
 8017666:	4616      	mov	r6, r2
 8017668:	461f      	mov	r7, r3
 801766a:	f7f7 f83f 	bl	800e6ec <ucdr_buffer_alignment>
 801766e:	4601      	mov	r1, r0
 8017670:	4620      	mov	r0, r4
 8017672:	7d65      	ldrb	r5, [r4, #21]
 8017674:	f7f7 f87e 	bl	800e774 <ucdr_advance_buffer>
 8017678:	f1b8 0f01 	cmp.w	r8, #1
 801767c:	7565      	strb	r5, [r4, #21]
 801767e:	d010      	beq.n	80176a2 <ucdr_serialize_endian_array_int32_t+0x46>
 8017680:	b157      	cbz	r7, 8017698 <ucdr_serialize_endian_array_int32_t+0x3c>
 8017682:	3e04      	subs	r6, #4
 8017684:	2500      	movs	r5, #0
 8017686:	f856 2f04 	ldr.w	r2, [r6, #4]!
 801768a:	4641      	mov	r1, r8
 801768c:	4620      	mov	r0, r4
 801768e:	3501      	adds	r5, #1
 8017690:	f7f6 fd04 	bl	800e09c <ucdr_serialize_endian_int32_t>
 8017694:	42af      	cmp	r7, r5
 8017696:	d1f6      	bne.n	8017686 <ucdr_serialize_endian_array_int32_t+0x2a>
 8017698:	7da0      	ldrb	r0, [r4, #22]
 801769a:	f080 0001 	eor.w	r0, r0, #1
 801769e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176a2:	00bf      	lsls	r7, r7, #2
 80176a4:	4639      	mov	r1, r7
 80176a6:	4620      	mov	r0, r4
 80176a8:	f7f6 ffc0 	bl	800e62c <ucdr_check_buffer_available_for>
 80176ac:	b9f8      	cbnz	r0, 80176ee <ucdr_serialize_endian_array_int32_t+0x92>
 80176ae:	46b8      	mov	r8, r7
 80176b0:	e00a      	b.n	80176c8 <ucdr_serialize_endian_array_int32_t+0x6c>
 80176b2:	68a0      	ldr	r0, [r4, #8]
 80176b4:	f002 fc9d 	bl	8019ff2 <memcpy>
 80176b8:	68a2      	ldr	r2, [r4, #8]
 80176ba:	6923      	ldr	r3, [r4, #16]
 80176bc:	442a      	add	r2, r5
 80176be:	442b      	add	r3, r5
 80176c0:	eba8 0805 	sub.w	r8, r8, r5
 80176c4:	60a2      	str	r2, [r4, #8]
 80176c6:	6123      	str	r3, [r4, #16]
 80176c8:	2204      	movs	r2, #4
 80176ca:	4641      	mov	r1, r8
 80176cc:	4620      	mov	r0, r4
 80176ce:	f7f7 f835 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 80176d2:	eba7 0108 	sub.w	r1, r7, r8
 80176d6:	4605      	mov	r5, r0
 80176d8:	4602      	mov	r2, r0
 80176da:	4431      	add	r1, r6
 80176dc:	2800      	cmp	r0, #0
 80176de:	d1e8      	bne.n	80176b2 <ucdr_serialize_endian_array_int32_t+0x56>
 80176e0:	7da0      	ldrb	r0, [r4, #22]
 80176e2:	2304      	movs	r3, #4
 80176e4:	7563      	strb	r3, [r4, #21]
 80176e6:	f080 0001 	eor.w	r0, r0, #1
 80176ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ee:	463a      	mov	r2, r7
 80176f0:	68a0      	ldr	r0, [r4, #8]
 80176f2:	4631      	mov	r1, r6
 80176f4:	f002 fc7d 	bl	8019ff2 <memcpy>
 80176f8:	68a2      	ldr	r2, [r4, #8]
 80176fa:	6923      	ldr	r3, [r4, #16]
 80176fc:	443a      	add	r2, r7
 80176fe:	443b      	add	r3, r7
 8017700:	60a2      	str	r2, [r4, #8]
 8017702:	6123      	str	r3, [r4, #16]
 8017704:	e7ec      	b.n	80176e0 <ucdr_serialize_endian_array_int32_t+0x84>
 8017706:	bf00      	nop

08017708 <ucdr_deserialize_endian_array_int32_t>:
 8017708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801770c:	4688      	mov	r8, r1
 801770e:	2104      	movs	r1, #4
 8017710:	4605      	mov	r5, r0
 8017712:	4614      	mov	r4, r2
 8017714:	461f      	mov	r7, r3
 8017716:	f7f6 ffe9 	bl	800e6ec <ucdr_buffer_alignment>
 801771a:	4601      	mov	r1, r0
 801771c:	4628      	mov	r0, r5
 801771e:	7d6e      	ldrb	r6, [r5, #21]
 8017720:	f7f7 f828 	bl	800e774 <ucdr_advance_buffer>
 8017724:	f1b8 0f01 	cmp.w	r8, #1
 8017728:	756e      	strb	r6, [r5, #21]
 801772a:	d010      	beq.n	801774e <ucdr_deserialize_endian_array_int32_t+0x46>
 801772c:	2600      	movs	r6, #0
 801772e:	b14f      	cbz	r7, 8017744 <ucdr_deserialize_endian_array_int32_t+0x3c>
 8017730:	4622      	mov	r2, r4
 8017732:	4641      	mov	r1, r8
 8017734:	4628      	mov	r0, r5
 8017736:	3601      	adds	r6, #1
 8017738:	f7f6 fdce 	bl	800e2d8 <ucdr_deserialize_endian_int32_t>
 801773c:	42b7      	cmp	r7, r6
 801773e:	f104 0404 	add.w	r4, r4, #4
 8017742:	d1f5      	bne.n	8017730 <ucdr_deserialize_endian_array_int32_t+0x28>
 8017744:	7da8      	ldrb	r0, [r5, #22]
 8017746:	f080 0001 	eor.w	r0, r0, #1
 801774a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801774e:	00bf      	lsls	r7, r7, #2
 8017750:	4639      	mov	r1, r7
 8017752:	4628      	mov	r0, r5
 8017754:	f7f6 ff6a 	bl	800e62c <ucdr_check_buffer_available_for>
 8017758:	b9f8      	cbnz	r0, 801779a <ucdr_deserialize_endian_array_int32_t+0x92>
 801775a:	46b8      	mov	r8, r7
 801775c:	e00a      	b.n	8017774 <ucdr_deserialize_endian_array_int32_t+0x6c>
 801775e:	68a9      	ldr	r1, [r5, #8]
 8017760:	f002 fc47 	bl	8019ff2 <memcpy>
 8017764:	68aa      	ldr	r2, [r5, #8]
 8017766:	692b      	ldr	r3, [r5, #16]
 8017768:	4432      	add	r2, r6
 801776a:	4433      	add	r3, r6
 801776c:	eba8 0806 	sub.w	r8, r8, r6
 8017770:	60aa      	str	r2, [r5, #8]
 8017772:	612b      	str	r3, [r5, #16]
 8017774:	2204      	movs	r2, #4
 8017776:	4641      	mov	r1, r8
 8017778:	4628      	mov	r0, r5
 801777a:	f7f6 ffdf 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 801777e:	4606      	mov	r6, r0
 8017780:	eba7 0008 	sub.w	r0, r7, r8
 8017784:	4632      	mov	r2, r6
 8017786:	4420      	add	r0, r4
 8017788:	2e00      	cmp	r6, #0
 801778a:	d1e8      	bne.n	801775e <ucdr_deserialize_endian_array_int32_t+0x56>
 801778c:	7da8      	ldrb	r0, [r5, #22]
 801778e:	2304      	movs	r3, #4
 8017790:	756b      	strb	r3, [r5, #21]
 8017792:	f080 0001 	eor.w	r0, r0, #1
 8017796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801779a:	463a      	mov	r2, r7
 801779c:	68a9      	ldr	r1, [r5, #8]
 801779e:	4620      	mov	r0, r4
 80177a0:	f002 fc27 	bl	8019ff2 <memcpy>
 80177a4:	68aa      	ldr	r2, [r5, #8]
 80177a6:	692b      	ldr	r3, [r5, #16]
 80177a8:	443a      	add	r2, r7
 80177aa:	443b      	add	r3, r7
 80177ac:	60aa      	str	r2, [r5, #8]
 80177ae:	612b      	str	r3, [r5, #16]
 80177b0:	e7ec      	b.n	801778c <ucdr_deserialize_endian_array_int32_t+0x84>
 80177b2:	bf00      	nop

080177b4 <ucdr_serialize_endian_array_float>:
 80177b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177b8:	4688      	mov	r8, r1
 80177ba:	2104      	movs	r1, #4
 80177bc:	4604      	mov	r4, r0
 80177be:	4616      	mov	r6, r2
 80177c0:	461f      	mov	r7, r3
 80177c2:	f7f6 ff93 	bl	800e6ec <ucdr_buffer_alignment>
 80177c6:	4601      	mov	r1, r0
 80177c8:	4620      	mov	r0, r4
 80177ca:	7d65      	ldrb	r5, [r4, #21]
 80177cc:	f7f6 ffd2 	bl	800e774 <ucdr_advance_buffer>
 80177d0:	f1b8 0f01 	cmp.w	r8, #1
 80177d4:	7565      	strb	r5, [r4, #21]
 80177d6:	d00f      	beq.n	80177f8 <ucdr_serialize_endian_array_float+0x44>
 80177d8:	2500      	movs	r5, #0
 80177da:	b147      	cbz	r7, 80177ee <ucdr_serialize_endian_array_float+0x3a>
 80177dc:	ecb6 0a01 	vldmia	r6!, {s0}
 80177e0:	4641      	mov	r1, r8
 80177e2:	4620      	mov	r0, r4
 80177e4:	3501      	adds	r5, #1
 80177e6:	f7f6 fe03 	bl	800e3f0 <ucdr_serialize_endian_float>
 80177ea:	42af      	cmp	r7, r5
 80177ec:	d1f6      	bne.n	80177dc <ucdr_serialize_endian_array_float+0x28>
 80177ee:	7da0      	ldrb	r0, [r4, #22]
 80177f0:	f080 0001 	eor.w	r0, r0, #1
 80177f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f8:	00bf      	lsls	r7, r7, #2
 80177fa:	4639      	mov	r1, r7
 80177fc:	4620      	mov	r0, r4
 80177fe:	f7f6 ff15 	bl	800e62c <ucdr_check_buffer_available_for>
 8017802:	b9f8      	cbnz	r0, 8017844 <ucdr_serialize_endian_array_float+0x90>
 8017804:	46b8      	mov	r8, r7
 8017806:	e00a      	b.n	801781e <ucdr_serialize_endian_array_float+0x6a>
 8017808:	68a0      	ldr	r0, [r4, #8]
 801780a:	f002 fbf2 	bl	8019ff2 <memcpy>
 801780e:	68a2      	ldr	r2, [r4, #8]
 8017810:	6923      	ldr	r3, [r4, #16]
 8017812:	442a      	add	r2, r5
 8017814:	442b      	add	r3, r5
 8017816:	eba8 0805 	sub.w	r8, r8, r5
 801781a:	60a2      	str	r2, [r4, #8]
 801781c:	6123      	str	r3, [r4, #16]
 801781e:	2204      	movs	r2, #4
 8017820:	4641      	mov	r1, r8
 8017822:	4620      	mov	r0, r4
 8017824:	f7f6 ff8a 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 8017828:	eba7 0108 	sub.w	r1, r7, r8
 801782c:	4605      	mov	r5, r0
 801782e:	4602      	mov	r2, r0
 8017830:	4431      	add	r1, r6
 8017832:	2800      	cmp	r0, #0
 8017834:	d1e8      	bne.n	8017808 <ucdr_serialize_endian_array_float+0x54>
 8017836:	7da0      	ldrb	r0, [r4, #22]
 8017838:	2304      	movs	r3, #4
 801783a:	7563      	strb	r3, [r4, #21]
 801783c:	f080 0001 	eor.w	r0, r0, #1
 8017840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017844:	463a      	mov	r2, r7
 8017846:	68a0      	ldr	r0, [r4, #8]
 8017848:	4631      	mov	r1, r6
 801784a:	f002 fbd2 	bl	8019ff2 <memcpy>
 801784e:	68a2      	ldr	r2, [r4, #8]
 8017850:	6923      	ldr	r3, [r4, #16]
 8017852:	443a      	add	r2, r7
 8017854:	443b      	add	r3, r7
 8017856:	60a2      	str	r2, [r4, #8]
 8017858:	6123      	str	r3, [r4, #16]
 801785a:	e7ec      	b.n	8017836 <ucdr_serialize_endian_array_float+0x82>

0801785c <ucdr_deserialize_endian_array_float>:
 801785c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017860:	4688      	mov	r8, r1
 8017862:	2104      	movs	r1, #4
 8017864:	4605      	mov	r5, r0
 8017866:	4614      	mov	r4, r2
 8017868:	461f      	mov	r7, r3
 801786a:	f7f6 ff3f 	bl	800e6ec <ucdr_buffer_alignment>
 801786e:	4601      	mov	r1, r0
 8017870:	4628      	mov	r0, r5
 8017872:	7d6e      	ldrb	r6, [r5, #21]
 8017874:	f7f6 ff7e 	bl	800e774 <ucdr_advance_buffer>
 8017878:	f1b8 0f01 	cmp.w	r8, #1
 801787c:	756e      	strb	r6, [r5, #21]
 801787e:	d010      	beq.n	80178a2 <ucdr_deserialize_endian_array_float+0x46>
 8017880:	2600      	movs	r6, #0
 8017882:	b14f      	cbz	r7, 8017898 <ucdr_deserialize_endian_array_float+0x3c>
 8017884:	4622      	mov	r2, r4
 8017886:	4641      	mov	r1, r8
 8017888:	4628      	mov	r0, r5
 801788a:	3601      	adds	r6, #1
 801788c:	f7f6 fe42 	bl	800e514 <ucdr_deserialize_endian_float>
 8017890:	42b7      	cmp	r7, r6
 8017892:	f104 0404 	add.w	r4, r4, #4
 8017896:	d1f5      	bne.n	8017884 <ucdr_deserialize_endian_array_float+0x28>
 8017898:	7da8      	ldrb	r0, [r5, #22]
 801789a:	f080 0001 	eor.w	r0, r0, #1
 801789e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178a2:	00bf      	lsls	r7, r7, #2
 80178a4:	4639      	mov	r1, r7
 80178a6:	4628      	mov	r0, r5
 80178a8:	f7f6 fec0 	bl	800e62c <ucdr_check_buffer_available_for>
 80178ac:	b9f8      	cbnz	r0, 80178ee <ucdr_deserialize_endian_array_float+0x92>
 80178ae:	46b8      	mov	r8, r7
 80178b0:	e00a      	b.n	80178c8 <ucdr_deserialize_endian_array_float+0x6c>
 80178b2:	68a9      	ldr	r1, [r5, #8]
 80178b4:	f002 fb9d 	bl	8019ff2 <memcpy>
 80178b8:	68aa      	ldr	r2, [r5, #8]
 80178ba:	692b      	ldr	r3, [r5, #16]
 80178bc:	4432      	add	r2, r6
 80178be:	4433      	add	r3, r6
 80178c0:	eba8 0806 	sub.w	r8, r8, r6
 80178c4:	60aa      	str	r2, [r5, #8]
 80178c6:	612b      	str	r3, [r5, #16]
 80178c8:	2204      	movs	r2, #4
 80178ca:	4641      	mov	r1, r8
 80178cc:	4628      	mov	r0, r5
 80178ce:	f7f6 ff35 	bl	800e73c <ucdr_check_final_buffer_behavior_array>
 80178d2:	4606      	mov	r6, r0
 80178d4:	eba7 0008 	sub.w	r0, r7, r8
 80178d8:	4632      	mov	r2, r6
 80178da:	4420      	add	r0, r4
 80178dc:	2e00      	cmp	r6, #0
 80178de:	d1e8      	bne.n	80178b2 <ucdr_deserialize_endian_array_float+0x56>
 80178e0:	7da8      	ldrb	r0, [r5, #22]
 80178e2:	2304      	movs	r3, #4
 80178e4:	756b      	strb	r3, [r5, #21]
 80178e6:	f080 0001 	eor.w	r0, r0, #1
 80178ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178ee:	463a      	mov	r2, r7
 80178f0:	68a9      	ldr	r1, [r5, #8]
 80178f2:	4620      	mov	r0, r4
 80178f4:	f002 fb7d 	bl	8019ff2 <memcpy>
 80178f8:	68aa      	ldr	r2, [r5, #8]
 80178fa:	692b      	ldr	r3, [r5, #16]
 80178fc:	443a      	add	r2, r7
 80178fe:	443b      	add	r3, r7
 8017900:	60aa      	str	r2, [r5, #8]
 8017902:	612b      	str	r3, [r5, #16]
 8017904:	e7ec      	b.n	80178e0 <ucdr_deserialize_endian_array_float+0x84>
 8017906:	bf00      	nop

08017908 <ucdr_serialize_string>:
 8017908:	b538      	push	{r3, r4, r5, lr}
 801790a:	4605      	mov	r5, r0
 801790c:	4608      	mov	r0, r1
 801790e:	460c      	mov	r4, r1
 8017910:	f7e8 fcde 	bl	80002d0 <strlen>
 8017914:	4621      	mov	r1, r4
 8017916:	1c42      	adds	r2, r0, #1
 8017918:	4628      	mov	r0, r5
 801791a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801791e:	f7f6 bf49 	b.w	800e7b4 <ucdr_serialize_sequence_char>
 8017922:	bf00      	nop

08017924 <ucdr_deserialize_string>:
 8017924:	b500      	push	{lr}
 8017926:	b083      	sub	sp, #12
 8017928:	ab01      	add	r3, sp, #4
 801792a:	f7f6 ff55 	bl	800e7d8 <ucdr_deserialize_sequence_char>
 801792e:	b003      	add	sp, #12
 8017930:	f85d fb04 	ldr.w	pc, [sp], #4

08017934 <uxr_init_input_best_effort_stream>:
 8017934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017938:	8003      	strh	r3, [r0, #0]
 801793a:	4770      	bx	lr

0801793c <uxr_reset_input_best_effort_stream>:
 801793c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017940:	8003      	strh	r3, [r0, #0]
 8017942:	4770      	bx	lr

08017944 <uxr_receive_best_effort_message>:
 8017944:	b538      	push	{r3, r4, r5, lr}
 8017946:	4604      	mov	r4, r0
 8017948:	8800      	ldrh	r0, [r0, #0]
 801794a:	460d      	mov	r5, r1
 801794c:	f000 fe5e 	bl	801860c <uxr_seq_num_cmp>
 8017950:	4603      	mov	r3, r0
 8017952:	2b00      	cmp	r3, #0
 8017954:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017958:	bfb8      	it	lt
 801795a:	8025      	strhlt	r5, [r4, #0]
 801795c:	bd38      	pop	{r3, r4, r5, pc}
 801795e:	bf00      	nop

08017960 <on_full_input_buffer>:
 8017960:	b570      	push	{r4, r5, r6, lr}
 8017962:	4605      	mov	r5, r0
 8017964:	460c      	mov	r4, r1
 8017966:	682b      	ldr	r3, [r5, #0]
 8017968:	6809      	ldr	r1, [r1, #0]
 801796a:	8920      	ldrh	r0, [r4, #8]
 801796c:	6862      	ldr	r2, [r4, #4]
 801796e:	fbb2 f2f0 	udiv	r2, r2, r0
 8017972:	1a5b      	subs	r3, r3, r1
 8017974:	fbb3 f3f2 	udiv	r3, r3, r2
 8017978:	3301      	adds	r3, #1
 801797a:	b29b      	uxth	r3, r3
 801797c:	fbb3 f6f0 	udiv	r6, r3, r0
 8017980:	fb00 3316 	mls	r3, r0, r6, r3
 8017984:	b29b      	uxth	r3, r3
 8017986:	fb02 f303 	mul.w	r3, r2, r3
 801798a:	1d18      	adds	r0, r3, #4
 801798c:	4408      	add	r0, r1
 801798e:	7d26      	ldrb	r6, [r4, #20]
 8017990:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017994:	b116      	cbz	r6, 801799c <on_full_input_buffer+0x3c>
 8017996:	2600      	movs	r6, #0
 8017998:	f840 6c04 	str.w	r6, [r0, #-4]
 801799c:	2a03      	cmp	r2, #3
 801799e:	d801      	bhi.n	80179a4 <on_full_input_buffer+0x44>
 80179a0:	2001      	movs	r0, #1
 80179a2:	bd70      	pop	{r4, r5, r6, pc}
 80179a4:	3308      	adds	r3, #8
 80179a6:	4419      	add	r1, r3
 80179a8:	4628      	mov	r0, r5
 80179aa:	692b      	ldr	r3, [r5, #16]
 80179ac:	3a04      	subs	r2, #4
 80179ae:	f7f6 fe89 	bl	800e6c4 <ucdr_init_buffer_origin>
 80179b2:	4628      	mov	r0, r5
 80179b4:	4902      	ldr	r1, [pc, #8]	@ (80179c0 <on_full_input_buffer+0x60>)
 80179b6:	4622      	mov	r2, r4
 80179b8:	f7f6 fe60 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 80179bc:	2000      	movs	r0, #0
 80179be:	bd70      	pop	{r4, r5, r6, pc}
 80179c0:	08017961 	.word	0x08017961

080179c4 <uxr_init_input_reliable_stream>:
 80179c4:	b500      	push	{lr}
 80179c6:	e9c0 1200 	strd	r1, r2, [r0]
 80179ca:	f04f 0e00 	mov.w	lr, #0
 80179ce:	9a01      	ldr	r2, [sp, #4]
 80179d0:	8103      	strh	r3, [r0, #8]
 80179d2:	6102      	str	r2, [r0, #16]
 80179d4:	f880 e014 	strb.w	lr, [r0, #20]
 80179d8:	b1d3      	cbz	r3, 8017a10 <uxr_init_input_reliable_stream+0x4c>
 80179da:	f8c1 e000 	str.w	lr, [r1]
 80179de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80179e2:	f1bc 0f01 	cmp.w	ip, #1
 80179e6:	d913      	bls.n	8017a10 <uxr_init_input_reliable_stream+0x4c>
 80179e8:	2301      	movs	r3, #1
 80179ea:	fbb3 f1fc 	udiv	r1, r3, ip
 80179ee:	fb0c 3111 	mls	r1, ip, r1, r3
 80179f2:	b289      	uxth	r1, r1
 80179f4:	6842      	ldr	r2, [r0, #4]
 80179f6:	fbb2 f2fc 	udiv	r2, r2, ip
 80179fa:	fb01 f202 	mul.w	r2, r1, r2
 80179fe:	6801      	ldr	r1, [r0, #0]
 8017a00:	f841 e002 	str.w	lr, [r1, r2]
 8017a04:	3301      	adds	r3, #1
 8017a06:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	459c      	cmp	ip, r3
 8017a0e:	d8ec      	bhi.n	80179ea <uxr_init_input_reliable_stream+0x26>
 8017a10:	f04f 33ff 	mov.w	r3, #4294967295
 8017a14:	60c3      	str	r3, [r0, #12]
 8017a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a1a:	bf00      	nop

08017a1c <uxr_reset_input_reliable_stream>:
 8017a1c:	8901      	ldrh	r1, [r0, #8]
 8017a1e:	b1e9      	cbz	r1, 8017a5c <uxr_reset_input_reliable_stream+0x40>
 8017a20:	f04f 0c00 	mov.w	ip, #0
 8017a24:	b500      	push	{lr}
 8017a26:	4663      	mov	r3, ip
 8017a28:	46e6      	mov	lr, ip
 8017a2a:	fbb3 f2f1 	udiv	r2, r3, r1
 8017a2e:	fb01 3312 	mls	r3, r1, r2, r3
 8017a32:	b29b      	uxth	r3, r3
 8017a34:	6842      	ldr	r2, [r0, #4]
 8017a36:	fbb2 f2f1 	udiv	r2, r2, r1
 8017a3a:	fb03 f202 	mul.w	r2, r3, r2
 8017a3e:	6803      	ldr	r3, [r0, #0]
 8017a40:	f843 e002 	str.w	lr, [r3, r2]
 8017a44:	f10c 0c01 	add.w	ip, ip, #1
 8017a48:	8901      	ldrh	r1, [r0, #8]
 8017a4a:	fa1f f38c 	uxth.w	r3, ip
 8017a4e:	4299      	cmp	r1, r3
 8017a50:	d8eb      	bhi.n	8017a2a <uxr_reset_input_reliable_stream+0xe>
 8017a52:	f04f 33ff 	mov.w	r3, #4294967295
 8017a56:	60c3      	str	r3, [r0, #12]
 8017a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a60:	60c3      	str	r3, [r0, #12]
 8017a62:	4770      	bx	lr

08017a64 <uxr_receive_reliable_message>:
 8017a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a68:	4604      	mov	r4, r0
 8017a6a:	460d      	mov	r5, r1
 8017a6c:	8901      	ldrh	r1, [r0, #8]
 8017a6e:	8980      	ldrh	r0, [r0, #12]
 8017a70:	4690      	mov	r8, r2
 8017a72:	461f      	mov	r7, r3
 8017a74:	f000 fdc2 	bl	80185fc <uxr_seq_num_add>
 8017a78:	4629      	mov	r1, r5
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	89a0      	ldrh	r0, [r4, #12]
 8017a7e:	f000 fdc5 	bl	801860c <uxr_seq_num_cmp>
 8017a82:	2800      	cmp	r0, #0
 8017a84:	db0a      	blt.n	8017a9c <uxr_receive_reliable_message+0x38>
 8017a86:	2600      	movs	r6, #0
 8017a88:	89e0      	ldrh	r0, [r4, #14]
 8017a8a:	4629      	mov	r1, r5
 8017a8c:	f000 fdbe 	bl	801860c <uxr_seq_num_cmp>
 8017a90:	2800      	cmp	r0, #0
 8017a92:	bfb8      	it	lt
 8017a94:	81e5      	strhlt	r5, [r4, #14]
 8017a96:	4630      	mov	r0, r6
 8017a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a9c:	4630      	mov	r0, r6
 8017a9e:	4629      	mov	r1, r5
 8017aa0:	f000 fdb4 	bl	801860c <uxr_seq_num_cmp>
 8017aa4:	2800      	cmp	r0, #0
 8017aa6:	dbee      	blt.n	8017a86 <uxr_receive_reliable_message+0x22>
 8017aa8:	6923      	ldr	r3, [r4, #16]
 8017aaa:	4640      	mov	r0, r8
 8017aac:	4798      	blx	r3
 8017aae:	2101      	movs	r1, #1
 8017ab0:	4606      	mov	r6, r0
 8017ab2:	89a0      	ldrh	r0, [r4, #12]
 8017ab4:	f000 fda2 	bl	80185fc <uxr_seq_num_add>
 8017ab8:	b90e      	cbnz	r6, 8017abe <uxr_receive_reliable_message+0x5a>
 8017aba:	4285      	cmp	r5, r0
 8017abc:	d046      	beq.n	8017b4c <uxr_receive_reliable_message+0xe8>
 8017abe:	8921      	ldrh	r1, [r4, #8]
 8017ac0:	fbb5 f2f1 	udiv	r2, r5, r1
 8017ac4:	fb01 5212 	mls	r2, r1, r2, r5
 8017ac8:	b292      	uxth	r2, r2
 8017aca:	6863      	ldr	r3, [r4, #4]
 8017acc:	6820      	ldr	r0, [r4, #0]
 8017ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ad2:	fb02 f303 	mul.w	r3, r2, r3
 8017ad6:	3304      	adds	r3, #4
 8017ad8:	4418      	add	r0, r3
 8017ada:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d1d1      	bne.n	8017a86 <uxr_receive_reliable_message+0x22>
 8017ae2:	4641      	mov	r1, r8
 8017ae4:	463a      	mov	r2, r7
 8017ae6:	f002 fa84 	bl	8019ff2 <memcpy>
 8017aea:	8921      	ldrh	r1, [r4, #8]
 8017aec:	fbb5 f2f1 	udiv	r2, r5, r1
 8017af0:	fb01 5212 	mls	r2, r1, r2, r5
 8017af4:	b292      	uxth	r2, r2
 8017af6:	6863      	ldr	r3, [r4, #4]
 8017af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017afc:	fb02 f303 	mul.w	r3, r2, r3
 8017b00:	6822      	ldr	r2, [r4, #0]
 8017b02:	50d7      	str	r7, [r2, r3]
 8017b04:	9a06      	ldr	r2, [sp, #24]
 8017b06:	2301      	movs	r3, #1
 8017b08:	7013      	strb	r3, [r2, #0]
 8017b0a:	2e00      	cmp	r6, #0
 8017b0c:	d0bb      	beq.n	8017a86 <uxr_receive_reliable_message+0x22>
 8017b0e:	89a6      	ldrh	r6, [r4, #12]
 8017b10:	2101      	movs	r1, #1
 8017b12:	4630      	mov	r0, r6
 8017b14:	f000 fd72 	bl	80185fc <uxr_seq_num_add>
 8017b18:	8921      	ldrh	r1, [r4, #8]
 8017b1a:	fbb0 f2f1 	udiv	r2, r0, r1
 8017b1e:	fb01 0212 	mls	r2, r1, r2, r0
 8017b22:	b292      	uxth	r2, r2
 8017b24:	6863      	ldr	r3, [r4, #4]
 8017b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b2a:	4606      	mov	r6, r0
 8017b2c:	fb02 f303 	mul.w	r3, r2, r3
 8017b30:	6820      	ldr	r0, [r4, #0]
 8017b32:	3304      	adds	r3, #4
 8017b34:	4418      	add	r0, r3
 8017b36:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d0a3      	beq.n	8017a86 <uxr_receive_reliable_message+0x22>
 8017b3e:	6923      	ldr	r3, [r4, #16]
 8017b40:	4798      	blx	r3
 8017b42:	2802      	cmp	r0, #2
 8017b44:	d005      	beq.n	8017b52 <uxr_receive_reliable_message+0xee>
 8017b46:	2801      	cmp	r0, #1
 8017b48:	d0e2      	beq.n	8017b10 <uxr_receive_reliable_message+0xac>
 8017b4a:	e79c      	b.n	8017a86 <uxr_receive_reliable_message+0x22>
 8017b4c:	9b06      	ldr	r3, [sp, #24]
 8017b4e:	81a5      	strh	r5, [r4, #12]
 8017b50:	701e      	strb	r6, [r3, #0]
 8017b52:	2601      	movs	r6, #1
 8017b54:	e798      	b.n	8017a88 <uxr_receive_reliable_message+0x24>
 8017b56:	bf00      	nop

08017b58 <uxr_next_input_reliable_buffer_available>:
 8017b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	460f      	mov	r7, r1
 8017b60:	8980      	ldrh	r0, [r0, #12]
 8017b62:	2101      	movs	r1, #1
 8017b64:	4690      	mov	r8, r2
 8017b66:	f000 fd49 	bl	80185fc <uxr_seq_num_add>
 8017b6a:	8921      	ldrh	r1, [r4, #8]
 8017b6c:	fbb0 f2f1 	udiv	r2, r0, r1
 8017b70:	fb01 0212 	mls	r2, r1, r2, r0
 8017b74:	b292      	uxth	r2, r2
 8017b76:	6863      	ldr	r3, [r4, #4]
 8017b78:	6826      	ldr	r6, [r4, #0]
 8017b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b7e:	fb02 f303 	mul.w	r3, r2, r3
 8017b82:	3304      	adds	r3, #4
 8017b84:	441e      	add	r6, r3
 8017b86:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017b8a:	f1b9 0f00 	cmp.w	r9, #0
 8017b8e:	d023      	beq.n	8017bd8 <uxr_next_input_reliable_buffer_available+0x80>
 8017b90:	6923      	ldr	r3, [r4, #16]
 8017b92:	4605      	mov	r5, r0
 8017b94:	4630      	mov	r0, r6
 8017b96:	4798      	blx	r3
 8017b98:	4682      	mov	sl, r0
 8017b9a:	b300      	cbz	r0, 8017bde <uxr_next_input_reliable_buffer_available+0x86>
 8017b9c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017ba0:	2101      	movs	r1, #1
 8017ba2:	4650      	mov	r0, sl
 8017ba4:	f000 fd2a 	bl	80185fc <uxr_seq_num_add>
 8017ba8:	8921      	ldrh	r1, [r4, #8]
 8017baa:	fbb0 f2f1 	udiv	r2, r0, r1
 8017bae:	4682      	mov	sl, r0
 8017bb0:	fb01 0212 	mls	r2, r1, r2, r0
 8017bb4:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017bb8:	b292      	uxth	r2, r2
 8017bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8017bbe:	fb02 f303 	mul.w	r3, r2, r3
 8017bc2:	3304      	adds	r3, #4
 8017bc4:	4418      	add	r0, r3
 8017bc6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017bca:	b12b      	cbz	r3, 8017bd8 <uxr_next_input_reliable_buffer_available+0x80>
 8017bcc:	6923      	ldr	r3, [r4, #16]
 8017bce:	4798      	blx	r3
 8017bd0:	2802      	cmp	r0, #2
 8017bd2:	d01b      	beq.n	8017c0c <uxr_next_input_reliable_buffer_available+0xb4>
 8017bd4:	2801      	cmp	r0, #1
 8017bd6:	d0e3      	beq.n	8017ba0 <uxr_next_input_reliable_buffer_available+0x48>
 8017bd8:	2000      	movs	r0, #0
 8017bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bde:	464a      	mov	r2, r9
 8017be0:	4631      	mov	r1, r6
 8017be2:	4638      	mov	r0, r7
 8017be4:	f7f6 fd76 	bl	800e6d4 <ucdr_init_buffer>
 8017be8:	8921      	ldrh	r1, [r4, #8]
 8017bea:	fbb5 f2f1 	udiv	r2, r5, r1
 8017bee:	fb01 5212 	mls	r2, r1, r2, r5
 8017bf2:	b292      	uxth	r2, r2
 8017bf4:	6863      	ldr	r3, [r4, #4]
 8017bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8017bfa:	fb02 f303 	mul.w	r3, r2, r3
 8017bfe:	6822      	ldr	r2, [r4, #0]
 8017c00:	f842 a003 	str.w	sl, [r2, r3]
 8017c04:	81a5      	strh	r5, [r4, #12]
 8017c06:	2001      	movs	r0, #1
 8017c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c0c:	eb06 0108 	add.w	r1, r6, r8
 8017c10:	8926      	ldrh	r6, [r4, #8]
 8017c12:	fbb5 f0f6 	udiv	r0, r5, r6
 8017c16:	fb06 5010 	mls	r0, r6, r0, r5
 8017c1a:	b280      	uxth	r0, r0
 8017c1c:	6863      	ldr	r3, [r4, #4]
 8017c1e:	fbb3 f3f6 	udiv	r3, r3, r6
 8017c22:	fb00 f303 	mul.w	r3, r0, r3
 8017c26:	6820      	ldr	r0, [r4, #0]
 8017c28:	2500      	movs	r5, #0
 8017c2a:	50c5      	str	r5, [r0, r3]
 8017c2c:	eba9 0208 	sub.w	r2, r9, r8
 8017c30:	4638      	mov	r0, r7
 8017c32:	f7f6 fd4f 	bl	800e6d4 <ucdr_init_buffer>
 8017c36:	4903      	ldr	r1, [pc, #12]	@ (8017c44 <uxr_next_input_reliable_buffer_available+0xec>)
 8017c38:	4622      	mov	r2, r4
 8017c3a:	4638      	mov	r0, r7
 8017c3c:	f7f6 fd1e 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 8017c40:	4655      	mov	r5, sl
 8017c42:	e7df      	b.n	8017c04 <uxr_next_input_reliable_buffer_available+0xac>
 8017c44:	08017961 	.word	0x08017961

08017c48 <uxr_process_heartbeat>:
 8017c48:	b538      	push	{r3, r4, r5, lr}
 8017c4a:	4611      	mov	r1, r2
 8017c4c:	4604      	mov	r4, r0
 8017c4e:	89c0      	ldrh	r0, [r0, #14]
 8017c50:	4615      	mov	r5, r2
 8017c52:	f000 fcdb 	bl	801860c <uxr_seq_num_cmp>
 8017c56:	2800      	cmp	r0, #0
 8017c58:	bfb8      	it	lt
 8017c5a:	81e5      	strhlt	r5, [r4, #14]
 8017c5c:	bd38      	pop	{r3, r4, r5, pc}
 8017c5e:	bf00      	nop

08017c60 <uxr_compute_acknack>:
 8017c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c64:	8903      	ldrh	r3, [r0, #8]
 8017c66:	8985      	ldrh	r5, [r0, #12]
 8017c68:	4604      	mov	r4, r0
 8017c6a:	460e      	mov	r6, r1
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d048      	beq.n	8017d02 <uxr_compute_acknack+0xa2>
 8017c70:	4628      	mov	r0, r5
 8017c72:	2701      	movs	r7, #1
 8017c74:	e003      	b.n	8017c7e <uxr_compute_acknack+0x1e>
 8017c76:	4567      	cmp	r7, ip
 8017c78:	d243      	bcs.n	8017d02 <uxr_compute_acknack+0xa2>
 8017c7a:	89a0      	ldrh	r0, [r4, #12]
 8017c7c:	3701      	adds	r7, #1
 8017c7e:	b2b9      	uxth	r1, r7
 8017c80:	f000 fcbc 	bl	80185fc <uxr_seq_num_add>
 8017c84:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017c88:	fbb0 f2fc 	udiv	r2, r0, ip
 8017c8c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017c90:	fb0c 0212 	mls	r2, ip, r2, r0
 8017c94:	b292      	uxth	r2, r2
 8017c96:	fbb3 f3fc 	udiv	r3, r3, ip
 8017c9a:	fb02 f303 	mul.w	r3, r2, r3
 8017c9e:	58cb      	ldr	r3, [r1, r3]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d1e8      	bne.n	8017c76 <uxr_compute_acknack+0x16>
 8017ca4:	8030      	strh	r0, [r6, #0]
 8017ca6:	2101      	movs	r1, #1
 8017ca8:	89e5      	ldrh	r5, [r4, #14]
 8017caa:	f000 fcab 	bl	8018604 <uxr_seq_num_sub>
 8017cae:	4601      	mov	r1, r0
 8017cb0:	4628      	mov	r0, r5
 8017cb2:	f000 fca7 	bl	8018604 <uxr_seq_num_sub>
 8017cb6:	4605      	mov	r5, r0
 8017cb8:	4607      	mov	r7, r0
 8017cba:	b1f8      	cbz	r0, 8017cfc <uxr_compute_acknack+0x9c>
 8017cbc:	f04f 0900 	mov.w	r9, #0
 8017cc0:	464d      	mov	r5, r9
 8017cc2:	f04f 0801 	mov.w	r8, #1
 8017cc6:	fa1f f189 	uxth.w	r1, r9
 8017cca:	8830      	ldrh	r0, [r6, #0]
 8017ccc:	f000 fc96 	bl	80185fc <uxr_seq_num_add>
 8017cd0:	8921      	ldrh	r1, [r4, #8]
 8017cd2:	fbb0 f3f1 	udiv	r3, r0, r1
 8017cd6:	fb03 0011 	mls	r0, r3, r1, r0
 8017cda:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017cde:	b280      	uxth	r0, r0
 8017ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ce4:	fb00 f303 	mul.w	r3, r0, r3
 8017ce8:	fa08 f109 	lsl.w	r1, r8, r9
 8017cec:	58d3      	ldr	r3, [r2, r3]
 8017cee:	f109 0901 	add.w	r9, r9, #1
 8017cf2:	b90b      	cbnz	r3, 8017cf8 <uxr_compute_acknack+0x98>
 8017cf4:	4329      	orrs	r1, r5
 8017cf6:	b28d      	uxth	r5, r1
 8017cf8:	454f      	cmp	r7, r9
 8017cfa:	d1e4      	bne.n	8017cc6 <uxr_compute_acknack+0x66>
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d02:	4628      	mov	r0, r5
 8017d04:	e7ce      	b.n	8017ca4 <uxr_compute_acknack+0x44>
 8017d06:	bf00      	nop

08017d08 <uxr_init_output_best_effort_stream>:
 8017d08:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017d0c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017d10:	6001      	str	r1, [r0, #0]
 8017d12:	7303      	strb	r3, [r0, #12]
 8017d14:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017d18:	4770      	bx	lr
 8017d1a:	bf00      	nop

08017d1c <uxr_reset_output_best_effort_stream>:
 8017d1c:	7b02      	ldrb	r2, [r0, #12]
 8017d1e:	6042      	str	r2, [r0, #4]
 8017d20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d24:	81c3      	strh	r3, [r0, #14]
 8017d26:	4770      	bx	lr

08017d28 <uxr_prepare_best_effort_buffer_to_write>:
 8017d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d2a:	4604      	mov	r4, r0
 8017d2c:	b083      	sub	sp, #12
 8017d2e:	6840      	ldr	r0, [r0, #4]
 8017d30:	460d      	mov	r5, r1
 8017d32:	4616      	mov	r6, r2
 8017d34:	f7f9 f810 	bl	8010d58 <uxr_submessage_padding>
 8017d38:	6863      	ldr	r3, [r4, #4]
 8017d3a:	4418      	add	r0, r3
 8017d3c:	68a3      	ldr	r3, [r4, #8]
 8017d3e:	1942      	adds	r2, r0, r5
 8017d40:	4293      	cmp	r3, r2
 8017d42:	bf2c      	ite	cs
 8017d44:	2701      	movcs	r7, #1
 8017d46:	2700      	movcc	r7, #0
 8017d48:	d202      	bcs.n	8017d50 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017d4a:	4638      	mov	r0, r7
 8017d4c:	b003      	add	sp, #12
 8017d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d50:	9000      	str	r0, [sp, #0]
 8017d52:	6821      	ldr	r1, [r4, #0]
 8017d54:	4630      	mov	r0, r6
 8017d56:	2300      	movs	r3, #0
 8017d58:	f7f6 fcaa 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 8017d5c:	6863      	ldr	r3, [r4, #4]
 8017d5e:	4638      	mov	r0, r7
 8017d60:	442b      	add	r3, r5
 8017d62:	6063      	str	r3, [r4, #4]
 8017d64:	b003      	add	sp, #12
 8017d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d68 <uxr_prepare_best_effort_buffer_to_send>:
 8017d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	461d      	mov	r5, r3
 8017d70:	6840      	ldr	r0, [r0, #4]
 8017d72:	7b23      	ldrb	r3, [r4, #12]
 8017d74:	4298      	cmp	r0, r3
 8017d76:	bf8c      	ite	hi
 8017d78:	2601      	movhi	r6, #1
 8017d7a:	2600      	movls	r6, #0
 8017d7c:	d802      	bhi.n	8017d84 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017d7e:	4630      	mov	r0, r6
 8017d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d84:	4688      	mov	r8, r1
 8017d86:	89e0      	ldrh	r0, [r4, #14]
 8017d88:	2101      	movs	r1, #1
 8017d8a:	4617      	mov	r7, r2
 8017d8c:	f000 fc36 	bl	80185fc <uxr_seq_num_add>
 8017d90:	6823      	ldr	r3, [r4, #0]
 8017d92:	81e0      	strh	r0, [r4, #14]
 8017d94:	8028      	strh	r0, [r5, #0]
 8017d96:	f8c8 3000 	str.w	r3, [r8]
 8017d9a:	6863      	ldr	r3, [r4, #4]
 8017d9c:	603b      	str	r3, [r7, #0]
 8017d9e:	7b23      	ldrb	r3, [r4, #12]
 8017da0:	6063      	str	r3, [r4, #4]
 8017da2:	4630      	mov	r0, r6
 8017da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017da8 <on_full_output_buffer>:
 8017da8:	b538      	push	{r3, r4, r5, lr}
 8017daa:	460c      	mov	r4, r1
 8017dac:	6803      	ldr	r3, [r0, #0]
 8017dae:	6809      	ldr	r1, [r1, #0]
 8017db0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017db4:	6862      	ldr	r2, [r4, #4]
 8017db6:	fbb2 f2fc 	udiv	r2, r2, ip
 8017dba:	1a5b      	subs	r3, r3, r1
 8017dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	fbb3 fefc 	udiv	lr, r3, ip
 8017dc8:	fb0c 331e 	mls	r3, ip, lr, r3
 8017dcc:	b29b      	uxth	r3, r3
 8017dce:	fb02 f303 	mul.w	r3, r2, r3
 8017dd2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017dd6:	58ca      	ldr	r2, [r1, r3]
 8017dd8:	4463      	add	r3, ip
 8017dda:	eba2 020c 	sub.w	r2, r2, ip
 8017dde:	3308      	adds	r3, #8
 8017de0:	4605      	mov	r5, r0
 8017de2:	4419      	add	r1, r3
 8017de4:	3a04      	subs	r2, #4
 8017de6:	6903      	ldr	r3, [r0, #16]
 8017de8:	f7f6 fc6c 	bl	800e6c4 <ucdr_init_buffer_origin>
 8017dec:	4628      	mov	r0, r5
 8017dee:	4903      	ldr	r1, [pc, #12]	@ (8017dfc <on_full_output_buffer+0x54>)
 8017df0:	4622      	mov	r2, r4
 8017df2:	f7f6 fc43 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 8017df6:	2000      	movs	r0, #0
 8017df8:	bd38      	pop	{r3, r4, r5, pc}
 8017dfa:	bf00      	nop
 8017dfc:	08017da9 	.word	0x08017da9

08017e00 <uxr_init_output_reliable_stream>:
 8017e00:	b410      	push	{r4}
 8017e02:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017e06:	8103      	strh	r3, [r0, #8]
 8017e08:	e9c0 1200 	strd	r1, r2, [r0]
 8017e0c:	f880 c00c 	strb.w	ip, [r0, #12]
 8017e10:	b1d3      	cbz	r3, 8017e48 <uxr_init_output_reliable_stream+0x48>
 8017e12:	f8c1 c000 	str.w	ip, [r1]
 8017e16:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e1a:	f1bc 0f01 	cmp.w	ip, #1
 8017e1e:	d913      	bls.n	8017e48 <uxr_init_output_reliable_stream+0x48>
 8017e20:	2301      	movs	r3, #1
 8017e22:	fbb3 f1fc 	udiv	r1, r3, ip
 8017e26:	fb0c 3111 	mls	r1, ip, r1, r3
 8017e2a:	b289      	uxth	r1, r1
 8017e2c:	6842      	ldr	r2, [r0, #4]
 8017e2e:	6804      	ldr	r4, [r0, #0]
 8017e30:	fbb2 f2fc 	udiv	r2, r2, ip
 8017e34:	fb01 f202 	mul.w	r2, r1, r2
 8017e38:	7b01      	ldrb	r1, [r0, #12]
 8017e3a:	50a1      	str	r1, [r4, r2]
 8017e3c:	3301      	adds	r3, #1
 8017e3e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	459c      	cmp	ip, r3
 8017e46:	d8ec      	bhi.n	8017e22 <uxr_init_output_reliable_stream+0x22>
 8017e48:	f04f 32ff 	mov.w	r2, #4294967295
 8017e4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e50:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e54:	4905      	ldr	r1, [pc, #20]	@ (8017e6c <uxr_init_output_reliable_stream+0x6c>)
 8017e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e5a:	f8c0 100e 	str.w	r1, [r0, #14]
 8017e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e62:	2300      	movs	r3, #0
 8017e64:	8242      	strh	r2, [r0, #18]
 8017e66:	8403      	strh	r3, [r0, #32]
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop
 8017e6c:	ffff0000 	.word	0xffff0000

08017e70 <uxr_reset_output_reliable_stream>:
 8017e70:	8901      	ldrh	r1, [r0, #8]
 8017e72:	b1b1      	cbz	r1, 8017ea2 <uxr_reset_output_reliable_stream+0x32>
 8017e74:	f04f 0c00 	mov.w	ip, #0
 8017e78:	4663      	mov	r3, ip
 8017e7a:	fbb3 f2f1 	udiv	r2, r3, r1
 8017e7e:	fb01 3312 	mls	r3, r1, r2, r3
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	6842      	ldr	r2, [r0, #4]
 8017e86:	fbb2 f2f1 	udiv	r2, r2, r1
 8017e8a:	6801      	ldr	r1, [r0, #0]
 8017e8c:	fb03 f202 	mul.w	r2, r3, r2
 8017e90:	7b03      	ldrb	r3, [r0, #12]
 8017e92:	508b      	str	r3, [r1, r2]
 8017e94:	f10c 0c01 	add.w	ip, ip, #1
 8017e98:	8901      	ldrh	r1, [r0, #8]
 8017e9a:	fa1f f38c 	uxth.w	r3, ip
 8017e9e:	4299      	cmp	r1, r3
 8017ea0:	d8eb      	bhi.n	8017e7a <uxr_reset_output_reliable_stream+0xa>
 8017ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8017ea6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017eaa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017eae:	4904      	ldr	r1, [pc, #16]	@ (8017ec0 <uxr_reset_output_reliable_stream+0x50>)
 8017eb0:	f8c0 100e 	str.w	r1, [r0, #14]
 8017eb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017eb8:	2300      	movs	r3, #0
 8017eba:	8242      	strh	r2, [r0, #18]
 8017ebc:	8403      	strh	r3, [r0, #32]
 8017ebe:	4770      	bx	lr
 8017ec0:	ffff0000 	.word	0xffff0000

08017ec4 <uxr_prepare_reliable_buffer_to_write>:
 8017ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec8:	4604      	mov	r4, r0
 8017eca:	b091      	sub	sp, #68	@ 0x44
 8017ecc:	8900      	ldrh	r0, [r0, #8]
 8017ece:	89e7      	ldrh	r7, [r4, #14]
 8017ed0:	6823      	ldr	r3, [r4, #0]
 8017ed2:	9204      	str	r2, [sp, #16]
 8017ed4:	fbb7 f2f0 	udiv	r2, r7, r0
 8017ed8:	fb00 7212 	mls	r2, r0, r2, r7
 8017edc:	b292      	uxth	r2, r2
 8017ede:	6865      	ldr	r5, [r4, #4]
 8017ee0:	fbb5 f5f0 	udiv	r5, r5, r0
 8017ee4:	fb05 3202 	mla	r2, r5, r2, r3
 8017ee8:	3204      	adds	r2, #4
 8017eea:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8017eee:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8017ef2:	9203      	str	r2, [sp, #12]
 8017ef4:	4688      	mov	r8, r1
 8017ef6:	f1a5 0904 	sub.w	r9, r5, #4
 8017efa:	2800      	cmp	r0, #0
 8017efc:	f000 8143 	beq.w	8018186 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8017f00:	2100      	movs	r1, #0
 8017f02:	460e      	mov	r6, r1
 8017f04:	b28a      	uxth	r2, r1
 8017f06:	fbb2 fcf0 	udiv	ip, r2, r0
 8017f0a:	fb00 221c 	mls	r2, r0, ip, r2
 8017f0e:	b292      	uxth	r2, r2
 8017f10:	fb05 f202 	mul.w	r2, r5, r2
 8017f14:	3101      	adds	r1, #1
 8017f16:	589a      	ldr	r2, [r3, r2]
 8017f18:	455a      	cmp	r2, fp
 8017f1a:	bf04      	itt	eq
 8017f1c:	3601      	addeq	r6, #1
 8017f1e:	b2b6      	uxtheq	r6, r6
 8017f20:	4281      	cmp	r1, r0
 8017f22:	d1ef      	bne.n	8017f04 <uxr_prepare_reliable_buffer_to_write+0x40>
 8017f24:	4650      	mov	r0, sl
 8017f26:	2104      	movs	r1, #4
 8017f28:	9605      	str	r6, [sp, #20]
 8017f2a:	f7f6 fbd7 	bl	800e6dc <ucdr_alignment>
 8017f2e:	4482      	add	sl, r0
 8017f30:	eb0a 0208 	add.w	r2, sl, r8
 8017f34:	454a      	cmp	r2, r9
 8017f36:	f240 80ca 	bls.w	80180ce <uxr_prepare_reliable_buffer_to_write+0x20a>
 8017f3a:	7b22      	ldrb	r2, [r4, #12]
 8017f3c:	4442      	add	r2, r8
 8017f3e:	454a      	cmp	r2, r9
 8017f40:	f240 80b2 	bls.w	80180a8 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8017f44:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8017f48:	32fc      	adds	r2, #252	@ 0xfc
 8017f4a:	fa1f f389 	uxth.w	r3, r9
 8017f4e:	441a      	add	r2, r3
 8017f50:	b292      	uxth	r2, r2
 8017f52:	fb06 fb02 	mul.w	fp, r6, r2
 8017f56:	45c3      	cmp	fp, r8
 8017f58:	9205      	str	r2, [sp, #20]
 8017f5a:	9206      	str	r2, [sp, #24]
 8017f5c:	f0c0 80b3 	bcc.w	80180c6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8017f60:	f10a 0204 	add.w	r2, sl, #4
 8017f64:	454a      	cmp	r2, r9
 8017f66:	f080 80db 	bcs.w	8018120 <uxr_prepare_reliable_buffer_to_write+0x25c>
 8017f6a:	f1a3 0b04 	sub.w	fp, r3, #4
 8017f6e:	ebab 0b0a 	sub.w	fp, fp, sl
 8017f72:	9b05      	ldr	r3, [sp, #20]
 8017f74:	fa1f fb8b 	uxth.w	fp, fp
 8017f78:	eba8 080b 	sub.w	r8, r8, fp
 8017f7c:	fbb8 fcf3 	udiv	ip, r8, r3
 8017f80:	fb03 831c 	mls	r3, r3, ip, r8
 8017f84:	fa1f fc8c 	uxth.w	ip, ip
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f040 80c1 	bne.w	8018110 <uxr_prepare_reliable_buffer_to_write+0x24c>
 8017f8e:	45b4      	cmp	ip, r6
 8017f90:	f200 8099 	bhi.w	80180c6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8017f94:	f10d 0820 	add.w	r8, sp, #32
 8017f98:	f1bc 0f00 	cmp.w	ip, #0
 8017f9c:	d040      	beq.n	8018020 <uxr_prepare_reliable_buffer_to_write+0x15c>
 8017f9e:	f8cd a01c 	str.w	sl, [sp, #28]
 8017fa2:	2600      	movs	r6, #0
 8017fa4:	f8dd a014 	ldr.w	sl, [sp, #20]
 8017fa8:	9505      	str	r5, [sp, #20]
 8017faa:	f10d 0820 	add.w	r8, sp, #32
 8017fae:	4665      	mov	r5, ip
 8017fb0:	e000      	b.n	8017fb4 <uxr_prepare_reliable_buffer_to_write+0xf0>
 8017fb2:	46d3      	mov	fp, sl
 8017fb4:	8921      	ldrh	r1, [r4, #8]
 8017fb6:	fbb7 f2f1 	udiv	r2, r7, r1
 8017fba:	fb01 7212 	mls	r2, r1, r2, r7
 8017fbe:	b292      	uxth	r2, r2
 8017fc0:	6863      	ldr	r3, [r4, #4]
 8017fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fc6:	6821      	ldr	r1, [r4, #0]
 8017fc8:	fb02 f303 	mul.w	r3, r2, r3
 8017fcc:	3304      	adds	r3, #4
 8017fce:	4419      	add	r1, r3
 8017fd0:	4640      	mov	r0, r8
 8017fd2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017fd6:	9200      	str	r2, [sp, #0]
 8017fd8:	2300      	movs	r3, #0
 8017fda:	464a      	mov	r2, r9
 8017fdc:	f7f6 fb68 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 8017fe0:	465a      	mov	r2, fp
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	210d      	movs	r1, #13
 8017fe6:	4640      	mov	r0, r8
 8017fe8:	f7f8 fe76 	bl	8010cd8 <uxr_buffer_submessage_header>
 8017fec:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017ff0:	fbb7 f2fc 	udiv	r2, r7, ip
 8017ff4:	fb0c 7212 	mls	r2, ip, r2, r7
 8017ff8:	b292      	uxth	r2, r2
 8017ffa:	6863      	ldr	r3, [r4, #4]
 8017ffc:	fbb3 f3fc 	udiv	r3, r3, ip
 8018000:	fb02 f303 	mul.w	r3, r2, r3
 8018004:	6822      	ldr	r2, [r4, #0]
 8018006:	4638      	mov	r0, r7
 8018008:	f842 9003 	str.w	r9, [r2, r3]
 801800c:	2101      	movs	r1, #1
 801800e:	f000 faf5 	bl	80185fc <uxr_seq_num_add>
 8018012:	3601      	adds	r6, #1
 8018014:	42ae      	cmp	r6, r5
 8018016:	4607      	mov	r7, r0
 8018018:	d1cb      	bne.n	8017fb2 <uxr_prepare_reliable_buffer_to_write+0xee>
 801801a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801801e:	9d05      	ldr	r5, [sp, #20]
 8018020:	8920      	ldrh	r0, [r4, #8]
 8018022:	fbb7 f1f0 	udiv	r1, r7, r0
 8018026:	fb00 7111 	mls	r1, r0, r1, r7
 801802a:	b289      	uxth	r1, r1
 801802c:	6863      	ldr	r3, [r4, #4]
 801802e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018032:	fb01 f303 	mul.w	r3, r1, r3
 8018036:	6821      	ldr	r1, [r4, #0]
 8018038:	3304      	adds	r3, #4
 801803a:	4419      	add	r1, r3
 801803c:	464a      	mov	r2, r9
 801803e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018042:	9000      	str	r0, [sp, #0]
 8018044:	2300      	movs	r3, #0
 8018046:	4640      	mov	r0, r8
 8018048:	f7f6 fb32 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 801804c:	4640      	mov	r0, r8
 801804e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018052:	2302      	movs	r3, #2
 8018054:	fa1f f288 	uxth.w	r2, r8
 8018058:	210d      	movs	r1, #13
 801805a:	f7f8 fe3d 	bl	8010cd8 <uxr_buffer_submessage_header>
 801805e:	8926      	ldrh	r6, [r4, #8]
 8018060:	9b03      	ldr	r3, [sp, #12]
 8018062:	7b20      	ldrb	r0, [r4, #12]
 8018064:	f1a5 0208 	sub.w	r2, r5, #8
 8018068:	f10a 0104 	add.w	r1, sl, #4
 801806c:	fbb7 f5f6 	udiv	r5, r7, r6
 8018070:	fb06 7515 	mls	r5, r6, r5, r7
 8018074:	440b      	add	r3, r1
 8018076:	b2ad      	uxth	r5, r5
 8018078:	4619      	mov	r1, r3
 801807a:	3004      	adds	r0, #4
 801807c:	6863      	ldr	r3, [r4, #4]
 801807e:	fbb3 f3f6 	udiv	r3, r3, r6
 8018082:	fb05 f303 	mul.w	r3, r5, r3
 8018086:	6825      	ldr	r5, [r4, #0]
 8018088:	4440      	add	r0, r8
 801808a:	50e8      	str	r0, [r5, r3]
 801808c:	9d04      	ldr	r5, [sp, #16]
 801808e:	eba2 020a 	sub.w	r2, r2, sl
 8018092:	4628      	mov	r0, r5
 8018094:	f7f6 fb1e 	bl	800e6d4 <ucdr_init_buffer>
 8018098:	493c      	ldr	r1, [pc, #240]	@ (801818c <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801809a:	4622      	mov	r2, r4
 801809c:	4628      	mov	r0, r5
 801809e:	f7f6 faed 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 80180a2:	81e7      	strh	r7, [r4, #14]
 80180a4:	2001      	movs	r0, #1
 80180a6:	e00f      	b.n	80180c8 <uxr_prepare_reliable_buffer_to_write+0x204>
 80180a8:	2101      	movs	r1, #1
 80180aa:	89e0      	ldrh	r0, [r4, #14]
 80180ac:	f000 faa6 	bl	80185fc <uxr_seq_num_add>
 80180b0:	8921      	ldrh	r1, [r4, #8]
 80180b2:	4605      	mov	r5, r0
 80180b4:	8a60      	ldrh	r0, [r4, #18]
 80180b6:	f000 faa1 	bl	80185fc <uxr_seq_num_add>
 80180ba:	4601      	mov	r1, r0
 80180bc:	4628      	mov	r0, r5
 80180be:	f000 faa5 	bl	801860c <uxr_seq_num_cmp>
 80180c2:	2800      	cmp	r0, #0
 80180c4:	dd45      	ble.n	8018152 <uxr_prepare_reliable_buffer_to_write+0x28e>
 80180c6:	2000      	movs	r0, #0
 80180c8:	b011      	add	sp, #68	@ 0x44
 80180ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ce:	8921      	ldrh	r1, [r4, #8]
 80180d0:	8a60      	ldrh	r0, [r4, #18]
 80180d2:	9205      	str	r2, [sp, #20]
 80180d4:	f000 fa92 	bl	80185fc <uxr_seq_num_add>
 80180d8:	4601      	mov	r1, r0
 80180da:	4638      	mov	r0, r7
 80180dc:	f000 fa96 	bl	801860c <uxr_seq_num_cmp>
 80180e0:	2800      	cmp	r0, #0
 80180e2:	9a05      	ldr	r2, [sp, #20]
 80180e4:	dcef      	bgt.n	80180c6 <uxr_prepare_reliable_buffer_to_write+0x202>
 80180e6:	8926      	ldrh	r6, [r4, #8]
 80180e8:	fbb7 f5f6 	udiv	r5, r7, r6
 80180ec:	fb06 7515 	mls	r5, r6, r5, r7
 80180f0:	b2ad      	uxth	r5, r5
 80180f2:	6863      	ldr	r3, [r4, #4]
 80180f4:	6824      	ldr	r4, [r4, #0]
 80180f6:	fbb3 f3f6 	udiv	r3, r3, r6
 80180fa:	fb05 f303 	mul.w	r3, r5, r3
 80180fe:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018102:	50e2      	str	r2, [r4, r3]
 8018104:	2300      	movs	r3, #0
 8018106:	f8cd a000 	str.w	sl, [sp]
 801810a:	f7f6 fad1 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 801810e:	e7c9      	b.n	80180a4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8018110:	f10c 0c01 	add.w	ip, ip, #1
 8018114:	fa1f fc8c 	uxth.w	ip, ip
 8018118:	45b4      	cmp	ip, r6
 801811a:	9306      	str	r3, [sp, #24]
 801811c:	d8d3      	bhi.n	80180c6 <uxr_prepare_reliable_buffer_to_write+0x202>
 801811e:	e739      	b.n	8017f94 <uxr_prepare_reliable_buffer_to_write+0xd0>
 8018120:	4638      	mov	r0, r7
 8018122:	2101      	movs	r1, #1
 8018124:	9307      	str	r3, [sp, #28]
 8018126:	f000 fa69 	bl	80185fc <uxr_seq_num_add>
 801812a:	8921      	ldrh	r1, [r4, #8]
 801812c:	6862      	ldr	r2, [r4, #4]
 801812e:	4607      	mov	r7, r0
 8018130:	fbb0 f0f1 	udiv	r0, r0, r1
 8018134:	fb01 7010 	mls	r0, r1, r0, r7
 8018138:	b280      	uxth	r0, r0
 801813a:	fbb2 f1f1 	udiv	r1, r2, r1
 801813e:	6822      	ldr	r2, [r4, #0]
 8018140:	fb00 f101 	mul.w	r1, r0, r1
 8018144:	3104      	adds	r1, #4
 8018146:	1853      	adds	r3, r2, r1
 8018148:	9303      	str	r3, [sp, #12]
 801814a:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801814e:	9b07      	ldr	r3, [sp, #28]
 8018150:	e70b      	b.n	8017f6a <uxr_prepare_reliable_buffer_to_write+0xa6>
 8018152:	8921      	ldrh	r1, [r4, #8]
 8018154:	fbb5 f2f1 	udiv	r2, r5, r1
 8018158:	fb01 5212 	mls	r2, r1, r2, r5
 801815c:	b292      	uxth	r2, r2
 801815e:	6863      	ldr	r3, [r4, #4]
 8018160:	fbb3 f3f1 	udiv	r3, r3, r1
 8018164:	6821      	ldr	r1, [r4, #0]
 8018166:	9804      	ldr	r0, [sp, #16]
 8018168:	fb02 f303 	mul.w	r3, r2, r3
 801816c:	3304      	adds	r3, #4
 801816e:	7b22      	ldrb	r2, [r4, #12]
 8018170:	4419      	add	r1, r3
 8018172:	4442      	add	r2, r8
 8018174:	f841 2c04 	str.w	r2, [r1, #-4]
 8018178:	7b23      	ldrb	r3, [r4, #12]
 801817a:	9300      	str	r3, [sp, #0]
 801817c:	2300      	movs	r3, #0
 801817e:	f7f6 fa97 	bl	800e6b0 <ucdr_init_buffer_origin_offset>
 8018182:	81e5      	strh	r5, [r4, #14]
 8018184:	e78e      	b.n	80180a4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8018186:	4606      	mov	r6, r0
 8018188:	e6cc      	b.n	8017f24 <uxr_prepare_reliable_buffer_to_write+0x60>
 801818a:	bf00      	nop
 801818c:	08017da9 	.word	0x08017da9

08018190 <uxr_prepare_next_reliable_buffer_to_send>:
 8018190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018192:	4604      	mov	r4, r0
 8018194:	460f      	mov	r7, r1
 8018196:	8a00      	ldrh	r0, [r0, #16]
 8018198:	2101      	movs	r1, #1
 801819a:	4615      	mov	r5, r2
 801819c:	461e      	mov	r6, r3
 801819e:	f000 fa2d 	bl	80185fc <uxr_seq_num_add>
 80181a2:	8030      	strh	r0, [r6, #0]
 80181a4:	8922      	ldrh	r2, [r4, #8]
 80181a6:	fbb0 f3f2 	udiv	r3, r0, r2
 80181aa:	fb02 0c13 	mls	ip, r2, r3, r0
 80181ae:	fa1f fc8c 	uxth.w	ip, ip
 80181b2:	6863      	ldr	r3, [r4, #4]
 80181b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80181b8:	fb0c fc03 	mul.w	ip, ip, r3
 80181bc:	6823      	ldr	r3, [r4, #0]
 80181be:	89e1      	ldrh	r1, [r4, #14]
 80181c0:	f10c 0c04 	add.w	ip, ip, #4
 80181c4:	4463      	add	r3, ip
 80181c6:	603b      	str	r3, [r7, #0]
 80181c8:	6823      	ldr	r3, [r4, #0]
 80181ca:	4463      	add	r3, ip
 80181cc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80181d0:	602b      	str	r3, [r5, #0]
 80181d2:	f000 fa1b 	bl	801860c <uxr_seq_num_cmp>
 80181d6:	2800      	cmp	r0, #0
 80181d8:	dd01      	ble.n	80181de <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80181da:	2000      	movs	r0, #0
 80181dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181de:	7b23      	ldrb	r3, [r4, #12]
 80181e0:	682a      	ldr	r2, [r5, #0]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d9f9      	bls.n	80181da <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181e6:	8a61      	ldrh	r1, [r4, #18]
 80181e8:	8a20      	ldrh	r0, [r4, #16]
 80181ea:	f000 fa0b 	bl	8018604 <uxr_seq_num_sub>
 80181ee:	8923      	ldrh	r3, [r4, #8]
 80181f0:	4283      	cmp	r3, r0
 80181f2:	d0f2      	beq.n	80181da <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181f4:	8830      	ldrh	r0, [r6, #0]
 80181f6:	89e3      	ldrh	r3, [r4, #14]
 80181f8:	8220      	strh	r0, [r4, #16]
 80181fa:	4298      	cmp	r0, r3
 80181fc:	d001      	beq.n	8018202 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80181fe:	2001      	movs	r0, #1
 8018200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018202:	2101      	movs	r1, #1
 8018204:	f000 f9fa 	bl	80185fc <uxr_seq_num_add>
 8018208:	81e0      	strh	r0, [r4, #14]
 801820a:	e7f8      	b.n	80181fe <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801820c <uxr_update_output_stream_heartbeat_timestamp>:
 801820c:	b570      	push	{r4, r5, r6, lr}
 801820e:	8a01      	ldrh	r1, [r0, #16]
 8018210:	4604      	mov	r4, r0
 8018212:	8a40      	ldrh	r0, [r0, #18]
 8018214:	4615      	mov	r5, r2
 8018216:	461e      	mov	r6, r3
 8018218:	f000 f9f8 	bl	801860c <uxr_seq_num_cmp>
 801821c:	2800      	cmp	r0, #0
 801821e:	db07      	blt.n	8018230 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018220:	f04f 35ff 	mov.w	r5, #4294967295
 8018224:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8018228:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801822c:	2000      	movs	r0, #0
 801822e:	bd70      	pop	{r4, r5, r6, pc}
 8018230:	f894 3020 	ldrb.w	r3, [r4, #32]
 8018234:	b953      	cbnz	r3, 801824c <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8018236:	2301      	movs	r3, #1
 8018238:	f884 3020 	strb.w	r3, [r4, #32]
 801823c:	3564      	adds	r5, #100	@ 0x64
 801823e:	f04f 0000 	mov.w	r0, #0
 8018242:	f146 0600 	adc.w	r6, r6, #0
 8018246:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801824a:	bd70      	pop	{r4, r5, r6, pc}
 801824c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018250:	428d      	cmp	r5, r1
 8018252:	eb76 0202 	sbcs.w	r2, r6, r2
 8018256:	dbf1      	blt.n	801823c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018258:	3301      	adds	r3, #1
 801825a:	3564      	adds	r5, #100	@ 0x64
 801825c:	f884 3020 	strb.w	r3, [r4, #32]
 8018260:	f04f 0001 	mov.w	r0, #1
 8018264:	f146 0600 	adc.w	r6, r6, #0
 8018268:	e7ed      	b.n	8018246 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801826a:	bf00      	nop

0801826c <uxr_begin_output_nack_buffer_it>:
 801826c:	8a40      	ldrh	r0, [r0, #18]
 801826e:	4770      	bx	lr

08018270 <uxr_next_reliable_nack_buffer_to_send>:
 8018270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018274:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018278:	f1b8 0f00 	cmp.w	r8, #0
 801827c:	d104      	bne.n	8018288 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801827e:	f04f 0800 	mov.w	r8, #0
 8018282:	4640      	mov	r0, r8
 8018284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018288:	4604      	mov	r4, r0
 801828a:	460e      	mov	r6, r1
 801828c:	8818      	ldrh	r0, [r3, #0]
 801828e:	4617      	mov	r7, r2
 8018290:	461d      	mov	r5, r3
 8018292:	e019      	b.n	80182c8 <uxr_next_reliable_nack_buffer_to_send+0x58>
 8018294:	8921      	ldrh	r1, [r4, #8]
 8018296:	8828      	ldrh	r0, [r5, #0]
 8018298:	fbb0 fcf1 	udiv	ip, r0, r1
 801829c:	e9d4 3200 	ldrd	r3, r2, [r4]
 80182a0:	fb01 0c1c 	mls	ip, r1, ip, r0
 80182a4:	fa1f fc8c 	uxth.w	ip, ip
 80182a8:	fbb2 f2f1 	udiv	r2, r2, r1
 80182ac:	fb02 fc0c 	mul.w	ip, r2, ip
 80182b0:	f10c 0c04 	add.w	ip, ip, #4
 80182b4:	4463      	add	r3, ip
 80182b6:	6033      	str	r3, [r6, #0]
 80182b8:	6823      	ldr	r3, [r4, #0]
 80182ba:	4463      	add	r3, ip
 80182bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80182c0:	603b      	str	r3, [r7, #0]
 80182c2:	7b22      	ldrb	r2, [r4, #12]
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d1dc      	bne.n	8018282 <uxr_next_reliable_nack_buffer_to_send+0x12>
 80182c8:	2101      	movs	r1, #1
 80182ca:	f000 f997 	bl	80185fc <uxr_seq_num_add>
 80182ce:	8028      	strh	r0, [r5, #0]
 80182d0:	8a21      	ldrh	r1, [r4, #16]
 80182d2:	f000 f99b 	bl	801860c <uxr_seq_num_cmp>
 80182d6:	2800      	cmp	r0, #0
 80182d8:	dddc      	ble.n	8018294 <uxr_next_reliable_nack_buffer_to_send+0x24>
 80182da:	2300      	movs	r3, #0
 80182dc:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 80182e0:	e7cd      	b.n	801827e <uxr_next_reliable_nack_buffer_to_send+0xe>
 80182e2:	bf00      	nop

080182e4 <uxr_process_acknack>:
 80182e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182e6:	4604      	mov	r4, r0
 80182e8:	460e      	mov	r6, r1
 80182ea:	4610      	mov	r0, r2
 80182ec:	2101      	movs	r1, #1
 80182ee:	f000 f989 	bl	8018604 <uxr_seq_num_sub>
 80182f2:	8a61      	ldrh	r1, [r4, #18]
 80182f4:	f000 f986 	bl	8018604 <uxr_seq_num_sub>
 80182f8:	b1c0      	cbz	r0, 801832c <uxr_process_acknack+0x48>
 80182fa:	4605      	mov	r5, r0
 80182fc:	2700      	movs	r7, #0
 80182fe:	2101      	movs	r1, #1
 8018300:	8a60      	ldrh	r0, [r4, #18]
 8018302:	f000 f97b 	bl	80185fc <uxr_seq_num_add>
 8018306:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801830a:	fbb0 f1fc 	udiv	r1, r0, ip
 801830e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018312:	fb0c 0111 	mls	r1, ip, r1, r0
 8018316:	b289      	uxth	r1, r1
 8018318:	3701      	adds	r7, #1
 801831a:	fbb3 f3fc 	udiv	r3, r3, ip
 801831e:	fb01 f303 	mul.w	r3, r1, r3
 8018322:	42bd      	cmp	r5, r7
 8018324:	7b21      	ldrb	r1, [r4, #12]
 8018326:	8260      	strh	r0, [r4, #18]
 8018328:	50d1      	str	r1, [r2, r3]
 801832a:	d1e8      	bne.n	80182fe <uxr_process_acknack+0x1a>
 801832c:	3e00      	subs	r6, #0
 801832e:	f04f 0300 	mov.w	r3, #0
 8018332:	bf18      	it	ne
 8018334:	2601      	movne	r6, #1
 8018336:	f884 3020 	strb.w	r3, [r4, #32]
 801833a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018340 <uxr_is_output_up_to_date>:
 8018340:	8a01      	ldrh	r1, [r0, #16]
 8018342:	8a40      	ldrh	r0, [r0, #18]
 8018344:	b508      	push	{r3, lr}
 8018346:	f000 f961 	bl	801860c <uxr_seq_num_cmp>
 801834a:	fab0 f080 	clz	r0, r0
 801834e:	0940      	lsrs	r0, r0, #5
 8018350:	bd08      	pop	{r3, pc}
 8018352:	bf00      	nop

08018354 <get_available_free_slots>:
 8018354:	8901      	ldrh	r1, [r0, #8]
 8018356:	b1c1      	cbz	r1, 801838a <get_available_free_slots+0x36>
 8018358:	b530      	push	{r4, r5, lr}
 801835a:	2200      	movs	r2, #0
 801835c:	6843      	ldr	r3, [r0, #4]
 801835e:	6805      	ldr	r5, [r0, #0]
 8018360:	7b04      	ldrb	r4, [r0, #12]
 8018362:	fbb3 fef1 	udiv	lr, r3, r1
 8018366:	4610      	mov	r0, r2
 8018368:	b293      	uxth	r3, r2
 801836a:	fbb3 fcf1 	udiv	ip, r3, r1
 801836e:	fb01 331c 	mls	r3, r1, ip, r3
 8018372:	b29b      	uxth	r3, r3
 8018374:	fb0e f303 	mul.w	r3, lr, r3
 8018378:	3201      	adds	r2, #1
 801837a:	58eb      	ldr	r3, [r5, r3]
 801837c:	429c      	cmp	r4, r3
 801837e:	bf04      	itt	eq
 8018380:	3001      	addeq	r0, #1
 8018382:	b280      	uxtheq	r0, r0
 8018384:	4291      	cmp	r1, r2
 8018386:	d1ef      	bne.n	8018368 <get_available_free_slots+0x14>
 8018388:	bd30      	pop	{r4, r5, pc}
 801838a:	4608      	mov	r0, r1
 801838c:	4770      	bx	lr
 801838e:	bf00      	nop

08018390 <uxr_buffer_request_data>:
 8018390:	b530      	push	{r4, r5, lr}
 8018392:	b095      	sub	sp, #84	@ 0x54
 8018394:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018398:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801839a:	f88d 301c 	strb.w	r3, [sp, #28]
 801839e:	2200      	movs	r2, #0
 80183a0:	2d00      	cmp	r5, #0
 80183a2:	bf14      	ite	ne
 80183a4:	2101      	movne	r1, #1
 80183a6:	4611      	moveq	r1, r2
 80183a8:	4604      	mov	r4, r0
 80183aa:	f88d 201d 	strb.w	r2, [sp, #29]
 80183ae:	f88d 201e 	strb.w	r2, [sp, #30]
 80183b2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80183b6:	d021      	beq.n	80183fc <uxr_buffer_request_data+0x6c>
 80183b8:	682a      	ldr	r2, [r5, #0]
 80183ba:	686b      	ldr	r3, [r5, #4]
 80183bc:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80183c0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80183c4:	2210      	movs	r2, #16
 80183c6:	2308      	movs	r3, #8
 80183c8:	2100      	movs	r1, #0
 80183ca:	e9cd 3100 	strd	r3, r1, [sp]
 80183ce:	4620      	mov	r0, r4
 80183d0:	9905      	ldr	r1, [sp, #20]
 80183d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80183d4:	f7f7 fd96 	bl	800ff04 <uxr_prepare_stream_to_write_submessage>
 80183d8:	b918      	cbnz	r0, 80183e2 <uxr_buffer_request_data+0x52>
 80183da:	4604      	mov	r4, r0
 80183dc:	4620      	mov	r0, r4
 80183de:	b015      	add	sp, #84	@ 0x54
 80183e0:	bd30      	pop	{r4, r5, pc}
 80183e2:	9904      	ldr	r1, [sp, #16]
 80183e4:	aa06      	add	r2, sp, #24
 80183e6:	4620      	mov	r0, r4
 80183e8:	f7f7 fec6 	bl	8010178 <uxr_init_base_object_request>
 80183ec:	a906      	add	r1, sp, #24
 80183ee:	4604      	mov	r4, r0
 80183f0:	a80c      	add	r0, sp, #48	@ 0x30
 80183f2:	f7f9 fdf7 	bl	8011fe4 <uxr_serialize_READ_DATA_Payload>
 80183f6:	4620      	mov	r0, r4
 80183f8:	b015      	add	sp, #84	@ 0x54
 80183fa:	bd30      	pop	{r4, r5, pc}
 80183fc:	2208      	movs	r2, #8
 80183fe:	e7e2      	b.n	80183c6 <uxr_buffer_request_data+0x36>

08018400 <uxr_buffer_cancel_data>:
 8018400:	b510      	push	{r4, lr}
 8018402:	b094      	sub	sp, #80	@ 0x50
 8018404:	2300      	movs	r3, #0
 8018406:	9301      	str	r3, [sp, #4]
 8018408:	9205      	str	r2, [sp, #20]
 801840a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801840e:	2201      	movs	r2, #1
 8018410:	f88d 301e 	strb.w	r3, [sp, #30]
 8018414:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8018418:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801841c:	2308      	movs	r3, #8
 801841e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8018422:	9300      	str	r3, [sp, #0]
 8018424:	2210      	movs	r2, #16
 8018426:	ab0c      	add	r3, sp, #48	@ 0x30
 8018428:	4604      	mov	r4, r0
 801842a:	f7f7 fd6b 	bl	800ff04 <uxr_prepare_stream_to_write_submessage>
 801842e:	b918      	cbnz	r0, 8018438 <uxr_buffer_cancel_data+0x38>
 8018430:	4604      	mov	r4, r0
 8018432:	4620      	mov	r0, r4
 8018434:	b014      	add	sp, #80	@ 0x50
 8018436:	bd10      	pop	{r4, pc}
 8018438:	9905      	ldr	r1, [sp, #20]
 801843a:	aa06      	add	r2, sp, #24
 801843c:	4620      	mov	r0, r4
 801843e:	f7f7 fe9b 	bl	8010178 <uxr_init_base_object_request>
 8018442:	a906      	add	r1, sp, #24
 8018444:	4604      	mov	r4, r0
 8018446:	a80c      	add	r0, sp, #48	@ 0x30
 8018448:	f7f9 fdcc 	bl	8011fe4 <uxr_serialize_READ_DATA_Payload>
 801844c:	4620      	mov	r0, r4
 801844e:	b014      	add	sp, #80	@ 0x50
 8018450:	bd10      	pop	{r4, pc}
 8018452:	bf00      	nop

08018454 <read_submessage_format>:
 8018454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018458:	b095      	sub	sp, #84	@ 0x54
 801845a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801845e:	b113      	cbz	r3, 8018466 <read_submessage_format+0x12>
 8018460:	b015      	add	sp, #84	@ 0x54
 8018462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018466:	460c      	mov	r4, r1
 8018468:	4616      	mov	r6, r2
 801846a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801846e:	461d      	mov	r5, r3
 8018470:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8018472:	9304      	str	r3, [sp, #16]
 8018474:	1a52      	subs	r2, r2, r1
 8018476:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018478:	9305      	str	r3, [sp, #20]
 801847a:	4680      	mov	r8, r0
 801847c:	a80c      	add	r0, sp, #48	@ 0x30
 801847e:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 8018482:	f7f6 f927 	bl	800e6d4 <ucdr_init_buffer>
 8018486:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801848a:	a80c      	add	r0, sp, #48	@ 0x30
 801848c:	f7f6 f8f6 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 8018490:	69e3      	ldr	r3, [r4, #28]
 8018492:	b35b      	cbz	r3, 80184ec <read_submessage_format+0x98>
 8018494:	f1b9 0f07 	cmp.w	r9, #7
 8018498:	751d      	strb	r5, [r3, #20]
 801849a:	d043      	beq.n	8018524 <read_submessage_format+0xd0>
 801849c:	f1b9 0f08 	cmp.w	r9, #8
 80184a0:	d032      	beq.n	8018508 <read_submessage_format+0xb4>
 80184a2:	f1b9 0f06 	cmp.w	r9, #6
 80184a6:	d008      	beq.n	80184ba <read_submessage_format+0x66>
 80184a8:	2201      	movs	r2, #1
 80184aa:	751a      	strb	r2, [r3, #20]
 80184ac:	4631      	mov	r1, r6
 80184ae:	4620      	mov	r0, r4
 80184b0:	f7f6 f960 	bl	800e774 <ucdr_advance_buffer>
 80184b4:	b015      	add	sp, #84	@ 0x54
 80184b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184ba:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80184be:	2d00      	cmp	r5, #0
 80184c0:	d0f2      	beq.n	80184a8 <read_submessage_format+0x54>
 80184c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80184c4:	e9cd 3600 	strd	r3, r6, [sp]
 80184c8:	2306      	movs	r3, #6
 80184ca:	f88d 3016 	strb.w	r3, [sp, #22]
 80184ce:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 80184d2:	9302      	str	r3, [sp, #8]
 80184d4:	463a      	mov	r2, r7
 80184d6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80184da:	4640      	mov	r0, r8
 80184dc:	47a8      	blx	r5
 80184de:	69e3      	ldr	r3, [r4, #28]
 80184e0:	2201      	movs	r2, #1
 80184e2:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d1de      	bne.n	80184a8 <read_submessage_format+0x54>
 80184ea:	e7df      	b.n	80184ac <read_submessage_format+0x58>
 80184ec:	f1b9 0f07 	cmp.w	r9, #7
 80184f0:	d032      	beq.n	8018558 <read_submessage_format+0x104>
 80184f2:	f1b9 0f08 	cmp.w	r9, #8
 80184f6:	d02a      	beq.n	801854e <read_submessage_format+0xfa>
 80184f8:	f1b9 0f06 	cmp.w	r9, #6
 80184fc:	d1d6      	bne.n	80184ac <read_submessage_format+0x58>
 80184fe:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8018502:	2d00      	cmp	r5, #0
 8018504:	d1dd      	bne.n	80184c2 <read_submessage_format+0x6e>
 8018506:	e7d1      	b.n	80184ac <read_submessage_format+0x58>
 8018508:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 801850c:	2a00      	cmp	r2, #0
 801850e:	d0cb      	beq.n	80184a8 <read_submessage_format+0x54>
 8018510:	a906      	add	r1, sp, #24
 8018512:	a80c      	add	r0, sp, #48	@ 0x30
 8018514:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018516:	f7f9 fe2b 	bl	8012170 <uxr_deserialize_SampleIdentity>
 801851a:	bb28      	cbnz	r0, 8018568 <read_submessage_format+0x114>
 801851c:	69e3      	ldr	r3, [r4, #28]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d1c2      	bne.n	80184a8 <read_submessage_format+0x54>
 8018522:	e7c3      	b.n	80184ac <read_submessage_format+0x58>
 8018524:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8018528:	b16a      	cbz	r2, 8018546 <read_submessage_format+0xf2>
 801852a:	a906      	add	r1, sp, #24
 801852c:	a80c      	add	r0, sp, #48	@ 0x30
 801852e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018530:	f7f9 faf8 	bl	8011b24 <uxr_deserialize_BaseObjectRequest>
 8018534:	2800      	cmp	r0, #0
 8018536:	d13a      	bne.n	80185ae <read_submessage_format+0x15a>
 8018538:	68a2      	ldr	r2, [r4, #8]
 801853a:	69e3      	ldr	r3, [r4, #28]
 801853c:	4432      	add	r2, r6
 801853e:	60a2      	str	r2, [r4, #8]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d1b1      	bne.n	80184a8 <read_submessage_format+0x54>
 8018544:	e7b2      	b.n	80184ac <read_submessage_format+0x58>
 8018546:	68a2      	ldr	r2, [r4, #8]
 8018548:	4432      	add	r2, r6
 801854a:	60a2      	str	r2, [r4, #8]
 801854c:	e7ac      	b.n	80184a8 <read_submessage_format+0x54>
 801854e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 8018552:	2b00      	cmp	r3, #0
 8018554:	d1dc      	bne.n	8018510 <read_submessage_format+0xbc>
 8018556:	e7a9      	b.n	80184ac <read_submessage_format+0x58>
 8018558:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 801855c:	2b00      	cmp	r3, #0
 801855e:	d1e4      	bne.n	801852a <read_submessage_format+0xd6>
 8018560:	68a3      	ldr	r3, [r4, #8]
 8018562:	4433      	add	r3, r6
 8018564:	60a3      	str	r3, [r4, #8]
 8018566:	e7a1      	b.n	80184ac <read_submessage_format+0x58>
 8018568:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801856c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801856e:	1a52      	subs	r2, r2, r1
 8018570:	1aed      	subs	r5, r5, r3
 8018572:	a80c      	add	r0, sp, #48	@ 0x30
 8018574:	f7f6 f8ae 	bl	800e6d4 <ucdr_init_buffer>
 8018578:	4435      	add	r5, r6
 801857a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801857e:	a80c      	add	r0, sp, #48	@ 0x30
 8018580:	f7f6 f87c 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 8018584:	b2ad      	uxth	r5, r5
 8018586:	ab0c      	add	r3, sp, #48	@ 0x30
 8018588:	9300      	str	r3, [sp, #0]
 801858a:	9501      	str	r5, [sp, #4]
 801858c:	2108      	movs	r1, #8
 801858e:	f88d 1016 	strb.w	r1, [sp, #22]
 8018592:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8018596:	9102      	str	r1, [sp, #8]
 8018598:	ab06      	add	r3, sp, #24
 801859a:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801859e:	9905      	ldr	r1, [sp, #20]
 80185a0:	463a      	mov	r2, r7
 80185a2:	4640      	mov	r0, r8
 80185a4:	47a8      	blx	r5
 80185a6:	2301      	movs	r3, #1
 80185a8:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80185ac:	e7b6      	b.n	801851c <read_submessage_format+0xc8>
 80185ae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80185b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80185b4:	1a52      	subs	r2, r2, r1
 80185b6:	1aed      	subs	r5, r5, r3
 80185b8:	a80c      	add	r0, sp, #48	@ 0x30
 80185ba:	f7f6 f88b 	bl	800e6d4 <ucdr_init_buffer>
 80185be:	4435      	add	r5, r6
 80185c0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80185c4:	a80c      	add	r0, sp, #48	@ 0x30
 80185c6:	f7f6 f859 	bl	800e67c <ucdr_set_on_full_buffer_callback>
 80185ca:	b2ad      	uxth	r5, r5
 80185cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80185ce:	9300      	str	r3, [sp, #0]
 80185d0:	9501      	str	r5, [sp, #4]
 80185d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80185d6:	2107      	movs	r1, #7
 80185d8:	f88d 1016 	strb.w	r1, [sp, #22]
 80185dc:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 80185e0:	9102      	str	r1, [sp, #8]
 80185e2:	ba5b      	rev16	r3, r3
 80185e4:	b29b      	uxth	r3, r3
 80185e6:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 80185ea:	9905      	ldr	r1, [sp, #20]
 80185ec:	463a      	mov	r2, r7
 80185ee:	4640      	mov	r0, r8
 80185f0:	47a8      	blx	r5
 80185f2:	2301      	movs	r3, #1
 80185f4:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80185f8:	e79e      	b.n	8018538 <read_submessage_format+0xe4>
 80185fa:	bf00      	nop

080185fc <uxr_seq_num_add>:
 80185fc:	4408      	add	r0, r1
 80185fe:	b280      	uxth	r0, r0
 8018600:	4770      	bx	lr
 8018602:	bf00      	nop

08018604 <uxr_seq_num_sub>:
 8018604:	1a40      	subs	r0, r0, r1
 8018606:	b280      	uxth	r0, r0
 8018608:	4770      	bx	lr
 801860a:	bf00      	nop

0801860c <uxr_seq_num_cmp>:
 801860c:	4288      	cmp	r0, r1
 801860e:	d010      	beq.n	8018632 <uxr_seq_num_cmp+0x26>
 8018610:	d207      	bcs.n	8018622 <uxr_seq_num_cmp+0x16>
 8018612:	1a09      	subs	r1, r1, r0
 8018614:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018618:	bfb4      	ite	lt
 801861a:	f04f 30ff 	movlt.w	r0, #4294967295
 801861e:	2001      	movge	r0, #1
 8018620:	4770      	bx	lr
 8018622:	1a41      	subs	r1, r0, r1
 8018624:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018628:	bfcc      	ite	gt
 801862a:	f04f 30ff 	movgt.w	r0, #4294967295
 801862e:	2001      	movle	r0, #1
 8018630:	4770      	bx	lr
 8018632:	2000      	movs	r0, #0
 8018634:	4770      	bx	lr
 8018636:	bf00      	nop

08018638 <rcl_get_automatic_discovery_range>:
 8018638:	b530      	push	{r4, r5, lr}
 801863a:	b083      	sub	sp, #12
 801863c:	2300      	movs	r3, #0
 801863e:	9301      	str	r3, [sp, #4]
 8018640:	b1c0      	cbz	r0, 8018674 <rcl_get_automatic_discovery_range+0x3c>
 8018642:	4604      	mov	r4, r0
 8018644:	a901      	add	r1, sp, #4
 8018646:	4818      	ldr	r0, [pc, #96]	@ (80186a8 <rcl_get_automatic_discovery_range+0x70>)
 8018648:	f7fc fe04 	bl	8015254 <rcutils_get_env>
 801864c:	b110      	cbz	r0, 8018654 <rcl_get_automatic_discovery_range+0x1c>
 801864e:	2001      	movs	r0, #1
 8018650:	b003      	add	sp, #12
 8018652:	bd30      	pop	{r4, r5, pc}
 8018654:	9d01      	ldr	r5, [sp, #4]
 8018656:	782b      	ldrb	r3, [r5, #0]
 8018658:	b923      	cbnz	r3, 8018664 <rcl_get_automatic_discovery_range+0x2c>
 801865a:	2303      	movs	r3, #3
 801865c:	7023      	strb	r3, [r4, #0]
 801865e:	2000      	movs	r0, #0
 8018660:	b003      	add	sp, #12
 8018662:	bd30      	pop	{r4, r5, pc}
 8018664:	4911      	ldr	r1, [pc, #68]	@ (80186ac <rcl_get_automatic_discovery_range+0x74>)
 8018666:	4628      	mov	r0, r5
 8018668:	f7e7 fdd2 	bl	8000210 <strcmp>
 801866c:	b928      	cbnz	r0, 801867a <rcl_get_automatic_discovery_range+0x42>
 801866e:	2301      	movs	r3, #1
 8018670:	7023      	strb	r3, [r4, #0]
 8018672:	e7f4      	b.n	801865e <rcl_get_automatic_discovery_range+0x26>
 8018674:	200b      	movs	r0, #11
 8018676:	b003      	add	sp, #12
 8018678:	bd30      	pop	{r4, r5, pc}
 801867a:	490d      	ldr	r1, [pc, #52]	@ (80186b0 <rcl_get_automatic_discovery_range+0x78>)
 801867c:	4628      	mov	r0, r5
 801867e:	f7e7 fdc7 	bl	8000210 <strcmp>
 8018682:	b168      	cbz	r0, 80186a0 <rcl_get_automatic_discovery_range+0x68>
 8018684:	490b      	ldr	r1, [pc, #44]	@ (80186b4 <rcl_get_automatic_discovery_range+0x7c>)
 8018686:	4628      	mov	r0, r5
 8018688:	f7e7 fdc2 	bl	8000210 <strcmp>
 801868c:	2800      	cmp	r0, #0
 801868e:	d0e4      	beq.n	801865a <rcl_get_automatic_discovery_range+0x22>
 8018690:	4909      	ldr	r1, [pc, #36]	@ (80186b8 <rcl_get_automatic_discovery_range+0x80>)
 8018692:	4628      	mov	r0, r5
 8018694:	f7e7 fdbc 	bl	8000210 <strcmp>
 8018698:	b910      	cbnz	r0, 80186a0 <rcl_get_automatic_discovery_range+0x68>
 801869a:	2304      	movs	r3, #4
 801869c:	7023      	strb	r3, [r4, #0]
 801869e:	e7de      	b.n	801865e <rcl_get_automatic_discovery_range+0x26>
 80186a0:	2302      	movs	r3, #2
 80186a2:	7023      	strb	r3, [r4, #0]
 80186a4:	e7db      	b.n	801865e <rcl_get_automatic_discovery_range+0x26>
 80186a6:	bf00      	nop
 80186a8:	0801b514 	.word	0x0801b514
 80186ac:	0801b534 	.word	0x0801b534
 80186b0:	0801b538 	.word	0x0801b538
 80186b4:	0801b544 	.word	0x0801b544
 80186b8:	0801b54c 	.word	0x0801b54c

080186bc <rcl_automatic_discovery_range_to_string>:
 80186bc:	2804      	cmp	r0, #4
 80186be:	bf9a      	itte	ls
 80186c0:	4b02      	ldrls	r3, [pc, #8]	@ (80186cc <rcl_automatic_discovery_range_to_string+0x10>)
 80186c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80186c6:	2000      	movhi	r0, #0
 80186c8:	4770      	bx	lr
 80186ca:	bf00      	nop
 80186cc:	0801be08 	.word	0x0801be08

080186d0 <rcl_get_discovery_static_peers>:
 80186d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186d4:	b08c      	sub	sp, #48	@ 0x30
 80186d6:	2300      	movs	r3, #0
 80186d8:	9304      	str	r3, [sp, #16]
 80186da:	2800      	cmp	r0, #0
 80186dc:	d04e      	beq.n	801877c <rcl_get_discovery_static_peers+0xac>
 80186de:	460d      	mov	r5, r1
 80186e0:	2900      	cmp	r1, #0
 80186e2:	d04b      	beq.n	801877c <rcl_get_discovery_static_peers+0xac>
 80186e4:	4604      	mov	r4, r0
 80186e6:	a904      	add	r1, sp, #16
 80186e8:	482d      	ldr	r0, [pc, #180]	@ (80187a0 <rcl_get_discovery_static_peers+0xd0>)
 80186ea:	f7fc fdb3 	bl	8015254 <rcutils_get_env>
 80186ee:	b118      	cbz	r0, 80186f8 <rcl_get_discovery_static_peers+0x28>
 80186f0:	2001      	movs	r0, #1
 80186f2:	b00c      	add	sp, #48	@ 0x30
 80186f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186f8:	9b04      	ldr	r3, [sp, #16]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d0f8      	beq.n	80186f0 <rcl_get_discovery_static_peers+0x20>
 80186fe:	af05      	add	r7, sp, #20
 8018700:	4638      	mov	r0, r7
 8018702:	f000 fc7f 	bl	8019004 <rcutils_get_zero_initialized_string_array>
 8018706:	f105 0308 	add.w	r3, r5, #8
 801870a:	9703      	str	r7, [sp, #12]
 801870c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018710:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018714:	9804      	ldr	r0, [sp, #16]
 8018716:	e895 000c 	ldmia.w	r5, {r2, r3}
 801871a:	213b      	movs	r1, #59	@ 0x3b
 801871c:	f000 fbc2 	bl	8018ea4 <rcutils_split>
 8018720:	2800      	cmp	r0, #0
 8018722:	d1e5      	bne.n	80186f0 <rcl_get_discovery_static_peers+0x20>
 8018724:	9905      	ldr	r1, [sp, #20]
 8018726:	462a      	mov	r2, r5
 8018728:	4620      	mov	r0, r4
 801872a:	f000 fcc3 	bl	80190b4 <rmw_discovery_options_init>
 801872e:	4606      	mov	r6, r0
 8018730:	bb90      	cbnz	r0, 8018798 <rcl_get_discovery_static_peers+0xc8>
 8018732:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018736:	f1b9 0f00 	cmp.w	r9, #0
 801873a:	d026      	beq.n	801878a <rcl_get_discovery_static_peers+0xba>
 801873c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018740:	4680      	mov	r8, r0
 8018742:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8018746:	4628      	mov	r0, r5
 8018748:	f7e7 fdc2 	bl	80002d0 <strlen>
 801874c:	28ff      	cmp	r0, #255	@ 0xff
 801874e:	4629      	mov	r1, r5
 8018750:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8018754:	d816      	bhi.n	8018784 <rcl_get_discovery_static_peers+0xb4>
 8018756:	6860      	ldr	r0, [r4, #4]
 8018758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801875c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8018760:	f001 fb93 	bl	8019e8a <strncpy>
 8018764:	6863      	ldr	r3, [r4, #4]
 8018766:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801876a:	3601      	adds	r6, #1
 801876c:	442b      	add	r3, r5
 801876e:	454e      	cmp	r6, r9
 8018770:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8018774:	d209      	bcs.n	801878a <rcl_get_discovery_static_peers+0xba>
 8018776:	f8dd a018 	ldr.w	sl, [sp, #24]
 801877a:	e7e2      	b.n	8018742 <rcl_get_discovery_static_peers+0x72>
 801877c:	200b      	movs	r0, #11
 801877e:	b00c      	add	sp, #48	@ 0x30
 8018780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018784:	3601      	adds	r6, #1
 8018786:	454e      	cmp	r6, r9
 8018788:	d3db      	bcc.n	8018742 <rcl_get_discovery_static_peers+0x72>
 801878a:	4638      	mov	r0, r7
 801878c:	f000 fc6c 	bl	8019068 <rcutils_string_array_fini>
 8018790:	3800      	subs	r0, #0
 8018792:	bf18      	it	ne
 8018794:	2001      	movne	r0, #1
 8018796:	e7ac      	b.n	80186f2 <rcl_get_discovery_static_peers+0x22>
 8018798:	f7f9 fde4 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 801879c:	e7a9      	b.n	80186f2 <rcl_get_discovery_static_peers+0x22>
 801879e:	bf00      	nop
 80187a0:	0801b55c 	.word	0x0801b55c

080187a4 <rcl_get_default_domain_id>:
 80187a4:	b530      	push	{r4, r5, lr}
 80187a6:	b083      	sub	sp, #12
 80187a8:	2300      	movs	r3, #0
 80187aa:	9300      	str	r3, [sp, #0]
 80187ac:	b1f0      	cbz	r0, 80187ec <rcl_get_default_domain_id+0x48>
 80187ae:	4604      	mov	r4, r0
 80187b0:	4669      	mov	r1, sp
 80187b2:	4812      	ldr	r0, [pc, #72]	@ (80187fc <rcl_get_default_domain_id+0x58>)
 80187b4:	f7fc fd4e 	bl	8015254 <rcutils_get_env>
 80187b8:	4602      	mov	r2, r0
 80187ba:	b108      	cbz	r0, 80187c0 <rcl_get_default_domain_id+0x1c>
 80187bc:	2001      	movs	r0, #1
 80187be:	e004      	b.n	80187ca <rcl_get_default_domain_id+0x26>
 80187c0:	9800      	ldr	r0, [sp, #0]
 80187c2:	b108      	cbz	r0, 80187c8 <rcl_get_default_domain_id+0x24>
 80187c4:	7803      	ldrb	r3, [r0, #0]
 80187c6:	b913      	cbnz	r3, 80187ce <rcl_get_default_domain_id+0x2a>
 80187c8:	2000      	movs	r0, #0
 80187ca:	b003      	add	sp, #12
 80187cc:	bd30      	pop	{r4, r5, pc}
 80187ce:	a901      	add	r1, sp, #4
 80187d0:	9201      	str	r2, [sp, #4]
 80187d2:	f001 f899 	bl	8019908 <strtoul>
 80187d6:	4605      	mov	r5, r0
 80187d8:	b158      	cbz	r0, 80187f2 <rcl_get_default_domain_id+0x4e>
 80187da:	1c43      	adds	r3, r0, #1
 80187dc:	d104      	bne.n	80187e8 <rcl_get_default_domain_id+0x44>
 80187de:	f001 fbd3 	bl	8019f88 <__errno>
 80187e2:	6803      	ldr	r3, [r0, #0]
 80187e4:	2b22      	cmp	r3, #34	@ 0x22
 80187e6:	d0e9      	beq.n	80187bc <rcl_get_default_domain_id+0x18>
 80187e8:	6025      	str	r5, [r4, #0]
 80187ea:	e7ed      	b.n	80187c8 <rcl_get_default_domain_id+0x24>
 80187ec:	200b      	movs	r0, #11
 80187ee:	b003      	add	sp, #12
 80187f0:	bd30      	pop	{r4, r5, pc}
 80187f2:	9b01      	ldr	r3, [sp, #4]
 80187f4:	781b      	ldrb	r3, [r3, #0]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d0f6      	beq.n	80187e8 <rcl_get_default_domain_id+0x44>
 80187fa:	e7df      	b.n	80187bc <rcl_get_default_domain_id+0x18>
 80187fc:	0801b63c 	.word	0x0801b63c

08018800 <rcl_expand_topic_name>:
 8018800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018804:	b08b      	sub	sp, #44	@ 0x2c
 8018806:	9306      	str	r3, [sp, #24]
 8018808:	2800      	cmp	r0, #0
 801880a:	f000 80ad 	beq.w	8018968 <rcl_expand_topic_name+0x168>
 801880e:	460e      	mov	r6, r1
 8018810:	2900      	cmp	r1, #0
 8018812:	f000 80a9 	beq.w	8018968 <rcl_expand_topic_name+0x168>
 8018816:	4617      	mov	r7, r2
 8018818:	2a00      	cmp	r2, #0
 801881a:	f000 80a5 	beq.w	8018968 <rcl_expand_topic_name+0x168>
 801881e:	2b00      	cmp	r3, #0
 8018820:	f000 80a2 	beq.w	8018968 <rcl_expand_topic_name+0x168>
 8018824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018826:	2b00      	cmp	r3, #0
 8018828:	f000 809e 	beq.w	8018968 <rcl_expand_topic_name+0x168>
 801882c:	2200      	movs	r2, #0
 801882e:	a909      	add	r1, sp, #36	@ 0x24
 8018830:	4680      	mov	r8, r0
 8018832:	f000 fa45 	bl	8018cc0 <rcl_validate_topic_name>
 8018836:	4605      	mov	r5, r0
 8018838:	2800      	cmp	r0, #0
 801883a:	f040 8096 	bne.w	801896a <rcl_expand_topic_name+0x16a>
 801883e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018840:	2b00      	cmp	r3, #0
 8018842:	f040 809a 	bne.w	801897a <rcl_expand_topic_name+0x17a>
 8018846:	4602      	mov	r2, r0
 8018848:	a909      	add	r1, sp, #36	@ 0x24
 801884a:	4630      	mov	r0, r6
 801884c:	f7fd f95a 	bl	8015b04 <rmw_validate_node_name>
 8018850:	2800      	cmp	r0, #0
 8018852:	f040 808e 	bne.w	8018972 <rcl_expand_topic_name+0x172>
 8018856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018858:	2a00      	cmp	r2, #0
 801885a:	f040 8093 	bne.w	8018984 <rcl_expand_topic_name+0x184>
 801885e:	a909      	add	r1, sp, #36	@ 0x24
 8018860:	4638      	mov	r0, r7
 8018862:	f7fd f931 	bl	8015ac8 <rmw_validate_namespace>
 8018866:	2800      	cmp	r0, #0
 8018868:	f040 8083 	bne.w	8018972 <rcl_expand_topic_name+0x172>
 801886c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801886e:	2d00      	cmp	r5, #0
 8018870:	f040 80f5 	bne.w	8018a5e <rcl_expand_topic_name+0x25e>
 8018874:	217b      	movs	r1, #123	@ 0x7b
 8018876:	4640      	mov	r0, r8
 8018878:	f001 fae8 	bl	8019e4c <strchr>
 801887c:	f898 3000 	ldrb.w	r3, [r8]
 8018880:	2b2f      	cmp	r3, #47	@ 0x2f
 8018882:	4604      	mov	r4, r0
 8018884:	f000 809f 	beq.w	80189c6 <rcl_expand_topic_name+0x1c6>
 8018888:	2b7e      	cmp	r3, #126	@ 0x7e
 801888a:	f040 80ea 	bne.w	8018a62 <rcl_expand_topic_name+0x262>
 801888e:	4638      	mov	r0, r7
 8018890:	f7e7 fd1e 	bl	80002d0 <strlen>
 8018894:	4a86      	ldr	r2, [pc, #536]	@ (8018ab0 <rcl_expand_topic_name+0x2b0>)
 8018896:	4b87      	ldr	r3, [pc, #540]	@ (8018ab4 <rcl_expand_topic_name+0x2b4>)
 8018898:	2801      	cmp	r0, #1
 801889a:	bf08      	it	eq
 801889c:	4613      	moveq	r3, r2
 801889e:	9302      	str	r3, [sp, #8]
 80188a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80188a2:	9300      	str	r3, [sp, #0]
 80188a4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80188a8:	f108 0301 	add.w	r3, r8, #1
 80188ac:	9305      	str	r3, [sp, #20]
 80188ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80188b2:	9301      	str	r3, [sp, #4]
 80188b4:	ab14      	add	r3, sp, #80	@ 0x50
 80188b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80188b8:	f7fc fce4 	bl	8015284 <rcutils_format_string_limit>
 80188bc:	4682      	mov	sl, r0
 80188be:	2800      	cmp	r0, #0
 80188c0:	f000 80e1 	beq.w	8018a86 <rcl_expand_topic_name+0x286>
 80188c4:	2c00      	cmp	r4, #0
 80188c6:	f000 8085 	beq.w	80189d4 <rcl_expand_topic_name+0x1d4>
 80188ca:	217b      	movs	r1, #123	@ 0x7b
 80188cc:	f001 fabe 	bl	8019e4c <strchr>
 80188d0:	46d1      	mov	r9, sl
 80188d2:	4604      	mov	r4, r0
 80188d4:	9507      	str	r5, [sp, #28]
 80188d6:	464d      	mov	r5, r9
 80188d8:	2c00      	cmp	r4, #0
 80188da:	f000 80a1 	beq.w	8018a20 <rcl_expand_topic_name+0x220>
 80188de:	217d      	movs	r1, #125	@ 0x7d
 80188e0:	4628      	mov	r0, r5
 80188e2:	f001 fab3 	bl	8019e4c <strchr>
 80188e6:	eba0 0904 	sub.w	r9, r0, r4
 80188ea:	f109 0b01 	add.w	fp, r9, #1
 80188ee:	4872      	ldr	r0, [pc, #456]	@ (8018ab8 <rcl_expand_topic_name+0x2b8>)
 80188f0:	465a      	mov	r2, fp
 80188f2:	4621      	mov	r1, r4
 80188f4:	f001 fab7 	bl	8019e66 <strncmp>
 80188f8:	2800      	cmp	r0, #0
 80188fa:	d069      	beq.n	80189d0 <rcl_expand_topic_name+0x1d0>
 80188fc:	486f      	ldr	r0, [pc, #444]	@ (8018abc <rcl_expand_topic_name+0x2bc>)
 80188fe:	465a      	mov	r2, fp
 8018900:	4621      	mov	r1, r4
 8018902:	f001 fab0 	bl	8019e66 <strncmp>
 8018906:	b130      	cbz	r0, 8018916 <rcl_expand_topic_name+0x116>
 8018908:	486d      	ldr	r0, [pc, #436]	@ (8018ac0 <rcl_expand_topic_name+0x2c0>)
 801890a:	465a      	mov	r2, fp
 801890c:	4621      	mov	r1, r4
 801890e:	f001 faaa 	bl	8019e66 <strncmp>
 8018912:	2800      	cmp	r0, #0
 8018914:	d138      	bne.n	8018988 <rcl_expand_topic_name+0x188>
 8018916:	46b9      	mov	r9, r7
 8018918:	ab16      	add	r3, sp, #88	@ 0x58
 801891a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801891e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018922:	ab14      	add	r3, sp, #80	@ 0x50
 8018924:	4620      	mov	r0, r4
 8018926:	cb0c      	ldmia	r3, {r2, r3}
 8018928:	4659      	mov	r1, fp
 801892a:	f7fc fdff 	bl	801552c <rcutils_strndup>
 801892e:	4604      	mov	r4, r0
 8018930:	2800      	cmp	r0, #0
 8018932:	f000 8099 	beq.w	8018a68 <rcl_expand_topic_name+0x268>
 8018936:	464a      	mov	r2, r9
 8018938:	4628      	mov	r0, r5
 801893a:	ab14      	add	r3, sp, #80	@ 0x50
 801893c:	4621      	mov	r1, r4
 801893e:	f7fc fcdb 	bl	80152f8 <rcutils_repl_str>
 8018942:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018944:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018946:	4605      	mov	r5, r0
 8018948:	4620      	mov	r0, r4
 801894a:	4798      	blx	r3
 801894c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801894e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018950:	4650      	mov	r0, sl
 8018952:	4798      	blx	r3
 8018954:	2d00      	cmp	r5, #0
 8018956:	f000 8091 	beq.w	8018a7c <rcl_expand_topic_name+0x27c>
 801895a:	217b      	movs	r1, #123	@ 0x7b
 801895c:	4628      	mov	r0, r5
 801895e:	f001 fa75 	bl	8019e4c <strchr>
 8018962:	46aa      	mov	sl, r5
 8018964:	4604      	mov	r4, r0
 8018966:	e7b7      	b.n	80188d8 <rcl_expand_topic_name+0xd8>
 8018968:	250b      	movs	r5, #11
 801896a:	4628      	mov	r0, r5
 801896c:	b00b      	add	sp, #44	@ 0x2c
 801896e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018972:	f7f9 fcf7 	bl	8012364 <rcl_convert_rmw_ret_to_rcl_ret>
 8018976:	4605      	mov	r5, r0
 8018978:	e7f7      	b.n	801896a <rcl_expand_topic_name+0x16a>
 801897a:	2567      	movs	r5, #103	@ 0x67
 801897c:	4628      	mov	r0, r5
 801897e:	b00b      	add	sp, #44	@ 0x2c
 8018980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018984:	25c9      	movs	r5, #201	@ 0xc9
 8018986:	e7f0      	b.n	801896a <rcl_expand_topic_name+0x16a>
 8018988:	f109 32ff 	add.w	r2, r9, #4294967295
 801898c:	9806      	ldr	r0, [sp, #24]
 801898e:	1c61      	adds	r1, r4, #1
 8018990:	f7fc fee8 	bl	8015764 <rcutils_string_map_getn>
 8018994:	4681      	mov	r9, r0
 8018996:	2800      	cmp	r0, #0
 8018998:	d1be      	bne.n	8018918 <rcl_expand_topic_name+0x118>
 801899a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801899c:	ab16      	add	r3, sp, #88	@ 0x58
 801899e:	6010      	str	r0, [r2, #0]
 80189a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80189a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80189a8:	ab14      	add	r3, sp, #80	@ 0x50
 80189aa:	cb0c      	ldmia	r3, {r2, r3}
 80189ac:	4659      	mov	r1, fp
 80189ae:	4620      	mov	r0, r4
 80189b0:	f7fc fdbc 	bl	801552c <rcutils_strndup>
 80189b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189b6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189b8:	4798      	blx	r3
 80189ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189bc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189be:	4650      	mov	r0, sl
 80189c0:	4798      	blx	r3
 80189c2:	2569      	movs	r5, #105	@ 0x69
 80189c4:	e7d1      	b.n	801896a <rcl_expand_topic_name+0x16a>
 80189c6:	2800      	cmp	r0, #0
 80189c8:	d061      	beq.n	8018a8e <rcl_expand_topic_name+0x28e>
 80189ca:	46c1      	mov	r9, r8
 80189cc:	46aa      	mov	sl, r5
 80189ce:	e781      	b.n	80188d4 <rcl_expand_topic_name+0xd4>
 80189d0:	46b1      	mov	r9, r6
 80189d2:	e7a1      	b.n	8018918 <rcl_expand_topic_name+0x118>
 80189d4:	f89a 3000 	ldrb.w	r3, [sl]
 80189d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80189da:	d01d      	beq.n	8018a18 <rcl_expand_topic_name+0x218>
 80189dc:	4638      	mov	r0, r7
 80189de:	f7e7 fc77 	bl	80002d0 <strlen>
 80189e2:	4a38      	ldr	r2, [pc, #224]	@ (8018ac4 <rcl_expand_topic_name+0x2c4>)
 80189e4:	4b38      	ldr	r3, [pc, #224]	@ (8018ac8 <rcl_expand_topic_name+0x2c8>)
 80189e6:	f8cd a010 	str.w	sl, [sp, #16]
 80189ea:	2801      	cmp	r0, #1
 80189ec:	bf18      	it	ne
 80189ee:	4613      	movne	r3, r2
 80189f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80189f4:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80189f8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80189fa:	9703      	str	r7, [sp, #12]
 80189fc:	9200      	str	r2, [sp, #0]
 80189fe:	ab14      	add	r3, sp, #80	@ 0x50
 8018a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018a02:	f7fc fc3f 	bl	8015284 <rcutils_format_string_limit>
 8018a06:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a08:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	4650      	mov	r0, sl
 8018a0e:	4798      	blx	r3
 8018a10:	46a2      	mov	sl, r4
 8018a12:	4653      	mov	r3, sl
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d036      	beq.n	8018a86 <rcl_expand_topic_name+0x286>
 8018a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a1a:	f8c3 a000 	str.w	sl, [r3]
 8018a1e:	e7a4      	b.n	801896a <rcl_expand_topic_name+0x16a>
 8018a20:	4653      	mov	r3, sl
 8018a22:	9d07      	ldr	r5, [sp, #28]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d1d5      	bne.n	80189d4 <rcl_expand_topic_name+0x1d4>
 8018a28:	f898 3000 	ldrb.w	r3, [r8]
 8018a2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8018a2e:	d0f3      	beq.n	8018a18 <rcl_expand_topic_name+0x218>
 8018a30:	4638      	mov	r0, r7
 8018a32:	f7e7 fc4d 	bl	80002d0 <strlen>
 8018a36:	4a23      	ldr	r2, [pc, #140]	@ (8018ac4 <rcl_expand_topic_name+0x2c4>)
 8018a38:	4b23      	ldr	r3, [pc, #140]	@ (8018ac8 <rcl_expand_topic_name+0x2c8>)
 8018a3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8018a3e:	2801      	cmp	r0, #1
 8018a40:	bf18      	it	ne
 8018a42:	4613      	movne	r3, r2
 8018a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018a48:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018a4c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018a4e:	9703      	str	r7, [sp, #12]
 8018a50:	9200      	str	r2, [sp, #0]
 8018a52:	ab14      	add	r3, sp, #80	@ 0x50
 8018a54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018a56:	f7fc fc15 	bl	8015284 <rcutils_format_string_limit>
 8018a5a:	4682      	mov	sl, r0
 8018a5c:	e7d9      	b.n	8018a12 <rcl_expand_topic_name+0x212>
 8018a5e:	25ca      	movs	r5, #202	@ 0xca
 8018a60:	e783      	b.n	801896a <rcl_expand_topic_name+0x16a>
 8018a62:	2800      	cmp	r0, #0
 8018a64:	d1b1      	bne.n	80189ca <rcl_expand_topic_name+0x1ca>
 8018a66:	e7e3      	b.n	8018a30 <rcl_expand_topic_name+0x230>
 8018a68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a6a:	6018      	str	r0, [r3, #0]
 8018a6c:	f7f3 fae8 	bl	800c040 <rcutils_reset_error>
 8018a70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a72:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a74:	4650      	mov	r0, sl
 8018a76:	4798      	blx	r3
 8018a78:	250a      	movs	r5, #10
 8018a7a:	e776      	b.n	801896a <rcl_expand_topic_name+0x16a>
 8018a7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a7e:	601d      	str	r5, [r3, #0]
 8018a80:	f7f3 fade 	bl	800c040 <rcutils_reset_error>
 8018a84:	e7f8      	b.n	8018a78 <rcl_expand_topic_name+0x278>
 8018a86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018a88:	2300      	movs	r3, #0
 8018a8a:	6013      	str	r3, [r2, #0]
 8018a8c:	e7f4      	b.n	8018a78 <rcl_expand_topic_name+0x278>
 8018a8e:	ab17      	add	r3, sp, #92	@ 0x5c
 8018a90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018a94:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018a98:	ab14      	add	r3, sp, #80	@ 0x50
 8018a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018a9c:	4640      	mov	r0, r8
 8018a9e:	f7fc fd0f 	bl	80154c0 <rcutils_strdup>
 8018aa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018aa4:	6018      	str	r0, [r3, #0]
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	f47f af5f 	bne.w	801896a <rcl_expand_topic_name+0x16a>
 8018aac:	e7e8      	b.n	8018a80 <rcl_expand_topic_name+0x280>
 8018aae:	bf00      	nop
 8018ab0:	0801af38 	.word	0x0801af38
 8018ab4:	0801b64c 	.word	0x0801b64c
 8018ab8:	0801b654 	.word	0x0801b654
 8018abc:	0801b65c 	.word	0x0801b65c
 8018ac0:	0801b664 	.word	0x0801b664
 8018ac4:	0801b178 	.word	0x0801b178
 8018ac8:	0801af48 	.word	0x0801af48

08018acc <rcl_get_default_topic_name_substitutions>:
 8018acc:	2800      	cmp	r0, #0
 8018ace:	bf0c      	ite	eq
 8018ad0:	200b      	moveq	r0, #11
 8018ad2:	2000      	movne	r0, #0
 8018ad4:	4770      	bx	lr
 8018ad6:	bf00      	nop

08018ad8 <rcl_get_zero_initialized_guard_condition>:
 8018ad8:	4a03      	ldr	r2, [pc, #12]	@ (8018ae8 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018ada:	4603      	mov	r3, r0
 8018adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ae0:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	4770      	bx	lr
 8018ae8:	0801be1c 	.word	0x0801be1c

08018aec <rcl_guard_condition_init>:
 8018aec:	b082      	sub	sp, #8
 8018aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018af0:	b087      	sub	sp, #28
 8018af2:	ac0c      	add	r4, sp, #48	@ 0x30
 8018af4:	e884 000c 	stmia.w	r4, {r2, r3}
 8018af8:	46a6      	mov	lr, r4
 8018afa:	460d      	mov	r5, r1
 8018afc:	4604      	mov	r4, r0
 8018afe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b02:	f10d 0c04 	add.w	ip, sp, #4
 8018b06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b0a:	f8de 3000 	ldr.w	r3, [lr]
 8018b0e:	f8cc 3000 	str.w	r3, [ip]
 8018b12:	a801      	add	r0, sp, #4
 8018b14:	f7f3 fa68 	bl	800bfe8 <rcutils_allocator_is_valid>
 8018b18:	b338      	cbz	r0, 8018b6a <rcl_guard_condition_init+0x7e>
 8018b1a:	b334      	cbz	r4, 8018b6a <rcl_guard_condition_init+0x7e>
 8018b1c:	6866      	ldr	r6, [r4, #4]
 8018b1e:	b9ee      	cbnz	r6, 8018b5c <rcl_guard_condition_init+0x70>
 8018b20:	b31d      	cbz	r5, 8018b6a <rcl_guard_condition_init+0x7e>
 8018b22:	4628      	mov	r0, r5
 8018b24:	f7f9 fc38 	bl	8012398 <rcl_context_is_valid>
 8018b28:	b308      	cbz	r0, 8018b6e <rcl_guard_condition_init+0x82>
 8018b2a:	9b01      	ldr	r3, [sp, #4]
 8018b2c:	9905      	ldr	r1, [sp, #20]
 8018b2e:	201c      	movs	r0, #28
 8018b30:	4798      	blx	r3
 8018b32:	4607      	mov	r7, r0
 8018b34:	6060      	str	r0, [r4, #4]
 8018b36:	b310      	cbz	r0, 8018b7e <rcl_guard_condition_init+0x92>
 8018b38:	6828      	ldr	r0, [r5, #0]
 8018b3a:	3028      	adds	r0, #40	@ 0x28
 8018b3c:	f000 fc06 	bl	801934c <rmw_create_guard_condition>
 8018b40:	6038      	str	r0, [r7, #0]
 8018b42:	6860      	ldr	r0, [r4, #4]
 8018b44:	6807      	ldr	r7, [r0, #0]
 8018b46:	b1a7      	cbz	r7, 8018b72 <rcl_guard_condition_init+0x86>
 8018b48:	2301      	movs	r3, #1
 8018b4a:	ac01      	add	r4, sp, #4
 8018b4c:	7103      	strb	r3, [r0, #4]
 8018b4e:	f100 0708 	add.w	r7, r0, #8
 8018b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b54:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018b56:	6823      	ldr	r3, [r4, #0]
 8018b58:	603b      	str	r3, [r7, #0]
 8018b5a:	e000      	b.n	8018b5e <rcl_guard_condition_init+0x72>
 8018b5c:	2664      	movs	r6, #100	@ 0x64
 8018b5e:	4630      	mov	r0, r6
 8018b60:	b007      	add	sp, #28
 8018b62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018b66:	b002      	add	sp, #8
 8018b68:	4770      	bx	lr
 8018b6a:	260b      	movs	r6, #11
 8018b6c:	e7f7      	b.n	8018b5e <rcl_guard_condition_init+0x72>
 8018b6e:	2665      	movs	r6, #101	@ 0x65
 8018b70:	e7f5      	b.n	8018b5e <rcl_guard_condition_init+0x72>
 8018b72:	9b02      	ldr	r3, [sp, #8]
 8018b74:	9905      	ldr	r1, [sp, #20]
 8018b76:	4798      	blx	r3
 8018b78:	2601      	movs	r6, #1
 8018b7a:	6067      	str	r7, [r4, #4]
 8018b7c:	e7ef      	b.n	8018b5e <rcl_guard_condition_init+0x72>
 8018b7e:	260a      	movs	r6, #10
 8018b80:	e7ed      	b.n	8018b5e <rcl_guard_condition_init+0x72>
 8018b82:	bf00      	nop

08018b84 <rcl_guard_condition_init_from_rmw>:
 8018b84:	b082      	sub	sp, #8
 8018b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b8a:	b086      	sub	sp, #24
 8018b8c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018b90:	4604      	mov	r4, r0
 8018b92:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018b96:	460e      	mov	r6, r1
 8018b98:	4617      	mov	r7, r2
 8018b9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018b9e:	f10d 0e04 	add.w	lr, sp, #4
 8018ba2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8018baa:	f8ce 3000 	str.w	r3, [lr]
 8018bae:	a801      	add	r0, sp, #4
 8018bb0:	f7f3 fa1a 	bl	800bfe8 <rcutils_allocator_is_valid>
 8018bb4:	b350      	cbz	r0, 8018c0c <rcl_guard_condition_init_from_rmw+0x88>
 8018bb6:	b34c      	cbz	r4, 8018c0c <rcl_guard_condition_init_from_rmw+0x88>
 8018bb8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018bbc:	f1b8 0f00 	cmp.w	r8, #0
 8018bc0:	d11e      	bne.n	8018c00 <rcl_guard_condition_init_from_rmw+0x7c>
 8018bc2:	b31f      	cbz	r7, 8018c0c <rcl_guard_condition_init_from_rmw+0x88>
 8018bc4:	4638      	mov	r0, r7
 8018bc6:	f7f9 fbe7 	bl	8012398 <rcl_context_is_valid>
 8018bca:	b328      	cbz	r0, 8018c18 <rcl_guard_condition_init_from_rmw+0x94>
 8018bcc:	9b01      	ldr	r3, [sp, #4]
 8018bce:	9905      	ldr	r1, [sp, #20]
 8018bd0:	201c      	movs	r0, #28
 8018bd2:	4798      	blx	r3
 8018bd4:	4605      	mov	r5, r0
 8018bd6:	6060      	str	r0, [r4, #4]
 8018bd8:	b358      	cbz	r0, 8018c32 <rcl_guard_condition_init_from_rmw+0xae>
 8018bda:	b1fe      	cbz	r6, 8018c1c <rcl_guard_condition_init_from_rmw+0x98>
 8018bdc:	6006      	str	r6, [r0, #0]
 8018bde:	f880 8004 	strb.w	r8, [r0, #4]
 8018be2:	ac01      	add	r4, sp, #4
 8018be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018be6:	f105 0c08 	add.w	ip, r5, #8
 8018bea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018bee:	6823      	ldr	r3, [r4, #0]
 8018bf0:	f8cc 3000 	str.w	r3, [ip]
 8018bf4:	2000      	movs	r0, #0
 8018bf6:	b006      	add	sp, #24
 8018bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bfc:	b002      	add	sp, #8
 8018bfe:	4770      	bx	lr
 8018c00:	2064      	movs	r0, #100	@ 0x64
 8018c02:	b006      	add	sp, #24
 8018c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c08:	b002      	add	sp, #8
 8018c0a:	4770      	bx	lr
 8018c0c:	200b      	movs	r0, #11
 8018c0e:	b006      	add	sp, #24
 8018c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c14:	b002      	add	sp, #8
 8018c16:	4770      	bx	lr
 8018c18:	2065      	movs	r0, #101	@ 0x65
 8018c1a:	e7f2      	b.n	8018c02 <rcl_guard_condition_init_from_rmw+0x7e>
 8018c1c:	6838      	ldr	r0, [r7, #0]
 8018c1e:	3028      	adds	r0, #40	@ 0x28
 8018c20:	f000 fb94 	bl	801934c <rmw_create_guard_condition>
 8018c24:	6028      	str	r0, [r5, #0]
 8018c26:	6865      	ldr	r5, [r4, #4]
 8018c28:	682e      	ldr	r6, [r5, #0]
 8018c2a:	b126      	cbz	r6, 8018c36 <rcl_guard_condition_init_from_rmw+0xb2>
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	712b      	strb	r3, [r5, #4]
 8018c30:	e7d7      	b.n	8018be2 <rcl_guard_condition_init_from_rmw+0x5e>
 8018c32:	200a      	movs	r0, #10
 8018c34:	e7e5      	b.n	8018c02 <rcl_guard_condition_init_from_rmw+0x7e>
 8018c36:	4628      	mov	r0, r5
 8018c38:	9b02      	ldr	r3, [sp, #8]
 8018c3a:	9905      	ldr	r1, [sp, #20]
 8018c3c:	4798      	blx	r3
 8018c3e:	2001      	movs	r0, #1
 8018c40:	6066      	str	r6, [r4, #4]
 8018c42:	e7de      	b.n	8018c02 <rcl_guard_condition_init_from_rmw+0x7e>

08018c44 <rcl_guard_condition_fini>:
 8018c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c46:	b1d8      	cbz	r0, 8018c80 <rcl_guard_condition_fini+0x3c>
 8018c48:	4604      	mov	r4, r0
 8018c4a:	6840      	ldr	r0, [r0, #4]
 8018c4c:	b158      	cbz	r0, 8018c66 <rcl_guard_condition_fini+0x22>
 8018c4e:	6803      	ldr	r3, [r0, #0]
 8018c50:	68c6      	ldr	r6, [r0, #12]
 8018c52:	6987      	ldr	r7, [r0, #24]
 8018c54:	b153      	cbz	r3, 8018c6c <rcl_guard_condition_fini+0x28>
 8018c56:	7905      	ldrb	r5, [r0, #4]
 8018c58:	b955      	cbnz	r5, 8018c70 <rcl_guard_condition_fini+0x2c>
 8018c5a:	4639      	mov	r1, r7
 8018c5c:	47b0      	blx	r6
 8018c5e:	2300      	movs	r3, #0
 8018c60:	6063      	str	r3, [r4, #4]
 8018c62:	4628      	mov	r0, r5
 8018c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c66:	4605      	mov	r5, r0
 8018c68:	4628      	mov	r0, r5
 8018c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c6c:	461d      	mov	r5, r3
 8018c6e:	e7f4      	b.n	8018c5a <rcl_guard_condition_fini+0x16>
 8018c70:	4618      	mov	r0, r3
 8018c72:	f000 fb7f 	bl	8019374 <rmw_destroy_guard_condition>
 8018c76:	1e05      	subs	r5, r0, #0
 8018c78:	bf18      	it	ne
 8018c7a:	2501      	movne	r5, #1
 8018c7c:	6860      	ldr	r0, [r4, #4]
 8018c7e:	e7ec      	b.n	8018c5a <rcl_guard_condition_fini+0x16>
 8018c80:	250b      	movs	r5, #11
 8018c82:	4628      	mov	r0, r5
 8018c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c86:	bf00      	nop

08018c88 <rcl_guard_condition_get_default_options>:
 8018c88:	b510      	push	{r4, lr}
 8018c8a:	4604      	mov	r4, r0
 8018c8c:	f7f3 f980 	bl	800bf90 <rcutils_get_default_allocator>
 8018c90:	4620      	mov	r0, r4
 8018c92:	bd10      	pop	{r4, pc}

08018c94 <rcl_trigger_guard_condition>:
 8018c94:	b148      	cbz	r0, 8018caa <rcl_trigger_guard_condition+0x16>
 8018c96:	b508      	push	{r3, lr}
 8018c98:	6843      	ldr	r3, [r0, #4]
 8018c9a:	b143      	cbz	r3, 8018cae <rcl_trigger_guard_condition+0x1a>
 8018c9c:	6818      	ldr	r0, [r3, #0]
 8018c9e:	f000 fb7d 	bl	801939c <rmw_trigger_guard_condition>
 8018ca2:	3800      	subs	r0, #0
 8018ca4:	bf18      	it	ne
 8018ca6:	2001      	movne	r0, #1
 8018ca8:	bd08      	pop	{r3, pc}
 8018caa:	200b      	movs	r0, #11
 8018cac:	4770      	bx	lr
 8018cae:	200b      	movs	r0, #11
 8018cb0:	bd08      	pop	{r3, pc}
 8018cb2:	bf00      	nop

08018cb4 <rcl_guard_condition_get_rmw_handle>:
 8018cb4:	b110      	cbz	r0, 8018cbc <rcl_guard_condition_get_rmw_handle+0x8>
 8018cb6:	6840      	ldr	r0, [r0, #4]
 8018cb8:	b100      	cbz	r0, 8018cbc <rcl_guard_condition_get_rmw_handle+0x8>
 8018cba:	6800      	ldr	r0, [r0, #0]
 8018cbc:	4770      	bx	lr
 8018cbe:	bf00      	nop

08018cc0 <rcl_validate_topic_name>:
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	d06b      	beq.n	8018d9c <rcl_validate_topic_name+0xdc>
 8018cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc8:	460d      	mov	r5, r1
 8018cca:	2900      	cmp	r1, #0
 8018ccc:	d06d      	beq.n	8018daa <rcl_validate_topic_name+0xea>
 8018cce:	4616      	mov	r6, r2
 8018cd0:	4604      	mov	r4, r0
 8018cd2:	f7e7 fafd 	bl	80002d0 <strlen>
 8018cd6:	b190      	cbz	r0, 8018cfe <rcl_validate_topic_name+0x3e>
 8018cd8:	7821      	ldrb	r1, [r4, #0]
 8018cda:	4a71      	ldr	r2, [pc, #452]	@ (8018ea0 <rcl_validate_topic_name+0x1e0>)
 8018cdc:	5c53      	ldrb	r3, [r2, r1]
 8018cde:	f013 0304 	ands.w	r3, r3, #4
 8018ce2:	d15d      	bne.n	8018da0 <rcl_validate_topic_name+0xe0>
 8018ce4:	1e47      	subs	r7, r0, #1
 8018ce6:	f814 c007 	ldrb.w	ip, [r4, r7]
 8018cea:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8018cee:	d10d      	bne.n	8018d0c <rcl_validate_topic_name+0x4c>
 8018cf0:	2302      	movs	r3, #2
 8018cf2:	602b      	str	r3, [r5, #0]
 8018cf4:	b146      	cbz	r6, 8018d08 <rcl_validate_topic_name+0x48>
 8018cf6:	6037      	str	r7, [r6, #0]
 8018cf8:	2000      	movs	r0, #0
 8018cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfe:	2301      	movs	r3, #1
 8018d00:	602b      	str	r3, [r5, #0]
 8018d02:	b10e      	cbz	r6, 8018d08 <rcl_validate_topic_name+0x48>
 8018d04:	2300      	movs	r3, #0
 8018d06:	6033      	str	r3, [r6, #0]
 8018d08:	2000      	movs	r0, #0
 8018d0a:	e7f6      	b.n	8018cfa <rcl_validate_topic_name+0x3a>
 8018d0c:	f104 38ff 	add.w	r8, r4, #4294967295
 8018d10:	469a      	mov	sl, r3
 8018d12:	469e      	mov	lr, r3
 8018d14:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8018d18:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 8018d1c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8018d20:	d85b      	bhi.n	8018dda <rcl_validate_topic_name+0x11a>
 8018d22:	e8df f00c 	tbb	[pc, ip]
 8018d26:	4463      	.short	0x4463
 8018d28:	44444444 	.word	0x44444444
 8018d2c:	44444444 	.word	0x44444444
 8018d30:	5a5a5a44 	.word	0x5a5a5a44
 8018d34:	5a5a5a5a 	.word	0x5a5a5a5a
 8018d38:	44444444 	.word	0x44444444
 8018d3c:	44444444 	.word	0x44444444
 8018d40:	44444444 	.word	0x44444444
 8018d44:	44444444 	.word	0x44444444
 8018d48:	44444444 	.word	0x44444444
 8018d4c:	44444444 	.word	0x44444444
 8018d50:	5a5a4444 	.word	0x5a5a4444
 8018d54:	5a2e5a5a 	.word	0x5a2e5a5a
 8018d58:	44444444 	.word	0x44444444
 8018d5c:	44444444 	.word	0x44444444
 8018d60:	44444444 	.word	0x44444444
 8018d64:	44444444 	.word	0x44444444
 8018d68:	44444444 	.word	0x44444444
 8018d6c:	44444444 	.word	0x44444444
 8018d70:	5a284444 	.word	0x5a284444
 8018d74:	6b73      	.short	0x6b73
 8018d76:	f1ba 0f00 	cmp.w	sl, #0
 8018d7a:	d13a      	bne.n	8018df2 <rcl_validate_topic_name+0x132>
 8018d7c:	4673      	mov	r3, lr
 8018d7e:	f04f 0a01 	mov.w	sl, #1
 8018d82:	f10e 0e01 	add.w	lr, lr, #1
 8018d86:	4570      	cmp	r0, lr
 8018d88:	d1c4      	bne.n	8018d14 <rcl_validate_topic_name+0x54>
 8018d8a:	f1ba 0f00 	cmp.w	sl, #0
 8018d8e:	d048      	beq.n	8018e22 <rcl_validate_topic_name+0x162>
 8018d90:	2205      	movs	r2, #5
 8018d92:	602a      	str	r2, [r5, #0]
 8018d94:	2e00      	cmp	r6, #0
 8018d96:	d0b7      	beq.n	8018d08 <rcl_validate_topic_name+0x48>
 8018d98:	6033      	str	r3, [r6, #0]
 8018d9a:	e7b5      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018d9c:	200b      	movs	r0, #11
 8018d9e:	4770      	bx	lr
 8018da0:	2304      	movs	r3, #4
 8018da2:	602b      	str	r3, [r5, #0]
 8018da4:	2e00      	cmp	r6, #0
 8018da6:	d1ad      	bne.n	8018d04 <rcl_validate_topic_name+0x44>
 8018da8:	e7ae      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018daa:	200b      	movs	r0, #11
 8018dac:	e7a5      	b.n	8018cfa <rcl_validate_topic_name+0x3a>
 8018dae:	f812 c009 	ldrb.w	ip, [r2, r9]
 8018db2:	f01c 0f04 	tst.w	ip, #4
 8018db6:	d0e4      	beq.n	8018d82 <rcl_validate_topic_name+0xc2>
 8018db8:	f1ba 0f00 	cmp.w	sl, #0
 8018dbc:	d0e1      	beq.n	8018d82 <rcl_validate_topic_name+0xc2>
 8018dbe:	f1be 0f00 	cmp.w	lr, #0
 8018dc2:	d0de      	beq.n	8018d82 <rcl_validate_topic_name+0xc2>
 8018dc4:	f10e 3cff 	add.w	ip, lr, #4294967295
 8018dc8:	4563      	cmp	r3, ip
 8018dca:	d1da      	bne.n	8018d82 <rcl_validate_topic_name+0xc2>
 8018dcc:	2309      	movs	r3, #9
 8018dce:	602b      	str	r3, [r5, #0]
 8018dd0:	2e00      	cmp	r6, #0
 8018dd2:	d099      	beq.n	8018d08 <rcl_validate_topic_name+0x48>
 8018dd4:	f8c6 e000 	str.w	lr, [r6]
 8018dd8:	e796      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018dda:	f1ba 0f00 	cmp.w	sl, #0
 8018dde:	bf0c      	ite	eq
 8018de0:	2303      	moveq	r3, #3
 8018de2:	2308      	movne	r3, #8
 8018de4:	602b      	str	r3, [r5, #0]
 8018de6:	2e00      	cmp	r6, #0
 8018de8:	d1f4      	bne.n	8018dd4 <rcl_validate_topic_name+0x114>
 8018dea:	e78d      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018dec:	f1ba 0f00 	cmp.w	sl, #0
 8018df0:	d0c7      	beq.n	8018d82 <rcl_validate_topic_name+0xc2>
 8018df2:	2308      	movs	r3, #8
 8018df4:	602b      	str	r3, [r5, #0]
 8018df6:	2e00      	cmp	r6, #0
 8018df8:	d1ec      	bne.n	8018dd4 <rcl_validate_topic_name+0x114>
 8018dfa:	e785      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018dfc:	f1be 0f00 	cmp.w	lr, #0
 8018e00:	d0bf      	beq.n	8018d82 <rcl_validate_topic_name+0xc2>
 8018e02:	2306      	movs	r3, #6
 8018e04:	602b      	str	r3, [r5, #0]
 8018e06:	2e00      	cmp	r6, #0
 8018e08:	d1e4      	bne.n	8018dd4 <rcl_validate_topic_name+0x114>
 8018e0a:	e77d      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018e0c:	f1ba 0f00 	cmp.w	sl, #0
 8018e10:	d104      	bne.n	8018e1c <rcl_validate_topic_name+0x15c>
 8018e12:	2305      	movs	r3, #5
 8018e14:	602b      	str	r3, [r5, #0]
 8018e16:	2e00      	cmp	r6, #0
 8018e18:	d1dc      	bne.n	8018dd4 <rcl_validate_topic_name+0x114>
 8018e1a:	e775      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018e1c:	f04f 0a00 	mov.w	sl, #0
 8018e20:	e7af      	b.n	8018d82 <rcl_validate_topic_name+0xc2>
 8018e22:	297e      	cmp	r1, #126	@ 0x7e
 8018e24:	d01d      	beq.n	8018e62 <rcl_validate_topic_name+0x1a2>
 8018e26:	2101      	movs	r1, #1
 8018e28:	e006      	b.n	8018e38 <rcl_validate_topic_name+0x178>
 8018e2a:	458e      	cmp	lr, r1
 8018e2c:	f104 0401 	add.w	r4, r4, #1
 8018e30:	f101 0301 	add.w	r3, r1, #1
 8018e34:	d912      	bls.n	8018e5c <rcl_validate_topic_name+0x19c>
 8018e36:	4619      	mov	r1, r3
 8018e38:	4557      	cmp	r7, sl
 8018e3a:	f10a 0a01 	add.w	sl, sl, #1
 8018e3e:	d0f4      	beq.n	8018e2a <rcl_validate_topic_name+0x16a>
 8018e40:	7823      	ldrb	r3, [r4, #0]
 8018e42:	2b2f      	cmp	r3, #47	@ 0x2f
 8018e44:	d1f1      	bne.n	8018e2a <rcl_validate_topic_name+0x16a>
 8018e46:	7863      	ldrb	r3, [r4, #1]
 8018e48:	5cd3      	ldrb	r3, [r2, r3]
 8018e4a:	075b      	lsls	r3, r3, #29
 8018e4c:	d5ed      	bpl.n	8018e2a <rcl_validate_topic_name+0x16a>
 8018e4e:	2304      	movs	r3, #4
 8018e50:	602b      	str	r3, [r5, #0]
 8018e52:	2e00      	cmp	r6, #0
 8018e54:	f43f af58 	beq.w	8018d08 <rcl_validate_topic_name+0x48>
 8018e58:	6031      	str	r1, [r6, #0]
 8018e5a:	e755      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	602b      	str	r3, [r5, #0]
 8018e60:	e752      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018e62:	4653      	mov	r3, sl
 8018e64:	2101      	movs	r1, #1
 8018e66:	e00a      	b.n	8018e7e <rcl_validate_topic_name+0x1be>
 8018e68:	2b01      	cmp	r3, #1
 8018e6a:	d012      	beq.n	8018e92 <rcl_validate_topic_name+0x1d2>
 8018e6c:	458e      	cmp	lr, r1
 8018e6e:	f103 0301 	add.w	r3, r3, #1
 8018e72:	f104 0401 	add.w	r4, r4, #1
 8018e76:	f101 0001 	add.w	r0, r1, #1
 8018e7a:	d9ef      	bls.n	8018e5c <rcl_validate_topic_name+0x19c>
 8018e7c:	4601      	mov	r1, r0
 8018e7e:	429f      	cmp	r7, r3
 8018e80:	d0f4      	beq.n	8018e6c <rcl_validate_topic_name+0x1ac>
 8018e82:	7820      	ldrb	r0, [r4, #0]
 8018e84:	282f      	cmp	r0, #47	@ 0x2f
 8018e86:	d1ef      	bne.n	8018e68 <rcl_validate_topic_name+0x1a8>
 8018e88:	7860      	ldrb	r0, [r4, #1]
 8018e8a:	5c10      	ldrb	r0, [r2, r0]
 8018e8c:	0740      	lsls	r0, r0, #29
 8018e8e:	d5ed      	bpl.n	8018e6c <rcl_validate_topic_name+0x1ac>
 8018e90:	e7dd      	b.n	8018e4e <rcl_validate_topic_name+0x18e>
 8018e92:	2207      	movs	r2, #7
 8018e94:	602a      	str	r2, [r5, #0]
 8018e96:	2e00      	cmp	r6, #0
 8018e98:	f47f af7e 	bne.w	8018d98 <rcl_validate_topic_name+0xd8>
 8018e9c:	e734      	b.n	8018d08 <rcl_validate_topic_name+0x48>
 8018e9e:	bf00      	nop
 8018ea0:	0801bf1f 	.word	0x0801bf1f

08018ea4 <rcutils_split>:
 8018ea4:	b082      	sub	sp, #8
 8018ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eaa:	b08b      	sub	sp, #44	@ 0x2c
 8018eac:	ac14      	add	r4, sp, #80	@ 0x50
 8018eae:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8018eb0:	e884 000c 	stmia.w	r4, {r2, r3}
 8018eb4:	2f00      	cmp	r7, #0
 8018eb6:	f000 8091 	beq.w	8018fdc <rcutils_split+0x138>
 8018eba:	4606      	mov	r6, r0
 8018ebc:	2800      	cmp	r0, #0
 8018ebe:	d072      	beq.n	8018fa6 <rcutils_split+0x102>
 8018ec0:	7804      	ldrb	r4, [r0, #0]
 8018ec2:	2c00      	cmp	r4, #0
 8018ec4:	d06f      	beq.n	8018fa6 <rcutils_split+0x102>
 8018ec6:	460d      	mov	r5, r1
 8018ec8:	f7e7 fa02 	bl	80002d0 <strlen>
 8018ecc:	1833      	adds	r3, r6, r0
 8018ece:	1b64      	subs	r4, r4, r5
 8018ed0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018ed4:	4681      	mov	r9, r0
 8018ed6:	fab4 f484 	clz	r4, r4
 8018eda:	0964      	lsrs	r4, r4, #5
 8018edc:	42ab      	cmp	r3, r5
 8018ede:	bf08      	it	eq
 8018ee0:	f1a9 0901 	subeq.w	r9, r9, #1
 8018ee4:	454c      	cmp	r4, r9
 8018ee6:	d26a      	bcs.n	8018fbe <rcutils_split+0x11a>
 8018ee8:	1933      	adds	r3, r6, r4
 8018eea:	eb06 0009 	add.w	r0, r6, r9
 8018eee:	2101      	movs	r1, #1
 8018ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ef4:	42aa      	cmp	r2, r5
 8018ef6:	bf08      	it	eq
 8018ef8:	3101      	addeq	r1, #1
 8018efa:	4283      	cmp	r3, r0
 8018efc:	d1f8      	bne.n	8018ef0 <rcutils_split+0x4c>
 8018efe:	aa14      	add	r2, sp, #80	@ 0x50
 8018f00:	4638      	mov	r0, r7
 8018f02:	f000 f88f 	bl	8019024 <rcutils_string_array_init>
 8018f06:	2800      	cmp	r0, #0
 8018f08:	d141      	bne.n	8018f8e <rcutils_split+0xea>
 8018f0a:	687a      	ldr	r2, [r7, #4]
 8018f0c:	4680      	mov	r8, r0
 8018f0e:	46a2      	mov	sl, r4
 8018f10:	e002      	b.n	8018f18 <rcutils_split+0x74>
 8018f12:	3401      	adds	r4, #1
 8018f14:	454c      	cmp	r4, r9
 8018f16:	d222      	bcs.n	8018f5e <rcutils_split+0xba>
 8018f18:	5d33      	ldrb	r3, [r6, r4]
 8018f1a:	42ab      	cmp	r3, r5
 8018f1c:	d1f9      	bne.n	8018f12 <rcutils_split+0x6e>
 8018f1e:	4554      	cmp	r4, sl
 8018f20:	eba4 0b0a 	sub.w	fp, r4, sl
 8018f24:	d038      	beq.n	8018f98 <rcutils_split+0xf4>
 8018f26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018f28:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018f2a:	9201      	str	r2, [sp, #4]
 8018f2c:	f10b 0002 	add.w	r0, fp, #2
 8018f30:	4798      	blx	r3
 8018f32:	9a01      	ldr	r2, [sp, #4]
 8018f34:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8018f38:	687a      	ldr	r2, [r7, #4]
 8018f3a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8018f3e:	eb06 030a 	add.w	r3, r6, sl
 8018f42:	f10b 0101 	add.w	r1, fp, #1
 8018f46:	2800      	cmp	r0, #0
 8018f48:	d04e      	beq.n	8018fe8 <rcutils_split+0x144>
 8018f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8019000 <rcutils_split+0x15c>)
 8018f4c:	f000 fe02 	bl	8019b54 <sniprintf>
 8018f50:	687a      	ldr	r2, [r7, #4]
 8018f52:	f108 0801 	add.w	r8, r8, #1
 8018f56:	3401      	adds	r4, #1
 8018f58:	454c      	cmp	r4, r9
 8018f5a:	46a2      	mov	sl, r4
 8018f5c:	d3dc      	bcc.n	8018f18 <rcutils_split+0x74>
 8018f5e:	4554      	cmp	r4, sl
 8018f60:	d035      	beq.n	8018fce <rcutils_split+0x12a>
 8018f62:	eba4 040a 	sub.w	r4, r4, sl
 8018f66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018f68:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018f6a:	9201      	str	r2, [sp, #4]
 8018f6c:	1ca0      	adds	r0, r4, #2
 8018f6e:	4798      	blx	r3
 8018f70:	9a01      	ldr	r2, [sp, #4]
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8018f78:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d035      	beq.n	8018fec <rcutils_split+0x148>
 8018f80:	4a1f      	ldr	r2, [pc, #124]	@ (8019000 <rcutils_split+0x15c>)
 8018f82:	eb06 030a 	add.w	r3, r6, sl
 8018f86:	1c61      	adds	r1, r4, #1
 8018f88:	f000 fde4 	bl	8019b54 <sniprintf>
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	b00b      	add	sp, #44	@ 0x2c
 8018f90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f94:	b002      	add	sp, #8
 8018f96:	4770      	bx	lr
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	3b01      	subs	r3, #1
 8018f9c:	2100      	movs	r1, #0
 8018f9e:	603b      	str	r3, [r7, #0]
 8018fa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018fa4:	e7d7      	b.n	8018f56 <rcutils_split+0xb2>
 8018fa6:	a802      	add	r0, sp, #8
 8018fa8:	ac02      	add	r4, sp, #8
 8018faa:	f000 f82b 	bl	8019004 <rcutils_get_zero_initialized_string_array>
 8018fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018fb2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018fb6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8018fba:	2000      	movs	r0, #0
 8018fbc:	e7e7      	b.n	8018f8e <rcutils_split+0xea>
 8018fbe:	aa14      	add	r2, sp, #80	@ 0x50
 8018fc0:	2101      	movs	r1, #1
 8018fc2:	4638      	mov	r0, r7
 8018fc4:	f000 f82e 	bl	8019024 <rcutils_string_array_init>
 8018fc8:	2800      	cmp	r0, #0
 8018fca:	d1e0      	bne.n	8018f8e <rcutils_split+0xea>
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	683b      	ldr	r3, [r7, #0]
 8018fd0:	3b01      	subs	r3, #1
 8018fd2:	2100      	movs	r1, #0
 8018fd4:	603b      	str	r3, [r7, #0]
 8018fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018fda:	e7ee      	b.n	8018fba <rcutils_split+0x116>
 8018fdc:	200b      	movs	r0, #11
 8018fde:	b00b      	add	sp, #44	@ 0x2c
 8018fe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fe4:	b002      	add	sp, #8
 8018fe6:	4770      	bx	lr
 8018fe8:	f8c7 8000 	str.w	r8, [r7]
 8018fec:	4638      	mov	r0, r7
 8018fee:	f000 f83b 	bl	8019068 <rcutils_string_array_fini>
 8018ff2:	b908      	cbnz	r0, 8018ff8 <rcutils_split+0x154>
 8018ff4:	200a      	movs	r0, #10
 8018ff6:	e7ca      	b.n	8018f8e <rcutils_split+0xea>
 8018ff8:	f7f3 f822 	bl	800c040 <rcutils_reset_error>
 8018ffc:	e7fa      	b.n	8018ff4 <rcutils_split+0x150>
 8018ffe:	bf00      	nop
 8019000:	0801af3c 	.word	0x0801af3c

08019004 <rcutils_get_zero_initialized_string_array>:
 8019004:	b510      	push	{r4, lr}
 8019006:	4c06      	ldr	r4, [pc, #24]	@ (8019020 <rcutils_get_zero_initialized_string_array+0x1c>)
 8019008:	4686      	mov	lr, r0
 801900a:	4684      	mov	ip, r0
 801900c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801900e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019012:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019016:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801901a:	4670      	mov	r0, lr
 801901c:	bd10      	pop	{r4, pc}
 801901e:	bf00      	nop
 8019020:	0801be24 	.word	0x0801be24

08019024 <rcutils_string_array_init>:
 8019024:	b1da      	cbz	r2, 801905e <rcutils_string_array_init+0x3a>
 8019026:	b570      	push	{r4, r5, r6, lr}
 8019028:	4605      	mov	r5, r0
 801902a:	b1d0      	cbz	r0, 8019062 <rcutils_string_array_init+0x3e>
 801902c:	460e      	mov	r6, r1
 801902e:	4614      	mov	r4, r2
 8019030:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8019034:	6001      	str	r1, [r0, #0]
 8019036:	2104      	movs	r1, #4
 8019038:	4630      	mov	r0, r6
 801903a:	4798      	blx	r3
 801903c:	6068      	str	r0, [r5, #4]
 801903e:	b150      	cbz	r0, 8019056 <rcutils_string_array_init+0x32>
 8019040:	46a4      	mov	ip, r4
 8019042:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019046:	f105 0408 	add.w	r4, r5, #8
 801904a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801904c:	f8dc 3000 	ldr.w	r3, [ip]
 8019050:	6023      	str	r3, [r4, #0]
 8019052:	2000      	movs	r0, #0
 8019054:	bd70      	pop	{r4, r5, r6, pc}
 8019056:	2e00      	cmp	r6, #0
 8019058:	d0f2      	beq.n	8019040 <rcutils_string_array_init+0x1c>
 801905a:	200a      	movs	r0, #10
 801905c:	bd70      	pop	{r4, r5, r6, pc}
 801905e:	200b      	movs	r0, #11
 8019060:	4770      	bx	lr
 8019062:	200b      	movs	r0, #11
 8019064:	bd70      	pop	{r4, r5, r6, pc}
 8019066:	bf00      	nop

08019068 <rcutils_string_array_fini>:
 8019068:	b310      	cbz	r0, 80190b0 <rcutils_string_array_fini+0x48>
 801906a:	6843      	ldr	r3, [r0, #4]
 801906c:	b570      	push	{r4, r5, r6, lr}
 801906e:	4604      	mov	r4, r0
 8019070:	b1d3      	cbz	r3, 80190a8 <rcutils_string_array_fini+0x40>
 8019072:	3008      	adds	r0, #8
 8019074:	f7f2 ffb8 	bl	800bfe8 <rcutils_allocator_is_valid>
 8019078:	b1c0      	cbz	r0, 80190ac <rcutils_string_array_fini+0x44>
 801907a:	e9d4 3000 	ldrd	r3, r0, [r4]
 801907e:	b16b      	cbz	r3, 801909c <rcutils_string_array_fini+0x34>
 8019080:	2500      	movs	r5, #0
 8019082:	462e      	mov	r6, r5
 8019084:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019088:	68e3      	ldr	r3, [r4, #12]
 801908a:	69a1      	ldr	r1, [r4, #24]
 801908c:	4798      	blx	r3
 801908e:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019092:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019096:	3501      	adds	r5, #1
 8019098:	42ab      	cmp	r3, r5
 801909a:	d8f3      	bhi.n	8019084 <rcutils_string_array_fini+0x1c>
 801909c:	68e3      	ldr	r3, [r4, #12]
 801909e:	69a1      	ldr	r1, [r4, #24]
 80190a0:	4798      	blx	r3
 80190a2:	2300      	movs	r3, #0
 80190a4:	e9c4 3300 	strd	r3, r3, [r4]
 80190a8:	2000      	movs	r0, #0
 80190aa:	bd70      	pop	{r4, r5, r6, pc}
 80190ac:	200b      	movs	r0, #11
 80190ae:	bd70      	pop	{r4, r5, r6, pc}
 80190b0:	200b      	movs	r0, #11
 80190b2:	4770      	bx	lr

080190b4 <rmw_discovery_options_init>:
 80190b4:	b328      	cbz	r0, 8019102 <rmw_discovery_options_init+0x4e>
 80190b6:	b570      	push	{r4, r5, r6, lr}
 80190b8:	4604      	mov	r4, r0
 80190ba:	4610      	mov	r0, r2
 80190bc:	460e      	mov	r6, r1
 80190be:	4615      	mov	r5, r2
 80190c0:	f7f2 ff92 	bl	800bfe8 <rcutils_allocator_is_valid>
 80190c4:	b1d8      	cbz	r0, 80190fe <rmw_discovery_options_init+0x4a>
 80190c6:	68a3      	ldr	r3, [r4, #8]
 80190c8:	b9cb      	cbnz	r3, 80190fe <rmw_discovery_options_init+0x4a>
 80190ca:	6863      	ldr	r3, [r4, #4]
 80190cc:	b9bb      	cbnz	r3, 80190fe <rmw_discovery_options_init+0x4a>
 80190ce:	7823      	ldrb	r3, [r4, #0]
 80190d0:	b90b      	cbnz	r3, 80190d6 <rmw_discovery_options_init+0x22>
 80190d2:	2302      	movs	r3, #2
 80190d4:	7023      	strb	r3, [r4, #0]
 80190d6:	b186      	cbz	r6, 80190fa <rmw_discovery_options_init+0x46>
 80190d8:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80190dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80190e0:	4630      	mov	r0, r6
 80190e2:	4798      	blx	r3
 80190e4:	6060      	str	r0, [r4, #4]
 80190e6:	b170      	cbz	r0, 8019106 <rmw_discovery_options_init+0x52>
 80190e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190ea:	f104 0c0c 	add.w	ip, r4, #12
 80190ee:	60a6      	str	r6, [r4, #8]
 80190f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190f4:	682b      	ldr	r3, [r5, #0]
 80190f6:	f8cc 3000 	str.w	r3, [ip]
 80190fa:	2000      	movs	r0, #0
 80190fc:	bd70      	pop	{r4, r5, r6, pc}
 80190fe:	200b      	movs	r0, #11
 8019100:	bd70      	pop	{r4, r5, r6, pc}
 8019102:	200b      	movs	r0, #11
 8019104:	4770      	bx	lr
 8019106:	200a      	movs	r0, #10
 8019108:	bd70      	pop	{r4, r5, r6, pc}
 801910a:	bf00      	nop

0801910c <rmw_enclave_options_copy>:
 801910c:	b1e0      	cbz	r0, 8019148 <rmw_enclave_options_copy+0x3c>
 801910e:	b570      	push	{r4, r5, r6, lr}
 8019110:	4616      	mov	r6, r2
 8019112:	b082      	sub	sp, #8
 8019114:	b1aa      	cbz	r2, 8019142 <rmw_enclave_options_copy+0x36>
 8019116:	4605      	mov	r5, r0
 8019118:	4608      	mov	r0, r1
 801911a:	460c      	mov	r4, r1
 801911c:	f7f2 ff64 	bl	800bfe8 <rcutils_allocator_is_valid>
 8019120:	b178      	cbz	r0, 8019142 <rmw_enclave_options_copy+0x36>
 8019122:	f104 030c 	add.w	r3, r4, #12
 8019126:	e893 0003 	ldmia.w	r3, {r0, r1}
 801912a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801912e:	4628      	mov	r0, r5
 8019130:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019134:	f7fc f9c4 	bl	80154c0 <rcutils_strdup>
 8019138:	b140      	cbz	r0, 801914c <rmw_enclave_options_copy+0x40>
 801913a:	6030      	str	r0, [r6, #0]
 801913c:	2000      	movs	r0, #0
 801913e:	b002      	add	sp, #8
 8019140:	bd70      	pop	{r4, r5, r6, pc}
 8019142:	200b      	movs	r0, #11
 8019144:	b002      	add	sp, #8
 8019146:	bd70      	pop	{r4, r5, r6, pc}
 8019148:	200b      	movs	r0, #11
 801914a:	4770      	bx	lr
 801914c:	200a      	movs	r0, #10
 801914e:	e7f6      	b.n	801913e <rmw_enclave_options_copy+0x32>

08019150 <rmw_enclave_options_fini>:
 8019150:	b170      	cbz	r0, 8019170 <rmw_enclave_options_fini+0x20>
 8019152:	b538      	push	{r3, r4, r5, lr}
 8019154:	4605      	mov	r5, r0
 8019156:	4608      	mov	r0, r1
 8019158:	460c      	mov	r4, r1
 801915a:	f7f2 ff45 	bl	800bfe8 <rcutils_allocator_is_valid>
 801915e:	b128      	cbz	r0, 801916c <rmw_enclave_options_fini+0x1c>
 8019160:	4628      	mov	r0, r5
 8019162:	6863      	ldr	r3, [r4, #4]
 8019164:	6921      	ldr	r1, [r4, #16]
 8019166:	4798      	blx	r3
 8019168:	2000      	movs	r0, #0
 801916a:	bd38      	pop	{r3, r4, r5, pc}
 801916c:	200b      	movs	r0, #11
 801916e:	bd38      	pop	{r3, r4, r5, pc}
 8019170:	200b      	movs	r0, #11
 8019172:	4770      	bx	lr

08019174 <rmw_get_default_security_options>:
 8019174:	2200      	movs	r2, #0
 8019176:	7002      	strb	r2, [r0, #0]
 8019178:	6042      	str	r2, [r0, #4]
 801917a:	4770      	bx	lr

0801917c <on_status>:
 801917c:	b082      	sub	sp, #8
 801917e:	b002      	add	sp, #8
 8019180:	4770      	bx	lr
 8019182:	bf00      	nop

08019184 <on_topic>:
 8019184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019188:	4a22      	ldr	r2, [pc, #136]	@ (8019214 <on_topic+0x90>)
 801918a:	b094      	sub	sp, #80	@ 0x50
 801918c:	6812      	ldr	r2, [r2, #0]
 801918e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019190:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019194:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019198:	b3c2      	cbz	r2, 801920c <on_topic+0x88>
 801919a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801919e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80191a2:	e001      	b.n	80191a8 <on_topic+0x24>
 80191a4:	6852      	ldr	r2, [r2, #4]
 80191a6:	b38a      	cbz	r2, 801920c <on_topic+0x88>
 80191a8:	6894      	ldr	r4, [r2, #8]
 80191aa:	8aa3      	ldrh	r3, [r4, #20]
 80191ac:	428b      	cmp	r3, r1
 80191ae:	d1f9      	bne.n	80191a4 <on_topic+0x20>
 80191b0:	7da3      	ldrb	r3, [r4, #22]
 80191b2:	4283      	cmp	r3, r0
 80191b4:	d1f6      	bne.n	80191a4 <on_topic+0x20>
 80191b6:	2248      	movs	r2, #72	@ 0x48
 80191b8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80191bc:	4668      	mov	r0, sp
 80191be:	f000 ff18 	bl	8019ff2 <memcpy>
 80191c2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80191c6:	cb0c      	ldmia	r3, {r2, r3}
 80191c8:	4620      	mov	r0, r4
 80191ca:	f7f3 fba7 	bl	800c91c <rmw_uxrce_get_static_input_buffer_for_entity>
 80191ce:	4607      	mov	r7, r0
 80191d0:	b1e0      	cbz	r0, 801920c <on_topic+0x88>
 80191d2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80191d6:	4632      	mov	r2, r6
 80191d8:	4628      	mov	r0, r5
 80191da:	f108 0110 	add.w	r1, r8, #16
 80191de:	f7fe f9d9 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 80191e2:	b930      	cbnz	r0, 80191f2 <on_topic+0x6e>
 80191e4:	480c      	ldr	r0, [pc, #48]	@ (8019218 <on_topic+0x94>)
 80191e6:	4639      	mov	r1, r7
 80191e8:	b014      	add	sp, #80	@ 0x50
 80191ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191ee:	f7fc bcf1 	b.w	8015bd4 <put_memory>
 80191f2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80191f6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80191fa:	f7fd fe15 	bl	8016e28 <rmw_uros_epoch_nanos>
 80191fe:	2305      	movs	r3, #5
 8019200:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019204:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019208:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801920c:	b014      	add	sp, #80	@ 0x50
 801920e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019212:	bf00      	nop
 8019214:	2000d1a8 	.word	0x2000d1a8
 8019218:	2000c9f8 	.word	0x2000c9f8

0801921c <on_request>:
 801921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019220:	4823      	ldr	r0, [pc, #140]	@ (80192b0 <on_request+0x94>)
 8019222:	b094      	sub	sp, #80	@ 0x50
 8019224:	6800      	ldr	r0, [r0, #0]
 8019226:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019228:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801922c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801922e:	2800      	cmp	r0, #0
 8019230:	d03b      	beq.n	80192aa <on_request+0x8e>
 8019232:	461d      	mov	r5, r3
 8019234:	e001      	b.n	801923a <on_request+0x1e>
 8019236:	6840      	ldr	r0, [r0, #4]
 8019238:	b3b8      	cbz	r0, 80192aa <on_request+0x8e>
 801923a:	6884      	ldr	r4, [r0, #8]
 801923c:	8b21      	ldrh	r1, [r4, #24]
 801923e:	4291      	cmp	r1, r2
 8019240:	d1f9      	bne.n	8019236 <on_request+0x1a>
 8019242:	2248      	movs	r2, #72	@ 0x48
 8019244:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019248:	4668      	mov	r0, sp
 801924a:	f000 fed2 	bl	8019ff2 <memcpy>
 801924e:	f104 0320 	add.w	r3, r4, #32
 8019252:	cb0c      	ldmia	r3, {r2, r3}
 8019254:	4620      	mov	r0, r4
 8019256:	f7f3 fb61 	bl	800c91c <rmw_uxrce_get_static_input_buffer_for_entity>
 801925a:	4680      	mov	r8, r0
 801925c:	b328      	cbz	r0, 80192aa <on_request+0x8e>
 801925e:	4638      	mov	r0, r7
 8019260:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019264:	4632      	mov	r2, r6
 8019266:	f107 0110 	add.w	r1, r7, #16
 801926a:	f7fe f993 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 801926e:	b930      	cbnz	r0, 801927e <on_request+0x62>
 8019270:	4810      	ldr	r0, [pc, #64]	@ (80192b4 <on_request+0x98>)
 8019272:	4641      	mov	r1, r8
 8019274:	b014      	add	sp, #80	@ 0x50
 8019276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801927a:	f7fc bcab 	b.w	8015bd4 <put_memory>
 801927e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019280:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019284:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019288:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801928c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019290:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019294:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019298:	f7fd fdc6 	bl	8016e28 <rmw_uros_epoch_nanos>
 801929c:	2303      	movs	r3, #3
 801929e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80192a2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80192a6:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80192aa:	b014      	add	sp, #80	@ 0x50
 80192ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192b0:	2000cd60 	.word	0x2000cd60
 80192b4:	2000c9f8 	.word	0x2000c9f8

080192b8 <on_reply>:
 80192b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192bc:	4821      	ldr	r0, [pc, #132]	@ (8019344 <on_reply+0x8c>)
 80192be:	b094      	sub	sp, #80	@ 0x50
 80192c0:	6800      	ldr	r0, [r0, #0]
 80192c2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80192c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80192c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80192ca:	b3b8      	cbz	r0, 801933c <on_reply+0x84>
 80192cc:	461d      	mov	r5, r3
 80192ce:	e001      	b.n	80192d4 <on_reply+0x1c>
 80192d0:	6840      	ldr	r0, [r0, #4]
 80192d2:	b398      	cbz	r0, 801933c <on_reply+0x84>
 80192d4:	6884      	ldr	r4, [r0, #8]
 80192d6:	8b21      	ldrh	r1, [r4, #24]
 80192d8:	4291      	cmp	r1, r2
 80192da:	d1f9      	bne.n	80192d0 <on_reply+0x18>
 80192dc:	2248      	movs	r2, #72	@ 0x48
 80192de:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80192e2:	4668      	mov	r0, sp
 80192e4:	f000 fe85 	bl	8019ff2 <memcpy>
 80192e8:	f104 0320 	add.w	r3, r4, #32
 80192ec:	cb0c      	ldmia	r3, {r2, r3}
 80192ee:	4620      	mov	r0, r4
 80192f0:	f7f3 fb14 	bl	800c91c <rmw_uxrce_get_static_input_buffer_for_entity>
 80192f4:	4680      	mov	r8, r0
 80192f6:	b308      	cbz	r0, 801933c <on_reply+0x84>
 80192f8:	4638      	mov	r0, r7
 80192fa:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80192fe:	4632      	mov	r2, r6
 8019300:	f107 0110 	add.w	r1, r7, #16
 8019304:	f7fe f946 	bl	8017594 <ucdr_deserialize_array_uint8_t>
 8019308:	b930      	cbnz	r0, 8019318 <on_reply+0x60>
 801930a:	480f      	ldr	r0, [pc, #60]	@ (8019348 <on_reply+0x90>)
 801930c:	4641      	mov	r1, r8
 801930e:	b014      	add	sp, #80	@ 0x50
 8019310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019314:	f7fc bc5e 	b.w	8015bd4 <put_memory>
 8019318:	2200      	movs	r2, #0
 801931a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801931e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019322:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019326:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801932a:	f7fd fd7d 	bl	8016e28 <rmw_uros_epoch_nanos>
 801932e:	2304      	movs	r3, #4
 8019330:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019334:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019338:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801933c:	b014      	add	sp, #80	@ 0x50
 801933e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019342:	bf00      	nop
 8019344:	2000cc88 	.word	0x2000cc88
 8019348:	2000c9f8 	.word	0x2000c9f8

0801934c <rmw_create_guard_condition>:
 801934c:	b538      	push	{r3, r4, r5, lr}
 801934e:	4605      	mov	r5, r0
 8019350:	4807      	ldr	r0, [pc, #28]	@ (8019370 <rmw_create_guard_condition+0x24>)
 8019352:	f7fc fc2f 	bl	8015bb4 <get_memory>
 8019356:	b148      	cbz	r0, 801936c <rmw_create_guard_condition+0x20>
 8019358:	6884      	ldr	r4, [r0, #8]
 801935a:	2300      	movs	r3, #0
 801935c:	7423      	strb	r3, [r4, #16]
 801935e:	61e5      	str	r5, [r4, #28]
 8019360:	f7fc fcae 	bl	8015cc0 <rmw_get_implementation_identifier>
 8019364:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019368:	f104 0014 	add.w	r0, r4, #20
 801936c:	bd38      	pop	{r3, r4, r5, pc}
 801936e:	bf00      	nop
 8019370:	2000a7d4 	.word	0x2000a7d4

08019374 <rmw_destroy_guard_condition>:
 8019374:	b508      	push	{r3, lr}
 8019376:	4b08      	ldr	r3, [pc, #32]	@ (8019398 <rmw_destroy_guard_condition+0x24>)
 8019378:	6819      	ldr	r1, [r3, #0]
 801937a:	b911      	cbnz	r1, 8019382 <rmw_destroy_guard_condition+0xe>
 801937c:	e00a      	b.n	8019394 <rmw_destroy_guard_condition+0x20>
 801937e:	6849      	ldr	r1, [r1, #4]
 8019380:	b141      	cbz	r1, 8019394 <rmw_destroy_guard_condition+0x20>
 8019382:	688b      	ldr	r3, [r1, #8]
 8019384:	3314      	adds	r3, #20
 8019386:	4298      	cmp	r0, r3
 8019388:	d1f9      	bne.n	801937e <rmw_destroy_guard_condition+0xa>
 801938a:	4803      	ldr	r0, [pc, #12]	@ (8019398 <rmw_destroy_guard_condition+0x24>)
 801938c:	f7fc fc22 	bl	8015bd4 <put_memory>
 8019390:	2000      	movs	r0, #0
 8019392:	bd08      	pop	{r3, pc}
 8019394:	2001      	movs	r0, #1
 8019396:	bd08      	pop	{r3, pc}
 8019398:	2000a7d4 	.word	0x2000a7d4

0801939c <rmw_trigger_guard_condition>:
 801939c:	b160      	cbz	r0, 80193b8 <rmw_trigger_guard_condition+0x1c>
 801939e:	b510      	push	{r4, lr}
 80193a0:	4604      	mov	r4, r0
 80193a2:	6800      	ldr	r0, [r0, #0]
 80193a4:	f7f3 fc3c 	bl	800cc20 <is_uxrce_rmw_identifier_valid>
 80193a8:	b908      	cbnz	r0, 80193ae <rmw_trigger_guard_condition+0x12>
 80193aa:	2001      	movs	r0, #1
 80193ac:	bd10      	pop	{r4, pc}
 80193ae:	6863      	ldr	r3, [r4, #4]
 80193b0:	2201      	movs	r2, #1
 80193b2:	741a      	strb	r2, [r3, #16]
 80193b4:	2000      	movs	r0, #0
 80193b6:	bd10      	pop	{r4, pc}
 80193b8:	2001      	movs	r0, #1
 80193ba:	4770      	bx	lr

080193bc <rosidl_runtime_c__String__init>:
 80193bc:	b1b0      	cbz	r0, 80193ec <rosidl_runtime_c__String__init+0x30>
 80193be:	b510      	push	{r4, lr}
 80193c0:	b086      	sub	sp, #24
 80193c2:	4604      	mov	r4, r0
 80193c4:	a801      	add	r0, sp, #4
 80193c6:	f7f2 fde3 	bl	800bf90 <rcutils_get_default_allocator>
 80193ca:	9b01      	ldr	r3, [sp, #4]
 80193cc:	9905      	ldr	r1, [sp, #20]
 80193ce:	2001      	movs	r0, #1
 80193d0:	4798      	blx	r3
 80193d2:	6020      	str	r0, [r4, #0]
 80193d4:	b138      	cbz	r0, 80193e6 <rosidl_runtime_c__String__init+0x2a>
 80193d6:	2200      	movs	r2, #0
 80193d8:	2301      	movs	r3, #1
 80193da:	7002      	strb	r2, [r0, #0]
 80193dc:	4618      	mov	r0, r3
 80193de:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80193e2:	b006      	add	sp, #24
 80193e4:	bd10      	pop	{r4, pc}
 80193e6:	2000      	movs	r0, #0
 80193e8:	b006      	add	sp, #24
 80193ea:	bd10      	pop	{r4, pc}
 80193ec:	2000      	movs	r0, #0
 80193ee:	4770      	bx	lr

080193f0 <rosidl_runtime_c__String__fini>:
 80193f0:	b320      	cbz	r0, 801943c <rosidl_runtime_c__String__fini+0x4c>
 80193f2:	b510      	push	{r4, lr}
 80193f4:	6803      	ldr	r3, [r0, #0]
 80193f6:	b086      	sub	sp, #24
 80193f8:	4604      	mov	r4, r0
 80193fa:	b173      	cbz	r3, 801941a <rosidl_runtime_c__String__fini+0x2a>
 80193fc:	6883      	ldr	r3, [r0, #8]
 80193fe:	b1f3      	cbz	r3, 801943e <rosidl_runtime_c__String__fini+0x4e>
 8019400:	a801      	add	r0, sp, #4
 8019402:	f7f2 fdc5 	bl	800bf90 <rcutils_get_default_allocator>
 8019406:	9b02      	ldr	r3, [sp, #8]
 8019408:	9905      	ldr	r1, [sp, #20]
 801940a:	6820      	ldr	r0, [r4, #0]
 801940c:	4798      	blx	r3
 801940e:	2300      	movs	r3, #0
 8019410:	e9c4 3300 	strd	r3, r3, [r4]
 8019414:	60a3      	str	r3, [r4, #8]
 8019416:	b006      	add	sp, #24
 8019418:	bd10      	pop	{r4, pc}
 801941a:	6843      	ldr	r3, [r0, #4]
 801941c:	b9db      	cbnz	r3, 8019456 <rosidl_runtime_c__String__fini+0x66>
 801941e:	6883      	ldr	r3, [r0, #8]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d0f8      	beq.n	8019416 <rosidl_runtime_c__String__fini+0x26>
 8019424:	4b12      	ldr	r3, [pc, #72]	@ (8019470 <rosidl_runtime_c__String__fini+0x80>)
 8019426:	4813      	ldr	r0, [pc, #76]	@ (8019474 <rosidl_runtime_c__String__fini+0x84>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	2251      	movs	r2, #81	@ 0x51
 801942c:	68db      	ldr	r3, [r3, #12]
 801942e:	2101      	movs	r1, #1
 8019430:	f000 fb82 	bl	8019b38 <fwrite>
 8019434:	f04f 30ff 	mov.w	r0, #4294967295
 8019438:	f000 f83e 	bl	80194b8 <exit>
 801943c:	4770      	bx	lr
 801943e:	4b0c      	ldr	r3, [pc, #48]	@ (8019470 <rosidl_runtime_c__String__fini+0x80>)
 8019440:	480d      	ldr	r0, [pc, #52]	@ (8019478 <rosidl_runtime_c__String__fini+0x88>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	224c      	movs	r2, #76	@ 0x4c
 8019446:	68db      	ldr	r3, [r3, #12]
 8019448:	2101      	movs	r1, #1
 801944a:	f000 fb75 	bl	8019b38 <fwrite>
 801944e:	f04f 30ff 	mov.w	r0, #4294967295
 8019452:	f000 f831 	bl	80194b8 <exit>
 8019456:	4b06      	ldr	r3, [pc, #24]	@ (8019470 <rosidl_runtime_c__String__fini+0x80>)
 8019458:	4808      	ldr	r0, [pc, #32]	@ (801947c <rosidl_runtime_c__String__fini+0x8c>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	224e      	movs	r2, #78	@ 0x4e
 801945e:	68db      	ldr	r3, [r3, #12]
 8019460:	2101      	movs	r1, #1
 8019462:	f000 fb69 	bl	8019b38 <fwrite>
 8019466:	f04f 30ff 	mov.w	r0, #4294967295
 801946a:	f000 f825 	bl	80194b8 <exit>
 801946e:	bf00      	nop
 8019470:	200012a0 	.word	0x200012a0
 8019474:	0801b710 	.word	0x0801b710
 8019478:	0801b670 	.word	0x0801b670
 801947c:	0801b6c0 	.word	0x0801b6c0

08019480 <calloc>:
 8019480:	4b02      	ldr	r3, [pc, #8]	@ (801948c <calloc+0xc>)
 8019482:	460a      	mov	r2, r1
 8019484:	4601      	mov	r1, r0
 8019486:	6818      	ldr	r0, [r3, #0]
 8019488:	f000 b802 	b.w	8019490 <_calloc_r>
 801948c:	200012a0 	.word	0x200012a0

08019490 <_calloc_r>:
 8019490:	b570      	push	{r4, r5, r6, lr}
 8019492:	fba1 5402 	umull	r5, r4, r1, r2
 8019496:	b934      	cbnz	r4, 80194a6 <_calloc_r+0x16>
 8019498:	4629      	mov	r1, r5
 801949a:	f000 f899 	bl	80195d0 <_malloc_r>
 801949e:	4606      	mov	r6, r0
 80194a0:	b928      	cbnz	r0, 80194ae <_calloc_r+0x1e>
 80194a2:	4630      	mov	r0, r6
 80194a4:	bd70      	pop	{r4, r5, r6, pc}
 80194a6:	220c      	movs	r2, #12
 80194a8:	6002      	str	r2, [r0, #0]
 80194aa:	2600      	movs	r6, #0
 80194ac:	e7f9      	b.n	80194a2 <_calloc_r+0x12>
 80194ae:	462a      	mov	r2, r5
 80194b0:	4621      	mov	r1, r4
 80194b2:	f000 fcc3 	bl	8019e3c <memset>
 80194b6:	e7f4      	b.n	80194a2 <_calloc_r+0x12>

080194b8 <exit>:
 80194b8:	b508      	push	{r3, lr}
 80194ba:	4b06      	ldr	r3, [pc, #24]	@ (80194d4 <exit+0x1c>)
 80194bc:	4604      	mov	r4, r0
 80194be:	b113      	cbz	r3, 80194c6 <exit+0xe>
 80194c0:	2100      	movs	r1, #0
 80194c2:	f3af 8000 	nop.w
 80194c6:	4b04      	ldr	r3, [pc, #16]	@ (80194d8 <exit+0x20>)
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	b103      	cbz	r3, 80194ce <exit+0x16>
 80194cc:	4798      	blx	r3
 80194ce:	4620      	mov	r0, r4
 80194d0:	f7ea f818 	bl	8003504 <_exit>
 80194d4:	00000000 	.word	0x00000000
 80194d8:	2000f438 	.word	0x2000f438

080194dc <getenv>:
 80194dc:	b507      	push	{r0, r1, r2, lr}
 80194de:	4b04      	ldr	r3, [pc, #16]	@ (80194f0 <getenv+0x14>)
 80194e0:	4601      	mov	r1, r0
 80194e2:	aa01      	add	r2, sp, #4
 80194e4:	6818      	ldr	r0, [r3, #0]
 80194e6:	f000 f805 	bl	80194f4 <_findenv_r>
 80194ea:	b003      	add	sp, #12
 80194ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80194f0:	200012a0 	.word	0x200012a0

080194f4 <_findenv_r>:
 80194f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019568 <_findenv_r+0x74>
 80194fc:	4606      	mov	r6, r0
 80194fe:	4689      	mov	r9, r1
 8019500:	4617      	mov	r7, r2
 8019502:	f000 fda3 	bl	801a04c <__env_lock>
 8019506:	f8da 4000 	ldr.w	r4, [sl]
 801950a:	b134      	cbz	r4, 801951a <_findenv_r+0x26>
 801950c:	464b      	mov	r3, r9
 801950e:	4698      	mov	r8, r3
 8019510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019514:	b13a      	cbz	r2, 8019526 <_findenv_r+0x32>
 8019516:	2a3d      	cmp	r2, #61	@ 0x3d
 8019518:	d1f9      	bne.n	801950e <_findenv_r+0x1a>
 801951a:	4630      	mov	r0, r6
 801951c:	f000 fd9c 	bl	801a058 <__env_unlock>
 8019520:	2000      	movs	r0, #0
 8019522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019526:	eba8 0809 	sub.w	r8, r8, r9
 801952a:	46a3      	mov	fp, r4
 801952c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019530:	2800      	cmp	r0, #0
 8019532:	d0f2      	beq.n	801951a <_findenv_r+0x26>
 8019534:	4642      	mov	r2, r8
 8019536:	4649      	mov	r1, r9
 8019538:	f000 fc95 	bl	8019e66 <strncmp>
 801953c:	2800      	cmp	r0, #0
 801953e:	d1f4      	bne.n	801952a <_findenv_r+0x36>
 8019540:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019544:	eb03 0508 	add.w	r5, r3, r8
 8019548:	f813 3008 	ldrb.w	r3, [r3, r8]
 801954c:	2b3d      	cmp	r3, #61	@ 0x3d
 801954e:	d1ec      	bne.n	801952a <_findenv_r+0x36>
 8019550:	f8da 3000 	ldr.w	r3, [sl]
 8019554:	ebab 0303 	sub.w	r3, fp, r3
 8019558:	109b      	asrs	r3, r3, #2
 801955a:	4630      	mov	r0, r6
 801955c:	603b      	str	r3, [r7, #0]
 801955e:	f000 fd7b 	bl	801a058 <__env_unlock>
 8019562:	1c68      	adds	r0, r5, #1
 8019564:	e7dd      	b.n	8019522 <_findenv_r+0x2e>
 8019566:	bf00      	nop
 8019568:	20000010 	.word	0x20000010

0801956c <malloc>:
 801956c:	4b02      	ldr	r3, [pc, #8]	@ (8019578 <malloc+0xc>)
 801956e:	4601      	mov	r1, r0
 8019570:	6818      	ldr	r0, [r3, #0]
 8019572:	f000 b82d 	b.w	80195d0 <_malloc_r>
 8019576:	bf00      	nop
 8019578:	200012a0 	.word	0x200012a0

0801957c <free>:
 801957c:	4b02      	ldr	r3, [pc, #8]	@ (8019588 <free+0xc>)
 801957e:	4601      	mov	r1, r0
 8019580:	6818      	ldr	r0, [r3, #0]
 8019582:	f000 bd6f 	b.w	801a064 <_free_r>
 8019586:	bf00      	nop
 8019588:	200012a0 	.word	0x200012a0

0801958c <sbrk_aligned>:
 801958c:	b570      	push	{r4, r5, r6, lr}
 801958e:	4e0f      	ldr	r6, [pc, #60]	@ (80195cc <sbrk_aligned+0x40>)
 8019590:	460c      	mov	r4, r1
 8019592:	6831      	ldr	r1, [r6, #0]
 8019594:	4605      	mov	r5, r0
 8019596:	b911      	cbnz	r1, 801959e <sbrk_aligned+0x12>
 8019598:	f000 fcd4 	bl	8019f44 <_sbrk_r>
 801959c:	6030      	str	r0, [r6, #0]
 801959e:	4621      	mov	r1, r4
 80195a0:	4628      	mov	r0, r5
 80195a2:	f000 fccf 	bl	8019f44 <_sbrk_r>
 80195a6:	1c43      	adds	r3, r0, #1
 80195a8:	d103      	bne.n	80195b2 <sbrk_aligned+0x26>
 80195aa:	f04f 34ff 	mov.w	r4, #4294967295
 80195ae:	4620      	mov	r0, r4
 80195b0:	bd70      	pop	{r4, r5, r6, pc}
 80195b2:	1cc4      	adds	r4, r0, #3
 80195b4:	f024 0403 	bic.w	r4, r4, #3
 80195b8:	42a0      	cmp	r0, r4
 80195ba:	d0f8      	beq.n	80195ae <sbrk_aligned+0x22>
 80195bc:	1a21      	subs	r1, r4, r0
 80195be:	4628      	mov	r0, r5
 80195c0:	f000 fcc0 	bl	8019f44 <_sbrk_r>
 80195c4:	3001      	adds	r0, #1
 80195c6:	d1f2      	bne.n	80195ae <sbrk_aligned+0x22>
 80195c8:	e7ef      	b.n	80195aa <sbrk_aligned+0x1e>
 80195ca:	bf00      	nop
 80195cc:	2000f2f8 	.word	0x2000f2f8

080195d0 <_malloc_r>:
 80195d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195d4:	1ccd      	adds	r5, r1, #3
 80195d6:	f025 0503 	bic.w	r5, r5, #3
 80195da:	3508      	adds	r5, #8
 80195dc:	2d0c      	cmp	r5, #12
 80195de:	bf38      	it	cc
 80195e0:	250c      	movcc	r5, #12
 80195e2:	2d00      	cmp	r5, #0
 80195e4:	4606      	mov	r6, r0
 80195e6:	db01      	blt.n	80195ec <_malloc_r+0x1c>
 80195e8:	42a9      	cmp	r1, r5
 80195ea:	d904      	bls.n	80195f6 <_malloc_r+0x26>
 80195ec:	230c      	movs	r3, #12
 80195ee:	6033      	str	r3, [r6, #0]
 80195f0:	2000      	movs	r0, #0
 80195f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80196cc <_malloc_r+0xfc>
 80195fa:	f000 f869 	bl	80196d0 <__malloc_lock>
 80195fe:	f8d8 3000 	ldr.w	r3, [r8]
 8019602:	461c      	mov	r4, r3
 8019604:	bb44      	cbnz	r4, 8019658 <_malloc_r+0x88>
 8019606:	4629      	mov	r1, r5
 8019608:	4630      	mov	r0, r6
 801960a:	f7ff ffbf 	bl	801958c <sbrk_aligned>
 801960e:	1c43      	adds	r3, r0, #1
 8019610:	4604      	mov	r4, r0
 8019612:	d158      	bne.n	80196c6 <_malloc_r+0xf6>
 8019614:	f8d8 4000 	ldr.w	r4, [r8]
 8019618:	4627      	mov	r7, r4
 801961a:	2f00      	cmp	r7, #0
 801961c:	d143      	bne.n	80196a6 <_malloc_r+0xd6>
 801961e:	2c00      	cmp	r4, #0
 8019620:	d04b      	beq.n	80196ba <_malloc_r+0xea>
 8019622:	6823      	ldr	r3, [r4, #0]
 8019624:	4639      	mov	r1, r7
 8019626:	4630      	mov	r0, r6
 8019628:	eb04 0903 	add.w	r9, r4, r3
 801962c:	f000 fc8a 	bl	8019f44 <_sbrk_r>
 8019630:	4581      	cmp	r9, r0
 8019632:	d142      	bne.n	80196ba <_malloc_r+0xea>
 8019634:	6821      	ldr	r1, [r4, #0]
 8019636:	1a6d      	subs	r5, r5, r1
 8019638:	4629      	mov	r1, r5
 801963a:	4630      	mov	r0, r6
 801963c:	f7ff ffa6 	bl	801958c <sbrk_aligned>
 8019640:	3001      	adds	r0, #1
 8019642:	d03a      	beq.n	80196ba <_malloc_r+0xea>
 8019644:	6823      	ldr	r3, [r4, #0]
 8019646:	442b      	add	r3, r5
 8019648:	6023      	str	r3, [r4, #0]
 801964a:	f8d8 3000 	ldr.w	r3, [r8]
 801964e:	685a      	ldr	r2, [r3, #4]
 8019650:	bb62      	cbnz	r2, 80196ac <_malloc_r+0xdc>
 8019652:	f8c8 7000 	str.w	r7, [r8]
 8019656:	e00f      	b.n	8019678 <_malloc_r+0xa8>
 8019658:	6822      	ldr	r2, [r4, #0]
 801965a:	1b52      	subs	r2, r2, r5
 801965c:	d420      	bmi.n	80196a0 <_malloc_r+0xd0>
 801965e:	2a0b      	cmp	r2, #11
 8019660:	d917      	bls.n	8019692 <_malloc_r+0xc2>
 8019662:	1961      	adds	r1, r4, r5
 8019664:	42a3      	cmp	r3, r4
 8019666:	6025      	str	r5, [r4, #0]
 8019668:	bf18      	it	ne
 801966a:	6059      	strne	r1, [r3, #4]
 801966c:	6863      	ldr	r3, [r4, #4]
 801966e:	bf08      	it	eq
 8019670:	f8c8 1000 	streq.w	r1, [r8]
 8019674:	5162      	str	r2, [r4, r5]
 8019676:	604b      	str	r3, [r1, #4]
 8019678:	4630      	mov	r0, r6
 801967a:	f000 f82f 	bl	80196dc <__malloc_unlock>
 801967e:	f104 000b 	add.w	r0, r4, #11
 8019682:	1d23      	adds	r3, r4, #4
 8019684:	f020 0007 	bic.w	r0, r0, #7
 8019688:	1ac2      	subs	r2, r0, r3
 801968a:	bf1c      	itt	ne
 801968c:	1a1b      	subne	r3, r3, r0
 801968e:	50a3      	strne	r3, [r4, r2]
 8019690:	e7af      	b.n	80195f2 <_malloc_r+0x22>
 8019692:	6862      	ldr	r2, [r4, #4]
 8019694:	42a3      	cmp	r3, r4
 8019696:	bf0c      	ite	eq
 8019698:	f8c8 2000 	streq.w	r2, [r8]
 801969c:	605a      	strne	r2, [r3, #4]
 801969e:	e7eb      	b.n	8019678 <_malloc_r+0xa8>
 80196a0:	4623      	mov	r3, r4
 80196a2:	6864      	ldr	r4, [r4, #4]
 80196a4:	e7ae      	b.n	8019604 <_malloc_r+0x34>
 80196a6:	463c      	mov	r4, r7
 80196a8:	687f      	ldr	r7, [r7, #4]
 80196aa:	e7b6      	b.n	801961a <_malloc_r+0x4a>
 80196ac:	461a      	mov	r2, r3
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	42a3      	cmp	r3, r4
 80196b2:	d1fb      	bne.n	80196ac <_malloc_r+0xdc>
 80196b4:	2300      	movs	r3, #0
 80196b6:	6053      	str	r3, [r2, #4]
 80196b8:	e7de      	b.n	8019678 <_malloc_r+0xa8>
 80196ba:	230c      	movs	r3, #12
 80196bc:	6033      	str	r3, [r6, #0]
 80196be:	4630      	mov	r0, r6
 80196c0:	f000 f80c 	bl	80196dc <__malloc_unlock>
 80196c4:	e794      	b.n	80195f0 <_malloc_r+0x20>
 80196c6:	6005      	str	r5, [r0, #0]
 80196c8:	e7d6      	b.n	8019678 <_malloc_r+0xa8>
 80196ca:	bf00      	nop
 80196cc:	2000f2fc 	.word	0x2000f2fc

080196d0 <__malloc_lock>:
 80196d0:	4801      	ldr	r0, [pc, #4]	@ (80196d8 <__malloc_lock+0x8>)
 80196d2:	f000 bc84 	b.w	8019fde <__retarget_lock_acquire_recursive>
 80196d6:	bf00      	nop
 80196d8:	2000f441 	.word	0x2000f441

080196dc <__malloc_unlock>:
 80196dc:	4801      	ldr	r0, [pc, #4]	@ (80196e4 <__malloc_unlock+0x8>)
 80196de:	f000 bc7f 	b.w	8019fe0 <__retarget_lock_release_recursive>
 80196e2:	bf00      	nop
 80196e4:	2000f441 	.word	0x2000f441

080196e8 <srand>:
 80196e8:	b538      	push	{r3, r4, r5, lr}
 80196ea:	4b10      	ldr	r3, [pc, #64]	@ (801972c <srand+0x44>)
 80196ec:	681d      	ldr	r5, [r3, #0]
 80196ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80196f0:	4604      	mov	r4, r0
 80196f2:	b9b3      	cbnz	r3, 8019722 <srand+0x3a>
 80196f4:	2018      	movs	r0, #24
 80196f6:	f7ff ff39 	bl	801956c <malloc>
 80196fa:	4602      	mov	r2, r0
 80196fc:	6328      	str	r0, [r5, #48]	@ 0x30
 80196fe:	b920      	cbnz	r0, 801970a <srand+0x22>
 8019700:	4b0b      	ldr	r3, [pc, #44]	@ (8019730 <srand+0x48>)
 8019702:	480c      	ldr	r0, [pc, #48]	@ (8019734 <srand+0x4c>)
 8019704:	2146      	movs	r1, #70	@ 0x46
 8019706:	f000 fc83 	bl	801a010 <__assert_func>
 801970a:	490b      	ldr	r1, [pc, #44]	@ (8019738 <srand+0x50>)
 801970c:	4b0b      	ldr	r3, [pc, #44]	@ (801973c <srand+0x54>)
 801970e:	e9c0 1300 	strd	r1, r3, [r0]
 8019712:	4b0b      	ldr	r3, [pc, #44]	@ (8019740 <srand+0x58>)
 8019714:	6083      	str	r3, [r0, #8]
 8019716:	230b      	movs	r3, #11
 8019718:	8183      	strh	r3, [r0, #12]
 801971a:	2100      	movs	r1, #0
 801971c:	2001      	movs	r0, #1
 801971e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019722:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019724:	2200      	movs	r2, #0
 8019726:	611c      	str	r4, [r3, #16]
 8019728:	615a      	str	r2, [r3, #20]
 801972a:	bd38      	pop	{r3, r4, r5, pc}
 801972c:	200012a0 	.word	0x200012a0
 8019730:	0801be40 	.word	0x0801be40
 8019734:	0801be57 	.word	0x0801be57
 8019738:	abcd330e 	.word	0xabcd330e
 801973c:	e66d1234 	.word	0xe66d1234
 8019740:	0005deec 	.word	0x0005deec

08019744 <rand>:
 8019744:	4b16      	ldr	r3, [pc, #88]	@ (80197a0 <rand+0x5c>)
 8019746:	b510      	push	{r4, lr}
 8019748:	681c      	ldr	r4, [r3, #0]
 801974a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801974c:	b9b3      	cbnz	r3, 801977c <rand+0x38>
 801974e:	2018      	movs	r0, #24
 8019750:	f7ff ff0c 	bl	801956c <malloc>
 8019754:	4602      	mov	r2, r0
 8019756:	6320      	str	r0, [r4, #48]	@ 0x30
 8019758:	b920      	cbnz	r0, 8019764 <rand+0x20>
 801975a:	4b12      	ldr	r3, [pc, #72]	@ (80197a4 <rand+0x60>)
 801975c:	4812      	ldr	r0, [pc, #72]	@ (80197a8 <rand+0x64>)
 801975e:	2152      	movs	r1, #82	@ 0x52
 8019760:	f000 fc56 	bl	801a010 <__assert_func>
 8019764:	4911      	ldr	r1, [pc, #68]	@ (80197ac <rand+0x68>)
 8019766:	4b12      	ldr	r3, [pc, #72]	@ (80197b0 <rand+0x6c>)
 8019768:	e9c0 1300 	strd	r1, r3, [r0]
 801976c:	4b11      	ldr	r3, [pc, #68]	@ (80197b4 <rand+0x70>)
 801976e:	6083      	str	r3, [r0, #8]
 8019770:	230b      	movs	r3, #11
 8019772:	8183      	strh	r3, [r0, #12]
 8019774:	2100      	movs	r1, #0
 8019776:	2001      	movs	r0, #1
 8019778:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801977c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801977e:	480e      	ldr	r0, [pc, #56]	@ (80197b8 <rand+0x74>)
 8019780:	690b      	ldr	r3, [r1, #16]
 8019782:	694c      	ldr	r4, [r1, #20]
 8019784:	4a0d      	ldr	r2, [pc, #52]	@ (80197bc <rand+0x78>)
 8019786:	4358      	muls	r0, r3
 8019788:	fb02 0004 	mla	r0, r2, r4, r0
 801978c:	fba3 3202 	umull	r3, r2, r3, r2
 8019790:	3301      	adds	r3, #1
 8019792:	eb40 0002 	adc.w	r0, r0, r2
 8019796:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801979a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801979e:	bd10      	pop	{r4, pc}
 80197a0:	200012a0 	.word	0x200012a0
 80197a4:	0801be40 	.word	0x0801be40
 80197a8:	0801be57 	.word	0x0801be57
 80197ac:	abcd330e 	.word	0xabcd330e
 80197b0:	e66d1234 	.word	0xe66d1234
 80197b4:	0005deec 	.word	0x0005deec
 80197b8:	5851f42d 	.word	0x5851f42d
 80197bc:	4c957f2d 	.word	0x4c957f2d

080197c0 <realloc>:
 80197c0:	4b02      	ldr	r3, [pc, #8]	@ (80197cc <realloc+0xc>)
 80197c2:	460a      	mov	r2, r1
 80197c4:	4601      	mov	r1, r0
 80197c6:	6818      	ldr	r0, [r3, #0]
 80197c8:	f000 b802 	b.w	80197d0 <_realloc_r>
 80197cc:	200012a0 	.word	0x200012a0

080197d0 <_realloc_r>:
 80197d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197d4:	4607      	mov	r7, r0
 80197d6:	4614      	mov	r4, r2
 80197d8:	460d      	mov	r5, r1
 80197da:	b921      	cbnz	r1, 80197e6 <_realloc_r+0x16>
 80197dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197e0:	4611      	mov	r1, r2
 80197e2:	f7ff bef5 	b.w	80195d0 <_malloc_r>
 80197e6:	b92a      	cbnz	r2, 80197f4 <_realloc_r+0x24>
 80197e8:	f000 fc3c 	bl	801a064 <_free_r>
 80197ec:	4625      	mov	r5, r4
 80197ee:	4628      	mov	r0, r5
 80197f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197f4:	f000 fc80 	bl	801a0f8 <_malloc_usable_size_r>
 80197f8:	4284      	cmp	r4, r0
 80197fa:	4606      	mov	r6, r0
 80197fc:	d802      	bhi.n	8019804 <_realloc_r+0x34>
 80197fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019802:	d8f4      	bhi.n	80197ee <_realloc_r+0x1e>
 8019804:	4621      	mov	r1, r4
 8019806:	4638      	mov	r0, r7
 8019808:	f7ff fee2 	bl	80195d0 <_malloc_r>
 801980c:	4680      	mov	r8, r0
 801980e:	b908      	cbnz	r0, 8019814 <_realloc_r+0x44>
 8019810:	4645      	mov	r5, r8
 8019812:	e7ec      	b.n	80197ee <_realloc_r+0x1e>
 8019814:	42b4      	cmp	r4, r6
 8019816:	4622      	mov	r2, r4
 8019818:	4629      	mov	r1, r5
 801981a:	bf28      	it	cs
 801981c:	4632      	movcs	r2, r6
 801981e:	f000 fbe8 	bl	8019ff2 <memcpy>
 8019822:	4629      	mov	r1, r5
 8019824:	4638      	mov	r0, r7
 8019826:	f000 fc1d 	bl	801a064 <_free_r>
 801982a:	e7f1      	b.n	8019810 <_realloc_r+0x40>

0801982c <_strtoul_l.isra.0>:
 801982c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019830:	4e34      	ldr	r6, [pc, #208]	@ (8019904 <_strtoul_l.isra.0+0xd8>)
 8019832:	4686      	mov	lr, r0
 8019834:	460d      	mov	r5, r1
 8019836:	4628      	mov	r0, r5
 8019838:	f815 4b01 	ldrb.w	r4, [r5], #1
 801983c:	5d37      	ldrb	r7, [r6, r4]
 801983e:	f017 0708 	ands.w	r7, r7, #8
 8019842:	d1f8      	bne.n	8019836 <_strtoul_l.isra.0+0xa>
 8019844:	2c2d      	cmp	r4, #45	@ 0x2d
 8019846:	d110      	bne.n	801986a <_strtoul_l.isra.0+0x3e>
 8019848:	782c      	ldrb	r4, [r5, #0]
 801984a:	2701      	movs	r7, #1
 801984c:	1c85      	adds	r5, r0, #2
 801984e:	f033 0010 	bics.w	r0, r3, #16
 8019852:	d115      	bne.n	8019880 <_strtoul_l.isra.0+0x54>
 8019854:	2c30      	cmp	r4, #48	@ 0x30
 8019856:	d10d      	bne.n	8019874 <_strtoul_l.isra.0+0x48>
 8019858:	7828      	ldrb	r0, [r5, #0]
 801985a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801985e:	2858      	cmp	r0, #88	@ 0x58
 8019860:	d108      	bne.n	8019874 <_strtoul_l.isra.0+0x48>
 8019862:	786c      	ldrb	r4, [r5, #1]
 8019864:	3502      	adds	r5, #2
 8019866:	2310      	movs	r3, #16
 8019868:	e00a      	b.n	8019880 <_strtoul_l.isra.0+0x54>
 801986a:	2c2b      	cmp	r4, #43	@ 0x2b
 801986c:	bf04      	itt	eq
 801986e:	782c      	ldrbeq	r4, [r5, #0]
 8019870:	1c85      	addeq	r5, r0, #2
 8019872:	e7ec      	b.n	801984e <_strtoul_l.isra.0+0x22>
 8019874:	2b00      	cmp	r3, #0
 8019876:	d1f6      	bne.n	8019866 <_strtoul_l.isra.0+0x3a>
 8019878:	2c30      	cmp	r4, #48	@ 0x30
 801987a:	bf14      	ite	ne
 801987c:	230a      	movne	r3, #10
 801987e:	2308      	moveq	r3, #8
 8019880:	f04f 38ff 	mov.w	r8, #4294967295
 8019884:	2600      	movs	r6, #0
 8019886:	fbb8 f8f3 	udiv	r8, r8, r3
 801988a:	fb03 f908 	mul.w	r9, r3, r8
 801988e:	ea6f 0909 	mvn.w	r9, r9
 8019892:	4630      	mov	r0, r6
 8019894:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019898:	f1bc 0f09 	cmp.w	ip, #9
 801989c:	d810      	bhi.n	80198c0 <_strtoul_l.isra.0+0x94>
 801989e:	4664      	mov	r4, ip
 80198a0:	42a3      	cmp	r3, r4
 80198a2:	dd1e      	ble.n	80198e2 <_strtoul_l.isra.0+0xb6>
 80198a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80198a8:	d007      	beq.n	80198ba <_strtoul_l.isra.0+0x8e>
 80198aa:	4580      	cmp	r8, r0
 80198ac:	d316      	bcc.n	80198dc <_strtoul_l.isra.0+0xb0>
 80198ae:	d101      	bne.n	80198b4 <_strtoul_l.isra.0+0x88>
 80198b0:	45a1      	cmp	r9, r4
 80198b2:	db13      	blt.n	80198dc <_strtoul_l.isra.0+0xb0>
 80198b4:	fb00 4003 	mla	r0, r0, r3, r4
 80198b8:	2601      	movs	r6, #1
 80198ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80198be:	e7e9      	b.n	8019894 <_strtoul_l.isra.0+0x68>
 80198c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80198c4:	f1bc 0f19 	cmp.w	ip, #25
 80198c8:	d801      	bhi.n	80198ce <_strtoul_l.isra.0+0xa2>
 80198ca:	3c37      	subs	r4, #55	@ 0x37
 80198cc:	e7e8      	b.n	80198a0 <_strtoul_l.isra.0+0x74>
 80198ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80198d2:	f1bc 0f19 	cmp.w	ip, #25
 80198d6:	d804      	bhi.n	80198e2 <_strtoul_l.isra.0+0xb6>
 80198d8:	3c57      	subs	r4, #87	@ 0x57
 80198da:	e7e1      	b.n	80198a0 <_strtoul_l.isra.0+0x74>
 80198dc:	f04f 36ff 	mov.w	r6, #4294967295
 80198e0:	e7eb      	b.n	80198ba <_strtoul_l.isra.0+0x8e>
 80198e2:	1c73      	adds	r3, r6, #1
 80198e4:	d106      	bne.n	80198f4 <_strtoul_l.isra.0+0xc8>
 80198e6:	2322      	movs	r3, #34	@ 0x22
 80198e8:	f8ce 3000 	str.w	r3, [lr]
 80198ec:	4630      	mov	r0, r6
 80198ee:	b932      	cbnz	r2, 80198fe <_strtoul_l.isra.0+0xd2>
 80198f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198f4:	b107      	cbz	r7, 80198f8 <_strtoul_l.isra.0+0xcc>
 80198f6:	4240      	negs	r0, r0
 80198f8:	2a00      	cmp	r2, #0
 80198fa:	d0f9      	beq.n	80198f0 <_strtoul_l.isra.0+0xc4>
 80198fc:	b106      	cbz	r6, 8019900 <_strtoul_l.isra.0+0xd4>
 80198fe:	1e69      	subs	r1, r5, #1
 8019900:	6011      	str	r1, [r2, #0]
 8019902:	e7f5      	b.n	80198f0 <_strtoul_l.isra.0+0xc4>
 8019904:	0801bf1f 	.word	0x0801bf1f

08019908 <strtoul>:
 8019908:	4613      	mov	r3, r2
 801990a:	460a      	mov	r2, r1
 801990c:	4601      	mov	r1, r0
 801990e:	4802      	ldr	r0, [pc, #8]	@ (8019918 <strtoul+0x10>)
 8019910:	6800      	ldr	r0, [r0, #0]
 8019912:	f7ff bf8b 	b.w	801982c <_strtoul_l.isra.0>
 8019916:	bf00      	nop
 8019918:	200012a0 	.word	0x200012a0

0801991c <std>:
 801991c:	2300      	movs	r3, #0
 801991e:	b510      	push	{r4, lr}
 8019920:	4604      	mov	r4, r0
 8019922:	e9c0 3300 	strd	r3, r3, [r0]
 8019926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801992a:	6083      	str	r3, [r0, #8]
 801992c:	8181      	strh	r1, [r0, #12]
 801992e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019930:	81c2      	strh	r2, [r0, #14]
 8019932:	6183      	str	r3, [r0, #24]
 8019934:	4619      	mov	r1, r3
 8019936:	2208      	movs	r2, #8
 8019938:	305c      	adds	r0, #92	@ 0x5c
 801993a:	f000 fa7f 	bl	8019e3c <memset>
 801993e:	4b0d      	ldr	r3, [pc, #52]	@ (8019974 <std+0x58>)
 8019940:	6263      	str	r3, [r4, #36]	@ 0x24
 8019942:	4b0d      	ldr	r3, [pc, #52]	@ (8019978 <std+0x5c>)
 8019944:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019946:	4b0d      	ldr	r3, [pc, #52]	@ (801997c <std+0x60>)
 8019948:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801994a:	4b0d      	ldr	r3, [pc, #52]	@ (8019980 <std+0x64>)
 801994c:	6323      	str	r3, [r4, #48]	@ 0x30
 801994e:	4b0d      	ldr	r3, [pc, #52]	@ (8019984 <std+0x68>)
 8019950:	6224      	str	r4, [r4, #32]
 8019952:	429c      	cmp	r4, r3
 8019954:	d006      	beq.n	8019964 <std+0x48>
 8019956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801995a:	4294      	cmp	r4, r2
 801995c:	d002      	beq.n	8019964 <std+0x48>
 801995e:	33d0      	adds	r3, #208	@ 0xd0
 8019960:	429c      	cmp	r4, r3
 8019962:	d105      	bne.n	8019970 <std+0x54>
 8019964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801996c:	f000 bb36 	b.w	8019fdc <__retarget_lock_init_recursive>
 8019970:	bd10      	pop	{r4, pc}
 8019972:	bf00      	nop
 8019974:	08019bc1 	.word	0x08019bc1
 8019978:	08019be3 	.word	0x08019be3
 801997c:	08019c1b 	.word	0x08019c1b
 8019980:	08019c3f 	.word	0x08019c3f
 8019984:	2000f300 	.word	0x2000f300

08019988 <stdio_exit_handler>:
 8019988:	4a02      	ldr	r2, [pc, #8]	@ (8019994 <stdio_exit_handler+0xc>)
 801998a:	4903      	ldr	r1, [pc, #12]	@ (8019998 <stdio_exit_handler+0x10>)
 801998c:	4803      	ldr	r0, [pc, #12]	@ (801999c <stdio_exit_handler+0x14>)
 801998e:	f000 b869 	b.w	8019a64 <_fwalk_sglue>
 8019992:	bf00      	nop
 8019994:	20001294 	.word	0x20001294
 8019998:	0801a7d9 	.word	0x0801a7d9
 801999c:	200012a4 	.word	0x200012a4

080199a0 <cleanup_stdio>:
 80199a0:	6841      	ldr	r1, [r0, #4]
 80199a2:	4b0c      	ldr	r3, [pc, #48]	@ (80199d4 <cleanup_stdio+0x34>)
 80199a4:	4299      	cmp	r1, r3
 80199a6:	b510      	push	{r4, lr}
 80199a8:	4604      	mov	r4, r0
 80199aa:	d001      	beq.n	80199b0 <cleanup_stdio+0x10>
 80199ac:	f000 ff14 	bl	801a7d8 <_fflush_r>
 80199b0:	68a1      	ldr	r1, [r4, #8]
 80199b2:	4b09      	ldr	r3, [pc, #36]	@ (80199d8 <cleanup_stdio+0x38>)
 80199b4:	4299      	cmp	r1, r3
 80199b6:	d002      	beq.n	80199be <cleanup_stdio+0x1e>
 80199b8:	4620      	mov	r0, r4
 80199ba:	f000 ff0d 	bl	801a7d8 <_fflush_r>
 80199be:	68e1      	ldr	r1, [r4, #12]
 80199c0:	4b06      	ldr	r3, [pc, #24]	@ (80199dc <cleanup_stdio+0x3c>)
 80199c2:	4299      	cmp	r1, r3
 80199c4:	d004      	beq.n	80199d0 <cleanup_stdio+0x30>
 80199c6:	4620      	mov	r0, r4
 80199c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199cc:	f000 bf04 	b.w	801a7d8 <_fflush_r>
 80199d0:	bd10      	pop	{r4, pc}
 80199d2:	bf00      	nop
 80199d4:	2000f300 	.word	0x2000f300
 80199d8:	2000f368 	.word	0x2000f368
 80199dc:	2000f3d0 	.word	0x2000f3d0

080199e0 <global_stdio_init.part.0>:
 80199e0:	b510      	push	{r4, lr}
 80199e2:	4b0b      	ldr	r3, [pc, #44]	@ (8019a10 <global_stdio_init.part.0+0x30>)
 80199e4:	4c0b      	ldr	r4, [pc, #44]	@ (8019a14 <global_stdio_init.part.0+0x34>)
 80199e6:	4a0c      	ldr	r2, [pc, #48]	@ (8019a18 <global_stdio_init.part.0+0x38>)
 80199e8:	601a      	str	r2, [r3, #0]
 80199ea:	4620      	mov	r0, r4
 80199ec:	2200      	movs	r2, #0
 80199ee:	2104      	movs	r1, #4
 80199f0:	f7ff ff94 	bl	801991c <std>
 80199f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80199f8:	2201      	movs	r2, #1
 80199fa:	2109      	movs	r1, #9
 80199fc:	f7ff ff8e 	bl	801991c <std>
 8019a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019a04:	2202      	movs	r2, #2
 8019a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a0a:	2112      	movs	r1, #18
 8019a0c:	f7ff bf86 	b.w	801991c <std>
 8019a10:	2000f438 	.word	0x2000f438
 8019a14:	2000f300 	.word	0x2000f300
 8019a18:	08019989 	.word	0x08019989

08019a1c <__sfp_lock_acquire>:
 8019a1c:	4801      	ldr	r0, [pc, #4]	@ (8019a24 <__sfp_lock_acquire+0x8>)
 8019a1e:	f000 bade 	b.w	8019fde <__retarget_lock_acquire_recursive>
 8019a22:	bf00      	nop
 8019a24:	2000f442 	.word	0x2000f442

08019a28 <__sfp_lock_release>:
 8019a28:	4801      	ldr	r0, [pc, #4]	@ (8019a30 <__sfp_lock_release+0x8>)
 8019a2a:	f000 bad9 	b.w	8019fe0 <__retarget_lock_release_recursive>
 8019a2e:	bf00      	nop
 8019a30:	2000f442 	.word	0x2000f442

08019a34 <__sinit>:
 8019a34:	b510      	push	{r4, lr}
 8019a36:	4604      	mov	r4, r0
 8019a38:	f7ff fff0 	bl	8019a1c <__sfp_lock_acquire>
 8019a3c:	6a23      	ldr	r3, [r4, #32]
 8019a3e:	b11b      	cbz	r3, 8019a48 <__sinit+0x14>
 8019a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a44:	f7ff bff0 	b.w	8019a28 <__sfp_lock_release>
 8019a48:	4b04      	ldr	r3, [pc, #16]	@ (8019a5c <__sinit+0x28>)
 8019a4a:	6223      	str	r3, [r4, #32]
 8019a4c:	4b04      	ldr	r3, [pc, #16]	@ (8019a60 <__sinit+0x2c>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d1f5      	bne.n	8019a40 <__sinit+0xc>
 8019a54:	f7ff ffc4 	bl	80199e0 <global_stdio_init.part.0>
 8019a58:	e7f2      	b.n	8019a40 <__sinit+0xc>
 8019a5a:	bf00      	nop
 8019a5c:	080199a1 	.word	0x080199a1
 8019a60:	2000f438 	.word	0x2000f438

08019a64 <_fwalk_sglue>:
 8019a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a68:	4607      	mov	r7, r0
 8019a6a:	4688      	mov	r8, r1
 8019a6c:	4614      	mov	r4, r2
 8019a6e:	2600      	movs	r6, #0
 8019a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019a74:	f1b9 0901 	subs.w	r9, r9, #1
 8019a78:	d505      	bpl.n	8019a86 <_fwalk_sglue+0x22>
 8019a7a:	6824      	ldr	r4, [r4, #0]
 8019a7c:	2c00      	cmp	r4, #0
 8019a7e:	d1f7      	bne.n	8019a70 <_fwalk_sglue+0xc>
 8019a80:	4630      	mov	r0, r6
 8019a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a86:	89ab      	ldrh	r3, [r5, #12]
 8019a88:	2b01      	cmp	r3, #1
 8019a8a:	d907      	bls.n	8019a9c <_fwalk_sglue+0x38>
 8019a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019a90:	3301      	adds	r3, #1
 8019a92:	d003      	beq.n	8019a9c <_fwalk_sglue+0x38>
 8019a94:	4629      	mov	r1, r5
 8019a96:	4638      	mov	r0, r7
 8019a98:	47c0      	blx	r8
 8019a9a:	4306      	orrs	r6, r0
 8019a9c:	3568      	adds	r5, #104	@ 0x68
 8019a9e:	e7e9      	b.n	8019a74 <_fwalk_sglue+0x10>

08019aa0 <_fwrite_r>:
 8019aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019aa4:	9c08      	ldr	r4, [sp, #32]
 8019aa6:	468a      	mov	sl, r1
 8019aa8:	4690      	mov	r8, r2
 8019aaa:	fb02 f903 	mul.w	r9, r2, r3
 8019aae:	4606      	mov	r6, r0
 8019ab0:	b118      	cbz	r0, 8019aba <_fwrite_r+0x1a>
 8019ab2:	6a03      	ldr	r3, [r0, #32]
 8019ab4:	b90b      	cbnz	r3, 8019aba <_fwrite_r+0x1a>
 8019ab6:	f7ff ffbd 	bl	8019a34 <__sinit>
 8019aba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019abc:	07dd      	lsls	r5, r3, #31
 8019abe:	d405      	bmi.n	8019acc <_fwrite_r+0x2c>
 8019ac0:	89a3      	ldrh	r3, [r4, #12]
 8019ac2:	0598      	lsls	r0, r3, #22
 8019ac4:	d402      	bmi.n	8019acc <_fwrite_r+0x2c>
 8019ac6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019ac8:	f000 fa89 	bl	8019fde <__retarget_lock_acquire_recursive>
 8019acc:	89a3      	ldrh	r3, [r4, #12]
 8019ace:	0719      	lsls	r1, r3, #28
 8019ad0:	d516      	bpl.n	8019b00 <_fwrite_r+0x60>
 8019ad2:	6923      	ldr	r3, [r4, #16]
 8019ad4:	b1a3      	cbz	r3, 8019b00 <_fwrite_r+0x60>
 8019ad6:	2500      	movs	r5, #0
 8019ad8:	454d      	cmp	r5, r9
 8019ada:	d01f      	beq.n	8019b1c <_fwrite_r+0x7c>
 8019adc:	68a7      	ldr	r7, [r4, #8]
 8019ade:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019ae2:	3f01      	subs	r7, #1
 8019ae4:	2f00      	cmp	r7, #0
 8019ae6:	60a7      	str	r7, [r4, #8]
 8019ae8:	da04      	bge.n	8019af4 <_fwrite_r+0x54>
 8019aea:	69a3      	ldr	r3, [r4, #24]
 8019aec:	429f      	cmp	r7, r3
 8019aee:	db0f      	blt.n	8019b10 <_fwrite_r+0x70>
 8019af0:	290a      	cmp	r1, #10
 8019af2:	d00d      	beq.n	8019b10 <_fwrite_r+0x70>
 8019af4:	6823      	ldr	r3, [r4, #0]
 8019af6:	1c5a      	adds	r2, r3, #1
 8019af8:	6022      	str	r2, [r4, #0]
 8019afa:	7019      	strb	r1, [r3, #0]
 8019afc:	3501      	adds	r5, #1
 8019afe:	e7eb      	b.n	8019ad8 <_fwrite_r+0x38>
 8019b00:	4621      	mov	r1, r4
 8019b02:	4630      	mov	r0, r6
 8019b04:	f000 f91a 	bl	8019d3c <__swsetup_r>
 8019b08:	2800      	cmp	r0, #0
 8019b0a:	d0e4      	beq.n	8019ad6 <_fwrite_r+0x36>
 8019b0c:	2500      	movs	r5, #0
 8019b0e:	e005      	b.n	8019b1c <_fwrite_r+0x7c>
 8019b10:	4622      	mov	r2, r4
 8019b12:	4630      	mov	r0, r6
 8019b14:	f000 f8d4 	bl	8019cc0 <__swbuf_r>
 8019b18:	3001      	adds	r0, #1
 8019b1a:	d1ef      	bne.n	8019afc <_fwrite_r+0x5c>
 8019b1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019b1e:	07da      	lsls	r2, r3, #31
 8019b20:	d405      	bmi.n	8019b2e <_fwrite_r+0x8e>
 8019b22:	89a3      	ldrh	r3, [r4, #12]
 8019b24:	059b      	lsls	r3, r3, #22
 8019b26:	d402      	bmi.n	8019b2e <_fwrite_r+0x8e>
 8019b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b2a:	f000 fa59 	bl	8019fe0 <__retarget_lock_release_recursive>
 8019b2e:	fbb5 f0f8 	udiv	r0, r5, r8
 8019b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019b38 <fwrite>:
 8019b38:	b507      	push	{r0, r1, r2, lr}
 8019b3a:	9300      	str	r3, [sp, #0]
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	460a      	mov	r2, r1
 8019b40:	4601      	mov	r1, r0
 8019b42:	4803      	ldr	r0, [pc, #12]	@ (8019b50 <fwrite+0x18>)
 8019b44:	6800      	ldr	r0, [r0, #0]
 8019b46:	f7ff ffab 	bl	8019aa0 <_fwrite_r>
 8019b4a:	b003      	add	sp, #12
 8019b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b50:	200012a0 	.word	0x200012a0

08019b54 <sniprintf>:
 8019b54:	b40c      	push	{r2, r3}
 8019b56:	b530      	push	{r4, r5, lr}
 8019b58:	4b18      	ldr	r3, [pc, #96]	@ (8019bbc <sniprintf+0x68>)
 8019b5a:	1e0c      	subs	r4, r1, #0
 8019b5c:	681d      	ldr	r5, [r3, #0]
 8019b5e:	b09d      	sub	sp, #116	@ 0x74
 8019b60:	da08      	bge.n	8019b74 <sniprintf+0x20>
 8019b62:	238b      	movs	r3, #139	@ 0x8b
 8019b64:	602b      	str	r3, [r5, #0]
 8019b66:	f04f 30ff 	mov.w	r0, #4294967295
 8019b6a:	b01d      	add	sp, #116	@ 0x74
 8019b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b70:	b002      	add	sp, #8
 8019b72:	4770      	bx	lr
 8019b74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019b78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019b7c:	f04f 0300 	mov.w	r3, #0
 8019b80:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019b82:	bf14      	ite	ne
 8019b84:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019b88:	4623      	moveq	r3, r4
 8019b8a:	9304      	str	r3, [sp, #16]
 8019b8c:	9307      	str	r3, [sp, #28]
 8019b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019b92:	9002      	str	r0, [sp, #8]
 8019b94:	9006      	str	r0, [sp, #24]
 8019b96:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019b9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019b9c:	ab21      	add	r3, sp, #132	@ 0x84
 8019b9e:	a902      	add	r1, sp, #8
 8019ba0:	4628      	mov	r0, r5
 8019ba2:	9301      	str	r3, [sp, #4]
 8019ba4:	f000 fb0c 	bl	801a1c0 <_svfiprintf_r>
 8019ba8:	1c43      	adds	r3, r0, #1
 8019baa:	bfbc      	itt	lt
 8019bac:	238b      	movlt	r3, #139	@ 0x8b
 8019bae:	602b      	strlt	r3, [r5, #0]
 8019bb0:	2c00      	cmp	r4, #0
 8019bb2:	d0da      	beq.n	8019b6a <sniprintf+0x16>
 8019bb4:	9b02      	ldr	r3, [sp, #8]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	701a      	strb	r2, [r3, #0]
 8019bba:	e7d6      	b.n	8019b6a <sniprintf+0x16>
 8019bbc:	200012a0 	.word	0x200012a0

08019bc0 <__sread>:
 8019bc0:	b510      	push	{r4, lr}
 8019bc2:	460c      	mov	r4, r1
 8019bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bc8:	f000 f9aa 	bl	8019f20 <_read_r>
 8019bcc:	2800      	cmp	r0, #0
 8019bce:	bfab      	itete	ge
 8019bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8019bd4:	181b      	addge	r3, r3, r0
 8019bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019bda:	bfac      	ite	ge
 8019bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019bde:	81a3      	strhlt	r3, [r4, #12]
 8019be0:	bd10      	pop	{r4, pc}

08019be2 <__swrite>:
 8019be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019be6:	461f      	mov	r7, r3
 8019be8:	898b      	ldrh	r3, [r1, #12]
 8019bea:	05db      	lsls	r3, r3, #23
 8019bec:	4605      	mov	r5, r0
 8019bee:	460c      	mov	r4, r1
 8019bf0:	4616      	mov	r6, r2
 8019bf2:	d505      	bpl.n	8019c00 <__swrite+0x1e>
 8019bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bf8:	2302      	movs	r3, #2
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	f000 f97e 	bl	8019efc <_lseek_r>
 8019c00:	89a3      	ldrh	r3, [r4, #12]
 8019c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019c0a:	81a3      	strh	r3, [r4, #12]
 8019c0c:	4632      	mov	r2, r6
 8019c0e:	463b      	mov	r3, r7
 8019c10:	4628      	mov	r0, r5
 8019c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c16:	f000 b9a5 	b.w	8019f64 <_write_r>

08019c1a <__sseek>:
 8019c1a:	b510      	push	{r4, lr}
 8019c1c:	460c      	mov	r4, r1
 8019c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c22:	f000 f96b 	bl	8019efc <_lseek_r>
 8019c26:	1c43      	adds	r3, r0, #1
 8019c28:	89a3      	ldrh	r3, [r4, #12]
 8019c2a:	bf15      	itete	ne
 8019c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019c36:	81a3      	strheq	r3, [r4, #12]
 8019c38:	bf18      	it	ne
 8019c3a:	81a3      	strhne	r3, [r4, #12]
 8019c3c:	bd10      	pop	{r4, pc}

08019c3e <__sclose>:
 8019c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c42:	f000 b94b 	b.w	8019edc <_close_r>

08019c46 <_vsniprintf_r>:
 8019c46:	b530      	push	{r4, r5, lr}
 8019c48:	4614      	mov	r4, r2
 8019c4a:	2c00      	cmp	r4, #0
 8019c4c:	b09b      	sub	sp, #108	@ 0x6c
 8019c4e:	4605      	mov	r5, r0
 8019c50:	461a      	mov	r2, r3
 8019c52:	da05      	bge.n	8019c60 <_vsniprintf_r+0x1a>
 8019c54:	238b      	movs	r3, #139	@ 0x8b
 8019c56:	6003      	str	r3, [r0, #0]
 8019c58:	f04f 30ff 	mov.w	r0, #4294967295
 8019c5c:	b01b      	add	sp, #108	@ 0x6c
 8019c5e:	bd30      	pop	{r4, r5, pc}
 8019c60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019c64:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019c68:	f04f 0300 	mov.w	r3, #0
 8019c6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8019c6e:	bf14      	ite	ne
 8019c70:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019c74:	4623      	moveq	r3, r4
 8019c76:	9302      	str	r3, [sp, #8]
 8019c78:	9305      	str	r3, [sp, #20]
 8019c7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c7e:	9100      	str	r1, [sp, #0]
 8019c80:	9104      	str	r1, [sp, #16]
 8019c82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019c86:	4669      	mov	r1, sp
 8019c88:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019c8a:	f000 fa99 	bl	801a1c0 <_svfiprintf_r>
 8019c8e:	1c43      	adds	r3, r0, #1
 8019c90:	bfbc      	itt	lt
 8019c92:	238b      	movlt	r3, #139	@ 0x8b
 8019c94:	602b      	strlt	r3, [r5, #0]
 8019c96:	2c00      	cmp	r4, #0
 8019c98:	d0e0      	beq.n	8019c5c <_vsniprintf_r+0x16>
 8019c9a:	9b00      	ldr	r3, [sp, #0]
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	701a      	strb	r2, [r3, #0]
 8019ca0:	e7dc      	b.n	8019c5c <_vsniprintf_r+0x16>
	...

08019ca4 <vsniprintf>:
 8019ca4:	b507      	push	{r0, r1, r2, lr}
 8019ca6:	9300      	str	r3, [sp, #0]
 8019ca8:	4613      	mov	r3, r2
 8019caa:	460a      	mov	r2, r1
 8019cac:	4601      	mov	r1, r0
 8019cae:	4803      	ldr	r0, [pc, #12]	@ (8019cbc <vsniprintf+0x18>)
 8019cb0:	6800      	ldr	r0, [r0, #0]
 8019cb2:	f7ff ffc8 	bl	8019c46 <_vsniprintf_r>
 8019cb6:	b003      	add	sp, #12
 8019cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019cbc:	200012a0 	.word	0x200012a0

08019cc0 <__swbuf_r>:
 8019cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cc2:	460e      	mov	r6, r1
 8019cc4:	4614      	mov	r4, r2
 8019cc6:	4605      	mov	r5, r0
 8019cc8:	b118      	cbz	r0, 8019cd2 <__swbuf_r+0x12>
 8019cca:	6a03      	ldr	r3, [r0, #32]
 8019ccc:	b90b      	cbnz	r3, 8019cd2 <__swbuf_r+0x12>
 8019cce:	f7ff feb1 	bl	8019a34 <__sinit>
 8019cd2:	69a3      	ldr	r3, [r4, #24]
 8019cd4:	60a3      	str	r3, [r4, #8]
 8019cd6:	89a3      	ldrh	r3, [r4, #12]
 8019cd8:	071a      	lsls	r2, r3, #28
 8019cda:	d501      	bpl.n	8019ce0 <__swbuf_r+0x20>
 8019cdc:	6923      	ldr	r3, [r4, #16]
 8019cde:	b943      	cbnz	r3, 8019cf2 <__swbuf_r+0x32>
 8019ce0:	4621      	mov	r1, r4
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	f000 f82a 	bl	8019d3c <__swsetup_r>
 8019ce8:	b118      	cbz	r0, 8019cf2 <__swbuf_r+0x32>
 8019cea:	f04f 37ff 	mov.w	r7, #4294967295
 8019cee:	4638      	mov	r0, r7
 8019cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cf2:	6823      	ldr	r3, [r4, #0]
 8019cf4:	6922      	ldr	r2, [r4, #16]
 8019cf6:	1a98      	subs	r0, r3, r2
 8019cf8:	6963      	ldr	r3, [r4, #20]
 8019cfa:	b2f6      	uxtb	r6, r6
 8019cfc:	4283      	cmp	r3, r0
 8019cfe:	4637      	mov	r7, r6
 8019d00:	dc05      	bgt.n	8019d0e <__swbuf_r+0x4e>
 8019d02:	4621      	mov	r1, r4
 8019d04:	4628      	mov	r0, r5
 8019d06:	f000 fd67 	bl	801a7d8 <_fflush_r>
 8019d0a:	2800      	cmp	r0, #0
 8019d0c:	d1ed      	bne.n	8019cea <__swbuf_r+0x2a>
 8019d0e:	68a3      	ldr	r3, [r4, #8]
 8019d10:	3b01      	subs	r3, #1
 8019d12:	60a3      	str	r3, [r4, #8]
 8019d14:	6823      	ldr	r3, [r4, #0]
 8019d16:	1c5a      	adds	r2, r3, #1
 8019d18:	6022      	str	r2, [r4, #0]
 8019d1a:	701e      	strb	r6, [r3, #0]
 8019d1c:	6962      	ldr	r2, [r4, #20]
 8019d1e:	1c43      	adds	r3, r0, #1
 8019d20:	429a      	cmp	r2, r3
 8019d22:	d004      	beq.n	8019d2e <__swbuf_r+0x6e>
 8019d24:	89a3      	ldrh	r3, [r4, #12]
 8019d26:	07db      	lsls	r3, r3, #31
 8019d28:	d5e1      	bpl.n	8019cee <__swbuf_r+0x2e>
 8019d2a:	2e0a      	cmp	r6, #10
 8019d2c:	d1df      	bne.n	8019cee <__swbuf_r+0x2e>
 8019d2e:	4621      	mov	r1, r4
 8019d30:	4628      	mov	r0, r5
 8019d32:	f000 fd51 	bl	801a7d8 <_fflush_r>
 8019d36:	2800      	cmp	r0, #0
 8019d38:	d0d9      	beq.n	8019cee <__swbuf_r+0x2e>
 8019d3a:	e7d6      	b.n	8019cea <__swbuf_r+0x2a>

08019d3c <__swsetup_r>:
 8019d3c:	b538      	push	{r3, r4, r5, lr}
 8019d3e:	4b29      	ldr	r3, [pc, #164]	@ (8019de4 <__swsetup_r+0xa8>)
 8019d40:	4605      	mov	r5, r0
 8019d42:	6818      	ldr	r0, [r3, #0]
 8019d44:	460c      	mov	r4, r1
 8019d46:	b118      	cbz	r0, 8019d50 <__swsetup_r+0x14>
 8019d48:	6a03      	ldr	r3, [r0, #32]
 8019d4a:	b90b      	cbnz	r3, 8019d50 <__swsetup_r+0x14>
 8019d4c:	f7ff fe72 	bl	8019a34 <__sinit>
 8019d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d54:	0719      	lsls	r1, r3, #28
 8019d56:	d422      	bmi.n	8019d9e <__swsetup_r+0x62>
 8019d58:	06da      	lsls	r2, r3, #27
 8019d5a:	d407      	bmi.n	8019d6c <__swsetup_r+0x30>
 8019d5c:	2209      	movs	r2, #9
 8019d5e:	602a      	str	r2, [r5, #0]
 8019d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d64:	81a3      	strh	r3, [r4, #12]
 8019d66:	f04f 30ff 	mov.w	r0, #4294967295
 8019d6a:	e033      	b.n	8019dd4 <__swsetup_r+0x98>
 8019d6c:	0758      	lsls	r0, r3, #29
 8019d6e:	d512      	bpl.n	8019d96 <__swsetup_r+0x5a>
 8019d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019d72:	b141      	cbz	r1, 8019d86 <__swsetup_r+0x4a>
 8019d74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019d78:	4299      	cmp	r1, r3
 8019d7a:	d002      	beq.n	8019d82 <__swsetup_r+0x46>
 8019d7c:	4628      	mov	r0, r5
 8019d7e:	f000 f971 	bl	801a064 <_free_r>
 8019d82:	2300      	movs	r3, #0
 8019d84:	6363      	str	r3, [r4, #52]	@ 0x34
 8019d86:	89a3      	ldrh	r3, [r4, #12]
 8019d88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019d8c:	81a3      	strh	r3, [r4, #12]
 8019d8e:	2300      	movs	r3, #0
 8019d90:	6063      	str	r3, [r4, #4]
 8019d92:	6923      	ldr	r3, [r4, #16]
 8019d94:	6023      	str	r3, [r4, #0]
 8019d96:	89a3      	ldrh	r3, [r4, #12]
 8019d98:	f043 0308 	orr.w	r3, r3, #8
 8019d9c:	81a3      	strh	r3, [r4, #12]
 8019d9e:	6923      	ldr	r3, [r4, #16]
 8019da0:	b94b      	cbnz	r3, 8019db6 <__swsetup_r+0x7a>
 8019da2:	89a3      	ldrh	r3, [r4, #12]
 8019da4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019dac:	d003      	beq.n	8019db6 <__swsetup_r+0x7a>
 8019dae:	4621      	mov	r1, r4
 8019db0:	4628      	mov	r0, r5
 8019db2:	f000 fd71 	bl	801a898 <__smakebuf_r>
 8019db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019dba:	f013 0201 	ands.w	r2, r3, #1
 8019dbe:	d00a      	beq.n	8019dd6 <__swsetup_r+0x9a>
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	60a2      	str	r2, [r4, #8]
 8019dc4:	6962      	ldr	r2, [r4, #20]
 8019dc6:	4252      	negs	r2, r2
 8019dc8:	61a2      	str	r2, [r4, #24]
 8019dca:	6922      	ldr	r2, [r4, #16]
 8019dcc:	b942      	cbnz	r2, 8019de0 <__swsetup_r+0xa4>
 8019dce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019dd2:	d1c5      	bne.n	8019d60 <__swsetup_r+0x24>
 8019dd4:	bd38      	pop	{r3, r4, r5, pc}
 8019dd6:	0799      	lsls	r1, r3, #30
 8019dd8:	bf58      	it	pl
 8019dda:	6962      	ldrpl	r2, [r4, #20]
 8019ddc:	60a2      	str	r2, [r4, #8]
 8019dde:	e7f4      	b.n	8019dca <__swsetup_r+0x8e>
 8019de0:	2000      	movs	r0, #0
 8019de2:	e7f7      	b.n	8019dd4 <__swsetup_r+0x98>
 8019de4:	200012a0 	.word	0x200012a0

08019de8 <memcmp>:
 8019de8:	b510      	push	{r4, lr}
 8019dea:	3901      	subs	r1, #1
 8019dec:	4402      	add	r2, r0
 8019dee:	4290      	cmp	r0, r2
 8019df0:	d101      	bne.n	8019df6 <memcmp+0xe>
 8019df2:	2000      	movs	r0, #0
 8019df4:	e005      	b.n	8019e02 <memcmp+0x1a>
 8019df6:	7803      	ldrb	r3, [r0, #0]
 8019df8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019dfc:	42a3      	cmp	r3, r4
 8019dfe:	d001      	beq.n	8019e04 <memcmp+0x1c>
 8019e00:	1b18      	subs	r0, r3, r4
 8019e02:	bd10      	pop	{r4, pc}
 8019e04:	3001      	adds	r0, #1
 8019e06:	e7f2      	b.n	8019dee <memcmp+0x6>

08019e08 <memmove>:
 8019e08:	4288      	cmp	r0, r1
 8019e0a:	b510      	push	{r4, lr}
 8019e0c:	eb01 0402 	add.w	r4, r1, r2
 8019e10:	d902      	bls.n	8019e18 <memmove+0x10>
 8019e12:	4284      	cmp	r4, r0
 8019e14:	4623      	mov	r3, r4
 8019e16:	d807      	bhi.n	8019e28 <memmove+0x20>
 8019e18:	1e43      	subs	r3, r0, #1
 8019e1a:	42a1      	cmp	r1, r4
 8019e1c:	d008      	beq.n	8019e30 <memmove+0x28>
 8019e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019e26:	e7f8      	b.n	8019e1a <memmove+0x12>
 8019e28:	4402      	add	r2, r0
 8019e2a:	4601      	mov	r1, r0
 8019e2c:	428a      	cmp	r2, r1
 8019e2e:	d100      	bne.n	8019e32 <memmove+0x2a>
 8019e30:	bd10      	pop	{r4, pc}
 8019e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019e3a:	e7f7      	b.n	8019e2c <memmove+0x24>

08019e3c <memset>:
 8019e3c:	4402      	add	r2, r0
 8019e3e:	4603      	mov	r3, r0
 8019e40:	4293      	cmp	r3, r2
 8019e42:	d100      	bne.n	8019e46 <memset+0xa>
 8019e44:	4770      	bx	lr
 8019e46:	f803 1b01 	strb.w	r1, [r3], #1
 8019e4a:	e7f9      	b.n	8019e40 <memset+0x4>

08019e4c <strchr>:
 8019e4c:	b2c9      	uxtb	r1, r1
 8019e4e:	4603      	mov	r3, r0
 8019e50:	4618      	mov	r0, r3
 8019e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e56:	b112      	cbz	r2, 8019e5e <strchr+0x12>
 8019e58:	428a      	cmp	r2, r1
 8019e5a:	d1f9      	bne.n	8019e50 <strchr+0x4>
 8019e5c:	4770      	bx	lr
 8019e5e:	2900      	cmp	r1, #0
 8019e60:	bf18      	it	ne
 8019e62:	2000      	movne	r0, #0
 8019e64:	4770      	bx	lr

08019e66 <strncmp>:
 8019e66:	b510      	push	{r4, lr}
 8019e68:	b16a      	cbz	r2, 8019e86 <strncmp+0x20>
 8019e6a:	3901      	subs	r1, #1
 8019e6c:	1884      	adds	r4, r0, r2
 8019e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019e76:	429a      	cmp	r2, r3
 8019e78:	d103      	bne.n	8019e82 <strncmp+0x1c>
 8019e7a:	42a0      	cmp	r0, r4
 8019e7c:	d001      	beq.n	8019e82 <strncmp+0x1c>
 8019e7e:	2a00      	cmp	r2, #0
 8019e80:	d1f5      	bne.n	8019e6e <strncmp+0x8>
 8019e82:	1ad0      	subs	r0, r2, r3
 8019e84:	bd10      	pop	{r4, pc}
 8019e86:	4610      	mov	r0, r2
 8019e88:	e7fc      	b.n	8019e84 <strncmp+0x1e>

08019e8a <strncpy>:
 8019e8a:	b510      	push	{r4, lr}
 8019e8c:	3901      	subs	r1, #1
 8019e8e:	4603      	mov	r3, r0
 8019e90:	b132      	cbz	r2, 8019ea0 <strncpy+0x16>
 8019e92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019e96:	f803 4b01 	strb.w	r4, [r3], #1
 8019e9a:	3a01      	subs	r2, #1
 8019e9c:	2c00      	cmp	r4, #0
 8019e9e:	d1f7      	bne.n	8019e90 <strncpy+0x6>
 8019ea0:	441a      	add	r2, r3
 8019ea2:	2100      	movs	r1, #0
 8019ea4:	4293      	cmp	r3, r2
 8019ea6:	d100      	bne.n	8019eaa <strncpy+0x20>
 8019ea8:	bd10      	pop	{r4, pc}
 8019eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8019eae:	e7f9      	b.n	8019ea4 <strncpy+0x1a>

08019eb0 <strstr>:
 8019eb0:	780a      	ldrb	r2, [r1, #0]
 8019eb2:	b570      	push	{r4, r5, r6, lr}
 8019eb4:	b96a      	cbnz	r2, 8019ed2 <strstr+0x22>
 8019eb6:	bd70      	pop	{r4, r5, r6, pc}
 8019eb8:	429a      	cmp	r2, r3
 8019eba:	d109      	bne.n	8019ed0 <strstr+0x20>
 8019ebc:	460c      	mov	r4, r1
 8019ebe:	4605      	mov	r5, r0
 8019ec0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d0f6      	beq.n	8019eb6 <strstr+0x6>
 8019ec8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019ecc:	429e      	cmp	r6, r3
 8019ece:	d0f7      	beq.n	8019ec0 <strstr+0x10>
 8019ed0:	3001      	adds	r0, #1
 8019ed2:	7803      	ldrb	r3, [r0, #0]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d1ef      	bne.n	8019eb8 <strstr+0x8>
 8019ed8:	4618      	mov	r0, r3
 8019eda:	e7ec      	b.n	8019eb6 <strstr+0x6>

08019edc <_close_r>:
 8019edc:	b538      	push	{r3, r4, r5, lr}
 8019ede:	4d06      	ldr	r5, [pc, #24]	@ (8019ef8 <_close_r+0x1c>)
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	4604      	mov	r4, r0
 8019ee4:	4608      	mov	r0, r1
 8019ee6:	602b      	str	r3, [r5, #0]
 8019ee8:	f7e9 fb50 	bl	800358c <_close>
 8019eec:	1c43      	adds	r3, r0, #1
 8019eee:	d102      	bne.n	8019ef6 <_close_r+0x1a>
 8019ef0:	682b      	ldr	r3, [r5, #0]
 8019ef2:	b103      	cbz	r3, 8019ef6 <_close_r+0x1a>
 8019ef4:	6023      	str	r3, [r4, #0]
 8019ef6:	bd38      	pop	{r3, r4, r5, pc}
 8019ef8:	2000f43c 	.word	0x2000f43c

08019efc <_lseek_r>:
 8019efc:	b538      	push	{r3, r4, r5, lr}
 8019efe:	4d07      	ldr	r5, [pc, #28]	@ (8019f1c <_lseek_r+0x20>)
 8019f00:	4604      	mov	r4, r0
 8019f02:	4608      	mov	r0, r1
 8019f04:	4611      	mov	r1, r2
 8019f06:	2200      	movs	r2, #0
 8019f08:	602a      	str	r2, [r5, #0]
 8019f0a:	461a      	mov	r2, r3
 8019f0c:	f7e9 fb65 	bl	80035da <_lseek>
 8019f10:	1c43      	adds	r3, r0, #1
 8019f12:	d102      	bne.n	8019f1a <_lseek_r+0x1e>
 8019f14:	682b      	ldr	r3, [r5, #0]
 8019f16:	b103      	cbz	r3, 8019f1a <_lseek_r+0x1e>
 8019f18:	6023      	str	r3, [r4, #0]
 8019f1a:	bd38      	pop	{r3, r4, r5, pc}
 8019f1c:	2000f43c 	.word	0x2000f43c

08019f20 <_read_r>:
 8019f20:	b538      	push	{r3, r4, r5, lr}
 8019f22:	4d07      	ldr	r5, [pc, #28]	@ (8019f40 <_read_r+0x20>)
 8019f24:	4604      	mov	r4, r0
 8019f26:	4608      	mov	r0, r1
 8019f28:	4611      	mov	r1, r2
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	602a      	str	r2, [r5, #0]
 8019f2e:	461a      	mov	r2, r3
 8019f30:	f7e9 faf3 	bl	800351a <_read>
 8019f34:	1c43      	adds	r3, r0, #1
 8019f36:	d102      	bne.n	8019f3e <_read_r+0x1e>
 8019f38:	682b      	ldr	r3, [r5, #0]
 8019f3a:	b103      	cbz	r3, 8019f3e <_read_r+0x1e>
 8019f3c:	6023      	str	r3, [r4, #0]
 8019f3e:	bd38      	pop	{r3, r4, r5, pc}
 8019f40:	2000f43c 	.word	0x2000f43c

08019f44 <_sbrk_r>:
 8019f44:	b538      	push	{r3, r4, r5, lr}
 8019f46:	4d06      	ldr	r5, [pc, #24]	@ (8019f60 <_sbrk_r+0x1c>)
 8019f48:	2300      	movs	r3, #0
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	4608      	mov	r0, r1
 8019f4e:	602b      	str	r3, [r5, #0]
 8019f50:	f7e9 fb50 	bl	80035f4 <_sbrk>
 8019f54:	1c43      	adds	r3, r0, #1
 8019f56:	d102      	bne.n	8019f5e <_sbrk_r+0x1a>
 8019f58:	682b      	ldr	r3, [r5, #0]
 8019f5a:	b103      	cbz	r3, 8019f5e <_sbrk_r+0x1a>
 8019f5c:	6023      	str	r3, [r4, #0]
 8019f5e:	bd38      	pop	{r3, r4, r5, pc}
 8019f60:	2000f43c 	.word	0x2000f43c

08019f64 <_write_r>:
 8019f64:	b538      	push	{r3, r4, r5, lr}
 8019f66:	4d07      	ldr	r5, [pc, #28]	@ (8019f84 <_write_r+0x20>)
 8019f68:	4604      	mov	r4, r0
 8019f6a:	4608      	mov	r0, r1
 8019f6c:	4611      	mov	r1, r2
 8019f6e:	2200      	movs	r2, #0
 8019f70:	602a      	str	r2, [r5, #0]
 8019f72:	461a      	mov	r2, r3
 8019f74:	f7e9 faee 	bl	8003554 <_write>
 8019f78:	1c43      	adds	r3, r0, #1
 8019f7a:	d102      	bne.n	8019f82 <_write_r+0x1e>
 8019f7c:	682b      	ldr	r3, [r5, #0]
 8019f7e:	b103      	cbz	r3, 8019f82 <_write_r+0x1e>
 8019f80:	6023      	str	r3, [r4, #0]
 8019f82:	bd38      	pop	{r3, r4, r5, pc}
 8019f84:	2000f43c 	.word	0x2000f43c

08019f88 <__errno>:
 8019f88:	4b01      	ldr	r3, [pc, #4]	@ (8019f90 <__errno+0x8>)
 8019f8a:	6818      	ldr	r0, [r3, #0]
 8019f8c:	4770      	bx	lr
 8019f8e:	bf00      	nop
 8019f90:	200012a0 	.word	0x200012a0

08019f94 <__libc_init_array>:
 8019f94:	b570      	push	{r4, r5, r6, lr}
 8019f96:	4d0d      	ldr	r5, [pc, #52]	@ (8019fcc <__libc_init_array+0x38>)
 8019f98:	4c0d      	ldr	r4, [pc, #52]	@ (8019fd0 <__libc_init_array+0x3c>)
 8019f9a:	1b64      	subs	r4, r4, r5
 8019f9c:	10a4      	asrs	r4, r4, #2
 8019f9e:	2600      	movs	r6, #0
 8019fa0:	42a6      	cmp	r6, r4
 8019fa2:	d109      	bne.n	8019fb8 <__libc_init_array+0x24>
 8019fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8019fd4 <__libc_init_array+0x40>)
 8019fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8019fd8 <__libc_init_array+0x44>)
 8019fa8:	f000 fe60 	bl	801ac6c <_init>
 8019fac:	1b64      	subs	r4, r4, r5
 8019fae:	10a4      	asrs	r4, r4, #2
 8019fb0:	2600      	movs	r6, #0
 8019fb2:	42a6      	cmp	r6, r4
 8019fb4:	d105      	bne.n	8019fc2 <__libc_init_array+0x2e>
 8019fb6:	bd70      	pop	{r4, r5, r6, pc}
 8019fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fbc:	4798      	blx	r3
 8019fbe:	3601      	adds	r6, #1
 8019fc0:	e7ee      	b.n	8019fa0 <__libc_init_array+0xc>
 8019fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fc6:	4798      	blx	r3
 8019fc8:	3601      	adds	r6, #1
 8019fca:	e7f2      	b.n	8019fb2 <__libc_init_array+0x1e>
 8019fcc:	0801c028 	.word	0x0801c028
 8019fd0:	0801c028 	.word	0x0801c028
 8019fd4:	0801c028 	.word	0x0801c028
 8019fd8:	0801c034 	.word	0x0801c034

08019fdc <__retarget_lock_init_recursive>:
 8019fdc:	4770      	bx	lr

08019fde <__retarget_lock_acquire_recursive>:
 8019fde:	4770      	bx	lr

08019fe0 <__retarget_lock_release_recursive>:
 8019fe0:	4770      	bx	lr

08019fe2 <strcpy>:
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019fe8:	f803 2b01 	strb.w	r2, [r3], #1
 8019fec:	2a00      	cmp	r2, #0
 8019fee:	d1f9      	bne.n	8019fe4 <strcpy+0x2>
 8019ff0:	4770      	bx	lr

08019ff2 <memcpy>:
 8019ff2:	440a      	add	r2, r1
 8019ff4:	4291      	cmp	r1, r2
 8019ff6:	f100 33ff 	add.w	r3, r0, #4294967295
 8019ffa:	d100      	bne.n	8019ffe <memcpy+0xc>
 8019ffc:	4770      	bx	lr
 8019ffe:	b510      	push	{r4, lr}
 801a000:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a004:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a008:	4291      	cmp	r1, r2
 801a00a:	d1f9      	bne.n	801a000 <memcpy+0xe>
 801a00c:	bd10      	pop	{r4, pc}
	...

0801a010 <__assert_func>:
 801a010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a012:	4614      	mov	r4, r2
 801a014:	461a      	mov	r2, r3
 801a016:	4b09      	ldr	r3, [pc, #36]	@ (801a03c <__assert_func+0x2c>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4605      	mov	r5, r0
 801a01c:	68d8      	ldr	r0, [r3, #12]
 801a01e:	b14c      	cbz	r4, 801a034 <__assert_func+0x24>
 801a020:	4b07      	ldr	r3, [pc, #28]	@ (801a040 <__assert_func+0x30>)
 801a022:	9100      	str	r1, [sp, #0]
 801a024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a028:	4906      	ldr	r1, [pc, #24]	@ (801a044 <__assert_func+0x34>)
 801a02a:	462b      	mov	r3, r5
 801a02c:	f000 fbfc 	bl	801a828 <fiprintf>
 801a030:	f000 fc90 	bl	801a954 <abort>
 801a034:	4b04      	ldr	r3, [pc, #16]	@ (801a048 <__assert_func+0x38>)
 801a036:	461c      	mov	r4, r3
 801a038:	e7f3      	b.n	801a022 <__assert_func+0x12>
 801a03a:	bf00      	nop
 801a03c:	200012a0 	.word	0x200012a0
 801a040:	0801beaf 	.word	0x0801beaf
 801a044:	0801bebc 	.word	0x0801bebc
 801a048:	0801beea 	.word	0x0801beea

0801a04c <__env_lock>:
 801a04c:	4801      	ldr	r0, [pc, #4]	@ (801a054 <__env_lock+0x8>)
 801a04e:	f7ff bfc6 	b.w	8019fde <__retarget_lock_acquire_recursive>
 801a052:	bf00      	nop
 801a054:	2000f440 	.word	0x2000f440

0801a058 <__env_unlock>:
 801a058:	4801      	ldr	r0, [pc, #4]	@ (801a060 <__env_unlock+0x8>)
 801a05a:	f7ff bfc1 	b.w	8019fe0 <__retarget_lock_release_recursive>
 801a05e:	bf00      	nop
 801a060:	2000f440 	.word	0x2000f440

0801a064 <_free_r>:
 801a064:	b538      	push	{r3, r4, r5, lr}
 801a066:	4605      	mov	r5, r0
 801a068:	2900      	cmp	r1, #0
 801a06a:	d041      	beq.n	801a0f0 <_free_r+0x8c>
 801a06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a070:	1f0c      	subs	r4, r1, #4
 801a072:	2b00      	cmp	r3, #0
 801a074:	bfb8      	it	lt
 801a076:	18e4      	addlt	r4, r4, r3
 801a078:	f7ff fb2a 	bl	80196d0 <__malloc_lock>
 801a07c:	4a1d      	ldr	r2, [pc, #116]	@ (801a0f4 <_free_r+0x90>)
 801a07e:	6813      	ldr	r3, [r2, #0]
 801a080:	b933      	cbnz	r3, 801a090 <_free_r+0x2c>
 801a082:	6063      	str	r3, [r4, #4]
 801a084:	6014      	str	r4, [r2, #0]
 801a086:	4628      	mov	r0, r5
 801a088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a08c:	f7ff bb26 	b.w	80196dc <__malloc_unlock>
 801a090:	42a3      	cmp	r3, r4
 801a092:	d908      	bls.n	801a0a6 <_free_r+0x42>
 801a094:	6820      	ldr	r0, [r4, #0]
 801a096:	1821      	adds	r1, r4, r0
 801a098:	428b      	cmp	r3, r1
 801a09a:	bf01      	itttt	eq
 801a09c:	6819      	ldreq	r1, [r3, #0]
 801a09e:	685b      	ldreq	r3, [r3, #4]
 801a0a0:	1809      	addeq	r1, r1, r0
 801a0a2:	6021      	streq	r1, [r4, #0]
 801a0a4:	e7ed      	b.n	801a082 <_free_r+0x1e>
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	685b      	ldr	r3, [r3, #4]
 801a0aa:	b10b      	cbz	r3, 801a0b0 <_free_r+0x4c>
 801a0ac:	42a3      	cmp	r3, r4
 801a0ae:	d9fa      	bls.n	801a0a6 <_free_r+0x42>
 801a0b0:	6811      	ldr	r1, [r2, #0]
 801a0b2:	1850      	adds	r0, r2, r1
 801a0b4:	42a0      	cmp	r0, r4
 801a0b6:	d10b      	bne.n	801a0d0 <_free_r+0x6c>
 801a0b8:	6820      	ldr	r0, [r4, #0]
 801a0ba:	4401      	add	r1, r0
 801a0bc:	1850      	adds	r0, r2, r1
 801a0be:	4283      	cmp	r3, r0
 801a0c0:	6011      	str	r1, [r2, #0]
 801a0c2:	d1e0      	bne.n	801a086 <_free_r+0x22>
 801a0c4:	6818      	ldr	r0, [r3, #0]
 801a0c6:	685b      	ldr	r3, [r3, #4]
 801a0c8:	6053      	str	r3, [r2, #4]
 801a0ca:	4408      	add	r0, r1
 801a0cc:	6010      	str	r0, [r2, #0]
 801a0ce:	e7da      	b.n	801a086 <_free_r+0x22>
 801a0d0:	d902      	bls.n	801a0d8 <_free_r+0x74>
 801a0d2:	230c      	movs	r3, #12
 801a0d4:	602b      	str	r3, [r5, #0]
 801a0d6:	e7d6      	b.n	801a086 <_free_r+0x22>
 801a0d8:	6820      	ldr	r0, [r4, #0]
 801a0da:	1821      	adds	r1, r4, r0
 801a0dc:	428b      	cmp	r3, r1
 801a0de:	bf04      	itt	eq
 801a0e0:	6819      	ldreq	r1, [r3, #0]
 801a0e2:	685b      	ldreq	r3, [r3, #4]
 801a0e4:	6063      	str	r3, [r4, #4]
 801a0e6:	bf04      	itt	eq
 801a0e8:	1809      	addeq	r1, r1, r0
 801a0ea:	6021      	streq	r1, [r4, #0]
 801a0ec:	6054      	str	r4, [r2, #4]
 801a0ee:	e7ca      	b.n	801a086 <_free_r+0x22>
 801a0f0:	bd38      	pop	{r3, r4, r5, pc}
 801a0f2:	bf00      	nop
 801a0f4:	2000f2fc 	.word	0x2000f2fc

0801a0f8 <_malloc_usable_size_r>:
 801a0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a0fc:	1f18      	subs	r0, r3, #4
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	bfbc      	itt	lt
 801a102:	580b      	ldrlt	r3, [r1, r0]
 801a104:	18c0      	addlt	r0, r0, r3
 801a106:	4770      	bx	lr

0801a108 <__ssputs_r>:
 801a108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a10c:	688e      	ldr	r6, [r1, #8]
 801a10e:	461f      	mov	r7, r3
 801a110:	42be      	cmp	r6, r7
 801a112:	680b      	ldr	r3, [r1, #0]
 801a114:	4682      	mov	sl, r0
 801a116:	460c      	mov	r4, r1
 801a118:	4690      	mov	r8, r2
 801a11a:	d82d      	bhi.n	801a178 <__ssputs_r+0x70>
 801a11c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a120:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a124:	d026      	beq.n	801a174 <__ssputs_r+0x6c>
 801a126:	6965      	ldr	r5, [r4, #20]
 801a128:	6909      	ldr	r1, [r1, #16]
 801a12a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a12e:	eba3 0901 	sub.w	r9, r3, r1
 801a132:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a136:	1c7b      	adds	r3, r7, #1
 801a138:	444b      	add	r3, r9
 801a13a:	106d      	asrs	r5, r5, #1
 801a13c:	429d      	cmp	r5, r3
 801a13e:	bf38      	it	cc
 801a140:	461d      	movcc	r5, r3
 801a142:	0553      	lsls	r3, r2, #21
 801a144:	d527      	bpl.n	801a196 <__ssputs_r+0x8e>
 801a146:	4629      	mov	r1, r5
 801a148:	f7ff fa42 	bl	80195d0 <_malloc_r>
 801a14c:	4606      	mov	r6, r0
 801a14e:	b360      	cbz	r0, 801a1aa <__ssputs_r+0xa2>
 801a150:	6921      	ldr	r1, [r4, #16]
 801a152:	464a      	mov	r2, r9
 801a154:	f7ff ff4d 	bl	8019ff2 <memcpy>
 801a158:	89a3      	ldrh	r3, [r4, #12]
 801a15a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a15e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a162:	81a3      	strh	r3, [r4, #12]
 801a164:	6126      	str	r6, [r4, #16]
 801a166:	6165      	str	r5, [r4, #20]
 801a168:	444e      	add	r6, r9
 801a16a:	eba5 0509 	sub.w	r5, r5, r9
 801a16e:	6026      	str	r6, [r4, #0]
 801a170:	60a5      	str	r5, [r4, #8]
 801a172:	463e      	mov	r6, r7
 801a174:	42be      	cmp	r6, r7
 801a176:	d900      	bls.n	801a17a <__ssputs_r+0x72>
 801a178:	463e      	mov	r6, r7
 801a17a:	6820      	ldr	r0, [r4, #0]
 801a17c:	4632      	mov	r2, r6
 801a17e:	4641      	mov	r1, r8
 801a180:	f7ff fe42 	bl	8019e08 <memmove>
 801a184:	68a3      	ldr	r3, [r4, #8]
 801a186:	1b9b      	subs	r3, r3, r6
 801a188:	60a3      	str	r3, [r4, #8]
 801a18a:	6823      	ldr	r3, [r4, #0]
 801a18c:	4433      	add	r3, r6
 801a18e:	6023      	str	r3, [r4, #0]
 801a190:	2000      	movs	r0, #0
 801a192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a196:	462a      	mov	r2, r5
 801a198:	f7ff fb1a 	bl	80197d0 <_realloc_r>
 801a19c:	4606      	mov	r6, r0
 801a19e:	2800      	cmp	r0, #0
 801a1a0:	d1e0      	bne.n	801a164 <__ssputs_r+0x5c>
 801a1a2:	6921      	ldr	r1, [r4, #16]
 801a1a4:	4650      	mov	r0, sl
 801a1a6:	f7ff ff5d 	bl	801a064 <_free_r>
 801a1aa:	230c      	movs	r3, #12
 801a1ac:	f8ca 3000 	str.w	r3, [sl]
 801a1b0:	89a3      	ldrh	r3, [r4, #12]
 801a1b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a1b6:	81a3      	strh	r3, [r4, #12]
 801a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1bc:	e7e9      	b.n	801a192 <__ssputs_r+0x8a>
	...

0801a1c0 <_svfiprintf_r>:
 801a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c4:	4698      	mov	r8, r3
 801a1c6:	898b      	ldrh	r3, [r1, #12]
 801a1c8:	061b      	lsls	r3, r3, #24
 801a1ca:	b09d      	sub	sp, #116	@ 0x74
 801a1cc:	4607      	mov	r7, r0
 801a1ce:	460d      	mov	r5, r1
 801a1d0:	4614      	mov	r4, r2
 801a1d2:	d510      	bpl.n	801a1f6 <_svfiprintf_r+0x36>
 801a1d4:	690b      	ldr	r3, [r1, #16]
 801a1d6:	b973      	cbnz	r3, 801a1f6 <_svfiprintf_r+0x36>
 801a1d8:	2140      	movs	r1, #64	@ 0x40
 801a1da:	f7ff f9f9 	bl	80195d0 <_malloc_r>
 801a1de:	6028      	str	r0, [r5, #0]
 801a1e0:	6128      	str	r0, [r5, #16]
 801a1e2:	b930      	cbnz	r0, 801a1f2 <_svfiprintf_r+0x32>
 801a1e4:	230c      	movs	r3, #12
 801a1e6:	603b      	str	r3, [r7, #0]
 801a1e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1ec:	b01d      	add	sp, #116	@ 0x74
 801a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1f2:	2340      	movs	r3, #64	@ 0x40
 801a1f4:	616b      	str	r3, [r5, #20]
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801a1fa:	2320      	movs	r3, #32
 801a1fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a200:	f8cd 800c 	str.w	r8, [sp, #12]
 801a204:	2330      	movs	r3, #48	@ 0x30
 801a206:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a3a4 <_svfiprintf_r+0x1e4>
 801a20a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a20e:	f04f 0901 	mov.w	r9, #1
 801a212:	4623      	mov	r3, r4
 801a214:	469a      	mov	sl, r3
 801a216:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a21a:	b10a      	cbz	r2, 801a220 <_svfiprintf_r+0x60>
 801a21c:	2a25      	cmp	r2, #37	@ 0x25
 801a21e:	d1f9      	bne.n	801a214 <_svfiprintf_r+0x54>
 801a220:	ebba 0b04 	subs.w	fp, sl, r4
 801a224:	d00b      	beq.n	801a23e <_svfiprintf_r+0x7e>
 801a226:	465b      	mov	r3, fp
 801a228:	4622      	mov	r2, r4
 801a22a:	4629      	mov	r1, r5
 801a22c:	4638      	mov	r0, r7
 801a22e:	f7ff ff6b 	bl	801a108 <__ssputs_r>
 801a232:	3001      	adds	r0, #1
 801a234:	f000 80a7 	beq.w	801a386 <_svfiprintf_r+0x1c6>
 801a238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a23a:	445a      	add	r2, fp
 801a23c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a23e:	f89a 3000 	ldrb.w	r3, [sl]
 801a242:	2b00      	cmp	r3, #0
 801a244:	f000 809f 	beq.w	801a386 <_svfiprintf_r+0x1c6>
 801a248:	2300      	movs	r3, #0
 801a24a:	f04f 32ff 	mov.w	r2, #4294967295
 801a24e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a252:	f10a 0a01 	add.w	sl, sl, #1
 801a256:	9304      	str	r3, [sp, #16]
 801a258:	9307      	str	r3, [sp, #28]
 801a25a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a25e:	931a      	str	r3, [sp, #104]	@ 0x68
 801a260:	4654      	mov	r4, sl
 801a262:	2205      	movs	r2, #5
 801a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a268:	484e      	ldr	r0, [pc, #312]	@ (801a3a4 <_svfiprintf_r+0x1e4>)
 801a26a:	f7e5 ffe1 	bl	8000230 <memchr>
 801a26e:	9a04      	ldr	r2, [sp, #16]
 801a270:	b9d8      	cbnz	r0, 801a2aa <_svfiprintf_r+0xea>
 801a272:	06d0      	lsls	r0, r2, #27
 801a274:	bf44      	itt	mi
 801a276:	2320      	movmi	r3, #32
 801a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a27c:	0711      	lsls	r1, r2, #28
 801a27e:	bf44      	itt	mi
 801a280:	232b      	movmi	r3, #43	@ 0x2b
 801a282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a286:	f89a 3000 	ldrb.w	r3, [sl]
 801a28a:	2b2a      	cmp	r3, #42	@ 0x2a
 801a28c:	d015      	beq.n	801a2ba <_svfiprintf_r+0xfa>
 801a28e:	9a07      	ldr	r2, [sp, #28]
 801a290:	4654      	mov	r4, sl
 801a292:	2000      	movs	r0, #0
 801a294:	f04f 0c0a 	mov.w	ip, #10
 801a298:	4621      	mov	r1, r4
 801a29a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a29e:	3b30      	subs	r3, #48	@ 0x30
 801a2a0:	2b09      	cmp	r3, #9
 801a2a2:	d94b      	bls.n	801a33c <_svfiprintf_r+0x17c>
 801a2a4:	b1b0      	cbz	r0, 801a2d4 <_svfiprintf_r+0x114>
 801a2a6:	9207      	str	r2, [sp, #28]
 801a2a8:	e014      	b.n	801a2d4 <_svfiprintf_r+0x114>
 801a2aa:	eba0 0308 	sub.w	r3, r0, r8
 801a2ae:	fa09 f303 	lsl.w	r3, r9, r3
 801a2b2:	4313      	orrs	r3, r2
 801a2b4:	9304      	str	r3, [sp, #16]
 801a2b6:	46a2      	mov	sl, r4
 801a2b8:	e7d2      	b.n	801a260 <_svfiprintf_r+0xa0>
 801a2ba:	9b03      	ldr	r3, [sp, #12]
 801a2bc:	1d19      	adds	r1, r3, #4
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	9103      	str	r1, [sp, #12]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	bfbb      	ittet	lt
 801a2c6:	425b      	neglt	r3, r3
 801a2c8:	f042 0202 	orrlt.w	r2, r2, #2
 801a2cc:	9307      	strge	r3, [sp, #28]
 801a2ce:	9307      	strlt	r3, [sp, #28]
 801a2d0:	bfb8      	it	lt
 801a2d2:	9204      	strlt	r2, [sp, #16]
 801a2d4:	7823      	ldrb	r3, [r4, #0]
 801a2d6:	2b2e      	cmp	r3, #46	@ 0x2e
 801a2d8:	d10a      	bne.n	801a2f0 <_svfiprintf_r+0x130>
 801a2da:	7863      	ldrb	r3, [r4, #1]
 801a2dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a2de:	d132      	bne.n	801a346 <_svfiprintf_r+0x186>
 801a2e0:	9b03      	ldr	r3, [sp, #12]
 801a2e2:	1d1a      	adds	r2, r3, #4
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	9203      	str	r2, [sp, #12]
 801a2e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a2ec:	3402      	adds	r4, #2
 801a2ee:	9305      	str	r3, [sp, #20]
 801a2f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a3b4 <_svfiprintf_r+0x1f4>
 801a2f4:	7821      	ldrb	r1, [r4, #0]
 801a2f6:	2203      	movs	r2, #3
 801a2f8:	4650      	mov	r0, sl
 801a2fa:	f7e5 ff99 	bl	8000230 <memchr>
 801a2fe:	b138      	cbz	r0, 801a310 <_svfiprintf_r+0x150>
 801a300:	9b04      	ldr	r3, [sp, #16]
 801a302:	eba0 000a 	sub.w	r0, r0, sl
 801a306:	2240      	movs	r2, #64	@ 0x40
 801a308:	4082      	lsls	r2, r0
 801a30a:	4313      	orrs	r3, r2
 801a30c:	3401      	adds	r4, #1
 801a30e:	9304      	str	r3, [sp, #16]
 801a310:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a314:	4824      	ldr	r0, [pc, #144]	@ (801a3a8 <_svfiprintf_r+0x1e8>)
 801a316:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a31a:	2206      	movs	r2, #6
 801a31c:	f7e5 ff88 	bl	8000230 <memchr>
 801a320:	2800      	cmp	r0, #0
 801a322:	d036      	beq.n	801a392 <_svfiprintf_r+0x1d2>
 801a324:	4b21      	ldr	r3, [pc, #132]	@ (801a3ac <_svfiprintf_r+0x1ec>)
 801a326:	bb1b      	cbnz	r3, 801a370 <_svfiprintf_r+0x1b0>
 801a328:	9b03      	ldr	r3, [sp, #12]
 801a32a:	3307      	adds	r3, #7
 801a32c:	f023 0307 	bic.w	r3, r3, #7
 801a330:	3308      	adds	r3, #8
 801a332:	9303      	str	r3, [sp, #12]
 801a334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a336:	4433      	add	r3, r6
 801a338:	9309      	str	r3, [sp, #36]	@ 0x24
 801a33a:	e76a      	b.n	801a212 <_svfiprintf_r+0x52>
 801a33c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a340:	460c      	mov	r4, r1
 801a342:	2001      	movs	r0, #1
 801a344:	e7a8      	b.n	801a298 <_svfiprintf_r+0xd8>
 801a346:	2300      	movs	r3, #0
 801a348:	3401      	adds	r4, #1
 801a34a:	9305      	str	r3, [sp, #20]
 801a34c:	4619      	mov	r1, r3
 801a34e:	f04f 0c0a 	mov.w	ip, #10
 801a352:	4620      	mov	r0, r4
 801a354:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a358:	3a30      	subs	r2, #48	@ 0x30
 801a35a:	2a09      	cmp	r2, #9
 801a35c:	d903      	bls.n	801a366 <_svfiprintf_r+0x1a6>
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d0c6      	beq.n	801a2f0 <_svfiprintf_r+0x130>
 801a362:	9105      	str	r1, [sp, #20]
 801a364:	e7c4      	b.n	801a2f0 <_svfiprintf_r+0x130>
 801a366:	fb0c 2101 	mla	r1, ip, r1, r2
 801a36a:	4604      	mov	r4, r0
 801a36c:	2301      	movs	r3, #1
 801a36e:	e7f0      	b.n	801a352 <_svfiprintf_r+0x192>
 801a370:	ab03      	add	r3, sp, #12
 801a372:	9300      	str	r3, [sp, #0]
 801a374:	462a      	mov	r2, r5
 801a376:	4b0e      	ldr	r3, [pc, #56]	@ (801a3b0 <_svfiprintf_r+0x1f0>)
 801a378:	a904      	add	r1, sp, #16
 801a37a:	4638      	mov	r0, r7
 801a37c:	f3af 8000 	nop.w
 801a380:	1c42      	adds	r2, r0, #1
 801a382:	4606      	mov	r6, r0
 801a384:	d1d6      	bne.n	801a334 <_svfiprintf_r+0x174>
 801a386:	89ab      	ldrh	r3, [r5, #12]
 801a388:	065b      	lsls	r3, r3, #25
 801a38a:	f53f af2d 	bmi.w	801a1e8 <_svfiprintf_r+0x28>
 801a38e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a390:	e72c      	b.n	801a1ec <_svfiprintf_r+0x2c>
 801a392:	ab03      	add	r3, sp, #12
 801a394:	9300      	str	r3, [sp, #0]
 801a396:	462a      	mov	r2, r5
 801a398:	4b05      	ldr	r3, [pc, #20]	@ (801a3b0 <_svfiprintf_r+0x1f0>)
 801a39a:	a904      	add	r1, sp, #16
 801a39c:	4638      	mov	r0, r7
 801a39e:	f000 f879 	bl	801a494 <_printf_i>
 801a3a2:	e7ed      	b.n	801a380 <_svfiprintf_r+0x1c0>
 801a3a4:	0801beeb 	.word	0x0801beeb
 801a3a8:	0801bef5 	.word	0x0801bef5
 801a3ac:	00000000 	.word	0x00000000
 801a3b0:	0801a109 	.word	0x0801a109
 801a3b4:	0801bef1 	.word	0x0801bef1

0801a3b8 <_printf_common>:
 801a3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3bc:	4616      	mov	r6, r2
 801a3be:	4698      	mov	r8, r3
 801a3c0:	688a      	ldr	r2, [r1, #8]
 801a3c2:	690b      	ldr	r3, [r1, #16]
 801a3c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a3c8:	4293      	cmp	r3, r2
 801a3ca:	bfb8      	it	lt
 801a3cc:	4613      	movlt	r3, r2
 801a3ce:	6033      	str	r3, [r6, #0]
 801a3d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a3d4:	4607      	mov	r7, r0
 801a3d6:	460c      	mov	r4, r1
 801a3d8:	b10a      	cbz	r2, 801a3de <_printf_common+0x26>
 801a3da:	3301      	adds	r3, #1
 801a3dc:	6033      	str	r3, [r6, #0]
 801a3de:	6823      	ldr	r3, [r4, #0]
 801a3e0:	0699      	lsls	r1, r3, #26
 801a3e2:	bf42      	ittt	mi
 801a3e4:	6833      	ldrmi	r3, [r6, #0]
 801a3e6:	3302      	addmi	r3, #2
 801a3e8:	6033      	strmi	r3, [r6, #0]
 801a3ea:	6825      	ldr	r5, [r4, #0]
 801a3ec:	f015 0506 	ands.w	r5, r5, #6
 801a3f0:	d106      	bne.n	801a400 <_printf_common+0x48>
 801a3f2:	f104 0a19 	add.w	sl, r4, #25
 801a3f6:	68e3      	ldr	r3, [r4, #12]
 801a3f8:	6832      	ldr	r2, [r6, #0]
 801a3fa:	1a9b      	subs	r3, r3, r2
 801a3fc:	42ab      	cmp	r3, r5
 801a3fe:	dc26      	bgt.n	801a44e <_printf_common+0x96>
 801a400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a404:	6822      	ldr	r2, [r4, #0]
 801a406:	3b00      	subs	r3, #0
 801a408:	bf18      	it	ne
 801a40a:	2301      	movne	r3, #1
 801a40c:	0692      	lsls	r2, r2, #26
 801a40e:	d42b      	bmi.n	801a468 <_printf_common+0xb0>
 801a410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a414:	4641      	mov	r1, r8
 801a416:	4638      	mov	r0, r7
 801a418:	47c8      	blx	r9
 801a41a:	3001      	adds	r0, #1
 801a41c:	d01e      	beq.n	801a45c <_printf_common+0xa4>
 801a41e:	6823      	ldr	r3, [r4, #0]
 801a420:	6922      	ldr	r2, [r4, #16]
 801a422:	f003 0306 	and.w	r3, r3, #6
 801a426:	2b04      	cmp	r3, #4
 801a428:	bf02      	ittt	eq
 801a42a:	68e5      	ldreq	r5, [r4, #12]
 801a42c:	6833      	ldreq	r3, [r6, #0]
 801a42e:	1aed      	subeq	r5, r5, r3
 801a430:	68a3      	ldr	r3, [r4, #8]
 801a432:	bf0c      	ite	eq
 801a434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a438:	2500      	movne	r5, #0
 801a43a:	4293      	cmp	r3, r2
 801a43c:	bfc4      	itt	gt
 801a43e:	1a9b      	subgt	r3, r3, r2
 801a440:	18ed      	addgt	r5, r5, r3
 801a442:	2600      	movs	r6, #0
 801a444:	341a      	adds	r4, #26
 801a446:	42b5      	cmp	r5, r6
 801a448:	d11a      	bne.n	801a480 <_printf_common+0xc8>
 801a44a:	2000      	movs	r0, #0
 801a44c:	e008      	b.n	801a460 <_printf_common+0xa8>
 801a44e:	2301      	movs	r3, #1
 801a450:	4652      	mov	r2, sl
 801a452:	4641      	mov	r1, r8
 801a454:	4638      	mov	r0, r7
 801a456:	47c8      	blx	r9
 801a458:	3001      	adds	r0, #1
 801a45a:	d103      	bne.n	801a464 <_printf_common+0xac>
 801a45c:	f04f 30ff 	mov.w	r0, #4294967295
 801a460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a464:	3501      	adds	r5, #1
 801a466:	e7c6      	b.n	801a3f6 <_printf_common+0x3e>
 801a468:	18e1      	adds	r1, r4, r3
 801a46a:	1c5a      	adds	r2, r3, #1
 801a46c:	2030      	movs	r0, #48	@ 0x30
 801a46e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a472:	4422      	add	r2, r4
 801a474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a478:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a47c:	3302      	adds	r3, #2
 801a47e:	e7c7      	b.n	801a410 <_printf_common+0x58>
 801a480:	2301      	movs	r3, #1
 801a482:	4622      	mov	r2, r4
 801a484:	4641      	mov	r1, r8
 801a486:	4638      	mov	r0, r7
 801a488:	47c8      	blx	r9
 801a48a:	3001      	adds	r0, #1
 801a48c:	d0e6      	beq.n	801a45c <_printf_common+0xa4>
 801a48e:	3601      	adds	r6, #1
 801a490:	e7d9      	b.n	801a446 <_printf_common+0x8e>
	...

0801a494 <_printf_i>:
 801a494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a498:	7e0f      	ldrb	r7, [r1, #24]
 801a49a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a49c:	2f78      	cmp	r7, #120	@ 0x78
 801a49e:	4691      	mov	r9, r2
 801a4a0:	4680      	mov	r8, r0
 801a4a2:	460c      	mov	r4, r1
 801a4a4:	469a      	mov	sl, r3
 801a4a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a4aa:	d807      	bhi.n	801a4bc <_printf_i+0x28>
 801a4ac:	2f62      	cmp	r7, #98	@ 0x62
 801a4ae:	d80a      	bhi.n	801a4c6 <_printf_i+0x32>
 801a4b0:	2f00      	cmp	r7, #0
 801a4b2:	f000 80d1 	beq.w	801a658 <_printf_i+0x1c4>
 801a4b6:	2f58      	cmp	r7, #88	@ 0x58
 801a4b8:	f000 80b8 	beq.w	801a62c <_printf_i+0x198>
 801a4bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a4c4:	e03a      	b.n	801a53c <_printf_i+0xa8>
 801a4c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a4ca:	2b15      	cmp	r3, #21
 801a4cc:	d8f6      	bhi.n	801a4bc <_printf_i+0x28>
 801a4ce:	a101      	add	r1, pc, #4	@ (adr r1, 801a4d4 <_printf_i+0x40>)
 801a4d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a4d4:	0801a52d 	.word	0x0801a52d
 801a4d8:	0801a541 	.word	0x0801a541
 801a4dc:	0801a4bd 	.word	0x0801a4bd
 801a4e0:	0801a4bd 	.word	0x0801a4bd
 801a4e4:	0801a4bd 	.word	0x0801a4bd
 801a4e8:	0801a4bd 	.word	0x0801a4bd
 801a4ec:	0801a541 	.word	0x0801a541
 801a4f0:	0801a4bd 	.word	0x0801a4bd
 801a4f4:	0801a4bd 	.word	0x0801a4bd
 801a4f8:	0801a4bd 	.word	0x0801a4bd
 801a4fc:	0801a4bd 	.word	0x0801a4bd
 801a500:	0801a63f 	.word	0x0801a63f
 801a504:	0801a56b 	.word	0x0801a56b
 801a508:	0801a5f9 	.word	0x0801a5f9
 801a50c:	0801a4bd 	.word	0x0801a4bd
 801a510:	0801a4bd 	.word	0x0801a4bd
 801a514:	0801a661 	.word	0x0801a661
 801a518:	0801a4bd 	.word	0x0801a4bd
 801a51c:	0801a56b 	.word	0x0801a56b
 801a520:	0801a4bd 	.word	0x0801a4bd
 801a524:	0801a4bd 	.word	0x0801a4bd
 801a528:	0801a601 	.word	0x0801a601
 801a52c:	6833      	ldr	r3, [r6, #0]
 801a52e:	1d1a      	adds	r2, r3, #4
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	6032      	str	r2, [r6, #0]
 801a534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a53c:	2301      	movs	r3, #1
 801a53e:	e09c      	b.n	801a67a <_printf_i+0x1e6>
 801a540:	6833      	ldr	r3, [r6, #0]
 801a542:	6820      	ldr	r0, [r4, #0]
 801a544:	1d19      	adds	r1, r3, #4
 801a546:	6031      	str	r1, [r6, #0]
 801a548:	0606      	lsls	r6, r0, #24
 801a54a:	d501      	bpl.n	801a550 <_printf_i+0xbc>
 801a54c:	681d      	ldr	r5, [r3, #0]
 801a54e:	e003      	b.n	801a558 <_printf_i+0xc4>
 801a550:	0645      	lsls	r5, r0, #25
 801a552:	d5fb      	bpl.n	801a54c <_printf_i+0xb8>
 801a554:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a558:	2d00      	cmp	r5, #0
 801a55a:	da03      	bge.n	801a564 <_printf_i+0xd0>
 801a55c:	232d      	movs	r3, #45	@ 0x2d
 801a55e:	426d      	negs	r5, r5
 801a560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a564:	4858      	ldr	r0, [pc, #352]	@ (801a6c8 <_printf_i+0x234>)
 801a566:	230a      	movs	r3, #10
 801a568:	e011      	b.n	801a58e <_printf_i+0xfa>
 801a56a:	6821      	ldr	r1, [r4, #0]
 801a56c:	6833      	ldr	r3, [r6, #0]
 801a56e:	0608      	lsls	r0, r1, #24
 801a570:	f853 5b04 	ldr.w	r5, [r3], #4
 801a574:	d402      	bmi.n	801a57c <_printf_i+0xe8>
 801a576:	0649      	lsls	r1, r1, #25
 801a578:	bf48      	it	mi
 801a57a:	b2ad      	uxthmi	r5, r5
 801a57c:	2f6f      	cmp	r7, #111	@ 0x6f
 801a57e:	4852      	ldr	r0, [pc, #328]	@ (801a6c8 <_printf_i+0x234>)
 801a580:	6033      	str	r3, [r6, #0]
 801a582:	bf14      	ite	ne
 801a584:	230a      	movne	r3, #10
 801a586:	2308      	moveq	r3, #8
 801a588:	2100      	movs	r1, #0
 801a58a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a58e:	6866      	ldr	r6, [r4, #4]
 801a590:	60a6      	str	r6, [r4, #8]
 801a592:	2e00      	cmp	r6, #0
 801a594:	db05      	blt.n	801a5a2 <_printf_i+0x10e>
 801a596:	6821      	ldr	r1, [r4, #0]
 801a598:	432e      	orrs	r6, r5
 801a59a:	f021 0104 	bic.w	r1, r1, #4
 801a59e:	6021      	str	r1, [r4, #0]
 801a5a0:	d04b      	beq.n	801a63a <_printf_i+0x1a6>
 801a5a2:	4616      	mov	r6, r2
 801a5a4:	fbb5 f1f3 	udiv	r1, r5, r3
 801a5a8:	fb03 5711 	mls	r7, r3, r1, r5
 801a5ac:	5dc7      	ldrb	r7, [r0, r7]
 801a5ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a5b2:	462f      	mov	r7, r5
 801a5b4:	42bb      	cmp	r3, r7
 801a5b6:	460d      	mov	r5, r1
 801a5b8:	d9f4      	bls.n	801a5a4 <_printf_i+0x110>
 801a5ba:	2b08      	cmp	r3, #8
 801a5bc:	d10b      	bne.n	801a5d6 <_printf_i+0x142>
 801a5be:	6823      	ldr	r3, [r4, #0]
 801a5c0:	07df      	lsls	r7, r3, #31
 801a5c2:	d508      	bpl.n	801a5d6 <_printf_i+0x142>
 801a5c4:	6923      	ldr	r3, [r4, #16]
 801a5c6:	6861      	ldr	r1, [r4, #4]
 801a5c8:	4299      	cmp	r1, r3
 801a5ca:	bfde      	ittt	le
 801a5cc:	2330      	movle	r3, #48	@ 0x30
 801a5ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a5d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a5d6:	1b92      	subs	r2, r2, r6
 801a5d8:	6122      	str	r2, [r4, #16]
 801a5da:	f8cd a000 	str.w	sl, [sp]
 801a5de:	464b      	mov	r3, r9
 801a5e0:	aa03      	add	r2, sp, #12
 801a5e2:	4621      	mov	r1, r4
 801a5e4:	4640      	mov	r0, r8
 801a5e6:	f7ff fee7 	bl	801a3b8 <_printf_common>
 801a5ea:	3001      	adds	r0, #1
 801a5ec:	d14a      	bne.n	801a684 <_printf_i+0x1f0>
 801a5ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a5f2:	b004      	add	sp, #16
 801a5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5f8:	6823      	ldr	r3, [r4, #0]
 801a5fa:	f043 0320 	orr.w	r3, r3, #32
 801a5fe:	6023      	str	r3, [r4, #0]
 801a600:	4832      	ldr	r0, [pc, #200]	@ (801a6cc <_printf_i+0x238>)
 801a602:	2778      	movs	r7, #120	@ 0x78
 801a604:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a608:	6823      	ldr	r3, [r4, #0]
 801a60a:	6831      	ldr	r1, [r6, #0]
 801a60c:	061f      	lsls	r7, r3, #24
 801a60e:	f851 5b04 	ldr.w	r5, [r1], #4
 801a612:	d402      	bmi.n	801a61a <_printf_i+0x186>
 801a614:	065f      	lsls	r7, r3, #25
 801a616:	bf48      	it	mi
 801a618:	b2ad      	uxthmi	r5, r5
 801a61a:	6031      	str	r1, [r6, #0]
 801a61c:	07d9      	lsls	r1, r3, #31
 801a61e:	bf44      	itt	mi
 801a620:	f043 0320 	orrmi.w	r3, r3, #32
 801a624:	6023      	strmi	r3, [r4, #0]
 801a626:	b11d      	cbz	r5, 801a630 <_printf_i+0x19c>
 801a628:	2310      	movs	r3, #16
 801a62a:	e7ad      	b.n	801a588 <_printf_i+0xf4>
 801a62c:	4826      	ldr	r0, [pc, #152]	@ (801a6c8 <_printf_i+0x234>)
 801a62e:	e7e9      	b.n	801a604 <_printf_i+0x170>
 801a630:	6823      	ldr	r3, [r4, #0]
 801a632:	f023 0320 	bic.w	r3, r3, #32
 801a636:	6023      	str	r3, [r4, #0]
 801a638:	e7f6      	b.n	801a628 <_printf_i+0x194>
 801a63a:	4616      	mov	r6, r2
 801a63c:	e7bd      	b.n	801a5ba <_printf_i+0x126>
 801a63e:	6833      	ldr	r3, [r6, #0]
 801a640:	6825      	ldr	r5, [r4, #0]
 801a642:	6961      	ldr	r1, [r4, #20]
 801a644:	1d18      	adds	r0, r3, #4
 801a646:	6030      	str	r0, [r6, #0]
 801a648:	062e      	lsls	r6, r5, #24
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	d501      	bpl.n	801a652 <_printf_i+0x1be>
 801a64e:	6019      	str	r1, [r3, #0]
 801a650:	e002      	b.n	801a658 <_printf_i+0x1c4>
 801a652:	0668      	lsls	r0, r5, #25
 801a654:	d5fb      	bpl.n	801a64e <_printf_i+0x1ba>
 801a656:	8019      	strh	r1, [r3, #0]
 801a658:	2300      	movs	r3, #0
 801a65a:	6123      	str	r3, [r4, #16]
 801a65c:	4616      	mov	r6, r2
 801a65e:	e7bc      	b.n	801a5da <_printf_i+0x146>
 801a660:	6833      	ldr	r3, [r6, #0]
 801a662:	1d1a      	adds	r2, r3, #4
 801a664:	6032      	str	r2, [r6, #0]
 801a666:	681e      	ldr	r6, [r3, #0]
 801a668:	6862      	ldr	r2, [r4, #4]
 801a66a:	2100      	movs	r1, #0
 801a66c:	4630      	mov	r0, r6
 801a66e:	f7e5 fddf 	bl	8000230 <memchr>
 801a672:	b108      	cbz	r0, 801a678 <_printf_i+0x1e4>
 801a674:	1b80      	subs	r0, r0, r6
 801a676:	6060      	str	r0, [r4, #4]
 801a678:	6863      	ldr	r3, [r4, #4]
 801a67a:	6123      	str	r3, [r4, #16]
 801a67c:	2300      	movs	r3, #0
 801a67e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a682:	e7aa      	b.n	801a5da <_printf_i+0x146>
 801a684:	6923      	ldr	r3, [r4, #16]
 801a686:	4632      	mov	r2, r6
 801a688:	4649      	mov	r1, r9
 801a68a:	4640      	mov	r0, r8
 801a68c:	47d0      	blx	sl
 801a68e:	3001      	adds	r0, #1
 801a690:	d0ad      	beq.n	801a5ee <_printf_i+0x15a>
 801a692:	6823      	ldr	r3, [r4, #0]
 801a694:	079b      	lsls	r3, r3, #30
 801a696:	d413      	bmi.n	801a6c0 <_printf_i+0x22c>
 801a698:	68e0      	ldr	r0, [r4, #12]
 801a69a:	9b03      	ldr	r3, [sp, #12]
 801a69c:	4298      	cmp	r0, r3
 801a69e:	bfb8      	it	lt
 801a6a0:	4618      	movlt	r0, r3
 801a6a2:	e7a6      	b.n	801a5f2 <_printf_i+0x15e>
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	4632      	mov	r2, r6
 801a6a8:	4649      	mov	r1, r9
 801a6aa:	4640      	mov	r0, r8
 801a6ac:	47d0      	blx	sl
 801a6ae:	3001      	adds	r0, #1
 801a6b0:	d09d      	beq.n	801a5ee <_printf_i+0x15a>
 801a6b2:	3501      	adds	r5, #1
 801a6b4:	68e3      	ldr	r3, [r4, #12]
 801a6b6:	9903      	ldr	r1, [sp, #12]
 801a6b8:	1a5b      	subs	r3, r3, r1
 801a6ba:	42ab      	cmp	r3, r5
 801a6bc:	dcf2      	bgt.n	801a6a4 <_printf_i+0x210>
 801a6be:	e7eb      	b.n	801a698 <_printf_i+0x204>
 801a6c0:	2500      	movs	r5, #0
 801a6c2:	f104 0619 	add.w	r6, r4, #25
 801a6c6:	e7f5      	b.n	801a6b4 <_printf_i+0x220>
 801a6c8:	0801befc 	.word	0x0801befc
 801a6cc:	0801bf0d 	.word	0x0801bf0d

0801a6d0 <__sflush_r>:
 801a6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6d8:	0716      	lsls	r6, r2, #28
 801a6da:	4605      	mov	r5, r0
 801a6dc:	460c      	mov	r4, r1
 801a6de:	d454      	bmi.n	801a78a <__sflush_r+0xba>
 801a6e0:	684b      	ldr	r3, [r1, #4]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	dc02      	bgt.n	801a6ec <__sflush_r+0x1c>
 801a6e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	dd48      	ble.n	801a77e <__sflush_r+0xae>
 801a6ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a6ee:	2e00      	cmp	r6, #0
 801a6f0:	d045      	beq.n	801a77e <__sflush_r+0xae>
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a6f8:	682f      	ldr	r7, [r5, #0]
 801a6fa:	6a21      	ldr	r1, [r4, #32]
 801a6fc:	602b      	str	r3, [r5, #0]
 801a6fe:	d030      	beq.n	801a762 <__sflush_r+0x92>
 801a700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a702:	89a3      	ldrh	r3, [r4, #12]
 801a704:	0759      	lsls	r1, r3, #29
 801a706:	d505      	bpl.n	801a714 <__sflush_r+0x44>
 801a708:	6863      	ldr	r3, [r4, #4]
 801a70a:	1ad2      	subs	r2, r2, r3
 801a70c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a70e:	b10b      	cbz	r3, 801a714 <__sflush_r+0x44>
 801a710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a712:	1ad2      	subs	r2, r2, r3
 801a714:	2300      	movs	r3, #0
 801a716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a718:	6a21      	ldr	r1, [r4, #32]
 801a71a:	4628      	mov	r0, r5
 801a71c:	47b0      	blx	r6
 801a71e:	1c43      	adds	r3, r0, #1
 801a720:	89a3      	ldrh	r3, [r4, #12]
 801a722:	d106      	bne.n	801a732 <__sflush_r+0x62>
 801a724:	6829      	ldr	r1, [r5, #0]
 801a726:	291d      	cmp	r1, #29
 801a728:	d82b      	bhi.n	801a782 <__sflush_r+0xb2>
 801a72a:	4a2a      	ldr	r2, [pc, #168]	@ (801a7d4 <__sflush_r+0x104>)
 801a72c:	40ca      	lsrs	r2, r1
 801a72e:	07d6      	lsls	r6, r2, #31
 801a730:	d527      	bpl.n	801a782 <__sflush_r+0xb2>
 801a732:	2200      	movs	r2, #0
 801a734:	6062      	str	r2, [r4, #4]
 801a736:	04d9      	lsls	r1, r3, #19
 801a738:	6922      	ldr	r2, [r4, #16]
 801a73a:	6022      	str	r2, [r4, #0]
 801a73c:	d504      	bpl.n	801a748 <__sflush_r+0x78>
 801a73e:	1c42      	adds	r2, r0, #1
 801a740:	d101      	bne.n	801a746 <__sflush_r+0x76>
 801a742:	682b      	ldr	r3, [r5, #0]
 801a744:	b903      	cbnz	r3, 801a748 <__sflush_r+0x78>
 801a746:	6560      	str	r0, [r4, #84]	@ 0x54
 801a748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a74a:	602f      	str	r7, [r5, #0]
 801a74c:	b1b9      	cbz	r1, 801a77e <__sflush_r+0xae>
 801a74e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a752:	4299      	cmp	r1, r3
 801a754:	d002      	beq.n	801a75c <__sflush_r+0x8c>
 801a756:	4628      	mov	r0, r5
 801a758:	f7ff fc84 	bl	801a064 <_free_r>
 801a75c:	2300      	movs	r3, #0
 801a75e:	6363      	str	r3, [r4, #52]	@ 0x34
 801a760:	e00d      	b.n	801a77e <__sflush_r+0xae>
 801a762:	2301      	movs	r3, #1
 801a764:	4628      	mov	r0, r5
 801a766:	47b0      	blx	r6
 801a768:	4602      	mov	r2, r0
 801a76a:	1c50      	adds	r0, r2, #1
 801a76c:	d1c9      	bne.n	801a702 <__sflush_r+0x32>
 801a76e:	682b      	ldr	r3, [r5, #0]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d0c6      	beq.n	801a702 <__sflush_r+0x32>
 801a774:	2b1d      	cmp	r3, #29
 801a776:	d001      	beq.n	801a77c <__sflush_r+0xac>
 801a778:	2b16      	cmp	r3, #22
 801a77a:	d11e      	bne.n	801a7ba <__sflush_r+0xea>
 801a77c:	602f      	str	r7, [r5, #0]
 801a77e:	2000      	movs	r0, #0
 801a780:	e022      	b.n	801a7c8 <__sflush_r+0xf8>
 801a782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a786:	b21b      	sxth	r3, r3
 801a788:	e01b      	b.n	801a7c2 <__sflush_r+0xf2>
 801a78a:	690f      	ldr	r7, [r1, #16]
 801a78c:	2f00      	cmp	r7, #0
 801a78e:	d0f6      	beq.n	801a77e <__sflush_r+0xae>
 801a790:	0793      	lsls	r3, r2, #30
 801a792:	680e      	ldr	r6, [r1, #0]
 801a794:	bf08      	it	eq
 801a796:	694b      	ldreq	r3, [r1, #20]
 801a798:	600f      	str	r7, [r1, #0]
 801a79a:	bf18      	it	ne
 801a79c:	2300      	movne	r3, #0
 801a79e:	eba6 0807 	sub.w	r8, r6, r7
 801a7a2:	608b      	str	r3, [r1, #8]
 801a7a4:	f1b8 0f00 	cmp.w	r8, #0
 801a7a8:	dde9      	ble.n	801a77e <__sflush_r+0xae>
 801a7aa:	6a21      	ldr	r1, [r4, #32]
 801a7ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a7ae:	4643      	mov	r3, r8
 801a7b0:	463a      	mov	r2, r7
 801a7b2:	4628      	mov	r0, r5
 801a7b4:	47b0      	blx	r6
 801a7b6:	2800      	cmp	r0, #0
 801a7b8:	dc08      	bgt.n	801a7cc <__sflush_r+0xfc>
 801a7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7c2:	81a3      	strh	r3, [r4, #12]
 801a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7cc:	4407      	add	r7, r0
 801a7ce:	eba8 0800 	sub.w	r8, r8, r0
 801a7d2:	e7e7      	b.n	801a7a4 <__sflush_r+0xd4>
 801a7d4:	20400001 	.word	0x20400001

0801a7d8 <_fflush_r>:
 801a7d8:	b538      	push	{r3, r4, r5, lr}
 801a7da:	690b      	ldr	r3, [r1, #16]
 801a7dc:	4605      	mov	r5, r0
 801a7de:	460c      	mov	r4, r1
 801a7e0:	b913      	cbnz	r3, 801a7e8 <_fflush_r+0x10>
 801a7e2:	2500      	movs	r5, #0
 801a7e4:	4628      	mov	r0, r5
 801a7e6:	bd38      	pop	{r3, r4, r5, pc}
 801a7e8:	b118      	cbz	r0, 801a7f2 <_fflush_r+0x1a>
 801a7ea:	6a03      	ldr	r3, [r0, #32]
 801a7ec:	b90b      	cbnz	r3, 801a7f2 <_fflush_r+0x1a>
 801a7ee:	f7ff f921 	bl	8019a34 <__sinit>
 801a7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d0f3      	beq.n	801a7e2 <_fflush_r+0xa>
 801a7fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a7fc:	07d0      	lsls	r0, r2, #31
 801a7fe:	d404      	bmi.n	801a80a <_fflush_r+0x32>
 801a800:	0599      	lsls	r1, r3, #22
 801a802:	d402      	bmi.n	801a80a <_fflush_r+0x32>
 801a804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a806:	f7ff fbea 	bl	8019fde <__retarget_lock_acquire_recursive>
 801a80a:	4628      	mov	r0, r5
 801a80c:	4621      	mov	r1, r4
 801a80e:	f7ff ff5f 	bl	801a6d0 <__sflush_r>
 801a812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a814:	07da      	lsls	r2, r3, #31
 801a816:	4605      	mov	r5, r0
 801a818:	d4e4      	bmi.n	801a7e4 <_fflush_r+0xc>
 801a81a:	89a3      	ldrh	r3, [r4, #12]
 801a81c:	059b      	lsls	r3, r3, #22
 801a81e:	d4e1      	bmi.n	801a7e4 <_fflush_r+0xc>
 801a820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a822:	f7ff fbdd 	bl	8019fe0 <__retarget_lock_release_recursive>
 801a826:	e7dd      	b.n	801a7e4 <_fflush_r+0xc>

0801a828 <fiprintf>:
 801a828:	b40e      	push	{r1, r2, r3}
 801a82a:	b503      	push	{r0, r1, lr}
 801a82c:	4601      	mov	r1, r0
 801a82e:	ab03      	add	r3, sp, #12
 801a830:	4805      	ldr	r0, [pc, #20]	@ (801a848 <fiprintf+0x20>)
 801a832:	f853 2b04 	ldr.w	r2, [r3], #4
 801a836:	6800      	ldr	r0, [r0, #0]
 801a838:	9301      	str	r3, [sp, #4]
 801a83a:	f000 f8bb 	bl	801a9b4 <_vfiprintf_r>
 801a83e:	b002      	add	sp, #8
 801a840:	f85d eb04 	ldr.w	lr, [sp], #4
 801a844:	b003      	add	sp, #12
 801a846:	4770      	bx	lr
 801a848:	200012a0 	.word	0x200012a0

0801a84c <__swhatbuf_r>:
 801a84c:	b570      	push	{r4, r5, r6, lr}
 801a84e:	460c      	mov	r4, r1
 801a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a854:	2900      	cmp	r1, #0
 801a856:	b096      	sub	sp, #88	@ 0x58
 801a858:	4615      	mov	r5, r2
 801a85a:	461e      	mov	r6, r3
 801a85c:	da0d      	bge.n	801a87a <__swhatbuf_r+0x2e>
 801a85e:	89a3      	ldrh	r3, [r4, #12]
 801a860:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a864:	f04f 0100 	mov.w	r1, #0
 801a868:	bf14      	ite	ne
 801a86a:	2340      	movne	r3, #64	@ 0x40
 801a86c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a870:	2000      	movs	r0, #0
 801a872:	6031      	str	r1, [r6, #0]
 801a874:	602b      	str	r3, [r5, #0]
 801a876:	b016      	add	sp, #88	@ 0x58
 801a878:	bd70      	pop	{r4, r5, r6, pc}
 801a87a:	466a      	mov	r2, sp
 801a87c:	f000 f848 	bl	801a910 <_fstat_r>
 801a880:	2800      	cmp	r0, #0
 801a882:	dbec      	blt.n	801a85e <__swhatbuf_r+0x12>
 801a884:	9901      	ldr	r1, [sp, #4]
 801a886:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a88a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a88e:	4259      	negs	r1, r3
 801a890:	4159      	adcs	r1, r3
 801a892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a896:	e7eb      	b.n	801a870 <__swhatbuf_r+0x24>

0801a898 <__smakebuf_r>:
 801a898:	898b      	ldrh	r3, [r1, #12]
 801a89a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a89c:	079d      	lsls	r5, r3, #30
 801a89e:	4606      	mov	r6, r0
 801a8a0:	460c      	mov	r4, r1
 801a8a2:	d507      	bpl.n	801a8b4 <__smakebuf_r+0x1c>
 801a8a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a8a8:	6023      	str	r3, [r4, #0]
 801a8aa:	6123      	str	r3, [r4, #16]
 801a8ac:	2301      	movs	r3, #1
 801a8ae:	6163      	str	r3, [r4, #20]
 801a8b0:	b003      	add	sp, #12
 801a8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8b4:	ab01      	add	r3, sp, #4
 801a8b6:	466a      	mov	r2, sp
 801a8b8:	f7ff ffc8 	bl	801a84c <__swhatbuf_r>
 801a8bc:	9f00      	ldr	r7, [sp, #0]
 801a8be:	4605      	mov	r5, r0
 801a8c0:	4639      	mov	r1, r7
 801a8c2:	4630      	mov	r0, r6
 801a8c4:	f7fe fe84 	bl	80195d0 <_malloc_r>
 801a8c8:	b948      	cbnz	r0, 801a8de <__smakebuf_r+0x46>
 801a8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8ce:	059a      	lsls	r2, r3, #22
 801a8d0:	d4ee      	bmi.n	801a8b0 <__smakebuf_r+0x18>
 801a8d2:	f023 0303 	bic.w	r3, r3, #3
 801a8d6:	f043 0302 	orr.w	r3, r3, #2
 801a8da:	81a3      	strh	r3, [r4, #12]
 801a8dc:	e7e2      	b.n	801a8a4 <__smakebuf_r+0xc>
 801a8de:	89a3      	ldrh	r3, [r4, #12]
 801a8e0:	6020      	str	r0, [r4, #0]
 801a8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a8e6:	81a3      	strh	r3, [r4, #12]
 801a8e8:	9b01      	ldr	r3, [sp, #4]
 801a8ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a8ee:	b15b      	cbz	r3, 801a908 <__smakebuf_r+0x70>
 801a8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a8f4:	4630      	mov	r0, r6
 801a8f6:	f000 f81d 	bl	801a934 <_isatty_r>
 801a8fa:	b128      	cbz	r0, 801a908 <__smakebuf_r+0x70>
 801a8fc:	89a3      	ldrh	r3, [r4, #12]
 801a8fe:	f023 0303 	bic.w	r3, r3, #3
 801a902:	f043 0301 	orr.w	r3, r3, #1
 801a906:	81a3      	strh	r3, [r4, #12]
 801a908:	89a3      	ldrh	r3, [r4, #12]
 801a90a:	431d      	orrs	r5, r3
 801a90c:	81a5      	strh	r5, [r4, #12]
 801a90e:	e7cf      	b.n	801a8b0 <__smakebuf_r+0x18>

0801a910 <_fstat_r>:
 801a910:	b538      	push	{r3, r4, r5, lr}
 801a912:	4d07      	ldr	r5, [pc, #28]	@ (801a930 <_fstat_r+0x20>)
 801a914:	2300      	movs	r3, #0
 801a916:	4604      	mov	r4, r0
 801a918:	4608      	mov	r0, r1
 801a91a:	4611      	mov	r1, r2
 801a91c:	602b      	str	r3, [r5, #0]
 801a91e:	f7e8 fe41 	bl	80035a4 <_fstat>
 801a922:	1c43      	adds	r3, r0, #1
 801a924:	d102      	bne.n	801a92c <_fstat_r+0x1c>
 801a926:	682b      	ldr	r3, [r5, #0]
 801a928:	b103      	cbz	r3, 801a92c <_fstat_r+0x1c>
 801a92a:	6023      	str	r3, [r4, #0]
 801a92c:	bd38      	pop	{r3, r4, r5, pc}
 801a92e:	bf00      	nop
 801a930:	2000f43c 	.word	0x2000f43c

0801a934 <_isatty_r>:
 801a934:	b538      	push	{r3, r4, r5, lr}
 801a936:	4d06      	ldr	r5, [pc, #24]	@ (801a950 <_isatty_r+0x1c>)
 801a938:	2300      	movs	r3, #0
 801a93a:	4604      	mov	r4, r0
 801a93c:	4608      	mov	r0, r1
 801a93e:	602b      	str	r3, [r5, #0]
 801a940:	f7e8 fe40 	bl	80035c4 <_isatty>
 801a944:	1c43      	adds	r3, r0, #1
 801a946:	d102      	bne.n	801a94e <_isatty_r+0x1a>
 801a948:	682b      	ldr	r3, [r5, #0]
 801a94a:	b103      	cbz	r3, 801a94e <_isatty_r+0x1a>
 801a94c:	6023      	str	r3, [r4, #0]
 801a94e:	bd38      	pop	{r3, r4, r5, pc}
 801a950:	2000f43c 	.word	0x2000f43c

0801a954 <abort>:
 801a954:	b508      	push	{r3, lr}
 801a956:	2006      	movs	r0, #6
 801a958:	f000 f96c 	bl	801ac34 <raise>
 801a95c:	2001      	movs	r0, #1
 801a95e:	f7e8 fdd1 	bl	8003504 <_exit>

0801a962 <__sfputc_r>:
 801a962:	6893      	ldr	r3, [r2, #8]
 801a964:	3b01      	subs	r3, #1
 801a966:	2b00      	cmp	r3, #0
 801a968:	b410      	push	{r4}
 801a96a:	6093      	str	r3, [r2, #8]
 801a96c:	da08      	bge.n	801a980 <__sfputc_r+0x1e>
 801a96e:	6994      	ldr	r4, [r2, #24]
 801a970:	42a3      	cmp	r3, r4
 801a972:	db01      	blt.n	801a978 <__sfputc_r+0x16>
 801a974:	290a      	cmp	r1, #10
 801a976:	d103      	bne.n	801a980 <__sfputc_r+0x1e>
 801a978:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a97c:	f7ff b9a0 	b.w	8019cc0 <__swbuf_r>
 801a980:	6813      	ldr	r3, [r2, #0]
 801a982:	1c58      	adds	r0, r3, #1
 801a984:	6010      	str	r0, [r2, #0]
 801a986:	7019      	strb	r1, [r3, #0]
 801a988:	4608      	mov	r0, r1
 801a98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a98e:	4770      	bx	lr

0801a990 <__sfputs_r>:
 801a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a992:	4606      	mov	r6, r0
 801a994:	460f      	mov	r7, r1
 801a996:	4614      	mov	r4, r2
 801a998:	18d5      	adds	r5, r2, r3
 801a99a:	42ac      	cmp	r4, r5
 801a99c:	d101      	bne.n	801a9a2 <__sfputs_r+0x12>
 801a99e:	2000      	movs	r0, #0
 801a9a0:	e007      	b.n	801a9b2 <__sfputs_r+0x22>
 801a9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9a6:	463a      	mov	r2, r7
 801a9a8:	4630      	mov	r0, r6
 801a9aa:	f7ff ffda 	bl	801a962 <__sfputc_r>
 801a9ae:	1c43      	adds	r3, r0, #1
 801a9b0:	d1f3      	bne.n	801a99a <__sfputs_r+0xa>
 801a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a9b4 <_vfiprintf_r>:
 801a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b8:	460d      	mov	r5, r1
 801a9ba:	b09d      	sub	sp, #116	@ 0x74
 801a9bc:	4614      	mov	r4, r2
 801a9be:	4698      	mov	r8, r3
 801a9c0:	4606      	mov	r6, r0
 801a9c2:	b118      	cbz	r0, 801a9cc <_vfiprintf_r+0x18>
 801a9c4:	6a03      	ldr	r3, [r0, #32]
 801a9c6:	b90b      	cbnz	r3, 801a9cc <_vfiprintf_r+0x18>
 801a9c8:	f7ff f834 	bl	8019a34 <__sinit>
 801a9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a9ce:	07d9      	lsls	r1, r3, #31
 801a9d0:	d405      	bmi.n	801a9de <_vfiprintf_r+0x2a>
 801a9d2:	89ab      	ldrh	r3, [r5, #12]
 801a9d4:	059a      	lsls	r2, r3, #22
 801a9d6:	d402      	bmi.n	801a9de <_vfiprintf_r+0x2a>
 801a9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a9da:	f7ff fb00 	bl	8019fde <__retarget_lock_acquire_recursive>
 801a9de:	89ab      	ldrh	r3, [r5, #12]
 801a9e0:	071b      	lsls	r3, r3, #28
 801a9e2:	d501      	bpl.n	801a9e8 <_vfiprintf_r+0x34>
 801a9e4:	692b      	ldr	r3, [r5, #16]
 801a9e6:	b99b      	cbnz	r3, 801aa10 <_vfiprintf_r+0x5c>
 801a9e8:	4629      	mov	r1, r5
 801a9ea:	4630      	mov	r0, r6
 801a9ec:	f7ff f9a6 	bl	8019d3c <__swsetup_r>
 801a9f0:	b170      	cbz	r0, 801aa10 <_vfiprintf_r+0x5c>
 801a9f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a9f4:	07dc      	lsls	r4, r3, #31
 801a9f6:	d504      	bpl.n	801aa02 <_vfiprintf_r+0x4e>
 801a9f8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9fc:	b01d      	add	sp, #116	@ 0x74
 801a9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa02:	89ab      	ldrh	r3, [r5, #12]
 801aa04:	0598      	lsls	r0, r3, #22
 801aa06:	d4f7      	bmi.n	801a9f8 <_vfiprintf_r+0x44>
 801aa08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aa0a:	f7ff fae9 	bl	8019fe0 <__retarget_lock_release_recursive>
 801aa0e:	e7f3      	b.n	801a9f8 <_vfiprintf_r+0x44>
 801aa10:	2300      	movs	r3, #0
 801aa12:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa14:	2320      	movs	r3, #32
 801aa16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801aa1a:	f8cd 800c 	str.w	r8, [sp, #12]
 801aa1e:	2330      	movs	r3, #48	@ 0x30
 801aa20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801abd0 <_vfiprintf_r+0x21c>
 801aa24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801aa28:	f04f 0901 	mov.w	r9, #1
 801aa2c:	4623      	mov	r3, r4
 801aa2e:	469a      	mov	sl, r3
 801aa30:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa34:	b10a      	cbz	r2, 801aa3a <_vfiprintf_r+0x86>
 801aa36:	2a25      	cmp	r2, #37	@ 0x25
 801aa38:	d1f9      	bne.n	801aa2e <_vfiprintf_r+0x7a>
 801aa3a:	ebba 0b04 	subs.w	fp, sl, r4
 801aa3e:	d00b      	beq.n	801aa58 <_vfiprintf_r+0xa4>
 801aa40:	465b      	mov	r3, fp
 801aa42:	4622      	mov	r2, r4
 801aa44:	4629      	mov	r1, r5
 801aa46:	4630      	mov	r0, r6
 801aa48:	f7ff ffa2 	bl	801a990 <__sfputs_r>
 801aa4c:	3001      	adds	r0, #1
 801aa4e:	f000 80a7 	beq.w	801aba0 <_vfiprintf_r+0x1ec>
 801aa52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa54:	445a      	add	r2, fp
 801aa56:	9209      	str	r2, [sp, #36]	@ 0x24
 801aa58:	f89a 3000 	ldrb.w	r3, [sl]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	f000 809f 	beq.w	801aba0 <_vfiprintf_r+0x1ec>
 801aa62:	2300      	movs	r3, #0
 801aa64:	f04f 32ff 	mov.w	r2, #4294967295
 801aa68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa6c:	f10a 0a01 	add.w	sl, sl, #1
 801aa70:	9304      	str	r3, [sp, #16]
 801aa72:	9307      	str	r3, [sp, #28]
 801aa74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801aa78:	931a      	str	r3, [sp, #104]	@ 0x68
 801aa7a:	4654      	mov	r4, sl
 801aa7c:	2205      	movs	r2, #5
 801aa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa82:	4853      	ldr	r0, [pc, #332]	@ (801abd0 <_vfiprintf_r+0x21c>)
 801aa84:	f7e5 fbd4 	bl	8000230 <memchr>
 801aa88:	9a04      	ldr	r2, [sp, #16]
 801aa8a:	b9d8      	cbnz	r0, 801aac4 <_vfiprintf_r+0x110>
 801aa8c:	06d1      	lsls	r1, r2, #27
 801aa8e:	bf44      	itt	mi
 801aa90:	2320      	movmi	r3, #32
 801aa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aa96:	0713      	lsls	r3, r2, #28
 801aa98:	bf44      	itt	mi
 801aa9a:	232b      	movmi	r3, #43	@ 0x2b
 801aa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aaa0:	f89a 3000 	ldrb.w	r3, [sl]
 801aaa4:	2b2a      	cmp	r3, #42	@ 0x2a
 801aaa6:	d015      	beq.n	801aad4 <_vfiprintf_r+0x120>
 801aaa8:	9a07      	ldr	r2, [sp, #28]
 801aaaa:	4654      	mov	r4, sl
 801aaac:	2000      	movs	r0, #0
 801aaae:	f04f 0c0a 	mov.w	ip, #10
 801aab2:	4621      	mov	r1, r4
 801aab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aab8:	3b30      	subs	r3, #48	@ 0x30
 801aaba:	2b09      	cmp	r3, #9
 801aabc:	d94b      	bls.n	801ab56 <_vfiprintf_r+0x1a2>
 801aabe:	b1b0      	cbz	r0, 801aaee <_vfiprintf_r+0x13a>
 801aac0:	9207      	str	r2, [sp, #28]
 801aac2:	e014      	b.n	801aaee <_vfiprintf_r+0x13a>
 801aac4:	eba0 0308 	sub.w	r3, r0, r8
 801aac8:	fa09 f303 	lsl.w	r3, r9, r3
 801aacc:	4313      	orrs	r3, r2
 801aace:	9304      	str	r3, [sp, #16]
 801aad0:	46a2      	mov	sl, r4
 801aad2:	e7d2      	b.n	801aa7a <_vfiprintf_r+0xc6>
 801aad4:	9b03      	ldr	r3, [sp, #12]
 801aad6:	1d19      	adds	r1, r3, #4
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	9103      	str	r1, [sp, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	bfbb      	ittet	lt
 801aae0:	425b      	neglt	r3, r3
 801aae2:	f042 0202 	orrlt.w	r2, r2, #2
 801aae6:	9307      	strge	r3, [sp, #28]
 801aae8:	9307      	strlt	r3, [sp, #28]
 801aaea:	bfb8      	it	lt
 801aaec:	9204      	strlt	r2, [sp, #16]
 801aaee:	7823      	ldrb	r3, [r4, #0]
 801aaf0:	2b2e      	cmp	r3, #46	@ 0x2e
 801aaf2:	d10a      	bne.n	801ab0a <_vfiprintf_r+0x156>
 801aaf4:	7863      	ldrb	r3, [r4, #1]
 801aaf6:	2b2a      	cmp	r3, #42	@ 0x2a
 801aaf8:	d132      	bne.n	801ab60 <_vfiprintf_r+0x1ac>
 801aafa:	9b03      	ldr	r3, [sp, #12]
 801aafc:	1d1a      	adds	r2, r3, #4
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	9203      	str	r2, [sp, #12]
 801ab02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ab06:	3402      	adds	r4, #2
 801ab08:	9305      	str	r3, [sp, #20]
 801ab0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801abe0 <_vfiprintf_r+0x22c>
 801ab0e:	7821      	ldrb	r1, [r4, #0]
 801ab10:	2203      	movs	r2, #3
 801ab12:	4650      	mov	r0, sl
 801ab14:	f7e5 fb8c 	bl	8000230 <memchr>
 801ab18:	b138      	cbz	r0, 801ab2a <_vfiprintf_r+0x176>
 801ab1a:	9b04      	ldr	r3, [sp, #16]
 801ab1c:	eba0 000a 	sub.w	r0, r0, sl
 801ab20:	2240      	movs	r2, #64	@ 0x40
 801ab22:	4082      	lsls	r2, r0
 801ab24:	4313      	orrs	r3, r2
 801ab26:	3401      	adds	r4, #1
 801ab28:	9304      	str	r3, [sp, #16]
 801ab2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab2e:	4829      	ldr	r0, [pc, #164]	@ (801abd4 <_vfiprintf_r+0x220>)
 801ab30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ab34:	2206      	movs	r2, #6
 801ab36:	f7e5 fb7b 	bl	8000230 <memchr>
 801ab3a:	2800      	cmp	r0, #0
 801ab3c:	d03f      	beq.n	801abbe <_vfiprintf_r+0x20a>
 801ab3e:	4b26      	ldr	r3, [pc, #152]	@ (801abd8 <_vfiprintf_r+0x224>)
 801ab40:	bb1b      	cbnz	r3, 801ab8a <_vfiprintf_r+0x1d6>
 801ab42:	9b03      	ldr	r3, [sp, #12]
 801ab44:	3307      	adds	r3, #7
 801ab46:	f023 0307 	bic.w	r3, r3, #7
 801ab4a:	3308      	adds	r3, #8
 801ab4c:	9303      	str	r3, [sp, #12]
 801ab4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab50:	443b      	add	r3, r7
 801ab52:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab54:	e76a      	b.n	801aa2c <_vfiprintf_r+0x78>
 801ab56:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab5a:	460c      	mov	r4, r1
 801ab5c:	2001      	movs	r0, #1
 801ab5e:	e7a8      	b.n	801aab2 <_vfiprintf_r+0xfe>
 801ab60:	2300      	movs	r3, #0
 801ab62:	3401      	adds	r4, #1
 801ab64:	9305      	str	r3, [sp, #20]
 801ab66:	4619      	mov	r1, r3
 801ab68:	f04f 0c0a 	mov.w	ip, #10
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab72:	3a30      	subs	r2, #48	@ 0x30
 801ab74:	2a09      	cmp	r2, #9
 801ab76:	d903      	bls.n	801ab80 <_vfiprintf_r+0x1cc>
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d0c6      	beq.n	801ab0a <_vfiprintf_r+0x156>
 801ab7c:	9105      	str	r1, [sp, #20]
 801ab7e:	e7c4      	b.n	801ab0a <_vfiprintf_r+0x156>
 801ab80:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab84:	4604      	mov	r4, r0
 801ab86:	2301      	movs	r3, #1
 801ab88:	e7f0      	b.n	801ab6c <_vfiprintf_r+0x1b8>
 801ab8a:	ab03      	add	r3, sp, #12
 801ab8c:	9300      	str	r3, [sp, #0]
 801ab8e:	462a      	mov	r2, r5
 801ab90:	4b12      	ldr	r3, [pc, #72]	@ (801abdc <_vfiprintf_r+0x228>)
 801ab92:	a904      	add	r1, sp, #16
 801ab94:	4630      	mov	r0, r6
 801ab96:	f3af 8000 	nop.w
 801ab9a:	4607      	mov	r7, r0
 801ab9c:	1c78      	adds	r0, r7, #1
 801ab9e:	d1d6      	bne.n	801ab4e <_vfiprintf_r+0x19a>
 801aba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aba2:	07d9      	lsls	r1, r3, #31
 801aba4:	d405      	bmi.n	801abb2 <_vfiprintf_r+0x1fe>
 801aba6:	89ab      	ldrh	r3, [r5, #12]
 801aba8:	059a      	lsls	r2, r3, #22
 801abaa:	d402      	bmi.n	801abb2 <_vfiprintf_r+0x1fe>
 801abac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801abae:	f7ff fa17 	bl	8019fe0 <__retarget_lock_release_recursive>
 801abb2:	89ab      	ldrh	r3, [r5, #12]
 801abb4:	065b      	lsls	r3, r3, #25
 801abb6:	f53f af1f 	bmi.w	801a9f8 <_vfiprintf_r+0x44>
 801abba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801abbc:	e71e      	b.n	801a9fc <_vfiprintf_r+0x48>
 801abbe:	ab03      	add	r3, sp, #12
 801abc0:	9300      	str	r3, [sp, #0]
 801abc2:	462a      	mov	r2, r5
 801abc4:	4b05      	ldr	r3, [pc, #20]	@ (801abdc <_vfiprintf_r+0x228>)
 801abc6:	a904      	add	r1, sp, #16
 801abc8:	4630      	mov	r0, r6
 801abca:	f7ff fc63 	bl	801a494 <_printf_i>
 801abce:	e7e4      	b.n	801ab9a <_vfiprintf_r+0x1e6>
 801abd0:	0801beeb 	.word	0x0801beeb
 801abd4:	0801bef5 	.word	0x0801bef5
 801abd8:	00000000 	.word	0x00000000
 801abdc:	0801a991 	.word	0x0801a991
 801abe0:	0801bef1 	.word	0x0801bef1

0801abe4 <_raise_r>:
 801abe4:	291f      	cmp	r1, #31
 801abe6:	b538      	push	{r3, r4, r5, lr}
 801abe8:	4605      	mov	r5, r0
 801abea:	460c      	mov	r4, r1
 801abec:	d904      	bls.n	801abf8 <_raise_r+0x14>
 801abee:	2316      	movs	r3, #22
 801abf0:	6003      	str	r3, [r0, #0]
 801abf2:	f04f 30ff 	mov.w	r0, #4294967295
 801abf6:	bd38      	pop	{r3, r4, r5, pc}
 801abf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801abfa:	b112      	cbz	r2, 801ac02 <_raise_r+0x1e>
 801abfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ac00:	b94b      	cbnz	r3, 801ac16 <_raise_r+0x32>
 801ac02:	4628      	mov	r0, r5
 801ac04:	f000 f830 	bl	801ac68 <_getpid_r>
 801ac08:	4622      	mov	r2, r4
 801ac0a:	4601      	mov	r1, r0
 801ac0c:	4628      	mov	r0, r5
 801ac0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac12:	f000 b817 	b.w	801ac44 <_kill_r>
 801ac16:	2b01      	cmp	r3, #1
 801ac18:	d00a      	beq.n	801ac30 <_raise_r+0x4c>
 801ac1a:	1c59      	adds	r1, r3, #1
 801ac1c:	d103      	bne.n	801ac26 <_raise_r+0x42>
 801ac1e:	2316      	movs	r3, #22
 801ac20:	6003      	str	r3, [r0, #0]
 801ac22:	2001      	movs	r0, #1
 801ac24:	e7e7      	b.n	801abf6 <_raise_r+0x12>
 801ac26:	2100      	movs	r1, #0
 801ac28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	4798      	blx	r3
 801ac30:	2000      	movs	r0, #0
 801ac32:	e7e0      	b.n	801abf6 <_raise_r+0x12>

0801ac34 <raise>:
 801ac34:	4b02      	ldr	r3, [pc, #8]	@ (801ac40 <raise+0xc>)
 801ac36:	4601      	mov	r1, r0
 801ac38:	6818      	ldr	r0, [r3, #0]
 801ac3a:	f7ff bfd3 	b.w	801abe4 <_raise_r>
 801ac3e:	bf00      	nop
 801ac40:	200012a0 	.word	0x200012a0

0801ac44 <_kill_r>:
 801ac44:	b538      	push	{r3, r4, r5, lr}
 801ac46:	4d07      	ldr	r5, [pc, #28]	@ (801ac64 <_kill_r+0x20>)
 801ac48:	2300      	movs	r3, #0
 801ac4a:	4604      	mov	r4, r0
 801ac4c:	4608      	mov	r0, r1
 801ac4e:	4611      	mov	r1, r2
 801ac50:	602b      	str	r3, [r5, #0]
 801ac52:	f7e8 fc47 	bl	80034e4 <_kill>
 801ac56:	1c43      	adds	r3, r0, #1
 801ac58:	d102      	bne.n	801ac60 <_kill_r+0x1c>
 801ac5a:	682b      	ldr	r3, [r5, #0]
 801ac5c:	b103      	cbz	r3, 801ac60 <_kill_r+0x1c>
 801ac5e:	6023      	str	r3, [r4, #0]
 801ac60:	bd38      	pop	{r3, r4, r5, pc}
 801ac62:	bf00      	nop
 801ac64:	2000f43c 	.word	0x2000f43c

0801ac68 <_getpid_r>:
 801ac68:	f7e8 bc34 	b.w	80034d4 <_getpid>

0801ac6c <_init>:
 801ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac6e:	bf00      	nop
 801ac70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac72:	bc08      	pop	{r3}
 801ac74:	469e      	mov	lr, r3
 801ac76:	4770      	bx	lr

0801ac78 <_fini>:
 801ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac7a:	bf00      	nop
 801ac7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac7e:	bc08      	pop	{r3}
 801ac80:	469e      	mov	lr, r3
 801ac82:	4770      	bx	lr
