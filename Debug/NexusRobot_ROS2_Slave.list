
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  080183b8  080183b8  000193b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080195dc  080195dc  0001bed8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080195dc  080195dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080195e4  080195e4  0001bed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080195e4  080195e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080195ec  080195ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ed8  20000000  080195f0  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de54  20000ed8  0801a4c8  0001bed8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ed2c  0801a4c8  0001cd2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001bed8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c68a  00000000  00000000  0001bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fbf  00000000  00000000  00038592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0003c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d2  00000000  00000000  0003dc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027985  00000000  00000000  0003ee32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dae0  00000000  00000000  000667b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec2ce  00000000  00000000  00084297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  00170565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e7c  00000000  00000000  001705d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000ed8 	.word	0x20000ed8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801839c 	.word	0x0801839c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000edc 	.word	0x20000edc
 800020c:	0801839c 	.word	0x0801839c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9d3 	b.w	80006a8 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f006 fee2 	bl	8007480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f986 	bl	80009d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b58      	ldr	r3, [pc, #352]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8090 	bne.w	80007f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01e      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d015      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00b      	beq.n	800071a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000706:	f383 8811 	msr	BASEPRI, r3
 800070a:	f3bf 8f6f 	isb	sy
 800070e:	f3bf 8f4f 	dsb	sy
 8000712:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d06a      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
 8000720:	4b43      	ldr	r3, [pc, #268]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d865      	bhi.n	80007f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072a:	4b42      	ldr	r3, [pc, #264]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 800072c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800072e:	4b41      	ldr	r3, [pc, #260]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000734:	e004      	b.n	8000740 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d903      	bls.n	8000752 <pvPortMallocMicroROS+0xa6>
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f1      	bne.n	8000736 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000758:	429a      	cmp	r2, r3
 800075a:	d04c      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2208      	movs	r2, #8
 8000762:	4413      	add	r3, r2
 8000764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1ad2      	subs	r2, r2, r3
 8000776:	2308      	movs	r3, #8
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	429a      	cmp	r2, r3
 800077c:	d920      	bls.n	80007c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800077e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	613b      	str	r3, [r7, #16]
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ba:	69b8      	ldr	r0, [r7, #24]
 80007bc:	f000 f96c 	bl	8000a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4a19      	ldr	r2, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d203      	bcs.n	80007e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	431a      	orrs	r2, r3
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f6:	f006 fe51 	bl	800749c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00b      	beq.n	800081c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800081c:	69fb      	ldr	r3, [r7, #28]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20004afc 	.word	0x20004afc
 800082c:	20004b08 	.word	0x20004b08
 8000830:	20004b00 	.word	0x20004b00
 8000834:	20004af4 	.word	0x20004af4
 8000838:	20004b04 	.word	0x20004b04

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04a      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10b      	bne.n	8000882 <vPortFreeMicroROS+0x46>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	f383 8811 	msr	BASEPRI, r3
 8000872:	f3bf 8f6f 	isb	sy
 8000876:	f3bf 8f4f 	dsb	sy
 800087a:	60fb      	str	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800088a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	60bb      	str	r3, [r7, #8]
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	e7fd      	b.n	800089e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d019      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d115      	bne.n	80008e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	401a      	ands	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008c8:	f006 fdda 	bl	8007480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a06      	ldr	r2, [pc, #24]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008da:	6938      	ldr	r0, [r7, #16]
 80008dc:	f000 f8dc 	bl	8000a98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e0:	f006 fddc 	bl	800749c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20004b08 	.word	0x20004b08
 80008f0:	20004b00 	.word	0x20004b00

080008f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000900:	2308      	movs	r3, #8
 8000902:	425b      	negs	r3, r3
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4413      	add	r3, r2
 8000908:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <getBlockSize+0x38>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	43db      	mvns	r3, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	return count;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20004b08 	.word	0x20004b08

08000930 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800093a:	f006 fda1 	bl	8007480 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f7ff feb4 	bl	80006ac <pvPortMallocMicroROS>
 8000944:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d017      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d014      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffce 	bl	80008f4 <getBlockSize>
 8000958:	4603      	mov	r3, r0
 800095a:	2208      	movs	r2, #8
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d201      	bcs.n	800096c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68b8      	ldr	r0, [r7, #8]
 8000972:	f016 fed6 	bl	8017722 <memcpy>

		vPortFreeMicroROS(pv);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff60 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800097c:	f006 fd8e 	bl	800749c <xTaskResumeAll>

	return newmem;
 8000980:	68bb      	ldr	r3, [r7, #8]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000994:	f006 fd74 	bl	8007480 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff fe82 	bl	80006ac <pvPortMallocMicroROS>
 80009a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009ae:	e004      	b.n	80009ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	613a      	str	r2, [r7, #16]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	617a      	str	r2, [r7, #20]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f5      	bne.n	80009b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009c4:	f006 fd6a 	bl	800749c <xTaskResumeAll>
  	return mem;
 80009c8:	68fb      	ldr	r3, [r7, #12]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <prvHeapInit+0xac>)
 80009e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00c      	beq.n	8000a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3307      	adds	r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a1f      	ldr	r2, [pc, #124]	@ (8000a80 <prvHeapInit+0xac>)
 8000a04:	4413      	add	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a20:	2208      	movs	r2, #8
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	1ad2      	subs	r2, r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <prvHeapInit+0xb8>)
 8000a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <prvHeapInit+0xbc>)
 8000a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <prvHeapInit+0xc0>)
 8000a6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	20000ef4 	.word	0x20000ef4
 8000a84:	20004af4 	.word	0x20004af4
 8000a88:	20004afc 	.word	0x20004afc
 8000a8c:	20004b04 	.word	0x20004b04
 8000a90:	20004b00 	.word	0x20004b00
 8000a94:	20004b08 	.word	0x20004b08

08000a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <prvInsertBlockIntoFreeList+0xac>)
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	e002      	b.n	8000aac <prvInsertBlockIntoFreeList+0x14>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d8f7      	bhi.n	8000aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d108      	bne.n	8000ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d118      	bne.n	8000b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d00d      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e008      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e003      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d002      	beq.n	8000b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20004af4 	.word	0x20004af4
 8000b48:	20004afc 	.word	0x20004afc

08000b4c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b5a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b60:	4904      	ldr	r1, [pc, #16]	@ (8000b74 <cubemx_transport_open+0x28>)
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f004 f968 	bl	8004e38 <HAL_UART_Receive_DMA>
    return true;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20004b0c 	.word	0x20004b0c

08000b78 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b86:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f004 f97a 	bl	8004e82 <HAL_UART_DMAStop>
    return true;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bac:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	d11c      	bne.n	8000bf4 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f004 f8bc 	bl	8004d40 <HAL_UART_Transmit_DMA>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bcc:	e002      	b.n	8000bd4 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f005 fc14 	bl	80063fc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <cubemx_transport_write+0x4e>
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b20      	cmp	r3, #32
 8000be4:	d1f3      	bne.n	8000bce <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000be6:	7cfb      	ldrb	r3, [r7, #19]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <cubemx_transport_write+0x58>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	e002      	b.n	8000bf6 <cubemx_transport_write+0x5e>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bf4:	2300      	movs	r3, #0
    }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c14:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1a:	b672      	cpsid	i
}
 8000c1c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c2c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c2e:	b662      	cpsie	i
}
 8000c30:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f005 fbdf 	bl	80063fc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d103      	bne.n	8000c52 <cubemx_transport_read+0x52>
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbe3      	blt.n	8000c1a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c56:	e011      	b.n	8000c7c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	440b      	add	r3, r1
 8000c62:	4910      	ldr	r1, [pc, #64]	@ (8000ca4 <cubemx_transport_read+0xa4>)
 8000c64:	5c8a      	ldrb	r2, [r1, r2]
 8000c66:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c74:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d003      	beq.n	8000c90 <cubemx_transport_read+0x90>
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3e3      	bcc.n	8000c58 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c90:	69bb      	ldr	r3, [r7, #24]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20005310 	.word	0x20005310
 8000ca0:	2000530c 	.word	0x2000530c
 8000ca4:	20004b0c 	.word	0x20004b0c

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f001 fb0e 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f824 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 fad0 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f000 faa6 	bl	8001208 <MX_DMA_Init>
  MX_TIM1_Init();
 8000cbc:	f000 f88c 	bl	8000dd8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cc0:	f000 f978 	bl	8000fb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cc4:	f000 f9ca 	bl	800105c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cc8:	f000 fa1c 	bl	8001104 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000ccc:	f000 fa72 	bl	80011b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cd0:	f000 f8da 	bl	8000e88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cd4:	f005 fab6 	bl	8006244 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cd8:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <main+0x48>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <main+0x4c>)
 8000cde:	f005 fafb 	bl	80062d8 <osThreadNew>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <main+0x50>)
 8000ce6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ce8:	f005 fad0 	bl	800628c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <main+0x44>
 8000cf0:	08018450 	.word	0x08018450
 8000cf4:	08001521 	.word	0x08001521
 8000cf8:	20005584 	.word	0x20005584

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	@ 0x50
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2234      	movs	r2, #52	@ 0x34
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f016 fc2e 	bl	801756c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <SystemClock_Config+0xd4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	4a29      	ldr	r2, [pc, #164]	@ (8000dd0 <SystemClock_Config+0xd4>)
 8000d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <SystemClock_Config+0xd4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <SystemClock_Config+0xd8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d48:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <SystemClock_Config+0xd8>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <SystemClock_Config+0xd8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d64:	2310      	movs	r3, #16
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d70:	2310      	movs	r3, #16
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d74:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fd08 	bl	80037a0 <HAL_RCC_OscConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d96:	f000 fd27 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 f976 	bl	80030a8 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dc2:	f000 fd11 	bl	80017e8 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	@ 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	@ 0x30
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2224      	movs	r2, #36	@ 0x24
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f016 fbc0 	bl	801756c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000df6:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <MX_TIM1_Init+0xac>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e4c:	f003 f85f 	bl	8003f0e <HAL_TIM_Encoder_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e56:	f000 fcc7 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e68:	f003 fe8a 	bl	8004b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e72:	f000 fcb9 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	@ 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20005314 	.word	0x20005314
 8000e84:	40010000 	.word	0x40010000

08000e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	@ 0x38
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8000ecc:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ece:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b36      	ldr	r3, [pc, #216]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eda:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee0:	4833      	ldr	r0, [pc, #204]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ee2:	f002 fefb 	bl	8003cdc <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000eec:	f000 fc7c 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efa:	4619      	mov	r1, r3
 8000efc:	482c      	ldr	r0, [pc, #176]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000efe:	f003 fa5f 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f08:	f000 fc6e 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f0c:	4828      	ldr	r0, [pc, #160]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f0e:	f002 ffa5 	bl	8003e5c <HAL_TIM_PWM_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f18:	f000 fc66 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4821      	ldr	r0, [pc, #132]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f2c:	f003 fe28 	bl	8004b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f36:	f000 fc57 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3a:	2360      	movs	r3, #96	@ 0x60
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4817      	ldr	r0, [pc, #92]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f52:	f003 f973 	bl	800423c <HAL_TIM_PWM_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f5c:	f000 fc44 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2204      	movs	r2, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f68:	f003 f968 	bl	800423c <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f72:	f000 fc39 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f7e:	f003 f95d 	bl	800423c <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000f88:	f000 fc2e 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	220c      	movs	r2, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f94:	f003 f952 	bl	800423c <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000f9e:	f000 fc23 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fa2:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000fa4:	f000 fec0 	bl	8001d28 <HAL_TIM_MspPostInit>

}
 8000fa8:	bf00      	nop
 8000faa:	3738      	adds	r7, #56	@ 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000535c 	.word	0x2000535c

08000fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2224      	movs	r2, #36	@ 0x24
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f016 fad2 	bl	801756c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fd2:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <MX_TIM3_Init+0xa4>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8001022:	f002 ff74 	bl	8003f0e <HAL_TIM_Encoder_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800102c:	f000 fbdc 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_TIM3_Init+0xa0>)
 800103e:	f003 fd9f 	bl	8004b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001048:	f000 fbce 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
}
 800104c:	bf00      	nop
 800104e:	3730      	adds	r7, #48	@ 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200053a4 	.word	0x200053a4
 8001058:	40000400 	.word	0x40000400

0800105c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2224      	movs	r2, #36	@ 0x24
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f016 fa7e 	bl	801756c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_TIM4_Init+0xa0>)
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <MX_TIM4_Init+0xa4>)
 800107c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_TIM4_Init+0xa0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_TIM4_Init+0xa0>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_TIM4_Init+0xa0>)
 800108c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001090:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_TIM4_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_TIM4_Init+0xa0>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800109e:	2301      	movs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b6:	2301      	movs	r3, #1
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <MX_TIM4_Init+0xa0>)
 80010ca:	f002 ff20 	bl	8003f0e <HAL_TIM_Encoder_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 fb88 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_TIM4_Init+0xa0>)
 80010e6:	f003 fd4b 	bl	8004b80 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80010f0:	f000 fb7a 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
}
 80010f4:	bf00      	nop
 80010f6:	3730      	adds	r7, #48	@ 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200053ec 	.word	0x200053ec
 8001100:	40000800 	.word	0x40000800

08001104 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2224      	movs	r2, #36	@ 0x24
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f016 fa2a 	bl	801756c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001122:	4a23      	ldr	r2, [pc, #140]	@ (80011b0 <MX_TIM8_Init+0xac>)
 8001124:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <MX_TIM8_Init+0xa8>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001134:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001138:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_TIM8_Init+0xa8>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800114c:	2301      	movs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001178:	f002 fec9 	bl	8003f0e <HAL_TIM_Encoder_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001182:	f000 fb31 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001194:	f003 fcf4 	bl	8004b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800119e:	f000 fb23 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	@ 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20005434 	.word	0x20005434
 80011b0:	40010400 	.word	0x40010400

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f003 fd58 	bl	8004ca0 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 faf7 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000547c 	.word	0x2000547c
 8001204:	40004400 	.word	0x40004400

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2105      	movs	r1, #5
 800122e:	2010      	movs	r0, #16
 8001230:	f001 f946 	bl	80024c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001234:	2010      	movs	r0, #16
 8001236:	f001 f95f 	bl	80024f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2105      	movs	r1, #5
 800123e:	2011      	movs	r0, #17
 8001240:	f001 f93e 	bl	80024c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001244:	2011      	movs	r0, #17
 8001246:	f001 f957 	bl	80024f8 <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b49      	ldr	r3, [pc, #292]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a48      	ldr	r2, [pc, #288]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b46      	ldr	r3, [pc, #280]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a41      	ldr	r2, [pc, #260]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <MX_GPIO_Init+0x140>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a33      	ldr	r2, [pc, #204]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b31      	ldr	r3, [pc, #196]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, RL_INB_GPO_Pin|RL_INA_GPO_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2103      	movs	r1, #3
 80012e2:	482e      	ldr	r0, [pc, #184]	@ (800139c <MX_GPIO_Init+0x144>)
 80012e4:	f001 feac 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|LR_INA_GPO_Pin|LR_INB_GPO_Pin
 80012e8:	2200      	movs	r2, #0
 80012ea:	f640 411f 	movw	r1, #3103	@ 0xc1f
 80012ee:	482c      	ldr	r0, [pc, #176]	@ (80013a0 <MX_GPIO_Init+0x148>)
 80012f0:	f001 fea6 	bl	8003040 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UR_INA_GPO_Pin|FR_INA_GPO_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80012fa:	482a      	ldr	r0, [pc, #168]	@ (80013a4 <MX_GPIO_Init+0x14c>)
 80012fc:	f001 fea0 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UR_INB_GPO_Pin|RR_INA_GPO_Pin|UL_INA_GPO_Pin|UL_INB_GPO_Pin
 8001300:	2200      	movs	r2, #0
 8001302:	f24e 0121 	movw	r1, #57377	@ 0xe021
 8001306:	4828      	ldr	r0, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0x150>)
 8001308:	f001 fe9a 	bl	8003040 <HAL_GPIO_WritePin>
                          |FR_INB_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001312:	4823      	ldr	r0, [pc, #140]	@ (80013a0 <MX_GPIO_Init+0x148>)
 8001314:	f001 fe94 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RL_INB_GPO_Pin RL_INA_GPO_Pin */
  GPIO_InitStruct.Pin = RL_INB_GPO_Pin|RL_INA_GPO_Pin;
 8001318:	2303      	movs	r3, #3
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	481b      	ldr	r0, [pc, #108]	@ (800139c <MX_GPIO_Init+0x144>)
 8001330:	f001 fcf2 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_INA_GPO_Pin FL_INB_GPO_Pin LR_INA_GPO_Pin LR_INB_GPO_Pin
                           RR_INB_GPO_Pin RR_VDD_GPO_Pin FR_VDD_GPO_Pin RL_VDD_GPO_Pin
                           FL_VDD_GPO_Pin */
  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|LR_INA_GPO_Pin|LR_INB_GPO_Pin
 8001334:	f640 731f 	movw	r3, #3871	@ 0xf1f
 8001338:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin|RL_VDD_GPO_Pin
                          |FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_GPIO_Init+0x148>)
 800134e:	f001 fce3 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : UR_INA_GPO_Pin FR_INA_GPO_Pin */
  GPIO_InitStruct.Pin = UR_INA_GPO_Pin|FR_INA_GPO_Pin;
 8001352:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <MX_GPIO_Init+0x14c>)
 800136c:	f001 fcd4 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : UR_INB_GPO_Pin RR_INA_GPO_Pin UL_INA_GPO_Pin UL_INB_GPO_Pin
                           FR_INB_GPO_Pin */
  GPIO_InitStruct.Pin = UR_INB_GPO_Pin|RR_INA_GPO_Pin|UL_INA_GPO_Pin|UL_INB_GPO_Pin
 8001370:	f24e 0321 	movw	r3, #57377	@ 0xe021
 8001374:	617b      	str	r3, [r7, #20]
                          |FR_INB_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <MX_GPIO_Init+0x150>)
 800138a:	f001 fcc5 	bl	8002d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400

080013ac <clamp500>:

/* USER CODE BEGIN 4 */

static inline int32_t clamp500(int32_t x) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if (x < -500) return -500;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80013ba:	da01      	bge.n	80013c0 <clamp500+0x14>
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <clamp500+0x30>)
 80013be:	e007      	b.n	80013d0 <clamp500+0x24>
  if (x >  500) return  500;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013c6:	dd02      	ble.n	80013ce <clamp500+0x22>
 80013c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013cc:	e000      	b.n	80013d0 <clamp500+0x24>
  return x;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	fffffe0c 	.word	0xfffffe0c

080013e0 <init_multiarray_4>:

/* Pre-allocate fixed-size MultiArray with external storage */
static void init_multiarray_4(std_msgs__msg__Int32MultiArray* m, int32_t* backing)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  std_msgs__msg__Int32MultiArray__init(m);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f009 fb5a 	bl	800aaa4 <std_msgs__msg__Int32MultiArray__init>
  m->layout.dim.data = NULL;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
  m->layout.dim.size = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  m->layout.dim.capacity = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  m->layout.data_offset = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  m->data.data = backing;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	611a      	str	r2, [r3, #16]
  m->data.size = 4;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2204      	movs	r2, #4
 8001412:	615a      	str	r2, [r3, #20]
  m->data.capacity = 4;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2204      	movs	r2, #4
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <wheel_cmd_cb>:

/* Subscriber callback: clamp & store */
static void wheel_cmd_cb(const void * msgin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32MultiArray* in = (const std_msgs__msg__Int32MultiArray*)msgin;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	613b      	str	r3, [r7, #16]
  int n = (in->data.size >= 4) ? 4 : (int)in->data.size;
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d802      	bhi.n	800143e <wheel_cmd_cb+0x1a>
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	e000      	b.n	8001440 <wheel_cmd_cb+0x1c>
 800143e:	2304      	movs	r3, #4
 8001440:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < 4; ++i) {
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	e01d      	b.n	8001484 <wheel_cmd_cb+0x60>
    int32_t v = (i < n) ? in->data.data[i] : 0;
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	da06      	bge.n	800145e <wheel_cmd_cb+0x3a>
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	e000      	b.n	8001460 <wheel_cmd_cb+0x3c>
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
    v = clamp500(v);
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff ffa2 	bl	80013ac <clamp500>
 8001468:	60b8      	str	r0, [r7, #8]
    last_cmd[i] = v;
 800146a:	490a      	ldr	r1, [pc, #40]	@ (8001494 <wheel_cmd_cb+0x70>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    cmd_data[i] = v;  // for echo
 8001474:	4908      	ldr	r1, [pc, #32]	@ (8001498 <wheel_cmd_cb+0x74>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 4; ++i) {
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b03      	cmp	r3, #3
 8001488:	ddde      	ble.n	8001448 <wheel_cmd_cb+0x24>
  }
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200056ac 	.word	0x200056ac
 8001498:	2000567c 	.word	0x2000567c

0800149c <timer_cb>:

/* Timer callback: publish echo + (test) encoders */
static void timer_cb(rcl_timer_t * t, int64_t last_call_time)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	e9c7 2300 	strd	r2, r3, [r7]
  (void)t; (void)last_call_time;

  /* echo latest command */
  (void)rcl_publish(&pub_cmd_echo, &msg_cmd_echo, NULL);
 80014a8:	2200      	movs	r2, #0
 80014aa:	4915      	ldr	r1, [pc, #84]	@ (8001500 <timer_cb+0x64>)
 80014ac:	4815      	ldr	r0, [pc, #84]	@ (8001504 <timer_cb+0x68>)
 80014ae:	f007 fd39 	bl	8008f24 <rcl_publish>

  /* test encoders: integrate command */
  static int32_t acc[4] = {0,0,0,0};
  for (int i=0;i<4;++i) { acc[i] += last_cmd[i]; enc_data[i] = acc[i]; }
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e017      	b.n	80014e8 <timer_cb+0x4c>
 80014b8:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <timer_cb+0x6c>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c0:	4912      	ldr	r1, [pc, #72]	@ (800150c <timer_cb+0x70>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014c8:	441a      	add	r2, r3
 80014ca:	4910      	ldr	r1, [pc, #64]	@ (800150c <timer_cb+0x70>)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <timer_cb+0x70>)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <timer_cb+0x74>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	dde4      	ble.n	80014b8 <timer_cb+0x1c>
  (void)rcl_publish(&pub_encoders, &msg_enc, NULL);
 80014ee:	2200      	movs	r2, #0
 80014f0:	4908      	ldr	r1, [pc, #32]	@ (8001514 <timer_cb+0x78>)
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <timer_cb+0x7c>)
 80014f4:	f007 fd16 	bl	8008f24 <rcl_publish>
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20005628 	.word	0x20005628
 8001504:	20005588 	.word	0x20005588
 8001508:	200056ac 	.word	0x200056ac
 800150c:	200056bc 	.word	0x200056bc
 8001510:	2000568c 	.word	0x2000568c
 8001514:	20005644 	.word	0x20005644
 8001518:	2000558c 	.word	0x2000558c
 800151c:	00000000 	.word	0x00000000

08001520 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0a8      	sub	sp, #160	@ 0xa0
 8001524:	af02      	add	r7, sp, #8
 8001526:	6078      	str	r0, [r7, #4]
	// start PWM on CH1 (do this once)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  */
 
	/* transport */
	  rmw_uros_set_custom_transport(
 8001528:	4b89      	ldr	r3, [pc, #548]	@ (8001750 <StartDefaultTask+0x230>)
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	4b89      	ldr	r3, [pc, #548]	@ (8001754 <StartDefaultTask+0x234>)
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4b89      	ldr	r3, [pc, #548]	@ (8001758 <StartDefaultTask+0x238>)
 8001532:	4a8a      	ldr	r2, [pc, #552]	@ (800175c <StartDefaultTask+0x23c>)
 8001534:	498a      	ldr	r1, [pc, #552]	@ (8001760 <StartDefaultTask+0x240>)
 8001536:	2001      	movs	r0, #1
 8001538:	f008 fd1e 	bl	8009f78 <rmw_uros_set_custom_transport>
	      true, (void *)&huart2,
	      cubemx_transport_open, cubemx_transport_close,
	      cubemx_transport_write, cubemx_transport_read);

	  /* allocators */
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800153c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001540:	4618      	mov	r0, r3
 8001542:	f008 fc3f 	bl	8009dc4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 8001546:	4b87      	ldr	r3, [pc, #540]	@ (8001764 <StartDefaultTask+0x244>)
 8001548:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 800154a:	4b87      	ldr	r3, [pc, #540]	@ (8001768 <StartDefaultTask+0x248>)
 800154c:	663b      	str	r3, [r7, #96]	@ 0x60
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 800154e:	4b87      	ldr	r3, [pc, #540]	@ (800176c <StartDefaultTask+0x24c>)
 8001550:	667b      	str	r3, [r7, #100]	@ 0x64
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001552:	4b87      	ldr	r3, [pc, #540]	@ (8001770 <StartDefaultTask+0x250>)
 8001554:	66bb      	str	r3, [r7, #104]	@ 0x68
	  (void)rcutils_set_default_allocator(&freeRTOS_allocator);
 8001556:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800155a:	4618      	mov	r0, r3
 800155c:	f008 fc4e 	bl	8009dfc <rcutils_set_default_allocator>

	  /* wait for agent (~5 s) */
	  for (int i = 0; i < 50; ++i) {
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001566:	e00e      	b.n	8001586 <StartDefaultTask+0x66>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001568:	2101      	movs	r1, #1
 800156a:	2064      	movs	r0, #100	@ 0x64
 800156c:	f008 fd1a 	bl	8009fa4 <rmw_uros_ping_agent>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00c      	beq.n	8001590 <StartDefaultTask+0x70>
	    osDelay(100);
 8001576:	2064      	movs	r0, #100	@ 0x64
 8001578:	f004 ff40 	bl	80063fc <osDelay>
	  for (int i = 0; i < 50; ++i) {
 800157c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001580:	3301      	adds	r3, #1
 8001582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001586:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800158a:	2b31      	cmp	r3, #49	@ 0x31
 800158c:	ddec      	ble.n	8001568 <StartDefaultTask+0x48>
 800158e:	e000      	b.n	8001592 <StartDefaultTask+0x72>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001590:	bf00      	nop
	  }

	  /* graph */
	  rclc_support_t support;
	  rcl_allocator_t allocator = rcl_get_default_allocator();
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4618      	mov	r0, r3
 8001598:	f008 fc22 	bl	8009de0 <rcutils_get_default_allocator>
	  CHECK(rclc_support_init(&support, 0, NULL, &allocator));
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	f008 fae4 	bl	8009b74 <rclc_support_init>
 80015ac:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80015b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <StartDefaultTask+0xa8>
 80015b8:	2120      	movs	r1, #32
 80015ba:	486e      	ldr	r0, [pc, #440]	@ (8001774 <StartDefaultTask+0x254>)
 80015bc:	f001 fd59 	bl	8003072 <HAL_GPIO_TogglePin>
 80015c0:	20c8      	movs	r0, #200	@ 0xc8
 80015c2:	f004 ff1b 	bl	80063fc <osDelay>
 80015c6:	e7f7      	b.n	80015b8 <StartDefaultTask+0x98>

	  rcl_node_t node;
	  CHECK(rclc_node_init_default(&node, "nucleo_f446re", "", &support));
 80015c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015cc:	f107 000c 	add.w	r0, r7, #12
 80015d0:	4a69      	ldr	r2, [pc, #420]	@ (8001778 <StartDefaultTask+0x258>)
 80015d2:	496a      	ldr	r1, [pc, #424]	@ (800177c <StartDefaultTask+0x25c>)
 80015d4:	f008 fb18 	bl	8009c08 <rclc_node_init_default>
 80015d8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80015dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <StartDefaultTask+0xd4>
 80015e4:	2120      	movs	r1, #32
 80015e6:	4863      	ldr	r0, [pc, #396]	@ (8001774 <StartDefaultTask+0x254>)
 80015e8:	f001 fd43 	bl	8003072 <HAL_GPIO_TogglePin>
 80015ec:	20c8      	movs	r0, #200	@ 0xc8
 80015ee:	f004 ff05 	bl	80063fc <osDelay>
 80015f2:	e7f7      	b.n	80015e4 <StartDefaultTask+0xc4>

	  /* prepare fixed-size messages */
	  init_multiarray_4(&msg_cmd_echo, cmd_data);
 80015f4:	4962      	ldr	r1, [pc, #392]	@ (8001780 <StartDefaultTask+0x260>)
 80015f6:	4863      	ldr	r0, [pc, #396]	@ (8001784 <StartDefaultTask+0x264>)
 80015f8:	f7ff fef2 	bl	80013e0 <init_multiarray_4>
	  init_multiarray_4(&msg_enc,      enc_data);
 80015fc:	4962      	ldr	r1, [pc, #392]	@ (8001788 <StartDefaultTask+0x268>)
 80015fe:	4863      	ldr	r0, [pc, #396]	@ (800178c <StartDefaultTask+0x26c>)
 8001600:	f7ff feee 	bl	80013e0 <init_multiarray_4>
	  init_multiarray_4(&msg_cmd_rx,   rx_data);
 8001604:	4962      	ldr	r1, [pc, #392]	@ (8001790 <StartDefaultTask+0x270>)
 8001606:	4863      	ldr	r0, [pc, #396]	@ (8001794 <StartDefaultTask+0x274>)
 8001608:	f7ff feea 	bl	80013e0 <init_multiarray_4>

	  /* publishers */
	  CHECK(rclc_publisher_init_default(
 800160c:	f009 fa8a 	bl	800ab24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 8001610:	4602      	mov	r2, r0
 8001612:	f107 010c 	add.w	r1, r7, #12
 8001616:	4b60      	ldr	r3, [pc, #384]	@ (8001798 <StartDefaultTask+0x278>)
 8001618:	4860      	ldr	r0, [pc, #384]	@ (800179c <StartDefaultTask+0x27c>)
 800161a:	f008 fb31 	bl	8009c80 <rclc_publisher_init_default>
 800161e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8001622:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <StartDefaultTask+0x11a>
 800162a:	2120      	movs	r1, #32
 800162c:	4851      	ldr	r0, [pc, #324]	@ (8001774 <StartDefaultTask+0x254>)
 800162e:	f001 fd20 	bl	8003072 <HAL_GPIO_TogglePin>
 8001632:	20c8      	movs	r0, #200	@ 0xc8
 8001634:	f004 fee2 	bl	80063fc <osDelay>
 8001638:	e7f7      	b.n	800162a <StartDefaultTask+0x10a>
	      &pub_cmd_echo, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/cmd_echo"));

	  CHECK(rclc_publisher_init_default(
 800163a:	f009 fa73 	bl	800ab24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 800163e:	4602      	mov	r2, r0
 8001640:	f107 010c 	add.w	r1, r7, #12
 8001644:	4b56      	ldr	r3, [pc, #344]	@ (80017a0 <StartDefaultTask+0x280>)
 8001646:	4857      	ldr	r0, [pc, #348]	@ (80017a4 <StartDefaultTask+0x284>)
 8001648:	f008 fb1a 	bl	8009c80 <rclc_publisher_init_default>
 800164c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8001650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <StartDefaultTask+0x148>
 8001658:	2120      	movs	r1, #32
 800165a:	4846      	ldr	r0, [pc, #280]	@ (8001774 <StartDefaultTask+0x254>)
 800165c:	f001 fd09 	bl	8003072 <HAL_GPIO_TogglePin>
 8001660:	20c8      	movs	r0, #200	@ 0xc8
 8001662:	f004 fecb 	bl	80063fc <osDelay>
 8001666:	e7f7      	b.n	8001658 <StartDefaultTask+0x138>
	      &pub_encoders, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/encoders"));

	  /* subscriber */
	  CHECK(rclc_subscription_init_default(
 8001668:	f009 fa5c 	bl	800ab24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 800166c:	4602      	mov	r2, r0
 800166e:	f107 010c 	add.w	r1, r7, #12
 8001672:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <StartDefaultTask+0x288>)
 8001674:	484d      	ldr	r0, [pc, #308]	@ (80017ac <StartDefaultTask+0x28c>)
 8001676:	f008 fb37 	bl	8009ce8 <rclc_subscription_init_default>
 800167a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800167e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <StartDefaultTask+0x176>
 8001686:	2120      	movs	r1, #32
 8001688:	483a      	ldr	r0, [pc, #232]	@ (8001774 <StartDefaultTask+0x254>)
 800168a:	f001 fcf2 	bl	8003072 <HAL_GPIO_TogglePin>
 800168e:	20c8      	movs	r0, #200	@ 0xc8
 8001690:	f004 feb4 	bl	80063fc <osDelay>
 8001694:	e7f7      	b.n	8001686 <StartDefaultTask+0x166>
	      &sub_cmd, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_cmd"));

	  /* 100 Hz timer (new API needs autostart flag) */
	  CHECK(rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(10), timer_cb, true));
 8001696:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800169a:	2301      	movs	r3, #1
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <StartDefaultTask+0x290>)
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4a44      	ldr	r2, [pc, #272]	@ (80017b4 <StartDefaultTask+0x294>)
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	4843      	ldr	r0, [pc, #268]	@ (80017b8 <StartDefaultTask+0x298>)
 80016aa:	f008 fb51 	bl	8009d50 <rclc_timer_init_default2>
 80016ae:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80016b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <StartDefaultTask+0x1a6>
 80016b6:	2120      	movs	r1, #32
 80016b8:	482e      	ldr	r0, [pc, #184]	@ (8001774 <StartDefaultTask+0x254>)
 80016ba:	f001 fcda 	bl	8003072 <HAL_GPIO_TogglePin>
 80016be:	20c8      	movs	r0, #200	@ 0xc8
 80016c0:	f004 fe9c 	bl	80063fc <osDelay>
 80016c4:	e7f7      	b.n	80016b6 <StartDefaultTask+0x196>

	  /* executor (1 sub + 1 timer) */
	  CHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80016ce:	2202      	movs	r2, #2
 80016d0:	483a      	ldr	r0, [pc, #232]	@ (80017bc <StartDefaultTask+0x29c>)
 80016d2:	f007 ffd5 	bl	8009680 <rclc_executor_init>
 80016d6:	67b8      	str	r0, [r7, #120]	@ 0x78
 80016d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <StartDefaultTask+0x1ce>
 80016de:	2120      	movs	r1, #32
 80016e0:	4824      	ldr	r0, [pc, #144]	@ (8001774 <StartDefaultTask+0x254>)
 80016e2:	f001 fcc6 	bl	8003072 <HAL_GPIO_TogglePin>
 80016e6:	20c8      	movs	r0, #200	@ 0xc8
 80016e8:	f004 fe88 	bl	80063fc <osDelay>
 80016ec:	e7f7      	b.n	80016de <StartDefaultTask+0x1be>
	  CHECK(rclc_executor_add_subscription(&executor, &sub_cmd, &msg_cmd_rx, &wheel_cmd_cb, ON_NEW_DATA));
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4b33      	ldr	r3, [pc, #204]	@ (80017c0 <StartDefaultTask+0x2a0>)
 80016f4:	4a27      	ldr	r2, [pc, #156]	@ (8001794 <StartDefaultTask+0x274>)
 80016f6:	492d      	ldr	r1, [pc, #180]	@ (80017ac <StartDefaultTask+0x28c>)
 80016f8:	4830      	ldr	r0, [pc, #192]	@ (80017bc <StartDefaultTask+0x29c>)
 80016fa:	f008 f82d 	bl	8009758 <rclc_executor_add_subscription>
 80016fe:	6778      	str	r0, [r7, #116]	@ 0x74
 8001700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <StartDefaultTask+0x1f6>
 8001706:	2120      	movs	r1, #32
 8001708:	481a      	ldr	r0, [pc, #104]	@ (8001774 <StartDefaultTask+0x254>)
 800170a:	f001 fcb2 	bl	8003072 <HAL_GPIO_TogglePin>
 800170e:	20c8      	movs	r0, #200	@ 0xc8
 8001710:	f004 fe74 	bl	80063fc <osDelay>
 8001714:	e7f7      	b.n	8001706 <StartDefaultTask+0x1e6>
	  CHECK(rclc_executor_add_timer(&executor, &timer));
 8001716:	4928      	ldr	r1, [pc, #160]	@ (80017b8 <StartDefaultTask+0x298>)
 8001718:	4828      	ldr	r0, [pc, #160]	@ (80017bc <StartDefaultTask+0x29c>)
 800171a:	f008 f851 	bl	80097c0 <rclc_executor_add_timer>
 800171e:	6738      	str	r0, [r7, #112]	@ 0x70
 8001720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <StartDefaultTask+0x216>
 8001726:	2120      	movs	r1, #32
 8001728:	4812      	ldr	r0, [pc, #72]	@ (8001774 <StartDefaultTask+0x254>)
 800172a:	f001 fca2 	bl	8003072 <HAL_GPIO_TogglePin>
 800172e:	20c8      	movs	r0, #200	@ 0xc8
 8001730:	f004 fe64 	bl	80063fc <osDelay>
 8001734:	e7f7      	b.n	8001726 <StartDefaultTask+0x206>

	  /* spin */
	  for(;;) {
	    (void)rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));
 8001736:	a304      	add	r3, pc, #16	@ (adr r3, 8001748 <StartDefaultTask+0x228>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	481f      	ldr	r0, [pc, #124]	@ (80017bc <StartDefaultTask+0x29c>)
 800173e:	f008 f8b3 	bl	80098a8 <rclc_executor_spin_some>
 8001742:	e7f8      	b.n	8001736 <StartDefaultTask+0x216>
 8001744:	f3af 8000 	nop.w
 8001748:	004c4b40 	.word	0x004c4b40
 800174c:	00000000 	.word	0x00000000
 8001750:	08000c01 	.word	0x08000c01
 8001754:	08000b99 	.word	0x08000b99
 8001758:	08000b79 	.word	0x08000b79
 800175c:	08000b4d 	.word	0x08000b4d
 8001760:	2000547c 	.word	0x2000547c
 8001764:	080017f5 	.word	0x080017f5
 8001768:	08001839 	.word	0x08001839
 800176c:	08001871 	.word	0x08001871
 8001770:	080018dd 	.word	0x080018dd
 8001774:	40020000 	.word	0x40020000
 8001778:	080183c4 	.word	0x080183c4
 800177c:	080183c8 	.word	0x080183c8
 8001780:	2000567c 	.word	0x2000567c
 8001784:	20005628 	.word	0x20005628
 8001788:	2000568c 	.word	0x2000568c
 800178c:	20005644 	.word	0x20005644
 8001790:	2000569c 	.word	0x2000569c
 8001794:	20005660 	.word	0x20005660
 8001798:	080183d8 	.word	0x080183d8
 800179c:	20005588 	.word	0x20005588
 80017a0:	080183f0 	.word	0x080183f0
 80017a4:	2000558c 	.word	0x2000558c
 80017a8:	08018408 	.word	0x08018408
 80017ac:	20005590 	.word	0x20005590
 80017b0:	0800149d 	.word	0x0800149d
 80017b4:	00989680 	.word	0x00989680
 80017b8:	20005594 	.word	0x20005594
 80017bc:	20005598 	.word	0x20005598
 80017c0:	08001425 	.word	0x08001425

080017c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017d6:	f000 fd9b 	bl	8002310 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40001400 	.word	0x40001400

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <Error_Handler+0x8>

080017f4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <microros_allocate+0x3c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <microros_allocate+0x3c>)
 800180c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <microros_allocate+0x40>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <microros_allocate+0x40>)
 800181c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe ff44 	bl	80006ac <pvPortMallocMicroROS>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200056cc 	.word	0x200056cc
 8001834:	200056d0 	.word	0x200056d0

08001838 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00c      	beq.n	8001862 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff f853 	bl	80008f4 <getBlockSize>
 800184e:	4603      	mov	r3, r0
 8001850:	4a06      	ldr	r2, [pc, #24]	@ (800186c <microros_deallocate+0x34>)
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	461a      	mov	r2, r3
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <microros_deallocate+0x34>)
 800185a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe ffed 	bl	800083c <vPortFreeMicroROS>
  }
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200056d0 	.word	0x200056d0

08001870 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <microros_reallocate+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4413      	add	r3, r2
 8001886:	461a      	mov	r2, r3
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <microros_reallocate+0x64>)
 800188a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <microros_reallocate+0x68>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	461a      	mov	r2, r3
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <microros_reallocate+0x68>)
 800189a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d104      	bne.n	80018ac <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80018a2:	68b8      	ldr	r0, [r7, #8]
 80018a4:	f7fe ff02 	bl	80006ac <pvPortMallocMicroROS>
 80018a8:	4603      	mov	r3, r0
 80018aa:	e00e      	b.n	80018ca <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff f821 	bl	80008f4 <getBlockSize>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <microros_reallocate+0x68>)
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <microros_reallocate+0x68>)
 80018be:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff f834 	bl	8000930 <pvPortReallocMicroROS>
 80018c8:	4603      	mov	r3, r0
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200056cc 	.word	0x200056cc
 80018d8:	200056d0 	.word	0x200056d0

080018dc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <microros_zero_allocate+0x48>)
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <microros_zero_allocate+0x48>)
 80018fa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <microros_zero_allocate+0x4c>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4413      	add	r3, r2
 800190a:	461a      	mov	r2, r3
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <microros_zero_allocate+0x4c>)
 800190e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff f839 	bl	800098a <pvPortCallocMicroROS>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200056cc 	.word	0x200056cc
 8001928:	200056d0 	.word	0x200056d0
 800192c:	00000000 	.word	0x00000000

08001930 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001946:	a320      	add	r3, pc, #128	@ (adr r3, 80019c8 <UTILS_NanosecondsToTimespec+0x98>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fcc8 	bl	80002e0 <__aeabi_ldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800195a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800195e:	a31a      	add	r3, pc, #104	@ (adr r3, 80019c8 <UTILS_NanosecondsToTimespec+0x98>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fcbc 	bl	80002e0 <__aeabi_ldivmod>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	da20      	bge.n	80019b6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <UTILS_NanosecondsToTimespec+0x90>)
 800197a:	fb82 1203 	smull	r1, r2, r2, r3
 800197e:	1712      	asrs	r2, r2, #28
 8001980:	17db      	asrs	r3, r3, #31
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	17c8      	asrs	r0, r1, #31
 8001992:	460c      	mov	r4, r1
 8001994:	4605      	mov	r5, r0
 8001996:	ebb2 0804 	subs.w	r8, r2, r4
 800199a:	eb63 0905 	sbc.w	r9, r3, r5
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	4906      	ldr	r1, [pc, #24]	@ (80019c4 <UTILS_NanosecondsToTimespec+0x94>)
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	441a      	add	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
    }
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019c0:	44b82fa1 	.word	0x44b82fa1
 80019c4:	3b9aca00 	.word	0x3b9aca00
 80019c8:	3b9aca00 	.word	0x3b9aca00
 80019cc:	00000000 	.word	0x00000000

080019d0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80019d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d4:	b08e      	sub	sp, #56	@ 0x38
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80019da:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80019dc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019e0:	2300      	movs	r3, #0
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80019f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 ffcc 	bl	8007994 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80019fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fe:	17da      	asrs	r2, r3, #31
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	61fa      	str	r2, [r7, #28]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	000b      	movs	r3, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	461c      	mov	r4, r3
 8001a1c:	4615      	mov	r5, r2
 8001a1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a22:	1911      	adds	r1, r2, r4
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	416b      	adcs	r3, r5
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a2e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001a32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	f04f 0400 	mov.w	r4, #0
 8001a3e:	f04f 0500 	mov.w	r5, #0
 8001a42:	015d      	lsls	r5, r3, #5
 8001a44:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001a48:	0154      	lsls	r4, r2, #5
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	462b      	mov	r3, r5
 8001a4e:	ebb2 0800 	subs.w	r8, r2, r0
 8001a52:	eb63 0901 	sbc.w	r9, r3, r1
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001a62:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001a66:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001a6a:	4690      	mov	r8, r2
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	eb18 0a00 	adds.w	sl, r8, r0
 8001a72:	eb49 0b01 	adc.w	fp, r9, r1
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a82:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a86:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a8a:	ebb2 040a 	subs.w	r4, r2, sl
 8001a8e:	603c      	str	r4, [r7, #0]
 8001a90:	eb63 030b 	sbc.w	r3, r3, fp
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4623      	mov	r3, r4
 8001a9c:	181b      	adds	r3, r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	462b      	mov	r3, r5
 8001aa2:	eb41 0303 	adc.w	r3, r1, r3
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	6a3a      	ldr	r2, [r7, #32]
 8001aaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aae:	f7ff ff3f 	bl	8001930 <UTILS_NanosecondsToTimespec>

    return 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3738      	adds	r7, #56	@ 0x38
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_MspInit+0x54>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <HAL_MspInit+0x54>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <HAL_MspInit+0x54>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_MspInit+0x54>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_MspInit+0x54>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_MspInit+0x54>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	f06f 0001 	mvn.w	r0, #1
 8001b06:	f000 fcdb 	bl	80024c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b090      	sub	sp, #64	@ 0x40
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a64      	ldr	r2, [pc, #400]	@ (8001cc8 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12d      	bne.n	8001b96 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b3e:	4b63      	ldr	r3, [pc, #396]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a62      	ldr	r2, [pc, #392]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4a:	4b60      	ldr	r3, [pc, #384]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b59      	ldr	r3, [pc, #356]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = UL_ENC_A_T1C1_Pin|UL_ENC_B_T1C2_Pin;
 8001b72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4850      	ldr	r0, [pc, #320]	@ (8001cd0 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001b90:	f001 f8c2 	bl	8002d18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b94:	e094      	b.n	8001cc0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d12c      	bne.n	8001bfa <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	4b49      	ldr	r3, [pc, #292]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a48      	ldr	r2, [pc, #288]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b46      	ldr	r3, [pc, #280]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	4a41      	ldr	r2, [pc, #260]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UR_ENC_A_T3C1_Pin|UR_ENC_B_T3C2_Pin;
 8001bd8:	23c0      	movs	r3, #192	@ 0xc0
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001be8:	2302      	movs	r3, #2
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4837      	ldr	r0, [pc, #220]	@ (8001cd0 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001bf4:	f001 f890 	bl	8002d18 <HAL_GPIO_Init>
}
 8001bf8:	e062      	b.n	8001cc0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a36      	ldr	r2, [pc, #216]	@ (8001cd8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d12c      	bne.n	8001c5e <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	4b30      	ldr	r3, [pc, #192]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	4a28      	ldr	r2, [pc, #160]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c30:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LL_ENC_A_T4C1_Pin|LL_ENC_B_T4C2_Pin;
 8001c3c:	23c0      	movs	r3, #192	@ 0xc0
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	4821      	ldr	r0, [pc, #132]	@ (8001cdc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001c58:	f001 f85e 	bl	8002d18 <HAL_GPIO_Init>
}
 8001c5c:	e030      	b.n	8001cc0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d12b      	bne.n	8001cc0 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LR_ENC_A_T8C1_Pin|LR_ENC_B_T8C2_Pin;
 8001ca0:	23c0      	movs	r3, #192	@ 0xc0
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480a      	ldr	r0, [pc, #40]	@ (8001ce4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cbc:	f001 f82c 	bl	8002d18 <HAL_GPIO_Init>
}
 8001cc0:	bf00      	nop
 8001cc2:	3740      	adds	r7, #64	@ 0x40
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40010400 	.word	0x40010400
 8001ce4:	40020800 	.word	0x40020800

08001ce8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf8:	d10d      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_TIM_Base_MspInit+0x3c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <HAL_TIM_Base_MspInit+0x3c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_TIM_Base_MspInit+0x3c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d48:	d13c      	bne.n	8001dc4 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <HAL_TIM_MspPostInit+0xa4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <HAL_TIM_MspPostInit+0xa4>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <HAL_TIM_MspPostInit+0xa4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_TIM_MspPostInit+0xa4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <HAL_TIM_MspPostInit+0xa4>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_TIM_MspPostInit+0xa4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 8001d82:	2303      	movs	r3, #3
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d92:	2301      	movs	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <HAL_TIM_MspPostInit+0xa8>)
 8001d9e:	f000 ffbb 	bl	8002d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 8001da2:	f240 4304 	movw	r3, #1028	@ 0x404
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001db4:	2301      	movs	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_TIM_MspPostInit+0xac>)
 8001dc0:	f000 ffaa 	bl	8002d18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	@ 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f2c <HAL_UART_MspInit+0x154>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	f040 8093 	bne.w	8001f22 <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	4b4b      	ldr	r3, [pc, #300]	@ (8001f30 <HAL_UART_MspInit+0x158>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	4a4a      	ldr	r2, [pc, #296]	@ (8001f30 <HAL_UART_MspInit+0x158>)
 8001e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0c:	4b48      	ldr	r3, [pc, #288]	@ (8001f30 <HAL_UART_MspInit+0x158>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b44      	ldr	r3, [pc, #272]	@ (8001f30 <HAL_UART_MspInit+0x158>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a43      	ldr	r2, [pc, #268]	@ (8001f30 <HAL_UART_MspInit+0x158>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b41      	ldr	r3, [pc, #260]	@ (8001f30 <HAL_UART_MspInit+0x158>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e34:	230c      	movs	r3, #12
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e44:	2307      	movs	r3, #7
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4839      	ldr	r0, [pc, #228]	@ (8001f34 <HAL_UART_MspInit+0x15c>)
 8001e50:	f000 ff62 	bl	8002d18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e54:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e56:	4a39      	ldr	r2, [pc, #228]	@ (8001f3c <HAL_UART_MspInit+0x164>)
 8001e58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e5a:	4b37      	ldr	r3, [pc, #220]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e5c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e60:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e62:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e68:	4b33      	ldr	r3, [pc, #204]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6e:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e76:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e88:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e90:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e92:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e98:	4827      	ldr	r0, [pc, #156]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001e9a:	f000 fb3b 	bl	8002514 <HAL_DMA_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001ea4:	f7ff fca0 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001eac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eae:	4a22      	ldr	r2, [pc, #136]	@ (8001f38 <HAL_UART_MspInit+0x160>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001eb6:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <HAL_UART_MspInit+0x16c>)
 8001eb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ebc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ec0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ec4:	2240      	movs	r2, #64	@ 0x40
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ed0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001edc:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001eea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001eee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ef6:	4812      	ldr	r0, [pc, #72]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001ef8:	f000 fb0c 	bl	8002514 <HAL_DMA_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001f02:	f7ff fc71 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001f0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f40 <HAL_UART_MspInit+0x168>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2105      	movs	r1, #5
 8001f16:	2026      	movs	r0, #38	@ 0x26
 8001f18:	f000 fad2 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f1c:	2026      	movs	r0, #38	@ 0x26
 8001f1e:	f000 faeb 	bl	80024f8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	@ 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40004400 	.word	0x40004400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	200054c4 	.word	0x200054c4
 8001f3c:	40026088 	.word	0x40026088
 8001f40:	20005524 	.word	0x20005524
 8001f44:	400260a0 	.word	0x400260a0

08001f48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	@ 0x38
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4b33      	ldr	r3, [pc, #204]	@ (800202c <HAL_InitTick+0xe4>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	4a32      	ldr	r2, [pc, #200]	@ (800202c <HAL_InitTick+0xe4>)
 8001f62:	f043 0320 	orr.w	r3, r3, #32
 8001f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <HAL_InitTick+0xe4>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f74:	f107 0210 	add.w	r2, r7, #16
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f9ac 	bl	80032dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f8e:	f001 f97d 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8001f92:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f94:	e004      	b.n	8001fa0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f96:	f001 f979 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa2:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <HAL_InitTick+0xe8>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	0c9b      	lsrs	r3, r3, #18
 8001faa:	3b01      	subs	r3, #1
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_InitTick+0xec>)
 8001fb0:	4a21      	ldr	r2, [pc, #132]	@ (8002038 <HAL_InitTick+0xf0>)
 8001fb2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_InitTick+0xec>)
 8001fb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fba:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <HAL_InitTick+0xec>)
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <HAL_InitTick+0xec>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_InitTick+0xec>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_InitTick+0xec>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001fd4:	4817      	ldr	r0, [pc, #92]	@ (8002034 <HAL_InitTick+0xec>)
 8001fd6:	f001 fe81 	bl	8003cdc <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11b      	bne.n	8002020 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001fe8:	4812      	ldr	r0, [pc, #72]	@ (8002034 <HAL_InitTick+0xec>)
 8001fea:	f001 fec7 	bl	8003d7c <HAL_TIM_Base_Start_IT>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d111      	bne.n	8002020 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ffc:	2037      	movs	r0, #55	@ 0x37
 8001ffe:	f000 fa7b 	bl	80024f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d808      	bhi.n	800201a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	2037      	movs	r0, #55	@ 0x37
 800200e:	f000 fa57 	bl	80024c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_InitTick+0xf4>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e002      	b.n	8002020 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002020:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002024:	4618      	mov	r0, r3
 8002026:	3738      	adds	r7, #56	@ 0x38
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	431bde83 	.word	0x431bde83
 8002034:	200056d4 	.word	0x200056d4
 8002038:	40001400 	.word	0x40001400
 800203c:	20000008 	.word	0x20000008

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <NMI_Handler+0x4>

08002048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <MemManage_Handler+0x4>

08002058 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <UsageFault_Handler+0x4>

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <DMA1_Stream5_IRQHandler+0x10>)
 800207e:	f000 fbe1 	bl	8002844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200054c4 	.word	0x200054c4

0800208c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <DMA1_Stream6_IRQHandler+0x10>)
 8002092:	f000 fbd7 	bl	8002844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20005524 	.word	0x20005524

080020a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <USART2_IRQHandler+0x10>)
 80020a6:	f002 ff6b 	bl	8004f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000547c 	.word	0x2000547c

080020b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <TIM7_IRQHandler+0x10>)
 80020ba:	f001 ffce 	bl	800405a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200056d4 	.word	0x200056d4

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e2:	f015 fae9 	bl	80176b8 <__errno>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
  return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_exit>:

void _exit (int status)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffe7 	bl	80020d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800210a:	bf00      	nop
 800210c:	e7fd      	b.n	800210a <_exit+0x12>

0800210e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e00a      	b.n	8002136 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002120:	f3af 8000 	nop.w
 8002124:	4601      	mov	r1, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	b2ca      	uxtb	r2, r1
 800212e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbf0      	blt.n	8002120 <_read+0x12>
  }

  return len;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e009      	b.n	800216e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	60ba      	str	r2, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	dbf1      	blt.n	800215a <_write+0x12>
  }
  return len;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_close>:

int _close(int file)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a8:	605a      	str	r2, [r3, #4]
  return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_isatty>:

int _isatty(int file)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	@ (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	@ (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f015 fa4e 	bl	80176b8 <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	@ (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20020000 	.word	0x20020000
 8002248:	00000400 	.word	0x00000400
 800224c:	20005720 	.word	0x20005720
 8002250:	2000ed30 	.word	0x2000ed30

08002254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800227c:	f7ff ffea 	bl	8002254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002280:	480c      	ldr	r0, [pc, #48]	@ (80022b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002282:	490d      	ldr	r1, [pc, #52]	@ (80022b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002298:	4c0a      	ldr	r4, [pc, #40]	@ (80022c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f015 fa0d 	bl	80176c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7fe fcfd 	bl	8000ca8 <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	20000ed8 	.word	0x20000ed8
  ldr r2, =_sidata
 80022bc:	080195f0 	.word	0x080195f0
  ldr r2, =_sbss
 80022c0:	20000ed8 	.word	0x20000ed8
  ldr r4, =_ebss
 80022c4:	2000ed2c 	.word	0x2000ed2c

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <HAL_Init+0x40>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <HAL_Init+0x40>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	@ (800230c <HAL_Init+0x40>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f8d8 	bl	80024aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	200f      	movs	r0, #15
 80022fc:	f7ff fe24 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fbde 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c
 8002334:	20005724 	.word	0x20005724

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20005724 	.word	0x20005724

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	@ (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	@ (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	@ (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	@ 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff4c 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d2:	f7ff ff61 	bl	8002398 <__NVIC_GetPriorityGrouping>
 80024d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	6978      	ldr	r0, [r7, #20]
 80024de:	f7ff ffb1 	bl	8002444 <NVIC_EncodePriority>
 80024e2:	4602      	mov	r2, r0
 80024e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff80 	bl	80023f0 <__NVIC_SetPriority>
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff54 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff ff0a 	bl	8002338 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e099      	b.n	8002664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002550:	e00f      	b.n	8002572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002552:	f7ff fef1 	bl	8002338 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b05      	cmp	r3, #5
 800255e:	d908      	bls.n	8002572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2203      	movs	r2, #3
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e078      	b.n	8002664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e8      	bne.n	8002552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4b38      	ldr	r3, [pc, #224]	@ (800266c <HAL_DMA_Init+0x158>)
 800258c:	4013      	ands	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d107      	bne.n	80025dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	4313      	orrs	r3, r2
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f023 0307 	bic.w	r3, r3, #7
 80025f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	2b04      	cmp	r3, #4
 8002604:	d117      	bne.n	8002636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fb01 	bl	8002c20 <DMA_CheckFifoParam>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2240      	movs	r2, #64	@ 0x40
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002632:	2301      	movs	r3, #1
 8002634:	e016      	b.n	8002664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fab8 	bl	8002bb4 <DMA_CalcBaseAndBitshift>
 8002644:	4603      	mov	r3, r0
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	223f      	movs	r2, #63	@ 0x3f
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	f010803f 	.word	0xf010803f

08002670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_DMA_Start_IT+0x26>
 8002692:	2302      	movs	r3, #2
 8002694:	e040      	b.n	8002718 <HAL_DMA_Start_IT+0xa8>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d12f      	bne.n	800270a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa4a 	bl	8002b58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	223f      	movs	r2, #63	@ 0x3f
 80026ca:	409a      	lsls	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0216 	orr.w	r2, r2, #22
 80026de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0208 	orr.w	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e005      	b.n	8002716 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002716:	7dfb      	ldrb	r3, [r7, #23]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800272e:	f7ff fe03 	bl	8002338 <HAL_GetTick>
 8002732:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d008      	beq.n	8002752 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2280      	movs	r2, #128	@ 0x80
 8002744:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e052      	b.n	80027f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0216 	bic.w	r2, r2, #22
 8002760:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002770:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <HAL_DMA_Abort+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0208 	bic.w	r2, r2, #8
 8002790:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	e013      	b.n	80027cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a4:	f7ff fdc8 	bl	8002338 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d90c      	bls.n	80027cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e015      	b.n	80027f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e4      	bne.n	80027a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	223f      	movs	r2, #63	@ 0x3f
 80027e0:	409a      	lsls	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00c      	b.n	8002838 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002850:	4b8e      	ldr	r3, [pc, #568]	@ (8002a8c <HAL_DMA_IRQHandler+0x248>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a8e      	ldr	r2, [pc, #568]	@ (8002a90 <HAL_DMA_IRQHandler+0x24c>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0a9b      	lsrs	r3, r3, #10
 800285c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	2208      	movs	r2, #8
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01a      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0204 	bic.w	r2, r2, #4
 8002896:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	2208      	movs	r2, #8
 800289e:	409a      	lsls	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	2201      	movs	r2, #1
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d012      	beq.n	80028e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	2201      	movs	r2, #1
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f043 0202 	orr.w	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	2204      	movs	r2, #4
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	2204      	movs	r2, #4
 800290a:	409a      	lsls	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	2210      	movs	r2, #16
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d043      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03c      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293e:	2210      	movs	r2, #16
 8002940:	409a      	lsls	r2, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d018      	beq.n	8002986 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d108      	bne.n	8002974 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
 8002972:	e01f      	b.n	80029b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
 8002984:	e016      	b.n	80029b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0208 	bic.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b8:	2220      	movs	r2, #32
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 808f 	beq.w	8002ae4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8087 	beq.w	8002ae4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	2220      	movs	r2, #32
 80029dc:	409a      	lsls	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d136      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0216 	bic.w	r2, r2, #22
 80029fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <HAL_DMA_IRQHandler+0x1da>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0208 	bic.w	r2, r2, #8
 8002a2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a32:	223f      	movs	r2, #63	@ 0x3f
 8002a34:	409a      	lsls	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d07e      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
        }
        return;
 8002a5a:	e079      	b.n	8002b50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01d      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d031      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
 8002a88:	e02c      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x2a0>
 8002a8a:	bf00      	nop
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d023      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e01e      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0210 	bic.w	r2, r2, #16
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d032      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d022      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2205      	movs	r2, #5
 8002afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	3301      	adds	r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d307      	bcc.n	8002b2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f2      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x2cc>
 8002b2a:	e000      	b.n	8002b2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
 8002b4e:	e000      	b.n	8002b52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b50:	bf00      	nop
    }
  }
}
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b40      	cmp	r3, #64	@ 0x40
 8002b84:	d108      	bne.n	8002b98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b96:	e007      	b.n	8002ba8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3b10      	subs	r3, #16
 8002bc4:	4a14      	ldr	r2, [pc, #80]	@ (8002c18 <DMA_CalcBaseAndBitshift+0x64>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bce:	4a13      	ldr	r2, [pc, #76]	@ (8002c1c <DMA_CalcBaseAndBitshift+0x68>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d909      	bls.n	8002bf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	1d1a      	adds	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bf4:	e007      	b.n	8002c06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bfe:	f023 0303 	bic.w	r3, r3, #3
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	aaaaaaab 	.word	0xaaaaaaab
 8002c1c:	0801848c 	.word	0x0801848c

08002c20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11f      	bne.n	8002c7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d856      	bhi.n	8002cee <DMA_CheckFifoParam+0xce>
 8002c40:	a201      	add	r2, pc, #4	@ (adr r2, 8002c48 <DMA_CheckFifoParam+0x28>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c6b 	.word	0x08002c6b
 8002c50:	08002c59 	.word	0x08002c59
 8002c54:	08002cef 	.word	0x08002cef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d046      	beq.n	8002cf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e043      	b.n	8002cf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c72:	d140      	bne.n	8002cf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c78:	e03d      	b.n	8002cf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c82:	d121      	bne.n	8002cc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d837      	bhi.n	8002cfa <DMA_CheckFifoParam+0xda>
 8002c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <DMA_CheckFifoParam+0x70>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002ca1 	.word	0x08002ca1
 8002c94:	08002ca7 	.word	0x08002ca7
 8002c98:	08002ca1 	.word	0x08002ca1
 8002c9c:	08002cb9 	.word	0x08002cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca4:	e030      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d025      	beq.n	8002cfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb6:	e022      	b.n	8002cfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cc0:	d11f      	bne.n	8002d02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cc6:	e01c      	b.n	8002d02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d903      	bls.n	8002cd6 <DMA_CheckFifoParam+0xb6>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d003      	beq.n	8002cdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cd4:	e018      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cda:	e015      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00e      	beq.n	8002d06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
      break;
 8002cec:	e00b      	b.n	8002d06 <DMA_CheckFifoParam+0xe6>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e00a      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e008      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e006      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e004      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e002      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <DMA_CheckFifoParam+0xe8>
      break;
 8002d06:	bf00      	nop
    }
  } 
  
  return status; 
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e165      	b.n	8003000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f040 8154 	bne.w	8002ffa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d017      	beq.n	8002e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80ae 	beq.w	8002ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8003018 <HAL_GPIO_Init+0x300>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8003018 <HAL_GPIO_Init+0x300>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eae:	4b5a      	ldr	r3, [pc, #360]	@ (8003018 <HAL_GPIO_Init+0x300>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eba:	4a58      	ldr	r2, [pc, #352]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8003020 <HAL_GPIO_Init+0x308>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d025      	beq.n	8002f32 <HAL_GPIO_Init+0x21a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8003024 <HAL_GPIO_Init+0x30c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01f      	beq.n	8002f2e <HAL_GPIO_Init+0x216>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8003028 <HAL_GPIO_Init+0x310>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d019      	beq.n	8002f2a <HAL_GPIO_Init+0x212>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800302c <HAL_GPIO_Init+0x314>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_GPIO_Init+0x20e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4b      	ldr	r2, [pc, #300]	@ (8003030 <HAL_GPIO_Init+0x318>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00d      	beq.n	8002f22 <HAL_GPIO_Init+0x20a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4a      	ldr	r2, [pc, #296]	@ (8003034 <HAL_GPIO_Init+0x31c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <HAL_GPIO_Init+0x206>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a49      	ldr	r2, [pc, #292]	@ (8003038 <HAL_GPIO_Init+0x320>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_GPIO_Init+0x202>
 8002f16:	2306      	movs	r3, #6
 8002f18:	e00c      	b.n	8002f34 <HAL_GPIO_Init+0x21c>
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	e00a      	b.n	8002f34 <HAL_GPIO_Init+0x21c>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x21c>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x21c>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x21c>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x21c>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x21c>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b3a      	ldr	r3, [pc, #232]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a31      	ldr	r2, [pc, #196]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a26      	ldr	r2, [pc, #152]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b25      	ldr	r3, [pc, #148]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1c      	ldr	r2, [pc, #112]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a11      	ldr	r2, [pc, #68]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f ae96 	bls.w	8002d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40021400 	.word	0x40021400
 8003038:	40021800 	.word	0x40021800
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800305c:	e003      	b.n	8003066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003084:	887a      	ldrh	r2, [r7, #2]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4013      	ands	r3, r2
 800308a:	041a      	lsls	r2, r3, #16
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43d9      	mvns	r1, r3
 8003090:	887b      	ldrh	r3, [r7, #2]
 8003092:	400b      	ands	r3, r1
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	619a      	str	r2, [r3, #24]
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0cc      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b68      	ldr	r3, [pc, #416]	@ (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d90c      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b65      	ldr	r3, [pc, #404]	@ (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b63      	ldr	r3, [pc, #396]	@ (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0b8      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030fc:	4b59      	ldr	r3, [pc, #356]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003106:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003114:	4b53      	ldr	r3, [pc, #332]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a52      	ldr	r2, [pc, #328]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800311e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b50      	ldr	r3, [pc, #320]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	494d      	ldr	r1, [pc, #308]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d044      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d119      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d003      	beq.n	8003166 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003162:	2b03      	cmp	r3, #3
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	4b3f      	ldr	r3, [pc, #252]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e067      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003186:	4b37      	ldr	r3, [pc, #220]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4934      	ldr	r1, [pc, #208]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003198:	f7ff f8ce 	bl	8002338 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7ff f8ca 	bl	8002338 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e04f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 020c 	and.w	r2, r3, #12
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d1eb      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b25      	ldr	r3, [pc, #148]	@ (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d20c      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b22      	ldr	r3, [pc, #136]	@ (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e032      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4916      	ldr	r1, [pc, #88]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800321a:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	490e      	ldr	r1, [pc, #56]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322e:	f000 f887 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 8003232:	4602      	mov	r2, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	490a      	ldr	r1, [pc, #40]	@ (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	5ccb      	ldrb	r3, [r1, r3]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a09      	ldr	r2, [pc, #36]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800324a:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fe7a 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023c00 	.word	0x40023c00
 8003264:	40023800 	.word	0x40023800
 8003268:	08018474 	.word	0x08018474
 800326c:	20000004 	.word	0x20000004
 8003270:	20000008 	.word	0x20000008

08003274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003290:	f7ff fff0 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0a9b      	lsrs	r3, r3, #10
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4903      	ldr	r1, [pc, #12]	@ (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800
 80032b0:	08018484 	.word	0x08018484

080032b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b8:	f7ff ffdc 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0b5b      	lsrs	r3, r3, #13
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	@ (80032d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08018484 	.word	0x08018484

080032dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	220f      	movs	r2, #15
 80032ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_RCC_GetClockConfig+0x5c>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0203 	and.w	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <HAL_RCC_GetClockConfig+0x5c>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <HAL_RCC_GetClockConfig+0x5c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <HAL_RCC_GetClockConfig+0x5c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	08db      	lsrs	r3, r3, #3
 8003316:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800331e:	4b07      	ldr	r3, [pc, #28]	@ (800333c <HAL_RCC_GetClockConfig+0x60>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	601a      	str	r2, [r3, #0]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	40023c00 	.word	0x40023c00

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b0ae      	sub	sp, #184	@ 0xb8
 8003346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003366:	4bcb      	ldr	r3, [pc, #812]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b0c      	cmp	r3, #12
 8003370:	f200 8206 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x440>
 8003374:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033b1 	.word	0x080033b1
 8003380:	08003781 	.word	0x08003781
 8003384:	08003781 	.word	0x08003781
 8003388:	08003781 	.word	0x08003781
 800338c:	080033b9 	.word	0x080033b9
 8003390:	08003781 	.word	0x08003781
 8003394:	08003781 	.word	0x08003781
 8003398:	08003781 	.word	0x08003781
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	08003781 	.word	0x08003781
 80033a4:	08003781 	.word	0x08003781
 80033a8:	08003781 	.word	0x08003781
 80033ac:	080035b1 	.word	0x080035b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4bb9      	ldr	r3, [pc, #740]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x358>)
 80033b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033b6:	e1e7      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b8:	4bb8      	ldr	r3, [pc, #736]	@ (800369c <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033be:	e1e3      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c0:	4bb4      	ldr	r3, [pc, #720]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033cc:	4bb1      	ldr	r3, [pc, #708]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d071      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d8:	4bae      	ldr	r3, [pc, #696]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033fe:	4622      	mov	r2, r4
 8003400:	462b      	mov	r3, r5
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	0159      	lsls	r1, r3, #5
 800340c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003410:	0150      	lsls	r0, r2, #5
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4621      	mov	r1, r4
 8003418:	1a51      	subs	r1, r2, r1
 800341a:	6439      	str	r1, [r7, #64]	@ 0x40
 800341c:	4629      	mov	r1, r5
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	647b      	str	r3, [r7, #68]	@ 0x44
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003430:	4649      	mov	r1, r9
 8003432:	018b      	lsls	r3, r1, #6
 8003434:	4641      	mov	r1, r8
 8003436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343a:	4641      	mov	r1, r8
 800343c:	018a      	lsls	r2, r1, #6
 800343e:	4641      	mov	r1, r8
 8003440:	1a51      	subs	r1, r2, r1
 8003442:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003444:	4649      	mov	r1, r9
 8003446:	eb63 0301 	sbc.w	r3, r3, r1
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003458:	4649      	mov	r1, r9
 800345a:	00cb      	lsls	r3, r1, #3
 800345c:	4641      	mov	r1, r8
 800345e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003462:	4641      	mov	r1, r8
 8003464:	00ca      	lsls	r2, r1, #3
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	4603      	mov	r3, r0
 800346c:	4622      	mov	r2, r4
 800346e:	189b      	adds	r3, r3, r2
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30
 8003472:	462b      	mov	r3, r5
 8003474:	460a      	mov	r2, r1
 8003476:	eb42 0303 	adc.w	r3, r2, r3
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003488:	4629      	mov	r1, r5
 800348a:	024b      	lsls	r3, r1, #9
 800348c:	4621      	mov	r1, r4
 800348e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003492:	4621      	mov	r1, r4
 8003494:	024a      	lsls	r2, r1, #9
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80034ac:	f7fc ff68 	bl	8000380 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ba:	e067      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034bc:	4b75      	ldr	r3, [pc, #468]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034d6:	2300      	movs	r3, #0
 80034d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003510:	4649      	mov	r1, r9
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4641      	mov	r1, r8
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4641      	mov	r1, r8
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4641      	mov	r1, r8
 8003520:	ebb2 0a01 	subs.w	sl, r2, r1
 8003524:	4649      	mov	r1, r9
 8003526:	eb63 0b01 	sbc.w	fp, r3, r1
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003536:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800353a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800353e:	4692      	mov	sl, r2
 8003540:	469b      	mov	fp, r3
 8003542:	4623      	mov	r3, r4
 8003544:	eb1a 0303 	adds.w	r3, sl, r3
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	462b      	mov	r3, r5
 800354c:	eb4b 0303 	adc.w	r3, fp, r3
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003574:	2200      	movs	r2, #0
 8003576:	673b      	str	r3, [r7, #112]	@ 0x70
 8003578:	677a      	str	r2, [r7, #116]	@ 0x74
 800357a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800357e:	f7fc feff 	bl	8000380 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4613      	mov	r3, r2
 8003588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800358c:	4b41      	ldr	r3, [pc, #260]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	3301      	adds	r3, #1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800359e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ae:	e0eb      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035bc:	4b35      	ldr	r3, [pc, #212]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d06b      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c8:	4b32      	ldr	r3, [pc, #200]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	2200      	movs	r2, #0
 80035d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035da:	663b      	str	r3, [r7, #96]	@ 0x60
 80035dc:	2300      	movs	r3, #0
 80035de:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035e4:	4622      	mov	r2, r4
 80035e6:	462b      	mov	r3, r5
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	0159      	lsls	r1, r3, #5
 80035f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f6:	0150      	lsls	r0, r2, #5
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4621      	mov	r1, r4
 80035fe:	1a51      	subs	r1, r2, r1
 8003600:	61b9      	str	r1, [r7, #24]
 8003602:	4629      	mov	r1, r5
 8003604:	eb63 0301 	sbc.w	r3, r3, r1
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003616:	4659      	mov	r1, fp
 8003618:	018b      	lsls	r3, r1, #6
 800361a:	4651      	mov	r1, sl
 800361c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003620:	4651      	mov	r1, sl
 8003622:	018a      	lsls	r2, r1, #6
 8003624:	4651      	mov	r1, sl
 8003626:	ebb2 0801 	subs.w	r8, r2, r1
 800362a:	4659      	mov	r1, fp
 800362c:	eb63 0901 	sbc.w	r9, r3, r1
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003644:	4690      	mov	r8, r2
 8003646:	4699      	mov	r9, r3
 8003648:	4623      	mov	r3, r4
 800364a:	eb18 0303 	adds.w	r3, r8, r3
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	462b      	mov	r3, r5
 8003652:	eb49 0303 	adc.w	r3, r9, r3
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003664:	4629      	mov	r1, r5
 8003666:	024b      	lsls	r3, r1, #9
 8003668:	4621      	mov	r1, r4
 800366a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366e:	4621      	mov	r1, r4
 8003670:	024a      	lsls	r2, r1, #9
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800367a:	2200      	movs	r2, #0
 800367c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800367e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003684:	f7fc fe7c 	bl	8000380 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003692:	e065      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x420>
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x458>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	2200      	movs	r2, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	4611      	mov	r1, r2
 80036ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80036b2:	2300      	movs	r3, #0
 80036b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80036b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036ba:	4642      	mov	r2, r8
 80036bc:	464b      	mov	r3, r9
 80036be:	f04f 0000 	mov.w	r0, #0
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	0159      	lsls	r1, r3, #5
 80036c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036cc:	0150      	lsls	r0, r2, #5
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4641      	mov	r1, r8
 80036d4:	1a51      	subs	r1, r2, r1
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	4649      	mov	r1, r9
 80036da:	eb63 0301 	sbc.w	r3, r3, r1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036ec:	4659      	mov	r1, fp
 80036ee:	018b      	lsls	r3, r1, #6
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036f6:	4651      	mov	r1, sl
 80036f8:	018a      	lsls	r2, r1, #6
 80036fa:	4651      	mov	r1, sl
 80036fc:	1a54      	subs	r4, r2, r1
 80036fe:	4659      	mov	r1, fp
 8003700:	eb63 0501 	sbc.w	r5, r3, r1
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	464b      	mov	r3, r9
 8003720:	eb45 0303 	adc.w	r3, r5, r3
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003748:	2200      	movs	r2, #0
 800374a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800374c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800374e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003752:	f7fc fe15 	bl	8000380 <__aeabi_uldivmod>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4613      	mov	r3, r2
 800375c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003760:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x458>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0f1b      	lsrs	r3, r3, #28
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800376e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800377e:	e003      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800378c:	4618      	mov	r0, r3
 800378e:	37b8      	adds	r7, #184	@ 0xb8
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	00f42400 	.word	0x00f42400

080037a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e28d      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8083 	beq.w	80038c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037c0:	4b94      	ldr	r3, [pc, #592]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d019      	beq.n	8003800 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037cc:	4b91      	ldr	r3, [pc, #580]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037e4:	d00c      	beq.n	8003800 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d112      	bne.n	8003818 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b88      	ldr	r3, [pc, #544]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b84      	ldr	r3, [pc, #528]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d05b      	beq.n	80038c4 <HAL_RCC_OscConfig+0x124>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d157      	bne.n	80038c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e25a      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003820:	d106      	bne.n	8003830 <HAL_RCC_OscConfig+0x90>
 8003822:	4b7c      	ldr	r3, [pc, #496]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7b      	ldr	r2, [pc, #492]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e01d      	b.n	800386c <HAL_RCC_OscConfig+0xcc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0xb4>
 800383a:	4b76      	ldr	r3, [pc, #472]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a75      	ldr	r2, [pc, #468]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b73      	ldr	r3, [pc, #460]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a72      	ldr	r2, [pc, #456]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xcc>
 8003854:	4b6f      	ldr	r3, [pc, #444]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6e      	ldr	r2, [pc, #440]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b6c      	ldr	r3, [pc, #432]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6b      	ldr	r2, [pc, #428]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800386a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe fd60 	bl	8002338 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe fd5c 	bl	8002338 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e21f      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b61      	ldr	r3, [pc, #388]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0xdc>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe fd4c 	bl	8002338 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fe fd48 	bl	8002338 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e20b      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	4b57      	ldr	r3, [pc, #348]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x104>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d06f      	beq.n	80039b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038d2:	4b50      	ldr	r3, [pc, #320]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d017      	beq.n	800390e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038de:	4b4d      	ldr	r3, [pc, #308]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b47      	ldr	r3, [pc, #284]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d11c      	bne.n	800393c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003902:	4b44      	ldr	r3, [pc, #272]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	4b41      	ldr	r3, [pc, #260]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x186>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1d3      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4937      	ldr	r1, [pc, #220]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	e03a      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003944:	4b34      	ldr	r3, [pc, #208]	@ (8003a18 <HAL_RCC_OscConfig+0x278>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fe fcf5 	bl	8002338 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003952:	f7fe fcf1 	bl	8002338 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1b4      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	4b2b      	ldr	r3, [pc, #172]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4925      	ldr	r1, [pc, #148]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e015      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_RCC_OscConfig+0x278>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe fcd4 	bl	8002338 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe fcd0 	bl	8002338 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e193      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d036      	beq.n	8003a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c6:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe fcb4 	bl	8002338 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe fcb0 	bl	8002338 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e173      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x234>
 80039f2:	e01b      	b.n	8003a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f4:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fe fc9d 	bl	8002338 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	e00e      	b.n	8003a20 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a02:	f7fe fc99 	bl	8002338 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d907      	bls.n	8003a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e15c      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	42470000 	.word	0x42470000
 8003a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b8a      	ldr	r3, [pc, #552]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ea      	bne.n	8003a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8097 	beq.w	8003b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b83      	ldr	r3, [pc, #524]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	4a7e      	ldr	r2, [pc, #504]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b79      	ldr	r3, [pc, #484]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a76:	4b76      	ldr	r3, [pc, #472]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fe fc59 	bl	8002338 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fe fc55 	bl	8002338 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e118      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x31e>
 8003ab0:	4b66      	ldr	r3, [pc, #408]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab4:	4a65      	ldr	r2, [pc, #404]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003abc:	e01c      	b.n	8003af8 <HAL_RCC_OscConfig+0x358>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x340>
 8003ac6:	4b61      	ldr	r3, [pc, #388]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a60      	ldr	r2, [pc, #384]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0x358>
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	4a59      	ldr	r2, [pc, #356]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aec:	4b57      	ldr	r3, [pc, #348]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4a56      	ldr	r2, [pc, #344]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	f023 0304 	bic.w	r3, r3, #4
 8003af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe fc1a 	bl	8002338 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe fc16 	bl	8002338 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0d7      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <HAL_RCC_OscConfig+0x368>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fe fc04 	bl	8002338 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fe fc00 	bl	8002338 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0c1      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4a:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ee      	bne.n	8003b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	4a3a      	ldr	r2, [pc, #232]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80ad 	beq.w	8003ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b72:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d060      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d145      	bne.n	8003c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b33      	ldr	r3, [pc, #204]	@ (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fbd4 	bl	8002338 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe fbd0 	bl	8002338 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e093      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	491b      	ldr	r1, [pc, #108]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fe fba5 	bl	8002338 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fe fba1 	bl	8002338 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e064      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x452>
 8003c10:	e05c      	b.n	8003ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe fb8e 	bl	8002338 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fe fb8a 	bl	8002338 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e04d      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x480>
 8003c3e:	e045      	b.n	8003ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e040      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
 8003c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd8 <HAL_RCC_OscConfig+0x538>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d030      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d129      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d122      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d119      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e041      	b.n	8003d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd fff0 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f000 fc40 	bl	80045a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d001      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e04e      	b.n	8003e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a23      	ldr	r2, [pc, #140]	@ (8003e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d022      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dbe:	d01d      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d018      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d013      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00e      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a19      	ldr	r2, [pc, #100]	@ (8003e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x80>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d111      	bne.n	8003e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d010      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	e007      	b.n	8003e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40010400 	.word	0x40010400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40001800 	.word	0x40001800

08003e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e041      	b.n	8003ef2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f839 	bl	8003efa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 fb80 	bl	80045a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e097      	b.n	8004052 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fdee 	bl	8001b18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f52:	f023 0307 	bic.w	r3, r3, #7
 8003f56:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 fb1c 	bl	80045a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f90:	f023 0303 	bic.w	r3, r3, #3
 8003f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003fae:	f023 030c 	bic.w	r3, r3, #12
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	011a      	lsls	r2, r3, #4
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	031b      	lsls	r3, r3, #12
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003fec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003ff4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4313      	orrs	r3, r2
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01b      	beq.n	80040be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0202 	mvn.w	r2, #2
 800408e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fa5c 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 80040aa:	e005      	b.n	80040b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fa4e 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa5f 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01b      	beq.n	800410a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0204 	mvn.w	r2, #4
 80040da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa36 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 80040f6:	e005      	b.n	8004104 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fa28 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa39 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01b      	beq.n	8004156 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f06f 0208 	mvn.w	r2, #8
 8004126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2204      	movs	r2, #4
 800412c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fa10 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 8004142:	e005      	b.n	8004150 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa02 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa13 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01b      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0210 	mvn.w	r2, #16
 8004172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2208      	movs	r2, #8
 8004178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f9ea 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 800418e:	e005      	b.n	800419c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f9dc 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9ed 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00c      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0201 	mvn.w	r2, #1
 80041be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fd faff 	bl	80017c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fd51 	bl	8004c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f9be 	bl	800458a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0220 	mvn.w	r2, #32
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fd23 	bl	8004c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004256:	2302      	movs	r3, #2
 8004258:	e0ae      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b0c      	cmp	r3, #12
 8004266:	f200 809f 	bhi.w	80043a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800426a:	a201      	add	r2, pc, #4	@ (adr r2, 8004270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080043a9 	.word	0x080043a9
 8004278:	080043a9 	.word	0x080043a9
 800427c:	080043a9 	.word	0x080043a9
 8004280:	080042e5 	.word	0x080042e5
 8004284:	080043a9 	.word	0x080043a9
 8004288:	080043a9 	.word	0x080043a9
 800428c:	080043a9 	.word	0x080043a9
 8004290:	08004327 	.word	0x08004327
 8004294:	080043a9 	.word	0x080043a9
 8004298:	080043a9 	.word	0x080043a9
 800429c:	080043a9 	.word	0x080043a9
 80042a0:	08004367 	.word	0x08004367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fa1e 	bl	80046ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6999      	ldr	r1, [r3, #24]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	619a      	str	r2, [r3, #24]
      break;
 80042e2:	e064      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fa6e 	bl	80047cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6999      	ldr	r1, [r3, #24]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	619a      	str	r2, [r3, #24]
      break;
 8004324:	e043      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fac3 	bl	80048b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0208 	orr.w	r2, r2, #8
 8004340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0204 	bic.w	r2, r2, #4
 8004350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69d9      	ldr	r1, [r3, #28]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	61da      	str	r2, [r3, #28]
      break;
 8004364:	e023      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fb17 	bl	80049a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69d9      	ldr	r1, [r3, #28]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	021a      	lsls	r2, r3, #8
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	61da      	str	r2, [r3, #28]
      break;
 80043a6:	e002      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	75fb      	strb	r3, [r7, #23]
      break;
 80043ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_ConfigClockSource+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0b4      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x186>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004414:	d03e      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0xd4>
 8004416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800441a:	f200 8087 	bhi.w	800452c <HAL_TIM_ConfigClockSource+0x16c>
 800441e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004422:	f000 8086 	beq.w	8004532 <HAL_TIM_ConfigClockSource+0x172>
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442a:	d87f      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
 800442c:	2b70      	cmp	r3, #112	@ 0x70
 800442e:	d01a      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0xa6>
 8004430:	2b70      	cmp	r3, #112	@ 0x70
 8004432:	d87b      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
 8004434:	2b60      	cmp	r3, #96	@ 0x60
 8004436:	d050      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x11a>
 8004438:	2b60      	cmp	r3, #96	@ 0x60
 800443a:	d877      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
 800443c:	2b50      	cmp	r3, #80	@ 0x50
 800443e:	d03c      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xfa>
 8004440:	2b50      	cmp	r3, #80	@ 0x50
 8004442:	d873      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d058      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x13a>
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	d86f      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
 800444c:	2b30      	cmp	r3, #48	@ 0x30
 800444e:	d064      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x15a>
 8004450:	2b30      	cmp	r3, #48	@ 0x30
 8004452:	d86b      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b20      	cmp	r3, #32
 8004456:	d060      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x15a>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d867      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d05c      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x15a>
 8004460:	2b10      	cmp	r3, #16
 8004462:	d05a      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x15a>
 8004464:	e062      	b.n	800452c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004476:	f000 fb63 	bl	8004b40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	609a      	str	r2, [r3, #8]
      break;
 8004492:	e04f      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a4:	f000 fb4c 	bl	8004b40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044b6:	609a      	str	r2, [r3, #8]
      break;
 80044b8:	e03c      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	461a      	mov	r2, r3
 80044c8:	f000 fac0 	bl	8004a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2150      	movs	r1, #80	@ 0x50
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb19 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 80044d8:	e02c      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e6:	461a      	mov	r2, r3
 80044e8:	f000 fadf 	bl	8004aaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2160      	movs	r1, #96	@ 0x60
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fb09 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 80044f8:	e01c      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004506:	461a      	mov	r2, r3
 8004508:	f000 faa0 	bl	8004a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2140      	movs	r1, #64	@ 0x40
 8004512:	4618      	mov	r0, r3
 8004514:	f000 faf9 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8004518:	e00c      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f000 faf0 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 800452a:	e003      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      break;
 8004530:	e000      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a43      	ldr	r2, [pc, #268]	@ (80046c0 <TIM_Base_SetConfig+0x120>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045be:	d00f      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a40      	ldr	r2, [pc, #256]	@ (80046c4 <TIM_Base_SetConfig+0x124>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a3f      	ldr	r2, [pc, #252]	@ (80046c8 <TIM_Base_SetConfig+0x128>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a3e      	ldr	r2, [pc, #248]	@ (80046cc <TIM_Base_SetConfig+0x12c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3d      	ldr	r2, [pc, #244]	@ (80046d0 <TIM_Base_SetConfig+0x130>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d108      	bne.n	80045f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a32      	ldr	r2, [pc, #200]	@ (80046c0 <TIM_Base_SetConfig+0x120>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d02b      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004600:	d027      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2f      	ldr	r2, [pc, #188]	@ (80046c4 <TIM_Base_SetConfig+0x124>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d023      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2e      	ldr	r2, [pc, #184]	@ (80046c8 <TIM_Base_SetConfig+0x128>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01f      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2d      	ldr	r2, [pc, #180]	@ (80046cc <TIM_Base_SetConfig+0x12c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01b      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2c      	ldr	r2, [pc, #176]	@ (80046d0 <TIM_Base_SetConfig+0x130>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d017      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <TIM_Base_SetConfig+0x134>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <TIM_Base_SetConfig+0x138>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00f      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a29      	ldr	r2, [pc, #164]	@ (80046dc <TIM_Base_SetConfig+0x13c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00b      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a28      	ldr	r2, [pc, #160]	@ (80046e0 <TIM_Base_SetConfig+0x140>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a27      	ldr	r2, [pc, #156]	@ (80046e4 <TIM_Base_SetConfig+0x144>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a26      	ldr	r2, [pc, #152]	@ (80046e8 <TIM_Base_SetConfig+0x148>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d108      	bne.n	8004664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a0e      	ldr	r2, [pc, #56]	@ (80046c0 <TIM_Base_SetConfig+0x120>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_Base_SetConfig+0xf2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a10      	ldr	r2, [pc, #64]	@ (80046d0 <TIM_Base_SetConfig+0x130>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d103      	bne.n	800469a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40010400 	.word	0x40010400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800
 80046e0:	40001800 	.word	0x40001800
 80046e4:	40001c00 	.word	0x40001c00
 80046e8:	40002000 	.word	0x40002000

080046ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 0201 	bic.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f023 0302 	bic.w	r3, r3, #2
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a20      	ldr	r2, [pc, #128]	@ (80047c4 <TIM_OC1_SetConfig+0xd8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_OC1_SetConfig+0x64>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <TIM_OC1_SetConfig+0xdc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10c      	bne.n	800476a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0308 	bic.w	r3, r3, #8
 8004756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a15      	ldr	r2, [pc, #84]	@ (80047c4 <TIM_OC1_SetConfig+0xd8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC1_SetConfig+0x8e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a14      	ldr	r2, [pc, #80]	@ (80047c8 <TIM_OC1_SetConfig+0xdc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d111      	bne.n	800479e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40010400 	.word	0x40010400

080047cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f023 0210 	bic.w	r2, r3, #16
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 0320 	bic.w	r3, r3, #32
 8004816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a22      	ldr	r2, [pc, #136]	@ (80048b0 <TIM_OC2_SetConfig+0xe4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC2_SetConfig+0x68>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a21      	ldr	r2, [pc, #132]	@ (80048b4 <TIM_OC2_SetConfig+0xe8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10d      	bne.n	8004850 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800484e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a17      	ldr	r2, [pc, #92]	@ (80048b0 <TIM_OC2_SetConfig+0xe4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_OC2_SetConfig+0x94>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a16      	ldr	r2, [pc, #88]	@ (80048b4 <TIM_OC2_SetConfig+0xe8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d113      	bne.n	8004888 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800486e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40010400 	.word	0x40010400

080048b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <TIM_OC3_SetConfig+0xe0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_OC3_SetConfig+0x66>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a20      	ldr	r2, [pc, #128]	@ (800499c <TIM_OC3_SetConfig+0xe4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10d      	bne.n	800493a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a16      	ldr	r2, [pc, #88]	@ (8004998 <TIM_OC3_SetConfig+0xe0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC3_SetConfig+0x92>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a15      	ldr	r2, [pc, #84]	@ (800499c <TIM_OC3_SetConfig+0xe4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d113      	bne.n	8004972 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	621a      	str	r2, [r3, #32]
}
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40010000 	.word	0x40010000
 800499c:	40010400 	.word	0x40010400

080049a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	031b      	lsls	r3, r3, #12
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a12      	ldr	r2, [pc, #72]	@ (8004a44 <TIM_OC4_SetConfig+0xa4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC4_SetConfig+0x68>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a11      	ldr	r2, [pc, #68]	@ (8004a48 <TIM_OC4_SetConfig+0xa8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d109      	bne.n	8004a1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	019b      	lsls	r3, r3, #6
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40010400 	.word	0x40010400

08004a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f023 0201 	bic.w	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 030a 	bic.w	r3, r3, #10
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b087      	sub	sp, #28
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f023 0210 	bic.w	r2, r3, #16
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	031b      	lsls	r3, r3, #12
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ae6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f043 0307 	orr.w	r3, r3, #7
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e05a      	b.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a21      	ldr	r2, [pc, #132]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d022      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be4:	d01d      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1d      	ldr	r2, [pc, #116]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d018      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00e      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a17      	ldr	r2, [pc, #92]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10c      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40001800 	.word	0x40001800

08004c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e042      	b.n	8004d38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd f886 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2224      	movs	r2, #36	@ 0x24
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fff5 	bl	8005cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	@ 0x30
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d162      	bne.n	8004e20 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_UART_Transmit_DMA+0x26>
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e05b      	b.n	8004e22 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2221      	movs	r2, #33	@ 0x21
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	4a27      	ldr	r2, [pc, #156]	@ (8004e2c <HAL_UART_Transmit_DMA+0xec>)
 8004d90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d96:	4a26      	ldr	r2, [pc, #152]	@ (8004e30 <HAL_UART_Transmit_DMA+0xf0>)
 8004d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9e:	4a25      	ldr	r2, [pc, #148]	@ (8004e34 <HAL_UART_Transmit_DMA+0xf4>)
 8004da0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	2200      	movs	r2, #0
 8004da8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	f7fd fc55 	bl	8002670 <HAL_DMA_Start_IT>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2210      	movs	r2, #16
 8004dd0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e021      	b.n	8004e22 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004de6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	617b      	str	r3, [r7, #20]
   return(result);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e08:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6a39      	ldr	r1, [r7, #32]
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e5      	bne.n	8004de8 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3730      	adds	r7, #48	@ 0x30
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	08005551 	.word	0x08005551
 8004e30:	080055eb 	.word	0x080055eb
 8004e34:	0800576f 	.word	0x0800576f

08004e38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d112      	bne.n	8004e78 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_UART_Receive_DMA+0x26>
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e00b      	b.n	8004e7a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fcc8 	bl	8005804 <UART_Start_Receive_DMA>
 8004e74:	4603      	mov	r3, r0
 8004e76:	e000      	b.n	8004e7a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b090      	sub	sp, #64	@ 0x40
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e98:	2b80      	cmp	r3, #128	@ 0x80
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b21      	cmp	r3, #33	@ 0x21
 8004eae:	d128      	bne.n	8004f02 <HAL_UART_DMAStop+0x80>
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d025      	beq.n	8004f02 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ed6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd fc12 	bl	8002720 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fd27 	bl	8005950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0c:	2b40      	cmp	r3, #64	@ 0x40
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b22      	cmp	r3, #34	@ 0x22
 8004f22:	d128      	bne.n	8004f76 <HAL_UART_DMAStop+0xf4>
 8004f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d025      	beq.n	8004f76 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3314      	adds	r3, #20
 8004f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f4a:	61fa      	str	r2, [r7, #28]
 8004f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	69b9      	ldr	r1, [r7, #24]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	617b      	str	r3, [r7, #20]
   return(result);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd fbd8 	bl	8002720 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fd15 	bl	80059a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3740      	adds	r7, #64	@ 0x40
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b0ba      	sub	sp, #232	@ 0xe8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x66>
 8004fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fdba 	bl	8005b58 <UART_Receive_IT>
      return;
 8004fe4:	e273      	b.n	80054ce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80de 	beq.w	80051ac <HAL_UART_IRQHandler+0x22c>
 8004ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005000:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80d1 	beq.w	80051ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <HAL_UART_IRQHandler+0xae>
 8005016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	f043 0201 	orr.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <HAL_UART_IRQHandler+0xd2>
 800503a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	f043 0202 	orr.w	r2, r3, #2
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_UART_IRQHandler+0xf6>
 800505e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	f043 0204 	orr.w	r2, r3, #4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d011      	beq.n	80050a6 <HAL_UART_IRQHandler+0x126>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800508e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	f043 0208 	orr.w	r2, r3, #8
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 820a 	beq.w	80054c4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_UART_IRQHandler+0x14e>
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fd45 	bl	8005b58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <HAL_UART_IRQHandler+0x17a>
 80050f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04f      	beq.n	800519a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fc50 	bl	80059a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510a:	2b40      	cmp	r3, #64	@ 0x40
 800510c:	d141      	bne.n	8005192 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005124:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800512c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800513a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800513e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1d9      	bne.n	800510e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	4a8a      	ldr	r2, [pc, #552]	@ (8005390 <HAL_UART_IRQHandler+0x410>)
 8005168:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd fb46 	bl	8002800 <HAL_DMA_Abort_IT>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005184:	4610      	mov	r0, r2
 8005186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e00e      	b.n	80051a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9ca 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	e00a      	b.n	80051a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9c6 	bl	8005524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e006      	b.n	80051a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f9c2 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051a6:	e18d      	b.n	80054c4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	bf00      	nop
    return;
 80051aa:	e18b      	b.n	80054c4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	f040 8167 	bne.w	8005484 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8160 	beq.w	8005484 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80051c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8159 	beq.w	8005484 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f2:	2b40      	cmp	r3, #64	@ 0x40
 80051f4:	f040 80ce 	bne.w	8005394 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005204:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80a9 	beq.w	8005360 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005216:	429a      	cmp	r2, r3
 8005218:	f080 80a2 	bcs.w	8005360 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005222:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522e:	f000 8088 	beq.w	8005342 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005248:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800524c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800525e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800526a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1d9      	bne.n	8005232 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800528e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e1      	bne.n	800527e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3314      	adds	r3, #20
 80052c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3314      	adds	r3, #20
 80052da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e3      	bne.n	80052ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005312:	f023 0310 	bic.w	r3, r3, #16
 8005316:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005324:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005326:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800532a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e3      	bne.n	8005300 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	4618      	mov	r0, r3
 800533e:	f7fd f9ef 	bl	8002720 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005350:	b29b      	uxth	r3, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	b29b      	uxth	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8ed 	bl	8005538 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800535e:	e0b3      	b.n	80054c8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005368:	429a      	cmp	r2, r3
 800536a:	f040 80ad 	bne.w	80054c8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005378:	f040 80a6 	bne.w	80054c8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f8d5 	bl	8005538 <HAL_UARTEx_RxEventCallback>
      return;
 800538e:	e09b      	b.n	80054c8 <HAL_UART_IRQHandler+0x548>
 8005390:	08005a67 	.word	0x08005a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800539c:	b29b      	uxth	r3, r3
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 808e 	beq.w	80054cc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80053b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8089 	beq.w	80054cc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053de:	647a      	str	r2, [r7, #68]	@ 0x44
 80053e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e3      	bne.n	80053ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3314      	adds	r3, #20
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	623b      	str	r3, [r7, #32]
   return(result);
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005416:	633a      	str	r2, [r7, #48]	@ 0x30
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800541c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e3      	bne.n	80053f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	60fb      	str	r3, [r7, #12]
   return(result);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0310 	bic.w	r3, r3, #16
 800544e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800545c:	61fa      	str	r2, [r7, #28]
 800545e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	69b9      	ldr	r1, [r7, #24]
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	617b      	str	r3, [r7, #20]
   return(result);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e3      	bne.n	8005438 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f85b 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005482:	e023      	b.n	80054cc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_UART_IRQHandler+0x524>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 faf3 	bl	8005a88 <UART_Transmit_IT>
    return;
 80054a2:	e014      	b.n	80054ce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00e      	beq.n	80054ce <HAL_UART_IRQHandler+0x54e>
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb33 	bl	8005b28 <UART_EndTransmit_IT>
    return;
 80054c2:	e004      	b.n	80054ce <HAL_UART_IRQHandler+0x54e>
    return;
 80054c4:	bf00      	nop
 80054c6:	e002      	b.n	80054ce <HAL_UART_IRQHandler+0x54e>
      return;
 80054c8:	bf00      	nop
 80054ca:	e000      	b.n	80054ce <HAL_UART_IRQHandler+0x54e>
      return;
 80054cc:	bf00      	nop
  }
}
 80054ce:	37e8      	adds	r7, #232	@ 0xe8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	@ 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d137      	bne.n	80055dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800556c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556e:	2200      	movs	r2, #0
 8005570:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	623b      	str	r3, [r7, #32]
   return(result);
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800558a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005592:	633a      	str	r2, [r7, #48]	@ 0x30
 8005594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80055be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	617b      	str	r3, [r7, #20]
   return(result);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055da:	e002      	b.n	80055e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80055dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80055de:	f7ff ff79 	bl	80054d4 <HAL_UART_TxCpltCallback>
}
 80055e2:	bf00      	nop
 80055e4:	3740      	adds	r7, #64	@ 0x40
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff ff75 	bl	80054e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b09c      	sub	sp, #112	@ 0x70
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d172      	bne.n	8005708 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005624:	2200      	movs	r2, #0
 8005626:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800563a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800563e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005648:	65ba      	str	r2, [r7, #88]	@ 0x58
 800564a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800564e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800566c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	667b      	str	r3, [r7, #100]	@ 0x64
 8005674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800567c:	647a      	str	r2, [r7, #68]	@ 0x44
 800567e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800568a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	623b      	str	r3, [r7, #32]
   return(result);
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80056a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d119      	bne.n	8005708 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0310 	bic.w	r3, r3, #16
 80056ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056f4:	61fa      	str	r2, [r7, #28]
 80056f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69b9      	ldr	r1, [r7, #24]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	617b      	str	r3, [r7, #20]
   return(result);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800570a:	2200      	movs	r2, #0
 800570c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	2b01      	cmp	r3, #1
 8005714:	d106      	bne.n	8005724 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005718:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800571a:	4619      	mov	r1, r3
 800571c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800571e:	f7ff ff0b 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005722:	e002      	b.n	800572a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005724:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005726:	f7ff fee9 	bl	80054fc <HAL_UART_RxCpltCallback>
}
 800572a:	bf00      	nop
 800572c:	3770      	adds	r7, #112	@ 0x70
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	2b01      	cmp	r3, #1
 800574c:	d108      	bne.n	8005760 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	b29b      	uxth	r3, r3
 8005756:	4619      	mov	r1, r3
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff feed 	bl	8005538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800575e:	e002      	b.n	8005766 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff fed5 	bl	8005510 <HAL_UART_RxHalfCpltCallback>
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578a:	2b80      	cmp	r3, #128	@ 0x80
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b21      	cmp	r3, #33	@ 0x21
 80057a0:	d108      	bne.n	80057b4 <UART_DMAError+0x46>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80057ae:	68b8      	ldr	r0, [r7, #8]
 80057b0:	f000 f8ce 	bl	8005950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057be:	2b40      	cmp	r3, #64	@ 0x40
 80057c0:	bf0c      	ite	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	2300      	movne	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b22      	cmp	r3, #34	@ 0x22
 80057d4:	d108      	bne.n	80057e8 <UART_DMAError+0x7a>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80057e2:	68b8      	ldr	r0, [r7, #8]
 80057e4:	f000 f8dc 	bl	80059a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ec:	f043 0210 	orr.w	r2, r3, #16
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f4:	68b8      	ldr	r0, [r7, #8]
 80057f6:	f7ff fe95 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b098      	sub	sp, #96	@ 0x60
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2222      	movs	r2, #34	@ 0x22
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	4a44      	ldr	r2, [pc, #272]	@ (8005944 <UART_Start_Receive_DMA+0x140>)
 8005832:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	4a43      	ldr	r2, [pc, #268]	@ (8005948 <UART_Start_Receive_DMA+0x144>)
 800583a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005840:	4a42      	ldr	r2, [pc, #264]	@ (800594c <UART_Start_Receive_DMA+0x148>)
 8005842:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005848:	2200      	movs	r2, #0
 800584a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3304      	adds	r3, #4
 800585c:	4619      	mov	r1, r3
 800585e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	f7fc ff04 	bl	8002670 <HAL_DMA_Start_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d008      	beq.n	8005880 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2210      	movs	r2, #16
 8005872:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e05d      	b.n	800593c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d019      	beq.n	80058d2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80058c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80058c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80058cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e5      	bne.n	800589e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80058f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3314      	adds	r3, #20
 800590c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	617b      	str	r3, [r7, #20]
   return(result);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800591c:	653b      	str	r3, [r7, #80]	@ 0x50
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3314      	adds	r3, #20
 8005924:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005926:	627a      	str	r2, [r7, #36]	@ 0x24
 8005928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6a39      	ldr	r1, [r7, #32]
 800592c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	61fb      	str	r3, [r7, #28]
   return(result);
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3760      	adds	r7, #96	@ 0x60
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	08005607 	.word	0x08005607
 8005948:	08005733 	.word	0x08005733
 800594c:	0800576f 	.word	0x0800576f

08005950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b089      	sub	sp, #36	@ 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	60bb      	str	r3, [r7, #8]
   return(result);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	61ba      	str	r2, [r7, #24]
 800597a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6979      	ldr	r1, [r7, #20]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	613b      	str	r3, [r7, #16]
   return(result);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005994:	bf00      	nop
 8005996:	3724      	adds	r7, #36	@ 0x24
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b095      	sub	sp, #84	@ 0x54
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80059ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3314      	adds	r3, #20
 80059e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3314      	adds	r3, #20
 80059fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d119      	bne.n	8005a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f023 0310 	bic.w	r3, r3, #16
 8005a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a38:	61ba      	str	r2, [r7, #24]
 8005a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	613b      	str	r3, [r7, #16]
   return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e5      	bne.n	8005a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a5a:	bf00      	nop
 8005a5c:	3754      	adds	r7, #84	@ 0x54
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff fd52 	bl	8005524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b21      	cmp	r3, #33	@ 0x21
 8005a9a:	d13e      	bne.n	8005b1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa4:	d114      	bne.n	8005ad0 <UART_Transmit_IT+0x48>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	1c9a      	adds	r2, r3, #2
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]
 8005ace:	e008      	b.n	8005ae2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	1c59      	adds	r1, r3, #1
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6211      	str	r1, [r2, #32]
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4619      	mov	r1, r3
 8005af0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10f      	bne.n	8005b16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e000      	b.n	8005b1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fcc3 	bl	80054d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08c      	sub	sp, #48	@ 0x30
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b22      	cmp	r3, #34	@ 0x22
 8005b72:	f040 80aa 	bne.w	8005cca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b7e:	d115      	bne.n	8005bac <UART_Receive_IT+0x54>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d111      	bne.n	8005bac <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba4:	1c9a      	adds	r2, r3, #2
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005baa:	e024      	b.n	8005bf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d007      	beq.n	8005bcc <UART_Receive_IT+0x74>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <UART_Receive_IT+0x82>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	e008      	b.n	8005bec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4619      	mov	r1, r3
 8005c04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d15d      	bne.n	8005cc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0220 	bic.w	r2, r2, #32
 8005c18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d135      	bne.n	8005cbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	613b      	str	r3, [r7, #16]
   return(result);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f023 0310 	bic.w	r3, r3, #16
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c76:	623a      	str	r2, [r7, #32]
 8005c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	6a3a      	ldr	r2, [r7, #32]
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e5      	bne.n	8005c56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d10a      	bne.n	8005cae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fc3f 	bl	8005538 <HAL_UARTEx_RxEventCallback>
 8005cba:	e002      	b.n	8005cc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff fc1d 	bl	80054fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e002      	b.n	8005ccc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3730      	adds	r7, #48	@ 0x30
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd8:	b0c0      	sub	sp, #256	@ 0x100
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	68d9      	ldr	r1, [r3, #12]
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	ea40 0301 	orr.w	r3, r0, r1
 8005cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d2c:	f021 010c 	bic.w	r1, r1, #12
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4e:	6999      	ldr	r1, [r3, #24]
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	ea40 0301 	orr.w	r3, r0, r1
 8005d5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b8f      	ldr	r3, [pc, #572]	@ (8005fa0 <UART_SetConfig+0x2cc>)
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d005      	beq.n	8005d74 <UART_SetConfig+0xa0>
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005fa4 <UART_SetConfig+0x2d0>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d104      	bne.n	8005d7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d74:	f7fd fa9e 	bl	80032b4 <HAL_RCC_GetPCLK2Freq>
 8005d78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d7c:	e003      	b.n	8005d86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d7e:	f7fd fa85 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8005d82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d90:	f040 810c 	bne.w	8005fac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005da2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005da6:	4622      	mov	r2, r4
 8005da8:	462b      	mov	r3, r5
 8005daa:	1891      	adds	r1, r2, r2
 8005dac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dae:	415b      	adcs	r3, r3
 8005db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005db2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005db6:	4621      	mov	r1, r4
 8005db8:	eb12 0801 	adds.w	r8, r2, r1
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	eb43 0901 	adc.w	r9, r3, r1
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dd6:	4690      	mov	r8, r2
 8005dd8:	4699      	mov	r9, r3
 8005dda:	4623      	mov	r3, r4
 8005ddc:	eb18 0303 	adds.w	r3, r8, r3
 8005de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005de4:	462b      	mov	r3, r5
 8005de6:	eb49 0303 	adc.w	r3, r9, r3
 8005dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e02:	460b      	mov	r3, r1
 8005e04:	18db      	adds	r3, r3, r3
 8005e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e08:	4613      	mov	r3, r2
 8005e0a:	eb42 0303 	adc.w	r3, r2, r3
 8005e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e18:	f7fa fab2 	bl	8000380 <__aeabi_uldivmod>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4b61      	ldr	r3, [pc, #388]	@ (8005fa8 <UART_SetConfig+0x2d4>)
 8005e22:	fba3 2302 	umull	r2, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	011c      	lsls	r4, r3, #4
 8005e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	464b      	mov	r3, r9
 8005e40:	1891      	adds	r1, r2, r2
 8005e42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e44:	415b      	adcs	r3, r3
 8005e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e52:	4649      	mov	r1, r9
 8005e54:	eb43 0b01 	adc.w	fp, r3, r1
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e6c:	4692      	mov	sl, r2
 8005e6e:	469b      	mov	fp, r3
 8005e70:	4643      	mov	r3, r8
 8005e72:	eb1a 0303 	adds.w	r3, sl, r3
 8005e76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	18db      	adds	r3, r3, r3
 8005e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	eb42 0303 	adc.w	r3, r2, r3
 8005ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005eae:	f7fa fa67 	bl	8000380 <__aeabi_uldivmod>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa8 <UART_SetConfig+0x2d4>)
 8005eba:	fba3 2301 	umull	r2, r3, r3, r1
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	2264      	movs	r2, #100	@ 0x64
 8005ec2:	fb02 f303 	mul.w	r3, r2, r3
 8005ec6:	1acb      	subs	r3, r1, r3
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ece:	4b36      	ldr	r3, [pc, #216]	@ (8005fa8 <UART_SetConfig+0x2d4>)
 8005ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005edc:	441c      	add	r4, r3
 8005ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ee8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005eec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f00:	4641      	mov	r1, r8
 8005f02:	1851      	adds	r1, r2, r1
 8005f04:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f06:	4649      	mov	r1, r9
 8005f08:	414b      	adcs	r3, r1
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f18:	4659      	mov	r1, fp
 8005f1a:	00cb      	lsls	r3, r1, #3
 8005f1c:	4651      	mov	r1, sl
 8005f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f22:	4651      	mov	r1, sl
 8005f24:	00ca      	lsls	r2, r1, #3
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f34:	464b      	mov	r3, r9
 8005f36:	460a      	mov	r2, r1
 8005f38:	eb42 0303 	adc.w	r3, r2, r3
 8005f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f54:	460b      	mov	r3, r1
 8005f56:	18db      	adds	r3, r3, r3
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f6a:	f7fa fa09 	bl	8000380 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <UART_SetConfig+0x2d4>)
 8005f74:	fba3 1302 	umull	r1, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	2164      	movs	r1, #100	@ 0x64
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	3332      	adds	r3, #50	@ 0x32
 8005f86:	4a08      	ldr	r2, [pc, #32]	@ (8005fa8 <UART_SetConfig+0x2d4>)
 8005f88:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f003 0207 	and.w	r2, r3, #7
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4422      	add	r2, r4
 8005f9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f9c:	e106      	b.n	80061ac <UART_SetConfig+0x4d8>
 8005f9e:	bf00      	nop
 8005fa0:	40011000 	.word	0x40011000
 8005fa4:	40011400 	.word	0x40011400
 8005fa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005fba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	1891      	adds	r1, r2, r2
 8005fc4:	6239      	str	r1, [r7, #32]
 8005fc6:	415b      	adcs	r3, r3
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fce:	4641      	mov	r1, r8
 8005fd0:	1854      	adds	r4, r2, r1
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	eb43 0501 	adc.w	r5, r3, r1
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	00eb      	lsls	r3, r5, #3
 8005fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fe6:	00e2      	lsls	r2, r4, #3
 8005fe8:	4614      	mov	r4, r2
 8005fea:	461d      	mov	r5, r3
 8005fec:	4643      	mov	r3, r8
 8005fee:	18e3      	adds	r3, r4, r3
 8005ff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	eb45 0303 	adc.w	r3, r5, r3
 8005ffa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800600a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800601a:	4629      	mov	r1, r5
 800601c:	008b      	lsls	r3, r1, #2
 800601e:	4621      	mov	r1, r4
 8006020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006024:	4621      	mov	r1, r4
 8006026:	008a      	lsls	r2, r1, #2
 8006028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800602c:	f7fa f9a8 	bl	8000380 <__aeabi_uldivmod>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4b60      	ldr	r3, [pc, #384]	@ (80061b8 <UART_SetConfig+0x4e4>)
 8006036:	fba3 2302 	umull	r2, r3, r3, r2
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	011c      	lsls	r4, r3, #4
 800603e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006042:	2200      	movs	r2, #0
 8006044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006048:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800604c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006050:	4642      	mov	r2, r8
 8006052:	464b      	mov	r3, r9
 8006054:	1891      	adds	r1, r2, r2
 8006056:	61b9      	str	r1, [r7, #24]
 8006058:	415b      	adcs	r3, r3
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006060:	4641      	mov	r1, r8
 8006062:	1851      	adds	r1, r2, r1
 8006064:	6139      	str	r1, [r7, #16]
 8006066:	4649      	mov	r1, r9
 8006068:	414b      	adcs	r3, r1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006078:	4659      	mov	r1, fp
 800607a:	00cb      	lsls	r3, r1, #3
 800607c:	4651      	mov	r1, sl
 800607e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006082:	4651      	mov	r1, sl
 8006084:	00ca      	lsls	r2, r1, #3
 8006086:	4610      	mov	r0, r2
 8006088:	4619      	mov	r1, r3
 800608a:	4603      	mov	r3, r0
 800608c:	4642      	mov	r2, r8
 800608e:	189b      	adds	r3, r3, r2
 8006090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006094:	464b      	mov	r3, r9
 8006096:	460a      	mov	r2, r1
 8006098:	eb42 0303 	adc.w	r3, r2, r3
 800609c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060b8:	4649      	mov	r1, r9
 80060ba:	008b      	lsls	r3, r1, #2
 80060bc:	4641      	mov	r1, r8
 80060be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060c2:	4641      	mov	r1, r8
 80060c4:	008a      	lsls	r2, r1, #2
 80060c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060ca:	f7fa f959 	bl	8000380 <__aeabi_uldivmod>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	4b38      	ldr	r3, [pc, #224]	@ (80061b8 <UART_SetConfig+0x4e4>)
 80060d6:	fba3 2301 	umull	r2, r3, r3, r1
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	2264      	movs	r2, #100	@ 0x64
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	1acb      	subs	r3, r1, r3
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	3332      	adds	r3, #50	@ 0x32
 80060e8:	4a33      	ldr	r2, [pc, #204]	@ (80061b8 <UART_SetConfig+0x4e4>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060f4:	441c      	add	r4, r3
 80060f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fa:	2200      	movs	r2, #0
 80060fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80060fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006100:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	1891      	adds	r1, r2, r2
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	415b      	adcs	r3, r3
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006114:	4641      	mov	r1, r8
 8006116:	1851      	adds	r1, r2, r1
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	4649      	mov	r1, r9
 800611c:	414b      	adcs	r3, r1
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800612c:	4659      	mov	r1, fp
 800612e:	00cb      	lsls	r3, r1, #3
 8006130:	4651      	mov	r1, sl
 8006132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006136:	4651      	mov	r1, sl
 8006138:	00ca      	lsls	r2, r1, #3
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	4603      	mov	r3, r0
 8006140:	4642      	mov	r2, r8
 8006142:	189b      	adds	r3, r3, r2
 8006144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006146:	464b      	mov	r3, r9
 8006148:	460a      	mov	r2, r1
 800614a:	eb42 0303 	adc.w	r3, r2, r3
 800614e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	663b      	str	r3, [r7, #96]	@ 0x60
 800615a:	667a      	str	r2, [r7, #100]	@ 0x64
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006168:	4649      	mov	r1, r9
 800616a:	008b      	lsls	r3, r1, #2
 800616c:	4641      	mov	r1, r8
 800616e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006172:	4641      	mov	r1, r8
 8006174:	008a      	lsls	r2, r1, #2
 8006176:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800617a:	f7fa f901 	bl	8000380 <__aeabi_uldivmod>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4b0d      	ldr	r3, [pc, #52]	@ (80061b8 <UART_SetConfig+0x4e4>)
 8006184:	fba3 1302 	umull	r1, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	2164      	movs	r1, #100	@ 0x64
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	3332      	adds	r3, #50	@ 0x32
 8006196:	4a08      	ldr	r2, [pc, #32]	@ (80061b8 <UART_SetConfig+0x4e4>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	f003 020f 	and.w	r2, r3, #15
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4422      	add	r2, r4
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061b2:	46bd      	mov	sp, r7
 80061b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061b8:	51eb851f 	.word	0x51eb851f

080061bc <__NVIC_SetPriority>:
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	db0a      	blt.n	80061e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	490c      	ldr	r1, [pc, #48]	@ (8006208 <__NVIC_SetPriority+0x4c>)
 80061d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061da:	0112      	lsls	r2, r2, #4
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	440b      	add	r3, r1
 80061e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80061e4:	e00a      	b.n	80061fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4908      	ldr	r1, [pc, #32]	@ (800620c <__NVIC_SetPriority+0x50>)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	3b04      	subs	r3, #4
 80061f4:	0112      	lsls	r2, r2, #4
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	440b      	add	r3, r1
 80061fa:	761a      	strb	r2, [r3, #24]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000e100 	.word	0xe000e100
 800620c:	e000ed00 	.word	0xe000ed00

08006210 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <SysTick_Handler+0x1c>)
 8006216:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006218:	f001 fd40 	bl	8007c9c <xTaskGetSchedulerState>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d001      	beq.n	8006226 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006222:	f002 fb39 	bl	8008898 <xPortSysTickHandler>
  }
}
 8006226:	bf00      	nop
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	e000e010 	.word	0xe000e010

08006230 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006234:	2100      	movs	r1, #0
 8006236:	f06f 0004 	mvn.w	r0, #4
 800623a:	f7ff ffbf 	bl	80061bc <__NVIC_SetPriority>
#endif
}
 800623e:	bf00      	nop
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800624a:	f3ef 8305 	mrs	r3, IPSR
 800624e:	603b      	str	r3, [r7, #0]
  return(result);
 8006250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006256:	f06f 0305 	mvn.w	r3, #5
 800625a:	607b      	str	r3, [r7, #4]
 800625c:	e00c      	b.n	8006278 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800625e:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <osKernelInitialize+0x44>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d105      	bne.n	8006272 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006266:	4b08      	ldr	r3, [pc, #32]	@ (8006288 <osKernelInitialize+0x44>)
 8006268:	2201      	movs	r2, #1
 800626a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800626c:	2300      	movs	r3, #0
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e002      	b.n	8006278 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006272:	f04f 33ff 	mov.w	r3, #4294967295
 8006276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006278:	687b      	ldr	r3, [r7, #4]
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20005728 	.word	0x20005728

0800628c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006292:	f3ef 8305 	mrs	r3, IPSR
 8006296:	603b      	str	r3, [r7, #0]
  return(result);
 8006298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800629e:	f06f 0305 	mvn.w	r3, #5
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	e010      	b.n	80062c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <osKernelStart+0x48>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d109      	bne.n	80062c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062ae:	f7ff ffbf 	bl	8006230 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062b2:	4b08      	ldr	r3, [pc, #32]	@ (80062d4 <osKernelStart+0x48>)
 80062b4:	2202      	movs	r2, #2
 80062b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062b8:	f001 f87a 	bl	80073b0 <vTaskStartScheduler>
      stat = osOK;
 80062bc:	2300      	movs	r3, #0
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	e002      	b.n	80062c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295
 80062c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062c8:	687b      	ldr	r3, [r7, #4]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20005728 	.word	0x20005728

080062d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08e      	sub	sp, #56	@ 0x38
 80062dc:	af04      	add	r7, sp, #16
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e8:	f3ef 8305 	mrs	r3, IPSR
 80062ec:	617b      	str	r3, [r7, #20]
  return(result);
 80062ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d17e      	bne.n	80063f2 <osThreadNew+0x11a>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d07b      	beq.n	80063f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062fa:	2380      	movs	r3, #128	@ 0x80
 80062fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062fe:	2318      	movs	r3, #24
 8006300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006306:	f04f 33ff 	mov.w	r3, #4294967295
 800630a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d045      	beq.n	800639e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <osThreadNew+0x48>
        name = attr->name;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <osThreadNew+0x6e>
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b38      	cmp	r3, #56	@ 0x38
 8006338:	d805      	bhi.n	8006346 <osThreadNew+0x6e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <osThreadNew+0x72>
        return (NULL);
 8006346:	2300      	movs	r3, #0
 8006348:	e054      	b.n	80063f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00e      	beq.n	8006380 <osThreadNew+0xa8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b5b      	cmp	r3, #91	@ 0x5b
 8006368:	d90a      	bls.n	8006380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800636e:	2b00      	cmp	r3, #0
 8006370:	d006      	beq.n	8006380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <osThreadNew+0xa8>
        mem = 1;
 800637a:	2301      	movs	r3, #1
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	e010      	b.n	80063a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <osThreadNew+0xca>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <osThreadNew+0xca>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <osThreadNew+0xca>
          mem = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e001      	b.n	80063a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d110      	bne.n	80063ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063b0:	9202      	str	r2, [sp, #8]
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fe1a 	bl	8006ff8 <xTaskCreateStatic>
 80063c4:	4603      	mov	r3, r0
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	e013      	b.n	80063f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d110      	bne.n	80063f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f107 0310 	add.w	r3, r7, #16
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fe68 	bl	80070b8 <xTaskCreate>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d001      	beq.n	80063f2 <osThreadNew+0x11a>
            hTask = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063f2:	693b      	ldr	r3, [r7, #16]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3728      	adds	r7, #40	@ 0x28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006404:	f3ef 8305 	mrs	r3, IPSR
 8006408:	60bb      	str	r3, [r7, #8]
  return(result);
 800640a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <osDelay+0x1c>
    stat = osErrorISR;
 8006410:	f06f 0305 	mvn.w	r3, #5
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	e007      	b.n	8006428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 ff8e 	bl	8007344 <vTaskDelay>
    }
  }

  return (stat);
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a07      	ldr	r2, [pc, #28]	@ (8006460 <vApplicationGetIdleTaskMemory+0x2c>)
 8006444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4a06      	ldr	r2, [pc, #24]	@ (8006464 <vApplicationGetIdleTaskMemory+0x30>)
 800644a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2280      	movs	r2, #128	@ 0x80
 8006450:	601a      	str	r2, [r3, #0]
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	2000572c 	.word	0x2000572c
 8006464:	20005788 	.word	0x20005788

08006468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a07      	ldr	r2, [pc, #28]	@ (8006494 <vApplicationGetTimerTaskMemory+0x2c>)
 8006478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4a06      	ldr	r2, [pc, #24]	@ (8006498 <vApplicationGetTimerTaskMemory+0x30>)
 800647e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006486:	601a      	str	r2, [r3, #0]
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20005988 	.word	0x20005988
 8006498:	200059e4 	.word	0x200059e4

0800649c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f103 0208 	add.w	r2, r3, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295
 80064b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f103 0208 	add.w	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f103 0208 	add.w	r2, r3, #8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	601a      	str	r2, [r3, #0]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d103      	bne.n	800655e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	e00c      	b.n	8006578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3308      	adds	r3, #8
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e002      	b.n	800656c <vListInsert+0x2e>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	429a      	cmp	r2, r3
 8006576:	d2f6      	bcs.n	8006566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6892      	ldr	r2, [r2, #8]
 80065c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6852      	ldr	r2, [r2, #4]
 80065d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d103      	bne.n	80065e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	1e5a      	subs	r2, r3, #1
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <xQueueGenericReset+0x2c>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	60bb      	str	r3, [r7, #8]
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006630:	f002 f8a2 	bl	8008778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006660:	3b01      	subs	r3, #1
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006666:	fb01 f303 	mul.w	r3, r1, r3
 800666a:	441a      	add	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	22ff      	movs	r2, #255	@ 0xff
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	22ff      	movs	r2, #255	@ 0xff
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d114      	bne.n	80066b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01a      	beq.n	80066c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3310      	adds	r3, #16
 8006692:	4618      	mov	r0, r3
 8006694:	f001 f91a 	bl	80078cc <xTaskRemoveFromEventList>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d012      	beq.n	80066c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800669e:	4b0d      	ldr	r3, [pc, #52]	@ (80066d4 <xQueueGenericReset+0xd0>)
 80066a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	e009      	b.n	80066c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3310      	adds	r3, #16
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fef1 	bl	800649c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3324      	adds	r3, #36	@ 0x24
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff feec 	bl	800649c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066c4:	f002 f88a 	bl	80087dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066c8:	2301      	movs	r3, #1
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	@ 0x38
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <xQueueGenericCreateStatic+0x56>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <xQueueGenericCreateStatic+0x5a>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <xQueueGenericCreateStatic+0x5c>
 8006732:	2300      	movs	r3, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10b      	bne.n	8006750 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	623b      	str	r3, [r7, #32]
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	e7fd      	b.n	800674c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <xQueueGenericCreateStatic+0x84>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <xQueueGenericCreateStatic+0x88>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <xQueueGenericCreateStatic+0x8a>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	61fb      	str	r3, [r7, #28]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800677e:	2350      	movs	r3, #80	@ 0x50
 8006780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b50      	cmp	r3, #80	@ 0x50
 8006786:	d00b      	beq.n	80067a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61bb      	str	r3, [r7, #24]
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	e7fd      	b.n	800679c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80067a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f805 	bl	80067d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3730      	adds	r7, #48	@ 0x30
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e002      	b.n	80067f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006800:	2101      	movs	r1, #1
 8006802:	69b8      	ldr	r0, [r7, #24]
 8006804:	f7ff fefe 	bl	8006604 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	78fa      	ldrb	r2, [r7, #3]
 800680c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	@ 0x38
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <xQueueGenericSend+0x34>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <xQueueGenericSend+0x42>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <xQueueGenericSend+0x46>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <xQueueGenericSend+0x48>
 800685e:	2300      	movs	r3, #0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <xQueueGenericSend+0x64>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d103      	bne.n	800688a <xQueueGenericSend+0x72>
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <xQueueGenericSend+0x76>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueGenericSend+0x78>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <xQueueGenericSend+0x94>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	623b      	str	r3, [r7, #32]
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068ac:	f001 f9f6 	bl	8007c9c <xTaskGetSchedulerState>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <xQueueGenericSend+0xa4>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <xQueueGenericSend+0xa8>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <xQueueGenericSend+0xaa>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <xQueueGenericSend+0xc6>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	61fb      	str	r3, [r7, #28]
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068de:	f001 ff4b 	bl	8008778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <xQueueGenericSend+0xdc>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d129      	bne.n	8006948 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068fa:	f000 fa0f 	bl	8006d1c <prvCopyDataToQueue>
 80068fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	3324      	adds	r3, #36	@ 0x24
 800690c:	4618      	mov	r0, r3
 800690e:	f000 ffdd 	bl	80078cc <xTaskRemoveFromEventList>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d013      	beq.n	8006940 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006918:	4b3f      	ldr	r3, [pc, #252]	@ (8006a18 <xQueueGenericSend+0x200>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	e00a      	b.n	8006940 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800692a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006930:	4b39      	ldr	r3, [pc, #228]	@ (8006a18 <xQueueGenericSend+0x200>)
 8006932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006940:	f001 ff4c 	bl	80087dc <vPortExitCritical>
				return pdPASS;
 8006944:	2301      	movs	r3, #1
 8006946:	e063      	b.n	8006a10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800694e:	f001 ff45 	bl	80087dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006952:	2300      	movs	r3, #0
 8006954:	e05c      	b.n	8006a10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800695c:	f107 0314 	add.w	r3, r7, #20
 8006960:	4618      	mov	r0, r3
 8006962:	f001 f83f 	bl	80079e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006966:	2301      	movs	r3, #1
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800696a:	f001 ff37 	bl	80087dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800696e:	f000 fd87 	bl	8007480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006972:	f001 ff01 	bl	8008778 <vPortEnterCritical>
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800697c:	b25b      	sxtb	r3, r3
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d103      	bne.n	800698c <xQueueGenericSend+0x174>
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d103      	bne.n	80069a2 <xQueueGenericSend+0x18a>
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069a2:	f001 ff1b 	bl	80087dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069a6:	1d3a      	adds	r2, r7, #4
 80069a8:	f107 0314 	add.w	r3, r7, #20
 80069ac:	4611      	mov	r1, r2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 f82e 	bl	8007a10 <xTaskCheckForTimeOut>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d124      	bne.n	8006a04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069bc:	f000 faa6 	bl	8006f0c <prvIsQueueFull>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d018      	beq.n	80069f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	3310      	adds	r3, #16
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 ff2a 	bl	8007828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069d6:	f000 fa31 	bl	8006e3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069da:	f000 fd5f 	bl	800749c <xTaskResumeAll>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f47f af7c 	bne.w	80068de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <xQueueGenericSend+0x200>)
 80069e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	e772      	b.n	80068de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069fa:	f000 fa1f 	bl	8006e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069fe:	f000 fd4d 	bl	800749c <xTaskResumeAll>
 8006a02:	e76c      	b.n	80068de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a06:	f000 fa19 	bl	8006e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a0a:	f000 fd47 	bl	800749c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3738      	adds	r7, #56	@ 0x38
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b090      	sub	sp, #64	@ 0x40
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <xQueueGenericSendFromISR+0x3e>
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <xQueueGenericSendFromISR+0x42>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <xQueueGenericSendFromISR+0x44>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	e7fd      	b.n	8006a78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d103      	bne.n	8006a8a <xQueueGenericSendFromISR+0x6e>
 8006a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <xQueueGenericSendFromISR+0x72>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <xQueueGenericSendFromISR+0x74>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	623b      	str	r3, [r7, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	bf00      	nop
 8006aaa:	e7fd      	b.n	8006aa8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aac:	f001 ff44 	bl	8008938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ab0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	61fa      	str	r2, [r7, #28]
 8006ac6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <xQueueGenericSendFromISR+0xc2>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d12f      	bne.n	8006b3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006af4:	f000 f912 	bl	8006d1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006af8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d112      	bne.n	8006b28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d016      	beq.n	8006b38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	3324      	adds	r3, #36	@ 0x24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fedc 	bl	80078cc <xTaskRemoveFromEventList>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e007      	b.n	8006b38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	b25a      	sxtb	r2, r3
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b3c:	e001      	b.n	8006b42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3740      	adds	r7, #64	@ 0x40
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08c      	sub	sp, #48	@ 0x30
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b64:	2300      	movs	r3, #0
 8006b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10b      	bne.n	8006b8a <xQueueReceive+0x32>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	623b      	str	r3, [r7, #32]
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	e7fd      	b.n	8006b86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <xQueueReceive+0x40>
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <xQueueReceive+0x44>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <xQueueReceive+0x46>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10b      	bne.n	8006bba <xQueueReceive+0x62>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	61fb      	str	r3, [r7, #28]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bba:	f001 f86f 	bl	8007c9c <xTaskGetSchedulerState>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <xQueueReceive+0x72>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <xQueueReceive+0x76>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueReceive+0x78>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <xQueueReceive+0x94>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	61bb      	str	r3, [r7, #24]
}
 8006be6:	bf00      	nop
 8006be8:	bf00      	nop
 8006bea:	e7fd      	b.n	8006be8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bec:	f001 fdc4 	bl	8008778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01f      	beq.n	8006c3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c00:	f000 f8f6 	bl	8006df0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c06:	1e5a      	subs	r2, r3, #1
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00f      	beq.n	8006c34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c16:	3310      	adds	r3, #16
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fe57 	bl	80078cc <xTaskRemoveFromEventList>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c24:	4b3c      	ldr	r3, [pc, #240]	@ (8006d18 <xQueueReceive+0x1c0>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c34:	f001 fdd2 	bl	80087dc <vPortExitCritical>
				return pdPASS;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e069      	b.n	8006d10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c42:	f001 fdcb 	bl	80087dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e062      	b.n	8006d10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c50:	f107 0310 	add.w	r3, r7, #16
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fec5 	bl	80079e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c5e:	f001 fdbd 	bl	80087dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c62:	f000 fc0d 	bl	8007480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c66:	f001 fd87 	bl	8008778 <vPortEnterCritical>
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d103      	bne.n	8006c80 <xQueueReceive+0x128>
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c86:	b25b      	sxtb	r3, r3
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d103      	bne.n	8006c96 <xQueueReceive+0x13e>
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c96:	f001 fda1 	bl	80087dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c9a:	1d3a      	adds	r2, r7, #4
 8006c9c:	f107 0310 	add.w	r3, r7, #16
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 feb4 	bl	8007a10 <xTaskCheckForTimeOut>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d123      	bne.n	8006cf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cb0:	f000 f916 	bl	8006ee0 <prvIsQueueEmpty>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d017      	beq.n	8006cea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	3324      	adds	r3, #36	@ 0x24
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fdb0 	bl	8007828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cca:	f000 f8b7 	bl	8006e3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cce:	f000 fbe5 	bl	800749c <xTaskResumeAll>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d189      	bne.n	8006bec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d18 <xQueueReceive+0x1c0>)
 8006cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	e780      	b.n	8006bec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cec:	f000 f8a6 	bl	8006e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cf0:	f000 fbd4 	bl	800749c <xTaskResumeAll>
 8006cf4:	e77a      	b.n	8006bec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cf8:	f000 f8a0 	bl	8006e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cfc:	f000 fbce 	bl	800749c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d02:	f000 f8ed 	bl	8006ee0 <prvIsQueueEmpty>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f43f af6f 	beq.w	8006bec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3730      	adds	r7, #48	@ 0x30
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10d      	bne.n	8006d56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d14d      	bne.n	8006dde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 ffc6 	bl	8007cd8 <xTaskPriorityDisinherit>
 8006d4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	e043      	b.n	8006dde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d119      	bne.n	8006d90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6858      	ldr	r0, [r3, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	461a      	mov	r2, r3
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	f010 fcdb 	bl	8017722 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	441a      	add	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d32b      	bcc.n	8006dde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	e026      	b.n	8006dde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68d8      	ldr	r0, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	f010 fcc1 	bl	8017722 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da8:	425b      	negs	r3, r3
 8006daa:	441a      	add	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d207      	bcs.n	8006dcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	441a      	add	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d105      	bne.n	8006dde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006de6:	697b      	ldr	r3, [r7, #20]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d018      	beq.n	8006e34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d303      	bcc.n	8006e24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68d9      	ldr	r1, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6838      	ldr	r0, [r7, #0]
 8006e30:	f010 fc77 	bl	8017722 <memcpy>
	}
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e44:	f001 fc98 	bl	8008778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e50:	e011      	b.n	8006e76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d012      	beq.n	8006e80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3324      	adds	r3, #36	@ 0x24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fd34 	bl	80078cc <xTaskRemoveFromEventList>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e6a:	f000 fe35 	bl	8007ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dce9      	bgt.n	8006e52 <prvUnlockQueue+0x16>
 8006e7e:	e000      	b.n	8006e82 <prvUnlockQueue+0x46>
					break;
 8006e80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	22ff      	movs	r2, #255	@ 0xff
 8006e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e8a:	f001 fca7 	bl	80087dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e8e:	f001 fc73 	bl	8008778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e9a:	e011      	b.n	8006ec0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d012      	beq.n	8006eca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3310      	adds	r3, #16
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fd0f 	bl	80078cc <xTaskRemoveFromEventList>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006eb4:	f000 fe10 	bl	8007ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dce9      	bgt.n	8006e9c <prvUnlockQueue+0x60>
 8006ec8:	e000      	b.n	8006ecc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006eca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	22ff      	movs	r2, #255	@ 0xff
 8006ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ed4:	f001 fc82 	bl	80087dc <vPortExitCritical>
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ee8:	f001 fc46 	bl	8008778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e001      	b.n	8006efe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006efe:	f001 fc6d 	bl	80087dc <vPortExitCritical>

	return xReturn;
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f14:	f001 fc30 	bl	8008778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d102      	bne.n	8006f2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e001      	b.n	8006f2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f2e:	f001 fc55 	bl	80087dc <vPortExitCritical>

	return xReturn;
 8006f32:	68fb      	ldr	r3, [r7, #12]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e014      	b.n	8006f76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8006f8c <vQueueAddToRegistry+0x50>)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f58:	490c      	ldr	r1, [pc, #48]	@ (8006f8c <vQueueAddToRegistry+0x50>)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f62:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <vQueueAddToRegistry+0x50>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f6e:	e006      	b.n	8006f7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b07      	cmp	r3, #7
 8006f7a:	d9e7      	bls.n	8006f4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f7c:	bf00      	nop
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20005de4 	.word	0x20005de4

08006f90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fa0:	f001 fbea 	bl	8008778 <vPortEnterCritical>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006faa:	b25b      	sxtb	r3, r3
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d103      	bne.n	8006fba <vQueueWaitForMessageRestricted+0x2a>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc0:	b25b      	sxtb	r3, r3
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d103      	bne.n	8006fd0 <vQueueWaitForMessageRestricted+0x40>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fd0:	f001 fc04 	bl	80087dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d106      	bne.n	8006fea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	3324      	adds	r3, #36	@ 0x24
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fc45 	bl	8007874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fea:	6978      	ldr	r0, [r7, #20]
 8006fec:	f7ff ff26 	bl	8006e3c <prvUnlockQueue>
	}
 8006ff0:	bf00      	nop
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08e      	sub	sp, #56	@ 0x38
 8006ffc:	af04      	add	r7, sp, #16
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <xTaskCreateStatic+0x2c>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	623b      	str	r3, [r7, #32]
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	e7fd      	b.n	8007020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xTaskCreateStatic+0x4a>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	61fb      	str	r3, [r7, #28]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007042:	235c      	movs	r3, #92	@ 0x5c
 8007044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b5c      	cmp	r3, #92	@ 0x5c
 800704a:	d00b      	beq.n	8007064 <xTaskCreateStatic+0x6c>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61bb      	str	r3, [r7, #24]
}
 800705e:	bf00      	nop
 8007060:	bf00      	nop
 8007062:	e7fd      	b.n	8007060 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007064:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01e      	beq.n	80070aa <xTaskCreateStatic+0xb2>
 800706c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01b      	beq.n	80070aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800707a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	2202      	movs	r2, #2
 8007080:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007084:	2300      	movs	r3, #0
 8007086:	9303      	str	r3, [sp, #12]
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	9302      	str	r3, [sp, #8]
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f850 	bl	8007142 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070a4:	f000 f8de 	bl	8007264 <prvAddNewTaskToReadyList>
 80070a8:	e001      	b.n	80070ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070ae:	697b      	ldr	r3, [r7, #20]
	}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3728      	adds	r7, #40	@ 0x28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08c      	sub	sp, #48	@ 0x30
 80070bc:	af04      	add	r7, sp, #16
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	4613      	mov	r3, r2
 80070c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 fc75 	bl	80089bc <pvPortMalloc>
 80070d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00e      	beq.n	80070f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070da:	205c      	movs	r0, #92	@ 0x5c
 80070dc:	f001 fc6e 	bl	80089bc <pvPortMalloc>
 80070e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ee:	e005      	b.n	80070fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070f0:	6978      	ldr	r0, [r7, #20]
 80070f2:	f001 fd31 	bl	8008b58 <vPortFree>
 80070f6:	e001      	b.n	80070fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	2300      	movs	r3, #0
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	9302      	str	r3, [sp, #8]
 8007114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f80e 	bl	8007142 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007126:	69f8      	ldr	r0, [r7, #28]
 8007128:	f000 f89c 	bl	8007264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	e002      	b.n	8007138 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007132:	f04f 33ff 	mov.w	r3, #4294967295
 8007136:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007138:	69bb      	ldr	r3, [r7, #24]
	}
 800713a:	4618      	mov	r0, r3
 800713c:	3720      	adds	r7, #32
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b088      	sub	sp, #32
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	461a      	mov	r2, r3
 800715a:	21a5      	movs	r1, #165	@ 0xa5
 800715c:	f010 fa06 	bl	801756c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800716a:	3b01      	subs	r3, #1
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	f023 0307 	bic.w	r3, r3, #7
 8007178:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	617b      	str	r3, [r7, #20]
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	e7fd      	b.n	8007198 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01f      	beq.n	80071e2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e012      	b.n	80071ce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	4413      	add	r3, r2
 80071ae:	7819      	ldrb	r1, [r3, #0]
 80071b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	3334      	adds	r3, #52	@ 0x34
 80071b8:	460a      	mov	r2, r1
 80071ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	4413      	add	r3, r2
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	3301      	adds	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2b0f      	cmp	r3, #15
 80071d2:	d9e9      	bls.n	80071a8 <prvInitialiseNewTask+0x66>
 80071d4:	e000      	b.n	80071d8 <prvInitialiseNewTask+0x96>
			{
				break;
 80071d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071e0:	e003      	b.n	80071ea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	2b37      	cmp	r3, #55	@ 0x37
 80071ee:	d901      	bls.n	80071f4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071f0:	2337      	movs	r3, #55	@ 0x37
 80071f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	2200      	movs	r2, #0
 8007204:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	3304      	adds	r3, #4
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff f966 	bl	80064dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	3318      	adds	r3, #24
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff f961 	bl	80064dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800722e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	2200      	movs	r2, #0
 8007234:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	68f9      	ldr	r1, [r7, #12]
 8007242:	69b8      	ldr	r0, [r7, #24]
 8007244:	f001 f966 	bl	8008514 <pxPortInitialiseStack>
 8007248:	4602      	mov	r2, r0
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800725a:	bf00      	nop
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800726c:	f001 fa84 	bl	8008778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007270:	4b2d      	ldr	r3, [pc, #180]	@ (8007328 <prvAddNewTaskToReadyList+0xc4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3301      	adds	r3, #1
 8007276:	4a2c      	ldr	r2, [pc, #176]	@ (8007328 <prvAddNewTaskToReadyList+0xc4>)
 8007278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800727a:	4b2c      	ldr	r3, [pc, #176]	@ (800732c <prvAddNewTaskToReadyList+0xc8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007282:	4a2a      	ldr	r2, [pc, #168]	@ (800732c <prvAddNewTaskToReadyList+0xc8>)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007288:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <prvAddNewTaskToReadyList+0xc4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d110      	bne.n	80072b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007290:	f000 fc46 	bl	8007b20 <prvInitialiseTaskLists>
 8007294:	e00d      	b.n	80072b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007296:	4b26      	ldr	r3, [pc, #152]	@ (8007330 <prvAddNewTaskToReadyList+0xcc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d109      	bne.n	80072b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800729e:	4b23      	ldr	r3, [pc, #140]	@ (800732c <prvAddNewTaskToReadyList+0xc8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d802      	bhi.n	80072b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072ac:	4a1f      	ldr	r2, [pc, #124]	@ (800732c <prvAddNewTaskToReadyList+0xc8>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072b2:	4b20      	ldr	r3, [pc, #128]	@ (8007334 <prvAddNewTaskToReadyList+0xd0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007334 <prvAddNewTaskToReadyList+0xd0>)
 80072ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007334 <prvAddNewTaskToReadyList+0xd0>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007338 <prvAddNewTaskToReadyList+0xd4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d903      	bls.n	80072d8 <prvAddNewTaskToReadyList+0x74>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4a18      	ldr	r2, [pc, #96]	@ (8007338 <prvAddNewTaskToReadyList+0xd4>)
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4a15      	ldr	r2, [pc, #84]	@ (800733c <prvAddNewTaskToReadyList+0xd8>)
 80072e6:	441a      	add	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f7ff f901 	bl	80064f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072f4:	f001 fa72 	bl	80087dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <prvAddNewTaskToReadyList+0xcc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00e      	beq.n	800731e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007300:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <prvAddNewTaskToReadyList+0xc8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	429a      	cmp	r2, r3
 800730c:	d207      	bcs.n	800731e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800730e:	4b0c      	ldr	r3, [pc, #48]	@ (8007340 <prvAddNewTaskToReadyList+0xdc>)
 8007310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	200062f8 	.word	0x200062f8
 800732c:	20005e24 	.word	0x20005e24
 8007330:	20006304 	.word	0x20006304
 8007334:	20006314 	.word	0x20006314
 8007338:	20006300 	.word	0x20006300
 800733c:	20005e28 	.word	0x20005e28
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d018      	beq.n	8007388 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007356:	4b14      	ldr	r3, [pc, #80]	@ (80073a8 <vTaskDelay+0x64>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <vTaskDelay+0x32>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60bb      	str	r3, [r7, #8]
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007376:	f000 f883 	bl	8007480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800737a:	2100      	movs	r1, #0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fd1b 	bl	8007db8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007382:	f000 f88b 	bl	800749c <xTaskResumeAll>
 8007386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800738e:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <vTaskDelay+0x68>)
 8007390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20006320 	.word	0x20006320
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	@ 0x28
 80073b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073be:	463a      	mov	r2, r7
 80073c0:	1d39      	adds	r1, r7, #4
 80073c2:	f107 0308 	add.w	r3, r7, #8
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f834 	bl	8006434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	9202      	str	r2, [sp, #8]
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	2300      	movs	r3, #0
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	2300      	movs	r3, #0
 80073dc:	460a      	mov	r2, r1
 80073de:	4922      	ldr	r1, [pc, #136]	@ (8007468 <vTaskStartScheduler+0xb8>)
 80073e0:	4822      	ldr	r0, [pc, #136]	@ (800746c <vTaskStartScheduler+0xbc>)
 80073e2:	f7ff fe09 	bl	8006ff8 <xTaskCreateStatic>
 80073e6:	4603      	mov	r3, r0
 80073e8:	4a21      	ldr	r2, [pc, #132]	@ (8007470 <vTaskStartScheduler+0xc0>)
 80073ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073ec:	4b20      	ldr	r3, [pc, #128]	@ (8007470 <vTaskStartScheduler+0xc0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073f4:	2301      	movs	r3, #1
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	e001      	b.n	80073fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d102      	bne.n	800740a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007404:	f000 fd2c 	bl	8007e60 <xTimerCreateTimerTask>
 8007408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d116      	bne.n	800743e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007424:	4b13      	ldr	r3, [pc, #76]	@ (8007474 <vTaskStartScheduler+0xc4>)
 8007426:	f04f 32ff 	mov.w	r2, #4294967295
 800742a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800742c:	4b12      	ldr	r3, [pc, #72]	@ (8007478 <vTaskStartScheduler+0xc8>)
 800742e:	2201      	movs	r2, #1
 8007430:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007432:	4b12      	ldr	r3, [pc, #72]	@ (800747c <vTaskStartScheduler+0xcc>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007438:	f001 f8fa 	bl	8008630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800743c:	e00f      	b.n	800745e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d10b      	bne.n	800745e <vTaskStartScheduler+0xae>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <vTaskStartScheduler+0xaa>
}
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	08018414 	.word	0x08018414
 800746c:	08007af1 	.word	0x08007af1
 8007470:	2000631c 	.word	0x2000631c
 8007474:	20006318 	.word	0x20006318
 8007478:	20006304 	.word	0x20006304
 800747c:	200062fc 	.word	0x200062fc

08007480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007484:	4b04      	ldr	r3, [pc, #16]	@ (8007498 <vTaskSuspendAll+0x18>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	4a03      	ldr	r2, [pc, #12]	@ (8007498 <vTaskSuspendAll+0x18>)
 800748c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20006320 	.word	0x20006320

0800749c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074aa:	4b42      	ldr	r3, [pc, #264]	@ (80075b4 <xTaskResumeAll+0x118>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <xTaskResumeAll+0x2e>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	603b      	str	r3, [r7, #0]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074ca:	f001 f955 	bl	8008778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074ce:	4b39      	ldr	r3, [pc, #228]	@ (80075b4 <xTaskResumeAll+0x118>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	4a37      	ldr	r2, [pc, #220]	@ (80075b4 <xTaskResumeAll+0x118>)
 80074d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d8:	4b36      	ldr	r3, [pc, #216]	@ (80075b4 <xTaskResumeAll+0x118>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d162      	bne.n	80075a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074e0:	4b35      	ldr	r3, [pc, #212]	@ (80075b8 <xTaskResumeAll+0x11c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d05e      	beq.n	80075a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074e8:	e02f      	b.n	800754a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ea:	4b34      	ldr	r3, [pc, #208]	@ (80075bc <xTaskResumeAll+0x120>)
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3318      	adds	r3, #24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff f85a 	bl	80065b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff f855 	bl	80065b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750a:	4b2d      	ldr	r3, [pc, #180]	@ (80075c0 <xTaskResumeAll+0x124>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d903      	bls.n	800751a <xTaskResumeAll+0x7e>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007516:	4a2a      	ldr	r2, [pc, #168]	@ (80075c0 <xTaskResumeAll+0x124>)
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4a27      	ldr	r2, [pc, #156]	@ (80075c4 <xTaskResumeAll+0x128>)
 8007528:	441a      	add	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f7fe ffe0 	bl	80064f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753a:	4b23      	ldr	r3, [pc, #140]	@ (80075c8 <xTaskResumeAll+0x12c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	429a      	cmp	r2, r3
 8007542:	d302      	bcc.n	800754a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007544:	4b21      	ldr	r3, [pc, #132]	@ (80075cc <xTaskResumeAll+0x130>)
 8007546:	2201      	movs	r2, #1
 8007548:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800754a:	4b1c      	ldr	r3, [pc, #112]	@ (80075bc <xTaskResumeAll+0x120>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1cb      	bne.n	80074ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007558:	f000 fb80 	bl	8007c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800755c:	4b1c      	ldr	r3, [pc, #112]	@ (80075d0 <xTaskResumeAll+0x134>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d010      	beq.n	800758a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007568:	f000 f846 	bl	80075f8 <xTaskIncrementTick>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007572:	4b16      	ldr	r3, [pc, #88]	@ (80075cc <xTaskResumeAll+0x130>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3b01      	subs	r3, #1
 800757c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f1      	bne.n	8007568 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007584:	4b12      	ldr	r3, [pc, #72]	@ (80075d0 <xTaskResumeAll+0x134>)
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800758a:	4b10      	ldr	r3, [pc, #64]	@ (80075cc <xTaskResumeAll+0x130>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007592:	2301      	movs	r3, #1
 8007594:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <xTaskResumeAll+0x138>)
 8007598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075a6:	f001 f919 	bl	80087dc <vPortExitCritical>

	return xAlreadyYielded;
 80075aa:	68bb      	ldr	r3, [r7, #8]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20006320 	.word	0x20006320
 80075b8:	200062f8 	.word	0x200062f8
 80075bc:	200062b8 	.word	0x200062b8
 80075c0:	20006300 	.word	0x20006300
 80075c4:	20005e28 	.word	0x20005e28
 80075c8:	20005e24 	.word	0x20005e24
 80075cc:	2000630c 	.word	0x2000630c
 80075d0:	20006308 	.word	0x20006308
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075de:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <xTaskGetTickCount+0x1c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075e4:	687b      	ldr	r3, [r7, #4]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	200062fc 	.word	0x200062fc

080075f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007602:	4b4f      	ldr	r3, [pc, #316]	@ (8007740 <xTaskIncrementTick+0x148>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f040 8090 	bne.w	800772c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800760c:	4b4d      	ldr	r3, [pc, #308]	@ (8007744 <xTaskIncrementTick+0x14c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007614:	4a4b      	ldr	r2, [pc, #300]	@ (8007744 <xTaskIncrementTick+0x14c>)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d121      	bne.n	8007664 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007620:	4b49      	ldr	r3, [pc, #292]	@ (8007748 <xTaskIncrementTick+0x150>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <xTaskIncrementTick+0x4a>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	603b      	str	r3, [r7, #0]
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <xTaskIncrementTick+0x46>
 8007642:	4b41      	ldr	r3, [pc, #260]	@ (8007748 <xTaskIncrementTick+0x150>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	4b40      	ldr	r3, [pc, #256]	@ (800774c <xTaskIncrementTick+0x154>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a3e      	ldr	r2, [pc, #248]	@ (8007748 <xTaskIncrementTick+0x150>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4a3e      	ldr	r2, [pc, #248]	@ (800774c <xTaskIncrementTick+0x154>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	4b3e      	ldr	r3, [pc, #248]	@ (8007750 <xTaskIncrementTick+0x158>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	4a3c      	ldr	r2, [pc, #240]	@ (8007750 <xTaskIncrementTick+0x158>)
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	f000 fafc 	bl	8007c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007664:	4b3b      	ldr	r3, [pc, #236]	@ (8007754 <xTaskIncrementTick+0x15c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	429a      	cmp	r2, r3
 800766c:	d349      	bcc.n	8007702 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800766e:	4b36      	ldr	r3, [pc, #216]	@ (8007748 <xTaskIncrementTick+0x150>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007678:	4b36      	ldr	r3, [pc, #216]	@ (8007754 <xTaskIncrementTick+0x15c>)
 800767a:	f04f 32ff 	mov.w	r2, #4294967295
 800767e:	601a      	str	r2, [r3, #0]
					break;
 8007680:	e03f      	b.n	8007702 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007682:	4b31      	ldr	r3, [pc, #196]	@ (8007748 <xTaskIncrementTick+0x150>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d203      	bcs.n	80076a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800769a:	4a2e      	ldr	r2, [pc, #184]	@ (8007754 <xTaskIncrementTick+0x15c>)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076a0:	e02f      	b.n	8007702 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe ff82 	bl	80065b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	3318      	adds	r3, #24
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe ff79 	bl	80065b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4b25      	ldr	r3, [pc, #148]	@ (8007758 <xTaskIncrementTick+0x160>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d903      	bls.n	80076d2 <xTaskIncrementTick+0xda>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ce:	4a22      	ldr	r2, [pc, #136]	@ (8007758 <xTaskIncrementTick+0x160>)
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4a1f      	ldr	r2, [pc, #124]	@ (800775c <xTaskIncrementTick+0x164>)
 80076e0:	441a      	add	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7fe ff04 	bl	80064f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007760 <xTaskIncrementTick+0x168>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d3b8      	bcc.n	800766e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007700:	e7b5      	b.n	800766e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007702:	4b17      	ldr	r3, [pc, #92]	@ (8007760 <xTaskIncrementTick+0x168>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007708:	4914      	ldr	r1, [pc, #80]	@ (800775c <xTaskIncrementTick+0x164>)
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d901      	bls.n	800771e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800771a:	2301      	movs	r3, #1
 800771c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800771e:	4b11      	ldr	r3, [pc, #68]	@ (8007764 <xTaskIncrementTick+0x16c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007726:	2301      	movs	r3, #1
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	e004      	b.n	8007736 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800772c:	4b0e      	ldr	r3, [pc, #56]	@ (8007768 <xTaskIncrementTick+0x170>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	4a0d      	ldr	r2, [pc, #52]	@ (8007768 <xTaskIncrementTick+0x170>)
 8007734:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007736:	697b      	ldr	r3, [r7, #20]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20006320 	.word	0x20006320
 8007744:	200062fc 	.word	0x200062fc
 8007748:	200062b0 	.word	0x200062b0
 800774c:	200062b4 	.word	0x200062b4
 8007750:	20006310 	.word	0x20006310
 8007754:	20006318 	.word	0x20006318
 8007758:	20006300 	.word	0x20006300
 800775c:	20005e28 	.word	0x20005e28
 8007760:	20005e24 	.word	0x20005e24
 8007764:	2000630c 	.word	0x2000630c
 8007768:	20006308 	.word	0x20006308

0800776c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007772:	4b28      	ldr	r3, [pc, #160]	@ (8007814 <vTaskSwitchContext+0xa8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800777a:	4b27      	ldr	r3, [pc, #156]	@ (8007818 <vTaskSwitchContext+0xac>)
 800777c:	2201      	movs	r2, #1
 800777e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007780:	e042      	b.n	8007808 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007782:	4b25      	ldr	r3, [pc, #148]	@ (8007818 <vTaskSwitchContext+0xac>)
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007788:	4b24      	ldr	r3, [pc, #144]	@ (800781c <vTaskSwitchContext+0xb0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e011      	b.n	80077b4 <vTaskSwitchContext+0x48>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10b      	bne.n	80077ae <vTaskSwitchContext+0x42>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	607b      	str	r3, [r7, #4]
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	e7fd      	b.n	80077aa <vTaskSwitchContext+0x3e>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	491a      	ldr	r1, [pc, #104]	@ (8007820 <vTaskSwitchContext+0xb4>)
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0e3      	beq.n	8007790 <vTaskSwitchContext+0x24>
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4a13      	ldr	r2, [pc, #76]	@ (8007820 <vTaskSwitchContext+0xb4>)
 80077d4:	4413      	add	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3308      	adds	r3, #8
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d104      	bne.n	80077f8 <vTaskSwitchContext+0x8c>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	605a      	str	r2, [r3, #4]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	4a09      	ldr	r2, [pc, #36]	@ (8007824 <vTaskSwitchContext+0xb8>)
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	4a06      	ldr	r2, [pc, #24]	@ (800781c <vTaskSwitchContext+0xb0>)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6013      	str	r3, [r2, #0]
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	20006320 	.word	0x20006320
 8007818:	2000630c 	.word	0x2000630c
 800781c:	20006300 	.word	0x20006300
 8007820:	20005e28 	.word	0x20005e28
 8007824:	20005e24 	.word	0x20005e24

08007828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10b      	bne.n	8007850 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	60fb      	str	r3, [r7, #12]
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007850:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <vTaskPlaceOnEventList+0x48>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3318      	adds	r3, #24
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fe fe70 	bl	800653e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800785e:	2101      	movs	r1, #1
 8007860:	6838      	ldr	r0, [r7, #0]
 8007862:	f000 faa9 	bl	8007db8 <prvAddCurrentTaskToDelayedList>
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20005e24 	.word	0x20005e24

08007874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	617b      	str	r3, [r7, #20]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800789e:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3318      	adds	r3, #24
 80078a4:	4619      	mov	r1, r3
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7fe fe25 	bl	80064f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078b2:	f04f 33ff 	mov.w	r3, #4294967295
 80078b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	68b8      	ldr	r0, [r7, #8]
 80078bc:	f000 fa7c 	bl	8007db8 <prvAddCurrentTaskToDelayedList>
	}
 80078c0:	bf00      	nop
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20005e24 	.word	0x20005e24

080078cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	60fb      	str	r3, [r7, #12]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	3318      	adds	r3, #24
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fe56 	bl	80065b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007904:	4b1d      	ldr	r3, [pc, #116]	@ (800797c <xTaskRemoveFromEventList+0xb0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11d      	bne.n	8007948 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fe4d 	bl	80065b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791a:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <xTaskRemoveFromEventList+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d903      	bls.n	800792a <xTaskRemoveFromEventList+0x5e>
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007926:	4a16      	ldr	r2, [pc, #88]	@ (8007980 <xTaskRemoveFromEventList+0xb4>)
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a13      	ldr	r2, [pc, #76]	@ (8007984 <xTaskRemoveFromEventList+0xb8>)
 8007938:	441a      	add	r2, r3
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7fe fdd8 	bl	80064f6 <vListInsertEnd>
 8007946:	e005      	b.n	8007954 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3318      	adds	r3, #24
 800794c:	4619      	mov	r1, r3
 800794e:	480e      	ldr	r0, [pc, #56]	@ (8007988 <xTaskRemoveFromEventList+0xbc>)
 8007950:	f7fe fdd1 	bl	80064f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007958:	4b0c      	ldr	r3, [pc, #48]	@ (800798c <xTaskRemoveFromEventList+0xc0>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	429a      	cmp	r2, r3
 8007960:	d905      	bls.n	800796e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007962:	2301      	movs	r3, #1
 8007964:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007966:	4b0a      	ldr	r3, [pc, #40]	@ (8007990 <xTaskRemoveFromEventList+0xc4>)
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	e001      	b.n	8007972 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007972:	697b      	ldr	r3, [r7, #20]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20006320 	.word	0x20006320
 8007980:	20006300 	.word	0x20006300
 8007984:	20005e28 	.word	0x20005e28
 8007988:	200062b8 	.word	0x200062b8
 800798c:	20005e24 	.word	0x20005e24
 8007990:	2000630c 	.word	0x2000630c

08007994 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <vTaskSetTimeOutState+0x26>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	60fb      	str	r3, [r7, #12]
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
 80079b8:	e7fd      	b.n	80079b6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80079ba:	f000 fedd 	bl	8008778 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079be:	4b07      	ldr	r3, [pc, #28]	@ (80079dc <vTaskSetTimeOutState+0x48>)
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80079c6:	4b06      	ldr	r3, [pc, #24]	@ (80079e0 <vTaskSetTimeOutState+0x4c>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80079ce:	f000 ff05 	bl	80087dc <vPortExitCritical>
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20006310 	.word	0x20006310
 80079e0:	200062fc 	.word	0x200062fc

080079e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079ec:	4b06      	ldr	r3, [pc, #24]	@ (8007a08 <vTaskInternalSetTimeOutState+0x24>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079f4:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <vTaskInternalSetTimeOutState+0x28>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	605a      	str	r2, [r3, #4]
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	20006310 	.word	0x20006310
 8007a0c:	200062fc 	.word	0x200062fc

08007a10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10b      	bne.n	8007a38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	613b      	str	r3, [r7, #16]
}
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	e7fd      	b.n	8007a34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a56:	f000 fe8f 	bl	8008778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad0 <xTaskCheckForTimeOut+0xc0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d102      	bne.n	8007a7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61fb      	str	r3, [r7, #28]
 8007a78:	e023      	b.n	8007ac2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ad4 <xTaskCheckForTimeOut+0xc4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d007      	beq.n	8007a96 <xTaskCheckForTimeOut+0x86>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d302      	bcc.n	8007a96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a90:	2301      	movs	r3, #1
 8007a92:	61fb      	str	r3, [r7, #28]
 8007a94:	e015      	b.n	8007ac2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d20b      	bcs.n	8007ab8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	1ad2      	subs	r2, r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ff99 	bl	80079e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	e004      	b.n	8007ac2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ac2:	f000 fe8b 	bl	80087dc <vPortExitCritical>

	return xReturn;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	200062fc 	.word	0x200062fc
 8007ad4:	20006310 	.word	0x20006310

08007ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007adc:	4b03      	ldr	r3, [pc, #12]	@ (8007aec <vTaskMissedYield+0x14>)
 8007ade:	2201      	movs	r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
}
 8007ae2:	bf00      	nop
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	2000630c 	.word	0x2000630c

08007af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007af8:	f000 f852 	bl	8007ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <prvIdleTask+0x28>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d9f9      	bls.n	8007af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b04:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <prvIdleTask+0x2c>)
 8007b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b14:	e7f0      	b.n	8007af8 <prvIdleTask+0x8>
 8007b16:	bf00      	nop
 8007b18:	20005e28 	.word	0x20005e28
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
 8007b2a:	e00c      	b.n	8007b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4a12      	ldr	r2, [pc, #72]	@ (8007b80 <prvInitialiseTaskLists+0x60>)
 8007b38:	4413      	add	r3, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fcae 	bl	800649c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3301      	adds	r3, #1
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b37      	cmp	r3, #55	@ 0x37
 8007b4a:	d9ef      	bls.n	8007b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b4c:	480d      	ldr	r0, [pc, #52]	@ (8007b84 <prvInitialiseTaskLists+0x64>)
 8007b4e:	f7fe fca5 	bl	800649c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b52:	480d      	ldr	r0, [pc, #52]	@ (8007b88 <prvInitialiseTaskLists+0x68>)
 8007b54:	f7fe fca2 	bl	800649c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b58:	480c      	ldr	r0, [pc, #48]	@ (8007b8c <prvInitialiseTaskLists+0x6c>)
 8007b5a:	f7fe fc9f 	bl	800649c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b5e:	480c      	ldr	r0, [pc, #48]	@ (8007b90 <prvInitialiseTaskLists+0x70>)
 8007b60:	f7fe fc9c 	bl	800649c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b64:	480b      	ldr	r0, [pc, #44]	@ (8007b94 <prvInitialiseTaskLists+0x74>)
 8007b66:	f7fe fc99 	bl	800649c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <prvInitialiseTaskLists+0x78>)
 8007b6c:	4a05      	ldr	r2, [pc, #20]	@ (8007b84 <prvInitialiseTaskLists+0x64>)
 8007b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b70:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <prvInitialiseTaskLists+0x7c>)
 8007b72:	4a05      	ldr	r2, [pc, #20]	@ (8007b88 <prvInitialiseTaskLists+0x68>)
 8007b74:	601a      	str	r2, [r3, #0]
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20005e28 	.word	0x20005e28
 8007b84:	20006288 	.word	0x20006288
 8007b88:	2000629c 	.word	0x2000629c
 8007b8c:	200062b8 	.word	0x200062b8
 8007b90:	200062cc 	.word	0x200062cc
 8007b94:	200062e4 	.word	0x200062e4
 8007b98:	200062b0 	.word	0x200062b0
 8007b9c:	200062b4 	.word	0x200062b4

08007ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ba6:	e019      	b.n	8007bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ba8:	f000 fde6 	bl	8008778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bac:	4b10      	ldr	r3, [pc, #64]	@ (8007bf0 <prvCheckTasksWaitingTermination+0x50>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fcf9 	bl	80065b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x54>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x54>)
 8007bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <prvCheckTasksWaitingTermination+0x58>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf8 <prvCheckTasksWaitingTermination+0x58>)
 8007bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bd2:	f000 fe03 	bl	80087dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f810 	bl	8007bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bdc:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <prvCheckTasksWaitingTermination+0x58>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e1      	bne.n	8007ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	200062cc 	.word	0x200062cc
 8007bf4:	200062f8 	.word	0x200062f8
 8007bf8:	200062e0 	.word	0x200062e0

08007bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d108      	bne.n	8007c20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 ffa0 	bl	8008b58 <vPortFree>
				vPortFree( pxTCB );
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 ff9d 	bl	8008b58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c1e:	e019      	b.n	8007c54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d103      	bne.n	8007c32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 ff94 	bl	8008b58 <vPortFree>
	}
 8007c30:	e010      	b.n	8007c54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d00b      	beq.n	8007c54 <prvDeleteTCB+0x58>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	bf00      	nop
 8007c52:	e7fd      	b.n	8007c50 <prvDeleteTCB+0x54>
	}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c62:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <prvResetNextTaskUnblockTime+0x38>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <prvResetNextTaskUnblockTime+0x3c>)
 8007c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c74:	e008      	b.n	8007c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c76:	4b07      	ldr	r3, [pc, #28]	@ (8007c94 <prvResetNextTaskUnblockTime+0x38>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	4a04      	ldr	r2, [pc, #16]	@ (8007c98 <prvResetNextTaskUnblockTime+0x3c>)
 8007c86:	6013      	str	r3, [r2, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	200062b0 	.word	0x200062b0
 8007c98:	20006318 	.word	0x20006318

08007c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd0 <xTaskGetSchedulerState+0x34>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007caa:	2301      	movs	r3, #1
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	e008      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cb0:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <xTaskGetSchedulerState+0x38>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	e001      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cc2:	687b      	ldr	r3, [r7, #4]
	}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	20006304 	.word	0x20006304
 8007cd4:	20006320 	.word	0x20006320

08007cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d058      	beq.n	8007da0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cee:	4b2f      	ldr	r3, [pc, #188]	@ (8007dac <xTaskPriorityDisinherit+0xd4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d00b      	beq.n	8007d10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60fb      	str	r3, [r7, #12]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10b      	bne.n	8007d30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	60bb      	str	r3, [r7, #8]
}
 8007d2a:	bf00      	nop
 8007d2c:	bf00      	nop
 8007d2e:	e7fd      	b.n	8007d2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d34:	1e5a      	subs	r2, r3, #1
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d02c      	beq.n	8007da0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d128      	bne.n	8007da0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe fc2c 	bl	80065b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d70:	4b0f      	ldr	r3, [pc, #60]	@ (8007db0 <xTaskPriorityDisinherit+0xd8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d903      	bls.n	8007d80 <xTaskPriorityDisinherit+0xa8>
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8007db0 <xTaskPriorityDisinherit+0xd8>)
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4a09      	ldr	r2, [pc, #36]	@ (8007db4 <xTaskPriorityDisinherit+0xdc>)
 8007d8e:	441a      	add	r2, r3
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7fe fbad 	bl	80064f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007da0:	697b      	ldr	r3, [r7, #20]
	}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20005e24 	.word	0x20005e24
 8007db0:	20006300 	.word	0x20006300
 8007db4:	20005e28 	.word	0x20005e28

08007db8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dc2:	4b21      	ldr	r3, [pc, #132]	@ (8007e48 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc8:	4b20      	ldr	r3, [pc, #128]	@ (8007e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fbee 	bl	80065b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d10a      	bne.n	8007df2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007de2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4819      	ldr	r0, [pc, #100]	@ (8007e50 <prvAddCurrentTaskToDelayedList+0x98>)
 8007dec:	f7fe fb83 	bl	80064f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007df0:	e026      	b.n	8007e40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4413      	add	r3, r2
 8007df8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dfa:	4b14      	ldr	r3, [pc, #80]	@ (8007e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d209      	bcs.n	8007e1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e0a:	4b12      	ldr	r3, [pc, #72]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f7fe fb91 	bl	800653e <vListInsert>
}
 8007e1c:	e010      	b.n	8007e40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4b0a      	ldr	r3, [pc, #40]	@ (8007e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	f7fe fb87 	bl	800653e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e30:	4b0a      	ldr	r3, [pc, #40]	@ (8007e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d202      	bcs.n	8007e40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e3a:	4a08      	ldr	r2, [pc, #32]	@ (8007e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	6013      	str	r3, [r2, #0]
}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	200062fc 	.word	0x200062fc
 8007e4c:	20005e24 	.word	0x20005e24
 8007e50:	200062e4 	.word	0x200062e4
 8007e54:	200062b4 	.word	0x200062b4
 8007e58:	200062b0 	.word	0x200062b0
 8007e5c:	20006318 	.word	0x20006318

08007e60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	@ 0x28
 8007e64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e6a:	f000 fb13 	bl	8008494 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee4 <xTimerCreateTimerTask+0x84>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d021      	beq.n	8007eba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e7e:	1d3a      	adds	r2, r7, #4
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	f107 030c 	add.w	r3, r7, #12
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe faed 	bl	8006468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	9202      	str	r2, [sp, #8]
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	2302      	movs	r3, #2
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	460a      	mov	r2, r1
 8007ea0:	4911      	ldr	r1, [pc, #68]	@ (8007ee8 <xTimerCreateTimerTask+0x88>)
 8007ea2:	4812      	ldr	r0, [pc, #72]	@ (8007eec <xTimerCreateTimerTask+0x8c>)
 8007ea4:	f7ff f8a8 	bl	8006ff8 <xTaskCreateStatic>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4a11      	ldr	r2, [pc, #68]	@ (8007ef0 <xTimerCreateTimerTask+0x90>)
 8007eac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007eae:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <xTimerCreateTimerTask+0x90>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10b      	bne.n	8007ed8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	613b      	str	r3, [r7, #16]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ed8:	697b      	ldr	r3, [r7, #20]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20006354 	.word	0x20006354
 8007ee8:	0801841c 	.word	0x0801841c
 8007eec:	0800802d 	.word	0x0800802d
 8007ef0:	20006358 	.word	0x20006358

08007ef4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	@ 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10b      	bne.n	8007f24 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	623b      	str	r3, [r7, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f24:	4b19      	ldr	r3, [pc, #100]	@ (8007f8c <xTimerGenericCommand+0x98>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d02a      	beq.n	8007f82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b05      	cmp	r3, #5
 8007f3c:	dc18      	bgt.n	8007f70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f3e:	f7ff fead 	bl	8007c9c <xTaskGetSchedulerState>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d109      	bne.n	8007f5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f48:	4b10      	ldr	r3, [pc, #64]	@ (8007f8c <xTimerGenericCommand+0x98>)
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	f107 0110 	add.w	r1, r7, #16
 8007f50:	2300      	movs	r3, #0
 8007f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f54:	f7fe fc60 	bl	8006818 <xQueueGenericSend>
 8007f58:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f5a:	e012      	b.n	8007f82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f8c <xTimerGenericCommand+0x98>)
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	f107 0110 	add.w	r1, r7, #16
 8007f64:	2300      	movs	r3, #0
 8007f66:	2200      	movs	r2, #0
 8007f68:	f7fe fc56 	bl	8006818 <xQueueGenericSend>
 8007f6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f6e:	e008      	b.n	8007f82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f70:	4b06      	ldr	r3, [pc, #24]	@ (8007f8c <xTimerGenericCommand+0x98>)
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	f107 0110 	add.w	r1, r7, #16
 8007f78:	2300      	movs	r3, #0
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	f7fe fd4e 	bl	8006a1c <xQueueGenericSendFromISR>
 8007f80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3728      	adds	r7, #40	@ 0x28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20006354 	.word	0x20006354

08007f90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9a:	4b23      	ldr	r3, [pc, #140]	@ (8008028 <prvProcessExpiredTimer+0x98>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fb01 	bl	80065b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d023      	beq.n	8008004 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	18d1      	adds	r1, r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	6978      	ldr	r0, [r7, #20]
 8007fca:	f000 f8d5 	bl	8008178 <prvInsertTimerInActiveList>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d020      	beq.n	8008016 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6978      	ldr	r0, [r7, #20]
 8007fe0:	f7ff ff88 	bl	8007ef4 <xTimerGenericCommand>
 8007fe4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d114      	bne.n	8008016 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	60fb      	str	r3, [r7, #12]
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800800a:	f023 0301 	bic.w	r3, r3, #1
 800800e:	b2da      	uxtb	r2, r3
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	6978      	ldr	r0, [r7, #20]
 800801c:	4798      	blx	r3
}
 800801e:	bf00      	nop
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	2000634c 	.word	0x2000634c

0800802c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f859 	bl	80080f0 <prvGetNextExpireTime>
 800803e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4619      	mov	r1, r3
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f805 	bl	8008054 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800804a:	f000 f8d7 	bl	80081fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800804e:	bf00      	nop
 8008050:	e7f0      	b.n	8008034 <prvTimerTask+0x8>
	...

08008054 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800805e:	f7ff fa0f 	bl	8007480 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008062:	f107 0308 	add.w	r3, r7, #8
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f866 	bl	8008138 <prvSampleTimeNow>
 800806c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d130      	bne.n	80080d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <prvProcessTimerOrBlockTask+0x3c>
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	429a      	cmp	r2, r3
 8008080:	d806      	bhi.n	8008090 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008082:	f7ff fa0b 	bl	800749c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff ff81 	bl	8007f90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800808e:	e024      	b.n	80080da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008096:	4b13      	ldr	r3, [pc, #76]	@ (80080e4 <prvProcessTimerOrBlockTask+0x90>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <prvProcessTimerOrBlockTask+0x50>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e000      	b.n	80080a6 <prvProcessTimerOrBlockTask+0x52>
 80080a4:	2300      	movs	r3, #0
 80080a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080a8:	4b0f      	ldr	r3, [pc, #60]	@ (80080e8 <prvProcessTimerOrBlockTask+0x94>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	4619      	mov	r1, r3
 80080b6:	f7fe ff6b 	bl	8006f90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080ba:	f7ff f9ef 	bl	800749c <xTaskResumeAll>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080c4:	4b09      	ldr	r3, [pc, #36]	@ (80080ec <prvProcessTimerOrBlockTask+0x98>)
 80080c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	f3bf 8f6f 	isb	sy
}
 80080d4:	e001      	b.n	80080da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080d6:	f7ff f9e1 	bl	800749c <xTaskResumeAll>
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20006350 	.word	0x20006350
 80080e8:	20006354 	.word	0x20006354
 80080ec:	e000ed04 	.word	0xe000ed04

080080f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008134 <prvGetNextExpireTime+0x44>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <prvGetNextExpireTime+0x16>
 8008102:	2201      	movs	r2, #1
 8008104:	e000      	b.n	8008108 <prvGetNextExpireTime+0x18>
 8008106:	2200      	movs	r2, #0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d105      	bne.n	8008120 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008114:	4b07      	ldr	r3, [pc, #28]	@ (8008134 <prvGetNextExpireTime+0x44>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e001      	b.n	8008124 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008124:	68fb      	ldr	r3, [r7, #12]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000634c 	.word	0x2000634c

08008138 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008140:	f7ff fa4a 	bl	80075d8 <xTaskGetTickCount>
 8008144:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008146:	4b0b      	ldr	r3, [pc, #44]	@ (8008174 <prvSampleTimeNow+0x3c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	429a      	cmp	r2, r3
 800814e:	d205      	bcs.n	800815c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008150:	f000 f93a 	bl	80083c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e002      	b.n	8008162 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008162:	4a04      	ldr	r2, [pc, #16]	@ (8008174 <prvSampleTimeNow+0x3c>)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008168:	68fb      	ldr	r3, [r7, #12]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	2000635c 	.word	0x2000635c

08008178 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d812      	bhi.n	80081c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d302      	bcc.n	80081b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e01b      	b.n	80081ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081b2:	4b10      	ldr	r3, [pc, #64]	@ (80081f4 <prvInsertTimerInActiveList+0x7c>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f7fe f9be 	bl	800653e <vListInsert>
 80081c2:	e012      	b.n	80081ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d206      	bcs.n	80081da <prvInsertTimerInActiveList+0x62>
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d302      	bcc.n	80081da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081d4:	2301      	movs	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e007      	b.n	80081ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081da:	4b07      	ldr	r3, [pc, #28]	@ (80081f8 <prvInsertTimerInActiveList+0x80>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f7fe f9aa 	bl	800653e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081ea:	697b      	ldr	r3, [r7, #20]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20006350 	.word	0x20006350
 80081f8:	2000634c 	.word	0x2000634c

080081fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08e      	sub	sp, #56	@ 0x38
 8008200:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008202:	e0ce      	b.n	80083a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	da19      	bge.n	800823e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800820a:	1d3b      	adds	r3, r7, #4
 800820c:	3304      	adds	r3, #4
 800820e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10b      	bne.n	800822e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	61fb      	str	r3, [r7, #28]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008234:	6850      	ldr	r0, [r2, #4]
 8008236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008238:	6892      	ldr	r2, [r2, #8]
 800823a:	4611      	mov	r1, r2
 800823c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	f2c0 80ae 	blt.w	80083a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d004      	beq.n	800825c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008254:	3304      	adds	r3, #4
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe f9aa 	bl	80065b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800825c:	463b      	mov	r3, r7
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff ff6a 	bl	8008138 <prvSampleTimeNow>
 8008264:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b09      	cmp	r3, #9
 800826a:	f200 8097 	bhi.w	800839c <prvProcessReceivedCommands+0x1a0>
 800826e:	a201      	add	r2, pc, #4	@ (adr r2, 8008274 <prvProcessReceivedCommands+0x78>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	0800829d 	.word	0x0800829d
 8008278:	0800829d 	.word	0x0800829d
 800827c:	0800829d 	.word	0x0800829d
 8008280:	08008313 	.word	0x08008313
 8008284:	08008327 	.word	0x08008327
 8008288:	08008373 	.word	0x08008373
 800828c:	0800829d 	.word	0x0800829d
 8008290:	0800829d 	.word	0x0800829d
 8008294:	08008313 	.word	0x08008313
 8008298:	08008327 	.word	0x08008327
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800829c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	18d1      	adds	r1, r2, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082bc:	f7ff ff5c 	bl	8008178 <prvInsertTimerInActiveList>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d06c      	beq.n	80083a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d061      	beq.n	80083a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	441a      	add	r2, r3
 80082e4:	2300      	movs	r3, #0
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	2300      	movs	r3, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ee:	f7ff fe01 	bl	8007ef4 <xTimerGenericCommand>
 80082f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d152      	bne.n	80083a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	61bb      	str	r3, [r7, #24]
}
 800830c:	bf00      	nop
 800830e:	bf00      	nop
 8008310:	e7fd      	b.n	800830e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	b2da      	uxtb	r2, r3
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008324:	e03d      	b.n	80083a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	b2da      	uxtb	r2, r3
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10b      	bne.n	800835e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	617b      	str	r3, [r7, #20]
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	e7fd      	b.n	800835a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	18d1      	adds	r1, r2, r3
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800836a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800836c:	f7ff ff04 	bl	8008178 <prvInsertTimerInActiveList>
					break;
 8008370:	e017      	b.n	80083a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d103      	bne.n	8008388 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008382:	f000 fbe9 	bl	8008b58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008386:	e00c      	b.n	80083a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	b2da      	uxtb	r2, r3
 8008394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800839a:	e002      	b.n	80083a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800839c:	bf00      	nop
 800839e:	e000      	b.n	80083a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80083a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083a2:	4b08      	ldr	r3, [pc, #32]	@ (80083c4 <prvProcessReceivedCommands+0x1c8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	1d39      	adds	r1, r7, #4
 80083a8:	2200      	movs	r2, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fbd4 	bl	8006b58 <xQueueReceive>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f47f af26 	bne.w	8008204 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	3730      	adds	r7, #48	@ 0x30
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20006354 	.word	0x20006354

080083c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b088      	sub	sp, #32
 80083cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ce:	e049      	b.n	8008464 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083d0:	4b2e      	ldr	r3, [pc, #184]	@ (800848c <prvSwitchTimerLists+0xc4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083da:	4b2c      	ldr	r3, [pc, #176]	@ (800848c <prvSwitchTimerLists+0xc4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe f8e1 	bl	80065b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	d02f      	beq.n	8008464 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4413      	add	r3, r2
 800840c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	429a      	cmp	r2, r3
 8008414:	d90e      	bls.n	8008434 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008422:	4b1a      	ldr	r3, [pc, #104]	@ (800848c <prvSwitchTimerLists+0xc4>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3304      	adds	r3, #4
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f7fe f886 	bl	800653e <vListInsert>
 8008432:	e017      	b.n	8008464 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008434:	2300      	movs	r3, #0
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	2300      	movs	r3, #0
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	2100      	movs	r1, #0
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff fd58 	bl	8007ef4 <xTimerGenericCommand>
 8008444:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10b      	bne.n	8008464 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	603b      	str	r3, [r7, #0]
}
 800845e:	bf00      	nop
 8008460:	bf00      	nop
 8008462:	e7fd      	b.n	8008460 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008464:	4b09      	ldr	r3, [pc, #36]	@ (800848c <prvSwitchTimerLists+0xc4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1b0      	bne.n	80083d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800846e:	4b07      	ldr	r3, [pc, #28]	@ (800848c <prvSwitchTimerLists+0xc4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008474:	4b06      	ldr	r3, [pc, #24]	@ (8008490 <prvSwitchTimerLists+0xc8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a04      	ldr	r2, [pc, #16]	@ (800848c <prvSwitchTimerLists+0xc4>)
 800847a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800847c:	4a04      	ldr	r2, [pc, #16]	@ (8008490 <prvSwitchTimerLists+0xc8>)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	6013      	str	r3, [r2, #0]
}
 8008482:	bf00      	nop
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	2000634c 	.word	0x2000634c
 8008490:	20006350 	.word	0x20006350

08008494 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800849a:	f000 f96d 	bl	8008778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800849e:	4b15      	ldr	r3, [pc, #84]	@ (80084f4 <prvCheckForValidListAndQueue+0x60>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d120      	bne.n	80084e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084a6:	4814      	ldr	r0, [pc, #80]	@ (80084f8 <prvCheckForValidListAndQueue+0x64>)
 80084a8:	f7fd fff8 	bl	800649c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084ac:	4813      	ldr	r0, [pc, #76]	@ (80084fc <prvCheckForValidListAndQueue+0x68>)
 80084ae:	f7fd fff5 	bl	800649c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084b2:	4b13      	ldr	r3, [pc, #76]	@ (8008500 <prvCheckForValidListAndQueue+0x6c>)
 80084b4:	4a10      	ldr	r2, [pc, #64]	@ (80084f8 <prvCheckForValidListAndQueue+0x64>)
 80084b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084b8:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <prvCheckForValidListAndQueue+0x70>)
 80084ba:	4a10      	ldr	r2, [pc, #64]	@ (80084fc <prvCheckForValidListAndQueue+0x68>)
 80084bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084be:	2300      	movs	r3, #0
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	4b11      	ldr	r3, [pc, #68]	@ (8008508 <prvCheckForValidListAndQueue+0x74>)
 80084c4:	4a11      	ldr	r2, [pc, #68]	@ (800850c <prvCheckForValidListAndQueue+0x78>)
 80084c6:	2110      	movs	r1, #16
 80084c8:	200a      	movs	r0, #10
 80084ca:	f7fe f905 	bl	80066d8 <xQueueGenericCreateStatic>
 80084ce:	4603      	mov	r3, r0
 80084d0:	4a08      	ldr	r2, [pc, #32]	@ (80084f4 <prvCheckForValidListAndQueue+0x60>)
 80084d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084d4:	4b07      	ldr	r3, [pc, #28]	@ (80084f4 <prvCheckForValidListAndQueue+0x60>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084dc:	4b05      	ldr	r3, [pc, #20]	@ (80084f4 <prvCheckForValidListAndQueue+0x60>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	490b      	ldr	r1, [pc, #44]	@ (8008510 <prvCheckForValidListAndQueue+0x7c>)
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fd2a 	bl	8006f3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084e8:	f000 f978 	bl	80087dc <vPortExitCritical>
}
 80084ec:	bf00      	nop
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20006354 	.word	0x20006354
 80084f8:	20006324 	.word	0x20006324
 80084fc:	20006338 	.word	0x20006338
 8008500:	2000634c 	.word	0x2000634c
 8008504:	20006350 	.word	0x20006350
 8008508:	20006400 	.word	0x20006400
 800850c:	20006360 	.word	0x20006360
 8008510:	08018424 	.word	0x08018424

08008514 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3b04      	subs	r3, #4
 8008524:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800852c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3b04      	subs	r3, #4
 8008532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f023 0201 	bic.w	r2, r3, #1
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3b04      	subs	r3, #4
 8008542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008544:	4a0c      	ldr	r2, [pc, #48]	@ (8008578 <pxPortInitialiseStack+0x64>)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3b14      	subs	r3, #20
 800854e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3b04      	subs	r3, #4
 800855a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f06f 0202 	mvn.w	r2, #2
 8008562:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3b20      	subs	r3, #32
 8008568:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800856a:	68fb      	ldr	r3, [r7, #12]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	0800857d 	.word	0x0800857d

0800857c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008586:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <prvTaskExitError+0x58>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d00b      	beq.n	80085a8 <prvTaskExitError+0x2c>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	60fb      	str	r3, [r7, #12]
}
 80085a2:	bf00      	nop
 80085a4:	bf00      	nop
 80085a6:	e7fd      	b.n	80085a4 <prvTaskExitError+0x28>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60bb      	str	r3, [r7, #8]
}
 80085ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085bc:	bf00      	nop
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0fc      	beq.n	80085be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000010 	.word	0x20000010
	...

080085e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085e0:	4b07      	ldr	r3, [pc, #28]	@ (8008600 <pxCurrentTCBConst2>)
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	6808      	ldr	r0, [r1, #0]
 80085e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	f380 8809 	msr	PSP, r0
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8811 	msr	BASEPRI, r0
 80085fa:	4770      	bx	lr
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst2>:
 8008600:	20005e24 	.word	0x20005e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008608:	4808      	ldr	r0, [pc, #32]	@ (800862c <prvPortStartFirstTask+0x24>)
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	6800      	ldr	r0, [r0, #0]
 800860e:	f380 8808 	msr	MSP, r0
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8814 	msr	CONTROL, r0
 800861a:	b662      	cpsie	i
 800861c:	b661      	cpsie	f
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	df00      	svc	0
 8008628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800862a:	bf00      	nop
 800862c:	e000ed08 	.word	0xe000ed08

08008630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008636:	4b47      	ldr	r3, [pc, #284]	@ (8008754 <xPortStartScheduler+0x124>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a47      	ldr	r2, [pc, #284]	@ (8008758 <xPortStartScheduler+0x128>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d10b      	bne.n	8008658 <xPortStartScheduler+0x28>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008658:	4b3e      	ldr	r3, [pc, #248]	@ (8008754 <xPortStartScheduler+0x124>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a3f      	ldr	r2, [pc, #252]	@ (800875c <xPortStartScheduler+0x12c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d10b      	bne.n	800867a <xPortStartScheduler+0x4a>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	613b      	str	r3, [r7, #16]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800867a:	4b39      	ldr	r3, [pc, #228]	@ (8008760 <xPortStartScheduler+0x130>)
 800867c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	22ff      	movs	r2, #255	@ 0xff
 800868a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800869c:	b2da      	uxtb	r2, r3
 800869e:	4b31      	ldr	r3, [pc, #196]	@ (8008764 <xPortStartScheduler+0x134>)
 80086a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086a2:	4b31      	ldr	r3, [pc, #196]	@ (8008768 <xPortStartScheduler+0x138>)
 80086a4:	2207      	movs	r2, #7
 80086a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086a8:	e009      	b.n	80086be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80086aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008768 <xPortStartScheduler+0x138>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008768 <xPortStartScheduler+0x138>)
 80086b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c6:	2b80      	cmp	r3, #128	@ 0x80
 80086c8:	d0ef      	beq.n	80086aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ca:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <xPortStartScheduler+0x138>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1c3 0307 	rsb	r3, r3, #7
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d00b      	beq.n	80086ee <xPortStartScheduler+0xbe>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60bb      	str	r3, [r7, #8]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008768 <xPortStartScheduler+0x138>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008768 <xPortStartScheduler+0x138>)
 80086f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008768 <xPortStartScheduler+0x138>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008700:	4a19      	ldr	r2, [pc, #100]	@ (8008768 <xPortStartScheduler+0x138>)
 8008702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800870c:	4b17      	ldr	r3, [pc, #92]	@ (800876c <xPortStartScheduler+0x13c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a16      	ldr	r2, [pc, #88]	@ (800876c <xPortStartScheduler+0x13c>)
 8008712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008718:	4b14      	ldr	r3, [pc, #80]	@ (800876c <xPortStartScheduler+0x13c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a13      	ldr	r2, [pc, #76]	@ (800876c <xPortStartScheduler+0x13c>)
 800871e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008724:	f000 f8da 	bl	80088dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008728:	4b11      	ldr	r3, [pc, #68]	@ (8008770 <xPortStartScheduler+0x140>)
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800872e:	f000 f8f9 	bl	8008924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008732:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <xPortStartScheduler+0x144>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a0f      	ldr	r2, [pc, #60]	@ (8008774 <xPortStartScheduler+0x144>)
 8008738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800873c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800873e:	f7ff ff63 	bl	8008608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008742:	f7ff f813 	bl	800776c <vTaskSwitchContext>
	prvTaskExitError();
 8008746:	f7ff ff19 	bl	800857c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	e000ed00 	.word	0xe000ed00
 8008758:	410fc271 	.word	0x410fc271
 800875c:	410fc270 	.word	0x410fc270
 8008760:	e000e400 	.word	0xe000e400
 8008764:	20006450 	.word	0x20006450
 8008768:	20006454 	.word	0x20006454
 800876c:	e000ed20 	.word	0xe000ed20
 8008770:	20000010 	.word	0x20000010
 8008774:	e000ef34 	.word	0xe000ef34

08008778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	607b      	str	r3, [r7, #4]
}
 8008790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008792:	4b10      	ldr	r3, [pc, #64]	@ (80087d4 <vPortEnterCritical+0x5c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	4a0e      	ldr	r2, [pc, #56]	@ (80087d4 <vPortEnterCritical+0x5c>)
 800879a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800879c:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <vPortEnterCritical+0x5c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d110      	bne.n	80087c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087a4:	4b0c      	ldr	r3, [pc, #48]	@ (80087d8 <vPortEnterCritical+0x60>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00b      	beq.n	80087c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	603b      	str	r3, [r7, #0]
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	e7fd      	b.n	80087c2 <vPortEnterCritical+0x4a>
	}
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20000010 	.word	0x20000010
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087e2:	4b12      	ldr	r3, [pc, #72]	@ (800882c <vPortExitCritical+0x50>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <vPortExitCritical+0x26>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	607b      	str	r3, [r7, #4]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008802:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <vPortExitCritical+0x50>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3b01      	subs	r3, #1
 8008808:	4a08      	ldr	r2, [pc, #32]	@ (800882c <vPortExitCritical+0x50>)
 800880a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800880c:	4b07      	ldr	r3, [pc, #28]	@ (800882c <vPortExitCritical+0x50>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <vPortExitCritical+0x44>
 8008814:	2300      	movs	r3, #0
 8008816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f383 8811 	msr	BASEPRI, r3
}
 800881e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	20000010 	.word	0x20000010

08008830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008830:	f3ef 8009 	mrs	r0, PSP
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	4b15      	ldr	r3, [pc, #84]	@ (8008890 <pxCurrentTCBConst>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	f01e 0f10 	tst.w	lr, #16
 8008840:	bf08      	it	eq
 8008842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	6010      	str	r0, [r2, #0]
 800884c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008854:	f380 8811 	msr	BASEPRI, r0
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f7fe ff84 	bl	800776c <vTaskSwitchContext>
 8008864:	f04f 0000 	mov.w	r0, #0
 8008868:	f380 8811 	msr	BASEPRI, r0
 800886c:	bc09      	pop	{r0, r3}
 800886e:	6819      	ldr	r1, [r3, #0]
 8008870:	6808      	ldr	r0, [r1, #0]
 8008872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008876:	f01e 0f10 	tst.w	lr, #16
 800887a:	bf08      	it	eq
 800887c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008880:	f380 8809 	msr	PSP, r0
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	f3af 8000 	nop.w

08008890 <pxCurrentTCBConst>:
 8008890:	20005e24 	.word	0x20005e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088b2:	f7fe fea1 	bl	80075f8 <xTaskIncrementTick>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088bc:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <xPortSysTickHandler+0x40>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	2300      	movs	r3, #0
 80088c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f383 8811 	msr	BASEPRI, r3
}
 80088ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <vPortSetupTimerInterrupt+0x34>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008914 <vPortSetupTimerInterrupt+0x38>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008918 <vPortSetupTimerInterrupt+0x3c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	@ (800891c <vPortSetupTimerInterrupt+0x40>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	099b      	lsrs	r3, r3, #6
 80088f8:	4a09      	ldr	r2, [pc, #36]	@ (8008920 <vPortSetupTimerInterrupt+0x44>)
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088fe:	4b04      	ldr	r3, [pc, #16]	@ (8008910 <vPortSetupTimerInterrupt+0x34>)
 8008900:	2207      	movs	r2, #7
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	e000e010 	.word	0xe000e010
 8008914:	e000e018 	.word	0xe000e018
 8008918:	20000004 	.word	0x20000004
 800891c:	10624dd3 	.word	0x10624dd3
 8008920:	e000e014 	.word	0xe000e014

08008924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008934 <vPortEnableVFP+0x10>
 8008928:	6801      	ldr	r1, [r0, #0]
 800892a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800892e:	6001      	str	r1, [r0, #0]
 8008930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008932:	bf00      	nop
 8008934:	e000ed88 	.word	0xe000ed88

08008938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800893e:	f3ef 8305 	mrs	r3, IPSR
 8008942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b0f      	cmp	r3, #15
 8008948:	d915      	bls.n	8008976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800894a:	4a18      	ldr	r2, [pc, #96]	@ (80089ac <vPortValidateInterruptPriority+0x74>)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008954:	4b16      	ldr	r3, [pc, #88]	@ (80089b0 <vPortValidateInterruptPriority+0x78>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	7afa      	ldrb	r2, [r7, #11]
 800895a:	429a      	cmp	r2, r3
 800895c:	d20b      	bcs.n	8008976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	607b      	str	r3, [r7, #4]
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008976:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <vPortValidateInterruptPriority+0x7c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800897e:	4b0e      	ldr	r3, [pc, #56]	@ (80089b8 <vPortValidateInterruptPriority+0x80>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d90b      	bls.n	800899e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	603b      	str	r3, [r7, #0]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vPortValidateInterruptPriority+0x62>
	}
 800899e:	bf00      	nop
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	e000e3f0 	.word	0xe000e3f0
 80089b0:	20006450 	.word	0x20006450
 80089b4:	e000ed0c 	.word	0xe000ed0c
 80089b8:	20006454 	.word	0x20006454

080089bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	@ 0x28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089c8:	f7fe fd5a 	bl	8007480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008b40 <pvPortMalloc+0x184>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089d4:	f000 f924 	bl	8008c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008b44 <pvPortMalloc+0x188>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4013      	ands	r3, r2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 8095 	bne.w	8008b10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01e      	beq.n	8008a2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80089ec:	2208      	movs	r2, #8
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4413      	add	r3, r2
 80089f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d015      	beq.n	8008a2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f023 0307 	bic.w	r3, r3, #7
 8008a04:	3308      	adds	r3, #8
 8008a06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <pvPortMalloc+0x6e>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	617b      	str	r3, [r7, #20]
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
 8008a28:	e7fd      	b.n	8008a26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d06f      	beq.n	8008b10 <pvPortMalloc+0x154>
 8008a30:	4b45      	ldr	r3, [pc, #276]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d86a      	bhi.n	8008b10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a3a:	4b44      	ldr	r3, [pc, #272]	@ (8008b4c <pvPortMalloc+0x190>)
 8008a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a3e:	4b43      	ldr	r3, [pc, #268]	@ (8008b4c <pvPortMalloc+0x190>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a44:	e004      	b.n	8008a50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d903      	bls.n	8008a62 <pvPortMalloc+0xa6>
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f1      	bne.n	8008a46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a62:	4b37      	ldr	r3, [pc, #220]	@ (8008b40 <pvPortMalloc+0x184>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d051      	beq.n	8008b10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2208      	movs	r2, #8
 8008a72:	4413      	add	r3, r2
 8008a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	1ad2      	subs	r2, r2, r3
 8008a86:	2308      	movs	r3, #8
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d920      	bls.n	8008ad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <pvPortMalloc+0xfc>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	613b      	str	r3, [r7, #16]
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	e7fd      	b.n	8008ab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008aca:	69b8      	ldr	r0, [r7, #24]
 8008acc:	f000 f90a 	bl	8008ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	4a1b      	ldr	r2, [pc, #108]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008adc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ade:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b50 <pvPortMalloc+0x194>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d203      	bcs.n	8008af2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aea:	4b17      	ldr	r3, [pc, #92]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a18      	ldr	r2, [pc, #96]	@ (8008b50 <pvPortMalloc+0x194>)
 8008af0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	4b13      	ldr	r3, [pc, #76]	@ (8008b44 <pvPortMalloc+0x188>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b06:	4b13      	ldr	r3, [pc, #76]	@ (8008b54 <pvPortMalloc+0x198>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	4a11      	ldr	r2, [pc, #68]	@ (8008b54 <pvPortMalloc+0x198>)
 8008b0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b10:	f7fe fcc4 	bl	800749c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <pvPortMalloc+0x17a>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	60fb      	str	r3, [r7, #12]
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	e7fd      	b.n	8008b32 <pvPortMalloc+0x176>
	return pvReturn;
 8008b36:	69fb      	ldr	r3, [r7, #28]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3728      	adds	r7, #40	@ 0x28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	2000a060 	.word	0x2000a060
 8008b44:	2000a074 	.word	0x2000a074
 8008b48:	2000a064 	.word	0x2000a064
 8008b4c:	2000a058 	.word	0x2000a058
 8008b50:	2000a068 	.word	0x2000a068
 8008b54:	2000a06c 	.word	0x2000a06c

08008b58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d04f      	beq.n	8008c0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b6a:	2308      	movs	r3, #8
 8008b6c:	425b      	negs	r3, r3
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	4b25      	ldr	r3, [pc, #148]	@ (8008c14 <vPortFree+0xbc>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4013      	ands	r3, r2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10b      	bne.n	8008b9e <vPortFree+0x46>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60fb      	str	r3, [r7, #12]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <vPortFree+0x66>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60bb      	str	r3, [r7, #8]
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	e7fd      	b.n	8008bba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	4b14      	ldr	r3, [pc, #80]	@ (8008c14 <vPortFree+0xbc>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01e      	beq.n	8008c0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11a      	bne.n	8008c0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <vPortFree+0xbc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	43db      	mvns	r3, r3
 8008bde:	401a      	ands	r2, r3
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008be4:	f7fe fc4c 	bl	8007480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	4b0a      	ldr	r3, [pc, #40]	@ (8008c18 <vPortFree+0xc0>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	4a09      	ldr	r2, [pc, #36]	@ (8008c18 <vPortFree+0xc0>)
 8008bf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bf6:	6938      	ldr	r0, [r7, #16]
 8008bf8:	f000 f874 	bl	8008ce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bfc:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <vPortFree+0xc4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3301      	adds	r3, #1
 8008c02:	4a06      	ldr	r2, [pc, #24]	@ (8008c1c <vPortFree+0xc4>)
 8008c04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c06:	f7fe fc49 	bl	800749c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	2000a074 	.word	0x2000a074
 8008c18:	2000a064 	.word	0x2000a064
 8008c1c:	2000a070 	.word	0x2000a070

08008c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c2c:	4b27      	ldr	r3, [pc, #156]	@ (8008ccc <prvHeapInit+0xac>)
 8008c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00c      	beq.n	8008c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3307      	adds	r3, #7
 8008c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0307 	bic.w	r3, r3, #7
 8008c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ccc <prvHeapInit+0xac>)
 8008c50:	4413      	add	r3, r2
 8008c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c58:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd0 <prvHeapInit+0xb0>)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd0 <prvHeapInit+0xb0>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	4413      	add	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4a15      	ldr	r2, [pc, #84]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c82:	4b14      	ldr	r3, [pc, #80]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c8a:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	1ad2      	subs	r2, r2, r3
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4a0a      	ldr	r2, [pc, #40]	@ (8008cd8 <prvHeapInit+0xb8>)
 8008cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4a09      	ldr	r2, [pc, #36]	@ (8008cdc <prvHeapInit+0xbc>)
 8008cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cb8:	4b09      	ldr	r3, [pc, #36]	@ (8008ce0 <prvHeapInit+0xc0>)
 8008cba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cbe:	601a      	str	r2, [r3, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20006458 	.word	0x20006458
 8008cd0:	2000a058 	.word	0x2000a058
 8008cd4:	2000a060 	.word	0x2000a060
 8008cd8:	2000a068 	.word	0x2000a068
 8008cdc:	2000a064 	.word	0x2000a064
 8008ce0:	2000a074 	.word	0x2000a074

08008ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cec:	4b28      	ldr	r3, [pc, #160]	@ (8008d90 <prvInsertBlockIntoFreeList+0xac>)
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e002      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x14>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d8f7      	bhi.n	8008cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d108      	bne.n	8008d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	441a      	add	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	441a      	add	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d118      	bne.n	8008d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b15      	ldr	r3, [pc, #84]	@ (8008d94 <prvInsertBlockIntoFreeList+0xb0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d00d      	beq.n	8008d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	441a      	add	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e008      	b.n	8008d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d62:	4b0c      	ldr	r3, [pc, #48]	@ (8008d94 <prvInsertBlockIntoFreeList+0xb0>)
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e003      	b.n	8008d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d002      	beq.n	8008d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	2000a058 	.word	0x2000a058
 8008d94:	2000a060 	.word	0x2000a060

08008d98 <rcl_get_zero_initialized_publisher>:
 8008d98:	4b01      	ldr	r3, [pc, #4]	@ (8008da0 <rcl_get_zero_initialized_publisher+0x8>)
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	08018494 	.word	0x08018494

08008da4 <rcl_publisher_init>:
 8008da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da8:	b088      	sub	sp, #32
 8008daa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	d06a      	beq.n	8008e86 <rcl_publisher_init+0xe2>
 8008db0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8008db4:	4604      	mov	r4, r0
 8008db6:	4648      	mov	r0, r9
 8008db8:	460e      	mov	r6, r1
 8008dba:	4690      	mov	r8, r2
 8008dbc:	461f      	mov	r7, r3
 8008dbe:	f001 f83b 	bl	8009e38 <rcutils_allocator_is_valid>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d05f      	beq.n	8008e86 <rcl_publisher_init+0xe2>
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	d05d      	beq.n	8008e86 <rcl_publisher_init+0xe2>
 8008dca:	f8d4 a000 	ldr.w	sl, [r4]
 8008dce:	f1ba 0f00 	cmp.w	sl, #0
 8008dd2:	d004      	beq.n	8008dde <rcl_publisher_init+0x3a>
 8008dd4:	2764      	movs	r7, #100	@ 0x64
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	b008      	add	sp, #32
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	4630      	mov	r0, r6
 8008de0:	f007 fb54 	bl	801048c <rcl_node_is_valid>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d053      	beq.n	8008e90 <rcl_publisher_init+0xec>
 8008de8:	f1b8 0f00 	cmp.w	r8, #0
 8008dec:	d04b      	beq.n	8008e86 <rcl_publisher_init+0xe2>
 8008dee:	2f00      	cmp	r7, #0
 8008df0:	d049      	beq.n	8008e86 <rcl_publisher_init+0xe2>
 8008df2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8008df6:	aa07      	add	r2, sp, #28
 8008df8:	9205      	str	r2, [sp, #20]
 8008dfa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8008dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008e06:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008e10:	4630      	mov	r0, r6
 8008e12:	f007 fbcb 	bl	80105ac <rcl_node_resolve_name>
 8008e16:	4607      	mov	r7, r0
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d150      	bne.n	8008ebe <rcl_publisher_init+0x11a>
 8008e1c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8008e20:	21c8      	movs	r1, #200	@ 0xc8
 8008e22:	2001      	movs	r0, #1
 8008e24:	4798      	blx	r3
 8008e26:	6020      	str	r0, [r4, #0]
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d04e      	beq.n	8008eca <rcl_publisher_init+0x126>
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f007 fb4f 	bl	80104d0 <rcl_node_get_rmw_handle>
 8008e32:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	9a07      	ldr	r2, [sp, #28]
 8008e3a:	6827      	ldr	r7, [r4, #0]
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	4641      	mov	r1, r8
 8008e40:	f001 f95e 	bl	800a100 <rmw_create_publisher>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8008e4a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008e4e:	b370      	cbz	r0, 8008eae <rcl_publisher_init+0x10a>
 8008e50:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8008e54:	f001 fa30 	bl	800a2b8 <rmw_publisher_get_actual_qos>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	b9d0      	cbnz	r0, 8008e94 <rcl_publisher_init+0xf0>
 8008e5e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8008e62:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8008e66:	4629      	mov	r1, r5
 8008e68:	2270      	movs	r2, #112	@ 0x70
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f00e fc59 	bl	8017722 <memcpy>
 8008e70:	6832      	ldr	r2, [r6, #0]
 8008e72:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8008e76:	9807      	ldr	r0, [sp, #28]
 8008e78:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8008e7a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008e7c:	4798      	blx	r3
 8008e7e:	4638      	mov	r0, r7
 8008e80:	b008      	add	sp, #32
 8008e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e86:	270b      	movs	r7, #11
 8008e88:	4638      	mov	r0, r7
 8008e8a:	b008      	add	sp, #32
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	27c8      	movs	r7, #200	@ 0xc8
 8008e92:	e7a0      	b.n	8008dd6 <rcl_publisher_init+0x32>
 8008e94:	b18b      	cbz	r3, 8008eba <rcl_publisher_init+0x116>
 8008e96:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008e9a:	b142      	cbz	r2, 8008eae <rcl_publisher_init+0x10a>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f007 fb17 	bl	80104d0 <rcl_node_get_rmw_handle>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8008ea8:	f001 fa14 	bl	800a2d4 <rmw_destroy_publisher>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8008eb0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	4790      	blx	r2
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	2701      	movs	r7, #1
 8008ebc:	e7db      	b.n	8008e76 <rcl_publisher_init+0xd2>
 8008ebe:	2867      	cmp	r0, #103	@ 0x67
 8008ec0:	d0d9      	beq.n	8008e76 <rcl_publisher_init+0xd2>
 8008ec2:	2869      	cmp	r0, #105	@ 0x69
 8008ec4:	d003      	beq.n	8008ece <rcl_publisher_init+0x12a>
 8008ec6:	280a      	cmp	r0, #10
 8008ec8:	d1f7      	bne.n	8008eba <rcl_publisher_init+0x116>
 8008eca:	270a      	movs	r7, #10
 8008ecc:	e7d3      	b.n	8008e76 <rcl_publisher_init+0xd2>
 8008ece:	2767      	movs	r7, #103	@ 0x67
 8008ed0:	e7d1      	b.n	8008e76 <rcl_publisher_init+0xd2>
 8008ed2:	bf00      	nop

08008ed4 <rcl_publisher_get_default_options>:
 8008ed4:	b530      	push	{r4, r5, lr}
 8008ed6:	4912      	ldr	r1, [pc, #72]	@ (8008f20 <rcl_publisher_get_default_options+0x4c>)
 8008ed8:	b083      	sub	sp, #12
 8008eda:	2250      	movs	r2, #80	@ 0x50
 8008edc:	4604      	mov	r4, r0
 8008ede:	f00e fc20 	bl	8017722 <memcpy>
 8008ee2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ee6:	f000 ff7b 	bl	8009de0 <rcutils_get_default_allocator>
 8008eea:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8008eee:	f001 f83f 	bl	8009f70 <rmw_get_default_publisher_options>
 8008ef2:	2500      	movs	r5, #0
 8008ef4:	f10d 0007 	add.w	r0, sp, #7
 8008ef8:	f88d 5007 	strb.w	r5, [sp, #7]
 8008efc:	f007 faee 	bl	80104dc <rcl_get_disable_loaned_message>
 8008f00:	b930      	cbnz	r0, 8008f10 <rcl_publisher_get_default_options+0x3c>
 8008f02:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8008f06:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	b003      	add	sp, #12
 8008f0e:	bd30      	pop	{r4, r5, pc}
 8008f10:	f000 ffbe 	bl	8009e90 <rcutils_reset_error>
 8008f14:	4620      	mov	r0, r4
 8008f16:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 8008f1a:	b003      	add	sp, #12
 8008f1c:	bd30      	pop	{r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	08018498 	.word	0x08018498

08008f24 <rcl_publish>:
 8008f24:	b308      	cbz	r0, 8008f6a <rcl_publish+0x46>
 8008f26:	6803      	ldr	r3, [r0, #0]
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	b1c3      	cbz	r3, 8008f60 <rcl_publish+0x3c>
 8008f2e:	4616      	mov	r6, r2
 8008f30:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008f34:	b1a2      	cbz	r2, 8008f60 <rcl_publish+0x3c>
 8008f36:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	f006 fef8 	bl	800fd30 <rcl_context_is_valid>
 8008f40:	b160      	cbz	r0, 8008f5c <rcl_publish+0x38>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008f48:	b150      	cbz	r0, 8008f60 <rcl_publish+0x3c>
 8008f4a:	b165      	cbz	r5, 8008f66 <rcl_publish+0x42>
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	4629      	mov	r1, r5
 8008f50:	f001 f876 	bl	800a040 <rmw_publish>
 8008f54:	3800      	subs	r0, #0
 8008f56:	bf18      	it	ne
 8008f58:	2001      	movne	r0, #1
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	f000 ff7a 	bl	8009e54 <rcutils_error_is_set>
 8008f60:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008f64:	bd70      	pop	{r4, r5, r6, pc}
 8008f66:	200b      	movs	r0, #11
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008f6e:	4770      	bx	lr

08008f70 <rcl_publisher_is_valid>:
 8008f70:	b1b0      	cbz	r0, 8008fa0 <rcl_publisher_is_valid+0x30>
 8008f72:	6803      	ldr	r3, [r0, #0]
 8008f74:	b510      	push	{r4, lr}
 8008f76:	4604      	mov	r4, r0
 8008f78:	b183      	cbz	r3, 8008f9c <rcl_publisher_is_valid+0x2c>
 8008f7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008f7e:	b16a      	cbz	r2, 8008f9c <rcl_publisher_is_valid+0x2c>
 8008f80:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8008f84:	f006 fed4 	bl	800fd30 <rcl_context_is_valid>
 8008f88:	b130      	cbz	r0, 8008f98 <rcl_publisher_is_valid+0x28>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008f90:	3800      	subs	r0, #0
 8008f92:	bf18      	it	ne
 8008f94:	2001      	movne	r0, #1
 8008f96:	bd10      	pop	{r4, pc}
 8008f98:	f000 ff5c 	bl	8009e54 <rcutils_error_is_set>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	bd10      	pop	{r4, pc}
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	4770      	bx	lr

08008fa4 <rcl_publisher_is_valid_except_context>:
 8008fa4:	b130      	cbz	r0, 8008fb4 <rcl_publisher_is_valid_except_context+0x10>
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	b120      	cbz	r0, 8008fb4 <rcl_publisher_is_valid_except_context+0x10>
 8008faa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8008fae:	3800      	subs	r0, #0
 8008fb0:	bf18      	it	ne
 8008fb2:	2001      	movne	r0, #1
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop

08008fb8 <_rclc_check_for_new_data>:
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d046      	beq.n	800904a <_rclc_check_for_new_data+0x92>
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	7802      	ldrb	r2, [r0, #0]
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2a0a      	cmp	r2, #10
 8008fc6:	d842      	bhi.n	800904e <_rclc_check_for_new_data+0x96>
 8008fc8:	e8df f002 	tbb	[pc, r2]
 8008fcc:	14181212 	.word	0x14181212
 8008fd0:	06060614 	.word	0x06060614
 8008fd4:	2e1a      	.short	0x2e1a
 8008fd6:	16          	.byte	0x16
 8008fd7:	00          	.byte	0x00
 8008fd8:	6a0a      	ldr	r2, [r1, #32]
 8008fda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008fdc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008fe0:	3a00      	subs	r2, #0
 8008fe2:	bf18      	it	ne
 8008fe4:	2201      	movne	r2, #1
 8008fe6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8008fea:	2000      	movs	r0, #0
 8008fec:	b004      	add	sp, #16
 8008fee:	bd10      	pop	{r4, pc}
 8008ff0:	680a      	ldr	r2, [r1, #0]
 8008ff2:	e7f2      	b.n	8008fda <_rclc_check_for_new_data+0x22>
 8008ff4:	698a      	ldr	r2, [r1, #24]
 8008ff6:	e7f0      	b.n	8008fda <_rclc_check_for_new_data+0x22>
 8008ff8:	688a      	ldr	r2, [r1, #8]
 8008ffa:	e7ee      	b.n	8008fda <_rclc_check_for_new_data+0x22>
 8008ffc:	690a      	ldr	r2, [r1, #16]
 8008ffe:	e7ec      	b.n	8008fda <_rclc_check_for_new_data+0x22>
 8009000:	685c      	ldr	r4, [r3, #4]
 8009002:	4608      	mov	r0, r1
 8009004:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009008:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800900c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8009010:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800901a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800901e:	f104 0110 	add.w	r1, r4, #16
 8009022:	f009 f969 	bl	80122f8 <rcl_action_client_wait_set_get_entities_ready>
 8009026:	e7e1      	b.n	8008fec <_rclc_check_for_new_data+0x34>
 8009028:	685c      	ldr	r4, [r3, #4]
 800902a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800902e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8009032:	e9cd 3200 	strd	r3, r2, [sp]
 8009036:	4608      	mov	r0, r1
 8009038:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800903c:	f104 0220 	add.w	r2, r4, #32
 8009040:	f104 0110 	add.w	r1, r4, #16
 8009044:	f009 fb5a 	bl	80126fc <rcl_action_server_wait_set_get_entities_ready>
 8009048:	e7d0      	b.n	8008fec <_rclc_check_for_new_data+0x34>
 800904a:	200b      	movs	r0, #11
 800904c:	4770      	bx	lr
 800904e:	2001      	movs	r0, #1
 8009050:	e7cc      	b.n	8008fec <_rclc_check_for_new_data+0x34>
 8009052:	bf00      	nop

08009054 <_rclc_take_new_data>:
 8009054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009056:	b099      	sub	sp, #100	@ 0x64
 8009058:	2800      	cmp	r0, #0
 800905a:	f000 8082 	beq.w	8009162 <_rclc_take_new_data+0x10e>
 800905e:	7803      	ldrb	r3, [r0, #0]
 8009060:	4604      	mov	r4, r0
 8009062:	2b0a      	cmp	r3, #10
 8009064:	f200 815d 	bhi.w	8009322 <_rclc_take_new_data+0x2ce>
 8009068:	e8df f003 	tbb	[pc, r3]
 800906c:	31531f1f 	.word	0x31531f1f
 8009070:	06060631 	.word	0x06060631
 8009074:	4555      	.short	0x4555
 8009076:	53          	.byte	0x53
 8009077:	00          	.byte	0x00
 8009078:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800907a:	6a0b      	ldr	r3, [r1, #32]
 800907c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d046      	beq.n	8009112 <_rclc_take_new_data+0xbe>
 8009084:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009088:	f104 0110 	add.w	r1, r4, #16
 800908c:	f007 fb3c 	bl	8010708 <rcl_take_request>
 8009090:	4605      	mov	r5, r0
 8009092:	2800      	cmp	r0, #0
 8009094:	d03d      	beq.n	8009112 <_rclc_take_new_data+0xbe>
 8009096:	f240 2359 	movw	r3, #601	@ 0x259
 800909a:	4298      	cmp	r0, r3
 800909c:	d128      	bne.n	80090f0 <_rclc_take_new_data+0x9c>
 800909e:	2300      	movs	r3, #0
 80090a0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80090a4:	4628      	mov	r0, r5
 80090a6:	b019      	add	sp, #100	@ 0x64
 80090a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090aa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80090ac:	680b      	ldr	r3, [r1, #0]
 80090ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b2:	b373      	cbz	r3, 8009112 <_rclc_take_new_data+0xbe>
 80090b4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80090b8:	2300      	movs	r3, #0
 80090ba:	aa0a      	add	r2, sp, #40	@ 0x28
 80090bc:	f007 fcf8 	bl	8010ab0 <rcl_take>
 80090c0:	4605      	mov	r5, r0
 80090c2:	b330      	cbz	r0, 8009112 <_rclc_take_new_data+0xbe>
 80090c4:	f240 1391 	movw	r3, #401	@ 0x191
 80090c8:	4298      	cmp	r0, r3
 80090ca:	d0e8      	beq.n	800909e <_rclc_take_new_data+0x4a>
 80090cc:	e010      	b.n	80090f0 <_rclc_take_new_data+0x9c>
 80090ce:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80090d0:	698b      	ldr	r3, [r1, #24]
 80090d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d6:	b1e3      	cbz	r3, 8009112 <_rclc_take_new_data+0xbe>
 80090d8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80090dc:	f104 0110 	add.w	r1, r4, #16
 80090e0:	f006 fd96 	bl	800fc10 <rcl_take_response>
 80090e4:	4605      	mov	r5, r0
 80090e6:	b1a0      	cbz	r0, 8009112 <_rclc_take_new_data+0xbe>
 80090e8:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80090ec:	4298      	cmp	r0, r3
 80090ee:	d0d9      	beq.n	80090a4 <_rclc_take_new_data+0x50>
 80090f0:	f000 fece 	bl	8009e90 <rcutils_reset_error>
 80090f4:	e7d6      	b.n	80090a4 <_rclc_take_new_data+0x50>
 80090f6:	6840      	ldr	r0, [r0, #4]
 80090f8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d15f      	bne.n	80091c0 <_rclc_take_new_data+0x16c>
 8009100:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009104:	2b00      	cmp	r3, #0
 8009106:	d179      	bne.n	80091fc <_rclc_take_new_data+0x1a8>
 8009108:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 8096 	bne.w	800923e <_rclc_take_new_data+0x1ea>
 8009112:	2500      	movs	r5, #0
 8009114:	e7c6      	b.n	80090a4 <_rclc_take_new_data+0x50>
 8009116:	6840      	ldr	r0, [r0, #4]
 8009118:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800911c:	2b00      	cmp	r3, #0
 800911e:	d138      	bne.n	8009192 <_rclc_take_new_data+0x13e>
 8009120:	69c3      	ldr	r3, [r0, #28]
 8009122:	b113      	cbz	r3, 800912a <_rclc_take_new_data+0xd6>
 8009124:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009128:	b9fb      	cbnz	r3, 800916a <_rclc_take_new_data+0x116>
 800912a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800912e:	2b00      	cmp	r3, #0
 8009130:	f040 80a8 	bne.w	8009284 <_rclc_take_new_data+0x230>
 8009134:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0ea      	beq.n	8009112 <_rclc_take_new_data+0xbe>
 800913c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800913e:	a90a      	add	r1, sp, #40	@ 0x28
 8009140:	3010      	adds	r0, #16
 8009142:	f008 ffbd 	bl	80120c0 <rcl_action_take_result_response>
 8009146:	4605      	mov	r5, r0
 8009148:	2800      	cmp	r0, #0
 800914a:	d1d1      	bne.n	80090f0 <_rclc_take_new_data+0x9c>
 800914c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009150:	6860      	ldr	r0, [r4, #4]
 8009152:	f009 fbfd 	bl	8012950 <rclc_action_find_handle_by_result_request_sequence_number>
 8009156:	2800      	cmp	r0, #0
 8009158:	d0db      	beq.n	8009112 <_rclc_take_new_data+0xbe>
 800915a:	2301      	movs	r3, #1
 800915c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009160:	e7d7      	b.n	8009112 <_rclc_take_new_data+0xbe>
 8009162:	250b      	movs	r5, #11
 8009164:	4628      	mov	r0, r5
 8009166:	b019      	add	sp, #100	@ 0x64
 8009168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800916c:	3010      	adds	r0, #16
 800916e:	f009 f823 	bl	80121b8 <rcl_action_take_feedback>
 8009172:	4605      	mov	r5, r0
 8009174:	2800      	cmp	r0, #0
 8009176:	d1bb      	bne.n	80090f0 <_rclc_take_new_data+0x9c>
 8009178:	6860      	ldr	r0, [r4, #4]
 800917a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800917c:	f009 fba6 	bl	80128cc <rclc_action_find_goal_handle_by_uuid>
 8009180:	4603      	mov	r3, r0
 8009182:	2800      	cmp	r0, #0
 8009184:	f000 80c4 	beq.w	8009310 <_rclc_take_new_data+0x2bc>
 8009188:	2201      	movs	r2, #1
 800918a:	6860      	ldr	r0, [r4, #4]
 800918c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009190:	e7cb      	b.n	800912a <_rclc_take_new_data+0xd6>
 8009192:	aa04      	add	r2, sp, #16
 8009194:	a90a      	add	r1, sp, #40	@ 0x28
 8009196:	3010      	adds	r0, #16
 8009198:	f008 ff22 	bl	8011fe0 <rcl_action_take_goal_response>
 800919c:	4605      	mov	r5, r0
 800919e:	2800      	cmp	r0, #0
 80091a0:	d1a6      	bne.n	80090f0 <_rclc_take_new_data+0x9c>
 80091a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80091a6:	6860      	ldr	r0, [r4, #4]
 80091a8:	f009 fbc0 	bl	801292c <rclc_action_find_handle_by_goal_request_sequence_number>
 80091ac:	b130      	cbz	r0, 80091bc <_rclc_take_new_data+0x168>
 80091ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80091b2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80091b6:	2201      	movs	r2, #1
 80091b8:	f880 2020 	strb.w	r2, [r0, #32]
 80091bc:	6860      	ldr	r0, [r4, #4]
 80091be:	e7af      	b.n	8009120 <_rclc_take_new_data+0xcc>
 80091c0:	f009 fb5e 	bl	8012880 <rclc_action_take_goal_handle>
 80091c4:	4606      	mov	r6, r0
 80091c6:	6860      	ldr	r0, [r4, #4]
 80091c8:	2e00      	cmp	r6, #0
 80091ca:	d099      	beq.n	8009100 <_rclc_take_new_data+0xac>
 80091cc:	6070      	str	r0, [r6, #4]
 80091ce:	69f2      	ldr	r2, [r6, #28]
 80091d0:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80091d4:	3010      	adds	r0, #16
 80091d6:	f009 f91f 	bl	8012418 <rcl_action_take_goal_request>
 80091da:	4605      	mov	r5, r0
 80091dc:	2800      	cmp	r0, #0
 80091de:	f040 8099 	bne.w	8009314 <_rclc_take_new_data+0x2c0>
 80091e2:	69f7      	ldr	r7, [r6, #28]
 80091e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80091e6:	7235      	strb	r5, [r6, #8]
 80091e8:	f8c6 0009 	str.w	r0, [r6, #9]
 80091ec:	f8c6 100d 	str.w	r1, [r6, #13]
 80091f0:	6860      	ldr	r0, [r4, #4]
 80091f2:	f8c6 2011 	str.w	r2, [r6, #17]
 80091f6:	f8c6 3015 	str.w	r3, [r6, #21]
 80091fa:	e781      	b.n	8009100 <_rclc_take_new_data+0xac>
 80091fc:	aa04      	add	r2, sp, #16
 80091fe:	3010      	adds	r0, #16
 8009200:	a90a      	add	r1, sp, #40	@ 0x28
 8009202:	f009 f979 	bl	80124f8 <rcl_action_take_result_request>
 8009206:	4605      	mov	r5, r0
 8009208:	2800      	cmp	r0, #0
 800920a:	f47f af71 	bne.w	80090f0 <_rclc_take_new_data+0x9c>
 800920e:	6860      	ldr	r0, [r4, #4]
 8009210:	a904      	add	r1, sp, #16
 8009212:	f009 fb5b 	bl	80128cc <rclc_action_find_goal_handle_by_uuid>
 8009216:	4607      	mov	r7, r0
 8009218:	b160      	cbz	r0, 8009234 <_rclc_take_new_data+0x1e0>
 800921a:	ad0a      	add	r5, sp, #40	@ 0x28
 800921c:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009222:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009224:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009228:	f04f 0c02 	mov.w	ip, #2
 800922c:	e886 0003 	stmia.w	r6, {r0, r1}
 8009230:	f887 c008 	strb.w	ip, [r7, #8]
 8009234:	6860      	ldr	r0, [r4, #4]
 8009236:	2300      	movs	r3, #0
 8009238:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800923c:	e764      	b.n	8009108 <_rclc_take_new_data+0xb4>
 800923e:	ae04      	add	r6, sp, #16
 8009240:	aa0a      	add	r2, sp, #40	@ 0x28
 8009242:	3010      	adds	r0, #16
 8009244:	4631      	mov	r1, r6
 8009246:	f009 f995 	bl	8012574 <rcl_action_take_cancel_request>
 800924a:	4605      	mov	r5, r0
 800924c:	2800      	cmp	r0, #0
 800924e:	f47f af4f 	bne.w	80090f0 <_rclc_take_new_data+0x9c>
 8009252:	6860      	ldr	r0, [r4, #4]
 8009254:	a90a      	add	r1, sp, #40	@ 0x28
 8009256:	f009 fb39 	bl	80128cc <rclc_action_find_goal_handle_by_uuid>
 800925a:	4605      	mov	r5, r0
 800925c:	2800      	cmp	r0, #0
 800925e:	d04c      	beq.n	80092fa <_rclc_take_new_data+0x2a6>
 8009260:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009264:	2101      	movs	r1, #1
 8009266:	f009 fab9 	bl	80127dc <rcl_action_transition_goal_state>
 800926a:	2803      	cmp	r0, #3
 800926c:	4607      	mov	r7, r0
 800926e:	d139      	bne.n	80092e4 <_rclc_take_new_data+0x290>
 8009270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009272:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8009276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009278:	e896 0003 	ldmia.w	r6, {r0, r1}
 800927c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009280:	722f      	strb	r7, [r5, #8]
 8009282:	e746      	b.n	8009112 <_rclc_take_new_data+0xbe>
 8009284:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009288:	a90a      	add	r1, sp, #40	@ 0x28
 800928a:	3010      	adds	r0, #16
 800928c:	f008 ff56 	bl	801213c <rcl_action_take_cancel_response>
 8009290:	4605      	mov	r5, r0
 8009292:	2800      	cmp	r0, #0
 8009294:	f47f af2c 	bne.w	80090f0 <_rclc_take_new_data+0x9c>
 8009298:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800929c:	6860      	ldr	r0, [r4, #4]
 800929e:	f009 fb69 	bl	8012974 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80092a2:	4606      	mov	r6, r0
 80092a4:	6860      	ldr	r0, [r4, #4]
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	f43f af44 	beq.w	8009134 <_rclc_take_new_data+0xe0>
 80092ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80092ae:	2701      	movs	r7, #1
 80092b0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f43f af3e 	beq.w	8009134 <_rclc_take_new_data+0xe0>
 80092b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80092ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80092be:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80092c2:	f009 fb03 	bl	80128cc <rclc_action_find_goal_handle_by_uuid>
 80092c6:	b138      	cbz	r0, 80092d8 <_rclc_take_new_data+0x284>
 80092c8:	6860      	ldr	r0, [r4, #4]
 80092ca:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80092cc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80092d0:	3501      	adds	r5, #1
 80092d2:	42ab      	cmp	r3, r5
 80092d4:	d8f0      	bhi.n	80092b8 <_rclc_take_new_data+0x264>
 80092d6:	e72d      	b.n	8009134 <_rclc_take_new_data+0xe0>
 80092d8:	6860      	ldr	r0, [r4, #4]
 80092da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80092dc:	3501      	adds	r5, #1
 80092de:	42ab      	cmp	r3, r5
 80092e0:	d8ea      	bhi.n	80092b8 <_rclc_take_new_data+0x264>
 80092e2:	e727      	b.n	8009134 <_rclc_take_new_data+0xe0>
 80092e4:	ab06      	add	r3, sp, #24
 80092e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80092e8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80092ec:	2103      	movs	r1, #3
 80092ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80092f2:	6860      	ldr	r0, [r4, #4]
 80092f4:	f009 fbb4 	bl	8012a60 <rclc_action_server_goal_cancel_reject>
 80092f8:	e70b      	b.n	8009112 <_rclc_take_new_data+0xbe>
 80092fa:	ab06      	add	r3, sp, #24
 80092fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80092fe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009302:	2102      	movs	r1, #2
 8009304:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009308:	6860      	ldr	r0, [r4, #4]
 800930a:	f009 fba9 	bl	8012a60 <rclc_action_server_goal_cancel_reject>
 800930e:	e700      	b.n	8009112 <_rclc_take_new_data+0xbe>
 8009310:	6860      	ldr	r0, [r4, #4]
 8009312:	e70a      	b.n	800912a <_rclc_take_new_data+0xd6>
 8009314:	6860      	ldr	r0, [r4, #4]
 8009316:	4631      	mov	r1, r6
 8009318:	f009 fac2 	bl	80128a0 <rclc_action_remove_used_goal_handle>
 800931c:	f000 fdb8 	bl	8009e90 <rcutils_reset_error>
 8009320:	e6c0      	b.n	80090a4 <_rclc_take_new_data+0x50>
 8009322:	2501      	movs	r5, #1
 8009324:	e6be      	b.n	80090a4 <_rclc_take_new_data+0x50>
 8009326:	bf00      	nop

08009328 <rclc_executor_trigger_any>:
 8009328:	4603      	mov	r3, r0
 800932a:	b370      	cbz	r0, 800938a <rclc_executor_trigger_any+0x62>
 800932c:	b379      	cbz	r1, 800938e <rclc_executor_trigger_any+0x66>
 800932e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009332:	2200      	movs	r2, #0
 8009334:	b350      	cbz	r0, 800938c <rclc_executor_trigger_any+0x64>
 8009336:	b430      	push	{r4, r5}
 8009338:	f893 c000 	ldrb.w	ip, [r3]
 800933c:	f1bc 0f08 	cmp.w	ip, #8
 8009340:	d017      	beq.n	8009372 <rclc_executor_trigger_any+0x4a>
 8009342:	f1bc 0f09 	cmp.w	ip, #9
 8009346:	d00d      	beq.n	8009364 <rclc_executor_trigger_any+0x3c>
 8009348:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800934c:	b940      	cbnz	r0, 8009360 <rclc_executor_trigger_any+0x38>
 800934e:	3201      	adds	r2, #1
 8009350:	4291      	cmp	r1, r2
 8009352:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009356:	d003      	beq.n	8009360 <rclc_executor_trigger_any+0x38>
 8009358:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800935c:	2800      	cmp	r0, #0
 800935e:	d1eb      	bne.n	8009338 <rclc_executor_trigger_any+0x10>
 8009360:	bc30      	pop	{r4, r5}
 8009362:	4770      	bx	lr
 8009364:	685c      	ldr	r4, [r3, #4]
 8009366:	6a25      	ldr	r5, [r4, #32]
 8009368:	2d00      	cmp	r5, #0
 800936a:	d1f9      	bne.n	8009360 <rclc_executor_trigger_any+0x38>
 800936c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009370:	e7ec      	b.n	800934c <rclc_executor_trigger_any+0x24>
 8009372:	685c      	ldr	r4, [r3, #4]
 8009374:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009376:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800937a:	d1f1      	bne.n	8009360 <rclc_executor_trigger_any+0x38>
 800937c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009380:	2800      	cmp	r0, #0
 8009382:	d1ed      	bne.n	8009360 <rclc_executor_trigger_any+0x38>
 8009384:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009388:	e7e0      	b.n	800934c <rclc_executor_trigger_any+0x24>
 800938a:	4770      	bx	lr
 800938c:	4770      	bx	lr
 800938e:	4608      	mov	r0, r1
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop

08009394 <_rclc_execute>:
 8009394:	2800      	cmp	r0, #0
 8009396:	f000 80dc 	beq.w	8009552 <_rclc_execute+0x1be>
 800939a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800939c:	7843      	ldrb	r3, [r0, #1]
 800939e:	b087      	sub	sp, #28
 80093a0:	4604      	mov	r4, r0
 80093a2:	b123      	cbz	r3, 80093ae <_rclc_execute+0x1a>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d01c      	beq.n	80093e2 <_rclc_execute+0x4e>
 80093a8:	2000      	movs	r0, #0
 80093aa:	b007      	add	sp, #28
 80093ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ae:	7803      	ldrb	r3, [r0, #0]
 80093b0:	2b08      	cmp	r3, #8
 80093b2:	f000 80a0 	beq.w	80094f6 <_rclc_execute+0x162>
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d024      	beq.n	8009404 <_rclc_execute+0x70>
 80093ba:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80093be:	2800      	cmp	r0, #0
 80093c0:	d0f2      	beq.n	80093a8 <_rclc_execute+0x14>
 80093c2:	2b0a      	cmp	r3, #10
 80093c4:	f200 815a 	bhi.w	800967c <_rclc_execute+0x2e8>
 80093c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80093cc:	008e006f 	.word	0x008e006f
 80093d0:	006f007c 	.word	0x006f007c
 80093d4:	00590073 	.word	0x00590073
 80093d8:	00590059 	.word	0x00590059
 80093dc:	01580158 	.word	0x01580158
 80093e0:	0079      	.short	0x0079
 80093e2:	7803      	ldrb	r3, [r0, #0]
 80093e4:	2b0a      	cmp	r3, #10
 80093e6:	f200 8149 	bhi.w	800967c <_rclc_execute+0x2e8>
 80093ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80093ee:	00f9      	.short	0x00f9
 80093f0:	006b007b 	.word	0x006b007b
 80093f4:	0062005e 	.word	0x0062005e
 80093f8:	00480048 	.word	0x00480048
 80093fc:	01000048 	.word	0x01000048
 8009400:	00680102 	.word	0x00680102
 8009404:	6840      	ldr	r0, [r0, #4]
 8009406:	6a02      	ldr	r2, [r0, #32]
 8009408:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800940c:	2a00      	cmp	r2, #0
 800940e:	f040 80f3 	bne.w	80095f8 <_rclc_execute+0x264>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0c8      	beq.n	80093a8 <_rclc_execute+0x14>
 8009416:	e003      	b.n	8009420 <_rclc_execute+0x8c>
 8009418:	6858      	ldr	r0, [r3, #4]
 800941a:	f009 fa41 	bl	80128a0 <rclc_action_remove_used_goal_handle>
 800941e:	6860      	ldr	r0, [r4, #4]
 8009420:	f009 fa78 	bl	8012914 <rclc_action_find_first_terminated_handle>
 8009424:	4603      	mov	r3, r0
 8009426:	4601      	mov	r1, r0
 8009428:	2800      	cmp	r0, #0
 800942a:	d1f5      	bne.n	8009418 <_rclc_execute+0x84>
 800942c:	6860      	ldr	r0, [r4, #4]
 800942e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8009432:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 80eb 	beq.w	8009612 <_rclc_execute+0x27e>
 800943c:	f241 0604 	movw	r6, #4100	@ 0x1004
 8009440:	2701      	movs	r7, #1
 8009442:	e007      	b.n	8009454 <_rclc_execute+0xc0>
 8009444:	4628      	mov	r0, r5
 8009446:	f009 fabf 	bl	80129c8 <rclc_action_server_response_goal_request>
 800944a:	6860      	ldr	r0, [r4, #4]
 800944c:	4629      	mov	r1, r5
 800944e:	f009 fa27 	bl	80128a0 <rclc_action_remove_used_goal_handle>
 8009452:	6860      	ldr	r0, [r4, #4]
 8009454:	2100      	movs	r1, #0
 8009456:	f009 fa51 	bl	80128fc <rclc_action_find_first_handle_by_status>
 800945a:	4605      	mov	r5, r0
 800945c:	2800      	cmp	r0, #0
 800945e:	f000 80d5 	beq.w	800960c <_rclc_execute+0x278>
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	4798      	blx	r3
 800946a:	42b0      	cmp	r0, r6
 800946c:	f04f 0100 	mov.w	r1, #0
 8009470:	d1e8      	bne.n	8009444 <_rclc_execute+0xb0>
 8009472:	2101      	movs	r1, #1
 8009474:	4628      	mov	r0, r5
 8009476:	f009 faa7 	bl	80129c8 <rclc_action_server_response_goal_request>
 800947a:	722f      	strb	r7, [r5, #8]
 800947c:	e7e9      	b.n	8009452 <_rclc_execute+0xbe>
 800947e:	2b06      	cmp	r3, #6
 8009480:	68a0      	ldr	r0, [r4, #8]
 8009482:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009484:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8009486:	f000 80bb 	beq.w	8009600 <_rclc_execute+0x26c>
 800948a:	2b07      	cmp	r3, #7
 800948c:	f000 80f1 	beq.w	8009672 <_rclc_execute+0x2de>
 8009490:	47b0      	blx	r6
 8009492:	f104 0510 	add.w	r5, r4, #16
 8009496:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009498:	6860      	ldr	r0, [r4, #4]
 800949a:	4629      	mov	r1, r5
 800949c:	f007 f984 	bl	80107a8 <rcl_send_response>
 80094a0:	2802      	cmp	r0, #2
 80094a2:	d117      	bne.n	80094d4 <_rclc_execute+0x140>
 80094a4:	f000 fcf4 	bl	8009e90 <rcutils_reset_error>
 80094a8:	e77e      	b.n	80093a8 <_rclc_execute+0x14>
 80094aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80094ac:	68a0      	ldr	r0, [r4, #8]
 80094ae:	4798      	blx	r3
 80094b0:	e77a      	b.n	80093a8 <_rclc_execute+0x14>
 80094b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80094b4:	68a0      	ldr	r0, [r4, #8]
 80094b6:	f104 0110 	add.w	r1, r4, #16
 80094ba:	4798      	blx	r3
 80094bc:	e774      	b.n	80093a8 <_rclc_execute+0x14>
 80094be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80094c0:	4798      	blx	r3
 80094c2:	e771      	b.n	80093a8 <_rclc_execute+0x14>
 80094c4:	6860      	ldr	r0, [r4, #4]
 80094c6:	f007 fe37 	bl	8011138 <rcl_timer_call>
 80094ca:	f240 3321 	movw	r3, #801	@ 0x321
 80094ce:	4298      	cmp	r0, r3
 80094d0:	f43f af6a 	beq.w	80093a8 <_rclc_execute+0x14>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f af68 	beq.w	80093aa <_rclc_execute+0x16>
 80094da:	9005      	str	r0, [sp, #20]
 80094dc:	f000 fcd8 	bl	8009e90 <rcutils_reset_error>
 80094e0:	9805      	ldr	r0, [sp, #20]
 80094e2:	e762      	b.n	80093aa <_rclc_execute+0x16>
 80094e4:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80094e8:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d0e4      	beq.n	80094ba <_rclc_execute+0x126>
 80094f0:	68a0      	ldr	r0, [r4, #8]
 80094f2:	4798      	blx	r3
 80094f4:	e758      	b.n	80093a8 <_rclc_execute+0x14>
 80094f6:	6840      	ldr	r0, [r0, #4]
 80094f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80094fa:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 80094fe:	d107      	bne.n	8009510 <_rclc_execute+0x17c>
 8009500:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009504:	b923      	cbnz	r3, 8009510 <_rclc_execute+0x17c>
 8009506:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800950a:	2b00      	cmp	r3, #0
 800950c:	f43f af4c 	beq.w	80093a8 <_rclc_execute+0x14>
 8009510:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009514:	b303      	cbz	r3, 8009558 <_rclc_execute+0x1c4>
 8009516:	2600      	movs	r6, #0
 8009518:	2701      	movs	r7, #1
 800951a:	e004      	b.n	8009526 <_rclc_execute+0x192>
 800951c:	f009 f98a 	bl	8012834 <rclc_action_send_result_request>
 8009520:	b990      	cbnz	r0, 8009548 <_rclc_execute+0x1b4>
 8009522:	722f      	strb	r7, [r5, #8]
 8009524:	6860      	ldr	r0, [r4, #4]
 8009526:	f009 fa37 	bl	8012998 <rclc_action_find_first_handle_with_goal_response>
 800952a:	4605      	mov	r5, r0
 800952c:	b198      	cbz	r0, 8009556 <_rclc_execute+0x1c2>
 800952e:	6863      	ldr	r3, [r4, #4]
 8009530:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009538:	f885 6020 	strb.w	r6, [r5, #32]
 800953c:	4798      	blx	r3
 800953e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009542:	4628      	mov	r0, r5
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e9      	bne.n	800951c <_rclc_execute+0x188>
 8009548:	6860      	ldr	r0, [r4, #4]
 800954a:	4629      	mov	r1, r5
 800954c:	f009 f9a8 	bl	80128a0 <rclc_action_remove_used_goal_handle>
 8009550:	e7e8      	b.n	8009524 <_rclc_execute+0x190>
 8009552:	200b      	movs	r0, #11
 8009554:	4770      	bx	lr
 8009556:	6860      	ldr	r0, [r4, #4]
 8009558:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800955c:	b18b      	cbz	r3, 8009582 <_rclc_execute+0x1ee>
 800955e:	68c5      	ldr	r5, [r0, #12]
 8009560:	b32d      	cbz	r5, 80095ae <_rclc_execute+0x21a>
 8009562:	2600      	movs	r6, #0
 8009564:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009568:	b143      	cbz	r3, 800957c <_rclc_execute+0x1e8>
 800956a:	69c3      	ldr	r3, [r0, #28]
 800956c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009570:	b123      	cbz	r3, 800957c <_rclc_execute+0x1e8>
 8009572:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009574:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009576:	4628      	mov	r0, r5
 8009578:	4798      	blx	r3
 800957a:	6860      	ldr	r0, [r4, #4]
 800957c:	682d      	ldr	r5, [r5, #0]
 800957e:	2d00      	cmp	r5, #0
 8009580:	d1f0      	bne.n	8009564 <_rclc_execute+0x1d0>
 8009582:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009586:	b193      	cbz	r3, 80095ae <_rclc_execute+0x21a>
 8009588:	68c5      	ldr	r5, [r0, #12]
 800958a:	b185      	cbz	r5, 80095ae <_rclc_execute+0x21a>
 800958c:	2600      	movs	r6, #0
 800958e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009592:	b14b      	cbz	r3, 80095a8 <_rclc_execute+0x214>
 8009594:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009596:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800959a:	b12b      	cbz	r3, 80095a8 <_rclc_execute+0x214>
 800959c:	4628      	mov	r0, r5
 800959e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80095a0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80095a4:	4798      	blx	r3
 80095a6:	6860      	ldr	r0, [r4, #4]
 80095a8:	682d      	ldr	r5, [r5, #0]
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	d1ef      	bne.n	800958e <_rclc_execute+0x1fa>
 80095ae:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f43f aef8 	beq.w	80093a8 <_rclc_execute+0x14>
 80095b8:	2700      	movs	r7, #0
 80095ba:	e00b      	b.n	80095d4 <_rclc_execute+0x240>
 80095bc:	6863      	ldr	r3, [r4, #4]
 80095be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80095c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80095c2:	6a1e      	ldr	r6, [r3, #32]
 80095c4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80095c8:	47b0      	blx	r6
 80095ca:	6860      	ldr	r0, [r4, #4]
 80095cc:	4629      	mov	r1, r5
 80095ce:	f009 f967 	bl	80128a0 <rclc_action_remove_used_goal_handle>
 80095d2:	6860      	ldr	r0, [r4, #4]
 80095d4:	f009 f9ec 	bl	80129b0 <rclc_action_find_first_handle_with_result_response>
 80095d8:	4605      	mov	r5, r0
 80095da:	2800      	cmp	r0, #0
 80095dc:	d1ee      	bne.n	80095bc <_rclc_execute+0x228>
 80095de:	e6e3      	b.n	80093a8 <_rclc_execute+0x14>
 80095e0:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80095e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f43f af61 	beq.w	80094ae <_rclc_execute+0x11a>
 80095ec:	e75e      	b.n	80094ac <_rclc_execute+0x118>
 80095ee:	6840      	ldr	r0, [r0, #4]
 80095f0:	e78e      	b.n	8009510 <_rclc_execute+0x17c>
 80095f2:	6840      	ldr	r0, [r0, #4]
 80095f4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f43f af1a 	beq.w	8009432 <_rclc_execute+0x9e>
 80095fe:	e70f      	b.n	8009420 <_rclc_execute+0x8c>
 8009600:	f104 0510 	add.w	r5, r4, #16
 8009604:	460a      	mov	r2, r1
 8009606:	4629      	mov	r1, r5
 8009608:	47b0      	blx	r6
 800960a:	e744      	b.n	8009496 <_rclc_execute+0x102>
 800960c:	6860      	ldr	r0, [r4, #4]
 800960e:	f880 5020 	strb.w	r5, [r0, #32]
 8009612:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009616:	2b00      	cmp	r3, #0
 8009618:	f43f aec6 	beq.w	80093a8 <_rclc_execute+0x14>
 800961c:	68c5      	ldr	r5, [r0, #12]
 800961e:	b325      	cbz	r5, 800966a <_rclc_execute+0x2d6>
 8009620:	2602      	movs	r6, #2
 8009622:	e001      	b.n	8009628 <_rclc_execute+0x294>
 8009624:	682d      	ldr	r5, [r5, #0]
 8009626:	b305      	cbz	r5, 800966a <_rclc_execute+0x2d6>
 8009628:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d1f9      	bne.n	8009624 <_rclc_execute+0x290>
 8009630:	69c3      	ldr	r3, [r0, #28]
 8009632:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009634:	4628      	mov	r0, r5
 8009636:	4798      	blx	r3
 8009638:	4603      	mov	r3, r0
 800963a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800963e:	4628      	mov	r0, r5
 8009640:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009644:	b11b      	cbz	r3, 800964e <_rclc_execute+0x2ba>
 8009646:	f009 f9df 	bl	8012a08 <rclc_action_server_goal_cancel_accept>
 800964a:	6860      	ldr	r0, [r4, #4]
 800964c:	e7ea      	b.n	8009624 <_rclc_execute+0x290>
 800964e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009650:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009654:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800965c:	6860      	ldr	r0, [r4, #4]
 800965e:	2101      	movs	r1, #1
 8009660:	f009 f9fe 	bl	8012a60 <rclc_action_server_goal_cancel_reject>
 8009664:	722e      	strb	r6, [r5, #8]
 8009666:	6860      	ldr	r0, [r4, #4]
 8009668:	e7dc      	b.n	8009624 <_rclc_execute+0x290>
 800966a:	2300      	movs	r3, #0
 800966c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009670:	e69a      	b.n	80093a8 <_rclc_execute+0x14>
 8009672:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009674:	47b0      	blx	r6
 8009676:	f104 0510 	add.w	r5, r4, #16
 800967a:	e70c      	b.n	8009496 <_rclc_execute+0x102>
 800967c:	2001      	movs	r0, #1
 800967e:	e694      	b.n	80093aa <_rclc_execute+0x16>

08009680 <rclc_executor_init>:
 8009680:	2800      	cmp	r0, #0
 8009682:	d05a      	beq.n	800973a <rclc_executor_init+0xba>
 8009684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009688:	460d      	mov	r5, r1
 800968a:	b0b2      	sub	sp, #200	@ 0xc8
 800968c:	2900      	cmp	r1, #0
 800968e:	d050      	beq.n	8009732 <rclc_executor_init+0xb2>
 8009690:	4604      	mov	r4, r0
 8009692:	4618      	mov	r0, r3
 8009694:	4616      	mov	r6, r2
 8009696:	461f      	mov	r7, r3
 8009698:	f000 fbce 	bl	8009e38 <rcutils_allocator_is_valid>
 800969c:	2800      	cmp	r0, #0
 800969e:	d048      	beq.n	8009732 <rclc_executor_init+0xb2>
 80096a0:	2e00      	cmp	r6, #0
 80096a2:	d046      	beq.n	8009732 <rclc_executor_init+0xb2>
 80096a4:	492a      	ldr	r1, [pc, #168]	@ (8009750 <rclc_executor_init+0xd0>)
 80096a6:	2290      	movs	r2, #144	@ 0x90
 80096a8:	a80e      	add	r0, sp, #56	@ 0x38
 80096aa:	f00e f83a 	bl	8017722 <memcpy>
 80096ae:	a90e      	add	r1, sp, #56	@ 0x38
 80096b0:	2290      	movs	r2, #144	@ 0x90
 80096b2:	4620      	mov	r0, r4
 80096b4:	f00e f835 	bl	8017722 <memcpy>
 80096b8:	6065      	str	r5, [r4, #4]
 80096ba:	4668      	mov	r0, sp
 80096bc:	60e6      	str	r6, [r4, #12]
 80096be:	466d      	mov	r5, sp
 80096c0:	f007 fe2c 	bl	801131c <rcl_get_zero_initialized_wait_set>
 80096c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096c6:	f104 0c18 	add.w	ip, r4, #24
 80096ca:	f8d7 8000 	ldr.w	r8, [r7]
 80096ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80096d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80096d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80096de:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8009748 <rclc_executor_init+0xc8>
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	f8cc 3000 	str.w	r3, [ip]
 80096e8:	6939      	ldr	r1, [r7, #16]
 80096ea:	6167      	str	r7, [r4, #20]
 80096ec:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 80096f0:	01b0      	lsls	r0, r6, #6
 80096f2:	47c0      	blx	r8
 80096f4:	60a0      	str	r0, [r4, #8]
 80096f6:	b310      	cbz	r0, 800973e <rclc_executor_init+0xbe>
 80096f8:	2500      	movs	r5, #0
 80096fa:	e000      	b.n	80096fe <rclc_executor_init+0x7e>
 80096fc:	68a0      	ldr	r0, [r4, #8]
 80096fe:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8009702:	4631      	mov	r1, r6
 8009704:	3501      	adds	r5, #1
 8009706:	f000 fa25 	bl	8009b54 <rclc_executor_handle_init>
 800970a:	42ae      	cmp	r6, r5
 800970c:	d1f6      	bne.n	80096fc <rclc_executor_init+0x7c>
 800970e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8009712:	f000 fa15 	bl	8009b40 <rclc_executor_handle_counters_zero_init>
 8009716:	490f      	ldr	r1, [pc, #60]	@ (8009754 <rclc_executor_init+0xd4>)
 8009718:	68a2      	ldr	r2, [r4, #8]
 800971a:	2300      	movs	r3, #0
 800971c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 8009720:	b12a      	cbz	r2, 800972e <rclc_executor_init+0xae>
 8009722:	6962      	ldr	r2, [r4, #20]
 8009724:	b11a      	cbz	r2, 800972e <rclc_executor_init+0xae>
 8009726:	68e2      	ldr	r2, [r4, #12]
 8009728:	b10a      	cbz	r2, 800972e <rclc_executor_init+0xae>
 800972a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800972e:	2000      	movs	r0, #0
 8009730:	e000      	b.n	8009734 <rclc_executor_init+0xb4>
 8009732:	200b      	movs	r0, #11
 8009734:	b032      	add	sp, #200	@ 0xc8
 8009736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973a:	200b      	movs	r0, #11
 800973c:	4770      	bx	lr
 800973e:	200a      	movs	r0, #10
 8009740:	e7f8      	b.n	8009734 <rclc_executor_init+0xb4>
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	3b9aca00 	.word	0x3b9aca00
 800974c:	00000000 	.word	0x00000000
 8009750:	080184e8 	.word	0x080184e8
 8009754:	08009329 	.word	0x08009329

08009758 <rclc_executor_add_subscription>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800975e:	b338      	cbz	r0, 80097b0 <rclc_executor_add_subscription+0x58>
 8009760:	b331      	cbz	r1, 80097b0 <rclc_executor_add_subscription+0x58>
 8009762:	b32a      	cbz	r2, 80097b0 <rclc_executor_add_subscription+0x58>
 8009764:	b323      	cbz	r3, 80097b0 <rclc_executor_add_subscription+0x58>
 8009766:	4604      	mov	r4, r0
 8009768:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800976c:	42a8      	cmp	r0, r5
 800976e:	d301      	bcc.n	8009774 <rclc_executor_add_subscription+0x1c>
 8009770:	2001      	movs	r0, #1
 8009772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009774:	68a6      	ldr	r6, [r4, #8]
 8009776:	0187      	lsls	r7, r0, #6
 8009778:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800977c:	2500      	movs	r5, #0
 800977e:	55f5      	strb	r5, [r6, r7]
 8009780:	3001      	adds	r0, #1
 8009782:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009786:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800978a:	2301      	movs	r3, #1
 800978c:	f104 0518 	add.w	r5, r4, #24
 8009790:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009794:	f88c e001 	strb.w	lr, [ip, #1]
 8009798:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800979c:	6120      	str	r0, [r4, #16]
 800979e:	4628      	mov	r0, r5
 80097a0:	f007 fdd0 	bl	8011344 <rcl_wait_set_is_valid>
 80097a4:	b930      	cbnz	r0, 80097b4 <rclc_executor_add_subscription+0x5c>
 80097a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80097a8:	3301      	adds	r3, #1
 80097aa:	2000      	movs	r0, #0
 80097ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80097ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b0:	200b      	movs	r0, #11
 80097b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b4:	4628      	mov	r0, r5
 80097b6:	f007 fdcb 	bl	8011350 <rcl_wait_set_fini>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0f3      	beq.n	80097a6 <rclc_executor_add_subscription+0x4e>
 80097be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097c0 <rclc_executor_add_timer>:
 80097c0:	b300      	cbz	r0, 8009804 <rclc_executor_add_timer+0x44>
 80097c2:	b1f9      	cbz	r1, 8009804 <rclc_executor_add_timer+0x44>
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80097ca:	4293      	cmp	r3, r2
 80097cc:	4604      	mov	r4, r0
 80097ce:	d301      	bcc.n	80097d4 <rclc_executor_add_timer+0x14>
 80097d0:	2001      	movs	r0, #1
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	6880      	ldr	r0, [r0, #8]
 80097d6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 80097da:	019d      	lsls	r5, r3, #6
 80097dc:	6051      	str	r1, [r2, #4]
 80097de:	2102      	movs	r1, #2
 80097e0:	5341      	strh	r1, [r0, r5]
 80097e2:	3301      	adds	r3, #1
 80097e4:	2000      	movs	r0, #0
 80097e6:	2101      	movs	r1, #1
 80097e8:	f104 0518 	add.w	r5, r4, #24
 80097ec:	62d0      	str	r0, [r2, #44]	@ 0x2c
 80097ee:	8711      	strh	r1, [r2, #56]	@ 0x38
 80097f0:	4628      	mov	r0, r5
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	f007 fda6 	bl	8011344 <rcl_wait_set_is_valid>
 80097f8:	b930      	cbnz	r0, 8009808 <rclc_executor_add_timer+0x48>
 80097fa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80097fc:	3301      	adds	r3, #1
 80097fe:	2000      	movs	r0, #0
 8009800:	6523      	str	r3, [r4, #80]	@ 0x50
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	200b      	movs	r0, #11
 8009806:	4770      	bx	lr
 8009808:	4628      	mov	r0, r5
 800980a:	f007 fda1 	bl	8011350 <rcl_wait_set_fini>
 800980e:	2800      	cmp	r0, #0
 8009810:	d0f3      	beq.n	80097fa <rclc_executor_add_timer+0x3a>
 8009812:	bd38      	pop	{r3, r4, r5, pc}

08009814 <rclc_executor_prepare>:
 8009814:	2800      	cmp	r0, #0
 8009816:	d044      	beq.n	80098a2 <rclc_executor_prepare+0x8e>
 8009818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800981a:	f100 0518 	add.w	r5, r0, #24
 800981e:	b09b      	sub	sp, #108	@ 0x6c
 8009820:	4604      	mov	r4, r0
 8009822:	4628      	mov	r0, r5
 8009824:	f007 fd8e 	bl	8011344 <rcl_wait_set_is_valid>
 8009828:	b110      	cbz	r0, 8009830 <rclc_executor_prepare+0x1c>
 800982a:	2000      	movs	r0, #0
 800982c:	b01b      	add	sp, #108	@ 0x6c
 800982e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009830:	4628      	mov	r0, r5
 8009832:	f007 fd8d 	bl	8011350 <rcl_wait_set_fini>
 8009836:	2800      	cmp	r0, #0
 8009838:	d130      	bne.n	800989c <rclc_executor_prepare+0x88>
 800983a:	a80c      	add	r0, sp, #48	@ 0x30
 800983c:	f007 fd6e 	bl	801131c <rcl_get_zero_initialized_wait_set>
 8009840:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009844:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009848:	46ae      	mov	lr, r5
 800984a:	6967      	ldr	r7, [r4, #20]
 800984c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009850:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009854:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009858:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800985c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009860:	f8dc 3000 	ldr.w	r3, [ip]
 8009864:	f8ce 3000 	str.w	r3, [lr]
 8009868:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800986a:	ae04      	add	r6, sp, #16
 800986c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	6862      	ldr	r2, [r4, #4]
 8009872:	6033      	str	r3, [r6, #0]
 8009874:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009876:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009878:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800987c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8009880:	e9cd 2100 	strd	r2, r1, [sp]
 8009884:	4628      	mov	r0, r5
 8009886:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009888:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800988a:	f008 f891 	bl	80119b0 <rcl_wait_set_init>
 800988e:	2800      	cmp	r0, #0
 8009890:	d0cc      	beq.n	800982c <rclc_executor_prepare+0x18>
 8009892:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009894:	f000 fafc 	bl	8009e90 <rcutils_reset_error>
 8009898:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800989a:	e7c7      	b.n	800982c <rclc_executor_prepare+0x18>
 800989c:	f000 faf8 	bl	8009e90 <rcutils_reset_error>
 80098a0:	e7cb      	b.n	800983a <rclc_executor_prepare+0x26>
 80098a2:	200b      	movs	r0, #11
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop

080098a8 <rclc_executor_spin_some>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	b083      	sub	sp, #12
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f000 8091 	beq.w	80099d6 <rclc_executor_spin_some+0x12e>
 80098b4:	4604      	mov	r4, r0
 80098b6:	6840      	ldr	r0, [r0, #4]
 80098b8:	4690      	mov	r8, r2
 80098ba:	4699      	mov	r9, r3
 80098bc:	f006 fa38 	bl	800fd30 <rcl_context_is_valid>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d037      	beq.n	8009934 <rclc_executor_spin_some+0x8c>
 80098c4:	4620      	mov	r0, r4
 80098c6:	f104 0718 	add.w	r7, r4, #24
 80098ca:	f7ff ffa3 	bl	8009814 <rclc_executor_prepare>
 80098ce:	4638      	mov	r0, r7
 80098d0:	f007 fe22 	bl	8011518 <rcl_wait_set_clear>
 80098d4:	4606      	mov	r6, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d177      	bne.n	80099ca <rclc_executor_spin_some+0x122>
 80098da:	68e3      	ldr	r3, [r4, #12]
 80098dc:	4605      	mov	r5, r0
 80098de:	b1eb      	cbz	r3, 800991c <rclc_executor_spin_some+0x74>
 80098e0:	68a1      	ldr	r1, [r4, #8]
 80098e2:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 80098e6:	01aa      	lsls	r2, r5, #6
 80098e8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80098ec:	b1b3      	cbz	r3, 800991c <rclc_executor_spin_some+0x74>
 80098ee:	5c8b      	ldrb	r3, [r1, r2]
 80098f0:	2b0a      	cmp	r3, #10
 80098f2:	d81f      	bhi.n	8009934 <rclc_executor_spin_some+0x8c>
 80098f4:	e8df f003 	tbb	[pc, r3]
 80098f8:	253e3434 	.word	0x253e3434
 80098fc:	06060625 	.word	0x06060625
 8009900:	525d      	.short	0x525d
 8009902:	48          	.byte	0x48
 8009903:	00          	.byte	0x00
 8009904:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009908:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800990c:	4638      	mov	r0, r7
 800990e:	f008 f959 	bl	8011bc4 <rcl_wait_set_add_service>
 8009912:	b9f8      	cbnz	r0, 8009954 <rclc_executor_spin_some+0xac>
 8009914:	68e3      	ldr	r3, [r4, #12]
 8009916:	3501      	adds	r5, #1
 8009918:	42ab      	cmp	r3, r5
 800991a:	d8e1      	bhi.n	80098e0 <rclc_executor_spin_some+0x38>
 800991c:	4642      	mov	r2, r8
 800991e:	464b      	mov	r3, r9
 8009920:	4638      	mov	r0, r7
 8009922:	f008 f97d 	bl	8011c20 <rcl_wait>
 8009926:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800992a:	2d00      	cmp	r5, #0
 800992c:	f000 80ab 	beq.w	8009a86 <rclc_executor_spin_some+0x1de>
 8009930:	2d01      	cmp	r5, #1
 8009932:	d055      	beq.n	80099e0 <rclc_executor_spin_some+0x138>
 8009934:	f000 faac 	bl	8009e90 <rcutils_reset_error>
 8009938:	2601      	movs	r6, #1
 800993a:	4630      	mov	r0, r6
 800993c:	b003      	add	sp, #12
 800993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009942:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009946:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800994a:	4638      	mov	r0, r7
 800994c:	f008 f90e 	bl	8011b6c <rcl_wait_set_add_client>
 8009950:	2800      	cmp	r0, #0
 8009952:	d0df      	beq.n	8009914 <rclc_executor_spin_some+0x6c>
 8009954:	9001      	str	r0, [sp, #4]
 8009956:	f000 fa9b 	bl	8009e90 <rcutils_reset_error>
 800995a:	9801      	ldr	r0, [sp, #4]
 800995c:	4606      	mov	r6, r0
 800995e:	e7ec      	b.n	800993a <rclc_executor_spin_some+0x92>
 8009960:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009964:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009968:	4638      	mov	r0, r7
 800996a:	f007 fda9 	bl	80114c0 <rcl_wait_set_add_subscription>
 800996e:	2800      	cmp	r0, #0
 8009970:	d0d0      	beq.n	8009914 <rclc_executor_spin_some+0x6c>
 8009972:	e7ef      	b.n	8009954 <rclc_executor_spin_some+0xac>
 8009974:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009978:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800997c:	4638      	mov	r0, r7
 800997e:	f008 f8c5 	bl	8011b0c <rcl_wait_set_add_timer>
 8009982:	2800      	cmp	r0, #0
 8009984:	d0c6      	beq.n	8009914 <rclc_executor_spin_some+0x6c>
 8009986:	e7e5      	b.n	8009954 <rclc_executor_spin_some+0xac>
 8009988:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800998c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009990:	4638      	mov	r0, r7
 8009992:	f008 f88f 	bl	8011ab4 <rcl_wait_set_add_guard_condition>
 8009996:	2800      	cmp	r0, #0
 8009998:	d0bc      	beq.n	8009914 <rclc_executor_spin_some+0x6c>
 800999a:	e7db      	b.n	8009954 <rclc_executor_spin_some+0xac>
 800999c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80099a0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80099a4:	3110      	adds	r1, #16
 80099a6:	4638      	mov	r0, r7
 80099a8:	f008 fe58 	bl	801265c <rcl_action_wait_set_add_action_server>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d0b1      	beq.n	8009914 <rclc_executor_spin_some+0x6c>
 80099b0:	e7d0      	b.n	8009954 <rclc_executor_spin_some+0xac>
 80099b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80099b6:	2300      	movs	r3, #0
 80099b8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80099bc:	3110      	adds	r1, #16
 80099be:	4638      	mov	r0, r7
 80099c0:	f008 fc3a 	bl	8012238 <rcl_action_wait_set_add_action_client>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d0a5      	beq.n	8009914 <rclc_executor_spin_some+0x6c>
 80099c8:	e7c4      	b.n	8009954 <rclc_executor_spin_some+0xac>
 80099ca:	f000 fa61 	bl	8009e90 <rcutils_reset_error>
 80099ce:	4630      	mov	r0, r6
 80099d0:	b003      	add	sp, #12
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	260b      	movs	r6, #11
 80099d8:	4630      	mov	r0, r6
 80099da:	b003      	add	sp, #12
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 80099e4:	4663      	mov	r3, ip
 80099e6:	4615      	mov	r5, r2
 80099e8:	b1ca      	cbz	r2, 8009a1e <rclc_executor_spin_some+0x176>
 80099ea:	2500      	movs	r5, #0
 80099ec:	46a8      	mov	r8, r5
 80099ee:	f240 1991 	movw	r9, #401	@ 0x191
 80099f2:	e00c      	b.n	8009a0e <rclc_executor_spin_some+0x166>
 80099f4:	f7ff fae0 	bl	8008fb8 <_rclc_check_for_new_data>
 80099f8:	f108 0801 	add.w	r8, r8, #1
 80099fc:	4605      	mov	r5, r0
 80099fe:	b108      	cbz	r0, 8009a04 <rclc_executor_spin_some+0x15c>
 8009a00:	4548      	cmp	r0, r9
 8009a02:	d13e      	bne.n	8009a82 <rclc_executor_spin_some+0x1da>
 8009a04:	68e2      	ldr	r2, [r4, #12]
 8009a06:	4590      	cmp	r8, r2
 8009a08:	f080 808b 	bcs.w	8009b22 <rclc_executor_spin_some+0x27a>
 8009a0c:	68a3      	ldr	r3, [r4, #8]
 8009a0e:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009a12:	469c      	mov	ip, r3
 8009a14:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009a18:	4639      	mov	r1, r7
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1ea      	bne.n	80099f4 <rclc_executor_spin_some+0x14c>
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4660      	mov	r0, ip
 8009a22:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8009a26:	4798      	blx	r3
 8009a28:	b358      	cbz	r0, 8009a82 <rclc_executor_spin_some+0x1da>
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	b34b      	cbz	r3, 8009a82 <rclc_executor_spin_some+0x1da>
 8009a2e:	f04f 0800 	mov.w	r8, #0
 8009a32:	f240 1991 	movw	r9, #401	@ 0x191
 8009a36:	e00a      	b.n	8009a4e <rclc_executor_spin_some+0x1a6>
 8009a38:	f7ff fb0c 	bl	8009054 <_rclc_take_new_data>
 8009a3c:	f108 0801 	add.w	r8, r8, #1
 8009a40:	4605      	mov	r5, r0
 8009a42:	b108      	cbz	r0, 8009a48 <rclc_executor_spin_some+0x1a0>
 8009a44:	4548      	cmp	r0, r9
 8009a46:	d11c      	bne.n	8009a82 <rclc_executor_spin_some+0x1da>
 8009a48:	68e3      	ldr	r3, [r4, #12]
 8009a4a:	4598      	cmp	r8, r3
 8009a4c:	d26f      	bcs.n	8009b2e <rclc_executor_spin_some+0x286>
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009a54:	4639      	mov	r1, r7
 8009a56:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009a5a:	2a00      	cmp	r2, #0
 8009a5c:	d1ec      	bne.n	8009a38 <rclc_executor_spin_some+0x190>
 8009a5e:	2700      	movs	r7, #0
 8009a60:	e009      	b.n	8009a76 <rclc_executor_spin_some+0x1ce>
 8009a62:	f7ff fc97 	bl	8009394 <_rclc_execute>
 8009a66:	3701      	adds	r7, #1
 8009a68:	4605      	mov	r5, r0
 8009a6a:	b950      	cbnz	r0, 8009a82 <rclc_executor_spin_some+0x1da>
 8009a6c:	68e3      	ldr	r3, [r4, #12]
 8009a6e:	429f      	cmp	r7, r3
 8009a70:	f4bf af63 	bcs.w	800993a <rclc_executor_spin_some+0x92>
 8009a74:	68a3      	ldr	r3, [r4, #8]
 8009a76:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 8009a7a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ef      	bne.n	8009a62 <rclc_executor_spin_some+0x1ba>
 8009a82:	462e      	mov	r6, r5
 8009a84:	e759      	b.n	800993a <rclc_executor_spin_some+0x92>
 8009a86:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8009a8a:	4663      	mov	r3, ip
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	d054      	beq.n	8009b3a <rclc_executor_spin_some+0x292>
 8009a90:	46a8      	mov	r8, r5
 8009a92:	f240 1991 	movw	r9, #401	@ 0x191
 8009a96:	e00b      	b.n	8009ab0 <rclc_executor_spin_some+0x208>
 8009a98:	f7ff fa8e 	bl	8008fb8 <_rclc_check_for_new_data>
 8009a9c:	f108 0801 	add.w	r8, r8, #1
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	b108      	cbz	r0, 8009aa8 <rclc_executor_spin_some+0x200>
 8009aa4:	4548      	cmp	r0, r9
 8009aa6:	d1ec      	bne.n	8009a82 <rclc_executor_spin_some+0x1da>
 8009aa8:	68e2      	ldr	r2, [r4, #12]
 8009aaa:	4590      	cmp	r8, r2
 8009aac:	d23c      	bcs.n	8009b28 <rclc_executor_spin_some+0x280>
 8009aae:	68a3      	ldr	r3, [r4, #8]
 8009ab0:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009ab4:	469c      	mov	ip, r3
 8009ab6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009aba:	4639      	mov	r1, r7
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1eb      	bne.n	8009a98 <rclc_executor_spin_some+0x1f0>
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4660      	mov	r0, ip
 8009ac4:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8009ac8:	4798      	blx	r3
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d0d9      	beq.n	8009a82 <rclc_executor_spin_some+0x1da>
 8009ace:	68e3      	ldr	r3, [r4, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0d6      	beq.n	8009a82 <rclc_executor_spin_some+0x1da>
 8009ad4:	f04f 0a00 	mov.w	sl, #0
 8009ad8:	f240 1891 	movw	r8, #401	@ 0x191
 8009adc:	f240 2959 	movw	r9, #601	@ 0x259
 8009ae0:	e013      	b.n	8009b0a <rclc_executor_spin_some+0x262>
 8009ae2:	f7ff fab7 	bl	8009054 <_rclc_take_new_data>
 8009ae6:	b118      	cbz	r0, 8009af0 <rclc_executor_spin_some+0x248>
 8009ae8:	4540      	cmp	r0, r8
 8009aea:	d001      	beq.n	8009af0 <rclc_executor_spin_some+0x248>
 8009aec:	4548      	cmp	r0, r9
 8009aee:	d122      	bne.n	8009b36 <rclc_executor_spin_some+0x28e>
 8009af0:	68a0      	ldr	r0, [r4, #8]
 8009af2:	4458      	add	r0, fp
 8009af4:	f7ff fc4e 	bl	8009394 <_rclc_execute>
 8009af8:	f10a 0a01 	add.w	sl, sl, #1
 8009afc:	4605      	mov	r5, r0
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d1bf      	bne.n	8009a82 <rclc_executor_spin_some+0x1da>
 8009b02:	68e3      	ldr	r3, [r4, #12]
 8009b04:	459a      	cmp	sl, r3
 8009b06:	f4bf af18 	bcs.w	800993a <rclc_executor_spin_some+0x92>
 8009b0a:	68a0      	ldr	r0, [r4, #8]
 8009b0c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8009b10:	4639      	mov	r1, r7
 8009b12:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009b16:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e1      	bne.n	8009ae2 <rclc_executor_spin_some+0x23a>
 8009b1e:	462e      	mov	r6, r5
 8009b20:	e70b      	b.n	800993a <rclc_executor_spin_some+0x92>
 8009b22:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009b26:	e77a      	b.n	8009a1e <rclc_executor_spin_some+0x176>
 8009b28:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009b2c:	e7c8      	b.n	8009ac0 <rclc_executor_spin_some+0x218>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0a7      	beq.n	8009a82 <rclc_executor_spin_some+0x1da>
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	e793      	b.n	8009a5e <rclc_executor_spin_some+0x1b6>
 8009b36:	4606      	mov	r6, r0
 8009b38:	e6ff      	b.n	800993a <rclc_executor_spin_some+0x92>
 8009b3a:	4615      	mov	r5, r2
 8009b3c:	e7c0      	b.n	8009ac0 <rclc_executor_spin_some+0x218>
 8009b3e:	bf00      	nop

08009b40 <rclc_executor_handle_counters_zero_init>:
 8009b40:	b130      	cbz	r0, 8009b50 <rclc_executor_handle_counters_zero_init+0x10>
 8009b42:	b508      	push	{r3, lr}
 8009b44:	2220      	movs	r2, #32
 8009b46:	2100      	movs	r1, #0
 8009b48:	f00d fd10 	bl	801756c <memset>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	bd08      	pop	{r3, pc}
 8009b50:	200b      	movs	r0, #11
 8009b52:	4770      	bx	lr

08009b54 <rclc_executor_handle_init>:
 8009b54:	b158      	cbz	r0, 8009b6e <rclc_executor_handle_init+0x1a>
 8009b56:	2300      	movs	r3, #0
 8009b58:	220b      	movs	r2, #11
 8009b5a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009b5e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8009b62:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8009b66:	8002      	strh	r2, [r0, #0]
 8009b68:	8703      	strh	r3, [r0, #56]	@ 0x38
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	4770      	bx	lr
 8009b6e:	200b      	movs	r0, #11
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop

08009b74 <rclc_support_init>:
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	b086      	sub	sp, #24
 8009b7a:	b3b8      	cbz	r0, 8009bec <rclc_support_init+0x78>
 8009b7c:	461c      	mov	r4, r3
 8009b7e:	b3ab      	cbz	r3, 8009bec <rclc_support_init+0x78>
 8009b80:	460f      	mov	r7, r1
 8009b82:	4690      	mov	r8, r2
 8009b84:	4606      	mov	r6, r0
 8009b86:	f006 fa3d 	bl	8010004 <rcl_get_zero_initialized_init_options>
 8009b8a:	f104 030c 	add.w	r3, r4, #12
 8009b8e:	9005      	str	r0, [sp, #20]
 8009b90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b94:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009b98:	a805      	add	r0, sp, #20
 8009b9a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009b9e:	f006 fa33 	bl	8010008 <rcl_init_options_init>
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	b9e0      	cbnz	r0, 8009be0 <rclc_support_init+0x6c>
 8009ba6:	ad02      	add	r5, sp, #8
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f006 f8bd 	bl	800fd28 <rcl_get_zero_initialized_context>
 8009bae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009bb2:	4633      	mov	r3, r6
 8009bb4:	e886 0003 	stmia.w	r6, {r0, r1}
 8009bb8:	aa05      	add	r2, sp, #20
 8009bba:	4641      	mov	r1, r8
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f006 f91d 	bl	800fdfc <rcl_init>
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	b9b8      	cbnz	r0, 8009bf6 <rclc_support_init+0x82>
 8009bc6:	60b4      	str	r4, [r6, #8]
 8009bc8:	4622      	mov	r2, r4
 8009bca:	f106 010c 	add.w	r1, r6, #12
 8009bce:	2003      	movs	r0, #3
 8009bd0:	f006 fffa 	bl	8010bc8 <rcl_clock_init>
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	b970      	cbnz	r0, 8009bf6 <rclc_support_init+0x82>
 8009bd8:	a805      	add	r0, sp, #20
 8009bda:	f006 fa71 	bl	80100c0 <rcl_init_options_fini>
 8009bde:	b108      	cbz	r0, 8009be4 <rclc_support_init+0x70>
 8009be0:	f000 f956 	bl	8009e90 <rcutils_reset_error>
 8009be4:	4628      	mov	r0, r5
 8009be6:	b006      	add	sp, #24
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bec:	250b      	movs	r5, #11
 8009bee:	4628      	mov	r0, r5
 8009bf0:	b006      	add	sp, #24
 8009bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf6:	f000 f94b 	bl	8009e90 <rcutils_reset_error>
 8009bfa:	a805      	add	r0, sp, #20
 8009bfc:	f006 fa60 	bl	80100c0 <rcl_init_options_fini>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d0ef      	beq.n	8009be4 <rclc_support_init+0x70>
 8009c04:	e7ec      	b.n	8009be0 <rclc_support_init+0x6c>
 8009c06:	bf00      	nop

08009c08 <rclc_node_init_default>:
 8009c08:	b3b8      	cbz	r0, 8009c7a <rclc_node_init_default+0x72>
 8009c0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c0e:	460d      	mov	r5, r1
 8009c10:	b0a1      	sub	sp, #132	@ 0x84
 8009c12:	b329      	cbz	r1, 8009c60 <rclc_node_init_default+0x58>
 8009c14:	4616      	mov	r6, r2
 8009c16:	b31a      	cbz	r2, 8009c60 <rclc_node_init_default+0x58>
 8009c18:	461f      	mov	r7, r3
 8009c1a:	b30b      	cbz	r3, 8009c60 <rclc_node_init_default+0x58>
 8009c1c:	f10d 0810 	add.w	r8, sp, #16
 8009c20:	4604      	mov	r4, r0
 8009c22:	4640      	mov	r0, r8
 8009c24:	f006 fad2 	bl	80101cc <rcl_get_zero_initialized_node>
 8009c28:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009c2c:	f10d 0918 	add.w	r9, sp, #24
 8009c30:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c34:	4648      	mov	r0, r9
 8009c36:	f006 fc71 	bl	801051c <rcl_node_get_default_options>
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	f006 fac6 	bl	80101cc <rcl_get_zero_initialized_node>
 8009c40:	f8cd 9000 	str.w	r9, [sp]
 8009c44:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009c48:	463b      	mov	r3, r7
 8009c4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c4e:	4632      	mov	r2, r6
 8009c50:	4629      	mov	r1, r5
 8009c52:	4620      	mov	r0, r4
 8009c54:	f006 fac4 	bl	80101e0 <rcl_node_init>
 8009c58:	b930      	cbnz	r0, 8009c68 <rclc_node_init_default+0x60>
 8009c5a:	b021      	add	sp, #132	@ 0x84
 8009c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c60:	200b      	movs	r0, #11
 8009c62:	b021      	add	sp, #132	@ 0x84
 8009c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c68:	9003      	str	r0, [sp, #12]
 8009c6a:	f000 f911 	bl	8009e90 <rcutils_reset_error>
 8009c6e:	f000 f90f 	bl	8009e90 <rcutils_reset_error>
 8009c72:	9803      	ldr	r0, [sp, #12]
 8009c74:	b021      	add	sp, #132	@ 0x84
 8009c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c7a:	200b      	movs	r0, #11
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop

08009c80 <rclc_publisher_init_default>:
 8009c80:	b368      	cbz	r0, 8009cde <rclc_publisher_init_default+0x5e>
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	460d      	mov	r5, r1
 8009c88:	b0a0      	sub	sp, #128	@ 0x80
 8009c8a:	b321      	cbz	r1, 8009cd6 <rclc_publisher_init_default+0x56>
 8009c8c:	4616      	mov	r6, r2
 8009c8e:	b312      	cbz	r2, 8009cd6 <rclc_publisher_init_default+0x56>
 8009c90:	461f      	mov	r7, r3
 8009c92:	b303      	cbz	r3, 8009cd6 <rclc_publisher_init_default+0x56>
 8009c94:	4604      	mov	r4, r0
 8009c96:	f7ff f87f 	bl	8008d98 <rcl_get_zero_initialized_publisher>
 8009c9a:	f10d 0810 	add.w	r8, sp, #16
 8009c9e:	6020      	str	r0, [r4, #0]
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	f7ff f917 	bl	8008ed4 <rcl_publisher_get_default_options>
 8009ca6:	490f      	ldr	r1, [pc, #60]	@ (8009ce4 <rclc_publisher_init_default+0x64>)
 8009ca8:	2250      	movs	r2, #80	@ 0x50
 8009caa:	4640      	mov	r0, r8
 8009cac:	f00d fd39 	bl	8017722 <memcpy>
 8009cb0:	f8cd 8000 	str.w	r8, [sp]
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff f872 	bl	8008da4 <rcl_publisher_init>
 8009cc0:	b910      	cbnz	r0, 8009cc8 <rclc_publisher_init_default+0x48>
 8009cc2:	b020      	add	sp, #128	@ 0x80
 8009cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc8:	9003      	str	r0, [sp, #12]
 8009cca:	f000 f8e1 	bl	8009e90 <rcutils_reset_error>
 8009cce:	9803      	ldr	r0, [sp, #12]
 8009cd0:	b020      	add	sp, #128	@ 0x80
 8009cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd6:	200b      	movs	r0, #11
 8009cd8:	b020      	add	sp, #128	@ 0x80
 8009cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cde:	200b      	movs	r0, #11
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	08018578 	.word	0x08018578

08009ce8 <rclc_subscription_init_default>:
 8009ce8:	b368      	cbz	r0, 8009d46 <rclc_subscription_init_default+0x5e>
 8009cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cee:	460d      	mov	r5, r1
 8009cf0:	b0a2      	sub	sp, #136	@ 0x88
 8009cf2:	b321      	cbz	r1, 8009d3e <rclc_subscription_init_default+0x56>
 8009cf4:	4616      	mov	r6, r2
 8009cf6:	b312      	cbz	r2, 8009d3e <rclc_subscription_init_default+0x56>
 8009cf8:	461f      	mov	r7, r3
 8009cfa:	b303      	cbz	r3, 8009d3e <rclc_subscription_init_default+0x56>
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	f006 fe17 	bl	8010930 <rcl_get_zero_initialized_subscription>
 8009d02:	f10d 0810 	add.w	r8, sp, #16
 8009d06:	6020      	str	r0, [r4, #0]
 8009d08:	4640      	mov	r0, r8
 8009d0a:	f006 febf 	bl	8010a8c <rcl_subscription_get_default_options>
 8009d0e:	490f      	ldr	r1, [pc, #60]	@ (8009d4c <rclc_subscription_init_default+0x64>)
 8009d10:	2250      	movs	r2, #80	@ 0x50
 8009d12:	4640      	mov	r0, r8
 8009d14:	f00d fd05 	bl	8017722 <memcpy>
 8009d18:	f8cd 8000 	str.w	r8, [sp]
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	4632      	mov	r2, r6
 8009d20:	4629      	mov	r1, r5
 8009d22:	4620      	mov	r0, r4
 8009d24:	f006 fe0a 	bl	801093c <rcl_subscription_init>
 8009d28:	b910      	cbnz	r0, 8009d30 <rclc_subscription_init_default+0x48>
 8009d2a:	b022      	add	sp, #136	@ 0x88
 8009d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d30:	9003      	str	r0, [sp, #12]
 8009d32:	f000 f8ad 	bl	8009e90 <rcutils_reset_error>
 8009d36:	9803      	ldr	r0, [sp, #12]
 8009d38:	b022      	add	sp, #136	@ 0x88
 8009d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d3e:	200b      	movs	r0, #11
 8009d40:	b022      	add	sp, #136	@ 0x88
 8009d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d46:	200b      	movs	r0, #11
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	080185c8 	.word	0x080185c8

08009d50 <rclc_timer_init_default2>:
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	b08c      	sub	sp, #48	@ 0x30
 8009d56:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8009d5a:	b330      	cbz	r0, 8009daa <rclc_timer_init_default2+0x5a>
 8009d5c:	460e      	mov	r6, r1
 8009d5e:	b321      	cbz	r1, 8009daa <rclc_timer_init_default2+0x5a>
 8009d60:	4690      	mov	r8, r2
 8009d62:	461f      	mov	r7, r3
 8009d64:	4605      	mov	r5, r0
 8009d66:	f007 f90f 	bl	8010f88 <rcl_get_zero_initialized_timer>
 8009d6a:	9408      	str	r4, [sp, #32]
 8009d6c:	68b4      	ldr	r4, [r6, #8]
 8009d6e:	6028      	str	r0, [r5, #0]
 8009d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d72:	f10d 0c0c 	add.w	ip, sp, #12
 8009d76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	f8cc 3000 	str.w	r3, [ip]
 8009d80:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d82:	9302      	str	r3, [sp, #8]
 8009d84:	e9cd 8700 	strd	r8, r7, [sp]
 8009d88:	4628      	mov	r0, r5
 8009d8a:	4632      	mov	r2, r6
 8009d8c:	f106 010c 	add.w	r1, r6, #12
 8009d90:	f007 f902 	bl	8010f98 <rcl_timer_init2>
 8009d94:	b910      	cbnz	r0, 8009d9c <rclc_timer_init_default2+0x4c>
 8009d96:	b00c      	add	sp, #48	@ 0x30
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009d9e:	f000 f877 	bl	8009e90 <rcutils_reset_error>
 8009da2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009da4:	b00c      	add	sp, #48	@ 0x30
 8009da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009daa:	200b      	movs	r0, #11
 8009dac:	b00c      	add	sp, #48	@ 0x30
 8009dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db2:	bf00      	nop

08009db4 <__default_zero_allocate>:
 8009db4:	f00c befc 	b.w	8016bb0 <calloc>

08009db8 <__default_reallocate>:
 8009db8:	f00d b89a 	b.w	8016ef0 <realloc>

08009dbc <__default_deallocate>:
 8009dbc:	f00c bf76 	b.w	8016cac <free>

08009dc0 <__default_allocate>:
 8009dc0:	f00c bf6c 	b.w	8016c9c <malloc>

08009dc4 <rcutils_get_zero_initialized_allocator>:
 8009dc4:	b510      	push	{r4, lr}
 8009dc6:	4c05      	ldr	r4, [pc, #20]	@ (8009ddc <rcutils_get_zero_initialized_allocator+0x18>)
 8009dc8:	4686      	mov	lr, r0
 8009dca:	4684      	mov	ip, r0
 8009dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	f8cc 3000 	str.w	r3, [ip]
 8009dd8:	4670      	mov	r0, lr
 8009dda:	bd10      	pop	{r4, pc}
 8009ddc:	08018618 	.word	0x08018618

08009de0 <rcutils_get_default_allocator>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	4c05      	ldr	r4, [pc, #20]	@ (8009df8 <rcutils_get_default_allocator+0x18>)
 8009de4:	4686      	mov	lr, r0
 8009de6:	4684      	mov	ip, r0
 8009de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	f8cc 3000 	str.w	r3, [ip]
 8009df4:	4670      	mov	r0, lr
 8009df6:	bd10      	pop	{r4, pc}
 8009df8:	20000014 	.word	0x20000014

08009dfc <rcutils_set_default_allocator>:
 8009dfc:	b1a8      	cbz	r0, 8009e2a <rcutils_set_default_allocator+0x2e>
 8009dfe:	6802      	ldr	r2, [r0, #0]
 8009e00:	b1a2      	cbz	r2, 8009e2c <rcutils_set_default_allocator+0x30>
 8009e02:	6841      	ldr	r1, [r0, #4]
 8009e04:	b1a1      	cbz	r1, 8009e30 <rcutils_set_default_allocator+0x34>
 8009e06:	b410      	push	{r4}
 8009e08:	68c4      	ldr	r4, [r0, #12]
 8009e0a:	b164      	cbz	r4, 8009e26 <rcutils_set_default_allocator+0x2a>
 8009e0c:	6880      	ldr	r0, [r0, #8]
 8009e0e:	b138      	cbz	r0, 8009e20 <rcutils_set_default_allocator+0x24>
 8009e10:	4b08      	ldr	r3, [pc, #32]	@ (8009e34 <rcutils_set_default_allocator+0x38>)
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	2200      	movs	r2, #0
 8009e16:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8009e1a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8009e1e:	2001      	movs	r0, #1
 8009e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	4620      	mov	r0, r4
 8009e28:	e7fa      	b.n	8009e20 <rcutils_set_default_allocator+0x24>
 8009e2a:	4770      	bx	lr
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4770      	bx	lr
 8009e30:	4608      	mov	r0, r1
 8009e32:	4770      	bx	lr
 8009e34:	20000014 	.word	0x20000014

08009e38 <rcutils_allocator_is_valid>:
 8009e38:	b158      	cbz	r0, 8009e52 <rcutils_allocator_is_valid+0x1a>
 8009e3a:	6803      	ldr	r3, [r0, #0]
 8009e3c:	b143      	cbz	r3, 8009e50 <rcutils_allocator_is_valid+0x18>
 8009e3e:	6843      	ldr	r3, [r0, #4]
 8009e40:	b133      	cbz	r3, 8009e50 <rcutils_allocator_is_valid+0x18>
 8009e42:	68c3      	ldr	r3, [r0, #12]
 8009e44:	b123      	cbz	r3, 8009e50 <rcutils_allocator_is_valid+0x18>
 8009e46:	6880      	ldr	r0, [r0, #8]
 8009e48:	3800      	subs	r0, #0
 8009e4a:	bf18      	it	ne
 8009e4c:	2001      	movne	r0, #1
 8009e4e:	4770      	bx	lr
 8009e50:	4618      	mov	r0, r3
 8009e52:	4770      	bx	lr

08009e54 <rcutils_error_is_set>:
 8009e54:	4b01      	ldr	r3, [pc, #4]	@ (8009e5c <rcutils_error_is_set+0x8>)
 8009e56:	7818      	ldrb	r0, [r3, #0]
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	2000a078 	.word	0x2000a078

08009e60 <rcutils_get_error_string>:
 8009e60:	4b06      	ldr	r3, [pc, #24]	@ (8009e7c <rcutils_get_error_string+0x1c>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	b13b      	cbz	r3, 8009e76 <rcutils_get_error_string+0x16>
 8009e66:	4b06      	ldr	r3, [pc, #24]	@ (8009e80 <rcutils_get_error_string+0x20>)
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	b90a      	cbnz	r2, 8009e70 <rcutils_get_error_string+0x10>
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	701a      	strb	r2, [r3, #0]
 8009e70:	4b04      	ldr	r3, [pc, #16]	@ (8009e84 <rcutils_get_error_string+0x24>)
 8009e72:	7818      	ldrb	r0, [r3, #0]
 8009e74:	4770      	bx	lr
 8009e76:	4b04      	ldr	r3, [pc, #16]	@ (8009e88 <rcutils_get_error_string+0x28>)
 8009e78:	7818      	ldrb	r0, [r3, #0]
 8009e7a:	4770      	bx	lr
 8009e7c:	2000a078 	.word	0x2000a078
 8009e80:	2000a07d 	.word	0x2000a07d
 8009e84:	2000a07c 	.word	0x2000a07c
 8009e88:	0801862c 	.word	0x0801862c
 8009e8c:	00000000 	.word	0x00000000

08009e90 <rcutils_reset_error>:
 8009e90:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8009eb0 <rcutils_reset_error+0x20>
 8009e94:	4a08      	ldr	r2, [pc, #32]	@ (8009eb8 <rcutils_reset_error+0x28>)
 8009e96:	4809      	ldr	r0, [pc, #36]	@ (8009ebc <rcutils_reset_error+0x2c>)
 8009e98:	4909      	ldr	r1, [pc, #36]	@ (8009ec0 <rcutils_reset_error+0x30>)
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	8013      	strh	r3, [r2, #0]
 8009e9e:	ed82 7b02 	vstr	d7, [r2, #8]
 8009ea2:	4a08      	ldr	r2, [pc, #32]	@ (8009ec4 <rcutils_reset_error+0x34>)
 8009ea4:	7003      	strb	r3, [r0, #0]
 8009ea6:	700b      	strb	r3, [r1, #0]
 8009ea8:	7013      	strb	r3, [r2, #0]
 8009eaa:	4770      	bx	lr
 8009eac:	f3af 8000 	nop.w
	...
 8009eb8:	2000a080 	.word	0x2000a080
 8009ebc:	2000a07d 	.word	0x2000a07d
 8009ec0:	2000a07c 	.word	0x2000a07c
 8009ec4:	2000a078 	.word	0x2000a078

08009ec8 <rcutils_system_time_now>:
 8009ec8:	b318      	cbz	r0, 8009f12 <rcutils_system_time_now+0x4a>
 8009eca:	b570      	push	{r4, r5, r6, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4669      	mov	r1, sp
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	f7f7 fd7c 	bl	80019d0 <clock_gettime>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	db17      	blt.n	8009f0c <rcutils_system_time_now+0x44>
 8009edc:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	db13      	blt.n	8009f0c <rcutils_system_time_now+0x44>
 8009ee4:	9d02      	ldr	r5, [sp, #8]
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	db0d      	blt.n	8009f06 <rcutils_system_time_now+0x3e>
 8009eea:	4e0b      	ldr	r6, [pc, #44]	@ (8009f18 <rcutils_system_time_now+0x50>)
 8009eec:	fba3 3206 	umull	r3, r2, r3, r6
 8009ef0:	195b      	adds	r3, r3, r5
 8009ef2:	fb06 2201 	mla	r2, r6, r1, r2
 8009ef6:	f04f 0000 	mov.w	r0, #0
 8009efa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8009efe:	e9c4 3200 	strd	r3, r2, [r4]
 8009f02:	b004      	add	sp, #16
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
 8009f06:	ea53 0201 	orrs.w	r2, r3, r1
 8009f0a:	d1ee      	bne.n	8009eea <rcutils_system_time_now+0x22>
 8009f0c:	2002      	movs	r0, #2
 8009f0e:	b004      	add	sp, #16
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	200b      	movs	r0, #11
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	3b9aca00 	.word	0x3b9aca00

08009f1c <rcutils_steady_time_now>:
 8009f1c:	b318      	cbz	r0, 8009f66 <rcutils_steady_time_now+0x4a>
 8009f1e:	b570      	push	{r4, r5, r6, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	4604      	mov	r4, r0
 8009f24:	4669      	mov	r1, sp
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7f7 fd52 	bl	80019d0 <clock_gettime>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	db17      	blt.n	8009f60 <rcutils_steady_time_now+0x44>
 8009f30:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009f34:	2900      	cmp	r1, #0
 8009f36:	db13      	blt.n	8009f60 <rcutils_steady_time_now+0x44>
 8009f38:	9d02      	ldr	r5, [sp, #8]
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	db0d      	blt.n	8009f5a <rcutils_steady_time_now+0x3e>
 8009f3e:	4e0b      	ldr	r6, [pc, #44]	@ (8009f6c <rcutils_steady_time_now+0x50>)
 8009f40:	fba3 3206 	umull	r3, r2, r3, r6
 8009f44:	195b      	adds	r3, r3, r5
 8009f46:	fb06 2201 	mla	r2, r6, r1, r2
 8009f4a:	f04f 0000 	mov.w	r0, #0
 8009f4e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8009f52:	e9c4 3200 	strd	r3, r2, [r4]
 8009f56:	b004      	add	sp, #16
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	ea53 0201 	orrs.w	r2, r3, r1
 8009f5e:	d1ee      	bne.n	8009f3e <rcutils_steady_time_now+0x22>
 8009f60:	2002      	movs	r0, #2
 8009f62:	b004      	add	sp, #16
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	200b      	movs	r0, #11
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	3b9aca00 	.word	0x3b9aca00

08009f70 <rmw_get_default_publisher_options>:
 8009f70:	2200      	movs	r2, #0
 8009f72:	6002      	str	r2, [r0, #0]
 8009f74:	7102      	strb	r2, [r0, #4]
 8009f76:	4770      	bx	lr

08009f78 <rmw_uros_set_custom_transport>:
 8009f78:	b470      	push	{r4, r5, r6}
 8009f7a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8009f7e:	b162      	cbz	r2, 8009f9a <rmw_uros_set_custom_transport+0x22>
 8009f80:	b15b      	cbz	r3, 8009f9a <rmw_uros_set_custom_transport+0x22>
 8009f82:	b155      	cbz	r5, 8009f9a <rmw_uros_set_custom_transport+0x22>
 8009f84:	b14e      	cbz	r6, 8009f9a <rmw_uros_set_custom_transport+0x22>
 8009f86:	4c06      	ldr	r4, [pc, #24]	@ (8009fa0 <rmw_uros_set_custom_transport+0x28>)
 8009f88:	7020      	strb	r0, [r4, #0]
 8009f8a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009f8e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009f92:	6166      	str	r6, [r4, #20]
 8009f94:	2000      	movs	r0, #0
 8009f96:	bc70      	pop	{r4, r5, r6}
 8009f98:	4770      	bx	lr
 8009f9a:	200b      	movs	r0, #11
 8009f9c:	bc70      	pop	{r4, r5, r6}
 8009f9e:	4770      	bx	lr
 8009fa0:	2000a090 	.word	0x2000a090

08009fa4 <rmw_uros_ping_agent>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	4b22      	ldr	r3, [pc, #136]	@ (800a030 <rmw_uros_ping_agent+0x8c>)
 8009fa8:	7b1a      	ldrb	r2, [r3, #12]
 8009faa:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8009fae:	4605      	mov	r5, r0
 8009fb0:	460e      	mov	r6, r1
 8009fb2:	b10a      	cbz	r2, 8009fb8 <rmw_uros_ping_agent+0x14>
 8009fb4:	681c      	ldr	r4, [r3, #0]
 8009fb6:	b9bc      	cbnz	r4, 8009fe8 <rmw_uros_ping_agent+0x44>
 8009fb8:	4b1e      	ldr	r3, [pc, #120]	@ (800a034 <rmw_uros_ping_agent+0x90>)
 8009fba:	781a      	ldrb	r2, [r3, #0]
 8009fbc:	6918      	ldr	r0, [r3, #16]
 8009fbe:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	92a3      	str	r2, [sp, #652]	@ 0x28c
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	909c      	str	r0, [sp, #624]	@ 0x270
 8009fcc:	6958      	ldr	r0, [r3, #20]
 8009fce:	929b      	str	r2, [sp, #620]	@ 0x26c
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	909d      	str	r0, [sp, #628]	@ 0x274
 8009fd4:	466a      	mov	r2, sp
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	939a      	str	r3, [sp, #616]	@ 0x268
 8009fda:	f000 f9cd 	bl	800a378 <rmw_uxrce_transport_init>
 8009fde:	b198      	cbz	r0, 800a008 <rmw_uros_ping_agent+0x64>
 8009fe0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8009fe4:	bd70      	pop	{r4, r5, r6, pc}
 8009fe6:	b9f0      	cbnz	r0, 800a026 <rmw_uros_ping_agent+0x82>
 8009fe8:	68a0      	ldr	r0, [r4, #8]
 8009fea:	4632      	mov	r2, r6
 8009fec:	4629      	mov	r1, r5
 8009fee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009ff2:	f002 fc2d 	bl	800c850 <uxr_ping_agent_session>
 8009ff6:	6864      	ldr	r4, [r4, #4]
 8009ff8:	2c00      	cmp	r4, #0
 8009ffa:	d1f4      	bne.n	8009fe6 <rmw_uros_ping_agent+0x42>
 8009ffc:	f080 0001 	eor.w	r0, r0, #1
 800a000:	b2c0      	uxtb	r0, r0
 800a002:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	4632      	mov	r2, r6
 800a00a:	4629      	mov	r1, r5
 800a00c:	a89e      	add	r0, sp, #632	@ 0x278
 800a00e:	f002 fc6f 	bl	800c8f0 <uxr_ping_agent_attempts>
 800a012:	4604      	mov	r4, r0
 800a014:	4668      	mov	r0, sp
 800a016:	f002 fbe9 	bl	800c7ec <uxr_close_custom_transport>
 800a01a:	f084 0001 	eor.w	r0, r4, #1
 800a01e:	b2c0      	uxtb	r0, r0
 800a020:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a024:	bd70      	pop	{r4, r5, r6, pc}
 800a026:	2000      	movs	r0, #0
 800a028:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a02c:	bd70      	pop	{r4, r5, r6, pc}
 800a02e:	bf00      	nop
 800a030:	2000e9f0 	.word	0x2000e9f0
 800a034:	2000a090 	.word	0x2000a090

0800a038 <flush_session>:
 800a038:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a03a:	f003 b9a9 	b.w	800d390 <uxr_run_session_until_confirm_delivery>
 800a03e:	bf00      	nop

0800a040 <rmw_publish>:
 800a040:	2800      	cmp	r0, #0
 800a042:	d053      	beq.n	800a0ec <rmw_publish+0xac>
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	460d      	mov	r5, r1
 800a048:	b08e      	sub	sp, #56	@ 0x38
 800a04a:	2900      	cmp	r1, #0
 800a04c:	d04b      	beq.n	800a0e6 <rmw_publish+0xa6>
 800a04e:	4604      	mov	r4, r0
 800a050:	6800      	ldr	r0, [r0, #0]
 800a052:	f000 fd0d 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 800a056:	2800      	cmp	r0, #0
 800a058:	d045      	beq.n	800a0e6 <rmw_publish+0xa6>
 800a05a:	6866      	ldr	r6, [r4, #4]
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	d042      	beq.n	800a0e6 <rmw_publish+0xa6>
 800a060:	69b4      	ldr	r4, [r6, #24]
 800a062:	4628      	mov	r0, r5
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	4798      	blx	r3
 800a068:	69f3      	ldr	r3, [r6, #28]
 800a06a:	9005      	str	r0, [sp, #20]
 800a06c:	b113      	cbz	r3, 800a074 <rmw_publish+0x34>
 800a06e:	a805      	add	r0, sp, #20
 800a070:	4798      	blx	r3
 800a072:	9805      	ldr	r0, [sp, #20]
 800a074:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	9000      	str	r0, [sp, #0]
 800a07c:	6972      	ldr	r2, [r6, #20]
 800a07e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a080:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a084:	ab06      	add	r3, sp, #24
 800a086:	f004 fbf5 	bl	800e874 <uxr_prepare_output_stream>
 800a08a:	b1d8      	cbz	r0, 800a0c4 <rmw_publish+0x84>
 800a08c:	68a3      	ldr	r3, [r4, #8]
 800a08e:	a906      	add	r1, sp, #24
 800a090:	4628      	mov	r0, r5
 800a092:	4798      	blx	r3
 800a094:	6a33      	ldr	r3, [r6, #32]
 800a096:	4604      	mov	r4, r0
 800a098:	b10b      	cbz	r3, 800a09e <rmw_publish+0x5e>
 800a09a:	a806      	add	r0, sp, #24
 800a09c:	4798      	blx	r3
 800a09e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a0a2:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	6910      	ldr	r0, [r2, #16]
 800a0aa:	d021      	beq.n	800a0f0 <rmw_publish+0xb0>
 800a0ac:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a0ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a0b2:	f003 f96d 	bl	800d390 <uxr_run_session_until_confirm_delivery>
 800a0b6:	4004      	ands	r4, r0
 800a0b8:	b2e4      	uxtb	r4, r4
 800a0ba:	f084 0001 	eor.w	r0, r4, #1
 800a0be:	b2c0      	uxtb	r0, r0
 800a0c0:	b00e      	add	sp, #56	@ 0x38
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a0c8:	6918      	ldr	r0, [r3, #16]
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a0fc <rmw_publish+0xbc>)
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	9602      	str	r6, [sp, #8]
 800a0d4:	6972      	ldr	r2, [r6, #20]
 800a0d6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a0d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a0dc:	ab06      	add	r3, sp, #24
 800a0de:	f004 fbf9 	bl	800e8d4 <uxr_prepare_output_stream_fragmented>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d1d2      	bne.n	800a08c <rmw_publish+0x4c>
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	b00e      	add	sp, #56	@ 0x38
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	4770      	bx	lr
 800a0f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a0f4:	f002 fdb4 	bl	800cc60 <uxr_flash_output_streams>
 800a0f8:	e7df      	b.n	800a0ba <rmw_publish+0x7a>
 800a0fa:	bf00      	nop
 800a0fc:	0800a039 	.word	0x0800a039

0800a100 <rmw_create_publisher>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	b087      	sub	sp, #28
 800a106:	2800      	cmp	r0, #0
 800a108:	f000 80c9 	beq.w	800a29e <rmw_create_publisher+0x19e>
 800a10c:	460f      	mov	r7, r1
 800a10e:	2900      	cmp	r1, #0
 800a110:	f000 80c5 	beq.w	800a29e <rmw_create_publisher+0x19e>
 800a114:	4604      	mov	r4, r0
 800a116:	6800      	ldr	r0, [r0, #0]
 800a118:	4615      	mov	r5, r2
 800a11a:	461e      	mov	r6, r3
 800a11c:	f000 fca8 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 800a120:	2800      	cmp	r0, #0
 800a122:	f000 80bc 	beq.w	800a29e <rmw_create_publisher+0x19e>
 800a126:	2d00      	cmp	r5, #0
 800a128:	f000 80b9 	beq.w	800a29e <rmw_create_publisher+0x19e>
 800a12c:	782b      	ldrb	r3, [r5, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 80b5 	beq.w	800a29e <rmw_create_publisher+0x19e>
 800a134:	2e00      	cmp	r6, #0
 800a136:	f000 80b2 	beq.w	800a29e <rmw_create_publisher+0x19e>
 800a13a:	485c      	ldr	r0, [pc, #368]	@ (800a2ac <rmw_create_publisher+0x1ac>)
 800a13c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a140:	f009 fa04 	bl	801354c <get_memory>
 800a144:	2800      	cmp	r0, #0
 800a146:	f000 80aa 	beq.w	800a29e <rmw_create_publisher+0x19e>
 800a14a:	6884      	ldr	r4, [r0, #8]
 800a14c:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a150:	f009 fa82 	bl	8013658 <rmw_get_implementation_identifier>
 800a154:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a158:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a15c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a160:	4628      	mov	r0, r5
 800a162:	f7f6 f8b5 	bl	80002d0 <strlen>
 800a166:	3001      	adds	r0, #1
 800a168:	283c      	cmp	r0, #60	@ 0x3c
 800a16a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800a16e:	f200 808f 	bhi.w	800a290 <rmw_create_publisher+0x190>
 800a172:	4a4f      	ldr	r2, [pc, #316]	@ (800a2b0 <rmw_create_publisher+0x1b0>)
 800a174:	462b      	mov	r3, r5
 800a176:	213c      	movs	r1, #60	@ 0x3c
 800a178:	4650      	mov	r0, sl
 800a17a:	f00d f883 	bl	8017284 <sniprintf>
 800a17e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a182:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a184:	4631      	mov	r1, r6
 800a186:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a18a:	2250      	movs	r2, #80	@ 0x50
 800a18c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a190:	f00d fac7 	bl	8017722 <memcpy>
 800a194:	7a33      	ldrb	r3, [r6, #8]
 800a196:	4947      	ldr	r1, [pc, #284]	@ (800a2b4 <rmw_create_publisher+0x1b4>)
 800a198:	2b02      	cmp	r3, #2
 800a19a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a19e:	bf0c      	ite	eq
 800a1a0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a1a4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a1a8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f000 fc6b 	bl	800aa8c <get_message_typesupport_handle>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d06a      	beq.n	800a290 <rmw_create_publisher+0x190>
 800a1ba:	6842      	ldr	r2, [r0, #4]
 800a1bc:	61a2      	str	r2, [r4, #24]
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	d066      	beq.n	800a290 <rmw_create_publisher+0x190>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	4633      	mov	r3, r6
 800a1c6:	4648      	mov	r0, r9
 800a1c8:	f009 fca2 	bl	8013b10 <create_topic>
 800a1cc:	6260      	str	r0, [r4, #36]	@ 0x24
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d062      	beq.n	800a298 <rmw_create_publisher+0x198>
 800a1d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1da:	2103      	movs	r1, #3
 800a1dc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a1e0:	1c42      	adds	r2, r0, #1
 800a1e2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a1e6:	f002 fb05 	bl	800c7f4 <uxr_object_id>
 800a1ea:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a1ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1f2:	6120      	str	r0, [r4, #16]
 800a1f4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a1f8:	6910      	ldr	r0, [r2, #16]
 800a1fa:	2506      	movs	r5, #6
 800a1fc:	9500      	str	r5, [sp, #0]
 800a1fe:	6819      	ldr	r1, [r3, #0]
 800a200:	6922      	ldr	r2, [r4, #16]
 800a202:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a206:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a20a:	f002 f909 	bl	800c420 <uxr_buffer_create_publisher_bin>
 800a20e:	4602      	mov	r2, r0
 800a210:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a214:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a218:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a21c:	f000 fba2 	bl	800a964 <run_xrce_session>
 800a220:	b3b0      	cbz	r0, 800a290 <rmw_create_publisher+0x190>
 800a222:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a22a:	2105      	movs	r1, #5
 800a22c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a230:	1c42      	adds	r2, r0, #1
 800a232:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a236:	f002 fadd 	bl	800c7f4 <uxr_object_id>
 800a23a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a23e:	6160      	str	r0, [r4, #20]
 800a240:	4631      	mov	r1, r6
 800a242:	af04      	add	r7, sp, #16
 800a244:	691e      	ldr	r6, [r3, #16]
 800a246:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a24a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a24e:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800a252:	4638      	mov	r0, r7
 800a254:	f000 fba6 	bl	800a9a4 <convert_qos_profile>
 800a258:	9503      	str	r5, [sp, #12]
 800a25a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a25e:	9001      	str	r0, [sp, #4]
 800a260:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a264:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a26e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a272:	f8da 1000 	ldr.w	r1, [sl]
 800a276:	4630      	mov	r0, r6
 800a278:	f002 f930 	bl	800c4dc <uxr_buffer_create_datawriter_bin>
 800a27c:	4602      	mov	r2, r0
 800a27e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a282:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a286:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a28a:	f000 fb6b 	bl	800a964 <run_xrce_session>
 800a28e:	b940      	cbnz	r0, 800a2a2 <rmw_create_publisher+0x1a2>
 800a290:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a292:	b108      	cbz	r0, 800a298 <rmw_create_publisher+0x198>
 800a294:	f000 fa5e 	bl	800a754 <rmw_uxrce_fini_topic_memory>
 800a298:	4640      	mov	r0, r8
 800a29a:	f000 fa03 	bl	800a6a4 <rmw_uxrce_fini_publisher_memory>
 800a29e:	f04f 0800 	mov.w	r8, #0
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	b007      	add	sp, #28
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000d380 	.word	0x2000d380
 800a2b0:	08018664 	.word	0x08018664
 800a2b4:	08018630 	.word	0x08018630

0800a2b8 <rmw_publisher_get_actual_qos>:
 800a2b8:	b508      	push	{r3, lr}
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	b140      	cbz	r0, 800a2d0 <rmw_publisher_get_actual_qos+0x18>
 800a2be:	4608      	mov	r0, r1
 800a2c0:	b131      	cbz	r1, 800a2d0 <rmw_publisher_get_actual_qos+0x18>
 800a2c2:	6859      	ldr	r1, [r3, #4]
 800a2c4:	2250      	movs	r2, #80	@ 0x50
 800a2c6:	3128      	adds	r1, #40	@ 0x28
 800a2c8:	f00d fa2b 	bl	8017722 <memcpy>
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	bd08      	pop	{r3, pc}
 800a2d0:	200b      	movs	r0, #11
 800a2d2:	bd08      	pop	{r3, pc}

0800a2d4 <rmw_destroy_publisher>:
 800a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d8:	b128      	cbz	r0, 800a2e6 <rmw_destroy_publisher+0x12>
 800a2da:	4604      	mov	r4, r0
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	460d      	mov	r5, r1
 800a2e0:	f000 fbc6 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 800a2e4:	b918      	cbnz	r0, 800a2ee <rmw_destroy_publisher+0x1a>
 800a2e6:	2401      	movs	r4, #1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ee:	6863      	ldr	r3, [r4, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0f8      	beq.n	800a2e6 <rmw_destroy_publisher+0x12>
 800a2f4:	2d00      	cmp	r5, #0
 800a2f6:	d0f6      	beq.n	800a2e6 <rmw_destroy_publisher+0x12>
 800a2f8:	6828      	ldr	r0, [r5, #0]
 800a2fa:	f000 fbb9 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d0f1      	beq.n	800a2e6 <rmw_destroy_publisher+0x12>
 800a302:	686c      	ldr	r4, [r5, #4]
 800a304:	2c00      	cmp	r4, #0
 800a306:	d0ee      	beq.n	800a2e6 <rmw_destroy_publisher+0x12>
 800a308:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a30a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a30e:	f009 fc53 	bl	8013bb8 <destroy_topic>
 800a312:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a316:	6962      	ldr	r2, [r4, #20]
 800a318:	6918      	ldr	r0, [r3, #16]
 800a31a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a31e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a322:	6819      	ldr	r1, [r3, #0]
 800a324:	f001 ffcc 	bl	800c2c0 <uxr_buffer_delete_entity>
 800a328:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a32c:	6922      	ldr	r2, [r4, #16]
 800a32e:	4680      	mov	r8, r0
 800a330:	6918      	ldr	r0, [r3, #16]
 800a332:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a336:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a33a:	6819      	ldr	r1, [r3, #0]
 800a33c:	f001 ffc0 	bl	800c2c0 <uxr_buffer_delete_entity>
 800a340:	4606      	mov	r6, r0
 800a342:	6938      	ldr	r0, [r7, #16]
 800a344:	4642      	mov	r2, r8
 800a346:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a34a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a34e:	f000 fb09 	bl	800a964 <run_xrce_session>
 800a352:	4604      	mov	r4, r0
 800a354:	6938      	ldr	r0, [r7, #16]
 800a356:	4632      	mov	r2, r6
 800a358:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a35c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a360:	f000 fb00 	bl	800a964 <run_xrce_session>
 800a364:	4004      	ands	r4, r0
 800a366:	f084 0401 	eor.w	r4, r4, #1
 800a36a:	b2e4      	uxtb	r4, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	0064      	lsls	r4, r4, #1
 800a370:	f000 f998 	bl	800a6a4 <rmw_uxrce_fini_publisher_memory>
 800a374:	e7b8      	b.n	800a2e8 <rmw_destroy_publisher+0x14>
 800a376:	bf00      	nop

0800a378 <rmw_uxrce_transport_init>:
 800a378:	b508      	push	{r3, lr}
 800a37a:	b108      	cbz	r0, 800a380 <rmw_uxrce_transport_init+0x8>
 800a37c:	f100 0210 	add.w	r2, r0, #16
 800a380:	b139      	cbz	r1, 800a392 <rmw_uxrce_transport_init+0x1a>
 800a382:	6949      	ldr	r1, [r1, #20]
 800a384:	4610      	mov	r0, r2
 800a386:	f002 f9fd 	bl	800c784 <uxr_init_custom_transport>
 800a38a:	f080 0001 	eor.w	r0, r0, #1
 800a38e:	b2c0      	uxtb	r0, r0
 800a390:	bd08      	pop	{r3, pc}
 800a392:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <rmw_uxrce_transport_init+0x2c>)
 800a394:	4610      	mov	r0, r2
 800a396:	6859      	ldr	r1, [r3, #4]
 800a398:	f002 f9f4 	bl	800c784 <uxr_init_custom_transport>
 800a39c:	f080 0001 	eor.w	r0, r0, #1
 800a3a0:	b2c0      	uxtb	r0, r0
 800a3a2:	bd08      	pop	{r3, pc}
 800a3a4:	2000a090 	.word	0x2000a090

0800a3a8 <rmw_uxrce_init_service_memory>:
 800a3a8:	b1e2      	cbz	r2, 800a3e4 <rmw_uxrce_init_service_memory+0x3c>
 800a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	7b05      	ldrb	r5, [r0, #12]
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	b9ad      	cbnz	r5, 800a3e0 <rmw_uxrce_init_service_memory+0x38>
 800a3b4:	23c8      	movs	r3, #200	@ 0xc8
 800a3b6:	e9c0 5500 	strd	r5, r5, [r0]
 800a3ba:	6083      	str	r3, [r0, #8]
 800a3bc:	f240 1301 	movw	r3, #257	@ 0x101
 800a3c0:	4617      	mov	r7, r2
 800a3c2:	8183      	strh	r3, [r0, #12]
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	46a8      	mov	r8, r5
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	f009 f8cd 	bl	801356c <put_memory>
 800a3d2:	42af      	cmp	r7, r5
 800a3d4:	60a4      	str	r4, [r4, #8]
 800a3d6:	f884 800c 	strb.w	r8, [r4, #12]
 800a3da:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a3de:	d1f3      	bne.n	800a3c8 <rmw_uxrce_init_service_memory+0x20>
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop

0800a3e8 <rmw_uxrce_init_client_memory>:
 800a3e8:	b1e2      	cbz	r2, 800a424 <rmw_uxrce_init_client_memory+0x3c>
 800a3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ee:	7b05      	ldrb	r5, [r0, #12]
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	b9ad      	cbnz	r5, 800a420 <rmw_uxrce_init_client_memory+0x38>
 800a3f4:	23c8      	movs	r3, #200	@ 0xc8
 800a3f6:	e9c0 5500 	strd	r5, r5, [r0]
 800a3fa:	6083      	str	r3, [r0, #8]
 800a3fc:	f240 1301 	movw	r3, #257	@ 0x101
 800a400:	4617      	mov	r7, r2
 800a402:	8183      	strh	r3, [r0, #12]
 800a404:	460c      	mov	r4, r1
 800a406:	46a8      	mov	r8, r5
 800a408:	4621      	mov	r1, r4
 800a40a:	4630      	mov	r0, r6
 800a40c:	3501      	adds	r5, #1
 800a40e:	f009 f8ad 	bl	801356c <put_memory>
 800a412:	42af      	cmp	r7, r5
 800a414:	60a4      	str	r4, [r4, #8]
 800a416:	f884 800c 	strb.w	r8, [r4, #12]
 800a41a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a41e:	d1f3      	bne.n	800a408 <rmw_uxrce_init_client_memory+0x20>
 800a420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop

0800a428 <rmw_uxrce_init_publisher_memory>:
 800a428:	b1e2      	cbz	r2, 800a464 <rmw_uxrce_init_publisher_memory+0x3c>
 800a42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42e:	7b05      	ldrb	r5, [r0, #12]
 800a430:	4606      	mov	r6, r0
 800a432:	b9ad      	cbnz	r5, 800a460 <rmw_uxrce_init_publisher_memory+0x38>
 800a434:	23d8      	movs	r3, #216	@ 0xd8
 800a436:	e9c0 5500 	strd	r5, r5, [r0]
 800a43a:	6083      	str	r3, [r0, #8]
 800a43c:	f240 1301 	movw	r3, #257	@ 0x101
 800a440:	4617      	mov	r7, r2
 800a442:	8183      	strh	r3, [r0, #12]
 800a444:	460c      	mov	r4, r1
 800a446:	46a8      	mov	r8, r5
 800a448:	4621      	mov	r1, r4
 800a44a:	4630      	mov	r0, r6
 800a44c:	3501      	adds	r5, #1
 800a44e:	f009 f88d 	bl	801356c <put_memory>
 800a452:	42af      	cmp	r7, r5
 800a454:	60a4      	str	r4, [r4, #8]
 800a456:	f884 800c 	strb.w	r8, [r4, #12]
 800a45a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a45e:	d1f3      	bne.n	800a448 <rmw_uxrce_init_publisher_memory+0x20>
 800a460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop

0800a468 <rmw_uxrce_init_subscription_memory>:
 800a468:	b1e2      	cbz	r2, 800a4a4 <rmw_uxrce_init_subscription_memory+0x3c>
 800a46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	7b05      	ldrb	r5, [r0, #12]
 800a470:	4606      	mov	r6, r0
 800a472:	b9ad      	cbnz	r5, 800a4a0 <rmw_uxrce_init_subscription_memory+0x38>
 800a474:	23d8      	movs	r3, #216	@ 0xd8
 800a476:	e9c0 5500 	strd	r5, r5, [r0]
 800a47a:	6083      	str	r3, [r0, #8]
 800a47c:	f240 1301 	movw	r3, #257	@ 0x101
 800a480:	4617      	mov	r7, r2
 800a482:	8183      	strh	r3, [r0, #12]
 800a484:	460c      	mov	r4, r1
 800a486:	46a8      	mov	r8, r5
 800a488:	4621      	mov	r1, r4
 800a48a:	4630      	mov	r0, r6
 800a48c:	3501      	adds	r5, #1
 800a48e:	f009 f86d 	bl	801356c <put_memory>
 800a492:	42af      	cmp	r7, r5
 800a494:	60a4      	str	r4, [r4, #8]
 800a496:	f884 800c 	strb.w	r8, [r4, #12]
 800a49a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a49e:	d1f3      	bne.n	800a488 <rmw_uxrce_init_subscription_memory+0x20>
 800a4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop

0800a4a8 <rmw_uxrce_init_node_memory>:
 800a4a8:	b1e2      	cbz	r2, 800a4e4 <rmw_uxrce_init_node_memory+0x3c>
 800a4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ae:	7b05      	ldrb	r5, [r0, #12]
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	b9ad      	cbnz	r5, 800a4e0 <rmw_uxrce_init_node_memory+0x38>
 800a4b4:	23a4      	movs	r3, #164	@ 0xa4
 800a4b6:	e9c0 5500 	strd	r5, r5, [r0]
 800a4ba:	6083      	str	r3, [r0, #8]
 800a4bc:	f240 1301 	movw	r3, #257	@ 0x101
 800a4c0:	4617      	mov	r7, r2
 800a4c2:	8183      	strh	r3, [r0, #12]
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	46a8      	mov	r8, r5
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	f009 f84d 	bl	801356c <put_memory>
 800a4d2:	42af      	cmp	r7, r5
 800a4d4:	60a4      	str	r4, [r4, #8]
 800a4d6:	f884 800c 	strb.w	r8, [r4, #12]
 800a4da:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800a4de:	d1f3      	bne.n	800a4c8 <rmw_uxrce_init_node_memory+0x20>
 800a4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop

0800a4e8 <rmw_uxrce_init_session_memory>:
 800a4e8:	b1ea      	cbz	r2, 800a526 <rmw_uxrce_init_session_memory+0x3e>
 800a4ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ee:	7b05      	ldrb	r5, [r0, #12]
 800a4f0:	4606      	mov	r6, r0
 800a4f2:	b9b5      	cbnz	r5, 800a522 <rmw_uxrce_init_session_memory+0x3a>
 800a4f4:	e9c0 5500 	strd	r5, r5, [r0]
 800a4f8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800a4fc:	f240 1301 	movw	r3, #257	@ 0x101
 800a500:	4617      	mov	r7, r2
 800a502:	f8c0 8008 	str.w	r8, [r0, #8]
 800a506:	460c      	mov	r4, r1
 800a508:	8183      	strh	r3, [r0, #12]
 800a50a:	46a9      	mov	r9, r5
 800a50c:	4621      	mov	r1, r4
 800a50e:	4630      	mov	r0, r6
 800a510:	3501      	adds	r5, #1
 800a512:	f009 f82b 	bl	801356c <put_memory>
 800a516:	42af      	cmp	r7, r5
 800a518:	60a4      	str	r4, [r4, #8]
 800a51a:	f884 900c 	strb.w	r9, [r4, #12]
 800a51e:	4444      	add	r4, r8
 800a520:	d1f4      	bne.n	800a50c <rmw_uxrce_init_session_memory+0x24>
 800a522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a526:	4770      	bx	lr

0800a528 <rmw_uxrce_init_topic_memory>:
 800a528:	b1e2      	cbz	r2, 800a564 <rmw_uxrce_init_topic_memory+0x3c>
 800a52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52e:	7b05      	ldrb	r5, [r0, #12]
 800a530:	4606      	mov	r6, r0
 800a532:	b9ad      	cbnz	r5, 800a560 <rmw_uxrce_init_topic_memory+0x38>
 800a534:	231c      	movs	r3, #28
 800a536:	e9c0 5500 	strd	r5, r5, [r0]
 800a53a:	6083      	str	r3, [r0, #8]
 800a53c:	f240 1301 	movw	r3, #257	@ 0x101
 800a540:	4617      	mov	r7, r2
 800a542:	8183      	strh	r3, [r0, #12]
 800a544:	460c      	mov	r4, r1
 800a546:	46a8      	mov	r8, r5
 800a548:	4621      	mov	r1, r4
 800a54a:	4630      	mov	r0, r6
 800a54c:	3501      	adds	r5, #1
 800a54e:	f009 f80d 	bl	801356c <put_memory>
 800a552:	42af      	cmp	r7, r5
 800a554:	60a4      	str	r4, [r4, #8]
 800a556:	f884 800c 	strb.w	r8, [r4, #12]
 800a55a:	f104 041c 	add.w	r4, r4, #28
 800a55e:	d1f3      	bne.n	800a548 <rmw_uxrce_init_topic_memory+0x20>
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop

0800a568 <rmw_uxrce_init_static_input_buffer_memory>:
 800a568:	b1ea      	cbz	r2, 800a5a6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56e:	7b05      	ldrb	r5, [r0, #12]
 800a570:	4606      	mov	r6, r0
 800a572:	b9b5      	cbnz	r5, 800a5a2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a574:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800a578:	e9c0 5500 	strd	r5, r5, [r0]
 800a57c:	6083      	str	r3, [r0, #8]
 800a57e:	f240 1301 	movw	r3, #257	@ 0x101
 800a582:	4617      	mov	r7, r2
 800a584:	8183      	strh	r3, [r0, #12]
 800a586:	460c      	mov	r4, r1
 800a588:	46a8      	mov	r8, r5
 800a58a:	4621      	mov	r1, r4
 800a58c:	4630      	mov	r0, r6
 800a58e:	3501      	adds	r5, #1
 800a590:	f008 ffec 	bl	801356c <put_memory>
 800a594:	42af      	cmp	r7, r5
 800a596:	60a4      	str	r4, [r4, #8]
 800a598:	f884 800c 	strb.w	r8, [r4, #12]
 800a59c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800a5a0:	d1f3      	bne.n	800a58a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800a5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a6:	4770      	bx	lr

0800a5a8 <rmw_uxrce_init_init_options_impl_memory>:
 800a5a8:	b1e2      	cbz	r2, 800a5e4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800a5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ae:	7b05      	ldrb	r5, [r0, #12]
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	b9ad      	cbnz	r5, 800a5e0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800a5b4:	232c      	movs	r3, #44	@ 0x2c
 800a5b6:	e9c0 5500 	strd	r5, r5, [r0]
 800a5ba:	6083      	str	r3, [r0, #8]
 800a5bc:	f240 1301 	movw	r3, #257	@ 0x101
 800a5c0:	4617      	mov	r7, r2
 800a5c2:	8183      	strh	r3, [r0, #12]
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	46a8      	mov	r8, r5
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	f008 ffcd 	bl	801356c <put_memory>
 800a5d2:	42af      	cmp	r7, r5
 800a5d4:	60a4      	str	r4, [r4, #8]
 800a5d6:	f884 800c 	strb.w	r8, [r4, #12]
 800a5da:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800a5de:	d1f3      	bne.n	800a5c8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop

0800a5e8 <rmw_uxrce_init_wait_set_memory>:
 800a5e8:	b1e2      	cbz	r2, 800a624 <rmw_uxrce_init_wait_set_memory+0x3c>
 800a5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	7b05      	ldrb	r5, [r0, #12]
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	b9ad      	cbnz	r5, 800a620 <rmw_uxrce_init_wait_set_memory+0x38>
 800a5f4:	231c      	movs	r3, #28
 800a5f6:	e9c0 5500 	strd	r5, r5, [r0]
 800a5fa:	6083      	str	r3, [r0, #8]
 800a5fc:	f240 1301 	movw	r3, #257	@ 0x101
 800a600:	4617      	mov	r7, r2
 800a602:	8183      	strh	r3, [r0, #12]
 800a604:	460c      	mov	r4, r1
 800a606:	46a8      	mov	r8, r5
 800a608:	4621      	mov	r1, r4
 800a60a:	4630      	mov	r0, r6
 800a60c:	3501      	adds	r5, #1
 800a60e:	f008 ffad 	bl	801356c <put_memory>
 800a612:	42af      	cmp	r7, r5
 800a614:	60a4      	str	r4, [r4, #8]
 800a616:	f884 800c 	strb.w	r8, [r4, #12]
 800a61a:	f104 041c 	add.w	r4, r4, #28
 800a61e:	d1f3      	bne.n	800a608 <rmw_uxrce_init_wait_set_memory+0x20>
 800a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop

0800a628 <rmw_uxrce_init_guard_condition_memory>:
 800a628:	b1e2      	cbz	r2, 800a664 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800a62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a62e:	7b05      	ldrb	r5, [r0, #12]
 800a630:	4606      	mov	r6, r0
 800a632:	b9ad      	cbnz	r5, 800a660 <rmw_uxrce_init_guard_condition_memory+0x38>
 800a634:	2320      	movs	r3, #32
 800a636:	e9c0 5500 	strd	r5, r5, [r0]
 800a63a:	6083      	str	r3, [r0, #8]
 800a63c:	f240 1301 	movw	r3, #257	@ 0x101
 800a640:	4617      	mov	r7, r2
 800a642:	8183      	strh	r3, [r0, #12]
 800a644:	460c      	mov	r4, r1
 800a646:	46a8      	mov	r8, r5
 800a648:	4621      	mov	r1, r4
 800a64a:	4630      	mov	r0, r6
 800a64c:	3501      	adds	r5, #1
 800a64e:	f008 ff8d 	bl	801356c <put_memory>
 800a652:	42af      	cmp	r7, r5
 800a654:	60a4      	str	r4, [r4, #8]
 800a656:	f884 800c 	strb.w	r8, [r4, #12]
 800a65a:	f104 0420 	add.w	r4, r4, #32
 800a65e:	d1f3      	bne.n	800a648 <rmw_uxrce_init_guard_condition_memory+0x20>
 800a660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop

0800a668 <rmw_uxrce_fini_session_memory>:
 800a668:	4601      	mov	r1, r0
 800a66a:	4801      	ldr	r0, [pc, #4]	@ (800a670 <rmw_uxrce_fini_session_memory+0x8>)
 800a66c:	f008 bf7e 	b.w	801356c <put_memory>
 800a670:	2000e9f0 	.word	0x2000e9f0

0800a674 <rmw_uxrce_fini_node_memory>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4604      	mov	r4, r0
 800a678:	6800      	ldr	r0, [r0, #0]
 800a67a:	b128      	cbz	r0, 800a688 <rmw_uxrce_fini_node_memory+0x14>
 800a67c:	4b07      	ldr	r3, [pc, #28]	@ (800a69c <rmw_uxrce_fini_node_memory+0x28>)
 800a67e:	6819      	ldr	r1, [r3, #0]
 800a680:	f7f5 fdc6 	bl	8000210 <strcmp>
 800a684:	b940      	cbnz	r0, 800a698 <rmw_uxrce_fini_node_memory+0x24>
 800a686:	6020      	str	r0, [r4, #0]
 800a688:	6861      	ldr	r1, [r4, #4]
 800a68a:	b129      	cbz	r1, 800a698 <rmw_uxrce_fini_node_memory+0x24>
 800a68c:	2500      	movs	r5, #0
 800a68e:	4804      	ldr	r0, [pc, #16]	@ (800a6a0 <rmw_uxrce_fini_node_memory+0x2c>)
 800a690:	610d      	str	r5, [r1, #16]
 800a692:	f008 ff6b 	bl	801356c <put_memory>
 800a696:	6065      	str	r5, [r4, #4]
 800a698:	bd38      	pop	{r3, r4, r5, pc}
 800a69a:	bf00      	nop
 800a69c:	080192a4 	.word	0x080192a4
 800a6a0:	2000d434 	.word	0x2000d434

0800a6a4 <rmw_uxrce_fini_publisher_memory>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	6800      	ldr	r0, [r0, #0]
 800a6aa:	b128      	cbz	r0, 800a6b8 <rmw_uxrce_fini_publisher_memory+0x14>
 800a6ac:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	f7f5 fdae 	bl	8000210 <strcmp>
 800a6b4:	b938      	cbnz	r0, 800a6c6 <rmw_uxrce_fini_publisher_memory+0x22>
 800a6b6:	6020      	str	r0, [r4, #0]
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	b121      	cbz	r1, 800a6c6 <rmw_uxrce_fini_publisher_memory+0x22>
 800a6bc:	4803      	ldr	r0, [pc, #12]	@ (800a6cc <rmw_uxrce_fini_publisher_memory+0x28>)
 800a6be:	f008 ff55 	bl	801356c <put_memory>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	bd10      	pop	{r4, pc}
 800a6c8:	080192a4 	.word	0x080192a4
 800a6cc:	2000d380 	.word	0x2000d380

0800a6d0 <rmw_uxrce_fini_subscription_memory>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	6800      	ldr	r0, [r0, #0]
 800a6d6:	b128      	cbz	r0, 800a6e4 <rmw_uxrce_fini_subscription_memory+0x14>
 800a6d8:	4b06      	ldr	r3, [pc, #24]	@ (800a6f4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800a6da:	6819      	ldr	r1, [r3, #0]
 800a6dc:	f7f5 fd98 	bl	8000210 <strcmp>
 800a6e0:	b938      	cbnz	r0, 800a6f2 <rmw_uxrce_fini_subscription_memory+0x22>
 800a6e2:	6020      	str	r0, [r4, #0]
 800a6e4:	6861      	ldr	r1, [r4, #4]
 800a6e6:	b121      	cbz	r1, 800a6f2 <rmw_uxrce_fini_subscription_memory+0x22>
 800a6e8:	4803      	ldr	r0, [pc, #12]	@ (800a6f8 <rmw_uxrce_fini_subscription_memory+0x28>)
 800a6ea:	f008 ff3f 	bl	801356c <put_memory>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	6063      	str	r3, [r4, #4]
 800a6f2:	bd10      	pop	{r4, pc}
 800a6f4:	080192a4 	.word	0x080192a4
 800a6f8:	2000cb00 	.word	0x2000cb00

0800a6fc <rmw_uxrce_fini_service_memory>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	4604      	mov	r4, r0
 800a700:	6800      	ldr	r0, [r0, #0]
 800a702:	b128      	cbz	r0, 800a710 <rmw_uxrce_fini_service_memory+0x14>
 800a704:	4b06      	ldr	r3, [pc, #24]	@ (800a720 <rmw_uxrce_fini_service_memory+0x24>)
 800a706:	6819      	ldr	r1, [r3, #0]
 800a708:	f7f5 fd82 	bl	8000210 <strcmp>
 800a70c:	b938      	cbnz	r0, 800a71e <rmw_uxrce_fini_service_memory+0x22>
 800a70e:	6020      	str	r0, [r4, #0]
 800a710:	6861      	ldr	r1, [r4, #4]
 800a712:	b121      	cbz	r1, 800a71e <rmw_uxrce_fini_service_memory+0x22>
 800a714:	4803      	ldr	r0, [pc, #12]	@ (800a724 <rmw_uxrce_fini_service_memory+0x28>)
 800a716:	f008 ff29 	bl	801356c <put_memory>
 800a71a:	2300      	movs	r3, #0
 800a71c:	6063      	str	r3, [r4, #4]
 800a71e:	bd10      	pop	{r4, pc}
 800a720:	080192a4 	.word	0x080192a4
 800a724:	2000c6b8 	.word	0x2000c6b8

0800a728 <rmw_uxrce_fini_client_memory>:
 800a728:	b510      	push	{r4, lr}
 800a72a:	4604      	mov	r4, r0
 800a72c:	6800      	ldr	r0, [r0, #0]
 800a72e:	b128      	cbz	r0, 800a73c <rmw_uxrce_fini_client_memory+0x14>
 800a730:	4b06      	ldr	r3, [pc, #24]	@ (800a74c <rmw_uxrce_fini_client_memory+0x24>)
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	f7f5 fd6c 	bl	8000210 <strcmp>
 800a738:	b938      	cbnz	r0, 800a74a <rmw_uxrce_fini_client_memory+0x22>
 800a73a:	6020      	str	r0, [r4, #0]
 800a73c:	6861      	ldr	r1, [r4, #4]
 800a73e:	b121      	cbz	r1, 800a74a <rmw_uxrce_fini_client_memory+0x22>
 800a740:	4803      	ldr	r0, [pc, #12]	@ (800a750 <rmw_uxrce_fini_client_memory+0x28>)
 800a742:	f008 ff13 	bl	801356c <put_memory>
 800a746:	2300      	movs	r3, #0
 800a748:	6063      	str	r3, [r4, #4]
 800a74a:	bd10      	pop	{r4, pc}
 800a74c:	080192a4 	.word	0x080192a4
 800a750:	2000c5e0 	.word	0x2000c5e0

0800a754 <rmw_uxrce_fini_topic_memory>:
 800a754:	b510      	push	{r4, lr}
 800a756:	4604      	mov	r4, r0
 800a758:	4621      	mov	r1, r4
 800a75a:	4803      	ldr	r0, [pc, #12]	@ (800a768 <rmw_uxrce_fini_topic_memory+0x14>)
 800a75c:	f008 ff06 	bl	801356c <put_memory>
 800a760:	2300      	movs	r3, #0
 800a762:	61a3      	str	r3, [r4, #24]
 800a764:	bd10      	pop	{r4, pc}
 800a766:	bf00      	nop
 800a768:	2000c504 	.word	0x2000c504

0800a76c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800a76c:	b082      	sub	sp, #8
 800a76e:	b530      	push	{r4, r5, lr}
 800a770:	4929      	ldr	r1, [pc, #164]	@ (800a818 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800a772:	ac03      	add	r4, sp, #12
 800a774:	e884 000c 	stmia.w	r4, {r2, r3}
 800a778:	680c      	ldr	r4, [r1, #0]
 800a77a:	461d      	mov	r5, r3
 800a77c:	4602      	mov	r2, r0
 800a77e:	2c00      	cmp	r4, #0
 800a780:	d043      	beq.n	800a80a <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800a782:	4620      	mov	r0, r4
 800a784:	2100      	movs	r1, #0
 800a786:	6883      	ldr	r3, [r0, #8]
 800a788:	6840      	ldr	r0, [r0, #4]
 800a78a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800a78e:	429a      	cmp	r2, r3
 800a790:	bf08      	it	eq
 800a792:	3101      	addeq	r1, #1
 800a794:	2800      	cmp	r0, #0
 800a796:	d1f6      	bne.n	800a786 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800a798:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d027      	beq.n	800a7f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800a7a0:	d906      	bls.n	800a7b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d004      	beq.n	800a7b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a7a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	b002      	add	sp, #8
 800a7ae:	4770      	bx	lr
 800a7b0:	b1fd      	cbz	r5, 800a7f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a7b2:	428d      	cmp	r5, r1
 800a7b4:	d81d      	bhi.n	800a7f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a7b6:	2c00      	cmp	r4, #0
 800a7b8:	d0f5      	beq.n	800a7a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f04f 3cff 	mov.w	ip, #4294967295
 800a7c0:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800a7c4:	e001      	b.n	800a7ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800a7c6:	6864      	ldr	r4, [r4, #4]
 800a7c8:	b1dc      	cbz	r4, 800a802 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800a7d0:	428a      	cmp	r2, r1
 800a7d2:	d1f8      	bne.n	800a7c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a7d4:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800a7d8:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800a7dc:	4561      	cmp	r1, ip
 800a7de:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a7e2:	eb73 0e05 	sbcs.w	lr, r3, r5
 800a7e6:	daee      	bge.n	800a7c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a7e8:	468c      	mov	ip, r1
 800a7ea:	461d      	mov	r5, r3
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	e7ea      	b.n	800a7c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a7f0:	b92d      	cbnz	r5, 800a7fe <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800a7f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7f6:	4808      	ldr	r0, [pc, #32]	@ (800a818 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800a7f8:	b002      	add	sp, #8
 800a7fa:	f008 bea7 	b.w	801354c <get_memory>
 800a7fe:	428d      	cmp	r5, r1
 800a800:	d8f7      	bhi.n	800a7f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a806:	b002      	add	sp, #8
 800a808:	4770      	bx	lr
 800a80a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d0ef      	beq.n	800a7f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a812:	d9ee      	bls.n	800a7f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a814:	4621      	mov	r1, r4
 800a816:	e7c4      	b.n	800a7a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800a818:	2000c350 	.word	0x2000c350

0800a81c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800a81c:	4b11      	ldr	r3, [pc, #68]	@ (800a864 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	b1eb      	cbz	r3, 800a85e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800a822:	b530      	push	{r4, r5, lr}
 800a824:	4684      	mov	ip, r0
 800a826:	f04f 34ff 	mov.w	r4, #4294967295
 800a82a:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800a82e:	2000      	movs	r0, #0
 800a830:	e001      	b.n	800a836 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	b193      	cbz	r3, 800a85c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800a83c:	458c      	cmp	ip, r1
 800a83e:	d1f8      	bne.n	800a832 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800a840:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800a844:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800a848:	42a1      	cmp	r1, r4
 800a84a:	eb72 050e 	sbcs.w	r5, r2, lr
 800a84e:	daf0      	bge.n	800a832 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800a850:	4618      	mov	r0, r3
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	460c      	mov	r4, r1
 800a856:	4696      	mov	lr, r2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1ec      	bne.n	800a836 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800a85c:	bd30      	pop	{r4, r5, pc}
 800a85e:	4618      	mov	r0, r3
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	2000c350 	.word	0x2000c350

0800a868 <rmw_uxrce_clean_expired_static_input_buffer>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	4b3c      	ldr	r3, [pc, #240]	@ (800a960 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800a86e:	ed2d 8b06 	vpush	{d8-d10}
 800a872:	f8d3 8000 	ldr.w	r8, [r3]
 800a876:	b08d      	sub	sp, #52	@ 0x34
 800a878:	f009 ffa2 	bl	80147c0 <rmw_uros_epoch_nanos>
 800a87c:	f1b8 0f00 	cmp.w	r8, #0
 800a880:	d05c      	beq.n	800a93c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800a882:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a886:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800a948 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800a890:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800a950 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800a894:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800a958 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800a898:	4683      	mov	fp, r0
 800a89a:	ac04      	add	r4, sp, #16
 800a89c:	468a      	mov	sl, r1
 800a89e:	d03f      	beq.n	800a920 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800a8a0:	2b05      	cmp	r3, #5
 800a8a2:	d044      	beq.n	800a92e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d03b      	beq.n	800a920 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800a8a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a8ac:	ed8d ab06 	vstr	d10, [sp, #24]
 800a8b0:	ed8d 8b08 	vstr	d8, [sp, #32]
 800a8b4:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800a8b8:	ab08      	add	r3, sp, #32
 800a8ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a8bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a8c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a8c4:	f008 fc78 	bl	80131b8 <rmw_time_equal>
 800a8c8:	b118      	cbz	r0, 800a8d2 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800a8ca:	ed8d 9b04 	vstr	d9, [sp, #16]
 800a8ce:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a8d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a8d6:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800a8da:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800a8de:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800a8e2:	f008 fcbd 	bl	8013260 <rmw_time_total_nsec>
 800a8e6:	183f      	adds	r7, r7, r0
 800a8e8:	eb46 0601 	adc.w	r6, r6, r1
 800a8ec:	455f      	cmp	r7, fp
 800a8ee:	eb76 060a 	sbcs.w	r6, r6, sl
 800a8f2:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800a8f6:	db05      	blt.n	800a904 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800a8f8:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800a8fc:	4593      	cmp	fp, r2
 800a8fe:	eb7a 0303 	sbcs.w	r3, sl, r3
 800a902:	da03      	bge.n	800a90c <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800a904:	4816      	ldr	r0, [pc, #88]	@ (800a960 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800a906:	4641      	mov	r1, r8
 800a908:	f008 fe30 	bl	801356c <put_memory>
 800a90c:	f1b9 0f00 	cmp.w	r9, #0
 800a910:	d014      	beq.n	800a93c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800a912:	46c8      	mov	r8, r9
 800a914:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a918:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d1bf      	bne.n	800a8a0 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800a920:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800a924:	3340      	adds	r3, #64	@ 0x40
 800a926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a92c:	e7c0      	b.n	800a8b0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800a92e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800a932:	3348      	adds	r3, #72	@ 0x48
 800a934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a93a:	e7b9      	b.n	800a8b0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800a93c:	b00d      	add	sp, #52	@ 0x34
 800a93e:	ecbd 8b06 	vpop	{d8-d10}
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	bf00      	nop
	...
 800a950:	00000001 	.word	0x00000001
 800a954:	00000000 	.word	0x00000000
 800a958:	0000001e 	.word	0x0000001e
 800a95c:	00000000 	.word	0x00000000
 800a960:	2000c350 	.word	0x2000c350

0800a964 <run_xrce_session>:
 800a964:	b500      	push	{lr}
 800a966:	f891 c002 	ldrb.w	ip, [r1, #2]
 800a96a:	b087      	sub	sp, #28
 800a96c:	f1bc 0f01 	cmp.w	ip, #1
 800a970:	f8ad 200e 	strh.w	r2, [sp, #14]
 800a974:	d00f      	beq.n	800a996 <run_xrce_session+0x32>
 800a976:	4619      	mov	r1, r3
 800a978:	2301      	movs	r3, #1
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	f10d 020e 	add.w	r2, sp, #14
 800a980:	f10d 0317 	add.w	r3, sp, #23
 800a984:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a988:	f002 fd28 	bl	800d3dc <uxr_run_session_until_all_status>
 800a98c:	b100      	cbz	r0, 800a990 <run_xrce_session+0x2c>
 800a98e:	2001      	movs	r0, #1
 800a990:	b007      	add	sp, #28
 800a992:	f85d fb04 	ldr.w	pc, [sp], #4
 800a996:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a99a:	f002 f961 	bl	800cc60 <uxr_flash_output_streams>
 800a99e:	2001      	movs	r0, #1
 800a9a0:	e7f6      	b.n	800a990 <run_xrce_session+0x2c>
 800a9a2:	bf00      	nop

0800a9a4 <convert_qos_profile>:
 800a9a4:	780a      	ldrb	r2, [r1, #0]
 800a9a6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a9aa:	f1a2 0202 	sub.w	r2, r2, #2
 800a9ae:	fab2 f282 	clz	r2, r2
 800a9b2:	0952      	lsrs	r2, r2, #5
 800a9b4:	7082      	strb	r2, [r0, #2]
 800a9b6:	7a4a      	ldrb	r2, [r1, #9]
 800a9b8:	8889      	ldrh	r1, [r1, #4]
 800a9ba:	8081      	strh	r1, [r0, #4]
 800a9bc:	f1a2 0202 	sub.w	r2, r2, #2
 800a9c0:	f1ac 0c02 	sub.w	ip, ip, #2
 800a9c4:	fab2 f282 	clz	r2, r2
 800a9c8:	fabc fc8c 	clz	ip, ip
 800a9cc:	0952      	lsrs	r2, r2, #5
 800a9ce:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a9d2:	0052      	lsls	r2, r2, #1
 800a9d4:	f880 c001 	strb.w	ip, [r0, #1]
 800a9d8:	7002      	strb	r2, [r0, #0]
 800a9da:	4770      	bx	lr

0800a9dc <generate_type_name>:
 800a9dc:	b530      	push	{r4, r5, lr}
 800a9de:	2300      	movs	r3, #0
 800a9e0:	700b      	strb	r3, [r1, #0]
 800a9e2:	6803      	ldr	r3, [r0, #0]
 800a9e4:	b087      	sub	sp, #28
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	b1d3      	cbz	r3, 800aa20 <generate_type_name+0x44>
 800a9ea:	4a0f      	ldr	r2, [pc, #60]	@ (800aa28 <generate_type_name+0x4c>)
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	9203      	str	r2, [sp, #12]
 800a9f0:	9500      	str	r5, [sp, #0]
 800a9f2:	6842      	ldr	r2, [r0, #4]
 800a9f4:	480d      	ldr	r0, [pc, #52]	@ (800aa2c <generate_type_name+0x50>)
 800a9f6:	9001      	str	r0, [sp, #4]
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	490d      	ldr	r1, [pc, #52]	@ (800aa30 <generate_type_name+0x54>)
 800a9fc:	9204      	str	r2, [sp, #16]
 800a9fe:	9105      	str	r1, [sp, #20]
 800aa00:	9102      	str	r1, [sp, #8]
 800aa02:	4a0c      	ldr	r2, [pc, #48]	@ (800aa34 <generate_type_name+0x58>)
 800aa04:	4621      	mov	r1, r4
 800aa06:	f00c fc3d 	bl	8017284 <sniprintf>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	db05      	blt.n	800aa1a <generate_type_name+0x3e>
 800aa0e:	4284      	cmp	r4, r0
 800aa10:	bfd4      	ite	le
 800aa12:	2000      	movle	r0, #0
 800aa14:	2001      	movgt	r0, #1
 800aa16:	b007      	add	sp, #28
 800aa18:	bd30      	pop	{r4, r5, pc}
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	b007      	add	sp, #28
 800aa1e:	bd30      	pop	{r4, r5, pc}
 800aa20:	4b05      	ldr	r3, [pc, #20]	@ (800aa38 <generate_type_name+0x5c>)
 800aa22:	4a01      	ldr	r2, [pc, #4]	@ (800aa28 <generate_type_name+0x4c>)
 800aa24:	461d      	mov	r5, r3
 800aa26:	e7e2      	b.n	800a9ee <generate_type_name+0x12>
 800aa28:	08018654 	.word	0x08018654
 800aa2c:	0801866c 	.word	0x0801866c
 800aa30:	08018668 	.word	0x08018668
 800aa34:	08018658 	.word	0x08018658
 800aa38:	08018d14 	.word	0x08018d14

0800aa3c <generate_topic_name>:
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	4614      	mov	r4, r2
 800aa42:	9000      	str	r0, [sp, #0]
 800aa44:	4b08      	ldr	r3, [pc, #32]	@ (800aa68 <generate_topic_name+0x2c>)
 800aa46:	4a09      	ldr	r2, [pc, #36]	@ (800aa6c <generate_topic_name+0x30>)
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	f00c fc1a 	bl	8017284 <sniprintf>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	db05      	blt.n	800aa60 <generate_topic_name+0x24>
 800aa54:	4284      	cmp	r4, r0
 800aa56:	bfd4      	ite	le
 800aa58:	2000      	movle	r0, #0
 800aa5a:	2001      	movgt	r0, #1
 800aa5c:	b002      	add	sp, #8
 800aa5e:	bd10      	pop	{r4, pc}
 800aa60:	2000      	movs	r0, #0
 800aa62:	b002      	add	sp, #8
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	bf00      	nop
 800aa68:	08018dbc 	.word	0x08018dbc
 800aa6c:	08018670 	.word	0x08018670

0800aa70 <is_uxrce_rmw_identifier_valid>:
 800aa70:	b510      	push	{r4, lr}
 800aa72:	4604      	mov	r4, r0
 800aa74:	b140      	cbz	r0, 800aa88 <is_uxrce_rmw_identifier_valid+0x18>
 800aa76:	f008 fdef 	bl	8013658 <rmw_get_implementation_identifier>
 800aa7a:	4601      	mov	r1, r0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7f5 fbc7 	bl	8000210 <strcmp>
 800aa82:	fab0 f080 	clz	r0, r0
 800aa86:	0940      	lsrs	r0, r0, #5
 800aa88:	bd10      	pop	{r4, pc}
 800aa8a:	bf00      	nop

0800aa8c <get_message_typesupport_handle>:
 800aa8c:	6883      	ldr	r3, [r0, #8]
 800aa8e:	4718      	bx	r3

0800aa90 <get_message_typesupport_handle_function>:
 800aa90:	b510      	push	{r4, lr}
 800aa92:	4604      	mov	r4, r0
 800aa94:	6800      	ldr	r0, [r0, #0]
 800aa96:	f7f5 fbbb 	bl	8000210 <strcmp>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	bf0c      	ite	eq
 800aa9e:	4620      	moveq	r0, r4
 800aaa0:	2000      	movne	r0, #0
 800aaa2:	bd10      	pop	{r4, pc}

0800aaa4 <std_msgs__msg__Int32MultiArray__init>:
 800aaa4:	b1e0      	cbz	r0, 800aae0 <std_msgs__msg__Int32MultiArray__init+0x3c>
 800aaa6:	b538      	push	{r3, r4, r5, lr}
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	f000 f827 	bl	800aafc <std_msgs__msg__MultiArrayLayout__init>
 800aaae:	b138      	cbz	r0, 800aac0 <std_msgs__msg__Int32MultiArray__init+0x1c>
 800aab0:	f104 0510 	add.w	r5, r4, #16
 800aab4:	2100      	movs	r1, #0
 800aab6:	4628      	mov	r0, r5
 800aab8:	f009 fe90 	bl	80147dc <rosidl_runtime_c__int32__Sequence__init>
 800aabc:	b148      	cbz	r0, 800aad2 <std_msgs__msg__Int32MultiArray__init+0x2e>
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 f82b 	bl	800ab1c <std_msgs__msg__MultiArrayLayout__fini>
 800aac6:	f104 0010 	add.w	r0, r4, #16
 800aaca:	f009 fea1 	bl	8014810 <rosidl_runtime_c__int32__Sequence__fini>
 800aace:	2000      	movs	r0, #0
 800aad0:	bd38      	pop	{r3, r4, r5, pc}
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 f822 	bl	800ab1c <std_msgs__msg__MultiArrayLayout__fini>
 800aad8:	4628      	mov	r0, r5
 800aada:	f009 fe99 	bl	8014810 <rosidl_runtime_c__int32__Sequence__fini>
 800aade:	e7f6      	b.n	800aace <std_msgs__msg__Int32MultiArray__init+0x2a>
 800aae0:	2000      	movs	r0, #0
 800aae2:	4770      	bx	lr

0800aae4 <std_msgs__msg__Int32MultiArray__fini>:
 800aae4:	b148      	cbz	r0, 800aafa <std_msgs__msg__Int32MultiArray__fini+0x16>
 800aae6:	b510      	push	{r4, lr}
 800aae8:	4604      	mov	r4, r0
 800aaea:	f000 f817 	bl	800ab1c <std_msgs__msg__MultiArrayLayout__fini>
 800aaee:	f104 0010 	add.w	r0, r4, #16
 800aaf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf6:	f009 be8b 	b.w	8014810 <rosidl_runtime_c__int32__Sequence__fini>
 800aafa:	4770      	bx	lr

0800aafc <std_msgs__msg__MultiArrayLayout__init>:
 800aafc:	b158      	cbz	r0, 800ab16 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 800aafe:	b510      	push	{r4, lr}
 800ab00:	2100      	movs	r1, #0
 800ab02:	4604      	mov	r4, r0
 800ab04:	f009 ff66 	bl	80149d4 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800ab08:	b100      	cbz	r0, 800ab0c <std_msgs__msg__MultiArrayLayout__init+0x10>
 800ab0a:	bd10      	pop	{r4, pc}
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f009 ffa5 	bl	8014a5c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800ab12:	2000      	movs	r0, #0
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	2000      	movs	r0, #0
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop

0800ab1c <std_msgs__msg__MultiArrayLayout__fini>:
 800ab1c:	b108      	cbz	r0, 800ab22 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 800ab1e:	f009 bf9d 	b.w	8014a5c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800ab22:	4770      	bx	lr

0800ab24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800ab24:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	b10a      	cbz	r2, 800ab2e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xa>
 800ab2a:	4803      	ldr	r0, [pc, #12]	@ (800ab38 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800ab2c:	4770      	bx	lr
 800ab2e:	4a03      	ldr	r2, [pc, #12]	@ (800ab3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x18>)
 800ab30:	4801      	ldr	r0, [pc, #4]	@ (800ab38 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800ab32:	6812      	ldr	r2, [r2, #0]
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	4770      	bx	lr
 800ab38:	20000028 	.word	0x20000028
 800ab3c:	200001d0 	.word	0x200001d0

0800ab40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800ab40:	4a02      	ldr	r2, [pc, #8]	@ (800ab4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xc>)
 800ab42:	4b03      	ldr	r3, [pc, #12]	@ (800ab50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x10>)
 800ab44:	6812      	ldr	r2, [r2, #0]
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	200001d0 	.word	0x200001d0
 800ab50:	20000028 	.word	0x20000028

0800ab54 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__size_function__Int32MultiArray__data>:
 800ab54:	6840      	ldr	r0, [r0, #4]
 800ab56:	4770      	bx	lr

0800ab58 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Int32MultiArray__data>:
 800ab58:	6800      	ldr	r0, [r0, #0]
 800ab5a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ab5e:	4770      	bx	lr

0800ab60 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Int32MultiArray__data>:
 800ab60:	6803      	ldr	r3, [r0, #0]
 800ab62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__assign_function__Int32MultiArray__data>:
 800ab6c:	6803      	ldr	r3, [r0, #0]
 800ab6e:	6812      	ldr	r2, [r2, #0]
 800ab70:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop

0800ab78 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_init_function>:
 800ab78:	f7ff bf94 	b.w	800aaa4 <std_msgs__msg__Int32MultiArray__init>

0800ab7c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_fini_function>:
 800ab7c:	f7ff bfb2 	b.w	800aae4 <std_msgs__msg__Int32MultiArray__fini>

0800ab80 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__resize_function__Int32MultiArray__data>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4604      	mov	r4, r0
 800ab84:	460d      	mov	r5, r1
 800ab86:	f009 fe43 	bl	8014810 <rosidl_runtime_c__int32__Sequence__fini>
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab92:	f009 be23 	b.w	80147dc <rosidl_runtime_c__int32__Sequence__init>
 800ab96:	bf00      	nop

0800ab98 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_function__Int32MultiArray__data>:
 800ab98:	6800      	ldr	r0, [r0, #0]
 800ab9a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ab9e:	4770      	bx	lr

0800aba0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800aba0:	b508      	push	{r3, lr}
 800aba2:	f000 f855 	bl	800ac50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800aba6:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800aba8:	4906      	ldr	r1, [pc, #24]	@ (800abc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x24>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	60c8      	str	r0, [r1, #12]
 800abae:	b10a      	cbz	r2, 800abb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>
 800abb0:	4803      	ldr	r0, [pc, #12]	@ (800abc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800abb2:	bd08      	pop	{r3, pc}
 800abb4:	4a04      	ldr	r2, [pc, #16]	@ (800abc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x28>)
 800abb6:	4802      	ldr	r0, [pc, #8]	@ (800abc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800abb8:	6812      	ldr	r2, [r2, #0]
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	bd08      	pop	{r3, pc}
 800abbe:	bf00      	nop
 800abc0:	20000048 	.word	0x20000048
 800abc4:	20000060 	.word	0x20000060
 800abc8:	200001d4 	.word	0x200001d4

0800abcc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800abcc:	6840      	ldr	r0, [r0, #4]
 800abce:	4770      	bx	lr

0800abd0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800abd0:	6800      	ldr	r0, [r0, #0]
 800abd2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800abd6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800abda:	4770      	bx	lr

0800abdc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800abdc:	6803      	ldr	r3, [r0, #0]
 800abde:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800abe2:	b500      	push	{lr}
 800abe4:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800abe8:	4694      	mov	ip, r2
 800abea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800abee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abf2:	f8de 3000 	ldr.w	r3, [lr]
 800abf6:	f8cc 3000 	str.w	r3, [ip]
 800abfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800abfe:	bf00      	nop

0800ac00 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800ac00:	6803      	ldr	r3, [r0, #0]
 800ac02:	b500      	push	{lr}
 800ac04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ac08:	4696      	mov	lr, r2
 800ac0a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800ac0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ac12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac16:	f8de 3000 	ldr.w	r3, [lr]
 800ac1a:	f8cc 3000 	str.w	r3, [ip]
 800ac1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac22:	bf00      	nop

0800ac24 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800ac24:	f7ff bf6a 	b.w	800aafc <std_msgs__msg__MultiArrayLayout__init>

0800ac28 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800ac28:	f7ff bf78 	b.w	800ab1c <std_msgs__msg__MultiArrayLayout__fini>

0800ac2c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4604      	mov	r4, r0
 800ac30:	460d      	mov	r5, r1
 800ac32:	f009 ff13 	bl	8014a5c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800ac36:	4629      	mov	r1, r5
 800ac38:	4620      	mov	r0, r4
 800ac3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac3e:	f009 bec9 	b.w	80149d4 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800ac42:	bf00      	nop

0800ac44 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800ac44:	6800      	ldr	r0, [r0, #0]
 800ac46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ac4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ac4e:	4770      	bx	lr

0800ac50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800ac50:	b508      	push	{r3, lr}
 800ac52:	f009 ff77 	bl	8014b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ac56:	4b06      	ldr	r3, [pc, #24]	@ (800ac70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ac58:	4906      	ldr	r1, [pc, #24]	@ (800ac74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	60c8      	str	r0, [r1, #12]
 800ac5e:	b10a      	cbz	r2, 800ac64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800ac60:	4803      	ldr	r0, [pc, #12]	@ (800ac70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ac62:	bd08      	pop	{r3, pc}
 800ac64:	4a04      	ldr	r2, [pc, #16]	@ (800ac78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800ac66:	4802      	ldr	r0, [pc, #8]	@ (800ac70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	bd08      	pop	{r3, pc}
 800ac6e:	bf00      	nop
 800ac70:	200000d8 	.word	0x200000d8
 800ac74:	200000f0 	.word	0x200000f0
 800ac78:	200001d4 	.word	0x200001d4

0800ac7c <_Int32MultiArray__max_serialized_size>:
 800ac7c:	b500      	push	{lr}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	2301      	movs	r3, #1
 800ac82:	2100      	movs	r1, #0
 800ac84:	f10d 0007 	add.w	r0, sp, #7
 800ac88:	f88d 3007 	strb.w	r3, [sp, #7]
 800ac8c:	f000 f91c 	bl	800aec8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ac90:	b003      	add	sp, #12
 800ac92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac96:	bf00      	nop

0800ac98 <get_serialized_size_std_msgs__msg__Int32MultiArray>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	b160      	cbz	r0, 800acb8 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>
 800ac9e:	460d      	mov	r5, r1
 800aca0:	f000 f8e4 	bl	800ae6c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800aca4:	182e      	adds	r6, r5, r0
 800aca6:	2104      	movs	r1, #4
 800aca8:	4630      	mov	r0, r6
 800acaa:	6967      	ldr	r7, [r4, #20]
 800acac:	f001 fa12 	bl	800c0d4 <ucdr_alignment>
 800acb0:	1d04      	adds	r4, r0, #4
 800acb2:	4434      	add	r4, r6
 800acb4:	b90f      	cbnz	r7, 800acba <get_serialized_size_std_msgs__msg__Int32MultiArray+0x22>
 800acb6:	1b60      	subs	r0, r4, r5
 800acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acba:	4620      	mov	r0, r4
 800acbc:	2104      	movs	r1, #4
 800acbe:	f001 fa09 	bl	800c0d4 <ucdr_alignment>
 800acc2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800acc6:	4404      	add	r4, r0
 800acc8:	1b60      	subs	r0, r4, r5
 800acca:	e7f5      	b.n	800acb8 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>

0800accc <_Int32MultiArray__cdr_deserialize>:
 800accc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acce:	460c      	mov	r4, r1
 800acd0:	b083      	sub	sp, #12
 800acd2:	b1d1      	cbz	r1, 800ad0a <_Int32MultiArray__cdr_deserialize+0x3e>
 800acd4:	4606      	mov	r6, r0
 800acd6:	f000 f901 	bl	800aedc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800acda:	6843      	ldr	r3, [r0, #4]
 800acdc:	4621      	mov	r1, r4
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	4630      	mov	r0, r6
 800ace2:	4798      	blx	r3
 800ace4:	69a7      	ldr	r7, [r4, #24]
 800ace6:	6921      	ldr	r1, [r4, #16]
 800ace8:	ab01      	add	r3, sp, #4
 800acea:	463a      	mov	r2, r7
 800acec:	4630      	mov	r0, r6
 800acee:	f001 facb 	bl	800c288 <ucdr_deserialize_sequence_int32_t>
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	4605      	mov	r5, r0
 800acf6:	b920      	cbnz	r0, 800ad02 <_Int32MultiArray__cdr_deserialize+0x36>
 800acf8:	429f      	cmp	r7, r3
 800acfa:	d30a      	bcc.n	800ad12 <_Int32MultiArray__cdr_deserialize+0x46>
 800acfc:	4628      	mov	r0, r5
 800acfe:	b003      	add	sp, #12
 800ad00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad02:	4628      	mov	r0, r5
 800ad04:	6163      	str	r3, [r4, #20]
 800ad06:	b003      	add	sp, #12
 800ad08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad0a:	460d      	mov	r5, r1
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	b003      	add	sp, #12
 800ad10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad12:	2301      	movs	r3, #1
 800ad14:	75b0      	strb	r0, [r6, #22]
 800ad16:	7573      	strb	r3, [r6, #21]
 800ad18:	2104      	movs	r1, #4
 800ad1a:	6160      	str	r0, [r4, #20]
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f001 f9ef 	bl	800c100 <ucdr_align_to>
 800ad22:	9901      	ldr	r1, [sp, #4]
 800ad24:	4630      	mov	r0, r6
 800ad26:	0089      	lsls	r1, r1, #2
 800ad28:	f001 fa20 	bl	800c16c <ucdr_advance_buffer>
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	b003      	add	sp, #12
 800ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad32:	bf00      	nop

0800ad34 <_Int32MultiArray__cdr_serialize>:
 800ad34:	b180      	cbz	r0, 800ad58 <_Int32MultiArray__cdr_serialize+0x24>
 800ad36:	b538      	push	{r3, r4, r5, lr}
 800ad38:	460d      	mov	r5, r1
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	f000 f8ce 	bl	800aedc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ad40:	6843      	ldr	r3, [r0, #4]
 800ad42:	4629      	mov	r1, r5
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	4620      	mov	r0, r4
 800ad48:	4798      	blx	r3
 800ad4a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ad4e:	4628      	mov	r0, r5
 800ad50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad54:	f001 ba86 	b.w	800c264 <ucdr_serialize_sequence_int32_t>
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop

0800ad5c <_Int32MultiArray__get_serialized_size>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4604      	mov	r4, r0
 800ad60:	b150      	cbz	r0, 800ad78 <_Int32MultiArray__get_serialized_size+0x1c>
 800ad62:	2100      	movs	r1, #0
 800ad64:	f000 f882 	bl	800ae6c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ad68:	2104      	movs	r1, #4
 800ad6a:	6965      	ldr	r5, [r4, #20]
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	f001 f9b1 	bl	800c0d4 <ucdr_alignment>
 800ad72:	4404      	add	r4, r0
 800ad74:	3404      	adds	r4, #4
 800ad76:	b90d      	cbnz	r5, 800ad7c <_Int32MultiArray__get_serialized_size+0x20>
 800ad78:	4620      	mov	r0, r4
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	2104      	movs	r1, #4
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f001 f9a8 	bl	800c0d4 <ucdr_alignment>
 800ad84:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800ad88:	4404      	add	r4, r0
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	bf00      	nop

0800ad90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800ad90:	4800      	ldr	r0, [pc, #0]	@ (800ad94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x4>)
 800ad92:	4770      	bx	lr
 800ad94:	20000168 	.word	0x20000168

0800ad98 <_MultiArrayLayout__max_serialized_size>:
 800ad98:	b508      	push	{r3, lr}
 800ad9a:	2104      	movs	r1, #4
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	f001 f999 	bl	800c0d4 <ucdr_alignment>
 800ada2:	3004      	adds	r0, #4
 800ada4:	bd08      	pop	{r3, pc}
 800ada6:	bf00      	nop

0800ada8 <_MultiArrayLayout__cdr_deserialize>:
 800ada8:	b351      	cbz	r1, 800ae00 <_MultiArrayLayout__cdr_deserialize+0x58>
 800adaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adac:	460e      	mov	r6, r1
 800adae:	b083      	sub	sp, #12
 800adb0:	a901      	add	r1, sp, #4
 800adb2:	4607      	mov	r7, r0
 800adb4:	f000 fc0a 	bl	800b5cc <ucdr_deserialize_uint32_t>
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	68b2      	ldr	r2, [r6, #8]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d31c      	bcc.n	800adfa <_MultiArrayLayout__cdr_deserialize+0x52>
 800adc0:	6073      	str	r3, [r6, #4]
 800adc2:	b193      	cbz	r3, 800adea <_MultiArrayLayout__cdr_deserialize+0x42>
 800adc4:	2400      	movs	r4, #0
 800adc6:	4625      	mov	r5, r4
 800adc8:	e005      	b.n	800add6 <_MultiArrayLayout__cdr_deserialize+0x2e>
 800adca:	9b01      	ldr	r3, [sp, #4]
 800adcc:	3501      	adds	r5, #1
 800adce:	42ab      	cmp	r3, r5
 800add0:	f104 0414 	add.w	r4, r4, #20
 800add4:	d909      	bls.n	800adea <_MultiArrayLayout__cdr_deserialize+0x42>
 800add6:	f009 ff53 	bl	8014c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800adda:	6831      	ldr	r1, [r6, #0]
 800addc:	6843      	ldr	r3, [r0, #4]
 800adde:	4421      	add	r1, r4
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	4638      	mov	r0, r7
 800ade4:	4798      	blx	r3
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d1ef      	bne.n	800adca <_MultiArrayLayout__cdr_deserialize+0x22>
 800adea:	f106 010c 	add.w	r1, r6, #12
 800adee:	4638      	mov	r0, r7
 800adf0:	b003      	add	sp, #12
 800adf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800adf6:	f000 bbe9 	b.w	800b5cc <ucdr_deserialize_uint32_t>
 800adfa:	2000      	movs	r0, #0
 800adfc:	b003      	add	sp, #12
 800adfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae00:	2000      	movs	r0, #0
 800ae02:	4770      	bx	lr

0800ae04 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800ae04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae08:	4689      	mov	r9, r1
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	2104      	movs	r1, #4
 800ae0e:	4648      	mov	r0, r9
 800ae10:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800ae14:	f001 f95e 	bl	800c0d4 <ucdr_alignment>
 800ae18:	f109 0304 	add.w	r3, r9, #4
 800ae1c:	18c6      	adds	r6, r0, r3
 800ae1e:	f1b8 0f00 	cmp.w	r8, #0
 800ae22:	d019      	beq.n	800ae58 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x54>
 800ae24:	2500      	movs	r5, #0
 800ae26:	f009 ff2b 	bl	8014c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	6843      	ldr	r3, [r0, #4]
 800ae2e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800ae32:	4631      	mov	r1, r6
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800ae3a:	4798      	blx	r3
 800ae3c:	2804      	cmp	r0, #4
 800ae3e:	4601      	mov	r1, r0
 800ae40:	4604      	mov	r4, r0
 800ae42:	bf28      	it	cs
 800ae44:	2104      	movcs	r1, #4
 800ae46:	4630      	mov	r0, r6
 800ae48:	f001 f944 	bl	800c0d4 <ucdr_alignment>
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	4434      	add	r4, r6
 800ae50:	45a8      	cmp	r8, r5
 800ae52:	eb00 0604 	add.w	r6, r0, r4
 800ae56:	d1e6      	bne.n	800ae26 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800ae58:	2104      	movs	r1, #4
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f001 f93a 	bl	800c0d4 <ucdr_alignment>
 800ae60:	f1c9 0904 	rsb	r9, r9, #4
 800ae64:	44b1      	add	r9, r6
 800ae66:	4448      	add	r0, r9
 800ae68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ae6c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800ae6c:	b108      	cbz	r0, 800ae72 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800ae6e:	f7ff bfc9 	b.w	800ae04 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ae72:	4770      	bx	lr

0800ae74 <_MultiArrayLayout__get_serialized_size>:
 800ae74:	b110      	cbz	r0, 800ae7c <_MultiArrayLayout__get_serialized_size+0x8>
 800ae76:	2100      	movs	r1, #0
 800ae78:	f7ff bfc4 	b.w	800ae04 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop

0800ae80 <_MultiArrayLayout__cdr_serialize>:
 800ae80:	b308      	cbz	r0, 800aec6 <_MultiArrayLayout__cdr_serialize+0x46>
 800ae82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae84:	6847      	ldr	r7, [r0, #4]
 800ae86:	460e      	mov	r6, r1
 800ae88:	4605      	mov	r5, r0
 800ae8a:	4608      	mov	r0, r1
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	f000 fa73 	bl	800b378 <ucdr_serialize_uint32_t>
 800ae92:	b190      	cbz	r0, 800aeba <_MultiArrayLayout__cdr_serialize+0x3a>
 800ae94:	b18f      	cbz	r7, 800aeba <_MultiArrayLayout__cdr_serialize+0x3a>
 800ae96:	2400      	movs	r4, #0
 800ae98:	e002      	b.n	800aea0 <_MultiArrayLayout__cdr_serialize+0x20>
 800ae9a:	3401      	adds	r4, #1
 800ae9c:	42a7      	cmp	r7, r4
 800ae9e:	d00c      	beq.n	800aeba <_MultiArrayLayout__cdr_serialize+0x3a>
 800aea0:	f009 feee 	bl	8014c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800aea4:	6841      	ldr	r1, [r0, #4]
 800aea6:	6828      	ldr	r0, [r5, #0]
 800aea8:	688a      	ldr	r2, [r1, #8]
 800aeaa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800aeae:	4631      	mov	r1, r6
 800aeb0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800aeb4:	4790      	blx	r2
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d1ef      	bne.n	800ae9a <_MultiArrayLayout__cdr_serialize+0x1a>
 800aeba:	68e9      	ldr	r1, [r5, #12]
 800aebc:	4630      	mov	r0, r6
 800aebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aec2:	f000 ba59 	b.w	800b378 <ucdr_serialize_uint32_t>
 800aec6:	4770      	bx	lr

0800aec8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800aec8:	b508      	push	{r3, lr}
 800aeca:	4603      	mov	r3, r0
 800aecc:	2200      	movs	r2, #0
 800aece:	4608      	mov	r0, r1
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	2104      	movs	r1, #4
 800aed4:	f001 f8fe 	bl	800c0d4 <ucdr_alignment>
 800aed8:	3004      	adds	r0, #4
 800aeda:	bd08      	pop	{r3, pc}

0800aedc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800aedc:	4800      	ldr	r0, [pc, #0]	@ (800aee0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800aede:	4770      	bx	lr
 800aee0:	2000019c 	.word	0x2000019c

0800aee4 <ucdr_serialize_bool>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	460d      	mov	r5, r1
 800aee8:	2101      	movs	r1, #1
 800aeea:	4604      	mov	r4, r0
 800aeec:	f001 f8a6 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800aef0:	b148      	cbz	r0, 800af06 <ucdr_serialize_bool+0x22>
 800aef2:	68a3      	ldr	r3, [r4, #8]
 800aef4:	701d      	strb	r5, [r3, #0]
 800aef6:	68a2      	ldr	r2, [r4, #8]
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	2101      	movs	r1, #1
 800aefc:	440a      	add	r2, r1
 800aefe:	440b      	add	r3, r1
 800af00:	60a2      	str	r2, [r4, #8]
 800af02:	6123      	str	r3, [r4, #16]
 800af04:	7561      	strb	r1, [r4, #21]
 800af06:	7da0      	ldrb	r0, [r4, #22]
 800af08:	f080 0001 	eor.w	r0, r0, #1
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop

0800af10 <ucdr_deserialize_bool>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	460d      	mov	r5, r1
 800af14:	2101      	movs	r1, #1
 800af16:	4604      	mov	r4, r0
 800af18:	f001 f890 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800af1c:	b160      	cbz	r0, 800af38 <ucdr_deserialize_bool+0x28>
 800af1e:	68a2      	ldr	r2, [r4, #8]
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	f812 1b01 	ldrb.w	r1, [r2], #1
 800af26:	3900      	subs	r1, #0
 800af28:	bf18      	it	ne
 800af2a:	2101      	movne	r1, #1
 800af2c:	7029      	strb	r1, [r5, #0]
 800af2e:	3301      	adds	r3, #1
 800af30:	2101      	movs	r1, #1
 800af32:	60a2      	str	r2, [r4, #8]
 800af34:	6123      	str	r3, [r4, #16]
 800af36:	7561      	strb	r1, [r4, #21]
 800af38:	7da0      	ldrb	r0, [r4, #22]
 800af3a:	f080 0001 	eor.w	r0, r0, #1
 800af3e:	bd38      	pop	{r3, r4, r5, pc}

0800af40 <ucdr_serialize_uint8_t>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	460d      	mov	r5, r1
 800af44:	2101      	movs	r1, #1
 800af46:	4604      	mov	r4, r0
 800af48:	f001 f878 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800af4c:	b148      	cbz	r0, 800af62 <ucdr_serialize_uint8_t+0x22>
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	701d      	strb	r5, [r3, #0]
 800af52:	68a2      	ldr	r2, [r4, #8]
 800af54:	6923      	ldr	r3, [r4, #16]
 800af56:	2101      	movs	r1, #1
 800af58:	440a      	add	r2, r1
 800af5a:	440b      	add	r3, r1
 800af5c:	60a2      	str	r2, [r4, #8]
 800af5e:	6123      	str	r3, [r4, #16]
 800af60:	7561      	strb	r1, [r4, #21]
 800af62:	7da0      	ldrb	r0, [r4, #22]
 800af64:	f080 0001 	eor.w	r0, r0, #1
 800af68:	bd38      	pop	{r3, r4, r5, pc}
 800af6a:	bf00      	nop

0800af6c <ucdr_deserialize_uint8_t>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	460d      	mov	r5, r1
 800af70:	2101      	movs	r1, #1
 800af72:	4604      	mov	r4, r0
 800af74:	f001 f862 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800af78:	b150      	cbz	r0, 800af90 <ucdr_deserialize_uint8_t+0x24>
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	702b      	strb	r3, [r5, #0]
 800af80:	68a2      	ldr	r2, [r4, #8]
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	2101      	movs	r1, #1
 800af86:	440a      	add	r2, r1
 800af88:	440b      	add	r3, r1
 800af8a:	60a2      	str	r2, [r4, #8]
 800af8c:	6123      	str	r3, [r4, #16]
 800af8e:	7561      	strb	r1, [r4, #21]
 800af90:	7da0      	ldrb	r0, [r4, #22]
 800af92:	f080 0001 	eor.w	r0, r0, #1
 800af96:	bd38      	pop	{r3, r4, r5, pc}

0800af98 <ucdr_serialize_uint16_t>:
 800af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	460b      	mov	r3, r1
 800afa0:	2102      	movs	r1, #2
 800afa2:	4604      	mov	r4, r0
 800afa4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800afa8:	f001 f89c 	bl	800c0e4 <ucdr_buffer_alignment>
 800afac:	4601      	mov	r1, r0
 800afae:	4620      	mov	r0, r4
 800afb0:	7d67      	ldrb	r7, [r4, #21]
 800afb2:	f001 f8db 	bl	800c16c <ucdr_advance_buffer>
 800afb6:	2102      	movs	r1, #2
 800afb8:	4620      	mov	r0, r4
 800afba:	f001 f833 	bl	800c024 <ucdr_check_buffer_available_for>
 800afbe:	b1c0      	cbz	r0, 800aff2 <ucdr_serialize_uint16_t+0x5a>
 800afc0:	7d22      	ldrb	r2, [r4, #20]
 800afc2:	68a3      	ldr	r3, [r4, #8]
 800afc4:	2a01      	cmp	r2, #1
 800afc6:	d04e      	beq.n	800b066 <ucdr_serialize_uint16_t+0xce>
 800afc8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800afcc:	701a      	strb	r2, [r3, #0]
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800afd4:	705a      	strb	r2, [r3, #1]
 800afd6:	68a2      	ldr	r2, [r4, #8]
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	3202      	adds	r2, #2
 800afdc:	3302      	adds	r3, #2
 800afde:	2102      	movs	r1, #2
 800afe0:	60a2      	str	r2, [r4, #8]
 800afe2:	6123      	str	r3, [r4, #16]
 800afe4:	7561      	strb	r1, [r4, #21]
 800afe6:	7da0      	ldrb	r0, [r4, #22]
 800afe8:	f080 0001 	eor.w	r0, r0, #1
 800afec:	b002      	add	sp, #8
 800afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aff6:	42ab      	cmp	r3, r5
 800aff8:	d923      	bls.n	800b042 <ucdr_serialize_uint16_t+0xaa>
 800affa:	1b5e      	subs	r6, r3, r5
 800affc:	60a3      	str	r3, [r4, #8]
 800affe:	6923      	ldr	r3, [r4, #16]
 800b000:	f1c6 0802 	rsb	r8, r6, #2
 800b004:	4433      	add	r3, r6
 800b006:	6123      	str	r3, [r4, #16]
 800b008:	4641      	mov	r1, r8
 800b00a:	4620      	mov	r0, r4
 800b00c:	f001 f816 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b010:	b368      	cbz	r0, 800b06e <ucdr_serialize_uint16_t+0xd6>
 800b012:	7d23      	ldrb	r3, [r4, #20]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d03b      	beq.n	800b090 <ucdr_serialize_uint16_t+0xf8>
 800b018:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b01c:	702b      	strb	r3, [r5, #0]
 800b01e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b022:	706b      	strb	r3, [r5, #1]
 800b024:	6923      	ldr	r3, [r4, #16]
 800b026:	68a2      	ldr	r2, [r4, #8]
 800b028:	7da0      	ldrb	r0, [r4, #22]
 800b02a:	3302      	adds	r3, #2
 800b02c:	4442      	add	r2, r8
 800b02e:	1b9b      	subs	r3, r3, r6
 800b030:	2102      	movs	r1, #2
 800b032:	f080 0001 	eor.w	r0, r0, #1
 800b036:	60a2      	str	r2, [r4, #8]
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	7561      	strb	r1, [r4, #21]
 800b03c:	b002      	add	sp, #8
 800b03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b042:	2102      	movs	r1, #2
 800b044:	4620      	mov	r0, r4
 800b046:	f000 fff9 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d0cb      	beq.n	800afe6 <ucdr_serialize_uint16_t+0x4e>
 800b04e:	7d23      	ldrb	r3, [r4, #20]
 800b050:	68a2      	ldr	r2, [r4, #8]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d018      	beq.n	800b088 <ucdr_serialize_uint16_t+0xf0>
 800b056:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b05a:	7013      	strb	r3, [r2, #0]
 800b05c:	68a3      	ldr	r3, [r4, #8]
 800b05e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b062:	705a      	strb	r2, [r3, #1]
 800b064:	e7b7      	b.n	800afd6 <ucdr_serialize_uint16_t+0x3e>
 800b066:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	e7b3      	b.n	800afd6 <ucdr_serialize_uint16_t+0x3e>
 800b06e:	68a2      	ldr	r2, [r4, #8]
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	7da0      	ldrb	r0, [r4, #22]
 800b074:	7567      	strb	r7, [r4, #21]
 800b076:	1b92      	subs	r2, r2, r6
 800b078:	1b9b      	subs	r3, r3, r6
 800b07a:	f080 0001 	eor.w	r0, r0, #1
 800b07e:	60a2      	str	r2, [r4, #8]
 800b080:	6123      	str	r3, [r4, #16]
 800b082:	b002      	add	sp, #8
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b08c:	8013      	strh	r3, [r2, #0]
 800b08e:	e7a2      	b.n	800afd6 <ucdr_serialize_uint16_t+0x3e>
 800b090:	4628      	mov	r0, r5
 800b092:	f10d 0506 	add.w	r5, sp, #6
 800b096:	4632      	mov	r2, r6
 800b098:	4629      	mov	r1, r5
 800b09a:	f00c fb42 	bl	8017722 <memcpy>
 800b09e:	68a0      	ldr	r0, [r4, #8]
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	19a9      	adds	r1, r5, r6
 800b0a4:	f00c fb3d 	bl	8017722 <memcpy>
 800b0a8:	e7bc      	b.n	800b024 <ucdr_serialize_uint16_t+0x8c>
 800b0aa:	bf00      	nop

0800b0ac <ucdr_serialize_endian_uint16_t>:
 800b0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	2102      	movs	r1, #2
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b0bc:	f001 f812 	bl	800c0e4 <ucdr_buffer_alignment>
 800b0c0:	4601      	mov	r1, r0
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b0c8:	f001 f850 	bl	800c16c <ucdr_advance_buffer>
 800b0cc:	2102      	movs	r1, #2
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 ffa8 	bl	800c024 <ucdr_check_buffer_available_for>
 800b0d4:	bb60      	cbnz	r0, 800b130 <ucdr_serialize_endian_uint16_t+0x84>
 800b0d6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b0da:	42be      	cmp	r6, r7
 800b0dc:	d923      	bls.n	800b126 <ucdr_serialize_endian_uint16_t+0x7a>
 800b0de:	6923      	ldr	r3, [r4, #16]
 800b0e0:	60a6      	str	r6, [r4, #8]
 800b0e2:	1bf6      	subs	r6, r6, r7
 800b0e4:	4433      	add	r3, r6
 800b0e6:	f1c6 0902 	rsb	r9, r6, #2
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 ffa4 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d037      	beq.n	800b168 <ucdr_serialize_endian_uint16_t+0xbc>
 800b0f8:	2d01      	cmp	r5, #1
 800b0fa:	d043      	beq.n	800b184 <ucdr_serialize_endian_uint16_t+0xd8>
 800b0fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b100:	703b      	strb	r3, [r7, #0]
 800b102:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b106:	707b      	strb	r3, [r7, #1]
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	68a2      	ldr	r2, [r4, #8]
 800b10c:	7da0      	ldrb	r0, [r4, #22]
 800b10e:	3302      	adds	r3, #2
 800b110:	444a      	add	r2, r9
 800b112:	1b9b      	subs	r3, r3, r6
 800b114:	2102      	movs	r1, #2
 800b116:	f080 0001 	eor.w	r0, r0, #1
 800b11a:	60a2      	str	r2, [r4, #8]
 800b11c:	6123      	str	r3, [r4, #16]
 800b11e:	7561      	strb	r1, [r4, #21]
 800b120:	b003      	add	sp, #12
 800b122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b126:	2102      	movs	r1, #2
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 ff87 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b12e:	b188      	cbz	r0, 800b154 <ucdr_serialize_endian_uint16_t+0xa8>
 800b130:	2d01      	cmp	r5, #1
 800b132:	68a3      	ldr	r3, [r4, #8]
 800b134:	d014      	beq.n	800b160 <ucdr_serialize_endian_uint16_t+0xb4>
 800b136:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	68a3      	ldr	r3, [r4, #8]
 800b13e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b142:	705a      	strb	r2, [r3, #1]
 800b144:	68a2      	ldr	r2, [r4, #8]
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	3202      	adds	r2, #2
 800b14a:	3302      	adds	r3, #2
 800b14c:	2102      	movs	r1, #2
 800b14e:	60a2      	str	r2, [r4, #8]
 800b150:	6123      	str	r3, [r4, #16]
 800b152:	7561      	strb	r1, [r4, #21]
 800b154:	7da0      	ldrb	r0, [r4, #22]
 800b156:	f080 0001 	eor.w	r0, r0, #1
 800b15a:	b003      	add	sp, #12
 800b15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b160:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b164:	801a      	strh	r2, [r3, #0]
 800b166:	e7ed      	b.n	800b144 <ucdr_serialize_endian_uint16_t+0x98>
 800b168:	68a2      	ldr	r2, [r4, #8]
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	7da0      	ldrb	r0, [r4, #22]
 800b16e:	f884 8015 	strb.w	r8, [r4, #21]
 800b172:	1b92      	subs	r2, r2, r6
 800b174:	1b9b      	subs	r3, r3, r6
 800b176:	f080 0001 	eor.w	r0, r0, #1
 800b17a:	60a2      	str	r2, [r4, #8]
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	b003      	add	sp, #12
 800b180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b184:	f10d 0506 	add.w	r5, sp, #6
 800b188:	4632      	mov	r2, r6
 800b18a:	4629      	mov	r1, r5
 800b18c:	4638      	mov	r0, r7
 800b18e:	f00c fac8 	bl	8017722 <memcpy>
 800b192:	68a0      	ldr	r0, [r4, #8]
 800b194:	464a      	mov	r2, r9
 800b196:	19a9      	adds	r1, r5, r6
 800b198:	f00c fac3 	bl	8017722 <memcpy>
 800b19c:	e7b4      	b.n	800b108 <ucdr_serialize_endian_uint16_t+0x5c>
 800b19e:	bf00      	nop

0800b1a0 <ucdr_deserialize_uint16_t>:
 800b1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	2102      	movs	r1, #2
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	f000 ff9b 	bl	800c0e4 <ucdr_buffer_alignment>
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b1b6:	f000 ffd9 	bl	800c16c <ucdr_advance_buffer>
 800b1ba:	2102      	movs	r1, #2
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 ff31 	bl	800c024 <ucdr_check_buffer_available_for>
 800b1c2:	b1a8      	cbz	r0, 800b1f0 <ucdr_deserialize_uint16_t+0x50>
 800b1c4:	7d22      	ldrb	r2, [r4, #20]
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	2a01      	cmp	r2, #1
 800b1ca:	d046      	beq.n	800b25a <ucdr_deserialize_uint16_t+0xba>
 800b1cc:	785b      	ldrb	r3, [r3, #1]
 800b1ce:	702b      	strb	r3, [r5, #0]
 800b1d0:	68a3      	ldr	r3, [r4, #8]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	706b      	strb	r3, [r5, #1]
 800b1d6:	68a2      	ldr	r2, [r4, #8]
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	3202      	adds	r2, #2
 800b1dc:	3302      	adds	r3, #2
 800b1de:	2102      	movs	r1, #2
 800b1e0:	60a2      	str	r2, [r4, #8]
 800b1e2:	6123      	str	r3, [r4, #16]
 800b1e4:	7561      	strb	r1, [r4, #21]
 800b1e6:	7da0      	ldrb	r0, [r4, #22]
 800b1e8:	f080 0001 	eor.w	r0, r0, #1
 800b1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1f0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b1f4:	42be      	cmp	r6, r7
 800b1f6:	d920      	bls.n	800b23a <ucdr_deserialize_uint16_t+0x9a>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	60a6      	str	r6, [r4, #8]
 800b1fc:	1bf6      	subs	r6, r6, r7
 800b1fe:	4433      	add	r3, r6
 800b200:	f1c6 0902 	rsb	r9, r6, #2
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	4649      	mov	r1, r9
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 ff17 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b20e:	b338      	cbz	r0, 800b260 <ucdr_deserialize_uint16_t+0xc0>
 800b210:	7d23      	ldrb	r3, [r4, #20]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d034      	beq.n	800b280 <ucdr_deserialize_uint16_t+0xe0>
 800b216:	787b      	ldrb	r3, [r7, #1]
 800b218:	702b      	strb	r3, [r5, #0]
 800b21a:	783b      	ldrb	r3, [r7, #0]
 800b21c:	706b      	strb	r3, [r5, #1]
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	68a2      	ldr	r2, [r4, #8]
 800b222:	7da0      	ldrb	r0, [r4, #22]
 800b224:	2102      	movs	r1, #2
 800b226:	3302      	adds	r3, #2
 800b228:	444a      	add	r2, r9
 800b22a:	1b9b      	subs	r3, r3, r6
 800b22c:	7561      	strb	r1, [r4, #21]
 800b22e:	60a2      	str	r2, [r4, #8]
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	f080 0001 	eor.w	r0, r0, #1
 800b236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23a:	2102      	movs	r1, #2
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 fefd 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b242:	2800      	cmp	r0, #0
 800b244:	d0cf      	beq.n	800b1e6 <ucdr_deserialize_uint16_t+0x46>
 800b246:	7d23      	ldrb	r3, [r4, #20]
 800b248:	68a2      	ldr	r2, [r4, #8]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d015      	beq.n	800b27a <ucdr_deserialize_uint16_t+0xda>
 800b24e:	7853      	ldrb	r3, [r2, #1]
 800b250:	702b      	strb	r3, [r5, #0]
 800b252:	68a3      	ldr	r3, [r4, #8]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	706b      	strb	r3, [r5, #1]
 800b258:	e7bd      	b.n	800b1d6 <ucdr_deserialize_uint16_t+0x36>
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	802b      	strh	r3, [r5, #0]
 800b25e:	e7ba      	b.n	800b1d6 <ucdr_deserialize_uint16_t+0x36>
 800b260:	68a2      	ldr	r2, [r4, #8]
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	7da0      	ldrb	r0, [r4, #22]
 800b266:	f884 8015 	strb.w	r8, [r4, #21]
 800b26a:	1b92      	subs	r2, r2, r6
 800b26c:	1b9b      	subs	r3, r3, r6
 800b26e:	60a2      	str	r2, [r4, #8]
 800b270:	6123      	str	r3, [r4, #16]
 800b272:	f080 0001 	eor.w	r0, r0, #1
 800b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27a:	8813      	ldrh	r3, [r2, #0]
 800b27c:	802b      	strh	r3, [r5, #0]
 800b27e:	e7aa      	b.n	800b1d6 <ucdr_deserialize_uint16_t+0x36>
 800b280:	4639      	mov	r1, r7
 800b282:	4632      	mov	r2, r6
 800b284:	4628      	mov	r0, r5
 800b286:	f00c fa4c 	bl	8017722 <memcpy>
 800b28a:	68a1      	ldr	r1, [r4, #8]
 800b28c:	464a      	mov	r2, r9
 800b28e:	19a8      	adds	r0, r5, r6
 800b290:	f00c fa47 	bl	8017722 <memcpy>
 800b294:	e7c3      	b.n	800b21e <ucdr_deserialize_uint16_t+0x7e>
 800b296:	bf00      	nop

0800b298 <ucdr_deserialize_endian_uint16_t>:
 800b298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29c:	460e      	mov	r6, r1
 800b29e:	2102      	movs	r1, #2
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	4615      	mov	r5, r2
 800b2a4:	f000 ff1e 	bl	800c0e4 <ucdr_buffer_alignment>
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b2b0:	f000 ff5c 	bl	800c16c <ucdr_advance_buffer>
 800b2b4:	2102      	movs	r1, #2
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 feb4 	bl	800c024 <ucdr_check_buffer_available_for>
 800b2bc:	bb60      	cbnz	r0, 800b318 <ucdr_deserialize_endian_uint16_t+0x80>
 800b2be:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b2c2:	4547      	cmp	r7, r8
 800b2c4:	d923      	bls.n	800b30e <ucdr_deserialize_endian_uint16_t+0x76>
 800b2c6:	6923      	ldr	r3, [r4, #16]
 800b2c8:	60a7      	str	r7, [r4, #8]
 800b2ca:	eba7 0708 	sub.w	r7, r7, r8
 800b2ce:	443b      	add	r3, r7
 800b2d0:	f1c7 0a02 	rsb	sl, r7, #2
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	4651      	mov	r1, sl
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 feaf 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d032      	beq.n	800b348 <ucdr_deserialize_endian_uint16_t+0xb0>
 800b2e2:	2e01      	cmp	r6, #1
 800b2e4:	d03d      	beq.n	800b362 <ucdr_deserialize_endian_uint16_t+0xca>
 800b2e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b2ea:	702b      	strb	r3, [r5, #0]
 800b2ec:	f898 3000 	ldrb.w	r3, [r8]
 800b2f0:	706b      	strb	r3, [r5, #1]
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	68a2      	ldr	r2, [r4, #8]
 800b2f6:	7da0      	ldrb	r0, [r4, #22]
 800b2f8:	2102      	movs	r1, #2
 800b2fa:	3302      	adds	r3, #2
 800b2fc:	4452      	add	r2, sl
 800b2fe:	1bdb      	subs	r3, r3, r7
 800b300:	7561      	strb	r1, [r4, #21]
 800b302:	60a2      	str	r2, [r4, #8]
 800b304:	6123      	str	r3, [r4, #16]
 800b306:	f080 0001 	eor.w	r0, r0, #1
 800b30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30e:	2102      	movs	r1, #2
 800b310:	4620      	mov	r0, r4
 800b312:	f000 fe93 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b316:	b178      	cbz	r0, 800b338 <ucdr_deserialize_endian_uint16_t+0xa0>
 800b318:	2e01      	cmp	r6, #1
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	d011      	beq.n	800b342 <ucdr_deserialize_endian_uint16_t+0xaa>
 800b31e:	785b      	ldrb	r3, [r3, #1]
 800b320:	702b      	strb	r3, [r5, #0]
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	706b      	strb	r3, [r5, #1]
 800b328:	68a2      	ldr	r2, [r4, #8]
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	3202      	adds	r2, #2
 800b32e:	3302      	adds	r3, #2
 800b330:	2102      	movs	r1, #2
 800b332:	60a2      	str	r2, [r4, #8]
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	7561      	strb	r1, [r4, #21]
 800b338:	7da0      	ldrb	r0, [r4, #22]
 800b33a:	f080 0001 	eor.w	r0, r0, #1
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b342:	881b      	ldrh	r3, [r3, #0]
 800b344:	802b      	strh	r3, [r5, #0]
 800b346:	e7ef      	b.n	800b328 <ucdr_deserialize_endian_uint16_t+0x90>
 800b348:	68a2      	ldr	r2, [r4, #8]
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	7da0      	ldrb	r0, [r4, #22]
 800b34e:	f884 9015 	strb.w	r9, [r4, #21]
 800b352:	1bd2      	subs	r2, r2, r7
 800b354:	1bdb      	subs	r3, r3, r7
 800b356:	60a2      	str	r2, [r4, #8]
 800b358:	6123      	str	r3, [r4, #16]
 800b35a:	f080 0001 	eor.w	r0, r0, #1
 800b35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b362:	4641      	mov	r1, r8
 800b364:	463a      	mov	r2, r7
 800b366:	4628      	mov	r0, r5
 800b368:	f00c f9db 	bl	8017722 <memcpy>
 800b36c:	68a1      	ldr	r1, [r4, #8]
 800b36e:	4652      	mov	r2, sl
 800b370:	19e8      	adds	r0, r5, r7
 800b372:	f00c f9d6 	bl	8017722 <memcpy>
 800b376:	e7bc      	b.n	800b2f2 <ucdr_deserialize_endian_uint16_t+0x5a>

0800b378 <ucdr_serialize_uint32_t>:
 800b378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	4604      	mov	r4, r0
 800b380:	9101      	str	r1, [sp, #4]
 800b382:	2104      	movs	r1, #4
 800b384:	f000 feae 	bl	800c0e4 <ucdr_buffer_alignment>
 800b388:	4601      	mov	r1, r0
 800b38a:	4620      	mov	r0, r4
 800b38c:	7d67      	ldrb	r7, [r4, #21]
 800b38e:	f000 feed 	bl	800c16c <ucdr_advance_buffer>
 800b392:	2104      	movs	r1, #4
 800b394:	4620      	mov	r0, r4
 800b396:	f000 fe45 	bl	800c024 <ucdr_check_buffer_available_for>
 800b39a:	b300      	cbz	r0, 800b3de <ucdr_serialize_uint32_t+0x66>
 800b39c:	7d22      	ldrb	r2, [r4, #20]
 800b39e:	68a3      	ldr	r3, [r4, #8]
 800b3a0:	2a01      	cmp	r2, #1
 800b3a2:	d05d      	beq.n	800b460 <ucdr_serialize_uint32_t+0xe8>
 800b3a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	68a3      	ldr	r3, [r4, #8]
 800b3ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3b0:	705a      	strb	r2, [r3, #1]
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b3b8:	709a      	strb	r2, [r3, #2]
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3c0:	70da      	strb	r2, [r3, #3]
 800b3c2:	68a2      	ldr	r2, [r4, #8]
 800b3c4:	6923      	ldr	r3, [r4, #16]
 800b3c6:	3204      	adds	r2, #4
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	2104      	movs	r1, #4
 800b3cc:	60a2      	str	r2, [r4, #8]
 800b3ce:	6123      	str	r3, [r4, #16]
 800b3d0:	7561      	strb	r1, [r4, #21]
 800b3d2:	7da0      	ldrb	r0, [r4, #22]
 800b3d4:	f080 0001 	eor.w	r0, r0, #1
 800b3d8:	b002      	add	sp, #8
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3de:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3e2:	42ab      	cmp	r3, r5
 800b3e4:	d92e      	bls.n	800b444 <ucdr_serialize_uint32_t+0xcc>
 800b3e6:	1b5e      	subs	r6, r3, r5
 800b3e8:	60a3      	str	r3, [r4, #8]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	f1c6 0804 	rsb	r8, r6, #4
 800b3f0:	4433      	add	r3, r6
 800b3f2:	6123      	str	r3, [r4, #16]
 800b3f4:	4641      	mov	r1, r8
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f000 fe20 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b3fc:	b398      	cbz	r0, 800b466 <ucdr_serialize_uint32_t+0xee>
 800b3fe:	7d23      	ldrb	r3, [r4, #20]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d046      	beq.n	800b492 <ucdr_serialize_uint32_t+0x11a>
 800b404:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b408:	702b      	strb	r3, [r5, #0]
 800b40a:	2e01      	cmp	r6, #1
 800b40c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b410:	706b      	strb	r3, [r5, #1]
 800b412:	d035      	beq.n	800b480 <ucdr_serialize_uint32_t+0x108>
 800b414:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b418:	70ab      	strb	r3, [r5, #2]
 800b41a:	2e02      	cmp	r6, #2
 800b41c:	d034      	beq.n	800b488 <ucdr_serialize_uint32_t+0x110>
 800b41e:	3503      	adds	r5, #3
 800b420:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b424:	702b      	strb	r3, [r5, #0]
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	68a2      	ldr	r2, [r4, #8]
 800b42a:	7da0      	ldrb	r0, [r4, #22]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4442      	add	r2, r8
 800b430:	1b9b      	subs	r3, r3, r6
 800b432:	2104      	movs	r1, #4
 800b434:	f080 0001 	eor.w	r0, r0, #1
 800b438:	60a2      	str	r2, [r4, #8]
 800b43a:	6123      	str	r3, [r4, #16]
 800b43c:	7561      	strb	r1, [r4, #21]
 800b43e:	b002      	add	sp, #8
 800b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b444:	2104      	movs	r1, #4
 800b446:	4620      	mov	r0, r4
 800b448:	f000 fdf8 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d0c0      	beq.n	800b3d2 <ucdr_serialize_uint32_t+0x5a>
 800b450:	7d23      	ldrb	r3, [r4, #20]
 800b452:	68a2      	ldr	r2, [r4, #8]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d019      	beq.n	800b48c <ucdr_serialize_uint32_t+0x114>
 800b458:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b45c:	7013      	strb	r3, [r2, #0]
 800b45e:	e7a4      	b.n	800b3aa <ucdr_serialize_uint32_t+0x32>
 800b460:	9a01      	ldr	r2, [sp, #4]
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	e7ad      	b.n	800b3c2 <ucdr_serialize_uint32_t+0x4a>
 800b466:	68a2      	ldr	r2, [r4, #8]
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	7da0      	ldrb	r0, [r4, #22]
 800b46c:	7567      	strb	r7, [r4, #21]
 800b46e:	1b92      	subs	r2, r2, r6
 800b470:	1b9b      	subs	r3, r3, r6
 800b472:	f080 0001 	eor.w	r0, r0, #1
 800b476:	60a2      	str	r2, [r4, #8]
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	b002      	add	sp, #8
 800b47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b480:	68a3      	ldr	r3, [r4, #8]
 800b482:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b486:	701a      	strb	r2, [r3, #0]
 800b488:	68a5      	ldr	r5, [r4, #8]
 800b48a:	e7c9      	b.n	800b420 <ucdr_serialize_uint32_t+0xa8>
 800b48c:	9b01      	ldr	r3, [sp, #4]
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	e797      	b.n	800b3c2 <ucdr_serialize_uint32_t+0x4a>
 800b492:	4628      	mov	r0, r5
 800b494:	ad01      	add	r5, sp, #4
 800b496:	4632      	mov	r2, r6
 800b498:	4629      	mov	r1, r5
 800b49a:	f00c f942 	bl	8017722 <memcpy>
 800b49e:	68a0      	ldr	r0, [r4, #8]
 800b4a0:	4642      	mov	r2, r8
 800b4a2:	19a9      	adds	r1, r5, r6
 800b4a4:	f00c f93d 	bl	8017722 <memcpy>
 800b4a8:	e7bd      	b.n	800b426 <ucdr_serialize_uint32_t+0xae>
 800b4aa:	bf00      	nop

0800b4ac <ucdr_serialize_endian_uint32_t>:
 800b4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	2104      	movs	r1, #4
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	9201      	str	r2, [sp, #4]
 800b4ba:	f000 fe13 	bl	800c0e4 <ucdr_buffer_alignment>
 800b4be:	4601      	mov	r1, r0
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4c6:	f000 fe51 	bl	800c16c <ucdr_advance_buffer>
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 fda9 	bl	800c024 <ucdr_check_buffer_available_for>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d137      	bne.n	800b546 <ucdr_serialize_endian_uint32_t+0x9a>
 800b4d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b4da:	42b7      	cmp	r7, r6
 800b4dc:	d92e      	bls.n	800b53c <ucdr_serialize_endian_uint32_t+0x90>
 800b4de:	6923      	ldr	r3, [r4, #16]
 800b4e0:	60a7      	str	r7, [r4, #8]
 800b4e2:	1bbf      	subs	r7, r7, r6
 800b4e4:	443b      	add	r3, r7
 800b4e6:	f1c7 0904 	rsb	r9, r7, #4
 800b4ea:	6123      	str	r3, [r4, #16]
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f000 fda4 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d049      	beq.n	800b58c <ucdr_serialize_endian_uint32_t+0xe0>
 800b4f8:	2d01      	cmp	r5, #1
 800b4fa:	d05b      	beq.n	800b5b4 <ucdr_serialize_endian_uint32_t+0x108>
 800b4fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b500:	7033      	strb	r3, [r6, #0]
 800b502:	2f01      	cmp	r7, #1
 800b504:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b508:	7073      	strb	r3, [r6, #1]
 800b50a:	d04d      	beq.n	800b5a8 <ucdr_serialize_endian_uint32_t+0xfc>
 800b50c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b510:	70b3      	strb	r3, [r6, #2]
 800b512:	2f02      	cmp	r7, #2
 800b514:	d04c      	beq.n	800b5b0 <ucdr_serialize_endian_uint32_t+0x104>
 800b516:	3603      	adds	r6, #3
 800b518:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b51c:	7033      	strb	r3, [r6, #0]
 800b51e:	6923      	ldr	r3, [r4, #16]
 800b520:	68a2      	ldr	r2, [r4, #8]
 800b522:	7da0      	ldrb	r0, [r4, #22]
 800b524:	3304      	adds	r3, #4
 800b526:	444a      	add	r2, r9
 800b528:	1bdb      	subs	r3, r3, r7
 800b52a:	2104      	movs	r1, #4
 800b52c:	f080 0001 	eor.w	r0, r0, #1
 800b530:	60a2      	str	r2, [r4, #8]
 800b532:	6123      	str	r3, [r4, #16]
 800b534:	7561      	strb	r1, [r4, #21]
 800b536:	b003      	add	sp, #12
 800b538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53c:	2104      	movs	r1, #4
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 fd7c 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b544:	b1c8      	cbz	r0, 800b57a <ucdr_serialize_endian_uint32_t+0xce>
 800b546:	2d01      	cmp	r5, #1
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	d01c      	beq.n	800b586 <ucdr_serialize_endian_uint32_t+0xda>
 800b54c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	68a3      	ldr	r3, [r4, #8]
 800b554:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b558:	705a      	strb	r2, [r3, #1]
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b560:	709a      	strb	r2, [r3, #2]
 800b562:	68a3      	ldr	r3, [r4, #8]
 800b564:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b568:	70da      	strb	r2, [r3, #3]
 800b56a:	68a2      	ldr	r2, [r4, #8]
 800b56c:	6923      	ldr	r3, [r4, #16]
 800b56e:	3204      	adds	r2, #4
 800b570:	3304      	adds	r3, #4
 800b572:	2104      	movs	r1, #4
 800b574:	60a2      	str	r2, [r4, #8]
 800b576:	6123      	str	r3, [r4, #16]
 800b578:	7561      	strb	r1, [r4, #21]
 800b57a:	7da0      	ldrb	r0, [r4, #22]
 800b57c:	f080 0001 	eor.w	r0, r0, #1
 800b580:	b003      	add	sp, #12
 800b582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b586:	9a01      	ldr	r2, [sp, #4]
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	e7ee      	b.n	800b56a <ucdr_serialize_endian_uint32_t+0xbe>
 800b58c:	68a2      	ldr	r2, [r4, #8]
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	7da0      	ldrb	r0, [r4, #22]
 800b592:	f884 8015 	strb.w	r8, [r4, #21]
 800b596:	1bd2      	subs	r2, r2, r7
 800b598:	1bdb      	subs	r3, r3, r7
 800b59a:	f080 0001 	eor.w	r0, r0, #1
 800b59e:	60a2      	str	r2, [r4, #8]
 800b5a0:	6123      	str	r3, [r4, #16]
 800b5a2:	b003      	add	sp, #12
 800b5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5a8:	68a3      	ldr	r3, [r4, #8]
 800b5aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5ae:	701a      	strb	r2, [r3, #0]
 800b5b0:	68a6      	ldr	r6, [r4, #8]
 800b5b2:	e7b1      	b.n	800b518 <ucdr_serialize_endian_uint32_t+0x6c>
 800b5b4:	ad01      	add	r5, sp, #4
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f00c f8b1 	bl	8017722 <memcpy>
 800b5c0:	68a0      	ldr	r0, [r4, #8]
 800b5c2:	464a      	mov	r2, r9
 800b5c4:	19e9      	adds	r1, r5, r7
 800b5c6:	f00c f8ac 	bl	8017722 <memcpy>
 800b5ca:	e7a8      	b.n	800b51e <ucdr_serialize_endian_uint32_t+0x72>

0800b5cc <ucdr_deserialize_uint32_t>:
 800b5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	2104      	movs	r1, #4
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	f000 fd85 	bl	800c0e4 <ucdr_buffer_alignment>
 800b5da:	4601      	mov	r1, r0
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b5e2:	f000 fdc3 	bl	800c16c <ucdr_advance_buffer>
 800b5e6:	2104      	movs	r1, #4
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 fd1b 	bl	800c024 <ucdr_check_buffer_available_for>
 800b5ee:	b1d8      	cbz	r0, 800b628 <ucdr_deserialize_uint32_t+0x5c>
 800b5f0:	7d22      	ldrb	r2, [r4, #20]
 800b5f2:	68a3      	ldr	r3, [r4, #8]
 800b5f4:	2a01      	cmp	r2, #1
 800b5f6:	d052      	beq.n	800b69e <ucdr_deserialize_uint32_t+0xd2>
 800b5f8:	78db      	ldrb	r3, [r3, #3]
 800b5fa:	702b      	strb	r3, [r5, #0]
 800b5fc:	68a3      	ldr	r3, [r4, #8]
 800b5fe:	789b      	ldrb	r3, [r3, #2]
 800b600:	706b      	strb	r3, [r5, #1]
 800b602:	68a3      	ldr	r3, [r4, #8]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	70ab      	strb	r3, [r5, #2]
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	70eb      	strb	r3, [r5, #3]
 800b60e:	68a2      	ldr	r2, [r4, #8]
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	3204      	adds	r2, #4
 800b614:	3304      	adds	r3, #4
 800b616:	2104      	movs	r1, #4
 800b618:	60a2      	str	r2, [r4, #8]
 800b61a:	6123      	str	r3, [r4, #16]
 800b61c:	7561      	strb	r1, [r4, #21]
 800b61e:	7da0      	ldrb	r0, [r4, #22]
 800b620:	f080 0001 	eor.w	r0, r0, #1
 800b624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b628:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b62c:	42b7      	cmp	r7, r6
 800b62e:	d92a      	bls.n	800b686 <ucdr_deserialize_uint32_t+0xba>
 800b630:	6923      	ldr	r3, [r4, #16]
 800b632:	60a7      	str	r7, [r4, #8]
 800b634:	1bbf      	subs	r7, r7, r6
 800b636:	443b      	add	r3, r7
 800b638:	f1c7 0904 	rsb	r9, r7, #4
 800b63c:	6123      	str	r3, [r4, #16]
 800b63e:	4649      	mov	r1, r9
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fcfb 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b646:	b368      	cbz	r0, 800b6a4 <ucdr_deserialize_uint32_t+0xd8>
 800b648:	7d23      	ldrb	r3, [r4, #20]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d040      	beq.n	800b6d0 <ucdr_deserialize_uint32_t+0x104>
 800b64e:	78f3      	ldrb	r3, [r6, #3]
 800b650:	702b      	strb	r3, [r5, #0]
 800b652:	78b3      	ldrb	r3, [r6, #2]
 800b654:	706b      	strb	r3, [r5, #1]
 800b656:	2f01      	cmp	r7, #1
 800b658:	d031      	beq.n	800b6be <ucdr_deserialize_uint32_t+0xf2>
 800b65a:	7873      	ldrb	r3, [r6, #1]
 800b65c:	70ab      	strb	r3, [r5, #2]
 800b65e:	2f02      	cmp	r7, #2
 800b660:	f105 0503 	add.w	r5, r5, #3
 800b664:	d02f      	beq.n	800b6c6 <ucdr_deserialize_uint32_t+0xfa>
 800b666:	7833      	ldrb	r3, [r6, #0]
 800b668:	702b      	strb	r3, [r5, #0]
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	68a2      	ldr	r2, [r4, #8]
 800b66e:	7da0      	ldrb	r0, [r4, #22]
 800b670:	2104      	movs	r1, #4
 800b672:	3304      	adds	r3, #4
 800b674:	444a      	add	r2, r9
 800b676:	1bdb      	subs	r3, r3, r7
 800b678:	7561      	strb	r1, [r4, #21]
 800b67a:	60a2      	str	r2, [r4, #8]
 800b67c:	6123      	str	r3, [r4, #16]
 800b67e:	f080 0001 	eor.w	r0, r0, #1
 800b682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b686:	2104      	movs	r1, #4
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fcd7 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d0c5      	beq.n	800b61e <ucdr_deserialize_uint32_t+0x52>
 800b692:	7d23      	ldrb	r3, [r4, #20]
 800b694:	68a2      	ldr	r2, [r4, #8]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d017      	beq.n	800b6ca <ucdr_deserialize_uint32_t+0xfe>
 800b69a:	78d3      	ldrb	r3, [r2, #3]
 800b69c:	e7ad      	b.n	800b5fa <ucdr_deserialize_uint32_t+0x2e>
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	602b      	str	r3, [r5, #0]
 800b6a2:	e7b4      	b.n	800b60e <ucdr_deserialize_uint32_t+0x42>
 800b6a4:	68a2      	ldr	r2, [r4, #8]
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	7da0      	ldrb	r0, [r4, #22]
 800b6aa:	f884 8015 	strb.w	r8, [r4, #21]
 800b6ae:	1bd2      	subs	r2, r2, r7
 800b6b0:	1bdb      	subs	r3, r3, r7
 800b6b2:	60a2      	str	r2, [r4, #8]
 800b6b4:	6123      	str	r3, [r4, #16]
 800b6b6:	f080 0001 	eor.w	r0, r0, #1
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	785b      	ldrb	r3, [r3, #1]
 800b6c2:	70ab      	strb	r3, [r5, #2]
 800b6c4:	3503      	adds	r5, #3
 800b6c6:	68a6      	ldr	r6, [r4, #8]
 800b6c8:	e7cd      	b.n	800b666 <ucdr_deserialize_uint32_t+0x9a>
 800b6ca:	6813      	ldr	r3, [r2, #0]
 800b6cc:	602b      	str	r3, [r5, #0]
 800b6ce:	e79e      	b.n	800b60e <ucdr_deserialize_uint32_t+0x42>
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	463a      	mov	r2, r7
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	f00c f824 	bl	8017722 <memcpy>
 800b6da:	68a1      	ldr	r1, [r4, #8]
 800b6dc:	464a      	mov	r2, r9
 800b6de:	19e8      	adds	r0, r5, r7
 800b6e0:	f00c f81f 	bl	8017722 <memcpy>
 800b6e4:	e7c1      	b.n	800b66a <ucdr_deserialize_uint32_t+0x9e>
 800b6e6:	bf00      	nop

0800b6e8 <ucdr_deserialize_endian_uint32_t>:
 800b6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ec:	460e      	mov	r6, r1
 800b6ee:	2104      	movs	r1, #4
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	4615      	mov	r5, r2
 800b6f4:	f000 fcf6 	bl	800c0e4 <ucdr_buffer_alignment>
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b700:	f000 fd34 	bl	800c16c <ucdr_advance_buffer>
 800b704:	2104      	movs	r1, #4
 800b706:	4620      	mov	r0, r4
 800b708:	f000 fc8c 	bl	800c024 <ucdr_check_buffer_available_for>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d137      	bne.n	800b780 <ucdr_deserialize_endian_uint32_t+0x98>
 800b710:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b714:	42bb      	cmp	r3, r7
 800b716:	d92e      	bls.n	800b776 <ucdr_deserialize_endian_uint32_t+0x8e>
 800b718:	eba3 0807 	sub.w	r8, r3, r7
 800b71c:	60a3      	str	r3, [r4, #8]
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	f1c8 0a04 	rsb	sl, r8, #4
 800b724:	4443      	add	r3, r8
 800b726:	6123      	str	r3, [r4, #16]
 800b728:	4651      	mov	r1, sl
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 fc86 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b730:	2800      	cmp	r0, #0
 800b732:	d043      	beq.n	800b7bc <ucdr_deserialize_endian_uint32_t+0xd4>
 800b734:	2e01      	cmp	r6, #1
 800b736:	d056      	beq.n	800b7e6 <ucdr_deserialize_endian_uint32_t+0xfe>
 800b738:	78fb      	ldrb	r3, [r7, #3]
 800b73a:	702b      	strb	r3, [r5, #0]
 800b73c:	78bb      	ldrb	r3, [r7, #2]
 800b73e:	706b      	strb	r3, [r5, #1]
 800b740:	f1b8 0f01 	cmp.w	r8, #1
 800b744:	d049      	beq.n	800b7da <ucdr_deserialize_endian_uint32_t+0xf2>
 800b746:	787b      	ldrb	r3, [r7, #1]
 800b748:	70ab      	strb	r3, [r5, #2]
 800b74a:	f1b8 0f02 	cmp.w	r8, #2
 800b74e:	f105 0503 	add.w	r5, r5, #3
 800b752:	d046      	beq.n	800b7e2 <ucdr_deserialize_endian_uint32_t+0xfa>
 800b754:	783b      	ldrb	r3, [r7, #0]
 800b756:	702b      	strb	r3, [r5, #0]
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	68a2      	ldr	r2, [r4, #8]
 800b75c:	7da0      	ldrb	r0, [r4, #22]
 800b75e:	2104      	movs	r1, #4
 800b760:	3304      	adds	r3, #4
 800b762:	4452      	add	r2, sl
 800b764:	eba3 0308 	sub.w	r3, r3, r8
 800b768:	7561      	strb	r1, [r4, #21]
 800b76a:	60a2      	str	r2, [r4, #8]
 800b76c:	6123      	str	r3, [r4, #16]
 800b76e:	f080 0001 	eor.w	r0, r0, #1
 800b772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b776:	2104      	movs	r1, #4
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 fc5f 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b77e:	b1a8      	cbz	r0, 800b7ac <ucdr_deserialize_endian_uint32_t+0xc4>
 800b780:	2e01      	cmp	r6, #1
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	d017      	beq.n	800b7b6 <ucdr_deserialize_endian_uint32_t+0xce>
 800b786:	78db      	ldrb	r3, [r3, #3]
 800b788:	702b      	strb	r3, [r5, #0]
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	789b      	ldrb	r3, [r3, #2]
 800b78e:	706b      	strb	r3, [r5, #1]
 800b790:	68a3      	ldr	r3, [r4, #8]
 800b792:	785b      	ldrb	r3, [r3, #1]
 800b794:	70ab      	strb	r3, [r5, #2]
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	70eb      	strb	r3, [r5, #3]
 800b79c:	68a2      	ldr	r2, [r4, #8]
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	3204      	adds	r2, #4
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	2104      	movs	r1, #4
 800b7a6:	60a2      	str	r2, [r4, #8]
 800b7a8:	6123      	str	r3, [r4, #16]
 800b7aa:	7561      	strb	r1, [r4, #21]
 800b7ac:	7da0      	ldrb	r0, [r4, #22]
 800b7ae:	f080 0001 	eor.w	r0, r0, #1
 800b7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	602b      	str	r3, [r5, #0]
 800b7ba:	e7ef      	b.n	800b79c <ucdr_deserialize_endian_uint32_t+0xb4>
 800b7bc:	68a2      	ldr	r2, [r4, #8]
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	7da0      	ldrb	r0, [r4, #22]
 800b7c2:	f884 9015 	strb.w	r9, [r4, #21]
 800b7c6:	eba2 0208 	sub.w	r2, r2, r8
 800b7ca:	eba3 0308 	sub.w	r3, r3, r8
 800b7ce:	60a2      	str	r2, [r4, #8]
 800b7d0:	6123      	str	r3, [r4, #16]
 800b7d2:	f080 0001 	eor.w	r0, r0, #1
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	68a3      	ldr	r3, [r4, #8]
 800b7dc:	785b      	ldrb	r3, [r3, #1]
 800b7de:	70ab      	strb	r3, [r5, #2]
 800b7e0:	3503      	adds	r5, #3
 800b7e2:	68a7      	ldr	r7, [r4, #8]
 800b7e4:	e7b6      	b.n	800b754 <ucdr_deserialize_endian_uint32_t+0x6c>
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f00b ff99 	bl	8017722 <memcpy>
 800b7f0:	68a1      	ldr	r1, [r4, #8]
 800b7f2:	4652      	mov	r2, sl
 800b7f4:	eb05 0008 	add.w	r0, r5, r8
 800b7f8:	f00b ff93 	bl	8017722 <memcpy>
 800b7fc:	e7ac      	b.n	800b758 <ucdr_deserialize_endian_uint32_t+0x70>
 800b7fe:	bf00      	nop

0800b800 <ucdr_serialize_uint64_t>:
 800b800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b804:	2108      	movs	r1, #8
 800b806:	b082      	sub	sp, #8
 800b808:	4604      	mov	r4, r0
 800b80a:	e9cd 2300 	strd	r2, r3, [sp]
 800b80e:	f000 fc69 	bl	800c0e4 <ucdr_buffer_alignment>
 800b812:	4601      	mov	r1, r0
 800b814:	4620      	mov	r0, r4
 800b816:	7d67      	ldrb	r7, [r4, #21]
 800b818:	f000 fca8 	bl	800c16c <ucdr_advance_buffer>
 800b81c:	2108      	movs	r1, #8
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fc00 	bl	800c024 <ucdr_check_buffer_available_for>
 800b824:	2800      	cmp	r0, #0
 800b826:	d14d      	bne.n	800b8c4 <ucdr_serialize_uint64_t+0xc4>
 800b828:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b82c:	42ab      	cmp	r3, r5
 800b82e:	d944      	bls.n	800b8ba <ucdr_serialize_uint64_t+0xba>
 800b830:	1b5e      	subs	r6, r3, r5
 800b832:	60a3      	str	r3, [r4, #8]
 800b834:	6923      	ldr	r3, [r4, #16]
 800b836:	f1c6 0808 	rsb	r8, r6, #8
 800b83a:	4433      	add	r3, r6
 800b83c:	6123      	str	r3, [r4, #16]
 800b83e:	4641      	mov	r1, r8
 800b840:	4620      	mov	r0, r4
 800b842:	f000 fbfb 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b846:	2800      	cmp	r0, #0
 800b848:	d072      	beq.n	800b930 <ucdr_serialize_uint64_t+0x130>
 800b84a:	7d23      	ldrb	r3, [r4, #20]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	f000 8092 	beq.w	800b976 <ucdr_serialize_uint64_t+0x176>
 800b852:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b856:	702b      	strb	r3, [r5, #0]
 800b858:	2e01      	cmp	r6, #1
 800b85a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b85e:	706b      	strb	r3, [r5, #1]
 800b860:	d073      	beq.n	800b94a <ucdr_serialize_uint64_t+0x14a>
 800b862:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b866:	70ab      	strb	r3, [r5, #2]
 800b868:	2e02      	cmp	r6, #2
 800b86a:	d072      	beq.n	800b952 <ucdr_serialize_uint64_t+0x152>
 800b86c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b870:	70eb      	strb	r3, [r5, #3]
 800b872:	2e03      	cmp	r6, #3
 800b874:	d071      	beq.n	800b95a <ucdr_serialize_uint64_t+0x15a>
 800b876:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b87a:	712b      	strb	r3, [r5, #4]
 800b87c:	2e04      	cmp	r6, #4
 800b87e:	d070      	beq.n	800b962 <ucdr_serialize_uint64_t+0x162>
 800b880:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b884:	716b      	strb	r3, [r5, #5]
 800b886:	2e05      	cmp	r6, #5
 800b888:	d06f      	beq.n	800b96a <ucdr_serialize_uint64_t+0x16a>
 800b88a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b88e:	71ab      	strb	r3, [r5, #6]
 800b890:	2e06      	cmp	r6, #6
 800b892:	d06e      	beq.n	800b972 <ucdr_serialize_uint64_t+0x172>
 800b894:	3507      	adds	r5, #7
 800b896:	f89d 3000 	ldrb.w	r3, [sp]
 800b89a:	702b      	strb	r3, [r5, #0]
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	68a2      	ldr	r2, [r4, #8]
 800b8a0:	7da0      	ldrb	r0, [r4, #22]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	4442      	add	r2, r8
 800b8a6:	1b9b      	subs	r3, r3, r6
 800b8a8:	2108      	movs	r1, #8
 800b8aa:	f080 0001 	eor.w	r0, r0, #1
 800b8ae:	60a2      	str	r2, [r4, #8]
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	7561      	strb	r1, [r4, #21]
 800b8b4:	b002      	add	sp, #8
 800b8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ba:	2108      	movs	r1, #8
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f000 fbbd 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800b8c2:	b350      	cbz	r0, 800b91a <ucdr_serialize_uint64_t+0x11a>
 800b8c4:	7d22      	ldrb	r2, [r4, #20]
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	2a01      	cmp	r2, #1
 800b8ca:	d02c      	beq.n	800b926 <ucdr_serialize_uint64_t+0x126>
 800b8cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8d0:	701a      	strb	r2, [r3, #0]
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8d8:	705a      	strb	r2, [r3, #1]
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8e0:	709a      	strb	r2, [r3, #2]
 800b8e2:	68a3      	ldr	r3, [r4, #8]
 800b8e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8e8:	70da      	strb	r2, [r3, #3]
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b8f0:	711a      	strb	r2, [r3, #4]
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8f8:	715a      	strb	r2, [r3, #5]
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b900:	719a      	strb	r2, [r3, #6]
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	f89d 2000 	ldrb.w	r2, [sp]
 800b908:	71da      	strb	r2, [r3, #7]
 800b90a:	68a2      	ldr	r2, [r4, #8]
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	3208      	adds	r2, #8
 800b910:	3308      	adds	r3, #8
 800b912:	2108      	movs	r1, #8
 800b914:	60a2      	str	r2, [r4, #8]
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	7561      	strb	r1, [r4, #21]
 800b91a:	7da0      	ldrb	r0, [r4, #22]
 800b91c:	f080 0001 	eor.w	r0, r0, #1
 800b920:	b002      	add	sp, #8
 800b922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b926:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b92a:	6019      	str	r1, [r3, #0]
 800b92c:	605a      	str	r2, [r3, #4]
 800b92e:	e7ec      	b.n	800b90a <ucdr_serialize_uint64_t+0x10a>
 800b930:	68a2      	ldr	r2, [r4, #8]
 800b932:	6923      	ldr	r3, [r4, #16]
 800b934:	7da0      	ldrb	r0, [r4, #22]
 800b936:	7567      	strb	r7, [r4, #21]
 800b938:	1b92      	subs	r2, r2, r6
 800b93a:	1b9b      	subs	r3, r3, r6
 800b93c:	f080 0001 	eor.w	r0, r0, #1
 800b940:	60a2      	str	r2, [r4, #8]
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	b002      	add	sp, #8
 800b946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	68a3      	ldr	r3, [r4, #8]
 800b954:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b958:	701a      	strb	r2, [r3, #0]
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b960:	701a      	strb	r2, [r3, #0]
 800b962:	68a3      	ldr	r3, [r4, #8]
 800b964:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	68a5      	ldr	r5, [r4, #8]
 800b974:	e78f      	b.n	800b896 <ucdr_serialize_uint64_t+0x96>
 800b976:	4628      	mov	r0, r5
 800b978:	466d      	mov	r5, sp
 800b97a:	4632      	mov	r2, r6
 800b97c:	4629      	mov	r1, r5
 800b97e:	f00b fed0 	bl	8017722 <memcpy>
 800b982:	68a0      	ldr	r0, [r4, #8]
 800b984:	4642      	mov	r2, r8
 800b986:	19a9      	adds	r1, r5, r6
 800b988:	f00b fecb 	bl	8017722 <memcpy>
 800b98c:	e786      	b.n	800b89c <ucdr_serialize_uint64_t+0x9c>
 800b98e:	bf00      	nop

0800b990 <ucdr_serialize_int16_t>:
 800b990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	460b      	mov	r3, r1
 800b998:	2102      	movs	r1, #2
 800b99a:	4604      	mov	r4, r0
 800b99c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b9a0:	f000 fba0 	bl	800c0e4 <ucdr_buffer_alignment>
 800b9a4:	4601      	mov	r1, r0
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	7d67      	ldrb	r7, [r4, #21]
 800b9aa:	f000 fbdf 	bl	800c16c <ucdr_advance_buffer>
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 fb37 	bl	800c024 <ucdr_check_buffer_available_for>
 800b9b6:	b1c0      	cbz	r0, 800b9ea <ucdr_serialize_int16_t+0x5a>
 800b9b8:	7d22      	ldrb	r2, [r4, #20]
 800b9ba:	68a3      	ldr	r3, [r4, #8]
 800b9bc:	2a01      	cmp	r2, #1
 800b9be:	d04e      	beq.n	800ba5e <ucdr_serialize_int16_t+0xce>
 800b9c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9cc:	705a      	strb	r2, [r3, #1]
 800b9ce:	68a2      	ldr	r2, [r4, #8]
 800b9d0:	6923      	ldr	r3, [r4, #16]
 800b9d2:	3202      	adds	r2, #2
 800b9d4:	3302      	adds	r3, #2
 800b9d6:	2102      	movs	r1, #2
 800b9d8:	60a2      	str	r2, [r4, #8]
 800b9da:	6123      	str	r3, [r4, #16]
 800b9dc:	7561      	strb	r1, [r4, #21]
 800b9de:	7da0      	ldrb	r0, [r4, #22]
 800b9e0:	f080 0001 	eor.w	r0, r0, #1
 800b9e4:	b002      	add	sp, #8
 800b9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b9ee:	42ab      	cmp	r3, r5
 800b9f0:	d923      	bls.n	800ba3a <ucdr_serialize_int16_t+0xaa>
 800b9f2:	1b5e      	subs	r6, r3, r5
 800b9f4:	60a3      	str	r3, [r4, #8]
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	f1c6 0802 	rsb	r8, r6, #2
 800b9fc:	4433      	add	r3, r6
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	4641      	mov	r1, r8
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fb1a 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800ba08:	b368      	cbz	r0, 800ba66 <ucdr_serialize_int16_t+0xd6>
 800ba0a:	7d23      	ldrb	r3, [r4, #20]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d03b      	beq.n	800ba88 <ucdr_serialize_int16_t+0xf8>
 800ba10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba14:	702b      	strb	r3, [r5, #0]
 800ba16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba1a:	706b      	strb	r3, [r5, #1]
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	68a2      	ldr	r2, [r4, #8]
 800ba20:	7da0      	ldrb	r0, [r4, #22]
 800ba22:	3302      	adds	r3, #2
 800ba24:	4442      	add	r2, r8
 800ba26:	1b9b      	subs	r3, r3, r6
 800ba28:	2102      	movs	r1, #2
 800ba2a:	f080 0001 	eor.w	r0, r0, #1
 800ba2e:	60a2      	str	r2, [r4, #8]
 800ba30:	6123      	str	r3, [r4, #16]
 800ba32:	7561      	strb	r1, [r4, #21]
 800ba34:	b002      	add	sp, #8
 800ba36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3a:	2102      	movs	r1, #2
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f000 fafd 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d0cb      	beq.n	800b9de <ucdr_serialize_int16_t+0x4e>
 800ba46:	7d23      	ldrb	r3, [r4, #20]
 800ba48:	68a2      	ldr	r2, [r4, #8]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d018      	beq.n	800ba80 <ucdr_serialize_int16_t+0xf0>
 800ba4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba52:	7013      	strb	r3, [r2, #0]
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba5a:	705a      	strb	r2, [r3, #1]
 800ba5c:	e7b7      	b.n	800b9ce <ucdr_serialize_int16_t+0x3e>
 800ba5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba62:	801a      	strh	r2, [r3, #0]
 800ba64:	e7b3      	b.n	800b9ce <ucdr_serialize_int16_t+0x3e>
 800ba66:	68a2      	ldr	r2, [r4, #8]
 800ba68:	6923      	ldr	r3, [r4, #16]
 800ba6a:	7da0      	ldrb	r0, [r4, #22]
 800ba6c:	7567      	strb	r7, [r4, #21]
 800ba6e:	1b92      	subs	r2, r2, r6
 800ba70:	1b9b      	subs	r3, r3, r6
 800ba72:	f080 0001 	eor.w	r0, r0, #1
 800ba76:	60a2      	str	r2, [r4, #8]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	b002      	add	sp, #8
 800ba7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ba84:	8013      	strh	r3, [r2, #0]
 800ba86:	e7a2      	b.n	800b9ce <ucdr_serialize_int16_t+0x3e>
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f10d 0506 	add.w	r5, sp, #6
 800ba8e:	4632      	mov	r2, r6
 800ba90:	4629      	mov	r1, r5
 800ba92:	f00b fe46 	bl	8017722 <memcpy>
 800ba96:	68a0      	ldr	r0, [r4, #8]
 800ba98:	4642      	mov	r2, r8
 800ba9a:	19a9      	adds	r1, r5, r6
 800ba9c:	f00b fe41 	bl	8017722 <memcpy>
 800baa0:	e7bc      	b.n	800ba1c <ucdr_serialize_int16_t+0x8c>
 800baa2:	bf00      	nop

0800baa4 <ucdr_deserialize_int16_t>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	460d      	mov	r5, r1
 800baaa:	2102      	movs	r1, #2
 800baac:	4604      	mov	r4, r0
 800baae:	f000 fb19 	bl	800c0e4 <ucdr_buffer_alignment>
 800bab2:	4601      	mov	r1, r0
 800bab4:	4620      	mov	r0, r4
 800bab6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800baba:	f000 fb57 	bl	800c16c <ucdr_advance_buffer>
 800babe:	2102      	movs	r1, #2
 800bac0:	4620      	mov	r0, r4
 800bac2:	f000 faaf 	bl	800c024 <ucdr_check_buffer_available_for>
 800bac6:	b1a8      	cbz	r0, 800baf4 <ucdr_deserialize_int16_t+0x50>
 800bac8:	7d22      	ldrb	r2, [r4, #20]
 800baca:	68a3      	ldr	r3, [r4, #8]
 800bacc:	2a01      	cmp	r2, #1
 800bace:	d046      	beq.n	800bb5e <ucdr_deserialize_int16_t+0xba>
 800bad0:	785b      	ldrb	r3, [r3, #1]
 800bad2:	702b      	strb	r3, [r5, #0]
 800bad4:	68a3      	ldr	r3, [r4, #8]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	706b      	strb	r3, [r5, #1]
 800bada:	68a2      	ldr	r2, [r4, #8]
 800badc:	6923      	ldr	r3, [r4, #16]
 800bade:	3202      	adds	r2, #2
 800bae0:	3302      	adds	r3, #2
 800bae2:	2102      	movs	r1, #2
 800bae4:	60a2      	str	r2, [r4, #8]
 800bae6:	6123      	str	r3, [r4, #16]
 800bae8:	7561      	strb	r1, [r4, #21]
 800baea:	7da0      	ldrb	r0, [r4, #22]
 800baec:	f080 0001 	eor.w	r0, r0, #1
 800baf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800baf8:	42be      	cmp	r6, r7
 800bafa:	d920      	bls.n	800bb3e <ucdr_deserialize_int16_t+0x9a>
 800bafc:	6923      	ldr	r3, [r4, #16]
 800bafe:	60a6      	str	r6, [r4, #8]
 800bb00:	1bf6      	subs	r6, r6, r7
 800bb02:	4433      	add	r3, r6
 800bb04:	f1c6 0902 	rsb	r9, r6, #2
 800bb08:	6123      	str	r3, [r4, #16]
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f000 fa95 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bb12:	b338      	cbz	r0, 800bb64 <ucdr_deserialize_int16_t+0xc0>
 800bb14:	7d23      	ldrb	r3, [r4, #20]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d034      	beq.n	800bb84 <ucdr_deserialize_int16_t+0xe0>
 800bb1a:	787b      	ldrb	r3, [r7, #1]
 800bb1c:	702b      	strb	r3, [r5, #0]
 800bb1e:	783b      	ldrb	r3, [r7, #0]
 800bb20:	706b      	strb	r3, [r5, #1]
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	68a2      	ldr	r2, [r4, #8]
 800bb26:	7da0      	ldrb	r0, [r4, #22]
 800bb28:	2102      	movs	r1, #2
 800bb2a:	3302      	adds	r3, #2
 800bb2c:	444a      	add	r2, r9
 800bb2e:	1b9b      	subs	r3, r3, r6
 800bb30:	7561      	strb	r1, [r4, #21]
 800bb32:	60a2      	str	r2, [r4, #8]
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	f080 0001 	eor.w	r0, r0, #1
 800bb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3e:	2102      	movs	r1, #2
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 fa7b 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d0cf      	beq.n	800baea <ucdr_deserialize_int16_t+0x46>
 800bb4a:	7d23      	ldrb	r3, [r4, #20]
 800bb4c:	68a2      	ldr	r2, [r4, #8]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d015      	beq.n	800bb7e <ucdr_deserialize_int16_t+0xda>
 800bb52:	7853      	ldrb	r3, [r2, #1]
 800bb54:	702b      	strb	r3, [r5, #0]
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	706b      	strb	r3, [r5, #1]
 800bb5c:	e7bd      	b.n	800bada <ucdr_deserialize_int16_t+0x36>
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	802b      	strh	r3, [r5, #0]
 800bb62:	e7ba      	b.n	800bada <ucdr_deserialize_int16_t+0x36>
 800bb64:	68a2      	ldr	r2, [r4, #8]
 800bb66:	6923      	ldr	r3, [r4, #16]
 800bb68:	7da0      	ldrb	r0, [r4, #22]
 800bb6a:	f884 8015 	strb.w	r8, [r4, #21]
 800bb6e:	1b92      	subs	r2, r2, r6
 800bb70:	1b9b      	subs	r3, r3, r6
 800bb72:	60a2      	str	r2, [r4, #8]
 800bb74:	6123      	str	r3, [r4, #16]
 800bb76:	f080 0001 	eor.w	r0, r0, #1
 800bb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7e:	8813      	ldrh	r3, [r2, #0]
 800bb80:	802b      	strh	r3, [r5, #0]
 800bb82:	e7aa      	b.n	800bada <ucdr_deserialize_int16_t+0x36>
 800bb84:	4639      	mov	r1, r7
 800bb86:	4632      	mov	r2, r6
 800bb88:	4628      	mov	r0, r5
 800bb8a:	f00b fdca 	bl	8017722 <memcpy>
 800bb8e:	68a1      	ldr	r1, [r4, #8]
 800bb90:	464a      	mov	r2, r9
 800bb92:	19a8      	adds	r0, r5, r6
 800bb94:	f00b fdc5 	bl	8017722 <memcpy>
 800bb98:	e7c3      	b.n	800bb22 <ucdr_deserialize_int16_t+0x7e>
 800bb9a:	bf00      	nop

0800bb9c <ucdr_serialize_int32_t>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	4604      	mov	r4, r0
 800bba4:	9101      	str	r1, [sp, #4]
 800bba6:	2104      	movs	r1, #4
 800bba8:	f000 fa9c 	bl	800c0e4 <ucdr_buffer_alignment>
 800bbac:	4601      	mov	r1, r0
 800bbae:	4620      	mov	r0, r4
 800bbb0:	7d67      	ldrb	r7, [r4, #21]
 800bbb2:	f000 fadb 	bl	800c16c <ucdr_advance_buffer>
 800bbb6:	2104      	movs	r1, #4
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fa33 	bl	800c024 <ucdr_check_buffer_available_for>
 800bbbe:	b300      	cbz	r0, 800bc02 <ucdr_serialize_int32_t+0x66>
 800bbc0:	7d22      	ldrb	r2, [r4, #20]
 800bbc2:	68a3      	ldr	r3, [r4, #8]
 800bbc4:	2a01      	cmp	r2, #1
 800bbc6:	d05d      	beq.n	800bc84 <ucdr_serialize_int32_t+0xe8>
 800bbc8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbd4:	705a      	strb	r2, [r3, #1]
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbdc:	709a      	strb	r2, [r3, #2]
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbe4:	70da      	strb	r2, [r3, #3]
 800bbe6:	68a2      	ldr	r2, [r4, #8]
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	3204      	adds	r2, #4
 800bbec:	3304      	adds	r3, #4
 800bbee:	2104      	movs	r1, #4
 800bbf0:	60a2      	str	r2, [r4, #8]
 800bbf2:	6123      	str	r3, [r4, #16]
 800bbf4:	7561      	strb	r1, [r4, #21]
 800bbf6:	7da0      	ldrb	r0, [r4, #22]
 800bbf8:	f080 0001 	eor.w	r0, r0, #1
 800bbfc:	b002      	add	sp, #8
 800bbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc02:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc06:	42ab      	cmp	r3, r5
 800bc08:	d92e      	bls.n	800bc68 <ucdr_serialize_int32_t+0xcc>
 800bc0a:	1b5e      	subs	r6, r3, r5
 800bc0c:	60a3      	str	r3, [r4, #8]
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	f1c6 0804 	rsb	r8, r6, #4
 800bc14:	4433      	add	r3, r6
 800bc16:	6123      	str	r3, [r4, #16]
 800bc18:	4641      	mov	r1, r8
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fa0e 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bc20:	b398      	cbz	r0, 800bc8a <ucdr_serialize_int32_t+0xee>
 800bc22:	7d23      	ldrb	r3, [r4, #20]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d046      	beq.n	800bcb6 <ucdr_serialize_int32_t+0x11a>
 800bc28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc2c:	702b      	strb	r3, [r5, #0]
 800bc2e:	2e01      	cmp	r6, #1
 800bc30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc34:	706b      	strb	r3, [r5, #1]
 800bc36:	d035      	beq.n	800bca4 <ucdr_serialize_int32_t+0x108>
 800bc38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc3c:	70ab      	strb	r3, [r5, #2]
 800bc3e:	2e02      	cmp	r6, #2
 800bc40:	d034      	beq.n	800bcac <ucdr_serialize_int32_t+0x110>
 800bc42:	3503      	adds	r5, #3
 800bc44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc48:	702b      	strb	r3, [r5, #0]
 800bc4a:	6923      	ldr	r3, [r4, #16]
 800bc4c:	68a2      	ldr	r2, [r4, #8]
 800bc4e:	7da0      	ldrb	r0, [r4, #22]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4442      	add	r2, r8
 800bc54:	1b9b      	subs	r3, r3, r6
 800bc56:	2104      	movs	r1, #4
 800bc58:	f080 0001 	eor.w	r0, r0, #1
 800bc5c:	60a2      	str	r2, [r4, #8]
 800bc5e:	6123      	str	r3, [r4, #16]
 800bc60:	7561      	strb	r1, [r4, #21]
 800bc62:	b002      	add	sp, #8
 800bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc68:	2104      	movs	r1, #4
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 f9e6 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d0c0      	beq.n	800bbf6 <ucdr_serialize_int32_t+0x5a>
 800bc74:	7d23      	ldrb	r3, [r4, #20]
 800bc76:	68a2      	ldr	r2, [r4, #8]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d019      	beq.n	800bcb0 <ucdr_serialize_int32_t+0x114>
 800bc7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc80:	7013      	strb	r3, [r2, #0]
 800bc82:	e7a4      	b.n	800bbce <ucdr_serialize_int32_t+0x32>
 800bc84:	9a01      	ldr	r2, [sp, #4]
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	e7ad      	b.n	800bbe6 <ucdr_serialize_int32_t+0x4a>
 800bc8a:	68a2      	ldr	r2, [r4, #8]
 800bc8c:	6923      	ldr	r3, [r4, #16]
 800bc8e:	7da0      	ldrb	r0, [r4, #22]
 800bc90:	7567      	strb	r7, [r4, #21]
 800bc92:	1b92      	subs	r2, r2, r6
 800bc94:	1b9b      	subs	r3, r3, r6
 800bc96:	f080 0001 	eor.w	r0, r0, #1
 800bc9a:	60a2      	str	r2, [r4, #8]
 800bc9c:	6123      	str	r3, [r4, #16]
 800bc9e:	b002      	add	sp, #8
 800bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca4:	68a3      	ldr	r3, [r4, #8]
 800bca6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	68a5      	ldr	r5, [r4, #8]
 800bcae:	e7c9      	b.n	800bc44 <ucdr_serialize_int32_t+0xa8>
 800bcb0:	9b01      	ldr	r3, [sp, #4]
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	e797      	b.n	800bbe6 <ucdr_serialize_int32_t+0x4a>
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	ad01      	add	r5, sp, #4
 800bcba:	4632      	mov	r2, r6
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f00b fd30 	bl	8017722 <memcpy>
 800bcc2:	68a0      	ldr	r0, [r4, #8]
 800bcc4:	4642      	mov	r2, r8
 800bcc6:	19a9      	adds	r1, r5, r6
 800bcc8:	f00b fd2b 	bl	8017722 <memcpy>
 800bccc:	e7bd      	b.n	800bc4a <ucdr_serialize_int32_t+0xae>
 800bcce:	bf00      	nop

0800bcd0 <ucdr_serialize_endian_int32_t>:
 800bcd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcd4:	b083      	sub	sp, #12
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	2104      	movs	r1, #4
 800bcda:	4604      	mov	r4, r0
 800bcdc:	9201      	str	r2, [sp, #4]
 800bcde:	f000 fa01 	bl	800c0e4 <ucdr_buffer_alignment>
 800bce2:	4601      	mov	r1, r0
 800bce4:	4620      	mov	r0, r4
 800bce6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bcea:	f000 fa3f 	bl	800c16c <ucdr_advance_buffer>
 800bcee:	2104      	movs	r1, #4
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 f997 	bl	800c024 <ucdr_check_buffer_available_for>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d137      	bne.n	800bd6a <ucdr_serialize_endian_int32_t+0x9a>
 800bcfa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bcfe:	42b7      	cmp	r7, r6
 800bd00:	d92e      	bls.n	800bd60 <ucdr_serialize_endian_int32_t+0x90>
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	60a7      	str	r7, [r4, #8]
 800bd06:	1bbf      	subs	r7, r7, r6
 800bd08:	443b      	add	r3, r7
 800bd0a:	f1c7 0904 	rsb	r9, r7, #4
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	4649      	mov	r1, r9
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 f992 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d049      	beq.n	800bdb0 <ucdr_serialize_endian_int32_t+0xe0>
 800bd1c:	2d01      	cmp	r5, #1
 800bd1e:	d05b      	beq.n	800bdd8 <ucdr_serialize_endian_int32_t+0x108>
 800bd20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd24:	7033      	strb	r3, [r6, #0]
 800bd26:	2f01      	cmp	r7, #1
 800bd28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd2c:	7073      	strb	r3, [r6, #1]
 800bd2e:	d04d      	beq.n	800bdcc <ucdr_serialize_endian_int32_t+0xfc>
 800bd30:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd34:	70b3      	strb	r3, [r6, #2]
 800bd36:	2f02      	cmp	r7, #2
 800bd38:	d04c      	beq.n	800bdd4 <ucdr_serialize_endian_int32_t+0x104>
 800bd3a:	3603      	adds	r6, #3
 800bd3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd40:	7033      	strb	r3, [r6, #0]
 800bd42:	6923      	ldr	r3, [r4, #16]
 800bd44:	68a2      	ldr	r2, [r4, #8]
 800bd46:	7da0      	ldrb	r0, [r4, #22]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	444a      	add	r2, r9
 800bd4c:	1bdb      	subs	r3, r3, r7
 800bd4e:	2104      	movs	r1, #4
 800bd50:	f080 0001 	eor.w	r0, r0, #1
 800bd54:	60a2      	str	r2, [r4, #8]
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	7561      	strb	r1, [r4, #21]
 800bd5a:	b003      	add	sp, #12
 800bd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd60:	2104      	movs	r1, #4
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 f96a 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bd68:	b1c8      	cbz	r0, 800bd9e <ucdr_serialize_endian_int32_t+0xce>
 800bd6a:	2d01      	cmp	r5, #1
 800bd6c:	68a3      	ldr	r3, [r4, #8]
 800bd6e:	d01c      	beq.n	800bdaa <ucdr_serialize_endian_int32_t+0xda>
 800bd70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd74:	701a      	strb	r2, [r3, #0]
 800bd76:	68a3      	ldr	r3, [r4, #8]
 800bd78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd7c:	705a      	strb	r2, [r3, #1]
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd84:	709a      	strb	r2, [r3, #2]
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd8c:	70da      	strb	r2, [r3, #3]
 800bd8e:	68a2      	ldr	r2, [r4, #8]
 800bd90:	6923      	ldr	r3, [r4, #16]
 800bd92:	3204      	adds	r2, #4
 800bd94:	3304      	adds	r3, #4
 800bd96:	2104      	movs	r1, #4
 800bd98:	60a2      	str	r2, [r4, #8]
 800bd9a:	6123      	str	r3, [r4, #16]
 800bd9c:	7561      	strb	r1, [r4, #21]
 800bd9e:	7da0      	ldrb	r0, [r4, #22]
 800bda0:	f080 0001 	eor.w	r0, r0, #1
 800bda4:	b003      	add	sp, #12
 800bda6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdaa:	9a01      	ldr	r2, [sp, #4]
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	e7ee      	b.n	800bd8e <ucdr_serialize_endian_int32_t+0xbe>
 800bdb0:	68a2      	ldr	r2, [r4, #8]
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	7da0      	ldrb	r0, [r4, #22]
 800bdb6:	f884 8015 	strb.w	r8, [r4, #21]
 800bdba:	1bd2      	subs	r2, r2, r7
 800bdbc:	1bdb      	subs	r3, r3, r7
 800bdbe:	f080 0001 	eor.w	r0, r0, #1
 800bdc2:	60a2      	str	r2, [r4, #8]
 800bdc4:	6123      	str	r3, [r4, #16]
 800bdc6:	b003      	add	sp, #12
 800bdc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdd2:	701a      	strb	r2, [r3, #0]
 800bdd4:	68a6      	ldr	r6, [r4, #8]
 800bdd6:	e7b1      	b.n	800bd3c <ucdr_serialize_endian_int32_t+0x6c>
 800bdd8:	ad01      	add	r5, sp, #4
 800bdda:	463a      	mov	r2, r7
 800bddc:	4629      	mov	r1, r5
 800bdde:	4630      	mov	r0, r6
 800bde0:	f00b fc9f 	bl	8017722 <memcpy>
 800bde4:	68a0      	ldr	r0, [r4, #8]
 800bde6:	464a      	mov	r2, r9
 800bde8:	19e9      	adds	r1, r5, r7
 800bdea:	f00b fc9a 	bl	8017722 <memcpy>
 800bdee:	e7a8      	b.n	800bd42 <ucdr_serialize_endian_int32_t+0x72>

0800bdf0 <ucdr_deserialize_int32_t>:
 800bdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf4:	460d      	mov	r5, r1
 800bdf6:	2104      	movs	r1, #4
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	f000 f973 	bl	800c0e4 <ucdr_buffer_alignment>
 800bdfe:	4601      	mov	r1, r0
 800be00:	4620      	mov	r0, r4
 800be02:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be06:	f000 f9b1 	bl	800c16c <ucdr_advance_buffer>
 800be0a:	2104      	movs	r1, #4
 800be0c:	4620      	mov	r0, r4
 800be0e:	f000 f909 	bl	800c024 <ucdr_check_buffer_available_for>
 800be12:	b1d8      	cbz	r0, 800be4c <ucdr_deserialize_int32_t+0x5c>
 800be14:	7d22      	ldrb	r2, [r4, #20]
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	2a01      	cmp	r2, #1
 800be1a:	d052      	beq.n	800bec2 <ucdr_deserialize_int32_t+0xd2>
 800be1c:	78db      	ldrb	r3, [r3, #3]
 800be1e:	702b      	strb	r3, [r5, #0]
 800be20:	68a3      	ldr	r3, [r4, #8]
 800be22:	789b      	ldrb	r3, [r3, #2]
 800be24:	706b      	strb	r3, [r5, #1]
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	70ab      	strb	r3, [r5, #2]
 800be2c:	68a3      	ldr	r3, [r4, #8]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	70eb      	strb	r3, [r5, #3]
 800be32:	68a2      	ldr	r2, [r4, #8]
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	3204      	adds	r2, #4
 800be38:	3304      	adds	r3, #4
 800be3a:	2104      	movs	r1, #4
 800be3c:	60a2      	str	r2, [r4, #8]
 800be3e:	6123      	str	r3, [r4, #16]
 800be40:	7561      	strb	r1, [r4, #21]
 800be42:	7da0      	ldrb	r0, [r4, #22]
 800be44:	f080 0001 	eor.w	r0, r0, #1
 800be48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800be50:	42b7      	cmp	r7, r6
 800be52:	d92a      	bls.n	800beaa <ucdr_deserialize_int32_t+0xba>
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	60a7      	str	r7, [r4, #8]
 800be58:	1bbf      	subs	r7, r7, r6
 800be5a:	443b      	add	r3, r7
 800be5c:	f1c7 0904 	rsb	r9, r7, #4
 800be60:	6123      	str	r3, [r4, #16]
 800be62:	4649      	mov	r1, r9
 800be64:	4620      	mov	r0, r4
 800be66:	f000 f8e9 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800be6a:	b368      	cbz	r0, 800bec8 <ucdr_deserialize_int32_t+0xd8>
 800be6c:	7d23      	ldrb	r3, [r4, #20]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d040      	beq.n	800bef4 <ucdr_deserialize_int32_t+0x104>
 800be72:	78f3      	ldrb	r3, [r6, #3]
 800be74:	702b      	strb	r3, [r5, #0]
 800be76:	78b3      	ldrb	r3, [r6, #2]
 800be78:	706b      	strb	r3, [r5, #1]
 800be7a:	2f01      	cmp	r7, #1
 800be7c:	d031      	beq.n	800bee2 <ucdr_deserialize_int32_t+0xf2>
 800be7e:	7873      	ldrb	r3, [r6, #1]
 800be80:	70ab      	strb	r3, [r5, #2]
 800be82:	2f02      	cmp	r7, #2
 800be84:	f105 0503 	add.w	r5, r5, #3
 800be88:	d02f      	beq.n	800beea <ucdr_deserialize_int32_t+0xfa>
 800be8a:	7833      	ldrb	r3, [r6, #0]
 800be8c:	702b      	strb	r3, [r5, #0]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	68a2      	ldr	r2, [r4, #8]
 800be92:	7da0      	ldrb	r0, [r4, #22]
 800be94:	2104      	movs	r1, #4
 800be96:	3304      	adds	r3, #4
 800be98:	444a      	add	r2, r9
 800be9a:	1bdb      	subs	r3, r3, r7
 800be9c:	7561      	strb	r1, [r4, #21]
 800be9e:	60a2      	str	r2, [r4, #8]
 800bea0:	6123      	str	r3, [r4, #16]
 800bea2:	f080 0001 	eor.w	r0, r0, #1
 800bea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beaa:	2104      	movs	r1, #4
 800beac:	4620      	mov	r0, r4
 800beae:	f000 f8c5 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d0c5      	beq.n	800be42 <ucdr_deserialize_int32_t+0x52>
 800beb6:	7d23      	ldrb	r3, [r4, #20]
 800beb8:	68a2      	ldr	r2, [r4, #8]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d017      	beq.n	800beee <ucdr_deserialize_int32_t+0xfe>
 800bebe:	78d3      	ldrb	r3, [r2, #3]
 800bec0:	e7ad      	b.n	800be1e <ucdr_deserialize_int32_t+0x2e>
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	e7b4      	b.n	800be32 <ucdr_deserialize_int32_t+0x42>
 800bec8:	68a2      	ldr	r2, [r4, #8]
 800beca:	6923      	ldr	r3, [r4, #16]
 800becc:	7da0      	ldrb	r0, [r4, #22]
 800bece:	f884 8015 	strb.w	r8, [r4, #21]
 800bed2:	1bd2      	subs	r2, r2, r7
 800bed4:	1bdb      	subs	r3, r3, r7
 800bed6:	60a2      	str	r2, [r4, #8]
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	f080 0001 	eor.w	r0, r0, #1
 800bede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee2:	68a3      	ldr	r3, [r4, #8]
 800bee4:	785b      	ldrb	r3, [r3, #1]
 800bee6:	70ab      	strb	r3, [r5, #2]
 800bee8:	3503      	adds	r5, #3
 800beea:	68a6      	ldr	r6, [r4, #8]
 800beec:	e7cd      	b.n	800be8a <ucdr_deserialize_int32_t+0x9a>
 800beee:	6813      	ldr	r3, [r2, #0]
 800bef0:	602b      	str	r3, [r5, #0]
 800bef2:	e79e      	b.n	800be32 <ucdr_deserialize_int32_t+0x42>
 800bef4:	4631      	mov	r1, r6
 800bef6:	463a      	mov	r2, r7
 800bef8:	4628      	mov	r0, r5
 800befa:	f00b fc12 	bl	8017722 <memcpy>
 800befe:	68a1      	ldr	r1, [r4, #8]
 800bf00:	464a      	mov	r2, r9
 800bf02:	19e8      	adds	r0, r5, r7
 800bf04:	f00b fc0d 	bl	8017722 <memcpy>
 800bf08:	e7c1      	b.n	800be8e <ucdr_deserialize_int32_t+0x9e>
 800bf0a:	bf00      	nop

0800bf0c <ucdr_deserialize_endian_int32_t>:
 800bf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf10:	460e      	mov	r6, r1
 800bf12:	2104      	movs	r1, #4
 800bf14:	4604      	mov	r4, r0
 800bf16:	4615      	mov	r5, r2
 800bf18:	f000 f8e4 	bl	800c0e4 <ucdr_buffer_alignment>
 800bf1c:	4601      	mov	r1, r0
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bf24:	f000 f922 	bl	800c16c <ucdr_advance_buffer>
 800bf28:	2104      	movs	r1, #4
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 f87a 	bl	800c024 <ucdr_check_buffer_available_for>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d137      	bne.n	800bfa4 <ucdr_deserialize_endian_int32_t+0x98>
 800bf34:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bf38:	42bb      	cmp	r3, r7
 800bf3a:	d92e      	bls.n	800bf9a <ucdr_deserialize_endian_int32_t+0x8e>
 800bf3c:	eba3 0807 	sub.w	r8, r3, r7
 800bf40:	60a3      	str	r3, [r4, #8]
 800bf42:	6923      	ldr	r3, [r4, #16]
 800bf44:	f1c8 0a04 	rsb	sl, r8, #4
 800bf48:	4443      	add	r3, r8
 800bf4a:	6123      	str	r3, [r4, #16]
 800bf4c:	4651      	mov	r1, sl
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 f874 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d043      	beq.n	800bfe0 <ucdr_deserialize_endian_int32_t+0xd4>
 800bf58:	2e01      	cmp	r6, #1
 800bf5a:	d056      	beq.n	800c00a <ucdr_deserialize_endian_int32_t+0xfe>
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	702b      	strb	r3, [r5, #0]
 800bf60:	78bb      	ldrb	r3, [r7, #2]
 800bf62:	706b      	strb	r3, [r5, #1]
 800bf64:	f1b8 0f01 	cmp.w	r8, #1
 800bf68:	d049      	beq.n	800bffe <ucdr_deserialize_endian_int32_t+0xf2>
 800bf6a:	787b      	ldrb	r3, [r7, #1]
 800bf6c:	70ab      	strb	r3, [r5, #2]
 800bf6e:	f1b8 0f02 	cmp.w	r8, #2
 800bf72:	f105 0503 	add.w	r5, r5, #3
 800bf76:	d046      	beq.n	800c006 <ucdr_deserialize_endian_int32_t+0xfa>
 800bf78:	783b      	ldrb	r3, [r7, #0]
 800bf7a:	702b      	strb	r3, [r5, #0]
 800bf7c:	6923      	ldr	r3, [r4, #16]
 800bf7e:	68a2      	ldr	r2, [r4, #8]
 800bf80:	7da0      	ldrb	r0, [r4, #22]
 800bf82:	2104      	movs	r1, #4
 800bf84:	3304      	adds	r3, #4
 800bf86:	4452      	add	r2, sl
 800bf88:	eba3 0308 	sub.w	r3, r3, r8
 800bf8c:	7561      	strb	r1, [r4, #21]
 800bf8e:	60a2      	str	r2, [r4, #8]
 800bf90:	6123      	str	r3, [r4, #16]
 800bf92:	f080 0001 	eor.w	r0, r0, #1
 800bf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9a:	2104      	movs	r1, #4
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f000 f84d 	bl	800c03c <ucdr_check_final_buffer_behavior>
 800bfa2:	b1a8      	cbz	r0, 800bfd0 <ucdr_deserialize_endian_int32_t+0xc4>
 800bfa4:	2e01      	cmp	r6, #1
 800bfa6:	68a3      	ldr	r3, [r4, #8]
 800bfa8:	d017      	beq.n	800bfda <ucdr_deserialize_endian_int32_t+0xce>
 800bfaa:	78db      	ldrb	r3, [r3, #3]
 800bfac:	702b      	strb	r3, [r5, #0]
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	789b      	ldrb	r3, [r3, #2]
 800bfb2:	706b      	strb	r3, [r5, #1]
 800bfb4:	68a3      	ldr	r3, [r4, #8]
 800bfb6:	785b      	ldrb	r3, [r3, #1]
 800bfb8:	70ab      	strb	r3, [r5, #2]
 800bfba:	68a3      	ldr	r3, [r4, #8]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	70eb      	strb	r3, [r5, #3]
 800bfc0:	68a2      	ldr	r2, [r4, #8]
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	3204      	adds	r2, #4
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	2104      	movs	r1, #4
 800bfca:	60a2      	str	r2, [r4, #8]
 800bfcc:	6123      	str	r3, [r4, #16]
 800bfce:	7561      	strb	r1, [r4, #21]
 800bfd0:	7da0      	ldrb	r0, [r4, #22]
 800bfd2:	f080 0001 	eor.w	r0, r0, #1
 800bfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	e7ef      	b.n	800bfc0 <ucdr_deserialize_endian_int32_t+0xb4>
 800bfe0:	68a2      	ldr	r2, [r4, #8]
 800bfe2:	6923      	ldr	r3, [r4, #16]
 800bfe4:	7da0      	ldrb	r0, [r4, #22]
 800bfe6:	f884 9015 	strb.w	r9, [r4, #21]
 800bfea:	eba2 0208 	sub.w	r2, r2, r8
 800bfee:	eba3 0308 	sub.w	r3, r3, r8
 800bff2:	60a2      	str	r2, [r4, #8]
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	f080 0001 	eor.w	r0, r0, #1
 800bffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	785b      	ldrb	r3, [r3, #1]
 800c002:	70ab      	strb	r3, [r5, #2]
 800c004:	3503      	adds	r5, #3
 800c006:	68a7      	ldr	r7, [r4, #8]
 800c008:	e7b6      	b.n	800bf78 <ucdr_deserialize_endian_int32_t+0x6c>
 800c00a:	4639      	mov	r1, r7
 800c00c:	4642      	mov	r2, r8
 800c00e:	4628      	mov	r0, r5
 800c010:	f00b fb87 	bl	8017722 <memcpy>
 800c014:	68a1      	ldr	r1, [r4, #8]
 800c016:	4652      	mov	r2, sl
 800c018:	eb05 0008 	add.w	r0, r5, r8
 800c01c:	f00b fb81 	bl	8017722 <memcpy>
 800c020:	e7ac      	b.n	800bf7c <ucdr_deserialize_endian_int32_t+0x70>
 800c022:	bf00      	nop

0800c024 <ucdr_check_buffer_available_for>:
 800c024:	7d83      	ldrb	r3, [r0, #22]
 800c026:	b93b      	cbnz	r3, 800c038 <ucdr_check_buffer_available_for+0x14>
 800c028:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c02c:	440b      	add	r3, r1
 800c02e:	4298      	cmp	r0, r3
 800c030:	bf34      	ite	cc
 800c032:	2000      	movcc	r0, #0
 800c034:	2001      	movcs	r0, #1
 800c036:	4770      	bx	lr
 800c038:	2000      	movs	r0, #0
 800c03a:	4770      	bx	lr

0800c03c <ucdr_check_final_buffer_behavior>:
 800c03c:	7d83      	ldrb	r3, [r0, #22]
 800c03e:	b943      	cbnz	r3, 800c052 <ucdr_check_final_buffer_behavior+0x16>
 800c040:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c044:	4291      	cmp	r1, r2
 800c046:	b510      	push	{r4, lr}
 800c048:	4604      	mov	r4, r0
 800c04a:	d205      	bcs.n	800c058 <ucdr_check_final_buffer_behavior+0x1c>
 800c04c:	2301      	movs	r3, #1
 800c04e:	4618      	mov	r0, r3
 800c050:	bd10      	pop	{r4, pc}
 800c052:	2300      	movs	r3, #0
 800c054:	4618      	mov	r0, r3
 800c056:	4770      	bx	lr
 800c058:	6982      	ldr	r2, [r0, #24]
 800c05a:	b13a      	cbz	r2, 800c06c <ucdr_check_final_buffer_behavior+0x30>
 800c05c:	69c1      	ldr	r1, [r0, #28]
 800c05e:	4790      	blx	r2
 800c060:	f080 0301 	eor.w	r3, r0, #1
 800c064:	b2db      	uxtb	r3, r3
 800c066:	75a0      	strb	r0, [r4, #22]
 800c068:	4618      	mov	r0, r3
 800c06a:	bd10      	pop	{r4, pc}
 800c06c:	2001      	movs	r0, #1
 800c06e:	75a0      	strb	r0, [r4, #22]
 800c070:	e7fa      	b.n	800c068 <ucdr_check_final_buffer_behavior+0x2c>
 800c072:	bf00      	nop

0800c074 <ucdr_set_on_full_buffer_callback>:
 800c074:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop

0800c07c <ucdr_init_buffer_origin_offset_endian>:
 800c07c:	b410      	push	{r4}
 800c07e:	9c01      	ldr	r4, [sp, #4]
 800c080:	6001      	str	r1, [r0, #0]
 800c082:	440a      	add	r2, r1
 800c084:	6042      	str	r2, [r0, #4]
 800c086:	190a      	adds	r2, r1, r4
 800c088:	441c      	add	r4, r3
 800c08a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c08e:	6082      	str	r2, [r0, #8]
 800c090:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c094:	7503      	strb	r3, [r0, #20]
 800c096:	2200      	movs	r2, #0
 800c098:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0a0:	7542      	strb	r2, [r0, #21]
 800c0a2:	7582      	strb	r2, [r0, #22]
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop

0800c0a8 <ucdr_init_buffer_origin_offset>:
 800c0a8:	b510      	push	{r4, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	9c04      	ldr	r4, [sp, #16]
 800c0ae:	9400      	str	r4, [sp, #0]
 800c0b0:	2401      	movs	r4, #1
 800c0b2:	9401      	str	r4, [sp, #4]
 800c0b4:	f7ff ffe2 	bl	800c07c <ucdr_init_buffer_origin_offset_endian>
 800c0b8:	b002      	add	sp, #8
 800c0ba:	bd10      	pop	{r4, pc}

0800c0bc <ucdr_init_buffer_origin>:
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	2400      	movs	r4, #0
 800c0c2:	9400      	str	r4, [sp, #0]
 800c0c4:	f7ff fff0 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800c0c8:	b002      	add	sp, #8
 800c0ca:	bd10      	pop	{r4, pc}

0800c0cc <ucdr_init_buffer>:
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f7ff bff5 	b.w	800c0bc <ucdr_init_buffer_origin>
 800c0d2:	bf00      	nop

0800c0d4 <ucdr_alignment>:
 800c0d4:	fbb0 f3f1 	udiv	r3, r0, r1
 800c0d8:	fb03 0011 	mls	r0, r3, r1, r0
 800c0dc:	1a08      	subs	r0, r1, r0
 800c0de:	3901      	subs	r1, #1
 800c0e0:	4008      	ands	r0, r1
 800c0e2:	4770      	bx	lr

0800c0e4 <ucdr_buffer_alignment>:
 800c0e4:	7d43      	ldrb	r3, [r0, #21]
 800c0e6:	428b      	cmp	r3, r1
 800c0e8:	d208      	bcs.n	800c0fc <ucdr_buffer_alignment+0x18>
 800c0ea:	6900      	ldr	r0, [r0, #16]
 800c0ec:	fbb0 f3f1 	udiv	r3, r0, r1
 800c0f0:	fb01 0013 	mls	r0, r1, r3, r0
 800c0f4:	1a08      	subs	r0, r1, r0
 800c0f6:	3901      	subs	r1, #1
 800c0f8:	4008      	ands	r0, r1
 800c0fa:	4770      	bx	lr
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	4770      	bx	lr

0800c100 <ucdr_align_to>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4604      	mov	r4, r0
 800c104:	460d      	mov	r5, r1
 800c106:	f7ff ffed 	bl	800c0e4 <ucdr_buffer_alignment>
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	6861      	ldr	r1, [r4, #4]
 800c10e:	6922      	ldr	r2, [r4, #16]
 800c110:	7565      	strb	r5, [r4, #21]
 800c112:	4403      	add	r3, r0
 800c114:	428b      	cmp	r3, r1
 800c116:	bf28      	it	cs
 800c118:	460b      	movcs	r3, r1
 800c11a:	4402      	add	r2, r0
 800c11c:	60a3      	str	r3, [r4, #8]
 800c11e:	6122      	str	r2, [r4, #16]
 800c120:	bd38      	pop	{r3, r4, r5, pc}
 800c122:	bf00      	nop

0800c124 <ucdr_buffer_length>:
 800c124:	6882      	ldr	r2, [r0, #8]
 800c126:	6800      	ldr	r0, [r0, #0]
 800c128:	1a10      	subs	r0, r2, r0
 800c12a:	4770      	bx	lr

0800c12c <ucdr_buffer_remaining>:
 800c12c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c130:	1a10      	subs	r0, r2, r0
 800c132:	4770      	bx	lr

0800c134 <ucdr_check_final_buffer_behavior_array>:
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	7d83      	ldrb	r3, [r0, #22]
 800c138:	b963      	cbnz	r3, 800c154 <ucdr_check_final_buffer_behavior_array+0x20>
 800c13a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c13e:	429a      	cmp	r2, r3
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	d308      	bcc.n	800c158 <ucdr_check_final_buffer_behavior_array+0x24>
 800c146:	b139      	cbz	r1, 800c158 <ucdr_check_final_buffer_behavior_array+0x24>
 800c148:	6983      	ldr	r3, [r0, #24]
 800c14a:	b163      	cbz	r3, 800c166 <ucdr_check_final_buffer_behavior_array+0x32>
 800c14c:	69c1      	ldr	r1, [r0, #28]
 800c14e:	4798      	blx	r3
 800c150:	75a0      	strb	r0, [r4, #22]
 800c152:	b108      	cbz	r0, 800c158 <ucdr_check_final_buffer_behavior_array+0x24>
 800c154:	2000      	movs	r0, #0
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	4620      	mov	r0, r4
 800c15a:	f7ff ffe7 	bl	800c12c <ucdr_buffer_remaining>
 800c15e:	42a8      	cmp	r0, r5
 800c160:	bf28      	it	cs
 800c162:	4628      	movcs	r0, r5
 800c164:	bd38      	pop	{r3, r4, r5, pc}
 800c166:	2301      	movs	r3, #1
 800c168:	7583      	strb	r3, [r0, #22]
 800c16a:	e7f3      	b.n	800c154 <ucdr_check_final_buffer_behavior_array+0x20>

0800c16c <ucdr_advance_buffer>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	f7ff ff57 	bl	800c024 <ucdr_check_buffer_available_for>
 800c176:	b178      	cbz	r0, 800c198 <ucdr_advance_buffer+0x2c>
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	68a2      	ldr	r2, [r4, #8]
 800c17c:	442b      	add	r3, r5
 800c17e:	6123      	str	r3, [r4, #16]
 800c180:	2301      	movs	r3, #1
 800c182:	442a      	add	r2, r5
 800c184:	7563      	strb	r3, [r4, #21]
 800c186:	60a2      	str	r2, [r4, #8]
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	68a2      	ldr	r2, [r4, #8]
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	4402      	add	r2, r0
 800c190:	4403      	add	r3, r0
 800c192:	1a2d      	subs	r5, r5, r0
 800c194:	60a2      	str	r2, [r4, #8]
 800c196:	6123      	str	r3, [r4, #16]
 800c198:	2201      	movs	r2, #1
 800c19a:	4629      	mov	r1, r5
 800c19c:	4620      	mov	r0, r4
 800c19e:	f7ff ffc9 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d1f1      	bne.n	800c18a <ucdr_advance_buffer+0x1e>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	7563      	strb	r3, [r4, #21]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}

0800c1ac <ucdr_serialize_sequence_char>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	460e      	mov	r6, r1
 800c1b0:	4615      	mov	r5, r2
 800c1b2:	7d01      	ldrb	r1, [r0, #20]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	f7ff f979 	bl	800b4ac <ucdr_serialize_endian_uint32_t>
 800c1ba:	b90d      	cbnz	r5, 800c1c0 <ucdr_serialize_sequence_char+0x14>
 800c1bc:	2001      	movs	r0, #1
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	7d21      	ldrb	r1, [r4, #20]
 800c1c2:	462b      	mov	r3, r5
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1cc:	f008 bd5c 	b.w	8014c88 <ucdr_serialize_endian_array_char>

0800c1d0 <ucdr_deserialize_sequence_char>:
 800c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d4:	461d      	mov	r5, r3
 800c1d6:	4616      	mov	r6, r2
 800c1d8:	460f      	mov	r7, r1
 800c1da:	461a      	mov	r2, r3
 800c1dc:	7d01      	ldrb	r1, [r0, #20]
 800c1de:	4604      	mov	r4, r0
 800c1e0:	f7ff fa82 	bl	800b6e8 <ucdr_deserialize_endian_uint32_t>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	429e      	cmp	r6, r3
 800c1e8:	d208      	bcs.n	800c1fc <ucdr_deserialize_sequence_char+0x2c>
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	75a2      	strb	r2, [r4, #22]
 800c1ee:	7d21      	ldrb	r1, [r4, #20]
 800c1f0:	463a      	mov	r2, r7
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f8:	f008 bd78 	b.w	8014cec <ucdr_deserialize_endian_array_char>
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1f6      	bne.n	800c1ee <ucdr_deserialize_sequence_char+0x1e>
 800c200:	2001      	movs	r0, #1
 800c202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c206:	bf00      	nop

0800c208 <ucdr_serialize_sequence_uint8_t>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	460e      	mov	r6, r1
 800c20c:	4615      	mov	r5, r2
 800c20e:	7d01      	ldrb	r1, [r0, #20]
 800c210:	4604      	mov	r4, r0
 800c212:	f7ff f94b 	bl	800b4ac <ucdr_serialize_endian_uint32_t>
 800c216:	b90d      	cbnz	r5, 800c21c <ucdr_serialize_sequence_uint8_t+0x14>
 800c218:	2001      	movs	r0, #1
 800c21a:	bd70      	pop	{r4, r5, r6, pc}
 800c21c:	7d21      	ldrb	r1, [r4, #20]
 800c21e:	462b      	mov	r3, r5
 800c220:	4632      	mov	r2, r6
 800c222:	4620      	mov	r0, r4
 800c224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c228:	f008 bdc4 	b.w	8014db4 <ucdr_serialize_endian_array_uint8_t>

0800c22c <ucdr_deserialize_sequence_uint8_t>:
 800c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c230:	461d      	mov	r5, r3
 800c232:	4616      	mov	r6, r2
 800c234:	460f      	mov	r7, r1
 800c236:	461a      	mov	r2, r3
 800c238:	7d01      	ldrb	r1, [r0, #20]
 800c23a:	4604      	mov	r4, r0
 800c23c:	f7ff fa54 	bl	800b6e8 <ucdr_deserialize_endian_uint32_t>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	429e      	cmp	r6, r3
 800c244:	d208      	bcs.n	800c258 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800c246:	2201      	movs	r2, #1
 800c248:	75a2      	strb	r2, [r4, #22]
 800c24a:	7d21      	ldrb	r1, [r4, #20]
 800c24c:	463a      	mov	r2, r7
 800c24e:	4620      	mov	r0, r4
 800c250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c254:	f008 be12 	b.w	8014e7c <ucdr_deserialize_endian_array_uint8_t>
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1f6      	bne.n	800c24a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800c25c:	2001      	movs	r0, #1
 800c25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c262:	bf00      	nop

0800c264 <ucdr_serialize_sequence_int32_t>:
 800c264:	b570      	push	{r4, r5, r6, lr}
 800c266:	460e      	mov	r6, r1
 800c268:	4615      	mov	r5, r2
 800c26a:	7d01      	ldrb	r1, [r0, #20]
 800c26c:	4604      	mov	r4, r0
 800c26e:	f7ff f91d 	bl	800b4ac <ucdr_serialize_endian_uint32_t>
 800c272:	b90d      	cbnz	r5, 800c278 <ucdr_serialize_sequence_int32_t+0x14>
 800c274:	2001      	movs	r0, #1
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	7d21      	ldrb	r1, [r4, #20]
 800c27a:	462b      	mov	r3, r5
 800c27c:	4632      	mov	r2, r6
 800c27e:	4620      	mov	r0, r4
 800c280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c284:	f008 be2c 	b.w	8014ee0 <ucdr_serialize_endian_array_int32_t>

0800c288 <ucdr_deserialize_sequence_int32_t>:
 800c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	461d      	mov	r5, r3
 800c28e:	4616      	mov	r6, r2
 800c290:	460f      	mov	r7, r1
 800c292:	461a      	mov	r2, r3
 800c294:	7d01      	ldrb	r1, [r0, #20]
 800c296:	4604      	mov	r4, r0
 800c298:	f7ff fa26 	bl	800b6e8 <ucdr_deserialize_endian_uint32_t>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	429e      	cmp	r6, r3
 800c2a0:	d208      	bcs.n	800c2b4 <ucdr_deserialize_sequence_int32_t+0x2c>
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	75a2      	strb	r2, [r4, #22]
 800c2a6:	7d21      	ldrb	r1, [r4, #20]
 800c2a8:	463a      	mov	r2, r7
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b0:	f008 be6c 	b.w	8014f8c <ucdr_deserialize_endian_array_int32_t>
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f6      	bne.n	800c2a6 <ucdr_deserialize_sequence_int32_t+0x1e>
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2be:	bf00      	nop

0800c2c0 <uxr_buffer_delete_entity>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	b08e      	sub	sp, #56	@ 0x38
 800c2c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	ab06      	add	r3, sp, #24
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	f001 fae2 	bl	800d89c <uxr_prepare_stream_to_write_submessage>
 800c2d8:	b918      	cbnz	r0, 800c2e2 <uxr_buffer_delete_entity+0x22>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4620      	mov	r0, r4
 800c2de:	b00e      	add	sp, #56	@ 0x38
 800c2e0:	bd10      	pop	{r4, pc}
 800c2e2:	9902      	ldr	r1, [sp, #8]
 800c2e4:	aa05      	add	r2, sp, #20
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f001 fc12 	bl	800db10 <uxr_init_base_object_request>
 800c2ec:	a905      	add	r1, sp, #20
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	a806      	add	r0, sp, #24
 800c2f2:	f003 fa99 	bl	800f828 <uxr_serialize_DELETE_Payload>
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	b00e      	add	sp, #56	@ 0x38
 800c2fa:	bd10      	pop	{r4, pc}

0800c2fc <uxr_common_create_entity>:
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c302:	b08c      	sub	sp, #48	@ 0x30
 800c304:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c308:	f1bc 0f01 	cmp.w	ip, #1
 800c30c:	bf08      	it	eq
 800c30e:	f003 0201 	andeq.w	r2, r3, #1
 800c312:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c316:	bf18      	it	ne
 800c318:	2200      	movne	r2, #0
 800c31a:	330e      	adds	r3, #14
 800c31c:	441a      	add	r2, r3
 800c31e:	2301      	movs	r3, #1
 800c320:	e9cd 3100 	strd	r3, r1, [sp]
 800c324:	b292      	uxth	r2, r2
 800c326:	9903      	ldr	r1, [sp, #12]
 800c328:	ab04      	add	r3, sp, #16
 800c32a:	4604      	mov	r4, r0
 800c32c:	f001 fab6 	bl	800d89c <uxr_prepare_stream_to_write_submessage>
 800c330:	b918      	cbnz	r0, 800c33a <uxr_common_create_entity+0x3e>
 800c332:	4604      	mov	r4, r0
 800c334:	4620      	mov	r0, r4
 800c336:	b00c      	add	sp, #48	@ 0x30
 800c338:	bd10      	pop	{r4, pc}
 800c33a:	9902      	ldr	r1, [sp, #8]
 800c33c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c33e:	4620      	mov	r0, r4
 800c340:	f001 fbe6 	bl	800db10 <uxr_init_base_object_request>
 800c344:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c346:	4604      	mov	r4, r0
 800c348:	a804      	add	r0, sp, #16
 800c34a:	f003 f9b7 	bl	800f6bc <uxr_serialize_CREATE_Payload>
 800c34e:	4620      	mov	r0, r4
 800c350:	b00c      	add	sp, #48	@ 0x30
 800c352:	bd10      	pop	{r4, pc}

0800c354 <uxr_buffer_create_participant_bin>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c35a:	ac11      	add	r4, sp, #68	@ 0x44
 800c35c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c360:	2303      	movs	r3, #3
 800c362:	7223      	strb	r3, [r4, #8]
 800c364:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c366:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c36a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c36e:	2201      	movs	r2, #1
 800c370:	2100      	movs	r1, #0
 800c372:	4605      	mov	r5, r0
 800c374:	7122      	strb	r2, [r4, #4]
 800c376:	f88d 1014 	strb.w	r1, [sp, #20]
 800c37a:	b1cb      	cbz	r3, 800c3b0 <uxr_buffer_create_participant_bin+0x5c>
 800c37c:	f88d 201c 	strb.w	r2, [sp, #28]
 800c380:	9308      	str	r3, [sp, #32]
 800c382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c386:	a915      	add	r1, sp, #84	@ 0x54
 800c388:	a809      	add	r0, sp, #36	@ 0x24
 800c38a:	f7ff fe9f 	bl	800c0cc <ucdr_init_buffer>
 800c38e:	a905      	add	r1, sp, #20
 800c390:	a809      	add	r0, sp, #36	@ 0x24
 800c392:	f002 fd9b 	bl	800eecc <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c398:	9600      	str	r6, [sp, #0]
 800c39a:	9401      	str	r4, [sp, #4]
 800c39c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c3a0:	60e3      	str	r3, [r4, #12]
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	f7ff ffa9 	bl	800c2fc <uxr_common_create_entity>
 800c3aa:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
 800c3b0:	f88d 301c 	strb.w	r3, [sp, #28]
 800c3b4:	e7e5      	b.n	800c382 <uxr_buffer_create_participant_bin+0x2e>
 800c3b6:	bf00      	nop

0800c3b8 <uxr_buffer_create_topic_bin>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c3be:	4605      	mov	r5, r0
 800c3c0:	9105      	str	r1, [sp, #20]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	a997      	add	r1, sp, #604	@ 0x25c
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c3cc:	9204      	str	r2, [sp, #16]
 800c3ce:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c3d2:	f000 fa31 	bl	800c838 <uxr_object_id_to_raw>
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c3dc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c3de:	9306      	str	r3, [sp, #24]
 800c3e0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c3ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	a917      	add	r1, sp, #92	@ 0x5c
 800c3f2:	a80b      	add	r0, sp, #44	@ 0x2c
 800c3f4:	f88d 301c 	strb.w	r3, [sp, #28]
 800c3f8:	f7ff fe68 	bl	800c0cc <ucdr_init_buffer>
 800c3fc:	a906      	add	r1, sp, #24
 800c3fe:	a80b      	add	r0, sp, #44	@ 0x2c
 800c400:	f002 fd86 	bl	800ef10 <uxr_serialize_OBJK_Topic_Binary>
 800c404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c406:	9316      	str	r3, [sp, #88]	@ 0x58
 800c408:	ac13      	add	r4, sp, #76	@ 0x4c
 800c40a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c40e:	9600      	str	r6, [sp, #0]
 800c410:	9401      	str	r4, [sp, #4]
 800c412:	b29b      	uxth	r3, r3
 800c414:	4628      	mov	r0, r5
 800c416:	f7ff ff71 	bl	800c2fc <uxr_common_create_entity>
 800c41a:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c41e:	bd70      	pop	{r4, r5, r6, pc}

0800c420 <uxr_buffer_create_publisher_bin>:
 800c420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c422:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c426:	4605      	mov	r5, r0
 800c428:	9105      	str	r1, [sp, #20]
 800c42a:	4618      	mov	r0, r3
 800c42c:	2603      	movs	r6, #3
 800c42e:	a992      	add	r1, sp, #584	@ 0x248
 800c430:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c434:	9204      	str	r2, [sp, #16]
 800c436:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c43a:	f000 f9fd 	bl	800c838 <uxr_object_id_to_raw>
 800c43e:	2300      	movs	r3, #0
 800c440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c444:	a912      	add	r1, sp, #72	@ 0x48
 800c446:	a806      	add	r0, sp, #24
 800c448:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c44c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c450:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c454:	f7ff fe3a 	bl	800c0cc <ucdr_init_buffer>
 800c458:	a993      	add	r1, sp, #588	@ 0x24c
 800c45a:	a806      	add	r0, sp, #24
 800c45c:	f002 fe0e 	bl	800f07c <uxr_serialize_OBJK_Publisher_Binary>
 800c460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c462:	9311      	str	r3, [sp, #68]	@ 0x44
 800c464:	ac0e      	add	r4, sp, #56	@ 0x38
 800c466:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c46a:	9700      	str	r7, [sp, #0]
 800c46c:	9401      	str	r4, [sp, #4]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	4628      	mov	r0, r5
 800c472:	f7ff ff43 	bl	800c2fc <uxr_common_create_entity>
 800c476:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c47a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c47c <uxr_buffer_create_subscriber_bin>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c482:	4605      	mov	r5, r0
 800c484:	9105      	str	r1, [sp, #20]
 800c486:	4618      	mov	r0, r3
 800c488:	a992      	add	r1, sp, #584	@ 0x248
 800c48a:	2304      	movs	r3, #4
 800c48c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c490:	9204      	str	r2, [sp, #16]
 800c492:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c496:	f000 f9cf 	bl	800c838 <uxr_object_id_to_raw>
 800c49a:	2203      	movs	r2, #3
 800c49c:	2300      	movs	r3, #0
 800c49e:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800c4a2:	a912      	add	r1, sp, #72	@ 0x48
 800c4a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4a8:	a806      	add	r0, sp, #24
 800c4aa:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c4ae:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c4b2:	f7ff fe0b 	bl	800c0cc <ucdr_init_buffer>
 800c4b6:	a993      	add	r1, sp, #588	@ 0x24c
 800c4b8:	a806      	add	r0, sp, #24
 800c4ba:	f002 fe91 	bl	800f1e0 <uxr_serialize_OBJK_Subscriber_Binary>
 800c4be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4c2:	ac0e      	add	r4, sp, #56	@ 0x38
 800c4c4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c4c8:	9600      	str	r6, [sp, #0]
 800c4ca:	9401      	str	r4, [sp, #4]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7ff ff14 	bl	800c2fc <uxr_common_create_entity>
 800c4d4:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c4d8:	bd70      	pop	{r4, r5, r6, pc}
 800c4da:	bf00      	nop

0800c4dc <uxr_buffer_create_datawriter_bin>:
 800c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4de:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c4e2:	ac1d      	add	r4, sp, #116	@ 0x74
 800c4e4:	9105      	str	r1, [sp, #20]
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	a9a1      	add	r1, sp, #644	@ 0x284
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	2305      	movs	r3, #5
 800c4ee:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800c4f2:	9204      	str	r2, [sp, #16]
 800c4f4:	7123      	strb	r3, [r4, #4]
 800c4f6:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800c4fa:	f000 f99d 	bl	800c838 <uxr_object_id_to_raw>
 800c4fe:	2303      	movs	r3, #3
 800c500:	a90e      	add	r1, sp, #56	@ 0x38
 800c502:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c504:	7223      	strb	r3, [r4, #8]
 800c506:	f000 f997 	bl	800c838 <uxr_object_id_to_raw>
 800c50a:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800c50e:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800c512:	2200      	movs	r2, #0
 800c514:	3f00      	subs	r7, #0
 800c516:	fab3 f383 	clz	r3, r3
 800c51a:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800c51e:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800c522:	bf18      	it	ne
 800c524:	2701      	movne	r7, #1
 800c526:	095b      	lsrs	r3, r3, #5
 800c528:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800c52c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800c530:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800c534:	2201      	movs	r2, #1
 800c536:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800c53a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c53e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800c542:	b919      	cbnz	r1, 800c54c <uxr_buffer_create_datawriter_bin+0x70>
 800c544:	f043 0302 	orr.w	r3, r3, #2
 800c548:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c54c:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800c550:	2a01      	cmp	r2, #1
 800c552:	d022      	beq.n	800c59a <uxr_buffer_create_datawriter_bin+0xbe>
 800c554:	2a03      	cmp	r2, #3
 800c556:	d01b      	beq.n	800c590 <uxr_buffer_create_datawriter_bin+0xb4>
 800c558:	b91a      	cbnz	r2, 800c562 <uxr_buffer_create_datawriter_bin+0x86>
 800c55a:	f043 0308 	orr.w	r3, r3, #8
 800c55e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c566:	a921      	add	r1, sp, #132	@ 0x84
 800c568:	a806      	add	r0, sp, #24
 800c56a:	f7ff fdaf 	bl	800c0cc <ucdr_init_buffer>
 800c56e:	a90e      	add	r1, sp, #56	@ 0x38
 800c570:	a806      	add	r0, sp, #24
 800c572:	f002 fed7 	bl	800f324 <uxr_serialize_OBJK_DataWriter_Binary>
 800c576:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c578:	9600      	str	r6, [sp, #0]
 800c57a:	9401      	str	r4, [sp, #4]
 800c57c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c580:	60e3      	str	r3, [r4, #12]
 800c582:	4628      	mov	r0, r5
 800c584:	b29b      	uxth	r3, r3
 800c586:	f7ff feb9 	bl	800c2fc <uxr_common_create_entity>
 800c58a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c590:	f043 0320 	orr.w	r3, r3, #32
 800c594:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c598:	e7e3      	b.n	800c562 <uxr_buffer_create_datawriter_bin+0x86>
 800c59a:	f043 0310 	orr.w	r3, r3, #16
 800c59e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c5a2:	e7de      	b.n	800c562 <uxr_buffer_create_datawriter_bin+0x86>

0800c5a4 <uxr_buffer_create_datareader_bin>:
 800c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a6:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800c5aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c5ac:	9105      	str	r1, [sp, #20]
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	a9a3      	add	r1, sp, #652	@ 0x28c
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	2306      	movs	r3, #6
 800c5b6:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800c5ba:	9204      	str	r2, [sp, #16]
 800c5bc:	7123      	strb	r3, [r4, #4]
 800c5be:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800c5c2:	f000 f939 	bl	800c838 <uxr_object_id_to_raw>
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	a90e      	add	r1, sp, #56	@ 0x38
 800c5ca:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800c5cc:	7223      	strb	r3, [r4, #8]
 800c5ce:	f000 f933 	bl	800c838 <uxr_object_id_to_raw>
 800c5d2:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800c5d6:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800c5da:	2200      	movs	r2, #0
 800c5dc:	3f00      	subs	r7, #0
 800c5de:	fab3 f383 	clz	r3, r3
 800c5e2:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800c5e6:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800c5ea:	bf18      	it	ne
 800c5ec:	2701      	movne	r7, #1
 800c5ee:	095b      	lsrs	r3, r3, #5
 800c5f0:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800c5f4:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800c5f8:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800c5fc:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800c600:	2201      	movs	r2, #1
 800c602:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800c606:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c60a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800c60e:	b919      	cbnz	r1, 800c618 <uxr_buffer_create_datareader_bin+0x74>
 800c610:	f043 0302 	orr.w	r3, r3, #2
 800c614:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c618:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800c61c:	2a01      	cmp	r2, #1
 800c61e:	d022      	beq.n	800c666 <uxr_buffer_create_datareader_bin+0xc2>
 800c620:	2a03      	cmp	r2, #3
 800c622:	d01b      	beq.n	800c65c <uxr_buffer_create_datareader_bin+0xb8>
 800c624:	b91a      	cbnz	r2, 800c62e <uxr_buffer_create_datareader_bin+0x8a>
 800c626:	f043 0308 	orr.w	r3, r3, #8
 800c62a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c62e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c632:	a923      	add	r1, sp, #140	@ 0x8c
 800c634:	a806      	add	r0, sp, #24
 800c636:	f7ff fd49 	bl	800c0cc <ucdr_init_buffer>
 800c63a:	a90e      	add	r1, sp, #56	@ 0x38
 800c63c:	a806      	add	r0, sp, #24
 800c63e:	f002 fe35 	bl	800f2ac <uxr_serialize_OBJK_DataReader_Binary>
 800c642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c644:	9600      	str	r6, [sp, #0]
 800c646:	9401      	str	r4, [sp, #4]
 800c648:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c64c:	60e3      	str	r3, [r4, #12]
 800c64e:	4628      	mov	r0, r5
 800c650:	b29b      	uxth	r3, r3
 800c652:	f7ff fe53 	bl	800c2fc <uxr_common_create_entity>
 800c656:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800c65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c65c:	f043 0320 	orr.w	r3, r3, #32
 800c660:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c664:	e7e3      	b.n	800c62e <uxr_buffer_create_datareader_bin+0x8a>
 800c666:	f043 0310 	orr.w	r3, r3, #16
 800c66a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c66e:	e7de      	b.n	800c62e <uxr_buffer_create_datareader_bin+0x8a>

0800c670 <get_custom_error>:
 800c670:	4b01      	ldr	r3, [pc, #4]	@ (800c678 <get_custom_error+0x8>)
 800c672:	7818      	ldrb	r0, [r3, #0]
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	2000ea00 	.word	0x2000ea00

0800c67c <recv_custom_msg>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	b089      	sub	sp, #36	@ 0x24
 800c682:	4693      	mov	fp, r2
 800c684:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800c688:	9104      	str	r1, [sp, #16]
 800c68a:	2100      	movs	r1, #0
 800c68c:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800c690:	9305      	str	r3, [sp, #20]
 800c692:	4604      	mov	r4, r0
 800c694:	f88d 101e 	strb.w	r1, [sp, #30]
 800c698:	b332      	cbz	r2, 800c6e8 <recv_custom_msg+0x6c>
 800c69a:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800c69e:	f10d 091f 	add.w	r9, sp, #31
 800c6a2:	f10d 0814 	add.w	r8, sp, #20
 800c6a6:	f10d 071e 	add.w	r7, sp, #30
 800c6aa:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800c6ae:	e004      	b.n	800c6ba <recv_custom_msg+0x3e>
 800c6b0:	9b05      	ldr	r3, [sp, #20]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	dd10      	ble.n	800c6d8 <recv_custom_msg+0x5c>
 800c6b6:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800c6ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c6be:	e9cd 6700 	strd	r6, r7, [sp]
 800c6c2:	4623      	mov	r3, r4
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	f001 fc33 	bl	800df34 <uxr_read_framed_msg>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d0ee      	beq.n	800c6b0 <recv_custom_msg+0x34>
 800c6d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c6d6:	b1a3      	cbz	r3, 800c702 <recv_custom_msg+0x86>
 800c6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c714 <recv_custom_msg+0x98>)
 800c6da:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800c6de:	701a      	strb	r2, [r3, #0]
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	b009      	add	sp, #36	@ 0x24
 800c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	f10d 021f 	add.w	r2, sp, #31
 800c6ec:	9200      	str	r2, [sp, #0]
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6f4:	47a8      	blx	r5
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d0ee      	beq.n	800c6d8 <recv_custom_msg+0x5c>
 800c6fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1ea      	bne.n	800c6d8 <recv_custom_msg+0x5c>
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	f8cb 0000 	str.w	r0, [fp]
 800c708:	2001      	movs	r0, #1
 800c70a:	601c      	str	r4, [r3, #0]
 800c70c:	b009      	add	sp, #36	@ 0x24
 800c70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c712:	bf00      	nop
 800c714:	2000ea00 	.word	0x2000ea00

0800c718 <send_custom_msg>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800c71e:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800c722:	b086      	sub	sp, #24
 800c724:	4616      	mov	r6, r2
 800c726:	b965      	cbnz	r5, 800c742 <send_custom_msg+0x2a>
 800c728:	f10d 0317 	add.w	r3, sp, #23
 800c72c:	47a0      	blx	r4
 800c72e:	b108      	cbz	r0, 800c734 <send_custom_msg+0x1c>
 800c730:	42b0      	cmp	r0, r6
 800c732:	d014      	beq.n	800c75e <send_custom_msg+0x46>
 800c734:	4b0b      	ldr	r3, [pc, #44]	@ (800c764 <send_custom_msg+0x4c>)
 800c736:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800c73a:	701a      	strb	r2, [r3, #0]
 800c73c:	2000      	movs	r0, #0
 800c73e:	b006      	add	sp, #24
 800c740:	bd70      	pop	{r4, r5, r6, pc}
 800c742:	f10d 0217 	add.w	r2, sp, #23
 800c746:	9202      	str	r2, [sp, #8]
 800c748:	2200      	movs	r2, #0
 800c74a:	e9cd 6200 	strd	r6, r2, [sp]
 800c74e:	460b      	mov	r3, r1
 800c750:	4602      	mov	r2, r0
 800c752:	4621      	mov	r1, r4
 800c754:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800c758:	f001 fa0e 	bl	800db78 <uxr_write_framed_msg>
 800c75c:	e7e7      	b.n	800c72e <send_custom_msg+0x16>
 800c75e:	2001      	movs	r0, #1
 800c760:	b006      	add	sp, #24
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	2000ea00 	.word	0x2000ea00

0800c768 <uxr_set_custom_transport_callbacks>:
 800c768:	b410      	push	{r4}
 800c76a:	9c01      	ldr	r4, [sp, #4]
 800c76c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800c770:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800c774:	9b02      	ldr	r3, [sp, #8]
 800c776:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800c77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c77e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800c782:	4770      	bx	lr

0800c784 <uxr_init_custom_transport>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800c78a:	b303      	cbz	r3, 800c7ce <uxr_init_custom_transport+0x4a>
 800c78c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800c790:	4604      	mov	r4, r0
 800c792:	b1e2      	cbz	r2, 800c7ce <uxr_init_custom_transport+0x4a>
 800c794:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800c798:	b1ca      	cbz	r2, 800c7ce <uxr_init_custom_transport+0x4a>
 800c79a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800c79e:	b1b2      	cbz	r2, 800c7ce <uxr_init_custom_transport+0x4a>
 800c7a0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800c7a4:	4798      	blx	r3
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	b188      	cbz	r0, 800c7ce <uxr_init_custom_transport+0x4a>
 800c7aa:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800c7ae:	b98b      	cbnz	r3, 800c7d4 <uxr_init_custom_transport+0x50>
 800c7b0:	490b      	ldr	r1, [pc, #44]	@ (800c7e0 <uxr_init_custom_transport+0x5c>)
 800c7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e4 <uxr_init_custom_transport+0x60>)
 800c7b4:	4a0c      	ldr	r2, [pc, #48]	@ (800c7e8 <uxr_init_custom_transport+0x64>)
 800c7b6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800c7ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7be:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800c7c2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800c7c6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	bd38      	pop	{r3, r4, r5, pc}
 800c7ce:	2500      	movs	r5, #0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800c7da:	f001 f9c7 	bl	800db6c <uxr_init_framing_io>
 800c7de:	e7e7      	b.n	800c7b0 <uxr_init_custom_transport+0x2c>
 800c7e0:	0800c719 	.word	0x0800c719
 800c7e4:	0800c67d 	.word	0x0800c67d
 800c7e8:	0800c671 	.word	0x0800c671

0800c7ec <uxr_close_custom_transport>:
 800c7ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800c7f0:	4718      	bx	r3
 800c7f2:	bf00      	nop

0800c7f4 <uxr_object_id>:
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f88d 1006 	strb.w	r1, [sp, #6]
 800c7fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c800:	f360 030f 	bfi	r3, r0, #0, #16
 800c804:	f362 431f 	bfi	r3, r2, #16, #16
 800c808:	4618      	mov	r0, r3
 800c80a:	b002      	add	sp, #8
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop

0800c810 <uxr_object_id_from_raw>:
 800c810:	7843      	ldrb	r3, [r0, #1]
 800c812:	7801      	ldrb	r1, [r0, #0]
 800c814:	b082      	sub	sp, #8
 800c816:	f003 020f 	and.w	r2, r3, #15
 800c81a:	f88d 2006 	strb.w	r2, [sp, #6]
 800c81e:	091b      	lsrs	r3, r3, #4
 800c820:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c824:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c828:	2000      	movs	r0, #0
 800c82a:	f363 000f 	bfi	r0, r3, #0, #16
 800c82e:	f362 401f 	bfi	r0, r2, #16, #16
 800c832:	b002      	add	sp, #8
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop

0800c838 <uxr_object_id_to_raw>:
 800c838:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c83c:	b082      	sub	sp, #8
 800c83e:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800c842:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c846:	700a      	strb	r2, [r1, #0]
 800c848:	704b      	strb	r3, [r1, #1]
 800c84a:	b002      	add	sp, #8
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop

0800c850 <uxr_ping_agent_session>:
 800c850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c854:	4616      	mov	r6, r2
 800c856:	b091      	sub	sp, #68	@ 0x44
 800c858:	2210      	movs	r2, #16
 800c85a:	4605      	mov	r5, r0
 800c85c:	460f      	mov	r7, r1
 800c85e:	a808      	add	r0, sp, #32
 800c860:	eb0d 0102 	add.w	r1, sp, r2
 800c864:	f7ff fc32 	bl	800c0cc <ucdr_init_buffer>
 800c868:	4b20      	ldr	r3, [pc, #128]	@ (800c8ec <uxr_ping_agent_session+0x9c>)
 800c86a:	2400      	movs	r4, #0
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c872:	9400      	str	r4, [sp, #0]
 800c874:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800c878:	f04f 0802 	mov.w	r8, #2
 800c87c:	7829      	ldrb	r1, [r5, #0]
 800c87e:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c882:	4622      	mov	r2, r4
 800c884:	4623      	mov	r3, r4
 800c886:	a808      	add	r0, sp, #32
 800c888:	f8cd 800c 	str.w	r8, [sp, #12]
 800c88c:	f002 f8ee 	bl	800ea6c <uxr_serialize_message_header>
 800c890:	4641      	mov	r1, r8
 800c892:	4623      	mov	r3, r4
 800c894:	2208      	movs	r2, #8
 800c896:	a808      	add	r0, sp, #32
 800c898:	f001 feea 	bl	800e670 <uxr_buffer_submessage_header>
 800c89c:	a902      	add	r1, sp, #8
 800c89e:	4680      	mov	r8, r0
 800c8a0:	a808      	add	r0, sp, #32
 800c8a2:	f002 ff99 	bl	800f7d8 <uxr_serialize_GET_INFO_Payload>
 800c8a6:	f1b8 0f00 	cmp.w	r8, #0
 800c8aa:	d000      	beq.n	800c8ae <uxr_ping_agent_session+0x5e>
 800c8ac:	b918      	cbnz	r0, 800c8b6 <uxr_ping_agent_session+0x66>
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	b011      	add	sp, #68	@ 0x44
 800c8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8b6:	a808      	add	r0, sp, #32
 800c8b8:	f7ff fc34 	bl	800c124 <ucdr_buffer_length>
 800c8bc:	4680      	mov	r8, r0
 800c8be:	2e00      	cmp	r6, #0
 800c8c0:	d0f5      	beq.n	800c8ae <uxr_ping_agent_session+0x5e>
 800c8c2:	46a1      	mov	r9, r4
 800c8c4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c8c6:	4642      	mov	r2, r8
 800c8c8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c8cc:	a904      	add	r1, sp, #16
 800c8ce:	47a0      	blx	r4
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f000 fdd5 	bl	800d484 <uxr_run_session_until_pong>
 800c8da:	4020      	ands	r0, r4
 800c8dc:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800c8e0:	f109 0901 	add.w	r9, r9, #1
 800c8e4:	d1e4      	bne.n	800c8b0 <uxr_ping_agent_session+0x60>
 800c8e6:	454e      	cmp	r6, r9
 800c8e8:	d1ec      	bne.n	800c8c4 <uxr_ping_agent_session+0x74>
 800c8ea:	e7e0      	b.n	800c8ae <uxr_ping_agent_session+0x5e>
 800c8ec:	0801842c 	.word	0x0801842c

0800c8f0 <uxr_ping_agent_attempts>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	b0d3      	sub	sp, #332	@ 0x14c
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	4688      	mov	r8, r1
 800c8fa:	a810      	add	r0, sp, #64	@ 0x40
 800c8fc:	a90c      	add	r1, sp, #48	@ 0x30
 800c8fe:	4692      	mov	sl, r2
 800c900:	2210      	movs	r2, #16
 800c902:	f7ff fbe3 	bl	800c0cc <ucdr_init_buffer>
 800c906:	4b56      	ldr	r3, [pc, #344]	@ (800ca60 <uxr_ping_agent_attempts+0x170>)
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800c90e:	2400      	movs	r4, #0
 800c910:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800c914:	2502      	movs	r5, #2
 800c916:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800c91a:	4622      	mov	r2, r4
 800c91c:	4623      	mov	r3, r4
 800c91e:	2180      	movs	r1, #128	@ 0x80
 800c920:	a810      	add	r0, sp, #64	@ 0x40
 800c922:	9400      	str	r4, [sp, #0]
 800c924:	9521      	str	r5, [sp, #132]	@ 0x84
 800c926:	f002 f8a1 	bl	800ea6c <uxr_serialize_message_header>
 800c92a:	4629      	mov	r1, r5
 800c92c:	4623      	mov	r3, r4
 800c92e:	2208      	movs	r2, #8
 800c930:	a810      	add	r0, sp, #64	@ 0x40
 800c932:	f001 fe9d 	bl	800e670 <uxr_buffer_submessage_header>
 800c936:	a920      	add	r1, sp, #128	@ 0x80
 800c938:	4605      	mov	r5, r0
 800c93a:	a810      	add	r0, sp, #64	@ 0x40
 800c93c:	f002 ff4c 	bl	800f7d8 <uxr_serialize_GET_INFO_Payload>
 800c940:	4005      	ands	r5, r0
 800c942:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800c946:	d104      	bne.n	800c952 <uxr_ping_agent_attempts+0x62>
 800c948:	2500      	movs	r5, #0
 800c94a:	4628      	mov	r0, r5
 800c94c:	b053      	add	sp, #332	@ 0x14c
 800c94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c952:	a810      	add	r0, sp, #64	@ 0x40
 800c954:	f7ff fbe6 	bl	800c124 <ucdr_buffer_length>
 800c958:	9004      	str	r0, [sp, #16]
 800c95a:	f1ba 0f00 	cmp.w	sl, #0
 800c95e:	d0f3      	beq.n	800c948 <uxr_ping_agent_attempts+0x58>
 800c960:	9505      	str	r5, [sp, #20]
 800c962:	46a1      	mov	r9, r4
 800c964:	4627      	mov	r7, r4
 800c966:	4655      	mov	r5, sl
 800c968:	e9d6 0300 	ldrd	r0, r3, [r6]
 800c96c:	9a04      	ldr	r2, [sp, #16]
 800c96e:	a90c      	add	r1, sp, #48	@ 0x30
 800c970:	4798      	blx	r3
 800c972:	f001 fec3 	bl	800e6fc <uxr_millis>
 800c976:	46c2      	mov	sl, r8
 800c978:	4604      	mov	r4, r0
 800c97a:	9503      	str	r5, [sp, #12]
 800c97c:	6830      	ldr	r0, [r6, #0]
 800c97e:	68b5      	ldr	r5, [r6, #8]
 800c980:	9708      	str	r7, [sp, #32]
 800c982:	4643      	mov	r3, r8
 800c984:	aa09      	add	r2, sp, #36	@ 0x24
 800c986:	a908      	add	r1, sp, #32
 800c988:	47a8      	blx	r5
 800c98a:	4683      	mov	fp, r0
 800c98c:	b998      	cbnz	r0, 800c9b6 <uxr_ping_agent_attempts+0xc6>
 800c98e:	f001 feb5 	bl	800e6fc <uxr_millis>
 800c992:	1b00      	subs	r0, r0, r4
 800c994:	ebaa 0a00 	sub.w	sl, sl, r0
 800c998:	f001 feb0 	bl	800e6fc <uxr_millis>
 800c99c:	f1ba 0f00 	cmp.w	sl, #0
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	dceb      	bgt.n	800c97c <uxr_ping_agent_attempts+0x8c>
 800c9a4:	9d03      	ldr	r5, [sp, #12]
 800c9a6:	f109 0901 	add.w	r9, r9, #1
 800c9aa:	f1bb 0f00 	cmp.w	fp, #0
 800c9ae:	d12a      	bne.n	800ca06 <uxr_ping_agent_attempts+0x116>
 800c9b0:	45a9      	cmp	r9, r5
 800c9b2:	d1d9      	bne.n	800c968 <uxr_ping_agent_attempts+0x78>
 800c9b4:	e7c8      	b.n	800c948 <uxr_ping_agent_attempts+0x58>
 800c9b6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c9ba:	a818      	add	r0, sp, #96	@ 0x60
 800c9bc:	f7ff fb86 	bl	800c0cc <ucdr_init_buffer>
 800c9c0:	ab07      	add	r3, sp, #28
 800c9c2:	f10d 0219 	add.w	r2, sp, #25
 800c9c6:	a918      	add	r1, sp, #96	@ 0x60
 800c9c8:	a80a      	add	r0, sp, #40	@ 0x28
 800c9ca:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 800c9ce:	f001 f859 	bl	800da84 <uxr_read_session_header>
 800c9d2:	22c8      	movs	r2, #200	@ 0xc8
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	a820      	add	r0, sp, #128	@ 0x80
 800c9d8:	f00a fdc8 	bl	801756c <memset>
 800c9dc:	a818      	add	r0, sp, #96	@ 0x60
 800c9de:	f7ff fba5 	bl	800c12c <ucdr_buffer_remaining>
 800c9e2:	2804      	cmp	r0, #4
 800c9e4:	d814      	bhi.n	800ca10 <uxr_ping_agent_attempts+0x120>
 800c9e6:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 800c9ea:	f001 fe87 	bl	800e6fc <uxr_millis>
 800c9ee:	1b00      	subs	r0, r0, r4
 800c9f0:	ebaa 0a00 	sub.w	sl, sl, r0
 800c9f4:	f001 fe82 	bl	800e6fc <uxr_millis>
 800c9f8:	f1ba 0f00 	cmp.w	sl, #0
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	dd28      	ble.n	800ca52 <uxr_ping_agent_attempts+0x162>
 800ca00:	f1bb 0f00 	cmp.w	fp, #0
 800ca04:	d0ba      	beq.n	800c97c <uxr_ping_agent_attempts+0x8c>
 800ca06:	9d05      	ldr	r5, [sp, #20]
 800ca08:	4628      	mov	r0, r5
 800ca0a:	b053      	add	sp, #332	@ 0x14c
 800ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca10:	f10d 031e 	add.w	r3, sp, #30
 800ca14:	f10d 021b 	add.w	r2, sp, #27
 800ca18:	f10d 011a 	add.w	r1, sp, #26
 800ca1c:	a818      	add	r0, sp, #96	@ 0x60
 800ca1e:	f88d 701a 	strb.w	r7, [sp, #26]
 800ca22:	f88d 701b 	strb.w	r7, [sp, #27]
 800ca26:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ca2a:	f002 f86f 	bl	800eb0c <uxr_deserialize_submessage_header>
 800ca2e:	a818      	add	r0, sp, #96	@ 0x60
 800ca30:	f7ff fb7c 	bl	800c12c <ucdr_buffer_remaining>
 800ca34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ca38:	4298      	cmp	r0, r3
 800ca3a:	d3d4      	bcc.n	800c9e6 <uxr_ping_agent_attempts+0xf6>
 800ca3c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800ca40:	2b06      	cmp	r3, #6
 800ca42:	d1d0      	bne.n	800c9e6 <uxr_ping_agent_attempts+0xf6>
 800ca44:	a918      	add	r1, sp, #96	@ 0x60
 800ca46:	a820      	add	r0, sp, #128	@ 0x80
 800ca48:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 800ca4c:	f000 f974 	bl	800cd38 <read_submessage_info>
 800ca50:	e7c9      	b.n	800c9e6 <uxr_ping_agent_attempts+0xf6>
 800ca52:	f1bb 0b00 	subs.w	fp, fp, #0
 800ca56:	9d03      	ldr	r5, [sp, #12]
 800ca58:	bf18      	it	ne
 800ca5a:	f04f 0b01 	movne.w	fp, #1
 800ca5e:	e7a2      	b.n	800c9a6 <uxr_ping_agent_attempts+0xb6>
 800ca60:	0801842c 	.word	0x0801842c

0800ca64 <on_get_fragmentation_info>:
 800ca64:	b500      	push	{lr}
 800ca66:	b08b      	sub	sp, #44	@ 0x2c
 800ca68:	4601      	mov	r1, r0
 800ca6a:	2204      	movs	r2, #4
 800ca6c:	a802      	add	r0, sp, #8
 800ca6e:	f7ff fb2d 	bl	800c0cc <ucdr_init_buffer>
 800ca72:	f10d 0305 	add.w	r3, sp, #5
 800ca76:	f10d 0206 	add.w	r2, sp, #6
 800ca7a:	a901      	add	r1, sp, #4
 800ca7c:	a802      	add	r0, sp, #8
 800ca7e:	f001 fe11 	bl	800e6a4 <uxr_read_submessage_header>
 800ca82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca86:	2b0d      	cmp	r3, #13
 800ca88:	d003      	beq.n	800ca92 <on_get_fragmentation_info+0x2e>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	b00b      	add	sp, #44	@ 0x2c
 800ca8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca96:	f013 0f02 	tst.w	r3, #2
 800ca9a:	bf0c      	ite	eq
 800ca9c:	2001      	moveq	r0, #1
 800ca9e:	2002      	movne	r0, #2
 800caa0:	b00b      	add	sp, #44	@ 0x2c
 800caa2:	f85d fb04 	ldr.w	pc, [sp], #4
 800caa6:	bf00      	nop

0800caa8 <read_submessage_get_info>:
 800caa8:	b570      	push	{r4, r5, r6, lr}
 800caaa:	2500      	movs	r5, #0
 800caac:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800cab0:	4604      	mov	r4, r0
 800cab2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800cab6:	460e      	mov	r6, r1
 800cab8:	a810      	add	r0, sp, #64	@ 0x40
 800caba:	4629      	mov	r1, r5
 800cabc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cac0:	f00a fd54 	bl	801756c <memset>
 800cac4:	a903      	add	r1, sp, #12
 800cac6:	4630      	mov	r0, r6
 800cac8:	f002 fe9a 	bl	800f800 <uxr_deserialize_GET_INFO_Payload>
 800cacc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cad0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cad4:	4620      	mov	r0, r4
 800cad6:	f001 f813 	bl	800db00 <uxr_session_header_offset>
 800cada:	462b      	mov	r3, r5
 800cadc:	9000      	str	r0, [sp, #0]
 800cade:	220c      	movs	r2, #12
 800cae0:	a905      	add	r1, sp, #20
 800cae2:	a808      	add	r0, sp, #32
 800cae4:	f7ff fae0 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800cae8:	a910      	add	r1, sp, #64	@ 0x40
 800caea:	a808      	add	r0, sp, #32
 800caec:	f002 fefa 	bl	800f8e4 <uxr_serialize_INFO_Payload>
 800caf0:	9b08      	ldr	r3, [sp, #32]
 800caf2:	462a      	mov	r2, r5
 800caf4:	4629      	mov	r1, r5
 800caf6:	4620      	mov	r0, r4
 800caf8:	f000 ffae 	bl	800da58 <uxr_stamp_session_header>
 800cafc:	a808      	add	r0, sp, #32
 800cafe:	f7ff fb11 	bl	800c124 <ucdr_buffer_length>
 800cb02:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cb04:	4602      	mov	r2, r0
 800cb06:	a905      	add	r1, sp, #20
 800cb08:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cb0c:	47a0      	blx	r4
 800cb0e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800cb12:	bd70      	pop	{r4, r5, r6, pc}

0800cb14 <write_submessage_acknack.isra.0>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	b092      	sub	sp, #72	@ 0x48
 800cb18:	4605      	mov	r5, r0
 800cb1a:	460e      	mov	r6, r1
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	f000 ffef 	bl	800db00 <uxr_session_header_offset>
 800cb22:	a905      	add	r1, sp, #20
 800cb24:	9000      	str	r0, [sp, #0]
 800cb26:	2300      	movs	r3, #0
 800cb28:	a80a      	add	r0, sp, #40	@ 0x28
 800cb2a:	2211      	movs	r2, #17
 800cb2c:	f7ff fabc 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800cb30:	2318      	movs	r3, #24
 800cb32:	fb03 5404 	mla	r4, r3, r4, r5
 800cb36:	2205      	movs	r2, #5
 800cb38:	2300      	movs	r3, #0
 800cb3a:	3450      	adds	r4, #80	@ 0x50
 800cb3c:	210a      	movs	r1, #10
 800cb3e:	a80a      	add	r0, sp, #40	@ 0x28
 800cb40:	f001 fd96 	bl	800e670 <uxr_buffer_submessage_header>
 800cb44:	a903      	add	r1, sp, #12
 800cb46:	4620      	mov	r0, r4
 800cb48:	f008 fc22 	bl	8015390 <uxr_compute_acknack>
 800cb4c:	ba40      	rev16	r0, r0
 800cb4e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cb52:	a903      	add	r1, sp, #12
 800cb54:	a80a      	add	r0, sp, #40	@ 0x28
 800cb56:	f88d 6010 	strb.w	r6, [sp, #16]
 800cb5a:	f002 ff33 	bl	800f9c4 <uxr_serialize_ACKNACK_Payload>
 800cb5e:	2200      	movs	r2, #0
 800cb60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb62:	4611      	mov	r1, r2
 800cb64:	4628      	mov	r0, r5
 800cb66:	f000 ff77 	bl	800da58 <uxr_stamp_session_header>
 800cb6a:	a80a      	add	r0, sp, #40	@ 0x28
 800cb6c:	f7ff fada 	bl	800c124 <ucdr_buffer_length>
 800cb70:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800cb72:	4602      	mov	r2, r0
 800cb74:	a905      	add	r1, sp, #20
 800cb76:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cb7a:	47a0      	blx	r4
 800cb7c:	b012      	add	sp, #72	@ 0x48
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}

0800cb80 <uxr_init_session>:
 800cb80:	b510      	push	{r4, lr}
 800cb82:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cbb8 <uxr_init_session+0x38>
 800cb86:	2300      	movs	r3, #0
 800cb88:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800cb92:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800cb96:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800cb9a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800cb9e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800cba2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800cba6:	2181      	movs	r1, #129	@ 0x81
 800cba8:	f000 feba 	bl	800d920 <uxr_init_session_info>
 800cbac:	f104 0008 	add.w	r0, r4, #8
 800cbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbb4:	f001 bc78 	b.w	800e4a8 <uxr_init_stream_storage>
	...

0800cbc0 <uxr_set_status_callback>:
 800cbc0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop

0800cbc8 <uxr_set_topic_callback>:
 800cbc8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop

0800cbd0 <uxr_set_request_callback>:
 800cbd0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop

0800cbd8 <uxr_set_reply_callback>:
 800cbd8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop

0800cbe0 <uxr_create_output_best_effort_stream>:
 800cbe0:	b570      	push	{r4, r5, r6, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	4616      	mov	r6, r2
 800cbea:	f000 ff89 	bl	800db00 <uxr_session_header_offset>
 800cbee:	4632      	mov	r2, r6
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	f104 0008 	add.w	r0, r4, #8
 800cbf8:	b002      	add	sp, #8
 800cbfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbfe:	f001 bc9d 	b.w	800e53c <uxr_add_output_best_effort_buffer>
 800cc02:	bf00      	nop

0800cc04 <uxr_create_output_reliable_stream>:
 800cc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc06:	b085      	sub	sp, #20
 800cc08:	4604      	mov	r4, r0
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	4616      	mov	r6, r2
 800cc0e:	461f      	mov	r7, r3
 800cc10:	f000 ff76 	bl	800db00 <uxr_session_header_offset>
 800cc14:	463b      	mov	r3, r7
 800cc16:	9000      	str	r0, [sp, #0]
 800cc18:	4632      	mov	r2, r6
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f104 0008 	add.w	r0, r4, #8
 800cc20:	f001 fca0 	bl	800e564 <uxr_add_output_reliable_buffer>
 800cc24:	b005      	add	sp, #20
 800cc26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc28 <uxr_create_input_best_effort_stream>:
 800cc28:	b082      	sub	sp, #8
 800cc2a:	3008      	adds	r0, #8
 800cc2c:	b002      	add	sp, #8
 800cc2e:	f001 bcb3 	b.w	800e598 <uxr_add_input_best_effort_buffer>
 800cc32:	bf00      	nop

0800cc34 <uxr_create_input_reliable_stream>:
 800cc34:	b510      	push	{r4, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	4c03      	ldr	r4, [pc, #12]	@ (800cc48 <uxr_create_input_reliable_stream+0x14>)
 800cc3a:	9400      	str	r4, [sp, #0]
 800cc3c:	3008      	adds	r0, #8
 800cc3e:	f001 fcc1 	bl	800e5c4 <uxr_add_input_reliable_buffer>
 800cc42:	b004      	add	sp, #16
 800cc44:	bd10      	pop	{r4, pc}
 800cc46:	bf00      	nop
 800cc48:	0800ca65 	.word	0x0800ca65

0800cc4c <uxr_epoch_nanos>:
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	4604      	mov	r4, r0
 800cc50:	f001 fd6e 	bl	800e730 <uxr_nanos>
 800cc54:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800cc58:	1ac0      	subs	r0, r0, r3
 800cc5a:	eb61 0102 	sbc.w	r1, r1, r2
 800cc5e:	bd10      	pop	{r4, pc}

0800cc60 <uxr_flash_output_streams>:
 800cc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc64:	7e03      	ldrb	r3, [r0, #24]
 800cc66:	b084      	sub	sp, #16
 800cc68:	4604      	mov	r4, r0
 800cc6a:	b373      	cbz	r3, 800ccca <uxr_flash_output_streams+0x6a>
 800cc6c:	2500      	movs	r5, #0
 800cc6e:	f100 0908 	add.w	r9, r0, #8
 800cc72:	f10d 0802 	add.w	r8, sp, #2
 800cc76:	4628      	mov	r0, r5
 800cc78:	af03      	add	r7, sp, #12
 800cc7a:	ae02      	add	r6, sp, #8
 800cc7c:	e006      	b.n	800cc8c <uxr_flash_output_streams+0x2c>
 800cc7e:	7e23      	ldrb	r3, [r4, #24]
 800cc80:	3501      	adds	r5, #1
 800cc82:	b2e8      	uxtb	r0, r5
 800cc84:	4283      	cmp	r3, r0
 800cc86:	f109 0910 	add.w	r9, r9, #16
 800cc8a:	d91e      	bls.n	800ccca <uxr_flash_output_streams+0x6a>
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	4611      	mov	r1, r2
 800cc90:	f001 fbd2 	bl	800e438 <uxr_stream_id>
 800cc94:	4643      	mov	r3, r8
 800cc96:	4684      	mov	ip, r0
 800cc98:	463a      	mov	r2, r7
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4648      	mov	r0, r9
 800cc9e:	f8cd c004 	str.w	ip, [sp, #4]
 800cca2:	f008 fbf9 	bl	8015498 <uxr_prepare_best_effort_buffer_to_send>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d0e9      	beq.n	800cc7e <uxr_flash_output_streams+0x1e>
 800ccaa:	9b02      	ldr	r3, [sp, #8]
 800ccac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ccb0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fecf 	bl	800da58 <uxr_stamp_session_header>
 800ccba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ccbc:	9a03      	ldr	r2, [sp, #12]
 800ccbe:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ccc2:	9902      	ldr	r1, [sp, #8]
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	47d0      	blx	sl
 800ccc8:	e7d9      	b.n	800cc7e <uxr_flash_output_streams+0x1e>
 800ccca:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ccce:	b37b      	cbz	r3, 800cd30 <uxr_flash_output_streams+0xd0>
 800ccd0:	f04f 0900 	mov.w	r9, #0
 800ccd4:	f104 0520 	add.w	r5, r4, #32
 800ccd8:	f10d 0802 	add.w	r8, sp, #2
 800ccdc:	af03      	add	r7, sp, #12
 800ccde:	ae02      	add	r6, sp, #8
 800cce0:	4648      	mov	r0, r9
 800cce2:	2201      	movs	r2, #1
 800cce4:	2102      	movs	r1, #2
 800cce6:	f001 fba7 	bl	800e438 <uxr_stream_id>
 800ccea:	9001      	str	r0, [sp, #4]
 800ccec:	e00e      	b.n	800cd0c <uxr_flash_output_streams+0xac>
 800ccee:	9b02      	ldr	r3, [sp, #8]
 800ccf0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ccf4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 fead 	bl	800da58 <uxr_stamp_session_header>
 800ccfe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cd00:	9a03      	ldr	r2, [sp, #12]
 800cd02:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800cd06:	9902      	ldr	r1, [sp, #8]
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	47d0      	blx	sl
 800cd0c:	4643      	mov	r3, r8
 800cd0e:	463a      	mov	r2, r7
 800cd10:	4631      	mov	r1, r6
 800cd12:	4628      	mov	r0, r5
 800cd14:	f008 fdd4 	bl	80158c0 <uxr_prepare_next_reliable_buffer_to_send>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d1e8      	bne.n	800ccee <uxr_flash_output_streams+0x8e>
 800cd1c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cd20:	f109 0901 	add.w	r9, r9, #1
 800cd24:	fa5f f089 	uxtb.w	r0, r9
 800cd28:	4283      	cmp	r3, r0
 800cd2a:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800cd2e:	d8d8      	bhi.n	800cce2 <uxr_flash_output_streams+0x82>
 800cd30:	b004      	add	sp, #16
 800cd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd36:	bf00      	nop

0800cd38 <read_submessage_info>:
 800cd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3c:	460d      	mov	r5, r1
 800cd3e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cd42:	4669      	mov	r1, sp
 800cd44:	4607      	mov	r7, r0
 800cd46:	4628      	mov	r0, r5
 800cd48:	f002 fc56 	bl	800f5f8 <uxr_deserialize_BaseObjectReply>
 800cd4c:	a902      	add	r1, sp, #8
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4628      	mov	r0, r5
 800cd52:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cd56:	f7fe f8db 	bl	800af10 <ucdr_deserialize_bool>
 800cd5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cd5e:	4004      	ands	r4, r0
 800cd60:	b2e4      	uxtb	r4, r4
 800cd62:	b95b      	cbnz	r3, 800cd7c <read_submessage_info+0x44>
 800cd64:	a987      	add	r1, sp, #540	@ 0x21c
 800cd66:	4628      	mov	r0, r5
 800cd68:	f7fe f8d2 	bl	800af10 <ucdr_deserialize_bool>
 800cd6c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cd70:	4606      	mov	r6, r0
 800cd72:	b94b      	cbnz	r3, 800cd88 <read_submessage_info+0x50>
 800cd74:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	a903      	add	r1, sp, #12
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f002 fafc 	bl	800f37c <uxr_deserialize_ObjectVariant>
 800cd84:	4004      	ands	r4, r0
 800cd86:	e7ed      	b.n	800cd64 <read_submessage_info+0x2c>
 800cd88:	a988      	add	r1, sp, #544	@ 0x220
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f7fe f8ee 	bl	800af6c <ucdr_deserialize_uint8_t>
 800cd90:	4234      	tst	r4, r6
 800cd92:	d0ef      	beq.n	800cd74 <read_submessage_info+0x3c>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d0ed      	beq.n	800cd74 <read_submessage_info+0x3c>
 800cd98:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cd9c:	2b0d      	cmp	r3, #13
 800cd9e:	d1e9      	bne.n	800cd74 <read_submessage_info+0x3c>
 800cda0:	a98a      	add	r1, sp, #552	@ 0x228
 800cda2:	4628      	mov	r0, r5
 800cda4:	f7fe fe7e 	bl	800baa4 <ucdr_deserialize_int16_t>
 800cda8:	b140      	cbz	r0, 800cdbc <read_submessage_info+0x84>
 800cdaa:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dd07      	ble.n	800cdc2 <read_submessage_info+0x8a>
 800cdb2:	f1b8 0f00 	cmp.w	r8, #0
 800cdb6:	bf0c      	ite	eq
 800cdb8:	2002      	moveq	r0, #2
 800cdba:	2001      	movne	r0, #1
 800cdbc:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cdc0:	e7d8      	b.n	800cd74 <read_submessage_info+0x3c>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e7fa      	b.n	800cdbc <read_submessage_info+0x84>
 800cdc6:	bf00      	nop

0800cdc8 <read_submessage_list>:
 800cdc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdcc:	b097      	sub	sp, #92	@ 0x5c
 800cdce:	4604      	mov	r4, r0
 800cdd0:	460d      	mov	r5, r1
 800cdd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdd4:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cdd8:	aa0c      	add	r2, sp, #48	@ 0x30
 800cdda:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cdde:	4628      	mov	r0, r5
 800cde0:	f001 fc60 	bl	800e6a4 <uxr_read_submessage_header>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	f000 812c 	beq.w	800d042 <read_submessage_list+0x27a>
 800cdea:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800cdee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdf0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800cdf4:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800cdf8:	3902      	subs	r1, #2
 800cdfa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cdfe:	290d      	cmp	r1, #13
 800ce00:	d8e8      	bhi.n	800cdd4 <read_submessage_list+0xc>
 800ce02:	a201      	add	r2, pc, #4	@ (adr r2, 800ce08 <read_submessage_list+0x40>)
 800ce04:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800ce08:	0800d039 	.word	0x0800d039
 800ce0c:	0800cdd5 	.word	0x0800cdd5
 800ce10:	0800d029 	.word	0x0800d029
 800ce14:	0800cfcb 	.word	0x0800cfcb
 800ce18:	0800cfc1 	.word	0x0800cfc1
 800ce1c:	0800cdd5 	.word	0x0800cdd5
 800ce20:	0800cdd5 	.word	0x0800cdd5
 800ce24:	0800cf45 	.word	0x0800cf45
 800ce28:	0800cedd 	.word	0x0800cedd
 800ce2c:	0800ce9d 	.word	0x0800ce9d
 800ce30:	0800cdd5 	.word	0x0800cdd5
 800ce34:	0800cdd5 	.word	0x0800cdd5
 800ce38:	0800cdd5 	.word	0x0800cdd5
 800ce3c:	0800ce41 	.word	0x0800ce41
 800ce40:	a910      	add	r1, sp, #64	@ 0x40
 800ce42:	4628      	mov	r0, r5
 800ce44:	f002 fe0e 	bl	800fa64 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ce48:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800ce4c:	2e00      	cmp	r6, #0
 800ce4e:	f000 8100 	beq.w	800d052 <read_submessage_list+0x28a>
 800ce52:	f001 fc6d 	bl	800e730 <uxr_nanos>
 800ce56:	f04f 0800 	mov.w	r8, #0
 800ce5a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	460b      	mov	r3, r1
 800ce60:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ce62:	4990      	ldr	r1, [pc, #576]	@ (800d0a4 <read_submessage_list+0x2dc>)
 800ce64:	46c4      	mov	ip, r8
 800ce66:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800ce6a:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ce6e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ce70:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ce72:	46c6      	mov	lr, r8
 800ce74:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800ce78:	46bc      	mov	ip, r7
 800ce7a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ce7e:	fbc0 7801 	smlal	r7, r8, r0, r1
 800ce82:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800ce86:	e9cd 7800 	strd	r7, r8, [sp]
 800ce8a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ce8e:	9106      	str	r1, [sp, #24]
 800ce90:	4620      	mov	r0, r4
 800ce92:	47b0      	blx	r6
 800ce94:	2301      	movs	r3, #1
 800ce96:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800ce9a:	e79b      	b.n	800cdd4 <read_submessage_list+0xc>
 800ce9c:	a910      	add	r1, sp, #64	@ 0x40
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f002 fdce 	bl	800fa40 <uxr_deserialize_HEARTBEAT_Payload>
 800cea4:	2100      	movs	r1, #0
 800cea6:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ceaa:	f001 fae1 	bl	800e470 <uxr_stream_id_from_raw>
 800ceae:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ceb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	f104 0008 	add.w	r0, r4, #8
 800ceba:	f001 fbb9 	bl	800e630 <uxr_get_input_reliable_stream>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d088      	beq.n	800cdd4 <read_submessage_list+0xc>
 800cec2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800cec6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ceca:	f008 fa55 	bl	8015378 <uxr_process_heartbeat>
 800cece:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ced2:	4632      	mov	r2, r6
 800ced4:	4620      	mov	r0, r4
 800ced6:	f7ff fe1d 	bl	800cb14 <write_submessage_acknack.isra.0>
 800ceda:	e77b      	b.n	800cdd4 <read_submessage_list+0xc>
 800cedc:	a910      	add	r1, sp, #64	@ 0x40
 800cede:	4628      	mov	r0, r5
 800cee0:	f002 fd86 	bl	800f9f0 <uxr_deserialize_ACKNACK_Payload>
 800cee4:	2100      	movs	r1, #0
 800cee6:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ceea:	f001 fac1 	bl	800e470 <uxr_stream_id_from_raw>
 800ceee:	900d      	str	r0, [sp, #52]	@ 0x34
 800cef0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800cef4:	f104 0008 	add.w	r0, r4, #8
 800cef8:	f001 fb86 	bl	800e608 <uxr_get_output_reliable_stream>
 800cefc:	4606      	mov	r6, r0
 800cefe:	2800      	cmp	r0, #0
 800cf00:	f43f af68 	beq.w	800cdd4 <read_submessage_list+0xc>
 800cf04:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800cf08:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800cf0c:	ba49      	rev16	r1, r1
 800cf0e:	b289      	uxth	r1, r1
 800cf10:	f008 fd80 	bl	8015a14 <uxr_process_acknack>
 800cf14:	4630      	mov	r0, r6
 800cf16:	f008 fd41 	bl	801599c <uxr_begin_output_nack_buffer_it>
 800cf1a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800cf1e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800cf22:	e005      	b.n	800cf30 <read_submessage_list+0x168>
 800cf24:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cf26:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cf28:	685f      	ldr	r7, [r3, #4]
 800cf2a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	47b8      	blx	r7
 800cf30:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800cf34:	aa0f      	add	r2, sp, #60	@ 0x3c
 800cf36:	4641      	mov	r1, r8
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f008 fd31 	bl	80159a0 <uxr_next_reliable_nack_buffer_to_send>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d1f0      	bne.n	800cf24 <read_submessage_list+0x15c>
 800cf42:	e747      	b.n	800cdd4 <read_submessage_list+0xc>
 800cf44:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800cf48:	4641      	mov	r1, r8
 800cf4a:	900d      	str	r0, [sp, #52]	@ 0x34
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f002 fab5 	bl	800f4bc <uxr_deserialize_BaseObjectRequest>
 800cf52:	3e04      	subs	r6, #4
 800cf54:	4640      	mov	r0, r8
 800cf56:	a90f      	add	r1, sp, #60	@ 0x3c
 800cf58:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800cf5c:	f000 fdf6 	bl	800db4c <uxr_parse_base_object_request>
 800cf60:	fa1f f886 	uxth.w	r8, r6
 800cf64:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cf68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf6a:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800cf6e:	9110      	str	r1, [sp, #64]	@ 0x40
 800cf70:	f007 070e 	and.w	r7, r7, #14
 800cf74:	b136      	cbz	r6, 800cf84 <read_submessage_list+0x1bc>
 800cf76:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	464a      	mov	r2, r9
 800cf7e:	2300      	movs	r3, #0
 800cf80:	4620      	mov	r0, r4
 800cf82:	47b0      	blx	r6
 800cf84:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800cf86:	b16b      	cbz	r3, 800cfa4 <read_submessage_list+0x1dc>
 800cf88:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	3802      	subs	r0, #2
 800cf8e:	e002      	b.n	800cf96 <read_submessage_list+0x1ce>
 800cf90:	3101      	adds	r1, #1
 800cf92:	428b      	cmp	r3, r1
 800cf94:	d006      	beq.n	800cfa4 <read_submessage_list+0x1dc>
 800cf96:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800cf9a:	454e      	cmp	r6, r9
 800cf9c:	d1f8      	bne.n	800cf90 <read_submessage_list+0x1c8>
 800cf9e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	545a      	strb	r2, [r3, r1]
 800cfa4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800cfa8:	9102      	str	r1, [sp, #8]
 800cfaa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cfac:	9101      	str	r1, [sp, #4]
 800cfae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cfb0:	9100      	str	r1, [sp, #0]
 800cfb2:	463b      	mov	r3, r7
 800cfb4:	4642      	mov	r2, r8
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f008 fde3 	bl	8015b84 <read_submessage_format>
 800cfbe:	e709      	b.n	800cdd4 <read_submessage_list+0xc>
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff feb8 	bl	800cd38 <read_submessage_info>
 800cfc8:	e704      	b.n	800cdd4 <read_submessage_list+0xc>
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d03c      	beq.n	800d048 <read_submessage_list+0x280>
 800cfce:	a910      	add	r1, sp, #64	@ 0x40
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f002 fc69 	bl	800f8a8 <uxr_deserialize_STATUS_Payload>
 800cfd6:	a90e      	add	r1, sp, #56	@ 0x38
 800cfd8:	a810      	add	r0, sp, #64	@ 0x40
 800cfda:	aa0d      	add	r2, sp, #52	@ 0x34
 800cfdc:	f000 fdb6 	bl	800db4c <uxr_parse_base_object_request>
 800cfe0:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cfe4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cfe6:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800cfea:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800cfee:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cff0:	b136      	cbz	r6, 800d000 <read_submessage_list+0x238>
 800cff2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	463a      	mov	r2, r7
 800cffa:	4643      	mov	r3, r8
 800cffc:	4620      	mov	r0, r4
 800cffe:	47b0      	blx	r6
 800d000:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d002:	2a00      	cmp	r2, #0
 800d004:	f43f aee6 	beq.w	800cdd4 <read_submessage_list+0xc>
 800d008:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d00a:	2100      	movs	r1, #0
 800d00c:	3802      	subs	r0, #2
 800d00e:	e003      	b.n	800d018 <read_submessage_list+0x250>
 800d010:	3101      	adds	r1, #1
 800d012:	4291      	cmp	r1, r2
 800d014:	f43f aede 	beq.w	800cdd4 <read_submessage_list+0xc>
 800d018:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800d01c:	42be      	cmp	r6, r7
 800d01e:	d1f7      	bne.n	800d010 <read_submessage_list+0x248>
 800d020:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d022:	f803 8001 	strb.w	r8, [r3, r1]
 800d026:	e6d5      	b.n	800cdd4 <read_submessage_list+0xc>
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f47f aed3 	bne.w	800cdd4 <read_submessage_list+0xc>
 800d02e:	4629      	mov	r1, r5
 800d030:	4620      	mov	r0, r4
 800d032:	f000 fcd3 	bl	800d9dc <uxr_read_create_session_status>
 800d036:	e6cd      	b.n	800cdd4 <read_submessage_list+0xc>
 800d038:	4629      	mov	r1, r5
 800d03a:	4620      	mov	r0, r4
 800d03c:	f7ff fd34 	bl	800caa8 <read_submessage_get_info>
 800d040:	e6c8      	b.n	800cdd4 <read_submessage_list+0xc>
 800d042:	b017      	add	sp, #92	@ 0x5c
 800d044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d048:	4629      	mov	r1, r5
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 fcd4 	bl	800d9f8 <uxr_read_delete_session_status>
 800d050:	e6c0      	b.n	800cdd4 <read_submessage_list+0xc>
 800d052:	f001 fb6d 	bl	800e730 <uxr_nanos>
 800d056:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800d05a:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800d0a4 <read_submessage_list+0x2dc>
 800d05e:	4633      	mov	r3, r6
 800d060:	fbc7 230c 	smlal	r2, r3, r7, ip
 800d064:	1810      	adds	r0, r2, r0
 800d066:	eb43 0301 	adc.w	r3, r3, r1
 800d06a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800d06e:	46b6      	mov	lr, r6
 800d070:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800d074:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800d078:	fbc1 760c 	smlal	r7, r6, r1, ip
 800d07c:	19d2      	adds	r2, r2, r7
 800d07e:	eb4e 0106 	adc.w	r1, lr, r6
 800d082:	1a80      	subs	r0, r0, r2
 800d084:	eb63 0301 	sbc.w	r3, r3, r1
 800d088:	0fda      	lsrs	r2, r3, #31
 800d08a:	1812      	adds	r2, r2, r0
 800d08c:	f143 0300 	adc.w	r3, r3, #0
 800d090:	0852      	lsrs	r2, r2, #1
 800d092:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d096:	105b      	asrs	r3, r3, #1
 800d098:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d09c:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d0a0:	e6f8      	b.n	800ce94 <read_submessage_list+0xcc>
 800d0a2:	bf00      	nop
 800d0a4:	3b9aca00 	.word	0x3b9aca00

0800d0a8 <listen_message_reliably>:
 800d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	f1b1 0b00 	subs.w	fp, r1, #0
 800d0b0:	b09f      	sub	sp, #124	@ 0x7c
 800d0b2:	4606      	mov	r6, r0
 800d0b4:	bfb8      	it	lt
 800d0b6:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800d0ba:	f001 fb1f 	bl	800e6fc <uxr_millis>
 800d0be:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800d0c2:	9003      	str	r0, [sp, #12]
 800d0c4:	9104      	str	r1, [sp, #16]
 800d0c6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800d0ca:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 80a4 	beq.w	800d21c <listen_message_reliably+0x174>
 800d0d4:	2500      	movs	r5, #0
 800d0d6:	e9cd b806 	strd	fp, r8, [sp, #24]
 800d0da:	f106 0420 	add.w	r4, r6, #32
 800d0de:	f04f 37ff 	mov.w	r7, #4294967295
 800d0e2:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	e011      	b.n	800d10e <listen_message_reliably+0x66>
 800d0ea:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800d0ee:	42ba      	cmp	r2, r7
 800d0f0:	eb73 0109 	sbcs.w	r1, r3, r9
 800d0f4:	bfb8      	it	lt
 800d0f6:	4699      	movlt	r9, r3
 800d0f8:	f105 0501 	add.w	r5, r5, #1
 800d0fc:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800d100:	b2e8      	uxtb	r0, r5
 800d102:	bfb8      	it	lt
 800d104:	4617      	movlt	r7, r2
 800d106:	4283      	cmp	r3, r0
 800d108:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800d10c:	d94a      	bls.n	800d1a4 <listen_message_reliably+0xfc>
 800d10e:	2201      	movs	r2, #1
 800d110:	2102      	movs	r1, #2
 800d112:	f001 f991 	bl	800e438 <uxr_stream_id>
 800d116:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800d11a:	4601      	mov	r1, r0
 800d11c:	4620      	mov	r0, r4
 800d11e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d120:	f008 fc0c 	bl	801593c <uxr_update_output_stream_heartbeat_timestamp>
 800d124:	2800      	cmp	r0, #0
 800d126:	d0e0      	beq.n	800d0ea <listen_message_reliably+0x42>
 800d128:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800d12c:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800d130:	9305      	str	r3, [sp, #20]
 800d132:	4630      	mov	r0, r6
 800d134:	f000 fce4 	bl	800db00 <uxr_session_header_offset>
 800d138:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800d13c:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800d140:	9000      	str	r0, [sp, #0]
 800d142:	a90e      	add	r1, sp, #56	@ 0x38
 800d144:	4640      	mov	r0, r8
 800d146:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800d14a:	2300      	movs	r3, #0
 800d14c:	2211      	movs	r2, #17
 800d14e:	f7fe ffab 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800d152:	2300      	movs	r3, #0
 800d154:	2205      	movs	r2, #5
 800d156:	210b      	movs	r1, #11
 800d158:	4640      	mov	r0, r8
 800d15a:	f001 fa89 	bl	800e670 <uxr_buffer_submessage_header>
 800d15e:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800d162:	2101      	movs	r1, #1
 800d164:	f008 fde2 	bl	8015d2c <uxr_seq_num_add>
 800d168:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800d16c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800d170:	4602      	mov	r2, r0
 800d172:	9b05      	ldr	r3, [sp, #20]
 800d174:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800d178:	a90c      	add	r1, sp, #48	@ 0x30
 800d17a:	4640      	mov	r0, r8
 800d17c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d180:	f002 fc4a 	bl	800fa18 <uxr_serialize_HEARTBEAT_Payload>
 800d184:	2200      	movs	r2, #0
 800d186:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d188:	4611      	mov	r1, r2
 800d18a:	4630      	mov	r0, r6
 800d18c:	f000 fc64 	bl	800da58 <uxr_stamp_session_header>
 800d190:	4640      	mov	r0, r8
 800d192:	f7fe ffc7 	bl	800c124 <ucdr_buffer_length>
 800d196:	4602      	mov	r2, r0
 800d198:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800d19a:	a90e      	add	r1, sp, #56	@ 0x38
 800d19c:	e9d0 0300 	ldrd	r0, r3, [r0]
 800d1a0:	4798      	blx	r3
 800d1a2:	e7a2      	b.n	800d0ea <listen_message_reliably+0x42>
 800d1a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d1a8:	4599      	cmp	r9, r3
 800d1aa:	bf08      	it	eq
 800d1ac:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 800d1b0:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800d1b4:	d032      	beq.n	800d21c <listen_message_reliably+0x174>
 800d1b6:	9b03      	ldr	r3, [sp, #12]
 800d1b8:	1aff      	subs	r7, r7, r3
 800d1ba:	2f00      	cmp	r7, #0
 800d1bc:	bf08      	it	eq
 800d1be:	2701      	moveq	r7, #1
 800d1c0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800d1c2:	455f      	cmp	r7, fp
 800d1c4:	bfa8      	it	ge
 800d1c6:	465f      	movge	r7, fp
 800d1c8:	689c      	ldr	r4, [r3, #8]
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	4642      	mov	r2, r8
 800d1ce:	463b      	mov	r3, r7
 800d1d0:	4651      	mov	r1, sl
 800d1d2:	47a0      	blx	r4
 800d1d4:	ebab 0b07 	sub.w	fp, fp, r7
 800d1d8:	b958      	cbnz	r0, 800d1f2 <listen_message_reliably+0x14a>
 800d1da:	f1bb 0f00 	cmp.w	fp, #0
 800d1de:	dd44      	ble.n	800d26a <listen_message_reliably+0x1c2>
 800d1e0:	f001 fa8c 	bl	800e6fc <uxr_millis>
 800d1e4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d03c      	beq.n	800d266 <listen_message_reliably+0x1be>
 800d1ec:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800d1f0:	e770      	b.n	800d0d4 <listen_message_reliably+0x2c>
 800d1f2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	a80e      	add	r0, sp, #56	@ 0x38
 800d1fa:	f7fe ff67 	bl	800c0cc <ucdr_init_buffer>
 800d1fe:	2500      	movs	r5, #0
 800d200:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800d204:	aa08      	add	r2, sp, #32
 800d206:	a90e      	add	r1, sp, #56	@ 0x38
 800d208:	4630      	mov	r0, r6
 800d20a:	f88d 5020 	strb.w	r5, [sp, #32]
 800d20e:	f000 fc39 	bl	800da84 <uxr_read_session_header>
 800d212:	b928      	cbnz	r0, 800d220 <listen_message_reliably+0x178>
 800d214:	4620      	mov	r0, r4
 800d216:	b01f      	add	sp, #124	@ 0x7c
 800d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21c:	465f      	mov	r7, fp
 800d21e:	e7cc      	b.n	800d1ba <listen_message_reliably+0x112>
 800d220:	4629      	mov	r1, r5
 800d222:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800d226:	f001 f923 	bl	800e470 <uxr_stream_id_from_raw>
 800d22a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d22e:	2f01      	cmp	r7, #1
 800d230:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800d234:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800d238:	fa5f f880 	uxtb.w	r8, r0
 800d23c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800d240:	d050      	beq.n	800d2e4 <listen_message_reliably+0x23c>
 800d242:	2f02      	cmp	r7, #2
 800d244:	d016      	beq.n	800d274 <listen_message_reliably+0x1cc>
 800d246:	2f00      	cmp	r7, #0
 800d248:	d1e4      	bne.n	800d214 <listen_message_reliably+0x16c>
 800d24a:	4639      	mov	r1, r7
 800d24c:	4638      	mov	r0, r7
 800d24e:	f001 f90f 	bl	800e470 <uxr_stream_id_from_raw>
 800d252:	a90e      	add	r1, sp, #56	@ 0x38
 800d254:	4602      	mov	r2, r0
 800d256:	4630      	mov	r0, r6
 800d258:	920c      	str	r2, [sp, #48]	@ 0x30
 800d25a:	f7ff fdb5 	bl	800cdc8 <read_submessage_list>
 800d25e:	4620      	mov	r0, r4
 800d260:	b01f      	add	sp, #124	@ 0x7c
 800d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d266:	465f      	mov	r7, fp
 800d268:	e7aa      	b.n	800d1c0 <listen_message_reliably+0x118>
 800d26a:	4604      	mov	r4, r0
 800d26c:	4620      	mov	r0, r4
 800d26e:	b01f      	add	sp, #124	@ 0x7c
 800d270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d274:	4629      	mov	r1, r5
 800d276:	f106 0008 	add.w	r0, r6, #8
 800d27a:	f001 f9d9 	bl	800e630 <uxr_get_input_reliable_stream>
 800d27e:	4681      	mov	r9, r0
 800d280:	b338      	cbz	r0, 800d2d2 <listen_message_reliably+0x22a>
 800d282:	a80e      	add	r0, sp, #56	@ 0x38
 800d284:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800d288:	f7fe ff50 	bl	800c12c <ucdr_buffer_remaining>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800d292:	9000      	str	r0, [sp, #0]
 800d294:	465a      	mov	r2, fp
 800d296:	4651      	mov	r1, sl
 800d298:	4648      	mov	r0, r9
 800d29a:	f007 ff7b 	bl	8015194 <uxr_receive_reliable_message>
 800d29e:	b1c0      	cbz	r0, 800d2d2 <listen_message_reliably+0x22a>
 800d2a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800d2a4:	b393      	cbz	r3, 800d30c <listen_message_reliably+0x264>
 800d2a6:	af16      	add	r7, sp, #88	@ 0x58
 800d2a8:	f04f 0a02 	mov.w	sl, #2
 800d2ac:	e00a      	b.n	800d2c4 <listen_message_reliably+0x21c>
 800d2ae:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800d2b2:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800d2b6:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800d2ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2bc:	4639      	mov	r1, r7
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7ff fd82 	bl	800cdc8 <read_submessage_list>
 800d2c4:	2204      	movs	r2, #4
 800d2c6:	4639      	mov	r1, r7
 800d2c8:	4648      	mov	r0, r9
 800d2ca:	f007 ffdd 	bl	8015288 <uxr_next_input_reliable_buffer_available>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d1ed      	bne.n	800d2ae <listen_message_reliably+0x206>
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	462a      	mov	r2, r5
 800d2d6:	4641      	mov	r1, r8
 800d2d8:	f7ff fc1c 	bl	800cb14 <write_submessage_acknack.isra.0>
 800d2dc:	4620      	mov	r0, r4
 800d2de:	b01f      	add	sp, #124	@ 0x7c
 800d2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	f106 0008 	add.w	r0, r6, #8
 800d2ea:	f001 f997 	bl	800e61c <uxr_get_input_best_effort_stream>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d090      	beq.n	800d214 <listen_message_reliably+0x16c>
 800d2f2:	4651      	mov	r1, sl
 800d2f4:	f007 febe 	bl	8015074 <uxr_receive_best_effort_message>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d08b      	beq.n	800d214 <listen_message_reliably+0x16c>
 800d2fc:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d300:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d302:	a90e      	add	r1, sp, #56	@ 0x38
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff fd5f 	bl	800cdc8 <read_submessage_list>
 800d30a:	e783      	b.n	800d214 <listen_message_reliably+0x16c>
 800d30c:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d310:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d312:	a90e      	add	r1, sp, #56	@ 0x38
 800d314:	4630      	mov	r0, r6
 800d316:	f7ff fd57 	bl	800cdc8 <read_submessage_list>
 800d31a:	e7c4      	b.n	800d2a6 <listen_message_reliably+0x1fe>

0800d31c <uxr_run_session_timeout>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4604      	mov	r4, r0
 800d320:	460d      	mov	r5, r1
 800d322:	f001 f9eb 	bl	800e6fc <uxr_millis>
 800d326:	4606      	mov	r6, r0
 800d328:	4620      	mov	r0, r4
 800d32a:	f7ff fc99 	bl	800cc60 <uxr_flash_output_streams>
 800d32e:	4629      	mov	r1, r5
 800d330:	4620      	mov	r0, r4
 800d332:	f7ff feb9 	bl	800d0a8 <listen_message_reliably>
 800d336:	f001 f9e1 	bl	800e6fc <uxr_millis>
 800d33a:	1b81      	subs	r1, r0, r6
 800d33c:	1a69      	subs	r1, r5, r1
 800d33e:	2900      	cmp	r1, #0
 800d340:	dcf6      	bgt.n	800d330 <uxr_run_session_timeout+0x14>
 800d342:	f104 0008 	add.w	r0, r4, #8
 800d346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d34a:	f001 b97b 	b.w	800e644 <uxr_output_streams_confirmed>
 800d34e:	bf00      	nop

0800d350 <uxr_run_session_until_data>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	4604      	mov	r4, r0
 800d354:	460d      	mov	r5, r1
 800d356:	f001 f9d1 	bl	800e6fc <uxr_millis>
 800d35a:	4606      	mov	r6, r0
 800d35c:	4620      	mov	r0, r4
 800d35e:	f7ff fc7f 	bl	800cc60 <uxr_flash_output_streams>
 800d362:	2300      	movs	r3, #0
 800d364:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d368:	4629      	mov	r1, r5
 800d36a:	e005      	b.n	800d378 <uxr_run_session_until_data+0x28>
 800d36c:	f001 f9c6 	bl	800e6fc <uxr_millis>
 800d370:	1b81      	subs	r1, r0, r6
 800d372:	1a69      	subs	r1, r5, r1
 800d374:	2900      	cmp	r1, #0
 800d376:	dd07      	ble.n	800d388 <uxr_run_session_until_data+0x38>
 800d378:	4620      	mov	r0, r4
 800d37a:	f7ff fe95 	bl	800d0a8 <listen_message_reliably>
 800d37e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d382:	2800      	cmp	r0, #0
 800d384:	d0f2      	beq.n	800d36c <uxr_run_session_until_data+0x1c>
 800d386:	bd70      	pop	{r4, r5, r6, pc}
 800d388:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	bf00      	nop

0800d390 <uxr_run_session_until_confirm_delivery>:
 800d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d394:	4606      	mov	r6, r0
 800d396:	460d      	mov	r5, r1
 800d398:	f001 f9b0 	bl	800e6fc <uxr_millis>
 800d39c:	4607      	mov	r7, r0
 800d39e:	4630      	mov	r0, r6
 800d3a0:	f7ff fc5e 	bl	800cc60 <uxr_flash_output_streams>
 800d3a4:	2d00      	cmp	r5, #0
 800d3a6:	db16      	blt.n	800d3d6 <uxr_run_session_until_confirm_delivery+0x46>
 800d3a8:	462c      	mov	r4, r5
 800d3aa:	f106 0808 	add.w	r8, r6, #8
 800d3ae:	e008      	b.n	800d3c2 <uxr_run_session_until_confirm_delivery+0x32>
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f7ff fe78 	bl	800d0a8 <listen_message_reliably>
 800d3b8:	f001 f9a0 	bl	800e6fc <uxr_millis>
 800d3bc:	1bc1      	subs	r1, r0, r7
 800d3be:	1a6c      	subs	r4, r5, r1
 800d3c0:	d404      	bmi.n	800d3cc <uxr_run_session_until_confirm_delivery+0x3c>
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	f001 f93e 	bl	800e644 <uxr_output_streams_confirmed>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d0f1      	beq.n	800d3b0 <uxr_run_session_until_confirm_delivery+0x20>
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	f001 b937 	b.w	800e644 <uxr_output_streams_confirmed>
 800d3d6:	f106 0808 	add.w	r8, r6, #8
 800d3da:	e7f7      	b.n	800d3cc <uxr_run_session_until_confirm_delivery+0x3c>

0800d3dc <uxr_run_session_until_all_status>:
 800d3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3e0:	9c08      	ldr	r4, [sp, #32]
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	460f      	mov	r7, r1
 800d3e6:	4690      	mov	r8, r2
 800d3e8:	461e      	mov	r6, r3
 800d3ea:	f7ff fc39 	bl	800cc60 <uxr_flash_output_streams>
 800d3ee:	b124      	cbz	r4, 800d3fa <uxr_run_session_until_all_status+0x1e>
 800d3f0:	4622      	mov	r2, r4
 800d3f2:	21ff      	movs	r1, #255	@ 0xff
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f00a f8b9 	bl	801756c <memset>
 800d3fa:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800d3fe:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d400:	f001 f97c 	bl	800e6fc <uxr_millis>
 800d404:	4639      	mov	r1, r7
 800d406:	4681      	mov	r9, r0
 800d408:	4628      	mov	r0, r5
 800d40a:	f7ff fe4d 	bl	800d0a8 <listen_message_reliably>
 800d40e:	f001 f975 	bl	800e6fc <uxr_millis>
 800d412:	eba0 0109 	sub.w	r1, r0, r9
 800d416:	1a79      	subs	r1, r7, r1
 800d418:	b36c      	cbz	r4, 800d476 <uxr_run_session_until_all_status+0x9a>
 800d41a:	1e70      	subs	r0, r6, #1
 800d41c:	46c6      	mov	lr, r8
 800d41e:	1902      	adds	r2, r0, r4
 800d420:	4684      	mov	ip, r0
 800d422:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d426:	2bff      	cmp	r3, #255	@ 0xff
 800d428:	d007      	beq.n	800d43a <uxr_run_session_until_all_status+0x5e>
 800d42a:	4594      	cmp	ip, r2
 800d42c:	d00f      	beq.n	800d44e <uxr_run_session_until_all_status+0x72>
 800d42e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d432:	2bff      	cmp	r3, #255	@ 0xff
 800d434:	f10e 0e02 	add.w	lr, lr, #2
 800d438:	d1f7      	bne.n	800d42a <uxr_run_session_until_all_status+0x4e>
 800d43a:	4594      	cmp	ip, r2
 800d43c:	f8be 3000 	ldrh.w	r3, [lr]
 800d440:	d014      	beq.n	800d46c <uxr_run_session_until_all_status+0x90>
 800d442:	f10e 0e02 	add.w	lr, lr, #2
 800d446:	2b00      	cmp	r3, #0
 800d448:	d0eb      	beq.n	800d422 <uxr_run_session_until_all_status+0x46>
 800d44a:	2900      	cmp	r1, #0
 800d44c:	dcdc      	bgt.n	800d408 <uxr_run_session_until_all_status+0x2c>
 800d44e:	2300      	movs	r3, #0
 800d450:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800d452:	e001      	b.n	800d458 <uxr_run_session_until_all_status+0x7c>
 800d454:	2b01      	cmp	r3, #1
 800d456:	d812      	bhi.n	800d47e <uxr_run_session_until_all_status+0xa2>
 800d458:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d45c:	4290      	cmp	r0, r2
 800d45e:	d1f9      	bne.n	800d454 <uxr_run_session_until_all_status+0x78>
 800d460:	2b01      	cmp	r3, #1
 800d462:	bf8c      	ite	hi
 800d464:	2000      	movhi	r0, #0
 800d466:	2001      	movls	r0, #1
 800d468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46c:	2900      	cmp	r1, #0
 800d46e:	ddee      	ble.n	800d44e <uxr_run_session_until_all_status+0x72>
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1c9      	bne.n	800d408 <uxr_run_session_until_all_status+0x2c>
 800d474:	e7eb      	b.n	800d44e <uxr_run_session_until_all_status+0x72>
 800d476:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d478:	2001      	movs	r0, #1
 800d47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d47e:	2000      	movs	r0, #0
 800d480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d484 <uxr_run_session_until_pong>:
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	4604      	mov	r4, r0
 800d488:	460d      	mov	r5, r1
 800d48a:	f001 f937 	bl	800e6fc <uxr_millis>
 800d48e:	4606      	mov	r6, r0
 800d490:	4620      	mov	r0, r4
 800d492:	f7ff fbe5 	bl	800cc60 <uxr_flash_output_streams>
 800d496:	2300      	movs	r3, #0
 800d498:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 800d49c:	4629      	mov	r1, r5
 800d49e:	e005      	b.n	800d4ac <uxr_run_session_until_pong+0x28>
 800d4a0:	f001 f92c 	bl	800e6fc <uxr_millis>
 800d4a4:	1b81      	subs	r1, r0, r6
 800d4a6:	1a69      	subs	r1, r5, r1
 800d4a8:	2900      	cmp	r1, #0
 800d4aa:	dd0c      	ble.n	800d4c6 <uxr_run_session_until_pong+0x42>
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f7ff fdfb 	bl	800d0a8 <listen_message_reliably>
 800d4b2:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d0f2      	beq.n	800d4a0 <uxr_run_session_until_pong+0x1c>
 800d4ba:	f1a0 0001 	sub.w	r0, r0, #1
 800d4be:	fab0 f080 	clz	r0, r0
 800d4c2:	0940      	lsrs	r0, r0, #5
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800d4ca:	f1a0 0001 	sub.w	r0, r0, #1
 800d4ce:	fab0 f080 	clz	r0, r0
 800d4d2:	0940      	lsrs	r0, r0, #5
 800d4d4:	bd70      	pop	{r4, r5, r6, pc}
 800d4d6:	bf00      	nop

0800d4d8 <wait_session_status>:
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	4604      	mov	r4, r0
 800d4de:	20ff      	movs	r0, #255	@ 0xff
 800d4e0:	b09f      	sub	sp, #124	@ 0x7c
 800d4e2:	7160      	strb	r0, [r4, #5]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f000 80bb 	beq.w	800d660 <wait_session_status+0x188>
 800d4ea:	4692      	mov	sl, r2
 800d4ec:	469b      	mov	fp, r3
 800d4ee:	f04f 0800 	mov.w	r8, #0
 800d4f2:	9105      	str	r1, [sp, #20]
 800d4f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d4f6:	9905      	ldr	r1, [sp, #20]
 800d4f8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	47a8      	blx	r5
 800d500:	f001 f8fc 	bl	800e6fc <uxr_millis>
 800d504:	2700      	movs	r7, #0
 800d506:	4605      	mov	r5, r0
 800d508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d50c:	e009      	b.n	800d522 <wait_session_status+0x4a>
 800d50e:	f001 f8f5 	bl	800e6fc <uxr_millis>
 800d512:	1b43      	subs	r3, r0, r5
 800d514:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d518:	2b00      	cmp	r3, #0
 800d51a:	7962      	ldrb	r2, [r4, #5]
 800d51c:	dd3d      	ble.n	800d59a <wait_session_status+0xc2>
 800d51e:	2aff      	cmp	r2, #255	@ 0xff
 800d520:	d13b      	bne.n	800d59a <wait_session_status+0xc2>
 800d522:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d524:	a90a      	add	r1, sp, #40	@ 0x28
 800d526:	6896      	ldr	r6, [r2, #8]
 800d528:	6810      	ldr	r0, [r2, #0]
 800d52a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d52c:	47b0      	blx	r6
 800d52e:	2800      	cmp	r0, #0
 800d530:	d0ed      	beq.n	800d50e <wait_session_status+0x36>
 800d532:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800d536:	a80e      	add	r0, sp, #56	@ 0x38
 800d538:	f7fe fdc8 	bl	800c0cc <ucdr_init_buffer>
 800d53c:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800d540:	aa09      	add	r2, sp, #36	@ 0x24
 800d542:	a90e      	add	r1, sp, #56	@ 0x38
 800d544:	4620      	mov	r0, r4
 800d546:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800d54a:	f000 fa9b 	bl	800da84 <uxr_read_session_header>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d0dd      	beq.n	800d50e <wait_session_status+0x36>
 800d552:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800d556:	2100      	movs	r1, #0
 800d558:	f000 ff8a 	bl	800e470 <uxr_stream_id_from_raw>
 800d55c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800d560:	9304      	str	r3, [sp, #16]
 800d562:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d566:	b2c3      	uxtb	r3, r0
 800d568:	f1b9 0f01 	cmp.w	r9, #1
 800d56c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800d570:	9303      	str	r3, [sp, #12]
 800d572:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d576:	d05d      	beq.n	800d634 <wait_session_status+0x15c>
 800d578:	f1b9 0f02 	cmp.w	r9, #2
 800d57c:	d01a      	beq.n	800d5b4 <wait_session_status+0xdc>
 800d57e:	f1b9 0f00 	cmp.w	r9, #0
 800d582:	d1c4      	bne.n	800d50e <wait_session_status+0x36>
 800d584:	4649      	mov	r1, r9
 800d586:	4648      	mov	r0, r9
 800d588:	f000 ff72 	bl	800e470 <uxr_stream_id_from_raw>
 800d58c:	a90e      	add	r1, sp, #56	@ 0x38
 800d58e:	4602      	mov	r2, r0
 800d590:	900d      	str	r0, [sp, #52]	@ 0x34
 800d592:	4620      	mov	r0, r4
 800d594:	f7ff fc18 	bl	800cdc8 <read_submessage_list>
 800d598:	e7b9      	b.n	800d50e <wait_session_status+0x36>
 800d59a:	f108 0801 	add.w	r8, r8, #1
 800d59e:	45c3      	cmp	fp, r8
 800d5a0:	d001      	beq.n	800d5a6 <wait_session_status+0xce>
 800d5a2:	2aff      	cmp	r2, #255	@ 0xff
 800d5a4:	d0a6      	beq.n	800d4f4 <wait_session_status+0x1c>
 800d5a6:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800d5aa:	bf18      	it	ne
 800d5ac:	2001      	movne	r0, #1
 800d5ae:	b01f      	add	sp, #124	@ 0x7c
 800d5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b4:	4631      	mov	r1, r6
 800d5b6:	f104 0008 	add.w	r0, r4, #8
 800d5ba:	f001 f839 	bl	800e630 <uxr_get_input_reliable_stream>
 800d5be:	9006      	str	r0, [sp, #24]
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d031      	beq.n	800d628 <wait_session_status+0x150>
 800d5c4:	aa0e      	add	r2, sp, #56	@ 0x38
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d5ca:	9207      	str	r2, [sp, #28]
 800d5cc:	f7fe fdae 	bl	800c12c <ucdr_buffer_remaining>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800d5d6:	9000      	str	r0, [sp, #0]
 800d5d8:	9a07      	ldr	r2, [sp, #28]
 800d5da:	9904      	ldr	r1, [sp, #16]
 800d5dc:	9806      	ldr	r0, [sp, #24]
 800d5de:	f007 fdd9 	bl	8015194 <uxr_receive_reliable_message>
 800d5e2:	b308      	cbz	r0, 800d628 <wait_session_status+0x150>
 800d5e4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d041      	beq.n	800d670 <wait_session_status+0x198>
 800d5ec:	f8cd 8010 	str.w	r8, [sp, #16]
 800d5f0:	9507      	str	r5, [sp, #28]
 800d5f2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d5f6:	9d06      	ldr	r5, [sp, #24]
 800d5f8:	f04f 0902 	mov.w	r9, #2
 800d5fc:	e00a      	b.n	800d614 <wait_session_status+0x13c>
 800d5fe:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800d602:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800d606:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d60a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d60c:	a916      	add	r1, sp, #88	@ 0x58
 800d60e:	4620      	mov	r0, r4
 800d610:	f7ff fbda 	bl	800cdc8 <read_submessage_list>
 800d614:	2204      	movs	r2, #4
 800d616:	a916      	add	r1, sp, #88	@ 0x58
 800d618:	4628      	mov	r0, r5
 800d61a:	f007 fe35 	bl	8015288 <uxr_next_input_reliable_buffer_available>
 800d61e:	2800      	cmp	r0, #0
 800d620:	d1ed      	bne.n	800d5fe <wait_session_status+0x126>
 800d622:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d626:	9d07      	ldr	r5, [sp, #28]
 800d628:	9903      	ldr	r1, [sp, #12]
 800d62a:	4632      	mov	r2, r6
 800d62c:	4620      	mov	r0, r4
 800d62e:	f7ff fa71 	bl	800cb14 <write_submessage_acknack.isra.0>
 800d632:	e76c      	b.n	800d50e <wait_session_status+0x36>
 800d634:	4631      	mov	r1, r6
 800d636:	f104 0008 	add.w	r0, r4, #8
 800d63a:	f000 ffef 	bl	800e61c <uxr_get_input_best_effort_stream>
 800d63e:	2800      	cmp	r0, #0
 800d640:	f43f af65 	beq.w	800d50e <wait_session_status+0x36>
 800d644:	9904      	ldr	r1, [sp, #16]
 800d646:	f007 fd15 	bl	8015074 <uxr_receive_best_effort_message>
 800d64a:	2800      	cmp	r0, #0
 800d64c:	f43f af5f 	beq.w	800d50e <wait_session_status+0x36>
 800d650:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d654:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d656:	a90e      	add	r1, sp, #56	@ 0x38
 800d658:	4620      	mov	r0, r4
 800d65a:	f7ff fbb5 	bl	800cdc8 <read_submessage_list>
 800d65e:	e756      	b.n	800d50e <wait_session_status+0x36>
 800d660:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d662:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d666:	47a0      	blx	r4
 800d668:	2001      	movs	r0, #1
 800d66a:	b01f      	add	sp, #124	@ 0x7c
 800d66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d670:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d674:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d676:	a90e      	add	r1, sp, #56	@ 0x38
 800d678:	4620      	mov	r0, r4
 800d67a:	f7ff fba5 	bl	800cdc8 <read_submessage_list>
 800d67e:	e7b5      	b.n	800d5ec <wait_session_status+0x114>

0800d680 <uxr_delete_session_retries>:
 800d680:	b530      	push	{r4, r5, lr}
 800d682:	b08f      	sub	sp, #60	@ 0x3c
 800d684:	4604      	mov	r4, r0
 800d686:	460d      	mov	r5, r1
 800d688:	f000 fa3a 	bl	800db00 <uxr_session_header_offset>
 800d68c:	2300      	movs	r3, #0
 800d68e:	2210      	movs	r2, #16
 800d690:	9000      	str	r0, [sp, #0]
 800d692:	a902      	add	r1, sp, #8
 800d694:	a806      	add	r0, sp, #24
 800d696:	f7fe fd07 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800d69a:	a906      	add	r1, sp, #24
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 f981 	bl	800d9a4 <uxr_buffer_delete_session>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	9b06      	ldr	r3, [sp, #24]
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f000 f9d5 	bl	800da58 <uxr_stamp_session_header>
 800d6ae:	a806      	add	r0, sp, #24
 800d6b0:	f7fe fd38 	bl	800c124 <ucdr_buffer_length>
 800d6b4:	462b      	mov	r3, r5
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	a902      	add	r1, sp, #8
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f7ff ff0c 	bl	800d4d8 <wait_session_status>
 800d6c0:	b118      	cbz	r0, 800d6ca <uxr_delete_session_retries+0x4a>
 800d6c2:	7960      	ldrb	r0, [r4, #5]
 800d6c4:	fab0 f080 	clz	r0, r0
 800d6c8:	0940      	lsrs	r0, r0, #5
 800d6ca:	b00f      	add	sp, #60	@ 0x3c
 800d6cc:	bd30      	pop	{r4, r5, pc}
 800d6ce:	bf00      	nop

0800d6d0 <uxr_create_session>:
 800d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d4:	f100 0308 	add.w	r3, r0, #8
 800d6d8:	b0ab      	sub	sp, #172	@ 0xac
 800d6da:	4604      	mov	r4, r0
 800d6dc:	4618      	mov	r0, r3
 800d6de:	9303      	str	r3, [sp, #12]
 800d6e0:	f000 feec 	bl	800e4bc <uxr_reset_stream_storage>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fa0b 	bl	800db00 <uxr_session_header_offset>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	9000      	str	r0, [sp, #0]
 800d6ee:	221c      	movs	r2, #28
 800d6f0:	a90b      	add	r1, sp, #44	@ 0x2c
 800d6f2:	a812      	add	r0, sp, #72	@ 0x48
 800d6f4:	f7fe fcd8 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800d6f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d6fa:	8a1a      	ldrh	r2, [r3, #16]
 800d6fc:	3a04      	subs	r2, #4
 800d6fe:	b292      	uxth	r2, r2
 800d700:	a912      	add	r1, sp, #72	@ 0x48
 800d702:	4620      	mov	r0, r4
 800d704:	f000 f924 	bl	800d950 <uxr_buffer_create_session>
 800d708:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d70a:	4620      	mov	r0, r4
 800d70c:	f000 f990 	bl	800da30 <uxr_stamp_create_session_header>
 800d710:	a812      	add	r0, sp, #72	@ 0x48
 800d712:	f7fe fd07 	bl	800c124 <ucdr_buffer_length>
 800d716:	23ff      	movs	r3, #255	@ 0xff
 800d718:	4683      	mov	fp, r0
 800d71a:	7163      	strb	r3, [r4, #5]
 800d71c:	f04f 080a 	mov.w	r8, #10
 800d720:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d722:	465a      	mov	r2, fp
 800d724:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d728:	a90b      	add	r1, sp, #44	@ 0x2c
 800d72a:	47a8      	blx	r5
 800d72c:	f000 ffe6 	bl	800e6fc <uxr_millis>
 800d730:	2700      	movs	r7, #0
 800d732:	4605      	mov	r5, r0
 800d734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d738:	e009      	b.n	800d74e <uxr_create_session+0x7e>
 800d73a:	f000 ffdf 	bl	800e6fc <uxr_millis>
 800d73e:	1b43      	subs	r3, r0, r5
 800d740:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d744:	2b00      	cmp	r3, #0
 800d746:	7962      	ldrb	r2, [r4, #5]
 800d748:	dd3d      	ble.n	800d7c6 <uxr_create_session+0xf6>
 800d74a:	2aff      	cmp	r2, #255	@ 0xff
 800d74c:	d13b      	bne.n	800d7c6 <uxr_create_session+0xf6>
 800d74e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d750:	a907      	add	r1, sp, #28
 800d752:	6896      	ldr	r6, [r2, #8]
 800d754:	6810      	ldr	r0, [r2, #0]
 800d756:	aa08      	add	r2, sp, #32
 800d758:	47b0      	blx	r6
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d0ed      	beq.n	800d73a <uxr_create_session+0x6a>
 800d75e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d762:	a81a      	add	r0, sp, #104	@ 0x68
 800d764:	f7fe fcb2 	bl	800c0cc <ucdr_init_buffer>
 800d768:	f10d 031a 	add.w	r3, sp, #26
 800d76c:	aa06      	add	r2, sp, #24
 800d76e:	a91a      	add	r1, sp, #104	@ 0x68
 800d770:	4620      	mov	r0, r4
 800d772:	f88d 7018 	strb.w	r7, [sp, #24]
 800d776:	f000 f985 	bl	800da84 <uxr_read_session_header>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d0dd      	beq.n	800d73a <uxr_create_session+0x6a>
 800d77e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d782:	2100      	movs	r1, #0
 800d784:	f000 fe74 	bl	800e470 <uxr_stream_id_from_raw>
 800d788:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d78c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d790:	9302      	str	r3, [sp, #8]
 800d792:	f1b9 0f01 	cmp.w	r9, #1
 800d796:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d79a:	fa5f fa80 	uxtb.w	sl, r0
 800d79e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d7a2:	d056      	beq.n	800d852 <uxr_create_session+0x182>
 800d7a4:	f1b9 0f02 	cmp.w	r9, #2
 800d7a8:	d018      	beq.n	800d7dc <uxr_create_session+0x10c>
 800d7aa:	f1b9 0f00 	cmp.w	r9, #0
 800d7ae:	d1c4      	bne.n	800d73a <uxr_create_session+0x6a>
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	f000 fe5c 	bl	800e470 <uxr_stream_id_from_raw>
 800d7b8:	a91a      	add	r1, sp, #104	@ 0x68
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f7ff fb02 	bl	800cdc8 <read_submessage_list>
 800d7c4:	e7b9      	b.n	800d73a <uxr_create_session+0x6a>
 800d7c6:	f1b8 0801 	subs.w	r8, r8, #1
 800d7ca:	d001      	beq.n	800d7d0 <uxr_create_session+0x100>
 800d7cc:	2aff      	cmp	r2, #255	@ 0xff
 800d7ce:	d0a7      	beq.n	800d720 <uxr_create_session+0x50>
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	d05b      	beq.n	800d88c <uxr_create_session+0x1bc>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	b02b      	add	sp, #172	@ 0xac
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	9803      	ldr	r0, [sp, #12]
 800d7de:	4631      	mov	r1, r6
 800d7e0:	f000 ff26 	bl	800e630 <uxr_get_input_reliable_stream>
 800d7e4:	9004      	str	r0, [sp, #16]
 800d7e6:	b370      	cbz	r0, 800d846 <uxr_create_session+0x176>
 800d7e8:	aa1a      	add	r2, sp, #104	@ 0x68
 800d7ea:	4610      	mov	r0, r2
 800d7ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d7ee:	9205      	str	r2, [sp, #20]
 800d7f0:	f7fe fc9c 	bl	800c12c <ucdr_buffer_remaining>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	f10d 0019 	add.w	r0, sp, #25
 800d7fa:	9000      	str	r0, [sp, #0]
 800d7fc:	9a05      	ldr	r2, [sp, #20]
 800d7fe:	9902      	ldr	r1, [sp, #8]
 800d800:	9804      	ldr	r0, [sp, #16]
 800d802:	f007 fcc7 	bl	8015194 <uxr_receive_reliable_message>
 800d806:	b1f0      	cbz	r0, 800d846 <uxr_create_session+0x176>
 800d808:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d035      	beq.n	800d87c <uxr_create_session+0x1ac>
 800d810:	f8cd b008 	str.w	fp, [sp, #8]
 800d814:	f04f 0902 	mov.w	r9, #2
 800d818:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d81c:	e00a      	b.n	800d834 <uxr_create_session+0x164>
 800d81e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800d822:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d826:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d82a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d82c:	a922      	add	r1, sp, #136	@ 0x88
 800d82e:	4620      	mov	r0, r4
 800d830:	f7ff faca 	bl	800cdc8 <read_submessage_list>
 800d834:	2204      	movs	r2, #4
 800d836:	a922      	add	r1, sp, #136	@ 0x88
 800d838:	4658      	mov	r0, fp
 800d83a:	f007 fd25 	bl	8015288 <uxr_next_input_reliable_buffer_available>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d1ed      	bne.n	800d81e <uxr_create_session+0x14e>
 800d842:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d846:	4632      	mov	r2, r6
 800d848:	4651      	mov	r1, sl
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7ff f962 	bl	800cb14 <write_submessage_acknack.isra.0>
 800d850:	e773      	b.n	800d73a <uxr_create_session+0x6a>
 800d852:	9803      	ldr	r0, [sp, #12]
 800d854:	4631      	mov	r1, r6
 800d856:	f000 fee1 	bl	800e61c <uxr_get_input_best_effort_stream>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	f43f af6d 	beq.w	800d73a <uxr_create_session+0x6a>
 800d860:	9902      	ldr	r1, [sp, #8]
 800d862:	f007 fc07 	bl	8015074 <uxr_receive_best_effort_message>
 800d866:	2800      	cmp	r0, #0
 800d868:	f43f af67 	beq.w	800d73a <uxr_create_session+0x6a>
 800d86c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d870:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d872:	a91a      	add	r1, sp, #104	@ 0x68
 800d874:	4620      	mov	r0, r4
 800d876:	f7ff faa7 	bl	800cdc8 <read_submessage_list>
 800d87a:	e75e      	b.n	800d73a <uxr_create_session+0x6a>
 800d87c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d880:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d882:	a91a      	add	r1, sp, #104	@ 0x68
 800d884:	4620      	mov	r0, r4
 800d886:	f7ff fa9f 	bl	800cdc8 <read_submessage_list>
 800d88a:	e7c1      	b.n	800d810 <uxr_create_session+0x140>
 800d88c:	9803      	ldr	r0, [sp, #12]
 800d88e:	f000 fe15 	bl	800e4bc <uxr_reset_stream_storage>
 800d892:	2001      	movs	r0, #1
 800d894:	b02b      	add	sp, #172	@ 0xac
 800d896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89a:	bf00      	nop

0800d89c <uxr_prepare_stream_to_write_submessage>:
 800d89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	4614      	mov	r4, r2
 800d8a8:	9101      	str	r1, [sp, #4]
 800d8aa:	461f      	mov	r7, r3
 800d8ac:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800d8b0:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800d8b4:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800d8b8:	f000 ff1a 	bl	800e6f0 <uxr_submessage_padding>
 800d8bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8c0:	1d21      	adds	r1, r4, #4
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	eb01 0a00 	add.w	sl, r1, r0
 800d8c8:	d012      	beq.n	800d8f0 <uxr_prepare_stream_to_write_submessage+0x54>
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d003      	beq.n	800d8d6 <uxr_prepare_stream_to_write_submessage+0x3a>
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	b002      	add	sp, #8
 800d8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	f106 0008 	add.w	r0, r6, #8
 800d8dc:	f000 fe94 	bl	800e608 <uxr_get_output_reliable_stream>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d0f4      	beq.n	800d8ce <uxr_prepare_stream_to_write_submessage+0x32>
 800d8e4:	4651      	mov	r1, sl
 800d8e6:	463a      	mov	r2, r7
 800d8e8:	f007 fe84 	bl	80155f4 <uxr_prepare_reliable_buffer_to_write>
 800d8ec:	b968      	cbnz	r0, 800d90a <uxr_prepare_stream_to_write_submessage+0x6e>
 800d8ee:	e7ee      	b.n	800d8ce <uxr_prepare_stream_to_write_submessage+0x32>
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f106 0008 	add.w	r0, r6, #8
 800d8f6:	f000 fe7f 	bl	800e5f8 <uxr_get_output_best_effort_stream>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d0e7      	beq.n	800d8ce <uxr_prepare_stream_to_write_submessage+0x32>
 800d8fe:	4651      	mov	r1, sl
 800d900:	463a      	mov	r2, r7
 800d902:	f007 fda9 	bl	8015458 <uxr_prepare_best_effort_buffer_to_write>
 800d906:	2800      	cmp	r0, #0
 800d908:	d0e1      	beq.n	800d8ce <uxr_prepare_stream_to_write_submessage+0x32>
 800d90a:	464b      	mov	r3, r9
 800d90c:	b2a2      	uxth	r2, r4
 800d90e:	4641      	mov	r1, r8
 800d910:	4638      	mov	r0, r7
 800d912:	f000 fead 	bl	800e670 <uxr_buffer_submessage_header>
 800d916:	2001      	movs	r0, #1
 800d918:	b002      	add	sp, #8
 800d91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91e:	bf00      	nop

0800d920 <uxr_init_session_info>:
 800d920:	2300      	movs	r3, #0
 800d922:	f361 0307 	bfi	r3, r1, #0, #8
 800d926:	0e11      	lsrs	r1, r2, #24
 800d928:	f361 230f 	bfi	r3, r1, #8, #8
 800d92c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800d930:	f361 4317 	bfi	r3, r1, #16, #8
 800d934:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d938:	f361 631f 	bfi	r3, r1, #24, #8
 800d93c:	f04f 0c09 	mov.w	ip, #9
 800d940:	21ff      	movs	r1, #255	@ 0xff
 800d942:	6003      	str	r3, [r0, #0]
 800d944:	7102      	strb	r2, [r0, #4]
 800d946:	f8a0 c006 	strh.w	ip, [r0, #6]
 800d94a:	7141      	strb	r1, [r0, #5]
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop

0800d950 <uxr_buffer_create_session>:
 800d950:	b530      	push	{r4, r5, lr}
 800d952:	4d13      	ldr	r5, [pc, #76]	@ (800d9a0 <uxr_buffer_create_session+0x50>)
 800d954:	b089      	sub	sp, #36	@ 0x24
 800d956:	2300      	movs	r3, #0
 800d958:	9307      	str	r3, [sp, #28]
 800d95a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d95e:	682a      	ldr	r2, [r5, #0]
 800d960:	9200      	str	r2, [sp, #0]
 800d962:	460c      	mov	r4, r1
 800d964:	2201      	movs	r2, #1
 800d966:	88a9      	ldrh	r1, [r5, #4]
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	80c2      	strh	r2, [r0, #6]
 800d96c:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d970:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800d974:	7800      	ldrb	r0, [r0, #0]
 800d976:	9303      	str	r3, [sp, #12]
 800d978:	f88d 2004 	strb.w	r2, [sp, #4]
 800d97c:	9102      	str	r1, [sp, #8]
 800d97e:	2210      	movs	r2, #16
 800d980:	4619      	mov	r1, r3
 800d982:	f88d 000c 	strb.w	r0, [sp, #12]
 800d986:	4620      	mov	r0, r4
 800d988:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d98c:	9306      	str	r3, [sp, #24]
 800d98e:	f000 fe6f 	bl	800e670 <uxr_buffer_submessage_header>
 800d992:	4669      	mov	r1, sp
 800d994:	4620      	mov	r0, r4
 800d996:	f001 fe8f 	bl	800f6b8 <uxr_serialize_CREATE_CLIENT_Payload>
 800d99a:	b009      	add	sp, #36	@ 0x24
 800d99c:	bd30      	pop	{r4, r5, pc}
 800d99e:	bf00      	nop
 800d9a0:	08018430 	.word	0x08018430

0800d9a4 <uxr_buffer_delete_session>:
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d9d8 <uxr_buffer_delete_session+0x34>)
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	8911      	ldrh	r1, [r2, #8]
 800d9b0:	80c3      	strh	r3, [r0, #6]
 800d9b2:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	2204      	movs	r2, #4
 800d9ba:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d9be:	4620      	mov	r0, r4
 800d9c0:	2103      	movs	r1, #3
 800d9c2:	f8ad c004 	strh.w	ip, [sp, #4]
 800d9c6:	f000 fe53 	bl	800e670 <uxr_buffer_submessage_header>
 800d9ca:	a901      	add	r1, sp, #4
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f001 ff2b 	bl	800f828 <uxr_serialize_DELETE_Payload>
 800d9d2:	b002      	add	sp, #8
 800d9d4:	bd10      	pop	{r4, pc}
 800d9d6:	bf00      	nop
 800d9d8:	08018430 	.word	0x08018430

0800d9dc <uxr_read_create_session_status>:
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	460b      	mov	r3, r1
 800d9e0:	b088      	sub	sp, #32
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	a901      	add	r1, sp, #4
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f001 ff2e 	bl	800f848 <uxr_deserialize_STATUS_AGENT_Payload>
 800d9ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9f0:	7163      	strb	r3, [r4, #5]
 800d9f2:	b008      	add	sp, #32
 800d9f4:	bd10      	pop	{r4, pc}
 800d9f6:	bf00      	nop

0800d9f8 <uxr_read_delete_session_status>:
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	4604      	mov	r4, r0
 800da00:	4669      	mov	r1, sp
 800da02:	4618      	mov	r0, r3
 800da04:	f001 ff50 	bl	800f8a8 <uxr_deserialize_STATUS_Payload>
 800da08:	88e3      	ldrh	r3, [r4, #6]
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d001      	beq.n	800da12 <uxr_read_delete_session_status+0x1a>
 800da0e:	b002      	add	sp, #8
 800da10:	bd10      	pop	{r4, pc}
 800da12:	f10d 0002 	add.w	r0, sp, #2
 800da16:	f7fe fefb 	bl	800c810 <uxr_object_id_from_raw>
 800da1a:	f8bd 3000 	ldrh.w	r3, [sp]
 800da1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da26:	bf08      	it	eq
 800da28:	7162      	strbeq	r2, [r4, #5]
 800da2a:	b002      	add	sp, #8
 800da2c:	bd10      	pop	{r4, pc}
 800da2e:	bf00      	nop

0800da30 <uxr_stamp_create_session_header>:
 800da30:	b510      	push	{r4, lr}
 800da32:	2208      	movs	r2, #8
 800da34:	b08a      	sub	sp, #40	@ 0x28
 800da36:	4604      	mov	r4, r0
 800da38:	eb0d 0002 	add.w	r0, sp, r2
 800da3c:	f7fe fb46 	bl	800c0cc <ucdr_init_buffer>
 800da40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da44:	9400      	str	r4, [sp, #0]
 800da46:	2300      	movs	r3, #0
 800da48:	461a      	mov	r2, r3
 800da4a:	a802      	add	r0, sp, #8
 800da4c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800da50:	f001 f80c 	bl	800ea6c <uxr_serialize_message_header>
 800da54:	b00a      	add	sp, #40	@ 0x28
 800da56:	bd10      	pop	{r4, pc}

0800da58 <uxr_stamp_session_header>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	4604      	mov	r4, r0
 800da5c:	b08a      	sub	sp, #40	@ 0x28
 800da5e:	4616      	mov	r6, r2
 800da60:	2208      	movs	r2, #8
 800da62:	eb0d 0002 	add.w	r0, sp, r2
 800da66:	460d      	mov	r5, r1
 800da68:	4619      	mov	r1, r3
 800da6a:	f7fe fb2f 	bl	800c0cc <ucdr_init_buffer>
 800da6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da72:	9400      	str	r4, [sp, #0]
 800da74:	4633      	mov	r3, r6
 800da76:	462a      	mov	r2, r5
 800da78:	a802      	add	r0, sp, #8
 800da7a:	f000 fff7 	bl	800ea6c <uxr_serialize_message_header>
 800da7e:	b00a      	add	sp, #40	@ 0x28
 800da80:	bd70      	pop	{r4, r5, r6, pc}
 800da82:	bf00      	nop

0800da84 <uxr_read_session_header>:
 800da84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da86:	4607      	mov	r7, r0
 800da88:	b085      	sub	sp, #20
 800da8a:	4608      	mov	r0, r1
 800da8c:	460c      	mov	r4, r1
 800da8e:	4615      	mov	r5, r2
 800da90:	461e      	mov	r6, r3
 800da92:	f7fe fb4b 	bl	800c12c <ucdr_buffer_remaining>
 800da96:	2808      	cmp	r0, #8
 800da98:	d802      	bhi.n	800daa0 <uxr_read_session_header+0x1c>
 800da9a:	2000      	movs	r0, #0
 800da9c:	b005      	add	sp, #20
 800da9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daa0:	ab03      	add	r3, sp, #12
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	462a      	mov	r2, r5
 800daa6:	4633      	mov	r3, r6
 800daa8:	f10d 010b 	add.w	r1, sp, #11
 800daac:	4620      	mov	r0, r4
 800daae:	f000 fffb 	bl	800eaa8 <uxr_deserialize_message_header>
 800dab2:	783a      	ldrb	r2, [r7, #0]
 800dab4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dab8:	4293      	cmp	r3, r2
 800daba:	d1ee      	bne.n	800da9a <uxr_read_session_header+0x16>
 800dabc:	061b      	lsls	r3, r3, #24
 800dabe:	d41c      	bmi.n	800dafa <uxr_read_session_header+0x76>
 800dac0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dac4:	787b      	ldrb	r3, [r7, #1]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d003      	beq.n	800dad2 <uxr_read_session_header+0x4e>
 800daca:	2001      	movs	r0, #1
 800dacc:	f080 0001 	eor.w	r0, r0, #1
 800dad0:	e7e4      	b.n	800da9c <uxr_read_session_header+0x18>
 800dad2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800dad6:	78bb      	ldrb	r3, [r7, #2]
 800dad8:	429a      	cmp	r2, r3
 800dada:	f107 0102 	add.w	r1, r7, #2
 800dade:	d1f4      	bne.n	800daca <uxr_read_session_header+0x46>
 800dae0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800dae4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dae8:	429a      	cmp	r2, r3
 800daea:	d1ee      	bne.n	800daca <uxr_read_session_header+0x46>
 800daec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800daf0:	784b      	ldrb	r3, [r1, #1]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d1e9      	bne.n	800daca <uxr_read_session_header+0x46>
 800daf6:	2000      	movs	r0, #0
 800daf8:	e7e8      	b.n	800dacc <uxr_read_session_header+0x48>
 800dafa:	2001      	movs	r0, #1
 800dafc:	e7ce      	b.n	800da9c <uxr_read_session_header+0x18>
 800dafe:	bf00      	nop

0800db00 <uxr_session_header_offset>:
 800db00:	f990 3000 	ldrsb.w	r3, [r0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	bfb4      	ite	lt
 800db08:	2004      	movlt	r0, #4
 800db0a:	2008      	movge	r0, #8
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop

0800db10 <uxr_init_base_object_request>:
 800db10:	b510      	push	{r4, lr}
 800db12:	88c3      	ldrh	r3, [r0, #6]
 800db14:	b082      	sub	sp, #8
 800db16:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800db1a:	9101      	str	r1, [sp, #4]
 800db1c:	f1a3 010a 	sub.w	r1, r3, #10
 800db20:	b289      	uxth	r1, r1
 800db22:	42a1      	cmp	r1, r4
 800db24:	d80e      	bhi.n	800db44 <uxr_init_base_object_request+0x34>
 800db26:	3301      	adds	r3, #1
 800db28:	b29c      	uxth	r4, r3
 800db2a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	80c4      	strh	r4, [r0, #6]
 800db32:	9801      	ldr	r0, [sp, #4]
 800db34:	7011      	strb	r1, [r2, #0]
 800db36:	7053      	strb	r3, [r2, #1]
 800db38:	1c91      	adds	r1, r2, #2
 800db3a:	f7fe fe7d 	bl	800c838 <uxr_object_id_to_raw>
 800db3e:	4620      	mov	r0, r4
 800db40:	b002      	add	sp, #8
 800db42:	bd10      	pop	{r4, pc}
 800db44:	230a      	movs	r3, #10
 800db46:	2100      	movs	r1, #0
 800db48:	461c      	mov	r4, r3
 800db4a:	e7f1      	b.n	800db30 <uxr_init_base_object_request+0x20>

0800db4c <uxr_parse_base_object_request>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	4604      	mov	r4, r0
 800db50:	3002      	adds	r0, #2
 800db52:	460d      	mov	r5, r1
 800db54:	4616      	mov	r6, r2
 800db56:	f7fe fe5b 	bl	800c810 <uxr_object_id_from_raw>
 800db5a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800db5e:	8028      	strh	r0, [r5, #0]
 800db60:	806b      	strh	r3, [r5, #2]
 800db62:	8823      	ldrh	r3, [r4, #0]
 800db64:	ba5b      	rev16	r3, r3
 800db66:	8033      	strh	r3, [r6, #0]
 800db68:	bd70      	pop	{r4, r5, r6, pc}
 800db6a:	bf00      	nop

0800db6c <uxr_init_framing_io>:
 800db6c:	2300      	movs	r3, #0
 800db6e:	7041      	strb	r1, [r0, #1]
 800db70:	7003      	strb	r3, [r0, #0]
 800db72:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop

0800db78 <uxr_write_framed_msg>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	f890 c001 	ldrb.w	ip, [r0, #1]
 800db80:	4617      	mov	r7, r2
 800db82:	227e      	movs	r2, #126	@ 0x7e
 800db84:	b085      	sub	sp, #20
 800db86:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800db8a:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800db8e:	2a01      	cmp	r2, #1
 800db90:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800db94:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800db98:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800db9c:	4604      	mov	r4, r0
 800db9e:	460e      	mov	r6, r1
 800dba0:	469a      	mov	sl, r3
 800dba2:	f240 812e 	bls.w	800de02 <uxr_write_framed_msg+0x28a>
 800dba6:	2003      	movs	r0, #3
 800dba8:	2102      	movs	r1, #2
 800dbaa:	f04f 0905 	mov.w	r9, #5
 800dbae:	2204      	movs	r2, #4
 800dbb0:	4686      	mov	lr, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800dbb8:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800dbbc:	f1bc 0f01 	cmp.w	ip, #1
 800dbc0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dbc4:	4421      	add	r1, r4
 800dbc6:	f240 8110 	bls.w	800ddea <uxr_write_framed_msg+0x272>
 800dbca:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800dbce:	fa5f fc8b 	uxtb.w	ip, fp
 800dbd2:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800dbd6:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800dbda:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800dbde:	f1be 0f01 	cmp.w	lr, #1
 800dbe2:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800dbe6:	b2ed      	uxtb	r5, r5
 800dbe8:	d94c      	bls.n	800dc84 <uxr_write_framed_msg+0x10c>
 800dbea:	4420      	add	r0, r4
 800dbec:	2d01      	cmp	r5, #1
 800dbee:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800dbf2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dbf6:	d95d      	bls.n	800dcb4 <uxr_write_framed_msg+0x13c>
 800dbf8:	18a0      	adds	r0, r4, r2
 800dbfa:	3201      	adds	r2, #1
 800dbfc:	b2d2      	uxtb	r2, r2
 800dbfe:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800dc02:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dc06:	f1bb 0f00 	cmp.w	fp, #0
 800dc0a:	f000 8108 	beq.w	800de1e <uxr_write_framed_msg+0x2a6>
 800dc0e:	f04f 0c00 	mov.w	ip, #0
 800dc12:	4661      	mov	r1, ip
 800dc14:	46de      	mov	lr, fp
 800dc16:	46e3      	mov	fp, ip
 800dc18:	46d4      	mov	ip, sl
 800dc1a:	468a      	mov	sl, r1
 800dc1c:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800de28 <uxr_write_framed_msg+0x2b0>
 800dc20:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800dc24:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800dc28:	2901      	cmp	r1, #1
 800dc2a:	d91b      	bls.n	800dc64 <uxr_write_framed_msg+0xec>
 800dc2c:	2a29      	cmp	r2, #41	@ 0x29
 800dc2e:	d84e      	bhi.n	800dcce <uxr_write_framed_msg+0x156>
 800dc30:	18a1      	adds	r1, r4, r2
 800dc32:	3201      	adds	r2, #1
 800dc34:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800dc38:	b2d2      	uxtb	r2, r2
 800dc3a:	ea8b 0303 	eor.w	r3, fp, r3
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dc44:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800dc48:	f10a 0a01 	add.w	sl, sl, #1
 800dc4c:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800dc50:	45d6      	cmp	lr, sl
 800dc52:	d95a      	bls.n	800dd0a <uxr_write_framed_msg+0x192>
 800dc54:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800dc58:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800dc5c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800dc60:	2901      	cmp	r1, #1
 800dc62:	d8e3      	bhi.n	800dc2c <uxr_write_framed_msg+0xb4>
 800dc64:	1c51      	adds	r1, r2, #1
 800dc66:	b2c9      	uxtb	r1, r1
 800dc68:	2929      	cmp	r1, #41	@ 0x29
 800dc6a:	d830      	bhi.n	800dcce <uxr_write_framed_msg+0x156>
 800dc6c:	18a1      	adds	r1, r4, r2
 800dc6e:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800dc72:	3202      	adds	r2, #2
 800dc74:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800dc78:	f083 0020 	eor.w	r0, r3, #32
 800dc7c:	b2d2      	uxtb	r2, r2
 800dc7e:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800dc82:	e7da      	b.n	800dc3a <uxr_write_framed_msg+0xc2>
 800dc84:	eb04 0e00 	add.w	lr, r4, r0
 800dc88:	f08c 0c20 	eor.w	ip, ip, #32
 800dc8c:	1c82      	adds	r2, r0, #2
 800dc8e:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800dc92:	b2d2      	uxtb	r2, r2
 800dc94:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800dc98:	2d01      	cmp	r5, #1
 800dc9a:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800dc9e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dca2:	d907      	bls.n	800dcb4 <uxr_write_framed_msg+0x13c>
 800dca4:	4422      	add	r2, r4
 800dca6:	3003      	adds	r0, #3
 800dca8:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800dcac:	b2c2      	uxtb	r2, r0
 800dcae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dcb2:	e7ac      	b.n	800dc0e <uxr_write_framed_msg+0x96>
 800dcb4:	18a0      	adds	r0, r4, r2
 800dcb6:	f081 0120 	eor.w	r1, r1, #32
 800dcba:	3202      	adds	r2, #2
 800dcbc:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800dcc0:	b2d2      	uxtb	r2, r2
 800dcc2:	217d      	movs	r1, #125	@ 0x7d
 800dcc4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800dcc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dccc:	e79f      	b.n	800dc0e <uxr_write_framed_msg+0x96>
 800dcce:	e9cd ba00 	strd	fp, sl, [sp]
 800dcd2:	2500      	movs	r5, #0
 800dcd4:	46e2      	mov	sl, ip
 800dcd6:	46f3      	mov	fp, lr
 800dcd8:	e000      	b.n	800dcdc <uxr_write_framed_msg+0x164>
 800dcda:	b190      	cbz	r0, 800dd02 <uxr_write_framed_msg+0x18a>
 800dcdc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800dce0:	1b52      	subs	r2, r2, r5
 800dce2:	4643      	mov	r3, r8
 800dce4:	4421      	add	r1, r4
 800dce6:	4638      	mov	r0, r7
 800dce8:	47b0      	blx	r6
 800dcea:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800dcee:	4405      	add	r5, r0
 800dcf0:	4295      	cmp	r5, r2
 800dcf2:	d3f2      	bcc.n	800dcda <uxr_write_framed_msg+0x162>
 800dcf4:	46d4      	mov	ip, sl
 800dcf6:	46de      	mov	lr, fp
 800dcf8:	f8dd a004 	ldr.w	sl, [sp, #4]
 800dcfc:	f8dd b000 	ldr.w	fp, [sp]
 800dd00:	d06f      	beq.n	800dde2 <uxr_write_framed_msg+0x26a>
 800dd02:	2000      	movs	r0, #0
 800dd04:	b005      	add	sp, #20
 800dd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0a:	46dc      	mov	ip, fp
 800dd0c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800dd10:	f8ad c00c 	strh.w	ip, [sp, #12]
 800dd14:	46f3      	mov	fp, lr
 800dd16:	fa5f fc8c 	uxtb.w	ip, ip
 800dd1a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	f04f 0900 	mov.w	r9, #0
 800dd24:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800dd28:	d930      	bls.n	800dd8c <uxr_write_framed_msg+0x214>
 800dd2a:	2a29      	cmp	r2, #41	@ 0x29
 800dd2c:	d91c      	bls.n	800dd68 <uxr_write_framed_msg+0x1f0>
 800dd2e:	2500      	movs	r5, #0
 800dd30:	e001      	b.n	800dd36 <uxr_write_framed_msg+0x1be>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d0e5      	beq.n	800dd02 <uxr_write_framed_msg+0x18a>
 800dd36:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800dd3a:	1b52      	subs	r2, r2, r5
 800dd3c:	4643      	mov	r3, r8
 800dd3e:	4421      	add	r1, r4
 800dd40:	4638      	mov	r0, r7
 800dd42:	47b0      	blx	r6
 800dd44:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800dd48:	4405      	add	r5, r0
 800dd4a:	4295      	cmp	r5, r2
 800dd4c:	d3f1      	bcc.n	800dd32 <uxr_write_framed_msg+0x1ba>
 800dd4e:	d1d8      	bne.n	800dd02 <uxr_write_framed_msg+0x18a>
 800dd50:	f109 0310 	add.w	r3, r9, #16
 800dd54:	446b      	add	r3, sp
 800dd56:	2200      	movs	r2, #0
 800dd58:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800dd5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dd60:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d911      	bls.n	800dd8c <uxr_write_framed_msg+0x214>
 800dd68:	18a3      	adds	r3, r4, r2
 800dd6a:	3201      	adds	r2, #1
 800dd6c:	b2d2      	uxtb	r2, r2
 800dd6e:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800dd72:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dd76:	f1b9 0f00 	cmp.w	r9, #0
 800dd7a:	d119      	bne.n	800ddb0 <uxr_write_framed_msg+0x238>
 800dd7c:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800dd80:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	f04f 0901 	mov.w	r9, #1
 800dd8a:	d8ce      	bhi.n	800dd2a <uxr_write_framed_msg+0x1b2>
 800dd8c:	1c53      	adds	r3, r2, #1
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	2b29      	cmp	r3, #41	@ 0x29
 800dd92:	d8cc      	bhi.n	800dd2e <uxr_write_framed_msg+0x1b6>
 800dd94:	18a3      	adds	r3, r4, r2
 800dd96:	3202      	adds	r2, #2
 800dd98:	f08c 0c20 	eor.w	ip, ip, #32
 800dd9c:	b2d2      	uxtb	r2, r2
 800dd9e:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800dda2:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800dda6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ddaa:	f1b9 0f00 	cmp.w	r9, #0
 800ddae:	d0e5      	beq.n	800dd7c <uxr_write_framed_msg+0x204>
 800ddb0:	2500      	movs	r5, #0
 800ddb2:	e001      	b.n	800ddb8 <uxr_write_framed_msg+0x240>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d0a4      	beq.n	800dd02 <uxr_write_framed_msg+0x18a>
 800ddb8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ddbc:	1b52      	subs	r2, r2, r5
 800ddbe:	4643      	mov	r3, r8
 800ddc0:	4421      	add	r1, r4
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	47b0      	blx	r6
 800ddc6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ddca:	4405      	add	r5, r0
 800ddcc:	4295      	cmp	r5, r2
 800ddce:	d3f1      	bcc.n	800ddb4 <uxr_write_framed_msg+0x23c>
 800ddd0:	d197      	bne.n	800dd02 <uxr_write_framed_msg+0x18a>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	fa1f f08b 	uxth.w	r0, fp
 800ddd8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dddc:	b005      	add	sp, #20
 800ddde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde2:	2300      	movs	r3, #0
 800dde4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dde8:	e732      	b.n	800dc50 <uxr_write_framed_msg+0xd8>
 800ddea:	44a6      	add	lr, r4
 800ddec:	f085 0520 	eor.w	r5, r5, #32
 800ddf0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800ddfa:	464a      	mov	r2, r9
 800ddfc:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800de00:	e6e5      	b.n	800dbce <uxr_write_framed_msg+0x56>
 800de02:	f08c 0c20 	eor.w	ip, ip, #32
 800de06:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800de0a:	2103      	movs	r1, #3
 800de0c:	2004      	movs	r0, #4
 800de0e:	f04f 0906 	mov.w	r9, #6
 800de12:	2205      	movs	r2, #5
 800de14:	4686      	mov	lr, r0
 800de16:	460b      	mov	r3, r1
 800de18:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800de1c:	e6ca      	b.n	800dbb4 <uxr_write_framed_msg+0x3c>
 800de1e:	f8ad b00c 	strh.w	fp, [sp, #12]
 800de22:	46dc      	mov	ip, fp
 800de24:	e779      	b.n	800dd1a <uxr_write_framed_msg+0x1a2>
 800de26:	bf00      	nop
 800de28:	08018e24 	.word	0x08018e24

0800de2c <uxr_framing_read_transport>:
 800de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de30:	4604      	mov	r4, r0
 800de32:	b083      	sub	sp, #12
 800de34:	461f      	mov	r7, r3
 800de36:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800de3a:	4689      	mov	r9, r1
 800de3c:	4692      	mov	sl, r2
 800de3e:	f000 fc5d 	bl	800e6fc <uxr_millis>
 800de42:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800de46:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800de4a:	42b3      	cmp	r3, r6
 800de4c:	4680      	mov	r8, r0
 800de4e:	d062      	beq.n	800df16 <uxr_framing_read_transport+0xea>
 800de50:	d81c      	bhi.n	800de8c <uxr_framing_read_transport+0x60>
 800de52:	1e75      	subs	r5, r6, #1
 800de54:	1aed      	subs	r5, r5, r3
 800de56:	b2ed      	uxtb	r5, r5
 800de58:	2600      	movs	r6, #0
 800de5a:	455d      	cmp	r5, fp
 800de5c:	d81f      	bhi.n	800de9e <uxr_framing_read_transport+0x72>
 800de5e:	19ab      	adds	r3, r5, r6
 800de60:	455b      	cmp	r3, fp
 800de62:	bf84      	itt	hi
 800de64:	ebab 0b05 	subhi.w	fp, fp, r5
 800de68:	fa5f f68b 	uxtbhi.w	r6, fp
 800de6c:	b9e5      	cbnz	r5, 800dea8 <uxr_framing_read_transport+0x7c>
 800de6e:	f04f 0b00 	mov.w	fp, #0
 800de72:	f000 fc43 	bl	800e6fc <uxr_millis>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	eba0 0108 	sub.w	r1, r0, r8
 800de7c:	1a5b      	subs	r3, r3, r1
 800de7e:	4658      	mov	r0, fp
 800de80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	b003      	add	sp, #12
 800de88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8c:	2e00      	cmp	r6, #0
 800de8e:	d04a      	beq.n	800df26 <uxr_framing_read_transport+0xfa>
 800de90:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800de94:	b2dd      	uxtb	r5, r3
 800de96:	3e01      	subs	r6, #1
 800de98:	455d      	cmp	r5, fp
 800de9a:	b2f6      	uxtb	r6, r6
 800de9c:	d9df      	bls.n	800de5e <uxr_framing_read_transport+0x32>
 800de9e:	fa5f f58b 	uxtb.w	r5, fp
 800dea2:	2600      	movs	r6, #0
 800dea4:	2d00      	cmp	r5, #0
 800dea6:	d0e2      	beq.n	800de6e <uxr_framing_read_transport+0x42>
 800dea8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800deac:	3102      	adds	r1, #2
 800deae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	4421      	add	r1, r4
 800deb6:	462a      	mov	r2, r5
 800deb8:	4650      	mov	r0, sl
 800deba:	47c8      	blx	r9
 800debc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dec0:	4a1b      	ldr	r2, [pc, #108]	@ (800df30 <uxr_framing_read_transport+0x104>)
 800dec2:	4403      	add	r3, r0
 800dec4:	0859      	lsrs	r1, r3, #1
 800dec6:	4683      	mov	fp, r0
 800dec8:	fba2 0101 	umull	r0, r1, r2, r1
 800decc:	0889      	lsrs	r1, r1, #2
 800dece:	222a      	movs	r2, #42	@ 0x2a
 800ded0:	fb02 3111 	mls	r1, r2, r1, r3
 800ded4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800ded8:	f1bb 0f00 	cmp.w	fp, #0
 800dedc:	d0c7      	beq.n	800de6e <uxr_framing_read_transport+0x42>
 800dede:	45ab      	cmp	fp, r5
 800dee0:	d1c7      	bne.n	800de72 <uxr_framing_read_transport+0x46>
 800dee2:	2e00      	cmp	r6, #0
 800dee4:	d0c5      	beq.n	800de72 <uxr_framing_read_transport+0x46>
 800dee6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	3102      	adds	r1, #2
 800deec:	4632      	mov	r2, r6
 800deee:	4421      	add	r1, r4
 800def0:	2300      	movs	r3, #0
 800def2:	4650      	mov	r0, sl
 800def4:	47c8      	blx	r9
 800def6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800defa:	4a0d      	ldr	r2, [pc, #52]	@ (800df30 <uxr_framing_read_transport+0x104>)
 800defc:	4403      	add	r3, r0
 800defe:	0859      	lsrs	r1, r3, #1
 800df00:	fba2 2101 	umull	r2, r1, r2, r1
 800df04:	0889      	lsrs	r1, r1, #2
 800df06:	222a      	movs	r2, #42	@ 0x2a
 800df08:	fb02 3311 	mls	r3, r2, r1, r3
 800df0c:	eb00 0b05 	add.w	fp, r0, r5
 800df10:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800df14:	e7ad      	b.n	800de72 <uxr_framing_read_transport+0x46>
 800df16:	2600      	movs	r6, #0
 800df18:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800df1c:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800df1e:	d9be      	bls.n	800de9e <uxr_framing_read_transport+0x72>
 800df20:	2529      	movs	r5, #41	@ 0x29
 800df22:	2102      	movs	r1, #2
 800df24:	e7c3      	b.n	800deae <uxr_framing_read_transport+0x82>
 800df26:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800df2a:	b2dd      	uxtb	r5, r3
 800df2c:	e795      	b.n	800de5a <uxr_framing_read_transport+0x2e>
 800df2e:	bf00      	nop
 800df30:	30c30c31 	.word	0x30c30c31

0800df34 <uxr_read_framed_msg>:
 800df34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df38:	461d      	mov	r5, r3
 800df3a:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800df3e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800df42:	b085      	sub	sp, #20
 800df44:	459c      	cmp	ip, r3
 800df46:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800df4a:	4604      	mov	r4, r0
 800df4c:	460f      	mov	r7, r1
 800df4e:	4616      	mov	r6, r2
 800df50:	f000 81ae 	beq.w	800e2b0 <uxr_read_framed_msg+0x37c>
 800df54:	2000      	movs	r0, #0
 800df56:	4639      	mov	r1, r7
 800df58:	2800      	cmp	r0, #0
 800df5a:	d138      	bne.n	800dfce <uxr_read_framed_msg+0x9a>
 800df5c:	468a      	mov	sl, r1
 800df5e:	7823      	ldrb	r3, [r4, #0]
 800df60:	2b07      	cmp	r3, #7
 800df62:	d8fd      	bhi.n	800df60 <uxr_read_framed_msg+0x2c>
 800df64:	e8df f013 	tbh	[pc, r3, lsl #1]
 800df68:	0116013b 	.word	0x0116013b
 800df6c:	00cd00f0 	.word	0x00cd00f0
 800df70:	005a00a0 	.word	0x005a00a0
 800df74:	00080037 	.word	0x00080037
 800df78:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800df7c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800df80:	4290      	cmp	r0, r2
 800df82:	f000 8167 	beq.w	800e254 <uxr_read_framed_msg+0x320>
 800df86:	18a3      	adds	r3, r4, r2
 800df88:	1c57      	adds	r7, r2, #1
 800df8a:	49c7      	ldr	r1, [pc, #796]	@ (800e2a8 <uxr_read_framed_msg+0x374>)
 800df8c:	f893 c002 	ldrb.w	ip, [r3, #2]
 800df90:	087b      	lsrs	r3, r7, #1
 800df92:	fba1 8303 	umull	r8, r3, r1, r3
 800df96:	089b      	lsrs	r3, r3, #2
 800df98:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800df9c:	fb08 7313 	mls	r3, r8, r3, r7
 800dfa0:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800dfa4:	b2df      	uxtb	r7, r3
 800dfa6:	f000 81b2 	beq.w	800e30e <uxr_read_framed_msg+0x3da>
 800dfaa:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800dfae:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800dfb2:	f000 8220 	beq.w	800e3f6 <uxr_read_framed_msg+0x4c2>
 800dfb6:	4661      	mov	r1, ip
 800dfb8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800dfba:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800dfbc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800dfc8:	7021      	strb	r1, [r4, #0]
 800dfca:	f000 8198 	beq.w	800e2fe <uxr_read_framed_msg+0x3ca>
 800dfce:	2000      	movs	r0, #0
 800dfd0:	b005      	add	sp, #20
 800dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd6:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800dfda:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dfde:	4297      	cmp	r7, r2
 800dfe0:	f000 8148 	beq.w	800e274 <uxr_read_framed_msg+0x340>
 800dfe4:	18a3      	adds	r3, r4, r2
 800dfe6:	f102 0c01 	add.w	ip, r2, #1
 800dfea:	49af      	ldr	r1, [pc, #700]	@ (800e2a8 <uxr_read_framed_msg+0x374>)
 800dfec:	7898      	ldrb	r0, [r3, #2]
 800dfee:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800dff2:	fba1 8303 	umull	r8, r3, r1, r3
 800dff6:	089b      	lsrs	r3, r3, #2
 800dff8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800dffc:	fb08 c313 	mls	r3, r8, r3, ip
 800e000:	287d      	cmp	r0, #125	@ 0x7d
 800e002:	fa5f fc83 	uxtb.w	ip, r3
 800e006:	f000 8194 	beq.w	800e332 <uxr_read_framed_msg+0x3fe>
 800e00a:	287e      	cmp	r0, #126	@ 0x7e
 800e00c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e010:	f000 8200 	beq.w	800e414 <uxr_read_framed_msg+0x4e0>
 800e014:	2307      	movs	r3, #7
 800e016:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e018:	7023      	strb	r3, [r4, #0]
 800e01a:	e7a0      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e01c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e01e:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800e020:	429f      	cmp	r7, r3
 800e022:	f240 8164 	bls.w	800e2ee <uxr_read_framed_msg+0x3ba>
 800e026:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800e2a8 <uxr_read_framed_msg+0x374>
 800e02a:	f8cd a00c 	str.w	sl, [sp, #12]
 800e02e:	212a      	movs	r1, #42	@ 0x2a
 800e030:	e01f      	b.n	800e072 <uxr_read_framed_msg+0x13e>
 800e032:	f89a e002 	ldrb.w	lr, [sl, #2]
 800e036:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800e03a:	f000 80ea 	beq.w	800e212 <uxr_read_framed_msg+0x2de>
 800e03e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800e042:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e046:	f000 8142 	beq.w	800e2ce <uxr_read_framed_msg+0x39a>
 800e04a:	f805 e003 	strb.w	lr, [r5, r3]
 800e04e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800e050:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e052:	4f96      	ldr	r7, [pc, #600]	@ (800e2ac <uxr_read_framed_msg+0x378>)
 800e054:	ea80 020e 	eor.w	r2, r0, lr
 800e058:	b2d2      	uxtb	r2, r2
 800e05a:	3301      	adds	r3, #1
 800e05c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800e060:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800e062:	b29b      	uxth	r3, r3
 800e064:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800e068:	42bb      	cmp	r3, r7
 800e06a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e06c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e06e:	f080 80e7 	bcs.w	800e240 <uxr_read_framed_msg+0x30c>
 800e072:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e076:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800e07a:	f100 0c01 	add.w	ip, r0, #1
 800e07e:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800e082:	fba9 e20e 	umull	lr, r2, r9, lr
 800e086:	0892      	lsrs	r2, r2, #2
 800e088:	fb01 c212 	mls	r2, r1, r2, ip
 800e08c:	4580      	cmp	r8, r0
 800e08e:	eb04 0a00 	add.w	sl, r4, r0
 800e092:	fa5f fc82 	uxtb.w	ip, r2
 800e096:	d1cc      	bne.n	800e032 <uxr_read_framed_msg+0xfe>
 800e098:	42bb      	cmp	r3, r7
 800e09a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800e09e:	f040 8128 	bne.w	800e2f2 <uxr_read_framed_msg+0x3be>
 800e0a2:	2306      	movs	r3, #6
 800e0a4:	7023      	strb	r3, [r4, #0]
 800e0a6:	e75a      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e0a8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e0ac:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e0b0:	4297      	cmp	r7, r2
 800e0b2:	f000 80cf 	beq.w	800e254 <uxr_read_framed_msg+0x320>
 800e0b6:	18a3      	adds	r3, r4, r2
 800e0b8:	f102 0c01 	add.w	ip, r2, #1
 800e0bc:	497a      	ldr	r1, [pc, #488]	@ (800e2a8 <uxr_read_framed_msg+0x374>)
 800e0be:	7898      	ldrb	r0, [r3, #2]
 800e0c0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e0c4:	fba1 8303 	umull	r8, r3, r1, r3
 800e0c8:	089b      	lsrs	r3, r3, #2
 800e0ca:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e0ce:	fb08 c313 	mls	r3, r8, r3, ip
 800e0d2:	287d      	cmp	r0, #125	@ 0x7d
 800e0d4:	fa5f fc83 	uxtb.w	ip, r3
 800e0d8:	f000 813d 	beq.w	800e356 <uxr_read_framed_msg+0x422>
 800e0dc:	287e      	cmp	r0, #126	@ 0x7e
 800e0de:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e0e2:	f000 8188 	beq.w	800e3f6 <uxr_read_framed_msg+0x4c2>
 800e0e6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e0e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e0ea:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	428b      	cmp	r3, r1
 800e0f4:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e0f6:	8662      	strh	r2, [r4, #50]	@ 0x32
 800e0f8:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e0fa:	f240 80f5 	bls.w	800e2e8 <uxr_read_framed_msg+0x3b4>
 800e0fe:	7022      	strb	r2, [r4, #0]
 800e100:	e765      	b.n	800dfce <uxr_read_framed_msg+0x9a>
 800e102:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e106:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e10a:	4297      	cmp	r7, r2
 800e10c:	f000 80b2 	beq.w	800e274 <uxr_read_framed_msg+0x340>
 800e110:	18a3      	adds	r3, r4, r2
 800e112:	f102 0c01 	add.w	ip, r2, #1
 800e116:	4964      	ldr	r1, [pc, #400]	@ (800e2a8 <uxr_read_framed_msg+0x374>)
 800e118:	7898      	ldrb	r0, [r3, #2]
 800e11a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e11e:	fba1 8303 	umull	r8, r3, r1, r3
 800e122:	089b      	lsrs	r3, r3, #2
 800e124:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e128:	fb08 c313 	mls	r3, r8, r3, ip
 800e12c:	287d      	cmp	r0, #125	@ 0x7d
 800e12e:	fa5f fc83 	uxtb.w	ip, r3
 800e132:	f000 813b 	beq.w	800e3ac <uxr_read_framed_msg+0x478>
 800e136:	287e      	cmp	r0, #126	@ 0x7e
 800e138:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e13c:	f000 816a 	beq.w	800e414 <uxr_read_framed_msg+0x4e0>
 800e140:	2304      	movs	r3, #4
 800e142:	8620      	strh	r0, [r4, #48]	@ 0x30
 800e144:	7023      	strb	r3, [r4, #0]
 800e146:	e70a      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e148:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e14c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e150:	4297      	cmp	r7, r2
 800e152:	f000 80c4 	beq.w	800e2de <uxr_read_framed_msg+0x3aa>
 800e156:	18a3      	adds	r3, r4, r2
 800e158:	f102 0c01 	add.w	ip, r2, #1
 800e15c:	4952      	ldr	r1, [pc, #328]	@ (800e2a8 <uxr_read_framed_msg+0x374>)
 800e15e:	7898      	ldrb	r0, [r3, #2]
 800e160:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e164:	fba1 8303 	umull	r8, r3, r1, r3
 800e168:	089b      	lsrs	r3, r3, #2
 800e16a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e16e:	fb08 c313 	mls	r3, r8, r3, ip
 800e172:	287d      	cmp	r0, #125	@ 0x7d
 800e174:	fa5f fc83 	uxtb.w	ip, r3
 800e178:	f000 812b 	beq.w	800e3d2 <uxr_read_framed_msg+0x49e>
 800e17c:	287e      	cmp	r0, #126	@ 0x7e
 800e17e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e182:	f000 8155 	beq.w	800e430 <uxr_read_framed_msg+0x4fc>
 800e186:	7863      	ldrb	r3, [r4, #1]
 800e188:	4283      	cmp	r3, r0
 800e18a:	bf0c      	ite	eq
 800e18c:	2303      	moveq	r3, #3
 800e18e:	2300      	movne	r3, #0
 800e190:	7023      	strb	r3, [r4, #0]
 800e192:	e6e4      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e194:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e198:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e19c:	2300      	movs	r3, #0
 800e19e:	4290      	cmp	r0, r2
 800e1a0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800e1a4:	d06b      	beq.n	800e27e <uxr_read_framed_msg+0x34a>
 800e1a6:	18a3      	adds	r3, r4, r2
 800e1a8:	f102 0c01 	add.w	ip, r2, #1
 800e1ac:	493e      	ldr	r1, [pc, #248]	@ (800e2a8 <uxr_read_framed_msg+0x374>)
 800e1ae:	789f      	ldrb	r7, [r3, #2]
 800e1b0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e1b4:	fba1 8303 	umull	r8, r3, r1, r3
 800e1b8:	089b      	lsrs	r3, r3, #2
 800e1ba:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e1be:	fb08 c313 	mls	r3, r8, r3, ip
 800e1c2:	2f7d      	cmp	r7, #125	@ 0x7d
 800e1c4:	fa5f fc83 	uxtb.w	ip, r3
 800e1c8:	f000 80d8 	beq.w	800e37c <uxr_read_framed_msg+0x448>
 800e1cc:	2f7e      	cmp	r7, #126	@ 0x7e
 800e1ce:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e1d2:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800e1d6:	d052      	beq.n	800e27e <uxr_read_framed_msg+0x34a>
 800e1d8:	2302      	movs	r3, #2
 800e1da:	7023      	strb	r3, [r4, #0]
 800e1dc:	e6bf      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e1de:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800e1e2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e1e6:	4930      	ldr	r1, [pc, #192]	@ (800e2a8 <uxr_read_framed_msg+0x374>)
 800e1e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e1ec:	e004      	b.n	800e1f8 <uxr_read_framed_msg+0x2c4>
 800e1ee:	78bb      	ldrb	r3, [r7, #2]
 800e1f0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e1f4:	2b7e      	cmp	r3, #126	@ 0x7e
 800e1f6:	d02a      	beq.n	800e24e <uxr_read_framed_msg+0x31a>
 800e1f8:	1c50      	adds	r0, r2, #1
 800e1fa:	0843      	lsrs	r3, r0, #1
 800e1fc:	fba1 e303 	umull	lr, r3, r1, r3
 800e200:	089b      	lsrs	r3, r3, #2
 800e202:	fb0c 0013 	mls	r0, ip, r3, r0
 800e206:	4590      	cmp	r8, r2
 800e208:	eb04 0702 	add.w	r7, r4, r2
 800e20c:	b2c2      	uxtb	r2, r0
 800e20e:	d1ee      	bne.n	800e1ee <uxr_read_framed_msg+0x2ba>
 800e210:	e6dd      	b.n	800dfce <uxr_read_framed_msg+0x9a>
 800e212:	3002      	adds	r0, #2
 800e214:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800e218:	eb04 0a02 	add.w	sl, r4, r2
 800e21c:	fba9 e20e 	umull	lr, r2, r9, lr
 800e220:	0892      	lsrs	r2, r2, #2
 800e222:	45e0      	cmp	r8, ip
 800e224:	fb01 0012 	mls	r0, r1, r2, r0
 800e228:	f43f af36 	beq.w	800e098 <uxr_read_framed_msg+0x164>
 800e22c:	f89a e002 	ldrb.w	lr, [sl, #2]
 800e230:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800e234:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800e238:	d049      	beq.n	800e2ce <uxr_read_framed_msg+0x39a>
 800e23a:	f08e 0e20 	eor.w	lr, lr, #32
 800e23e:	e704      	b.n	800e04a <uxr_read_framed_msg+0x116>
 800e240:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800e244:	f43f af2d 	beq.w	800e0a2 <uxr_read_framed_msg+0x16e>
 800e248:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800e24c:	d151      	bne.n	800e2f2 <uxr_read_framed_msg+0x3be>
 800e24e:	2301      	movs	r3, #1
 800e250:	7023      	strb	r3, [r4, #0]
 800e252:	e684      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e254:	4651      	mov	r1, sl
 800e256:	f8cd b000 	str.w	fp, [sp]
 800e25a:	2301      	movs	r3, #1
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e260:	9103      	str	r1, [sp, #12]
 800e262:	4632      	mov	r2, r6
 800e264:	4620      	mov	r0, r4
 800e266:	f7ff fde1 	bl	800de2c <uxr_framing_read_transport>
 800e26a:	fab0 f080 	clz	r0, r0
 800e26e:	9903      	ldr	r1, [sp, #12]
 800e270:	0940      	lsrs	r0, r0, #5
 800e272:	e671      	b.n	800df58 <uxr_read_framed_msg+0x24>
 800e274:	4651      	mov	r1, sl
 800e276:	f8cd b000 	str.w	fp, [sp]
 800e27a:	2302      	movs	r3, #2
 800e27c:	e7ee      	b.n	800e25c <uxr_read_framed_msg+0x328>
 800e27e:	2304      	movs	r3, #4
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	f8cd b000 	str.w	fp, [sp]
 800e286:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e288:	4632      	mov	r2, r6
 800e28a:	4651      	mov	r1, sl
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7ff fdcd 	bl	800de2c <uxr_framing_read_transport>
 800e292:	2800      	cmp	r0, #0
 800e294:	f47f ae63 	bne.w	800df5e <uxr_read_framed_msg+0x2a>
 800e298:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800e29c:	387e      	subs	r0, #126	@ 0x7e
 800e29e:	4651      	mov	r1, sl
 800e2a0:	bf18      	it	ne
 800e2a2:	2001      	movne	r0, #1
 800e2a4:	e658      	b.n	800df58 <uxr_read_framed_msg+0x24>
 800e2a6:	bf00      	nop
 800e2a8:	30c30c31 	.word	0x30c30c31
 800e2ac:	08018e24 	.word	0x08018e24
 800e2b0:	2305      	movs	r3, #5
 800e2b2:	9301      	str	r3, [sp, #4]
 800e2b4:	f8cd b000 	str.w	fp, [sp]
 800e2b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e2ba:	f7ff fdb7 	bl	800de2c <uxr_framing_read_transport>
 800e2be:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800e2c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	f43f ae81 	beq.w	800dfce <uxr_read_framed_msg+0x9a>
 800e2cc:	e642      	b.n	800df54 <uxr_read_framed_msg+0x20>
 800e2ce:	42bb      	cmp	r3, r7
 800e2d0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800e2d4:	f43f aee5 	beq.w	800e0a2 <uxr_read_framed_msg+0x16e>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	7023      	strb	r3, [r4, #0]
 800e2dc:	e63f      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e2de:	4651      	mov	r1, sl
 800e2e0:	f8cd b000 	str.w	fp, [sp]
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	e7b9      	b.n	800e25c <uxr_read_framed_msg+0x328>
 800e2e8:	2305      	movs	r3, #5
 800e2ea:	7023      	strb	r3, [r4, #0]
 800e2ec:	e637      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e2ee:	f43f aed8 	beq.w	800e0a2 <uxr_read_framed_msg+0x16e>
 800e2f2:	1afb      	subs	r3, r7, r3
 800e2f4:	3302      	adds	r3, #2
 800e2f6:	e9cd b300 	strd	fp, r3, [sp]
 800e2fa:	4651      	mov	r1, sl
 800e2fc:	e7af      	b.n	800e25e <uxr_read_framed_msg+0x32a>
 800e2fe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e300:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e304:	7013      	strb	r3, [r2, #0]
 800e306:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800e308:	b005      	add	sp, #20
 800e30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e30e:	4287      	cmp	r7, r0
 800e310:	d0a0      	beq.n	800e254 <uxr_read_framed_msg+0x320>
 800e312:	4423      	add	r3, r4
 800e314:	3202      	adds	r2, #2
 800e316:	7898      	ldrb	r0, [r3, #2]
 800e318:	0853      	lsrs	r3, r2, #1
 800e31a:	fba1 e303 	umull	lr, r3, r1, r3
 800e31e:	089b      	lsrs	r3, r3, #2
 800e320:	fb08 2213 	mls	r2, r8, r3, r2
 800e324:	287e      	cmp	r0, #126	@ 0x7e
 800e326:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e32a:	d064      	beq.n	800e3f6 <uxr_read_framed_msg+0x4c2>
 800e32c:	f080 0120 	eor.w	r1, r0, #32
 800e330:	e642      	b.n	800dfb8 <uxr_read_framed_msg+0x84>
 800e332:	45bc      	cmp	ip, r7
 800e334:	d09e      	beq.n	800e274 <uxr_read_framed_msg+0x340>
 800e336:	4423      	add	r3, r4
 800e338:	3202      	adds	r2, #2
 800e33a:	7898      	ldrb	r0, [r3, #2]
 800e33c:	0853      	lsrs	r3, r2, #1
 800e33e:	fba1 e303 	umull	lr, r3, r1, r3
 800e342:	089b      	lsrs	r3, r3, #2
 800e344:	fb08 2213 	mls	r2, r8, r3, r2
 800e348:	287e      	cmp	r0, #126	@ 0x7e
 800e34a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e34e:	d061      	beq.n	800e414 <uxr_read_framed_msg+0x4e0>
 800e350:	f080 0020 	eor.w	r0, r0, #32
 800e354:	e65e      	b.n	800e014 <uxr_read_framed_msg+0xe0>
 800e356:	4567      	cmp	r7, ip
 800e358:	f43f af7c 	beq.w	800e254 <uxr_read_framed_msg+0x320>
 800e35c:	4423      	add	r3, r4
 800e35e:	3202      	adds	r2, #2
 800e360:	7898      	ldrb	r0, [r3, #2]
 800e362:	0853      	lsrs	r3, r2, #1
 800e364:	fba1 e303 	umull	lr, r3, r1, r3
 800e368:	089b      	lsrs	r3, r3, #2
 800e36a:	fb08 2213 	mls	r2, r8, r3, r2
 800e36e:	287e      	cmp	r0, #126	@ 0x7e
 800e370:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e374:	d03f      	beq.n	800e3f6 <uxr_read_framed_msg+0x4c2>
 800e376:	f080 0020 	eor.w	r0, r0, #32
 800e37a:	e6b4      	b.n	800e0e6 <uxr_read_framed_msg+0x1b2>
 800e37c:	4560      	cmp	r0, ip
 800e37e:	f43f af7e 	beq.w	800e27e <uxr_read_framed_msg+0x34a>
 800e382:	4423      	add	r3, r4
 800e384:	3202      	adds	r2, #2
 800e386:	7898      	ldrb	r0, [r3, #2]
 800e388:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e38c:	0853      	lsrs	r3, r2, #1
 800e38e:	fba1 e303 	umull	lr, r3, r1, r3
 800e392:	089b      	lsrs	r3, r3, #2
 800e394:	fb08 2213 	mls	r2, r8, r3, r2
 800e398:	287e      	cmp	r0, #126	@ 0x7e
 800e39a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e39e:	f43f af6e 	beq.w	800e27e <uxr_read_framed_msg+0x34a>
 800e3a2:	f080 0020 	eor.w	r0, r0, #32
 800e3a6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e3aa:	e715      	b.n	800e1d8 <uxr_read_framed_msg+0x2a4>
 800e3ac:	4567      	cmp	r7, ip
 800e3ae:	f43f af61 	beq.w	800e274 <uxr_read_framed_msg+0x340>
 800e3b2:	4423      	add	r3, r4
 800e3b4:	3202      	adds	r2, #2
 800e3b6:	7898      	ldrb	r0, [r3, #2]
 800e3b8:	0853      	lsrs	r3, r2, #1
 800e3ba:	fba1 e303 	umull	lr, r3, r1, r3
 800e3be:	089b      	lsrs	r3, r3, #2
 800e3c0:	fb08 2213 	mls	r2, r8, r3, r2
 800e3c4:	287e      	cmp	r0, #126	@ 0x7e
 800e3c6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e3ca:	d023      	beq.n	800e414 <uxr_read_framed_msg+0x4e0>
 800e3cc:	f080 0020 	eor.w	r0, r0, #32
 800e3d0:	e6b6      	b.n	800e140 <uxr_read_framed_msg+0x20c>
 800e3d2:	45bc      	cmp	ip, r7
 800e3d4:	d083      	beq.n	800e2de <uxr_read_framed_msg+0x3aa>
 800e3d6:	4423      	add	r3, r4
 800e3d8:	3202      	adds	r2, #2
 800e3da:	7898      	ldrb	r0, [r3, #2]
 800e3dc:	0853      	lsrs	r3, r2, #1
 800e3de:	fba1 e303 	umull	lr, r3, r1, r3
 800e3e2:	089b      	lsrs	r3, r3, #2
 800e3e4:	fb08 2213 	mls	r2, r8, r3, r2
 800e3e8:	287e      	cmp	r0, #126	@ 0x7e
 800e3ea:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e3ee:	d01f      	beq.n	800e430 <uxr_read_framed_msg+0x4fc>
 800e3f0:	f080 0020 	eor.w	r0, r0, #32
 800e3f4:	e6c7      	b.n	800e186 <uxr_read_framed_msg+0x252>
 800e3f6:	2701      	movs	r7, #1
 800e3f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3fa:	f8cd b000 	str.w	fp, [sp]
 800e3fe:	9701      	str	r7, [sp, #4]
 800e400:	4632      	mov	r2, r6
 800e402:	4651      	mov	r1, sl
 800e404:	4620      	mov	r0, r4
 800e406:	f7ff fd11 	bl	800de2c <uxr_framing_read_transport>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	f47f ada7 	bne.w	800df5e <uxr_read_framed_msg+0x2a>
 800e410:	7027      	strb	r7, [r4, #0]
 800e412:	e5a4      	b.n	800df5e <uxr_read_framed_msg+0x2a>
 800e414:	f8cd b000 	str.w	fp, [sp]
 800e418:	2302      	movs	r3, #2
 800e41a:	9301      	str	r3, [sp, #4]
 800e41c:	4632      	mov	r2, r6
 800e41e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e420:	4651      	mov	r1, sl
 800e422:	4620      	mov	r0, r4
 800e424:	f7ff fd02 	bl	800de2c <uxr_framing_read_transport>
 800e428:	2800      	cmp	r0, #0
 800e42a:	f47f ad98 	bne.w	800df5e <uxr_read_framed_msg+0x2a>
 800e42e:	e70e      	b.n	800e24e <uxr_read_framed_msg+0x31a>
 800e430:	f8cd b000 	str.w	fp, [sp]
 800e434:	2303      	movs	r3, #3
 800e436:	e7f0      	b.n	800e41a <uxr_read_framed_msg+0x4e6>

0800e438 <uxr_stream_id>:
 800e438:	2901      	cmp	r1, #1
 800e43a:	b082      	sub	sp, #8
 800e43c:	4603      	mov	r3, r0
 800e43e:	d011      	beq.n	800e464 <uxr_stream_id+0x2c>
 800e440:	2902      	cmp	r1, #2
 800e442:	f04f 0c00 	mov.w	ip, #0
 800e446:	d00a      	beq.n	800e45e <uxr_stream_id+0x26>
 800e448:	2000      	movs	r0, #0
 800e44a:	f36c 0007 	bfi	r0, ip, #0, #8
 800e44e:	f363 200f 	bfi	r0, r3, #8, #8
 800e452:	f361 4017 	bfi	r0, r1, #16, #8
 800e456:	f362 601f 	bfi	r0, r2, #24, #8
 800e45a:	b002      	add	sp, #8
 800e45c:	4770      	bx	lr
 800e45e:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e462:	e7f1      	b.n	800e448 <uxr_stream_id+0x10>
 800e464:	f100 0c01 	add.w	ip, r0, #1
 800e468:	fa5f fc8c 	uxtb.w	ip, ip
 800e46c:	e7ec      	b.n	800e448 <uxr_stream_id+0x10>
 800e46e:	bf00      	nop

0800e470 <uxr_stream_id_from_raw>:
 800e470:	b082      	sub	sp, #8
 800e472:	4603      	mov	r3, r0
 800e474:	b130      	cbz	r0, 800e484 <uxr_stream_id_from_raw+0x14>
 800e476:	0602      	lsls	r2, r0, #24
 800e478:	d411      	bmi.n	800e49e <uxr_stream_id_from_raw+0x2e>
 800e47a:	1e42      	subs	r2, r0, #1
 800e47c:	b2d2      	uxtb	r2, r2
 800e47e:	f04f 0c01 	mov.w	ip, #1
 800e482:	e001      	b.n	800e488 <uxr_stream_id_from_raw+0x18>
 800e484:	4684      	mov	ip, r0
 800e486:	4602      	mov	r2, r0
 800e488:	2000      	movs	r0, #0
 800e48a:	f363 0007 	bfi	r0, r3, #0, #8
 800e48e:	f362 200f 	bfi	r0, r2, #8, #8
 800e492:	f36c 4017 	bfi	r0, ip, #16, #8
 800e496:	f361 601f 	bfi	r0, r1, #24, #8
 800e49a:	b002      	add	sp, #8
 800e49c:	4770      	bx	lr
 800e49e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e4a2:	f04f 0c02 	mov.w	ip, #2
 800e4a6:	e7ef      	b.n	800e488 <uxr_stream_id_from_raw+0x18>

0800e4a8 <uxr_init_stream_storage>:
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	7403      	strb	r3, [r0, #16]
 800e4ac:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e4b0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e4b4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop

0800e4bc <uxr_reset_stream_storage>:
 800e4bc:	b570      	push	{r4, r5, r6, lr}
 800e4be:	7c03      	ldrb	r3, [r0, #16]
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	b153      	cbz	r3, 800e4da <uxr_reset_stream_storage+0x1e>
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	2500      	movs	r5, #0
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	f006 ffbf 	bl	801544c <uxr_reset_output_best_effort_stream>
 800e4ce:	7c23      	ldrb	r3, [r4, #16]
 800e4d0:	3501      	adds	r5, #1
 800e4d2:	42ab      	cmp	r3, r5
 800e4d4:	f106 0610 	add.w	r6, r6, #16
 800e4d8:	d8f6      	bhi.n	800e4c8 <uxr_reset_stream_storage+0xc>
 800e4da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e4de:	b163      	cbz	r3, 800e4fa <uxr_reset_stream_storage+0x3e>
 800e4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4e4:	2500      	movs	r5, #0
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f006 fdc0 	bl	801506c <uxr_reset_input_best_effort_stream>
 800e4ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e4f0:	3501      	adds	r5, #1
 800e4f2:	42ab      	cmp	r3, r5
 800e4f4:	f106 0602 	add.w	r6, r6, #2
 800e4f8:	d8f5      	bhi.n	800e4e6 <uxr_reset_stream_storage+0x2a>
 800e4fa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e4fe:	b163      	cbz	r3, 800e51a <uxr_reset_stream_storage+0x5e>
 800e500:	f104 0618 	add.w	r6, r4, #24
 800e504:	2500      	movs	r5, #0
 800e506:	4630      	mov	r0, r6
 800e508:	f007 f84a 	bl	80155a0 <uxr_reset_output_reliable_stream>
 800e50c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e510:	3501      	adds	r5, #1
 800e512:	42ab      	cmp	r3, r5
 800e514:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e518:	d8f5      	bhi.n	800e506 <uxr_reset_stream_storage+0x4a>
 800e51a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e51e:	b163      	cbz	r3, 800e53a <uxr_reset_stream_storage+0x7e>
 800e520:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e524:	2500      	movs	r5, #0
 800e526:	4630      	mov	r0, r6
 800e528:	f006 fe10 	bl	801514c <uxr_reset_input_reliable_stream>
 800e52c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e530:	3501      	adds	r5, #1
 800e532:	42ab      	cmp	r3, r5
 800e534:	f106 0618 	add.w	r6, r6, #24
 800e538:	d8f5      	bhi.n	800e526 <uxr_reset_stream_storage+0x6a>
 800e53a:	bd70      	pop	{r4, r5, r6, pc}

0800e53c <uxr_add_output_best_effort_buffer>:
 800e53c:	b510      	push	{r4, lr}
 800e53e:	7c04      	ldrb	r4, [r0, #16]
 800e540:	f104 0c01 	add.w	ip, r4, #1
 800e544:	b082      	sub	sp, #8
 800e546:	f880 c010 	strb.w	ip, [r0, #16]
 800e54a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e54e:	f006 ff73 	bl	8015438 <uxr_init_output_best_effort_stream>
 800e552:	2201      	movs	r2, #1
 800e554:	4611      	mov	r1, r2
 800e556:	4620      	mov	r0, r4
 800e558:	b002      	add	sp, #8
 800e55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e55e:	f7ff bf6b 	b.w	800e438 <uxr_stream_id>
 800e562:	bf00      	nop

0800e564 <uxr_add_output_reliable_buffer>:
 800e564:	b510      	push	{r4, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	4684      	mov	ip, r0
 800e56a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e56e:	9000      	str	r0, [sp, #0]
 800e570:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e574:	2028      	movs	r0, #40	@ 0x28
 800e576:	fb00 c004 	mla	r0, r0, r4, ip
 800e57a:	f104 0e01 	add.w	lr, r4, #1
 800e57e:	3018      	adds	r0, #24
 800e580:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e584:	f006 ffd4 	bl	8015530 <uxr_init_output_reliable_stream>
 800e588:	2201      	movs	r2, #1
 800e58a:	2102      	movs	r1, #2
 800e58c:	4620      	mov	r0, r4
 800e58e:	b004      	add	sp, #16
 800e590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e594:	f7ff bf50 	b.w	800e438 <uxr_stream_id>

0800e598 <uxr_add_input_best_effort_buffer>:
 800e598:	b510      	push	{r4, lr}
 800e59a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e59e:	1c62      	adds	r2, r4, #1
 800e5a0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e5a4:	b082      	sub	sp, #8
 800e5a6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800e5aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e5ae:	f006 fd59 	bl	8015064 <uxr_init_input_best_effort_stream>
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	2101      	movs	r1, #1
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	b002      	add	sp, #8
 800e5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5be:	f7ff bf3b 	b.w	800e438 <uxr_stream_id>
 800e5c2:	bf00      	nop

0800e5c4 <uxr_add_input_reliable_buffer>:
 800e5c4:	b510      	push	{r4, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	4684      	mov	ip, r0
 800e5ca:	9806      	ldr	r0, [sp, #24]
 800e5cc:	9000      	str	r0, [sp, #0]
 800e5ce:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e5d2:	2018      	movs	r0, #24
 800e5d4:	fb00 c004 	mla	r0, r0, r4, ip
 800e5d8:	f104 0e01 	add.w	lr, r4, #1
 800e5dc:	3048      	adds	r0, #72	@ 0x48
 800e5de:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e5e2:	f006 fd87 	bl	80150f4 <uxr_init_input_reliable_stream>
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	2102      	movs	r1, #2
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	b004      	add	sp, #16
 800e5ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5f2:	f7ff bf21 	b.w	800e438 <uxr_stream_id>
 800e5f6:	bf00      	nop

0800e5f8 <uxr_get_output_best_effort_stream>:
 800e5f8:	7c03      	ldrb	r3, [r0, #16]
 800e5fa:	428b      	cmp	r3, r1
 800e5fc:	bf8c      	ite	hi
 800e5fe:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e602:	2000      	movls	r0, #0
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop

0800e608 <uxr_get_output_reliable_stream>:
 800e608:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e60c:	428b      	cmp	r3, r1
 800e60e:	bf83      	ittte	hi
 800e610:	2328      	movhi	r3, #40	@ 0x28
 800e612:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e616:	3018      	addhi	r0, #24
 800e618:	2000      	movls	r0, #0
 800e61a:	4770      	bx	lr

0800e61c <uxr_get_input_best_effort_stream>:
 800e61c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e620:	428b      	cmp	r3, r1
 800e622:	bf86      	itte	hi
 800e624:	3121      	addhi	r1, #33	@ 0x21
 800e626:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e62a:	2000      	movls	r0, #0
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop

0800e630 <uxr_get_input_reliable_stream>:
 800e630:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e634:	428b      	cmp	r3, r1
 800e636:	bf83      	ittte	hi
 800e638:	2318      	movhi	r3, #24
 800e63a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e63e:	3048      	addhi	r0, #72	@ 0x48
 800e640:	2000      	movls	r0, #0
 800e642:	4770      	bx	lr

0800e644 <uxr_output_streams_confirmed>:
 800e644:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e648:	b183      	cbz	r3, 800e66c <uxr_output_streams_confirmed+0x28>
 800e64a:	b570      	push	{r4, r5, r6, lr}
 800e64c:	4606      	mov	r6, r0
 800e64e:	f100 0518 	add.w	r5, r0, #24
 800e652:	2400      	movs	r4, #0
 800e654:	e001      	b.n	800e65a <uxr_output_streams_confirmed+0x16>
 800e656:	3528      	adds	r5, #40	@ 0x28
 800e658:	b138      	cbz	r0, 800e66a <uxr_output_streams_confirmed+0x26>
 800e65a:	4628      	mov	r0, r5
 800e65c:	f007 fa08 	bl	8015a70 <uxr_is_output_up_to_date>
 800e660:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e664:	3401      	adds	r4, #1
 800e666:	42a3      	cmp	r3, r4
 800e668:	d8f5      	bhi.n	800e656 <uxr_output_streams_confirmed+0x12>
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	2001      	movs	r0, #1
 800e66e:	4770      	bx	lr

0800e670 <uxr_buffer_submessage_header>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	4604      	mov	r4, r0
 800e674:	460e      	mov	r6, r1
 800e676:	2104      	movs	r1, #4
 800e678:	4615      	mov	r5, r2
 800e67a:	461f      	mov	r7, r3
 800e67c:	f7fd fd40 	bl	800c100 <ucdr_align_to>
 800e680:	2301      	movs	r3, #1
 800e682:	7523      	strb	r3, [r4, #20]
 800e684:	f047 0201 	orr.w	r2, r7, #1
 800e688:	462b      	mov	r3, r5
 800e68a:	4631      	mov	r1, r6
 800e68c:	4620      	mov	r0, r4
 800e68e:	f000 fa2b 	bl	800eae8 <uxr_serialize_submessage_header>
 800e692:	4620      	mov	r0, r4
 800e694:	f7fd fd4a 	bl	800c12c <ucdr_buffer_remaining>
 800e698:	42a8      	cmp	r0, r5
 800e69a:	bf34      	ite	cc
 800e69c:	2000      	movcc	r0, #0
 800e69e:	2001      	movcs	r0, #1
 800e6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a2:	bf00      	nop

0800e6a4 <uxr_read_submessage_header>:
 800e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	460d      	mov	r5, r1
 800e6ac:	2104      	movs	r1, #4
 800e6ae:	4616      	mov	r6, r2
 800e6b0:	4698      	mov	r8, r3
 800e6b2:	f7fd fd25 	bl	800c100 <ucdr_align_to>
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f7fd fd38 	bl	800c12c <ucdr_buffer_remaining>
 800e6bc:	2803      	cmp	r0, #3
 800e6be:	bf8c      	ite	hi
 800e6c0:	2701      	movhi	r7, #1
 800e6c2:	2700      	movls	r7, #0
 800e6c4:	d802      	bhi.n	800e6cc <uxr_read_submessage_header+0x28>
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6cc:	4633      	mov	r3, r6
 800e6ce:	4642      	mov	r2, r8
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	f000 fa1a 	bl	800eb0c <uxr_deserialize_submessage_header>
 800e6d8:	f898 3000 	ldrb.w	r3, [r8]
 800e6dc:	f003 0201 	and.w	r2, r3, #1
 800e6e0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e6e4:	f888 3000 	strb.w	r3, [r8]
 800e6e8:	7522      	strb	r2, [r4, #20]
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e6f0 <uxr_submessage_padding>:
 800e6f0:	f010 0003 	ands.w	r0, r0, #3
 800e6f4:	bf18      	it	ne
 800e6f6:	f1c0 0004 	rsbne	r0, r0, #4
 800e6fa:	4770      	bx	lr

0800e6fc <uxr_millis>:
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	4669      	mov	r1, sp
 800e702:	2001      	movs	r0, #1
 800e704:	f7f3 f964 	bl	80019d0 <clock_gettime>
 800e708:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e70c:	4b06      	ldr	r3, [pc, #24]	@ (800e728 <uxr_millis+0x2c>)
 800e70e:	fba0 0103 	umull	r0, r1, r0, r3
 800e712:	1900      	adds	r0, r0, r4
 800e714:	fb03 1102 	mla	r1, r3, r2, r1
 800e718:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e71c:	4a03      	ldr	r2, [pc, #12]	@ (800e72c <uxr_millis+0x30>)
 800e71e:	2300      	movs	r3, #0
 800e720:	f7f1 fdde 	bl	80002e0 <__aeabi_ldivmod>
 800e724:	b004      	add	sp, #16
 800e726:	bd10      	pop	{r4, pc}
 800e728:	3b9aca00 	.word	0x3b9aca00
 800e72c:	000f4240 	.word	0x000f4240

0800e730 <uxr_nanos>:
 800e730:	b510      	push	{r4, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	4669      	mov	r1, sp
 800e736:	2001      	movs	r0, #1
 800e738:	f7f3 f94a 	bl	80019d0 <clock_gettime>
 800e73c:	4a06      	ldr	r2, [pc, #24]	@ (800e758 <uxr_nanos+0x28>)
 800e73e:	9800      	ldr	r0, [sp, #0]
 800e740:	9902      	ldr	r1, [sp, #8]
 800e742:	9c01      	ldr	r4, [sp, #4]
 800e744:	fba0 0302 	umull	r0, r3, r0, r2
 800e748:	1840      	adds	r0, r0, r1
 800e74a:	fb02 3304 	mla	r3, r2, r4, r3
 800e74e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e752:	b004      	add	sp, #16
 800e754:	bd10      	pop	{r4, pc}
 800e756:	bf00      	nop
 800e758:	3b9aca00 	.word	0x3b9aca00

0800e75c <on_full_output_buffer_fragmented>:
 800e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e760:	460c      	mov	r4, r1
 800e762:	b08a      	sub	sp, #40	@ 0x28
 800e764:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e768:	4606      	mov	r6, r0
 800e76a:	f104 0008 	add.w	r0, r4, #8
 800e76e:	f7ff ff4b 	bl	800e608 <uxr_get_output_reliable_stream>
 800e772:	4605      	mov	r5, r0
 800e774:	f007 f986 	bl	8015a84 <get_available_free_slots>
 800e778:	b968      	cbnz	r0, 800e796 <on_full_output_buffer_fragmented+0x3a>
 800e77a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e77e:	4620      	mov	r0, r4
 800e780:	4798      	blx	r3
 800e782:	b918      	cbnz	r0, 800e78c <on_full_output_buffer_fragmented+0x30>
 800e784:	2001      	movs	r0, #1
 800e786:	b00a      	add	sp, #40	@ 0x28
 800e788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e78c:	4628      	mov	r0, r5
 800e78e:	f007 f979 	bl	8015a84 <get_available_free_slots>
 800e792:	2800      	cmp	r0, #0
 800e794:	d0f6      	beq.n	800e784 <on_full_output_buffer_fragmented+0x28>
 800e796:	892a      	ldrh	r2, [r5, #8]
 800e798:	686b      	ldr	r3, [r5, #4]
 800e79a:	fbb3 f8f2 	udiv	r8, r3, r2
 800e79e:	89eb      	ldrh	r3, [r5, #14]
 800e7a0:	7b29      	ldrb	r1, [r5, #12]
 800e7a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7a6:	fb02 3310 	mls	r3, r2, r0, r3
 800e7aa:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	fb08 f303 	mul.w	r3, r8, r3
 800e7b4:	31fc      	adds	r1, #252	@ 0xfc
 800e7b6:	f1a8 0804 	sub.w	r8, r8, #4
 800e7ba:	4441      	add	r1, r8
 800e7bc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e7c0:	b28f      	uxth	r7, r1
 800e7c2:	6829      	ldr	r1, [r5, #0]
 800e7c4:	3304      	adds	r3, #4
 800e7c6:	1bd2      	subs	r2, r2, r7
 800e7c8:	4419      	add	r1, r3
 800e7ca:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800e7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	4642      	mov	r2, r8
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	a802      	add	r0, sp, #8
 800e7da:	f7fd fc65 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800e7de:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e7e2:	f102 0308 	add.w	r3, r2, #8
 800e7e6:	4543      	cmp	r3, r8
 800e7e8:	d928      	bls.n	800e83c <on_full_output_buffer_fragmented+0xe0>
 800e7ea:	463a      	mov	r2, r7
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	210d      	movs	r1, #13
 800e7f0:	a802      	add	r0, sp, #8
 800e7f2:	f7ff ff3d 	bl	800e670 <uxr_buffer_submessage_header>
 800e7f6:	8929      	ldrh	r1, [r5, #8]
 800e7f8:	89eb      	ldrh	r3, [r5, #14]
 800e7fa:	fbb3 f2f1 	udiv	r2, r3, r1
 800e7fe:	fb01 3312 	mls	r3, r1, r2, r3
 800e802:	b29b      	uxth	r3, r3
 800e804:	686a      	ldr	r2, [r5, #4]
 800e806:	fbb2 f2f1 	udiv	r2, r2, r1
 800e80a:	fb02 f303 	mul.w	r3, r2, r3
 800e80e:	682a      	ldr	r2, [r5, #0]
 800e810:	f842 8003 	str.w	r8, [r2, r3]
 800e814:	89e8      	ldrh	r0, [r5, #14]
 800e816:	2101      	movs	r1, #1
 800e818:	f007 fa88 	bl	8015d2c <uxr_seq_num_add>
 800e81c:	9904      	ldr	r1, [sp, #16]
 800e81e:	9a03      	ldr	r2, [sp, #12]
 800e820:	81e8      	strh	r0, [r5, #14]
 800e822:	1a52      	subs	r2, r2, r1
 800e824:	4630      	mov	r0, r6
 800e826:	f7fd fc51 	bl	800c0cc <ucdr_init_buffer>
 800e82a:	4630      	mov	r0, r6
 800e82c:	4910      	ldr	r1, [pc, #64]	@ (800e870 <on_full_output_buffer_fragmented+0x114>)
 800e82e:	4622      	mov	r2, r4
 800e830:	f7fd fc20 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 800e834:	2000      	movs	r0, #0
 800e836:	b00a      	add	sp, #40	@ 0x28
 800e838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e83c:	b292      	uxth	r2, r2
 800e83e:	2302      	movs	r3, #2
 800e840:	210d      	movs	r1, #13
 800e842:	a802      	add	r0, sp, #8
 800e844:	f7ff ff14 	bl	800e670 <uxr_buffer_submessage_header>
 800e848:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e84c:	8928      	ldrh	r0, [r5, #8]
 800e84e:	f103 0208 	add.w	r2, r3, #8
 800e852:	89eb      	ldrh	r3, [r5, #14]
 800e854:	fbb3 f1f0 	udiv	r1, r3, r0
 800e858:	fb00 3311 	mls	r3, r0, r1, r3
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	6869      	ldr	r1, [r5, #4]
 800e860:	fbb1 f1f0 	udiv	r1, r1, r0
 800e864:	fb01 f303 	mul.w	r3, r1, r3
 800e868:	6829      	ldr	r1, [r5, #0]
 800e86a:	50ca      	str	r2, [r1, r3]
 800e86c:	e7d2      	b.n	800e814 <on_full_output_buffer_fragmented+0xb8>
 800e86e:	bf00      	nop
 800e870:	0800e75d 	.word	0x0800e75d

0800e874 <uxr_prepare_output_stream>:
 800e874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e876:	b087      	sub	sp, #28
 800e878:	2707      	movs	r7, #7
 800e87a:	9202      	str	r2, [sp, #8]
 800e87c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e87e:	2500      	movs	r5, #0
 800e880:	3204      	adds	r2, #4
 800e882:	e9cd 7500 	strd	r7, r5, [sp]
 800e886:	461c      	mov	r4, r3
 800e888:	4606      	mov	r6, r0
 800e88a:	f7ff f807 	bl	800d89c <uxr_prepare_stream_to_write_submessage>
 800e88e:	f080 0201 	eor.w	r2, r0, #1
 800e892:	b2d2      	uxtb	r2, r2
 800e894:	75a2      	strb	r2, [r4, #22]
 800e896:	b112      	cbz	r2, 800e89e <uxr_prepare_output_stream+0x2a>
 800e898:	4628      	mov	r0, r5
 800e89a:	b007      	add	sp, #28
 800e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89e:	aa05      	add	r2, sp, #20
 800e8a0:	9902      	ldr	r1, [sp, #8]
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	f7ff f934 	bl	800db10 <uxr_init_base_object_request>
 800e8a8:	a905      	add	r1, sp, #20
 800e8aa:	4605      	mov	r5, r0
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f001 f879 	bl	800f9a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e8b2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e8b6:	69a6      	ldr	r6, [r4, #24]
 800e8b8:	69e7      	ldr	r7, [r4, #28]
 800e8ba:	1a52      	subs	r2, r2, r1
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f7fd fc05 	bl	800c0cc <ucdr_init_buffer>
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	463a      	mov	r2, r7
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	f7fd fbd4 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	b007      	add	sp, #28
 800e8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d2:	bf00      	nop

0800e8d4 <uxr_prepare_output_stream_fragmented>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	b093      	sub	sp, #76	@ 0x4c
 800e8da:	4605      	mov	r5, r0
 800e8dc:	9107      	str	r1, [sp, #28]
 800e8de:	3008      	adds	r0, #8
 800e8e0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e8e4:	9303      	str	r3, [sp, #12]
 800e8e6:	9206      	str	r2, [sp, #24]
 800e8e8:	f7ff fe8e 	bl	800e608 <uxr_get_output_reliable_stream>
 800e8ec:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	f000 8095 	beq.w	800ea20 <uxr_prepare_output_stream_fragmented+0x14c>
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	f000 8091 	beq.w	800ea20 <uxr_prepare_output_stream_fragmented+0x14c>
 800e8fe:	f007 f8c1 	bl	8015a84 <get_available_free_slots>
 800e902:	2800      	cmp	r0, #0
 800e904:	f000 8087 	beq.w	800ea16 <uxr_prepare_output_stream_fragmented+0x142>
 800e908:	8922      	ldrh	r2, [r4, #8]
 800e90a:	89e7      	ldrh	r7, [r4, #14]
 800e90c:	fbb7 f3f2 	udiv	r3, r7, r2
 800e910:	fb02 7313 	mls	r3, r2, r3, r7
 800e914:	b29b      	uxth	r3, r3
 800e916:	6861      	ldr	r1, [r4, #4]
 800e918:	fbb1 f1f2 	udiv	r1, r1, r2
 800e91c:	6822      	ldr	r2, [r4, #0]
 800e91e:	9105      	str	r1, [sp, #20]
 800e920:	fb01 f303 	mul.w	r3, r1, r3
 800e924:	3304      	adds	r3, #4
 800e926:	eb02 0903 	add.w	r9, r2, r3
 800e92a:	7b23      	ldrb	r3, [r4, #12]
 800e92c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e930:	4543      	cmp	r3, r8
 800e932:	f1a1 0b04 	sub.w	fp, r1, #4
 800e936:	d37f      	bcc.n	800ea38 <uxr_prepare_output_stream_fragmented+0x164>
 800e938:	f1ab 0a04 	sub.w	sl, fp, #4
 800e93c:	ebaa 0a03 	sub.w	sl, sl, r3
 800e940:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e942:	f8cd 8000 	str.w	r8, [sp]
 800e946:	fa1f f38a 	uxth.w	r3, sl
 800e94a:	9304      	str	r3, [sp, #16]
 800e94c:	465a      	mov	r2, fp
 800e94e:	2300      	movs	r3, #0
 800e950:	4649      	mov	r1, r9
 800e952:	a80a      	add	r0, sp, #40	@ 0x28
 800e954:	f7fd fba8 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 800e958:	f106 0a08 	add.w	sl, r6, #8
 800e95c:	45da      	cmp	sl, fp
 800e95e:	bf2c      	ite	cs
 800e960:	2300      	movcs	r3, #0
 800e962:	2301      	movcc	r3, #1
 800e964:	9a04      	ldr	r2, [sp, #16]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	210d      	movs	r1, #13
 800e96a:	a80a      	add	r0, sp, #40	@ 0x28
 800e96c:	f7ff fe80 	bl	800e670 <uxr_buffer_submessage_header>
 800e970:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e974:	fbb7 f2fc 	udiv	r2, r7, ip
 800e978:	fb0c 7212 	mls	r2, ip, r2, r7
 800e97c:	b292      	uxth	r2, r2
 800e97e:	6863      	ldr	r3, [r4, #4]
 800e980:	fbb3 f3fc 	udiv	r3, r3, ip
 800e984:	fb02 f303 	mul.w	r3, r2, r3
 800e988:	6822      	ldr	r2, [r4, #0]
 800e98a:	2101      	movs	r1, #1
 800e98c:	f842 b003 	str.w	fp, [r2, r3]
 800e990:	4638      	mov	r0, r7
 800e992:	f007 f9cb 	bl	8015d2c <uxr_seq_num_add>
 800e996:	9b05      	ldr	r3, [sp, #20]
 800e998:	9e03      	ldr	r6, [sp, #12]
 800e99a:	f1a3 0208 	sub.w	r2, r3, #8
 800e99e:	f108 0104 	add.w	r1, r8, #4
 800e9a2:	4607      	mov	r7, r0
 800e9a4:	eba2 0208 	sub.w	r2, r2, r8
 800e9a8:	4449      	add	r1, r9
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f7fd fb8e 	bl	800c0cc <ucdr_init_buffer>
 800e9b0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e9b2:	81e7      	strh	r7, [r4, #14]
 800e9b4:	1d1a      	adds	r2, r3, #4
 800e9b6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e9ba:	bf28      	it	cs
 800e9bc:	2200      	movcs	r2, #0
 800e9be:	2300      	movs	r3, #0
 800e9c0:	b292      	uxth	r2, r2
 800e9c2:	2107      	movs	r1, #7
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff fe53 	bl	800e670 <uxr_buffer_submessage_header>
 800e9ca:	9906      	ldr	r1, [sp, #24]
 800e9cc:	aa09      	add	r2, sp, #36	@ 0x24
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f7ff f89e 	bl	800db10 <uxr_init_base_object_request>
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	b320      	cbz	r0, 800ea22 <uxr_prepare_output_stream_fragmented+0x14e>
 800e9d8:	9e03      	ldr	r6, [sp, #12]
 800e9da:	a909      	add	r1, sp, #36	@ 0x24
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f000 ffe1 	bl	800f9a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e9e2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	1a52      	subs	r2, r2, r1
 800e9ea:	f7fd fb6f 	bl	800c0cc <ucdr_init_buffer>
 800e9ee:	9b07      	ldr	r3, [sp, #28]
 800e9f0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e9f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e9f6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e9fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e9fc:	491a      	ldr	r1, [pc, #104]	@ (800ea68 <uxr_prepare_output_stream_fragmented+0x194>)
 800e9fe:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800ea02:	4630      	mov	r0, r6
 800ea04:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800ea08:	462a      	mov	r2, r5
 800ea0a:	f7fd fb33 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 800ea0e:	4620      	mov	r0, r4
 800ea10:	b013      	add	sp, #76	@ 0x4c
 800ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea16:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ea18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	4798      	blx	r3
 800ea1e:	b920      	cbnz	r0, 800ea2a <uxr_prepare_output_stream_fragmented+0x156>
 800ea20:	2400      	movs	r4, #0
 800ea22:	4620      	mov	r0, r4
 800ea24:	b013      	add	sp, #76	@ 0x4c
 800ea26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f007 f82a 	bl	8015a84 <get_available_free_slots>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	f47f af69 	bne.w	800e908 <uxr_prepare_output_stream_fragmented+0x34>
 800ea36:	e7f3      	b.n	800ea20 <uxr_prepare_output_stream_fragmented+0x14c>
 800ea38:	4638      	mov	r0, r7
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	f007 f976 	bl	8015d2c <uxr_seq_num_add>
 800ea40:	8921      	ldrh	r1, [r4, #8]
 800ea42:	fbb0 f2f1 	udiv	r2, r0, r1
 800ea46:	fb01 0212 	mls	r2, r1, r2, r0
 800ea4a:	b292      	uxth	r2, r2
 800ea4c:	6863      	ldr	r3, [r4, #4]
 800ea4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea52:	fb02 f303 	mul.w	r3, r2, r3
 800ea56:	6822      	ldr	r2, [r4, #0]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	eb02 0903 	add.w	r9, r2, r3
 800ea5e:	4607      	mov	r7, r0
 800ea60:	7b23      	ldrb	r3, [r4, #12]
 800ea62:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ea66:	e767      	b.n	800e938 <uxr_prepare_output_stream_fragmented+0x64>
 800ea68:	0800e75d 	.word	0x0800e75d

0800ea6c <uxr_serialize_message_header>:
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	4617      	mov	r7, r2
 800ea72:	4604      	mov	r4, r0
 800ea74:	461e      	mov	r6, r3
 800ea76:	460d      	mov	r5, r1
 800ea78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ea7c:	f7fc fa60 	bl	800af40 <ucdr_serialize_uint8_t>
 800ea80:	4639      	mov	r1, r7
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7fc fa5c 	bl	800af40 <ucdr_serialize_uint8_t>
 800ea88:	4632      	mov	r2, r6
 800ea8a:	2101      	movs	r1, #1
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f7fc fb0d 	bl	800b0ac <ucdr_serialize_endian_uint16_t>
 800ea92:	062b      	lsls	r3, r5, #24
 800ea94:	d501      	bpl.n	800ea9a <uxr_serialize_message_header+0x2e>
 800ea96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9a:	4641      	mov	r1, r8
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	2204      	movs	r2, #4
 800eaa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa4:	f006 b954 	b.w	8014d50 <ucdr_serialize_array_uint8_t>

0800eaa8 <uxr_deserialize_message_header>:
 800eaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaac:	4617      	mov	r7, r2
 800eaae:	4604      	mov	r4, r0
 800eab0:	461e      	mov	r6, r3
 800eab2:	460d      	mov	r5, r1
 800eab4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800eab8:	f7fc fa58 	bl	800af6c <ucdr_deserialize_uint8_t>
 800eabc:	4639      	mov	r1, r7
 800eabe:	4620      	mov	r0, r4
 800eac0:	f7fc fa54 	bl	800af6c <ucdr_deserialize_uint8_t>
 800eac4:	4632      	mov	r2, r6
 800eac6:	2101      	movs	r1, #1
 800eac8:	4620      	mov	r0, r4
 800eaca:	f7fc fbe5 	bl	800b298 <ucdr_deserialize_endian_uint16_t>
 800eace:	f995 3000 	ldrsb.w	r3, [r5]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	da01      	bge.n	800eada <uxr_deserialize_message_header+0x32>
 800ead6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eada:	4641      	mov	r1, r8
 800eadc:	4620      	mov	r0, r4
 800eade:	2204      	movs	r2, #4
 800eae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eae4:	f006 b998 	b.w	8014e18 <ucdr_deserialize_array_uint8_t>

0800eae8 <uxr_serialize_submessage_header>:
 800eae8:	b570      	push	{r4, r5, r6, lr}
 800eaea:	4616      	mov	r6, r2
 800eaec:	4604      	mov	r4, r0
 800eaee:	461d      	mov	r5, r3
 800eaf0:	f7fc fa26 	bl	800af40 <ucdr_serialize_uint8_t>
 800eaf4:	4631      	mov	r1, r6
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f7fc fa22 	bl	800af40 <ucdr_serialize_uint8_t>
 800eafc:	462a      	mov	r2, r5
 800eafe:	4620      	mov	r0, r4
 800eb00:	2101      	movs	r1, #1
 800eb02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb06:	f7fc bad1 	b.w	800b0ac <ucdr_serialize_endian_uint16_t>
 800eb0a:	bf00      	nop

0800eb0c <uxr_deserialize_submessage_header>:
 800eb0c:	b570      	push	{r4, r5, r6, lr}
 800eb0e:	4616      	mov	r6, r2
 800eb10:	4604      	mov	r4, r0
 800eb12:	461d      	mov	r5, r3
 800eb14:	f7fc fa2a 	bl	800af6c <ucdr_deserialize_uint8_t>
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f7fc fa26 	bl	800af6c <ucdr_deserialize_uint8_t>
 800eb20:	462a      	mov	r2, r5
 800eb22:	4620      	mov	r0, r4
 800eb24:	2101      	movs	r1, #1
 800eb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb2a:	f7fc bbb5 	b.w	800b298 <ucdr_deserialize_endian_uint16_t>
 800eb2e:	bf00      	nop

0800eb30 <uxr_serialize_CLIENT_Representation>:
 800eb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb34:	2204      	movs	r2, #4
 800eb36:	460e      	mov	r6, r1
 800eb38:	4605      	mov	r5, r0
 800eb3a:	f006 f909 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800eb3e:	2202      	movs	r2, #2
 800eb40:	1d31      	adds	r1, r6, #4
 800eb42:	4604      	mov	r4, r0
 800eb44:	4628      	mov	r0, r5
 800eb46:	f006 f903 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800eb4a:	2202      	movs	r2, #2
 800eb4c:	4004      	ands	r4, r0
 800eb4e:	1db1      	adds	r1, r6, #6
 800eb50:	4628      	mov	r0, r5
 800eb52:	f006 f8fd 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800eb56:	b2e4      	uxtb	r4, r4
 800eb58:	2204      	movs	r2, #4
 800eb5a:	4004      	ands	r4, r0
 800eb5c:	f106 0108 	add.w	r1, r6, #8
 800eb60:	4628      	mov	r0, r5
 800eb62:	f006 f8f5 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800eb66:	7b31      	ldrb	r1, [r6, #12]
 800eb68:	ea00 0804 	and.w	r8, r0, r4
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	f7fc f9e7 	bl	800af40 <ucdr_serialize_uint8_t>
 800eb72:	7b71      	ldrb	r1, [r6, #13]
 800eb74:	ea08 0800 	and.w	r8, r8, r0
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f7fc f9b3 	bl	800aee4 <ucdr_serialize_bool>
 800eb7e:	7b73      	ldrb	r3, [r6, #13]
 800eb80:	ea08 0800 	and.w	r8, r8, r0
 800eb84:	b93b      	cbnz	r3, 800eb96 <uxr_serialize_CLIENT_Representation+0x66>
 800eb86:	8bb1      	ldrh	r1, [r6, #28]
 800eb88:	4628      	mov	r0, r5
 800eb8a:	f7fc fa05 	bl	800af98 <ucdr_serialize_uint16_t>
 800eb8e:	ea08 0000 	and.w	r0, r8, r0
 800eb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb96:	6931      	ldr	r1, [r6, #16]
 800eb98:	4628      	mov	r0, r5
 800eb9a:	f7fc fbed 	bl	800b378 <ucdr_serialize_uint32_t>
 800eb9e:	6933      	ldr	r3, [r6, #16]
 800eba0:	b1e3      	cbz	r3, 800ebdc <uxr_serialize_CLIENT_Representation+0xac>
 800eba2:	b1c0      	cbz	r0, 800ebd6 <uxr_serialize_CLIENT_Representation+0xa6>
 800eba4:	4637      	mov	r7, r6
 800eba6:	f04f 0900 	mov.w	r9, #0
 800ebaa:	e001      	b.n	800ebb0 <uxr_serialize_CLIENT_Representation+0x80>
 800ebac:	3708      	adds	r7, #8
 800ebae:	b194      	cbz	r4, 800ebd6 <uxr_serialize_CLIENT_Representation+0xa6>
 800ebb0:	6979      	ldr	r1, [r7, #20]
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f006 fa40 	bl	8015038 <ucdr_serialize_string>
 800ebb8:	69b9      	ldr	r1, [r7, #24]
 800ebba:	4604      	mov	r4, r0
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f006 fa3b 	bl	8015038 <ucdr_serialize_string>
 800ebc2:	6933      	ldr	r3, [r6, #16]
 800ebc4:	f109 0901 	add.w	r9, r9, #1
 800ebc8:	4004      	ands	r4, r0
 800ebca:	4599      	cmp	r9, r3
 800ebcc:	b2e4      	uxtb	r4, r4
 800ebce:	d3ed      	bcc.n	800ebac <uxr_serialize_CLIENT_Representation+0x7c>
 800ebd0:	ea08 0804 	and.w	r8, r8, r4
 800ebd4:	e7d7      	b.n	800eb86 <uxr_serialize_CLIENT_Representation+0x56>
 800ebd6:	f04f 0800 	mov.w	r8, #0
 800ebda:	e7d4      	b.n	800eb86 <uxr_serialize_CLIENT_Representation+0x56>
 800ebdc:	ea08 0800 	and.w	r8, r8, r0
 800ebe0:	e7d1      	b.n	800eb86 <uxr_serialize_CLIENT_Representation+0x56>
 800ebe2:	bf00      	nop

0800ebe4 <uxr_deserialize_CLIENT_Representation>:
 800ebe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebe8:	2204      	movs	r2, #4
 800ebea:	460c      	mov	r4, r1
 800ebec:	4605      	mov	r5, r0
 800ebee:	f006 f913 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	1d21      	adds	r1, r4, #4
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	f006 f90d 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800ebfe:	2202      	movs	r2, #2
 800ec00:	4006      	ands	r6, r0
 800ec02:	1da1      	adds	r1, r4, #6
 800ec04:	4628      	mov	r0, r5
 800ec06:	f006 f907 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800ec0a:	b2f6      	uxtb	r6, r6
 800ec0c:	2204      	movs	r2, #4
 800ec0e:	4006      	ands	r6, r0
 800ec10:	f104 0108 	add.w	r1, r4, #8
 800ec14:	4628      	mov	r0, r5
 800ec16:	f006 f8ff 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800ec1a:	f104 010c 	add.w	r1, r4, #12
 800ec1e:	ea00 0706 	and.w	r7, r0, r6
 800ec22:	4628      	mov	r0, r5
 800ec24:	f7fc f9a2 	bl	800af6c <ucdr_deserialize_uint8_t>
 800ec28:	f104 010d 	add.w	r1, r4, #13
 800ec2c:	4007      	ands	r7, r0
 800ec2e:	4628      	mov	r0, r5
 800ec30:	f7fc f96e 	bl	800af10 <ucdr_deserialize_bool>
 800ec34:	7b63      	ldrb	r3, [r4, #13]
 800ec36:	4007      	ands	r7, r0
 800ec38:	b93b      	cbnz	r3, 800ec4a <uxr_deserialize_CLIENT_Representation+0x66>
 800ec3a:	f104 011c 	add.w	r1, r4, #28
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f7fc faae 	bl	800b1a0 <ucdr_deserialize_uint16_t>
 800ec44:	4038      	ands	r0, r7
 800ec46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec4a:	f104 0110 	add.w	r1, r4, #16
 800ec4e:	4628      	mov	r0, r5
 800ec50:	f7fc fcbc 	bl	800b5cc <ucdr_deserialize_uint32_t>
 800ec54:	6923      	ldr	r3, [r4, #16]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d903      	bls.n	800ec62 <uxr_deserialize_CLIENT_Representation+0x7e>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	75ab      	strb	r3, [r5, #22]
 800ec5e:	2700      	movs	r7, #0
 800ec60:	e7eb      	b.n	800ec3a <uxr_deserialize_CLIENT_Representation+0x56>
 800ec62:	b30b      	cbz	r3, 800eca8 <uxr_deserialize_CLIENT_Representation+0xc4>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d0fa      	beq.n	800ec5e <uxr_deserialize_CLIENT_Representation+0x7a>
 800ec68:	46a0      	mov	r8, r4
 800ec6a:	f04f 0900 	mov.w	r9, #0
 800ec6e:	e003      	b.n	800ec78 <uxr_deserialize_CLIENT_Representation+0x94>
 800ec70:	f108 0808 	add.w	r8, r8, #8
 800ec74:	2e00      	cmp	r6, #0
 800ec76:	d0f2      	beq.n	800ec5e <uxr_deserialize_CLIENT_Representation+0x7a>
 800ec78:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ec7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec80:	4628      	mov	r0, r5
 800ec82:	f006 f9e7 	bl	8015054 <ucdr_deserialize_string>
 800ec86:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec90:	4628      	mov	r0, r5
 800ec92:	f006 f9df 	bl	8015054 <ucdr_deserialize_string>
 800ec96:	6923      	ldr	r3, [r4, #16]
 800ec98:	f109 0901 	add.w	r9, r9, #1
 800ec9c:	4006      	ands	r6, r0
 800ec9e:	4599      	cmp	r9, r3
 800eca0:	b2f6      	uxtb	r6, r6
 800eca2:	d3e5      	bcc.n	800ec70 <uxr_deserialize_CLIENT_Representation+0x8c>
 800eca4:	4037      	ands	r7, r6
 800eca6:	e7c8      	b.n	800ec3a <uxr_deserialize_CLIENT_Representation+0x56>
 800eca8:	4007      	ands	r7, r0
 800ecaa:	e7c6      	b.n	800ec3a <uxr_deserialize_CLIENT_Representation+0x56>

0800ecac <uxr_serialize_AGENT_Representation>:
 800ecac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb0:	2204      	movs	r2, #4
 800ecb2:	460f      	mov	r7, r1
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	f006 f84b 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800ecba:	2202      	movs	r2, #2
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	1d39      	adds	r1, r7, #4
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	f006 f845 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800ecc6:	4020      	ands	r0, r4
 800ecc8:	2202      	movs	r2, #2
 800ecca:	b2c4      	uxtb	r4, r0
 800eccc:	1db9      	adds	r1, r7, #6
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f006 f83e 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800ecd4:	7a39      	ldrb	r1, [r7, #8]
 800ecd6:	4004      	ands	r4, r0
 800ecd8:	4628      	mov	r0, r5
 800ecda:	f7fc f903 	bl	800aee4 <ucdr_serialize_bool>
 800ecde:	7a3b      	ldrb	r3, [r7, #8]
 800ece0:	ea00 0804 	and.w	r8, r0, r4
 800ece4:	b913      	cbnz	r3, 800ecec <uxr_serialize_AGENT_Representation+0x40>
 800ece6:	4640      	mov	r0, r8
 800ece8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecec:	68f9      	ldr	r1, [r7, #12]
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f7fc fb42 	bl	800b378 <ucdr_serialize_uint32_t>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	b303      	cbz	r3, 800ed3a <uxr_serialize_AGENT_Representation+0x8e>
 800ecf8:	b1d0      	cbz	r0, 800ed30 <uxr_serialize_AGENT_Representation+0x84>
 800ecfa:	463e      	mov	r6, r7
 800ecfc:	f04f 0900 	mov.w	r9, #0
 800ed00:	e001      	b.n	800ed06 <uxr_serialize_AGENT_Representation+0x5a>
 800ed02:	3608      	adds	r6, #8
 800ed04:	b1a4      	cbz	r4, 800ed30 <uxr_serialize_AGENT_Representation+0x84>
 800ed06:	6931      	ldr	r1, [r6, #16]
 800ed08:	4628      	mov	r0, r5
 800ed0a:	f006 f995 	bl	8015038 <ucdr_serialize_string>
 800ed0e:	6971      	ldr	r1, [r6, #20]
 800ed10:	4604      	mov	r4, r0
 800ed12:	4628      	mov	r0, r5
 800ed14:	f006 f990 	bl	8015038 <ucdr_serialize_string>
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f109 0901 	add.w	r9, r9, #1
 800ed1e:	4004      	ands	r4, r0
 800ed20:	4599      	cmp	r9, r3
 800ed22:	b2e4      	uxtb	r4, r4
 800ed24:	d3ed      	bcc.n	800ed02 <uxr_serialize_AGENT_Representation+0x56>
 800ed26:	ea08 0804 	and.w	r8, r8, r4
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed30:	f04f 0800 	mov.w	r8, #0
 800ed34:	4640      	mov	r0, r8
 800ed36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed3a:	ea08 0800 	and.w	r8, r8, r0
 800ed3e:	e7d2      	b.n	800ece6 <uxr_serialize_AGENT_Representation+0x3a>

0800ed40 <uxr_serialize_DATAWRITER_Representation>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	460d      	mov	r5, r1
 800ed44:	7809      	ldrb	r1, [r1, #0]
 800ed46:	4606      	mov	r6, r0
 800ed48:	f7fc f8fa 	bl	800af40 <ucdr_serialize_uint8_t>
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	b130      	cbz	r0, 800ed5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ed50:	782b      	ldrb	r3, [r5, #0]
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d00c      	beq.n	800ed70 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ed56:	2b03      	cmp	r3, #3
 800ed58:	d010      	beq.n	800ed7c <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d008      	beq.n	800ed70 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ed5e:	2202      	movs	r2, #2
 800ed60:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ed64:	4630      	mov	r0, r6
 800ed66:	f005 fff3 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800ed6a:	4020      	ands	r0, r4
 800ed6c:	b2c0      	uxtb	r0, r0
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
 800ed70:	6869      	ldr	r1, [r5, #4]
 800ed72:	4630      	mov	r0, r6
 800ed74:	f006 f960 	bl	8015038 <ucdr_serialize_string>
 800ed78:	4604      	mov	r4, r0
 800ed7a:	e7f0      	b.n	800ed5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ed84:	3104      	adds	r1, #4
 800ed86:	f7fd fa3f 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	e7e7      	b.n	800ed5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ed8e:	bf00      	nop

0800ed90 <uxr_serialize_ObjectVariant.part.0>:
 800ed90:	b570      	push	{r4, r5, r6, lr}
 800ed92:	780b      	ldrb	r3, [r1, #0]
 800ed94:	3b01      	subs	r3, #1
 800ed96:	460c      	mov	r4, r1
 800ed98:	4605      	mov	r5, r0
 800ed9a:	2b0d      	cmp	r3, #13
 800ed9c:	d816      	bhi.n	800edcc <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ed9e:	e8df f003 	tbb	[pc, r3]
 800eda2:	0733      	.short	0x0733
 800eda4:	07071717 	.word	0x07071717
 800eda8:	0c150707 	.word	0x0c150707
 800edac:	4c510c0c 	.word	0x4c510c0c
 800edb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edb4:	3104      	adds	r1, #4
 800edb6:	f7ff bfc3 	b.w	800ed40 <uxr_serialize_DATAWRITER_Representation>
 800edba:	7909      	ldrb	r1, [r1, #4]
 800edbc:	f7fc f8c0 	bl	800af40 <ucdr_serialize_uint8_t>
 800edc0:	b300      	cbz	r0, 800ee04 <uxr_serialize_ObjectVariant.part.0+0x74>
 800edc2:	7923      	ldrb	r3, [r4, #4]
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d042      	beq.n	800ee4e <uxr_serialize_ObjectVariant.part.0+0xbe>
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d040      	beq.n	800ee4e <uxr_serialize_ObjectVariant.part.0+0xbe>
 800edcc:	2001      	movs	r0, #1
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	7909      	ldrb	r1, [r1, #4]
 800edd2:	f7fc f8b5 	bl	800af40 <ucdr_serialize_uint8_t>
 800edd6:	4606      	mov	r6, r0
 800edd8:	b158      	cbz	r0, 800edf2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800edda:	7923      	ldrb	r3, [r4, #4]
 800eddc:	2b02      	cmp	r3, #2
 800edde:	d03c      	beq.n	800ee5a <uxr_serialize_ObjectVariant.part.0+0xca>
 800ede0:	2b03      	cmp	r3, #3
 800ede2:	d106      	bne.n	800edf2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800ede4:	68a2      	ldr	r2, [r4, #8]
 800ede6:	f104 010c 	add.w	r1, r4, #12
 800edea:	4628      	mov	r0, r5
 800edec:	f7fd fa0c 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800edf0:	4606      	mov	r6, r0
 800edf2:	2202      	movs	r2, #2
 800edf4:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800edf8:	4628      	mov	r0, r5
 800edfa:	f005 ffa9 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800edfe:	4030      	ands	r0, r6
 800ee00:	b2c0      	uxtb	r0, r0
 800ee02:	bd70      	pop	{r4, r5, r6, pc}
 800ee04:	2000      	movs	r0, #0
 800ee06:	bd70      	pop	{r4, r5, r6, pc}
 800ee08:	7909      	ldrb	r1, [r1, #4]
 800ee0a:	f7fc f899 	bl	800af40 <ucdr_serialize_uint8_t>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	b158      	cbz	r0, 800ee2a <uxr_serialize_ObjectVariant.part.0+0x9a>
 800ee12:	7923      	ldrb	r3, [r4, #4]
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d003      	beq.n	800ee20 <uxr_serialize_ObjectVariant.part.0+0x90>
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d024      	beq.n	800ee66 <uxr_serialize_ObjectVariant.part.0+0xd6>
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d104      	bne.n	800ee2a <uxr_serialize_ObjectVariant.part.0+0x9a>
 800ee20:	68a1      	ldr	r1, [r4, #8]
 800ee22:	4628      	mov	r0, r5
 800ee24:	f006 f908 	bl	8015038 <ucdr_serialize_string>
 800ee28:	4606      	mov	r6, r0
 800ee2a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f7fc fdae 	bl	800b990 <ucdr_serialize_int16_t>
 800ee34:	4030      	ands	r0, r6
 800ee36:	b2c0      	uxtb	r0, r0
 800ee38:	bd70      	pop	{r4, r5, r6, pc}
 800ee3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee3e:	3104      	adds	r1, #4
 800ee40:	f7ff be76 	b.w	800eb30 <uxr_serialize_CLIENT_Representation>
 800ee44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee48:	3104      	adds	r1, #4
 800ee4a:	f7ff bf2f 	b.w	800ecac <uxr_serialize_AGENT_Representation>
 800ee4e:	68a1      	ldr	r1, [r4, #8]
 800ee50:	4628      	mov	r0, r5
 800ee52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee56:	f006 b8ef 	b.w	8015038 <ucdr_serialize_string>
 800ee5a:	68a1      	ldr	r1, [r4, #8]
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f006 f8eb 	bl	8015038 <ucdr_serialize_string>
 800ee62:	4606      	mov	r6, r0
 800ee64:	e7c5      	b.n	800edf2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800ee66:	68a2      	ldr	r2, [r4, #8]
 800ee68:	f104 010c 	add.w	r1, r4, #12
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	f7fd f9cb 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800ee72:	4606      	mov	r6, r0
 800ee74:	e7d9      	b.n	800ee2a <uxr_serialize_ObjectVariant.part.0+0x9a>
 800ee76:	bf00      	nop

0800ee78 <uxr_deserialize_DATAWRITER_Representation>:
 800ee78:	b570      	push	{r4, r5, r6, lr}
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460d      	mov	r5, r1
 800ee7e:	f7fc f875 	bl	800af6c <ucdr_deserialize_uint8_t>
 800ee82:	4604      	mov	r4, r0
 800ee84:	b130      	cbz	r0, 800ee94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ee86:	782b      	ldrb	r3, [r5, #0]
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	d00c      	beq.n	800eea6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d012      	beq.n	800eeb6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d008      	beq.n	800eea6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ee94:	2202      	movs	r2, #2
 800ee96:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f005 ffbc 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800eea0:	4020      	ands	r0, r4
 800eea2:	b2c0      	uxtb	r0, r0
 800eea4:	bd70      	pop	{r4, r5, r6, pc}
 800eea6:	6869      	ldr	r1, [r5, #4]
 800eea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eeac:	4630      	mov	r0, r6
 800eeae:	f006 f8d1 	bl	8015054 <ucdr_deserialize_string>
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	e7ee      	b.n	800ee94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800eeb6:	1d2b      	adds	r3, r5, #4
 800eeb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eebc:	f105 0108 	add.w	r1, r5, #8
 800eec0:	4630      	mov	r0, r6
 800eec2:	f7fd f9b3 	bl	800c22c <ucdr_deserialize_sequence_uint8_t>
 800eec6:	4604      	mov	r4, r0
 800eec8:	e7e4      	b.n	800ee94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800eeca:	bf00      	nop

0800eecc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800eecc:	b570      	push	{r4, r5, r6, lr}
 800eece:	460d      	mov	r5, r1
 800eed0:	7809      	ldrb	r1, [r1, #0]
 800eed2:	4606      	mov	r6, r0
 800eed4:	f7fc f806 	bl	800aee4 <ucdr_serialize_bool>
 800eed8:	782b      	ldrb	r3, [r5, #0]
 800eeda:	4604      	mov	r4, r0
 800eedc:	b94b      	cbnz	r3, 800eef2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800eede:	7a29      	ldrb	r1, [r5, #8]
 800eee0:	4630      	mov	r0, r6
 800eee2:	f7fb ffff 	bl	800aee4 <ucdr_serialize_bool>
 800eee6:	7a2b      	ldrb	r3, [r5, #8]
 800eee8:	4004      	ands	r4, r0
 800eeea:	b2e4      	uxtb	r4, r4
 800eeec:	b943      	cbnz	r3, 800ef00 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800eeee:	4620      	mov	r0, r4
 800eef0:	bd70      	pop	{r4, r5, r6, pc}
 800eef2:	6869      	ldr	r1, [r5, #4]
 800eef4:	4630      	mov	r0, r6
 800eef6:	f006 f89f 	bl	8015038 <ucdr_serialize_string>
 800eefa:	4004      	ands	r4, r0
 800eefc:	b2e4      	uxtb	r4, r4
 800eefe:	e7ee      	b.n	800eede <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ef00:	68e9      	ldr	r1, [r5, #12]
 800ef02:	4630      	mov	r0, r6
 800ef04:	f006 f898 	bl	8015038 <ucdr_serialize_string>
 800ef08:	4004      	ands	r4, r0
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	bd70      	pop	{r4, r5, r6, pc}
 800ef0e:	bf00      	nop

0800ef10 <uxr_serialize_OBJK_Topic_Binary>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	460d      	mov	r5, r1
 800ef14:	6809      	ldr	r1, [r1, #0]
 800ef16:	4606      	mov	r6, r0
 800ef18:	f006 f88e 	bl	8015038 <ucdr_serialize_string>
 800ef1c:	7929      	ldrb	r1, [r5, #4]
 800ef1e:	4604      	mov	r4, r0
 800ef20:	4630      	mov	r0, r6
 800ef22:	f7fb ffdf 	bl	800aee4 <ucdr_serialize_bool>
 800ef26:	792b      	ldrb	r3, [r5, #4]
 800ef28:	4004      	ands	r4, r0
 800ef2a:	b2e4      	uxtb	r4, r4
 800ef2c:	b943      	cbnz	r3, 800ef40 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ef2e:	7b29      	ldrb	r1, [r5, #12]
 800ef30:	4630      	mov	r0, r6
 800ef32:	f7fb ffd7 	bl	800aee4 <ucdr_serialize_bool>
 800ef36:	7b2b      	ldrb	r3, [r5, #12]
 800ef38:	4004      	ands	r4, r0
 800ef3a:	b93b      	cbnz	r3, 800ef4c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}
 800ef40:	68a9      	ldr	r1, [r5, #8]
 800ef42:	4630      	mov	r0, r6
 800ef44:	f006 f878 	bl	8015038 <ucdr_serialize_string>
 800ef48:	4004      	ands	r4, r0
 800ef4a:	e7f0      	b.n	800ef2e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ef4c:	6929      	ldr	r1, [r5, #16]
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f006 f872 	bl	8015038 <ucdr_serialize_string>
 800ef54:	4004      	ands	r4, r0
 800ef56:	b2e4      	uxtb	r4, r4
 800ef58:	4620      	mov	r0, r4
 800ef5a:	bd70      	pop	{r4, r5, r6, pc}

0800ef5c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ef5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef60:	460c      	mov	r4, r1
 800ef62:	7809      	ldrb	r1, [r1, #0]
 800ef64:	4606      	mov	r6, r0
 800ef66:	f7fb ffbd 	bl	800aee4 <ucdr_serialize_bool>
 800ef6a:	7823      	ldrb	r3, [r4, #0]
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	b96b      	cbnz	r3, 800ef8c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ef70:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ef74:	4630      	mov	r0, r6
 800ef76:	f7fb ffb5 	bl	800aee4 <ucdr_serialize_bool>
 800ef7a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ef7e:	4005      	ands	r5, r0
 800ef80:	b2ed      	uxtb	r5, r5
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d16a      	bne.n	800f05c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800ef86:	4628      	mov	r0, r5
 800ef88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef8c:	6861      	ldr	r1, [r4, #4]
 800ef8e:	4630      	mov	r0, r6
 800ef90:	f7fc f9f2 	bl	800b378 <ucdr_serialize_uint32_t>
 800ef94:	6863      	ldr	r3, [r4, #4]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d06c      	beq.n	800f074 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d068      	beq.n	800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ef9e:	68a1      	ldr	r1, [r4, #8]
 800efa0:	4630      	mov	r0, r6
 800efa2:	f006 f849 	bl	8015038 <ucdr_serialize_string>
 800efa6:	6862      	ldr	r2, [r4, #4]
 800efa8:	2a01      	cmp	r2, #1
 800efaa:	d953      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800efac:	2800      	cmp	r0, #0
 800efae:	d05f      	beq.n	800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800efb0:	68e1      	ldr	r1, [r4, #12]
 800efb2:	4630      	mov	r0, r6
 800efb4:	f006 f840 	bl	8015038 <ucdr_serialize_string>
 800efb8:	6862      	ldr	r2, [r4, #4]
 800efba:	2a02      	cmp	r2, #2
 800efbc:	d94a      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d056      	beq.n	800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800efc2:	6921      	ldr	r1, [r4, #16]
 800efc4:	4630      	mov	r0, r6
 800efc6:	f006 f837 	bl	8015038 <ucdr_serialize_string>
 800efca:	6862      	ldr	r2, [r4, #4]
 800efcc:	2a03      	cmp	r2, #3
 800efce:	d941      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d04d      	beq.n	800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800efd4:	6961      	ldr	r1, [r4, #20]
 800efd6:	4630      	mov	r0, r6
 800efd8:	f006 f82e 	bl	8015038 <ucdr_serialize_string>
 800efdc:	6862      	ldr	r2, [r4, #4]
 800efde:	2a04      	cmp	r2, #4
 800efe0:	d938      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d044      	beq.n	800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800efe6:	69a1      	ldr	r1, [r4, #24]
 800efe8:	4630      	mov	r0, r6
 800efea:	f006 f825 	bl	8015038 <ucdr_serialize_string>
 800efee:	6862      	ldr	r2, [r4, #4]
 800eff0:	2a05      	cmp	r2, #5
 800eff2:	d92f      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d03b      	beq.n	800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800eff8:	69e1      	ldr	r1, [r4, #28]
 800effa:	4630      	mov	r0, r6
 800effc:	f006 f81c 	bl	8015038 <ucdr_serialize_string>
 800f000:	6862      	ldr	r2, [r4, #4]
 800f002:	2a06      	cmp	r2, #6
 800f004:	d926      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f006:	b398      	cbz	r0, 800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f008:	6a21      	ldr	r1, [r4, #32]
 800f00a:	4630      	mov	r0, r6
 800f00c:	f006 f814 	bl	8015038 <ucdr_serialize_string>
 800f010:	6862      	ldr	r2, [r4, #4]
 800f012:	2a07      	cmp	r2, #7
 800f014:	d91e      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f016:	b358      	cbz	r0, 800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f018:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f01a:	4630      	mov	r0, r6
 800f01c:	f006 f80c 	bl	8015038 <ucdr_serialize_string>
 800f020:	6862      	ldr	r2, [r4, #4]
 800f022:	2a08      	cmp	r2, #8
 800f024:	d916      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f026:	b318      	cbz	r0, 800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f028:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f02a:	4630      	mov	r0, r6
 800f02c:	f006 f804 	bl	8015038 <ucdr_serialize_string>
 800f030:	6862      	ldr	r2, [r4, #4]
 800f032:	2a09      	cmp	r2, #9
 800f034:	d90e      	bls.n	800f054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f036:	b1d8      	cbz	r0, 800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f038:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800f03c:	2709      	movs	r7, #9
 800f03e:	e000      	b.n	800f042 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f040:	b1b0      	cbz	r0, 800f070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f042:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800f046:	4630      	mov	r0, r6
 800f048:	f005 fff6 	bl	8015038 <ucdr_serialize_string>
 800f04c:	6862      	ldr	r2, [r4, #4]
 800f04e:	3701      	adds	r7, #1
 800f050:	4297      	cmp	r7, r2
 800f052:	d3f5      	bcc.n	800f040 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f054:	ea05 0300 	and.w	r3, r5, r0
 800f058:	b2dd      	uxtb	r5, r3
 800f05a:	e789      	b.n	800ef70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f05c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f05e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f062:	4630      	mov	r0, r6
 800f064:	f7fd f8d0 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800f068:	4005      	ands	r5, r0
 800f06a:	4628      	mov	r0, r5
 800f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f070:	2500      	movs	r5, #0
 800f072:	e77d      	b.n	800ef70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f074:	4028      	ands	r0, r5
 800f076:	b2c5      	uxtb	r5, r0
 800f078:	e77a      	b.n	800ef70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f07a:	bf00      	nop

0800f07c <uxr_serialize_OBJK_Publisher_Binary>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	460d      	mov	r5, r1
 800f080:	7809      	ldrb	r1, [r1, #0]
 800f082:	4606      	mov	r6, r0
 800f084:	f7fb ff2e 	bl	800aee4 <ucdr_serialize_bool>
 800f088:	782b      	ldrb	r3, [r5, #0]
 800f08a:	4604      	mov	r4, r0
 800f08c:	b94b      	cbnz	r3, 800f0a2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f08e:	7a29      	ldrb	r1, [r5, #8]
 800f090:	4630      	mov	r0, r6
 800f092:	f7fb ff27 	bl	800aee4 <ucdr_serialize_bool>
 800f096:	7a2b      	ldrb	r3, [r5, #8]
 800f098:	4004      	ands	r4, r0
 800f09a:	b2e4      	uxtb	r4, r4
 800f09c:	b943      	cbnz	r3, 800f0b0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f09e:	4620      	mov	r0, r4
 800f0a0:	bd70      	pop	{r4, r5, r6, pc}
 800f0a2:	6869      	ldr	r1, [r5, #4]
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f005 ffc7 	bl	8015038 <ucdr_serialize_string>
 800f0aa:	4004      	ands	r4, r0
 800f0ac:	b2e4      	uxtb	r4, r4
 800f0ae:	e7ee      	b.n	800f08e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f0b0:	f105 010c 	add.w	r1, r5, #12
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f7ff ff51 	bl	800ef5c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f0ba:	4004      	ands	r4, r0
 800f0bc:	4620      	mov	r0, r4
 800f0be:	bd70      	pop	{r4, r5, r6, pc}

0800f0c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	7809      	ldrb	r1, [r1, #0]
 800f0c8:	4606      	mov	r6, r0
 800f0ca:	f7fb ff0b 	bl	800aee4 <ucdr_serialize_bool>
 800f0ce:	7823      	ldrb	r3, [r4, #0]
 800f0d0:	4605      	mov	r5, r0
 800f0d2:	b96b      	cbnz	r3, 800f0f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f0d4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f7fb ff03 	bl	800aee4 <ucdr_serialize_bool>
 800f0de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f0e2:	4005      	ands	r5, r0
 800f0e4:	b2ed      	uxtb	r5, r5
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d16a      	bne.n	800f1c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f0:	6861      	ldr	r1, [r4, #4]
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f7fc f940 	bl	800b378 <ucdr_serialize_uint32_t>
 800f0f8:	6863      	ldr	r3, [r4, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d06c      	beq.n	800f1d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d068      	beq.n	800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f102:	68a1      	ldr	r1, [r4, #8]
 800f104:	4630      	mov	r0, r6
 800f106:	f005 ff97 	bl	8015038 <ucdr_serialize_string>
 800f10a:	6862      	ldr	r2, [r4, #4]
 800f10c:	2a01      	cmp	r2, #1
 800f10e:	d953      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f110:	2800      	cmp	r0, #0
 800f112:	d05f      	beq.n	800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f114:	68e1      	ldr	r1, [r4, #12]
 800f116:	4630      	mov	r0, r6
 800f118:	f005 ff8e 	bl	8015038 <ucdr_serialize_string>
 800f11c:	6862      	ldr	r2, [r4, #4]
 800f11e:	2a02      	cmp	r2, #2
 800f120:	d94a      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f122:	2800      	cmp	r0, #0
 800f124:	d056      	beq.n	800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f126:	6921      	ldr	r1, [r4, #16]
 800f128:	4630      	mov	r0, r6
 800f12a:	f005 ff85 	bl	8015038 <ucdr_serialize_string>
 800f12e:	6862      	ldr	r2, [r4, #4]
 800f130:	2a03      	cmp	r2, #3
 800f132:	d941      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f134:	2800      	cmp	r0, #0
 800f136:	d04d      	beq.n	800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f138:	6961      	ldr	r1, [r4, #20]
 800f13a:	4630      	mov	r0, r6
 800f13c:	f005 ff7c 	bl	8015038 <ucdr_serialize_string>
 800f140:	6862      	ldr	r2, [r4, #4]
 800f142:	2a04      	cmp	r2, #4
 800f144:	d938      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f146:	2800      	cmp	r0, #0
 800f148:	d044      	beq.n	800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f14a:	69a1      	ldr	r1, [r4, #24]
 800f14c:	4630      	mov	r0, r6
 800f14e:	f005 ff73 	bl	8015038 <ucdr_serialize_string>
 800f152:	6862      	ldr	r2, [r4, #4]
 800f154:	2a05      	cmp	r2, #5
 800f156:	d92f      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f158:	2800      	cmp	r0, #0
 800f15a:	d03b      	beq.n	800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f15c:	69e1      	ldr	r1, [r4, #28]
 800f15e:	4630      	mov	r0, r6
 800f160:	f005 ff6a 	bl	8015038 <ucdr_serialize_string>
 800f164:	6862      	ldr	r2, [r4, #4]
 800f166:	2a06      	cmp	r2, #6
 800f168:	d926      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f16a:	b398      	cbz	r0, 800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f16c:	6a21      	ldr	r1, [r4, #32]
 800f16e:	4630      	mov	r0, r6
 800f170:	f005 ff62 	bl	8015038 <ucdr_serialize_string>
 800f174:	6862      	ldr	r2, [r4, #4]
 800f176:	2a07      	cmp	r2, #7
 800f178:	d91e      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f17a:	b358      	cbz	r0, 800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f17c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f17e:	4630      	mov	r0, r6
 800f180:	f005 ff5a 	bl	8015038 <ucdr_serialize_string>
 800f184:	6862      	ldr	r2, [r4, #4]
 800f186:	2a08      	cmp	r2, #8
 800f188:	d916      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f18a:	b318      	cbz	r0, 800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f18c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f18e:	4630      	mov	r0, r6
 800f190:	f005 ff52 	bl	8015038 <ucdr_serialize_string>
 800f194:	6862      	ldr	r2, [r4, #4]
 800f196:	2a09      	cmp	r2, #9
 800f198:	d90e      	bls.n	800f1b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f19a:	b1d8      	cbz	r0, 800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f19c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800f1a0:	2709      	movs	r7, #9
 800f1a2:	e000      	b.n	800f1a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f1a4:	b1b0      	cbz	r0, 800f1d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f1a6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f005 ff44 	bl	8015038 <ucdr_serialize_string>
 800f1b0:	6862      	ldr	r2, [r4, #4]
 800f1b2:	3701      	adds	r7, #1
 800f1b4:	4297      	cmp	r7, r2
 800f1b6:	d3f5      	bcc.n	800f1a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f1b8:	ea05 0300 	and.w	r3, r5, r0
 800f1bc:	b2dd      	uxtb	r5, r3
 800f1be:	e789      	b.n	800f0d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f1c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f1c2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f7fd f81e 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800f1cc:	4005      	ands	r5, r0
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d4:	2500      	movs	r5, #0
 800f1d6:	e77d      	b.n	800f0d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f1d8:	4028      	ands	r0, r5
 800f1da:	b2c5      	uxtb	r5, r0
 800f1dc:	e77a      	b.n	800f0d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f1de:	bf00      	nop

0800f1e0 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	460d      	mov	r5, r1
 800f1e4:	7809      	ldrb	r1, [r1, #0]
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	f7fb fe7c 	bl	800aee4 <ucdr_serialize_bool>
 800f1ec:	782b      	ldrb	r3, [r5, #0]
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	b94b      	cbnz	r3, 800f206 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f1f2:	7a29      	ldrb	r1, [r5, #8]
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	f7fb fe75 	bl	800aee4 <ucdr_serialize_bool>
 800f1fa:	7a2b      	ldrb	r3, [r5, #8]
 800f1fc:	4004      	ands	r4, r0
 800f1fe:	b2e4      	uxtb	r4, r4
 800f200:	b943      	cbnz	r3, 800f214 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f202:	4620      	mov	r0, r4
 800f204:	bd70      	pop	{r4, r5, r6, pc}
 800f206:	6869      	ldr	r1, [r5, #4]
 800f208:	4630      	mov	r0, r6
 800f20a:	f005 ff15 	bl	8015038 <ucdr_serialize_string>
 800f20e:	4004      	ands	r4, r0
 800f210:	b2e4      	uxtb	r4, r4
 800f212:	e7ee      	b.n	800f1f2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f214:	f105 010c 	add.w	r1, r5, #12
 800f218:	4630      	mov	r0, r6
 800f21a:	f7ff ff51 	bl	800f0c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f21e:	4004      	ands	r4, r0
 800f220:	4620      	mov	r0, r4
 800f222:	bd70      	pop	{r4, r5, r6, pc}

0800f224 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f224:	b570      	push	{r4, r5, r6, lr}
 800f226:	460d      	mov	r5, r1
 800f228:	8809      	ldrh	r1, [r1, #0]
 800f22a:	4606      	mov	r6, r0
 800f22c:	f7fb feb4 	bl	800af98 <ucdr_serialize_uint16_t>
 800f230:	78a9      	ldrb	r1, [r5, #2]
 800f232:	4604      	mov	r4, r0
 800f234:	4630      	mov	r0, r6
 800f236:	f7fb fe55 	bl	800aee4 <ucdr_serialize_bool>
 800f23a:	78ab      	ldrb	r3, [r5, #2]
 800f23c:	4004      	ands	r4, r0
 800f23e:	b2e4      	uxtb	r4, r4
 800f240:	b9b3      	cbnz	r3, 800f270 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800f242:	79a9      	ldrb	r1, [r5, #6]
 800f244:	4630      	mov	r0, r6
 800f246:	f7fb fe4d 	bl	800aee4 <ucdr_serialize_bool>
 800f24a:	79ab      	ldrb	r3, [r5, #6]
 800f24c:	4004      	ands	r4, r0
 800f24e:	bb33      	cbnz	r3, 800f29e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800f250:	7b29      	ldrb	r1, [r5, #12]
 800f252:	4630      	mov	r0, r6
 800f254:	f7fb fe46 	bl	800aee4 <ucdr_serialize_bool>
 800f258:	7b2b      	ldrb	r3, [r5, #12]
 800f25a:	4004      	ands	r4, r0
 800f25c:	b9c3      	cbnz	r3, 800f290 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800f25e:	7d29      	ldrb	r1, [r5, #20]
 800f260:	4630      	mov	r0, r6
 800f262:	f7fb fe3f 	bl	800aee4 <ucdr_serialize_bool>
 800f266:	7d2b      	ldrb	r3, [r5, #20]
 800f268:	4004      	ands	r4, r0
 800f26a:	b93b      	cbnz	r3, 800f27c <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800f26c:	4620      	mov	r0, r4
 800f26e:	bd70      	pop	{r4, r5, r6, pc}
 800f270:	88a9      	ldrh	r1, [r5, #4]
 800f272:	4630      	mov	r0, r6
 800f274:	f7fb fe90 	bl	800af98 <ucdr_serialize_uint16_t>
 800f278:	4004      	ands	r4, r0
 800f27a:	e7e2      	b.n	800f242 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800f27c:	69aa      	ldr	r2, [r5, #24]
 800f27e:	f105 011c 	add.w	r1, r5, #28
 800f282:	4630      	mov	r0, r6
 800f284:	f7fc ffc0 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800f288:	4004      	ands	r4, r0
 800f28a:	b2e4      	uxtb	r4, r4
 800f28c:	4620      	mov	r0, r4
 800f28e:	bd70      	pop	{r4, r5, r6, pc}
 800f290:	6929      	ldr	r1, [r5, #16]
 800f292:	4630      	mov	r0, r6
 800f294:	f7fc f870 	bl	800b378 <ucdr_serialize_uint32_t>
 800f298:	4004      	ands	r4, r0
 800f29a:	b2e4      	uxtb	r4, r4
 800f29c:	e7df      	b.n	800f25e <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800f29e:	68a9      	ldr	r1, [r5, #8]
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f7fc f869 	bl	800b378 <ucdr_serialize_uint32_t>
 800f2a6:	4004      	ands	r4, r0
 800f2a8:	b2e4      	uxtb	r4, r4
 800f2aa:	e7d1      	b.n	800f250 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800f2ac <uxr_serialize_OBJK_DataReader_Binary>:
 800f2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	f005 fd4c 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f2b8:	78a1      	ldrb	r1, [r4, #2]
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f7fb fe11 	bl	800aee4 <ucdr_serialize_bool>
 800f2c2:	78a3      	ldrb	r3, [r4, #2]
 800f2c4:	4005      	ands	r5, r0
 800f2c6:	b2ed      	uxtb	r5, r5
 800f2c8:	b90b      	cbnz	r3, 800f2ce <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ce:	f104 0108 	add.w	r1, r4, #8
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f7ff ffa6 	bl	800f224 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f2d8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f2dc:	4607      	mov	r7, r0
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f7fb fe00 	bl	800aee4 <ucdr_serialize_bool>
 800f2e4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f2e8:	4007      	ands	r7, r0
 800f2ea:	b2ff      	uxtb	r7, r7
 800f2ec:	b95b      	cbnz	r3, 800f306 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f2ee:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	f7fb fdf6 	bl	800aee4 <ucdr_serialize_bool>
 800f2f8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f2fc:	4007      	ands	r7, r0
 800f2fe:	b94b      	cbnz	r3, 800f314 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f300:	403d      	ands	r5, r7
 800f302:	4628      	mov	r0, r5
 800f304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f306:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f30a:	4630      	mov	r0, r6
 800f30c:	f7fc fa78 	bl	800b800 <ucdr_serialize_uint64_t>
 800f310:	4007      	ands	r7, r0
 800f312:	e7ec      	b.n	800f2ee <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f314:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f316:	4630      	mov	r0, r6
 800f318:	f005 fe8e 	bl	8015038 <ucdr_serialize_string>
 800f31c:	4007      	ands	r7, r0
 800f31e:	b2ff      	uxtb	r7, r7
 800f320:	e7ee      	b.n	800f300 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f322:	bf00      	nop

0800f324 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f326:	2202      	movs	r2, #2
 800f328:	460d      	mov	r5, r1
 800f32a:	4606      	mov	r6, r0
 800f32c:	f005 fd10 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f330:	78a9      	ldrb	r1, [r5, #2]
 800f332:	4604      	mov	r4, r0
 800f334:	4630      	mov	r0, r6
 800f336:	f7fb fdd5 	bl	800aee4 <ucdr_serialize_bool>
 800f33a:	78ab      	ldrb	r3, [r5, #2]
 800f33c:	4004      	ands	r4, r0
 800f33e:	b2e4      	uxtb	r4, r4
 800f340:	b90b      	cbnz	r3, 800f346 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f342:	4620      	mov	r0, r4
 800f344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f346:	f105 0108 	add.w	r1, r5, #8
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7ff ff6a 	bl	800f224 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f350:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800f354:	4607      	mov	r7, r0
 800f356:	4630      	mov	r0, r6
 800f358:	f7fb fdc4 	bl	800aee4 <ucdr_serialize_bool>
 800f35c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f360:	4007      	ands	r7, r0
 800f362:	b2ff      	uxtb	r7, r7
 800f364:	b913      	cbnz	r3, 800f36c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f366:	403c      	ands	r4, r7
 800f368:	4620      	mov	r0, r4
 800f36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f36c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800f370:	4630      	mov	r0, r6
 800f372:	f7fc fa45 	bl	800b800 <ucdr_serialize_uint64_t>
 800f376:	4007      	ands	r7, r0
 800f378:	e7f5      	b.n	800f366 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f37a:	bf00      	nop

0800f37c <uxr_deserialize_ObjectVariant>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	4605      	mov	r5, r0
 800f380:	460e      	mov	r6, r1
 800f382:	f7fb fdf3 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f386:	b168      	cbz	r0, 800f3a4 <uxr_deserialize_ObjectVariant+0x28>
 800f388:	7833      	ldrb	r3, [r6, #0]
 800f38a:	3b01      	subs	r3, #1
 800f38c:	4604      	mov	r4, r0
 800f38e:	2b0d      	cmp	r3, #13
 800f390:	d809      	bhi.n	800f3a6 <uxr_deserialize_ObjectVariant+0x2a>
 800f392:	e8df f003 	tbb	[pc, r3]
 800f396:	0a64      	.short	0x0a64
 800f398:	0a0a2323 	.word	0x0a0a2323
 800f39c:	10080a0a 	.word	0x10080a0a
 800f3a0:	5e411010 	.word	0x5e411010
 800f3a4:	2400      	movs	r4, #0
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	bd70      	pop	{r4, r5, r6, pc}
 800f3aa:	1d31      	adds	r1, r6, #4
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3b2:	f7ff bd61 	b.w	800ee78 <uxr_deserialize_DATAWRITER_Representation>
 800f3b6:	1d31      	adds	r1, r6, #4
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f7fb fdd7 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d0f0      	beq.n	800f3a4 <uxr_deserialize_ObjectVariant+0x28>
 800f3c2:	7933      	ldrb	r3, [r6, #4]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d001      	beq.n	800f3cc <uxr_deserialize_ObjectVariant+0x50>
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d1ec      	bne.n	800f3a6 <uxr_deserialize_ObjectVariant+0x2a>
 800f3cc:	68b1      	ldr	r1, [r6, #8]
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3d8:	f005 be3c 	b.w	8015054 <ucdr_deserialize_string>
 800f3dc:	1d31      	adds	r1, r6, #4
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f7fb fdc4 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	b170      	cbz	r0, 800f406 <uxr_deserialize_ObjectVariant+0x8a>
 800f3e8:	7933      	ldrb	r3, [r6, #4]
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	d053      	beq.n	800f496 <uxr_deserialize_ObjectVariant+0x11a>
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d109      	bne.n	800f406 <uxr_deserialize_ObjectVariant+0x8a>
 800f3f2:	f106 0308 	add.w	r3, r6, #8
 800f3f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3fa:	f106 010c 	add.w	r1, r6, #12
 800f3fe:	4628      	mov	r0, r5
 800f400:	f7fc ff14 	bl	800c22c <ucdr_deserialize_sequence_uint8_t>
 800f404:	4604      	mov	r4, r0
 800f406:	2202      	movs	r2, #2
 800f408:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f40c:	4628      	mov	r0, r5
 800f40e:	f005 fd03 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f412:	4004      	ands	r4, r0
 800f414:	b2e4      	uxtb	r4, r4
 800f416:	e7c6      	b.n	800f3a6 <uxr_deserialize_ObjectVariant+0x2a>
 800f418:	2204      	movs	r2, #4
 800f41a:	18b1      	adds	r1, r6, r2
 800f41c:	4628      	mov	r0, r5
 800f41e:	f005 fcfb 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f422:	2202      	movs	r2, #2
 800f424:	f106 0108 	add.w	r1, r6, #8
 800f428:	4604      	mov	r4, r0
 800f42a:	4628      	mov	r0, r5
 800f42c:	f005 fcf4 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f430:	2202      	movs	r2, #2
 800f432:	4004      	ands	r4, r0
 800f434:	f106 010a 	add.w	r1, r6, #10
 800f438:	4628      	mov	r0, r5
 800f43a:	f005 fced 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f43e:	b2e4      	uxtb	r4, r4
 800f440:	4603      	mov	r3, r0
 800f442:	f106 010c 	add.w	r1, r6, #12
 800f446:	4628      	mov	r0, r5
 800f448:	401c      	ands	r4, r3
 800f44a:	f7fb fd61 	bl	800af10 <ucdr_deserialize_bool>
 800f44e:	4004      	ands	r4, r0
 800f450:	e7a9      	b.n	800f3a6 <uxr_deserialize_ObjectVariant+0x2a>
 800f452:	1d31      	adds	r1, r6, #4
 800f454:	4628      	mov	r0, r5
 800f456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f45a:	f7ff bbc3 	b.w	800ebe4 <uxr_deserialize_CLIENT_Representation>
 800f45e:	1d31      	adds	r1, r6, #4
 800f460:	4628      	mov	r0, r5
 800f462:	f7fb fd83 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f466:	4604      	mov	r4, r0
 800f468:	b168      	cbz	r0, 800f486 <uxr_deserialize_ObjectVariant+0x10a>
 800f46a:	7933      	ldrb	r3, [r6, #4]
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d003      	beq.n	800f478 <uxr_deserialize_ObjectVariant+0xfc>
 800f470:	2b03      	cmp	r3, #3
 800f472:	d018      	beq.n	800f4a6 <uxr_deserialize_ObjectVariant+0x12a>
 800f474:	2b01      	cmp	r3, #1
 800f476:	d106      	bne.n	800f486 <uxr_deserialize_ObjectVariant+0x10a>
 800f478:	68b1      	ldr	r1, [r6, #8]
 800f47a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f47e:	4628      	mov	r0, r5
 800f480:	f005 fde8 	bl	8015054 <ucdr_deserialize_string>
 800f484:	4604      	mov	r4, r0
 800f486:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f48a:	4628      	mov	r0, r5
 800f48c:	f7fc fb0a 	bl	800baa4 <ucdr_deserialize_int16_t>
 800f490:	4004      	ands	r4, r0
 800f492:	b2e4      	uxtb	r4, r4
 800f494:	e787      	b.n	800f3a6 <uxr_deserialize_ObjectVariant+0x2a>
 800f496:	68b1      	ldr	r1, [r6, #8]
 800f498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f49c:	4628      	mov	r0, r5
 800f49e:	f005 fdd9 	bl	8015054 <ucdr_deserialize_string>
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	e7af      	b.n	800f406 <uxr_deserialize_ObjectVariant+0x8a>
 800f4a6:	f106 0308 	add.w	r3, r6, #8
 800f4aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4ae:	f106 010c 	add.w	r1, r6, #12
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f7fc feba 	bl	800c22c <ucdr_deserialize_sequence_uint8_t>
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	e7e4      	b.n	800f486 <uxr_deserialize_ObjectVariant+0x10a>

0800f4bc <uxr_deserialize_BaseObjectRequest>:
 800f4bc:	b570      	push	{r4, r5, r6, lr}
 800f4be:	2202      	movs	r2, #2
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	460e      	mov	r6, r1
 800f4c4:	f005 fca8 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f4c8:	2202      	movs	r2, #2
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	18b1      	adds	r1, r6, r2
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f005 fca2 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f4d4:	4020      	ands	r0, r4
 800f4d6:	b2c0      	uxtb	r0, r0
 800f4d8:	bd70      	pop	{r4, r5, r6, pc}
 800f4da:	bf00      	nop

0800f4dc <uxr_serialize_ActivityInfoVariant>:
 800f4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	7809      	ldrb	r1, [r1, #0]
 800f4e4:	4606      	mov	r6, r0
 800f4e6:	f7fb fd2b 	bl	800af40 <ucdr_serialize_uint8_t>
 800f4ea:	b130      	cbz	r0, 800f4fa <uxr_serialize_ActivityInfoVariant+0x1e>
 800f4ec:	782b      	ldrb	r3, [r5, #0]
 800f4ee:	2b06      	cmp	r3, #6
 800f4f0:	d014      	beq.n	800f51c <uxr_serialize_ActivityInfoVariant+0x40>
 800f4f2:	2b0d      	cmp	r3, #13
 800f4f4:	d019      	beq.n	800f52a <uxr_serialize_ActivityInfoVariant+0x4e>
 800f4f6:	2b05      	cmp	r3, #5
 800f4f8:	d001      	beq.n	800f4fe <uxr_serialize_ActivityInfoVariant+0x22>
 800f4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4fe:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f502:	4630      	mov	r0, r6
 800f504:	f7fc fa44 	bl	800b990 <ucdr_serialize_int16_t>
 800f508:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f50c:	4604      	mov	r4, r0
 800f50e:	4630      	mov	r0, r6
 800f510:	f7fc f976 	bl	800b800 <ucdr_serialize_uint64_t>
 800f514:	4020      	ands	r0, r4
 800f516:	b2c0      	uxtb	r0, r0
 800f518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f51c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f520:	4630      	mov	r0, r6
 800f522:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f526:	f7fc ba33 	b.w	800b990 <ucdr_serialize_int16_t>
 800f52a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f52e:	4630      	mov	r0, r6
 800f530:	f7fc fa2e 	bl	800b990 <ucdr_serialize_int16_t>
 800f534:	68e9      	ldr	r1, [r5, #12]
 800f536:	4681      	mov	r9, r0
 800f538:	4630      	mov	r0, r6
 800f53a:	f7fb ff1d 	bl	800b378 <ucdr_serialize_uint32_t>
 800f53e:	68eb      	ldr	r3, [r5, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d051      	beq.n	800f5e8 <uxr_serialize_ActivityInfoVariant+0x10c>
 800f544:	b1e8      	cbz	r0, 800f582 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f546:	f105 0714 	add.w	r7, r5, #20
 800f54a:	f04f 0800 	mov.w	r8, #0
 800f54e:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 800f552:	4630      	mov	r0, r6
 800f554:	f7fb fcf4 	bl	800af40 <ucdr_serialize_uint8_t>
 800f558:	b198      	cbz	r0, 800f582 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f55a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 800f55e:	2b03      	cmp	r3, #3
 800f560:	d839      	bhi.n	800f5d6 <uxr_serialize_ActivityInfoVariant+0xfa>
 800f562:	e8df f003 	tbb	[pc, r3]
 800f566:	1e2b      	.short	0x1e2b
 800f568:	0211      	.short	0x0211
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	4630      	mov	r0, r6
 800f56e:	f005 fd63 	bl	8015038 <ucdr_serialize_string>
 800f572:	68eb      	ldr	r3, [r5, #12]
 800f574:	f108 0801 	add.w	r8, r8, #1
 800f578:	4598      	cmp	r8, r3
 800f57a:	d231      	bcs.n	800f5e0 <uxr_serialize_ActivityInfoVariant+0x104>
 800f57c:	3718      	adds	r7, #24
 800f57e:	2800      	cmp	r0, #0
 800f580:	d1e5      	bne.n	800f54e <uxr_serialize_ActivityInfoVariant+0x72>
 800f582:	2000      	movs	r0, #0
 800f584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f588:	2210      	movs	r2, #16
 800f58a:	4639      	mov	r1, r7
 800f58c:	4630      	mov	r0, r6
 800f58e:	f005 fbdf 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f592:	6939      	ldr	r1, [r7, #16]
 800f594:	4604      	mov	r4, r0
 800f596:	4630      	mov	r0, r6
 800f598:	f7fb feee 	bl	800b378 <ucdr_serialize_uint32_t>
 800f59c:	4020      	ands	r0, r4
 800f59e:	b2c0      	uxtb	r0, r0
 800f5a0:	e7e7      	b.n	800f572 <uxr_serialize_ActivityInfoVariant+0x96>
 800f5a2:	2204      	movs	r2, #4
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f005 fbd2 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f5ac:	88b9      	ldrh	r1, [r7, #4]
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f7fb fcf1 	bl	800af98 <ucdr_serialize_uint16_t>
 800f5b6:	4020      	ands	r0, r4
 800f5b8:	b2c0      	uxtb	r0, r0
 800f5ba:	e7da      	b.n	800f572 <uxr_serialize_ActivityInfoVariant+0x96>
 800f5bc:	2202      	movs	r2, #2
 800f5be:	4639      	mov	r1, r7
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f005 fbc5 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f5c6:	78b9      	ldrb	r1, [r7, #2]
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	f7fb fcb8 	bl	800af40 <ucdr_serialize_uint8_t>
 800f5d0:	4020      	ands	r0, r4
 800f5d2:	b2c0      	uxtb	r0, r0
 800f5d4:	e7cd      	b.n	800f572 <uxr_serialize_ActivityInfoVariant+0x96>
 800f5d6:	68eb      	ldr	r3, [r5, #12]
 800f5d8:	f108 0801 	add.w	r8, r8, #1
 800f5dc:	4598      	cmp	r8, r3
 800f5de:	d308      	bcc.n	800f5f2 <uxr_serialize_ActivityInfoVariant+0x116>
 800f5e0:	ea09 0000 	and.w	r0, r9, r0
 800f5e4:	b2c0      	uxtb	r0, r0
 800f5e6:	e788      	b.n	800f4fa <uxr_serialize_ActivityInfoVariant+0x1e>
 800f5e8:	ea09 0900 	and.w	r9, r9, r0
 800f5ec:	fa5f f089 	uxtb.w	r0, r9
 800f5f0:	e783      	b.n	800f4fa <uxr_serialize_ActivityInfoVariant+0x1e>
 800f5f2:	3718      	adds	r7, #24
 800f5f4:	e7ab      	b.n	800f54e <uxr_serialize_ActivityInfoVariant+0x72>
 800f5f6:	bf00      	nop

0800f5f8 <uxr_deserialize_BaseObjectReply>:
 800f5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	4606      	mov	r6, r0
 800f600:	460f      	mov	r7, r1
 800f602:	f005 fc09 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f606:	2202      	movs	r2, #2
 800f608:	18b9      	adds	r1, r7, r2
 800f60a:	4605      	mov	r5, r0
 800f60c:	4630      	mov	r0, r6
 800f60e:	f005 fc03 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f612:	1d39      	adds	r1, r7, #4
 800f614:	4680      	mov	r8, r0
 800f616:	4630      	mov	r0, r6
 800f618:	f7fb fca8 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f61c:	1d79      	adds	r1, r7, #5
 800f61e:	4604      	mov	r4, r0
 800f620:	4630      	mov	r0, r6
 800f622:	f7fb fca3 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f626:	ea05 0508 	and.w	r5, r5, r8
 800f62a:	402c      	ands	r4, r5
 800f62c:	4020      	ands	r0, r4
 800f62e:	b2c0      	uxtb	r0, r0
 800f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f634 <uxr_serialize_ReadSpecification>:
 800f634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f638:	460d      	mov	r5, r1
 800f63a:	7809      	ldrb	r1, [r1, #0]
 800f63c:	4606      	mov	r6, r0
 800f63e:	f7fb fc7f 	bl	800af40 <ucdr_serialize_uint8_t>
 800f642:	7869      	ldrb	r1, [r5, #1]
 800f644:	4604      	mov	r4, r0
 800f646:	4630      	mov	r0, r6
 800f648:	f7fb fc7a 	bl	800af40 <ucdr_serialize_uint8_t>
 800f64c:	78a9      	ldrb	r1, [r5, #2]
 800f64e:	4004      	ands	r4, r0
 800f650:	4630      	mov	r0, r6
 800f652:	f7fb fc47 	bl	800aee4 <ucdr_serialize_bool>
 800f656:	78ab      	ldrb	r3, [r5, #2]
 800f658:	b2e4      	uxtb	r4, r4
 800f65a:	4004      	ands	r4, r0
 800f65c:	b94b      	cbnz	r3, 800f672 <uxr_serialize_ReadSpecification+0x3e>
 800f65e:	7a29      	ldrb	r1, [r5, #8]
 800f660:	4630      	mov	r0, r6
 800f662:	f7fb fc3f 	bl	800aee4 <ucdr_serialize_bool>
 800f666:	7a2b      	ldrb	r3, [r5, #8]
 800f668:	4004      	ands	r4, r0
 800f66a:	b943      	cbnz	r3, 800f67e <uxr_serialize_ReadSpecification+0x4a>
 800f66c:	4620      	mov	r0, r4
 800f66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f672:	6869      	ldr	r1, [r5, #4]
 800f674:	4630      	mov	r0, r6
 800f676:	f005 fcdf 	bl	8015038 <ucdr_serialize_string>
 800f67a:	4004      	ands	r4, r0
 800f67c:	e7ef      	b.n	800f65e <uxr_serialize_ReadSpecification+0x2a>
 800f67e:	8969      	ldrh	r1, [r5, #10]
 800f680:	4630      	mov	r0, r6
 800f682:	f7fb fc89 	bl	800af98 <ucdr_serialize_uint16_t>
 800f686:	89a9      	ldrh	r1, [r5, #12]
 800f688:	4607      	mov	r7, r0
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7fb fc84 	bl	800af98 <ucdr_serialize_uint16_t>
 800f690:	89e9      	ldrh	r1, [r5, #14]
 800f692:	4007      	ands	r7, r0
 800f694:	4630      	mov	r0, r6
 800f696:	f7fb fc7f 	bl	800af98 <ucdr_serialize_uint16_t>
 800f69a:	8a29      	ldrh	r1, [r5, #16]
 800f69c:	4680      	mov	r8, r0
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f7fb fc7a 	bl	800af98 <ucdr_serialize_uint16_t>
 800f6a4:	b2ff      	uxtb	r7, r7
 800f6a6:	ea04 0507 	and.w	r5, r4, r7
 800f6aa:	ea05 0508 	and.w	r5, r5, r8
 800f6ae:	ea00 0405 	and.w	r4, r0, r5
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6b8 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f6b8:	f7ff ba3a 	b.w	800eb30 <uxr_serialize_CLIENT_Representation>

0800f6bc <uxr_serialize_CREATE_Payload>:
 800f6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6be:	2202      	movs	r2, #2
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	460d      	mov	r5, r1
 800f6c4:	f005 fb44 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	18a9      	adds	r1, r5, r2
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	f005 fb3e 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f6d4:	7929      	ldrb	r1, [r5, #4]
 800f6d6:	4607      	mov	r7, r0
 800f6d8:	4630      	mov	r0, r6
 800f6da:	f7fb fc31 	bl	800af40 <ucdr_serialize_uint8_t>
 800f6de:	b170      	cbz	r0, 800f6fe <uxr_serialize_CREATE_Payload+0x42>
 800f6e0:	792b      	ldrb	r3, [r5, #4]
 800f6e2:	403c      	ands	r4, r7
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	b2e4      	uxtb	r4, r4
 800f6e8:	2b0d      	cmp	r3, #13
 800f6ea:	d809      	bhi.n	800f700 <uxr_serialize_CREATE_Payload+0x44>
 800f6ec:	e8df f003 	tbb	[pc, r3]
 800f6f0:	23230a3e 	.word	0x23230a3e
 800f6f4:	0a0a0a0a 	.word	0x0a0a0a0a
 800f6f8:	12121208 	.word	0x12121208
 800f6fc:	5f58      	.short	0x5f58
 800f6fe:	2400      	movs	r4, #0
 800f700:	4620      	mov	r0, r4
 800f702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f704:	f105 0108 	add.w	r1, r5, #8
 800f708:	4630      	mov	r0, r6
 800f70a:	f7ff fb19 	bl	800ed40 <uxr_serialize_DATAWRITER_Representation>
 800f70e:	4004      	ands	r4, r0
 800f710:	4620      	mov	r0, r4
 800f712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f714:	7a29      	ldrb	r1, [r5, #8]
 800f716:	4630      	mov	r0, r6
 800f718:	f7fb fc12 	bl	800af40 <ucdr_serialize_uint8_t>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d0ee      	beq.n	800f6fe <uxr_serialize_CREATE_Payload+0x42>
 800f720:	7a2b      	ldrb	r3, [r5, #8]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d001      	beq.n	800f72a <uxr_serialize_CREATE_Payload+0x6e>
 800f726:	2b02      	cmp	r3, #2
 800f728:	d1ea      	bne.n	800f700 <uxr_serialize_CREATE_Payload+0x44>
 800f72a:	68e9      	ldr	r1, [r5, #12]
 800f72c:	4630      	mov	r0, r6
 800f72e:	f005 fc83 	bl	8015038 <ucdr_serialize_string>
 800f732:	4004      	ands	r4, r0
 800f734:	e7e4      	b.n	800f700 <uxr_serialize_CREATE_Payload+0x44>
 800f736:	7a29      	ldrb	r1, [r5, #8]
 800f738:	4630      	mov	r0, r6
 800f73a:	f7fb fc01 	bl	800af40 <ucdr_serialize_uint8_t>
 800f73e:	4607      	mov	r7, r0
 800f740:	b158      	cbz	r0, 800f75a <uxr_serialize_CREATE_Payload+0x9e>
 800f742:	7a2b      	ldrb	r3, [r5, #8]
 800f744:	2b02      	cmp	r3, #2
 800f746:	d039      	beq.n	800f7bc <uxr_serialize_CREATE_Payload+0x100>
 800f748:	2b03      	cmp	r3, #3
 800f74a:	d106      	bne.n	800f75a <uxr_serialize_CREATE_Payload+0x9e>
 800f74c:	68ea      	ldr	r2, [r5, #12]
 800f74e:	f105 0110 	add.w	r1, r5, #16
 800f752:	4630      	mov	r0, r6
 800f754:	f7fc fd58 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800f758:	4607      	mov	r7, r0
 800f75a:	2202      	movs	r2, #2
 800f75c:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800f760:	4630      	mov	r0, r6
 800f762:	f005 faf5 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f766:	4038      	ands	r0, r7
 800f768:	4004      	ands	r4, r0
 800f76a:	e7c9      	b.n	800f700 <uxr_serialize_CREATE_Payload+0x44>
 800f76c:	7a29      	ldrb	r1, [r5, #8]
 800f76e:	4630      	mov	r0, r6
 800f770:	f7fb fbe6 	bl	800af40 <ucdr_serialize_uint8_t>
 800f774:	4607      	mov	r7, r0
 800f776:	b158      	cbz	r0, 800f790 <uxr_serialize_CREATE_Payload+0xd4>
 800f778:	7a2b      	ldrb	r3, [r5, #8]
 800f77a:	2b02      	cmp	r3, #2
 800f77c:	d003      	beq.n	800f786 <uxr_serialize_CREATE_Payload+0xca>
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d022      	beq.n	800f7c8 <uxr_serialize_CREATE_Payload+0x10c>
 800f782:	2b01      	cmp	r3, #1
 800f784:	d104      	bne.n	800f790 <uxr_serialize_CREATE_Payload+0xd4>
 800f786:	68e9      	ldr	r1, [r5, #12]
 800f788:	4630      	mov	r0, r6
 800f78a:	f005 fc55 	bl	8015038 <ucdr_serialize_string>
 800f78e:	4607      	mov	r7, r0
 800f790:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800f794:	4630      	mov	r0, r6
 800f796:	f7fc f8fb 	bl	800b990 <ucdr_serialize_int16_t>
 800f79a:	4038      	ands	r0, r7
 800f79c:	4004      	ands	r4, r0
 800f79e:	e7af      	b.n	800f700 <uxr_serialize_CREATE_Payload+0x44>
 800f7a0:	f105 0108 	add.w	r1, r5, #8
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f7ff fa81 	bl	800ecac <uxr_serialize_AGENT_Representation>
 800f7aa:	4004      	ands	r4, r0
 800f7ac:	e7a8      	b.n	800f700 <uxr_serialize_CREATE_Payload+0x44>
 800f7ae:	f105 0108 	add.w	r1, r5, #8
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f7ff f9bc 	bl	800eb30 <uxr_serialize_CLIENT_Representation>
 800f7b8:	4004      	ands	r4, r0
 800f7ba:	e7a1      	b.n	800f700 <uxr_serialize_CREATE_Payload+0x44>
 800f7bc:	68e9      	ldr	r1, [r5, #12]
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f005 fc3a 	bl	8015038 <ucdr_serialize_string>
 800f7c4:	4607      	mov	r7, r0
 800f7c6:	e7c8      	b.n	800f75a <uxr_serialize_CREATE_Payload+0x9e>
 800f7c8:	68ea      	ldr	r2, [r5, #12]
 800f7ca:	f105 0110 	add.w	r1, r5, #16
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	f7fc fd1a 	bl	800c208 <ucdr_serialize_sequence_uint8_t>
 800f7d4:	4607      	mov	r7, r0
 800f7d6:	e7db      	b.n	800f790 <uxr_serialize_CREATE_Payload+0xd4>

0800f7d8 <uxr_serialize_GET_INFO_Payload>:
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	2202      	movs	r2, #2
 800f7dc:	4605      	mov	r5, r0
 800f7de:	460e      	mov	r6, r1
 800f7e0:	f005 fab6 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	18b1      	adds	r1, r6, r2
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f005 fab0 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f7f0:	6871      	ldr	r1, [r6, #4]
 800f7f2:	4004      	ands	r4, r0
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	f7fb fdbf 	bl	800b378 <ucdr_serialize_uint32_t>
 800f7fa:	b2e4      	uxtb	r4, r4
 800f7fc:	4020      	ands	r0, r4
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}

0800f800 <uxr_deserialize_GET_INFO_Payload>:
 800f800:	b570      	push	{r4, r5, r6, lr}
 800f802:	2202      	movs	r2, #2
 800f804:	4605      	mov	r5, r0
 800f806:	460e      	mov	r6, r1
 800f808:	f005 fb06 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f80c:	2202      	movs	r2, #2
 800f80e:	18b1      	adds	r1, r6, r2
 800f810:	4604      	mov	r4, r0
 800f812:	4628      	mov	r0, r5
 800f814:	f005 fb00 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f818:	1d31      	adds	r1, r6, #4
 800f81a:	4004      	ands	r4, r0
 800f81c:	4628      	mov	r0, r5
 800f81e:	f7fb fed5 	bl	800b5cc <ucdr_deserialize_uint32_t>
 800f822:	b2e4      	uxtb	r4, r4
 800f824:	4020      	ands	r0, r4
 800f826:	bd70      	pop	{r4, r5, r6, pc}

0800f828 <uxr_serialize_DELETE_Payload>:
 800f828:	b570      	push	{r4, r5, r6, lr}
 800f82a:	2202      	movs	r2, #2
 800f82c:	4605      	mov	r5, r0
 800f82e:	460e      	mov	r6, r1
 800f830:	f005 fa8e 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f834:	2202      	movs	r2, #2
 800f836:	4604      	mov	r4, r0
 800f838:	18b1      	adds	r1, r6, r2
 800f83a:	4628      	mov	r0, r5
 800f83c:	f005 fa88 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f840:	4020      	ands	r0, r4
 800f842:	b2c0      	uxtb	r0, r0
 800f844:	bd70      	pop	{r4, r5, r6, pc}
 800f846:	bf00      	nop

0800f848 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f84c:	4605      	mov	r5, r0
 800f84e:	460e      	mov	r6, r1
 800f850:	f7fb fb8c 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f854:	1c71      	adds	r1, r6, #1
 800f856:	4604      	mov	r4, r0
 800f858:	4628      	mov	r0, r5
 800f85a:	f7fb fb87 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f85e:	2204      	movs	r2, #4
 800f860:	18b1      	adds	r1, r6, r2
 800f862:	4681      	mov	r9, r0
 800f864:	4628      	mov	r0, r5
 800f866:	f005 fad7 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f86a:	f106 0108 	add.w	r1, r6, #8
 800f86e:	4680      	mov	r8, r0
 800f870:	2202      	movs	r2, #2
 800f872:	4628      	mov	r0, r5
 800f874:	f005 fad0 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f878:	2202      	movs	r2, #2
 800f87a:	f106 010a 	add.w	r1, r6, #10
 800f87e:	4607      	mov	r7, r0
 800f880:	4628      	mov	r0, r5
 800f882:	f005 fac9 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f886:	ea04 0409 	and.w	r4, r4, r9
 800f88a:	4603      	mov	r3, r0
 800f88c:	f106 010c 	add.w	r1, r6, #12
 800f890:	4628      	mov	r0, r5
 800f892:	b2e4      	uxtb	r4, r4
 800f894:	461d      	mov	r5, r3
 800f896:	ea04 0408 	and.w	r4, r4, r8
 800f89a:	f7fb fb39 	bl	800af10 <ucdr_deserialize_bool>
 800f89e:	4027      	ands	r7, r4
 800f8a0:	403d      	ands	r5, r7
 800f8a2:	4028      	ands	r0, r5
 800f8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f8a8 <uxr_deserialize_STATUS_Payload>:
 800f8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	460f      	mov	r7, r1
 800f8b2:	f005 fab1 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f8b6:	2202      	movs	r2, #2
 800f8b8:	18b9      	adds	r1, r7, r2
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f005 faab 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800f8c2:	1d39      	adds	r1, r7, #4
 800f8c4:	4680      	mov	r8, r0
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f7fb fb50 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f8cc:	1d79      	adds	r1, r7, #5
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7fb fb4b 	bl	800af6c <ucdr_deserialize_uint8_t>
 800f8d6:	ea05 0508 	and.w	r5, r5, r8
 800f8da:	402c      	ands	r4, r5
 800f8dc:	4020      	ands	r0, r4
 800f8de:	b2c0      	uxtb	r0, r0
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8e4 <uxr_serialize_INFO_Payload>:
 800f8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	460c      	mov	r4, r1
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	f005 fa2f 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f8f2:	2202      	movs	r2, #2
 800f8f4:	18a1      	adds	r1, r4, r2
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f005 fa29 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f8fe:	7921      	ldrb	r1, [r4, #4]
 800f900:	4607      	mov	r7, r0
 800f902:	4628      	mov	r0, r5
 800f904:	f7fb fb1c 	bl	800af40 <ucdr_serialize_uint8_t>
 800f908:	7961      	ldrb	r1, [r4, #5]
 800f90a:	4606      	mov	r6, r0
 800f90c:	4628      	mov	r0, r5
 800f90e:	f7fb fb17 	bl	800af40 <ucdr_serialize_uint8_t>
 800f912:	ea08 0807 	and.w	r8, r8, r7
 800f916:	ea06 0608 	and.w	r6, r6, r8
 800f91a:	ea00 0706 	and.w	r7, r0, r6
 800f91e:	7a21      	ldrb	r1, [r4, #8]
 800f920:	4628      	mov	r0, r5
 800f922:	f7fb fadf 	bl	800aee4 <ucdr_serialize_bool>
 800f926:	7a23      	ldrb	r3, [r4, #8]
 800f928:	b2ff      	uxtb	r7, r7
 800f92a:	4606      	mov	r6, r0
 800f92c:	b96b      	cbnz	r3, 800f94a <uxr_serialize_INFO_Payload+0x66>
 800f92e:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f932:	4628      	mov	r0, r5
 800f934:	f7fb fad6 	bl	800aee4 <ucdr_serialize_bool>
 800f938:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f93c:	4030      	ands	r0, r6
 800f93e:	b2c6      	uxtb	r6, r0
 800f940:	b983      	cbnz	r3, 800f964 <uxr_serialize_INFO_Payload+0x80>
 800f942:	ea06 0007 	and.w	r0, r6, r7
 800f946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f94a:	7b21      	ldrb	r1, [r4, #12]
 800f94c:	4628      	mov	r0, r5
 800f94e:	f7fb faf7 	bl	800af40 <ucdr_serialize_uint8_t>
 800f952:	b188      	cbz	r0, 800f978 <uxr_serialize_INFO_Payload+0x94>
 800f954:	f104 010c 	add.w	r1, r4, #12
 800f958:	4628      	mov	r0, r5
 800f95a:	f7ff fa19 	bl	800ed90 <uxr_serialize_ObjectVariant.part.0>
 800f95e:	4030      	ands	r0, r6
 800f960:	b2c6      	uxtb	r6, r0
 800f962:	e7e4      	b.n	800f92e <uxr_serialize_INFO_Payload+0x4a>
 800f964:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f968:	4628      	mov	r0, r5
 800f96a:	f7ff fdb7 	bl	800f4dc <uxr_serialize_ActivityInfoVariant>
 800f96e:	4006      	ands	r6, r0
 800f970:	ea06 0007 	and.w	r0, r6, r7
 800f974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f978:	4606      	mov	r6, r0
 800f97a:	e7d8      	b.n	800f92e <uxr_serialize_INFO_Payload+0x4a>

0800f97c <uxr_serialize_READ_DATA_Payload>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	2202      	movs	r2, #2
 800f980:	4605      	mov	r5, r0
 800f982:	460e      	mov	r6, r1
 800f984:	f005 f9e4 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f988:	2202      	movs	r2, #2
 800f98a:	18b1      	adds	r1, r6, r2
 800f98c:	4604      	mov	r4, r0
 800f98e:	4628      	mov	r0, r5
 800f990:	f005 f9de 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f994:	1d31      	adds	r1, r6, #4
 800f996:	4004      	ands	r4, r0
 800f998:	4628      	mov	r0, r5
 800f99a:	f7ff fe4b 	bl	800f634 <uxr_serialize_ReadSpecification>
 800f99e:	b2e4      	uxtb	r4, r4
 800f9a0:	4020      	ands	r0, r4
 800f9a2:	bd70      	pop	{r4, r5, r6, pc}

0800f9a4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	460e      	mov	r6, r1
 800f9ac:	f005 f9d0 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f9b0:	2202      	movs	r2, #2
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	18b1      	adds	r1, r6, r2
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f005 f9ca 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f9bc:	4020      	ands	r0, r4
 800f9be:	b2c0      	uxtb	r0, r0
 800f9c0:	bd70      	pop	{r4, r5, r6, pc}
 800f9c2:	bf00      	nop

0800f9c4 <uxr_serialize_ACKNACK_Payload>:
 800f9c4:	b570      	push	{r4, r5, r6, lr}
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	460e      	mov	r6, r1
 800f9ca:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f9ce:	4605      	mov	r5, r0
 800f9d0:	f7fb fae2 	bl	800af98 <ucdr_serialize_uint16_t>
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	4604      	mov	r4, r0
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f005 f9b8 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800f9e0:	7931      	ldrb	r1, [r6, #4]
 800f9e2:	4004      	ands	r4, r0
 800f9e4:	4628      	mov	r0, r5
 800f9e6:	f7fb faab 	bl	800af40 <ucdr_serialize_uint8_t>
 800f9ea:	b2e4      	uxtb	r4, r4
 800f9ec:	4020      	ands	r0, r4
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}

0800f9f0 <uxr_deserialize_ACKNACK_Payload>:
 800f9f0:	b570      	push	{r4, r5, r6, lr}
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	460e      	mov	r6, r1
 800f9f6:	f7fb fbd3 	bl	800b1a0 <ucdr_deserialize_uint16_t>
 800f9fa:	2202      	movs	r2, #2
 800f9fc:	18b1      	adds	r1, r6, r2
 800f9fe:	4604      	mov	r4, r0
 800fa00:	4628      	mov	r0, r5
 800fa02:	f005 fa09 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800fa06:	1d31      	adds	r1, r6, #4
 800fa08:	4004      	ands	r4, r0
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	f7fb faae 	bl	800af6c <ucdr_deserialize_uint8_t>
 800fa10:	b2e4      	uxtb	r4, r4
 800fa12:	4020      	ands	r0, r4
 800fa14:	bd70      	pop	{r4, r5, r6, pc}
 800fa16:	bf00      	nop

0800fa18 <uxr_serialize_HEARTBEAT_Payload>:
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	8809      	ldrh	r1, [r1, #0]
 800fa1e:	4606      	mov	r6, r0
 800fa20:	f7fb faba 	bl	800af98 <ucdr_serialize_uint16_t>
 800fa24:	8869      	ldrh	r1, [r5, #2]
 800fa26:	4604      	mov	r4, r0
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f7fb fab5 	bl	800af98 <ucdr_serialize_uint16_t>
 800fa2e:	7929      	ldrb	r1, [r5, #4]
 800fa30:	4004      	ands	r4, r0
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7fb fa84 	bl	800af40 <ucdr_serialize_uint8_t>
 800fa38:	b2e4      	uxtb	r4, r4
 800fa3a:	4020      	ands	r0, r4
 800fa3c:	bd70      	pop	{r4, r5, r6, pc}
 800fa3e:	bf00      	nop

0800fa40 <uxr_deserialize_HEARTBEAT_Payload>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	4605      	mov	r5, r0
 800fa44:	460e      	mov	r6, r1
 800fa46:	f7fb fbab 	bl	800b1a0 <ucdr_deserialize_uint16_t>
 800fa4a:	1cb1      	adds	r1, r6, #2
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	4628      	mov	r0, r5
 800fa50:	f7fb fba6 	bl	800b1a0 <ucdr_deserialize_uint16_t>
 800fa54:	1d31      	adds	r1, r6, #4
 800fa56:	4004      	ands	r4, r0
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f7fb fa87 	bl	800af6c <ucdr_deserialize_uint8_t>
 800fa5e:	b2e4      	uxtb	r4, r4
 800fa60:	4020      	ands	r0, r4
 800fa62:	bd70      	pop	{r4, r5, r6, pc}

0800fa64 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800fa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa68:	4605      	mov	r5, r0
 800fa6a:	460e      	mov	r6, r1
 800fa6c:	f7fc f9c0 	bl	800bdf0 <ucdr_deserialize_int32_t>
 800fa70:	1d31      	adds	r1, r6, #4
 800fa72:	4607      	mov	r7, r0
 800fa74:	4628      	mov	r0, r5
 800fa76:	f7fb fda9 	bl	800b5cc <ucdr_deserialize_uint32_t>
 800fa7a:	f106 0108 	add.w	r1, r6, #8
 800fa7e:	4680      	mov	r8, r0
 800fa80:	4628      	mov	r0, r5
 800fa82:	f7fc f9b5 	bl	800bdf0 <ucdr_deserialize_int32_t>
 800fa86:	f106 010c 	add.w	r1, r6, #12
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f7fb fd9d 	bl	800b5cc <ucdr_deserialize_uint32_t>
 800fa92:	ea07 0708 	and.w	r7, r7, r8
 800fa96:	403c      	ands	r4, r7
 800fa98:	f106 0110 	add.w	r1, r6, #16
 800fa9c:	4004      	ands	r4, r0
 800fa9e:	4628      	mov	r0, r5
 800faa0:	f7fc f9a6 	bl	800bdf0 <ucdr_deserialize_int32_t>
 800faa4:	f106 0114 	add.w	r1, r6, #20
 800faa8:	4607      	mov	r7, r0
 800faaa:	4628      	mov	r0, r5
 800faac:	f7fb fd8e 	bl	800b5cc <ucdr_deserialize_uint32_t>
 800fab0:	b2e4      	uxtb	r4, r4
 800fab2:	403c      	ands	r4, r7
 800fab4:	4020      	ands	r0, r4
 800fab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faba:	bf00      	nop

0800fabc <uxr_serialize_SampleIdentity>:
 800fabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac0:	220c      	movs	r2, #12
 800fac2:	4604      	mov	r4, r0
 800fac4:	460d      	mov	r5, r1
 800fac6:	f005 f943 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800faca:	2203      	movs	r2, #3
 800facc:	f105 010c 	add.w	r1, r5, #12
 800fad0:	4680      	mov	r8, r0
 800fad2:	4620      	mov	r0, r4
 800fad4:	f005 f93c 	bl	8014d50 <ucdr_serialize_array_uint8_t>
 800fad8:	7be9      	ldrb	r1, [r5, #15]
 800fada:	4681      	mov	r9, r0
 800fadc:	4620      	mov	r0, r4
 800fade:	f7fb fa2f 	bl	800af40 <ucdr_serialize_uint8_t>
 800fae2:	6929      	ldr	r1, [r5, #16]
 800fae4:	4607      	mov	r7, r0
 800fae6:	4620      	mov	r0, r4
 800fae8:	f7fc f858 	bl	800bb9c <ucdr_serialize_int32_t>
 800faec:	6969      	ldr	r1, [r5, #20]
 800faee:	4606      	mov	r6, r0
 800faf0:	4620      	mov	r0, r4
 800faf2:	f7fb fc41 	bl	800b378 <ucdr_serialize_uint32_t>
 800faf6:	ea08 0809 	and.w	r8, r8, r9
 800fafa:	ea07 0708 	and.w	r7, r7, r8
 800fafe:	403e      	ands	r6, r7
 800fb00:	4030      	ands	r0, r6
 800fb02:	b2c0      	uxtb	r0, r0
 800fb04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fb08 <uxr_deserialize_SampleIdentity>:
 800fb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb0c:	220c      	movs	r2, #12
 800fb0e:	4604      	mov	r4, r0
 800fb10:	460d      	mov	r5, r1
 800fb12:	f005 f981 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800fb16:	2203      	movs	r2, #3
 800fb18:	f105 010c 	add.w	r1, r5, #12
 800fb1c:	4680      	mov	r8, r0
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f005 f97a 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 800fb24:	f105 010f 	add.w	r1, r5, #15
 800fb28:	4681      	mov	r9, r0
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f7fb fa1e 	bl	800af6c <ucdr_deserialize_uint8_t>
 800fb30:	f105 0110 	add.w	r1, r5, #16
 800fb34:	4607      	mov	r7, r0
 800fb36:	4620      	mov	r0, r4
 800fb38:	f7fc f95a 	bl	800bdf0 <ucdr_deserialize_int32_t>
 800fb3c:	f105 0114 	add.w	r1, r5, #20
 800fb40:	4606      	mov	r6, r0
 800fb42:	4620      	mov	r0, r4
 800fb44:	f7fb fd42 	bl	800b5cc <ucdr_deserialize_uint32_t>
 800fb48:	ea08 0809 	and.w	r8, r8, r9
 800fb4c:	ea07 0708 	and.w	r7, r7, r8
 800fb50:	403e      	ands	r6, r7
 800fb52:	4030      	ands	r0, r6
 800fb54:	b2c0      	uxtb	r0, r0
 800fb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5a:	bf00      	nop

0800fb5c <rcl_client_get_rmw_handle>:
 800fb5c:	b118      	cbz	r0, 800fb66 <rcl_client_get_rmw_handle+0xa>
 800fb5e:	6800      	ldr	r0, [r0, #0]
 800fb60:	b108      	cbz	r0, 800fb66 <rcl_client_get_rmw_handle+0xa>
 800fb62:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fb66:	4770      	bx	lr

0800fb68 <rcl_send_request>:
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d048      	beq.n	800fbfe <rcl_send_request+0x96>
 800fb6c:	b570      	push	{r4, r5, r6, lr}
 800fb6e:	4604      	mov	r4, r0
 800fb70:	6800      	ldr	r0, [r0, #0]
 800fb72:	b08a      	sub	sp, #40	@ 0x28
 800fb74:	b1c0      	cbz	r0, 800fba8 <rcl_send_request+0x40>
 800fb76:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800fb7a:	b1ab      	cbz	r3, 800fba8 <rcl_send_request+0x40>
 800fb7c:	460e      	mov	r6, r1
 800fb7e:	b1b9      	cbz	r1, 800fbb0 <rcl_send_request+0x48>
 800fb80:	4615      	mov	r5, r2
 800fb82:	b1aa      	cbz	r2, 800fbb0 <rcl_send_request+0x48>
 800fb84:	2105      	movs	r1, #5
 800fb86:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fb8a:	f002 ff89 	bl	8012aa0 <__atomic_load_8>
 800fb8e:	6823      	ldr	r3, [r4, #0]
 800fb90:	e9c5 0100 	strd	r0, r1, [r5]
 800fb94:	462a      	mov	r2, r5
 800fb96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fb9a:	4631      	mov	r1, r6
 800fb9c:	f004 f942 	bl	8013e24 <rmw_send_request>
 800fba0:	b148      	cbz	r0, 800fbb6 <rcl_send_request+0x4e>
 800fba2:	2001      	movs	r0, #1
 800fba4:	b00a      	add	sp, #40	@ 0x28
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800fbac:	b00a      	add	sp, #40	@ 0x28
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
 800fbb0:	200b      	movs	r0, #11
 800fbb2:	b00a      	add	sp, #40	@ 0x28
 800fbb4:	bd70      	pop	{r4, r5, r6, pc}
 800fbb6:	6820      	ldr	r0, [r4, #0]
 800fbb8:	2305      	movs	r3, #5
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fbc0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fbc4:	f002 ffd8 	bl	8012b78 <__atomic_exchange_8>
 800fbc8:	6823      	ldr	r3, [r4, #0]
 800fbca:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800fbce:	b1a2      	cbz	r2, 800fbfa <rcl_send_request+0x92>
 800fbd0:	a905      	add	r1, sp, #20
 800fbd2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fbd6:	f003 fd21 	bl	801361c <rmw_get_gid_for_client>
 800fbda:	4601      	mov	r1, r0
 800fbdc:	b990      	cbnz	r0, 800fc04 <rcl_send_request+0x9c>
 800fbde:	6822      	ldr	r2, [r4, #0]
 800fbe0:	ab06      	add	r3, sp, #24
 800fbe2:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 800fbe6:	9302      	str	r3, [sp, #8]
 800fbe8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fbec:	4632      	mov	r2, r6
 800fbee:	e9cd 4500 	strd	r4, r5, [sp]
 800fbf2:	f000 fe15 	bl	8010820 <rcl_send_service_event_message>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d1d4      	bne.n	800fba4 <rcl_send_request+0x3c>
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	e7d2      	b.n	800fba4 <rcl_send_request+0x3c>
 800fbfe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800fc02:	4770      	bx	lr
 800fc04:	f000 f87a 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 800fc08:	e7cc      	b.n	800fba4 <rcl_send_request+0x3c>
 800fc0a:	bf00      	nop
 800fc0c:	0000      	movs	r0, r0
	...

0800fc10 <rcl_take_response>:
 800fc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc12:	468e      	mov	lr, r1
 800fc14:	460c      	mov	r4, r1
 800fc16:	4617      	mov	r7, r2
 800fc18:	4605      	mov	r5, r0
 800fc1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc1e:	b095      	sub	sp, #84	@ 0x54
 800fc20:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800fc24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fc2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fc30:	2d00      	cmp	r5, #0
 800fc32:	d044      	beq.n	800fcbe <rcl_take_response+0xae>
 800fc34:	682b      	ldr	r3, [r5, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d041      	beq.n	800fcbe <rcl_take_response+0xae>
 800fc3a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	d03d      	beq.n	800fcbe <rcl_take_response+0xae>
 800fc42:	2f00      	cmp	r7, #0
 800fc44:	d03e      	beq.n	800fcc4 <rcl_take_response+0xb4>
 800fc46:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 800fce0 <rcl_take_response+0xd0>
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	f88d 3013 	strb.w	r3, [sp, #19]
 800fc50:	463a      	mov	r2, r7
 800fc52:	f10d 0313 	add.w	r3, sp, #19
 800fc56:	a90a      	add	r1, sp, #40	@ 0x28
 800fc58:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fc5c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fc60:	f004 f9e0 	bl	8014024 <rmw_take_response>
 800fc64:	4606      	mov	r6, r0
 800fc66:	bb78      	cbnz	r0, 800fcc8 <rcl_take_response+0xb8>
 800fc68:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800fc6c:	b373      	cbz	r3, 800fccc <rcl_take_response+0xbc>
 800fc6e:	682b      	ldr	r3, [r5, #0]
 800fc70:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800fc74:	b1aa      	cbz	r2, 800fca2 <rcl_take_response+0x92>
 800fc76:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fc7a:	a905      	add	r1, sp, #20
 800fc7c:	f003 fcce 	bl	801361c <rmw_get_gid_for_client>
 800fc80:	bb38      	cbnz	r0, 800fcd2 <rcl_take_response+0xc2>
 800fc82:	682b      	ldr	r3, [r5, #0]
 800fc84:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 800fc88:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 800fc8c:	ab06      	add	r3, sp, #24
 800fc8e:	ed8d 7b00 	vstr	d7, [sp]
 800fc92:	463a      	mov	r2, r7
 800fc94:	9302      	str	r3, [sp, #8]
 800fc96:	2103      	movs	r1, #3
 800fc98:	f000 fdc2 	bl	8010820 <rcl_send_service_event_message>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	bf18      	it	ne
 800fca0:	4606      	movne	r6, r0
 800fca2:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 800fca6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcaa:	46a4      	mov	ip, r4
 800fcac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcb0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fcb4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fcb8:	4630      	mov	r0, r6
 800fcba:	b015      	add	sp, #84	@ 0x54
 800fcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcbe:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800fcc2:	e7ee      	b.n	800fca2 <rcl_take_response+0x92>
 800fcc4:	260b      	movs	r6, #11
 800fcc6:	e7ec      	b.n	800fca2 <rcl_take_response+0x92>
 800fcc8:	2601      	movs	r6, #1
 800fcca:	e7ea      	b.n	800fca2 <rcl_take_response+0x92>
 800fccc:	f240 16f5 	movw	r6, #501	@ 0x1f5
 800fcd0:	e7e7      	b.n	800fca2 <rcl_take_response+0x92>
 800fcd2:	f000 f813 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	e7e3      	b.n	800fca2 <rcl_take_response+0x92>
 800fcda:	bf00      	nop
 800fcdc:	f3af 8000 	nop.w
	...

0800fce8 <rcl_client_is_valid>:
 800fce8:	b130      	cbz	r0, 800fcf8 <rcl_client_is_valid+0x10>
 800fcea:	6800      	ldr	r0, [r0, #0]
 800fcec:	b120      	cbz	r0, 800fcf8 <rcl_client_is_valid+0x10>
 800fcee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fcf2:	3800      	subs	r0, #0
 800fcf4:	bf18      	it	ne
 800fcf6:	2001      	movne	r0, #1
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop

0800fcfc <rcl_convert_rmw_ret_to_rcl_ret>:
 800fcfc:	280b      	cmp	r0, #11
 800fcfe:	dc0d      	bgt.n	800fd1c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	db09      	blt.n	800fd18 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fd04:	280b      	cmp	r0, #11
 800fd06:	d807      	bhi.n	800fd18 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fd08:	e8df f000 	tbb	[pc, r0]
 800fd0c:	07060607 	.word	0x07060607
 800fd10:	06060606 	.word	0x06060606
 800fd14:	07070606 	.word	0x07070606
 800fd18:	2001      	movs	r0, #1
 800fd1a:	4770      	bx	lr
 800fd1c:	28cb      	cmp	r0, #203	@ 0xcb
 800fd1e:	bf14      	ite	ne
 800fd20:	2001      	movne	r0, #1
 800fd22:	20cb      	moveq	r0, #203	@ 0xcb
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop

0800fd28 <rcl_get_zero_initialized_context>:
 800fd28:	2200      	movs	r2, #0
 800fd2a:	e9c0 2200 	strd	r2, r2, [r0]
 800fd2e:	4770      	bx	lr

0800fd30 <rcl_context_is_valid>:
 800fd30:	b118      	cbz	r0, 800fd3a <rcl_context_is_valid+0xa>
 800fd32:	6840      	ldr	r0, [r0, #4]
 800fd34:	3800      	subs	r0, #0
 800fd36:	bf18      	it	ne
 800fd38:	2001      	movne	r0, #1
 800fd3a:	4770      	bx	lr

0800fd3c <__cleanup_context>:
 800fd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd40:	4606      	mov	r6, r0
 800fd42:	6800      	ldr	r0, [r0, #0]
 800fd44:	2300      	movs	r3, #0
 800fd46:	6073      	str	r3, [r6, #4]
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	d042      	beq.n	800fdd2 <__cleanup_context+0x96>
 800fd4c:	6943      	ldr	r3, [r0, #20]
 800fd4e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800fd52:	6907      	ldr	r7, [r0, #16]
 800fd54:	b39b      	cbz	r3, 800fdbe <__cleanup_context+0x82>
 800fd56:	3014      	adds	r0, #20
 800fd58:	f000 f9b2 	bl	80100c0 <rcl_init_options_fini>
 800fd5c:	4680      	mov	r8, r0
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d144      	bne.n	800fdec <__cleanup_context+0xb0>
 800fd62:	6830      	ldr	r0, [r6, #0]
 800fd64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fd66:	b123      	cbz	r3, 800fd72 <__cleanup_context+0x36>
 800fd68:	3028      	adds	r0, #40	@ 0x28
 800fd6a:	f003 fe9f 	bl	8013aac <rmw_context_fini>
 800fd6e:	bbb8      	cbnz	r0, 800fde0 <__cleanup_context+0xa4>
 800fd70:	6830      	ldr	r0, [r6, #0]
 800fd72:	6a03      	ldr	r3, [r0, #32]
 800fd74:	b1db      	cbz	r3, 800fdae <__cleanup_context+0x72>
 800fd76:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fd7a:	2a01      	cmp	r2, #1
 800fd7c:	f17c 0100 	sbcs.w	r1, ip, #0
 800fd80:	db11      	blt.n	800fda6 <__cleanup_context+0x6a>
 800fd82:	2400      	movs	r4, #0
 800fd84:	4625      	mov	r5, r4
 800fd86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	b1c8      	cbz	r0, 800fdc2 <__cleanup_context+0x86>
 800fd8e:	47c8      	blx	r9
 800fd90:	6833      	ldr	r3, [r6, #0]
 800fd92:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800fd96:	3401      	adds	r4, #1
 800fd98:	f145 0500 	adc.w	r5, r5, #0
 800fd9c:	4294      	cmp	r4, r2
 800fd9e:	eb75 010c 	sbcs.w	r1, r5, ip
 800fda2:	6a1b      	ldr	r3, [r3, #32]
 800fda4:	dbef      	blt.n	800fd86 <__cleanup_context+0x4a>
 800fda6:	4618      	mov	r0, r3
 800fda8:	4639      	mov	r1, r7
 800fdaa:	47c8      	blx	r9
 800fdac:	6830      	ldr	r0, [r6, #0]
 800fdae:	4639      	mov	r1, r7
 800fdb0:	47c8      	blx	r9
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	e9c6 3300 	strd	r3, r3, [r6]
 800fdb8:	4640      	mov	r0, r8
 800fdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdbe:	4698      	mov	r8, r3
 800fdc0:	e7d0      	b.n	800fd64 <__cleanup_context+0x28>
 800fdc2:	3401      	adds	r4, #1
 800fdc4:	f145 0500 	adc.w	r5, r5, #0
 800fdc8:	4294      	cmp	r4, r2
 800fdca:	eb75 010c 	sbcs.w	r1, r5, ip
 800fdce:	dbda      	blt.n	800fd86 <__cleanup_context+0x4a>
 800fdd0:	e7e9      	b.n	800fda6 <__cleanup_context+0x6a>
 800fdd2:	4680      	mov	r8, r0
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	e9c6 3300 	strd	r3, r3, [r6]
 800fdda:	4640      	mov	r0, r8
 800fddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fde0:	f1b8 0f00 	cmp.w	r8, #0
 800fde4:	d005      	beq.n	800fdf2 <__cleanup_context+0xb6>
 800fde6:	f7fa f853 	bl	8009e90 <rcutils_reset_error>
 800fdea:	e7c1      	b.n	800fd70 <__cleanup_context+0x34>
 800fdec:	f7fa f850 	bl	8009e90 <rcutils_reset_error>
 800fdf0:	e7b7      	b.n	800fd62 <__cleanup_context+0x26>
 800fdf2:	f7ff ff83 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 800fdf6:	4680      	mov	r8, r0
 800fdf8:	e7f5      	b.n	800fde6 <__cleanup_context+0xaa>
 800fdfa:	bf00      	nop

0800fdfc <rcl_init>:
 800fdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe00:	1e04      	subs	r4, r0, #0
 800fe02:	b0a5      	sub	sp, #148	@ 0x94
 800fe04:	460d      	mov	r5, r1
 800fe06:	4617      	mov	r7, r2
 800fe08:	461e      	mov	r6, r3
 800fe0a:	dd13      	ble.n	800fe34 <rcl_init+0x38>
 800fe0c:	b161      	cbz	r1, 800fe28 <rcl_init+0x2c>
 800fe0e:	f1a1 0e04 	sub.w	lr, r1, #4
 800fe12:	f04f 0c00 	mov.w	ip, #0
 800fe16:	e001      	b.n	800fe1c <rcl_init+0x20>
 800fe18:	4564      	cmp	r4, ip
 800fe1a:	d00d      	beq.n	800fe38 <rcl_init+0x3c>
 800fe1c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 800fe20:	f10c 0c01 	add.w	ip, ip, #1
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d1f7      	bne.n	800fe18 <rcl_init+0x1c>
 800fe28:	f04f 080b 	mov.w	r8, #11
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	b025      	add	sp, #148	@ 0x94
 800fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	2900      	cmp	r1, #0
 800fe36:	d1f7      	bne.n	800fe28 <rcl_init+0x2c>
 800fe38:	2f00      	cmp	r7, #0
 800fe3a:	d0f5      	beq.n	800fe28 <rcl_init+0x2c>
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d0f2      	beq.n	800fe28 <rcl_init+0x2c>
 800fe42:	469c      	mov	ip, r3
 800fe44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe48:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800fe4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe50:	f8dc 3000 	ldr.w	r3, [ip]
 800fe54:	f8ce 3000 	str.w	r3, [lr]
 800fe58:	a81f      	add	r0, sp, #124	@ 0x7c
 800fe5a:	f7f9 ffed 	bl	8009e38 <rcutils_allocator_is_valid>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d0e2      	beq.n	800fe28 <rcl_init+0x2c>
 800fe62:	2e00      	cmp	r6, #0
 800fe64:	d0e0      	beq.n	800fe28 <rcl_init+0x2c>
 800fe66:	6833      	ldr	r3, [r6, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d173      	bne.n	800ff54 <rcl_init+0x158>
 800fe6c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 800fe70:	2198      	movs	r1, #152	@ 0x98
 800fe72:	2001      	movs	r0, #1
 800fe74:	4798      	blx	r3
 800fe76:	4680      	mov	r8, r0
 800fe78:	6030      	str	r0, [r6, #0]
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	f000 80ac 	beq.w	800ffd8 <rcl_init+0x1dc>
 800fe80:	a802      	add	r0, sp, #8
 800fe82:	f003 f965 	bl	8013150 <rmw_get_zero_initialized_context>
 800fe86:	a902      	add	r1, sp, #8
 800fe88:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800fe8c:	2270      	movs	r2, #112	@ 0x70
 800fe8e:	f007 fc48 	bl	8017722 <memcpy>
 800fe92:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800fe96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe9a:	f8d6 8000 	ldr.w	r8, [r6]
 800fe9e:	46c4      	mov	ip, r8
 800fea0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fea4:	f8de 3000 	ldr.w	r3, [lr]
 800fea8:	f8cc 3000 	str.w	r3, [ip]
 800feac:	f108 0114 	add.w	r1, r8, #20
 800feb0:	4638      	mov	r0, r7
 800feb2:	f000 f92f 	bl	8010114 <rcl_init_options_copy>
 800feb6:	4680      	mov	r8, r0
 800feb8:	2800      	cmp	r0, #0
 800feba:	d147      	bne.n	800ff4c <rcl_init+0x150>
 800febc:	f8d6 9000 	ldr.w	r9, [r6]
 800fec0:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800fec4:	f8c9 0020 	str.w	r0, [r9, #32]
 800fec8:	f8c9 4018 	str.w	r4, [r9, #24]
 800fecc:	f8c9 a01c 	str.w	sl, [r9, #28]
 800fed0:	2c00      	cmp	r4, #0
 800fed2:	d047      	beq.n	800ff64 <rcl_init+0x168>
 800fed4:	2d00      	cmp	r5, #0
 800fed6:	d045      	beq.n	800ff64 <rcl_init+0x168>
 800fed8:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 800fedc:	2104      	movs	r1, #4
 800fede:	4620      	mov	r0, r4
 800fee0:	4798      	blx	r3
 800fee2:	f8c9 0020 	str.w	r0, [r9, #32]
 800fee6:	f8d6 9000 	ldr.w	r9, [r6]
 800feea:	f8d9 b020 	ldr.w	fp, [r9, #32]
 800feee:	f1bb 0f00 	cmp.w	fp, #0
 800fef2:	d029      	beq.n	800ff48 <rcl_init+0x14c>
 800fef4:	2c01      	cmp	r4, #1
 800fef6:	f17a 0300 	sbcs.w	r3, sl, #0
 800fefa:	db33      	blt.n	800ff64 <rcl_init+0x168>
 800fefc:	f04f 0800 	mov.w	r8, #0
 800ff00:	3d04      	subs	r5, #4
 800ff02:	46c1      	mov	r9, r8
 800ff04:	e00d      	b.n	800ff22 <rcl_init+0x126>
 800ff06:	6829      	ldr	r1, [r5, #0]
 800ff08:	f007 fc0b 	bl	8017722 <memcpy>
 800ff0c:	f118 0801 	adds.w	r8, r8, #1
 800ff10:	f149 0900 	adc.w	r9, r9, #0
 800ff14:	45ca      	cmp	sl, r9
 800ff16:	bf08      	it	eq
 800ff18:	4544      	cmpeq	r4, r8
 800ff1a:	d021      	beq.n	800ff60 <rcl_init+0x164>
 800ff1c:	6833      	ldr	r3, [r6, #0]
 800ff1e:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800ff22:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800ff26:	f7f0 f9d3 	bl	80002d0 <strlen>
 800ff2a:	1c42      	adds	r2, r0, #1
 800ff2c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ff2e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800ff30:	9201      	str	r2, [sp, #4]
 800ff32:	4610      	mov	r0, r2
 800ff34:	4798      	blx	r3
 800ff36:	6833      	ldr	r3, [r6, #0]
 800ff38:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800ff3c:	6a1b      	ldr	r3, [r3, #32]
 800ff3e:	9a01      	ldr	r2, [sp, #4]
 800ff40:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ff44:	2800      	cmp	r0, #0
 800ff46:	d1de      	bne.n	800ff06 <rcl_init+0x10a>
 800ff48:	f04f 080a 	mov.w	r8, #10
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	f7ff fef5 	bl	800fd3c <__cleanup_context>
 800ff52:	e76b      	b.n	800fe2c <rcl_init+0x30>
 800ff54:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800ff58:	4640      	mov	r0, r8
 800ff5a:	b025      	add	sp, #148	@ 0x94
 800ff5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff60:	f8d6 9000 	ldr.w	r9, [r6]
 800ff64:	4a26      	ldr	r2, [pc, #152]	@ (8010000 <rcl_init+0x204>)
 800ff66:	6813      	ldr	r3, [r2, #0]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	d030      	beq.n	800ffce <rcl_init+0x1d2>
 800ff6c:	461d      	mov	r5, r3
 800ff6e:	2000      	movs	r0, #0
 800ff70:	4619      	mov	r1, r3
 800ff72:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800ff76:	6073      	str	r3, [r6, #4]
 800ff78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ff7a:	6011      	str	r1, [r2, #0]
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	e9c4 5006 	strd	r5, r0, [r4, #24]
 800ff82:	d033      	beq.n	800ffec <rcl_init+0x1f0>
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff8a:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 800ff8e:	b333      	cbz	r3, 800ffde <rcl_init+0x1e2>
 800ff90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ff92:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800ff96:	b953      	cbnz	r3, 800ffae <rcl_init+0x1b2>
 800ff98:	2801      	cmp	r0, #1
 800ff9a:	d008      	beq.n	800ffae <rcl_init+0x1b2>
 800ff9c:	a91f      	add	r1, sp, #124	@ 0x7c
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f005 ff2e 	bl	8015e00 <rcl_get_discovery_static_peers>
 800ffa4:	4680      	mov	r8, r0
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d1d0      	bne.n	800ff4c <rcl_init+0x150>
 800ffaa:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800ffae:	f005 ff1d 	bl	8015dec <rcl_automatic_discovery_range_to_string>
 800ffb2:	6831      	ldr	r1, [r6, #0]
 800ffb4:	6948      	ldr	r0, [r1, #20]
 800ffb6:	3128      	adds	r1, #40	@ 0x28
 800ffb8:	3018      	adds	r0, #24
 800ffba:	f003 fc43 	bl	8013844 <rmw_init>
 800ffbe:	4680      	mov	r8, r0
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	f43f af33 	beq.w	800fe2c <rcl_init+0x30>
 800ffc6:	f7ff fe99 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 800ffca:	4680      	mov	r8, r0
 800ffcc:	e7be      	b.n	800ff4c <rcl_init+0x150>
 800ffce:	2101      	movs	r1, #1
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	460d      	mov	r5, r1
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	e7cc      	b.n	800ff72 <rcl_init+0x176>
 800ffd8:	f04f 080a 	mov.w	r8, #10
 800ffdc:	e726      	b.n	800fe2c <rcl_init+0x30>
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f005 fec2 	bl	8015d68 <rcl_get_automatic_discovery_range>
 800ffe4:	4680      	mov	r8, r0
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	d0d2      	beq.n	800ff90 <rcl_init+0x194>
 800ffea:	e7af      	b.n	800ff4c <rcl_init+0x150>
 800ffec:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800fff0:	f005 ff70 	bl	8015ed4 <rcl_get_default_domain_id>
 800fff4:	4680      	mov	r8, r0
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d1a8      	bne.n	800ff4c <rcl_init+0x150>
 800fffa:	6833      	ldr	r3, [r6, #0]
 800fffc:	695c      	ldr	r4, [r3, #20]
 800fffe:	e7c1      	b.n	800ff84 <rcl_init+0x188>
 8010000:	2000ea04 	.word	0x2000ea04

08010004 <rcl_get_zero_initialized_init_options>:
 8010004:	2000      	movs	r0, #0
 8010006:	4770      	bx	lr

08010008 <rcl_init_options_init>:
 8010008:	b084      	sub	sp, #16
 801000a:	b570      	push	{r4, r5, r6, lr}
 801000c:	b09e      	sub	sp, #120	@ 0x78
 801000e:	ad23      	add	r5, sp, #140	@ 0x8c
 8010010:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010014:	2800      	cmp	r0, #0
 8010016:	d046      	beq.n	80100a6 <rcl_init_options_init+0x9e>
 8010018:	6803      	ldr	r3, [r0, #0]
 801001a:	4604      	mov	r4, r0
 801001c:	b133      	cbz	r3, 801002c <rcl_init_options_init+0x24>
 801001e:	2564      	movs	r5, #100	@ 0x64
 8010020:	4628      	mov	r0, r5
 8010022:	b01e      	add	sp, #120	@ 0x78
 8010024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010028:	b004      	add	sp, #16
 801002a:	4770      	bx	lr
 801002c:	4628      	mov	r0, r5
 801002e:	f7f9 ff03 	bl	8009e38 <rcutils_allocator_is_valid>
 8010032:	2800      	cmp	r0, #0
 8010034:	d037      	beq.n	80100a6 <rcl_init_options_init+0x9e>
 8010036:	46ae      	mov	lr, r5
 8010038:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801003c:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010040:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010044:	f8de 3000 	ldr.w	r3, [lr]
 8010048:	f8cc 3000 	str.w	r3, [ip]
 801004c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801004e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010050:	2070      	movs	r0, #112	@ 0x70
 8010052:	4798      	blx	r3
 8010054:	4606      	mov	r6, r0
 8010056:	6020      	str	r0, [r4, #0]
 8010058:	b338      	cbz	r0, 80100aa <rcl_init_options_init+0xa2>
 801005a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801005e:	4686      	mov	lr, r0
 8010060:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010064:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010068:	f8dc 3000 	ldr.w	r3, [ip]
 801006c:	f8ce 3000 	str.w	r3, [lr]
 8010070:	a802      	add	r0, sp, #8
 8010072:	f003 f877 	bl	8013164 <rmw_get_zero_initialized_init_options>
 8010076:	2258      	movs	r2, #88	@ 0x58
 8010078:	a902      	add	r1, sp, #8
 801007a:	f106 0018 	add.w	r0, r6, #24
 801007e:	f007 fb50 	bl	8017722 <memcpy>
 8010082:	ab26      	add	r3, sp, #152	@ 0x98
 8010084:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010088:	6826      	ldr	r6, [r4, #0]
 801008a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801008e:	f106 0018 	add.w	r0, r6, #24
 8010092:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010096:	f003 fae5 	bl	8013664 <rmw_init_options_init>
 801009a:	4605      	mov	r5, r0
 801009c:	b938      	cbnz	r0, 80100ae <rcl_init_options_init+0xa6>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 80100a4:	e7bc      	b.n	8010020 <rcl_init_options_init+0x18>
 80100a6:	250b      	movs	r5, #11
 80100a8:	e7ba      	b.n	8010020 <rcl_init_options_init+0x18>
 80100aa:	250a      	movs	r5, #10
 80100ac:	e7b8      	b.n	8010020 <rcl_init_options_init+0x18>
 80100ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80100b0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80100b2:	6820      	ldr	r0, [r4, #0]
 80100b4:	4798      	blx	r3
 80100b6:	4628      	mov	r0, r5
 80100b8:	f7ff fe20 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 80100bc:	4605      	mov	r5, r0
 80100be:	e7af      	b.n	8010020 <rcl_init_options_init+0x18>

080100c0 <rcl_init_options_fini>:
 80100c0:	b530      	push	{r4, r5, lr}
 80100c2:	b087      	sub	sp, #28
 80100c4:	b1f0      	cbz	r0, 8010104 <rcl_init_options_fini+0x44>
 80100c6:	6803      	ldr	r3, [r0, #0]
 80100c8:	4604      	mov	r4, r0
 80100ca:	b1db      	cbz	r3, 8010104 <rcl_init_options_fini+0x44>
 80100cc:	469c      	mov	ip, r3
 80100ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100d2:	f10d 0e04 	add.w	lr, sp, #4
 80100d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100da:	f8dc 3000 	ldr.w	r3, [ip]
 80100de:	f8ce 3000 	str.w	r3, [lr]
 80100e2:	a801      	add	r0, sp, #4
 80100e4:	f7f9 fea8 	bl	8009e38 <rcutils_allocator_is_valid>
 80100e8:	b160      	cbz	r0, 8010104 <rcl_init_options_fini+0x44>
 80100ea:	6820      	ldr	r0, [r4, #0]
 80100ec:	3018      	adds	r0, #24
 80100ee:	f003 fb6b 	bl	80137c8 <rmw_init_options_fini>
 80100f2:	4605      	mov	r5, r0
 80100f4:	b950      	cbnz	r0, 801010c <rcl_init_options_fini+0x4c>
 80100f6:	6820      	ldr	r0, [r4, #0]
 80100f8:	9b02      	ldr	r3, [sp, #8]
 80100fa:	9905      	ldr	r1, [sp, #20]
 80100fc:	4798      	blx	r3
 80100fe:	4628      	mov	r0, r5
 8010100:	b007      	add	sp, #28
 8010102:	bd30      	pop	{r4, r5, pc}
 8010104:	250b      	movs	r5, #11
 8010106:	4628      	mov	r0, r5
 8010108:	b007      	add	sp, #28
 801010a:	bd30      	pop	{r4, r5, pc}
 801010c:	f7ff fdf6 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 8010110:	4605      	mov	r5, r0
 8010112:	e7f8      	b.n	8010106 <rcl_init_options_fini+0x46>

08010114 <rcl_init_options_copy>:
 8010114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010116:	b09d      	sub	sp, #116	@ 0x74
 8010118:	2800      	cmp	r0, #0
 801011a:	d04a      	beq.n	80101b2 <rcl_init_options_copy+0x9e>
 801011c:	4604      	mov	r4, r0
 801011e:	6800      	ldr	r0, [r0, #0]
 8010120:	2800      	cmp	r0, #0
 8010122:	d046      	beq.n	80101b2 <rcl_init_options_copy+0x9e>
 8010124:	460d      	mov	r5, r1
 8010126:	f7f9 fe87 	bl	8009e38 <rcutils_allocator_is_valid>
 801012a:	2800      	cmp	r0, #0
 801012c:	d041      	beq.n	80101b2 <rcl_init_options_copy+0x9e>
 801012e:	2d00      	cmp	r5, #0
 8010130:	d03f      	beq.n	80101b2 <rcl_init_options_copy+0x9e>
 8010132:	682b      	ldr	r3, [r5, #0]
 8010134:	b11b      	cbz	r3, 801013e <rcl_init_options_copy+0x2a>
 8010136:	2464      	movs	r4, #100	@ 0x64
 8010138:	4620      	mov	r0, r4
 801013a:	b01d      	add	sp, #116	@ 0x74
 801013c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801013e:	6826      	ldr	r6, [r4, #0]
 8010140:	46b6      	mov	lr, r6
 8010142:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010146:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 801014a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801014e:	f8de 3000 	ldr.w	r3, [lr]
 8010152:	6837      	ldr	r7, [r6, #0]
 8010154:	f8cc 3000 	str.w	r3, [ip]
 8010158:	4619      	mov	r1, r3
 801015a:	2070      	movs	r0, #112	@ 0x70
 801015c:	47b8      	blx	r7
 801015e:	4606      	mov	r6, r0
 8010160:	6028      	str	r0, [r5, #0]
 8010162:	b350      	cbz	r0, 80101ba <rcl_init_options_copy+0xa6>
 8010164:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8010168:	4686      	mov	lr, r0
 801016a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801016e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010172:	f8dc 3000 	ldr.w	r3, [ip]
 8010176:	f8ce 3000 	str.w	r3, [lr]
 801017a:	4668      	mov	r0, sp
 801017c:	f002 fff2 	bl	8013164 <rmw_get_zero_initialized_init_options>
 8010180:	2258      	movs	r2, #88	@ 0x58
 8010182:	4669      	mov	r1, sp
 8010184:	f106 0018 	add.w	r0, r6, #24
 8010188:	f007 facb 	bl	8017722 <memcpy>
 801018c:	6820      	ldr	r0, [r4, #0]
 801018e:	6829      	ldr	r1, [r5, #0]
 8010190:	3018      	adds	r0, #24
 8010192:	3118      	adds	r1, #24
 8010194:	f003 fac8 	bl	8013728 <rmw_init_options_copy>
 8010198:	4604      	mov	r4, r0
 801019a:	2800      	cmp	r0, #0
 801019c:	d0cc      	beq.n	8010138 <rcl_init_options_copy+0x24>
 801019e:	f7f9 fe5f 	bl	8009e60 <rcutils_get_error_string>
 80101a2:	f7f9 fe75 	bl	8009e90 <rcutils_reset_error>
 80101a6:	4628      	mov	r0, r5
 80101a8:	f7ff ff8a 	bl	80100c0 <rcl_init_options_fini>
 80101ac:	b138      	cbz	r0, 80101be <rcl_init_options_copy+0xaa>
 80101ae:	4604      	mov	r4, r0
 80101b0:	e7c2      	b.n	8010138 <rcl_init_options_copy+0x24>
 80101b2:	240b      	movs	r4, #11
 80101b4:	4620      	mov	r0, r4
 80101b6:	b01d      	add	sp, #116	@ 0x74
 80101b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101ba:	240a      	movs	r4, #10
 80101bc:	e7bc      	b.n	8010138 <rcl_init_options_copy+0x24>
 80101be:	4620      	mov	r0, r4
 80101c0:	b01d      	add	sp, #116	@ 0x74
 80101c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80101c6:	f7ff bd99 	b.w	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 80101ca:	bf00      	nop

080101cc <rcl_get_zero_initialized_node>:
 80101cc:	4a03      	ldr	r2, [pc, #12]	@ (80101dc <rcl_get_zero_initialized_node+0x10>)
 80101ce:	4603      	mov	r3, r0
 80101d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80101d8:	4618      	mov	r0, r3
 80101da:	4770      	bx	lr
 80101dc:	08019024 	.word	0x08019024

080101e0 <rcl_node_init>:
 80101e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e4:	b0ab      	sub	sp, #172	@ 0xac
 80101e6:	4604      	mov	r4, r0
 80101e8:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 80101ea:	a825      	add	r0, sp, #148	@ 0x94
 80101ec:	4689      	mov	r9, r1
 80101ee:	4690      	mov	r8, r2
 80101f0:	461f      	mov	r7, r3
 80101f2:	f006 f8e1 	bl	80163b8 <rcl_guard_condition_get_default_options>
 80101f6:	2d00      	cmp	r5, #0
 80101f8:	f000 80d8 	beq.w	80103ac <rcl_node_init+0x1cc>
 80101fc:	4628      	mov	r0, r5
 80101fe:	f7f9 fe1b 	bl	8009e38 <rcutils_allocator_is_valid>
 8010202:	2800      	cmp	r0, #0
 8010204:	f000 80d2 	beq.w	80103ac <rcl_node_init+0x1cc>
 8010208:	f1b9 0f00 	cmp.w	r9, #0
 801020c:	f000 80ce 	beq.w	80103ac <rcl_node_init+0x1cc>
 8010210:	f1b8 0f00 	cmp.w	r8, #0
 8010214:	f000 80ca 	beq.w	80103ac <rcl_node_init+0x1cc>
 8010218:	2c00      	cmp	r4, #0
 801021a:	f000 80c7 	beq.w	80103ac <rcl_node_init+0x1cc>
 801021e:	6866      	ldr	r6, [r4, #4]
 8010220:	2e00      	cmp	r6, #0
 8010222:	f040 80ca 	bne.w	80103ba <rcl_node_init+0x1da>
 8010226:	2f00      	cmp	r7, #0
 8010228:	f000 80c0 	beq.w	80103ac <rcl_node_init+0x1cc>
 801022c:	4638      	mov	r0, r7
 801022e:	f7ff fd7f 	bl	800fd30 <rcl_context_is_valid>
 8010232:	2800      	cmp	r0, #0
 8010234:	f000 80bf 	beq.w	80103b6 <rcl_node_init+0x1d6>
 8010238:	4632      	mov	r2, r6
 801023a:	a924      	add	r1, sp, #144	@ 0x90
 801023c:	4648      	mov	r0, r9
 801023e:	9624      	str	r6, [sp, #144]	@ 0x90
 8010240:	f003 f92c 	bl	801349c <rmw_validate_node_name>
 8010244:	4606      	mov	r6, r0
 8010246:	2800      	cmp	r0, #0
 8010248:	f040 80b1 	bne.w	80103ae <rcl_node_init+0x1ce>
 801024c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801024e:	2800      	cmp	r0, #0
 8010250:	f040 8104 	bne.w	801045c <rcl_node_init+0x27c>
 8010254:	f898 3000 	ldrb.w	r3, [r8]
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 80f0 	beq.w	801043e <rcl_node_init+0x25e>
 801025e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010260:	f000 80b0 	beq.w	80103c4 <rcl_node_init+0x1e4>
 8010264:	4b85      	ldr	r3, [pc, #532]	@ (801047c <rcl_node_init+0x29c>)
 8010266:	f8cd 800c 	str.w	r8, [sp, #12]
 801026a:	9302      	str	r3, [sp, #8]
 801026c:	692b      	ldr	r3, [r5, #16]
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010274:	9301      	str	r3, [sp, #4]
 8010276:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801027a:	f002 fccf 	bl	8012c1c <rcutils_format_string_limit>
 801027e:	4680      	mov	r8, r0
 8010280:	f1b8 0f00 	cmp.w	r8, #0
 8010284:	f000 80e8 	beq.w	8010458 <rcl_node_init+0x278>
 8010288:	2200      	movs	r2, #0
 801028a:	a924      	add	r1, sp, #144	@ 0x90
 801028c:	4640      	mov	r0, r8
 801028e:	9224      	str	r2, [sp, #144]	@ 0x90
 8010290:	f003 f8e6 	bl	8013460 <rmw_validate_namespace>
 8010294:	4606      	mov	r6, r0
 8010296:	2800      	cmp	r0, #0
 8010298:	f040 80a4 	bne.w	80103e4 <rcl_node_init+0x204>
 801029c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801029e:	2800      	cmp	r0, #0
 80102a0:	f040 809d 	bne.w	80103de <rcl_node_init+0x1fe>
 80102a4:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80102a8:	2178      	movs	r1, #120	@ 0x78
 80102aa:	2001      	movs	r0, #1
 80102ac:	4798      	blx	r3
 80102ae:	4606      	mov	r6, r0
 80102b0:	6060      	str	r0, [r4, #4]
 80102b2:	2800      	cmp	r0, #0
 80102b4:	f000 80d6 	beq.w	8010464 <rcl_node_init+0x284>
 80102b8:	a80a      	add	r0, sp, #40	@ 0x28
 80102ba:	f000 f92f 	bl	801051c <rcl_node_get_default_options>
 80102be:	a90a      	add	r1, sp, #40	@ 0x28
 80102c0:	4630      	mov	r0, r6
 80102c2:	2268      	movs	r2, #104	@ 0x68
 80102c4:	f007 fa2d 	bl	8017722 <memcpy>
 80102c8:	6861      	ldr	r1, [r4, #4]
 80102ca:	6027      	str	r7, [r4, #0]
 80102cc:	4628      	mov	r0, r5
 80102ce:	f000 f933 	bl	8010538 <rcl_node_options_copy>
 80102d2:	4606      	mov	r6, r0
 80102d4:	2800      	cmp	r0, #0
 80102d6:	f040 8085 	bne.w	80103e4 <rcl_node_init+0x204>
 80102da:	4640      	mov	r0, r8
 80102dc:	f7ef fff8 	bl	80002d0 <strlen>
 80102e0:	eb08 0300 	add.w	r3, r8, r0
 80102e4:	6866      	ldr	r6, [r4, #4]
 80102e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80102ea:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80102ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80102f0:	bf0c      	ite	eq
 80102f2:	4b63      	ldreq	r3, [pc, #396]	@ (8010480 <rcl_node_init+0x2a0>)
 80102f4:	4b63      	ldrne	r3, [pc, #396]	@ (8010484 <rcl_node_init+0x2a4>)
 80102f6:	9302      	str	r3, [sp, #8]
 80102f8:	692b      	ldr	r3, [r5, #16]
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010300:	9301      	str	r3, [sp, #4]
 8010302:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010306:	f002 fc89 	bl	8012c1c <rcutils_format_string_limit>
 801030a:	6863      	ldr	r3, [r4, #4]
 801030c:	6770      	str	r0, [r6, #116]	@ 0x74
 801030e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8010310:	2a00      	cmp	r2, #0
 8010312:	f000 80a9 	beq.w	8010468 <rcl_node_init+0x288>
 8010316:	6822      	ldr	r2, [r4, #0]
 8010318:	9307      	str	r3, [sp, #28]
 801031a:	6810      	ldr	r0, [r2, #0]
 801031c:	4649      	mov	r1, r9
 801031e:	3028      	adds	r0, #40	@ 0x28
 8010320:	4642      	mov	r2, r8
 8010322:	f003 fce7 	bl	8013cf4 <rmw_create_node>
 8010326:	9b07      	ldr	r3, [sp, #28]
 8010328:	6698      	str	r0, [r3, #104]	@ 0x68
 801032a:	6863      	ldr	r3, [r4, #4]
 801032c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801032e:	2800      	cmp	r0, #0
 8010330:	f000 809d 	beq.w	801046e <rcl_node_init+0x28e>
 8010334:	f003 fd70 	bl	8013e18 <rmw_node_get_graph_guard_condition>
 8010338:	4681      	mov	r9, r0
 801033a:	2800      	cmp	r0, #0
 801033c:	f000 809c 	beq.w	8010478 <rcl_node_init+0x298>
 8010340:	682b      	ldr	r3, [r5, #0]
 8010342:	6929      	ldr	r1, [r5, #16]
 8010344:	6866      	ldr	r6, [r4, #4]
 8010346:	2008      	movs	r0, #8
 8010348:	4798      	blx	r3
 801034a:	6863      	ldr	r3, [r4, #4]
 801034c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801034e:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8010352:	f1ba 0f00 	cmp.w	sl, #0
 8010356:	f000 808d 	beq.w	8010474 <rcl_node_init+0x294>
 801035a:	f10d 0b20 	add.w	fp, sp, #32
 801035e:	4658      	mov	r0, fp
 8010360:	f005 ff52 	bl	8016208 <rcl_get_zero_initialized_guard_condition>
 8010364:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8010368:	6863      	ldr	r3, [r4, #4]
 801036a:	46ac      	mov	ip, r5
 801036c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010370:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010374:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010378:	ae25      	add	r6, sp, #148	@ 0x94
 801037a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801037c:	f8dc 3000 	ldr.w	r3, [ip]
 8010380:	6033      	str	r3, [r6, #0]
 8010382:	ab2a      	add	r3, sp, #168	@ 0xa8
 8010384:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010388:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801038c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801038e:	463a      	mov	r2, r7
 8010390:	4649      	mov	r1, r9
 8010392:	4670      	mov	r0, lr
 8010394:	f005 ff8e 	bl	80162b4 <rcl_guard_condition_init_from_rmw>
 8010398:	4606      	mov	r6, r0
 801039a:	bb18      	cbnz	r0, 80103e4 <rcl_node_init+0x204>
 801039c:	686b      	ldr	r3, [r5, #4]
 801039e:	6929      	ldr	r1, [r5, #16]
 80103a0:	4798      	blx	r3
 80103a2:	686b      	ldr	r3, [r5, #4]
 80103a4:	6929      	ldr	r1, [r5, #16]
 80103a6:	4640      	mov	r0, r8
 80103a8:	4798      	blx	r3
 80103aa:	e000      	b.n	80103ae <rcl_node_init+0x1ce>
 80103ac:	260b      	movs	r6, #11
 80103ae:	4630      	mov	r0, r6
 80103b0:	b02b      	add	sp, #172	@ 0xac
 80103b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b6:	2665      	movs	r6, #101	@ 0x65
 80103b8:	e7f9      	b.n	80103ae <rcl_node_init+0x1ce>
 80103ba:	2664      	movs	r6, #100	@ 0x64
 80103bc:	4630      	mov	r0, r6
 80103be:	b02b      	add	sp, #172	@ 0xac
 80103c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c4:	f105 030c 	add.w	r3, r5, #12
 80103c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80103cc:	e88d 0003 	stmia.w	sp, {r0, r1}
 80103d0:	4640      	mov	r0, r8
 80103d2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80103d6:	f002 fd3f 	bl	8012e58 <rcutils_strdup>
 80103da:	4680      	mov	r8, r0
 80103dc:	e750      	b.n	8010280 <rcl_node_init+0xa0>
 80103de:	f003 f851 	bl	8013484 <rmw_namespace_validation_result_string>
 80103e2:	26ca      	movs	r6, #202	@ 0xca
 80103e4:	6863      	ldr	r3, [r4, #4]
 80103e6:	b1f3      	cbz	r3, 8010426 <rcl_node_init+0x246>
 80103e8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80103ea:	b138      	cbz	r0, 80103fc <rcl_node_init+0x21c>
 80103ec:	f005 ffc2 	bl	8016374 <rcl_guard_condition_fini>
 80103f0:	6863      	ldr	r3, [r4, #4]
 80103f2:	6929      	ldr	r1, [r5, #16]
 80103f4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80103f6:	686b      	ldr	r3, [r5, #4]
 80103f8:	4798      	blx	r3
 80103fa:	6863      	ldr	r3, [r4, #4]
 80103fc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80103fe:	b110      	cbz	r0, 8010406 <rcl_node_init+0x226>
 8010400:	f003 fc8e 	bl	8013d20 <rmw_destroy_node>
 8010404:	6863      	ldr	r3, [r4, #4]
 8010406:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8010408:	6929      	ldr	r1, [r5, #16]
 801040a:	686b      	ldr	r3, [r5, #4]
 801040c:	4798      	blx	r3
 801040e:	6863      	ldr	r3, [r4, #4]
 8010410:	6929      	ldr	r1, [r5, #16]
 8010412:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010414:	686b      	ldr	r3, [r5, #4]
 8010416:	4798      	blx	r3
 8010418:	6860      	ldr	r0, [r4, #4]
 801041a:	f000 f8ab 	bl	8010574 <rcl_node_options_fini>
 801041e:	686b      	ldr	r3, [r5, #4]
 8010420:	6929      	ldr	r1, [r5, #16]
 8010422:	6860      	ldr	r0, [r4, #4]
 8010424:	4798      	blx	r3
 8010426:	686b      	ldr	r3, [r5, #4]
 8010428:	6929      	ldr	r1, [r5, #16]
 801042a:	2000      	movs	r0, #0
 801042c:	4798      	blx	r3
 801042e:	686b      	ldr	r3, [r5, #4]
 8010430:	6929      	ldr	r1, [r5, #16]
 8010432:	4640      	mov	r0, r8
 8010434:	4798      	blx	r3
 8010436:	2300      	movs	r3, #0
 8010438:	e9c4 3300 	strd	r3, r3, [r4]
 801043c:	e7b7      	b.n	80103ae <rcl_node_init+0x1ce>
 801043e:	f105 030c 	add.w	r3, r5, #12
 8010442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010446:	e88d 0003 	stmia.w	sp, {r0, r1}
 801044a:	480f      	ldr	r0, [pc, #60]	@ (8010488 <rcl_node_init+0x2a8>)
 801044c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010450:	f002 fd02 	bl	8012e58 <rcutils_strdup>
 8010454:	4680      	mov	r8, r0
 8010456:	e713      	b.n	8010280 <rcl_node_init+0xa0>
 8010458:	260a      	movs	r6, #10
 801045a:	e7a8      	b.n	80103ae <rcl_node_init+0x1ce>
 801045c:	f003 f86a 	bl	8013534 <rmw_node_name_validation_result_string>
 8010460:	26c9      	movs	r6, #201	@ 0xc9
 8010462:	e7a4      	b.n	80103ae <rcl_node_init+0x1ce>
 8010464:	260a      	movs	r6, #10
 8010466:	e7de      	b.n	8010426 <rcl_node_init+0x246>
 8010468:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801046a:	260a      	movs	r6, #10
 801046c:	e7bd      	b.n	80103ea <rcl_node_init+0x20a>
 801046e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010470:	2601      	movs	r6, #1
 8010472:	e7ba      	b.n	80103ea <rcl_node_init+0x20a>
 8010474:	260a      	movs	r6, #10
 8010476:	e7c1      	b.n	80103fc <rcl_node_init+0x21c>
 8010478:	2601      	movs	r6, #1
 801047a:	e7b3      	b.n	80103e4 <rcl_node_init+0x204>
 801047c:	080187cc 	.word	0x080187cc
 8010480:	08018670 	.word	0x08018670
 8010484:	080187d0 	.word	0x080187d0
 8010488:	080187c8 	.word	0x080187c8

0801048c <rcl_node_is_valid>:
 801048c:	b130      	cbz	r0, 801049c <rcl_node_is_valid+0x10>
 801048e:	6843      	ldr	r3, [r0, #4]
 8010490:	b123      	cbz	r3, 801049c <rcl_node_is_valid+0x10>
 8010492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010494:	b113      	cbz	r3, 801049c <rcl_node_is_valid+0x10>
 8010496:	6800      	ldr	r0, [r0, #0]
 8010498:	f7ff bc4a 	b.w	800fd30 <rcl_context_is_valid>
 801049c:	2000      	movs	r0, #0
 801049e:	4770      	bx	lr

080104a0 <rcl_node_get_name>:
 80104a0:	b120      	cbz	r0, 80104ac <rcl_node_get_name+0xc>
 80104a2:	6840      	ldr	r0, [r0, #4]
 80104a4:	b110      	cbz	r0, 80104ac <rcl_node_get_name+0xc>
 80104a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80104a8:	b100      	cbz	r0, 80104ac <rcl_node_get_name+0xc>
 80104aa:	6880      	ldr	r0, [r0, #8]
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop

080104b0 <rcl_node_get_namespace>:
 80104b0:	b120      	cbz	r0, 80104bc <rcl_node_get_namespace+0xc>
 80104b2:	6840      	ldr	r0, [r0, #4]
 80104b4:	b110      	cbz	r0, 80104bc <rcl_node_get_namespace+0xc>
 80104b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80104b8:	b100      	cbz	r0, 80104bc <rcl_node_get_namespace+0xc>
 80104ba:	68c0      	ldr	r0, [r0, #12]
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop

080104c0 <rcl_node_get_options>:
 80104c0:	b128      	cbz	r0, 80104ce <rcl_node_get_options+0xe>
 80104c2:	6840      	ldr	r0, [r0, #4]
 80104c4:	b118      	cbz	r0, 80104ce <rcl_node_get_options+0xe>
 80104c6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	bf08      	it	eq
 80104cc:	2000      	moveq	r0, #0
 80104ce:	4770      	bx	lr

080104d0 <rcl_node_get_rmw_handle>:
 80104d0:	b110      	cbz	r0, 80104d8 <rcl_node_get_rmw_handle+0x8>
 80104d2:	6840      	ldr	r0, [r0, #4]
 80104d4:	b100      	cbz	r0, 80104d8 <rcl_node_get_rmw_handle+0x8>
 80104d6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop

080104dc <rcl_get_disable_loaned_message>:
 80104dc:	b510      	push	{r4, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	2300      	movs	r3, #0
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	b1a0      	cbz	r0, 8010510 <rcl_get_disable_loaned_message+0x34>
 80104e6:	4604      	mov	r4, r0
 80104e8:	a901      	add	r1, sp, #4
 80104ea:	480b      	ldr	r0, [pc, #44]	@ (8010518 <rcl_get_disable_loaned_message+0x3c>)
 80104ec:	f002 fb7e 	bl	8012bec <rcutils_get_env>
 80104f0:	b110      	cbz	r0, 80104f8 <rcl_get_disable_loaned_message+0x1c>
 80104f2:	2001      	movs	r0, #1
 80104f4:	b002      	add	sp, #8
 80104f6:	bd10      	pop	{r4, pc}
 80104f8:	9a01      	ldr	r2, [sp, #4]
 80104fa:	7813      	ldrb	r3, [r2, #0]
 80104fc:	3b31      	subs	r3, #49	@ 0x31
 80104fe:	bf08      	it	eq
 8010500:	7853      	ldrbeq	r3, [r2, #1]
 8010502:	fab3 f383 	clz	r3, r3
 8010506:	095b      	lsrs	r3, r3, #5
 8010508:	2000      	movs	r0, #0
 801050a:	7023      	strb	r3, [r4, #0]
 801050c:	b002      	add	sp, #8
 801050e:	bd10      	pop	{r4, pc}
 8010510:	200b      	movs	r0, #11
 8010512:	b002      	add	sp, #8
 8010514:	bd10      	pop	{r4, pc}
 8010516:	bf00      	nop
 8010518:	080187d8 	.word	0x080187d8

0801051c <rcl_node_get_default_options>:
 801051c:	b510      	push	{r4, lr}
 801051e:	2253      	movs	r2, #83	@ 0x53
 8010520:	4604      	mov	r4, r0
 8010522:	2100      	movs	r1, #0
 8010524:	3015      	adds	r0, #21
 8010526:	f007 f821 	bl	801756c <memset>
 801052a:	4620      	mov	r0, r4
 801052c:	f7f9 fc58 	bl	8009de0 <rcutils_get_default_allocator>
 8010530:	2301      	movs	r3, #1
 8010532:	7523      	strb	r3, [r4, #20]
 8010534:	4620      	mov	r0, r4
 8010536:	bd10      	pop	{r4, pc}

08010538 <rcl_node_options_copy>:
 8010538:	b1d0      	cbz	r0, 8010570 <rcl_node_options_copy+0x38>
 801053a:	b570      	push	{r4, r5, r6, lr}
 801053c:	460c      	mov	r4, r1
 801053e:	b1a9      	cbz	r1, 801056c <rcl_node_options_copy+0x34>
 8010540:	4288      	cmp	r0, r1
 8010542:	4684      	mov	ip, r0
 8010544:	d012      	beq.n	801056c <rcl_node_options_copy+0x34>
 8010546:	4605      	mov	r5, r0
 8010548:	8a86      	ldrh	r6, [r0, #20]
 801054a:	468e      	mov	lr, r1
 801054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801054e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010552:	682b      	ldr	r3, [r5, #0]
 8010554:	f8ce 3000 	str.w	r3, [lr]
 8010558:	f10c 0118 	add.w	r1, ip, #24
 801055c:	2250      	movs	r2, #80	@ 0x50
 801055e:	82a6      	strh	r6, [r4, #20]
 8010560:	f104 0018 	add.w	r0, r4, #24
 8010564:	f007 f8dd 	bl	8017722 <memcpy>
 8010568:	2000      	movs	r0, #0
 801056a:	bd70      	pop	{r4, r5, r6, pc}
 801056c:	200b      	movs	r0, #11
 801056e:	bd70      	pop	{r4, r5, r6, pc}
 8010570:	200b      	movs	r0, #11
 8010572:	4770      	bx	lr

08010574 <rcl_node_options_fini>:
 8010574:	b1c0      	cbz	r0, 80105a8 <rcl_node_options_fini+0x34>
 8010576:	b500      	push	{lr}
 8010578:	4684      	mov	ip, r0
 801057a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801057e:	b087      	sub	sp, #28
 8010580:	f10d 0e04 	add.w	lr, sp, #4
 8010584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010588:	f8dc 3000 	ldr.w	r3, [ip]
 801058c:	f8ce 3000 	str.w	r3, [lr]
 8010590:	a801      	add	r0, sp, #4
 8010592:	f7f9 fc51 	bl	8009e38 <rcutils_allocator_is_valid>
 8010596:	b118      	cbz	r0, 80105a0 <rcl_node_options_fini+0x2c>
 8010598:	2000      	movs	r0, #0
 801059a:	b007      	add	sp, #28
 801059c:	f85d fb04 	ldr.w	pc, [sp], #4
 80105a0:	200b      	movs	r0, #11
 80105a2:	b007      	add	sp, #28
 80105a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80105a8:	200b      	movs	r0, #11
 80105aa:	4770      	bx	lr

080105ac <rcl_node_resolve_name>:
 80105ac:	b082      	sub	sp, #8
 80105ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b2:	b091      	sub	sp, #68	@ 0x44
 80105b4:	ac1a      	add	r4, sp, #104	@ 0x68
 80105b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80105ba:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80105be:	2800      	cmp	r0, #0
 80105c0:	d03a      	beq.n	8010638 <rcl_node_resolve_name+0x8c>
 80105c2:	460c      	mov	r4, r1
 80105c4:	4605      	mov	r5, r0
 80105c6:	f7ff ff7b 	bl	80104c0 <rcl_node_get_options>
 80105ca:	b370      	cbz	r0, 801062a <rcl_node_resolve_name+0x7e>
 80105cc:	4628      	mov	r0, r5
 80105ce:	f7ff ff67 	bl	80104a0 <rcl_node_get_name>
 80105d2:	4681      	mov	r9, r0
 80105d4:	4628      	mov	r0, r5
 80105d6:	f7ff ff6b 	bl	80104b0 <rcl_node_get_namespace>
 80105da:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80105de:	4607      	mov	r7, r0
 80105e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80105e4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80105e6:	46ac      	mov	ip, r5
 80105e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105ec:	f8de 3000 	ldr.w	r3, [lr]
 80105f0:	f8cc 3000 	str.w	r3, [ip]
 80105f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80105f6:	b1fb      	cbz	r3, 8010638 <rcl_node_resolve_name+0x8c>
 80105f8:	468a      	mov	sl, r1
 80105fa:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80105fe:	f002 fc8b 	bl	8012f18 <rcutils_get_zero_initialized_string_map>
 8010602:	ab10      	add	r3, sp, #64	@ 0x40
 8010604:	9008      	str	r0, [sp, #32]
 8010606:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801060a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801060e:	2100      	movs	r1, #0
 8010610:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010614:	a808      	add	r0, sp, #32
 8010616:	f002 fcd9 	bl	8012fcc <rcutils_string_map_init>
 801061a:	4606      	mov	r6, r0
 801061c:	b170      	cbz	r0, 801063c <rcl_node_resolve_name+0x90>
 801061e:	f7f9 fc1f 	bl	8009e60 <rcutils_get_error_string>
 8010622:	f7f9 fc35 	bl	8009e90 <rcutils_reset_error>
 8010626:	2e0a      	cmp	r6, #10
 8010628:	d000      	beq.n	801062c <rcl_node_resolve_name+0x80>
 801062a:	2601      	movs	r6, #1
 801062c:	4630      	mov	r0, r6
 801062e:	b011      	add	sp, #68	@ 0x44
 8010630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	b002      	add	sp, #8
 8010636:	4770      	bx	lr
 8010638:	260b      	movs	r6, #11
 801063a:	e7f7      	b.n	801062c <rcl_node_resolve_name+0x80>
 801063c:	9009      	str	r0, [sp, #36]	@ 0x24
 801063e:	9007      	str	r0, [sp, #28]
 8010640:	a808      	add	r0, sp, #32
 8010642:	f005 fddb 	bl	80161fc <rcl_get_default_topic_name_substitutions>
 8010646:	4606      	mov	r6, r0
 8010648:	b1b0      	cbz	r0, 8010678 <rcl_node_resolve_name+0xcc>
 801064a:	280a      	cmp	r0, #10
 801064c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010650:	d000      	beq.n	8010654 <rcl_node_resolve_name+0xa8>
 8010652:	2601      	movs	r6, #1
 8010654:	a808      	add	r0, sp, #32
 8010656:	f002 fcf7 	bl	8013048 <rcutils_string_map_fini>
 801065a:	2800      	cmp	r0, #0
 801065c:	d132      	bne.n	80106c4 <rcl_node_resolve_name+0x118>
 801065e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010660:	4659      	mov	r1, fp
 8010662:	47d0      	blx	sl
 8010664:	4659      	mov	r1, fp
 8010666:	4648      	mov	r0, r9
 8010668:	47d0      	blx	sl
 801066a:	f1b8 0f00 	cmp.w	r8, #0
 801066e:	d0dd      	beq.n	801062c <rcl_node_resolve_name+0x80>
 8010670:	2e67      	cmp	r6, #103	@ 0x67
 8010672:	bf08      	it	eq
 8010674:	2668      	moveq	r6, #104	@ 0x68
 8010676:	e7d9      	b.n	801062c <rcl_node_resolve_name+0x80>
 8010678:	ab09      	add	r3, sp, #36	@ 0x24
 801067a:	9305      	str	r3, [sp, #20]
 801067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801067e:	46ec      	mov	ip, sp
 8010680:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010684:	682b      	ldr	r3, [r5, #0]
 8010686:	f8cc 3000 	str.w	r3, [ip]
 801068a:	463a      	mov	r2, r7
 801068c:	4649      	mov	r1, r9
 801068e:	4620      	mov	r0, r4
 8010690:	ab08      	add	r3, sp, #32
 8010692:	f005 fc4d 	bl	8015f30 <rcl_expand_topic_name>
 8010696:	4606      	mov	r6, r0
 8010698:	b9c8      	cbnz	r0, 80106ce <rcl_node_resolve_name+0x122>
 801069a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801069e:	9009      	str	r0, [sp, #36]	@ 0x24
 80106a0:	4602      	mov	r2, r0
 80106a2:	a90a      	add	r1, sp, #40	@ 0x28
 80106a4:	4648      	mov	r0, r9
 80106a6:	f002 fe23 	bl	80132f0 <rmw_validate_full_topic_name>
 80106aa:	b998      	cbnz	r0, 80106d4 <rcl_node_resolve_name+0x128>
 80106ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80106ae:	bb14      	cbnz	r4, 80106f6 <rcl_node_resolve_name+0x14a>
 80106b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80106b2:	a808      	add	r0, sp, #32
 80106b4:	f8c3 9000 	str.w	r9, [r3]
 80106b8:	f002 fcc6 	bl	8013048 <rcutils_string_map_fini>
 80106bc:	4606      	mov	r6, r0
 80106be:	b978      	cbnz	r0, 80106e0 <rcl_node_resolve_name+0x134>
 80106c0:	4681      	mov	r9, r0
 80106c2:	e7cc      	b.n	801065e <rcl_node_resolve_name+0xb2>
 80106c4:	f7f9 fbcc 	bl	8009e60 <rcutils_get_error_string>
 80106c8:	f7f9 fbe2 	bl	8009e90 <rcutils_reset_error>
 80106cc:	e7c7      	b.n	801065e <rcl_node_resolve_name+0xb2>
 80106ce:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80106d2:	e7bf      	b.n	8010654 <rcl_node_resolve_name+0xa8>
 80106d4:	f7f9 fbc4 	bl	8009e60 <rcutils_get_error_string>
 80106d8:	2601      	movs	r6, #1
 80106da:	f7f9 fbd9 	bl	8009e90 <rcutils_reset_error>
 80106de:	e7b9      	b.n	8010654 <rcl_node_resolve_name+0xa8>
 80106e0:	f7f9 fbbe 	bl	8009e60 <rcutils_get_error_string>
 80106e4:	f7f9 fbd4 	bl	8009e90 <rcutils_reset_error>
 80106e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106ea:	4659      	mov	r1, fp
 80106ec:	47d0      	blx	sl
 80106ee:	4659      	mov	r1, fp
 80106f0:	4620      	mov	r0, r4
 80106f2:	47d0      	blx	sl
 80106f4:	e799      	b.n	801062a <rcl_node_resolve_name+0x7e>
 80106f6:	2667      	movs	r6, #103	@ 0x67
 80106f8:	e7ac      	b.n	8010654 <rcl_node_resolve_name+0xa8>
 80106fa:	bf00      	nop

080106fc <rcl_service_get_rmw_handle>:
 80106fc:	b118      	cbz	r0, 8010706 <rcl_service_get_rmw_handle+0xa>
 80106fe:	6800      	ldr	r0, [r0, #0]
 8010700:	b108      	cbz	r0, 8010706 <rcl_service_get_rmw_handle+0xa>
 8010702:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010706:	4770      	bx	lr

08010708 <rcl_take_request>:
 8010708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070a:	468e      	mov	lr, r1
 801070c:	460c      	mov	r4, r1
 801070e:	4617      	mov	r7, r2
 8010710:	4605      	mov	r5, r0
 8010712:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010716:	b091      	sub	sp, #68	@ 0x44
 8010718:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801071c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010720:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010724:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010728:	b30d      	cbz	r5, 801076e <rcl_take_request+0x66>
 801072a:	682b      	ldr	r3, [r5, #0]
 801072c:	b1fb      	cbz	r3, 801076e <rcl_take_request+0x66>
 801072e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010732:	b1e0      	cbz	r0, 801076e <rcl_take_request+0x66>
 8010734:	b397      	cbz	r7, 801079c <rcl_take_request+0x94>
 8010736:	2300      	movs	r3, #0
 8010738:	f88d 3017 	strb.w	r3, [sp, #23]
 801073c:	463a      	mov	r2, r7
 801073e:	f10d 0317 	add.w	r3, sp, #23
 8010742:	a906      	add	r1, sp, #24
 8010744:	f003 fbb6 	bl	8013eb4 <rmw_take_request>
 8010748:	4606      	mov	r6, r0
 801074a:	b198      	cbz	r0, 8010774 <rcl_take_request+0x6c>
 801074c:	280a      	cmp	r0, #10
 801074e:	bf18      	it	ne
 8010750:	2601      	movne	r6, #1
 8010752:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8010756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801075a:	46a6      	mov	lr, r4
 801075c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010760:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010764:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010768:	4630      	mov	r0, r6
 801076a:	b011      	add	sp, #68	@ 0x44
 801076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801076e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8010772:	e7ee      	b.n	8010752 <rcl_take_request+0x4a>
 8010774:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010778:	b193      	cbz	r3, 80107a0 <rcl_take_request+0x98>
 801077a:	682b      	ldr	r3, [r5, #0]
 801077c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8010780:	2800      	cmp	r0, #0
 8010782:	d0e6      	beq.n	8010752 <rcl_take_request+0x4a>
 8010784:	463a      	mov	r2, r7
 8010786:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 801078a:	ab0a      	add	r3, sp, #40	@ 0x28
 801078c:	e9cd 6700 	strd	r6, r7, [sp]
 8010790:	9302      	str	r3, [sp, #8]
 8010792:	2101      	movs	r1, #1
 8010794:	f000 f844 	bl	8010820 <rcl_send_service_event_message>
 8010798:	4606      	mov	r6, r0
 801079a:	e7da      	b.n	8010752 <rcl_take_request+0x4a>
 801079c:	260b      	movs	r6, #11
 801079e:	e7d8      	b.n	8010752 <rcl_take_request+0x4a>
 80107a0:	f240 2659 	movw	r6, #601	@ 0x259
 80107a4:	e7d5      	b.n	8010752 <rcl_take_request+0x4a>
 80107a6:	bf00      	nop

080107a8 <rcl_send_response>:
 80107a8:	b350      	cbz	r0, 8010800 <rcl_send_response+0x58>
 80107aa:	b570      	push	{r4, r5, r6, lr}
 80107ac:	6803      	ldr	r3, [r0, #0]
 80107ae:	b084      	sub	sp, #16
 80107b0:	4604      	mov	r4, r0
 80107b2:	b1cb      	cbz	r3, 80107e8 <rcl_send_response+0x40>
 80107b4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80107b8:	b1b0      	cbz	r0, 80107e8 <rcl_send_response+0x40>
 80107ba:	460e      	mov	r6, r1
 80107bc:	b1e9      	cbz	r1, 80107fa <rcl_send_response+0x52>
 80107be:	4615      	mov	r5, r2
 80107c0:	b1da      	cbz	r2, 80107fa <rcl_send_response+0x52>
 80107c2:	f003 fbd5 	bl	8013f70 <rmw_send_response>
 80107c6:	b998      	cbnz	r0, 80107f0 <rcl_send_response+0x48>
 80107c8:	6823      	ldr	r3, [r4, #0]
 80107ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80107ce:	b16b      	cbz	r3, 80107ec <rcl_send_response+0x44>
 80107d0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80107d4:	462a      	mov	r2, r5
 80107d6:	e9cd 0100 	strd	r0, r1, [sp]
 80107da:	9602      	str	r6, [sp, #8]
 80107dc:	2102      	movs	r1, #2
 80107de:	4618      	mov	r0, r3
 80107e0:	f000 f81e 	bl	8010820 <rcl_send_service_event_message>
 80107e4:	b004      	add	sp, #16
 80107e6:	bd70      	pop	{r4, r5, r6, pc}
 80107e8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80107ec:	b004      	add	sp, #16
 80107ee:	bd70      	pop	{r4, r5, r6, pc}
 80107f0:	2802      	cmp	r0, #2
 80107f2:	bf18      	it	ne
 80107f4:	2001      	movne	r0, #1
 80107f6:	b004      	add	sp, #16
 80107f8:	bd70      	pop	{r4, r5, r6, pc}
 80107fa:	200b      	movs	r0, #11
 80107fc:	b004      	add	sp, #16
 80107fe:	bd70      	pop	{r4, r5, r6, pc}
 8010800:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop

08010808 <rcl_service_is_valid>:
 8010808:	b130      	cbz	r0, 8010818 <rcl_service_is_valid+0x10>
 801080a:	6800      	ldr	r0, [r0, #0]
 801080c:	b120      	cbz	r0, 8010818 <rcl_service_is_valid+0x10>
 801080e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010812:	3800      	subs	r0, #0
 8010814:	bf18      	it	ne
 8010816:	2001      	movne	r0, #1
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	0000      	movs	r0, r0
	...

08010820 <rcl_send_service_event_message>:
 8010820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010822:	b093      	sub	sp, #76	@ 0x4c
 8010824:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010826:	b17a      	cbz	r2, 8010848 <rcl_send_service_event_message+0x28>
 8010828:	b176      	cbz	r6, 8010848 <rcl_send_service_event_message+0x28>
 801082a:	4604      	mov	r4, r0
 801082c:	b150      	cbz	r0, 8010844 <rcl_send_service_event_message+0x24>
 801082e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8010832:	b13b      	cbz	r3, 8010844 <rcl_send_service_event_message+0x24>
 8010834:	68c0      	ldr	r0, [r0, #12]
 8010836:	460f      	mov	r7, r1
 8010838:	4615      	mov	r5, r2
 801083a:	f000 f9bb 	bl	8010bb4 <rcl_clock_valid>
 801083e:	b108      	cbz	r0, 8010844 <rcl_send_service_event_message+0x24>
 8010840:	7a23      	ldrb	r3, [r4, #8]
 8010842:	b92b      	cbnz	r3, 8010850 <rcl_send_service_event_message+0x30>
 8010844:	2501      	movs	r5, #1
 8010846:	e000      	b.n	801084a <rcl_send_service_event_message+0x2a>
 8010848:	250b      	movs	r5, #11
 801084a:	4628      	mov	r0, r5
 801084c:	b013      	add	sp, #76	@ 0x4c
 801084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010850:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8010854:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010858:	f10d 0c0c 	add.w	ip, sp, #12
 801085c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010860:	f8de 3000 	ldr.w	r3, [lr]
 8010864:	f8cc 3000 	str.w	r3, [ip]
 8010868:	a803      	add	r0, sp, #12
 801086a:	f7f9 fae5 	bl	8009e38 <rcutils_allocator_is_valid>
 801086e:	2800      	cmp	r0, #0
 8010870:	d0ea      	beq.n	8010848 <rcl_send_service_event_message+0x28>
 8010872:	6820      	ldr	r0, [r4, #0]
 8010874:	f7f8 fb7c 	bl	8008f70 <rcl_publisher_is_valid>
 8010878:	2800      	cmp	r0, #0
 801087a:	d045      	beq.n	8010908 <rcl_send_service_event_message+0xe8>
 801087c:	4669      	mov	r1, sp
 801087e:	68e0      	ldr	r0, [r4, #12]
 8010880:	f000 fa10 	bl	8010ca4 <rcl_clock_get_now>
 8010884:	4601      	mov	r1, r0
 8010886:	2800      	cmp	r0, #0
 8010888:	d13b      	bne.n	8010902 <rcl_send_service_event_message+0xe2>
 801088a:	2220      	movs	r2, #32
 801088c:	eb0d 0002 	add.w	r0, sp, r2
 8010890:	f006 fe6c 	bl	801756c <memset>
 8010894:	a324      	add	r3, pc, #144	@ (adr r3, 8010928 <rcl_send_service_event_message+0x108>)
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801089e:	f88d 7020 	strb.w	r7, [sp, #32]
 80108a2:	f7ef fd1d 	bl	80002e0 <__aeabi_ldivmod>
 80108a6:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 80108aa:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80108ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80108b2:	7a23      	ldrb	r3, [r4, #8]
 80108b4:	6830      	ldr	r0, [r6, #0]
 80108b6:	6871      	ldr	r1, [r6, #4]
 80108b8:	68b2      	ldr	r2, [r6, #8]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	68f3      	ldr	r3, [r6, #12]
 80108be:	bf08      	it	eq
 80108c0:	2500      	moveq	r5, #0
 80108c2:	ae0b      	add	r6, sp, #44	@ 0x2c
 80108c4:	2f01      	cmp	r7, #1
 80108c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80108c8:	d821      	bhi.n	801090e <rcl_send_service_event_message+0xee>
 80108ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80108ce:	462a      	mov	r2, r5
 80108d0:	a808      	add	r0, sp, #32
 80108d2:	699d      	ldr	r5, [r3, #24]
 80108d4:	a903      	add	r1, sp, #12
 80108d6:	2300      	movs	r3, #0
 80108d8:	47a8      	blx	r5
 80108da:	4606      	mov	r6, r0
 80108dc:	2e00      	cmp	r6, #0
 80108de:	d0b1      	beq.n	8010844 <rcl_send_service_event_message+0x24>
 80108e0:	4631      	mov	r1, r6
 80108e2:	6820      	ldr	r0, [r4, #0]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f7f8 fb1d 	bl	8008f24 <rcl_publish>
 80108ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80108ee:	4605      	mov	r5, r0
 80108f0:	69db      	ldr	r3, [r3, #28]
 80108f2:	a903      	add	r1, sp, #12
 80108f4:	4630      	mov	r0, r6
 80108f6:	4798      	blx	r3
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	d0a6      	beq.n	801084a <rcl_send_service_event_message+0x2a>
 80108fc:	f7f9 fac8 	bl	8009e90 <rcutils_reset_error>
 8010900:	e7a3      	b.n	801084a <rcl_send_service_event_message+0x2a>
 8010902:	f7f9 fac5 	bl	8009e90 <rcutils_reset_error>
 8010906:	e79d      	b.n	8010844 <rcl_send_service_event_message+0x24>
 8010908:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801090c:	e79d      	b.n	801084a <rcl_send_service_event_message+0x2a>
 801090e:	1eb9      	subs	r1, r7, #2
 8010910:	2901      	cmp	r1, #1
 8010912:	d8f6      	bhi.n	8010902 <rcl_send_service_event_message+0xe2>
 8010914:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8010918:	462b      	mov	r3, r5
 801091a:	a808      	add	r0, sp, #32
 801091c:	6995      	ldr	r5, [r2, #24]
 801091e:	a903      	add	r1, sp, #12
 8010920:	2200      	movs	r2, #0
 8010922:	47a8      	blx	r5
 8010924:	4606      	mov	r6, r0
 8010926:	e7d9      	b.n	80108dc <rcl_send_service_event_message+0xbc>
 8010928:	3b9aca00 	.word	0x3b9aca00
 801092c:	00000000 	.word	0x00000000

08010930 <rcl_get_zero_initialized_subscription>:
 8010930:	4b01      	ldr	r3, [pc, #4]	@ (8010938 <rcl_get_zero_initialized_subscription+0x8>)
 8010932:	6818      	ldr	r0, [r3, #0]
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	0801902c 	.word	0x0801902c

0801093c <rcl_subscription_init>:
 801093c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010940:	b089      	sub	sp, #36	@ 0x24
 8010942:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010944:	b1d6      	cbz	r6, 801097c <rcl_subscription_init+0x40>
 8010946:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801094a:	4604      	mov	r4, r0
 801094c:	4648      	mov	r0, r9
 801094e:	460d      	mov	r5, r1
 8010950:	4690      	mov	r8, r2
 8010952:	461f      	mov	r7, r3
 8010954:	f7f9 fa70 	bl	8009e38 <rcutils_allocator_is_valid>
 8010958:	b180      	cbz	r0, 801097c <rcl_subscription_init+0x40>
 801095a:	b17c      	cbz	r4, 801097c <rcl_subscription_init+0x40>
 801095c:	4628      	mov	r0, r5
 801095e:	f7ff fd95 	bl	801048c <rcl_node_is_valid>
 8010962:	2800      	cmp	r0, #0
 8010964:	d054      	beq.n	8010a10 <rcl_subscription_init+0xd4>
 8010966:	f1b8 0f00 	cmp.w	r8, #0
 801096a:	d007      	beq.n	801097c <rcl_subscription_init+0x40>
 801096c:	b137      	cbz	r7, 801097c <rcl_subscription_init+0x40>
 801096e:	6823      	ldr	r3, [r4, #0]
 8010970:	b14b      	cbz	r3, 8010986 <rcl_subscription_init+0x4a>
 8010972:	2764      	movs	r7, #100	@ 0x64
 8010974:	4638      	mov	r0, r7
 8010976:	b009      	add	sp, #36	@ 0x24
 8010978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801097c:	270b      	movs	r7, #11
 801097e:	4638      	mov	r0, r7
 8010980:	b009      	add	sp, #36	@ 0x24
 8010982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010986:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801098a:	aa07      	add	r2, sp, #28
 801098c:	9205      	str	r2, [sp, #20]
 801098e:	9307      	str	r3, [sp, #28]
 8010990:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010994:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010998:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801099c:	4639      	mov	r1, r7
 801099e:	e899 000c 	ldmia.w	r9, {r2, r3}
 80109a2:	4628      	mov	r0, r5
 80109a4:	f7ff fe02 	bl	80105ac <rcl_node_resolve_name>
 80109a8:	4607      	mov	r7, r0
 80109aa:	2800      	cmp	r0, #0
 80109ac:	d15f      	bne.n	8010a6e <rcl_subscription_init+0x132>
 80109ae:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80109b2:	21d0      	movs	r1, #208	@ 0xd0
 80109b4:	2001      	movs	r0, #1
 80109b6:	4798      	blx	r3
 80109b8:	6020      	str	r0, [r4, #0]
 80109ba:	2800      	cmp	r0, #0
 80109bc:	d05d      	beq.n	8010a7a <rcl_subscription_init+0x13e>
 80109be:	2278      	movs	r2, #120	@ 0x78
 80109c0:	4631      	mov	r1, r6
 80109c2:	f006 feae 	bl	8017722 <memcpy>
 80109c6:	4628      	mov	r0, r5
 80109c8:	f7ff fd82 	bl	80104d0 <rcl_node_get_rmw_handle>
 80109cc:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	9a07      	ldr	r2, [sp, #28]
 80109d4:	6827      	ldr	r7, [r4, #0]
 80109d6:	4641      	mov	r1, r8
 80109d8:	4633      	mov	r3, r6
 80109da:	f003 fbb1 	bl	8014140 <rmw_create_subscription>
 80109de:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 80109e2:	6827      	ldr	r7, [r4, #0]
 80109e4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80109e8:	b338      	cbz	r0, 8010a3a <rcl_subscription_init+0xfe>
 80109ea:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80109ee:	f003 fc87 	bl	8014300 <rmw_subscription_get_actual_qos>
 80109f2:	4607      	mov	r7, r0
 80109f4:	b988      	cbnz	r0, 8010a1a <rcl_subscription_init+0xde>
 80109f6:	6823      	ldr	r3, [r4, #0]
 80109f8:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80109fc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8010a00:	9807      	ldr	r0, [sp, #28]
 8010a02:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010a04:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010a06:	4798      	blx	r3
 8010a08:	4638      	mov	r0, r7
 8010a0a:	b009      	add	sp, #36	@ 0x24
 8010a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a10:	27c8      	movs	r7, #200	@ 0xc8
 8010a12:	4638      	mov	r0, r7
 8010a14:	b009      	add	sp, #36	@ 0x24
 8010a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a1a:	6827      	ldr	r7, [r4, #0]
 8010a1c:	b32f      	cbz	r7, 8010a6a <rcl_subscription_init+0x12e>
 8010a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010a22:	b153      	cbz	r3, 8010a3a <rcl_subscription_init+0xfe>
 8010a24:	4628      	mov	r0, r5
 8010a26:	f7ff fd53 	bl	80104d0 <rcl_node_get_rmw_handle>
 8010a2a:	6823      	ldr	r3, [r4, #0]
 8010a2c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8010a30:	f003 fc74 	bl	801431c <rmw_destroy_subscription>
 8010a34:	6827      	ldr	r7, [r4, #0]
 8010a36:	4638      	mov	r0, r7
 8010a38:	b197      	cbz	r7, 8010a60 <rcl_subscription_init+0x124>
 8010a3a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8010a3e:	4628      	mov	r0, r5
 8010a40:	f7f9 f9fa 	bl	8009e38 <rcutils_allocator_is_valid>
 8010a44:	b1e8      	cbz	r0, 8010a82 <rcl_subscription_init+0x146>
 8010a46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a48:	b1d8      	cbz	r0, 8010a82 <rcl_subscription_init+0x146>
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	f002 fb94 	bl	8013178 <rmw_subscription_content_filter_options_fini>
 8010a50:	4605      	mov	r5, r0
 8010a52:	b9a0      	cbnz	r0, 8010a7e <rcl_subscription_init+0x142>
 8010a54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a58:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010a5a:	4798      	blx	r3
 8010a5c:	6820      	ldr	r0, [r4, #0]
 8010a5e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8010a60:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010a62:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010a64:	4798      	blx	r3
 8010a66:	2300      	movs	r3, #0
 8010a68:	6023      	str	r3, [r4, #0]
 8010a6a:	2701      	movs	r7, #1
 8010a6c:	e7c8      	b.n	8010a00 <rcl_subscription_init+0xc4>
 8010a6e:	2867      	cmp	r0, #103	@ 0x67
 8010a70:	d0c6      	beq.n	8010a00 <rcl_subscription_init+0xc4>
 8010a72:	2869      	cmp	r0, #105	@ 0x69
 8010a74:	d007      	beq.n	8010a86 <rcl_subscription_init+0x14a>
 8010a76:	280a      	cmp	r0, #10
 8010a78:	d1f7      	bne.n	8010a6a <rcl_subscription_init+0x12e>
 8010a7a:	270a      	movs	r7, #10
 8010a7c:	e7c0      	b.n	8010a00 <rcl_subscription_init+0xc4>
 8010a7e:	f7ff f93d 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 8010a82:	6820      	ldr	r0, [r4, #0]
 8010a84:	e7ec      	b.n	8010a60 <rcl_subscription_init+0x124>
 8010a86:	2767      	movs	r7, #103	@ 0x67
 8010a88:	e7ba      	b.n	8010a00 <rcl_subscription_init+0xc4>
 8010a8a:	bf00      	nop

08010a8c <rcl_subscription_get_default_options>:
 8010a8c:	b510      	push	{r4, lr}
 8010a8e:	4907      	ldr	r1, [pc, #28]	@ (8010aac <rcl_subscription_get_default_options+0x20>)
 8010a90:	4604      	mov	r4, r0
 8010a92:	2250      	movs	r2, #80	@ 0x50
 8010a94:	f006 fe45 	bl	8017722 <memcpy>
 8010a98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010a9c:	f7f9 f9a0 	bl	8009de0 <rcutils_get_default_allocator>
 8010aa0:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8010aa4:	f002 fb82 	bl	80131ac <rmw_get_default_subscription_options>
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	bd10      	pop	{r4, pc}
 8010aac:	08019030 	.word	0x08019030

08010ab0 <rcl_take>:
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	d04b      	beq.n	8010b4c <rcl_take+0x9c>
 8010ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab8:	4615      	mov	r5, r2
 8010aba:	6802      	ldr	r2, [r0, #0]
 8010abc:	b0a0      	sub	sp, #128	@ 0x80
 8010abe:	4604      	mov	r4, r0
 8010ac0:	2a00      	cmp	r2, #0
 8010ac2:	d03b      	beq.n	8010b3c <rcl_take+0x8c>
 8010ac4:	461f      	mov	r7, r3
 8010ac6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d036      	beq.n	8010b3c <rcl_take+0x8c>
 8010ace:	460e      	mov	r6, r1
 8010ad0:	2900      	cmp	r1, #0
 8010ad2:	d039      	beq.n	8010b48 <rcl_take+0x98>
 8010ad4:	2d00      	cmp	r5, #0
 8010ad6:	d03d      	beq.n	8010b54 <rcl_take+0xa4>
 8010ad8:	a802      	add	r0, sp, #8
 8010ada:	f002 fbf3 	bl	80132c4 <rmw_get_zero_initialized_message_info>
 8010ade:	6823      	ldr	r3, [r4, #0]
 8010ae0:	f10d 0c08 	add.w	ip, sp, #8
 8010ae4:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8010ae8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010aec:	46ae      	mov	lr, r5
 8010aee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010af2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010af6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010afa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010afe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010b02:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010b06:	462b      	mov	r3, r5
 8010b08:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010b0c:	f04f 0800 	mov.w	r8, #0
 8010b10:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8010b14:	4631      	mov	r1, r6
 8010b16:	4620      	mov	r0, r4
 8010b18:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8010b1c:	9700      	str	r7, [sp, #0]
 8010b1e:	f003 fc5d 	bl	80143dc <rmw_take_with_info>
 8010b22:	4603      	mov	r3, r0
 8010b24:	b9c0      	cbnz	r0, 8010b58 <rcl_take+0xa8>
 8010b26:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8010b2a:	f240 1291 	movw	r2, #401	@ 0x191
 8010b2e:	2900      	cmp	r1, #0
 8010b30:	bf08      	it	eq
 8010b32:	4613      	moveq	r3, r2
 8010b34:	4618      	mov	r0, r3
 8010b36:	b020      	add	sp, #128	@ 0x80
 8010b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b3c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010b40:	4618      	mov	r0, r3
 8010b42:	b020      	add	sp, #128	@ 0x80
 8010b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b48:	230b      	movs	r3, #11
 8010b4a:	e7f3      	b.n	8010b34 <rcl_take+0x84>
 8010b4c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010b50:	4618      	mov	r0, r3
 8010b52:	4770      	bx	lr
 8010b54:	ad12      	add	r5, sp, #72	@ 0x48
 8010b56:	e7bf      	b.n	8010ad8 <rcl_take+0x28>
 8010b58:	f7ff f8d0 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	e7e9      	b.n	8010b34 <rcl_take+0x84>

08010b60 <rcl_subscription_get_rmw_handle>:
 8010b60:	b118      	cbz	r0, 8010b6a <rcl_subscription_get_rmw_handle+0xa>
 8010b62:	6800      	ldr	r0, [r0, #0]
 8010b64:	b108      	cbz	r0, 8010b6a <rcl_subscription_get_rmw_handle+0xa>
 8010b66:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8010b6a:	4770      	bx	lr

08010b6c <rcl_subscription_is_valid>:
 8010b6c:	b130      	cbz	r0, 8010b7c <rcl_subscription_is_valid+0x10>
 8010b6e:	6800      	ldr	r0, [r0, #0]
 8010b70:	b120      	cbz	r0, 8010b7c <rcl_subscription_is_valid+0x10>
 8010b72:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8010b76:	3800      	subs	r0, #0
 8010b78:	bf18      	it	ne
 8010b7a:	2001      	movne	r0, #1
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop

08010b80 <rcl_get_system_time>:
 8010b80:	4608      	mov	r0, r1
 8010b82:	f7f9 b9a1 	b.w	8009ec8 <rcutils_system_time_now>
 8010b86:	bf00      	nop

08010b88 <rcl_get_steady_time>:
 8010b88:	4608      	mov	r0, r1
 8010b8a:	f7f9 b9c7 	b.w	8009f1c <rcutils_steady_time_now>
 8010b8e:	bf00      	nop

08010b90 <rcl_get_ros_time>:
 8010b90:	7a03      	ldrb	r3, [r0, #8]
 8010b92:	b510      	push	{r4, lr}
 8010b94:	460c      	mov	r4, r1
 8010b96:	b143      	cbz	r3, 8010baa <rcl_get_ros_time+0x1a>
 8010b98:	2105      	movs	r1, #5
 8010b9a:	f001 ff81 	bl	8012aa0 <__atomic_load_8>
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	e9c4 2300 	strd	r2, r3, [r4]
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	bd10      	pop	{r4, pc}
 8010baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bae:	4608      	mov	r0, r1
 8010bb0:	f7f9 b98a 	b.w	8009ec8 <rcutils_system_time_now>

08010bb4 <rcl_clock_valid>:
 8010bb4:	b138      	cbz	r0, 8010bc6 <rcl_clock_valid+0x12>
 8010bb6:	7803      	ldrb	r3, [r0, #0]
 8010bb8:	b123      	cbz	r3, 8010bc4 <rcl_clock_valid+0x10>
 8010bba:	68c0      	ldr	r0, [r0, #12]
 8010bbc:	3800      	subs	r0, #0
 8010bbe:	bf18      	it	ne
 8010bc0:	2001      	movne	r0, #1
 8010bc2:	4770      	bx	lr
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	4770      	bx	lr

08010bc8 <rcl_clock_init>:
 8010bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bca:	4605      	mov	r5, r0
 8010bcc:	4610      	mov	r0, r2
 8010bce:	4614      	mov	r4, r2
 8010bd0:	460e      	mov	r6, r1
 8010bd2:	f7f9 f931 	bl	8009e38 <rcutils_allocator_is_valid>
 8010bd6:	b128      	cbz	r0, 8010be4 <rcl_clock_init+0x1c>
 8010bd8:	2d03      	cmp	r5, #3
 8010bda:	d803      	bhi.n	8010be4 <rcl_clock_init+0x1c>
 8010bdc:	e8df f005 	tbb	[pc, r5]
 8010be0:	044c291a 	.word	0x044c291a
 8010be4:	200b      	movs	r0, #11
 8010be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010be8:	2e00      	cmp	r6, #0
 8010bea:	d0fb      	beq.n	8010be4 <rcl_clock_init+0x1c>
 8010bec:	2c00      	cmp	r4, #0
 8010bee:	d0f9      	beq.n	8010be4 <rcl_clock_init+0x1c>
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010bf6:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8010c9c <rcl_clock_init+0xd4>
 8010bfa:	6133      	str	r3, [r6, #16]
 8010bfc:	f106 0514 	add.w	r5, r6, #20
 8010c00:	2703      	movs	r7, #3
 8010c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c06:	6823      	ldr	r3, [r4, #0]
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	f8c6 c00c 	str.w	ip, [r6, #12]
 8010c0e:	7037      	strb	r7, [r6, #0]
 8010c10:	2000      	movs	r0, #0
 8010c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c14:	2e00      	cmp	r6, #0
 8010c16:	d0e5      	beq.n	8010be4 <rcl_clock_init+0x1c>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	7033      	strb	r3, [r6, #0]
 8010c1c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010c20:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c26:	f106 0514 	add.w	r5, r6, #20
 8010c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c2c:	6823      	ldr	r3, [r4, #0]
 8010c2e:	602b      	str	r3, [r5, #0]
 8010c30:	e7ee      	b.n	8010c10 <rcl_clock_init+0x48>
 8010c32:	2e00      	cmp	r6, #0
 8010c34:	d0d6      	beq.n	8010be4 <rcl_clock_init+0x1c>
 8010c36:	2c00      	cmp	r4, #0
 8010c38:	d0d4      	beq.n	8010be4 <rcl_clock_init+0x1c>
 8010c3a:	2700      	movs	r7, #0
 8010c3c:	7037      	strb	r7, [r6, #0]
 8010c3e:	46a4      	mov	ip, r4
 8010c40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c44:	f106 0514 	add.w	r5, r6, #20
 8010c48:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010c4c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c52:	f8dc 3000 	ldr.w	r3, [ip]
 8010c56:	602b      	str	r3, [r5, #0]
 8010c58:	6921      	ldr	r1, [r4, #16]
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	2010      	movs	r0, #16
 8010c5e:	4798      	blx	r3
 8010c60:	6130      	str	r0, [r6, #16]
 8010c62:	b1b8      	cbz	r0, 8010c94 <rcl_clock_init+0xcc>
 8010c64:	2200      	movs	r2, #0
 8010c66:	2300      	movs	r3, #0
 8010c68:	e9c0 2300 	strd	r2, r3, [r0]
 8010c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8010c98 <rcl_clock_init+0xd0>)
 8010c6e:	7207      	strb	r7, [r0, #8]
 8010c70:	2301      	movs	r3, #1
 8010c72:	60f2      	str	r2, [r6, #12]
 8010c74:	7033      	strb	r3, [r6, #0]
 8010c76:	e7cb      	b.n	8010c10 <rcl_clock_init+0x48>
 8010c78:	2e00      	cmp	r6, #0
 8010c7a:	d0b3      	beq.n	8010be4 <rcl_clock_init+0x1c>
 8010c7c:	2c00      	cmp	r4, #0
 8010c7e:	d0b1      	beq.n	8010be4 <rcl_clock_init+0x1c>
 8010c80:	2300      	movs	r3, #0
 8010c82:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010c86:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8010ca0 <rcl_clock_init+0xd8>
 8010c8a:	6133      	str	r3, [r6, #16]
 8010c8c:	f106 0514 	add.w	r5, r6, #20
 8010c90:	2702      	movs	r7, #2
 8010c92:	e7b6      	b.n	8010c02 <rcl_clock_init+0x3a>
 8010c94:	200a      	movs	r0, #10
 8010c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c98:	08010b91 	.word	0x08010b91
 8010c9c:	08010b89 	.word	0x08010b89
 8010ca0:	08010b81 	.word	0x08010b81

08010ca4 <rcl_clock_get_now>:
 8010ca4:	b140      	cbz	r0, 8010cb8 <rcl_clock_get_now+0x14>
 8010ca6:	b139      	cbz	r1, 8010cb8 <rcl_clock_get_now+0x14>
 8010ca8:	7803      	ldrb	r3, [r0, #0]
 8010caa:	b11b      	cbz	r3, 8010cb4 <rcl_clock_get_now+0x10>
 8010cac:	68c3      	ldr	r3, [r0, #12]
 8010cae:	b10b      	cbz	r3, 8010cb4 <rcl_clock_get_now+0x10>
 8010cb0:	6900      	ldr	r0, [r0, #16]
 8010cb2:	4718      	bx	r3
 8010cb4:	2001      	movs	r0, #1
 8010cb6:	4770      	bx	lr
 8010cb8:	200b      	movs	r0, #11
 8010cba:	4770      	bx	lr

08010cbc <rcl_is_enabled_ros_time_override>:
 8010cbc:	b158      	cbz	r0, 8010cd6 <rcl_is_enabled_ros_time_override+0x1a>
 8010cbe:	b151      	cbz	r1, 8010cd6 <rcl_is_enabled_ros_time_override+0x1a>
 8010cc0:	7803      	ldrb	r3, [r0, #0]
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	d105      	bne.n	8010cd2 <rcl_is_enabled_ros_time_override+0x16>
 8010cc6:	6902      	ldr	r2, [r0, #16]
 8010cc8:	b11a      	cbz	r2, 8010cd2 <rcl_is_enabled_ros_time_override+0x16>
 8010cca:	7a13      	ldrb	r3, [r2, #8]
 8010ccc:	700b      	strb	r3, [r1, #0]
 8010cce:	2000      	movs	r0, #0
 8010cd0:	4770      	bx	lr
 8010cd2:	2001      	movs	r0, #1
 8010cd4:	4770      	bx	lr
 8010cd6:	200b      	movs	r0, #11
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop

08010cdc <rcl_clock_add_jump_callback>:
 8010cdc:	b082      	sub	sp, #8
 8010cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce2:	a906      	add	r1, sp, #24
 8010ce4:	e881 000c 	stmia.w	r1, {r2, r3}
 8010ce8:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8010cec:	b320      	cbz	r0, 8010d38 <rcl_clock_add_jump_callback+0x5c>
 8010cee:	4605      	mov	r5, r0
 8010cf0:	3014      	adds	r0, #20
 8010cf2:	f7f9 f8a1 	bl	8009e38 <rcutils_allocator_is_valid>
 8010cf6:	b1f8      	cbz	r0, 8010d38 <rcl_clock_add_jump_callback+0x5c>
 8010cf8:	b1f7      	cbz	r7, 8010d38 <rcl_clock_add_jump_callback+0x5c>
 8010cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	db1b      	blt.n	8010d38 <rcl_clock_add_jump_callback+0x5c>
 8010d00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010d04:	2a01      	cmp	r2, #1
 8010d06:	f173 0300 	sbcs.w	r3, r3, #0
 8010d0a:	da15      	bge.n	8010d38 <rcl_clock_add_jump_callback+0x5c>
 8010d0c:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8010d10:	2c00      	cmp	r4, #0
 8010d12:	d042      	beq.n	8010d9a <rcl_clock_add_jump_callback+0xbe>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2200      	movs	r2, #0
 8010d18:	e003      	b.n	8010d22 <rcl_clock_add_jump_callback+0x46>
 8010d1a:	4294      	cmp	r4, r2
 8010d1c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8010d20:	d011      	beq.n	8010d46 <rcl_clock_add_jump_callback+0x6a>
 8010d22:	6819      	ldr	r1, [r3, #0]
 8010d24:	42b9      	cmp	r1, r7
 8010d26:	f102 0201 	add.w	r2, r2, #1
 8010d2a:	d1f6      	bne.n	8010d1a <rcl_clock_add_jump_callback+0x3e>
 8010d2c:	6a19      	ldr	r1, [r3, #32]
 8010d2e:	42b1      	cmp	r1, r6
 8010d30:	d1f3      	bne.n	8010d1a <rcl_clock_add_jump_callback+0x3e>
 8010d32:	f04f 0e01 	mov.w	lr, #1
 8010d36:	e001      	b.n	8010d3c <rcl_clock_add_jump_callback+0x60>
 8010d38:	f04f 0e0b 	mov.w	lr, #11
 8010d3c:	4670      	mov	r0, lr
 8010d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d42:	b002      	add	sp, #8
 8010d44:	4770      	bx	lr
 8010d46:	3401      	adds	r4, #1
 8010d48:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010d4c:	00e1      	lsls	r1, r4, #3
 8010d4e:	69eb      	ldr	r3, [r5, #28]
 8010d50:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010d52:	4798      	blx	r3
 8010d54:	b1f0      	cbz	r0, 8010d94 <rcl_clock_add_jump_callback+0xb8>
 8010d56:	68ab      	ldr	r3, [r5, #8]
 8010d58:	6068      	str	r0, [r5, #4]
 8010d5a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010d5e:	f10d 0c18 	add.w	ip, sp, #24
 8010d62:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8010d66:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8010d6a:	f103 0801 	add.w	r8, r3, #1
 8010d6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d72:	f104 0708 	add.w	r7, r4, #8
 8010d76:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010d78:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010d7c:	f04f 0e00 	mov.w	lr, #0
 8010d80:	e887 0003 	stmia.w	r7, {r0, r1}
 8010d84:	6226      	str	r6, [r4, #32]
 8010d86:	4670      	mov	r0, lr
 8010d88:	f8c5 8008 	str.w	r8, [r5, #8]
 8010d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d90:	b002      	add	sp, #8
 8010d92:	4770      	bx	lr
 8010d94:	f04f 0e0a 	mov.w	lr, #10
 8010d98:	e7d0      	b.n	8010d3c <rcl_clock_add_jump_callback+0x60>
 8010d9a:	2128      	movs	r1, #40	@ 0x28
 8010d9c:	e7d7      	b.n	8010d4e <rcl_clock_add_jump_callback+0x72>
 8010d9e:	bf00      	nop

08010da0 <rcl_clock_remove_jump_callback>:
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d05a      	beq.n	8010e5a <rcl_clock_remove_jump_callback+0xba>
 8010da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010da8:	4605      	mov	r5, r0
 8010daa:	3014      	adds	r0, #20
 8010dac:	460f      	mov	r7, r1
 8010dae:	4692      	mov	sl, r2
 8010db0:	f7f9 f842 	bl	8009e38 <rcutils_allocator_is_valid>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d03f      	beq.n	8010e38 <rcl_clock_remove_jump_callback+0x98>
 8010db8:	2f00      	cmp	r7, #0
 8010dba:	d03d      	beq.n	8010e38 <rcl_clock_remove_jump_callback+0x98>
 8010dbc:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8010dc0:	f1b8 0f00 	cmp.w	r8, #0
 8010dc4:	d00c      	beq.n	8010de0 <rcl_clock_remove_jump_callback+0x40>
 8010dc6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8010dca:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8010dce:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8010dd2:	464c      	mov	r4, r9
 8010dd4:	6823      	ldr	r3, [r4, #0]
 8010dd6:	42bb      	cmp	r3, r7
 8010dd8:	d005      	beq.n	8010de6 <rcl_clock_remove_jump_callback+0x46>
 8010dda:	3428      	adds	r4, #40	@ 0x28
 8010ddc:	42b4      	cmp	r4, r6
 8010dde:	d1f9      	bne.n	8010dd4 <rcl_clock_remove_jump_callback+0x34>
 8010de0:	2001      	movs	r0, #1
 8010de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010de6:	6a23      	ldr	r3, [r4, #32]
 8010de8:	3428      	adds	r4, #40	@ 0x28
 8010dea:	42b4      	cmp	r4, r6
 8010dec:	d02c      	beq.n	8010e48 <rcl_clock_remove_jump_callback+0xa8>
 8010dee:	4553      	cmp	r3, sl
 8010df0:	d1f0      	bne.n	8010dd4 <rcl_clock_remove_jump_callback+0x34>
 8010df2:	46a6      	mov	lr, r4
 8010df4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010df8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8010dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010e0c:	3428      	adds	r4, #40	@ 0x28
 8010e0e:	42a6      	cmp	r6, r4
 8010e10:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010e14:	d1ed      	bne.n	8010df2 <rcl_clock_remove_jump_callback+0x52>
 8010e16:	f108 34ff 	add.w	r4, r8, #4294967295
 8010e1a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010e1c:	60ac      	str	r4, [r5, #8]
 8010e1e:	b174      	cbz	r4, 8010e3e <rcl_clock_remove_jump_callback+0x9e>
 8010e20:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010e24:	00e1      	lsls	r1, r4, #3
 8010e26:	69eb      	ldr	r3, [r5, #28]
 8010e28:	4648      	mov	r0, r9
 8010e2a:	4798      	blx	r3
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	b1b0      	cbz	r0, 8010e5e <rcl_clock_remove_jump_callback+0xbe>
 8010e30:	606c      	str	r4, [r5, #4]
 8010e32:	2000      	movs	r0, #0
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	200b      	movs	r0, #11
 8010e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e3e:	69ab      	ldr	r3, [r5, #24]
 8010e40:	4611      	mov	r1, r2
 8010e42:	4648      	mov	r0, r9
 8010e44:	4798      	blx	r3
 8010e46:	e7f3      	b.n	8010e30 <rcl_clock_remove_jump_callback+0x90>
 8010e48:	4553      	cmp	r3, sl
 8010e4a:	d1c9      	bne.n	8010de0 <rcl_clock_remove_jump_callback+0x40>
 8010e4c:	f108 34ff 	add.w	r4, r8, #4294967295
 8010e50:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010e52:	60ac      	str	r4, [r5, #8]
 8010e54:	2c00      	cmp	r4, #0
 8010e56:	d1e3      	bne.n	8010e20 <rcl_clock_remove_jump_callback+0x80>
 8010e58:	e7f1      	b.n	8010e3e <rcl_clock_remove_jump_callback+0x9e>
 8010e5a:	200b      	movs	r0, #11
 8010e5c:	4770      	bx	lr
 8010e5e:	200a      	movs	r0, #10
 8010e60:	e7eb      	b.n	8010e3a <rcl_clock_remove_jump_callback+0x9a>
 8010e62:	bf00      	nop

08010e64 <_rcl_timer_time_jump>:
 8010e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e68:	4681      	mov	r9, r0
 8010e6a:	b087      	sub	sp, #28
 8010e6c:	4614      	mov	r4, r2
 8010e6e:	b131      	cbz	r1, 8010e7e <_rcl_timer_time_jump+0x1a>
 8010e70:	7803      	ldrb	r3, [r0, #0]
 8010e72:	3b02      	subs	r3, #2
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d93e      	bls.n	8010ef6 <_rcl_timer_time_jump+0x92>
 8010e78:	b007      	add	sp, #28
 8010e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7e:	6810      	ldr	r0, [r2, #0]
 8010e80:	a904      	add	r1, sp, #16
 8010e82:	f7ff ff0f 	bl	8010ca4 <rcl_clock_get_now>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d1f6      	bne.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010e8a:	f104 0a20 	add.w	sl, r4, #32
 8010e8e:	2105      	movs	r1, #5
 8010e90:	4650      	mov	r0, sl
 8010e92:	f001 fe05 	bl	8012aa0 <__atomic_load_8>
 8010e96:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 8010e9a:	4680      	mov	r8, r0
 8010e9c:	460e      	mov	r6, r1
 8010e9e:	4658      	mov	r0, fp
 8010ea0:	2105      	movs	r1, #5
 8010ea2:	f001 fdfd 	bl	8012aa0 <__atomic_load_8>
 8010ea6:	4607      	mov	r7, r0
 8010ea8:	460d      	mov	r5, r1
 8010eaa:	f104 0018 	add.w	r0, r4, #24
 8010eae:	2105      	movs	r1, #5
 8010eb0:	f001 fdf6 	bl	8012aa0 <__atomic_load_8>
 8010eb4:	f899 3000 	ldrb.w	r3, [r9]
 8010eb8:	9003      	str	r0, [sp, #12]
 8010eba:	3b02      	subs	r3, #2
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	4689      	mov	r9, r1
 8010ec0:	d935      	bls.n	8010f2e <_rcl_timer_time_jump+0xca>
 8010ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ec6:	42ba      	cmp	r2, r7
 8010ec8:	eb73 0505 	sbcs.w	r5, r3, r5
 8010ecc:	da57      	bge.n	8010f7e <_rcl_timer_time_jump+0x11a>
 8010ece:	4542      	cmp	r2, r8
 8010ed0:	eb73 0606 	sbcs.w	r6, r3, r6
 8010ed4:	dad0      	bge.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010ed6:	1882      	adds	r2, r0, r2
 8010ed8:	f04f 0405 	mov.w	r4, #5
 8010edc:	eb43 0309 	adc.w	r3, r3, r9
 8010ee0:	4658      	mov	r0, fp
 8010ee2:	9400      	str	r4, [sp, #0]
 8010ee4:	f001 fe12 	bl	8012b0c <__atomic_store_8>
 8010ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010eec:	9400      	str	r4, [sp, #0]
 8010eee:	4650      	mov	r0, sl
 8010ef0:	f001 fe0c 	bl	8012b0c <__atomic_store_8>
 8010ef4:	e7c0      	b.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010ef6:	6810      	ldr	r0, [r2, #0]
 8010ef8:	a904      	add	r1, sp, #16
 8010efa:	f7ff fed3 	bl	8010ca4 <rcl_clock_get_now>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d1ba      	bne.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010f02:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	d0b6      	beq.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010f0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f0e:	2105      	movs	r1, #5
 8010f10:	f001 fdc6 	bl	8012aa0 <__atomic_load_8>
 8010f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f18:	1a82      	subs	r2, r0, r2
 8010f1a:	f04f 0005 	mov.w	r0, #5
 8010f1e:	9000      	str	r0, [sp, #0]
 8010f20:	eb61 0303 	sbc.w	r3, r1, r3
 8010f24:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8010f28:	f001 fdf0 	bl	8012b0c <__atomic_store_8>
 8010f2c:	e7a4      	b.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010f2e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010f32:	4313      	orrs	r3, r2
 8010f34:	d0a0      	beq.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010f36:	2605      	movs	r6, #5
 8010f38:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	9600      	str	r6, [sp, #0]
 8010f40:	2200      	movs	r2, #0
 8010f42:	f001 fe19 	bl	8012b78 <__atomic_exchange_8>
 8010f46:	ea51 0300 	orrs.w	r3, r1, r0
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	460d      	mov	r5, r1
 8010f4e:	d093      	beq.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010f50:	9a04      	ldr	r2, [sp, #16]
 8010f52:	9b05      	ldr	r3, [sp, #20]
 8010f54:	9600      	str	r6, [sp, #0]
 8010f56:	1b12      	subs	r2, r2, r4
 8010f58:	eb63 0301 	sbc.w	r3, r3, r1
 8010f5c:	9903      	ldr	r1, [sp, #12]
 8010f5e:	1852      	adds	r2, r2, r1
 8010f60:	eb43 0309 	adc.w	r3, r3, r9
 8010f64:	4658      	mov	r0, fp
 8010f66:	f001 fdd1 	bl	8012b0c <__atomic_store_8>
 8010f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f6e:	1b12      	subs	r2, r2, r4
 8010f70:	9600      	str	r6, [sp, #0]
 8010f72:	eb63 0305 	sbc.w	r3, r3, r5
 8010f76:	4650      	mov	r0, sl
 8010f78:	f001 fdc8 	bl	8012b0c <__atomic_store_8>
 8010f7c:	e77c      	b.n	8010e78 <_rcl_timer_time_jump+0x14>
 8010f7e:	f104 0008 	add.w	r0, r4, #8
 8010f82:	f005 fa1f 	bl	80163c4 <rcl_trigger_guard_condition>
 8010f86:	e777      	b.n	8010e78 <_rcl_timer_time_jump+0x14>

08010f88 <rcl_get_zero_initialized_timer>:
 8010f88:	4b01      	ldr	r3, [pc, #4]	@ (8010f90 <rcl_get_zero_initialized_timer+0x8>)
 8010f8a:	6818      	ldr	r0, [r3, #0]
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	08019080 	.word	0x08019080
 8010f94:	00000000 	.word	0x00000000

08010f98 <rcl_timer_init2>:
 8010f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f9c:	b0ae      	sub	sp, #184	@ 0xb8
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	a839      	add	r0, sp, #228	@ 0xe4
 8010fa2:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	4691      	mov	r9, r2
 8010faa:	f7f8 ff45 	bl	8009e38 <rcutils_allocator_is_valid>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	f000 8097 	beq.w	80110e2 <rcl_timer_init2+0x14a>
 8010fb4:	2c00      	cmp	r4, #0
 8010fb6:	f000 8094 	beq.w	80110e2 <rcl_timer_init2+0x14a>
 8010fba:	2d00      	cmp	r5, #0
 8010fbc:	f000 8091 	beq.w	80110e2 <rcl_timer_init2+0x14a>
 8010fc0:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	f2c0 808d 	blt.w	80110e2 <rcl_timer_init2+0x14a>
 8010fc8:	6823      	ldr	r3, [r4, #0]
 8010fca:	b123      	cbz	r3, 8010fd6 <rcl_timer_init2+0x3e>
 8010fcc:	2664      	movs	r6, #100	@ 0x64
 8010fce:	4630      	mov	r0, r6
 8010fd0:	b02e      	add	sp, #184	@ 0xb8
 8010fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fd6:	a908      	add	r1, sp, #32
 8010fd8:	4628      	mov	r0, r5
 8010fda:	f7ff fe63 	bl	8010ca4 <rcl_clock_get_now>
 8010fde:	4606      	mov	r6, r0
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d1f4      	bne.n	8010fce <rcl_timer_init2+0x36>
 8010fe4:	ae06      	add	r6, sp, #24
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 8010fec:	f005 f90c 	bl	8016208 <rcl_get_zero_initialized_guard_condition>
 8010ff0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010ff4:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8010ff8:	ae0b      	add	r6, sp, #44	@ 0x2c
 8010ffa:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010ffe:	4630      	mov	r0, r6
 8011000:	f005 f9da 	bl	80163b8 <rcl_guard_condition_get_default_options>
 8011004:	ab0d      	add	r3, sp, #52	@ 0x34
 8011006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801100a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801100e:	4649      	mov	r1, r9
 8011010:	e896 000c 	ldmia.w	r6, {r2, r3}
 8011014:	4650      	mov	r0, sl
 8011016:	f005 f901 	bl	801621c <rcl_guard_condition_init>
 801101a:	4606      	mov	r6, r0
 801101c:	2800      	cmp	r0, #0
 801101e:	d1d6      	bne.n	8010fce <rcl_timer_init2+0x36>
 8011020:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8011022:	931a      	str	r3, [sp, #104]	@ 0x68
 8011024:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8011028:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801102c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011030:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8011032:	902a      	str	r0, [sp, #168]	@ 0xa8
 8011034:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 8011038:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8011110 <rcl_timer_init2+0x178>
 801103c:	19d0      	adds	r0, r2, r7
 801103e:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8011040:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8011044:	eb43 0107 	adc.w	r1, r3, r7
 8011048:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801104c:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8011050:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8011054:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011058:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 801105c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011060:	f8dc 3000 	ldr.w	r3, [ip]
 8011064:	f8ce 3000 	str.w	r3, [lr]
 8011068:	f088 0801 	eor.w	r8, r8, #1
 801106c:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8011070:	4619      	mov	r1, r3
 8011072:	2060      	movs	r0, #96	@ 0x60
 8011074:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011076:	4798      	blx	r3
 8011078:	4680      	mov	r8, r0
 801107a:	6020      	str	r0, [r4, #0]
 801107c:	2800      	cmp	r0, #0
 801107e:	d035      	beq.n	80110ec <rcl_timer_init2+0x154>
 8011080:	a916      	add	r1, sp, #88	@ 0x58
 8011082:	2260      	movs	r2, #96	@ 0x60
 8011084:	f006 fb4d 	bl	8017722 <memcpy>
 8011088:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	2b01      	cmp	r3, #1
 801108e:	d19e      	bne.n	8010fce <rcl_timer_init2+0x36>
 8011090:	2001      	movs	r0, #1
 8011092:	2100      	movs	r1, #0
 8011094:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8011098:	f04f 30ff 	mov.w	r0, #4294967295
 801109c:	f04f 31ff 	mov.w	r1, #4294967295
 80110a0:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80110a4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80110a8:	4b1b      	ldr	r3, [pc, #108]	@ (8011118 <rcl_timer_init2+0x180>)
 80110aa:	9304      	str	r3, [sp, #16]
 80110ac:	f8cd 8014 	str.w	r8, [sp, #20]
 80110b0:	ab12      	add	r3, sp, #72	@ 0x48
 80110b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80110b8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80110bc:	4628      	mov	r0, r5
 80110be:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80110c2:	f7ff fe0b 	bl	8010cdc <rcl_clock_add_jump_callback>
 80110c6:	4605      	mov	r5, r0
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d080      	beq.n	8010fce <rcl_timer_init2+0x36>
 80110cc:	4650      	mov	r0, sl
 80110ce:	f005 f951 	bl	8016374 <rcl_guard_condition_fini>
 80110d2:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 80110d4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80110d6:	6820      	ldr	r0, [r4, #0]
 80110d8:	4798      	blx	r3
 80110da:	2300      	movs	r3, #0
 80110dc:	6023      	str	r3, [r4, #0]
 80110de:	462e      	mov	r6, r5
 80110e0:	e775      	b.n	8010fce <rcl_timer_init2+0x36>
 80110e2:	260b      	movs	r6, #11
 80110e4:	4630      	mov	r0, r6
 80110e6:	b02e      	add	sp, #184	@ 0xb8
 80110e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ec:	4650      	mov	r0, sl
 80110ee:	f005 f941 	bl	8016374 <rcl_guard_condition_fini>
 80110f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d001      	beq.n	80110fe <rcl_timer_init2+0x166>
 80110fa:	260a      	movs	r6, #10
 80110fc:	e767      	b.n	8010fce <rcl_timer_init2+0x36>
 80110fe:	4906      	ldr	r1, [pc, #24]	@ (8011118 <rcl_timer_init2+0x180>)
 8011100:	4622      	mov	r2, r4
 8011102:	4628      	mov	r0, r5
 8011104:	f7ff fe4c 	bl	8010da0 <rcl_clock_remove_jump_callback>
 8011108:	e7f7      	b.n	80110fa <rcl_timer_init2+0x162>
 801110a:	bf00      	nop
 801110c:	f3af 8000 	nop.w
	...
 8011118:	08010e65 	.word	0x08010e65

0801111c <rcl_timer_clock>:
 801111c:	b130      	cbz	r0, 801112c <rcl_timer_clock+0x10>
 801111e:	b129      	cbz	r1, 801112c <rcl_timer_clock+0x10>
 8011120:	6803      	ldr	r3, [r0, #0]
 8011122:	b12b      	cbz	r3, 8011130 <rcl_timer_clock+0x14>
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	600b      	str	r3, [r1, #0]
 8011128:	2000      	movs	r0, #0
 801112a:	4770      	bx	lr
 801112c:	200b      	movs	r0, #11
 801112e:	4770      	bx	lr
 8011130:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop

08011138 <rcl_timer_call>:
 8011138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113c:	b087      	sub	sp, #28
 801113e:	2800      	cmp	r0, #0
 8011140:	d067      	beq.n	8011212 <rcl_timer_call+0xda>
 8011142:	6803      	ldr	r3, [r0, #0]
 8011144:	4604      	mov	r4, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d068      	beq.n	801121c <rcl_timer_call+0xe4>
 801114a:	f3bf 8f5b 	dmb	ish
 801114e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011152:	f3bf 8f5b 	dmb	ish
 8011156:	2b00      	cmp	r3, #0
 8011158:	d150      	bne.n	80111fc <rcl_timer_call+0xc4>
 801115a:	6803      	ldr	r3, [r0, #0]
 801115c:	a904      	add	r1, sp, #16
 801115e:	6818      	ldr	r0, [r3, #0]
 8011160:	f7ff fda0 	bl	8010ca4 <rcl_clock_get_now>
 8011164:	4605      	mov	r5, r0
 8011166:	2800      	cmp	r0, #0
 8011168:	d144      	bne.n	80111f4 <rcl_timer_call+0xbc>
 801116a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	db4a      	blt.n	8011208 <rcl_timer_call+0xd0>
 8011172:	6820      	ldr	r0, [r4, #0]
 8011174:	f04f 0a05 	mov.w	sl, #5
 8011178:	f8cd a000 	str.w	sl, [sp]
 801117c:	3020      	adds	r0, #32
 801117e:	f001 fcfb 	bl	8012b78 <__atomic_exchange_8>
 8011182:	6823      	ldr	r3, [r4, #0]
 8011184:	f3bf 8f5b 	dmb	ish
 8011188:	4680      	mov	r8, r0
 801118a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801118e:	f3bf 8f5b 	dmb	ish
 8011192:	6820      	ldr	r0, [r4, #0]
 8011194:	4689      	mov	r9, r1
 8011196:	3028      	adds	r0, #40	@ 0x28
 8011198:	4651      	mov	r1, sl
 801119a:	f001 fc81 	bl	8012aa0 <__atomic_load_8>
 801119e:	4606      	mov	r6, r0
 80111a0:	6820      	ldr	r0, [r4, #0]
 80111a2:	460f      	mov	r7, r1
 80111a4:	3018      	adds	r0, #24
 80111a6:	4651      	mov	r1, sl
 80111a8:	f001 fc7a 	bl	8012aa0 <__atomic_load_8>
 80111ac:	1836      	adds	r6, r6, r0
 80111ae:	eb41 0707 	adc.w	r7, r1, r7
 80111b2:	4602      	mov	r2, r0
 80111b4:	460b      	mov	r3, r1
 80111b6:	4682      	mov	sl, r0
 80111b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111bc:	42b0      	cmp	r0, r6
 80111be:	eb71 0c07 	sbcs.w	ip, r1, r7
 80111c2:	db04      	blt.n	80111ce <rcl_timer_call+0x96>
 80111c4:	ea53 0c02 	orrs.w	ip, r3, r2
 80111c8:	d12b      	bne.n	8011222 <rcl_timer_call+0xea>
 80111ca:	4606      	mov	r6, r0
 80111cc:	460f      	mov	r7, r1
 80111ce:	6820      	ldr	r0, [r4, #0]
 80111d0:	2105      	movs	r1, #5
 80111d2:	4632      	mov	r2, r6
 80111d4:	463b      	mov	r3, r7
 80111d6:	3028      	adds	r0, #40	@ 0x28
 80111d8:	9100      	str	r1, [sp, #0]
 80111da:	f001 fc97 	bl	8012b0c <__atomic_store_8>
 80111de:	f1bb 0f00 	cmp.w	fp, #0
 80111e2:	d007      	beq.n	80111f4 <rcl_timer_call+0xbc>
 80111e4:	9a04      	ldr	r2, [sp, #16]
 80111e6:	9b05      	ldr	r3, [sp, #20]
 80111e8:	ebb2 0208 	subs.w	r2, r2, r8
 80111ec:	4620      	mov	r0, r4
 80111ee:	eb63 0309 	sbc.w	r3, r3, r9
 80111f2:	47d8      	blx	fp
 80111f4:	4628      	mov	r0, r5
 80111f6:	b007      	add	sp, #28
 80111f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111fc:	f240 3521 	movw	r5, #801	@ 0x321
 8011200:	4628      	mov	r0, r5
 8011202:	b007      	add	sp, #28
 8011204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011208:	2501      	movs	r5, #1
 801120a:	4628      	mov	r0, r5
 801120c:	b007      	add	sp, #28
 801120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011212:	250b      	movs	r5, #11
 8011214:	4628      	mov	r0, r5
 8011216:	b007      	add	sp, #28
 8011218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801121c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8011220:	e7e8      	b.n	80111f4 <rcl_timer_call+0xbc>
 8011222:	1b80      	subs	r0, r0, r6
 8011224:	eb61 0107 	sbc.w	r1, r1, r7
 8011228:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801122c:	f7ef f858 	bl	80002e0 <__aeabi_ldivmod>
 8011230:	9b02      	ldr	r3, [sp, #8]
 8011232:	3001      	adds	r0, #1
 8011234:	f141 0100 	adc.w	r1, r1, #0
 8011238:	fb00 f303 	mul.w	r3, r0, r3
 801123c:	fb01 330a 	mla	r3, r1, sl, r3
 8011240:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011244:	1830      	adds	r0, r6, r0
 8011246:	4453      	add	r3, sl
 8011248:	eb43 0707 	adc.w	r7, r3, r7
 801124c:	4606      	mov	r6, r0
 801124e:	e7be      	b.n	80111ce <rcl_timer_call+0x96>

08011250 <rcl_timer_is_ready>:
 8011250:	b398      	cbz	r0, 80112ba <rcl_timer_is_ready+0x6a>
 8011252:	b530      	push	{r4, r5, lr}
 8011254:	6803      	ldr	r3, [r0, #0]
 8011256:	b083      	sub	sp, #12
 8011258:	4604      	mov	r4, r0
 801125a:	b383      	cbz	r3, 80112be <rcl_timer_is_ready+0x6e>
 801125c:	460d      	mov	r5, r1
 801125e:	b349      	cbz	r1, 80112b4 <rcl_timer_is_ready+0x64>
 8011260:	f3bf 8f5b 	dmb	ish
 8011264:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011268:	f3bf 8f5b 	dmb	ish
 801126c:	b9fb      	cbnz	r3, 80112ae <rcl_timer_is_ready+0x5e>
 801126e:	6803      	ldr	r3, [r0, #0]
 8011270:	4669      	mov	r1, sp
 8011272:	6818      	ldr	r0, [r3, #0]
 8011274:	f7ff fd16 	bl	8010ca4 <rcl_clock_get_now>
 8011278:	b128      	cbz	r0, 8011286 <rcl_timer_is_ready+0x36>
 801127a:	f240 3321 	movw	r3, #801	@ 0x321
 801127e:	4298      	cmp	r0, r3
 8011280:	d015      	beq.n	80112ae <rcl_timer_is_ready+0x5e>
 8011282:	b003      	add	sp, #12
 8011284:	bd30      	pop	{r4, r5, pc}
 8011286:	6820      	ldr	r0, [r4, #0]
 8011288:	2105      	movs	r1, #5
 801128a:	3028      	adds	r0, #40	@ 0x28
 801128c:	f001 fc08 	bl	8012aa0 <__atomic_load_8>
 8011290:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011294:	1ac0      	subs	r0, r0, r3
 8011296:	eb61 0102 	sbc.w	r1, r1, r2
 801129a:	2801      	cmp	r0, #1
 801129c:	f171 0100 	sbcs.w	r1, r1, #0
 80112a0:	bfb4      	ite	lt
 80112a2:	2301      	movlt	r3, #1
 80112a4:	2300      	movge	r3, #0
 80112a6:	702b      	strb	r3, [r5, #0]
 80112a8:	2000      	movs	r0, #0
 80112aa:	b003      	add	sp, #12
 80112ac:	bd30      	pop	{r4, r5, pc}
 80112ae:	2300      	movs	r3, #0
 80112b0:	702b      	strb	r3, [r5, #0]
 80112b2:	e7f9      	b.n	80112a8 <rcl_timer_is_ready+0x58>
 80112b4:	200b      	movs	r0, #11
 80112b6:	b003      	add	sp, #12
 80112b8:	bd30      	pop	{r4, r5, pc}
 80112ba:	200b      	movs	r0, #11
 80112bc:	4770      	bx	lr
 80112be:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80112c2:	e7de      	b.n	8011282 <rcl_timer_is_ready+0x32>

080112c4 <rcl_timer_get_next_call_time>:
 80112c4:	b1d8      	cbz	r0, 80112fe <rcl_timer_get_next_call_time+0x3a>
 80112c6:	b538      	push	{r3, r4, r5, lr}
 80112c8:	6803      	ldr	r3, [r0, #0]
 80112ca:	b1d3      	cbz	r3, 8011302 <rcl_timer_get_next_call_time+0x3e>
 80112cc:	460c      	mov	r4, r1
 80112ce:	b1a1      	cbz	r1, 80112fa <rcl_timer_get_next_call_time+0x36>
 80112d0:	f3bf 8f5b 	dmb	ish
 80112d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80112d8:	f3bf 8f5b 	dmb	ish
 80112dc:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80112e0:	b943      	cbnz	r3, 80112f4 <rcl_timer_get_next_call_time+0x30>
 80112e2:	6800      	ldr	r0, [r0, #0]
 80112e4:	2105      	movs	r1, #5
 80112e6:	3028      	adds	r0, #40	@ 0x28
 80112e8:	f001 fbda 	bl	8012aa0 <__atomic_load_8>
 80112ec:	e9c4 0100 	strd	r0, r1, [r4]
 80112f0:	4628      	mov	r0, r5
 80112f2:	bd38      	pop	{r3, r4, r5, pc}
 80112f4:	f240 3021 	movw	r0, #801	@ 0x321
 80112f8:	bd38      	pop	{r3, r4, r5, pc}
 80112fa:	200b      	movs	r0, #11
 80112fc:	bd38      	pop	{r3, r4, r5, pc}
 80112fe:	200b      	movs	r0, #11
 8011300:	4770      	bx	lr
 8011302:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8011306:	bd38      	pop	{r3, r4, r5, pc}

08011308 <rcl_timer_get_guard_condition>:
 8011308:	b130      	cbz	r0, 8011318 <rcl_timer_get_guard_condition+0x10>
 801130a:	6800      	ldr	r0, [r0, #0]
 801130c:	b120      	cbz	r0, 8011318 <rcl_timer_get_guard_condition+0x10>
 801130e:	68c3      	ldr	r3, [r0, #12]
 8011310:	b10b      	cbz	r3, 8011316 <rcl_timer_get_guard_condition+0xe>
 8011312:	3008      	adds	r0, #8
 8011314:	4770      	bx	lr
 8011316:	4618      	mov	r0, r3
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop

0801131c <rcl_get_zero_initialized_wait_set>:
 801131c:	b510      	push	{r4, lr}
 801131e:	4c08      	ldr	r4, [pc, #32]	@ (8011340 <rcl_get_zero_initialized_wait_set+0x24>)
 8011320:	4686      	mov	lr, r0
 8011322:	4684      	mov	ip, r0
 8011324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801132a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801132c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011332:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011336:	6823      	ldr	r3, [r4, #0]
 8011338:	f8cc 3000 	str.w	r3, [ip]
 801133c:	4670      	mov	r0, lr
 801133e:	bd10      	pop	{r4, pc}
 8011340:	08019084 	.word	0x08019084

08011344 <rcl_wait_set_is_valid>:
 8011344:	b118      	cbz	r0, 801134e <rcl_wait_set_is_valid+0xa>
 8011346:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011348:	3800      	subs	r0, #0
 801134a:	bf18      	it	ne
 801134c:	2001      	movne	r0, #1
 801134e:	4770      	bx	lr

08011350 <rcl_wait_set_fini>:
 8011350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011354:	2800      	cmp	r0, #0
 8011356:	f000 80ab 	beq.w	80114b0 <rcl_wait_set_fini+0x160>
 801135a:	4605      	mov	r5, r0
 801135c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801135e:	2800      	cmp	r0, #0
 8011360:	f000 809c 	beq.w	801149c <rcl_wait_set_fini+0x14c>
 8011364:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8011366:	f003 fa17 	bl	8014798 <rmw_destroy_wait_set>
 801136a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801136c:	4680      	mov	r8, r0
 801136e:	2800      	cmp	r0, #0
 8011370:	f040 808e 	bne.w	8011490 <rcl_wait_set_fini+0x140>
 8011374:	2c00      	cmp	r4, #0
 8011376:	f000 80a0 	beq.w	80114ba <rcl_wait_set_fini+0x16a>
 801137a:	6828      	ldr	r0, [r5, #0]
 801137c:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801137e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011382:	2600      	movs	r6, #0
 8011384:	606e      	str	r6, [r5, #4]
 8011386:	6026      	str	r6, [r4, #0]
 8011388:	b118      	cbz	r0, 8011392 <rcl_wait_set_fini+0x42>
 801138a:	4649      	mov	r1, r9
 801138c:	47b8      	blx	r7
 801138e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011390:	602e      	str	r6, [r5, #0]
 8011392:	68a0      	ldr	r0, [r4, #8]
 8011394:	b128      	cbz	r0, 80113a2 <rcl_wait_set_fini+0x52>
 8011396:	4649      	mov	r1, r9
 8011398:	47b8      	blx	r7
 801139a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801139c:	2300      	movs	r3, #0
 801139e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80113a2:	68a8      	ldr	r0, [r5, #8]
 80113a4:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80113a6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80113a8:	f04f 0900 	mov.w	r9, #0
 80113ac:	f8c5 900c 	str.w	r9, [r5, #12]
 80113b0:	f8c4 900c 	str.w	r9, [r4, #12]
 80113b4:	b130      	cbz	r0, 80113c4 <rcl_wait_set_fini+0x74>
 80113b6:	4639      	mov	r1, r7
 80113b8:	47b0      	blx	r6
 80113ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80113bc:	f8c5 9008 	str.w	r9, [r5, #8]
 80113c0:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80113c2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80113c4:	6960      	ldr	r0, [r4, #20]
 80113c6:	f04f 0900 	mov.w	r9, #0
 80113ca:	f8c4 9010 	str.w	r9, [r4, #16]
 80113ce:	b130      	cbz	r0, 80113de <rcl_wait_set_fini+0x8e>
 80113d0:	4639      	mov	r1, r7
 80113d2:	47b0      	blx	r6
 80113d4:	f8c4 9014 	str.w	r9, [r4, #20]
 80113d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80113da:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80113dc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80113de:	6928      	ldr	r0, [r5, #16]
 80113e0:	f04f 0900 	mov.w	r9, #0
 80113e4:	f8c5 9014 	str.w	r9, [r5, #20]
 80113e8:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 80113ec:	b130      	cbz	r0, 80113fc <rcl_wait_set_fini+0xac>
 80113ee:	4639      	mov	r1, r7
 80113f0:	47b0      	blx	r6
 80113f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80113f4:	f8c5 9010 	str.w	r9, [r5, #16]
 80113f8:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80113fa:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80113fc:	69a8      	ldr	r0, [r5, #24]
 80113fe:	f04f 0900 	mov.w	r9, #0
 8011402:	f8c5 901c 	str.w	r9, [r5, #28]
 8011406:	f8c4 9018 	str.w	r9, [r4, #24]
 801140a:	b120      	cbz	r0, 8011416 <rcl_wait_set_fini+0xc6>
 801140c:	4639      	mov	r1, r7
 801140e:	47b0      	blx	r6
 8011410:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011412:	f8c5 9018 	str.w	r9, [r5, #24]
 8011416:	6a20      	ldr	r0, [r4, #32]
 8011418:	b128      	cbz	r0, 8011426 <rcl_wait_set_fini+0xd6>
 801141a:	4639      	mov	r1, r7
 801141c:	47b0      	blx	r6
 801141e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011420:	2300      	movs	r3, #0
 8011422:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011426:	6a28      	ldr	r0, [r5, #32]
 8011428:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801142a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801142e:	2600      	movs	r6, #0
 8011430:	626e      	str	r6, [r5, #36]	@ 0x24
 8011432:	6266      	str	r6, [r4, #36]	@ 0x24
 8011434:	b118      	cbz	r0, 801143e <rcl_wait_set_fini+0xee>
 8011436:	4649      	mov	r1, r9
 8011438:	47b8      	blx	r7
 801143a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801143c:	622e      	str	r6, [r5, #32]
 801143e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011440:	b128      	cbz	r0, 801144e <rcl_wait_set_fini+0xfe>
 8011442:	4649      	mov	r1, r9
 8011444:	47b8      	blx	r7
 8011446:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011448:	2300      	movs	r3, #0
 801144a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801144e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011450:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8011452:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011456:	2600      	movs	r6, #0
 8011458:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801145a:	6326      	str	r6, [r4, #48]	@ 0x30
 801145c:	b118      	cbz	r0, 8011466 <rcl_wait_set_fini+0x116>
 801145e:	4649      	mov	r1, r9
 8011460:	47b8      	blx	r7
 8011462:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011464:	62ae      	str	r6, [r5, #40]	@ 0x28
 8011466:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011468:	b1e0      	cbz	r0, 80114a4 <rcl_wait_set_fini+0x154>
 801146a:	4649      	mov	r1, r9
 801146c:	47b8      	blx	r7
 801146e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011470:	2300      	movs	r3, #0
 8011472:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8011476:	4598      	cmp	r8, r3
 8011478:	bf18      	it	ne
 801147a:	f44f 7861 	movne.w	r8, #900	@ 0x384
 801147e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011480:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8011482:	4620      	mov	r0, r4
 8011484:	4798      	blx	r3
 8011486:	2300      	movs	r3, #0
 8011488:	632b      	str	r3, [r5, #48]	@ 0x30
 801148a:	4640      	mov	r0, r8
 801148c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011490:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8011494:	2c00      	cmp	r4, #0
 8011496:	f47f af70 	bne.w	801137a <rcl_wait_set_fini+0x2a>
 801149a:	e7f6      	b.n	801148a <rcl_wait_set_fini+0x13a>
 801149c:	4680      	mov	r8, r0
 801149e:	4640      	mov	r0, r8
 80114a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114a4:	f1b8 0f00 	cmp.w	r8, #0
 80114a8:	bf18      	it	ne
 80114aa:	f44f 7861 	movne.w	r8, #900	@ 0x384
 80114ae:	e7e6      	b.n	801147e <rcl_wait_set_fini+0x12e>
 80114b0:	f04f 080b 	mov.w	r8, #11
 80114b4:	4640      	mov	r0, r8
 80114b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114ba:	f44f 7861 	mov.w	r8, #900	@ 0x384
 80114be:	e7e4      	b.n	801148a <rcl_wait_set_fini+0x13a>

080114c0 <rcl_wait_set_add_subscription>:
 80114c0:	b318      	cbz	r0, 801150a <rcl_wait_set_add_subscription+0x4a>
 80114c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80114c4:	b570      	push	{r4, r5, r6, lr}
 80114c6:	4604      	mov	r4, r0
 80114c8:	b30b      	cbz	r3, 801150e <rcl_wait_set_add_subscription+0x4e>
 80114ca:	b319      	cbz	r1, 8011514 <rcl_wait_set_add_subscription+0x54>
 80114cc:	681d      	ldr	r5, [r3, #0]
 80114ce:	6840      	ldr	r0, [r0, #4]
 80114d0:	4285      	cmp	r5, r0
 80114d2:	d217      	bcs.n	8011504 <rcl_wait_set_add_subscription+0x44>
 80114d4:	6820      	ldr	r0, [r4, #0]
 80114d6:	1c6e      	adds	r6, r5, #1
 80114d8:	601e      	str	r6, [r3, #0]
 80114da:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80114de:	b102      	cbz	r2, 80114e2 <rcl_wait_set_add_subscription+0x22>
 80114e0:	6015      	str	r5, [r2, #0]
 80114e2:	4608      	mov	r0, r1
 80114e4:	f7ff fb3c 	bl	8010b60 <rcl_subscription_get_rmw_handle>
 80114e8:	b150      	cbz	r0, 8011500 <rcl_wait_set_add_subscription+0x40>
 80114ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114ec:	6842      	ldr	r2, [r0, #4]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114f4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80114f6:	6853      	ldr	r3, [r2, #4]
 80114f8:	3301      	adds	r3, #1
 80114fa:	2000      	movs	r0, #0
 80114fc:	6053      	str	r3, [r2, #4]
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	2001      	movs	r0, #1
 8011502:	bd70      	pop	{r4, r5, r6, pc}
 8011504:	f240 3086 	movw	r0, #902	@ 0x386
 8011508:	bd70      	pop	{r4, r5, r6, pc}
 801150a:	200b      	movs	r0, #11
 801150c:	4770      	bx	lr
 801150e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011512:	bd70      	pop	{r4, r5, r6, pc}
 8011514:	200b      	movs	r0, #11
 8011516:	bd70      	pop	{r4, r5, r6, pc}

08011518 <rcl_wait_set_clear>:
 8011518:	2800      	cmp	r0, #0
 801151a:	d074      	beq.n	8011606 <rcl_wait_set_clear+0xee>
 801151c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801151e:	b510      	push	{r4, lr}
 8011520:	4604      	mov	r4, r0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d071      	beq.n	801160a <rcl_wait_set_clear+0xf2>
 8011526:	6800      	ldr	r0, [r0, #0]
 8011528:	b138      	cbz	r0, 801153a <rcl_wait_set_clear+0x22>
 801152a:	6862      	ldr	r2, [r4, #4]
 801152c:	2100      	movs	r1, #0
 801152e:	0092      	lsls	r2, r2, #2
 8011530:	f006 f81c 	bl	801756c <memset>
 8011534:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011536:	2200      	movs	r2, #0
 8011538:	601a      	str	r2, [r3, #0]
 801153a:	68a0      	ldr	r0, [r4, #8]
 801153c:	b138      	cbz	r0, 801154e <rcl_wait_set_clear+0x36>
 801153e:	68e2      	ldr	r2, [r4, #12]
 8011540:	2100      	movs	r1, #0
 8011542:	0092      	lsls	r2, r2, #2
 8011544:	f006 f812 	bl	801756c <memset>
 8011548:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801154a:	2200      	movs	r2, #0
 801154c:	60da      	str	r2, [r3, #12]
 801154e:	69a0      	ldr	r0, [r4, #24]
 8011550:	b138      	cbz	r0, 8011562 <rcl_wait_set_clear+0x4a>
 8011552:	69e2      	ldr	r2, [r4, #28]
 8011554:	2100      	movs	r1, #0
 8011556:	0092      	lsls	r2, r2, #2
 8011558:	f006 f808 	bl	801756c <memset>
 801155c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801155e:	2200      	movs	r2, #0
 8011560:	619a      	str	r2, [r3, #24]
 8011562:	6a20      	ldr	r0, [r4, #32]
 8011564:	b138      	cbz	r0, 8011576 <rcl_wait_set_clear+0x5e>
 8011566:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011568:	2100      	movs	r1, #0
 801156a:	0092      	lsls	r2, r2, #2
 801156c:	f005 fffe 	bl	801756c <memset>
 8011570:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011572:	2200      	movs	r2, #0
 8011574:	625a      	str	r2, [r3, #36]	@ 0x24
 8011576:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011578:	b138      	cbz	r0, 801158a <rcl_wait_set_clear+0x72>
 801157a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801157c:	2100      	movs	r1, #0
 801157e:	0092      	lsls	r2, r2, #2
 8011580:	f005 fff4 	bl	801756c <memset>
 8011584:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011586:	2200      	movs	r2, #0
 8011588:	631a      	str	r2, [r3, #48]	@ 0x30
 801158a:	6920      	ldr	r0, [r4, #16]
 801158c:	b138      	cbz	r0, 801159e <rcl_wait_set_clear+0x86>
 801158e:	6962      	ldr	r2, [r4, #20]
 8011590:	2100      	movs	r1, #0
 8011592:	0092      	lsls	r2, r2, #2
 8011594:	f005 ffea 	bl	801756c <memset>
 8011598:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801159a:	2200      	movs	r2, #0
 801159c:	641a      	str	r2, [r3, #64]	@ 0x40
 801159e:	6898      	ldr	r0, [r3, #8]
 80115a0:	b138      	cbz	r0, 80115b2 <rcl_wait_set_clear+0x9a>
 80115a2:	685a      	ldr	r2, [r3, #4]
 80115a4:	2100      	movs	r1, #0
 80115a6:	0092      	lsls	r2, r2, #2
 80115a8:	f005 ffe0 	bl	801756c <memset>
 80115ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115ae:	2200      	movs	r2, #0
 80115b0:	605a      	str	r2, [r3, #4]
 80115b2:	6958      	ldr	r0, [r3, #20]
 80115b4:	b138      	cbz	r0, 80115c6 <rcl_wait_set_clear+0xae>
 80115b6:	691a      	ldr	r2, [r3, #16]
 80115b8:	2100      	movs	r1, #0
 80115ba:	0092      	lsls	r2, r2, #2
 80115bc:	f005 ffd6 	bl	801756c <memset>
 80115c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115c2:	2200      	movs	r2, #0
 80115c4:	611a      	str	r2, [r3, #16]
 80115c6:	6a18      	ldr	r0, [r3, #32]
 80115c8:	b138      	cbz	r0, 80115da <rcl_wait_set_clear+0xc2>
 80115ca:	69da      	ldr	r2, [r3, #28]
 80115cc:	2100      	movs	r1, #0
 80115ce:	0092      	lsls	r2, r2, #2
 80115d0:	f005 ffcc 	bl	801756c <memset>
 80115d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115d6:	2200      	movs	r2, #0
 80115d8:	61da      	str	r2, [r3, #28]
 80115da:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80115dc:	b138      	cbz	r0, 80115ee <rcl_wait_set_clear+0xd6>
 80115de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80115e0:	2100      	movs	r1, #0
 80115e2:	0092      	lsls	r2, r2, #2
 80115e4:	f005 ffc2 	bl	801756c <memset>
 80115e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115ea:	2200      	movs	r2, #0
 80115ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80115ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80115f0:	b138      	cbz	r0, 8011602 <rcl_wait_set_clear+0xea>
 80115f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80115f4:	2100      	movs	r1, #0
 80115f6:	0092      	lsls	r2, r2, #2
 80115f8:	f005 ffb8 	bl	801756c <memset>
 80115fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115fe:	2200      	movs	r2, #0
 8011600:	635a      	str	r2, [r3, #52]	@ 0x34
 8011602:	2000      	movs	r0, #0
 8011604:	bd10      	pop	{r4, pc}
 8011606:	200b      	movs	r0, #11
 8011608:	4770      	bx	lr
 801160a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801160e:	bd10      	pop	{r4, pc}

08011610 <rcl_wait_set_resize>:
 8011610:	2800      	cmp	r0, #0
 8011612:	f000 81a1 	beq.w	8011958 <rcl_wait_set_resize+0x348>
 8011616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 801161e:	b083      	sub	sp, #12
 8011620:	4604      	mov	r4, r0
 8011622:	f1ba 0f00 	cmp.w	sl, #0
 8011626:	f000 8199 	beq.w	801195c <rcl_wait_set_resize+0x34c>
 801162a:	f04f 0800 	mov.w	r8, #0
 801162e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8011632:	461e      	mov	r6, r3
 8011634:	460f      	mov	r7, r1
 8011636:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 801163a:	4615      	mov	r5, r2
 801163c:	f8c0 8004 	str.w	r8, [r0, #4]
 8011640:	6800      	ldr	r0, [r0, #0]
 8011642:	f8ca 8000 	str.w	r8, [sl]
 8011646:	2900      	cmp	r1, #0
 8011648:	f000 80cf 	beq.w	80117ea <rcl_wait_set_resize+0x1da>
 801164c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8011650:	464a      	mov	r2, r9
 8011652:	4651      	mov	r1, sl
 8011654:	9301      	str	r3, [sp, #4]
 8011656:	4798      	blx	r3
 8011658:	9b01      	ldr	r3, [sp, #4]
 801165a:	6020      	str	r0, [r4, #0]
 801165c:	2800      	cmp	r0, #0
 801165e:	f000 8109 	beq.w	8011874 <rcl_wait_set_resize+0x264>
 8011662:	4652      	mov	r2, sl
 8011664:	4641      	mov	r1, r8
 8011666:	9301      	str	r3, [sp, #4]
 8011668:	f005 ff80 	bl	801756c <memset>
 801166c:	6067      	str	r7, [r4, #4]
 801166e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8011670:	9b01      	ldr	r3, [sp, #4]
 8011672:	68b8      	ldr	r0, [r7, #8]
 8011674:	f8c7 8004 	str.w	r8, [r7, #4]
 8011678:	464a      	mov	r2, r9
 801167a:	4651      	mov	r1, sl
 801167c:	4798      	blx	r3
 801167e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011680:	60b8      	str	r0, [r7, #8]
 8011682:	689f      	ldr	r7, [r3, #8]
 8011684:	2f00      	cmp	r7, #0
 8011686:	f000 80f0 	beq.w	801186a <rcl_wait_set_resize+0x25a>
 801168a:	4652      	mov	r2, sl
 801168c:	4641      	mov	r1, r8
 801168e:	4638      	mov	r0, r7
 8011690:	f005 ff6c 	bl	801756c <memset>
 8011694:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011698:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801169c:	68a0      	ldr	r0, [r4, #8]
 801169e:	2700      	movs	r7, #0
 80116a0:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 80116a4:	60e7      	str	r7, [r4, #12]
 80116a6:	f8ca 700c 	str.w	r7, [sl, #12]
 80116aa:	2d00      	cmp	r5, #0
 80116ac:	f040 80b0 	bne.w	8011810 <rcl_wait_set_resize+0x200>
 80116b0:	b130      	cbz	r0, 80116c0 <rcl_wait_set_resize+0xb0>
 80116b2:	4641      	mov	r1, r8
 80116b4:	4790      	blx	r2
 80116b6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80116ba:	60a5      	str	r5, [r4, #8]
 80116bc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80116c0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80116c4:	2700      	movs	r7, #0
 80116c6:	19ad      	adds	r5, r5, r6
 80116c8:	f8ca 7010 	str.w	r7, [sl, #16]
 80116cc:	f040 80b8 	bne.w	8011840 <rcl_wait_set_resize+0x230>
 80116d0:	b148      	cbz	r0, 80116e6 <rcl_wait_set_resize+0xd6>
 80116d2:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 80116d6:	4641      	mov	r1, r8
 80116d8:	4798      	blx	r3
 80116da:	f8ca 5014 	str.w	r5, [sl, #20]
 80116de:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80116e2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80116e6:	6920      	ldr	r0, [r4, #16]
 80116e8:	2500      	movs	r5, #0
 80116ea:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80116ee:	6165      	str	r5, [r4, #20]
 80116f0:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 80116f4:	2e00      	cmp	r6, #0
 80116f6:	f040 80c1 	bne.w	801187c <rcl_wait_set_resize+0x26c>
 80116fa:	b140      	cbz	r0, 801170e <rcl_wait_set_resize+0xfe>
 80116fc:	4641      	mov	r1, r8
 80116fe:	47c8      	blx	r9
 8011700:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011704:	6126      	str	r6, [r4, #16]
 8011706:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801170a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801170e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011710:	69a0      	ldr	r0, [r4, #24]
 8011712:	2500      	movs	r5, #0
 8011714:	61e5      	str	r5, [r4, #28]
 8011716:	f8ca 5018 	str.w	r5, [sl, #24]
 801171a:	2b00      	cmp	r3, #0
 801171c:	f040 80c2 	bne.w	80118a4 <rcl_wait_set_resize+0x294>
 8011720:	b128      	cbz	r0, 801172e <rcl_wait_set_resize+0x11e>
 8011722:	4641      	mov	r1, r8
 8011724:	47c8      	blx	r9
 8011726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011728:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801172c:	61a3      	str	r3, [r4, #24]
 801172e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8011732:	b130      	cbz	r0, 8011742 <rcl_wait_set_resize+0x132>
 8011734:	4641      	mov	r1, r8
 8011736:	47c8      	blx	r9
 8011738:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801173c:	2300      	movs	r3, #0
 801173e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8011742:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011744:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8011748:	6a20      	ldr	r0, [r4, #32]
 801174a:	2500      	movs	r5, #0
 801174c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8011750:	6265      	str	r5, [r4, #36]	@ 0x24
 8011752:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8011756:	2b00      	cmp	r3, #0
 8011758:	f000 80c8 	beq.w	80118ec <rcl_wait_set_resize+0x2dc>
 801175c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8011760:	4632      	mov	r2, r6
 8011762:	4649      	mov	r1, r9
 8011764:	47c0      	blx	r8
 8011766:	6220      	str	r0, [r4, #32]
 8011768:	2800      	cmp	r0, #0
 801176a:	f000 8083 	beq.w	8011874 <rcl_wait_set_resize+0x264>
 801176e:	464a      	mov	r2, r9
 8011770:	4629      	mov	r1, r5
 8011772:	f005 fefb 	bl	801756c <memset>
 8011776:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801177a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801177c:	6263      	str	r3, [r4, #36]	@ 0x24
 801177e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8011782:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8011786:	4632      	mov	r2, r6
 8011788:	4649      	mov	r1, r9
 801178a:	47c0      	blx	r8
 801178c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801178e:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8011792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011794:	2b00      	cmp	r3, #0
 8011796:	f000 80fb 	beq.w	8011990 <rcl_wait_set_resize+0x380>
 801179a:	464a      	mov	r2, r9
 801179c:	4629      	mov	r1, r5
 801179e:	4618      	mov	r0, r3
 80117a0:	f005 fee4 	bl	801756c <memset>
 80117a4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80117a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117aa:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80117ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80117b0:	2500      	movs	r5, #0
 80117b2:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80117b6:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80117b8:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f040 80a9 	bne.w	8011914 <rcl_wait_set_resize+0x304>
 80117c2:	b128      	cbz	r0, 80117d0 <rcl_wait_set_resize+0x1c0>
 80117c4:	4631      	mov	r1, r6
 80117c6:	47b8      	blx	r7
 80117c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117ca:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80117ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80117d0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80117d4:	b128      	cbz	r0, 80117e2 <rcl_wait_set_resize+0x1d2>
 80117d6:	4631      	mov	r1, r6
 80117d8:	47b8      	blx	r7
 80117da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80117dc:	2200      	movs	r2, #0
 80117de:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 80117e2:	2000      	movs	r0, #0
 80117e4:	b003      	add	sp, #12
 80117e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ea:	b120      	cbz	r0, 80117f6 <rcl_wait_set_resize+0x1e6>
 80117ec:	4649      	mov	r1, r9
 80117ee:	47d8      	blx	fp
 80117f0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80117f4:	6027      	str	r7, [r4, #0]
 80117f6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80117fa:	2800      	cmp	r0, #0
 80117fc:	f43f af4c 	beq.w	8011698 <rcl_wait_set_resize+0x88>
 8011800:	4649      	mov	r1, r9
 8011802:	47d8      	blx	fp
 8011804:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011808:	2300      	movs	r3, #0
 801180a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801180e:	e743      	b.n	8011698 <rcl_wait_set_resize+0x88>
 8011810:	4642      	mov	r2, r8
 8011812:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8011816:	4641      	mov	r1, r8
 8011818:	4798      	blx	r3
 801181a:	60a0      	str	r0, [r4, #8]
 801181c:	b350      	cbz	r0, 8011874 <rcl_wait_set_resize+0x264>
 801181e:	4642      	mov	r2, r8
 8011820:	4639      	mov	r1, r7
 8011822:	f005 fea3 	bl	801756c <memset>
 8011826:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801182a:	60e5      	str	r5, [r4, #12]
 801182c:	2700      	movs	r7, #0
 801182e:	19ad      	adds	r5, r5, r6
 8011830:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011834:	f8da 0014 	ldr.w	r0, [sl, #20]
 8011838:	f8ca 7010 	str.w	r7, [sl, #16]
 801183c:	f43f af48 	beq.w	80116d0 <rcl_wait_set_resize+0xc0>
 8011840:	00ad      	lsls	r5, r5, #2
 8011842:	4642      	mov	r2, r8
 8011844:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8011848:	4629      	mov	r1, r5
 801184a:	4798      	blx	r3
 801184c:	4680      	mov	r8, r0
 801184e:	f8ca 0014 	str.w	r0, [sl, #20]
 8011852:	2800      	cmp	r0, #0
 8011854:	f000 8085 	beq.w	8011962 <rcl_wait_set_resize+0x352>
 8011858:	462a      	mov	r2, r5
 801185a:	4639      	mov	r1, r7
 801185c:	f005 fe86 	bl	801756c <memset>
 8011860:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011864:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011868:	e73d      	b.n	80116e6 <rcl_wait_set_resize+0xd6>
 801186a:	6820      	ldr	r0, [r4, #0]
 801186c:	4649      	mov	r1, r9
 801186e:	47d8      	blx	fp
 8011870:	e9c4 7700 	strd	r7, r7, [r4]
 8011874:	200a      	movs	r0, #10
 8011876:	b003      	add	sp, #12
 8011878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187c:	4642      	mov	r2, r8
 801187e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8011882:	4641      	mov	r1, r8
 8011884:	47b8      	blx	r7
 8011886:	6120      	str	r0, [r4, #16]
 8011888:	2800      	cmp	r0, #0
 801188a:	d0f3      	beq.n	8011874 <rcl_wait_set_resize+0x264>
 801188c:	4642      	mov	r2, r8
 801188e:	4629      	mov	r1, r5
 8011890:	f005 fe6c 	bl	801756c <memset>
 8011894:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011898:	6166      	str	r6, [r4, #20]
 801189a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801189e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80118a2:	e734      	b.n	801170e <rcl_wait_set_resize+0xfe>
 80118a4:	009e      	lsls	r6, r3, #2
 80118a6:	4642      	mov	r2, r8
 80118a8:	4631      	mov	r1, r6
 80118aa:	47b8      	blx	r7
 80118ac:	61a0      	str	r0, [r4, #24]
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d0e0      	beq.n	8011874 <rcl_wait_set_resize+0x264>
 80118b2:	4632      	mov	r2, r6
 80118b4:	4629      	mov	r1, r5
 80118b6:	f005 fe59 	bl	801756c <memset>
 80118ba:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80118be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118c0:	61e3      	str	r3, [r4, #28]
 80118c2:	f8da 0020 	ldr.w	r0, [sl, #32]
 80118c6:	f8ca 501c 	str.w	r5, [sl, #28]
 80118ca:	4642      	mov	r2, r8
 80118cc:	4631      	mov	r1, r6
 80118ce:	47b8      	blx	r7
 80118d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118d2:	f8ca 0020 	str.w	r0, [sl, #32]
 80118d6:	6a1f      	ldr	r7, [r3, #32]
 80118d8:	2f00      	cmp	r7, #0
 80118da:	d053      	beq.n	8011984 <rcl_wait_set_resize+0x374>
 80118dc:	4632      	mov	r2, r6
 80118de:	4629      	mov	r1, r5
 80118e0:	4638      	mov	r0, r7
 80118e2:	f005 fe43 	bl	801756c <memset>
 80118e6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80118ea:	e72a      	b.n	8011742 <rcl_wait_set_resize+0x132>
 80118ec:	b128      	cbz	r0, 80118fa <rcl_wait_set_resize+0x2ea>
 80118ee:	4631      	mov	r1, r6
 80118f0:	47b8      	blx	r7
 80118f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80118f4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80118f8:	6223      	str	r3, [r4, #32]
 80118fa:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80118fe:	2800      	cmp	r0, #0
 8011900:	f43f af52 	beq.w	80117a8 <rcl_wait_set_resize+0x198>
 8011904:	4631      	mov	r1, r6
 8011906:	47b8      	blx	r7
 8011908:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801190c:	2300      	movs	r3, #0
 801190e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8011912:	e749      	b.n	80117a8 <rcl_wait_set_resize+0x198>
 8011914:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8011918:	4632      	mov	r2, r6
 801191a:	4649      	mov	r1, r9
 801191c:	47c0      	blx	r8
 801191e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8011920:	2800      	cmp	r0, #0
 8011922:	d0a7      	beq.n	8011874 <rcl_wait_set_resize+0x264>
 8011924:	464a      	mov	r2, r9
 8011926:	4629      	mov	r1, r5
 8011928:	f005 fe20 	bl	801756c <memset>
 801192c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011932:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011934:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011938:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 801193c:	4632      	mov	r2, r6
 801193e:	4649      	mov	r1, r9
 8011940:	47c0      	blx	r8
 8011942:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011944:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801194a:	b34b      	cbz	r3, 80119a0 <rcl_wait_set_resize+0x390>
 801194c:	464a      	mov	r2, r9
 801194e:	4629      	mov	r1, r5
 8011950:	4618      	mov	r0, r3
 8011952:	f005 fe0b 	bl	801756c <memset>
 8011956:	e744      	b.n	80117e2 <rcl_wait_set_resize+0x1d2>
 8011958:	200b      	movs	r0, #11
 801195a:	4770      	bx	lr
 801195c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011960:	e789      	b.n	8011876 <rcl_wait_set_resize+0x266>
 8011962:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011964:	68a0      	ldr	r0, [r4, #8]
 8011966:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011968:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801196a:	4790      	blx	r2
 801196c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801196e:	6920      	ldr	r0, [r4, #16]
 8011970:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011972:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011974:	f8c4 800c 	str.w	r8, [r4, #12]
 8011978:	f8c4 8008 	str.w	r8, [r4, #8]
 801197c:	4790      	blx	r2
 801197e:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8011982:	e777      	b.n	8011874 <rcl_wait_set_resize+0x264>
 8011984:	69a0      	ldr	r0, [r4, #24]
 8011986:	4641      	mov	r1, r8
 8011988:	47c8      	blx	r9
 801198a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801198e:	e771      	b.n	8011874 <rcl_wait_set_resize+0x264>
 8011990:	6a20      	ldr	r0, [r4, #32]
 8011992:	9301      	str	r3, [sp, #4]
 8011994:	4631      	mov	r1, r6
 8011996:	47b8      	blx	r7
 8011998:	9b01      	ldr	r3, [sp, #4]
 801199a:	e9c4 3308 	strd	r3, r3, [r4, #32]
 801199e:	e769      	b.n	8011874 <rcl_wait_set_resize+0x264>
 80119a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80119a2:	9301      	str	r3, [sp, #4]
 80119a4:	4631      	mov	r1, r6
 80119a6:	47b8      	blx	r7
 80119a8:	9b01      	ldr	r3, [sp, #4]
 80119aa:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80119ae:	e761      	b.n	8011874 <rcl_wait_set_resize+0x264>

080119b0 <rcl_wait_set_init>:
 80119b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119b4:	b084      	sub	sp, #16
 80119b6:	4604      	mov	r4, r0
 80119b8:	a810      	add	r0, sp, #64	@ 0x40
 80119ba:	460d      	mov	r5, r1
 80119bc:	4690      	mov	r8, r2
 80119be:	461f      	mov	r7, r3
 80119c0:	f7f8 fa3a 	bl	8009e38 <rcutils_allocator_is_valid>
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d068      	beq.n	8011a9a <rcl_wait_set_init+0xea>
 80119c8:	2c00      	cmp	r4, #0
 80119ca:	d066      	beq.n	8011a9a <rcl_wait_set_init+0xea>
 80119cc:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80119ce:	b126      	cbz	r6, 80119da <rcl_wait_set_init+0x2a>
 80119d0:	2564      	movs	r5, #100	@ 0x64
 80119d2:	4628      	mov	r0, r5
 80119d4:	b004      	add	sp, #16
 80119d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d05c      	beq.n	8011a9a <rcl_wait_set_init+0xea>
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7fe f9a5 	bl	800fd30 <rcl_context_is_valid>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d05c      	beq.n	8011aa4 <rcl_wait_set_init+0xf4>
 80119ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80119ec:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80119ee:	205c      	movs	r0, #92	@ 0x5c
 80119f0:	4798      	blx	r3
 80119f2:	6320      	str	r0, [r4, #48]	@ 0x30
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d059      	beq.n	8011aac <rcl_wait_set_init+0xfc>
 80119f8:	4631      	mov	r1, r6
 80119fa:	225c      	movs	r2, #92	@ 0x5c
 80119fc:	f005 fdb6 	bl	801756c <memset>
 8011a00:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8011a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a06:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8011a0a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011a0e:	eb03 0e02 	add.w	lr, r3, r2
 8011a12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a14:	449e      	add	lr, r3
 8011a16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a18:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011a1c:	f8d3 a000 	ldr.w	sl, [r3]
 8011a20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a24:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8011a28:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8011a2c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8011a30:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8011a34:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8011a38:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8011a3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011a3e:	44c6      	add	lr, r8
 8011a40:	f8dc 3000 	ldr.w	r3, [ip]
 8011a44:	6033      	str	r3, [r6, #0]
 8011a46:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8011a4a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011a4e:	f002 fe99 	bl	8014784 <rmw_create_wait_set>
 8011a52:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8011a56:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011a58:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011a5a:	b32b      	cbz	r3, 8011aa8 <rcl_wait_set_init+0xf8>
 8011a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a5e:	9302      	str	r3, [sp, #8]
 8011a60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a62:	9301      	str	r3, [sp, #4]
 8011a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	4629      	mov	r1, r5
 8011a6a:	463b      	mov	r3, r7
 8011a6c:	4642      	mov	r2, r8
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f7ff fdce 	bl	8011610 <rcl_wait_set_resize>
 8011a74:	4605      	mov	r5, r0
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d0ab      	beq.n	80119d2 <rcl_wait_set_init+0x22>
 8011a7a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011a7c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011a7e:	b133      	cbz	r3, 8011a8e <rcl_wait_set_init+0xde>
 8011a80:	4618      	mov	r0, r3
 8011a82:	f002 fe89 	bl	8014798 <rmw_destroy_wait_set>
 8011a86:	b198      	cbz	r0, 8011ab0 <rcl_wait_set_init+0x100>
 8011a88:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011a8a:	f44f 7561 	mov.w	r5, #900	@ 0x384
 8011a8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011a90:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011a92:	4798      	blx	r3
 8011a94:	2300      	movs	r3, #0
 8011a96:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a98:	e79b      	b.n	80119d2 <rcl_wait_set_init+0x22>
 8011a9a:	250b      	movs	r5, #11
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	b004      	add	sp, #16
 8011aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa4:	2565      	movs	r5, #101	@ 0x65
 8011aa6:	e794      	b.n	80119d2 <rcl_wait_set_init+0x22>
 8011aa8:	250a      	movs	r5, #10
 8011aaa:	e7f0      	b.n	8011a8e <rcl_wait_set_init+0xde>
 8011aac:	250a      	movs	r5, #10
 8011aae:	e790      	b.n	80119d2 <rcl_wait_set_init+0x22>
 8011ab0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011ab2:	e7ec      	b.n	8011a8e <rcl_wait_set_init+0xde>

08011ab4 <rcl_wait_set_add_guard_condition>:
 8011ab4:	b318      	cbz	r0, 8011afe <rcl_wait_set_add_guard_condition+0x4a>
 8011ab6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011ab8:	b570      	push	{r4, r5, r6, lr}
 8011aba:	4604      	mov	r4, r0
 8011abc:	b30b      	cbz	r3, 8011b02 <rcl_wait_set_add_guard_condition+0x4e>
 8011abe:	b319      	cbz	r1, 8011b08 <rcl_wait_set_add_guard_condition+0x54>
 8011ac0:	68dd      	ldr	r5, [r3, #12]
 8011ac2:	68c0      	ldr	r0, [r0, #12]
 8011ac4:	4285      	cmp	r5, r0
 8011ac6:	d217      	bcs.n	8011af8 <rcl_wait_set_add_guard_condition+0x44>
 8011ac8:	68a0      	ldr	r0, [r4, #8]
 8011aca:	1c6e      	adds	r6, r5, #1
 8011acc:	60de      	str	r6, [r3, #12]
 8011ace:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011ad2:	b102      	cbz	r2, 8011ad6 <rcl_wait_set_add_guard_condition+0x22>
 8011ad4:	6015      	str	r5, [r2, #0]
 8011ad6:	4608      	mov	r0, r1
 8011ad8:	f004 fc84 	bl	80163e4 <rcl_guard_condition_get_rmw_handle>
 8011adc:	b150      	cbz	r0, 8011af4 <rcl_wait_set_add_guard_condition+0x40>
 8011ade:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ae0:	6842      	ldr	r2, [r0, #4]
 8011ae2:	695b      	ldr	r3, [r3, #20]
 8011ae4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ae8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011aea:	6913      	ldr	r3, [r2, #16]
 8011aec:	3301      	adds	r3, #1
 8011aee:	2000      	movs	r0, #0
 8011af0:	6113      	str	r3, [r2, #16]
 8011af2:	bd70      	pop	{r4, r5, r6, pc}
 8011af4:	2001      	movs	r0, #1
 8011af6:	bd70      	pop	{r4, r5, r6, pc}
 8011af8:	f240 3086 	movw	r0, #902	@ 0x386
 8011afc:	bd70      	pop	{r4, r5, r6, pc}
 8011afe:	200b      	movs	r0, #11
 8011b00:	4770      	bx	lr
 8011b02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	200b      	movs	r0, #11
 8011b0a:	bd70      	pop	{r4, r5, r6, pc}

08011b0c <rcl_wait_set_add_timer>:
 8011b0c:	b328      	cbz	r0, 8011b5a <rcl_wait_set_add_timer+0x4e>
 8011b0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	4604      	mov	r4, r0
 8011b14:	b31b      	cbz	r3, 8011b5e <rcl_wait_set_add_timer+0x52>
 8011b16:	b329      	cbz	r1, 8011b64 <rcl_wait_set_add_timer+0x58>
 8011b18:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011b1a:	6965      	ldr	r5, [r4, #20]
 8011b1c:	42a8      	cmp	r0, r5
 8011b1e:	d219      	bcs.n	8011b54 <rcl_wait_set_add_timer+0x48>
 8011b20:	6925      	ldr	r5, [r4, #16]
 8011b22:	1c46      	adds	r6, r0, #1
 8011b24:	641e      	str	r6, [r3, #64]	@ 0x40
 8011b26:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011b2a:	b102      	cbz	r2, 8011b2e <rcl_wait_set_add_timer+0x22>
 8011b2c:	6010      	str	r0, [r2, #0]
 8011b2e:	4608      	mov	r0, r1
 8011b30:	f7ff fbea 	bl	8011308 <rcl_timer_get_guard_condition>
 8011b34:	b160      	cbz	r0, 8011b50 <rcl_wait_set_add_timer+0x44>
 8011b36:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011b38:	68e3      	ldr	r3, [r4, #12]
 8011b3a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	441d      	add	r5, r3
 8011b40:	f004 fc50 	bl	80163e4 <rcl_guard_condition_get_rmw_handle>
 8011b44:	b180      	cbz	r0, 8011b68 <rcl_wait_set_add_timer+0x5c>
 8011b46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b48:	6842      	ldr	r2, [r0, #4]
 8011b4a:	695b      	ldr	r3, [r3, #20]
 8011b4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b50:	2000      	movs	r0, #0
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	f240 3086 	movw	r0, #902	@ 0x386
 8011b58:	bd70      	pop	{r4, r5, r6, pc}
 8011b5a:	200b      	movs	r0, #11
 8011b5c:	4770      	bx	lr
 8011b5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011b62:	bd70      	pop	{r4, r5, r6, pc}
 8011b64:	200b      	movs	r0, #11
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	2001      	movs	r0, #1
 8011b6a:	bd70      	pop	{r4, r5, r6, pc}

08011b6c <rcl_wait_set_add_client>:
 8011b6c:	b318      	cbz	r0, 8011bb6 <rcl_wait_set_add_client+0x4a>
 8011b6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011b70:	b570      	push	{r4, r5, r6, lr}
 8011b72:	4604      	mov	r4, r0
 8011b74:	b30b      	cbz	r3, 8011bba <rcl_wait_set_add_client+0x4e>
 8011b76:	b319      	cbz	r1, 8011bc0 <rcl_wait_set_add_client+0x54>
 8011b78:	699d      	ldr	r5, [r3, #24]
 8011b7a:	69c0      	ldr	r0, [r0, #28]
 8011b7c:	4285      	cmp	r5, r0
 8011b7e:	d217      	bcs.n	8011bb0 <rcl_wait_set_add_client+0x44>
 8011b80:	69a0      	ldr	r0, [r4, #24]
 8011b82:	1c6e      	adds	r6, r5, #1
 8011b84:	619e      	str	r6, [r3, #24]
 8011b86:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011b8a:	b102      	cbz	r2, 8011b8e <rcl_wait_set_add_client+0x22>
 8011b8c:	6015      	str	r5, [r2, #0]
 8011b8e:	4608      	mov	r0, r1
 8011b90:	f7fd ffe4 	bl	800fb5c <rcl_client_get_rmw_handle>
 8011b94:	b150      	cbz	r0, 8011bac <rcl_wait_set_add_client+0x40>
 8011b96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b98:	6842      	ldr	r2, [r0, #4]
 8011b9a:	6a1b      	ldr	r3, [r3, #32]
 8011b9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ba0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011ba2:	69d3      	ldr	r3, [r2, #28]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	61d3      	str	r3, [r2, #28]
 8011baa:	bd70      	pop	{r4, r5, r6, pc}
 8011bac:	2001      	movs	r0, #1
 8011bae:	bd70      	pop	{r4, r5, r6, pc}
 8011bb0:	f240 3086 	movw	r0, #902	@ 0x386
 8011bb4:	bd70      	pop	{r4, r5, r6, pc}
 8011bb6:	200b      	movs	r0, #11
 8011bb8:	4770      	bx	lr
 8011bba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}
 8011bc0:	200b      	movs	r0, #11
 8011bc2:	bd70      	pop	{r4, r5, r6, pc}

08011bc4 <rcl_wait_set_add_service>:
 8011bc4:	b318      	cbz	r0, 8011c0e <rcl_wait_set_add_service+0x4a>
 8011bc6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	4604      	mov	r4, r0
 8011bcc:	b30b      	cbz	r3, 8011c12 <rcl_wait_set_add_service+0x4e>
 8011bce:	b319      	cbz	r1, 8011c18 <rcl_wait_set_add_service+0x54>
 8011bd0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011bd2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011bd4:	4285      	cmp	r5, r0
 8011bd6:	d217      	bcs.n	8011c08 <rcl_wait_set_add_service+0x44>
 8011bd8:	6a20      	ldr	r0, [r4, #32]
 8011bda:	1c6e      	adds	r6, r5, #1
 8011bdc:	625e      	str	r6, [r3, #36]	@ 0x24
 8011bde:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011be2:	b102      	cbz	r2, 8011be6 <rcl_wait_set_add_service+0x22>
 8011be4:	6015      	str	r5, [r2, #0]
 8011be6:	4608      	mov	r0, r1
 8011be8:	f7fe fd88 	bl	80106fc <rcl_service_get_rmw_handle>
 8011bec:	b150      	cbz	r0, 8011c04 <rcl_wait_set_add_service+0x40>
 8011bee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bf0:	6842      	ldr	r2, [r0, #4]
 8011bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bf4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011bf8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011bfa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	2000      	movs	r0, #0
 8011c00:	6293      	str	r3, [r2, #40]	@ 0x28
 8011c02:	bd70      	pop	{r4, r5, r6, pc}
 8011c04:	2001      	movs	r0, #1
 8011c06:	bd70      	pop	{r4, r5, r6, pc}
 8011c08:	f240 3086 	movw	r0, #902	@ 0x386
 8011c0c:	bd70      	pop	{r4, r5, r6, pc}
 8011c0e:	200b      	movs	r0, #11
 8011c10:	4770      	bx	lr
 8011c12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011c16:	bd70      	pop	{r4, r5, r6, pc}
 8011c18:	200b      	movs	r0, #11
 8011c1a:	bd70      	pop	{r4, r5, r6, pc}
 8011c1c:	0000      	movs	r0, r0
	...

08011c20 <rcl_wait>:
 8011c20:	2800      	cmp	r0, #0
 8011c22:	f000 81d4 	beq.w	8011fce <rcl_wait+0x3ae>
 8011c26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2a:	ed2d 8b02 	vpush	{d8}
 8011c2e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8011c30:	b099      	sub	sp, #100	@ 0x64
 8011c32:	4604      	mov	r4, r0
 8011c34:	2d00      	cmp	r5, #0
 8011c36:	f000 8178 	beq.w	8011f2a <rcl_wait+0x30a>
 8011c3a:	461f      	mov	r7, r3
 8011c3c:	6843      	ldr	r3, [r0, #4]
 8011c3e:	4690      	mov	r8, r2
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f000 809b 	beq.w	8011d7c <rcl_wait+0x15c>
 8011c46:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8011c48:	2e00      	cmp	r6, #0
 8011c4a:	f000 80b2 	beq.w	8011db2 <rcl_wait+0x192>
 8011c4e:	2100      	movs	r1, #0
 8011c50:	468c      	mov	ip, r1
 8011c52:	460a      	mov	r2, r1
 8011c54:	46a6      	mov	lr, r4
 8011c56:	f8de 3010 	ldr.w	r3, [lr, #16]
 8011c5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c5e:	b173      	cbz	r3, 8011c7e <rcl_wait+0x5e>
 8011c60:	f8de 300c 	ldr.w	r3, [lr, #12]
 8011c64:	6968      	ldr	r0, [r5, #20]
 8011c66:	440b      	add	r3, r1
 8011c68:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8011c6c:	b13c      	cbz	r4, 8011c7e <rcl_wait+0x5e>
 8011c6e:	692b      	ldr	r3, [r5, #16]
 8011c70:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8011c74:	3301      	adds	r3, #1
 8011c76:	612b      	str	r3, [r5, #16]
 8011c78:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8011c7c:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8011c7e:	3101      	adds	r1, #1
 8011c80:	f14c 0c00 	adc.w	ip, ip, #0
 8011c84:	42b1      	cmp	r1, r6
 8011c86:	f17c 0300 	sbcs.w	r3, ip, #0
 8011c8a:	d3e4      	bcc.n	8011c56 <rcl_wait+0x36>
 8011c8c:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8011f38 <rcl_wait+0x318>
 8011c90:	ea58 0307 	orrs.w	r3, r8, r7
 8011c94:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8011c98:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8011c9c:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8011ca0:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8011ca4:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8011ca8:	4674      	mov	r4, lr
 8011caa:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8011cae:	f000 8094 	beq.w	8011dda <rcl_wait+0x1ba>
 8011cb2:	2e00      	cmp	r6, #0
 8011cb4:	f000 8145 	beq.w	8011f42 <rcl_wait+0x322>
 8011cb8:	2500      	movs	r5, #0
 8011cba:	46bb      	mov	fp, r7
 8011cbc:	e02c      	b.n	8011d18 <rcl_wait+0xf8>
 8011cbe:	6923      	ldr	r3, [r4, #16]
 8011cc0:	f853 0009 	ldr.w	r0, [r3, r9]
 8011cc4:	a908      	add	r1, sp, #32
 8011cc6:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011cca:	f7ff fafb 	bl	80112c4 <rcl_timer_get_next_call_time>
 8011cce:	f240 3321 	movw	r3, #801	@ 0x321
 8011cd2:	4298      	cmp	r0, r3
 8011cd4:	f000 80bb 	beq.w	8011e4e <rcl_wait+0x22e>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d165      	bne.n	8011da8 <rcl_wait+0x188>
 8011cdc:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8011ce0:	7830      	ldrb	r0, [r6, #0]
 8011ce2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011ce4:	ab18      	add	r3, sp, #96	@ 0x60
 8011ce6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8011cea:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8011cee:	9205      	str	r2, [sp, #20]
 8011cf0:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8011cf4:	4297      	cmp	r7, r2
 8011cf6:	9a05      	ldr	r2, [sp, #20]
 8011cf8:	eb71 0202 	sbcs.w	r2, r1, r2
 8011cfc:	da06      	bge.n	8011d0c <rcl_wait+0xec>
 8011cfe:	e943 7108 	strd	r7, r1, [r3, #-32]
 8011d02:	ab18      	add	r3, sp, #96	@ 0x60
 8011d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011d08:	f840 6c30 	str.w	r6, [r0, #-48]
 8011d0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011d0e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8011d10:	3501      	adds	r5, #1
 8011d12:	42b5      	cmp	r5, r6
 8011d14:	f080 8114 	bcs.w	8011f40 <rcl_wait+0x320>
 8011d18:	6923      	ldr	r3, [r4, #16]
 8011d1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d1e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d0f4      	beq.n	8011d10 <rcl_wait+0xf0>
 8011d26:	a907      	add	r1, sp, #28
 8011d28:	f7ff f9f8 	bl	801111c <rcl_timer_clock>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f040 8141 	bne.w	8011fb6 <rcl_wait+0x396>
 8011d34:	9807      	ldr	r0, [sp, #28]
 8011d36:	7802      	ldrb	r2, [r0, #0]
 8011d38:	2a01      	cmp	r2, #1
 8011d3a:	d1c0      	bne.n	8011cbe <rcl_wait+0x9e>
 8011d3c:	f10d 011b 	add.w	r1, sp, #27
 8011d40:	f88d 301b 	strb.w	r3, [sp, #27]
 8011d44:	f7fe ffba 	bl	8010cbc <rcl_is_enabled_ros_time_override>
 8011d48:	4602      	mov	r2, r0
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f040 8133 	bne.w	8011fb6 <rcl_wait+0x396>
 8011d50:	6923      	ldr	r3, [r4, #16]
 8011d52:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8011d56:	f853 0009 	ldr.w	r0, [r3, r9]
 8011d5a:	2900      	cmp	r1, #0
 8011d5c:	d0b0      	beq.n	8011cc0 <rcl_wait+0xa0>
 8011d5e:	ae08      	add	r6, sp, #32
 8011d60:	4631      	mov	r1, r6
 8011d62:	f88d 2020 	strb.w	r2, [sp, #32]
 8011d66:	f7ff fa73 	bl	8011250 <rcl_timer_is_ready>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	f040 8123 	bne.w	8011fb6 <rcl_wait+0x396>
 8011d70:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d0c9      	beq.n	8011d0c <rcl_wait+0xec>
 8011d78:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011d7a:	e02f      	b.n	8011ddc <rcl_wait+0x1bc>
 8011d7c:	68c3      	ldr	r3, [r0, #12]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	f47f af61 	bne.w	8011c46 <rcl_wait+0x26>
 8011d84:	6943      	ldr	r3, [r0, #20]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	f47f af5d 	bne.w	8011c46 <rcl_wait+0x26>
 8011d8c:	69c3      	ldr	r3, [r0, #28]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f47f af59 	bne.w	8011c46 <rcl_wait+0x26>
 8011d94:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f47f af55 	bne.w	8011c46 <rcl_wait+0x26>
 8011d9c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f47f af51 	bne.w	8011c46 <rcl_wait+0x26>
 8011da4:	f240 3085 	movw	r0, #901	@ 0x385
 8011da8:	b019      	add	sp, #100	@ 0x64
 8011daa:	ecbd 8b02 	vpop	{d8}
 8011dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011db6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dba:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8011dbe:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8011dc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8011dc6:	ea58 0307 	orrs.w	r3, r8, r7
 8011dca:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8011dce:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8011dd2:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8011dd6:	f040 80b4 	bne.w	8011f42 <rcl_wait+0x322>
 8011dda:	ae08      	add	r6, sp, #32
 8011ddc:	2200      	movs	r2, #0
 8011dde:	2300      	movs	r3, #0
 8011de0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011de4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011de8:	9602      	str	r6, [sp, #8]
 8011dea:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8011dec:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8011df0:	e9cd 3200 	strd	r3, r2, [sp]
 8011df4:	f105 0110 	add.w	r1, r5, #16
 8011df8:	f105 031c 	add.w	r3, r5, #28
 8011dfc:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8011e00:	1d28      	adds	r0, r5, #4
 8011e02:	f002 fb3d 	bl	8014480 <rmw_wait>
 8011e06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011e0a:	4680      	mov	r8, r0
 8011e0c:	b332      	cbz	r2, 8011e5c <rcl_wait+0x23c>
 8011e0e:	2500      	movs	r5, #0
 8011e10:	462f      	mov	r7, r5
 8011e12:	462e      	mov	r6, r5
 8011e14:	e007      	b.n	8011e26 <rcl_wait+0x206>
 8011e16:	6922      	ldr	r2, [r4, #16]
 8011e18:	f842 3009 	str.w	r3, [r2, r9]
 8011e1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011e20:	3501      	adds	r5, #1
 8011e22:	4295      	cmp	r5, r2
 8011e24:	d21b      	bcs.n	8011e5e <rcl_wait+0x23e>
 8011e26:	6920      	ldr	r0, [r4, #16]
 8011e28:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011e2c:	a907      	add	r1, sp, #28
 8011e2e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d0f4      	beq.n	8011e20 <rcl_wait+0x200>
 8011e36:	f88d 601c 	strb.w	r6, [sp, #28]
 8011e3a:	f7ff fa09 	bl	8011250 <rcl_timer_is_ready>
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d1b2      	bne.n	8011da8 <rcl_wait+0x188>
 8011e42:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d0e5      	beq.n	8011e16 <rcl_wait+0x1f6>
 8011e4a:	461f      	mov	r7, r3
 8011e4c:	e7e6      	b.n	8011e1c <rcl_wait+0x1fc>
 8011e4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011e50:	6923      	ldr	r3, [r4, #16]
 8011e52:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8011e54:	2200      	movs	r2, #0
 8011e56:	f843 2009 	str.w	r2, [r3, r9]
 8011e5a:	e759      	b.n	8011d10 <rcl_wait+0xf0>
 8011e5c:	4617      	mov	r7, r2
 8011e5e:	f038 0002 	bics.w	r0, r8, #2
 8011e62:	f040 80a8 	bne.w	8011fb6 <rcl_wait+0x396>
 8011e66:	6866      	ldr	r6, [r4, #4]
 8011e68:	4602      	mov	r2, r0
 8011e6a:	b91e      	cbnz	r6, 8011e74 <rcl_wait+0x254>
 8011e6c:	e00d      	b.n	8011e8a <rcl_wait+0x26a>
 8011e6e:	3201      	adds	r2, #1
 8011e70:	4296      	cmp	r6, r2
 8011e72:	d00a      	beq.n	8011e8a <rcl_wait+0x26a>
 8011e74:	6899      	ldr	r1, [r3, #8]
 8011e76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011e7a:	2900      	cmp	r1, #0
 8011e7c:	d1f7      	bne.n	8011e6e <rcl_wait+0x24e>
 8011e7e:	6825      	ldr	r5, [r4, #0]
 8011e80:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011e84:	3201      	adds	r2, #1
 8011e86:	4296      	cmp	r6, r2
 8011e88:	d1f4      	bne.n	8011e74 <rcl_wait+0x254>
 8011e8a:	68e6      	ldr	r6, [r4, #12]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	b91e      	cbnz	r6, 8011e98 <rcl_wait+0x278>
 8011e90:	e00d      	b.n	8011eae <rcl_wait+0x28e>
 8011e92:	3201      	adds	r2, #1
 8011e94:	42b2      	cmp	r2, r6
 8011e96:	d00a      	beq.n	8011eae <rcl_wait+0x28e>
 8011e98:	6959      	ldr	r1, [r3, #20]
 8011e9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011e9e:	2900      	cmp	r1, #0
 8011ea0:	d1f7      	bne.n	8011e92 <rcl_wait+0x272>
 8011ea2:	68a5      	ldr	r5, [r4, #8]
 8011ea4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011ea8:	3201      	adds	r2, #1
 8011eaa:	42b2      	cmp	r2, r6
 8011eac:	d1f4      	bne.n	8011e98 <rcl_wait+0x278>
 8011eae:	69e6      	ldr	r6, [r4, #28]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	b91e      	cbnz	r6, 8011ebc <rcl_wait+0x29c>
 8011eb4:	e00d      	b.n	8011ed2 <rcl_wait+0x2b2>
 8011eb6:	3201      	adds	r2, #1
 8011eb8:	4296      	cmp	r6, r2
 8011eba:	d00a      	beq.n	8011ed2 <rcl_wait+0x2b2>
 8011ebc:	6a19      	ldr	r1, [r3, #32]
 8011ebe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011ec2:	2900      	cmp	r1, #0
 8011ec4:	d1f7      	bne.n	8011eb6 <rcl_wait+0x296>
 8011ec6:	69a5      	ldr	r5, [r4, #24]
 8011ec8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011ecc:	3201      	adds	r2, #1
 8011ece:	4296      	cmp	r6, r2
 8011ed0:	d1f4      	bne.n	8011ebc <rcl_wait+0x29c>
 8011ed2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	b91e      	cbnz	r6, 8011ee0 <rcl_wait+0x2c0>
 8011ed8:	e00d      	b.n	8011ef6 <rcl_wait+0x2d6>
 8011eda:	3201      	adds	r2, #1
 8011edc:	42b2      	cmp	r2, r6
 8011ede:	d00a      	beq.n	8011ef6 <rcl_wait+0x2d6>
 8011ee0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011ee2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011ee6:	2900      	cmp	r1, #0
 8011ee8:	d1f7      	bne.n	8011eda <rcl_wait+0x2ba>
 8011eea:	6a25      	ldr	r5, [r4, #32]
 8011eec:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011ef0:	3201      	adds	r2, #1
 8011ef2:	42b2      	cmp	r2, r6
 8011ef4:	d1f4      	bne.n	8011ee0 <rcl_wait+0x2c0>
 8011ef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ef8:	2200      	movs	r2, #0
 8011efa:	b91e      	cbnz	r6, 8011f04 <rcl_wait+0x2e4>
 8011efc:	e00d      	b.n	8011f1a <rcl_wait+0x2fa>
 8011efe:	3201      	adds	r2, #1
 8011f00:	42b2      	cmp	r2, r6
 8011f02:	d00a      	beq.n	8011f1a <rcl_wait+0x2fa>
 8011f04:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011f06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011f0a:	2900      	cmp	r1, #0
 8011f0c:	d1f7      	bne.n	8011efe <rcl_wait+0x2de>
 8011f0e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8011f10:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011f14:	3201      	adds	r2, #1
 8011f16:	42b2      	cmp	r2, r6
 8011f18:	d1f4      	bne.n	8011f04 <rcl_wait+0x2e4>
 8011f1a:	f1b8 0f02 	cmp.w	r8, #2
 8011f1e:	f47f af43 	bne.w	8011da8 <rcl_wait+0x188>
 8011f22:	f087 0701 	eor.w	r7, r7, #1
 8011f26:	0078      	lsls	r0, r7, #1
 8011f28:	e73e      	b.n	8011da8 <rcl_wait+0x188>
 8011f2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f2e:	b019      	add	sp, #100	@ 0x64
 8011f30:	ecbd 8b02 	vpop	{d8}
 8011f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f38:	ffffffff 	.word	0xffffffff
 8011f3c:	7fffffff 	.word	0x7fffffff
 8011f40:	465f      	mov	r7, fp
 8011f42:	f1b8 0f01 	cmp.w	r8, #1
 8011f46:	f177 0300 	sbcs.w	r3, r7, #0
 8011f4a:	db3a      	blt.n	8011fc2 <rcl_wait+0x3a2>
 8011f4c:	2601      	movs	r6, #1
 8011f4e:	ad10      	add	r5, sp, #64	@ 0x40
 8011f50:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8011f54:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8011f58:	a908      	add	r1, sp, #32
 8011f5a:	b1a0      	cbz	r0, 8011f86 <rcl_wait+0x366>
 8011f5c:	f7fe fea2 	bl	8010ca4 <rcl_clock_get_now>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	f47f af21 	bne.w	8011da8 <rcl_wait+0x188>
 8011f66:	9a08      	ldr	r2, [sp, #32]
 8011f68:	68ab      	ldr	r3, [r5, #8]
 8011f6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011f6c:	1a9b      	subs	r3, r3, r2
 8011f6e:	68ea      	ldr	r2, [r5, #12]
 8011f70:	eb62 0201 	sbc.w	r2, r2, r1
 8011f74:	4598      	cmp	r8, r3
 8011f76:	eb77 0102 	sbcs.w	r1, r7, r2
 8011f7a:	bfba      	itte	lt
 8011f7c:	4643      	movlt	r3, r8
 8011f7e:	463a      	movlt	r2, r7
 8011f80:	2601      	movge	r6, #1
 8011f82:	4698      	mov	r8, r3
 8011f84:	4617      	mov	r7, r2
 8011f86:	3508      	adds	r5, #8
 8011f88:	45a9      	cmp	r9, r5
 8011f8a:	d1e3      	bne.n	8011f54 <rcl_wait+0x334>
 8011f8c:	2f00      	cmp	r7, #0
 8011f8e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011f90:	bfab      	itete	ge
 8011f92:	4640      	movge	r0, r8
 8011f94:	2000      	movlt	r0, #0
 8011f96:	4639      	movge	r1, r7
 8011f98:	2100      	movlt	r1, #0
 8011f9a:	2e00      	cmp	r6, #0
 8011f9c:	f43f af24 	beq.w	8011de8 <rcl_wait+0x1c8>
 8011fa0:	a30d      	add	r3, pc, #52	@ (adr r3, 8011fd8 <rcl_wait+0x3b8>)
 8011fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa6:	f7ee f99b 	bl	80002e0 <__aeabi_ldivmod>
 8011faa:	ae08      	add	r6, sp, #32
 8011fac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011fb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011fb4:	e718      	b.n	8011de8 <rcl_wait+0x1c8>
 8011fb6:	2001      	movs	r0, #1
 8011fb8:	b019      	add	sp, #100	@ 0x64
 8011fba:	ecbd 8b02 	vpop	{d8}
 8011fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc2:	2600      	movs	r6, #0
 8011fc4:	f04f 38ff 	mov.w	r8, #4294967295
 8011fc8:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011fcc:	e7bf      	b.n	8011f4e <rcl_wait+0x32e>
 8011fce:	200b      	movs	r0, #11
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	f3af 8000 	nop.w
 8011fd8:	3b9aca00 	.word	0x3b9aca00
 8011fdc:	00000000 	.word	0x00000000

08011fe0 <rcl_action_take_goal_response>:
 8011fe0:	b3b0      	cbz	r0, 8012050 <rcl_action_take_goal_response+0x70>
 8011fe2:	b570      	push	{r4, r5, r6, lr}
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	6800      	ldr	r0, [r0, #0]
 8011fe8:	b368      	cbz	r0, 8012046 <rcl_action_take_goal_response+0x66>
 8011fea:	460d      	mov	r5, r1
 8011fec:	4616      	mov	r6, r2
 8011fee:	f7fd fe7b 	bl	800fce8 <rcl_client_is_valid>
 8011ff2:	b330      	cbz	r0, 8012042 <rcl_action_take_goal_response+0x62>
 8011ff4:	6820      	ldr	r0, [r4, #0]
 8011ff6:	3004      	adds	r0, #4
 8011ff8:	f7fd fe76 	bl	800fce8 <rcl_client_is_valid>
 8011ffc:	b308      	cbz	r0, 8012042 <rcl_action_take_goal_response+0x62>
 8011ffe:	6820      	ldr	r0, [r4, #0]
 8012000:	3008      	adds	r0, #8
 8012002:	f7fd fe71 	bl	800fce8 <rcl_client_is_valid>
 8012006:	b1e0      	cbz	r0, 8012042 <rcl_action_take_goal_response+0x62>
 8012008:	6820      	ldr	r0, [r4, #0]
 801200a:	300c      	adds	r0, #12
 801200c:	f7fe fdae 	bl	8010b6c <rcl_subscription_is_valid>
 8012010:	b1b8      	cbz	r0, 8012042 <rcl_action_take_goal_response+0x62>
 8012012:	6820      	ldr	r0, [r4, #0]
 8012014:	3010      	adds	r0, #16
 8012016:	f7fe fda9 	bl	8010b6c <rcl_subscription_is_valid>
 801201a:	b190      	cbz	r0, 8012042 <rcl_action_take_goal_response+0x62>
 801201c:	b1b5      	cbz	r5, 801204c <rcl_action_take_goal_response+0x6c>
 801201e:	b1ae      	cbz	r6, 801204c <rcl_action_take_goal_response+0x6c>
 8012020:	6820      	ldr	r0, [r4, #0]
 8012022:	4632      	mov	r2, r6
 8012024:	4629      	mov	r1, r5
 8012026:	f7fd fdf3 	bl	800fc10 <rcl_take_response>
 801202a:	b148      	cbz	r0, 8012040 <rcl_action_take_goal_response+0x60>
 801202c:	280a      	cmp	r0, #10
 801202e:	d007      	beq.n	8012040 <rcl_action_take_goal_response+0x60>
 8012030:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012034:	f241 0307 	movw	r3, #4103	@ 0x1007
 8012038:	4290      	cmp	r0, r2
 801203a:	bf0c      	ite	eq
 801203c:	4618      	moveq	r0, r3
 801203e:	2001      	movne	r0, #1
 8012040:	bd70      	pop	{r4, r5, r6, pc}
 8012042:	f7f7 ff25 	bl	8009e90 <rcutils_reset_error>
 8012046:	f241 0006 	movw	r0, #4102	@ 0x1006
 801204a:	bd70      	pop	{r4, r5, r6, pc}
 801204c:	200b      	movs	r0, #11
 801204e:	bd70      	pop	{r4, r5, r6, pc}
 8012050:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <rcl_action_send_result_request>:
 8012058:	b378      	cbz	r0, 80120ba <rcl_action_send_result_request+0x62>
 801205a:	b570      	push	{r4, r5, r6, lr}
 801205c:	4604      	mov	r4, r0
 801205e:	6800      	ldr	r0, [r0, #0]
 8012060:	b330      	cbz	r0, 80120b0 <rcl_action_send_result_request+0x58>
 8012062:	460d      	mov	r5, r1
 8012064:	4616      	mov	r6, r2
 8012066:	f7fd fe3f 	bl	800fce8 <rcl_client_is_valid>
 801206a:	b1f8      	cbz	r0, 80120ac <rcl_action_send_result_request+0x54>
 801206c:	6820      	ldr	r0, [r4, #0]
 801206e:	3004      	adds	r0, #4
 8012070:	f7fd fe3a 	bl	800fce8 <rcl_client_is_valid>
 8012074:	b1d0      	cbz	r0, 80120ac <rcl_action_send_result_request+0x54>
 8012076:	6820      	ldr	r0, [r4, #0]
 8012078:	3008      	adds	r0, #8
 801207a:	f7fd fe35 	bl	800fce8 <rcl_client_is_valid>
 801207e:	b1a8      	cbz	r0, 80120ac <rcl_action_send_result_request+0x54>
 8012080:	6820      	ldr	r0, [r4, #0]
 8012082:	300c      	adds	r0, #12
 8012084:	f7fe fd72 	bl	8010b6c <rcl_subscription_is_valid>
 8012088:	b180      	cbz	r0, 80120ac <rcl_action_send_result_request+0x54>
 801208a:	6820      	ldr	r0, [r4, #0]
 801208c:	3010      	adds	r0, #16
 801208e:	f7fe fd6d 	bl	8010b6c <rcl_subscription_is_valid>
 8012092:	b158      	cbz	r0, 80120ac <rcl_action_send_result_request+0x54>
 8012094:	b17d      	cbz	r5, 80120b6 <rcl_action_send_result_request+0x5e>
 8012096:	b176      	cbz	r6, 80120b6 <rcl_action_send_result_request+0x5e>
 8012098:	6820      	ldr	r0, [r4, #0]
 801209a:	4632      	mov	r2, r6
 801209c:	4629      	mov	r1, r5
 801209e:	3008      	adds	r0, #8
 80120a0:	f7fd fd62 	bl	800fb68 <rcl_send_request>
 80120a4:	3800      	subs	r0, #0
 80120a6:	bf18      	it	ne
 80120a8:	2001      	movne	r0, #1
 80120aa:	bd70      	pop	{r4, r5, r6, pc}
 80120ac:	f7f7 fef0 	bl	8009e90 <rcutils_reset_error>
 80120b0:	f241 0006 	movw	r0, #4102	@ 0x1006
 80120b4:	bd70      	pop	{r4, r5, r6, pc}
 80120b6:	200b      	movs	r0, #11
 80120b8:	bd70      	pop	{r4, r5, r6, pc}
 80120ba:	f241 0006 	movw	r0, #4102	@ 0x1006
 80120be:	4770      	bx	lr

080120c0 <rcl_action_take_result_response>:
 80120c0:	2800      	cmp	r0, #0
 80120c2:	d037      	beq.n	8012134 <rcl_action_take_result_response+0x74>
 80120c4:	b570      	push	{r4, r5, r6, lr}
 80120c6:	4604      	mov	r4, r0
 80120c8:	6800      	ldr	r0, [r0, #0]
 80120ca:	b370      	cbz	r0, 801212a <rcl_action_take_result_response+0x6a>
 80120cc:	460d      	mov	r5, r1
 80120ce:	4616      	mov	r6, r2
 80120d0:	f7fd fe0a 	bl	800fce8 <rcl_client_is_valid>
 80120d4:	b338      	cbz	r0, 8012126 <rcl_action_take_result_response+0x66>
 80120d6:	6820      	ldr	r0, [r4, #0]
 80120d8:	3004      	adds	r0, #4
 80120da:	f7fd fe05 	bl	800fce8 <rcl_client_is_valid>
 80120de:	b310      	cbz	r0, 8012126 <rcl_action_take_result_response+0x66>
 80120e0:	6820      	ldr	r0, [r4, #0]
 80120e2:	3008      	adds	r0, #8
 80120e4:	f7fd fe00 	bl	800fce8 <rcl_client_is_valid>
 80120e8:	b1e8      	cbz	r0, 8012126 <rcl_action_take_result_response+0x66>
 80120ea:	6820      	ldr	r0, [r4, #0]
 80120ec:	300c      	adds	r0, #12
 80120ee:	f7fe fd3d 	bl	8010b6c <rcl_subscription_is_valid>
 80120f2:	b1c0      	cbz	r0, 8012126 <rcl_action_take_result_response+0x66>
 80120f4:	6820      	ldr	r0, [r4, #0]
 80120f6:	3010      	adds	r0, #16
 80120f8:	f7fe fd38 	bl	8010b6c <rcl_subscription_is_valid>
 80120fc:	b198      	cbz	r0, 8012126 <rcl_action_take_result_response+0x66>
 80120fe:	b1bd      	cbz	r5, 8012130 <rcl_action_take_result_response+0x70>
 8012100:	b1b6      	cbz	r6, 8012130 <rcl_action_take_result_response+0x70>
 8012102:	6820      	ldr	r0, [r4, #0]
 8012104:	4632      	mov	r2, r6
 8012106:	4629      	mov	r1, r5
 8012108:	3008      	adds	r0, #8
 801210a:	f7fd fd81 	bl	800fc10 <rcl_take_response>
 801210e:	b148      	cbz	r0, 8012124 <rcl_action_take_result_response+0x64>
 8012110:	280a      	cmp	r0, #10
 8012112:	d007      	beq.n	8012124 <rcl_action_take_result_response+0x64>
 8012114:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012118:	f241 0307 	movw	r3, #4103	@ 0x1007
 801211c:	4290      	cmp	r0, r2
 801211e:	bf0c      	ite	eq
 8012120:	4618      	moveq	r0, r3
 8012122:	2001      	movne	r0, #1
 8012124:	bd70      	pop	{r4, r5, r6, pc}
 8012126:	f7f7 feb3 	bl	8009e90 <rcutils_reset_error>
 801212a:	f241 0006 	movw	r0, #4102	@ 0x1006
 801212e:	bd70      	pop	{r4, r5, r6, pc}
 8012130:	200b      	movs	r0, #11
 8012132:	bd70      	pop	{r4, r5, r6, pc}
 8012134:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop

0801213c <rcl_action_take_cancel_response>:
 801213c:	2800      	cmp	r0, #0
 801213e:	d037      	beq.n	80121b0 <rcl_action_take_cancel_response+0x74>
 8012140:	b570      	push	{r4, r5, r6, lr}
 8012142:	4604      	mov	r4, r0
 8012144:	6800      	ldr	r0, [r0, #0]
 8012146:	b370      	cbz	r0, 80121a6 <rcl_action_take_cancel_response+0x6a>
 8012148:	460d      	mov	r5, r1
 801214a:	4616      	mov	r6, r2
 801214c:	f7fd fdcc 	bl	800fce8 <rcl_client_is_valid>
 8012150:	b338      	cbz	r0, 80121a2 <rcl_action_take_cancel_response+0x66>
 8012152:	6820      	ldr	r0, [r4, #0]
 8012154:	3004      	adds	r0, #4
 8012156:	f7fd fdc7 	bl	800fce8 <rcl_client_is_valid>
 801215a:	b310      	cbz	r0, 80121a2 <rcl_action_take_cancel_response+0x66>
 801215c:	6820      	ldr	r0, [r4, #0]
 801215e:	3008      	adds	r0, #8
 8012160:	f7fd fdc2 	bl	800fce8 <rcl_client_is_valid>
 8012164:	b1e8      	cbz	r0, 80121a2 <rcl_action_take_cancel_response+0x66>
 8012166:	6820      	ldr	r0, [r4, #0]
 8012168:	300c      	adds	r0, #12
 801216a:	f7fe fcff 	bl	8010b6c <rcl_subscription_is_valid>
 801216e:	b1c0      	cbz	r0, 80121a2 <rcl_action_take_cancel_response+0x66>
 8012170:	6820      	ldr	r0, [r4, #0]
 8012172:	3010      	adds	r0, #16
 8012174:	f7fe fcfa 	bl	8010b6c <rcl_subscription_is_valid>
 8012178:	b198      	cbz	r0, 80121a2 <rcl_action_take_cancel_response+0x66>
 801217a:	b1bd      	cbz	r5, 80121ac <rcl_action_take_cancel_response+0x70>
 801217c:	b1b6      	cbz	r6, 80121ac <rcl_action_take_cancel_response+0x70>
 801217e:	6820      	ldr	r0, [r4, #0]
 8012180:	4632      	mov	r2, r6
 8012182:	4629      	mov	r1, r5
 8012184:	3004      	adds	r0, #4
 8012186:	f7fd fd43 	bl	800fc10 <rcl_take_response>
 801218a:	b148      	cbz	r0, 80121a0 <rcl_action_take_cancel_response+0x64>
 801218c:	280a      	cmp	r0, #10
 801218e:	d007      	beq.n	80121a0 <rcl_action_take_cancel_response+0x64>
 8012190:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012194:	f241 0307 	movw	r3, #4103	@ 0x1007
 8012198:	4290      	cmp	r0, r2
 801219a:	bf0c      	ite	eq
 801219c:	4618      	moveq	r0, r3
 801219e:	2001      	movne	r0, #1
 80121a0:	bd70      	pop	{r4, r5, r6, pc}
 80121a2:	f7f7 fe75 	bl	8009e90 <rcutils_reset_error>
 80121a6:	f241 0006 	movw	r0, #4102	@ 0x1006
 80121aa:	bd70      	pop	{r4, r5, r6, pc}
 80121ac:	200b      	movs	r0, #11
 80121ae:	bd70      	pop	{r4, r5, r6, pc}
 80121b0:	f241 0006 	movw	r0, #4102	@ 0x1006
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop

080121b8 <rcl_action_take_feedback>:
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d037      	beq.n	801222c <rcl_action_take_feedback+0x74>
 80121bc:	b530      	push	{r4, r5, lr}
 80121be:	4604      	mov	r4, r0
 80121c0:	6800      	ldr	r0, [r0, #0]
 80121c2:	b08f      	sub	sp, #60	@ 0x3c
 80121c4:	b358      	cbz	r0, 801221e <rcl_action_take_feedback+0x66>
 80121c6:	460d      	mov	r5, r1
 80121c8:	f7fd fd8e 	bl	800fce8 <rcl_client_is_valid>
 80121cc:	b328      	cbz	r0, 801221a <rcl_action_take_feedback+0x62>
 80121ce:	6820      	ldr	r0, [r4, #0]
 80121d0:	3004      	adds	r0, #4
 80121d2:	f7fd fd89 	bl	800fce8 <rcl_client_is_valid>
 80121d6:	b300      	cbz	r0, 801221a <rcl_action_take_feedback+0x62>
 80121d8:	6820      	ldr	r0, [r4, #0]
 80121da:	3008      	adds	r0, #8
 80121dc:	f7fd fd84 	bl	800fce8 <rcl_client_is_valid>
 80121e0:	b1d8      	cbz	r0, 801221a <rcl_action_take_feedback+0x62>
 80121e2:	6820      	ldr	r0, [r4, #0]
 80121e4:	300c      	adds	r0, #12
 80121e6:	f7fe fcc1 	bl	8010b6c <rcl_subscription_is_valid>
 80121ea:	b1b0      	cbz	r0, 801221a <rcl_action_take_feedback+0x62>
 80121ec:	6820      	ldr	r0, [r4, #0]
 80121ee:	3010      	adds	r0, #16
 80121f0:	f7fe fcbc 	bl	8010b6c <rcl_subscription_is_valid>
 80121f4:	b188      	cbz	r0, 801221a <rcl_action_take_feedback+0x62>
 80121f6:	b1b5      	cbz	r5, 8012226 <rcl_action_take_feedback+0x6e>
 80121f8:	6820      	ldr	r0, [r4, #0]
 80121fa:	2300      	movs	r3, #0
 80121fc:	466a      	mov	r2, sp
 80121fe:	4629      	mov	r1, r5
 8012200:	300c      	adds	r0, #12
 8012202:	f7fe fc55 	bl	8010ab0 <rcl_take>
 8012206:	b160      	cbz	r0, 8012222 <rcl_action_take_feedback+0x6a>
 8012208:	f240 1391 	movw	r3, #401	@ 0x191
 801220c:	4298      	cmp	r0, r3
 801220e:	d010      	beq.n	8012232 <rcl_action_take_feedback+0x7a>
 8012210:	280a      	cmp	r0, #10
 8012212:	bf18      	it	ne
 8012214:	2001      	movne	r0, #1
 8012216:	b00f      	add	sp, #60	@ 0x3c
 8012218:	bd30      	pop	{r4, r5, pc}
 801221a:	f7f7 fe39 	bl	8009e90 <rcutils_reset_error>
 801221e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012222:	b00f      	add	sp, #60	@ 0x3c
 8012224:	bd30      	pop	{r4, r5, pc}
 8012226:	200b      	movs	r0, #11
 8012228:	b00f      	add	sp, #60	@ 0x3c
 801222a:	bd30      	pop	{r4, r5, pc}
 801222c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012230:	4770      	bx	lr
 8012232:	f241 0007 	movw	r0, #4103	@ 0x1007
 8012236:	e7f4      	b.n	8012222 <rcl_action_take_feedback+0x6a>

08012238 <rcl_action_wait_set_add_action_client>:
 8012238:	2800      	cmp	r0, #0
 801223a:	d045      	beq.n	80122c8 <rcl_action_wait_set_add_action_client+0x90>
 801223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223e:	460c      	mov	r4, r1
 8012240:	2900      	cmp	r1, #0
 8012242:	d03e      	beq.n	80122c2 <rcl_action_wait_set_add_action_client+0x8a>
 8012244:	4605      	mov	r5, r0
 8012246:	6808      	ldr	r0, [r1, #0]
 8012248:	2800      	cmp	r0, #0
 801224a:	d03a      	beq.n	80122c2 <rcl_action_wait_set_add_action_client+0x8a>
 801224c:	4617      	mov	r7, r2
 801224e:	461e      	mov	r6, r3
 8012250:	f7fd fd4a 	bl	800fce8 <rcl_client_is_valid>
 8012254:	b398      	cbz	r0, 80122be <rcl_action_wait_set_add_action_client+0x86>
 8012256:	6820      	ldr	r0, [r4, #0]
 8012258:	3004      	adds	r0, #4
 801225a:	f7fd fd45 	bl	800fce8 <rcl_client_is_valid>
 801225e:	b370      	cbz	r0, 80122be <rcl_action_wait_set_add_action_client+0x86>
 8012260:	6820      	ldr	r0, [r4, #0]
 8012262:	3008      	adds	r0, #8
 8012264:	f7fd fd40 	bl	800fce8 <rcl_client_is_valid>
 8012268:	b348      	cbz	r0, 80122be <rcl_action_wait_set_add_action_client+0x86>
 801226a:	6820      	ldr	r0, [r4, #0]
 801226c:	300c      	adds	r0, #12
 801226e:	f7fe fc7d 	bl	8010b6c <rcl_subscription_is_valid>
 8012272:	b320      	cbz	r0, 80122be <rcl_action_wait_set_add_action_client+0x86>
 8012274:	6820      	ldr	r0, [r4, #0]
 8012276:	3010      	adds	r0, #16
 8012278:	f7fe fc78 	bl	8010b6c <rcl_subscription_is_valid>
 801227c:	b1f8      	cbz	r0, 80122be <rcl_action_wait_set_add_action_client+0x86>
 801227e:	6821      	ldr	r1, [r4, #0]
 8012280:	4628      	mov	r0, r5
 8012282:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8012286:	f7ff fc71 	bl	8011b6c <rcl_wait_set_add_client>
 801228a:	b9b8      	cbnz	r0, 80122bc <rcl_action_wait_set_add_action_client+0x84>
 801228c:	6821      	ldr	r1, [r4, #0]
 801228e:	4628      	mov	r0, r5
 8012290:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8012294:	3104      	adds	r1, #4
 8012296:	f7ff fc69 	bl	8011b6c <rcl_wait_set_add_client>
 801229a:	b978      	cbnz	r0, 80122bc <rcl_action_wait_set_add_action_client+0x84>
 801229c:	6821      	ldr	r1, [r4, #0]
 801229e:	4628      	mov	r0, r5
 80122a0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80122a4:	3108      	adds	r1, #8
 80122a6:	f7ff fc61 	bl	8011b6c <rcl_wait_set_add_client>
 80122aa:	b938      	cbnz	r0, 80122bc <rcl_action_wait_set_add_action_client+0x84>
 80122ac:	6821      	ldr	r1, [r4, #0]
 80122ae:	4628      	mov	r0, r5
 80122b0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80122b4:	310c      	adds	r1, #12
 80122b6:	f7ff f903 	bl	80114c0 <rcl_wait_set_add_subscription>
 80122ba:	b140      	cbz	r0, 80122ce <rcl_action_wait_set_add_action_client+0x96>
 80122bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122be:	f7f7 fde7 	bl	8009e90 <rcutils_reset_error>
 80122c2:	f241 0006 	movw	r0, #4102	@ 0x1006
 80122c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80122cc:	4770      	bx	lr
 80122ce:	6821      	ldr	r1, [r4, #0]
 80122d0:	4628      	mov	r0, r5
 80122d2:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80122d6:	3110      	adds	r1, #16
 80122d8:	f7ff f8f2 	bl	80114c0 <rcl_wait_set_add_subscription>
 80122dc:	2800      	cmp	r0, #0
 80122de:	d1ed      	bne.n	80122bc <rcl_action_wait_set_add_action_client+0x84>
 80122e0:	b11f      	cbz	r7, 80122ea <rcl_action_wait_set_add_action_client+0xb2>
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80122e8:	603b      	str	r3, [r7, #0]
 80122ea:	2e00      	cmp	r6, #0
 80122ec:	d0e6      	beq.n	80122bc <rcl_action_wait_set_add_action_client+0x84>
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80122f4:	6033      	str	r3, [r6, #0]
 80122f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080122f8 <rcl_action_client_wait_set_get_entities_ready>:
 80122f8:	2800      	cmp	r0, #0
 80122fa:	f000 8089 	beq.w	8012410 <rcl_action_client_wait_set_get_entities_ready+0x118>
 80122fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012302:	460c      	mov	r4, r1
 8012304:	2900      	cmp	r1, #0
 8012306:	d079      	beq.n	80123fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012308:	4605      	mov	r5, r0
 801230a:	6808      	ldr	r0, [r1, #0]
 801230c:	2800      	cmp	r0, #0
 801230e:	d075      	beq.n	80123fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012310:	4616      	mov	r6, r2
 8012312:	461f      	mov	r7, r3
 8012314:	f7fd fce8 	bl	800fce8 <rcl_client_is_valid>
 8012318:	2800      	cmp	r0, #0
 801231a:	d06d      	beq.n	80123f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801231c:	6820      	ldr	r0, [r4, #0]
 801231e:	3004      	adds	r0, #4
 8012320:	f7fd fce2 	bl	800fce8 <rcl_client_is_valid>
 8012324:	2800      	cmp	r0, #0
 8012326:	d067      	beq.n	80123f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012328:	6820      	ldr	r0, [r4, #0]
 801232a:	3008      	adds	r0, #8
 801232c:	f7fd fcdc 	bl	800fce8 <rcl_client_is_valid>
 8012330:	2800      	cmp	r0, #0
 8012332:	d061      	beq.n	80123f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012334:	6820      	ldr	r0, [r4, #0]
 8012336:	300c      	adds	r0, #12
 8012338:	f7fe fc18 	bl	8010b6c <rcl_subscription_is_valid>
 801233c:	2800      	cmp	r0, #0
 801233e:	d05b      	beq.n	80123f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012340:	6820      	ldr	r0, [r4, #0]
 8012342:	3010      	adds	r0, #16
 8012344:	f7fe fc12 	bl	8010b6c <rcl_subscription_is_valid>
 8012348:	2800      	cmp	r0, #0
 801234a:	d055      	beq.n	80123f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801234c:	2e00      	cmp	r6, #0
 801234e:	d05c      	beq.n	801240a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012350:	2f00      	cmp	r7, #0
 8012352:	d05a      	beq.n	801240a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012354:	9b06      	ldr	r3, [sp, #24]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d057      	beq.n	801240a <rcl_action_client_wait_set_get_entities_ready+0x112>
 801235a:	9b07      	ldr	r3, [sp, #28]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d054      	beq.n	801240a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012360:	9b08      	ldr	r3, [sp, #32]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d051      	beq.n	801240a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012366:	6823      	ldr	r3, [r4, #0]
 8012368:	686a      	ldr	r2, [r5, #4]
 801236a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801236e:	428a      	cmp	r2, r1
 8012370:	d948      	bls.n	8012404 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012372:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8012376:	4282      	cmp	r2, r0
 8012378:	d944      	bls.n	8012404 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801237a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801237e:	69ea      	ldr	r2, [r5, #28]
 8012380:	42a2      	cmp	r2, r4
 8012382:	d93f      	bls.n	8012404 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012384:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012388:	4562      	cmp	r2, ip
 801238a:	d93b      	bls.n	8012404 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801238c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8012390:	4572      	cmp	r2, lr
 8012392:	d937      	bls.n	8012404 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012394:	69aa      	ldr	r2, [r5, #24]
 8012396:	682d      	ldr	r5, [r5, #0]
 8012398:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801239c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80123a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80123a4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80123a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80123ac:	f103 0c0c 	add.w	ip, r3, #12
 80123b0:	eba5 050c 	sub.w	r5, r5, ip
 80123b4:	fab5 f585 	clz	r5, r5
 80123b8:	096d      	lsrs	r5, r5, #5
 80123ba:	7035      	strb	r5, [r6, #0]
 80123bc:	f103 0510 	add.w	r5, r3, #16
 80123c0:	1b64      	subs	r4, r4, r5
 80123c2:	fab4 f484 	clz	r4, r4
 80123c6:	0964      	lsrs	r4, r4, #5
 80123c8:	703c      	strb	r4, [r7, #0]
 80123ca:	eba3 0008 	sub.w	r0, r3, r8
 80123ce:	1d1c      	adds	r4, r3, #4
 80123d0:	3308      	adds	r3, #8
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	fab0 f080 	clz	r0, r0
 80123d8:	9a06      	ldr	r2, [sp, #24]
 80123da:	0940      	lsrs	r0, r0, #5
 80123dc:	1b09      	subs	r1, r1, r4
 80123de:	7010      	strb	r0, [r2, #0]
 80123e0:	fab1 f181 	clz	r1, r1
 80123e4:	9a07      	ldr	r2, [sp, #28]
 80123e6:	0949      	lsrs	r1, r1, #5
 80123e8:	7011      	strb	r1, [r2, #0]
 80123ea:	fab3 f383 	clz	r3, r3
 80123ee:	9a08      	ldr	r2, [sp, #32]
 80123f0:	095b      	lsrs	r3, r3, #5
 80123f2:	2000      	movs	r0, #0
 80123f4:	7013      	strb	r3, [r2, #0]
 80123f6:	e003      	b.n	8012400 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80123f8:	f7f7 fd4a 	bl	8009e90 <rcutils_reset_error>
 80123fc:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012404:	2001      	movs	r0, #1
 8012406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801240a:	200b      	movs	r0, #11
 801240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012410:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012414:	4770      	bx	lr
 8012416:	bf00      	nop

08012418 <rcl_action_take_goal_request>:
 8012418:	b3b0      	cbz	r0, 8012488 <rcl_action_take_goal_request+0x70>
 801241a:	b570      	push	{r4, r5, r6, lr}
 801241c:	4604      	mov	r4, r0
 801241e:	6800      	ldr	r0, [r0, #0]
 8012420:	b368      	cbz	r0, 801247e <rcl_action_take_goal_request+0x66>
 8012422:	460d      	mov	r5, r1
 8012424:	4616      	mov	r6, r2
 8012426:	f7fe f9ef 	bl	8010808 <rcl_service_is_valid>
 801242a:	b330      	cbz	r0, 801247a <rcl_action_take_goal_request+0x62>
 801242c:	6820      	ldr	r0, [r4, #0]
 801242e:	3004      	adds	r0, #4
 8012430:	f7fe f9ea 	bl	8010808 <rcl_service_is_valid>
 8012434:	b308      	cbz	r0, 801247a <rcl_action_take_goal_request+0x62>
 8012436:	6820      	ldr	r0, [r4, #0]
 8012438:	3008      	adds	r0, #8
 801243a:	f7fe f9e5 	bl	8010808 <rcl_service_is_valid>
 801243e:	b1e0      	cbz	r0, 801247a <rcl_action_take_goal_request+0x62>
 8012440:	6820      	ldr	r0, [r4, #0]
 8012442:	300c      	adds	r0, #12
 8012444:	f7f6 fd94 	bl	8008f70 <rcl_publisher_is_valid>
 8012448:	b1b8      	cbz	r0, 801247a <rcl_action_take_goal_request+0x62>
 801244a:	6820      	ldr	r0, [r4, #0]
 801244c:	3010      	adds	r0, #16
 801244e:	f7f6 fd8f 	bl	8008f70 <rcl_publisher_is_valid>
 8012452:	b190      	cbz	r0, 801247a <rcl_action_take_goal_request+0x62>
 8012454:	b1b5      	cbz	r5, 8012484 <rcl_action_take_goal_request+0x6c>
 8012456:	b1ae      	cbz	r6, 8012484 <rcl_action_take_goal_request+0x6c>
 8012458:	6820      	ldr	r0, [r4, #0]
 801245a:	4632      	mov	r2, r6
 801245c:	4629      	mov	r1, r5
 801245e:	f7fe f953 	bl	8010708 <rcl_take_request>
 8012462:	b148      	cbz	r0, 8012478 <rcl_action_take_goal_request+0x60>
 8012464:	280a      	cmp	r0, #10
 8012466:	d007      	beq.n	8012478 <rcl_action_take_goal_request+0x60>
 8012468:	f240 2259 	movw	r2, #601	@ 0x259
 801246c:	f241 0369 	movw	r3, #4201	@ 0x1069
 8012470:	4290      	cmp	r0, r2
 8012472:	bf0c      	ite	eq
 8012474:	4618      	moveq	r0, r3
 8012476:	2001      	movne	r0, #1
 8012478:	bd70      	pop	{r4, r5, r6, pc}
 801247a:	f7f7 fd09 	bl	8009e90 <rcutils_reset_error>
 801247e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012482:	bd70      	pop	{r4, r5, r6, pc}
 8012484:	200b      	movs	r0, #11
 8012486:	bd70      	pop	{r4, r5, r6, pc}
 8012488:	f241 0068 	movw	r0, #4200	@ 0x1068
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop

08012490 <rcl_action_send_goal_response>:
 8012490:	b378      	cbz	r0, 80124f2 <rcl_action_send_goal_response+0x62>
 8012492:	b570      	push	{r4, r5, r6, lr}
 8012494:	4604      	mov	r4, r0
 8012496:	6800      	ldr	r0, [r0, #0]
 8012498:	b330      	cbz	r0, 80124e8 <rcl_action_send_goal_response+0x58>
 801249a:	460d      	mov	r5, r1
 801249c:	4616      	mov	r6, r2
 801249e:	f7fe f9b3 	bl	8010808 <rcl_service_is_valid>
 80124a2:	b1f8      	cbz	r0, 80124e4 <rcl_action_send_goal_response+0x54>
 80124a4:	6820      	ldr	r0, [r4, #0]
 80124a6:	3004      	adds	r0, #4
 80124a8:	f7fe f9ae 	bl	8010808 <rcl_service_is_valid>
 80124ac:	b1d0      	cbz	r0, 80124e4 <rcl_action_send_goal_response+0x54>
 80124ae:	6820      	ldr	r0, [r4, #0]
 80124b0:	3008      	adds	r0, #8
 80124b2:	f7fe f9a9 	bl	8010808 <rcl_service_is_valid>
 80124b6:	b1a8      	cbz	r0, 80124e4 <rcl_action_send_goal_response+0x54>
 80124b8:	6820      	ldr	r0, [r4, #0]
 80124ba:	300c      	adds	r0, #12
 80124bc:	f7f6 fd58 	bl	8008f70 <rcl_publisher_is_valid>
 80124c0:	b180      	cbz	r0, 80124e4 <rcl_action_send_goal_response+0x54>
 80124c2:	6820      	ldr	r0, [r4, #0]
 80124c4:	3010      	adds	r0, #16
 80124c6:	f7f6 fd53 	bl	8008f70 <rcl_publisher_is_valid>
 80124ca:	b158      	cbz	r0, 80124e4 <rcl_action_send_goal_response+0x54>
 80124cc:	b17d      	cbz	r5, 80124ee <rcl_action_send_goal_response+0x5e>
 80124ce:	b176      	cbz	r6, 80124ee <rcl_action_send_goal_response+0x5e>
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	4632      	mov	r2, r6
 80124d4:	4629      	mov	r1, r5
 80124d6:	f7fe f967 	bl	80107a8 <rcl_send_response>
 80124da:	b110      	cbz	r0, 80124e2 <rcl_action_send_goal_response+0x52>
 80124dc:	2802      	cmp	r0, #2
 80124de:	bf18      	it	ne
 80124e0:	2001      	movne	r0, #1
 80124e2:	bd70      	pop	{r4, r5, r6, pc}
 80124e4:	f7f7 fcd4 	bl	8009e90 <rcutils_reset_error>
 80124e8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80124ec:	bd70      	pop	{r4, r5, r6, pc}
 80124ee:	200b      	movs	r0, #11
 80124f0:	bd70      	pop	{r4, r5, r6, pc}
 80124f2:	f241 0068 	movw	r0, #4200	@ 0x1068
 80124f6:	4770      	bx	lr

080124f8 <rcl_action_take_result_request>:
 80124f8:	2800      	cmp	r0, #0
 80124fa:	d037      	beq.n	801256c <rcl_action_take_result_request+0x74>
 80124fc:	b570      	push	{r4, r5, r6, lr}
 80124fe:	4604      	mov	r4, r0
 8012500:	6800      	ldr	r0, [r0, #0]
 8012502:	b370      	cbz	r0, 8012562 <rcl_action_take_result_request+0x6a>
 8012504:	460d      	mov	r5, r1
 8012506:	4616      	mov	r6, r2
 8012508:	f7fe f97e 	bl	8010808 <rcl_service_is_valid>
 801250c:	b338      	cbz	r0, 801255e <rcl_action_take_result_request+0x66>
 801250e:	6820      	ldr	r0, [r4, #0]
 8012510:	3004      	adds	r0, #4
 8012512:	f7fe f979 	bl	8010808 <rcl_service_is_valid>
 8012516:	b310      	cbz	r0, 801255e <rcl_action_take_result_request+0x66>
 8012518:	6820      	ldr	r0, [r4, #0]
 801251a:	3008      	adds	r0, #8
 801251c:	f7fe f974 	bl	8010808 <rcl_service_is_valid>
 8012520:	b1e8      	cbz	r0, 801255e <rcl_action_take_result_request+0x66>
 8012522:	6820      	ldr	r0, [r4, #0]
 8012524:	300c      	adds	r0, #12
 8012526:	f7f6 fd23 	bl	8008f70 <rcl_publisher_is_valid>
 801252a:	b1c0      	cbz	r0, 801255e <rcl_action_take_result_request+0x66>
 801252c:	6820      	ldr	r0, [r4, #0]
 801252e:	3010      	adds	r0, #16
 8012530:	f7f6 fd1e 	bl	8008f70 <rcl_publisher_is_valid>
 8012534:	b198      	cbz	r0, 801255e <rcl_action_take_result_request+0x66>
 8012536:	b1bd      	cbz	r5, 8012568 <rcl_action_take_result_request+0x70>
 8012538:	b1b6      	cbz	r6, 8012568 <rcl_action_take_result_request+0x70>
 801253a:	6820      	ldr	r0, [r4, #0]
 801253c:	4632      	mov	r2, r6
 801253e:	4629      	mov	r1, r5
 8012540:	3008      	adds	r0, #8
 8012542:	f7fe f8e1 	bl	8010708 <rcl_take_request>
 8012546:	b148      	cbz	r0, 801255c <rcl_action_take_result_request+0x64>
 8012548:	280a      	cmp	r0, #10
 801254a:	d007      	beq.n	801255c <rcl_action_take_result_request+0x64>
 801254c:	f240 2259 	movw	r2, #601	@ 0x259
 8012550:	f241 0369 	movw	r3, #4201	@ 0x1069
 8012554:	4290      	cmp	r0, r2
 8012556:	bf0c      	ite	eq
 8012558:	4618      	moveq	r0, r3
 801255a:	2001      	movne	r0, #1
 801255c:	bd70      	pop	{r4, r5, r6, pc}
 801255e:	f7f7 fc97 	bl	8009e90 <rcutils_reset_error>
 8012562:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012566:	bd70      	pop	{r4, r5, r6, pc}
 8012568:	200b      	movs	r0, #11
 801256a:	bd70      	pop	{r4, r5, r6, pc}
 801256c:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop

08012574 <rcl_action_take_cancel_request>:
 8012574:	2800      	cmp	r0, #0
 8012576:	d037      	beq.n	80125e8 <rcl_action_take_cancel_request+0x74>
 8012578:	b570      	push	{r4, r5, r6, lr}
 801257a:	4604      	mov	r4, r0
 801257c:	6800      	ldr	r0, [r0, #0]
 801257e:	b370      	cbz	r0, 80125de <rcl_action_take_cancel_request+0x6a>
 8012580:	460d      	mov	r5, r1
 8012582:	4616      	mov	r6, r2
 8012584:	f7fe f940 	bl	8010808 <rcl_service_is_valid>
 8012588:	b338      	cbz	r0, 80125da <rcl_action_take_cancel_request+0x66>
 801258a:	6820      	ldr	r0, [r4, #0]
 801258c:	3004      	adds	r0, #4
 801258e:	f7fe f93b 	bl	8010808 <rcl_service_is_valid>
 8012592:	b310      	cbz	r0, 80125da <rcl_action_take_cancel_request+0x66>
 8012594:	6820      	ldr	r0, [r4, #0]
 8012596:	3008      	adds	r0, #8
 8012598:	f7fe f936 	bl	8010808 <rcl_service_is_valid>
 801259c:	b1e8      	cbz	r0, 80125da <rcl_action_take_cancel_request+0x66>
 801259e:	6820      	ldr	r0, [r4, #0]
 80125a0:	300c      	adds	r0, #12
 80125a2:	f7f6 fce5 	bl	8008f70 <rcl_publisher_is_valid>
 80125a6:	b1c0      	cbz	r0, 80125da <rcl_action_take_cancel_request+0x66>
 80125a8:	6820      	ldr	r0, [r4, #0]
 80125aa:	3010      	adds	r0, #16
 80125ac:	f7f6 fce0 	bl	8008f70 <rcl_publisher_is_valid>
 80125b0:	b198      	cbz	r0, 80125da <rcl_action_take_cancel_request+0x66>
 80125b2:	b1bd      	cbz	r5, 80125e4 <rcl_action_take_cancel_request+0x70>
 80125b4:	b1b6      	cbz	r6, 80125e4 <rcl_action_take_cancel_request+0x70>
 80125b6:	6820      	ldr	r0, [r4, #0]
 80125b8:	4632      	mov	r2, r6
 80125ba:	4629      	mov	r1, r5
 80125bc:	3004      	adds	r0, #4
 80125be:	f7fe f8a3 	bl	8010708 <rcl_take_request>
 80125c2:	b148      	cbz	r0, 80125d8 <rcl_action_take_cancel_request+0x64>
 80125c4:	280a      	cmp	r0, #10
 80125c6:	d007      	beq.n	80125d8 <rcl_action_take_cancel_request+0x64>
 80125c8:	f240 2259 	movw	r2, #601	@ 0x259
 80125cc:	f241 0369 	movw	r3, #4201	@ 0x1069
 80125d0:	4290      	cmp	r0, r2
 80125d2:	bf0c      	ite	eq
 80125d4:	4618      	moveq	r0, r3
 80125d6:	2001      	movne	r0, #1
 80125d8:	bd70      	pop	{r4, r5, r6, pc}
 80125da:	f7f7 fc59 	bl	8009e90 <rcutils_reset_error>
 80125de:	f241 0068 	movw	r0, #4200	@ 0x1068
 80125e2:	bd70      	pop	{r4, r5, r6, pc}
 80125e4:	200b      	movs	r0, #11
 80125e6:	bd70      	pop	{r4, r5, r6, pc}
 80125e8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop

080125f0 <rcl_action_send_cancel_response>:
 80125f0:	b380      	cbz	r0, 8012654 <rcl_action_send_cancel_response+0x64>
 80125f2:	b570      	push	{r4, r5, r6, lr}
 80125f4:	4604      	mov	r4, r0
 80125f6:	6800      	ldr	r0, [r0, #0]
 80125f8:	b338      	cbz	r0, 801264a <rcl_action_send_cancel_response+0x5a>
 80125fa:	460d      	mov	r5, r1
 80125fc:	4616      	mov	r6, r2
 80125fe:	f7fe f903 	bl	8010808 <rcl_service_is_valid>
 8012602:	b300      	cbz	r0, 8012646 <rcl_action_send_cancel_response+0x56>
 8012604:	6820      	ldr	r0, [r4, #0]
 8012606:	3004      	adds	r0, #4
 8012608:	f7fe f8fe 	bl	8010808 <rcl_service_is_valid>
 801260c:	b1d8      	cbz	r0, 8012646 <rcl_action_send_cancel_response+0x56>
 801260e:	6820      	ldr	r0, [r4, #0]
 8012610:	3008      	adds	r0, #8
 8012612:	f7fe f8f9 	bl	8010808 <rcl_service_is_valid>
 8012616:	b1b0      	cbz	r0, 8012646 <rcl_action_send_cancel_response+0x56>
 8012618:	6820      	ldr	r0, [r4, #0]
 801261a:	300c      	adds	r0, #12
 801261c:	f7f6 fca8 	bl	8008f70 <rcl_publisher_is_valid>
 8012620:	b188      	cbz	r0, 8012646 <rcl_action_send_cancel_response+0x56>
 8012622:	6820      	ldr	r0, [r4, #0]
 8012624:	3010      	adds	r0, #16
 8012626:	f7f6 fca3 	bl	8008f70 <rcl_publisher_is_valid>
 801262a:	b160      	cbz	r0, 8012646 <rcl_action_send_cancel_response+0x56>
 801262c:	b185      	cbz	r5, 8012650 <rcl_action_send_cancel_response+0x60>
 801262e:	b17e      	cbz	r6, 8012650 <rcl_action_send_cancel_response+0x60>
 8012630:	6820      	ldr	r0, [r4, #0]
 8012632:	4632      	mov	r2, r6
 8012634:	4629      	mov	r1, r5
 8012636:	3004      	adds	r0, #4
 8012638:	f7fe f8b6 	bl	80107a8 <rcl_send_response>
 801263c:	b110      	cbz	r0, 8012644 <rcl_action_send_cancel_response+0x54>
 801263e:	2802      	cmp	r0, #2
 8012640:	bf18      	it	ne
 8012642:	2001      	movne	r0, #1
 8012644:	bd70      	pop	{r4, r5, r6, pc}
 8012646:	f7f7 fc23 	bl	8009e90 <rcutils_reset_error>
 801264a:	f241 0068 	movw	r0, #4200	@ 0x1068
 801264e:	bd70      	pop	{r4, r5, r6, pc}
 8012650:	200b      	movs	r0, #11
 8012652:	bd70      	pop	{r4, r5, r6, pc}
 8012654:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop

0801265c <rcl_action_wait_set_add_action_server>:
 801265c:	2800      	cmp	r0, #0
 801265e:	d04a      	beq.n	80126f6 <rcl_action_wait_set_add_action_server+0x9a>
 8012660:	b570      	push	{r4, r5, r6, lr}
 8012662:	460c      	mov	r4, r1
 8012664:	2900      	cmp	r1, #0
 8012666:	d043      	beq.n	80126f0 <rcl_action_wait_set_add_action_server+0x94>
 8012668:	4605      	mov	r5, r0
 801266a:	6808      	ldr	r0, [r1, #0]
 801266c:	2800      	cmp	r0, #0
 801266e:	d03f      	beq.n	80126f0 <rcl_action_wait_set_add_action_server+0x94>
 8012670:	4616      	mov	r6, r2
 8012672:	f7fe f8c9 	bl	8010808 <rcl_service_is_valid>
 8012676:	2800      	cmp	r0, #0
 8012678:	d038      	beq.n	80126ec <rcl_action_wait_set_add_action_server+0x90>
 801267a:	6820      	ldr	r0, [r4, #0]
 801267c:	3004      	adds	r0, #4
 801267e:	f7fe f8c3 	bl	8010808 <rcl_service_is_valid>
 8012682:	b398      	cbz	r0, 80126ec <rcl_action_wait_set_add_action_server+0x90>
 8012684:	6820      	ldr	r0, [r4, #0]
 8012686:	3008      	adds	r0, #8
 8012688:	f7fe f8be 	bl	8010808 <rcl_service_is_valid>
 801268c:	b370      	cbz	r0, 80126ec <rcl_action_wait_set_add_action_server+0x90>
 801268e:	6820      	ldr	r0, [r4, #0]
 8012690:	300c      	adds	r0, #12
 8012692:	f7f6 fc87 	bl	8008fa4 <rcl_publisher_is_valid_except_context>
 8012696:	b348      	cbz	r0, 80126ec <rcl_action_wait_set_add_action_server+0x90>
 8012698:	6820      	ldr	r0, [r4, #0]
 801269a:	3010      	adds	r0, #16
 801269c:	f7f6 fc82 	bl	8008fa4 <rcl_publisher_is_valid_except_context>
 80126a0:	b320      	cbz	r0, 80126ec <rcl_action_wait_set_add_action_server+0x90>
 80126a2:	6821      	ldr	r1, [r4, #0]
 80126a4:	4628      	mov	r0, r5
 80126a6:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80126aa:	f7ff fa8b 	bl	8011bc4 <rcl_wait_set_add_service>
 80126ae:	b9e0      	cbnz	r0, 80126ea <rcl_action_wait_set_add_action_server+0x8e>
 80126b0:	6821      	ldr	r1, [r4, #0]
 80126b2:	4628      	mov	r0, r5
 80126b4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80126b8:	3104      	adds	r1, #4
 80126ba:	f7ff fa83 	bl	8011bc4 <rcl_wait_set_add_service>
 80126be:	b9a0      	cbnz	r0, 80126ea <rcl_action_wait_set_add_action_server+0x8e>
 80126c0:	6821      	ldr	r1, [r4, #0]
 80126c2:	4628      	mov	r0, r5
 80126c4:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80126c8:	3108      	adds	r1, #8
 80126ca:	f7ff fa7b 	bl	8011bc4 <rcl_wait_set_add_service>
 80126ce:	b960      	cbnz	r0, 80126ea <rcl_action_wait_set_add_action_server+0x8e>
 80126d0:	6821      	ldr	r1, [r4, #0]
 80126d2:	4628      	mov	r0, r5
 80126d4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80126d8:	3114      	adds	r1, #20
 80126da:	f7ff fa17 	bl	8011b0c <rcl_wait_set_add_timer>
 80126de:	b920      	cbnz	r0, 80126ea <rcl_action_wait_set_add_action_server+0x8e>
 80126e0:	b11e      	cbz	r6, 80126ea <rcl_action_wait_set_add_action_server+0x8e>
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80126e8:	6033      	str	r3, [r6, #0]
 80126ea:	bd70      	pop	{r4, r5, r6, pc}
 80126ec:	f7f7 fbd0 	bl	8009e90 <rcutils_reset_error>
 80126f0:	f241 0068 	movw	r0, #4200	@ 0x1068
 80126f4:	bd70      	pop	{r4, r5, r6, pc}
 80126f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80126fa:	4770      	bx	lr

080126fc <rcl_action_server_wait_set_get_entities_ready>:
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d060      	beq.n	80127c2 <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8012700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012702:	460c      	mov	r4, r1
 8012704:	2900      	cmp	r1, #0
 8012706:	d057      	beq.n	80127b8 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8012708:	4605      	mov	r5, r0
 801270a:	6808      	ldr	r0, [r1, #0]
 801270c:	2800      	cmp	r0, #0
 801270e:	d053      	beq.n	80127b8 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8012710:	4616      	mov	r6, r2
 8012712:	461f      	mov	r7, r3
 8012714:	f7fe f878 	bl	8010808 <rcl_service_is_valid>
 8012718:	2800      	cmp	r0, #0
 801271a:	d04b      	beq.n	80127b4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801271c:	6820      	ldr	r0, [r4, #0]
 801271e:	3004      	adds	r0, #4
 8012720:	f7fe f872 	bl	8010808 <rcl_service_is_valid>
 8012724:	2800      	cmp	r0, #0
 8012726:	d045      	beq.n	80127b4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012728:	6820      	ldr	r0, [r4, #0]
 801272a:	3008      	adds	r0, #8
 801272c:	f7fe f86c 	bl	8010808 <rcl_service_is_valid>
 8012730:	2800      	cmp	r0, #0
 8012732:	d03f      	beq.n	80127b4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012734:	6820      	ldr	r0, [r4, #0]
 8012736:	300c      	adds	r0, #12
 8012738:	f7f6 fc34 	bl	8008fa4 <rcl_publisher_is_valid_except_context>
 801273c:	2800      	cmp	r0, #0
 801273e:	d039      	beq.n	80127b4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012740:	6820      	ldr	r0, [r4, #0]
 8012742:	3010      	adds	r0, #16
 8012744:	f7f6 fc2e 	bl	8008fa4 <rcl_publisher_is_valid_except_context>
 8012748:	b3a0      	cbz	r0, 80127b4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801274a:	b3c6      	cbz	r6, 80127be <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801274c:	b3bf      	cbz	r7, 80127be <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801274e:	9b06      	ldr	r3, [sp, #24]
 8012750:	b3ab      	cbz	r3, 80127be <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8012752:	9b07      	ldr	r3, [sp, #28]
 8012754:	b39b      	cbz	r3, 80127be <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8012756:	6823      	ldr	r3, [r4, #0]
 8012758:	692a      	ldr	r2, [r5, #16]
 801275a:	6a2c      	ldr	r4, [r5, #32]
 801275c:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8012760:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 8012764:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8012768:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801276c:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8012770:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 8012774:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8012778:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801277c:	1ae4      	subs	r4, r4, r3
 801277e:	fab4 f484 	clz	r4, r4
 8012782:	0964      	lsrs	r4, r4, #5
 8012784:	7034      	strb	r4, [r6, #0]
 8012786:	1d1c      	adds	r4, r3, #4
 8012788:	1b00      	subs	r0, r0, r4
 801278a:	fab0 f080 	clz	r0, r0
 801278e:	0940      	lsrs	r0, r0, #5
 8012790:	7038      	strb	r0, [r7, #0]
 8012792:	f103 0008 	add.w	r0, r3, #8
 8012796:	1a09      	subs	r1, r1, r0
 8012798:	3314      	adds	r3, #20
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	fab1 f181 	clz	r1, r1
 80127a0:	9a06      	ldr	r2, [sp, #24]
 80127a2:	0949      	lsrs	r1, r1, #5
 80127a4:	7011      	strb	r1, [r2, #0]
 80127a6:	fab3 f383 	clz	r3, r3
 80127aa:	9a07      	ldr	r2, [sp, #28]
 80127ac:	095b      	lsrs	r3, r3, #5
 80127ae:	2000      	movs	r0, #0
 80127b0:	7013      	strb	r3, [r2, #0]
 80127b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127b4:	f7f7 fb6c 	bl	8009e90 <rcutils_reset_error>
 80127b8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80127bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127be:	200b      	movs	r0, #11
 80127c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80127c6:	4770      	bx	lr

080127c8 <_execute_event_handler>:
 80127c8:	2002      	movs	r0, #2
 80127ca:	4770      	bx	lr

080127cc <_cancel_goal_event_handler>:
 80127cc:	2003      	movs	r0, #3
 80127ce:	4770      	bx	lr

080127d0 <_succeed_event_handler>:
 80127d0:	2004      	movs	r0, #4
 80127d2:	4770      	bx	lr

080127d4 <_abort_event_handler>:
 80127d4:	2006      	movs	r0, #6
 80127d6:	4770      	bx	lr

080127d8 <_canceled_event_handler>:
 80127d8:	2005      	movs	r0, #5
 80127da:	4770      	bx	lr

080127dc <rcl_action_transition_goal_state>:
 80127dc:	fa5f fc80 	uxtb.w	ip, r0
 80127e0:	f1bc 0f06 	cmp.w	ip, #6
 80127e4:	d80c      	bhi.n	8012800 <rcl_action_transition_goal_state+0x24>
 80127e6:	2904      	cmp	r1, #4
 80127e8:	d80a      	bhi.n	8012800 <rcl_action_transition_goal_state+0x24>
 80127ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80127ee:	b410      	push	{r4}
 80127f0:	440b      	add	r3, r1
 80127f2:	4c06      	ldr	r4, [pc, #24]	@ (801280c <rcl_action_transition_goal_state+0x30>)
 80127f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80127f8:	b123      	cbz	r3, 8012804 <rcl_action_transition_goal_state+0x28>
 80127fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127fe:	4718      	bx	r3
 8012800:	2000      	movs	r0, #0
 8012802:	4770      	bx	lr
 8012804:	2000      	movs	r0, #0
 8012806:	f85d 4b04 	ldr.w	r4, [sp], #4
 801280a:	4770      	bx	lr
 801280c:	080190b8 	.word	0x080190b8

08012810 <rcl_action_get_zero_initialized_cancel_response>:
 8012810:	b510      	push	{r4, lr}
 8012812:	4c07      	ldr	r4, [pc, #28]	@ (8012830 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012814:	4686      	mov	lr, r0
 8012816:	4684      	mov	ip, r0
 8012818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801281a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801281e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012820:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012824:	6823      	ldr	r3, [r4, #0]
 8012826:	f8cc 3000 	str.w	r3, [ip]
 801282a:	4670      	mov	r0, lr
 801282c:	bd10      	pop	{r4, pc}
 801282e:	bf00      	nop
 8012830:	08019144 	.word	0x08019144

08012834 <rclc_action_send_result_request>:
 8012834:	b1d0      	cbz	r0, 801286c <rclc_action_send_result_request+0x38>
 8012836:	b500      	push	{lr}
 8012838:	4684      	mov	ip, r0
 801283a:	b087      	sub	sp, #28
 801283c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012840:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012844:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012848:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801284c:	f10d 0e08 	add.w	lr, sp, #8
 8012850:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012854:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012858:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801285c:	a902      	add	r1, sp, #8
 801285e:	3010      	adds	r0, #16
 8012860:	f7ff fbfa 	bl	8012058 <rcl_action_send_result_request>
 8012864:	b920      	cbnz	r0, 8012870 <rclc_action_send_result_request+0x3c>
 8012866:	b007      	add	sp, #28
 8012868:	f85d fb04 	ldr.w	pc, [sp], #4
 801286c:	200b      	movs	r0, #11
 801286e:	4770      	bx	lr
 8012870:	9001      	str	r0, [sp, #4]
 8012872:	f7f7 fb0d 	bl	8009e90 <rcutils_reset_error>
 8012876:	9801      	ldr	r0, [sp, #4]
 8012878:	b007      	add	sp, #28
 801287a:	f85d fb04 	ldr.w	pc, [sp], #4
 801287e:	bf00      	nop

08012880 <rclc_action_take_goal_handle>:
 8012880:	4603      	mov	r3, r0
 8012882:	b158      	cbz	r0, 801289c <rclc_action_take_goal_handle+0x1c>
 8012884:	6880      	ldr	r0, [r0, #8]
 8012886:	b148      	cbz	r0, 801289c <rclc_action_take_goal_handle+0x1c>
 8012888:	6801      	ldr	r1, [r0, #0]
 801288a:	6099      	str	r1, [r3, #8]
 801288c:	2200      	movs	r2, #0
 801288e:	7202      	strb	r2, [r0, #8]
 8012890:	68d9      	ldr	r1, [r3, #12]
 8012892:	6001      	str	r1, [r0, #0]
 8012894:	6202      	str	r2, [r0, #32]
 8012896:	8482      	strh	r2, [r0, #36]	@ 0x24
 8012898:	60d8      	str	r0, [r3, #12]
 801289a:	4770      	bx	lr
 801289c:	4770      	bx	lr
 801289e:	bf00      	nop

080128a0 <rclc_action_remove_used_goal_handle>:
 80128a0:	b180      	cbz	r0, 80128c4 <rclc_action_remove_used_goal_handle+0x24>
 80128a2:	b179      	cbz	r1, 80128c4 <rclc_action_remove_used_goal_handle+0x24>
 80128a4:	68c3      	ldr	r3, [r0, #12]
 80128a6:	4299      	cmp	r1, r3
 80128a8:	d00d      	beq.n	80128c6 <rclc_action_remove_used_goal_handle+0x26>
 80128aa:	b12b      	cbz	r3, 80128b8 <rclc_action_remove_used_goal_handle+0x18>
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	4291      	cmp	r1, r2
 80128b0:	d003      	beq.n	80128ba <rclc_action_remove_used_goal_handle+0x1a>
 80128b2:	4613      	mov	r3, r2
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d1f9      	bne.n	80128ac <rclc_action_remove_used_goal_handle+0xc>
 80128b8:	4770      	bx	lr
 80128ba:	680a      	ldr	r2, [r1, #0]
 80128bc:	601a      	str	r2, [r3, #0]
 80128be:	6883      	ldr	r3, [r0, #8]
 80128c0:	600b      	str	r3, [r1, #0]
 80128c2:	6081      	str	r1, [r0, #8]
 80128c4:	4770      	bx	lr
 80128c6:	680b      	ldr	r3, [r1, #0]
 80128c8:	60c3      	str	r3, [r0, #12]
 80128ca:	e7f8      	b.n	80128be <rclc_action_remove_used_goal_handle+0x1e>

080128cc <rclc_action_find_goal_handle_by_uuid>:
 80128cc:	b538      	push	{r3, r4, r5, lr}
 80128ce:	b180      	cbz	r0, 80128f2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80128d0:	460d      	mov	r5, r1
 80128d2:	b181      	cbz	r1, 80128f6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80128d4:	68c4      	ldr	r4, [r0, #12]
 80128d6:	b914      	cbnz	r4, 80128de <rclc_action_find_goal_handle_by_uuid+0x12>
 80128d8:	e009      	b.n	80128ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80128da:	6824      	ldr	r4, [r4, #0]
 80128dc:	b13c      	cbz	r4, 80128ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80128de:	2210      	movs	r2, #16
 80128e0:	4629      	mov	r1, r5
 80128e2:	f104 0009 	add.w	r0, r4, #9
 80128e6:	f004 fe17 	bl	8017518 <memcmp>
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d1f5      	bne.n	80128da <rclc_action_find_goal_handle_by_uuid+0xe>
 80128ee:	4620      	mov	r0, r4
 80128f0:	bd38      	pop	{r3, r4, r5, pc}
 80128f2:	4604      	mov	r4, r0
 80128f4:	e7fb      	b.n	80128ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80128f6:	460c      	mov	r4, r1
 80128f8:	e7f9      	b.n	80128ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80128fa:	bf00      	nop

080128fc <rclc_action_find_first_handle_by_status>:
 80128fc:	b140      	cbz	r0, 8012910 <rclc_action_find_first_handle_by_status+0x14>
 80128fe:	68c0      	ldr	r0, [r0, #12]
 8012900:	b910      	cbnz	r0, 8012908 <rclc_action_find_first_handle_by_status+0xc>
 8012902:	e005      	b.n	8012910 <rclc_action_find_first_handle_by_status+0x14>
 8012904:	6800      	ldr	r0, [r0, #0]
 8012906:	b118      	cbz	r0, 8012910 <rclc_action_find_first_handle_by_status+0x14>
 8012908:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801290c:	428b      	cmp	r3, r1
 801290e:	d1f9      	bne.n	8012904 <rclc_action_find_first_handle_by_status+0x8>
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop

08012914 <rclc_action_find_first_terminated_handle>:
 8012914:	b140      	cbz	r0, 8012928 <rclc_action_find_first_terminated_handle+0x14>
 8012916:	68c0      	ldr	r0, [r0, #12]
 8012918:	b910      	cbnz	r0, 8012920 <rclc_action_find_first_terminated_handle+0xc>
 801291a:	e005      	b.n	8012928 <rclc_action_find_first_terminated_handle+0x14>
 801291c:	6800      	ldr	r0, [r0, #0]
 801291e:	b118      	cbz	r0, 8012928 <rclc_action_find_first_terminated_handle+0x14>
 8012920:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012924:	2b03      	cmp	r3, #3
 8012926:	ddf9      	ble.n	801291c <rclc_action_find_first_terminated_handle+0x8>
 8012928:	4770      	bx	lr
 801292a:	bf00      	nop

0801292c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801292c:	b170      	cbz	r0, 801294c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801292e:	68c0      	ldr	r0, [r0, #12]
 8012930:	b160      	cbz	r0, 801294c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012932:	b410      	push	{r4}
 8012934:	e001      	b.n	801293a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012936:	6800      	ldr	r0, [r0, #0]
 8012938:	b128      	cbz	r0, 8012946 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801293a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801293e:	4299      	cmp	r1, r3
 8012940:	bf08      	it	eq
 8012942:	4294      	cmpeq	r4, r2
 8012944:	d1f7      	bne.n	8012936 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801294a:	4770      	bx	lr
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop

08012950 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012950:	b170      	cbz	r0, 8012970 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012952:	68c0      	ldr	r0, [r0, #12]
 8012954:	b160      	cbz	r0, 8012970 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012956:	b410      	push	{r4}
 8012958:	e001      	b.n	801295e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801295a:	6800      	ldr	r0, [r0, #0]
 801295c:	b128      	cbz	r0, 801296a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801295e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012962:	4299      	cmp	r1, r3
 8012964:	bf08      	it	eq
 8012966:	4294      	cmpeq	r4, r2
 8012968:	d1f7      	bne.n	801295a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801296a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801296e:	4770      	bx	lr
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop

08012974 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012974:	b170      	cbz	r0, 8012994 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012976:	68c0      	ldr	r0, [r0, #12]
 8012978:	b160      	cbz	r0, 8012994 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801297a:	b410      	push	{r4}
 801297c:	e001      	b.n	8012982 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801297e:	6800      	ldr	r0, [r0, #0]
 8012980:	b128      	cbz	r0, 801298e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012982:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012986:	4299      	cmp	r1, r3
 8012988:	bf08      	it	eq
 801298a:	4294      	cmpeq	r4, r2
 801298c:	d1f7      	bne.n	801297e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801298e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012992:	4770      	bx	lr
 8012994:	4770      	bx	lr
 8012996:	bf00      	nop

08012998 <rclc_action_find_first_handle_with_goal_response>:
 8012998:	b140      	cbz	r0, 80129ac <rclc_action_find_first_handle_with_goal_response+0x14>
 801299a:	68c0      	ldr	r0, [r0, #12]
 801299c:	b910      	cbnz	r0, 80129a4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801299e:	e005      	b.n	80129ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80129a0:	6800      	ldr	r0, [r0, #0]
 80129a2:	b118      	cbz	r0, 80129ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80129a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d0f9      	beq.n	80129a0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop

080129b0 <rclc_action_find_first_handle_with_result_response>:
 80129b0:	b140      	cbz	r0, 80129c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80129b2:	68c0      	ldr	r0, [r0, #12]
 80129b4:	b910      	cbnz	r0, 80129bc <rclc_action_find_first_handle_with_result_response+0xc>
 80129b6:	e005      	b.n	80129c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80129b8:	6800      	ldr	r0, [r0, #0]
 80129ba:	b118      	cbz	r0, 80129c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80129bc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d0f9      	beq.n	80129b8 <rclc_action_find_first_handle_with_result_response+0x8>
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop

080129c8 <rclc_action_server_response_goal_request>:
 80129c8:	b198      	cbz	r0, 80129f2 <rclc_action_server_response_goal_request+0x2a>
 80129ca:	b510      	push	{r4, lr}
 80129cc:	6844      	ldr	r4, [r0, #4]
 80129ce:	b086      	sub	sp, #24
 80129d0:	2200      	movs	r2, #0
 80129d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80129d6:	460b      	mov	r3, r1
 80129d8:	9205      	str	r2, [sp, #20]
 80129da:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80129de:	aa03      	add	r2, sp, #12
 80129e0:	f104 0010 	add.w	r0, r4, #16
 80129e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80129e8:	f7ff fd52 	bl	8012490 <rcl_action_send_goal_response>
 80129ec:	b918      	cbnz	r0, 80129f6 <rclc_action_server_response_goal_request+0x2e>
 80129ee:	b006      	add	sp, #24
 80129f0:	bd10      	pop	{r4, pc}
 80129f2:	200b      	movs	r0, #11
 80129f4:	4770      	bx	lr
 80129f6:	9001      	str	r0, [sp, #4]
 80129f8:	f7f7 fa4a 	bl	8009e90 <rcutils_reset_error>
 80129fc:	9801      	ldr	r0, [sp, #4]
 80129fe:	b006      	add	sp, #24
 8012a00:	bd10      	pop	{r4, pc}
 8012a02:	bf00      	nop
 8012a04:	0000      	movs	r0, r0
	...

08012a08 <rclc_action_server_goal_cancel_accept>:
 8012a08:	b310      	cbz	r0, 8012a50 <rclc_action_server_goal_cancel_accept+0x48>
 8012a0a:	b510      	push	{r4, lr}
 8012a0c:	b090      	sub	sp, #64	@ 0x40
 8012a0e:	4604      	mov	r4, r0
 8012a10:	a806      	add	r0, sp, #24
 8012a12:	f7ff fefd 	bl	8012810 <rcl_action_get_zero_initialized_cancel_response>
 8012a16:	2300      	movs	r3, #0
 8012a18:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012a1c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012a20:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012a24:	f88d 3018 	strb.w	r3, [sp, #24]
 8012a28:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012a2c:	f8cd d01c 	str.w	sp, [sp, #28]
 8012a30:	46ec      	mov	ip, sp
 8012a32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a36:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012a58 <rclc_action_server_goal_cancel_accept+0x50>
 8012a3a:	6860      	ldr	r0, [r4, #4]
 8012a3c:	aa06      	add	r2, sp, #24
 8012a3e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012a42:	3010      	adds	r0, #16
 8012a44:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012a48:	f7ff fdd2 	bl	80125f0 <rcl_action_send_cancel_response>
 8012a4c:	b010      	add	sp, #64	@ 0x40
 8012a4e:	bd10      	pop	{r4, pc}
 8012a50:	200b      	movs	r0, #11
 8012a52:	4770      	bx	lr
 8012a54:	f3af 8000 	nop.w
 8012a58:	00000001 	.word	0x00000001
 8012a5c:	00000001 	.word	0x00000001

08012a60 <rclc_action_server_goal_cancel_reject>:
 8012a60:	b082      	sub	sp, #8
 8012a62:	b530      	push	{r4, r5, lr}
 8012a64:	b08b      	sub	sp, #44	@ 0x2c
 8012a66:	ac0e      	add	r4, sp, #56	@ 0x38
 8012a68:	e884 000c 	stmia.w	r4, {r2, r3}
 8012a6c:	b188      	cbz	r0, 8012a92 <rclc_action_server_goal_cancel_reject+0x32>
 8012a6e:	4604      	mov	r4, r0
 8012a70:	a801      	add	r0, sp, #4
 8012a72:	460d      	mov	r5, r1
 8012a74:	f7ff fecc 	bl	8012810 <rcl_action_get_zero_initialized_cancel_response>
 8012a78:	aa01      	add	r2, sp, #4
 8012a7a:	a90e      	add	r1, sp, #56	@ 0x38
 8012a7c:	f104 0010 	add.w	r0, r4, #16
 8012a80:	f88d 5004 	strb.w	r5, [sp, #4]
 8012a84:	f7ff fdb4 	bl	80125f0 <rcl_action_send_cancel_response>
 8012a88:	b00b      	add	sp, #44	@ 0x2c
 8012a8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a8e:	b002      	add	sp, #8
 8012a90:	4770      	bx	lr
 8012a92:	200b      	movs	r0, #11
 8012a94:	b00b      	add	sp, #44	@ 0x2c
 8012a96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a9a:	b002      	add	sp, #8
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop

08012aa0 <__atomic_load_8>:
 8012aa0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012aa4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012aa8:	4a15      	ldr	r2, [pc, #84]	@ (8012b00 <__atomic_load_8+0x60>)
 8012aaa:	4b16      	ldr	r3, [pc, #88]	@ (8012b04 <__atomic_load_8+0x64>)
 8012aac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012ab0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012ab4:	fb02 f101 	mul.w	r1, r2, r1
 8012ab8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012abc:	fba3 2301 	umull	r2, r3, r3, r1
 8012ac0:	091b      	lsrs	r3, r3, #4
 8012ac2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012ac6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012aca:	b4f0      	push	{r4, r5, r6, r7}
 8012acc:	4d0e      	ldr	r5, [pc, #56]	@ (8012b08 <__atomic_load_8+0x68>)
 8012ace:	1ac9      	subs	r1, r1, r3
 8012ad0:	194a      	adds	r2, r1, r5
 8012ad2:	f04f 0c01 	mov.w	ip, #1
 8012ad6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012ada:	e8c2 cf44 	strexb	r4, ip, [r2]
 8012ade:	2c00      	cmp	r4, #0
 8012ae0:	d1f9      	bne.n	8012ad6 <__atomic_load_8+0x36>
 8012ae2:	f3bf 8f5b 	dmb	ish
 8012ae6:	b2dc      	uxtb	r4, r3
 8012ae8:	2c00      	cmp	r4, #0
 8012aea:	d1f4      	bne.n	8012ad6 <__atomic_load_8+0x36>
 8012aec:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012af0:	f3bf 8f5b 	dmb	ish
 8012af4:	546b      	strb	r3, [r5, r1]
 8012af6:	4630      	mov	r0, r6
 8012af8:	4639      	mov	r1, r7
 8012afa:	bcf0      	pop	{r4, r5, r6, r7}
 8012afc:	4770      	bx	lr
 8012afe:	bf00      	nop
 8012b00:	27d4eb2d 	.word	0x27d4eb2d
 8012b04:	b21642c9 	.word	0xb21642c9
 8012b08:	2000ea08 	.word	0x2000ea08

08012b0c <__atomic_store_8>:
 8012b0c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012b10:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012b14:	b570      	push	{r4, r5, r6, lr}
 8012b16:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012b1a:	4c14      	ldr	r4, [pc, #80]	@ (8012b6c <__atomic_store_8+0x60>)
 8012b1c:	4e14      	ldr	r6, [pc, #80]	@ (8012b70 <__atomic_store_8+0x64>)
 8012b1e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012b22:	fb04 f101 	mul.w	r1, r4, r1
 8012b26:	4c13      	ldr	r4, [pc, #76]	@ (8012b74 <__atomic_store_8+0x68>)
 8012b28:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012b2c:	fba4 5401 	umull	r5, r4, r4, r1
 8012b30:	0924      	lsrs	r4, r4, #4
 8012b32:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012b36:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8012b3a:	eba1 0e04 	sub.w	lr, r1, r4
 8012b3e:	f04f 0501 	mov.w	r5, #1
 8012b42:	eb0e 0c06 	add.w	ip, lr, r6
 8012b46:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012b4a:	e8cc 5f44 	strexb	r4, r5, [ip]
 8012b4e:	2c00      	cmp	r4, #0
 8012b50:	d1f9      	bne.n	8012b46 <__atomic_store_8+0x3a>
 8012b52:	f3bf 8f5b 	dmb	ish
 8012b56:	b2cc      	uxtb	r4, r1
 8012b58:	2c00      	cmp	r4, #0
 8012b5a:	d1f4      	bne.n	8012b46 <__atomic_store_8+0x3a>
 8012b5c:	e9c0 2300 	strd	r2, r3, [r0]
 8012b60:	f3bf 8f5b 	dmb	ish
 8012b64:	f806 100e 	strb.w	r1, [r6, lr]
 8012b68:	bd70      	pop	{r4, r5, r6, pc}
 8012b6a:	bf00      	nop
 8012b6c:	27d4eb2d 	.word	0x27d4eb2d
 8012b70:	2000ea08 	.word	0x2000ea08
 8012b74:	b21642c9 	.word	0xb21642c9

08012b78 <__atomic_exchange_8>:
 8012b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b7a:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8012b7e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8012b82:	4917      	ldr	r1, [pc, #92]	@ (8012be0 <__atomic_exchange_8+0x68>)
 8012b84:	4f17      	ldr	r7, [pc, #92]	@ (8012be4 <__atomic_exchange_8+0x6c>)
 8012b86:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8012b8a:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8012b8e:	fb01 fe0e 	mul.w	lr, r1, lr
 8012b92:	4915      	ldr	r1, [pc, #84]	@ (8012be8 <__atomic_exchange_8+0x70>)
 8012b94:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8012b98:	4606      	mov	r6, r0
 8012b9a:	fba1 010e 	umull	r0, r1, r1, lr
 8012b9e:	0909      	lsrs	r1, r1, #4
 8012ba0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012ba4:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012ba8:	ebae 0e01 	sub.w	lr, lr, r1
 8012bac:	f04f 0501 	mov.w	r5, #1
 8012bb0:	eb0e 0107 	add.w	r1, lr, r7
 8012bb4:	e8d1 cf4f 	ldrexb	ip, [r1]
 8012bb8:	e8c1 5f40 	strexb	r0, r5, [r1]
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	d1f9      	bne.n	8012bb4 <__atomic_exchange_8+0x3c>
 8012bc0:	f3bf 8f5b 	dmb	ish
 8012bc4:	fa5f f48c 	uxtb.w	r4, ip
 8012bc8:	2c00      	cmp	r4, #0
 8012bca:	d1f3      	bne.n	8012bb4 <__atomic_exchange_8+0x3c>
 8012bcc:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012bd0:	e9c6 2300 	strd	r2, r3, [r6]
 8012bd4:	f3bf 8f5b 	dmb	ish
 8012bd8:	f807 c00e 	strb.w	ip, [r7, lr]
 8012bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bde:	bf00      	nop
 8012be0:	27d4eb2d 	.word	0x27d4eb2d
 8012be4:	2000ea08 	.word	0x2000ea08
 8012be8:	b21642c9 	.word	0xb21642c9

08012bec <rcutils_get_env>:
 8012bec:	b150      	cbz	r0, 8012c04 <rcutils_get_env+0x18>
 8012bee:	b510      	push	{r4, lr}
 8012bf0:	460c      	mov	r4, r1
 8012bf2:	b909      	cbnz	r1, 8012bf8 <rcutils_get_env+0xc>
 8012bf4:	4806      	ldr	r0, [pc, #24]	@ (8012c10 <rcutils_get_env+0x24>)
 8012bf6:	bd10      	pop	{r4, pc}
 8012bf8:	f004 f808 	bl	8016c0c <getenv>
 8012bfc:	b120      	cbz	r0, 8012c08 <rcutils_get_env+0x1c>
 8012bfe:	6020      	str	r0, [r4, #0]
 8012c00:	2000      	movs	r0, #0
 8012c02:	bd10      	pop	{r4, pc}
 8012c04:	4803      	ldr	r0, [pc, #12]	@ (8012c14 <rcutils_get_env+0x28>)
 8012c06:	4770      	bx	lr
 8012c08:	4b03      	ldr	r3, [pc, #12]	@ (8012c18 <rcutils_get_env+0x2c>)
 8012c0a:	6023      	str	r3, [r4, #0]
 8012c0c:	e7f8      	b.n	8012c00 <rcutils_get_env+0x14>
 8012c0e:	bf00      	nop
 8012c10:	08018810 	.word	0x08018810
 8012c14:	080187f4 	.word	0x080187f4
 8012c18:	08018d14 	.word	0x08018d14

08012c1c <rcutils_format_string_limit>:
 8012c1c:	b40f      	push	{r0, r1, r2, r3}
 8012c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c20:	b083      	sub	sp, #12
 8012c22:	ac08      	add	r4, sp, #32
 8012c24:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012c2a:	b376      	cbz	r6, 8012c8a <rcutils_format_string_limit+0x6e>
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f7f7 f903 	bl	8009e38 <rcutils_allocator_is_valid>
 8012c32:	b350      	cbz	r0, 8012c8a <rcutils_format_string_limit+0x6e>
 8012c34:	2100      	movs	r1, #0
 8012c36:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012c38:	4632      	mov	r2, r6
 8012c3a:	4608      	mov	r0, r1
 8012c3c:	e9cd 3300 	strd	r3, r3, [sp]
 8012c40:	f000 f8f8 	bl	8012e34 <rcutils_vsnprintf>
 8012c44:	1c43      	adds	r3, r0, #1
 8012c46:	4605      	mov	r5, r0
 8012c48:	d01f      	beq.n	8012c8a <rcutils_format_string_limit+0x6e>
 8012c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c4c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012c4e:	1c47      	adds	r7, r0, #1
 8012c50:	429f      	cmp	r7, r3
 8012c52:	bf84      	itt	hi
 8012c54:	461f      	movhi	r7, r3
 8012c56:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	9b08      	ldr	r3, [sp, #32]
 8012c5e:	4798      	blx	r3
 8012c60:	4604      	mov	r4, r0
 8012c62:	b190      	cbz	r0, 8012c8a <rcutils_format_string_limit+0x6e>
 8012c64:	9b01      	ldr	r3, [sp, #4]
 8012c66:	4632      	mov	r2, r6
 8012c68:	4639      	mov	r1, r7
 8012c6a:	f000 f8e3 	bl	8012e34 <rcutils_vsnprintf>
 8012c6e:	2800      	cmp	r0, #0
 8012c70:	db07      	blt.n	8012c82 <rcutils_format_string_limit+0x66>
 8012c72:	2300      	movs	r3, #0
 8012c74:	5563      	strb	r3, [r4, r5]
 8012c76:	4620      	mov	r0, r4
 8012c78:	b003      	add	sp, #12
 8012c7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012c7e:	b004      	add	sp, #16
 8012c80:	4770      	bx	lr
 8012c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c84:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012c86:	4620      	mov	r0, r4
 8012c88:	4798      	blx	r3
 8012c8a:	2400      	movs	r4, #0
 8012c8c:	e7f3      	b.n	8012c76 <rcutils_format_string_limit+0x5a>
 8012c8e:	bf00      	nop

08012c90 <rcutils_repl_str>:
 8012c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c94:	4699      	mov	r9, r3
 8012c96:	b089      	sub	sp, #36	@ 0x24
 8012c98:	4603      	mov	r3, r0
 8012c9a:	4648      	mov	r0, r9
 8012c9c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012ca0:	4698      	mov	r8, r3
 8012ca2:	9300      	str	r3, [sp, #0]
 8012ca4:	460c      	mov	r4, r1
 8012ca6:	f7f7 f8c7 	bl	8009e38 <rcutils_allocator_is_valid>
 8012caa:	2800      	cmp	r0, #0
 8012cac:	f000 80a3 	beq.w	8012df6 <rcutils_repl_str+0x166>
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f7ed fb0d 	bl	80002d0 <strlen>
 8012cb6:	f04f 0a00 	mov.w	sl, #0
 8012cba:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8012cbe:	9001      	str	r0, [sp, #4]
 8012cc0:	4657      	mov	r7, sl
 8012cc2:	4655      	mov	r5, sl
 8012cc4:	2610      	movs	r6, #16
 8012cc6:	e01e      	b.n	8012d06 <rcutils_repl_str+0x76>
 8012cc8:	3501      	adds	r5, #1
 8012cca:	45aa      	cmp	sl, r5
 8012ccc:	d212      	bcs.n	8012cf4 <rcutils_repl_str+0x64>
 8012cce:	44b2      	add	sl, r6
 8012cd0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012cd4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8012cd8:	4798      	blx	r3
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	f000 8088 	beq.w	8012df0 <rcutils_repl_str+0x160>
 8012ce0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012ce4:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8012ce8:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8012cec:	4607      	mov	r7, r0
 8012cee:	bf28      	it	cs
 8012cf0:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8012cf4:	9a00      	ldr	r2, [sp, #0]
 8012cf6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8012cfa:	1aa2      	subs	r2, r4, r2
 8012cfc:	f843 2c04 	str.w	r2, [r3, #-4]
 8012d00:	9b01      	ldr	r3, [sp, #4]
 8012d02:	eb04 0803 	add.w	r8, r4, r3
 8012d06:	9902      	ldr	r1, [sp, #8]
 8012d08:	4640      	mov	r0, r8
 8012d0a:	f004 fc69 	bl	80175e0 <strstr>
 8012d0e:	4604      	mov	r4, r0
 8012d10:	465a      	mov	r2, fp
 8012d12:	4638      	mov	r0, r7
 8012d14:	2c00      	cmp	r4, #0
 8012d16:	d1d7      	bne.n	8012cc8 <rcutils_repl_str+0x38>
 8012d18:	4640      	mov	r0, r8
 8012d1a:	f7ed fad9 	bl	80002d0 <strlen>
 8012d1e:	9b00      	ldr	r3, [sp, #0]
 8012d20:	eba8 0803 	sub.w	r8, r8, r3
 8012d24:	eb08 0300 	add.w	r3, r8, r0
 8012d28:	9304      	str	r3, [sp, #16]
 8012d2a:	f8d9 8000 	ldr.w	r8, [r9]
 8012d2e:	2d00      	cmp	r5, #0
 8012d30:	d03f      	beq.n	8012db2 <rcutils_repl_str+0x122>
 8012d32:	9803      	ldr	r0, [sp, #12]
 8012d34:	f7ed facc 	bl	80002d0 <strlen>
 8012d38:	4606      	mov	r6, r0
 8012d3a:	9801      	ldr	r0, [sp, #4]
 8012d3c:	9a04      	ldr	r2, [sp, #16]
 8012d3e:	1a33      	subs	r3, r6, r0
 8012d40:	fb05 2a03 	mla	sl, r5, r3, r2
 8012d44:	4659      	mov	r1, fp
 8012d46:	f10a 0001 	add.w	r0, sl, #1
 8012d4a:	47c0      	blx	r8
 8012d4c:	4683      	mov	fp, r0
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d04e      	beq.n	8012df0 <rcutils_repl_str+0x160>
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	9900      	ldr	r1, [sp, #0]
 8012d56:	f004 fce4 	bl	8017722 <memcpy>
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	9706      	str	r7, [sp, #24]
 8012d5e:	1e6a      	subs	r2, r5, #1
 8012d60:	445b      	add	r3, fp
 8012d62:	46a8      	mov	r8, r5
 8012d64:	9202      	str	r2, [sp, #8]
 8012d66:	4625      	mov	r5, r4
 8012d68:	f8cd 901c 	str.w	r9, [sp, #28]
 8012d6c:	461c      	mov	r4, r3
 8012d6e:	9903      	ldr	r1, [sp, #12]
 8012d70:	4632      	mov	r2, r6
 8012d72:	4620      	mov	r0, r4
 8012d74:	f004 fcd5 	bl	8017722 <memcpy>
 8012d78:	9b01      	ldr	r3, [sp, #4]
 8012d7a:	f857 2b04 	ldr.w	r2, [r7], #4
 8012d7e:	eb02 0c03 	add.w	ip, r2, r3
 8012d82:	9b00      	ldr	r3, [sp, #0]
 8012d84:	eb03 010c 	add.w	r1, r3, ip
 8012d88:	9b02      	ldr	r3, [sp, #8]
 8012d8a:	4434      	add	r4, r6
 8012d8c:	429d      	cmp	r5, r3
 8012d8e:	4620      	mov	r0, r4
 8012d90:	d022      	beq.n	8012dd8 <rcutils_repl_str+0x148>
 8012d92:	683a      	ldr	r2, [r7, #0]
 8012d94:	eba2 090c 	sub.w	r9, r2, ip
 8012d98:	464a      	mov	r2, r9
 8012d9a:	3501      	adds	r5, #1
 8012d9c:	f004 fcc1 	bl	8017722 <memcpy>
 8012da0:	45a8      	cmp	r8, r5
 8012da2:	444c      	add	r4, r9
 8012da4:	d1e3      	bne.n	8012d6e <rcutils_repl_str+0xde>
 8012da6:	2300      	movs	r3, #0
 8012da8:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8012dac:	f80b 300a 	strb.w	r3, [fp, sl]
 8012db0:	e008      	b.n	8012dc4 <rcutils_repl_str+0x134>
 8012db2:	4618      	mov	r0, r3
 8012db4:	4659      	mov	r1, fp
 8012db6:	3001      	adds	r0, #1
 8012db8:	47c0      	blx	r8
 8012dba:	4683      	mov	fp, r0
 8012dbc:	b110      	cbz	r0, 8012dc4 <rcutils_repl_str+0x134>
 8012dbe:	9900      	ldr	r1, [sp, #0]
 8012dc0:	f004 fca7 	bl	8017712 <strcpy>
 8012dc4:	4638      	mov	r0, r7
 8012dc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012dca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012dce:	4798      	blx	r3
 8012dd0:	4658      	mov	r0, fp
 8012dd2:	b009      	add	sp, #36	@ 0x24
 8012dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dd8:	9b04      	ldr	r3, [sp, #16]
 8012dda:	eba3 020c 	sub.w	r2, r3, ip
 8012dde:	9205      	str	r2, [sp, #20]
 8012de0:	3501      	adds	r5, #1
 8012de2:	f004 fc9e 	bl	8017722 <memcpy>
 8012de6:	9a05      	ldr	r2, [sp, #20]
 8012de8:	45a8      	cmp	r8, r5
 8012dea:	4414      	add	r4, r2
 8012dec:	d1bf      	bne.n	8012d6e <rcutils_repl_str+0xde>
 8012dee:	e7da      	b.n	8012da6 <rcutils_repl_str+0x116>
 8012df0:	f04f 0b00 	mov.w	fp, #0
 8012df4:	e7e6      	b.n	8012dc4 <rcutils_repl_str+0x134>
 8012df6:	4683      	mov	fp, r0
 8012df8:	4658      	mov	r0, fp
 8012dfa:	b009      	add	sp, #36	@ 0x24
 8012dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e00 <rcutils_snprintf>:
 8012e00:	b40c      	push	{r2, r3}
 8012e02:	b530      	push	{r4, r5, lr}
 8012e04:	b083      	sub	sp, #12
 8012e06:	ab06      	add	r3, sp, #24
 8012e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e0c:	9301      	str	r3, [sp, #4]
 8012e0e:	b152      	cbz	r2, 8012e26 <rcutils_snprintf+0x26>
 8012e10:	b138      	cbz	r0, 8012e22 <rcutils_snprintf+0x22>
 8012e12:	b141      	cbz	r1, 8012e26 <rcutils_snprintf+0x26>
 8012e14:	f004 fade 	bl	80173d4 <vsniprintf>
 8012e18:	b003      	add	sp, #12
 8012e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e1e:	b002      	add	sp, #8
 8012e20:	4770      	bx	lr
 8012e22:	2900      	cmp	r1, #0
 8012e24:	d0f6      	beq.n	8012e14 <rcutils_snprintf+0x14>
 8012e26:	f004 fc47 	bl	80176b8 <__errno>
 8012e2a:	2316      	movs	r3, #22
 8012e2c:	6003      	str	r3, [r0, #0]
 8012e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e32:	e7f1      	b.n	8012e18 <rcutils_snprintf+0x18>

08012e34 <rcutils_vsnprintf>:
 8012e34:	b570      	push	{r4, r5, r6, lr}
 8012e36:	b13a      	cbz	r2, 8012e48 <rcutils_vsnprintf+0x14>
 8012e38:	b120      	cbz	r0, 8012e44 <rcutils_vsnprintf+0x10>
 8012e3a:	b129      	cbz	r1, 8012e48 <rcutils_vsnprintf+0x14>
 8012e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e40:	f004 bac8 	b.w	80173d4 <vsniprintf>
 8012e44:	2900      	cmp	r1, #0
 8012e46:	d0f9      	beq.n	8012e3c <rcutils_vsnprintf+0x8>
 8012e48:	f004 fc36 	bl	80176b8 <__errno>
 8012e4c:	2316      	movs	r3, #22
 8012e4e:	6003      	str	r3, [r0, #0]
 8012e50:	f04f 30ff 	mov.w	r0, #4294967295
 8012e54:	bd70      	pop	{r4, r5, r6, pc}
 8012e56:	bf00      	nop

08012e58 <rcutils_strdup>:
 8012e58:	b084      	sub	sp, #16
 8012e5a:	b570      	push	{r4, r5, r6, lr}
 8012e5c:	b086      	sub	sp, #24
 8012e5e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8012e62:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8012e66:	4604      	mov	r4, r0
 8012e68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e6c:	f10d 0e04 	add.w	lr, sp, #4
 8012e70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e74:	f8dc 3000 	ldr.w	r3, [ip]
 8012e78:	f8ce 3000 	str.w	r3, [lr]
 8012e7c:	b304      	cbz	r4, 8012ec0 <rcutils_strdup+0x68>
 8012e7e:	a801      	add	r0, sp, #4
 8012e80:	f7f6 ffda 	bl	8009e38 <rcutils_allocator_is_valid>
 8012e84:	b1e0      	cbz	r0, 8012ec0 <rcutils_strdup+0x68>
 8012e86:	f04f 32ff 	mov.w	r2, #4294967295
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f7ed f9cf 	bl	8000230 <memchr>
 8012e92:	b190      	cbz	r0, 8012eba <rcutils_strdup+0x62>
 8012e94:	1b06      	subs	r6, r0, r4
 8012e96:	1c70      	adds	r0, r6, #1
 8012e98:	9b01      	ldr	r3, [sp, #4]
 8012e9a:	9905      	ldr	r1, [sp, #20]
 8012e9c:	4798      	blx	r3
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	b128      	cbz	r0, 8012eae <rcutils_strdup+0x56>
 8012ea2:	4632      	mov	r2, r6
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	f004 fc3c 	bl	8017722 <memcpy>
 8012eaa:	2300      	movs	r3, #0
 8012eac:	55ab      	strb	r3, [r5, r6]
 8012eae:	4628      	mov	r0, r5
 8012eb0:	b006      	add	sp, #24
 8012eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eb6:	b004      	add	sp, #16
 8012eb8:	4770      	bx	lr
 8012eba:	f04f 36ff 	mov.w	r6, #4294967295
 8012ebe:	e7eb      	b.n	8012e98 <rcutils_strdup+0x40>
 8012ec0:	2500      	movs	r5, #0
 8012ec2:	e7f4      	b.n	8012eae <rcutils_strdup+0x56>

08012ec4 <rcutils_strndup>:
 8012ec4:	b082      	sub	sp, #8
 8012ec6:	b570      	push	{r4, r5, r6, lr}
 8012ec8:	ac04      	add	r4, sp, #16
 8012eca:	e884 000c 	stmia.w	r4, {r2, r3}
 8012ece:	b1e8      	cbz	r0, 8012f0c <rcutils_strndup+0x48>
 8012ed0:	4605      	mov	r5, r0
 8012ed2:	a804      	add	r0, sp, #16
 8012ed4:	460c      	mov	r4, r1
 8012ed6:	f7f6 ffaf 	bl	8009e38 <rcutils_allocator_is_valid>
 8012eda:	b1b8      	cbz	r0, 8012f0c <rcutils_strndup+0x48>
 8012edc:	4622      	mov	r2, r4
 8012ede:	2100      	movs	r1, #0
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f7ed f9a5 	bl	8000230 <memchr>
 8012ee6:	b100      	cbz	r0, 8012eea <rcutils_strndup+0x26>
 8012ee8:	1b44      	subs	r4, r0, r5
 8012eea:	9b04      	ldr	r3, [sp, #16]
 8012eec:	9908      	ldr	r1, [sp, #32]
 8012eee:	1c60      	adds	r0, r4, #1
 8012ef0:	4798      	blx	r3
 8012ef2:	4606      	mov	r6, r0
 8012ef4:	b128      	cbz	r0, 8012f02 <rcutils_strndup+0x3e>
 8012ef6:	4622      	mov	r2, r4
 8012ef8:	4629      	mov	r1, r5
 8012efa:	f004 fc12 	bl	8017722 <memcpy>
 8012efe:	2300      	movs	r3, #0
 8012f00:	5533      	strb	r3, [r6, r4]
 8012f02:	4630      	mov	r0, r6
 8012f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f08:	b002      	add	sp, #8
 8012f0a:	4770      	bx	lr
 8012f0c:	2600      	movs	r6, #0
 8012f0e:	4630      	mov	r0, r6
 8012f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f14:	b002      	add	sp, #8
 8012f16:	4770      	bx	lr

08012f18 <rcutils_get_zero_initialized_string_map>:
 8012f18:	4b01      	ldr	r3, [pc, #4]	@ (8012f20 <rcutils_get_zero_initialized_string_map+0x8>)
 8012f1a:	6818      	ldr	r0, [r3, #0]
 8012f1c:	4770      	bx	lr
 8012f1e:	bf00      	nop
 8012f20:	08019168 	.word	0x08019168

08012f24 <rcutils_string_map_reserve>:
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d04e      	beq.n	8012fc6 <rcutils_string_map_reserve+0xa2>
 8012f28:	b530      	push	{r4, r5, lr}
 8012f2a:	6803      	ldr	r3, [r0, #0]
 8012f2c:	b087      	sub	sp, #28
 8012f2e:	4604      	mov	r4, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d043      	beq.n	8012fbc <rcutils_string_map_reserve+0x98>
 8012f34:	f103 0c0c 	add.w	ip, r3, #12
 8012f38:	460d      	mov	r5, r1
 8012f3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f3e:	f10d 0e04 	add.w	lr, sp, #4
 8012f42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f46:	f8dc 3000 	ldr.w	r3, [ip]
 8012f4a:	f8ce 3000 	str.w	r3, [lr]
 8012f4e:	a801      	add	r0, sp, #4
 8012f50:	f7f6 ff72 	bl	8009e38 <rcutils_allocator_is_valid>
 8012f54:	b308      	cbz	r0, 8012f9a <rcutils_string_map_reserve+0x76>
 8012f56:	6823      	ldr	r3, [r4, #0]
 8012f58:	6899      	ldr	r1, [r3, #8]
 8012f5a:	42a9      	cmp	r1, r5
 8012f5c:	d829      	bhi.n	8012fb2 <rcutils_string_map_reserve+0x8e>
 8012f5e:	685a      	ldr	r2, [r3, #4]
 8012f60:	42aa      	cmp	r2, r5
 8012f62:	d024      	beq.n	8012fae <rcutils_string_map_reserve+0x8a>
 8012f64:	b1e5      	cbz	r5, 8012fa0 <rcutils_string_map_reserve+0x7c>
 8012f66:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8012f6a:	d22a      	bcs.n	8012fc2 <rcutils_string_map_reserve+0x9e>
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	9a05      	ldr	r2, [sp, #20]
 8012f70:	9b03      	ldr	r3, [sp, #12]
 8012f72:	00e9      	lsls	r1, r5, #3
 8012f74:	4798      	blx	r3
 8012f76:	b320      	cbz	r0, 8012fc2 <rcutils_string_map_reserve+0x9e>
 8012f78:	6824      	ldr	r4, [r4, #0]
 8012f7a:	6861      	ldr	r1, [r4, #4]
 8012f7c:	6020      	str	r0, [r4, #0]
 8012f7e:	42a9      	cmp	r1, r5
 8012f80:	d214      	bcs.n	8012fac <rcutils_string_map_reserve+0x88>
 8012f82:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8012f86:	1a69      	subs	r1, r5, r1
 8012f88:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	e9c3 2200 	strd	r2, r2, [r3]
 8012f92:	3308      	adds	r3, #8
 8012f94:	428b      	cmp	r3, r1
 8012f96:	d1fa      	bne.n	8012f8e <rcutils_string_map_reserve+0x6a>
 8012f98:	e008      	b.n	8012fac <rcutils_string_map_reserve+0x88>
 8012f9a:	200b      	movs	r0, #11
 8012f9c:	b007      	add	sp, #28
 8012f9e:	bd30      	pop	{r4, r5, pc}
 8012fa0:	9a02      	ldr	r2, [sp, #8]
 8012fa2:	9905      	ldr	r1, [sp, #20]
 8012fa4:	6818      	ldr	r0, [r3, #0]
 8012fa6:	4790      	blx	r2
 8012fa8:	6824      	ldr	r4, [r4, #0]
 8012faa:	6025      	str	r5, [r4, #0]
 8012fac:	6065      	str	r5, [r4, #4]
 8012fae:	2000      	movs	r0, #0
 8012fb0:	e7f4      	b.n	8012f9c <rcutils_string_map_reserve+0x78>
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f7ff ffb6 	bl	8012f24 <rcutils_string_map_reserve>
 8012fb8:	b007      	add	sp, #28
 8012fba:	bd30      	pop	{r4, r5, pc}
 8012fbc:	201f      	movs	r0, #31
 8012fbe:	b007      	add	sp, #28
 8012fc0:	bd30      	pop	{r4, r5, pc}
 8012fc2:	200a      	movs	r0, #10
 8012fc4:	e7ea      	b.n	8012f9c <rcutils_string_map_reserve+0x78>
 8012fc6:	200b      	movs	r0, #11
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop

08012fcc <rcutils_string_map_init>:
 8012fcc:	b082      	sub	sp, #8
 8012fce:	b570      	push	{r4, r5, r6, lr}
 8012fd0:	ac04      	add	r4, sp, #16
 8012fd2:	e884 000c 	stmia.w	r4, {r2, r3}
 8012fd6:	b378      	cbz	r0, 8013038 <rcutils_string_map_init+0x6c>
 8012fd8:	6806      	ldr	r6, [r0, #0]
 8012fda:	4604      	mov	r4, r0
 8012fdc:	b12e      	cbz	r6, 8012fea <rcutils_string_map_init+0x1e>
 8012fde:	251e      	movs	r5, #30
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fe6:	b002      	add	sp, #8
 8012fe8:	4770      	bx	lr
 8012fea:	a804      	add	r0, sp, #16
 8012fec:	460d      	mov	r5, r1
 8012fee:	f7f6 ff23 	bl	8009e38 <rcutils_allocator_is_valid>
 8012ff2:	b308      	cbz	r0, 8013038 <rcutils_string_map_init+0x6c>
 8012ff4:	9b04      	ldr	r3, [sp, #16]
 8012ff6:	9908      	ldr	r1, [sp, #32]
 8012ff8:	2020      	movs	r0, #32
 8012ffa:	4798      	blx	r3
 8012ffc:	6020      	str	r0, [r4, #0]
 8012ffe:	b308      	cbz	r0, 8013044 <rcutils_string_map_init+0x78>
 8013000:	f10d 0e10 	add.w	lr, sp, #16
 8013004:	e9c0 6600 	strd	r6, r6, [r0]
 8013008:	6086      	str	r6, [r0, #8]
 801300a:	f100 0c0c 	add.w	ip, r0, #12
 801300e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013012:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013016:	f8de 3000 	ldr.w	r3, [lr]
 801301a:	f8cc 3000 	str.w	r3, [ip]
 801301e:	4629      	mov	r1, r5
 8013020:	4620      	mov	r0, r4
 8013022:	f7ff ff7f 	bl	8012f24 <rcutils_string_map_reserve>
 8013026:	4605      	mov	r5, r0
 8013028:	2800      	cmp	r0, #0
 801302a:	d0d9      	beq.n	8012fe0 <rcutils_string_map_init+0x14>
 801302c:	9b05      	ldr	r3, [sp, #20]
 801302e:	9908      	ldr	r1, [sp, #32]
 8013030:	6820      	ldr	r0, [r4, #0]
 8013032:	4798      	blx	r3
 8013034:	6026      	str	r6, [r4, #0]
 8013036:	e7d3      	b.n	8012fe0 <rcutils_string_map_init+0x14>
 8013038:	250b      	movs	r5, #11
 801303a:	4628      	mov	r0, r5
 801303c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013040:	b002      	add	sp, #8
 8013042:	4770      	bx	lr
 8013044:	250a      	movs	r5, #10
 8013046:	e7cb      	b.n	8012fe0 <rcutils_string_map_init+0x14>

08013048 <rcutils_string_map_fini>:
 8013048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801304c:	b086      	sub	sp, #24
 801304e:	2800      	cmp	r0, #0
 8013050:	d04f      	beq.n	80130f2 <rcutils_string_map_fini+0xaa>
 8013052:	6805      	ldr	r5, [r0, #0]
 8013054:	4606      	mov	r6, r0
 8013056:	2d00      	cmp	r5, #0
 8013058:	d046      	beq.n	80130e8 <rcutils_string_map_fini+0xa0>
 801305a:	686b      	ldr	r3, [r5, #4]
 801305c:	b353      	cbz	r3, 80130b4 <rcutils_string_map_fini+0x6c>
 801305e:	2400      	movs	r4, #0
 8013060:	682a      	ldr	r2, [r5, #0]
 8013062:	4627      	mov	r7, r4
 8013064:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8013068:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801306c:	b1f8      	cbz	r0, 80130ae <rcutils_string_map_fini+0x66>
 801306e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8013072:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013076:	4651      	mov	r1, sl
 8013078:	47c8      	blx	r9
 801307a:	682b      	ldr	r3, [r5, #0]
 801307c:	eb03 0208 	add.w	r2, r3, r8
 8013080:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8013084:	6850      	ldr	r0, [r2, #4]
 8013086:	4651      	mov	r1, sl
 8013088:	47c8      	blx	r9
 801308a:	682a      	ldr	r2, [r5, #0]
 801308c:	68ab      	ldr	r3, [r5, #8]
 801308e:	4442      	add	r2, r8
 8013090:	3b01      	subs	r3, #1
 8013092:	6057      	str	r7, [r2, #4]
 8013094:	60ab      	str	r3, [r5, #8]
 8013096:	6835      	ldr	r5, [r6, #0]
 8013098:	686b      	ldr	r3, [r5, #4]
 801309a:	3401      	adds	r4, #1
 801309c:	429c      	cmp	r4, r3
 801309e:	d209      	bcs.n	80130b4 <rcutils_string_map_fini+0x6c>
 80130a0:	682a      	ldr	r2, [r5, #0]
 80130a2:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80130a6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80130aa:	2800      	cmp	r0, #0
 80130ac:	d1df      	bne.n	801306e <rcutils_string_map_fini+0x26>
 80130ae:	3401      	adds	r4, #1
 80130b0:	42a3      	cmp	r3, r4
 80130b2:	d8d7      	bhi.n	8013064 <rcutils_string_map_fini+0x1c>
 80130b4:	2100      	movs	r1, #0
 80130b6:	4630      	mov	r0, r6
 80130b8:	f7ff ff34 	bl	8012f24 <rcutils_string_map_reserve>
 80130bc:	4604      	mov	r4, r0
 80130be:	b118      	cbz	r0, 80130c8 <rcutils_string_map_fini+0x80>
 80130c0:	4620      	mov	r0, r4
 80130c2:	b006      	add	sp, #24
 80130c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130c8:	6835      	ldr	r5, [r6, #0]
 80130ca:	350c      	adds	r5, #12
 80130cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130ce:	af01      	add	r7, sp, #4
 80130d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80130d2:	682b      	ldr	r3, [r5, #0]
 80130d4:	603b      	str	r3, [r7, #0]
 80130d6:	a801      	add	r0, sp, #4
 80130d8:	f7f6 feae 	bl	8009e38 <rcutils_allocator_is_valid>
 80130dc:	b148      	cbz	r0, 80130f2 <rcutils_string_map_fini+0xaa>
 80130de:	9b02      	ldr	r3, [sp, #8]
 80130e0:	9905      	ldr	r1, [sp, #20]
 80130e2:	6830      	ldr	r0, [r6, #0]
 80130e4:	4798      	blx	r3
 80130e6:	6034      	str	r4, [r6, #0]
 80130e8:	2400      	movs	r4, #0
 80130ea:	4620      	mov	r0, r4
 80130ec:	b006      	add	sp, #24
 80130ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130f2:	240b      	movs	r4, #11
 80130f4:	4620      	mov	r0, r4
 80130f6:	b006      	add	sp, #24
 80130f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080130fc <rcutils_string_map_getn>:
 80130fc:	b338      	cbz	r0, 801314e <rcutils_string_map_getn+0x52>
 80130fe:	6800      	ldr	r0, [r0, #0]
 8013100:	b328      	cbz	r0, 801314e <rcutils_string_map_getn+0x52>
 8013102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013106:	460e      	mov	r6, r1
 8013108:	b1c1      	cbz	r1, 801313c <rcutils_string_map_getn+0x40>
 801310a:	e9d0 9800 	ldrd	r9, r8, [r0]
 801310e:	f1b8 0f00 	cmp.w	r8, #0
 8013112:	d013      	beq.n	801313c <rcutils_string_map_getn+0x40>
 8013114:	4617      	mov	r7, r2
 8013116:	2400      	movs	r4, #0
 8013118:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 801311c:	4628      	mov	r0, r5
 801311e:	b155      	cbz	r5, 8013136 <rcutils_string_map_getn+0x3a>
 8013120:	f7ed f8d6 	bl	80002d0 <strlen>
 8013124:	42b8      	cmp	r0, r7
 8013126:	4602      	mov	r2, r0
 8013128:	4629      	mov	r1, r5
 801312a:	bf38      	it	cc
 801312c:	463a      	movcc	r2, r7
 801312e:	4630      	mov	r0, r6
 8013130:	f004 fa31 	bl	8017596 <strncmp>
 8013134:	b128      	cbz	r0, 8013142 <rcutils_string_map_getn+0x46>
 8013136:	3401      	adds	r4, #1
 8013138:	45a0      	cmp	r8, r4
 801313a:	d1ed      	bne.n	8013118 <rcutils_string_map_getn+0x1c>
 801313c:	2000      	movs	r0, #0
 801313e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013142:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8013146:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801314a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801314e:	4770      	bx	lr

08013150 <rmw_get_zero_initialized_context>:
 8013150:	b510      	push	{r4, lr}
 8013152:	4903      	ldr	r1, [pc, #12]	@ (8013160 <rmw_get_zero_initialized_context+0x10>)
 8013154:	4604      	mov	r4, r0
 8013156:	2270      	movs	r2, #112	@ 0x70
 8013158:	f004 fae3 	bl	8017722 <memcpy>
 801315c:	4620      	mov	r0, r4
 801315e:	bd10      	pop	{r4, pc}
 8013160:	08019170 	.word	0x08019170

08013164 <rmw_get_zero_initialized_init_options>:
 8013164:	b510      	push	{r4, lr}
 8013166:	4903      	ldr	r1, [pc, #12]	@ (8013174 <rmw_get_zero_initialized_init_options+0x10>)
 8013168:	4604      	mov	r4, r0
 801316a:	2258      	movs	r2, #88	@ 0x58
 801316c:	f004 fad9 	bl	8017722 <memcpy>
 8013170:	4620      	mov	r0, r4
 8013172:	bd10      	pop	{r4, pc}
 8013174:	080191e0 	.word	0x080191e0

08013178 <rmw_subscription_content_filter_options_fini>:
 8013178:	b1b0      	cbz	r0, 80131a8 <rmw_subscription_content_filter_options_fini+0x30>
 801317a:	b538      	push	{r3, r4, r5, lr}
 801317c:	4604      	mov	r4, r0
 801317e:	4608      	mov	r0, r1
 8013180:	460d      	mov	r5, r1
 8013182:	f7f6 fe59 	bl	8009e38 <rcutils_allocator_is_valid>
 8013186:	b168      	cbz	r0, 80131a4 <rmw_subscription_content_filter_options_fini+0x2c>
 8013188:	6820      	ldr	r0, [r4, #0]
 801318a:	b120      	cbz	r0, 8013196 <rmw_subscription_content_filter_options_fini+0x1e>
 801318c:	686b      	ldr	r3, [r5, #4]
 801318e:	6929      	ldr	r1, [r5, #16]
 8013190:	4798      	blx	r3
 8013192:	2300      	movs	r3, #0
 8013194:	6023      	str	r3, [r4, #0]
 8013196:	1d20      	adds	r0, r4, #4
 8013198:	f003 fafe 	bl	8016798 <rcutils_string_array_fini>
 801319c:	3800      	subs	r0, #0
 801319e:	bf18      	it	ne
 80131a0:	2001      	movne	r0, #1
 80131a2:	bd38      	pop	{r3, r4, r5, pc}
 80131a4:	200b      	movs	r0, #11
 80131a6:	bd38      	pop	{r3, r4, r5, pc}
 80131a8:	200b      	movs	r0, #11
 80131aa:	4770      	bx	lr

080131ac <rmw_get_default_subscription_options>:
 80131ac:	2200      	movs	r2, #0
 80131ae:	e9c0 2200 	strd	r2, r2, [r0]
 80131b2:	6082      	str	r2, [r0, #8]
 80131b4:	4770      	bx	lr
 80131b6:	bf00      	nop

080131b8 <rmw_time_equal>:
 80131b8:	b570      	push	{r4, r5, r6, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	ac04      	add	r4, sp, #16
 80131be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80131c2:	4925      	ldr	r1, [pc, #148]	@ (8013258 <rmw_time_equal+0xa0>)
 80131c4:	9c01      	ldr	r4, [sp, #4]
 80131c6:	2202      	movs	r2, #2
 80131c8:	4281      	cmp	r1, r0
 80131ca:	41a2      	sbcs	r2, r4
 80131cc:	d333      	bcc.n	8013236 <rmw_time_equal+0x7e>
 80131ce:	4603      	mov	r3, r0
 80131d0:	4822      	ldr	r0, [pc, #136]	@ (801325c <rmw_time_equal+0xa4>)
 80131d2:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 80131d6:	fba3 3200 	umull	r3, r2, r3, r0
 80131da:	fb00 2204 	mla	r2, r0, r4, r2
 80131de:	43de      	mvns	r6, r3
 80131e0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80131e4:	1a84      	subs	r4, r0, r2
 80131e6:	428e      	cmp	r6, r1
 80131e8:	41ac      	sbcs	r4, r5
 80131ea:	d332      	bcc.n	8013252 <rmw_time_equal+0x9a>
 80131ec:	eb11 0e03 	adds.w	lr, r1, r3
 80131f0:	eb42 0005 	adc.w	r0, r2, r5
 80131f4:	9b08      	ldr	r3, [sp, #32]
 80131f6:	4918      	ldr	r1, [pc, #96]	@ (8013258 <rmw_time_equal+0xa0>)
 80131f8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80131fa:	2202      	movs	r2, #2
 80131fc:	4299      	cmp	r1, r3
 80131fe:	41aa      	sbcs	r2, r5
 8013200:	d31e      	bcc.n	8013240 <rmw_time_equal+0x88>
 8013202:	4c16      	ldr	r4, [pc, #88]	@ (801325c <rmw_time_equal+0xa4>)
 8013204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013206:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013208:	fba3 3104 	umull	r3, r1, r3, r4
 801320c:	fb04 1105 	mla	r1, r4, r5, r1
 8013210:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8013214:	43dd      	mvns	r5, r3
 8013216:	ebac 0401 	sub.w	r4, ip, r1
 801321a:	4295      	cmp	r5, r2
 801321c:	41b4      	sbcs	r4, r6
 801321e:	d314      	bcc.n	801324a <rmw_time_equal+0x92>
 8013220:	18d2      	adds	r2, r2, r3
 8013222:	eb41 0306 	adc.w	r3, r1, r6
 8013226:	4283      	cmp	r3, r0
 8013228:	bf08      	it	eq
 801322a:	4572      	cmpeq	r2, lr
 801322c:	bf0c      	ite	eq
 801322e:	2001      	moveq	r0, #1
 8013230:	2000      	movne	r0, #0
 8013232:	b004      	add	sp, #16
 8013234:	bd70      	pop	{r4, r5, r6, pc}
 8013236:	f04f 3eff 	mov.w	lr, #4294967295
 801323a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801323e:	e7d9      	b.n	80131f4 <rmw_time_equal+0x3c>
 8013240:	f04f 32ff 	mov.w	r2, #4294967295
 8013244:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013248:	e7ed      	b.n	8013226 <rmw_time_equal+0x6e>
 801324a:	f04f 32ff 	mov.w	r2, #4294967295
 801324e:	4663      	mov	r3, ip
 8013250:	e7e9      	b.n	8013226 <rmw_time_equal+0x6e>
 8013252:	f04f 3eff 	mov.w	lr, #4294967295
 8013256:	e7cd      	b.n	80131f4 <rmw_time_equal+0x3c>
 8013258:	25c17d04 	.word	0x25c17d04
 801325c:	3b9aca00 	.word	0x3b9aca00

08013260 <rmw_time_total_nsec>:
 8013260:	b430      	push	{r4, r5}
 8013262:	b084      	sub	sp, #16
 8013264:	ac04      	add	r4, sp, #16
 8013266:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801326a:	4914      	ldr	r1, [pc, #80]	@ (80132bc <rmw_time_total_nsec+0x5c>)
 801326c:	9c01      	ldr	r4, [sp, #4]
 801326e:	2202      	movs	r2, #2
 8013270:	4281      	cmp	r1, r0
 8013272:	41a2      	sbcs	r2, r4
 8013274:	d315      	bcc.n	80132a2 <rmw_time_total_nsec+0x42>
 8013276:	4912      	ldr	r1, [pc, #72]	@ (80132c0 <rmw_time_total_nsec+0x60>)
 8013278:	4603      	mov	r3, r0
 801327a:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 801327e:	fba3 3201 	umull	r3, r2, r3, r1
 8013282:	fb01 2204 	mla	r2, r1, r4, r2
 8013286:	ea6f 0c03 	mvn.w	ip, r3
 801328a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801328e:	1a8c      	subs	r4, r1, r2
 8013290:	4584      	cmp	ip, r0
 8013292:	41ac      	sbcs	r4, r5
 8013294:	d30c      	bcc.n	80132b0 <rmw_time_total_nsec+0x50>
 8013296:	1818      	adds	r0, r3, r0
 8013298:	eb42 0105 	adc.w	r1, r2, r5
 801329c:	b004      	add	sp, #16
 801329e:	bc30      	pop	{r4, r5}
 80132a0:	4770      	bx	lr
 80132a2:	f04f 30ff 	mov.w	r0, #4294967295
 80132a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80132aa:	b004      	add	sp, #16
 80132ac:	bc30      	pop	{r4, r5}
 80132ae:	4770      	bx	lr
 80132b0:	f04f 30ff 	mov.w	r0, #4294967295
 80132b4:	b004      	add	sp, #16
 80132b6:	bc30      	pop	{r4, r5}
 80132b8:	4770      	bx	lr
 80132ba:	bf00      	nop
 80132bc:	25c17d04 	.word	0x25c17d04
 80132c0:	3b9aca00 	.word	0x3b9aca00

080132c4 <rmw_get_zero_initialized_message_info>:
 80132c4:	b510      	push	{r4, lr}
 80132c6:	4c09      	ldr	r4, [pc, #36]	@ (80132ec <rmw_get_zero_initialized_message_info+0x28>)
 80132c8:	4686      	mov	lr, r0
 80132ca:	4684      	mov	ip, r0
 80132cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80132e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80132e6:	4670      	mov	r0, lr
 80132e8:	bd10      	pop	{r4, pc}
 80132ea:	bf00      	nop
 80132ec:	08019238 	.word	0x08019238

080132f0 <rmw_validate_full_topic_name>:
 80132f0:	2800      	cmp	r0, #0
 80132f2:	d049      	beq.n	8013388 <rmw_validate_full_topic_name+0x98>
 80132f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f8:	460e      	mov	r6, r1
 80132fa:	2900      	cmp	r1, #0
 80132fc:	d056      	beq.n	80133ac <rmw_validate_full_topic_name+0xbc>
 80132fe:	4615      	mov	r5, r2
 8013300:	4604      	mov	r4, r0
 8013302:	f7ec ffe5 	bl	80002d0 <strlen>
 8013306:	b150      	cbz	r0, 801331e <rmw_validate_full_topic_name+0x2e>
 8013308:	7823      	ldrb	r3, [r4, #0]
 801330a:	2b2f      	cmp	r3, #47	@ 0x2f
 801330c:	d00c      	beq.n	8013328 <rmw_validate_full_topic_name+0x38>
 801330e:	2302      	movs	r3, #2
 8013310:	6033      	str	r3, [r6, #0]
 8013312:	b10d      	cbz	r5, 8013318 <rmw_validate_full_topic_name+0x28>
 8013314:	2300      	movs	r3, #0
 8013316:	602b      	str	r3, [r5, #0]
 8013318:	2000      	movs	r0, #0
 801331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801331e:	2301      	movs	r3, #1
 8013320:	6033      	str	r3, [r6, #0]
 8013322:	2d00      	cmp	r5, #0
 8013324:	d1f6      	bne.n	8013314 <rmw_validate_full_topic_name+0x24>
 8013326:	e7f7      	b.n	8013318 <rmw_validate_full_topic_name+0x28>
 8013328:	1e47      	subs	r7, r0, #1
 801332a:	5de3      	ldrb	r3, [r4, r7]
 801332c:	2b2f      	cmp	r3, #47	@ 0x2f
 801332e:	d03f      	beq.n	80133b0 <rmw_validate_full_topic_name+0xc0>
 8013330:	1e63      	subs	r3, r4, #1
 8013332:	4621      	mov	r1, r4
 8013334:	eb03 0e00 	add.w	lr, r3, r0
 8013338:	469c      	mov	ip, r3
 801333a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801333e:	2a5f      	cmp	r2, #95	@ 0x5f
 8013340:	d006      	beq.n	8013350 <rmw_validate_full_topic_name+0x60>
 8013342:	d823      	bhi.n	801338c <rmw_validate_full_topic_name+0x9c>
 8013344:	2a39      	cmp	r2, #57	@ 0x39
 8013346:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801334a:	d82b      	bhi.n	80133a4 <rmw_validate_full_topic_name+0xb4>
 801334c:	2a2e      	cmp	r2, #46	@ 0x2e
 801334e:	d920      	bls.n	8013392 <rmw_validate_full_topic_name+0xa2>
 8013350:	4573      	cmp	r3, lr
 8013352:	d1f1      	bne.n	8013338 <rmw_validate_full_topic_name+0x48>
 8013354:	4c21      	ldr	r4, [pc, #132]	@ (80133dc <rmw_validate_full_topic_name+0xec>)
 8013356:	2300      	movs	r3, #0
 8013358:	e003      	b.n	8013362 <rmw_validate_full_topic_name+0x72>
 801335a:	4298      	cmp	r0, r3
 801335c:	f101 0101 	add.w	r1, r1, #1
 8013360:	d02c      	beq.n	80133bc <rmw_validate_full_topic_name+0xcc>
 8013362:	429f      	cmp	r7, r3
 8013364:	f103 0301 	add.w	r3, r3, #1
 8013368:	d0f7      	beq.n	801335a <rmw_validate_full_topic_name+0x6a>
 801336a:	780a      	ldrb	r2, [r1, #0]
 801336c:	2a2f      	cmp	r2, #47	@ 0x2f
 801336e:	d1f4      	bne.n	801335a <rmw_validate_full_topic_name+0x6a>
 8013370:	784a      	ldrb	r2, [r1, #1]
 8013372:	2a2f      	cmp	r2, #47	@ 0x2f
 8013374:	d02d      	beq.n	80133d2 <rmw_validate_full_topic_name+0xe2>
 8013376:	5ca2      	ldrb	r2, [r4, r2]
 8013378:	0752      	lsls	r2, r2, #29
 801337a:	d5ee      	bpl.n	801335a <rmw_validate_full_topic_name+0x6a>
 801337c:	2206      	movs	r2, #6
 801337e:	6032      	str	r2, [r6, #0]
 8013380:	2d00      	cmp	r5, #0
 8013382:	d0c9      	beq.n	8013318 <rmw_validate_full_topic_name+0x28>
 8013384:	602b      	str	r3, [r5, #0]
 8013386:	e7c7      	b.n	8013318 <rmw_validate_full_topic_name+0x28>
 8013388:	200b      	movs	r0, #11
 801338a:	4770      	bx	lr
 801338c:	3a61      	subs	r2, #97	@ 0x61
 801338e:	2a19      	cmp	r2, #25
 8013390:	d9de      	bls.n	8013350 <rmw_validate_full_topic_name+0x60>
 8013392:	2304      	movs	r3, #4
 8013394:	6033      	str	r3, [r6, #0]
 8013396:	2d00      	cmp	r5, #0
 8013398:	d0be      	beq.n	8013318 <rmw_validate_full_topic_name+0x28>
 801339a:	f1c4 0401 	rsb	r4, r4, #1
 801339e:	4464      	add	r4, ip
 80133a0:	602c      	str	r4, [r5, #0]
 80133a2:	e7b9      	b.n	8013318 <rmw_validate_full_topic_name+0x28>
 80133a4:	f1b8 0f19 	cmp.w	r8, #25
 80133a8:	d9d2      	bls.n	8013350 <rmw_validate_full_topic_name+0x60>
 80133aa:	e7f2      	b.n	8013392 <rmw_validate_full_topic_name+0xa2>
 80133ac:	200b      	movs	r0, #11
 80133ae:	e7b4      	b.n	801331a <rmw_validate_full_topic_name+0x2a>
 80133b0:	2303      	movs	r3, #3
 80133b2:	6033      	str	r3, [r6, #0]
 80133b4:	2d00      	cmp	r5, #0
 80133b6:	d0af      	beq.n	8013318 <rmw_validate_full_topic_name+0x28>
 80133b8:	602f      	str	r7, [r5, #0]
 80133ba:	e7ad      	b.n	8013318 <rmw_validate_full_topic_name+0x28>
 80133bc:	28f7      	cmp	r0, #247	@ 0xf7
 80133be:	d802      	bhi.n	80133c6 <rmw_validate_full_topic_name+0xd6>
 80133c0:	2300      	movs	r3, #0
 80133c2:	6033      	str	r3, [r6, #0]
 80133c4:	e7a8      	b.n	8013318 <rmw_validate_full_topic_name+0x28>
 80133c6:	2307      	movs	r3, #7
 80133c8:	6033      	str	r3, [r6, #0]
 80133ca:	2d00      	cmp	r5, #0
 80133cc:	d0a4      	beq.n	8013318 <rmw_validate_full_topic_name+0x28>
 80133ce:	23f6      	movs	r3, #246	@ 0xf6
 80133d0:	e7d8      	b.n	8013384 <rmw_validate_full_topic_name+0x94>
 80133d2:	2205      	movs	r2, #5
 80133d4:	6032      	str	r2, [r6, #0]
 80133d6:	2d00      	cmp	r5, #0
 80133d8:	d1d4      	bne.n	8013384 <rmw_validate_full_topic_name+0x94>
 80133da:	e79d      	b.n	8013318 <rmw_validate_full_topic_name+0x28>
 80133dc:	080194db 	.word	0x080194db

080133e0 <rmw_validate_namespace_with_size>:
 80133e0:	2800      	cmp	r0, #0
 80133e2:	d031      	beq.n	8013448 <rmw_validate_namespace_with_size+0x68>
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	4614      	mov	r4, r2
 80133e8:	b0c2      	sub	sp, #264	@ 0x108
 80133ea:	b1ba      	cbz	r2, 801341c <rmw_validate_namespace_with_size+0x3c>
 80133ec:	2901      	cmp	r1, #1
 80133ee:	460e      	mov	r6, r1
 80133f0:	461d      	mov	r5, r3
 80133f2:	d102      	bne.n	80133fa <rmw_validate_namespace_with_size+0x1a>
 80133f4:	7803      	ldrb	r3, [r0, #0]
 80133f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80133f8:	d015      	beq.n	8013426 <rmw_validate_namespace_with_size+0x46>
 80133fa:	aa01      	add	r2, sp, #4
 80133fc:	4669      	mov	r1, sp
 80133fe:	f7ff ff77 	bl	80132f0 <rmw_validate_full_topic_name>
 8013402:	b960      	cbnz	r0, 801341e <rmw_validate_namespace_with_size+0x3e>
 8013404:	9b00      	ldr	r3, [sp, #0]
 8013406:	b163      	cbz	r3, 8013422 <rmw_validate_namespace_with_size+0x42>
 8013408:	2b07      	cmp	r3, #7
 801340a:	d00a      	beq.n	8013422 <rmw_validate_namespace_with_size+0x42>
 801340c:	1e5a      	subs	r2, r3, #1
 801340e:	2a05      	cmp	r2, #5
 8013410:	d81c      	bhi.n	801344c <rmw_validate_namespace_with_size+0x6c>
 8013412:	e8df f002 	tbb	[pc, r2]
 8013416:	0c0c      	.short	0x0c0c
 8013418:	0c0c0c0c 	.word	0x0c0c0c0c
 801341c:	200b      	movs	r0, #11
 801341e:	b042      	add	sp, #264	@ 0x108
 8013420:	bd70      	pop	{r4, r5, r6, pc}
 8013422:	2ef5      	cmp	r6, #245	@ 0xf5
 8013424:	d809      	bhi.n	801343a <rmw_validate_namespace_with_size+0x5a>
 8013426:	2300      	movs	r3, #0
 8013428:	6023      	str	r3, [r4, #0]
 801342a:	2000      	movs	r0, #0
 801342c:	e7f7      	b.n	801341e <rmw_validate_namespace_with_size+0x3e>
 801342e:	6023      	str	r3, [r4, #0]
 8013430:	2d00      	cmp	r5, #0
 8013432:	d0fa      	beq.n	801342a <rmw_validate_namespace_with_size+0x4a>
 8013434:	9b01      	ldr	r3, [sp, #4]
 8013436:	602b      	str	r3, [r5, #0]
 8013438:	e7f7      	b.n	801342a <rmw_validate_namespace_with_size+0x4a>
 801343a:	2307      	movs	r3, #7
 801343c:	6023      	str	r3, [r4, #0]
 801343e:	2d00      	cmp	r5, #0
 8013440:	d0f3      	beq.n	801342a <rmw_validate_namespace_with_size+0x4a>
 8013442:	23f4      	movs	r3, #244	@ 0xf4
 8013444:	602b      	str	r3, [r5, #0]
 8013446:	e7f0      	b.n	801342a <rmw_validate_namespace_with_size+0x4a>
 8013448:	200b      	movs	r0, #11
 801344a:	4770      	bx	lr
 801344c:	4a03      	ldr	r2, [pc, #12]	@ (801345c <rmw_validate_namespace_with_size+0x7c>)
 801344e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013452:	a802      	add	r0, sp, #8
 8013454:	f7ff fcd4 	bl	8012e00 <rcutils_snprintf>
 8013458:	2001      	movs	r0, #1
 801345a:	e7e0      	b.n	801341e <rmw_validate_namespace_with_size+0x3e>
 801345c:	0801882c 	.word	0x0801882c

08013460 <rmw_validate_namespace>:
 8013460:	b168      	cbz	r0, 801347e <rmw_validate_namespace+0x1e>
 8013462:	b570      	push	{r4, r5, r6, lr}
 8013464:	460d      	mov	r5, r1
 8013466:	4616      	mov	r6, r2
 8013468:	4604      	mov	r4, r0
 801346a:	f7ec ff31 	bl	80002d0 <strlen>
 801346e:	4633      	mov	r3, r6
 8013470:	4601      	mov	r1, r0
 8013472:	462a      	mov	r2, r5
 8013474:	4620      	mov	r0, r4
 8013476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801347a:	f7ff bfb1 	b.w	80133e0 <rmw_validate_namespace_with_size>
 801347e:	200b      	movs	r0, #11
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop

08013484 <rmw_namespace_validation_result_string>:
 8013484:	2807      	cmp	r0, #7
 8013486:	bf9a      	itte	ls
 8013488:	4b02      	ldrls	r3, [pc, #8]	@ (8013494 <rmw_namespace_validation_result_string+0x10>)
 801348a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801348e:	4802      	ldrhi	r0, [pc, #8]	@ (8013498 <rmw_namespace_validation_result_string+0x14>)
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop
 8013494:	08019270 	.word	0x08019270
 8013498:	0801887c 	.word	0x0801887c

0801349c <rmw_validate_node_name>:
 801349c:	2800      	cmp	r0, #0
 801349e:	d037      	beq.n	8013510 <rmw_validate_node_name+0x74>
 80134a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134a2:	460e      	mov	r6, r1
 80134a4:	2900      	cmp	r1, #0
 80134a6:	d035      	beq.n	8013514 <rmw_validate_node_name+0x78>
 80134a8:	4617      	mov	r7, r2
 80134aa:	4604      	mov	r4, r0
 80134ac:	f7ec ff10 	bl	80002d0 <strlen>
 80134b0:	b1d8      	cbz	r0, 80134ea <rmw_validate_node_name+0x4e>
 80134b2:	1e63      	subs	r3, r4, #1
 80134b4:	1819      	adds	r1, r3, r0
 80134b6:	461a      	mov	r2, r3
 80134b8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80134bc:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 80134c0:	f02e 0c20 	bic.w	ip, lr, #32
 80134c4:	2d09      	cmp	r5, #9
 80134c6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80134ca:	d915      	bls.n	80134f8 <rmw_validate_node_name+0x5c>
 80134cc:	f1bc 0f19 	cmp.w	ip, #25
 80134d0:	d912      	bls.n	80134f8 <rmw_validate_node_name+0x5c>
 80134d2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80134d6:	d00f      	beq.n	80134f8 <rmw_validate_node_name+0x5c>
 80134d8:	2302      	movs	r3, #2
 80134da:	6033      	str	r3, [r6, #0]
 80134dc:	b11f      	cbz	r7, 80134e6 <rmw_validate_node_name+0x4a>
 80134de:	f1c4 0401 	rsb	r4, r4, #1
 80134e2:	4414      	add	r4, r2
 80134e4:	603c      	str	r4, [r7, #0]
 80134e6:	2000      	movs	r0, #0
 80134e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ea:	2301      	movs	r3, #1
 80134ec:	6033      	str	r3, [r6, #0]
 80134ee:	2f00      	cmp	r7, #0
 80134f0:	d0f9      	beq.n	80134e6 <rmw_validate_node_name+0x4a>
 80134f2:	2300      	movs	r3, #0
 80134f4:	603b      	str	r3, [r7, #0]
 80134f6:	e7f6      	b.n	80134e6 <rmw_validate_node_name+0x4a>
 80134f8:	4299      	cmp	r1, r3
 80134fa:	d1dc      	bne.n	80134b6 <rmw_validate_node_name+0x1a>
 80134fc:	7823      	ldrb	r3, [r4, #0]
 80134fe:	4a0c      	ldr	r2, [pc, #48]	@ (8013530 <rmw_validate_node_name+0x94>)
 8013500:	5cd3      	ldrb	r3, [r2, r3]
 8013502:	f013 0304 	ands.w	r3, r3, #4
 8013506:	d10e      	bne.n	8013526 <rmw_validate_node_name+0x8a>
 8013508:	28ff      	cmp	r0, #255	@ 0xff
 801350a:	d805      	bhi.n	8013518 <rmw_validate_node_name+0x7c>
 801350c:	6033      	str	r3, [r6, #0]
 801350e:	e7ea      	b.n	80134e6 <rmw_validate_node_name+0x4a>
 8013510:	200b      	movs	r0, #11
 8013512:	4770      	bx	lr
 8013514:	200b      	movs	r0, #11
 8013516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013518:	2304      	movs	r3, #4
 801351a:	6033      	str	r3, [r6, #0]
 801351c:	2f00      	cmp	r7, #0
 801351e:	d0e2      	beq.n	80134e6 <rmw_validate_node_name+0x4a>
 8013520:	23fe      	movs	r3, #254	@ 0xfe
 8013522:	603b      	str	r3, [r7, #0]
 8013524:	e7df      	b.n	80134e6 <rmw_validate_node_name+0x4a>
 8013526:	2303      	movs	r3, #3
 8013528:	6033      	str	r3, [r6, #0]
 801352a:	2f00      	cmp	r7, #0
 801352c:	d1e1      	bne.n	80134f2 <rmw_validate_node_name+0x56>
 801352e:	e7da      	b.n	80134e6 <rmw_validate_node_name+0x4a>
 8013530:	080194db 	.word	0x080194db

08013534 <rmw_node_name_validation_result_string>:
 8013534:	2804      	cmp	r0, #4
 8013536:	bf9a      	itte	ls
 8013538:	4b02      	ldrls	r3, [pc, #8]	@ (8013544 <rmw_node_name_validation_result_string+0x10>)
 801353a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801353e:	4802      	ldrhi	r0, [pc, #8]	@ (8013548 <rmw_node_name_validation_result_string+0x14>)
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	08019290 	.word	0x08019290
 8013548:	08018a24 	.word	0x08018a24

0801354c <get_memory>:
 801354c:	4603      	mov	r3, r0
 801354e:	6840      	ldr	r0, [r0, #4]
 8013550:	b158      	cbz	r0, 801356a <get_memory+0x1e>
 8013552:	6842      	ldr	r2, [r0, #4]
 8013554:	605a      	str	r2, [r3, #4]
 8013556:	b10a      	cbz	r2, 801355c <get_memory+0x10>
 8013558:	2100      	movs	r1, #0
 801355a:	6011      	str	r1, [r2, #0]
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	6042      	str	r2, [r0, #4]
 8013560:	b102      	cbz	r2, 8013564 <get_memory+0x18>
 8013562:	6010      	str	r0, [r2, #0]
 8013564:	2200      	movs	r2, #0
 8013566:	6002      	str	r2, [r0, #0]
 8013568:	6018      	str	r0, [r3, #0]
 801356a:	4770      	bx	lr

0801356c <put_memory>:
 801356c:	680b      	ldr	r3, [r1, #0]
 801356e:	b10b      	cbz	r3, 8013574 <put_memory+0x8>
 8013570:	684a      	ldr	r2, [r1, #4]
 8013572:	605a      	str	r2, [r3, #4]
 8013574:	684a      	ldr	r2, [r1, #4]
 8013576:	b102      	cbz	r2, 801357a <put_memory+0xe>
 8013578:	6013      	str	r3, [r2, #0]
 801357a:	6803      	ldr	r3, [r0, #0]
 801357c:	428b      	cmp	r3, r1
 801357e:	6843      	ldr	r3, [r0, #4]
 8013580:	bf08      	it	eq
 8013582:	6002      	streq	r2, [r0, #0]
 8013584:	604b      	str	r3, [r1, #4]
 8013586:	b103      	cbz	r3, 801358a <put_memory+0x1e>
 8013588:	6019      	str	r1, [r3, #0]
 801358a:	2300      	movs	r3, #0
 801358c:	600b      	str	r3, [r1, #0]
 801358e:	6041      	str	r1, [r0, #4]
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop

08013594 <rmw_destroy_client>:
 8013594:	b570      	push	{r4, r5, r6, lr}
 8013596:	b128      	cbz	r0, 80135a4 <rmw_destroy_client+0x10>
 8013598:	4604      	mov	r4, r0
 801359a:	6800      	ldr	r0, [r0, #0]
 801359c:	460d      	mov	r5, r1
 801359e:	f7f7 fa67 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 80135a2:	b910      	cbnz	r0, 80135aa <rmw_destroy_client+0x16>
 80135a4:	2401      	movs	r4, #1
 80135a6:	4620      	mov	r0, r4
 80135a8:	bd70      	pop	{r4, r5, r6, pc}
 80135aa:	6863      	ldr	r3, [r4, #4]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d0f9      	beq.n	80135a4 <rmw_destroy_client+0x10>
 80135b0:	2d00      	cmp	r5, #0
 80135b2:	d0f7      	beq.n	80135a4 <rmw_destroy_client+0x10>
 80135b4:	6828      	ldr	r0, [r5, #0]
 80135b6:	f7f7 fa5b 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 80135ba:	2800      	cmp	r0, #0
 80135bc:	d0f2      	beq.n	80135a4 <rmw_destroy_client+0x10>
 80135be:	686e      	ldr	r6, [r5, #4]
 80135c0:	2e00      	cmp	r6, #0
 80135c2:	d0ef      	beq.n	80135a4 <rmw_destroy_client+0x10>
 80135c4:	6864      	ldr	r4, [r4, #4]
 80135c6:	6932      	ldr	r2, [r6, #16]
 80135c8:	6920      	ldr	r0, [r4, #16]
 80135ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135d2:	6819      	ldr	r1, [r3, #0]
 80135d4:	f002 faac 	bl	8015b30 <uxr_buffer_cancel_data>
 80135d8:	4602      	mov	r2, r0
 80135da:	6920      	ldr	r0, [r4, #16]
 80135dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80135e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80135e4:	f7f7 f9be 	bl	800a964 <run_xrce_session>
 80135e8:	6920      	ldr	r0, [r4, #16]
 80135ea:	6932      	ldr	r2, [r6, #16]
 80135ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135f4:	6819      	ldr	r1, [r3, #0]
 80135f6:	f7f8 fe63 	bl	800c2c0 <uxr_buffer_delete_entity>
 80135fa:	4602      	mov	r2, r0
 80135fc:	6920      	ldr	r0, [r4, #16]
 80135fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013602:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013606:	f7f7 f9ad 	bl	800a964 <run_xrce_session>
 801360a:	f080 0401 	eor.w	r4, r0, #1
 801360e:	b2e4      	uxtb	r4, r4
 8013610:	4628      	mov	r0, r5
 8013612:	0064      	lsls	r4, r4, #1
 8013614:	f7f7 f888 	bl	800a728 <rmw_uxrce_fini_client_memory>
 8013618:	e7c5      	b.n	80135a6 <rmw_destroy_client+0x12>
 801361a:	bf00      	nop

0801361c <rmw_get_gid_for_client>:
 801361c:	b1a8      	cbz	r0, 801364a <rmw_get_gid_for_client+0x2e>
 801361e:	b538      	push	{r3, r4, r5, lr}
 8013620:	460c      	mov	r4, r1
 8013622:	b1a1      	cbz	r1, 801364e <rmw_get_gid_for_client+0x32>
 8013624:	4605      	mov	r5, r0
 8013626:	6800      	ldr	r0, [r0, #0]
 8013628:	b120      	cbz	r0, 8013634 <rmw_get_gid_for_client+0x18>
 801362a:	4b0a      	ldr	r3, [pc, #40]	@ (8013654 <rmw_get_gid_for_client+0x38>)
 801362c:	6819      	ldr	r1, [r3, #0]
 801362e:	f7ec fdef 	bl	8000210 <strcmp>
 8013632:	b940      	cbnz	r0, 8013646 <rmw_get_gid_for_client+0x2a>
 8013634:	686b      	ldr	r3, [r5, #4]
 8013636:	2000      	movs	r0, #0
 8013638:	6060      	str	r0, [r4, #4]
 801363a:	60a0      	str	r0, [r4, #8]
 801363c:	60e0      	str	r0, [r4, #12]
 801363e:	6120      	str	r0, [r4, #16]
 8013640:	691b      	ldr	r3, [r3, #16]
 8013642:	6063      	str	r3, [r4, #4]
 8013644:	bd38      	pop	{r3, r4, r5, pc}
 8013646:	200c      	movs	r0, #12
 8013648:	bd38      	pop	{r3, r4, r5, pc}
 801364a:	200b      	movs	r0, #11
 801364c:	4770      	bx	lr
 801364e:	200b      	movs	r0, #11
 8013650:	bd38      	pop	{r3, r4, r5, pc}
 8013652:	bf00      	nop
 8013654:	080192a4 	.word	0x080192a4

08013658 <rmw_get_implementation_identifier>:
 8013658:	4b01      	ldr	r3, [pc, #4]	@ (8013660 <rmw_get_implementation_identifier+0x8>)
 801365a:	6818      	ldr	r0, [r3, #0]
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	080192a4 	.word	0x080192a4

08013664 <rmw_init_options_init>:
 8013664:	b084      	sub	sp, #16
 8013666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013668:	b083      	sub	sp, #12
 801366a:	ad09      	add	r5, sp, #36	@ 0x24
 801366c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013670:	b130      	cbz	r0, 8013680 <rmw_init_options_init+0x1c>
 8013672:	4604      	mov	r4, r0
 8013674:	4628      	mov	r0, r5
 8013676:	f7f6 fbdf 	bl	8009e38 <rcutils_allocator_is_valid>
 801367a:	b108      	cbz	r0, 8013680 <rmw_init_options_init+0x1c>
 801367c:	68a6      	ldr	r6, [r4, #8]
 801367e:	b12e      	cbz	r6, 801368c <rmw_init_options_init+0x28>
 8013680:	200b      	movs	r0, #11
 8013682:	b003      	add	sp, #12
 8013684:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013688:	b004      	add	sp, #16
 801368a:	4770      	bx	lr
 801368c:	2200      	movs	r2, #0
 801368e:	2300      	movs	r3, #0
 8013690:	e9c4 2300 	strd	r2, r3, [r4]
 8013694:	4b20      	ldr	r3, [pc, #128]	@ (8013718 <rmw_init_options_init+0xb4>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	60a3      	str	r3, [r4, #8]
 801369a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801369c:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 80136a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136a4:	466f      	mov	r7, sp
 80136a6:	682b      	ldr	r3, [r5, #0]
 80136a8:	f8cc 3000 	str.w	r3, [ip]
 80136ac:	4638      	mov	r0, r7
 80136ae:	63a6      	str	r6, [r4, #56]	@ 0x38
 80136b0:	60e6      	str	r6, [r4, #12]
 80136b2:	f003 f8f7 	bl	80168a4 <rmw_get_default_security_options>
 80136b6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80136ba:	f104 0310 	add.w	r3, r4, #16
 80136be:	e883 0003 	stmia.w	r3, {r0, r1}
 80136c2:	2203      	movs	r2, #3
 80136c4:	4815      	ldr	r0, [pc, #84]	@ (801371c <rmw_init_options_init+0xb8>)
 80136c6:	4916      	ldr	r1, [pc, #88]	@ (8013720 <rmw_init_options_init+0xbc>)
 80136c8:	f7f6 ff6e 	bl	800a5a8 <rmw_uxrce_init_init_options_impl_memory>
 80136cc:	4813      	ldr	r0, [pc, #76]	@ (801371c <rmw_init_options_init+0xb8>)
 80136ce:	f7ff ff3d 	bl	801354c <get_memory>
 80136d2:	b1f0      	cbz	r0, 8013712 <rmw_init_options_init+0xae>
 80136d4:	4a13      	ldr	r2, [pc, #76]	@ (8013724 <rmw_init_options_init+0xc0>)
 80136d6:	6883      	ldr	r3, [r0, #8]
 80136d8:	6851      	ldr	r1, [r2, #4]
 80136da:	7810      	ldrb	r0, [r2, #0]
 80136dc:	6523      	str	r3, [r4, #80]	@ 0x50
 80136de:	7418      	strb	r0, [r3, #16]
 80136e0:	6159      	str	r1, [r3, #20]
 80136e2:	68d1      	ldr	r1, [r2, #12]
 80136e4:	61d9      	str	r1, [r3, #28]
 80136e6:	6911      	ldr	r1, [r2, #16]
 80136e8:	6219      	str	r1, [r3, #32]
 80136ea:	6951      	ldr	r1, [r2, #20]
 80136ec:	6892      	ldr	r2, [r2, #8]
 80136ee:	619a      	str	r2, [r3, #24]
 80136f0:	6259      	str	r1, [r3, #36]	@ 0x24
 80136f2:	f7fb f81d 	bl	800e730 <uxr_nanos>
 80136f6:	f003 fb8f 	bl	8016e18 <srand>
 80136fa:	f003 fbbb 	bl	8016e74 <rand>
 80136fe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013700:	6298      	str	r0, [r3, #40]	@ 0x28
 8013702:	2800      	cmp	r0, #0
 8013704:	d0f9      	beq.n	80136fa <rmw_init_options_init+0x96>
 8013706:	2000      	movs	r0, #0
 8013708:	b003      	add	sp, #12
 801370a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801370e:	b004      	add	sp, #16
 8013710:	4770      	bx	lr
 8013712:	2001      	movs	r0, #1
 8013714:	e7b5      	b.n	8013682 <rmw_init_options_init+0x1e>
 8013716:	bf00      	nop
 8013718:	080192a4 	.word	0x080192a4
 801371c:	2000a240 	.word	0x2000a240
 8013720:	2000a1bc 	.word	0x2000a1bc
 8013724:	2000a090 	.word	0x2000a090

08013728 <rmw_init_options_copy>:
 8013728:	2800      	cmp	r0, #0
 801372a:	d03e      	beq.n	80137aa <rmw_init_options_copy+0x82>
 801372c:	b570      	push	{r4, r5, r6, lr}
 801372e:	460d      	mov	r5, r1
 8013730:	b149      	cbz	r1, 8013746 <rmw_init_options_copy+0x1e>
 8013732:	4604      	mov	r4, r0
 8013734:	6880      	ldr	r0, [r0, #8]
 8013736:	b120      	cbz	r0, 8013742 <rmw_init_options_copy+0x1a>
 8013738:	4b21      	ldr	r3, [pc, #132]	@ (80137c0 <rmw_init_options_copy+0x98>)
 801373a:	6819      	ldr	r1, [r3, #0]
 801373c:	f7ec fd68 	bl	8000210 <strcmp>
 8013740:	bb78      	cbnz	r0, 80137a2 <rmw_init_options_copy+0x7a>
 8013742:	68ab      	ldr	r3, [r5, #8]
 8013744:	b11b      	cbz	r3, 801374e <rmw_init_options_copy+0x26>
 8013746:	f04f 0c0b 	mov.w	ip, #11
 801374a:	4660      	mov	r0, ip
 801374c:	bd70      	pop	{r4, r5, r6, pc}
 801374e:	2258      	movs	r2, #88	@ 0x58
 8013750:	4621      	mov	r1, r4
 8013752:	4628      	mov	r0, r5
 8013754:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8013758:	f003 ffe3 	bl	8017722 <memcpy>
 801375c:	4630      	mov	r0, r6
 801375e:	f7f6 fb6b 	bl	8009e38 <rcutils_allocator_is_valid>
 8013762:	2800      	cmp	r0, #0
 8013764:	d0ef      	beq.n	8013746 <rmw_init_options_copy+0x1e>
 8013766:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013768:	b138      	cbz	r0, 801377a <rmw_init_options_copy+0x52>
 801376a:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 801376e:	4631      	mov	r1, r6
 8013770:	f003 f864 	bl	801683c <rmw_enclave_options_copy>
 8013774:	4684      	mov	ip, r0
 8013776:	2800      	cmp	r0, #0
 8013778:	d1e7      	bne.n	801374a <rmw_init_options_copy+0x22>
 801377a:	4812      	ldr	r0, [pc, #72]	@ (80137c4 <rmw_init_options_copy+0x9c>)
 801377c:	f7ff fee6 	bl	801354c <get_memory>
 8013780:	b1b8      	cbz	r0, 80137b2 <rmw_init_options_copy+0x8a>
 8013782:	6883      	ldr	r3, [r0, #8]
 8013784:	652b      	str	r3, [r5, #80]	@ 0x50
 8013786:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8013788:	3510      	adds	r5, #16
 801378a:	f103 0410 	add.w	r4, r3, #16
 801378e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013792:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013796:	f04f 0c00 	mov.w	ip, #0
 801379a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801379e:	4660      	mov	r0, ip
 80137a0:	bd70      	pop	{r4, r5, r6, pc}
 80137a2:	f04f 0c0c 	mov.w	ip, #12
 80137a6:	4660      	mov	r0, ip
 80137a8:	bd70      	pop	{r4, r5, r6, pc}
 80137aa:	f04f 0c0b 	mov.w	ip, #11
 80137ae:	4660      	mov	r0, ip
 80137b0:	4770      	bx	lr
 80137b2:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80137b4:	4631      	mov	r1, r6
 80137b6:	f003 f863 	bl	8016880 <rmw_enclave_options_fini>
 80137ba:	f04f 0c01 	mov.w	ip, #1
 80137be:	e7c4      	b.n	801374a <rmw_init_options_copy+0x22>
 80137c0:	080192a4 	.word	0x080192a4
 80137c4:	2000a240 	.word	0x2000a240

080137c8 <rmw_init_options_fini>:
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d035      	beq.n	8013838 <rmw_init_options_fini+0x70>
 80137cc:	b530      	push	{r4, r5, lr}
 80137ce:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 80137d2:	b097      	sub	sp, #92	@ 0x5c
 80137d4:	4604      	mov	r4, r0
 80137d6:	4628      	mov	r0, r5
 80137d8:	f7f6 fb2e 	bl	8009e38 <rcutils_allocator_is_valid>
 80137dc:	b320      	cbz	r0, 8013828 <rmw_init_options_fini+0x60>
 80137de:	68a0      	ldr	r0, [r4, #8]
 80137e0:	b120      	cbz	r0, 80137ec <rmw_init_options_fini+0x24>
 80137e2:	4b16      	ldr	r3, [pc, #88]	@ (801383c <rmw_init_options_fini+0x74>)
 80137e4:	6819      	ldr	r1, [r3, #0]
 80137e6:	f7ec fd13 	bl	8000210 <strcmp>
 80137ea:	bb18      	cbnz	r0, 8013834 <rmw_init_options_fini+0x6c>
 80137ec:	4b14      	ldr	r3, [pc, #80]	@ (8013840 <rmw_init_options_fini+0x78>)
 80137ee:	6819      	ldr	r1, [r3, #0]
 80137f0:	b1e9      	cbz	r1, 801382e <rmw_init_options_fini+0x66>
 80137f2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80137f4:	e001      	b.n	80137fa <rmw_init_options_fini+0x32>
 80137f6:	6849      	ldr	r1, [r1, #4]
 80137f8:	b1c9      	cbz	r1, 801382e <rmw_init_options_fini+0x66>
 80137fa:	688b      	ldr	r3, [r1, #8]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d1fa      	bne.n	80137f6 <rmw_init_options_fini+0x2e>
 8013800:	480f      	ldr	r0, [pc, #60]	@ (8013840 <rmw_init_options_fini+0x78>)
 8013802:	f7ff feb3 	bl	801356c <put_memory>
 8013806:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013808:	b118      	cbz	r0, 8013812 <rmw_init_options_fini+0x4a>
 801380a:	4629      	mov	r1, r5
 801380c:	f003 f838 	bl	8016880 <rmw_enclave_options_fini>
 8013810:	b940      	cbnz	r0, 8013824 <rmw_init_options_fini+0x5c>
 8013812:	4668      	mov	r0, sp
 8013814:	f7ff fca6 	bl	8013164 <rmw_get_zero_initialized_init_options>
 8013818:	2258      	movs	r2, #88	@ 0x58
 801381a:	4669      	mov	r1, sp
 801381c:	4620      	mov	r0, r4
 801381e:	f003 ff80 	bl	8017722 <memcpy>
 8013822:	2000      	movs	r0, #0
 8013824:	b017      	add	sp, #92	@ 0x5c
 8013826:	bd30      	pop	{r4, r5, pc}
 8013828:	200b      	movs	r0, #11
 801382a:	b017      	add	sp, #92	@ 0x5c
 801382c:	bd30      	pop	{r4, r5, pc}
 801382e:	2001      	movs	r0, #1
 8013830:	b017      	add	sp, #92	@ 0x5c
 8013832:	bd30      	pop	{r4, r5, pc}
 8013834:	200c      	movs	r0, #12
 8013836:	e7f5      	b.n	8013824 <rmw_init_options_fini+0x5c>
 8013838:	200b      	movs	r0, #11
 801383a:	4770      	bx	lr
 801383c:	080192a4 	.word	0x080192a4
 8013840:	2000a240 	.word	0x2000a240

08013844 <rmw_init>:
 8013844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013848:	b083      	sub	sp, #12
 801384a:	2800      	cmp	r0, #0
 801384c:	f000 80d4 	beq.w	80139f8 <rmw_init+0x1b4>
 8013850:	460e      	mov	r6, r1
 8013852:	2900      	cmp	r1, #0
 8013854:	f000 80d0 	beq.w	80139f8 <rmw_init+0x1b4>
 8013858:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801385a:	4605      	mov	r5, r0
 801385c:	2b00      	cmp	r3, #0
 801385e:	f000 80cb 	beq.w	80139f8 <rmw_init+0x1b4>
 8013862:	4b77      	ldr	r3, [pc, #476]	@ (8013a40 <rmw_init+0x1fc>)
 8013864:	6880      	ldr	r0, [r0, #8]
 8013866:	681f      	ldr	r7, [r3, #0]
 8013868:	b128      	cbz	r0, 8013876 <rmw_init+0x32>
 801386a:	4639      	mov	r1, r7
 801386c:	f7ec fcd0 	bl	8000210 <strcmp>
 8013870:	2800      	cmp	r0, #0
 8013872:	f040 80d3 	bne.w	8013a1c <rmw_init+0x1d8>
 8013876:	e9d5 2300 	ldrd	r2, r3, [r5]
 801387a:	4c72      	ldr	r4, [pc, #456]	@ (8013a44 <rmw_init+0x200>)
 801387c:	4972      	ldr	r1, [pc, #456]	@ (8013a48 <rmw_init+0x204>)
 801387e:	4873      	ldr	r0, [pc, #460]	@ (8013a4c <rmw_init+0x208>)
 8013880:	60b7      	str	r7, [r6, #8]
 8013882:	e9c6 2300 	strd	r2, r3, [r6]
 8013886:	68eb      	ldr	r3, [r5, #12]
 8013888:	66b3      	str	r3, [r6, #104]	@ 0x68
 801388a:	2201      	movs	r2, #1
 801388c:	f7f6 fe2c 	bl	800a4e8 <rmw_uxrce_init_session_memory>
 8013890:	4620      	mov	r0, r4
 8013892:	496f      	ldr	r1, [pc, #444]	@ (8013a50 <rmw_init+0x20c>)
 8013894:	2204      	movs	r2, #4
 8013896:	f7f6 fe67 	bl	800a568 <rmw_uxrce_init_static_input_buffer_memory>
 801389a:	f04f 0800 	mov.w	r8, #0
 801389e:	486b      	ldr	r0, [pc, #428]	@ (8013a4c <rmw_init+0x208>)
 80138a0:	f884 800d 	strb.w	r8, [r4, #13]
 80138a4:	f7ff fe52 	bl	801354c <get_memory>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	f000 80b2 	beq.w	8013a12 <rmw_init+0x1ce>
 80138ae:	6884      	ldr	r4, [r0, #8]
 80138b0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80138b2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80138b4:	f890 c010 	ldrb.w	ip, [r0, #16]
 80138b8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80138bc:	9101      	str	r1, [sp, #4]
 80138be:	6a00      	ldr	r0, [r0, #32]
 80138c0:	9000      	str	r0, [sp, #0]
 80138c2:	f104 0910 	add.w	r9, r4, #16
 80138c6:	4661      	mov	r1, ip
 80138c8:	4648      	mov	r0, r9
 80138ca:	f7f8 ff4d 	bl	800c768 <uxr_set_custom_transport_callbacks>
 80138ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80138d2:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 80138d6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80138da:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80138de:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80138e2:	495c      	ldr	r1, [pc, #368]	@ (8013a54 <rmw_init+0x210>)
 80138e4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80138e8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80138ec:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80138f0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80138f4:	4858      	ldr	r0, [pc, #352]	@ (8013a58 <rmw_init+0x214>)
 80138f6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80138fa:	2201      	movs	r2, #1
 80138fc:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80138fe:	f7f6 fdd3 	bl	800a4a8 <rmw_uxrce_init_node_memory>
 8013902:	4956      	ldr	r1, [pc, #344]	@ (8013a5c <rmw_init+0x218>)
 8013904:	4856      	ldr	r0, [pc, #344]	@ (8013a60 <rmw_init+0x21c>)
 8013906:	2205      	movs	r2, #5
 8013908:	f7f6 fdae 	bl	800a468 <rmw_uxrce_init_subscription_memory>
 801390c:	4955      	ldr	r1, [pc, #340]	@ (8013a64 <rmw_init+0x220>)
 801390e:	4856      	ldr	r0, [pc, #344]	@ (8013a68 <rmw_init+0x224>)
 8013910:	220a      	movs	r2, #10
 8013912:	f7f6 fd89 	bl	800a428 <rmw_uxrce_init_publisher_memory>
 8013916:	4955      	ldr	r1, [pc, #340]	@ (8013a6c <rmw_init+0x228>)
 8013918:	4855      	ldr	r0, [pc, #340]	@ (8013a70 <rmw_init+0x22c>)
 801391a:	2201      	movs	r2, #1
 801391c:	f7f6 fd44 	bl	800a3a8 <rmw_uxrce_init_service_memory>
 8013920:	4954      	ldr	r1, [pc, #336]	@ (8013a74 <rmw_init+0x230>)
 8013922:	4855      	ldr	r0, [pc, #340]	@ (8013a78 <rmw_init+0x234>)
 8013924:	2201      	movs	r2, #1
 8013926:	f7f6 fd5f 	bl	800a3e8 <rmw_uxrce_init_client_memory>
 801392a:	4954      	ldr	r1, [pc, #336]	@ (8013a7c <rmw_init+0x238>)
 801392c:	4854      	ldr	r0, [pc, #336]	@ (8013a80 <rmw_init+0x23c>)
 801392e:	220f      	movs	r2, #15
 8013930:	f7f6 fdfa 	bl	800a528 <rmw_uxrce_init_topic_memory>
 8013934:	4953      	ldr	r1, [pc, #332]	@ (8013a84 <rmw_init+0x240>)
 8013936:	4854      	ldr	r0, [pc, #336]	@ (8013a88 <rmw_init+0x244>)
 8013938:	2203      	movs	r2, #3
 801393a:	f7f6 fe35 	bl	800a5a8 <rmw_uxrce_init_init_options_impl_memory>
 801393e:	4953      	ldr	r1, [pc, #332]	@ (8013a8c <rmw_init+0x248>)
 8013940:	4853      	ldr	r0, [pc, #332]	@ (8013a90 <rmw_init+0x24c>)
 8013942:	2204      	movs	r2, #4
 8013944:	f7f6 fe50 	bl	800a5e8 <rmw_uxrce_init_wait_set_memory>
 8013948:	4952      	ldr	r1, [pc, #328]	@ (8013a94 <rmw_init+0x250>)
 801394a:	4853      	ldr	r0, [pc, #332]	@ (8013a98 <rmw_init+0x254>)
 801394c:	2204      	movs	r2, #4
 801394e:	f7f6 fe6b 	bl	800a628 <rmw_uxrce_init_guard_condition_memory>
 8013952:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8013954:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8013956:	4642      	mov	r2, r8
 8013958:	f7f6 fd0e 	bl	800a378 <rmw_uxrce_transport_init>
 801395c:	4607      	mov	r7, r0
 801395e:	2800      	cmp	r0, #0
 8013960:	d161      	bne.n	8013a26 <rmw_init+0x1e2>
 8013962:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013964:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801396a:	4628      	mov	r0, r5
 801396c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8013970:	f7f9 f906 	bl	800cb80 <uxr_init_session>
 8013974:	4628      	mov	r0, r5
 8013976:	4949      	ldr	r1, [pc, #292]	@ (8013a9c <rmw_init+0x258>)
 8013978:	4622      	mov	r2, r4
 801397a:	f7f9 f925 	bl	800cbc8 <uxr_set_topic_callback>
 801397e:	4628      	mov	r0, r5
 8013980:	4947      	ldr	r1, [pc, #284]	@ (8013aa0 <rmw_init+0x25c>)
 8013982:	463a      	mov	r2, r7
 8013984:	f7f9 f91c 	bl	800cbc0 <uxr_set_status_callback>
 8013988:	4628      	mov	r0, r5
 801398a:	4946      	ldr	r1, [pc, #280]	@ (8013aa4 <rmw_init+0x260>)
 801398c:	463a      	mov	r2, r7
 801398e:	f7f9 f91f 	bl	800cbd0 <uxr_set_request_callback>
 8013992:	4628      	mov	r0, r5
 8013994:	4944      	ldr	r1, [pc, #272]	@ (8013aa8 <rmw_init+0x264>)
 8013996:	463a      	mov	r2, r7
 8013998:	f7f9 f91e 	bl	800cbd8 <uxr_set_reply_callback>
 801399c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80139a0:	2304      	movs	r3, #4
 80139a2:	0092      	lsls	r2, r2, #2
 80139a4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80139a8:	4628      	mov	r0, r5
 80139aa:	f7f9 f943 	bl	800cc34 <uxr_create_input_reliable_stream>
 80139ae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80139b2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80139b6:	2304      	movs	r3, #4
 80139b8:	0092      	lsls	r2, r2, #2
 80139ba:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80139be:	4628      	mov	r0, r5
 80139c0:	f7f9 f920 	bl	800cc04 <uxr_create_output_reliable_stream>
 80139c4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80139c8:	4628      	mov	r0, r5
 80139ca:	f7f9 f92d 	bl	800cc28 <uxr_create_input_best_effort_stream>
 80139ce:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80139d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80139d6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80139da:	3114      	adds	r1, #20
 80139dc:	4628      	mov	r0, r5
 80139de:	f7f9 f8ff 	bl	800cbe0 <uxr_create_output_best_effort_stream>
 80139e2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80139e6:	4628      	mov	r0, r5
 80139e8:	f7f9 fe72 	bl	800d6d0 <uxr_create_session>
 80139ec:	4605      	mov	r5, r0
 80139ee:	b140      	cbz	r0, 8013a02 <rmw_init+0x1be>
 80139f0:	4638      	mov	r0, r7
 80139f2:	b003      	add	sp, #12
 80139f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139f8:	270b      	movs	r7, #11
 80139fa:	4638      	mov	r0, r7
 80139fc:	b003      	add	sp, #12
 80139fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a02:	4648      	mov	r0, r9
 8013a04:	f7f8 fef2 	bl	800c7ec <uxr_close_custom_transport>
 8013a08:	4810      	ldr	r0, [pc, #64]	@ (8013a4c <rmw_init+0x208>)
 8013a0a:	4621      	mov	r1, r4
 8013a0c:	f7ff fdae 	bl	801356c <put_memory>
 8013a10:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8013a12:	2701      	movs	r7, #1
 8013a14:	4638      	mov	r0, r7
 8013a16:	b003      	add	sp, #12
 8013a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a1c:	270c      	movs	r7, #12
 8013a1e:	4638      	mov	r0, r7
 8013a20:	b003      	add	sp, #12
 8013a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a26:	4648      	mov	r0, r9
 8013a28:	f7f8 fee0 	bl	800c7ec <uxr_close_custom_transport>
 8013a2c:	4807      	ldr	r0, [pc, #28]	@ (8013a4c <rmw_init+0x208>)
 8013a2e:	4621      	mov	r1, r4
 8013a30:	f7ff fd9c 	bl	801356c <put_memory>
 8013a34:	4638      	mov	r0, r7
 8013a36:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8013a3a:	b003      	add	sp, #12
 8013a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a40:	080192a4 	.word	0x080192a4
 8013a44:	2000c350 	.word	0x2000c350
 8013a48:	2000d448 	.word	0x2000d448
 8013a4c:	2000e9f0 	.word	0x2000e9f0
 8013a50:	2000a250 	.word	0x2000a250
 8013a54:	2000d390 	.word	0x2000d390
 8013a58:	2000d434 	.word	0x2000d434
 8013a5c:	2000c6c8 	.word	0x2000c6c8
 8013a60:	2000cb00 	.word	0x2000cb00
 8013a64:	2000cb10 	.word	0x2000cb10
 8013a68:	2000d380 	.word	0x2000d380
 8013a6c:	2000c5f0 	.word	0x2000c5f0
 8013a70:	2000c6b8 	.word	0x2000c6b8
 8013a74:	2000c518 	.word	0x2000c518
 8013a78:	2000c5e0 	.word	0x2000c5e0
 8013a7c:	2000c360 	.word	0x2000c360
 8013a80:	2000c504 	.word	0x2000c504
 8013a84:	2000a1bc 	.word	0x2000a1bc
 8013a88:	2000a240 	.word	0x2000a240
 8013a8c:	2000a13c 	.word	0x2000a13c
 8013a90:	2000a1ac 	.word	0x2000a1ac
 8013a94:	2000a0ac 	.word	0x2000a0ac
 8013a98:	2000a12c 	.word	0x2000a12c
 8013a9c:	080168b5 	.word	0x080168b5
 8013aa0:	080168ad 	.word	0x080168ad
 8013aa4:	0801694d 	.word	0x0801694d
 8013aa8:	080169e9 	.word	0x080169e9

08013aac <rmw_context_fini>:
 8013aac:	4b17      	ldr	r3, [pc, #92]	@ (8013b0c <rmw_context_fini+0x60>)
 8013aae:	b570      	push	{r4, r5, r6, lr}
 8013ab0:	681c      	ldr	r4, [r3, #0]
 8013ab2:	4605      	mov	r5, r0
 8013ab4:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8013ab6:	b33c      	cbz	r4, 8013b08 <rmw_context_fini+0x5c>
 8013ab8:	2600      	movs	r6, #0
 8013aba:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 8013abe:	691a      	ldr	r2, [r3, #16]
 8013ac0:	4282      	cmp	r2, r0
 8013ac2:	d018      	beq.n	8013af6 <rmw_context_fini+0x4a>
 8013ac4:	2c00      	cmp	r4, #0
 8013ac6:	d1f8      	bne.n	8013aba <rmw_context_fini+0xe>
 8013ac8:	b188      	cbz	r0, 8013aee <rmw_context_fini+0x42>
 8013aca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ace:	789b      	ldrb	r3, [r3, #2]
 8013ad0:	2b01      	cmp	r3, #1
 8013ad2:	bf14      	ite	ne
 8013ad4:	210a      	movne	r1, #10
 8013ad6:	2100      	moveq	r1, #0
 8013ad8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013adc:	f7f9 fdd0 	bl	800d680 <uxr_delete_session_retries>
 8013ae0:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013ae2:	f7f6 fdc1 	bl	800a668 <rmw_uxrce_fini_session_memory>
 8013ae6:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013ae8:	3010      	adds	r0, #16
 8013aea:	f7f8 fe7f 	bl	800c7ec <uxr_close_custom_transport>
 8013aee:	2300      	movs	r3, #0
 8013af0:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8013af2:	4630      	mov	r0, r6
 8013af4:	bd70      	pop	{r4, r5, r6, pc}
 8013af6:	f103 0018 	add.w	r0, r3, #24
 8013afa:	f000 f911 	bl	8013d20 <rmw_destroy_node>
 8013afe:	4606      	mov	r6, r0
 8013b00:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013b02:	2c00      	cmp	r4, #0
 8013b04:	d1d9      	bne.n	8013aba <rmw_context_fini+0xe>
 8013b06:	e7df      	b.n	8013ac8 <rmw_context_fini+0x1c>
 8013b08:	4626      	mov	r6, r4
 8013b0a:	e7dd      	b.n	8013ac8 <rmw_context_fini+0x1c>
 8013b0c:	2000d434 	.word	0x2000d434

08013b10 <create_topic>:
 8013b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b14:	4604      	mov	r4, r0
 8013b16:	b084      	sub	sp, #16
 8013b18:	4824      	ldr	r0, [pc, #144]	@ (8013bac <create_topic+0x9c>)
 8013b1a:	460f      	mov	r7, r1
 8013b1c:	4616      	mov	r6, r2
 8013b1e:	f7ff fd15 	bl	801354c <get_memory>
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d03c      	beq.n	8013ba0 <create_topic+0x90>
 8013b26:	6923      	ldr	r3, [r4, #16]
 8013b28:	6885      	ldr	r5, [r0, #8]
 8013b2a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8013bb4 <create_topic+0xa4>
 8013b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013b32:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8013b36:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013b3a:	1c42      	adds	r2, r0, #1
 8013b3c:	2102      	movs	r1, #2
 8013b3e:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013b42:	f7f8 fe57 	bl	800c7f4 <uxr_object_id>
 8013b46:	223c      	movs	r2, #60	@ 0x3c
 8013b48:	6128      	str	r0, [r5, #16]
 8013b4a:	4641      	mov	r1, r8
 8013b4c:	4638      	mov	r0, r7
 8013b4e:	f7f6 ff75 	bl	800aa3c <generate_topic_name>
 8013b52:	b310      	cbz	r0, 8013b9a <create_topic+0x8a>
 8013b54:	4f16      	ldr	r7, [pc, #88]	@ (8013bb0 <create_topic+0xa0>)
 8013b56:	4630      	mov	r0, r6
 8013b58:	2264      	movs	r2, #100	@ 0x64
 8013b5a:	4639      	mov	r1, r7
 8013b5c:	f7f6 ff3e 	bl	800a9dc <generate_type_name>
 8013b60:	b1d8      	cbz	r0, 8013b9a <create_topic+0x8a>
 8013b62:	6920      	ldr	r0, [r4, #16]
 8013b64:	2306      	movs	r3, #6
 8013b66:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013b6a:	f8cd 8000 	str.w	r8, [sp]
 8013b6e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013b72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b76:	6811      	ldr	r1, [r2, #0]
 8013b78:	6963      	ldr	r3, [r4, #20]
 8013b7a:	692a      	ldr	r2, [r5, #16]
 8013b7c:	f7f8 fc1c 	bl	800c3b8 <uxr_buffer_create_topic_bin>
 8013b80:	4602      	mov	r2, r0
 8013b82:	6920      	ldr	r0, [r4, #16]
 8013b84:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013b88:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013b8c:	f7f6 feea 	bl	800a964 <run_xrce_session>
 8013b90:	b118      	cbz	r0, 8013b9a <create_topic+0x8a>
 8013b92:	4628      	mov	r0, r5
 8013b94:	b004      	add	sp, #16
 8013b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b9a:	4628      	mov	r0, r5
 8013b9c:	f7f6 fdda 	bl	800a754 <rmw_uxrce_fini_topic_memory>
 8013ba0:	2500      	movs	r5, #0
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	b004      	add	sp, #16
 8013ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013baa:	bf00      	nop
 8013bac:	2000c504 	.word	0x2000c504
 8013bb0:	2000ea20 	.word	0x2000ea20
 8013bb4:	2000ea84 	.word	0x2000ea84

08013bb8 <destroy_topic>:
 8013bb8:	b538      	push	{r3, r4, r5, lr}
 8013bba:	6984      	ldr	r4, [r0, #24]
 8013bbc:	b1d4      	cbz	r4, 8013bf4 <destroy_topic+0x3c>
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	6920      	ldr	r0, [r4, #16]
 8013bc2:	692a      	ldr	r2, [r5, #16]
 8013bc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013bc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013bcc:	6819      	ldr	r1, [r3, #0]
 8013bce:	f7f8 fb77 	bl	800c2c0 <uxr_buffer_delete_entity>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	6920      	ldr	r0, [r4, #16]
 8013bd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013bda:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013bde:	f7f6 fec1 	bl	800a964 <run_xrce_session>
 8013be2:	f080 0401 	eor.w	r4, r0, #1
 8013be6:	b2e4      	uxtb	r4, r4
 8013be8:	4628      	mov	r0, r5
 8013bea:	0064      	lsls	r4, r4, #1
 8013bec:	f7f6 fdb2 	bl	800a754 <rmw_uxrce_fini_topic_memory>
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	bd38      	pop	{r3, r4, r5, pc}
 8013bf4:	2401      	movs	r4, #1
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	bd38      	pop	{r3, r4, r5, pc}
 8013bfa:	bf00      	nop

08013bfc <create_node>:
 8013bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c00:	b083      	sub	sp, #12
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d063      	beq.n	8013cce <create_node+0xd2>
 8013c06:	4606      	mov	r6, r0
 8013c08:	4836      	ldr	r0, [pc, #216]	@ (8013ce4 <create_node+0xe8>)
 8013c0a:	460f      	mov	r7, r1
 8013c0c:	4690      	mov	r8, r2
 8013c0e:	461d      	mov	r5, r3
 8013c10:	f7ff fc9c 	bl	801354c <get_memory>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d05a      	beq.n	8013cce <create_node+0xd2>
 8013c18:	6884      	ldr	r4, [r0, #8]
 8013c1a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8013c1c:	6123      	str	r3, [r4, #16]
 8013c1e:	f7ff fd1b 	bl	8013658 <rmw_get_implementation_identifier>
 8013c22:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013c26:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8013c2a:	f8c4 9020 	str.w	r9, [r4, #32]
 8013c2e:	4630      	mov	r0, r6
 8013c30:	f7ec fb4e 	bl	80002d0 <strlen>
 8013c34:	1c42      	adds	r2, r0, #1
 8013c36:	2a3c      	cmp	r2, #60	@ 0x3c
 8013c38:	f104 0518 	add.w	r5, r4, #24
 8013c3c:	d844      	bhi.n	8013cc8 <create_node+0xcc>
 8013c3e:	4648      	mov	r0, r9
 8013c40:	4631      	mov	r1, r6
 8013c42:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8013c46:	f003 fd6c 	bl	8017722 <memcpy>
 8013c4a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8013c4e:	4638      	mov	r0, r7
 8013c50:	f7ec fb3e 	bl	80002d0 <strlen>
 8013c54:	1c42      	adds	r2, r0, #1
 8013c56:	2a3c      	cmp	r2, #60	@ 0x3c
 8013c58:	d836      	bhi.n	8013cc8 <create_node+0xcc>
 8013c5a:	4639      	mov	r1, r7
 8013c5c:	4648      	mov	r0, r9
 8013c5e:	f003 fd60 	bl	8017722 <memcpy>
 8013c62:	6923      	ldr	r3, [r4, #16]
 8013c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013c68:	2101      	movs	r1, #1
 8013c6a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8013c6e:	1842      	adds	r2, r0, r1
 8013c70:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8013c74:	f7f8 fdbe 	bl	800c7f4 <uxr_object_id>
 8013c78:	6160      	str	r0, [r4, #20]
 8013c7a:	783b      	ldrb	r3, [r7, #0]
 8013c7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c7e:	d128      	bne.n	8013cd2 <create_node+0xd6>
 8013c80:	787b      	ldrb	r3, [r7, #1]
 8013c82:	bb33      	cbnz	r3, 8013cd2 <create_node+0xd6>
 8013c84:	4a18      	ldr	r2, [pc, #96]	@ (8013ce8 <create_node+0xec>)
 8013c86:	4819      	ldr	r0, [pc, #100]	@ (8013cec <create_node+0xf0>)
 8013c88:	4633      	mov	r3, r6
 8013c8a:	213c      	movs	r1, #60	@ 0x3c
 8013c8c:	f003 fafa 	bl	8017284 <sniprintf>
 8013c90:	6920      	ldr	r0, [r4, #16]
 8013c92:	4916      	ldr	r1, [pc, #88]	@ (8013cec <create_node+0xf0>)
 8013c94:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013c98:	9100      	str	r1, [sp, #0]
 8013c9a:	2106      	movs	r1, #6
 8013c9c:	9101      	str	r1, [sp, #4]
 8013c9e:	6811      	ldr	r1, [r2, #0]
 8013ca0:	6962      	ldr	r2, [r4, #20]
 8013ca2:	fa1f f388 	uxth.w	r3, r8
 8013ca6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013caa:	f7f8 fb53 	bl	800c354 <uxr_buffer_create_participant_bin>
 8013cae:	4602      	mov	r2, r0
 8013cb0:	6920      	ldr	r0, [r4, #16]
 8013cb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013cb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013cba:	f7f6 fe53 	bl	800a964 <run_xrce_session>
 8013cbe:	b118      	cbz	r0, 8013cc8 <create_node+0xcc>
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	b003      	add	sp, #12
 8013cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cc8:	4628      	mov	r0, r5
 8013cca:	f7f6 fcd3 	bl	800a674 <rmw_uxrce_fini_node_memory>
 8013cce:	2500      	movs	r5, #0
 8013cd0:	e7f6      	b.n	8013cc0 <create_node+0xc4>
 8013cd2:	4a07      	ldr	r2, [pc, #28]	@ (8013cf0 <create_node+0xf4>)
 8013cd4:	9600      	str	r6, [sp, #0]
 8013cd6:	463b      	mov	r3, r7
 8013cd8:	213c      	movs	r1, #60	@ 0x3c
 8013cda:	4804      	ldr	r0, [pc, #16]	@ (8013cec <create_node+0xf0>)
 8013cdc:	f003 fad2 	bl	8017284 <sniprintf>
 8013ce0:	e7d6      	b.n	8013c90 <create_node+0x94>
 8013ce2:	bf00      	nop
 8013ce4:	2000d434 	.word	0x2000d434
 8013ce8:	08018664 	.word	0x08018664
 8013cec:	2000eac0 	.word	0x2000eac0
 8013cf0:	080187d0 	.word	0x080187d0

08013cf4 <rmw_create_node>:
 8013cf4:	b191      	cbz	r1, 8013d1c <rmw_create_node+0x28>
 8013cf6:	b410      	push	{r4}
 8013cf8:	4614      	mov	r4, r2
 8013cfa:	780a      	ldrb	r2, [r1, #0]
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	4608      	mov	r0, r1
 8013d00:	b142      	cbz	r2, 8013d14 <rmw_create_node+0x20>
 8013d02:	b13c      	cbz	r4, 8013d14 <rmw_create_node+0x20>
 8013d04:	7822      	ldrb	r2, [r4, #0]
 8013d06:	b12a      	cbz	r2, 8013d14 <rmw_create_node+0x20>
 8013d08:	4621      	mov	r1, r4
 8013d0a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8013d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d10:	f7ff bf74 	b.w	8013bfc <create_node>
 8013d14:	2000      	movs	r0, #0
 8013d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d1a:	4770      	bx	lr
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	4770      	bx	lr

08013d20 <rmw_destroy_node>:
 8013d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d22:	b328      	cbz	r0, 8013d70 <rmw_destroy_node+0x50>
 8013d24:	4607      	mov	r7, r0
 8013d26:	6800      	ldr	r0, [r0, #0]
 8013d28:	b120      	cbz	r0, 8013d34 <rmw_destroy_node+0x14>
 8013d2a:	4b36      	ldr	r3, [pc, #216]	@ (8013e04 <rmw_destroy_node+0xe4>)
 8013d2c:	6819      	ldr	r1, [r3, #0]
 8013d2e:	f7ec fa6f 	bl	8000210 <strcmp>
 8013d32:	b9e8      	cbnz	r0, 8013d70 <rmw_destroy_node+0x50>
 8013d34:	687d      	ldr	r5, [r7, #4]
 8013d36:	b1dd      	cbz	r5, 8013d70 <rmw_destroy_node+0x50>
 8013d38:	4b33      	ldr	r3, [pc, #204]	@ (8013e08 <rmw_destroy_node+0xe8>)
 8013d3a:	681c      	ldr	r4, [r3, #0]
 8013d3c:	2c00      	cmp	r4, #0
 8013d3e:	d05f      	beq.n	8013e00 <rmw_destroy_node+0xe0>
 8013d40:	2600      	movs	r6, #0
 8013d42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013d46:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8013d4a:	429d      	cmp	r5, r3
 8013d4c:	d013      	beq.n	8013d76 <rmw_destroy_node+0x56>
 8013d4e:	2c00      	cmp	r4, #0
 8013d50:	d1f7      	bne.n	8013d42 <rmw_destroy_node+0x22>
 8013d52:	4b2e      	ldr	r3, [pc, #184]	@ (8013e0c <rmw_destroy_node+0xec>)
 8013d54:	681c      	ldr	r4, [r3, #0]
 8013d56:	b1c4      	cbz	r4, 8013d8a <rmw_destroy_node+0x6a>
 8013d58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013d5c:	6a0b      	ldr	r3, [r1, #32]
 8013d5e:	429d      	cmp	r5, r3
 8013d60:	d1f9      	bne.n	8013d56 <rmw_destroy_node+0x36>
 8013d62:	317c      	adds	r1, #124	@ 0x7c
 8013d64:	4638      	mov	r0, r7
 8013d66:	f000 fad9 	bl	801431c <rmw_destroy_subscription>
 8013d6a:	2801      	cmp	r0, #1
 8013d6c:	4606      	mov	r6, r0
 8013d6e:	d1f2      	bne.n	8013d56 <rmw_destroy_node+0x36>
 8013d70:	2601      	movs	r6, #1
 8013d72:	4630      	mov	r0, r6
 8013d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d76:	3184      	adds	r1, #132	@ 0x84
 8013d78:	4638      	mov	r0, r7
 8013d7a:	f7f6 faab 	bl	800a2d4 <rmw_destroy_publisher>
 8013d7e:	2801      	cmp	r0, #1
 8013d80:	4606      	mov	r6, r0
 8013d82:	d0f5      	beq.n	8013d70 <rmw_destroy_node+0x50>
 8013d84:	2c00      	cmp	r4, #0
 8013d86:	d1dc      	bne.n	8013d42 <rmw_destroy_node+0x22>
 8013d88:	e7e3      	b.n	8013d52 <rmw_destroy_node+0x32>
 8013d8a:	4b21      	ldr	r3, [pc, #132]	@ (8013e10 <rmw_destroy_node+0xf0>)
 8013d8c:	681c      	ldr	r4, [r3, #0]
 8013d8e:	b16c      	cbz	r4, 8013dac <rmw_destroy_node+0x8c>
 8013d90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013d94:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013d96:	429d      	cmp	r5, r3
 8013d98:	d1f9      	bne.n	8013d8e <rmw_destroy_node+0x6e>
 8013d9a:	317c      	adds	r1, #124	@ 0x7c
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	f000 f98b 	bl	80140b8 <rmw_destroy_service>
 8013da2:	2801      	cmp	r0, #1
 8013da4:	4606      	mov	r6, r0
 8013da6:	d0e3      	beq.n	8013d70 <rmw_destroy_node+0x50>
 8013da8:	2c00      	cmp	r4, #0
 8013daa:	d1f1      	bne.n	8013d90 <rmw_destroy_node+0x70>
 8013dac:	4b19      	ldr	r3, [pc, #100]	@ (8013e14 <rmw_destroy_node+0xf4>)
 8013dae:	681c      	ldr	r4, [r3, #0]
 8013db0:	b16c      	cbz	r4, 8013dce <rmw_destroy_node+0xae>
 8013db2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013db6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013db8:	429d      	cmp	r5, r3
 8013dba:	d1f9      	bne.n	8013db0 <rmw_destroy_node+0x90>
 8013dbc:	317c      	adds	r1, #124	@ 0x7c
 8013dbe:	4638      	mov	r0, r7
 8013dc0:	f7ff fbe8 	bl	8013594 <rmw_destroy_client>
 8013dc4:	2801      	cmp	r0, #1
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	d0d2      	beq.n	8013d70 <rmw_destroy_node+0x50>
 8013dca:	2c00      	cmp	r4, #0
 8013dcc:	d1f1      	bne.n	8013db2 <rmw_destroy_node+0x92>
 8013dce:	6928      	ldr	r0, [r5, #16]
 8013dd0:	696a      	ldr	r2, [r5, #20]
 8013dd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013dd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013dda:	6819      	ldr	r1, [r3, #0]
 8013ddc:	f7f8 fa70 	bl	800c2c0 <uxr_buffer_delete_entity>
 8013de0:	4602      	mov	r2, r0
 8013de2:	6928      	ldr	r0, [r5, #16]
 8013de4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013de8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013dec:	f7f6 fdba 	bl	800a964 <run_xrce_session>
 8013df0:	2800      	cmp	r0, #0
 8013df2:	bf08      	it	eq
 8013df4:	2602      	moveq	r6, #2
 8013df6:	4638      	mov	r0, r7
 8013df8:	f7f6 fc3c 	bl	800a674 <rmw_uxrce_fini_node_memory>
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e00:	4626      	mov	r6, r4
 8013e02:	e7a6      	b.n	8013d52 <rmw_destroy_node+0x32>
 8013e04:	080192a4 	.word	0x080192a4
 8013e08:	2000d380 	.word	0x2000d380
 8013e0c:	2000cb00 	.word	0x2000cb00
 8013e10:	2000c6b8 	.word	0x2000c6b8
 8013e14:	2000c5e0 	.word	0x2000c5e0

08013e18 <rmw_node_get_graph_guard_condition>:
 8013e18:	6843      	ldr	r3, [r0, #4]
 8013e1a:	6918      	ldr	r0, [r3, #16]
 8013e1c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop

08013e24 <rmw_send_request>:
 8013e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e28:	4604      	mov	r4, r0
 8013e2a:	6800      	ldr	r0, [r0, #0]
 8013e2c:	b08a      	sub	sp, #40	@ 0x28
 8013e2e:	460e      	mov	r6, r1
 8013e30:	4615      	mov	r5, r2
 8013e32:	b128      	cbz	r0, 8013e40 <rmw_send_request+0x1c>
 8013e34:	4b1e      	ldr	r3, [pc, #120]	@ (8013eb0 <rmw_send_request+0x8c>)
 8013e36:	6819      	ldr	r1, [r3, #0]
 8013e38:	f7ec f9ea 	bl	8000210 <strcmp>
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	d133      	bne.n	8013ea8 <rmw_send_request+0x84>
 8013e40:	6864      	ldr	r4, [r4, #4]
 8013e42:	6963      	ldr	r3, [r4, #20]
 8013e44:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 8013e46:	689b      	ldr	r3, [r3, #8]
 8013e48:	4798      	blx	r3
 8013e4a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013e4e:	4630      	mov	r0, r6
 8013e50:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013e54:	4798      	blx	r3
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	9000      	str	r0, [sp, #0]
 8013e5a:	6922      	ldr	r2, [r4, #16]
 8013e5c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013e5e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013e62:	ab02      	add	r3, sp, #8
 8013e64:	f7fa fd06 	bl	800e874 <uxr_prepare_output_stream>
 8013e68:	2300      	movs	r3, #0
 8013e6a:	6028      	str	r0, [r5, #0]
 8013e6c:	606b      	str	r3, [r5, #4]
 8013e6e:	b190      	cbz	r0, 8013e96 <rmw_send_request+0x72>
 8013e70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013e74:	a902      	add	r1, sp, #8
 8013e76:	4630      	mov	r0, r6
 8013e78:	4798      	blx	r3
 8013e7a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013e7e:	6938      	ldr	r0, [r7, #16]
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	d00c      	beq.n	8013e9e <rmw_send_request+0x7a>
 8013e84:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8013e86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e8a:	f7f9 fa81 	bl	800d390 <uxr_run_session_until_confirm_delivery>
 8013e8e:	2000      	movs	r0, #0
 8013e90:	b00a      	add	sp, #40	@ 0x28
 8013e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e96:	2001      	movs	r0, #1
 8013e98:	b00a      	add	sp, #40	@ 0x28
 8013e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ea2:	f7f8 fedd 	bl	800cc60 <uxr_flash_output_streams>
 8013ea6:	e7f2      	b.n	8013e8e <rmw_send_request+0x6a>
 8013ea8:	200c      	movs	r0, #12
 8013eaa:	b00a      	add	sp, #40	@ 0x28
 8013eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb0:	080192a4 	.word	0x080192a4

08013eb4 <rmw_take_request>:
 8013eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013eb8:	4605      	mov	r5, r0
 8013eba:	6800      	ldr	r0, [r0, #0]
 8013ebc:	b089      	sub	sp, #36	@ 0x24
 8013ebe:	460c      	mov	r4, r1
 8013ec0:	4690      	mov	r8, r2
 8013ec2:	461e      	mov	r6, r3
 8013ec4:	b128      	cbz	r0, 8013ed2 <rmw_take_request+0x1e>
 8013ec6:	4b28      	ldr	r3, [pc, #160]	@ (8013f68 <rmw_take_request+0xb4>)
 8013ec8:	6819      	ldr	r1, [r3, #0]
 8013eca:	f7ec f9a1 	bl	8000210 <strcmp>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	d146      	bne.n	8013f60 <rmw_take_request+0xac>
 8013ed2:	b10e      	cbz	r6, 8013ed8 <rmw_take_request+0x24>
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	7033      	strb	r3, [r6, #0]
 8013ed8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013edc:	f7f6 fcc4 	bl	800a868 <rmw_uxrce_clean_expired_static_input_buffer>
 8013ee0:	4648      	mov	r0, r9
 8013ee2:	f7f6 fc9b 	bl	800a81c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013ee6:	4607      	mov	r7, r0
 8013ee8:	b3b0      	cbz	r0, 8013f58 <rmw_take_request+0xa4>
 8013eea:	6885      	ldr	r5, [r0, #8]
 8013eec:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013ef0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013ef4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013ef8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013efc:	7423      	strb	r3, [r4, #16]
 8013efe:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8013f02:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013f06:	74e2      	strb	r2, [r4, #19]
 8013f08:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013f0c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013f10:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013f14:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013f18:	61e1      	str	r1, [r4, #28]
 8013f1a:	6162      	str	r2, [r4, #20]
 8013f1c:	61a3      	str	r3, [r4, #24]
 8013f1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013f22:	689b      	ldr	r3, [r3, #8]
 8013f24:	4798      	blx	r3
 8013f26:	6844      	ldr	r4, [r0, #4]
 8013f28:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013f2c:	f105 0110 	add.w	r1, r5, #16
 8013f30:	4668      	mov	r0, sp
 8013f32:	f7f8 f8cb 	bl	800c0cc <ucdr_init_buffer>
 8013f36:	68e3      	ldr	r3, [r4, #12]
 8013f38:	4641      	mov	r1, r8
 8013f3a:	4668      	mov	r0, sp
 8013f3c:	4798      	blx	r3
 8013f3e:	4639      	mov	r1, r7
 8013f40:	4604      	mov	r4, r0
 8013f42:	480a      	ldr	r0, [pc, #40]	@ (8013f6c <rmw_take_request+0xb8>)
 8013f44:	f7ff fb12 	bl	801356c <put_memory>
 8013f48:	b106      	cbz	r6, 8013f4c <rmw_take_request+0x98>
 8013f4a:	7034      	strb	r4, [r6, #0]
 8013f4c:	f084 0001 	eor.w	r0, r4, #1
 8013f50:	b2c0      	uxtb	r0, r0
 8013f52:	b009      	add	sp, #36	@ 0x24
 8013f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f58:	2001      	movs	r0, #1
 8013f5a:	b009      	add	sp, #36	@ 0x24
 8013f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f60:	200c      	movs	r0, #12
 8013f62:	b009      	add	sp, #36	@ 0x24
 8013f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f68:	080192a4 	.word	0x080192a4
 8013f6c:	2000c350 	.word	0x2000c350

08013f70 <rmw_send_response>:
 8013f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f72:	4605      	mov	r5, r0
 8013f74:	6800      	ldr	r0, [r0, #0]
 8013f76:	b091      	sub	sp, #68	@ 0x44
 8013f78:	460c      	mov	r4, r1
 8013f7a:	4616      	mov	r6, r2
 8013f7c:	b128      	cbz	r0, 8013f8a <rmw_send_response+0x1a>
 8013f7e:	4b28      	ldr	r3, [pc, #160]	@ (8014020 <rmw_send_response+0xb0>)
 8013f80:	6819      	ldr	r1, [r3, #0]
 8013f82:	f7ec f945 	bl	8000210 <strcmp>
 8013f86:	2800      	cmp	r0, #0
 8013f88:	d141      	bne.n	801400e <rmw_send_response+0x9e>
 8013f8a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8013f8e:	9306      	str	r3, [sp, #24]
 8013f90:	4623      	mov	r3, r4
 8013f92:	9207      	str	r2, [sp, #28]
 8013f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f98:	686d      	ldr	r5, [r5, #4]
 8013f9a:	789b      	ldrb	r3, [r3, #2]
 8013f9c:	68a1      	ldr	r1, [r4, #8]
 8013f9e:	f88d 2017 	strb.w	r2, [sp, #23]
 8013fa2:	f88d 3016 	strb.w	r3, [sp, #22]
 8013fa6:	68e2      	ldr	r2, [r4, #12]
 8013fa8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013fac:	6860      	ldr	r0, [r4, #4]
 8013fae:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013fb2:	ab02      	add	r3, sp, #8
 8013fb4:	c307      	stmia	r3!, {r0, r1, r2}
 8013fb6:	696b      	ldr	r3, [r5, #20]
 8013fb8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8013fba:	68db      	ldr	r3, [r3, #12]
 8013fbc:	4798      	blx	r3
 8013fbe:	6844      	ldr	r4, [r0, #4]
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	6923      	ldr	r3, [r4, #16]
 8013fc4:	4798      	blx	r3
 8013fc6:	f100 0318 	add.w	r3, r0, #24
 8013fca:	6938      	ldr	r0, [r7, #16]
 8013fcc:	9300      	str	r3, [sp, #0]
 8013fce:	692a      	ldr	r2, [r5, #16]
 8013fd0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8013fd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013fd6:	ab08      	add	r3, sp, #32
 8013fd8:	f7fa fc4c 	bl	800e874 <uxr_prepare_output_stream>
 8013fdc:	b910      	cbnz	r0, 8013fe4 <rmw_send_response+0x74>
 8013fde:	2001      	movs	r0, #1
 8013fe0:	b011      	add	sp, #68	@ 0x44
 8013fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fe4:	a902      	add	r1, sp, #8
 8013fe6:	a808      	add	r0, sp, #32
 8013fe8:	f7fb fd68 	bl	800fabc <uxr_serialize_SampleIdentity>
 8013fec:	68a3      	ldr	r3, [r4, #8]
 8013fee:	a908      	add	r1, sp, #32
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	4798      	blx	r3
 8013ff4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013ff8:	6938      	ldr	r0, [r7, #16]
 8013ffa:	2b01      	cmp	r3, #1
 8013ffc:	d00a      	beq.n	8014014 <rmw_send_response+0xa4>
 8013ffe:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014000:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014004:	f7f9 f9c4 	bl	800d390 <uxr_run_session_until_confirm_delivery>
 8014008:	2000      	movs	r0, #0
 801400a:	b011      	add	sp, #68	@ 0x44
 801400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801400e:	200c      	movs	r0, #12
 8014010:	b011      	add	sp, #68	@ 0x44
 8014012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014014:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014018:	f7f8 fe22 	bl	800cc60 <uxr_flash_output_streams>
 801401c:	e7f4      	b.n	8014008 <rmw_send_response+0x98>
 801401e:	bf00      	nop
 8014020:	080192a4 	.word	0x080192a4

08014024 <rmw_take_response>:
 8014024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014028:	4604      	mov	r4, r0
 801402a:	6800      	ldr	r0, [r0, #0]
 801402c:	b088      	sub	sp, #32
 801402e:	4688      	mov	r8, r1
 8014030:	4617      	mov	r7, r2
 8014032:	461d      	mov	r5, r3
 8014034:	b120      	cbz	r0, 8014040 <rmw_take_response+0x1c>
 8014036:	4b1e      	ldr	r3, [pc, #120]	@ (80140b0 <rmw_take_response+0x8c>)
 8014038:	6819      	ldr	r1, [r3, #0]
 801403a:	f7ec f8e9 	bl	8000210 <strcmp>
 801403e:	bb78      	cbnz	r0, 80140a0 <rmw_take_response+0x7c>
 8014040:	b10d      	cbz	r5, 8014046 <rmw_take_response+0x22>
 8014042:	2300      	movs	r3, #0
 8014044:	702b      	strb	r3, [r5, #0]
 8014046:	6864      	ldr	r4, [r4, #4]
 8014048:	f7f6 fc0e 	bl	800a868 <rmw_uxrce_clean_expired_static_input_buffer>
 801404c:	4620      	mov	r0, r4
 801404e:	f7f6 fbe5 	bl	800a81c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014052:	4606      	mov	r6, r0
 8014054:	b340      	cbz	r0, 80140a8 <rmw_take_response+0x84>
 8014056:	6963      	ldr	r3, [r4, #20]
 8014058:	6884      	ldr	r4, [r0, #8]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014060:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014064:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014068:	4798      	blx	r3
 801406a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801406e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014072:	f104 0110 	add.w	r1, r4, #16
 8014076:	4668      	mov	r0, sp
 8014078:	f7f8 f828 	bl	800c0cc <ucdr_init_buffer>
 801407c:	4639      	mov	r1, r7
 801407e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014082:	4668      	mov	r0, sp
 8014084:	4798      	blx	r3
 8014086:	4631      	mov	r1, r6
 8014088:	4604      	mov	r4, r0
 801408a:	480a      	ldr	r0, [pc, #40]	@ (80140b4 <rmw_take_response+0x90>)
 801408c:	f7ff fa6e 	bl	801356c <put_memory>
 8014090:	b105      	cbz	r5, 8014094 <rmw_take_response+0x70>
 8014092:	702c      	strb	r4, [r5, #0]
 8014094:	f084 0001 	eor.w	r0, r4, #1
 8014098:	b2c0      	uxtb	r0, r0
 801409a:	b008      	add	sp, #32
 801409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140a0:	200c      	movs	r0, #12
 80140a2:	b008      	add	sp, #32
 80140a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140a8:	2001      	movs	r0, #1
 80140aa:	b008      	add	sp, #32
 80140ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b0:	080192a4 	.word	0x080192a4
 80140b4:	2000c350 	.word	0x2000c350

080140b8 <rmw_destroy_service>:
 80140b8:	b570      	push	{r4, r5, r6, lr}
 80140ba:	b128      	cbz	r0, 80140c8 <rmw_destroy_service+0x10>
 80140bc:	4604      	mov	r4, r0
 80140be:	6800      	ldr	r0, [r0, #0]
 80140c0:	460d      	mov	r5, r1
 80140c2:	f7f6 fcd5 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 80140c6:	b910      	cbnz	r0, 80140ce <rmw_destroy_service+0x16>
 80140c8:	2401      	movs	r4, #1
 80140ca:	4620      	mov	r0, r4
 80140cc:	bd70      	pop	{r4, r5, r6, pc}
 80140ce:	6863      	ldr	r3, [r4, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d0f9      	beq.n	80140c8 <rmw_destroy_service+0x10>
 80140d4:	2d00      	cmp	r5, #0
 80140d6:	d0f7      	beq.n	80140c8 <rmw_destroy_service+0x10>
 80140d8:	6828      	ldr	r0, [r5, #0]
 80140da:	f7f6 fcc9 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 80140de:	2800      	cmp	r0, #0
 80140e0:	d0f2      	beq.n	80140c8 <rmw_destroy_service+0x10>
 80140e2:	686e      	ldr	r6, [r5, #4]
 80140e4:	2e00      	cmp	r6, #0
 80140e6:	d0ef      	beq.n	80140c8 <rmw_destroy_service+0x10>
 80140e8:	6864      	ldr	r4, [r4, #4]
 80140ea:	6932      	ldr	r2, [r6, #16]
 80140ec:	6920      	ldr	r0, [r4, #16]
 80140ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80140f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80140f6:	6819      	ldr	r1, [r3, #0]
 80140f8:	f001 fd1a 	bl	8015b30 <uxr_buffer_cancel_data>
 80140fc:	4602      	mov	r2, r0
 80140fe:	6920      	ldr	r0, [r4, #16]
 8014100:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014104:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014108:	f7f6 fc2c 	bl	800a964 <run_xrce_session>
 801410c:	6920      	ldr	r0, [r4, #16]
 801410e:	6932      	ldr	r2, [r6, #16]
 8014110:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014114:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014118:	6819      	ldr	r1, [r3, #0]
 801411a:	f7f8 f8d1 	bl	800c2c0 <uxr_buffer_delete_entity>
 801411e:	4602      	mov	r2, r0
 8014120:	6920      	ldr	r0, [r4, #16]
 8014122:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014126:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801412a:	f7f6 fc1b 	bl	800a964 <run_xrce_session>
 801412e:	f080 0401 	eor.w	r4, r0, #1
 8014132:	b2e4      	uxtb	r4, r4
 8014134:	4628      	mov	r0, r5
 8014136:	0064      	lsls	r4, r4, #1
 8014138:	f7f6 fae0 	bl	800a6fc <rmw_uxrce_fini_service_memory>
 801413c:	e7c5      	b.n	80140ca <rmw_destroy_service+0x12>
 801413e:	bf00      	nop

08014140 <rmw_create_subscription>:
 8014140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014144:	b08d      	sub	sp, #52	@ 0x34
 8014146:	2800      	cmp	r0, #0
 8014148:	f000 80d1 	beq.w	80142ee <rmw_create_subscription+0x1ae>
 801414c:	460f      	mov	r7, r1
 801414e:	2900      	cmp	r1, #0
 8014150:	f000 80cd 	beq.w	80142ee <rmw_create_subscription+0x1ae>
 8014154:	4604      	mov	r4, r0
 8014156:	6800      	ldr	r0, [r0, #0]
 8014158:	4615      	mov	r5, r2
 801415a:	461e      	mov	r6, r3
 801415c:	f7f6 fc88 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 8014160:	2800      	cmp	r0, #0
 8014162:	f000 80c4 	beq.w	80142ee <rmw_create_subscription+0x1ae>
 8014166:	2d00      	cmp	r5, #0
 8014168:	f000 80c1 	beq.w	80142ee <rmw_create_subscription+0x1ae>
 801416c:	782b      	ldrb	r3, [r5, #0]
 801416e:	2b00      	cmp	r3, #0
 8014170:	f000 80bd 	beq.w	80142ee <rmw_create_subscription+0x1ae>
 8014174:	2e00      	cmp	r6, #0
 8014176:	f000 80ba 	beq.w	80142ee <rmw_create_subscription+0x1ae>
 801417a:	485e      	ldr	r0, [pc, #376]	@ (80142f4 <rmw_create_subscription+0x1b4>)
 801417c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014180:	f7ff f9e4 	bl	801354c <get_memory>
 8014184:	2800      	cmp	r0, #0
 8014186:	f000 80b2 	beq.w	80142ee <rmw_create_subscription+0x1ae>
 801418a:	6884      	ldr	r4, [r0, #8]
 801418c:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8014190:	f7ff fa62 	bl	8013658 <rmw_get_implementation_identifier>
 8014194:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8014198:	67e0      	str	r0, [r4, #124]	@ 0x7c
 801419a:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 801419e:	4628      	mov	r0, r5
 80141a0:	f7ec f896 	bl	80002d0 <strlen>
 80141a4:	3001      	adds	r0, #1
 80141a6:	283c      	cmp	r0, #60	@ 0x3c
 80141a8:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 80141ac:	f200 8098 	bhi.w	80142e0 <rmw_create_subscription+0x1a0>
 80141b0:	4a51      	ldr	r2, [pc, #324]	@ (80142f8 <rmw_create_subscription+0x1b8>)
 80141b2:	462b      	mov	r3, r5
 80141b4:	213c      	movs	r1, #60	@ 0x3c
 80141b6:	4650      	mov	r0, sl
 80141b8:	f003 f864 	bl	8017284 <sniprintf>
 80141bc:	4631      	mov	r1, r6
 80141be:	f8c4 9020 	str.w	r9, [r4, #32]
 80141c2:	2250      	movs	r2, #80	@ 0x50
 80141c4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80141c8:	f003 faab 	bl	8017722 <memcpy>
 80141cc:	494b      	ldr	r1, [pc, #300]	@ (80142fc <rmw_create_subscription+0x1bc>)
 80141ce:	4638      	mov	r0, r7
 80141d0:	f7f6 fc5c 	bl	800aa8c <get_message_typesupport_handle>
 80141d4:	2800      	cmp	r0, #0
 80141d6:	f000 8083 	beq.w	80142e0 <rmw_create_subscription+0x1a0>
 80141da:	6842      	ldr	r2, [r0, #4]
 80141dc:	61a2      	str	r2, [r4, #24]
 80141de:	2a00      	cmp	r2, #0
 80141e0:	d07e      	beq.n	80142e0 <rmw_create_subscription+0x1a0>
 80141e2:	4629      	mov	r1, r5
 80141e4:	4633      	mov	r3, r6
 80141e6:	4648      	mov	r0, r9
 80141e8:	f7ff fc92 	bl	8013b10 <create_topic>
 80141ec:	61e0      	str	r0, [r4, #28]
 80141ee:	2800      	cmp	r0, #0
 80141f0:	d07a      	beq.n	80142e8 <rmw_create_subscription+0x1a8>
 80141f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80141f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80141fa:	2104      	movs	r1, #4
 80141fc:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8014200:	1c42      	adds	r2, r0, #1
 8014202:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8014206:	f7f8 faf5 	bl	800c7f4 <uxr_object_id>
 801420a:	6120      	str	r0, [r4, #16]
 801420c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014210:	2506      	movs	r5, #6
 8014212:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8014216:	9500      	str	r5, [sp, #0]
 8014218:	6819      	ldr	r1, [r3, #0]
 801421a:	6922      	ldr	r2, [r4, #16]
 801421c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014224:	f7f8 f92a 	bl	800c47c <uxr_buffer_create_subscriber_bin>
 8014228:	4602      	mov	r2, r0
 801422a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801422e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014232:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014236:	f7f6 fb95 	bl	800a964 <run_xrce_session>
 801423a:	2800      	cmp	r0, #0
 801423c:	d050      	beq.n	80142e0 <rmw_create_subscription+0x1a0>
 801423e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014246:	4629      	mov	r1, r5
 8014248:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801424c:	1c42      	adds	r2, r0, #1
 801424e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8014252:	f7f8 facf 	bl	800c7f4 <uxr_object_id>
 8014256:	af08      	add	r7, sp, #32
 8014258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801425c:	69e3      	ldr	r3, [r4, #28]
 801425e:	6160      	str	r0, [r4, #20]
 8014260:	4631      	mov	r1, r6
 8014262:	4638      	mov	r0, r7
 8014264:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8014268:	9305      	str	r3, [sp, #20]
 801426a:	f7f6 fb9b 	bl	800a9a4 <convert_qos_profile>
 801426e:	9503      	str	r5, [sp, #12]
 8014270:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014274:	9b05      	ldr	r3, [sp, #20]
 8014276:	9001      	str	r0, [sp, #4]
 8014278:	f8ad 1008 	strh.w	r1, [sp, #8]
 801427c:	691b      	ldr	r3, [r3, #16]
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8014284:	f8db 1000 	ldr.w	r1, [fp]
 8014288:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801428c:	f7f8 f98a 	bl	800c5a4 <uxr_buffer_create_datareader_bin>
 8014290:	4602      	mov	r2, r0
 8014292:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014296:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801429a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801429e:	f7f6 fb61 	bl	800a964 <run_xrce_session>
 80142a2:	b1e8      	cbz	r0, 80142e0 <rmw_create_subscription+0x1a0>
 80142a4:	7a33      	ldrb	r3, [r6, #8]
 80142a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80142aa:	2b02      	cmp	r3, #2
 80142ac:	bf0c      	ite	eq
 80142ae:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80142b2:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80142b6:	9307      	str	r3, [sp, #28]
 80142b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80142bc:	2200      	movs	r2, #0
 80142be:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80142c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80142c4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	6962      	ldr	r2, [r4, #20]
 80142cc:	9b07      	ldr	r3, [sp, #28]
 80142ce:	6809      	ldr	r1, [r1, #0]
 80142d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80142d4:	f001 fbf4 	bl	8015ac0 <uxr_buffer_request_data>
 80142d8:	4640      	mov	r0, r8
 80142da:	b00d      	add	sp, #52	@ 0x34
 80142dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e0:	69e0      	ldr	r0, [r4, #28]
 80142e2:	b108      	cbz	r0, 80142e8 <rmw_create_subscription+0x1a8>
 80142e4:	f7f6 fa36 	bl	800a754 <rmw_uxrce_fini_topic_memory>
 80142e8:	4640      	mov	r0, r8
 80142ea:	f7f6 f9f1 	bl	800a6d0 <rmw_uxrce_fini_subscription_memory>
 80142ee:	f04f 0800 	mov.w	r8, #0
 80142f2:	e7f1      	b.n	80142d8 <rmw_create_subscription+0x198>
 80142f4:	2000cb00 	.word	0x2000cb00
 80142f8:	08018664 	.word	0x08018664
 80142fc:	08018630 	.word	0x08018630

08014300 <rmw_subscription_get_actual_qos>:
 8014300:	b508      	push	{r3, lr}
 8014302:	4603      	mov	r3, r0
 8014304:	b140      	cbz	r0, 8014318 <rmw_subscription_get_actual_qos+0x18>
 8014306:	4608      	mov	r0, r1
 8014308:	b131      	cbz	r1, 8014318 <rmw_subscription_get_actual_qos+0x18>
 801430a:	6859      	ldr	r1, [r3, #4]
 801430c:	2250      	movs	r2, #80	@ 0x50
 801430e:	3128      	adds	r1, #40	@ 0x28
 8014310:	f003 fa07 	bl	8017722 <memcpy>
 8014314:	2000      	movs	r0, #0
 8014316:	bd08      	pop	{r3, pc}
 8014318:	200b      	movs	r0, #11
 801431a:	bd08      	pop	{r3, pc}

0801431c <rmw_destroy_subscription>:
 801431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014320:	b128      	cbz	r0, 801432e <rmw_destroy_subscription+0x12>
 8014322:	4604      	mov	r4, r0
 8014324:	6800      	ldr	r0, [r0, #0]
 8014326:	460d      	mov	r5, r1
 8014328:	f7f6 fba2 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 801432c:	b918      	cbnz	r0, 8014336 <rmw_destroy_subscription+0x1a>
 801432e:	2401      	movs	r4, #1
 8014330:	4620      	mov	r0, r4
 8014332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014336:	6863      	ldr	r3, [r4, #4]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d0f8      	beq.n	801432e <rmw_destroy_subscription+0x12>
 801433c:	2d00      	cmp	r5, #0
 801433e:	d0f6      	beq.n	801432e <rmw_destroy_subscription+0x12>
 8014340:	6828      	ldr	r0, [r5, #0]
 8014342:	f7f6 fb95 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 8014346:	2800      	cmp	r0, #0
 8014348:	d0f1      	beq.n	801432e <rmw_destroy_subscription+0x12>
 801434a:	686c      	ldr	r4, [r5, #4]
 801434c:	2c00      	cmp	r4, #0
 801434e:	d0ee      	beq.n	801432e <rmw_destroy_subscription+0x12>
 8014350:	6a26      	ldr	r6, [r4, #32]
 8014352:	6962      	ldr	r2, [r4, #20]
 8014354:	6930      	ldr	r0, [r6, #16]
 8014356:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801435a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801435e:	6819      	ldr	r1, [r3, #0]
 8014360:	f001 fbe6 	bl	8015b30 <uxr_buffer_cancel_data>
 8014364:	4602      	mov	r2, r0
 8014366:	6930      	ldr	r0, [r6, #16]
 8014368:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801436c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014370:	f7f6 faf8 	bl	800a964 <run_xrce_session>
 8014374:	69e0      	ldr	r0, [r4, #28]
 8014376:	f7ff fc1f 	bl	8013bb8 <destroy_topic>
 801437a:	6a23      	ldr	r3, [r4, #32]
 801437c:	6962      	ldr	r2, [r4, #20]
 801437e:	6918      	ldr	r0, [r3, #16]
 8014380:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014384:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014388:	6819      	ldr	r1, [r3, #0]
 801438a:	f7f7 ff99 	bl	800c2c0 <uxr_buffer_delete_entity>
 801438e:	6a23      	ldr	r3, [r4, #32]
 8014390:	6922      	ldr	r2, [r4, #16]
 8014392:	4680      	mov	r8, r0
 8014394:	6918      	ldr	r0, [r3, #16]
 8014396:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801439a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801439e:	6819      	ldr	r1, [r3, #0]
 80143a0:	f7f7 ff8e 	bl	800c2c0 <uxr_buffer_delete_entity>
 80143a4:	4607      	mov	r7, r0
 80143a6:	6930      	ldr	r0, [r6, #16]
 80143a8:	4642      	mov	r2, r8
 80143aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80143ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80143b2:	f7f6 fad7 	bl	800a964 <run_xrce_session>
 80143b6:	4604      	mov	r4, r0
 80143b8:	6930      	ldr	r0, [r6, #16]
 80143ba:	463a      	mov	r2, r7
 80143bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80143c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80143c4:	f7f6 face 	bl	800a964 <run_xrce_session>
 80143c8:	4004      	ands	r4, r0
 80143ca:	f084 0401 	eor.w	r4, r4, #1
 80143ce:	b2e4      	uxtb	r4, r4
 80143d0:	4628      	mov	r0, r5
 80143d2:	0064      	lsls	r4, r4, #1
 80143d4:	f7f6 f97c 	bl	800a6d0 <rmw_uxrce_fini_subscription_memory>
 80143d8:	e7aa      	b.n	8014330 <rmw_destroy_subscription+0x14>
 80143da:	bf00      	nop

080143dc <rmw_take_with_info>:
 80143dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143de:	4604      	mov	r4, r0
 80143e0:	6800      	ldr	r0, [r0, #0]
 80143e2:	b089      	sub	sp, #36	@ 0x24
 80143e4:	460f      	mov	r7, r1
 80143e6:	4615      	mov	r5, r2
 80143e8:	b128      	cbz	r0, 80143f6 <rmw_take_with_info+0x1a>
 80143ea:	4b23      	ldr	r3, [pc, #140]	@ (8014478 <rmw_take_with_info+0x9c>)
 80143ec:	6819      	ldr	r1, [r3, #0]
 80143ee:	f7eb ff0f 	bl	8000210 <strcmp>
 80143f2:	2800      	cmp	r0, #0
 80143f4:	d13d      	bne.n	8014472 <rmw_take_with_info+0x96>
 80143f6:	6864      	ldr	r4, [r4, #4]
 80143f8:	b1fd      	cbz	r5, 801443a <rmw_take_with_info+0x5e>
 80143fa:	2300      	movs	r3, #0
 80143fc:	702b      	strb	r3, [r5, #0]
 80143fe:	f7f6 fa33 	bl	800a868 <rmw_uxrce_clean_expired_static_input_buffer>
 8014402:	4620      	mov	r0, r4
 8014404:	f7f6 fa0a 	bl	800a81c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014408:	4606      	mov	r6, r0
 801440a:	b1e8      	cbz	r0, 8014448 <rmw_take_with_info+0x6c>
 801440c:	6881      	ldr	r1, [r0, #8]
 801440e:	4668      	mov	r0, sp
 8014410:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014414:	3110      	adds	r1, #16
 8014416:	f7f7 fe59 	bl	800c0cc <ucdr_init_buffer>
 801441a:	69a3      	ldr	r3, [r4, #24]
 801441c:	4639      	mov	r1, r7
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	4668      	mov	r0, sp
 8014422:	4798      	blx	r3
 8014424:	4631      	mov	r1, r6
 8014426:	4604      	mov	r4, r0
 8014428:	4814      	ldr	r0, [pc, #80]	@ (801447c <rmw_take_with_info+0xa0>)
 801442a:	f7ff f89f 	bl	801356c <put_memory>
 801442e:	702c      	strb	r4, [r5, #0]
 8014430:	f084 0001 	eor.w	r0, r4, #1
 8014434:	b2c0      	uxtb	r0, r0
 8014436:	b009      	add	sp, #36	@ 0x24
 8014438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801443a:	f7f6 fa15 	bl	800a868 <rmw_uxrce_clean_expired_static_input_buffer>
 801443e:	4620      	mov	r0, r4
 8014440:	f7f6 f9ec 	bl	800a81c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014444:	4605      	mov	r5, r0
 8014446:	b910      	cbnz	r0, 801444e <rmw_take_with_info+0x72>
 8014448:	2001      	movs	r0, #1
 801444a:	b009      	add	sp, #36	@ 0x24
 801444c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801444e:	68a9      	ldr	r1, [r5, #8]
 8014450:	4668      	mov	r0, sp
 8014452:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014456:	3110      	adds	r1, #16
 8014458:	f7f7 fe38 	bl	800c0cc <ucdr_init_buffer>
 801445c:	69a3      	ldr	r3, [r4, #24]
 801445e:	4639      	mov	r1, r7
 8014460:	68db      	ldr	r3, [r3, #12]
 8014462:	4668      	mov	r0, sp
 8014464:	4798      	blx	r3
 8014466:	4629      	mov	r1, r5
 8014468:	4604      	mov	r4, r0
 801446a:	4804      	ldr	r0, [pc, #16]	@ (801447c <rmw_take_with_info+0xa0>)
 801446c:	f7ff f87e 	bl	801356c <put_memory>
 8014470:	e7de      	b.n	8014430 <rmw_take_with_info+0x54>
 8014472:	200c      	movs	r0, #12
 8014474:	b009      	add	sp, #36	@ 0x24
 8014476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014478:	080192a4 	.word	0x080192a4
 801447c:	2000c350 	.word	0x2000c350

08014480 <rmw_wait>:
 8014480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014484:	b089      	sub	sp, #36	@ 0x24
 8014486:	4607      	mov	r7, r0
 8014488:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801448a:	460e      	mov	r6, r1
 801448c:	4698      	mov	r8, r3
 801448e:	4691      	mov	r9, r2
 8014490:	2a00      	cmp	r2, #0
 8014492:	f000 811e 	beq.w	80146d2 <rmw_wait+0x252>
 8014496:	2c00      	cmp	r4, #0
 8014498:	f000 80ef 	beq.w	801467a <rmw_wait+0x1fa>
 801449c:	4bb5      	ldr	r3, [pc, #724]	@ (8014774 <rmw_wait+0x2f4>)
 801449e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80144a0:	ad04      	add	r5, sp, #16
 80144a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80144a6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80144aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80144ae:	f7fe fe83 	bl	80131b8 <rmw_time_equal>
 80144b2:	2800      	cmp	r0, #0
 80144b4:	f000 811b 	beq.w	80146ee <rmw_wait+0x26e>
 80144b8:	f04f 35ff 	mov.w	r5, #4294967295
 80144bc:	f7f6 f9d4 	bl	800a868 <rmw_uxrce_clean_expired_static_input_buffer>
 80144c0:	4bad      	ldr	r3, [pc, #692]	@ (8014778 <rmw_wait+0x2f8>)
 80144c2:	681c      	ldr	r4, [r3, #0]
 80144c4:	b14c      	cbz	r4, 80144da <rmw_wait+0x5a>
 80144c6:	4623      	mov	r3, r4
 80144c8:	2100      	movs	r1, #0
 80144ca:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80144ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80144d2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1f7      	bne.n	80144ca <rmw_wait+0x4a>
 80144da:	f1b9 0f00 	cmp.w	r9, #0
 80144de:	d011      	beq.n	8014504 <rmw_wait+0x84>
 80144e0:	f8d9 1000 	ldr.w	r1, [r9]
 80144e4:	b171      	cbz	r1, 8014504 <rmw_wait+0x84>
 80144e6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80144ea:	2300      	movs	r3, #0
 80144ec:	2001      	movs	r0, #1
 80144ee:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80144f2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80144f4:	6912      	ldr	r2, [r2, #16]
 80144f6:	3301      	adds	r3, #1
 80144f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80144fc:	4299      	cmp	r1, r3
 80144fe:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014502:	d1f4      	bne.n	80144ee <rmw_wait+0x6e>
 8014504:	f1b8 0f00 	cmp.w	r8, #0
 8014508:	f000 8109 	beq.w	801471e <rmw_wait+0x29e>
 801450c:	f8d8 1000 	ldr.w	r1, [r8]
 8014510:	2900      	cmp	r1, #0
 8014512:	f000 8116 	beq.w	8014742 <rmw_wait+0x2c2>
 8014516:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801451a:	2300      	movs	r3, #0
 801451c:	2001      	movs	r0, #1
 801451e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014522:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014524:	6912      	ldr	r2, [r2, #16]
 8014526:	3301      	adds	r3, #1
 8014528:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801452c:	4299      	cmp	r1, r3
 801452e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014532:	d1f4      	bne.n	801451e <rmw_wait+0x9e>
 8014534:	2f00      	cmp	r7, #0
 8014536:	f000 8114 	beq.w	8014762 <rmw_wait+0x2e2>
 801453a:	6839      	ldr	r1, [r7, #0]
 801453c:	b171      	cbz	r1, 801455c <rmw_wait+0xdc>
 801453e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8014542:	2300      	movs	r3, #0
 8014544:	2001      	movs	r0, #1
 8014546:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801454a:	6a12      	ldr	r2, [r2, #32]
 801454c:	6912      	ldr	r2, [r2, #16]
 801454e:	3301      	adds	r3, #1
 8014550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014554:	4299      	cmp	r1, r3
 8014556:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801455a:	d1f4      	bne.n	8014546 <rmw_wait+0xc6>
 801455c:	b344      	cbz	r4, 80145b0 <rmw_wait+0x130>
 801455e:	4622      	mov	r2, r4
 8014560:	2300      	movs	r3, #0
 8014562:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014566:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801456a:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801456e:	440b      	add	r3, r1
 8014570:	b2db      	uxtb	r3, r3
 8014572:	2a00      	cmp	r2, #0
 8014574:	d1f5      	bne.n	8014562 <rmw_wait+0xe2>
 8014576:	2b00      	cmp	r3, #0
 8014578:	d075      	beq.n	8014666 <rmw_wait+0x1e6>
 801457a:	1c6a      	adds	r2, r5, #1
 801457c:	d00d      	beq.n	801459a <rmw_wait+0x11a>
 801457e:	ee07 5a90 	vmov	s15, r5
 8014582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014586:	ee07 3a90 	vmov	s15, r3
 801458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014592:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014596:	ee17 5a90 	vmov	r5, s15
 801459a:	68a0      	ldr	r0, [r4, #8]
 801459c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80145a0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	f040 808a 	bne.w	80146be <rmw_wait+0x23e>
 80145aa:	6864      	ldr	r4, [r4, #4]
 80145ac:	2c00      	cmp	r4, #0
 80145ae:	d1f4      	bne.n	801459a <rmw_wait+0x11a>
 80145b0:	f1b9 0f00 	cmp.w	r9, #0
 80145b4:	f000 80c3 	beq.w	801473e <rmw_wait+0x2be>
 80145b8:	f8d9 5000 	ldr.w	r5, [r9]
 80145bc:	b185      	cbz	r5, 80145e0 <rmw_wait+0x160>
 80145be:	2400      	movs	r4, #0
 80145c0:	4625      	mov	r5, r4
 80145c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80145c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80145ca:	f7f6 f927 	bl	800a81c <rmw_uxrce_find_static_input_buffer_by_owner>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d06d      	beq.n	80146ae <rmw_wait+0x22e>
 80145d2:	f8d9 3000 	ldr.w	r3, [r9]
 80145d6:	3401      	adds	r4, #1
 80145d8:	42a3      	cmp	r3, r4
 80145da:	f04f 0501 	mov.w	r5, #1
 80145de:	d8f0      	bhi.n	80145c2 <rmw_wait+0x142>
 80145e0:	f1b8 0f00 	cmp.w	r8, #0
 80145e4:	d012      	beq.n	801460c <rmw_wait+0x18c>
 80145e6:	f8d8 1000 	ldr.w	r1, [r8]
 80145ea:	2400      	movs	r4, #0
 80145ec:	b171      	cbz	r1, 801460c <rmw_wait+0x18c>
 80145ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80145f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80145f6:	f7f6 f911 	bl	800a81c <rmw_uxrce_find_static_input_buffer_by_owner>
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d047      	beq.n	801468e <rmw_wait+0x20e>
 80145fe:	f8d8 3000 	ldr.w	r3, [r8]
 8014602:	3401      	adds	r4, #1
 8014604:	42a3      	cmp	r3, r4
 8014606:	f04f 0501 	mov.w	r5, #1
 801460a:	d8f0      	bhi.n	80145ee <rmw_wait+0x16e>
 801460c:	b17f      	cbz	r7, 801462e <rmw_wait+0x1ae>
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	2400      	movs	r4, #0
 8014612:	b163      	cbz	r3, 801462e <rmw_wait+0x1ae>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801461a:	f7f6 f8ff 	bl	800a81c <rmw_uxrce_find_static_input_buffer_by_owner>
 801461e:	2800      	cmp	r0, #0
 8014620:	d03d      	beq.n	801469e <rmw_wait+0x21e>
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	3401      	adds	r4, #1
 8014626:	42a3      	cmp	r3, r4
 8014628:	f04f 0501 	mov.w	r5, #1
 801462c:	d8f2      	bhi.n	8014614 <rmw_wait+0x194>
 801462e:	b1a6      	cbz	r6, 801465a <rmw_wait+0x1da>
 8014630:	6834      	ldr	r4, [r6, #0]
 8014632:	b194      	cbz	r4, 801465a <rmw_wait+0x1da>
 8014634:	2300      	movs	r3, #0
 8014636:	461f      	mov	r7, r3
 8014638:	e004      	b.n	8014644 <rmw_wait+0x1c4>
 801463a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801463e:	3301      	adds	r3, #1
 8014640:	429c      	cmp	r4, r3
 8014642:	d00a      	beq.n	801465a <rmw_wait+0x1da>
 8014644:	6870      	ldr	r0, [r6, #4]
 8014646:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801464a:	7c0a      	ldrb	r2, [r1, #16]
 801464c:	2a00      	cmp	r2, #0
 801464e:	d0f4      	beq.n	801463a <rmw_wait+0x1ba>
 8014650:	3301      	adds	r3, #1
 8014652:	429c      	cmp	r4, r3
 8014654:	740f      	strb	r7, [r1, #16]
 8014656:	4615      	mov	r5, r2
 8014658:	d1f4      	bne.n	8014644 <rmw_wait+0x1c4>
 801465a:	f085 0001 	eor.w	r0, r5, #1
 801465e:	0040      	lsls	r0, r0, #1
 8014660:	b009      	add	sp, #36	@ 0x24
 8014662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014666:	68a0      	ldr	r0, [r4, #8]
 8014668:	2100      	movs	r1, #0
 801466a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801466e:	f7f8 fe55 	bl	800d31c <uxr_run_session_timeout>
 8014672:	6864      	ldr	r4, [r4, #4]
 8014674:	2c00      	cmp	r4, #0
 8014676:	d1f6      	bne.n	8014666 <rmw_wait+0x1e6>
 8014678:	e79a      	b.n	80145b0 <rmw_wait+0x130>
 801467a:	f7f6 f8f5 	bl	800a868 <rmw_uxrce_clean_expired_static_input_buffer>
 801467e:	4b3e      	ldr	r3, [pc, #248]	@ (8014778 <rmw_wait+0x2f8>)
 8014680:	681c      	ldr	r4, [r3, #0]
 8014682:	f04f 35ff 	mov.w	r5, #4294967295
 8014686:	2c00      	cmp	r4, #0
 8014688:	f47f af1d 	bne.w	80144c6 <rmw_wait+0x46>
 801468c:	e728      	b.n	80144e0 <rmw_wait+0x60>
 801468e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014692:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014696:	3401      	adds	r4, #1
 8014698:	429c      	cmp	r4, r3
 801469a:	d3a8      	bcc.n	80145ee <rmw_wait+0x16e>
 801469c:	e7b6      	b.n	801460c <rmw_wait+0x18c>
 801469e:	e9d7 3200 	ldrd	r3, r2, [r7]
 80146a2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80146a6:	3401      	adds	r4, #1
 80146a8:	42a3      	cmp	r3, r4
 80146aa:	d8b3      	bhi.n	8014614 <rmw_wait+0x194>
 80146ac:	e7bf      	b.n	801462e <rmw_wait+0x1ae>
 80146ae:	e9d9 3200 	ldrd	r3, r2, [r9]
 80146b2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80146b6:	3401      	adds	r4, #1
 80146b8:	42a3      	cmp	r3, r4
 80146ba:	d882      	bhi.n	80145c2 <rmw_wait+0x142>
 80146bc:	e790      	b.n	80145e0 <rmw_wait+0x160>
 80146be:	4629      	mov	r1, r5
 80146c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80146c4:	f7f8 fe44 	bl	800d350 <uxr_run_session_until_data>
 80146c8:	6864      	ldr	r4, [r4, #4]
 80146ca:	2c00      	cmp	r4, #0
 80146cc:	f47f af65 	bne.w	801459a <rmw_wait+0x11a>
 80146d0:	e76e      	b.n	80145b0 <rmw_wait+0x130>
 80146d2:	b1f3      	cbz	r3, 8014712 <rmw_wait+0x292>
 80146d4:	2c00      	cmp	r4, #0
 80146d6:	f47f aee1 	bne.w	801449c <rmw_wait+0x1c>
 80146da:	f7f6 f8c5 	bl	800a868 <rmw_uxrce_clean_expired_static_input_buffer>
 80146de:	4b26      	ldr	r3, [pc, #152]	@ (8014778 <rmw_wait+0x2f8>)
 80146e0:	681c      	ldr	r4, [r3, #0]
 80146e2:	f04f 35ff 	mov.w	r5, #4294967295
 80146e6:	2c00      	cmp	r4, #0
 80146e8:	f47f aeed 	bne.w	80144c6 <rmw_wait+0x46>
 80146ec:	e70a      	b.n	8014504 <rmw_wait+0x84>
 80146ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80146f2:	f7fe fdb5 	bl	8013260 <rmw_time_total_nsec>
 80146f6:	4a21      	ldr	r2, [pc, #132]	@ (801477c <rmw_wait+0x2fc>)
 80146f8:	2300      	movs	r3, #0
 80146fa:	f7eb fe41 	bl	8000380 <__aeabi_uldivmod>
 80146fe:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014702:	f171 0100 	sbcs.w	r1, r1, #0
 8014706:	4605      	mov	r5, r0
 8014708:	f6ff aed8 	blt.w	80144bc <rmw_wait+0x3c>
 801470c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8014710:	e6d4      	b.n	80144bc <rmw_wait+0x3c>
 8014712:	2800      	cmp	r0, #0
 8014714:	d1de      	bne.n	80146d4 <rmw_wait+0x254>
 8014716:	2900      	cmp	r1, #0
 8014718:	d1dc      	bne.n	80146d4 <rmw_wait+0x254>
 801471a:	4608      	mov	r0, r1
 801471c:	e7a0      	b.n	8014660 <rmw_wait+0x1e0>
 801471e:	2f00      	cmp	r7, #0
 8014720:	f47f af0b 	bne.w	801453a <rmw_wait+0xba>
 8014724:	2c00      	cmp	r4, #0
 8014726:	f47f af1a 	bne.w	801455e <rmw_wait+0xde>
 801472a:	f1b9 0f00 	cmp.w	r9, #0
 801472e:	d027      	beq.n	8014780 <rmw_wait+0x300>
 8014730:	f8d9 3000 	ldr.w	r3, [r9]
 8014734:	4625      	mov	r5, r4
 8014736:	2b00      	cmp	r3, #0
 8014738:	f47f af41 	bne.w	80145be <rmw_wait+0x13e>
 801473c:	e777      	b.n	801462e <rmw_wait+0x1ae>
 801473e:	464d      	mov	r5, r9
 8014740:	e74e      	b.n	80145e0 <rmw_wait+0x160>
 8014742:	2f00      	cmp	r7, #0
 8014744:	f47f aef9 	bne.w	801453a <rmw_wait+0xba>
 8014748:	2c00      	cmp	r4, #0
 801474a:	f47f af08 	bne.w	801455e <rmw_wait+0xde>
 801474e:	f1b9 0f00 	cmp.w	r9, #0
 8014752:	d015      	beq.n	8014780 <rmw_wait+0x300>
 8014754:	f8d9 3000 	ldr.w	r3, [r9]
 8014758:	2b00      	cmp	r3, #0
 801475a:	f47f af30 	bne.w	80145be <rmw_wait+0x13e>
 801475e:	2500      	movs	r5, #0
 8014760:	e743      	b.n	80145ea <rmw_wait+0x16a>
 8014762:	2c00      	cmp	r4, #0
 8014764:	f47f aefb 	bne.w	801455e <rmw_wait+0xde>
 8014768:	f1b9 0f00 	cmp.w	r9, #0
 801476c:	f47f af24 	bne.w	80145b8 <rmw_wait+0x138>
 8014770:	e7f5      	b.n	801475e <rmw_wait+0x2de>
 8014772:	bf00      	nop
 8014774:	08018440 	.word	0x08018440
 8014778:	2000e9f0 	.word	0x2000e9f0
 801477c:	000f4240 	.word	0x000f4240
 8014780:	464d      	mov	r5, r9
 8014782:	e754      	b.n	801462e <rmw_wait+0x1ae>

08014784 <rmw_create_wait_set>:
 8014784:	b508      	push	{r3, lr}
 8014786:	4803      	ldr	r0, [pc, #12]	@ (8014794 <rmw_create_wait_set+0x10>)
 8014788:	f7fe fee0 	bl	801354c <get_memory>
 801478c:	b108      	cbz	r0, 8014792 <rmw_create_wait_set+0xe>
 801478e:	6880      	ldr	r0, [r0, #8]
 8014790:	3010      	adds	r0, #16
 8014792:	bd08      	pop	{r3, pc}
 8014794:	2000a1ac 	.word	0x2000a1ac

08014798 <rmw_destroy_wait_set>:
 8014798:	b508      	push	{r3, lr}
 801479a:	4b08      	ldr	r3, [pc, #32]	@ (80147bc <rmw_destroy_wait_set+0x24>)
 801479c:	6819      	ldr	r1, [r3, #0]
 801479e:	b911      	cbnz	r1, 80147a6 <rmw_destroy_wait_set+0xe>
 80147a0:	e00a      	b.n	80147b8 <rmw_destroy_wait_set+0x20>
 80147a2:	6849      	ldr	r1, [r1, #4]
 80147a4:	b141      	cbz	r1, 80147b8 <rmw_destroy_wait_set+0x20>
 80147a6:	688b      	ldr	r3, [r1, #8]
 80147a8:	3310      	adds	r3, #16
 80147aa:	4298      	cmp	r0, r3
 80147ac:	d1f9      	bne.n	80147a2 <rmw_destroy_wait_set+0xa>
 80147ae:	4803      	ldr	r0, [pc, #12]	@ (80147bc <rmw_destroy_wait_set+0x24>)
 80147b0:	f7fe fedc 	bl	801356c <put_memory>
 80147b4:	2000      	movs	r0, #0
 80147b6:	bd08      	pop	{r3, pc}
 80147b8:	2001      	movs	r0, #1
 80147ba:	bd08      	pop	{r3, pc}
 80147bc:	2000a1ac 	.word	0x2000a1ac

080147c0 <rmw_uros_epoch_nanos>:
 80147c0:	4b05      	ldr	r3, [pc, #20]	@ (80147d8 <rmw_uros_epoch_nanos+0x18>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	b123      	cbz	r3, 80147d0 <rmw_uros_epoch_nanos+0x10>
 80147c6:	6898      	ldr	r0, [r3, #8]
 80147c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147cc:	f7f8 ba3e 	b.w	800cc4c <uxr_epoch_nanos>
 80147d0:	2000      	movs	r0, #0
 80147d2:	2100      	movs	r1, #0
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	2000e9f0 	.word	0x2000e9f0

080147dc <rosidl_runtime_c__int32__Sequence__init>:
 80147dc:	b1b0      	cbz	r0, 801480c <rosidl_runtime_c__int32__Sequence__init+0x30>
 80147de:	b530      	push	{r4, r5, lr}
 80147e0:	460d      	mov	r5, r1
 80147e2:	b087      	sub	sp, #28
 80147e4:	4604      	mov	r4, r0
 80147e6:	b931      	cbnz	r1, 80147f6 <rosidl_runtime_c__int32__Sequence__init+0x1a>
 80147e8:	4608      	mov	r0, r1
 80147ea:	e9c4 0500 	strd	r0, r5, [r4]
 80147ee:	60a5      	str	r5, [r4, #8]
 80147f0:	2001      	movs	r0, #1
 80147f2:	b007      	add	sp, #28
 80147f4:	bd30      	pop	{r4, r5, pc}
 80147f6:	a801      	add	r0, sp, #4
 80147f8:	f7f5 faf2 	bl	8009de0 <rcutils_get_default_allocator>
 80147fc:	9b01      	ldr	r3, [sp, #4]
 80147fe:	9905      	ldr	r1, [sp, #20]
 8014800:	00a8      	lsls	r0, r5, #2
 8014802:	4798      	blx	r3
 8014804:	2800      	cmp	r0, #0
 8014806:	d1f0      	bne.n	80147ea <rosidl_runtime_c__int32__Sequence__init+0xe>
 8014808:	2000      	movs	r0, #0
 801480a:	e7f2      	b.n	80147f2 <rosidl_runtime_c__int32__Sequence__init+0x16>
 801480c:	2000      	movs	r0, #0
 801480e:	4770      	bx	lr

08014810 <rosidl_runtime_c__int32__Sequence__fini>:
 8014810:	b188      	cbz	r0, 8014836 <rosidl_runtime_c__int32__Sequence__fini+0x26>
 8014812:	b510      	push	{r4, lr}
 8014814:	6803      	ldr	r3, [r0, #0]
 8014816:	b086      	sub	sp, #24
 8014818:	4604      	mov	r4, r0
 801481a:	b153      	cbz	r3, 8014832 <rosidl_runtime_c__int32__Sequence__fini+0x22>
 801481c:	a801      	add	r0, sp, #4
 801481e:	f7f5 fadf 	bl	8009de0 <rcutils_get_default_allocator>
 8014822:	9b02      	ldr	r3, [sp, #8]
 8014824:	9905      	ldr	r1, [sp, #20]
 8014826:	6820      	ldr	r0, [r4, #0]
 8014828:	4798      	blx	r3
 801482a:	2300      	movs	r3, #0
 801482c:	e9c4 3300 	strd	r3, r3, [r4]
 8014830:	60a3      	str	r3, [r4, #8]
 8014832:	b006      	add	sp, #24
 8014834:	bd10      	pop	{r4, pc}
 8014836:	4770      	bx	lr

08014838 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801483c:	6805      	ldr	r5, [r0, #0]
 801483e:	4604      	mov	r4, r0
 8014840:	4628      	mov	r0, r5
 8014842:	460e      	mov	r6, r1
 8014844:	f7eb fce4 	bl	8000210 <strcmp>
 8014848:	b308      	cbz	r0, 801488e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 801484a:	4b12      	ldr	r3, [pc, #72]	@ (8014894 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 801484c:	4628      	mov	r0, r5
 801484e:	6819      	ldr	r1, [r3, #0]
 8014850:	f7eb fcde 	bl	8000210 <strcmp>
 8014854:	4605      	mov	r5, r0
 8014856:	b980      	cbnz	r0, 801487a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8014858:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801485c:	f8d8 4000 	ldr.w	r4, [r8]
 8014860:	b1ac      	cbz	r4, 801488e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8014862:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014866:	3f04      	subs	r7, #4
 8014868:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801486c:	4631      	mov	r1, r6
 801486e:	f7eb fccf 	bl	8000210 <strcmp>
 8014872:	b128      	cbz	r0, 8014880 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8014874:	3501      	adds	r5, #1
 8014876:	42a5      	cmp	r5, r4
 8014878:	d1f6      	bne.n	8014868 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 801487a:	2000      	movs	r0, #0
 801487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014880:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014884:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801488c:	4718      	bx	r3
 801488e:	4620      	mov	r0, r4
 8014890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014894:	200001d0 	.word	0x200001d0

08014898 <std_msgs__msg__Int32MultiArray__get_type_hash>:
 8014898:	4800      	ldr	r0, [pc, #0]	@ (801489c <std_msgs__msg__Int32MultiArray__get_type_hash+0x4>)
 801489a:	4770      	bx	lr
 801489c:	200001d8 	.word	0x200001d8

080148a0 <std_msgs__msg__Int32MultiArray__get_type_description>:
 80148a0:	b570      	push	{r4, r5, r6, lr}
 80148a2:	4e0c      	ldr	r6, [pc, #48]	@ (80148d4 <std_msgs__msg__Int32MultiArray__get_type_description+0x34>)
 80148a4:	7835      	ldrb	r5, [r6, #0]
 80148a6:	b10d      	cbz	r5, 80148ac <std_msgs__msg__Int32MultiArray__get_type_description+0xc>
 80148a8:	480b      	ldr	r0, [pc, #44]	@ (80148d8 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 80148aa:	bd70      	pop	{r4, r5, r6, pc}
 80148ac:	4628      	mov	r0, r5
 80148ae:	f000 f853 	bl	8014958 <std_msgs__msg__MultiArrayDimension__get_type_description>
 80148b2:	300c      	adds	r0, #12
 80148b4:	c807      	ldmia	r0, {r0, r1, r2}
 80148b6:	4c09      	ldr	r4, [pc, #36]	@ (80148dc <std_msgs__msg__Int32MultiArray__get_type_description+0x3c>)
 80148b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80148bc:	4628      	mov	r0, r5
 80148be:	f000 f8f9 	bl	8014ab4 <std_msgs__msg__MultiArrayLayout__get_type_description>
 80148c2:	300c      	adds	r0, #12
 80148c4:	c807      	ldmia	r0, {r0, r1, r2}
 80148c6:	3418      	adds	r4, #24
 80148c8:	2301      	movs	r3, #1
 80148ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80148ce:	7033      	strb	r3, [r6, #0]
 80148d0:	4801      	ldr	r0, [pc, #4]	@ (80148d8 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 80148d2:	bd70      	pop	{r4, r5, r6, pc}
 80148d4:	2000eb69 	.word	0x2000eb69
 80148d8:	080192d8 	.word	0x080192d8
 80148dc:	200003d8 	.word	0x200003d8

080148e0 <std_msgs__msg__Int32MultiArray__get_type_description_sources>:
 80148e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e2:	4e17      	ldr	r6, [pc, #92]	@ (8014940 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x60>)
 80148e4:	7837      	ldrb	r7, [r6, #0]
 80148e6:	b10f      	cbz	r7, 80148ec <std_msgs__msg__Int32MultiArray__get_type_description_sources+0xc>
 80148e8:	4816      	ldr	r0, [pc, #88]	@ (8014944 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 80148ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ec:	4d16      	ldr	r5, [pc, #88]	@ (8014948 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x68>)
 80148ee:	4c17      	ldr	r4, [pc, #92]	@ (801494c <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x6c>)
 80148f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148f8:	682b      	ldr	r3, [r5, #0]
 80148fa:	4625      	mov	r5, r4
 80148fc:	4638      	mov	r0, r7
 80148fe:	f845 3b04 	str.w	r3, [r5], #4
 8014902:	f000 f835 	bl	8014970 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8014906:	4684      	mov	ip, r0
 8014908:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801490c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801490e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014914:	4638      	mov	r0, r7
 8014916:	f8dc 3000 	ldr.w	r3, [ip]
 801491a:	602b      	str	r3, [r5, #0]
 801491c:	f000 f8e2 	bl	8014ae4 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 8014920:	2301      	movs	r3, #1
 8014922:	4684      	mov	ip, r0
 8014924:	7033      	strb	r3, [r6, #0]
 8014926:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801492a:	3428      	adds	r4, #40	@ 0x28
 801492c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801492e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014934:	f8dc 3000 	ldr.w	r3, [ip]
 8014938:	4802      	ldr	r0, [pc, #8]	@ (8014944 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 801493a:	6023      	str	r3, [r4, #0]
 801493c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801493e:	bf00      	nop
 8014940:	2000eb68 	.word	0x2000eb68
 8014944:	080192a8 	.word	0x080192a8
 8014948:	080192b4 	.word	0x080192b4
 801494c:	2000eafc 	.word	0x2000eafc

08014950 <std_msgs__msg__MultiArrayDimension__get_type_hash>:
 8014950:	4800      	ldr	r0, [pc, #0]	@ (8014954 <std_msgs__msg__MultiArrayDimension__get_type_hash+0x4>)
 8014952:	4770      	bx	lr
 8014954:	20000504 	.word	0x20000504

08014958 <std_msgs__msg__MultiArrayDimension__get_type_description>:
 8014958:	4b03      	ldr	r3, [pc, #12]	@ (8014968 <std_msgs__msg__MultiArrayDimension__get_type_description+0x10>)
 801495a:	781a      	ldrb	r2, [r3, #0]
 801495c:	b90a      	cbnz	r2, 8014962 <std_msgs__msg__MultiArrayDimension__get_type_description+0xa>
 801495e:	2201      	movs	r2, #1
 8014960:	701a      	strb	r2, [r3, #0]
 8014962:	4802      	ldr	r0, [pc, #8]	@ (801496c <std_msgs__msg__MultiArrayDimension__get_type_description+0x14>)
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	2000eb91 	.word	0x2000eb91
 801496c:	0801932c 	.word	0x0801932c

08014970 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>:
 8014970:	4800      	ldr	r0, [pc, #0]	@ (8014974 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 8014972:	4770      	bx	lr
 8014974:	08019308 	.word	0x08019308

08014978 <std_msgs__msg__MultiArrayDimension__get_type_description_sources>:
 8014978:	4b09      	ldr	r3, [pc, #36]	@ (80149a0 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 801497a:	781a      	ldrb	r2, [r3, #0]
 801497c:	b96a      	cbnz	r2, 801499a <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x22>
 801497e:	b430      	push	{r4, r5}
 8014980:	4d08      	ldr	r5, [pc, #32]	@ (80149a4 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 8014982:	4c09      	ldr	r4, [pc, #36]	@ (80149a8 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 8014984:	2201      	movs	r2, #1
 8014986:	701a      	strb	r2, [r3, #0]
 8014988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801498a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801498c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801498e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014990:	682b      	ldr	r3, [r5, #0]
 8014992:	4806      	ldr	r0, [pc, #24]	@ (80149ac <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	bc30      	pop	{r4, r5}
 8014998:	4770      	bx	lr
 801499a:	4804      	ldr	r0, [pc, #16]	@ (80149ac <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 801499c:	4770      	bx	lr
 801499e:	bf00      	nop
 80149a0:	2000eb90 	.word	0x2000eb90
 80149a4:	08019308 	.word	0x08019308
 80149a8:	2000eb6c 	.word	0x2000eb6c
 80149ac:	080192fc 	.word	0x080192fc

080149b0 <std_msgs__msg__MultiArrayDimension__init>:
 80149b0:	b150      	cbz	r0, 80149c8 <std_msgs__msg__MultiArrayDimension__init+0x18>
 80149b2:	b510      	push	{r4, lr}
 80149b4:	4604      	mov	r4, r0
 80149b6:	f002 f899 	bl	8016aec <rosidl_runtime_c__String__init>
 80149ba:	b100      	cbz	r0, 80149be <std_msgs__msg__MultiArrayDimension__init+0xe>
 80149bc:	bd10      	pop	{r4, pc}
 80149be:	4620      	mov	r0, r4
 80149c0:	f002 f8ae 	bl	8016b20 <rosidl_runtime_c__String__fini>
 80149c4:	2000      	movs	r0, #0
 80149c6:	bd10      	pop	{r4, pc}
 80149c8:	2000      	movs	r0, #0
 80149ca:	4770      	bx	lr

080149cc <std_msgs__msg__MultiArrayDimension__fini>:
 80149cc:	b108      	cbz	r0, 80149d2 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 80149ce:	f002 b8a7 	b.w	8016b20 <rosidl_runtime_c__String__fini>
 80149d2:	4770      	bx	lr

080149d4 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d03f      	beq.n	8014a58 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x84>
 80149d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149dc:	b087      	sub	sp, #28
 80149de:	460d      	mov	r5, r1
 80149e0:	4681      	mov	r9, r0
 80149e2:	a801      	add	r0, sp, #4
 80149e4:	f7f5 f9fc 	bl	8009de0 <rcutils_get_default_allocator>
 80149e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80149ec:	b35d      	cbz	r5, 8014a46 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x72>
 80149ee:	9b04      	ldr	r3, [sp, #16]
 80149f0:	4642      	mov	r2, r8
 80149f2:	2114      	movs	r1, #20
 80149f4:	4628      	mov	r0, r5
 80149f6:	4798      	blx	r3
 80149f8:	4607      	mov	r7, r0
 80149fa:	b310      	cbz	r0, 8014a42 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6e>
 80149fc:	4606      	mov	r6, r0
 80149fe:	2400      	movs	r4, #0
 8014a00:	e004      	b.n	8014a0c <std_msgs__msg__MultiArrayDimension__Sequence__init+0x38>
 8014a02:	3401      	adds	r4, #1
 8014a04:	42a5      	cmp	r5, r4
 8014a06:	f106 0614 	add.w	r6, r6, #20
 8014a0a:	d01d      	beq.n	8014a48 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8014a0c:	4630      	mov	r0, r6
 8014a0e:	f002 f86d 	bl	8016aec <rosidl_runtime_c__String__init>
 8014a12:	2800      	cmp	r0, #0
 8014a14:	d1f5      	bne.n	8014a02 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x2e>
 8014a16:	4630      	mov	r0, r6
 8014a18:	f002 f882 	bl	8016b20 <rosidl_runtime_c__String__fini>
 8014a1c:	42a5      	cmp	r5, r4
 8014a1e:	d913      	bls.n	8014a48 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8014a20:	b15c      	cbz	r4, 8014a3a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x66>
 8014a22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014a26:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8014a2a:	3c14      	subs	r4, #20
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	f002 f877 	bl	8016b20 <rosidl_runtime_c__String__fini>
 8014a32:	42bc      	cmp	r4, r7
 8014a34:	f1a4 0414 	sub.w	r4, r4, #20
 8014a38:	d1f8      	bne.n	8014a2c <std_msgs__msg__MultiArrayDimension__Sequence__init+0x58>
 8014a3a:	9b02      	ldr	r3, [sp, #8]
 8014a3c:	4641      	mov	r1, r8
 8014a3e:	4638      	mov	r0, r7
 8014a40:	4798      	blx	r3
 8014a42:	2000      	movs	r0, #0
 8014a44:	e005      	b.n	8014a52 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x7e>
 8014a46:	462f      	mov	r7, r5
 8014a48:	e9c9 7500 	strd	r7, r5, [r9]
 8014a4c:	f8c9 5008 	str.w	r5, [r9, #8]
 8014a50:	2001      	movs	r0, #1
 8014a52:	b007      	add	sp, #28
 8014a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a58:	2000      	movs	r0, #0
 8014a5a:	4770      	bx	lr

08014a5c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8014a5c:	b320      	cbz	r0, 8014aa8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8014a5e:	b530      	push	{r4, r5, lr}
 8014a60:	4605      	mov	r5, r0
 8014a62:	b087      	sub	sp, #28
 8014a64:	a801      	add	r0, sp, #4
 8014a66:	f7f5 f9bb 	bl	8009de0 <rcutils_get_default_allocator>
 8014a6a:	682a      	ldr	r2, [r5, #0]
 8014a6c:	b1b2      	cbz	r2, 8014a9c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8014a6e:	68a9      	ldr	r1, [r5, #8]
 8014a70:	b161      	cbz	r1, 8014a8c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014a72:	2400      	movs	r4, #0
 8014a74:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8014a78:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8014a7c:	d010      	beq.n	8014aa0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8014a7e:	f002 f84f 	bl	8016b20 <rosidl_runtime_c__String__fini>
 8014a82:	68a9      	ldr	r1, [r5, #8]
 8014a84:	682a      	ldr	r2, [r5, #0]
 8014a86:	3401      	adds	r4, #1
 8014a88:	428c      	cmp	r4, r1
 8014a8a:	d3f3      	bcc.n	8014a74 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8014a8c:	9b02      	ldr	r3, [sp, #8]
 8014a8e:	9905      	ldr	r1, [sp, #20]
 8014a90:	4610      	mov	r0, r2
 8014a92:	4798      	blx	r3
 8014a94:	2300      	movs	r3, #0
 8014a96:	e9c5 3300 	strd	r3, r3, [r5]
 8014a9a:	60ab      	str	r3, [r5, #8]
 8014a9c:	b007      	add	sp, #28
 8014a9e:	bd30      	pop	{r4, r5, pc}
 8014aa0:	3401      	adds	r4, #1
 8014aa2:	428c      	cmp	r4, r1
 8014aa4:	d3e6      	bcc.n	8014a74 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8014aa6:	e7f1      	b.n	8014a8c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop

08014aac <std_msgs__msg__MultiArrayLayout__get_type_hash>:
 8014aac:	4800      	ldr	r0, [pc, #0]	@ (8014ab0 <std_msgs__msg__MultiArrayLayout__get_type_hash+0x4>)
 8014aae:	4770      	bx	lr
 8014ab0:	200007cc 	.word	0x200007cc

08014ab4 <std_msgs__msg__MultiArrayLayout__get_type_description>:
 8014ab4:	b510      	push	{r4, lr}
 8014ab6:	4c08      	ldr	r4, [pc, #32]	@ (8014ad8 <std_msgs__msg__MultiArrayLayout__get_type_description+0x24>)
 8014ab8:	7820      	ldrb	r0, [r4, #0]
 8014aba:	b108      	cbz	r0, 8014ac0 <std_msgs__msg__MultiArrayLayout__get_type_description+0xc>
 8014abc:	4807      	ldr	r0, [pc, #28]	@ (8014adc <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8014abe:	bd10      	pop	{r4, pc}
 8014ac0:	f7ff ff4a 	bl	8014958 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8014ac4:	300c      	adds	r0, #12
 8014ac6:	c807      	ldmia	r0, {r0, r1, r2}
 8014ac8:	4b05      	ldr	r3, [pc, #20]	@ (8014ae0 <std_msgs__msg__MultiArrayLayout__get_type_description+0x2c>)
 8014aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014ace:	2301      	movs	r3, #1
 8014ad0:	4802      	ldr	r0, [pc, #8]	@ (8014adc <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8014ad2:	7023      	strb	r3, [r4, #0]
 8014ad4:	bd10      	pop	{r4, pc}
 8014ad6:	bf00      	nop
 8014ad8:	2000ebdd 	.word	0x2000ebdd
 8014adc:	08019380 	.word	0x08019380
 8014ae0:	20000c88 	.word	0x20000c88

08014ae4 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>:
 8014ae4:	4800      	ldr	r0, [pc, #0]	@ (8014ae8 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 8014ae6:	4770      	bx	lr
 8014ae8:	0801935c 	.word	0x0801935c

08014aec <std_msgs__msg__MultiArrayLayout__get_type_description_sources>:
 8014aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aee:	4e0f      	ldr	r6, [pc, #60]	@ (8014b2c <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 8014af0:	7837      	ldrb	r7, [r6, #0]
 8014af2:	b10f      	cbz	r7, 8014af8 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0xc>
 8014af4:	480e      	ldr	r0, [pc, #56]	@ (8014b30 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8014af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014af8:	4d0e      	ldr	r5, [pc, #56]	@ (8014b34 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 8014afa:	4c0f      	ldr	r4, [pc, #60]	@ (8014b38 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 8014afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b04:	682b      	ldr	r3, [r5, #0]
 8014b06:	f844 3b04 	str.w	r3, [r4], #4
 8014b0a:	4638      	mov	r0, r7
 8014b0c:	f7ff ff30 	bl	8014970 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8014b10:	2301      	movs	r3, #1
 8014b12:	4684      	mov	ip, r0
 8014b14:	7033      	strb	r3, [r6, #0]
 8014b16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b22:	f8dc 3000 	ldr.w	r3, [ip]
 8014b26:	4802      	ldr	r0, [pc, #8]	@ (8014b30 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8014b28:	6023      	str	r3, [r4, #0]
 8014b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b2c:	2000ebdc 	.word	0x2000ebdc
 8014b30:	08019350 	.word	0x08019350
 8014b34:	0801935c 	.word	0x0801935c
 8014b38:	2000eb94 	.word	0x2000eb94

08014b3c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8014b3c:	f7ff bf38 	b.w	80149b0 <std_msgs__msg__MultiArrayDimension__init>

08014b40 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8014b40:	f7ff bf44 	b.w	80149cc <std_msgs__msg__MultiArrayDimension__fini>

08014b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014b44:	4b04      	ldr	r3, [pc, #16]	@ (8014b58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	b10a      	cbz	r2, 8014b4e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8014b4a:	4803      	ldr	r0, [pc, #12]	@ (8014b58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014b4c:	4770      	bx	lr
 8014b4e:	4a03      	ldr	r2, [pc, #12]	@ (8014b5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8014b50:	4801      	ldr	r0, [pc, #4]	@ (8014b58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014b52:	6812      	ldr	r2, [r2, #0]
 8014b54:	601a      	str	r2, [r3, #0]
 8014b56:	4770      	bx	lr
 8014b58:	20000d7c 	.word	0x20000d7c
 8014b5c:	200001d4 	.word	0x200001d4

08014b60 <_MultiArrayDimension__cdr_serialize>:
 8014b60:	b1d0      	cbz	r0, 8014b98 <_MultiArrayDimension__cdr_serialize+0x38>
 8014b62:	b570      	push	{r4, r5, r6, lr}
 8014b64:	6806      	ldr	r6, [r0, #0]
 8014b66:	460d      	mov	r5, r1
 8014b68:	4604      	mov	r4, r0
 8014b6a:	b196      	cbz	r6, 8014b92 <_MultiArrayDimension__cdr_serialize+0x32>
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	f7eb fbaf 	bl	80002d0 <strlen>
 8014b72:	1c42      	adds	r2, r0, #1
 8014b74:	6060      	str	r0, [r4, #4]
 8014b76:	4631      	mov	r1, r6
 8014b78:	4628      	mov	r0, r5
 8014b7a:	f7f7 fb17 	bl	800c1ac <ucdr_serialize_sequence_char>
 8014b7e:	68e1      	ldr	r1, [r4, #12]
 8014b80:	4628      	mov	r0, r5
 8014b82:	f7f6 fbf9 	bl	800b378 <ucdr_serialize_uint32_t>
 8014b86:	6921      	ldr	r1, [r4, #16]
 8014b88:	4628      	mov	r0, r5
 8014b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b8e:	f7f6 bbf3 	b.w	800b378 <ucdr_serialize_uint32_t>
 8014b92:	4632      	mov	r2, r6
 8014b94:	4630      	mov	r0, r6
 8014b96:	e7ed      	b.n	8014b74 <_MultiArrayDimension__cdr_serialize+0x14>
 8014b98:	4770      	bx	lr
 8014b9a:	bf00      	nop

08014b9c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8014b9c:	b570      	push	{r4, r5, r6, lr}
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	b1b0      	cbz	r0, 8014bd0 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8014ba2:	460d      	mov	r5, r1
 8014ba4:	4628      	mov	r0, r5
 8014ba6:	2104      	movs	r1, #4
 8014ba8:	f7f7 fa94 	bl	800c0d4 <ucdr_alignment>
 8014bac:	6863      	ldr	r3, [r4, #4]
 8014bae:	1d6e      	adds	r6, r5, #5
 8014bb0:	441e      	add	r6, r3
 8014bb2:	4406      	add	r6, r0
 8014bb4:	2104      	movs	r1, #4
 8014bb6:	4630      	mov	r0, r6
 8014bb8:	f7f7 fa8c 	bl	800c0d4 <ucdr_alignment>
 8014bbc:	1d04      	adds	r4, r0, #4
 8014bbe:	4434      	add	r4, r6
 8014bc0:	2104      	movs	r1, #4
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	f7f7 fa86 	bl	800c0d4 <ucdr_alignment>
 8014bc8:	f1c5 0504 	rsb	r5, r5, #4
 8014bcc:	4405      	add	r5, r0
 8014bce:	1928      	adds	r0, r5, r4
 8014bd0:	bd70      	pop	{r4, r5, r6, pc}
 8014bd2:	bf00      	nop

08014bd4 <_MultiArrayDimension__cdr_deserialize>:
 8014bd4:	b570      	push	{r4, r5, r6, lr}
 8014bd6:	460c      	mov	r4, r1
 8014bd8:	b082      	sub	sp, #8
 8014bda:	b1d9      	cbz	r1, 8014c14 <_MultiArrayDimension__cdr_deserialize+0x40>
 8014bdc:	688e      	ldr	r6, [r1, #8]
 8014bde:	6809      	ldr	r1, [r1, #0]
 8014be0:	ab01      	add	r3, sp, #4
 8014be2:	4632      	mov	r2, r6
 8014be4:	4605      	mov	r5, r0
 8014be6:	f7f7 faf3 	bl	800c1d0 <ucdr_deserialize_sequence_char>
 8014bea:	9b01      	ldr	r3, [sp, #4]
 8014bec:	b970      	cbnz	r0, 8014c0c <_MultiArrayDimension__cdr_deserialize+0x38>
 8014bee:	429e      	cmp	r6, r3
 8014bf0:	d313      	bcc.n	8014c1a <_MultiArrayDimension__cdr_deserialize+0x46>
 8014bf2:	f104 010c 	add.w	r1, r4, #12
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	f7f6 fce8 	bl	800b5cc <ucdr_deserialize_uint32_t>
 8014bfc:	f104 0110 	add.w	r1, r4, #16
 8014c00:	4628      	mov	r0, r5
 8014c02:	b002      	add	sp, #8
 8014c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c08:	f7f6 bce0 	b.w	800b5cc <ucdr_deserialize_uint32_t>
 8014c0c:	b103      	cbz	r3, 8014c10 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8014c0e:	3b01      	subs	r3, #1
 8014c10:	6063      	str	r3, [r4, #4]
 8014c12:	e7ee      	b.n	8014bf2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8014c14:	4608      	mov	r0, r1
 8014c16:	b002      	add	sp, #8
 8014c18:	bd70      	pop	{r4, r5, r6, pc}
 8014c1a:	2101      	movs	r1, #1
 8014c1c:	75a8      	strb	r0, [r5, #22]
 8014c1e:	7569      	strb	r1, [r5, #21]
 8014c20:	6060      	str	r0, [r4, #4]
 8014c22:	4628      	mov	r0, r5
 8014c24:	f7f7 fa6c 	bl	800c100 <ucdr_align_to>
 8014c28:	9901      	ldr	r1, [sp, #4]
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	f7f7 fa9e 	bl	800c16c <ucdr_advance_buffer>
 8014c30:	e7df      	b.n	8014bf2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8014c32:	bf00      	nop

08014c34 <_MultiArrayDimension__max_serialized_size>:
 8014c34:	b510      	push	{r4, lr}
 8014c36:	2104      	movs	r1, #4
 8014c38:	2000      	movs	r0, #0
 8014c3a:	f7f7 fa4b 	bl	800c0d4 <ucdr_alignment>
 8014c3e:	1d04      	adds	r4, r0, #4
 8014c40:	2104      	movs	r1, #4
 8014c42:	4620      	mov	r0, r4
 8014c44:	f7f7 fa46 	bl	800c0d4 <ucdr_alignment>
 8014c48:	3004      	adds	r0, #4
 8014c4a:	4420      	add	r0, r4
 8014c4c:	bd10      	pop	{r4, pc}
 8014c4e:	bf00      	nop

08014c50 <_MultiArrayDimension__get_serialized_size>:
 8014c50:	b538      	push	{r3, r4, r5, lr}
 8014c52:	4604      	mov	r4, r0
 8014c54:	b190      	cbz	r0, 8014c7c <_MultiArrayDimension__get_serialized_size+0x2c>
 8014c56:	2104      	movs	r1, #4
 8014c58:	2000      	movs	r0, #0
 8014c5a:	f7f7 fa3b 	bl	800c0d4 <ucdr_alignment>
 8014c5e:	6865      	ldr	r5, [r4, #4]
 8014c60:	3505      	adds	r5, #5
 8014c62:	4405      	add	r5, r0
 8014c64:	2104      	movs	r1, #4
 8014c66:	4628      	mov	r0, r5
 8014c68:	f7f7 fa34 	bl	800c0d4 <ucdr_alignment>
 8014c6c:	1d04      	adds	r4, r0, #4
 8014c6e:	442c      	add	r4, r5
 8014c70:	2104      	movs	r1, #4
 8014c72:	4620      	mov	r0, r4
 8014c74:	f7f7 fa2e 	bl	800c0d4 <ucdr_alignment>
 8014c78:	3004      	adds	r0, #4
 8014c7a:	4420      	add	r0, r4
 8014c7c:	bd38      	pop	{r3, r4, r5, pc}
 8014c7e:	bf00      	nop

08014c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014c80:	4800      	ldr	r0, [pc, #0]	@ (8014c84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8014c82:	4770      	bx	lr
 8014c84:	20000e48 	.word	0x20000e48

08014c88 <ucdr_serialize_endian_array_char>:
 8014c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	461f      	mov	r7, r3
 8014c90:	4605      	mov	r5, r0
 8014c92:	4690      	mov	r8, r2
 8014c94:	f7f7 f9c6 	bl	800c024 <ucdr_check_buffer_available_for>
 8014c98:	b9e0      	cbnz	r0, 8014cd4 <ucdr_serialize_endian_array_char+0x4c>
 8014c9a:	463e      	mov	r6, r7
 8014c9c:	e009      	b.n	8014cb2 <ucdr_serialize_endian_array_char+0x2a>
 8014c9e:	68a8      	ldr	r0, [r5, #8]
 8014ca0:	f002 fd3f 	bl	8017722 <memcpy>
 8014ca4:	68ab      	ldr	r3, [r5, #8]
 8014ca6:	6928      	ldr	r0, [r5, #16]
 8014ca8:	4423      	add	r3, r4
 8014caa:	4420      	add	r0, r4
 8014cac:	1b36      	subs	r6, r6, r4
 8014cae:	60ab      	str	r3, [r5, #8]
 8014cb0:	6128      	str	r0, [r5, #16]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	4631      	mov	r1, r6
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	f7f7 fa3c 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8014cbc:	1bb9      	subs	r1, r7, r6
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	4441      	add	r1, r8
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d1ea      	bne.n	8014c9e <ucdr_serialize_endian_array_char+0x16>
 8014cc8:	2301      	movs	r3, #1
 8014cca:	7da8      	ldrb	r0, [r5, #22]
 8014ccc:	756b      	strb	r3, [r5, #21]
 8014cce:	4058      	eors	r0, r3
 8014cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd4:	463a      	mov	r2, r7
 8014cd6:	68a8      	ldr	r0, [r5, #8]
 8014cd8:	4641      	mov	r1, r8
 8014cda:	f002 fd22 	bl	8017722 <memcpy>
 8014cde:	68aa      	ldr	r2, [r5, #8]
 8014ce0:	692b      	ldr	r3, [r5, #16]
 8014ce2:	443a      	add	r2, r7
 8014ce4:	443b      	add	r3, r7
 8014ce6:	60aa      	str	r2, [r5, #8]
 8014ce8:	612b      	str	r3, [r5, #16]
 8014cea:	e7ed      	b.n	8014cc8 <ucdr_serialize_endian_array_char+0x40>

08014cec <ucdr_deserialize_endian_array_char>:
 8014cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	461f      	mov	r7, r3
 8014cf4:	4605      	mov	r5, r0
 8014cf6:	4690      	mov	r8, r2
 8014cf8:	f7f7 f994 	bl	800c024 <ucdr_check_buffer_available_for>
 8014cfc:	b9e0      	cbnz	r0, 8014d38 <ucdr_deserialize_endian_array_char+0x4c>
 8014cfe:	463e      	mov	r6, r7
 8014d00:	e009      	b.n	8014d16 <ucdr_deserialize_endian_array_char+0x2a>
 8014d02:	68a9      	ldr	r1, [r5, #8]
 8014d04:	f002 fd0d 	bl	8017722 <memcpy>
 8014d08:	68aa      	ldr	r2, [r5, #8]
 8014d0a:	692b      	ldr	r3, [r5, #16]
 8014d0c:	4422      	add	r2, r4
 8014d0e:	4423      	add	r3, r4
 8014d10:	1b36      	subs	r6, r6, r4
 8014d12:	60aa      	str	r2, [r5, #8]
 8014d14:	612b      	str	r3, [r5, #16]
 8014d16:	2201      	movs	r2, #1
 8014d18:	4631      	mov	r1, r6
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f7f7 fa0a 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8014d20:	4604      	mov	r4, r0
 8014d22:	1bb8      	subs	r0, r7, r6
 8014d24:	4622      	mov	r2, r4
 8014d26:	4440      	add	r0, r8
 8014d28:	2c00      	cmp	r4, #0
 8014d2a:	d1ea      	bne.n	8014d02 <ucdr_deserialize_endian_array_char+0x16>
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	7da8      	ldrb	r0, [r5, #22]
 8014d30:	756b      	strb	r3, [r5, #21]
 8014d32:	4058      	eors	r0, r3
 8014d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d38:	463a      	mov	r2, r7
 8014d3a:	68a9      	ldr	r1, [r5, #8]
 8014d3c:	4640      	mov	r0, r8
 8014d3e:	f002 fcf0 	bl	8017722 <memcpy>
 8014d42:	68aa      	ldr	r2, [r5, #8]
 8014d44:	692b      	ldr	r3, [r5, #16]
 8014d46:	443a      	add	r2, r7
 8014d48:	443b      	add	r3, r7
 8014d4a:	60aa      	str	r2, [r5, #8]
 8014d4c:	612b      	str	r3, [r5, #16]
 8014d4e:	e7ed      	b.n	8014d2c <ucdr_deserialize_endian_array_char+0x40>

08014d50 <ucdr_serialize_array_uint8_t>:
 8014d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d54:	4688      	mov	r8, r1
 8014d56:	4611      	mov	r1, r2
 8014d58:	4617      	mov	r7, r2
 8014d5a:	4605      	mov	r5, r0
 8014d5c:	f7f7 f962 	bl	800c024 <ucdr_check_buffer_available_for>
 8014d60:	b9e0      	cbnz	r0, 8014d9c <ucdr_serialize_array_uint8_t+0x4c>
 8014d62:	463e      	mov	r6, r7
 8014d64:	e009      	b.n	8014d7a <ucdr_serialize_array_uint8_t+0x2a>
 8014d66:	68a8      	ldr	r0, [r5, #8]
 8014d68:	f002 fcdb 	bl	8017722 <memcpy>
 8014d6c:	68aa      	ldr	r2, [r5, #8]
 8014d6e:	692b      	ldr	r3, [r5, #16]
 8014d70:	4422      	add	r2, r4
 8014d72:	4423      	add	r3, r4
 8014d74:	1b36      	subs	r6, r6, r4
 8014d76:	60aa      	str	r2, [r5, #8]
 8014d78:	612b      	str	r3, [r5, #16]
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	4631      	mov	r1, r6
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f7f7 f9d8 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8014d84:	1bb9      	subs	r1, r7, r6
 8014d86:	4604      	mov	r4, r0
 8014d88:	4602      	mov	r2, r0
 8014d8a:	4441      	add	r1, r8
 8014d8c:	2800      	cmp	r0, #0
 8014d8e:	d1ea      	bne.n	8014d66 <ucdr_serialize_array_uint8_t+0x16>
 8014d90:	2301      	movs	r3, #1
 8014d92:	7da8      	ldrb	r0, [r5, #22]
 8014d94:	756b      	strb	r3, [r5, #21]
 8014d96:	4058      	eors	r0, r3
 8014d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d9c:	463a      	mov	r2, r7
 8014d9e:	68a8      	ldr	r0, [r5, #8]
 8014da0:	4641      	mov	r1, r8
 8014da2:	f002 fcbe 	bl	8017722 <memcpy>
 8014da6:	68aa      	ldr	r2, [r5, #8]
 8014da8:	692b      	ldr	r3, [r5, #16]
 8014daa:	443a      	add	r2, r7
 8014dac:	443b      	add	r3, r7
 8014dae:	60aa      	str	r2, [r5, #8]
 8014db0:	612b      	str	r3, [r5, #16]
 8014db2:	e7ed      	b.n	8014d90 <ucdr_serialize_array_uint8_t+0x40>

08014db4 <ucdr_serialize_endian_array_uint8_t>:
 8014db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014db8:	4619      	mov	r1, r3
 8014dba:	461f      	mov	r7, r3
 8014dbc:	4605      	mov	r5, r0
 8014dbe:	4690      	mov	r8, r2
 8014dc0:	f7f7 f930 	bl	800c024 <ucdr_check_buffer_available_for>
 8014dc4:	b9e0      	cbnz	r0, 8014e00 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014dc6:	463e      	mov	r6, r7
 8014dc8:	e009      	b.n	8014dde <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014dca:	68a8      	ldr	r0, [r5, #8]
 8014dcc:	f002 fca9 	bl	8017722 <memcpy>
 8014dd0:	68ab      	ldr	r3, [r5, #8]
 8014dd2:	6928      	ldr	r0, [r5, #16]
 8014dd4:	4423      	add	r3, r4
 8014dd6:	4420      	add	r0, r4
 8014dd8:	1b36      	subs	r6, r6, r4
 8014dda:	60ab      	str	r3, [r5, #8]
 8014ddc:	6128      	str	r0, [r5, #16]
 8014dde:	2201      	movs	r2, #1
 8014de0:	4631      	mov	r1, r6
 8014de2:	4628      	mov	r0, r5
 8014de4:	f7f7 f9a6 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8014de8:	1bb9      	subs	r1, r7, r6
 8014dea:	4604      	mov	r4, r0
 8014dec:	4602      	mov	r2, r0
 8014dee:	4441      	add	r1, r8
 8014df0:	2800      	cmp	r0, #0
 8014df2:	d1ea      	bne.n	8014dca <ucdr_serialize_endian_array_uint8_t+0x16>
 8014df4:	2301      	movs	r3, #1
 8014df6:	7da8      	ldrb	r0, [r5, #22]
 8014df8:	756b      	strb	r3, [r5, #21]
 8014dfa:	4058      	eors	r0, r3
 8014dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e00:	463a      	mov	r2, r7
 8014e02:	68a8      	ldr	r0, [r5, #8]
 8014e04:	4641      	mov	r1, r8
 8014e06:	f002 fc8c 	bl	8017722 <memcpy>
 8014e0a:	68aa      	ldr	r2, [r5, #8]
 8014e0c:	692b      	ldr	r3, [r5, #16]
 8014e0e:	443a      	add	r2, r7
 8014e10:	443b      	add	r3, r7
 8014e12:	60aa      	str	r2, [r5, #8]
 8014e14:	612b      	str	r3, [r5, #16]
 8014e16:	e7ed      	b.n	8014df4 <ucdr_serialize_endian_array_uint8_t+0x40>

08014e18 <ucdr_deserialize_array_uint8_t>:
 8014e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e1c:	4688      	mov	r8, r1
 8014e1e:	4611      	mov	r1, r2
 8014e20:	4617      	mov	r7, r2
 8014e22:	4605      	mov	r5, r0
 8014e24:	f7f7 f8fe 	bl	800c024 <ucdr_check_buffer_available_for>
 8014e28:	b9e0      	cbnz	r0, 8014e64 <ucdr_deserialize_array_uint8_t+0x4c>
 8014e2a:	463e      	mov	r6, r7
 8014e2c:	e009      	b.n	8014e42 <ucdr_deserialize_array_uint8_t+0x2a>
 8014e2e:	68a9      	ldr	r1, [r5, #8]
 8014e30:	f002 fc77 	bl	8017722 <memcpy>
 8014e34:	68aa      	ldr	r2, [r5, #8]
 8014e36:	692b      	ldr	r3, [r5, #16]
 8014e38:	4422      	add	r2, r4
 8014e3a:	4423      	add	r3, r4
 8014e3c:	1b36      	subs	r6, r6, r4
 8014e3e:	60aa      	str	r2, [r5, #8]
 8014e40:	612b      	str	r3, [r5, #16]
 8014e42:	2201      	movs	r2, #1
 8014e44:	4631      	mov	r1, r6
 8014e46:	4628      	mov	r0, r5
 8014e48:	f7f7 f974 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	1bb8      	subs	r0, r7, r6
 8014e50:	4622      	mov	r2, r4
 8014e52:	4440      	add	r0, r8
 8014e54:	2c00      	cmp	r4, #0
 8014e56:	d1ea      	bne.n	8014e2e <ucdr_deserialize_array_uint8_t+0x16>
 8014e58:	2301      	movs	r3, #1
 8014e5a:	7da8      	ldrb	r0, [r5, #22]
 8014e5c:	756b      	strb	r3, [r5, #21]
 8014e5e:	4058      	eors	r0, r3
 8014e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e64:	463a      	mov	r2, r7
 8014e66:	68a9      	ldr	r1, [r5, #8]
 8014e68:	4640      	mov	r0, r8
 8014e6a:	f002 fc5a 	bl	8017722 <memcpy>
 8014e6e:	68aa      	ldr	r2, [r5, #8]
 8014e70:	692b      	ldr	r3, [r5, #16]
 8014e72:	443a      	add	r2, r7
 8014e74:	443b      	add	r3, r7
 8014e76:	60aa      	str	r2, [r5, #8]
 8014e78:	612b      	str	r3, [r5, #16]
 8014e7a:	e7ed      	b.n	8014e58 <ucdr_deserialize_array_uint8_t+0x40>

08014e7c <ucdr_deserialize_endian_array_uint8_t>:
 8014e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e80:	4619      	mov	r1, r3
 8014e82:	461f      	mov	r7, r3
 8014e84:	4605      	mov	r5, r0
 8014e86:	4690      	mov	r8, r2
 8014e88:	f7f7 f8cc 	bl	800c024 <ucdr_check_buffer_available_for>
 8014e8c:	b9e0      	cbnz	r0, 8014ec8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014e8e:	463e      	mov	r6, r7
 8014e90:	e009      	b.n	8014ea6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014e92:	68a9      	ldr	r1, [r5, #8]
 8014e94:	f002 fc45 	bl	8017722 <memcpy>
 8014e98:	68aa      	ldr	r2, [r5, #8]
 8014e9a:	692b      	ldr	r3, [r5, #16]
 8014e9c:	4422      	add	r2, r4
 8014e9e:	4423      	add	r3, r4
 8014ea0:	1b36      	subs	r6, r6, r4
 8014ea2:	60aa      	str	r2, [r5, #8]
 8014ea4:	612b      	str	r3, [r5, #16]
 8014ea6:	2201      	movs	r2, #1
 8014ea8:	4631      	mov	r1, r6
 8014eaa:	4628      	mov	r0, r5
 8014eac:	f7f7 f942 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8014eb0:	4604      	mov	r4, r0
 8014eb2:	1bb8      	subs	r0, r7, r6
 8014eb4:	4622      	mov	r2, r4
 8014eb6:	4440      	add	r0, r8
 8014eb8:	2c00      	cmp	r4, #0
 8014eba:	d1ea      	bne.n	8014e92 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	7da8      	ldrb	r0, [r5, #22]
 8014ec0:	756b      	strb	r3, [r5, #21]
 8014ec2:	4058      	eors	r0, r3
 8014ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec8:	463a      	mov	r2, r7
 8014eca:	68a9      	ldr	r1, [r5, #8]
 8014ecc:	4640      	mov	r0, r8
 8014ece:	f002 fc28 	bl	8017722 <memcpy>
 8014ed2:	68aa      	ldr	r2, [r5, #8]
 8014ed4:	692b      	ldr	r3, [r5, #16]
 8014ed6:	443a      	add	r2, r7
 8014ed8:	443b      	add	r3, r7
 8014eda:	60aa      	str	r2, [r5, #8]
 8014edc:	612b      	str	r3, [r5, #16]
 8014ede:	e7ed      	b.n	8014ebc <ucdr_deserialize_endian_array_uint8_t+0x40>

08014ee0 <ucdr_serialize_endian_array_int32_t>:
 8014ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee4:	4688      	mov	r8, r1
 8014ee6:	2104      	movs	r1, #4
 8014ee8:	4604      	mov	r4, r0
 8014eea:	4616      	mov	r6, r2
 8014eec:	461f      	mov	r7, r3
 8014eee:	f7f7 f8f9 	bl	800c0e4 <ucdr_buffer_alignment>
 8014ef2:	4601      	mov	r1, r0
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	7d65      	ldrb	r5, [r4, #21]
 8014ef8:	f7f7 f938 	bl	800c16c <ucdr_advance_buffer>
 8014efc:	f1b8 0f01 	cmp.w	r8, #1
 8014f00:	7565      	strb	r5, [r4, #21]
 8014f02:	d010      	beq.n	8014f26 <ucdr_serialize_endian_array_int32_t+0x46>
 8014f04:	b157      	cbz	r7, 8014f1c <ucdr_serialize_endian_array_int32_t+0x3c>
 8014f06:	3e04      	subs	r6, #4
 8014f08:	2500      	movs	r5, #0
 8014f0a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8014f0e:	4641      	mov	r1, r8
 8014f10:	4620      	mov	r0, r4
 8014f12:	3501      	adds	r5, #1
 8014f14:	f7f6 fedc 	bl	800bcd0 <ucdr_serialize_endian_int32_t>
 8014f18:	42af      	cmp	r7, r5
 8014f1a:	d1f6      	bne.n	8014f0a <ucdr_serialize_endian_array_int32_t+0x2a>
 8014f1c:	7da0      	ldrb	r0, [r4, #22]
 8014f1e:	f080 0001 	eor.w	r0, r0, #1
 8014f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f26:	00bf      	lsls	r7, r7, #2
 8014f28:	4639      	mov	r1, r7
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	f7f7 f87a 	bl	800c024 <ucdr_check_buffer_available_for>
 8014f30:	b9f8      	cbnz	r0, 8014f72 <ucdr_serialize_endian_array_int32_t+0x92>
 8014f32:	46b8      	mov	r8, r7
 8014f34:	e00a      	b.n	8014f4c <ucdr_serialize_endian_array_int32_t+0x6c>
 8014f36:	68a0      	ldr	r0, [r4, #8]
 8014f38:	f002 fbf3 	bl	8017722 <memcpy>
 8014f3c:	68a2      	ldr	r2, [r4, #8]
 8014f3e:	6923      	ldr	r3, [r4, #16]
 8014f40:	442a      	add	r2, r5
 8014f42:	442b      	add	r3, r5
 8014f44:	eba8 0805 	sub.w	r8, r8, r5
 8014f48:	60a2      	str	r2, [r4, #8]
 8014f4a:	6123      	str	r3, [r4, #16]
 8014f4c:	2204      	movs	r2, #4
 8014f4e:	4641      	mov	r1, r8
 8014f50:	4620      	mov	r0, r4
 8014f52:	f7f7 f8ef 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8014f56:	eba7 0108 	sub.w	r1, r7, r8
 8014f5a:	4605      	mov	r5, r0
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	4431      	add	r1, r6
 8014f60:	2800      	cmp	r0, #0
 8014f62:	d1e8      	bne.n	8014f36 <ucdr_serialize_endian_array_int32_t+0x56>
 8014f64:	7da0      	ldrb	r0, [r4, #22]
 8014f66:	2304      	movs	r3, #4
 8014f68:	7563      	strb	r3, [r4, #21]
 8014f6a:	f080 0001 	eor.w	r0, r0, #1
 8014f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f72:	463a      	mov	r2, r7
 8014f74:	68a0      	ldr	r0, [r4, #8]
 8014f76:	4631      	mov	r1, r6
 8014f78:	f002 fbd3 	bl	8017722 <memcpy>
 8014f7c:	68a2      	ldr	r2, [r4, #8]
 8014f7e:	6923      	ldr	r3, [r4, #16]
 8014f80:	443a      	add	r2, r7
 8014f82:	443b      	add	r3, r7
 8014f84:	60a2      	str	r2, [r4, #8]
 8014f86:	6123      	str	r3, [r4, #16]
 8014f88:	e7ec      	b.n	8014f64 <ucdr_serialize_endian_array_int32_t+0x84>
 8014f8a:	bf00      	nop

08014f8c <ucdr_deserialize_endian_array_int32_t>:
 8014f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f90:	4688      	mov	r8, r1
 8014f92:	2104      	movs	r1, #4
 8014f94:	4605      	mov	r5, r0
 8014f96:	4614      	mov	r4, r2
 8014f98:	461f      	mov	r7, r3
 8014f9a:	f7f7 f8a3 	bl	800c0e4 <ucdr_buffer_alignment>
 8014f9e:	4601      	mov	r1, r0
 8014fa0:	4628      	mov	r0, r5
 8014fa2:	7d6e      	ldrb	r6, [r5, #21]
 8014fa4:	f7f7 f8e2 	bl	800c16c <ucdr_advance_buffer>
 8014fa8:	f1b8 0f01 	cmp.w	r8, #1
 8014fac:	756e      	strb	r6, [r5, #21]
 8014fae:	d010      	beq.n	8014fd2 <ucdr_deserialize_endian_array_int32_t+0x46>
 8014fb0:	2600      	movs	r6, #0
 8014fb2:	b14f      	cbz	r7, 8014fc8 <ucdr_deserialize_endian_array_int32_t+0x3c>
 8014fb4:	4622      	mov	r2, r4
 8014fb6:	4641      	mov	r1, r8
 8014fb8:	4628      	mov	r0, r5
 8014fba:	3601      	adds	r6, #1
 8014fbc:	f7f6 ffa6 	bl	800bf0c <ucdr_deserialize_endian_int32_t>
 8014fc0:	42b7      	cmp	r7, r6
 8014fc2:	f104 0404 	add.w	r4, r4, #4
 8014fc6:	d1f5      	bne.n	8014fb4 <ucdr_deserialize_endian_array_int32_t+0x28>
 8014fc8:	7da8      	ldrb	r0, [r5, #22]
 8014fca:	f080 0001 	eor.w	r0, r0, #1
 8014fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd2:	00bf      	lsls	r7, r7, #2
 8014fd4:	4639      	mov	r1, r7
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	f7f7 f824 	bl	800c024 <ucdr_check_buffer_available_for>
 8014fdc:	b9f8      	cbnz	r0, 801501e <ucdr_deserialize_endian_array_int32_t+0x92>
 8014fde:	46b8      	mov	r8, r7
 8014fe0:	e00a      	b.n	8014ff8 <ucdr_deserialize_endian_array_int32_t+0x6c>
 8014fe2:	68a9      	ldr	r1, [r5, #8]
 8014fe4:	f002 fb9d 	bl	8017722 <memcpy>
 8014fe8:	68aa      	ldr	r2, [r5, #8]
 8014fea:	692b      	ldr	r3, [r5, #16]
 8014fec:	4432      	add	r2, r6
 8014fee:	4433      	add	r3, r6
 8014ff0:	eba8 0806 	sub.w	r8, r8, r6
 8014ff4:	60aa      	str	r2, [r5, #8]
 8014ff6:	612b      	str	r3, [r5, #16]
 8014ff8:	2204      	movs	r2, #4
 8014ffa:	4641      	mov	r1, r8
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	f7f7 f899 	bl	800c134 <ucdr_check_final_buffer_behavior_array>
 8015002:	4606      	mov	r6, r0
 8015004:	eba7 0008 	sub.w	r0, r7, r8
 8015008:	4632      	mov	r2, r6
 801500a:	4420      	add	r0, r4
 801500c:	2e00      	cmp	r6, #0
 801500e:	d1e8      	bne.n	8014fe2 <ucdr_deserialize_endian_array_int32_t+0x56>
 8015010:	7da8      	ldrb	r0, [r5, #22]
 8015012:	2304      	movs	r3, #4
 8015014:	756b      	strb	r3, [r5, #21]
 8015016:	f080 0001 	eor.w	r0, r0, #1
 801501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801501e:	463a      	mov	r2, r7
 8015020:	68a9      	ldr	r1, [r5, #8]
 8015022:	4620      	mov	r0, r4
 8015024:	f002 fb7d 	bl	8017722 <memcpy>
 8015028:	68aa      	ldr	r2, [r5, #8]
 801502a:	692b      	ldr	r3, [r5, #16]
 801502c:	443a      	add	r2, r7
 801502e:	443b      	add	r3, r7
 8015030:	60aa      	str	r2, [r5, #8]
 8015032:	612b      	str	r3, [r5, #16]
 8015034:	e7ec      	b.n	8015010 <ucdr_deserialize_endian_array_int32_t+0x84>
 8015036:	bf00      	nop

08015038 <ucdr_serialize_string>:
 8015038:	b538      	push	{r3, r4, r5, lr}
 801503a:	4605      	mov	r5, r0
 801503c:	4608      	mov	r0, r1
 801503e:	460c      	mov	r4, r1
 8015040:	f7eb f946 	bl	80002d0 <strlen>
 8015044:	4621      	mov	r1, r4
 8015046:	1c42      	adds	r2, r0, #1
 8015048:	4628      	mov	r0, r5
 801504a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801504e:	f7f7 b8ad 	b.w	800c1ac <ucdr_serialize_sequence_char>
 8015052:	bf00      	nop

08015054 <ucdr_deserialize_string>:
 8015054:	b500      	push	{lr}
 8015056:	b083      	sub	sp, #12
 8015058:	ab01      	add	r3, sp, #4
 801505a:	f7f7 f8b9 	bl	800c1d0 <ucdr_deserialize_sequence_char>
 801505e:	b003      	add	sp, #12
 8015060:	f85d fb04 	ldr.w	pc, [sp], #4

08015064 <uxr_init_input_best_effort_stream>:
 8015064:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015068:	8003      	strh	r3, [r0, #0]
 801506a:	4770      	bx	lr

0801506c <uxr_reset_input_best_effort_stream>:
 801506c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015070:	8003      	strh	r3, [r0, #0]
 8015072:	4770      	bx	lr

08015074 <uxr_receive_best_effort_message>:
 8015074:	b538      	push	{r3, r4, r5, lr}
 8015076:	4604      	mov	r4, r0
 8015078:	8800      	ldrh	r0, [r0, #0]
 801507a:	460d      	mov	r5, r1
 801507c:	f000 fe5e 	bl	8015d3c <uxr_seq_num_cmp>
 8015080:	4603      	mov	r3, r0
 8015082:	2b00      	cmp	r3, #0
 8015084:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015088:	bfb8      	it	lt
 801508a:	8025      	strhlt	r5, [r4, #0]
 801508c:	bd38      	pop	{r3, r4, r5, pc}
 801508e:	bf00      	nop

08015090 <on_full_input_buffer>:
 8015090:	b570      	push	{r4, r5, r6, lr}
 8015092:	4605      	mov	r5, r0
 8015094:	460c      	mov	r4, r1
 8015096:	682b      	ldr	r3, [r5, #0]
 8015098:	6809      	ldr	r1, [r1, #0]
 801509a:	8920      	ldrh	r0, [r4, #8]
 801509c:	6862      	ldr	r2, [r4, #4]
 801509e:	fbb2 f2f0 	udiv	r2, r2, r0
 80150a2:	1a5b      	subs	r3, r3, r1
 80150a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80150a8:	3301      	adds	r3, #1
 80150aa:	b29b      	uxth	r3, r3
 80150ac:	fbb3 f6f0 	udiv	r6, r3, r0
 80150b0:	fb00 3316 	mls	r3, r0, r6, r3
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	fb02 f303 	mul.w	r3, r2, r3
 80150ba:	1d18      	adds	r0, r3, #4
 80150bc:	4408      	add	r0, r1
 80150be:	7d26      	ldrb	r6, [r4, #20]
 80150c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80150c4:	b116      	cbz	r6, 80150cc <on_full_input_buffer+0x3c>
 80150c6:	2600      	movs	r6, #0
 80150c8:	f840 6c04 	str.w	r6, [r0, #-4]
 80150cc:	2a03      	cmp	r2, #3
 80150ce:	d801      	bhi.n	80150d4 <on_full_input_buffer+0x44>
 80150d0:	2001      	movs	r0, #1
 80150d2:	bd70      	pop	{r4, r5, r6, pc}
 80150d4:	3308      	adds	r3, #8
 80150d6:	4419      	add	r1, r3
 80150d8:	4628      	mov	r0, r5
 80150da:	692b      	ldr	r3, [r5, #16]
 80150dc:	3a04      	subs	r2, #4
 80150de:	f7f6 ffed 	bl	800c0bc <ucdr_init_buffer_origin>
 80150e2:	4628      	mov	r0, r5
 80150e4:	4902      	ldr	r1, [pc, #8]	@ (80150f0 <on_full_input_buffer+0x60>)
 80150e6:	4622      	mov	r2, r4
 80150e8:	f7f6 ffc4 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 80150ec:	2000      	movs	r0, #0
 80150ee:	bd70      	pop	{r4, r5, r6, pc}
 80150f0:	08015091 	.word	0x08015091

080150f4 <uxr_init_input_reliable_stream>:
 80150f4:	b500      	push	{lr}
 80150f6:	e9c0 1200 	strd	r1, r2, [r0]
 80150fa:	f04f 0e00 	mov.w	lr, #0
 80150fe:	9a01      	ldr	r2, [sp, #4]
 8015100:	8103      	strh	r3, [r0, #8]
 8015102:	6102      	str	r2, [r0, #16]
 8015104:	f880 e014 	strb.w	lr, [r0, #20]
 8015108:	b1d3      	cbz	r3, 8015140 <uxr_init_input_reliable_stream+0x4c>
 801510a:	f8c1 e000 	str.w	lr, [r1]
 801510e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015112:	f1bc 0f01 	cmp.w	ip, #1
 8015116:	d913      	bls.n	8015140 <uxr_init_input_reliable_stream+0x4c>
 8015118:	2301      	movs	r3, #1
 801511a:	fbb3 f1fc 	udiv	r1, r3, ip
 801511e:	fb0c 3111 	mls	r1, ip, r1, r3
 8015122:	b289      	uxth	r1, r1
 8015124:	6842      	ldr	r2, [r0, #4]
 8015126:	fbb2 f2fc 	udiv	r2, r2, ip
 801512a:	fb01 f202 	mul.w	r2, r1, r2
 801512e:	6801      	ldr	r1, [r0, #0]
 8015130:	f841 e002 	str.w	lr, [r1, r2]
 8015134:	3301      	adds	r3, #1
 8015136:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801513a:	b29b      	uxth	r3, r3
 801513c:	459c      	cmp	ip, r3
 801513e:	d8ec      	bhi.n	801511a <uxr_init_input_reliable_stream+0x26>
 8015140:	f04f 33ff 	mov.w	r3, #4294967295
 8015144:	60c3      	str	r3, [r0, #12]
 8015146:	f85d fb04 	ldr.w	pc, [sp], #4
 801514a:	bf00      	nop

0801514c <uxr_reset_input_reliable_stream>:
 801514c:	8901      	ldrh	r1, [r0, #8]
 801514e:	b1e9      	cbz	r1, 801518c <uxr_reset_input_reliable_stream+0x40>
 8015150:	f04f 0c00 	mov.w	ip, #0
 8015154:	b500      	push	{lr}
 8015156:	4663      	mov	r3, ip
 8015158:	46e6      	mov	lr, ip
 801515a:	fbb3 f2f1 	udiv	r2, r3, r1
 801515e:	fb01 3312 	mls	r3, r1, r2, r3
 8015162:	b29b      	uxth	r3, r3
 8015164:	6842      	ldr	r2, [r0, #4]
 8015166:	fbb2 f2f1 	udiv	r2, r2, r1
 801516a:	fb03 f202 	mul.w	r2, r3, r2
 801516e:	6803      	ldr	r3, [r0, #0]
 8015170:	f843 e002 	str.w	lr, [r3, r2]
 8015174:	f10c 0c01 	add.w	ip, ip, #1
 8015178:	8901      	ldrh	r1, [r0, #8]
 801517a:	fa1f f38c 	uxth.w	r3, ip
 801517e:	4299      	cmp	r1, r3
 8015180:	d8eb      	bhi.n	801515a <uxr_reset_input_reliable_stream+0xe>
 8015182:	f04f 33ff 	mov.w	r3, #4294967295
 8015186:	60c3      	str	r3, [r0, #12]
 8015188:	f85d fb04 	ldr.w	pc, [sp], #4
 801518c:	f04f 33ff 	mov.w	r3, #4294967295
 8015190:	60c3      	str	r3, [r0, #12]
 8015192:	4770      	bx	lr

08015194 <uxr_receive_reliable_message>:
 8015194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015198:	4604      	mov	r4, r0
 801519a:	460d      	mov	r5, r1
 801519c:	8901      	ldrh	r1, [r0, #8]
 801519e:	8980      	ldrh	r0, [r0, #12]
 80151a0:	4690      	mov	r8, r2
 80151a2:	461f      	mov	r7, r3
 80151a4:	f000 fdc2 	bl	8015d2c <uxr_seq_num_add>
 80151a8:	4629      	mov	r1, r5
 80151aa:	4606      	mov	r6, r0
 80151ac:	89a0      	ldrh	r0, [r4, #12]
 80151ae:	f000 fdc5 	bl	8015d3c <uxr_seq_num_cmp>
 80151b2:	2800      	cmp	r0, #0
 80151b4:	db0a      	blt.n	80151cc <uxr_receive_reliable_message+0x38>
 80151b6:	2600      	movs	r6, #0
 80151b8:	89e0      	ldrh	r0, [r4, #14]
 80151ba:	4629      	mov	r1, r5
 80151bc:	f000 fdbe 	bl	8015d3c <uxr_seq_num_cmp>
 80151c0:	2800      	cmp	r0, #0
 80151c2:	bfb8      	it	lt
 80151c4:	81e5      	strhlt	r5, [r4, #14]
 80151c6:	4630      	mov	r0, r6
 80151c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151cc:	4630      	mov	r0, r6
 80151ce:	4629      	mov	r1, r5
 80151d0:	f000 fdb4 	bl	8015d3c <uxr_seq_num_cmp>
 80151d4:	2800      	cmp	r0, #0
 80151d6:	dbee      	blt.n	80151b6 <uxr_receive_reliable_message+0x22>
 80151d8:	6923      	ldr	r3, [r4, #16]
 80151da:	4640      	mov	r0, r8
 80151dc:	4798      	blx	r3
 80151de:	2101      	movs	r1, #1
 80151e0:	4606      	mov	r6, r0
 80151e2:	89a0      	ldrh	r0, [r4, #12]
 80151e4:	f000 fda2 	bl	8015d2c <uxr_seq_num_add>
 80151e8:	b90e      	cbnz	r6, 80151ee <uxr_receive_reliable_message+0x5a>
 80151ea:	4285      	cmp	r5, r0
 80151ec:	d046      	beq.n	801527c <uxr_receive_reliable_message+0xe8>
 80151ee:	8921      	ldrh	r1, [r4, #8]
 80151f0:	fbb5 f2f1 	udiv	r2, r5, r1
 80151f4:	fb01 5212 	mls	r2, r1, r2, r5
 80151f8:	b292      	uxth	r2, r2
 80151fa:	6863      	ldr	r3, [r4, #4]
 80151fc:	6820      	ldr	r0, [r4, #0]
 80151fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015202:	fb02 f303 	mul.w	r3, r2, r3
 8015206:	3304      	adds	r3, #4
 8015208:	4418      	add	r0, r3
 801520a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d1d1      	bne.n	80151b6 <uxr_receive_reliable_message+0x22>
 8015212:	4641      	mov	r1, r8
 8015214:	463a      	mov	r2, r7
 8015216:	f002 fa84 	bl	8017722 <memcpy>
 801521a:	8921      	ldrh	r1, [r4, #8]
 801521c:	fbb5 f2f1 	udiv	r2, r5, r1
 8015220:	fb01 5212 	mls	r2, r1, r2, r5
 8015224:	b292      	uxth	r2, r2
 8015226:	6863      	ldr	r3, [r4, #4]
 8015228:	fbb3 f3f1 	udiv	r3, r3, r1
 801522c:	fb02 f303 	mul.w	r3, r2, r3
 8015230:	6822      	ldr	r2, [r4, #0]
 8015232:	50d7      	str	r7, [r2, r3]
 8015234:	9a06      	ldr	r2, [sp, #24]
 8015236:	2301      	movs	r3, #1
 8015238:	7013      	strb	r3, [r2, #0]
 801523a:	2e00      	cmp	r6, #0
 801523c:	d0bb      	beq.n	80151b6 <uxr_receive_reliable_message+0x22>
 801523e:	89a6      	ldrh	r6, [r4, #12]
 8015240:	2101      	movs	r1, #1
 8015242:	4630      	mov	r0, r6
 8015244:	f000 fd72 	bl	8015d2c <uxr_seq_num_add>
 8015248:	8921      	ldrh	r1, [r4, #8]
 801524a:	fbb0 f2f1 	udiv	r2, r0, r1
 801524e:	fb01 0212 	mls	r2, r1, r2, r0
 8015252:	b292      	uxth	r2, r2
 8015254:	6863      	ldr	r3, [r4, #4]
 8015256:	fbb3 f3f1 	udiv	r3, r3, r1
 801525a:	4606      	mov	r6, r0
 801525c:	fb02 f303 	mul.w	r3, r2, r3
 8015260:	6820      	ldr	r0, [r4, #0]
 8015262:	3304      	adds	r3, #4
 8015264:	4418      	add	r0, r3
 8015266:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d0a3      	beq.n	80151b6 <uxr_receive_reliable_message+0x22>
 801526e:	6923      	ldr	r3, [r4, #16]
 8015270:	4798      	blx	r3
 8015272:	2802      	cmp	r0, #2
 8015274:	d005      	beq.n	8015282 <uxr_receive_reliable_message+0xee>
 8015276:	2801      	cmp	r0, #1
 8015278:	d0e2      	beq.n	8015240 <uxr_receive_reliable_message+0xac>
 801527a:	e79c      	b.n	80151b6 <uxr_receive_reliable_message+0x22>
 801527c:	9b06      	ldr	r3, [sp, #24]
 801527e:	81a5      	strh	r5, [r4, #12]
 8015280:	701e      	strb	r6, [r3, #0]
 8015282:	2601      	movs	r6, #1
 8015284:	e798      	b.n	80151b8 <uxr_receive_reliable_message+0x24>
 8015286:	bf00      	nop

08015288 <uxr_next_input_reliable_buffer_available>:
 8015288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801528c:	4604      	mov	r4, r0
 801528e:	460f      	mov	r7, r1
 8015290:	8980      	ldrh	r0, [r0, #12]
 8015292:	2101      	movs	r1, #1
 8015294:	4690      	mov	r8, r2
 8015296:	f000 fd49 	bl	8015d2c <uxr_seq_num_add>
 801529a:	8921      	ldrh	r1, [r4, #8]
 801529c:	fbb0 f2f1 	udiv	r2, r0, r1
 80152a0:	fb01 0212 	mls	r2, r1, r2, r0
 80152a4:	b292      	uxth	r2, r2
 80152a6:	6863      	ldr	r3, [r4, #4]
 80152a8:	6826      	ldr	r6, [r4, #0]
 80152aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80152ae:	fb02 f303 	mul.w	r3, r2, r3
 80152b2:	3304      	adds	r3, #4
 80152b4:	441e      	add	r6, r3
 80152b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80152ba:	f1b9 0f00 	cmp.w	r9, #0
 80152be:	d023      	beq.n	8015308 <uxr_next_input_reliable_buffer_available+0x80>
 80152c0:	6923      	ldr	r3, [r4, #16]
 80152c2:	4605      	mov	r5, r0
 80152c4:	4630      	mov	r0, r6
 80152c6:	4798      	blx	r3
 80152c8:	4682      	mov	sl, r0
 80152ca:	b300      	cbz	r0, 801530e <uxr_next_input_reliable_buffer_available+0x86>
 80152cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80152d0:	2101      	movs	r1, #1
 80152d2:	4650      	mov	r0, sl
 80152d4:	f000 fd2a 	bl	8015d2c <uxr_seq_num_add>
 80152d8:	8921      	ldrh	r1, [r4, #8]
 80152da:	fbb0 f2f1 	udiv	r2, r0, r1
 80152de:	4682      	mov	sl, r0
 80152e0:	fb01 0212 	mls	r2, r1, r2, r0
 80152e4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80152e8:	b292      	uxth	r2, r2
 80152ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80152ee:	fb02 f303 	mul.w	r3, r2, r3
 80152f2:	3304      	adds	r3, #4
 80152f4:	4418      	add	r0, r3
 80152f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80152fa:	b12b      	cbz	r3, 8015308 <uxr_next_input_reliable_buffer_available+0x80>
 80152fc:	6923      	ldr	r3, [r4, #16]
 80152fe:	4798      	blx	r3
 8015300:	2802      	cmp	r0, #2
 8015302:	d01b      	beq.n	801533c <uxr_next_input_reliable_buffer_available+0xb4>
 8015304:	2801      	cmp	r0, #1
 8015306:	d0e3      	beq.n	80152d0 <uxr_next_input_reliable_buffer_available+0x48>
 8015308:	2000      	movs	r0, #0
 801530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801530e:	464a      	mov	r2, r9
 8015310:	4631      	mov	r1, r6
 8015312:	4638      	mov	r0, r7
 8015314:	f7f6 feda 	bl	800c0cc <ucdr_init_buffer>
 8015318:	8921      	ldrh	r1, [r4, #8]
 801531a:	fbb5 f2f1 	udiv	r2, r5, r1
 801531e:	fb01 5212 	mls	r2, r1, r2, r5
 8015322:	b292      	uxth	r2, r2
 8015324:	6863      	ldr	r3, [r4, #4]
 8015326:	fbb3 f3f1 	udiv	r3, r3, r1
 801532a:	fb02 f303 	mul.w	r3, r2, r3
 801532e:	6822      	ldr	r2, [r4, #0]
 8015330:	f842 a003 	str.w	sl, [r2, r3]
 8015334:	81a5      	strh	r5, [r4, #12]
 8015336:	2001      	movs	r0, #1
 8015338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801533c:	eb06 0108 	add.w	r1, r6, r8
 8015340:	8926      	ldrh	r6, [r4, #8]
 8015342:	fbb5 f0f6 	udiv	r0, r5, r6
 8015346:	fb06 5010 	mls	r0, r6, r0, r5
 801534a:	b280      	uxth	r0, r0
 801534c:	6863      	ldr	r3, [r4, #4]
 801534e:	fbb3 f3f6 	udiv	r3, r3, r6
 8015352:	fb00 f303 	mul.w	r3, r0, r3
 8015356:	6820      	ldr	r0, [r4, #0]
 8015358:	2500      	movs	r5, #0
 801535a:	50c5      	str	r5, [r0, r3]
 801535c:	eba9 0208 	sub.w	r2, r9, r8
 8015360:	4638      	mov	r0, r7
 8015362:	f7f6 feb3 	bl	800c0cc <ucdr_init_buffer>
 8015366:	4903      	ldr	r1, [pc, #12]	@ (8015374 <uxr_next_input_reliable_buffer_available+0xec>)
 8015368:	4622      	mov	r2, r4
 801536a:	4638      	mov	r0, r7
 801536c:	f7f6 fe82 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 8015370:	4655      	mov	r5, sl
 8015372:	e7df      	b.n	8015334 <uxr_next_input_reliable_buffer_available+0xac>
 8015374:	08015091 	.word	0x08015091

08015378 <uxr_process_heartbeat>:
 8015378:	b538      	push	{r3, r4, r5, lr}
 801537a:	4611      	mov	r1, r2
 801537c:	4604      	mov	r4, r0
 801537e:	89c0      	ldrh	r0, [r0, #14]
 8015380:	4615      	mov	r5, r2
 8015382:	f000 fcdb 	bl	8015d3c <uxr_seq_num_cmp>
 8015386:	2800      	cmp	r0, #0
 8015388:	bfb8      	it	lt
 801538a:	81e5      	strhlt	r5, [r4, #14]
 801538c:	bd38      	pop	{r3, r4, r5, pc}
 801538e:	bf00      	nop

08015390 <uxr_compute_acknack>:
 8015390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015394:	8903      	ldrh	r3, [r0, #8]
 8015396:	8985      	ldrh	r5, [r0, #12]
 8015398:	4604      	mov	r4, r0
 801539a:	460e      	mov	r6, r1
 801539c:	2b00      	cmp	r3, #0
 801539e:	d048      	beq.n	8015432 <uxr_compute_acknack+0xa2>
 80153a0:	4628      	mov	r0, r5
 80153a2:	2701      	movs	r7, #1
 80153a4:	e003      	b.n	80153ae <uxr_compute_acknack+0x1e>
 80153a6:	4567      	cmp	r7, ip
 80153a8:	d243      	bcs.n	8015432 <uxr_compute_acknack+0xa2>
 80153aa:	89a0      	ldrh	r0, [r4, #12]
 80153ac:	3701      	adds	r7, #1
 80153ae:	b2b9      	uxth	r1, r7
 80153b0:	f000 fcbc 	bl	8015d2c <uxr_seq_num_add>
 80153b4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80153b8:	fbb0 f2fc 	udiv	r2, r0, ip
 80153bc:	e9d4 1300 	ldrd	r1, r3, [r4]
 80153c0:	fb0c 0212 	mls	r2, ip, r2, r0
 80153c4:	b292      	uxth	r2, r2
 80153c6:	fbb3 f3fc 	udiv	r3, r3, ip
 80153ca:	fb02 f303 	mul.w	r3, r2, r3
 80153ce:	58cb      	ldr	r3, [r1, r3]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1e8      	bne.n	80153a6 <uxr_compute_acknack+0x16>
 80153d4:	8030      	strh	r0, [r6, #0]
 80153d6:	2101      	movs	r1, #1
 80153d8:	89e5      	ldrh	r5, [r4, #14]
 80153da:	f000 fcab 	bl	8015d34 <uxr_seq_num_sub>
 80153de:	4601      	mov	r1, r0
 80153e0:	4628      	mov	r0, r5
 80153e2:	f000 fca7 	bl	8015d34 <uxr_seq_num_sub>
 80153e6:	4605      	mov	r5, r0
 80153e8:	4607      	mov	r7, r0
 80153ea:	b1f8      	cbz	r0, 801542c <uxr_compute_acknack+0x9c>
 80153ec:	f04f 0900 	mov.w	r9, #0
 80153f0:	464d      	mov	r5, r9
 80153f2:	f04f 0801 	mov.w	r8, #1
 80153f6:	fa1f f189 	uxth.w	r1, r9
 80153fa:	8830      	ldrh	r0, [r6, #0]
 80153fc:	f000 fc96 	bl	8015d2c <uxr_seq_num_add>
 8015400:	8921      	ldrh	r1, [r4, #8]
 8015402:	fbb0 f3f1 	udiv	r3, r0, r1
 8015406:	fb03 0011 	mls	r0, r3, r1, r0
 801540a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801540e:	b280      	uxth	r0, r0
 8015410:	fbb3 f3f1 	udiv	r3, r3, r1
 8015414:	fb00 f303 	mul.w	r3, r0, r3
 8015418:	fa08 f109 	lsl.w	r1, r8, r9
 801541c:	58d3      	ldr	r3, [r2, r3]
 801541e:	f109 0901 	add.w	r9, r9, #1
 8015422:	b90b      	cbnz	r3, 8015428 <uxr_compute_acknack+0x98>
 8015424:	4329      	orrs	r1, r5
 8015426:	b28d      	uxth	r5, r1
 8015428:	454f      	cmp	r7, r9
 801542a:	d1e4      	bne.n	80153f6 <uxr_compute_acknack+0x66>
 801542c:	4628      	mov	r0, r5
 801542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015432:	4628      	mov	r0, r5
 8015434:	e7ce      	b.n	80153d4 <uxr_compute_acknack+0x44>
 8015436:	bf00      	nop

08015438 <uxr_init_output_best_effort_stream>:
 8015438:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801543c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015440:	6001      	str	r1, [r0, #0]
 8015442:	7303      	strb	r3, [r0, #12]
 8015444:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015448:	4770      	bx	lr
 801544a:	bf00      	nop

0801544c <uxr_reset_output_best_effort_stream>:
 801544c:	7b02      	ldrb	r2, [r0, #12]
 801544e:	6042      	str	r2, [r0, #4]
 8015450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015454:	81c3      	strh	r3, [r0, #14]
 8015456:	4770      	bx	lr

08015458 <uxr_prepare_best_effort_buffer_to_write>:
 8015458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801545a:	4604      	mov	r4, r0
 801545c:	b083      	sub	sp, #12
 801545e:	6840      	ldr	r0, [r0, #4]
 8015460:	460d      	mov	r5, r1
 8015462:	4616      	mov	r6, r2
 8015464:	f7f9 f944 	bl	800e6f0 <uxr_submessage_padding>
 8015468:	6863      	ldr	r3, [r4, #4]
 801546a:	4418      	add	r0, r3
 801546c:	68a3      	ldr	r3, [r4, #8]
 801546e:	1942      	adds	r2, r0, r5
 8015470:	4293      	cmp	r3, r2
 8015472:	bf2c      	ite	cs
 8015474:	2701      	movcs	r7, #1
 8015476:	2700      	movcc	r7, #0
 8015478:	d202      	bcs.n	8015480 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801547a:	4638      	mov	r0, r7
 801547c:	b003      	add	sp, #12
 801547e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015480:	9000      	str	r0, [sp, #0]
 8015482:	6821      	ldr	r1, [r4, #0]
 8015484:	4630      	mov	r0, r6
 8015486:	2300      	movs	r3, #0
 8015488:	f7f6 fe0e 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 801548c:	6863      	ldr	r3, [r4, #4]
 801548e:	4638      	mov	r0, r7
 8015490:	442b      	add	r3, r5
 8015492:	6063      	str	r3, [r4, #4]
 8015494:	b003      	add	sp, #12
 8015496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015498 <uxr_prepare_best_effort_buffer_to_send>:
 8015498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801549c:	4604      	mov	r4, r0
 801549e:	461d      	mov	r5, r3
 80154a0:	6840      	ldr	r0, [r0, #4]
 80154a2:	7b23      	ldrb	r3, [r4, #12]
 80154a4:	4298      	cmp	r0, r3
 80154a6:	bf8c      	ite	hi
 80154a8:	2601      	movhi	r6, #1
 80154aa:	2600      	movls	r6, #0
 80154ac:	d802      	bhi.n	80154b4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80154ae:	4630      	mov	r0, r6
 80154b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154b4:	4688      	mov	r8, r1
 80154b6:	89e0      	ldrh	r0, [r4, #14]
 80154b8:	2101      	movs	r1, #1
 80154ba:	4617      	mov	r7, r2
 80154bc:	f000 fc36 	bl	8015d2c <uxr_seq_num_add>
 80154c0:	6823      	ldr	r3, [r4, #0]
 80154c2:	81e0      	strh	r0, [r4, #14]
 80154c4:	8028      	strh	r0, [r5, #0]
 80154c6:	f8c8 3000 	str.w	r3, [r8]
 80154ca:	6863      	ldr	r3, [r4, #4]
 80154cc:	603b      	str	r3, [r7, #0]
 80154ce:	7b23      	ldrb	r3, [r4, #12]
 80154d0:	6063      	str	r3, [r4, #4]
 80154d2:	4630      	mov	r0, r6
 80154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154d8 <on_full_output_buffer>:
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	460c      	mov	r4, r1
 80154dc:	6803      	ldr	r3, [r0, #0]
 80154de:	6809      	ldr	r1, [r1, #0]
 80154e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80154e4:	6862      	ldr	r2, [r4, #4]
 80154e6:	fbb2 f2fc 	udiv	r2, r2, ip
 80154ea:	1a5b      	subs	r3, r3, r1
 80154ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80154f0:	3301      	adds	r3, #1
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	fbb3 fefc 	udiv	lr, r3, ip
 80154f8:	fb0c 331e 	mls	r3, ip, lr, r3
 80154fc:	b29b      	uxth	r3, r3
 80154fe:	fb02 f303 	mul.w	r3, r2, r3
 8015502:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015506:	58ca      	ldr	r2, [r1, r3]
 8015508:	4463      	add	r3, ip
 801550a:	eba2 020c 	sub.w	r2, r2, ip
 801550e:	3308      	adds	r3, #8
 8015510:	4605      	mov	r5, r0
 8015512:	4419      	add	r1, r3
 8015514:	3a04      	subs	r2, #4
 8015516:	6903      	ldr	r3, [r0, #16]
 8015518:	f7f6 fdd0 	bl	800c0bc <ucdr_init_buffer_origin>
 801551c:	4628      	mov	r0, r5
 801551e:	4903      	ldr	r1, [pc, #12]	@ (801552c <on_full_output_buffer+0x54>)
 8015520:	4622      	mov	r2, r4
 8015522:	f7f6 fda7 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 8015526:	2000      	movs	r0, #0
 8015528:	bd38      	pop	{r3, r4, r5, pc}
 801552a:	bf00      	nop
 801552c:	080154d9 	.word	0x080154d9

08015530 <uxr_init_output_reliable_stream>:
 8015530:	b410      	push	{r4}
 8015532:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015536:	8103      	strh	r3, [r0, #8]
 8015538:	e9c0 1200 	strd	r1, r2, [r0]
 801553c:	f880 c00c 	strb.w	ip, [r0, #12]
 8015540:	b1d3      	cbz	r3, 8015578 <uxr_init_output_reliable_stream+0x48>
 8015542:	f8c1 c000 	str.w	ip, [r1]
 8015546:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801554a:	f1bc 0f01 	cmp.w	ip, #1
 801554e:	d913      	bls.n	8015578 <uxr_init_output_reliable_stream+0x48>
 8015550:	2301      	movs	r3, #1
 8015552:	fbb3 f1fc 	udiv	r1, r3, ip
 8015556:	fb0c 3111 	mls	r1, ip, r1, r3
 801555a:	b289      	uxth	r1, r1
 801555c:	6842      	ldr	r2, [r0, #4]
 801555e:	6804      	ldr	r4, [r0, #0]
 8015560:	fbb2 f2fc 	udiv	r2, r2, ip
 8015564:	fb01 f202 	mul.w	r2, r1, r2
 8015568:	7b01      	ldrb	r1, [r0, #12]
 801556a:	50a1      	str	r1, [r4, r2]
 801556c:	3301      	adds	r3, #1
 801556e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015572:	b29b      	uxth	r3, r3
 8015574:	459c      	cmp	ip, r3
 8015576:	d8ec      	bhi.n	8015552 <uxr_init_output_reliable_stream+0x22>
 8015578:	f04f 32ff 	mov.w	r2, #4294967295
 801557c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015580:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015584:	4905      	ldr	r1, [pc, #20]	@ (801559c <uxr_init_output_reliable_stream+0x6c>)
 8015586:	f85d 4b04 	ldr.w	r4, [sp], #4
 801558a:	f8c0 100e 	str.w	r1, [r0, #14]
 801558e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015592:	2300      	movs	r3, #0
 8015594:	8242      	strh	r2, [r0, #18]
 8015596:	8403      	strh	r3, [r0, #32]
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	ffff0000 	.word	0xffff0000

080155a0 <uxr_reset_output_reliable_stream>:
 80155a0:	8901      	ldrh	r1, [r0, #8]
 80155a2:	b1b1      	cbz	r1, 80155d2 <uxr_reset_output_reliable_stream+0x32>
 80155a4:	f04f 0c00 	mov.w	ip, #0
 80155a8:	4663      	mov	r3, ip
 80155aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80155ae:	fb01 3312 	mls	r3, r1, r2, r3
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	6842      	ldr	r2, [r0, #4]
 80155b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80155ba:	6801      	ldr	r1, [r0, #0]
 80155bc:	fb03 f202 	mul.w	r2, r3, r2
 80155c0:	7b03      	ldrb	r3, [r0, #12]
 80155c2:	508b      	str	r3, [r1, r2]
 80155c4:	f10c 0c01 	add.w	ip, ip, #1
 80155c8:	8901      	ldrh	r1, [r0, #8]
 80155ca:	fa1f f38c 	uxth.w	r3, ip
 80155ce:	4299      	cmp	r1, r3
 80155d0:	d8eb      	bhi.n	80155aa <uxr_reset_output_reliable_stream+0xa>
 80155d2:	f04f 32ff 	mov.w	r2, #4294967295
 80155d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80155da:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80155de:	4904      	ldr	r1, [pc, #16]	@ (80155f0 <uxr_reset_output_reliable_stream+0x50>)
 80155e0:	f8c0 100e 	str.w	r1, [r0, #14]
 80155e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80155e8:	2300      	movs	r3, #0
 80155ea:	8242      	strh	r2, [r0, #18]
 80155ec:	8403      	strh	r3, [r0, #32]
 80155ee:	4770      	bx	lr
 80155f0:	ffff0000 	.word	0xffff0000

080155f4 <uxr_prepare_reliable_buffer_to_write>:
 80155f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155f8:	4604      	mov	r4, r0
 80155fa:	b091      	sub	sp, #68	@ 0x44
 80155fc:	8900      	ldrh	r0, [r0, #8]
 80155fe:	89e7      	ldrh	r7, [r4, #14]
 8015600:	6823      	ldr	r3, [r4, #0]
 8015602:	9204      	str	r2, [sp, #16]
 8015604:	fbb7 f2f0 	udiv	r2, r7, r0
 8015608:	fb00 7212 	mls	r2, r0, r2, r7
 801560c:	b292      	uxth	r2, r2
 801560e:	6865      	ldr	r5, [r4, #4]
 8015610:	fbb5 f5f0 	udiv	r5, r5, r0
 8015614:	fb05 3202 	mla	r2, r5, r2, r3
 8015618:	3204      	adds	r2, #4
 801561a:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801561e:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8015622:	9203      	str	r2, [sp, #12]
 8015624:	4688      	mov	r8, r1
 8015626:	f1a5 0904 	sub.w	r9, r5, #4
 801562a:	2800      	cmp	r0, #0
 801562c:	f000 8143 	beq.w	80158b6 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8015630:	2100      	movs	r1, #0
 8015632:	460e      	mov	r6, r1
 8015634:	b28a      	uxth	r2, r1
 8015636:	fbb2 fcf0 	udiv	ip, r2, r0
 801563a:	fb00 221c 	mls	r2, r0, ip, r2
 801563e:	b292      	uxth	r2, r2
 8015640:	fb05 f202 	mul.w	r2, r5, r2
 8015644:	3101      	adds	r1, #1
 8015646:	589a      	ldr	r2, [r3, r2]
 8015648:	455a      	cmp	r2, fp
 801564a:	bf04      	itt	eq
 801564c:	3601      	addeq	r6, #1
 801564e:	b2b6      	uxtheq	r6, r6
 8015650:	4281      	cmp	r1, r0
 8015652:	d1ef      	bne.n	8015634 <uxr_prepare_reliable_buffer_to_write+0x40>
 8015654:	4650      	mov	r0, sl
 8015656:	2104      	movs	r1, #4
 8015658:	9605      	str	r6, [sp, #20]
 801565a:	f7f6 fd3b 	bl	800c0d4 <ucdr_alignment>
 801565e:	4482      	add	sl, r0
 8015660:	eb0a 0208 	add.w	r2, sl, r8
 8015664:	454a      	cmp	r2, r9
 8015666:	f240 80ca 	bls.w	80157fe <uxr_prepare_reliable_buffer_to_write+0x20a>
 801566a:	7b22      	ldrb	r2, [r4, #12]
 801566c:	4442      	add	r2, r8
 801566e:	454a      	cmp	r2, r9
 8015670:	f240 80b2 	bls.w	80157d8 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8015674:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8015678:	32fc      	adds	r2, #252	@ 0xfc
 801567a:	fa1f f389 	uxth.w	r3, r9
 801567e:	441a      	add	r2, r3
 8015680:	b292      	uxth	r2, r2
 8015682:	fb06 fb02 	mul.w	fp, r6, r2
 8015686:	45c3      	cmp	fp, r8
 8015688:	9205      	str	r2, [sp, #20]
 801568a:	9206      	str	r2, [sp, #24]
 801568c:	f0c0 80b3 	bcc.w	80157f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015690:	f10a 0204 	add.w	r2, sl, #4
 8015694:	454a      	cmp	r2, r9
 8015696:	f080 80db 	bcs.w	8015850 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801569a:	f1a3 0b04 	sub.w	fp, r3, #4
 801569e:	ebab 0b0a 	sub.w	fp, fp, sl
 80156a2:	9b05      	ldr	r3, [sp, #20]
 80156a4:	fa1f fb8b 	uxth.w	fp, fp
 80156a8:	eba8 080b 	sub.w	r8, r8, fp
 80156ac:	fbb8 fcf3 	udiv	ip, r8, r3
 80156b0:	fb03 831c 	mls	r3, r3, ip, r8
 80156b4:	fa1f fc8c 	uxth.w	ip, ip
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f040 80c1 	bne.w	8015840 <uxr_prepare_reliable_buffer_to_write+0x24c>
 80156be:	45b4      	cmp	ip, r6
 80156c0:	f200 8099 	bhi.w	80157f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 80156c4:	f10d 0820 	add.w	r8, sp, #32
 80156c8:	f1bc 0f00 	cmp.w	ip, #0
 80156cc:	d040      	beq.n	8015750 <uxr_prepare_reliable_buffer_to_write+0x15c>
 80156ce:	f8cd a01c 	str.w	sl, [sp, #28]
 80156d2:	2600      	movs	r6, #0
 80156d4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80156d8:	9505      	str	r5, [sp, #20]
 80156da:	f10d 0820 	add.w	r8, sp, #32
 80156de:	4665      	mov	r5, ip
 80156e0:	e000      	b.n	80156e4 <uxr_prepare_reliable_buffer_to_write+0xf0>
 80156e2:	46d3      	mov	fp, sl
 80156e4:	8921      	ldrh	r1, [r4, #8]
 80156e6:	fbb7 f2f1 	udiv	r2, r7, r1
 80156ea:	fb01 7212 	mls	r2, r1, r2, r7
 80156ee:	b292      	uxth	r2, r2
 80156f0:	6863      	ldr	r3, [r4, #4]
 80156f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80156f6:	6821      	ldr	r1, [r4, #0]
 80156f8:	fb02 f303 	mul.w	r3, r2, r3
 80156fc:	3304      	adds	r3, #4
 80156fe:	4419      	add	r1, r3
 8015700:	4640      	mov	r0, r8
 8015702:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015706:	9200      	str	r2, [sp, #0]
 8015708:	2300      	movs	r3, #0
 801570a:	464a      	mov	r2, r9
 801570c:	f7f6 fccc 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 8015710:	465a      	mov	r2, fp
 8015712:	2300      	movs	r3, #0
 8015714:	210d      	movs	r1, #13
 8015716:	4640      	mov	r0, r8
 8015718:	f7f8 ffaa 	bl	800e670 <uxr_buffer_submessage_header>
 801571c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015720:	fbb7 f2fc 	udiv	r2, r7, ip
 8015724:	fb0c 7212 	mls	r2, ip, r2, r7
 8015728:	b292      	uxth	r2, r2
 801572a:	6863      	ldr	r3, [r4, #4]
 801572c:	fbb3 f3fc 	udiv	r3, r3, ip
 8015730:	fb02 f303 	mul.w	r3, r2, r3
 8015734:	6822      	ldr	r2, [r4, #0]
 8015736:	4638      	mov	r0, r7
 8015738:	f842 9003 	str.w	r9, [r2, r3]
 801573c:	2101      	movs	r1, #1
 801573e:	f000 faf5 	bl	8015d2c <uxr_seq_num_add>
 8015742:	3601      	adds	r6, #1
 8015744:	42ae      	cmp	r6, r5
 8015746:	4607      	mov	r7, r0
 8015748:	d1cb      	bne.n	80156e2 <uxr_prepare_reliable_buffer_to_write+0xee>
 801574a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801574e:	9d05      	ldr	r5, [sp, #20]
 8015750:	8920      	ldrh	r0, [r4, #8]
 8015752:	fbb7 f1f0 	udiv	r1, r7, r0
 8015756:	fb00 7111 	mls	r1, r0, r1, r7
 801575a:	b289      	uxth	r1, r1
 801575c:	6863      	ldr	r3, [r4, #4]
 801575e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015762:	fb01 f303 	mul.w	r3, r1, r3
 8015766:	6821      	ldr	r1, [r4, #0]
 8015768:	3304      	adds	r3, #4
 801576a:	4419      	add	r1, r3
 801576c:	464a      	mov	r2, r9
 801576e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015772:	9000      	str	r0, [sp, #0]
 8015774:	2300      	movs	r3, #0
 8015776:	4640      	mov	r0, r8
 8015778:	f7f6 fc96 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 801577c:	4640      	mov	r0, r8
 801577e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015782:	2302      	movs	r3, #2
 8015784:	fa1f f288 	uxth.w	r2, r8
 8015788:	210d      	movs	r1, #13
 801578a:	f7f8 ff71 	bl	800e670 <uxr_buffer_submessage_header>
 801578e:	8926      	ldrh	r6, [r4, #8]
 8015790:	9b03      	ldr	r3, [sp, #12]
 8015792:	7b20      	ldrb	r0, [r4, #12]
 8015794:	f1a5 0208 	sub.w	r2, r5, #8
 8015798:	f10a 0104 	add.w	r1, sl, #4
 801579c:	fbb7 f5f6 	udiv	r5, r7, r6
 80157a0:	fb06 7515 	mls	r5, r6, r5, r7
 80157a4:	440b      	add	r3, r1
 80157a6:	b2ad      	uxth	r5, r5
 80157a8:	4619      	mov	r1, r3
 80157aa:	3004      	adds	r0, #4
 80157ac:	6863      	ldr	r3, [r4, #4]
 80157ae:	fbb3 f3f6 	udiv	r3, r3, r6
 80157b2:	fb05 f303 	mul.w	r3, r5, r3
 80157b6:	6825      	ldr	r5, [r4, #0]
 80157b8:	4440      	add	r0, r8
 80157ba:	50e8      	str	r0, [r5, r3]
 80157bc:	9d04      	ldr	r5, [sp, #16]
 80157be:	eba2 020a 	sub.w	r2, r2, sl
 80157c2:	4628      	mov	r0, r5
 80157c4:	f7f6 fc82 	bl	800c0cc <ucdr_init_buffer>
 80157c8:	493c      	ldr	r1, [pc, #240]	@ (80158bc <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 80157ca:	4622      	mov	r2, r4
 80157cc:	4628      	mov	r0, r5
 80157ce:	f7f6 fc51 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 80157d2:	81e7      	strh	r7, [r4, #14]
 80157d4:	2001      	movs	r0, #1
 80157d6:	e00f      	b.n	80157f8 <uxr_prepare_reliable_buffer_to_write+0x204>
 80157d8:	2101      	movs	r1, #1
 80157da:	89e0      	ldrh	r0, [r4, #14]
 80157dc:	f000 faa6 	bl	8015d2c <uxr_seq_num_add>
 80157e0:	8921      	ldrh	r1, [r4, #8]
 80157e2:	4605      	mov	r5, r0
 80157e4:	8a60      	ldrh	r0, [r4, #18]
 80157e6:	f000 faa1 	bl	8015d2c <uxr_seq_num_add>
 80157ea:	4601      	mov	r1, r0
 80157ec:	4628      	mov	r0, r5
 80157ee:	f000 faa5 	bl	8015d3c <uxr_seq_num_cmp>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	dd45      	ble.n	8015882 <uxr_prepare_reliable_buffer_to_write+0x28e>
 80157f6:	2000      	movs	r0, #0
 80157f8:	b011      	add	sp, #68	@ 0x44
 80157fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157fe:	8921      	ldrh	r1, [r4, #8]
 8015800:	8a60      	ldrh	r0, [r4, #18]
 8015802:	9205      	str	r2, [sp, #20]
 8015804:	f000 fa92 	bl	8015d2c <uxr_seq_num_add>
 8015808:	4601      	mov	r1, r0
 801580a:	4638      	mov	r0, r7
 801580c:	f000 fa96 	bl	8015d3c <uxr_seq_num_cmp>
 8015810:	2800      	cmp	r0, #0
 8015812:	9a05      	ldr	r2, [sp, #20]
 8015814:	dcef      	bgt.n	80157f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015816:	8926      	ldrh	r6, [r4, #8]
 8015818:	fbb7 f5f6 	udiv	r5, r7, r6
 801581c:	fb06 7515 	mls	r5, r6, r5, r7
 8015820:	b2ad      	uxth	r5, r5
 8015822:	6863      	ldr	r3, [r4, #4]
 8015824:	6824      	ldr	r4, [r4, #0]
 8015826:	fbb3 f3f6 	udiv	r3, r3, r6
 801582a:	fb05 f303 	mul.w	r3, r5, r3
 801582e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015832:	50e2      	str	r2, [r4, r3]
 8015834:	2300      	movs	r3, #0
 8015836:	f8cd a000 	str.w	sl, [sp]
 801583a:	f7f6 fc35 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 801583e:	e7c9      	b.n	80157d4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8015840:	f10c 0c01 	add.w	ip, ip, #1
 8015844:	fa1f fc8c 	uxth.w	ip, ip
 8015848:	45b4      	cmp	ip, r6
 801584a:	9306      	str	r3, [sp, #24]
 801584c:	d8d3      	bhi.n	80157f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 801584e:	e739      	b.n	80156c4 <uxr_prepare_reliable_buffer_to_write+0xd0>
 8015850:	4638      	mov	r0, r7
 8015852:	2101      	movs	r1, #1
 8015854:	9307      	str	r3, [sp, #28]
 8015856:	f000 fa69 	bl	8015d2c <uxr_seq_num_add>
 801585a:	8921      	ldrh	r1, [r4, #8]
 801585c:	6862      	ldr	r2, [r4, #4]
 801585e:	4607      	mov	r7, r0
 8015860:	fbb0 f0f1 	udiv	r0, r0, r1
 8015864:	fb01 7010 	mls	r0, r1, r0, r7
 8015868:	b280      	uxth	r0, r0
 801586a:	fbb2 f1f1 	udiv	r1, r2, r1
 801586e:	6822      	ldr	r2, [r4, #0]
 8015870:	fb00 f101 	mul.w	r1, r0, r1
 8015874:	3104      	adds	r1, #4
 8015876:	1853      	adds	r3, r2, r1
 8015878:	9303      	str	r3, [sp, #12]
 801587a:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801587e:	9b07      	ldr	r3, [sp, #28]
 8015880:	e70b      	b.n	801569a <uxr_prepare_reliable_buffer_to_write+0xa6>
 8015882:	8921      	ldrh	r1, [r4, #8]
 8015884:	fbb5 f2f1 	udiv	r2, r5, r1
 8015888:	fb01 5212 	mls	r2, r1, r2, r5
 801588c:	b292      	uxth	r2, r2
 801588e:	6863      	ldr	r3, [r4, #4]
 8015890:	fbb3 f3f1 	udiv	r3, r3, r1
 8015894:	6821      	ldr	r1, [r4, #0]
 8015896:	9804      	ldr	r0, [sp, #16]
 8015898:	fb02 f303 	mul.w	r3, r2, r3
 801589c:	3304      	adds	r3, #4
 801589e:	7b22      	ldrb	r2, [r4, #12]
 80158a0:	4419      	add	r1, r3
 80158a2:	4442      	add	r2, r8
 80158a4:	f841 2c04 	str.w	r2, [r1, #-4]
 80158a8:	7b23      	ldrb	r3, [r4, #12]
 80158aa:	9300      	str	r3, [sp, #0]
 80158ac:	2300      	movs	r3, #0
 80158ae:	f7f6 fbfb 	bl	800c0a8 <ucdr_init_buffer_origin_offset>
 80158b2:	81e5      	strh	r5, [r4, #14]
 80158b4:	e78e      	b.n	80157d4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80158b6:	4606      	mov	r6, r0
 80158b8:	e6cc      	b.n	8015654 <uxr_prepare_reliable_buffer_to_write+0x60>
 80158ba:	bf00      	nop
 80158bc:	080154d9 	.word	0x080154d9

080158c0 <uxr_prepare_next_reliable_buffer_to_send>:
 80158c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158c2:	4604      	mov	r4, r0
 80158c4:	460f      	mov	r7, r1
 80158c6:	8a00      	ldrh	r0, [r0, #16]
 80158c8:	2101      	movs	r1, #1
 80158ca:	4615      	mov	r5, r2
 80158cc:	461e      	mov	r6, r3
 80158ce:	f000 fa2d 	bl	8015d2c <uxr_seq_num_add>
 80158d2:	8030      	strh	r0, [r6, #0]
 80158d4:	8922      	ldrh	r2, [r4, #8]
 80158d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80158da:	fb02 0c13 	mls	ip, r2, r3, r0
 80158de:	fa1f fc8c 	uxth.w	ip, ip
 80158e2:	6863      	ldr	r3, [r4, #4]
 80158e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80158e8:	fb0c fc03 	mul.w	ip, ip, r3
 80158ec:	6823      	ldr	r3, [r4, #0]
 80158ee:	89e1      	ldrh	r1, [r4, #14]
 80158f0:	f10c 0c04 	add.w	ip, ip, #4
 80158f4:	4463      	add	r3, ip
 80158f6:	603b      	str	r3, [r7, #0]
 80158f8:	6823      	ldr	r3, [r4, #0]
 80158fa:	4463      	add	r3, ip
 80158fc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015900:	602b      	str	r3, [r5, #0]
 8015902:	f000 fa1b 	bl	8015d3c <uxr_seq_num_cmp>
 8015906:	2800      	cmp	r0, #0
 8015908:	dd01      	ble.n	801590e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801590a:	2000      	movs	r0, #0
 801590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801590e:	7b23      	ldrb	r3, [r4, #12]
 8015910:	682a      	ldr	r2, [r5, #0]
 8015912:	429a      	cmp	r2, r3
 8015914:	d9f9      	bls.n	801590a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015916:	8a61      	ldrh	r1, [r4, #18]
 8015918:	8a20      	ldrh	r0, [r4, #16]
 801591a:	f000 fa0b 	bl	8015d34 <uxr_seq_num_sub>
 801591e:	8923      	ldrh	r3, [r4, #8]
 8015920:	4283      	cmp	r3, r0
 8015922:	d0f2      	beq.n	801590a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015924:	8830      	ldrh	r0, [r6, #0]
 8015926:	89e3      	ldrh	r3, [r4, #14]
 8015928:	8220      	strh	r0, [r4, #16]
 801592a:	4298      	cmp	r0, r3
 801592c:	d001      	beq.n	8015932 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801592e:	2001      	movs	r0, #1
 8015930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015932:	2101      	movs	r1, #1
 8015934:	f000 f9fa 	bl	8015d2c <uxr_seq_num_add>
 8015938:	81e0      	strh	r0, [r4, #14]
 801593a:	e7f8      	b.n	801592e <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801593c <uxr_update_output_stream_heartbeat_timestamp>:
 801593c:	b570      	push	{r4, r5, r6, lr}
 801593e:	8a01      	ldrh	r1, [r0, #16]
 8015940:	4604      	mov	r4, r0
 8015942:	8a40      	ldrh	r0, [r0, #18]
 8015944:	4615      	mov	r5, r2
 8015946:	461e      	mov	r6, r3
 8015948:	f000 f9f8 	bl	8015d3c <uxr_seq_num_cmp>
 801594c:	2800      	cmp	r0, #0
 801594e:	db07      	blt.n	8015960 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015950:	f04f 35ff 	mov.w	r5, #4294967295
 8015954:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8015958:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801595c:	2000      	movs	r0, #0
 801595e:	bd70      	pop	{r4, r5, r6, pc}
 8015960:	f894 3020 	ldrb.w	r3, [r4, #32]
 8015964:	b953      	cbnz	r3, 801597c <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8015966:	2301      	movs	r3, #1
 8015968:	f884 3020 	strb.w	r3, [r4, #32]
 801596c:	3564      	adds	r5, #100	@ 0x64
 801596e:	f04f 0000 	mov.w	r0, #0
 8015972:	f146 0600 	adc.w	r6, r6, #0
 8015976:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801597a:	bd70      	pop	{r4, r5, r6, pc}
 801597c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015980:	428d      	cmp	r5, r1
 8015982:	eb76 0202 	sbcs.w	r2, r6, r2
 8015986:	dbf1      	blt.n	801596c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8015988:	3301      	adds	r3, #1
 801598a:	3564      	adds	r5, #100	@ 0x64
 801598c:	f884 3020 	strb.w	r3, [r4, #32]
 8015990:	f04f 0001 	mov.w	r0, #1
 8015994:	f146 0600 	adc.w	r6, r6, #0
 8015998:	e7ed      	b.n	8015976 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801599a:	bf00      	nop

0801599c <uxr_begin_output_nack_buffer_it>:
 801599c:	8a40      	ldrh	r0, [r0, #18]
 801599e:	4770      	bx	lr

080159a0 <uxr_next_reliable_nack_buffer_to_send>:
 80159a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80159a8:	f1b8 0f00 	cmp.w	r8, #0
 80159ac:	d104      	bne.n	80159b8 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80159ae:	f04f 0800 	mov.w	r8, #0
 80159b2:	4640      	mov	r0, r8
 80159b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159b8:	4604      	mov	r4, r0
 80159ba:	460e      	mov	r6, r1
 80159bc:	8818      	ldrh	r0, [r3, #0]
 80159be:	4617      	mov	r7, r2
 80159c0:	461d      	mov	r5, r3
 80159c2:	e019      	b.n	80159f8 <uxr_next_reliable_nack_buffer_to_send+0x58>
 80159c4:	8921      	ldrh	r1, [r4, #8]
 80159c6:	8828      	ldrh	r0, [r5, #0]
 80159c8:	fbb0 fcf1 	udiv	ip, r0, r1
 80159cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80159d0:	fb01 0c1c 	mls	ip, r1, ip, r0
 80159d4:	fa1f fc8c 	uxth.w	ip, ip
 80159d8:	fbb2 f2f1 	udiv	r2, r2, r1
 80159dc:	fb02 fc0c 	mul.w	ip, r2, ip
 80159e0:	f10c 0c04 	add.w	ip, ip, #4
 80159e4:	4463      	add	r3, ip
 80159e6:	6033      	str	r3, [r6, #0]
 80159e8:	6823      	ldr	r3, [r4, #0]
 80159ea:	4463      	add	r3, ip
 80159ec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80159f0:	603b      	str	r3, [r7, #0]
 80159f2:	7b22      	ldrb	r2, [r4, #12]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d1dc      	bne.n	80159b2 <uxr_next_reliable_nack_buffer_to_send+0x12>
 80159f8:	2101      	movs	r1, #1
 80159fa:	f000 f997 	bl	8015d2c <uxr_seq_num_add>
 80159fe:	8028      	strh	r0, [r5, #0]
 8015a00:	8a21      	ldrh	r1, [r4, #16]
 8015a02:	f000 f99b 	bl	8015d3c <uxr_seq_num_cmp>
 8015a06:	2800      	cmp	r0, #0
 8015a08:	dddc      	ble.n	80159c4 <uxr_next_reliable_nack_buffer_to_send+0x24>
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8015a10:	e7cd      	b.n	80159ae <uxr_next_reliable_nack_buffer_to_send+0xe>
 8015a12:	bf00      	nop

08015a14 <uxr_process_acknack>:
 8015a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a16:	4604      	mov	r4, r0
 8015a18:	460e      	mov	r6, r1
 8015a1a:	4610      	mov	r0, r2
 8015a1c:	2101      	movs	r1, #1
 8015a1e:	f000 f989 	bl	8015d34 <uxr_seq_num_sub>
 8015a22:	8a61      	ldrh	r1, [r4, #18]
 8015a24:	f000 f986 	bl	8015d34 <uxr_seq_num_sub>
 8015a28:	b1c0      	cbz	r0, 8015a5c <uxr_process_acknack+0x48>
 8015a2a:	4605      	mov	r5, r0
 8015a2c:	2700      	movs	r7, #0
 8015a2e:	2101      	movs	r1, #1
 8015a30:	8a60      	ldrh	r0, [r4, #18]
 8015a32:	f000 f97b 	bl	8015d2c <uxr_seq_num_add>
 8015a36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015a3a:	fbb0 f1fc 	udiv	r1, r0, ip
 8015a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015a42:	fb0c 0111 	mls	r1, ip, r1, r0
 8015a46:	b289      	uxth	r1, r1
 8015a48:	3701      	adds	r7, #1
 8015a4a:	fbb3 f3fc 	udiv	r3, r3, ip
 8015a4e:	fb01 f303 	mul.w	r3, r1, r3
 8015a52:	42bd      	cmp	r5, r7
 8015a54:	7b21      	ldrb	r1, [r4, #12]
 8015a56:	8260      	strh	r0, [r4, #18]
 8015a58:	50d1      	str	r1, [r2, r3]
 8015a5a:	d1e8      	bne.n	8015a2e <uxr_process_acknack+0x1a>
 8015a5c:	3e00      	subs	r6, #0
 8015a5e:	f04f 0300 	mov.w	r3, #0
 8015a62:	bf18      	it	ne
 8015a64:	2601      	movne	r6, #1
 8015a66:	f884 3020 	strb.w	r3, [r4, #32]
 8015a6a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015a70 <uxr_is_output_up_to_date>:
 8015a70:	8a01      	ldrh	r1, [r0, #16]
 8015a72:	8a40      	ldrh	r0, [r0, #18]
 8015a74:	b508      	push	{r3, lr}
 8015a76:	f000 f961 	bl	8015d3c <uxr_seq_num_cmp>
 8015a7a:	fab0 f080 	clz	r0, r0
 8015a7e:	0940      	lsrs	r0, r0, #5
 8015a80:	bd08      	pop	{r3, pc}
 8015a82:	bf00      	nop

08015a84 <get_available_free_slots>:
 8015a84:	8901      	ldrh	r1, [r0, #8]
 8015a86:	b1c1      	cbz	r1, 8015aba <get_available_free_slots+0x36>
 8015a88:	b530      	push	{r4, r5, lr}
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	6843      	ldr	r3, [r0, #4]
 8015a8e:	6805      	ldr	r5, [r0, #0]
 8015a90:	7b04      	ldrb	r4, [r0, #12]
 8015a92:	fbb3 fef1 	udiv	lr, r3, r1
 8015a96:	4610      	mov	r0, r2
 8015a98:	b293      	uxth	r3, r2
 8015a9a:	fbb3 fcf1 	udiv	ip, r3, r1
 8015a9e:	fb01 331c 	mls	r3, r1, ip, r3
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	fb0e f303 	mul.w	r3, lr, r3
 8015aa8:	3201      	adds	r2, #1
 8015aaa:	58eb      	ldr	r3, [r5, r3]
 8015aac:	429c      	cmp	r4, r3
 8015aae:	bf04      	itt	eq
 8015ab0:	3001      	addeq	r0, #1
 8015ab2:	b280      	uxtheq	r0, r0
 8015ab4:	4291      	cmp	r1, r2
 8015ab6:	d1ef      	bne.n	8015a98 <get_available_free_slots+0x14>
 8015ab8:	bd30      	pop	{r4, r5, pc}
 8015aba:	4608      	mov	r0, r1
 8015abc:	4770      	bx	lr
 8015abe:	bf00      	nop

08015ac0 <uxr_buffer_request_data>:
 8015ac0:	b530      	push	{r4, r5, lr}
 8015ac2:	b095      	sub	sp, #84	@ 0x54
 8015ac4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015ac8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015aca:	f88d 301c 	strb.w	r3, [sp, #28]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	2d00      	cmp	r5, #0
 8015ad2:	bf14      	ite	ne
 8015ad4:	2101      	movne	r1, #1
 8015ad6:	4611      	moveq	r1, r2
 8015ad8:	4604      	mov	r4, r0
 8015ada:	f88d 201d 	strb.w	r2, [sp, #29]
 8015ade:	f88d 201e 	strb.w	r2, [sp, #30]
 8015ae2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015ae6:	d021      	beq.n	8015b2c <uxr_buffer_request_data+0x6c>
 8015ae8:	682a      	ldr	r2, [r5, #0]
 8015aea:	686b      	ldr	r3, [r5, #4]
 8015aec:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8015af0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015af4:	2210      	movs	r2, #16
 8015af6:	2308      	movs	r3, #8
 8015af8:	2100      	movs	r1, #0
 8015afa:	e9cd 3100 	strd	r3, r1, [sp]
 8015afe:	4620      	mov	r0, r4
 8015b00:	9905      	ldr	r1, [sp, #20]
 8015b02:	ab0c      	add	r3, sp, #48	@ 0x30
 8015b04:	f7f7 feca 	bl	800d89c <uxr_prepare_stream_to_write_submessage>
 8015b08:	b918      	cbnz	r0, 8015b12 <uxr_buffer_request_data+0x52>
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	b015      	add	sp, #84	@ 0x54
 8015b10:	bd30      	pop	{r4, r5, pc}
 8015b12:	9904      	ldr	r1, [sp, #16]
 8015b14:	aa06      	add	r2, sp, #24
 8015b16:	4620      	mov	r0, r4
 8015b18:	f7f7 fffa 	bl	800db10 <uxr_init_base_object_request>
 8015b1c:	a906      	add	r1, sp, #24
 8015b1e:	4604      	mov	r4, r0
 8015b20:	a80c      	add	r0, sp, #48	@ 0x30
 8015b22:	f7f9 ff2b 	bl	800f97c <uxr_serialize_READ_DATA_Payload>
 8015b26:	4620      	mov	r0, r4
 8015b28:	b015      	add	sp, #84	@ 0x54
 8015b2a:	bd30      	pop	{r4, r5, pc}
 8015b2c:	2208      	movs	r2, #8
 8015b2e:	e7e2      	b.n	8015af6 <uxr_buffer_request_data+0x36>

08015b30 <uxr_buffer_cancel_data>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	b094      	sub	sp, #80	@ 0x50
 8015b34:	2300      	movs	r3, #0
 8015b36:	9301      	str	r3, [sp, #4]
 8015b38:	9205      	str	r2, [sp, #20]
 8015b3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b3e:	2201      	movs	r2, #1
 8015b40:	f88d 301e 	strb.w	r3, [sp, #30]
 8015b44:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015b48:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015b4c:	2308      	movs	r3, #8
 8015b4e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015b52:	9300      	str	r3, [sp, #0]
 8015b54:	2210      	movs	r2, #16
 8015b56:	ab0c      	add	r3, sp, #48	@ 0x30
 8015b58:	4604      	mov	r4, r0
 8015b5a:	f7f7 fe9f 	bl	800d89c <uxr_prepare_stream_to_write_submessage>
 8015b5e:	b918      	cbnz	r0, 8015b68 <uxr_buffer_cancel_data+0x38>
 8015b60:	4604      	mov	r4, r0
 8015b62:	4620      	mov	r0, r4
 8015b64:	b014      	add	sp, #80	@ 0x50
 8015b66:	bd10      	pop	{r4, pc}
 8015b68:	9905      	ldr	r1, [sp, #20]
 8015b6a:	aa06      	add	r2, sp, #24
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	f7f7 ffcf 	bl	800db10 <uxr_init_base_object_request>
 8015b72:	a906      	add	r1, sp, #24
 8015b74:	4604      	mov	r4, r0
 8015b76:	a80c      	add	r0, sp, #48	@ 0x30
 8015b78:	f7f9 ff00 	bl	800f97c <uxr_serialize_READ_DATA_Payload>
 8015b7c:	4620      	mov	r0, r4
 8015b7e:	b014      	add	sp, #80	@ 0x50
 8015b80:	bd10      	pop	{r4, pc}
 8015b82:	bf00      	nop

08015b84 <read_submessage_format>:
 8015b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b88:	b095      	sub	sp, #84	@ 0x54
 8015b8a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8015b8e:	b113      	cbz	r3, 8015b96 <read_submessage_format+0x12>
 8015b90:	b015      	add	sp, #84	@ 0x54
 8015b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b96:	460c      	mov	r4, r1
 8015b98:	4616      	mov	r6, r2
 8015b9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015b9e:	461d      	mov	r5, r3
 8015ba0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015ba2:	9304      	str	r3, [sp, #16]
 8015ba4:	1a52      	subs	r2, r2, r1
 8015ba6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015ba8:	9305      	str	r3, [sp, #20]
 8015baa:	4680      	mov	r8, r0
 8015bac:	a80c      	add	r0, sp, #48	@ 0x30
 8015bae:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 8015bb2:	f7f6 fa8b 	bl	800c0cc <ucdr_init_buffer>
 8015bb6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015bba:	a80c      	add	r0, sp, #48	@ 0x30
 8015bbc:	f7f6 fa5a 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 8015bc0:	69e3      	ldr	r3, [r4, #28]
 8015bc2:	b35b      	cbz	r3, 8015c1c <read_submessage_format+0x98>
 8015bc4:	f1b9 0f07 	cmp.w	r9, #7
 8015bc8:	751d      	strb	r5, [r3, #20]
 8015bca:	d043      	beq.n	8015c54 <read_submessage_format+0xd0>
 8015bcc:	f1b9 0f08 	cmp.w	r9, #8
 8015bd0:	d032      	beq.n	8015c38 <read_submessage_format+0xb4>
 8015bd2:	f1b9 0f06 	cmp.w	r9, #6
 8015bd6:	d008      	beq.n	8015bea <read_submessage_format+0x66>
 8015bd8:	2201      	movs	r2, #1
 8015bda:	751a      	strb	r2, [r3, #20]
 8015bdc:	4631      	mov	r1, r6
 8015bde:	4620      	mov	r0, r4
 8015be0:	f7f6 fac4 	bl	800c16c <ucdr_advance_buffer>
 8015be4:	b015      	add	sp, #84	@ 0x54
 8015be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bea:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8015bee:	2d00      	cmp	r5, #0
 8015bf0:	d0f2      	beq.n	8015bd8 <read_submessage_format+0x54>
 8015bf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8015bf4:	e9cd 3600 	strd	r3, r6, [sp]
 8015bf8:	2306      	movs	r3, #6
 8015bfa:	f88d 3016 	strb.w	r3, [sp, #22]
 8015bfe:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 8015c02:	9302      	str	r3, [sp, #8]
 8015c04:	463a      	mov	r2, r7
 8015c06:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015c0a:	4640      	mov	r0, r8
 8015c0c:	47a8      	blx	r5
 8015c0e:	69e3      	ldr	r3, [r4, #28]
 8015c10:	2201      	movs	r2, #1
 8015c12:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d1de      	bne.n	8015bd8 <read_submessage_format+0x54>
 8015c1a:	e7df      	b.n	8015bdc <read_submessage_format+0x58>
 8015c1c:	f1b9 0f07 	cmp.w	r9, #7
 8015c20:	d032      	beq.n	8015c88 <read_submessage_format+0x104>
 8015c22:	f1b9 0f08 	cmp.w	r9, #8
 8015c26:	d02a      	beq.n	8015c7e <read_submessage_format+0xfa>
 8015c28:	f1b9 0f06 	cmp.w	r9, #6
 8015c2c:	d1d6      	bne.n	8015bdc <read_submessage_format+0x58>
 8015c2e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8015c32:	2d00      	cmp	r5, #0
 8015c34:	d1dd      	bne.n	8015bf2 <read_submessage_format+0x6e>
 8015c36:	e7d1      	b.n	8015bdc <read_submessage_format+0x58>
 8015c38:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8015c3c:	2a00      	cmp	r2, #0
 8015c3e:	d0cb      	beq.n	8015bd8 <read_submessage_format+0x54>
 8015c40:	a906      	add	r1, sp, #24
 8015c42:	a80c      	add	r0, sp, #48	@ 0x30
 8015c44:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015c46:	f7f9 ff5f 	bl	800fb08 <uxr_deserialize_SampleIdentity>
 8015c4a:	bb28      	cbnz	r0, 8015c98 <read_submessage_format+0x114>
 8015c4c:	69e3      	ldr	r3, [r4, #28]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d1c2      	bne.n	8015bd8 <read_submessage_format+0x54>
 8015c52:	e7c3      	b.n	8015bdc <read_submessage_format+0x58>
 8015c54:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8015c58:	b16a      	cbz	r2, 8015c76 <read_submessage_format+0xf2>
 8015c5a:	a906      	add	r1, sp, #24
 8015c5c:	a80c      	add	r0, sp, #48	@ 0x30
 8015c5e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015c60:	f7f9 fc2c 	bl	800f4bc <uxr_deserialize_BaseObjectRequest>
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d13a      	bne.n	8015cde <read_submessage_format+0x15a>
 8015c68:	68a2      	ldr	r2, [r4, #8]
 8015c6a:	69e3      	ldr	r3, [r4, #28]
 8015c6c:	4432      	add	r2, r6
 8015c6e:	60a2      	str	r2, [r4, #8]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d1b1      	bne.n	8015bd8 <read_submessage_format+0x54>
 8015c74:	e7b2      	b.n	8015bdc <read_submessage_format+0x58>
 8015c76:	68a2      	ldr	r2, [r4, #8]
 8015c78:	4432      	add	r2, r6
 8015c7a:	60a2      	str	r2, [r4, #8]
 8015c7c:	e7ac      	b.n	8015bd8 <read_submessage_format+0x54>
 8015c7e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d1dc      	bne.n	8015c40 <read_submessage_format+0xbc>
 8015c86:	e7a9      	b.n	8015bdc <read_submessage_format+0x58>
 8015c88:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d1e4      	bne.n	8015c5a <read_submessage_format+0xd6>
 8015c90:	68a3      	ldr	r3, [r4, #8]
 8015c92:	4433      	add	r3, r6
 8015c94:	60a3      	str	r3, [r4, #8]
 8015c96:	e7a1      	b.n	8015bdc <read_submessage_format+0x58>
 8015c98:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015c9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015c9e:	1a52      	subs	r2, r2, r1
 8015ca0:	1aed      	subs	r5, r5, r3
 8015ca2:	a80c      	add	r0, sp, #48	@ 0x30
 8015ca4:	f7f6 fa12 	bl	800c0cc <ucdr_init_buffer>
 8015ca8:	4435      	add	r5, r6
 8015caa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015cae:	a80c      	add	r0, sp, #48	@ 0x30
 8015cb0:	f7f6 f9e0 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 8015cb4:	b2ad      	uxth	r5, r5
 8015cb6:	ab0c      	add	r3, sp, #48	@ 0x30
 8015cb8:	9300      	str	r3, [sp, #0]
 8015cba:	9501      	str	r5, [sp, #4]
 8015cbc:	2108      	movs	r1, #8
 8015cbe:	f88d 1016 	strb.w	r1, [sp, #22]
 8015cc2:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8015cc6:	9102      	str	r1, [sp, #8]
 8015cc8:	ab06      	add	r3, sp, #24
 8015cca:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 8015cce:	9905      	ldr	r1, [sp, #20]
 8015cd0:	463a      	mov	r2, r7
 8015cd2:	4640      	mov	r0, r8
 8015cd4:	47a8      	blx	r5
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015cdc:	e7b6      	b.n	8015c4c <read_submessage_format+0xc8>
 8015cde:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015ce2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ce4:	1a52      	subs	r2, r2, r1
 8015ce6:	1aed      	subs	r5, r5, r3
 8015ce8:	a80c      	add	r0, sp, #48	@ 0x30
 8015cea:	f7f6 f9ef 	bl	800c0cc <ucdr_init_buffer>
 8015cee:	4435      	add	r5, r6
 8015cf0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015cf4:	a80c      	add	r0, sp, #48	@ 0x30
 8015cf6:	f7f6 f9bd 	bl	800c074 <ucdr_set_on_full_buffer_callback>
 8015cfa:	b2ad      	uxth	r5, r5
 8015cfc:	ab0c      	add	r3, sp, #48	@ 0x30
 8015cfe:	9300      	str	r3, [sp, #0]
 8015d00:	9501      	str	r5, [sp, #4]
 8015d02:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015d06:	2107      	movs	r1, #7
 8015d08:	f88d 1016 	strb.w	r1, [sp, #22]
 8015d0c:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8015d10:	9102      	str	r1, [sp, #8]
 8015d12:	ba5b      	rev16	r3, r3
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8015d1a:	9905      	ldr	r1, [sp, #20]
 8015d1c:	463a      	mov	r2, r7
 8015d1e:	4640      	mov	r0, r8
 8015d20:	47a8      	blx	r5
 8015d22:	2301      	movs	r3, #1
 8015d24:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015d28:	e79e      	b.n	8015c68 <read_submessage_format+0xe4>
 8015d2a:	bf00      	nop

08015d2c <uxr_seq_num_add>:
 8015d2c:	4408      	add	r0, r1
 8015d2e:	b280      	uxth	r0, r0
 8015d30:	4770      	bx	lr
 8015d32:	bf00      	nop

08015d34 <uxr_seq_num_sub>:
 8015d34:	1a40      	subs	r0, r0, r1
 8015d36:	b280      	uxth	r0, r0
 8015d38:	4770      	bx	lr
 8015d3a:	bf00      	nop

08015d3c <uxr_seq_num_cmp>:
 8015d3c:	4288      	cmp	r0, r1
 8015d3e:	d010      	beq.n	8015d62 <uxr_seq_num_cmp+0x26>
 8015d40:	d207      	bcs.n	8015d52 <uxr_seq_num_cmp+0x16>
 8015d42:	1a09      	subs	r1, r1, r0
 8015d44:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8015d48:	bfb4      	ite	lt
 8015d4a:	f04f 30ff 	movlt.w	r0, #4294967295
 8015d4e:	2001      	movge	r0, #1
 8015d50:	4770      	bx	lr
 8015d52:	1a41      	subs	r1, r0, r1
 8015d54:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8015d58:	bfcc      	ite	gt
 8015d5a:	f04f 30ff 	movgt.w	r0, #4294967295
 8015d5e:	2001      	movle	r0, #1
 8015d60:	4770      	bx	lr
 8015d62:	2000      	movs	r0, #0
 8015d64:	4770      	bx	lr
 8015d66:	bf00      	nop

08015d68 <rcl_get_automatic_discovery_range>:
 8015d68:	b530      	push	{r4, r5, lr}
 8015d6a:	b083      	sub	sp, #12
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	9301      	str	r3, [sp, #4]
 8015d70:	b1c0      	cbz	r0, 8015da4 <rcl_get_automatic_discovery_range+0x3c>
 8015d72:	4604      	mov	r4, r0
 8015d74:	a901      	add	r1, sp, #4
 8015d76:	4818      	ldr	r0, [pc, #96]	@ (8015dd8 <rcl_get_automatic_discovery_range+0x70>)
 8015d78:	f7fc ff38 	bl	8012bec <rcutils_get_env>
 8015d7c:	b110      	cbz	r0, 8015d84 <rcl_get_automatic_discovery_range+0x1c>
 8015d7e:	2001      	movs	r0, #1
 8015d80:	b003      	add	sp, #12
 8015d82:	bd30      	pop	{r4, r5, pc}
 8015d84:	9d01      	ldr	r5, [sp, #4]
 8015d86:	782b      	ldrb	r3, [r5, #0]
 8015d88:	b923      	cbnz	r3, 8015d94 <rcl_get_automatic_discovery_range+0x2c>
 8015d8a:	2303      	movs	r3, #3
 8015d8c:	7023      	strb	r3, [r4, #0]
 8015d8e:	2000      	movs	r0, #0
 8015d90:	b003      	add	sp, #12
 8015d92:	bd30      	pop	{r4, r5, pc}
 8015d94:	4911      	ldr	r1, [pc, #68]	@ (8015ddc <rcl_get_automatic_discovery_range+0x74>)
 8015d96:	4628      	mov	r0, r5
 8015d98:	f7ea fa3a 	bl	8000210 <strcmp>
 8015d9c:	b928      	cbnz	r0, 8015daa <rcl_get_automatic_discovery_range+0x42>
 8015d9e:	2301      	movs	r3, #1
 8015da0:	7023      	strb	r3, [r4, #0]
 8015da2:	e7f4      	b.n	8015d8e <rcl_get_automatic_discovery_range+0x26>
 8015da4:	200b      	movs	r0, #11
 8015da6:	b003      	add	sp, #12
 8015da8:	bd30      	pop	{r4, r5, pc}
 8015daa:	490d      	ldr	r1, [pc, #52]	@ (8015de0 <rcl_get_automatic_discovery_range+0x78>)
 8015dac:	4628      	mov	r0, r5
 8015dae:	f7ea fa2f 	bl	8000210 <strcmp>
 8015db2:	b168      	cbz	r0, 8015dd0 <rcl_get_automatic_discovery_range+0x68>
 8015db4:	490b      	ldr	r1, [pc, #44]	@ (8015de4 <rcl_get_automatic_discovery_range+0x7c>)
 8015db6:	4628      	mov	r0, r5
 8015db8:	f7ea fa2a 	bl	8000210 <strcmp>
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	d0e4      	beq.n	8015d8a <rcl_get_automatic_discovery_range+0x22>
 8015dc0:	4909      	ldr	r1, [pc, #36]	@ (8015de8 <rcl_get_automatic_discovery_range+0x80>)
 8015dc2:	4628      	mov	r0, r5
 8015dc4:	f7ea fa24 	bl	8000210 <strcmp>
 8015dc8:	b910      	cbnz	r0, 8015dd0 <rcl_get_automatic_discovery_range+0x68>
 8015dca:	2304      	movs	r3, #4
 8015dcc:	7023      	strb	r3, [r4, #0]
 8015dce:	e7de      	b.n	8015d8e <rcl_get_automatic_discovery_range+0x26>
 8015dd0:	2302      	movs	r3, #2
 8015dd2:	7023      	strb	r3, [r4, #0]
 8015dd4:	e7db      	b.n	8015d8e <rcl_get_automatic_discovery_range+0x26>
 8015dd6:	bf00      	nop
 8015dd8:	08018b6c 	.word	0x08018b6c
 8015ddc:	08018b8c 	.word	0x08018b8c
 8015de0:	08018b90 	.word	0x08018b90
 8015de4:	08018b9c 	.word	0x08018b9c
 8015de8:	08018ba4 	.word	0x08018ba4

08015dec <rcl_automatic_discovery_range_to_string>:
 8015dec:	2804      	cmp	r0, #4
 8015dee:	bf9a      	itte	ls
 8015df0:	4b02      	ldrls	r3, [pc, #8]	@ (8015dfc <rcl_automatic_discovery_range_to_string+0x10>)
 8015df2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015df6:	2000      	movhi	r0, #0
 8015df8:	4770      	bx	lr
 8015dfa:	bf00      	nop
 8015dfc:	080193c4 	.word	0x080193c4

08015e00 <rcl_get_discovery_static_peers>:
 8015e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e04:	b08c      	sub	sp, #48	@ 0x30
 8015e06:	2300      	movs	r3, #0
 8015e08:	9304      	str	r3, [sp, #16]
 8015e0a:	2800      	cmp	r0, #0
 8015e0c:	d04e      	beq.n	8015eac <rcl_get_discovery_static_peers+0xac>
 8015e0e:	460d      	mov	r5, r1
 8015e10:	2900      	cmp	r1, #0
 8015e12:	d04b      	beq.n	8015eac <rcl_get_discovery_static_peers+0xac>
 8015e14:	4604      	mov	r4, r0
 8015e16:	a904      	add	r1, sp, #16
 8015e18:	482d      	ldr	r0, [pc, #180]	@ (8015ed0 <rcl_get_discovery_static_peers+0xd0>)
 8015e1a:	f7fc fee7 	bl	8012bec <rcutils_get_env>
 8015e1e:	b118      	cbz	r0, 8015e28 <rcl_get_discovery_static_peers+0x28>
 8015e20:	2001      	movs	r0, #1
 8015e22:	b00c      	add	sp, #48	@ 0x30
 8015e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e28:	9b04      	ldr	r3, [sp, #16]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d0f8      	beq.n	8015e20 <rcl_get_discovery_static_peers+0x20>
 8015e2e:	af05      	add	r7, sp, #20
 8015e30:	4638      	mov	r0, r7
 8015e32:	f000 fc7f 	bl	8016734 <rcutils_get_zero_initialized_string_array>
 8015e36:	f105 0308 	add.w	r3, r5, #8
 8015e3a:	9703      	str	r7, [sp, #12]
 8015e3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015e40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015e44:	9804      	ldr	r0, [sp, #16]
 8015e46:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015e4a:	213b      	movs	r1, #59	@ 0x3b
 8015e4c:	f000 fbc2 	bl	80165d4 <rcutils_split>
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d1e5      	bne.n	8015e20 <rcl_get_discovery_static_peers+0x20>
 8015e54:	9905      	ldr	r1, [sp, #20]
 8015e56:	462a      	mov	r2, r5
 8015e58:	4620      	mov	r0, r4
 8015e5a:	f000 fcc3 	bl	80167e4 <rmw_discovery_options_init>
 8015e5e:	4606      	mov	r6, r0
 8015e60:	bb90      	cbnz	r0, 8015ec8 <rcl_get_discovery_static_peers+0xc8>
 8015e62:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8015e66:	f1b9 0f00 	cmp.w	r9, #0
 8015e6a:	d026      	beq.n	8015eba <rcl_get_discovery_static_peers+0xba>
 8015e6c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8015e70:	4680      	mov	r8, r0
 8015e72:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8015e76:	4628      	mov	r0, r5
 8015e78:	f7ea fa2a 	bl	80002d0 <strlen>
 8015e7c:	28ff      	cmp	r0, #255	@ 0xff
 8015e7e:	4629      	mov	r1, r5
 8015e80:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8015e84:	d816      	bhi.n	8015eb4 <rcl_get_discovery_static_peers+0xb4>
 8015e86:	6860      	ldr	r0, [r4, #4]
 8015e88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015e8c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8015e90:	f001 fb93 	bl	80175ba <strncpy>
 8015e94:	6863      	ldr	r3, [r4, #4]
 8015e96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8015e9a:	3601      	adds	r6, #1
 8015e9c:	442b      	add	r3, r5
 8015e9e:	454e      	cmp	r6, r9
 8015ea0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8015ea4:	d209      	bcs.n	8015eba <rcl_get_discovery_static_peers+0xba>
 8015ea6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8015eaa:	e7e2      	b.n	8015e72 <rcl_get_discovery_static_peers+0x72>
 8015eac:	200b      	movs	r0, #11
 8015eae:	b00c      	add	sp, #48	@ 0x30
 8015eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb4:	3601      	adds	r6, #1
 8015eb6:	454e      	cmp	r6, r9
 8015eb8:	d3db      	bcc.n	8015e72 <rcl_get_discovery_static_peers+0x72>
 8015eba:	4638      	mov	r0, r7
 8015ebc:	f000 fc6c 	bl	8016798 <rcutils_string_array_fini>
 8015ec0:	3800      	subs	r0, #0
 8015ec2:	bf18      	it	ne
 8015ec4:	2001      	movne	r0, #1
 8015ec6:	e7ac      	b.n	8015e22 <rcl_get_discovery_static_peers+0x22>
 8015ec8:	f7f9 ff18 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 8015ecc:	e7a9      	b.n	8015e22 <rcl_get_discovery_static_peers+0x22>
 8015ece:	bf00      	nop
 8015ed0:	08018bb4 	.word	0x08018bb4

08015ed4 <rcl_get_default_domain_id>:
 8015ed4:	b530      	push	{r4, r5, lr}
 8015ed6:	b083      	sub	sp, #12
 8015ed8:	2300      	movs	r3, #0
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	b1f0      	cbz	r0, 8015f1c <rcl_get_default_domain_id+0x48>
 8015ede:	4604      	mov	r4, r0
 8015ee0:	4669      	mov	r1, sp
 8015ee2:	4812      	ldr	r0, [pc, #72]	@ (8015f2c <rcl_get_default_domain_id+0x58>)
 8015ee4:	f7fc fe82 	bl	8012bec <rcutils_get_env>
 8015ee8:	4602      	mov	r2, r0
 8015eea:	b108      	cbz	r0, 8015ef0 <rcl_get_default_domain_id+0x1c>
 8015eec:	2001      	movs	r0, #1
 8015eee:	e004      	b.n	8015efa <rcl_get_default_domain_id+0x26>
 8015ef0:	9800      	ldr	r0, [sp, #0]
 8015ef2:	b108      	cbz	r0, 8015ef8 <rcl_get_default_domain_id+0x24>
 8015ef4:	7803      	ldrb	r3, [r0, #0]
 8015ef6:	b913      	cbnz	r3, 8015efe <rcl_get_default_domain_id+0x2a>
 8015ef8:	2000      	movs	r0, #0
 8015efa:	b003      	add	sp, #12
 8015efc:	bd30      	pop	{r4, r5, pc}
 8015efe:	a901      	add	r1, sp, #4
 8015f00:	9201      	str	r2, [sp, #4]
 8015f02:	f001 f899 	bl	8017038 <strtoul>
 8015f06:	4605      	mov	r5, r0
 8015f08:	b158      	cbz	r0, 8015f22 <rcl_get_default_domain_id+0x4e>
 8015f0a:	1c43      	adds	r3, r0, #1
 8015f0c:	d104      	bne.n	8015f18 <rcl_get_default_domain_id+0x44>
 8015f0e:	f001 fbd3 	bl	80176b8 <__errno>
 8015f12:	6803      	ldr	r3, [r0, #0]
 8015f14:	2b22      	cmp	r3, #34	@ 0x22
 8015f16:	d0e9      	beq.n	8015eec <rcl_get_default_domain_id+0x18>
 8015f18:	6025      	str	r5, [r4, #0]
 8015f1a:	e7ed      	b.n	8015ef8 <rcl_get_default_domain_id+0x24>
 8015f1c:	200b      	movs	r0, #11
 8015f1e:	b003      	add	sp, #12
 8015f20:	bd30      	pop	{r4, r5, pc}
 8015f22:	9b01      	ldr	r3, [sp, #4]
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d0f6      	beq.n	8015f18 <rcl_get_default_domain_id+0x44>
 8015f2a:	e7df      	b.n	8015eec <rcl_get_default_domain_id+0x18>
 8015f2c:	08018c94 	.word	0x08018c94

08015f30 <rcl_expand_topic_name>:
 8015f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f34:	b08b      	sub	sp, #44	@ 0x2c
 8015f36:	9306      	str	r3, [sp, #24]
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	f000 80ad 	beq.w	8016098 <rcl_expand_topic_name+0x168>
 8015f3e:	460e      	mov	r6, r1
 8015f40:	2900      	cmp	r1, #0
 8015f42:	f000 80a9 	beq.w	8016098 <rcl_expand_topic_name+0x168>
 8015f46:	4617      	mov	r7, r2
 8015f48:	2a00      	cmp	r2, #0
 8015f4a:	f000 80a5 	beq.w	8016098 <rcl_expand_topic_name+0x168>
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	f000 80a2 	beq.w	8016098 <rcl_expand_topic_name+0x168>
 8015f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	f000 809e 	beq.w	8016098 <rcl_expand_topic_name+0x168>
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	a909      	add	r1, sp, #36	@ 0x24
 8015f60:	4680      	mov	r8, r0
 8015f62:	f000 fa45 	bl	80163f0 <rcl_validate_topic_name>
 8015f66:	4605      	mov	r5, r0
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	f040 8096 	bne.w	801609a <rcl_expand_topic_name+0x16a>
 8015f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	f040 809a 	bne.w	80160aa <rcl_expand_topic_name+0x17a>
 8015f76:	4602      	mov	r2, r0
 8015f78:	a909      	add	r1, sp, #36	@ 0x24
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	f7fd fa8e 	bl	801349c <rmw_validate_node_name>
 8015f80:	2800      	cmp	r0, #0
 8015f82:	f040 808e 	bne.w	80160a2 <rcl_expand_topic_name+0x172>
 8015f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f88:	2a00      	cmp	r2, #0
 8015f8a:	f040 8093 	bne.w	80160b4 <rcl_expand_topic_name+0x184>
 8015f8e:	a909      	add	r1, sp, #36	@ 0x24
 8015f90:	4638      	mov	r0, r7
 8015f92:	f7fd fa65 	bl	8013460 <rmw_validate_namespace>
 8015f96:	2800      	cmp	r0, #0
 8015f98:	f040 8083 	bne.w	80160a2 <rcl_expand_topic_name+0x172>
 8015f9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015f9e:	2d00      	cmp	r5, #0
 8015fa0:	f040 80f5 	bne.w	801618e <rcl_expand_topic_name+0x25e>
 8015fa4:	217b      	movs	r1, #123	@ 0x7b
 8015fa6:	4640      	mov	r0, r8
 8015fa8:	f001 fae8 	bl	801757c <strchr>
 8015fac:	f898 3000 	ldrb.w	r3, [r8]
 8015fb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8015fb2:	4604      	mov	r4, r0
 8015fb4:	f000 809f 	beq.w	80160f6 <rcl_expand_topic_name+0x1c6>
 8015fb8:	2b7e      	cmp	r3, #126	@ 0x7e
 8015fba:	f040 80ea 	bne.w	8016192 <rcl_expand_topic_name+0x262>
 8015fbe:	4638      	mov	r0, r7
 8015fc0:	f7ea f986 	bl	80002d0 <strlen>
 8015fc4:	4a86      	ldr	r2, [pc, #536]	@ (80161e0 <rcl_expand_topic_name+0x2b0>)
 8015fc6:	4b87      	ldr	r3, [pc, #540]	@ (80161e4 <rcl_expand_topic_name+0x2b4>)
 8015fc8:	2801      	cmp	r0, #1
 8015fca:	bf08      	it	eq
 8015fcc:	4613      	moveq	r3, r2
 8015fce:	9302      	str	r3, [sp, #8]
 8015fd0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015fd2:	9300      	str	r3, [sp, #0]
 8015fd4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015fd8:	f108 0301 	add.w	r3, r8, #1
 8015fdc:	9305      	str	r3, [sp, #20]
 8015fde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015fe2:	9301      	str	r3, [sp, #4]
 8015fe4:	ab14      	add	r3, sp, #80	@ 0x50
 8015fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fe8:	f7fc fe18 	bl	8012c1c <rcutils_format_string_limit>
 8015fec:	4682      	mov	sl, r0
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	f000 80e1 	beq.w	80161b6 <rcl_expand_topic_name+0x286>
 8015ff4:	2c00      	cmp	r4, #0
 8015ff6:	f000 8085 	beq.w	8016104 <rcl_expand_topic_name+0x1d4>
 8015ffa:	217b      	movs	r1, #123	@ 0x7b
 8015ffc:	f001 fabe 	bl	801757c <strchr>
 8016000:	46d1      	mov	r9, sl
 8016002:	4604      	mov	r4, r0
 8016004:	9507      	str	r5, [sp, #28]
 8016006:	464d      	mov	r5, r9
 8016008:	2c00      	cmp	r4, #0
 801600a:	f000 80a1 	beq.w	8016150 <rcl_expand_topic_name+0x220>
 801600e:	217d      	movs	r1, #125	@ 0x7d
 8016010:	4628      	mov	r0, r5
 8016012:	f001 fab3 	bl	801757c <strchr>
 8016016:	eba0 0904 	sub.w	r9, r0, r4
 801601a:	f109 0b01 	add.w	fp, r9, #1
 801601e:	4872      	ldr	r0, [pc, #456]	@ (80161e8 <rcl_expand_topic_name+0x2b8>)
 8016020:	465a      	mov	r2, fp
 8016022:	4621      	mov	r1, r4
 8016024:	f001 fab7 	bl	8017596 <strncmp>
 8016028:	2800      	cmp	r0, #0
 801602a:	d069      	beq.n	8016100 <rcl_expand_topic_name+0x1d0>
 801602c:	486f      	ldr	r0, [pc, #444]	@ (80161ec <rcl_expand_topic_name+0x2bc>)
 801602e:	465a      	mov	r2, fp
 8016030:	4621      	mov	r1, r4
 8016032:	f001 fab0 	bl	8017596 <strncmp>
 8016036:	b130      	cbz	r0, 8016046 <rcl_expand_topic_name+0x116>
 8016038:	486d      	ldr	r0, [pc, #436]	@ (80161f0 <rcl_expand_topic_name+0x2c0>)
 801603a:	465a      	mov	r2, fp
 801603c:	4621      	mov	r1, r4
 801603e:	f001 faaa 	bl	8017596 <strncmp>
 8016042:	2800      	cmp	r0, #0
 8016044:	d138      	bne.n	80160b8 <rcl_expand_topic_name+0x188>
 8016046:	46b9      	mov	r9, r7
 8016048:	ab16      	add	r3, sp, #88	@ 0x58
 801604a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801604e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016052:	ab14      	add	r3, sp, #80	@ 0x50
 8016054:	4620      	mov	r0, r4
 8016056:	cb0c      	ldmia	r3, {r2, r3}
 8016058:	4659      	mov	r1, fp
 801605a:	f7fc ff33 	bl	8012ec4 <rcutils_strndup>
 801605e:	4604      	mov	r4, r0
 8016060:	2800      	cmp	r0, #0
 8016062:	f000 8099 	beq.w	8016198 <rcl_expand_topic_name+0x268>
 8016066:	464a      	mov	r2, r9
 8016068:	4628      	mov	r0, r5
 801606a:	ab14      	add	r3, sp, #80	@ 0x50
 801606c:	4621      	mov	r1, r4
 801606e:	f7fc fe0f 	bl	8012c90 <rcutils_repl_str>
 8016072:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016074:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016076:	4605      	mov	r5, r0
 8016078:	4620      	mov	r0, r4
 801607a:	4798      	blx	r3
 801607c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801607e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016080:	4650      	mov	r0, sl
 8016082:	4798      	blx	r3
 8016084:	2d00      	cmp	r5, #0
 8016086:	f000 8091 	beq.w	80161ac <rcl_expand_topic_name+0x27c>
 801608a:	217b      	movs	r1, #123	@ 0x7b
 801608c:	4628      	mov	r0, r5
 801608e:	f001 fa75 	bl	801757c <strchr>
 8016092:	46aa      	mov	sl, r5
 8016094:	4604      	mov	r4, r0
 8016096:	e7b7      	b.n	8016008 <rcl_expand_topic_name+0xd8>
 8016098:	250b      	movs	r5, #11
 801609a:	4628      	mov	r0, r5
 801609c:	b00b      	add	sp, #44	@ 0x2c
 801609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a2:	f7f9 fe2b 	bl	800fcfc <rcl_convert_rmw_ret_to_rcl_ret>
 80160a6:	4605      	mov	r5, r0
 80160a8:	e7f7      	b.n	801609a <rcl_expand_topic_name+0x16a>
 80160aa:	2567      	movs	r5, #103	@ 0x67
 80160ac:	4628      	mov	r0, r5
 80160ae:	b00b      	add	sp, #44	@ 0x2c
 80160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b4:	25c9      	movs	r5, #201	@ 0xc9
 80160b6:	e7f0      	b.n	801609a <rcl_expand_topic_name+0x16a>
 80160b8:	f109 32ff 	add.w	r2, r9, #4294967295
 80160bc:	9806      	ldr	r0, [sp, #24]
 80160be:	1c61      	adds	r1, r4, #1
 80160c0:	f7fd f81c 	bl	80130fc <rcutils_string_map_getn>
 80160c4:	4681      	mov	r9, r0
 80160c6:	2800      	cmp	r0, #0
 80160c8:	d1be      	bne.n	8016048 <rcl_expand_topic_name+0x118>
 80160ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80160cc:	ab16      	add	r3, sp, #88	@ 0x58
 80160ce:	6010      	str	r0, [r2, #0]
 80160d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80160d4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80160d8:	ab14      	add	r3, sp, #80	@ 0x50
 80160da:	cb0c      	ldmia	r3, {r2, r3}
 80160dc:	4659      	mov	r1, fp
 80160de:	4620      	mov	r0, r4
 80160e0:	f7fc fef0 	bl	8012ec4 <rcutils_strndup>
 80160e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80160e6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80160e8:	4798      	blx	r3
 80160ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80160ec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80160ee:	4650      	mov	r0, sl
 80160f0:	4798      	blx	r3
 80160f2:	2569      	movs	r5, #105	@ 0x69
 80160f4:	e7d1      	b.n	801609a <rcl_expand_topic_name+0x16a>
 80160f6:	2800      	cmp	r0, #0
 80160f8:	d061      	beq.n	80161be <rcl_expand_topic_name+0x28e>
 80160fa:	46c1      	mov	r9, r8
 80160fc:	46aa      	mov	sl, r5
 80160fe:	e781      	b.n	8016004 <rcl_expand_topic_name+0xd4>
 8016100:	46b1      	mov	r9, r6
 8016102:	e7a1      	b.n	8016048 <rcl_expand_topic_name+0x118>
 8016104:	f89a 3000 	ldrb.w	r3, [sl]
 8016108:	2b2f      	cmp	r3, #47	@ 0x2f
 801610a:	d01d      	beq.n	8016148 <rcl_expand_topic_name+0x218>
 801610c:	4638      	mov	r0, r7
 801610e:	f7ea f8df 	bl	80002d0 <strlen>
 8016112:	4a38      	ldr	r2, [pc, #224]	@ (80161f4 <rcl_expand_topic_name+0x2c4>)
 8016114:	4b38      	ldr	r3, [pc, #224]	@ (80161f8 <rcl_expand_topic_name+0x2c8>)
 8016116:	f8cd a010 	str.w	sl, [sp, #16]
 801611a:	2801      	cmp	r0, #1
 801611c:	bf18      	it	ne
 801611e:	4613      	movne	r3, r2
 8016120:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016124:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016128:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801612a:	9703      	str	r7, [sp, #12]
 801612c:	9200      	str	r2, [sp, #0]
 801612e:	ab14      	add	r3, sp, #80	@ 0x50
 8016130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016132:	f7fc fd73 	bl	8012c1c <rcutils_format_string_limit>
 8016136:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016138:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801613a:	4604      	mov	r4, r0
 801613c:	4650      	mov	r0, sl
 801613e:	4798      	blx	r3
 8016140:	46a2      	mov	sl, r4
 8016142:	4653      	mov	r3, sl
 8016144:	2b00      	cmp	r3, #0
 8016146:	d036      	beq.n	80161b6 <rcl_expand_topic_name+0x286>
 8016148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801614a:	f8c3 a000 	str.w	sl, [r3]
 801614e:	e7a4      	b.n	801609a <rcl_expand_topic_name+0x16a>
 8016150:	4653      	mov	r3, sl
 8016152:	9d07      	ldr	r5, [sp, #28]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d1d5      	bne.n	8016104 <rcl_expand_topic_name+0x1d4>
 8016158:	f898 3000 	ldrb.w	r3, [r8]
 801615c:	2b2f      	cmp	r3, #47	@ 0x2f
 801615e:	d0f3      	beq.n	8016148 <rcl_expand_topic_name+0x218>
 8016160:	4638      	mov	r0, r7
 8016162:	f7ea f8b5 	bl	80002d0 <strlen>
 8016166:	4a23      	ldr	r2, [pc, #140]	@ (80161f4 <rcl_expand_topic_name+0x2c4>)
 8016168:	4b23      	ldr	r3, [pc, #140]	@ (80161f8 <rcl_expand_topic_name+0x2c8>)
 801616a:	f8cd 8010 	str.w	r8, [sp, #16]
 801616e:	2801      	cmp	r0, #1
 8016170:	bf18      	it	ne
 8016172:	4613      	movne	r3, r2
 8016174:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016178:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801617c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801617e:	9703      	str	r7, [sp, #12]
 8016180:	9200      	str	r2, [sp, #0]
 8016182:	ab14      	add	r3, sp, #80	@ 0x50
 8016184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016186:	f7fc fd49 	bl	8012c1c <rcutils_format_string_limit>
 801618a:	4682      	mov	sl, r0
 801618c:	e7d9      	b.n	8016142 <rcl_expand_topic_name+0x212>
 801618e:	25ca      	movs	r5, #202	@ 0xca
 8016190:	e783      	b.n	801609a <rcl_expand_topic_name+0x16a>
 8016192:	2800      	cmp	r0, #0
 8016194:	d1b1      	bne.n	80160fa <rcl_expand_topic_name+0x1ca>
 8016196:	e7e3      	b.n	8016160 <rcl_expand_topic_name+0x230>
 8016198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801619a:	6018      	str	r0, [r3, #0]
 801619c:	f7f3 fe78 	bl	8009e90 <rcutils_reset_error>
 80161a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80161a2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80161a4:	4650      	mov	r0, sl
 80161a6:	4798      	blx	r3
 80161a8:	250a      	movs	r5, #10
 80161aa:	e776      	b.n	801609a <rcl_expand_topic_name+0x16a>
 80161ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80161ae:	601d      	str	r5, [r3, #0]
 80161b0:	f7f3 fe6e 	bl	8009e90 <rcutils_reset_error>
 80161b4:	e7f8      	b.n	80161a8 <rcl_expand_topic_name+0x278>
 80161b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80161b8:	2300      	movs	r3, #0
 80161ba:	6013      	str	r3, [r2, #0]
 80161bc:	e7f4      	b.n	80161a8 <rcl_expand_topic_name+0x278>
 80161be:	ab17      	add	r3, sp, #92	@ 0x5c
 80161c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80161c4:	e88d 0003 	stmia.w	sp, {r0, r1}
 80161c8:	ab14      	add	r3, sp, #80	@ 0x50
 80161ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80161cc:	4640      	mov	r0, r8
 80161ce:	f7fc fe43 	bl	8012e58 <rcutils_strdup>
 80161d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80161d4:	6018      	str	r0, [r3, #0]
 80161d6:	2800      	cmp	r0, #0
 80161d8:	f47f af5f 	bne.w	801609a <rcl_expand_topic_name+0x16a>
 80161dc:	e7e8      	b.n	80161b0 <rcl_expand_topic_name+0x280>
 80161de:	bf00      	nop
 80161e0:	08018660 	.word	0x08018660
 80161e4:	08018ca4 	.word	0x08018ca4
 80161e8:	08018cac 	.word	0x08018cac
 80161ec:	08018cb4 	.word	0x08018cb4
 80161f0:	08018cbc 	.word	0x08018cbc
 80161f4:	080187d0 	.word	0x080187d0
 80161f8:	08018670 	.word	0x08018670

080161fc <rcl_get_default_topic_name_substitutions>:
 80161fc:	2800      	cmp	r0, #0
 80161fe:	bf0c      	ite	eq
 8016200:	200b      	moveq	r0, #11
 8016202:	2000      	movne	r0, #0
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop

08016208 <rcl_get_zero_initialized_guard_condition>:
 8016208:	4a03      	ldr	r2, [pc, #12]	@ (8016218 <rcl_get_zero_initialized_guard_condition+0x10>)
 801620a:	4603      	mov	r3, r0
 801620c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016210:	e883 0003 	stmia.w	r3, {r0, r1}
 8016214:	4618      	mov	r0, r3
 8016216:	4770      	bx	lr
 8016218:	080193d8 	.word	0x080193d8

0801621c <rcl_guard_condition_init>:
 801621c:	b082      	sub	sp, #8
 801621e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016220:	b087      	sub	sp, #28
 8016222:	ac0c      	add	r4, sp, #48	@ 0x30
 8016224:	e884 000c 	stmia.w	r4, {r2, r3}
 8016228:	46a6      	mov	lr, r4
 801622a:	460d      	mov	r5, r1
 801622c:	4604      	mov	r4, r0
 801622e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016232:	f10d 0c04 	add.w	ip, sp, #4
 8016236:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801623a:	f8de 3000 	ldr.w	r3, [lr]
 801623e:	f8cc 3000 	str.w	r3, [ip]
 8016242:	a801      	add	r0, sp, #4
 8016244:	f7f3 fdf8 	bl	8009e38 <rcutils_allocator_is_valid>
 8016248:	b338      	cbz	r0, 801629a <rcl_guard_condition_init+0x7e>
 801624a:	b334      	cbz	r4, 801629a <rcl_guard_condition_init+0x7e>
 801624c:	6866      	ldr	r6, [r4, #4]
 801624e:	b9ee      	cbnz	r6, 801628c <rcl_guard_condition_init+0x70>
 8016250:	b31d      	cbz	r5, 801629a <rcl_guard_condition_init+0x7e>
 8016252:	4628      	mov	r0, r5
 8016254:	f7f9 fd6c 	bl	800fd30 <rcl_context_is_valid>
 8016258:	b308      	cbz	r0, 801629e <rcl_guard_condition_init+0x82>
 801625a:	9b01      	ldr	r3, [sp, #4]
 801625c:	9905      	ldr	r1, [sp, #20]
 801625e:	201c      	movs	r0, #28
 8016260:	4798      	blx	r3
 8016262:	4607      	mov	r7, r0
 8016264:	6060      	str	r0, [r4, #4]
 8016266:	b310      	cbz	r0, 80162ae <rcl_guard_condition_init+0x92>
 8016268:	6828      	ldr	r0, [r5, #0]
 801626a:	3028      	adds	r0, #40	@ 0x28
 801626c:	f000 fc06 	bl	8016a7c <rmw_create_guard_condition>
 8016270:	6038      	str	r0, [r7, #0]
 8016272:	6860      	ldr	r0, [r4, #4]
 8016274:	6807      	ldr	r7, [r0, #0]
 8016276:	b1a7      	cbz	r7, 80162a2 <rcl_guard_condition_init+0x86>
 8016278:	2301      	movs	r3, #1
 801627a:	ac01      	add	r4, sp, #4
 801627c:	7103      	strb	r3, [r0, #4]
 801627e:	f100 0708 	add.w	r7, r0, #8
 8016282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016284:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016286:	6823      	ldr	r3, [r4, #0]
 8016288:	603b      	str	r3, [r7, #0]
 801628a:	e000      	b.n	801628e <rcl_guard_condition_init+0x72>
 801628c:	2664      	movs	r6, #100	@ 0x64
 801628e:	4630      	mov	r0, r6
 8016290:	b007      	add	sp, #28
 8016292:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016296:	b002      	add	sp, #8
 8016298:	4770      	bx	lr
 801629a:	260b      	movs	r6, #11
 801629c:	e7f7      	b.n	801628e <rcl_guard_condition_init+0x72>
 801629e:	2665      	movs	r6, #101	@ 0x65
 80162a0:	e7f5      	b.n	801628e <rcl_guard_condition_init+0x72>
 80162a2:	9b02      	ldr	r3, [sp, #8]
 80162a4:	9905      	ldr	r1, [sp, #20]
 80162a6:	4798      	blx	r3
 80162a8:	2601      	movs	r6, #1
 80162aa:	6067      	str	r7, [r4, #4]
 80162ac:	e7ef      	b.n	801628e <rcl_guard_condition_init+0x72>
 80162ae:	260a      	movs	r6, #10
 80162b0:	e7ed      	b.n	801628e <rcl_guard_condition_init+0x72>
 80162b2:	bf00      	nop

080162b4 <rcl_guard_condition_init_from_rmw>:
 80162b4:	b082      	sub	sp, #8
 80162b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ba:	b086      	sub	sp, #24
 80162bc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80162c0:	4604      	mov	r4, r0
 80162c2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80162c6:	460e      	mov	r6, r1
 80162c8:	4617      	mov	r7, r2
 80162ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80162ce:	f10d 0e04 	add.w	lr, sp, #4
 80162d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80162d6:	f8dc 3000 	ldr.w	r3, [ip]
 80162da:	f8ce 3000 	str.w	r3, [lr]
 80162de:	a801      	add	r0, sp, #4
 80162e0:	f7f3 fdaa 	bl	8009e38 <rcutils_allocator_is_valid>
 80162e4:	b350      	cbz	r0, 801633c <rcl_guard_condition_init_from_rmw+0x88>
 80162e6:	b34c      	cbz	r4, 801633c <rcl_guard_condition_init_from_rmw+0x88>
 80162e8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80162ec:	f1b8 0f00 	cmp.w	r8, #0
 80162f0:	d11e      	bne.n	8016330 <rcl_guard_condition_init_from_rmw+0x7c>
 80162f2:	b31f      	cbz	r7, 801633c <rcl_guard_condition_init_from_rmw+0x88>
 80162f4:	4638      	mov	r0, r7
 80162f6:	f7f9 fd1b 	bl	800fd30 <rcl_context_is_valid>
 80162fa:	b328      	cbz	r0, 8016348 <rcl_guard_condition_init_from_rmw+0x94>
 80162fc:	9b01      	ldr	r3, [sp, #4]
 80162fe:	9905      	ldr	r1, [sp, #20]
 8016300:	201c      	movs	r0, #28
 8016302:	4798      	blx	r3
 8016304:	4605      	mov	r5, r0
 8016306:	6060      	str	r0, [r4, #4]
 8016308:	b358      	cbz	r0, 8016362 <rcl_guard_condition_init_from_rmw+0xae>
 801630a:	b1fe      	cbz	r6, 801634c <rcl_guard_condition_init_from_rmw+0x98>
 801630c:	6006      	str	r6, [r0, #0]
 801630e:	f880 8004 	strb.w	r8, [r0, #4]
 8016312:	ac01      	add	r4, sp, #4
 8016314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016316:	f105 0c08 	add.w	ip, r5, #8
 801631a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801631e:	6823      	ldr	r3, [r4, #0]
 8016320:	f8cc 3000 	str.w	r3, [ip]
 8016324:	2000      	movs	r0, #0
 8016326:	b006      	add	sp, #24
 8016328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801632c:	b002      	add	sp, #8
 801632e:	4770      	bx	lr
 8016330:	2064      	movs	r0, #100	@ 0x64
 8016332:	b006      	add	sp, #24
 8016334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016338:	b002      	add	sp, #8
 801633a:	4770      	bx	lr
 801633c:	200b      	movs	r0, #11
 801633e:	b006      	add	sp, #24
 8016340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016344:	b002      	add	sp, #8
 8016346:	4770      	bx	lr
 8016348:	2065      	movs	r0, #101	@ 0x65
 801634a:	e7f2      	b.n	8016332 <rcl_guard_condition_init_from_rmw+0x7e>
 801634c:	6838      	ldr	r0, [r7, #0]
 801634e:	3028      	adds	r0, #40	@ 0x28
 8016350:	f000 fb94 	bl	8016a7c <rmw_create_guard_condition>
 8016354:	6028      	str	r0, [r5, #0]
 8016356:	6865      	ldr	r5, [r4, #4]
 8016358:	682e      	ldr	r6, [r5, #0]
 801635a:	b126      	cbz	r6, 8016366 <rcl_guard_condition_init_from_rmw+0xb2>
 801635c:	2301      	movs	r3, #1
 801635e:	712b      	strb	r3, [r5, #4]
 8016360:	e7d7      	b.n	8016312 <rcl_guard_condition_init_from_rmw+0x5e>
 8016362:	200a      	movs	r0, #10
 8016364:	e7e5      	b.n	8016332 <rcl_guard_condition_init_from_rmw+0x7e>
 8016366:	4628      	mov	r0, r5
 8016368:	9b02      	ldr	r3, [sp, #8]
 801636a:	9905      	ldr	r1, [sp, #20]
 801636c:	4798      	blx	r3
 801636e:	2001      	movs	r0, #1
 8016370:	6066      	str	r6, [r4, #4]
 8016372:	e7de      	b.n	8016332 <rcl_guard_condition_init_from_rmw+0x7e>

08016374 <rcl_guard_condition_fini>:
 8016374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016376:	b1d8      	cbz	r0, 80163b0 <rcl_guard_condition_fini+0x3c>
 8016378:	4604      	mov	r4, r0
 801637a:	6840      	ldr	r0, [r0, #4]
 801637c:	b158      	cbz	r0, 8016396 <rcl_guard_condition_fini+0x22>
 801637e:	6803      	ldr	r3, [r0, #0]
 8016380:	68c6      	ldr	r6, [r0, #12]
 8016382:	6987      	ldr	r7, [r0, #24]
 8016384:	b153      	cbz	r3, 801639c <rcl_guard_condition_fini+0x28>
 8016386:	7905      	ldrb	r5, [r0, #4]
 8016388:	b955      	cbnz	r5, 80163a0 <rcl_guard_condition_fini+0x2c>
 801638a:	4639      	mov	r1, r7
 801638c:	47b0      	blx	r6
 801638e:	2300      	movs	r3, #0
 8016390:	6063      	str	r3, [r4, #4]
 8016392:	4628      	mov	r0, r5
 8016394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016396:	4605      	mov	r5, r0
 8016398:	4628      	mov	r0, r5
 801639a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801639c:	461d      	mov	r5, r3
 801639e:	e7f4      	b.n	801638a <rcl_guard_condition_fini+0x16>
 80163a0:	4618      	mov	r0, r3
 80163a2:	f000 fb7f 	bl	8016aa4 <rmw_destroy_guard_condition>
 80163a6:	1e05      	subs	r5, r0, #0
 80163a8:	bf18      	it	ne
 80163aa:	2501      	movne	r5, #1
 80163ac:	6860      	ldr	r0, [r4, #4]
 80163ae:	e7ec      	b.n	801638a <rcl_guard_condition_fini+0x16>
 80163b0:	250b      	movs	r5, #11
 80163b2:	4628      	mov	r0, r5
 80163b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163b6:	bf00      	nop

080163b8 <rcl_guard_condition_get_default_options>:
 80163b8:	b510      	push	{r4, lr}
 80163ba:	4604      	mov	r4, r0
 80163bc:	f7f3 fd10 	bl	8009de0 <rcutils_get_default_allocator>
 80163c0:	4620      	mov	r0, r4
 80163c2:	bd10      	pop	{r4, pc}

080163c4 <rcl_trigger_guard_condition>:
 80163c4:	b148      	cbz	r0, 80163da <rcl_trigger_guard_condition+0x16>
 80163c6:	b508      	push	{r3, lr}
 80163c8:	6843      	ldr	r3, [r0, #4]
 80163ca:	b143      	cbz	r3, 80163de <rcl_trigger_guard_condition+0x1a>
 80163cc:	6818      	ldr	r0, [r3, #0]
 80163ce:	f000 fb7d 	bl	8016acc <rmw_trigger_guard_condition>
 80163d2:	3800      	subs	r0, #0
 80163d4:	bf18      	it	ne
 80163d6:	2001      	movne	r0, #1
 80163d8:	bd08      	pop	{r3, pc}
 80163da:	200b      	movs	r0, #11
 80163dc:	4770      	bx	lr
 80163de:	200b      	movs	r0, #11
 80163e0:	bd08      	pop	{r3, pc}
 80163e2:	bf00      	nop

080163e4 <rcl_guard_condition_get_rmw_handle>:
 80163e4:	b110      	cbz	r0, 80163ec <rcl_guard_condition_get_rmw_handle+0x8>
 80163e6:	6840      	ldr	r0, [r0, #4]
 80163e8:	b100      	cbz	r0, 80163ec <rcl_guard_condition_get_rmw_handle+0x8>
 80163ea:	6800      	ldr	r0, [r0, #0]
 80163ec:	4770      	bx	lr
 80163ee:	bf00      	nop

080163f0 <rcl_validate_topic_name>:
 80163f0:	2800      	cmp	r0, #0
 80163f2:	d06b      	beq.n	80164cc <rcl_validate_topic_name+0xdc>
 80163f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	460d      	mov	r5, r1
 80163fa:	2900      	cmp	r1, #0
 80163fc:	d06d      	beq.n	80164da <rcl_validate_topic_name+0xea>
 80163fe:	4616      	mov	r6, r2
 8016400:	4604      	mov	r4, r0
 8016402:	f7e9 ff65 	bl	80002d0 <strlen>
 8016406:	b190      	cbz	r0, 801642e <rcl_validate_topic_name+0x3e>
 8016408:	7821      	ldrb	r1, [r4, #0]
 801640a:	4a71      	ldr	r2, [pc, #452]	@ (80165d0 <rcl_validate_topic_name+0x1e0>)
 801640c:	5c53      	ldrb	r3, [r2, r1]
 801640e:	f013 0304 	ands.w	r3, r3, #4
 8016412:	d15d      	bne.n	80164d0 <rcl_validate_topic_name+0xe0>
 8016414:	1e47      	subs	r7, r0, #1
 8016416:	f814 c007 	ldrb.w	ip, [r4, r7]
 801641a:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801641e:	d10d      	bne.n	801643c <rcl_validate_topic_name+0x4c>
 8016420:	2302      	movs	r3, #2
 8016422:	602b      	str	r3, [r5, #0]
 8016424:	b146      	cbz	r6, 8016438 <rcl_validate_topic_name+0x48>
 8016426:	6037      	str	r7, [r6, #0]
 8016428:	2000      	movs	r0, #0
 801642a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801642e:	2301      	movs	r3, #1
 8016430:	602b      	str	r3, [r5, #0]
 8016432:	b10e      	cbz	r6, 8016438 <rcl_validate_topic_name+0x48>
 8016434:	2300      	movs	r3, #0
 8016436:	6033      	str	r3, [r6, #0]
 8016438:	2000      	movs	r0, #0
 801643a:	e7f6      	b.n	801642a <rcl_validate_topic_name+0x3a>
 801643c:	f104 38ff 	add.w	r8, r4, #4294967295
 8016440:	469a      	mov	sl, r3
 8016442:	469e      	mov	lr, r3
 8016444:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8016448:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801644c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8016450:	d85b      	bhi.n	801650a <rcl_validate_topic_name+0x11a>
 8016452:	e8df f00c 	tbb	[pc, ip]
 8016456:	4463      	.short	0x4463
 8016458:	44444444 	.word	0x44444444
 801645c:	44444444 	.word	0x44444444
 8016460:	5a5a5a44 	.word	0x5a5a5a44
 8016464:	5a5a5a5a 	.word	0x5a5a5a5a
 8016468:	44444444 	.word	0x44444444
 801646c:	44444444 	.word	0x44444444
 8016470:	44444444 	.word	0x44444444
 8016474:	44444444 	.word	0x44444444
 8016478:	44444444 	.word	0x44444444
 801647c:	44444444 	.word	0x44444444
 8016480:	5a5a4444 	.word	0x5a5a4444
 8016484:	5a2e5a5a 	.word	0x5a2e5a5a
 8016488:	44444444 	.word	0x44444444
 801648c:	44444444 	.word	0x44444444
 8016490:	44444444 	.word	0x44444444
 8016494:	44444444 	.word	0x44444444
 8016498:	44444444 	.word	0x44444444
 801649c:	44444444 	.word	0x44444444
 80164a0:	5a284444 	.word	0x5a284444
 80164a4:	6b73      	.short	0x6b73
 80164a6:	f1ba 0f00 	cmp.w	sl, #0
 80164aa:	d13a      	bne.n	8016522 <rcl_validate_topic_name+0x132>
 80164ac:	4673      	mov	r3, lr
 80164ae:	f04f 0a01 	mov.w	sl, #1
 80164b2:	f10e 0e01 	add.w	lr, lr, #1
 80164b6:	4570      	cmp	r0, lr
 80164b8:	d1c4      	bne.n	8016444 <rcl_validate_topic_name+0x54>
 80164ba:	f1ba 0f00 	cmp.w	sl, #0
 80164be:	d048      	beq.n	8016552 <rcl_validate_topic_name+0x162>
 80164c0:	2205      	movs	r2, #5
 80164c2:	602a      	str	r2, [r5, #0]
 80164c4:	2e00      	cmp	r6, #0
 80164c6:	d0b7      	beq.n	8016438 <rcl_validate_topic_name+0x48>
 80164c8:	6033      	str	r3, [r6, #0]
 80164ca:	e7b5      	b.n	8016438 <rcl_validate_topic_name+0x48>
 80164cc:	200b      	movs	r0, #11
 80164ce:	4770      	bx	lr
 80164d0:	2304      	movs	r3, #4
 80164d2:	602b      	str	r3, [r5, #0]
 80164d4:	2e00      	cmp	r6, #0
 80164d6:	d1ad      	bne.n	8016434 <rcl_validate_topic_name+0x44>
 80164d8:	e7ae      	b.n	8016438 <rcl_validate_topic_name+0x48>
 80164da:	200b      	movs	r0, #11
 80164dc:	e7a5      	b.n	801642a <rcl_validate_topic_name+0x3a>
 80164de:	f812 c009 	ldrb.w	ip, [r2, r9]
 80164e2:	f01c 0f04 	tst.w	ip, #4
 80164e6:	d0e4      	beq.n	80164b2 <rcl_validate_topic_name+0xc2>
 80164e8:	f1ba 0f00 	cmp.w	sl, #0
 80164ec:	d0e1      	beq.n	80164b2 <rcl_validate_topic_name+0xc2>
 80164ee:	f1be 0f00 	cmp.w	lr, #0
 80164f2:	d0de      	beq.n	80164b2 <rcl_validate_topic_name+0xc2>
 80164f4:	f10e 3cff 	add.w	ip, lr, #4294967295
 80164f8:	4563      	cmp	r3, ip
 80164fa:	d1da      	bne.n	80164b2 <rcl_validate_topic_name+0xc2>
 80164fc:	2309      	movs	r3, #9
 80164fe:	602b      	str	r3, [r5, #0]
 8016500:	2e00      	cmp	r6, #0
 8016502:	d099      	beq.n	8016438 <rcl_validate_topic_name+0x48>
 8016504:	f8c6 e000 	str.w	lr, [r6]
 8016508:	e796      	b.n	8016438 <rcl_validate_topic_name+0x48>
 801650a:	f1ba 0f00 	cmp.w	sl, #0
 801650e:	bf0c      	ite	eq
 8016510:	2303      	moveq	r3, #3
 8016512:	2308      	movne	r3, #8
 8016514:	602b      	str	r3, [r5, #0]
 8016516:	2e00      	cmp	r6, #0
 8016518:	d1f4      	bne.n	8016504 <rcl_validate_topic_name+0x114>
 801651a:	e78d      	b.n	8016438 <rcl_validate_topic_name+0x48>
 801651c:	f1ba 0f00 	cmp.w	sl, #0
 8016520:	d0c7      	beq.n	80164b2 <rcl_validate_topic_name+0xc2>
 8016522:	2308      	movs	r3, #8
 8016524:	602b      	str	r3, [r5, #0]
 8016526:	2e00      	cmp	r6, #0
 8016528:	d1ec      	bne.n	8016504 <rcl_validate_topic_name+0x114>
 801652a:	e785      	b.n	8016438 <rcl_validate_topic_name+0x48>
 801652c:	f1be 0f00 	cmp.w	lr, #0
 8016530:	d0bf      	beq.n	80164b2 <rcl_validate_topic_name+0xc2>
 8016532:	2306      	movs	r3, #6
 8016534:	602b      	str	r3, [r5, #0]
 8016536:	2e00      	cmp	r6, #0
 8016538:	d1e4      	bne.n	8016504 <rcl_validate_topic_name+0x114>
 801653a:	e77d      	b.n	8016438 <rcl_validate_topic_name+0x48>
 801653c:	f1ba 0f00 	cmp.w	sl, #0
 8016540:	d104      	bne.n	801654c <rcl_validate_topic_name+0x15c>
 8016542:	2305      	movs	r3, #5
 8016544:	602b      	str	r3, [r5, #0]
 8016546:	2e00      	cmp	r6, #0
 8016548:	d1dc      	bne.n	8016504 <rcl_validate_topic_name+0x114>
 801654a:	e775      	b.n	8016438 <rcl_validate_topic_name+0x48>
 801654c:	f04f 0a00 	mov.w	sl, #0
 8016550:	e7af      	b.n	80164b2 <rcl_validate_topic_name+0xc2>
 8016552:	297e      	cmp	r1, #126	@ 0x7e
 8016554:	d01d      	beq.n	8016592 <rcl_validate_topic_name+0x1a2>
 8016556:	2101      	movs	r1, #1
 8016558:	e006      	b.n	8016568 <rcl_validate_topic_name+0x178>
 801655a:	458e      	cmp	lr, r1
 801655c:	f104 0401 	add.w	r4, r4, #1
 8016560:	f101 0301 	add.w	r3, r1, #1
 8016564:	d912      	bls.n	801658c <rcl_validate_topic_name+0x19c>
 8016566:	4619      	mov	r1, r3
 8016568:	4557      	cmp	r7, sl
 801656a:	f10a 0a01 	add.w	sl, sl, #1
 801656e:	d0f4      	beq.n	801655a <rcl_validate_topic_name+0x16a>
 8016570:	7823      	ldrb	r3, [r4, #0]
 8016572:	2b2f      	cmp	r3, #47	@ 0x2f
 8016574:	d1f1      	bne.n	801655a <rcl_validate_topic_name+0x16a>
 8016576:	7863      	ldrb	r3, [r4, #1]
 8016578:	5cd3      	ldrb	r3, [r2, r3]
 801657a:	075b      	lsls	r3, r3, #29
 801657c:	d5ed      	bpl.n	801655a <rcl_validate_topic_name+0x16a>
 801657e:	2304      	movs	r3, #4
 8016580:	602b      	str	r3, [r5, #0]
 8016582:	2e00      	cmp	r6, #0
 8016584:	f43f af58 	beq.w	8016438 <rcl_validate_topic_name+0x48>
 8016588:	6031      	str	r1, [r6, #0]
 801658a:	e755      	b.n	8016438 <rcl_validate_topic_name+0x48>
 801658c:	2300      	movs	r3, #0
 801658e:	602b      	str	r3, [r5, #0]
 8016590:	e752      	b.n	8016438 <rcl_validate_topic_name+0x48>
 8016592:	4653      	mov	r3, sl
 8016594:	2101      	movs	r1, #1
 8016596:	e00a      	b.n	80165ae <rcl_validate_topic_name+0x1be>
 8016598:	2b01      	cmp	r3, #1
 801659a:	d012      	beq.n	80165c2 <rcl_validate_topic_name+0x1d2>
 801659c:	458e      	cmp	lr, r1
 801659e:	f103 0301 	add.w	r3, r3, #1
 80165a2:	f104 0401 	add.w	r4, r4, #1
 80165a6:	f101 0001 	add.w	r0, r1, #1
 80165aa:	d9ef      	bls.n	801658c <rcl_validate_topic_name+0x19c>
 80165ac:	4601      	mov	r1, r0
 80165ae:	429f      	cmp	r7, r3
 80165b0:	d0f4      	beq.n	801659c <rcl_validate_topic_name+0x1ac>
 80165b2:	7820      	ldrb	r0, [r4, #0]
 80165b4:	282f      	cmp	r0, #47	@ 0x2f
 80165b6:	d1ef      	bne.n	8016598 <rcl_validate_topic_name+0x1a8>
 80165b8:	7860      	ldrb	r0, [r4, #1]
 80165ba:	5c10      	ldrb	r0, [r2, r0]
 80165bc:	0740      	lsls	r0, r0, #29
 80165be:	d5ed      	bpl.n	801659c <rcl_validate_topic_name+0x1ac>
 80165c0:	e7dd      	b.n	801657e <rcl_validate_topic_name+0x18e>
 80165c2:	2207      	movs	r2, #7
 80165c4:	602a      	str	r2, [r5, #0]
 80165c6:	2e00      	cmp	r6, #0
 80165c8:	f47f af7e 	bne.w	80164c8 <rcl_validate_topic_name+0xd8>
 80165cc:	e734      	b.n	8016438 <rcl_validate_topic_name+0x48>
 80165ce:	bf00      	nop
 80165d0:	080194db 	.word	0x080194db

080165d4 <rcutils_split>:
 80165d4:	b082      	sub	sp, #8
 80165d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165da:	b08b      	sub	sp, #44	@ 0x2c
 80165dc:	ac14      	add	r4, sp, #80	@ 0x50
 80165de:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80165e0:	e884 000c 	stmia.w	r4, {r2, r3}
 80165e4:	2f00      	cmp	r7, #0
 80165e6:	f000 8091 	beq.w	801670c <rcutils_split+0x138>
 80165ea:	4606      	mov	r6, r0
 80165ec:	2800      	cmp	r0, #0
 80165ee:	d072      	beq.n	80166d6 <rcutils_split+0x102>
 80165f0:	7804      	ldrb	r4, [r0, #0]
 80165f2:	2c00      	cmp	r4, #0
 80165f4:	d06f      	beq.n	80166d6 <rcutils_split+0x102>
 80165f6:	460d      	mov	r5, r1
 80165f8:	f7e9 fe6a 	bl	80002d0 <strlen>
 80165fc:	1833      	adds	r3, r6, r0
 80165fe:	1b64      	subs	r4, r4, r5
 8016600:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016604:	4681      	mov	r9, r0
 8016606:	fab4 f484 	clz	r4, r4
 801660a:	0964      	lsrs	r4, r4, #5
 801660c:	42ab      	cmp	r3, r5
 801660e:	bf08      	it	eq
 8016610:	f1a9 0901 	subeq.w	r9, r9, #1
 8016614:	454c      	cmp	r4, r9
 8016616:	d26a      	bcs.n	80166ee <rcutils_split+0x11a>
 8016618:	1933      	adds	r3, r6, r4
 801661a:	eb06 0009 	add.w	r0, r6, r9
 801661e:	2101      	movs	r1, #1
 8016620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016624:	42aa      	cmp	r2, r5
 8016626:	bf08      	it	eq
 8016628:	3101      	addeq	r1, #1
 801662a:	4283      	cmp	r3, r0
 801662c:	d1f8      	bne.n	8016620 <rcutils_split+0x4c>
 801662e:	aa14      	add	r2, sp, #80	@ 0x50
 8016630:	4638      	mov	r0, r7
 8016632:	f000 f88f 	bl	8016754 <rcutils_string_array_init>
 8016636:	2800      	cmp	r0, #0
 8016638:	d141      	bne.n	80166be <rcutils_split+0xea>
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	4680      	mov	r8, r0
 801663e:	46a2      	mov	sl, r4
 8016640:	e002      	b.n	8016648 <rcutils_split+0x74>
 8016642:	3401      	adds	r4, #1
 8016644:	454c      	cmp	r4, r9
 8016646:	d222      	bcs.n	801668e <rcutils_split+0xba>
 8016648:	5d33      	ldrb	r3, [r6, r4]
 801664a:	42ab      	cmp	r3, r5
 801664c:	d1f9      	bne.n	8016642 <rcutils_split+0x6e>
 801664e:	4554      	cmp	r4, sl
 8016650:	eba4 0b0a 	sub.w	fp, r4, sl
 8016654:	d038      	beq.n	80166c8 <rcutils_split+0xf4>
 8016656:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016658:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801665a:	9201      	str	r2, [sp, #4]
 801665c:	f10b 0002 	add.w	r0, fp, #2
 8016660:	4798      	blx	r3
 8016662:	9a01      	ldr	r2, [sp, #4]
 8016664:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8016668:	687a      	ldr	r2, [r7, #4]
 801666a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801666e:	eb06 030a 	add.w	r3, r6, sl
 8016672:	f10b 0101 	add.w	r1, fp, #1
 8016676:	2800      	cmp	r0, #0
 8016678:	d04e      	beq.n	8016718 <rcutils_split+0x144>
 801667a:	4a2d      	ldr	r2, [pc, #180]	@ (8016730 <rcutils_split+0x15c>)
 801667c:	f000 fe02 	bl	8017284 <sniprintf>
 8016680:	687a      	ldr	r2, [r7, #4]
 8016682:	f108 0801 	add.w	r8, r8, #1
 8016686:	3401      	adds	r4, #1
 8016688:	454c      	cmp	r4, r9
 801668a:	46a2      	mov	sl, r4
 801668c:	d3dc      	bcc.n	8016648 <rcutils_split+0x74>
 801668e:	4554      	cmp	r4, sl
 8016690:	d035      	beq.n	80166fe <rcutils_split+0x12a>
 8016692:	eba4 040a 	sub.w	r4, r4, sl
 8016696:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016698:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801669a:	9201      	str	r2, [sp, #4]
 801669c:	1ca0      	adds	r0, r4, #2
 801669e:	4798      	blx	r3
 80166a0:	9a01      	ldr	r2, [sp, #4]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 80166a8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d035      	beq.n	801671c <rcutils_split+0x148>
 80166b0:	4a1f      	ldr	r2, [pc, #124]	@ (8016730 <rcutils_split+0x15c>)
 80166b2:	eb06 030a 	add.w	r3, r6, sl
 80166b6:	1c61      	adds	r1, r4, #1
 80166b8:	f000 fde4 	bl	8017284 <sniprintf>
 80166bc:	2000      	movs	r0, #0
 80166be:	b00b      	add	sp, #44	@ 0x2c
 80166c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c4:	b002      	add	sp, #8
 80166c6:	4770      	bx	lr
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	3b01      	subs	r3, #1
 80166cc:	2100      	movs	r1, #0
 80166ce:	603b      	str	r3, [r7, #0]
 80166d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80166d4:	e7d7      	b.n	8016686 <rcutils_split+0xb2>
 80166d6:	a802      	add	r0, sp, #8
 80166d8:	ac02      	add	r4, sp, #8
 80166da:	f000 f82b 	bl	8016734 <rcutils_get_zero_initialized_string_array>
 80166de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80166e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80166e6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80166ea:	2000      	movs	r0, #0
 80166ec:	e7e7      	b.n	80166be <rcutils_split+0xea>
 80166ee:	aa14      	add	r2, sp, #80	@ 0x50
 80166f0:	2101      	movs	r1, #1
 80166f2:	4638      	mov	r0, r7
 80166f4:	f000 f82e 	bl	8016754 <rcutils_string_array_init>
 80166f8:	2800      	cmp	r0, #0
 80166fa:	d1e0      	bne.n	80166be <rcutils_split+0xea>
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	3b01      	subs	r3, #1
 8016702:	2100      	movs	r1, #0
 8016704:	603b      	str	r3, [r7, #0]
 8016706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801670a:	e7ee      	b.n	80166ea <rcutils_split+0x116>
 801670c:	200b      	movs	r0, #11
 801670e:	b00b      	add	sp, #44	@ 0x2c
 8016710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016714:	b002      	add	sp, #8
 8016716:	4770      	bx	lr
 8016718:	f8c7 8000 	str.w	r8, [r7]
 801671c:	4638      	mov	r0, r7
 801671e:	f000 f83b 	bl	8016798 <rcutils_string_array_fini>
 8016722:	b908      	cbnz	r0, 8016728 <rcutils_split+0x154>
 8016724:	200a      	movs	r0, #10
 8016726:	e7ca      	b.n	80166be <rcutils_split+0xea>
 8016728:	f7f3 fbb2 	bl	8009e90 <rcutils_reset_error>
 801672c:	e7fa      	b.n	8016724 <rcutils_split+0x150>
 801672e:	bf00      	nop
 8016730:	08018664 	.word	0x08018664

08016734 <rcutils_get_zero_initialized_string_array>:
 8016734:	b510      	push	{r4, lr}
 8016736:	4c06      	ldr	r4, [pc, #24]	@ (8016750 <rcutils_get_zero_initialized_string_array+0x1c>)
 8016738:	4686      	mov	lr, r0
 801673a:	4684      	mov	ip, r0
 801673c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801673e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016742:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016746:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801674a:	4670      	mov	r0, lr
 801674c:	bd10      	pop	{r4, pc}
 801674e:	bf00      	nop
 8016750:	080193e0 	.word	0x080193e0

08016754 <rcutils_string_array_init>:
 8016754:	b1da      	cbz	r2, 801678e <rcutils_string_array_init+0x3a>
 8016756:	b570      	push	{r4, r5, r6, lr}
 8016758:	4605      	mov	r5, r0
 801675a:	b1d0      	cbz	r0, 8016792 <rcutils_string_array_init+0x3e>
 801675c:	460e      	mov	r6, r1
 801675e:	4614      	mov	r4, r2
 8016760:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8016764:	6001      	str	r1, [r0, #0]
 8016766:	2104      	movs	r1, #4
 8016768:	4630      	mov	r0, r6
 801676a:	4798      	blx	r3
 801676c:	6068      	str	r0, [r5, #4]
 801676e:	b150      	cbz	r0, 8016786 <rcutils_string_array_init+0x32>
 8016770:	46a4      	mov	ip, r4
 8016772:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016776:	f105 0408 	add.w	r4, r5, #8
 801677a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801677c:	f8dc 3000 	ldr.w	r3, [ip]
 8016780:	6023      	str	r3, [r4, #0]
 8016782:	2000      	movs	r0, #0
 8016784:	bd70      	pop	{r4, r5, r6, pc}
 8016786:	2e00      	cmp	r6, #0
 8016788:	d0f2      	beq.n	8016770 <rcutils_string_array_init+0x1c>
 801678a:	200a      	movs	r0, #10
 801678c:	bd70      	pop	{r4, r5, r6, pc}
 801678e:	200b      	movs	r0, #11
 8016790:	4770      	bx	lr
 8016792:	200b      	movs	r0, #11
 8016794:	bd70      	pop	{r4, r5, r6, pc}
 8016796:	bf00      	nop

08016798 <rcutils_string_array_fini>:
 8016798:	b310      	cbz	r0, 80167e0 <rcutils_string_array_fini+0x48>
 801679a:	6843      	ldr	r3, [r0, #4]
 801679c:	b570      	push	{r4, r5, r6, lr}
 801679e:	4604      	mov	r4, r0
 80167a0:	b1d3      	cbz	r3, 80167d8 <rcutils_string_array_fini+0x40>
 80167a2:	3008      	adds	r0, #8
 80167a4:	f7f3 fb48 	bl	8009e38 <rcutils_allocator_is_valid>
 80167a8:	b1c0      	cbz	r0, 80167dc <rcutils_string_array_fini+0x44>
 80167aa:	e9d4 3000 	ldrd	r3, r0, [r4]
 80167ae:	b16b      	cbz	r3, 80167cc <rcutils_string_array_fini+0x34>
 80167b0:	2500      	movs	r5, #0
 80167b2:	462e      	mov	r6, r5
 80167b4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80167b8:	68e3      	ldr	r3, [r4, #12]
 80167ba:	69a1      	ldr	r1, [r4, #24]
 80167bc:	4798      	blx	r3
 80167be:	e9d4 3000 	ldrd	r3, r0, [r4]
 80167c2:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80167c6:	3501      	adds	r5, #1
 80167c8:	42ab      	cmp	r3, r5
 80167ca:	d8f3      	bhi.n	80167b4 <rcutils_string_array_fini+0x1c>
 80167cc:	68e3      	ldr	r3, [r4, #12]
 80167ce:	69a1      	ldr	r1, [r4, #24]
 80167d0:	4798      	blx	r3
 80167d2:	2300      	movs	r3, #0
 80167d4:	e9c4 3300 	strd	r3, r3, [r4]
 80167d8:	2000      	movs	r0, #0
 80167da:	bd70      	pop	{r4, r5, r6, pc}
 80167dc:	200b      	movs	r0, #11
 80167de:	bd70      	pop	{r4, r5, r6, pc}
 80167e0:	200b      	movs	r0, #11
 80167e2:	4770      	bx	lr

080167e4 <rmw_discovery_options_init>:
 80167e4:	b328      	cbz	r0, 8016832 <rmw_discovery_options_init+0x4e>
 80167e6:	b570      	push	{r4, r5, r6, lr}
 80167e8:	4604      	mov	r4, r0
 80167ea:	4610      	mov	r0, r2
 80167ec:	460e      	mov	r6, r1
 80167ee:	4615      	mov	r5, r2
 80167f0:	f7f3 fb22 	bl	8009e38 <rcutils_allocator_is_valid>
 80167f4:	b1d8      	cbz	r0, 801682e <rmw_discovery_options_init+0x4a>
 80167f6:	68a3      	ldr	r3, [r4, #8]
 80167f8:	b9cb      	cbnz	r3, 801682e <rmw_discovery_options_init+0x4a>
 80167fa:	6863      	ldr	r3, [r4, #4]
 80167fc:	b9bb      	cbnz	r3, 801682e <rmw_discovery_options_init+0x4a>
 80167fe:	7823      	ldrb	r3, [r4, #0]
 8016800:	b90b      	cbnz	r3, 8016806 <rmw_discovery_options_init+0x22>
 8016802:	2302      	movs	r3, #2
 8016804:	7023      	strb	r3, [r4, #0]
 8016806:	b186      	cbz	r6, 801682a <rmw_discovery_options_init+0x46>
 8016808:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801680c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016810:	4630      	mov	r0, r6
 8016812:	4798      	blx	r3
 8016814:	6060      	str	r0, [r4, #4]
 8016816:	b170      	cbz	r0, 8016836 <rmw_discovery_options_init+0x52>
 8016818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801681a:	f104 0c0c 	add.w	ip, r4, #12
 801681e:	60a6      	str	r6, [r4, #8]
 8016820:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016824:	682b      	ldr	r3, [r5, #0]
 8016826:	f8cc 3000 	str.w	r3, [ip]
 801682a:	2000      	movs	r0, #0
 801682c:	bd70      	pop	{r4, r5, r6, pc}
 801682e:	200b      	movs	r0, #11
 8016830:	bd70      	pop	{r4, r5, r6, pc}
 8016832:	200b      	movs	r0, #11
 8016834:	4770      	bx	lr
 8016836:	200a      	movs	r0, #10
 8016838:	bd70      	pop	{r4, r5, r6, pc}
 801683a:	bf00      	nop

0801683c <rmw_enclave_options_copy>:
 801683c:	b1e0      	cbz	r0, 8016878 <rmw_enclave_options_copy+0x3c>
 801683e:	b570      	push	{r4, r5, r6, lr}
 8016840:	4616      	mov	r6, r2
 8016842:	b082      	sub	sp, #8
 8016844:	b1aa      	cbz	r2, 8016872 <rmw_enclave_options_copy+0x36>
 8016846:	4605      	mov	r5, r0
 8016848:	4608      	mov	r0, r1
 801684a:	460c      	mov	r4, r1
 801684c:	f7f3 faf4 	bl	8009e38 <rcutils_allocator_is_valid>
 8016850:	b178      	cbz	r0, 8016872 <rmw_enclave_options_copy+0x36>
 8016852:	f104 030c 	add.w	r3, r4, #12
 8016856:	e893 0003 	ldmia.w	r3, {r0, r1}
 801685a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801685e:	4628      	mov	r0, r5
 8016860:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016864:	f7fc faf8 	bl	8012e58 <rcutils_strdup>
 8016868:	b140      	cbz	r0, 801687c <rmw_enclave_options_copy+0x40>
 801686a:	6030      	str	r0, [r6, #0]
 801686c:	2000      	movs	r0, #0
 801686e:	b002      	add	sp, #8
 8016870:	bd70      	pop	{r4, r5, r6, pc}
 8016872:	200b      	movs	r0, #11
 8016874:	b002      	add	sp, #8
 8016876:	bd70      	pop	{r4, r5, r6, pc}
 8016878:	200b      	movs	r0, #11
 801687a:	4770      	bx	lr
 801687c:	200a      	movs	r0, #10
 801687e:	e7f6      	b.n	801686e <rmw_enclave_options_copy+0x32>

08016880 <rmw_enclave_options_fini>:
 8016880:	b170      	cbz	r0, 80168a0 <rmw_enclave_options_fini+0x20>
 8016882:	b538      	push	{r3, r4, r5, lr}
 8016884:	4605      	mov	r5, r0
 8016886:	4608      	mov	r0, r1
 8016888:	460c      	mov	r4, r1
 801688a:	f7f3 fad5 	bl	8009e38 <rcutils_allocator_is_valid>
 801688e:	b128      	cbz	r0, 801689c <rmw_enclave_options_fini+0x1c>
 8016890:	4628      	mov	r0, r5
 8016892:	6863      	ldr	r3, [r4, #4]
 8016894:	6921      	ldr	r1, [r4, #16]
 8016896:	4798      	blx	r3
 8016898:	2000      	movs	r0, #0
 801689a:	bd38      	pop	{r3, r4, r5, pc}
 801689c:	200b      	movs	r0, #11
 801689e:	bd38      	pop	{r3, r4, r5, pc}
 80168a0:	200b      	movs	r0, #11
 80168a2:	4770      	bx	lr

080168a4 <rmw_get_default_security_options>:
 80168a4:	2200      	movs	r2, #0
 80168a6:	7002      	strb	r2, [r0, #0]
 80168a8:	6042      	str	r2, [r0, #4]
 80168aa:	4770      	bx	lr

080168ac <on_status>:
 80168ac:	b082      	sub	sp, #8
 80168ae:	b002      	add	sp, #8
 80168b0:	4770      	bx	lr
 80168b2:	bf00      	nop

080168b4 <on_topic>:
 80168b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b8:	4a22      	ldr	r2, [pc, #136]	@ (8016944 <on_topic+0x90>)
 80168ba:	b094      	sub	sp, #80	@ 0x50
 80168bc:	6812      	ldr	r2, [r2, #0]
 80168be:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80168c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80168c4:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80168c8:	b3c2      	cbz	r2, 801693c <on_topic+0x88>
 80168ca:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80168ce:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80168d2:	e001      	b.n	80168d8 <on_topic+0x24>
 80168d4:	6852      	ldr	r2, [r2, #4]
 80168d6:	b38a      	cbz	r2, 801693c <on_topic+0x88>
 80168d8:	6894      	ldr	r4, [r2, #8]
 80168da:	8aa3      	ldrh	r3, [r4, #20]
 80168dc:	428b      	cmp	r3, r1
 80168de:	d1f9      	bne.n	80168d4 <on_topic+0x20>
 80168e0:	7da3      	ldrb	r3, [r4, #22]
 80168e2:	4283      	cmp	r3, r0
 80168e4:	d1f6      	bne.n	80168d4 <on_topic+0x20>
 80168e6:	2248      	movs	r2, #72	@ 0x48
 80168e8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80168ec:	4668      	mov	r0, sp
 80168ee:	f000 ff18 	bl	8017722 <memcpy>
 80168f2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80168f6:	cb0c      	ldmia	r3, {r2, r3}
 80168f8:	4620      	mov	r0, r4
 80168fa:	f7f3 ff37 	bl	800a76c <rmw_uxrce_get_static_input_buffer_for_entity>
 80168fe:	4607      	mov	r7, r0
 8016900:	b1e0      	cbz	r0, 801693c <on_topic+0x88>
 8016902:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016906:	4632      	mov	r2, r6
 8016908:	4628      	mov	r0, r5
 801690a:	f108 0110 	add.w	r1, r8, #16
 801690e:	f7fe fa83 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 8016912:	b930      	cbnz	r0, 8016922 <on_topic+0x6e>
 8016914:	480c      	ldr	r0, [pc, #48]	@ (8016948 <on_topic+0x94>)
 8016916:	4639      	mov	r1, r7
 8016918:	b014      	add	sp, #80	@ 0x50
 801691a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801691e:	f7fc be25 	b.w	801356c <put_memory>
 8016922:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016926:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801692a:	f7fd ff49 	bl	80147c0 <rmw_uros_epoch_nanos>
 801692e:	2305      	movs	r3, #5
 8016930:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016934:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016938:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801693c:	b014      	add	sp, #80	@ 0x50
 801693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016942:	bf00      	nop
 8016944:	2000cb00 	.word	0x2000cb00
 8016948:	2000c350 	.word	0x2000c350

0801694c <on_request>:
 801694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016950:	4823      	ldr	r0, [pc, #140]	@ (80169e0 <on_request+0x94>)
 8016952:	b094      	sub	sp, #80	@ 0x50
 8016954:	6800      	ldr	r0, [r0, #0]
 8016956:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016958:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801695c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801695e:	2800      	cmp	r0, #0
 8016960:	d03b      	beq.n	80169da <on_request+0x8e>
 8016962:	461d      	mov	r5, r3
 8016964:	e001      	b.n	801696a <on_request+0x1e>
 8016966:	6840      	ldr	r0, [r0, #4]
 8016968:	b3b8      	cbz	r0, 80169da <on_request+0x8e>
 801696a:	6884      	ldr	r4, [r0, #8]
 801696c:	8b21      	ldrh	r1, [r4, #24]
 801696e:	4291      	cmp	r1, r2
 8016970:	d1f9      	bne.n	8016966 <on_request+0x1a>
 8016972:	2248      	movs	r2, #72	@ 0x48
 8016974:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016978:	4668      	mov	r0, sp
 801697a:	f000 fed2 	bl	8017722 <memcpy>
 801697e:	f104 0320 	add.w	r3, r4, #32
 8016982:	cb0c      	ldmia	r3, {r2, r3}
 8016984:	4620      	mov	r0, r4
 8016986:	f7f3 fef1 	bl	800a76c <rmw_uxrce_get_static_input_buffer_for_entity>
 801698a:	4680      	mov	r8, r0
 801698c:	b328      	cbz	r0, 80169da <on_request+0x8e>
 801698e:	4638      	mov	r0, r7
 8016990:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016994:	4632      	mov	r2, r6
 8016996:	f107 0110 	add.w	r1, r7, #16
 801699a:	f7fe fa3d 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 801699e:	b930      	cbnz	r0, 80169ae <on_request+0x62>
 80169a0:	4810      	ldr	r0, [pc, #64]	@ (80169e4 <on_request+0x98>)
 80169a2:	4641      	mov	r1, r8
 80169a4:	b014      	add	sp, #80	@ 0x50
 80169a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169aa:	f7fc bddf 	b.w	801356c <put_memory>
 80169ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169b0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80169b4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80169b8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80169bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80169c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80169c8:	f7fd fefa 	bl	80147c0 <rmw_uros_epoch_nanos>
 80169cc:	2303      	movs	r3, #3
 80169ce:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80169d2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80169d6:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80169da:	b014      	add	sp, #80	@ 0x50
 80169dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169e0:	2000c6b8 	.word	0x2000c6b8
 80169e4:	2000c350 	.word	0x2000c350

080169e8 <on_reply>:
 80169e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ec:	4821      	ldr	r0, [pc, #132]	@ (8016a74 <on_reply+0x8c>)
 80169ee:	b094      	sub	sp, #80	@ 0x50
 80169f0:	6800      	ldr	r0, [r0, #0]
 80169f2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80169f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80169f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80169fa:	b3b8      	cbz	r0, 8016a6c <on_reply+0x84>
 80169fc:	461d      	mov	r5, r3
 80169fe:	e001      	b.n	8016a04 <on_reply+0x1c>
 8016a00:	6840      	ldr	r0, [r0, #4]
 8016a02:	b398      	cbz	r0, 8016a6c <on_reply+0x84>
 8016a04:	6884      	ldr	r4, [r0, #8]
 8016a06:	8b21      	ldrh	r1, [r4, #24]
 8016a08:	4291      	cmp	r1, r2
 8016a0a:	d1f9      	bne.n	8016a00 <on_reply+0x18>
 8016a0c:	2248      	movs	r2, #72	@ 0x48
 8016a0e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016a12:	4668      	mov	r0, sp
 8016a14:	f000 fe85 	bl	8017722 <memcpy>
 8016a18:	f104 0320 	add.w	r3, r4, #32
 8016a1c:	cb0c      	ldmia	r3, {r2, r3}
 8016a1e:	4620      	mov	r0, r4
 8016a20:	f7f3 fea4 	bl	800a76c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a24:	4680      	mov	r8, r0
 8016a26:	b308      	cbz	r0, 8016a6c <on_reply+0x84>
 8016a28:	4638      	mov	r0, r7
 8016a2a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016a2e:	4632      	mov	r2, r6
 8016a30:	f107 0110 	add.w	r1, r7, #16
 8016a34:	f7fe f9f0 	bl	8014e18 <ucdr_deserialize_array_uint8_t>
 8016a38:	b930      	cbnz	r0, 8016a48 <on_reply+0x60>
 8016a3a:	480f      	ldr	r0, [pc, #60]	@ (8016a78 <on_reply+0x90>)
 8016a3c:	4641      	mov	r1, r8
 8016a3e:	b014      	add	sp, #80	@ 0x50
 8016a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a44:	f7fc bd92 	b.w	801356c <put_memory>
 8016a48:	2200      	movs	r2, #0
 8016a4a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016a4e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016a52:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016a56:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016a5a:	f7fd feb1 	bl	80147c0 <rmw_uros_epoch_nanos>
 8016a5e:	2304      	movs	r3, #4
 8016a60:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016a64:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016a68:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016a6c:	b014      	add	sp, #80	@ 0x50
 8016a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a72:	bf00      	nop
 8016a74:	2000c5e0 	.word	0x2000c5e0
 8016a78:	2000c350 	.word	0x2000c350

08016a7c <rmw_create_guard_condition>:
 8016a7c:	b538      	push	{r3, r4, r5, lr}
 8016a7e:	4605      	mov	r5, r0
 8016a80:	4807      	ldr	r0, [pc, #28]	@ (8016aa0 <rmw_create_guard_condition+0x24>)
 8016a82:	f7fc fd63 	bl	801354c <get_memory>
 8016a86:	b148      	cbz	r0, 8016a9c <rmw_create_guard_condition+0x20>
 8016a88:	6884      	ldr	r4, [r0, #8]
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	7423      	strb	r3, [r4, #16]
 8016a8e:	61e5      	str	r5, [r4, #28]
 8016a90:	f7fc fde2 	bl	8013658 <rmw_get_implementation_identifier>
 8016a94:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016a98:	f104 0014 	add.w	r0, r4, #20
 8016a9c:	bd38      	pop	{r3, r4, r5, pc}
 8016a9e:	bf00      	nop
 8016aa0:	2000a12c 	.word	0x2000a12c

08016aa4 <rmw_destroy_guard_condition>:
 8016aa4:	b508      	push	{r3, lr}
 8016aa6:	4b08      	ldr	r3, [pc, #32]	@ (8016ac8 <rmw_destroy_guard_condition+0x24>)
 8016aa8:	6819      	ldr	r1, [r3, #0]
 8016aaa:	b911      	cbnz	r1, 8016ab2 <rmw_destroy_guard_condition+0xe>
 8016aac:	e00a      	b.n	8016ac4 <rmw_destroy_guard_condition+0x20>
 8016aae:	6849      	ldr	r1, [r1, #4]
 8016ab0:	b141      	cbz	r1, 8016ac4 <rmw_destroy_guard_condition+0x20>
 8016ab2:	688b      	ldr	r3, [r1, #8]
 8016ab4:	3314      	adds	r3, #20
 8016ab6:	4298      	cmp	r0, r3
 8016ab8:	d1f9      	bne.n	8016aae <rmw_destroy_guard_condition+0xa>
 8016aba:	4803      	ldr	r0, [pc, #12]	@ (8016ac8 <rmw_destroy_guard_condition+0x24>)
 8016abc:	f7fc fd56 	bl	801356c <put_memory>
 8016ac0:	2000      	movs	r0, #0
 8016ac2:	bd08      	pop	{r3, pc}
 8016ac4:	2001      	movs	r0, #1
 8016ac6:	bd08      	pop	{r3, pc}
 8016ac8:	2000a12c 	.word	0x2000a12c

08016acc <rmw_trigger_guard_condition>:
 8016acc:	b160      	cbz	r0, 8016ae8 <rmw_trigger_guard_condition+0x1c>
 8016ace:	b510      	push	{r4, lr}
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	6800      	ldr	r0, [r0, #0]
 8016ad4:	f7f3 ffcc 	bl	800aa70 <is_uxrce_rmw_identifier_valid>
 8016ad8:	b908      	cbnz	r0, 8016ade <rmw_trigger_guard_condition+0x12>
 8016ada:	2001      	movs	r0, #1
 8016adc:	bd10      	pop	{r4, pc}
 8016ade:	6863      	ldr	r3, [r4, #4]
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	741a      	strb	r2, [r3, #16]
 8016ae4:	2000      	movs	r0, #0
 8016ae6:	bd10      	pop	{r4, pc}
 8016ae8:	2001      	movs	r0, #1
 8016aea:	4770      	bx	lr

08016aec <rosidl_runtime_c__String__init>:
 8016aec:	b1b0      	cbz	r0, 8016b1c <rosidl_runtime_c__String__init+0x30>
 8016aee:	b510      	push	{r4, lr}
 8016af0:	b086      	sub	sp, #24
 8016af2:	4604      	mov	r4, r0
 8016af4:	a801      	add	r0, sp, #4
 8016af6:	f7f3 f973 	bl	8009de0 <rcutils_get_default_allocator>
 8016afa:	9b01      	ldr	r3, [sp, #4]
 8016afc:	9905      	ldr	r1, [sp, #20]
 8016afe:	2001      	movs	r0, #1
 8016b00:	4798      	blx	r3
 8016b02:	6020      	str	r0, [r4, #0]
 8016b04:	b138      	cbz	r0, 8016b16 <rosidl_runtime_c__String__init+0x2a>
 8016b06:	2200      	movs	r2, #0
 8016b08:	2301      	movs	r3, #1
 8016b0a:	7002      	strb	r2, [r0, #0]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8016b12:	b006      	add	sp, #24
 8016b14:	bd10      	pop	{r4, pc}
 8016b16:	2000      	movs	r0, #0
 8016b18:	b006      	add	sp, #24
 8016b1a:	bd10      	pop	{r4, pc}
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	4770      	bx	lr

08016b20 <rosidl_runtime_c__String__fini>:
 8016b20:	b320      	cbz	r0, 8016b6c <rosidl_runtime_c__String__fini+0x4c>
 8016b22:	b510      	push	{r4, lr}
 8016b24:	6803      	ldr	r3, [r0, #0]
 8016b26:	b086      	sub	sp, #24
 8016b28:	4604      	mov	r4, r0
 8016b2a:	b173      	cbz	r3, 8016b4a <rosidl_runtime_c__String__fini+0x2a>
 8016b2c:	6883      	ldr	r3, [r0, #8]
 8016b2e:	b1f3      	cbz	r3, 8016b6e <rosidl_runtime_c__String__fini+0x4e>
 8016b30:	a801      	add	r0, sp, #4
 8016b32:	f7f3 f955 	bl	8009de0 <rcutils_get_default_allocator>
 8016b36:	9b02      	ldr	r3, [sp, #8]
 8016b38:	9905      	ldr	r1, [sp, #20]
 8016b3a:	6820      	ldr	r0, [r4, #0]
 8016b3c:	4798      	blx	r3
 8016b3e:	2300      	movs	r3, #0
 8016b40:	e9c4 3300 	strd	r3, r3, [r4]
 8016b44:	60a3      	str	r3, [r4, #8]
 8016b46:	b006      	add	sp, #24
 8016b48:	bd10      	pop	{r4, pc}
 8016b4a:	6843      	ldr	r3, [r0, #4]
 8016b4c:	b9db      	cbnz	r3, 8016b86 <rosidl_runtime_c__String__fini+0x66>
 8016b4e:	6883      	ldr	r3, [r0, #8]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d0f8      	beq.n	8016b46 <rosidl_runtime_c__String__fini+0x26>
 8016b54:	4b12      	ldr	r3, [pc, #72]	@ (8016ba0 <rosidl_runtime_c__String__fini+0x80>)
 8016b56:	4813      	ldr	r0, [pc, #76]	@ (8016ba4 <rosidl_runtime_c__String__fini+0x84>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	2251      	movs	r2, #81	@ 0x51
 8016b5c:	68db      	ldr	r3, [r3, #12]
 8016b5e:	2101      	movs	r1, #1
 8016b60:	f000 fb82 	bl	8017268 <fwrite>
 8016b64:	f04f 30ff 	mov.w	r0, #4294967295
 8016b68:	f000 f83e 	bl	8016be8 <exit>
 8016b6c:	4770      	bx	lr
 8016b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8016ba0 <rosidl_runtime_c__String__fini+0x80>)
 8016b70:	480d      	ldr	r0, [pc, #52]	@ (8016ba8 <rosidl_runtime_c__String__fini+0x88>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	224c      	movs	r2, #76	@ 0x4c
 8016b76:	68db      	ldr	r3, [r3, #12]
 8016b78:	2101      	movs	r1, #1
 8016b7a:	f000 fb75 	bl	8017268 <fwrite>
 8016b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8016b82:	f000 f831 	bl	8016be8 <exit>
 8016b86:	4b06      	ldr	r3, [pc, #24]	@ (8016ba0 <rosidl_runtime_c__String__fini+0x80>)
 8016b88:	4808      	ldr	r0, [pc, #32]	@ (8016bac <rosidl_runtime_c__String__fini+0x8c>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	224e      	movs	r2, #78	@ 0x4e
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	2101      	movs	r1, #1
 8016b92:	f000 fb69 	bl	8017268 <fwrite>
 8016b96:	f04f 30ff 	mov.w	r0, #4294967295
 8016b9a:	f000 f825 	bl	8016be8 <exit>
 8016b9e:	bf00      	nop
 8016ba0:	20000e88 	.word	0x20000e88
 8016ba4:	08018d68 	.word	0x08018d68
 8016ba8:	08018cc8 	.word	0x08018cc8
 8016bac:	08018d18 	.word	0x08018d18

08016bb0 <calloc>:
 8016bb0:	4b02      	ldr	r3, [pc, #8]	@ (8016bbc <calloc+0xc>)
 8016bb2:	460a      	mov	r2, r1
 8016bb4:	4601      	mov	r1, r0
 8016bb6:	6818      	ldr	r0, [r3, #0]
 8016bb8:	f000 b802 	b.w	8016bc0 <_calloc_r>
 8016bbc:	20000e88 	.word	0x20000e88

08016bc0 <_calloc_r>:
 8016bc0:	b570      	push	{r4, r5, r6, lr}
 8016bc2:	fba1 5402 	umull	r5, r4, r1, r2
 8016bc6:	b934      	cbnz	r4, 8016bd6 <_calloc_r+0x16>
 8016bc8:	4629      	mov	r1, r5
 8016bca:	f000 f899 	bl	8016d00 <_malloc_r>
 8016bce:	4606      	mov	r6, r0
 8016bd0:	b928      	cbnz	r0, 8016bde <_calloc_r+0x1e>
 8016bd2:	4630      	mov	r0, r6
 8016bd4:	bd70      	pop	{r4, r5, r6, pc}
 8016bd6:	220c      	movs	r2, #12
 8016bd8:	6002      	str	r2, [r0, #0]
 8016bda:	2600      	movs	r6, #0
 8016bdc:	e7f9      	b.n	8016bd2 <_calloc_r+0x12>
 8016bde:	462a      	mov	r2, r5
 8016be0:	4621      	mov	r1, r4
 8016be2:	f000 fcc3 	bl	801756c <memset>
 8016be6:	e7f4      	b.n	8016bd2 <_calloc_r+0x12>

08016be8 <exit>:
 8016be8:	b508      	push	{r3, lr}
 8016bea:	4b06      	ldr	r3, [pc, #24]	@ (8016c04 <exit+0x1c>)
 8016bec:	4604      	mov	r4, r0
 8016bee:	b113      	cbz	r3, 8016bf6 <exit+0xe>
 8016bf0:	2100      	movs	r1, #0
 8016bf2:	f3af 8000 	nop.w
 8016bf6:	4b04      	ldr	r3, [pc, #16]	@ (8016c08 <exit+0x20>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	b103      	cbz	r3, 8016bfe <exit+0x16>
 8016bfc:	4798      	blx	r3
 8016bfe:	4620      	mov	r0, r4
 8016c00:	f7eb fa7a 	bl	80020f8 <_exit>
 8016c04:	00000000 	.word	0x00000000
 8016c08:	2000ed20 	.word	0x2000ed20

08016c0c <getenv>:
 8016c0c:	b507      	push	{r0, r1, r2, lr}
 8016c0e:	4b04      	ldr	r3, [pc, #16]	@ (8016c20 <getenv+0x14>)
 8016c10:	4601      	mov	r1, r0
 8016c12:	aa01      	add	r2, sp, #4
 8016c14:	6818      	ldr	r0, [r3, #0]
 8016c16:	f000 f805 	bl	8016c24 <_findenv_r>
 8016c1a:	b003      	add	sp, #12
 8016c1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c20:	20000e88 	.word	0x20000e88

08016c24 <_findenv_r>:
 8016c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c28:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016c98 <_findenv_r+0x74>
 8016c2c:	4606      	mov	r6, r0
 8016c2e:	4689      	mov	r9, r1
 8016c30:	4617      	mov	r7, r2
 8016c32:	f000 fda3 	bl	801777c <__env_lock>
 8016c36:	f8da 4000 	ldr.w	r4, [sl]
 8016c3a:	b134      	cbz	r4, 8016c4a <_findenv_r+0x26>
 8016c3c:	464b      	mov	r3, r9
 8016c3e:	4698      	mov	r8, r3
 8016c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c44:	b13a      	cbz	r2, 8016c56 <_findenv_r+0x32>
 8016c46:	2a3d      	cmp	r2, #61	@ 0x3d
 8016c48:	d1f9      	bne.n	8016c3e <_findenv_r+0x1a>
 8016c4a:	4630      	mov	r0, r6
 8016c4c:	f000 fd9c 	bl	8017788 <__env_unlock>
 8016c50:	2000      	movs	r0, #0
 8016c52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c56:	eba8 0809 	sub.w	r8, r8, r9
 8016c5a:	46a3      	mov	fp, r4
 8016c5c:	f854 0b04 	ldr.w	r0, [r4], #4
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d0f2      	beq.n	8016c4a <_findenv_r+0x26>
 8016c64:	4642      	mov	r2, r8
 8016c66:	4649      	mov	r1, r9
 8016c68:	f000 fc95 	bl	8017596 <strncmp>
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d1f4      	bne.n	8016c5a <_findenv_r+0x36>
 8016c70:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016c74:	eb03 0508 	add.w	r5, r3, r8
 8016c78:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016c7c:	2b3d      	cmp	r3, #61	@ 0x3d
 8016c7e:	d1ec      	bne.n	8016c5a <_findenv_r+0x36>
 8016c80:	f8da 3000 	ldr.w	r3, [sl]
 8016c84:	ebab 0303 	sub.w	r3, fp, r3
 8016c88:	109b      	asrs	r3, r3, #2
 8016c8a:	4630      	mov	r0, r6
 8016c8c:	603b      	str	r3, [r7, #0]
 8016c8e:	f000 fd7b 	bl	8017788 <__env_unlock>
 8016c92:	1c68      	adds	r0, r5, #1
 8016c94:	e7dd      	b.n	8016c52 <_findenv_r+0x2e>
 8016c96:	bf00      	nop
 8016c98:	20000000 	.word	0x20000000

08016c9c <malloc>:
 8016c9c:	4b02      	ldr	r3, [pc, #8]	@ (8016ca8 <malloc+0xc>)
 8016c9e:	4601      	mov	r1, r0
 8016ca0:	6818      	ldr	r0, [r3, #0]
 8016ca2:	f000 b82d 	b.w	8016d00 <_malloc_r>
 8016ca6:	bf00      	nop
 8016ca8:	20000e88 	.word	0x20000e88

08016cac <free>:
 8016cac:	4b02      	ldr	r3, [pc, #8]	@ (8016cb8 <free+0xc>)
 8016cae:	4601      	mov	r1, r0
 8016cb0:	6818      	ldr	r0, [r3, #0]
 8016cb2:	f000 bd6f 	b.w	8017794 <_free_r>
 8016cb6:	bf00      	nop
 8016cb8:	20000e88 	.word	0x20000e88

08016cbc <sbrk_aligned>:
 8016cbc:	b570      	push	{r4, r5, r6, lr}
 8016cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8016cfc <sbrk_aligned+0x40>)
 8016cc0:	460c      	mov	r4, r1
 8016cc2:	6831      	ldr	r1, [r6, #0]
 8016cc4:	4605      	mov	r5, r0
 8016cc6:	b911      	cbnz	r1, 8016cce <sbrk_aligned+0x12>
 8016cc8:	f000 fcd4 	bl	8017674 <_sbrk_r>
 8016ccc:	6030      	str	r0, [r6, #0]
 8016cce:	4621      	mov	r1, r4
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	f000 fccf 	bl	8017674 <_sbrk_r>
 8016cd6:	1c43      	adds	r3, r0, #1
 8016cd8:	d103      	bne.n	8016ce2 <sbrk_aligned+0x26>
 8016cda:	f04f 34ff 	mov.w	r4, #4294967295
 8016cde:	4620      	mov	r0, r4
 8016ce0:	bd70      	pop	{r4, r5, r6, pc}
 8016ce2:	1cc4      	adds	r4, r0, #3
 8016ce4:	f024 0403 	bic.w	r4, r4, #3
 8016ce8:	42a0      	cmp	r0, r4
 8016cea:	d0f8      	beq.n	8016cde <sbrk_aligned+0x22>
 8016cec:	1a21      	subs	r1, r4, r0
 8016cee:	4628      	mov	r0, r5
 8016cf0:	f000 fcc0 	bl	8017674 <_sbrk_r>
 8016cf4:	3001      	adds	r0, #1
 8016cf6:	d1f2      	bne.n	8016cde <sbrk_aligned+0x22>
 8016cf8:	e7ef      	b.n	8016cda <sbrk_aligned+0x1e>
 8016cfa:	bf00      	nop
 8016cfc:	2000ebe0 	.word	0x2000ebe0

08016d00 <_malloc_r>:
 8016d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d04:	1ccd      	adds	r5, r1, #3
 8016d06:	f025 0503 	bic.w	r5, r5, #3
 8016d0a:	3508      	adds	r5, #8
 8016d0c:	2d0c      	cmp	r5, #12
 8016d0e:	bf38      	it	cc
 8016d10:	250c      	movcc	r5, #12
 8016d12:	2d00      	cmp	r5, #0
 8016d14:	4606      	mov	r6, r0
 8016d16:	db01      	blt.n	8016d1c <_malloc_r+0x1c>
 8016d18:	42a9      	cmp	r1, r5
 8016d1a:	d904      	bls.n	8016d26 <_malloc_r+0x26>
 8016d1c:	230c      	movs	r3, #12
 8016d1e:	6033      	str	r3, [r6, #0]
 8016d20:	2000      	movs	r0, #0
 8016d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016dfc <_malloc_r+0xfc>
 8016d2a:	f000 f869 	bl	8016e00 <__malloc_lock>
 8016d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8016d32:	461c      	mov	r4, r3
 8016d34:	bb44      	cbnz	r4, 8016d88 <_malloc_r+0x88>
 8016d36:	4629      	mov	r1, r5
 8016d38:	4630      	mov	r0, r6
 8016d3a:	f7ff ffbf 	bl	8016cbc <sbrk_aligned>
 8016d3e:	1c43      	adds	r3, r0, #1
 8016d40:	4604      	mov	r4, r0
 8016d42:	d158      	bne.n	8016df6 <_malloc_r+0xf6>
 8016d44:	f8d8 4000 	ldr.w	r4, [r8]
 8016d48:	4627      	mov	r7, r4
 8016d4a:	2f00      	cmp	r7, #0
 8016d4c:	d143      	bne.n	8016dd6 <_malloc_r+0xd6>
 8016d4e:	2c00      	cmp	r4, #0
 8016d50:	d04b      	beq.n	8016dea <_malloc_r+0xea>
 8016d52:	6823      	ldr	r3, [r4, #0]
 8016d54:	4639      	mov	r1, r7
 8016d56:	4630      	mov	r0, r6
 8016d58:	eb04 0903 	add.w	r9, r4, r3
 8016d5c:	f000 fc8a 	bl	8017674 <_sbrk_r>
 8016d60:	4581      	cmp	r9, r0
 8016d62:	d142      	bne.n	8016dea <_malloc_r+0xea>
 8016d64:	6821      	ldr	r1, [r4, #0]
 8016d66:	1a6d      	subs	r5, r5, r1
 8016d68:	4629      	mov	r1, r5
 8016d6a:	4630      	mov	r0, r6
 8016d6c:	f7ff ffa6 	bl	8016cbc <sbrk_aligned>
 8016d70:	3001      	adds	r0, #1
 8016d72:	d03a      	beq.n	8016dea <_malloc_r+0xea>
 8016d74:	6823      	ldr	r3, [r4, #0]
 8016d76:	442b      	add	r3, r5
 8016d78:	6023      	str	r3, [r4, #0]
 8016d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8016d7e:	685a      	ldr	r2, [r3, #4]
 8016d80:	bb62      	cbnz	r2, 8016ddc <_malloc_r+0xdc>
 8016d82:	f8c8 7000 	str.w	r7, [r8]
 8016d86:	e00f      	b.n	8016da8 <_malloc_r+0xa8>
 8016d88:	6822      	ldr	r2, [r4, #0]
 8016d8a:	1b52      	subs	r2, r2, r5
 8016d8c:	d420      	bmi.n	8016dd0 <_malloc_r+0xd0>
 8016d8e:	2a0b      	cmp	r2, #11
 8016d90:	d917      	bls.n	8016dc2 <_malloc_r+0xc2>
 8016d92:	1961      	adds	r1, r4, r5
 8016d94:	42a3      	cmp	r3, r4
 8016d96:	6025      	str	r5, [r4, #0]
 8016d98:	bf18      	it	ne
 8016d9a:	6059      	strne	r1, [r3, #4]
 8016d9c:	6863      	ldr	r3, [r4, #4]
 8016d9e:	bf08      	it	eq
 8016da0:	f8c8 1000 	streq.w	r1, [r8]
 8016da4:	5162      	str	r2, [r4, r5]
 8016da6:	604b      	str	r3, [r1, #4]
 8016da8:	4630      	mov	r0, r6
 8016daa:	f000 f82f 	bl	8016e0c <__malloc_unlock>
 8016dae:	f104 000b 	add.w	r0, r4, #11
 8016db2:	1d23      	adds	r3, r4, #4
 8016db4:	f020 0007 	bic.w	r0, r0, #7
 8016db8:	1ac2      	subs	r2, r0, r3
 8016dba:	bf1c      	itt	ne
 8016dbc:	1a1b      	subne	r3, r3, r0
 8016dbe:	50a3      	strne	r3, [r4, r2]
 8016dc0:	e7af      	b.n	8016d22 <_malloc_r+0x22>
 8016dc2:	6862      	ldr	r2, [r4, #4]
 8016dc4:	42a3      	cmp	r3, r4
 8016dc6:	bf0c      	ite	eq
 8016dc8:	f8c8 2000 	streq.w	r2, [r8]
 8016dcc:	605a      	strne	r2, [r3, #4]
 8016dce:	e7eb      	b.n	8016da8 <_malloc_r+0xa8>
 8016dd0:	4623      	mov	r3, r4
 8016dd2:	6864      	ldr	r4, [r4, #4]
 8016dd4:	e7ae      	b.n	8016d34 <_malloc_r+0x34>
 8016dd6:	463c      	mov	r4, r7
 8016dd8:	687f      	ldr	r7, [r7, #4]
 8016dda:	e7b6      	b.n	8016d4a <_malloc_r+0x4a>
 8016ddc:	461a      	mov	r2, r3
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	42a3      	cmp	r3, r4
 8016de2:	d1fb      	bne.n	8016ddc <_malloc_r+0xdc>
 8016de4:	2300      	movs	r3, #0
 8016de6:	6053      	str	r3, [r2, #4]
 8016de8:	e7de      	b.n	8016da8 <_malloc_r+0xa8>
 8016dea:	230c      	movs	r3, #12
 8016dec:	6033      	str	r3, [r6, #0]
 8016dee:	4630      	mov	r0, r6
 8016df0:	f000 f80c 	bl	8016e0c <__malloc_unlock>
 8016df4:	e794      	b.n	8016d20 <_malloc_r+0x20>
 8016df6:	6005      	str	r5, [r0, #0]
 8016df8:	e7d6      	b.n	8016da8 <_malloc_r+0xa8>
 8016dfa:	bf00      	nop
 8016dfc:	2000ebe4 	.word	0x2000ebe4

08016e00 <__malloc_lock>:
 8016e00:	4801      	ldr	r0, [pc, #4]	@ (8016e08 <__malloc_lock+0x8>)
 8016e02:	f000 bc84 	b.w	801770e <__retarget_lock_acquire_recursive>
 8016e06:	bf00      	nop
 8016e08:	2000ed29 	.word	0x2000ed29

08016e0c <__malloc_unlock>:
 8016e0c:	4801      	ldr	r0, [pc, #4]	@ (8016e14 <__malloc_unlock+0x8>)
 8016e0e:	f000 bc7f 	b.w	8017710 <__retarget_lock_release_recursive>
 8016e12:	bf00      	nop
 8016e14:	2000ed29 	.word	0x2000ed29

08016e18 <srand>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4b10      	ldr	r3, [pc, #64]	@ (8016e5c <srand+0x44>)
 8016e1c:	681d      	ldr	r5, [r3, #0]
 8016e1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016e20:	4604      	mov	r4, r0
 8016e22:	b9b3      	cbnz	r3, 8016e52 <srand+0x3a>
 8016e24:	2018      	movs	r0, #24
 8016e26:	f7ff ff39 	bl	8016c9c <malloc>
 8016e2a:	4602      	mov	r2, r0
 8016e2c:	6328      	str	r0, [r5, #48]	@ 0x30
 8016e2e:	b920      	cbnz	r0, 8016e3a <srand+0x22>
 8016e30:	4b0b      	ldr	r3, [pc, #44]	@ (8016e60 <srand+0x48>)
 8016e32:	480c      	ldr	r0, [pc, #48]	@ (8016e64 <srand+0x4c>)
 8016e34:	2146      	movs	r1, #70	@ 0x46
 8016e36:	f000 fc83 	bl	8017740 <__assert_func>
 8016e3a:	490b      	ldr	r1, [pc, #44]	@ (8016e68 <srand+0x50>)
 8016e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8016e6c <srand+0x54>)
 8016e3e:	e9c0 1300 	strd	r1, r3, [r0]
 8016e42:	4b0b      	ldr	r3, [pc, #44]	@ (8016e70 <srand+0x58>)
 8016e44:	6083      	str	r3, [r0, #8]
 8016e46:	230b      	movs	r3, #11
 8016e48:	8183      	strh	r3, [r0, #12]
 8016e4a:	2100      	movs	r1, #0
 8016e4c:	2001      	movs	r0, #1
 8016e4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016e52:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016e54:	2200      	movs	r2, #0
 8016e56:	611c      	str	r4, [r3, #16]
 8016e58:	615a      	str	r2, [r3, #20]
 8016e5a:	bd38      	pop	{r3, r4, r5, pc}
 8016e5c:	20000e88 	.word	0x20000e88
 8016e60:	080193fc 	.word	0x080193fc
 8016e64:	08019413 	.word	0x08019413
 8016e68:	abcd330e 	.word	0xabcd330e
 8016e6c:	e66d1234 	.word	0xe66d1234
 8016e70:	0005deec 	.word	0x0005deec

08016e74 <rand>:
 8016e74:	4b16      	ldr	r3, [pc, #88]	@ (8016ed0 <rand+0x5c>)
 8016e76:	b510      	push	{r4, lr}
 8016e78:	681c      	ldr	r4, [r3, #0]
 8016e7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016e7c:	b9b3      	cbnz	r3, 8016eac <rand+0x38>
 8016e7e:	2018      	movs	r0, #24
 8016e80:	f7ff ff0c 	bl	8016c9c <malloc>
 8016e84:	4602      	mov	r2, r0
 8016e86:	6320      	str	r0, [r4, #48]	@ 0x30
 8016e88:	b920      	cbnz	r0, 8016e94 <rand+0x20>
 8016e8a:	4b12      	ldr	r3, [pc, #72]	@ (8016ed4 <rand+0x60>)
 8016e8c:	4812      	ldr	r0, [pc, #72]	@ (8016ed8 <rand+0x64>)
 8016e8e:	2152      	movs	r1, #82	@ 0x52
 8016e90:	f000 fc56 	bl	8017740 <__assert_func>
 8016e94:	4911      	ldr	r1, [pc, #68]	@ (8016edc <rand+0x68>)
 8016e96:	4b12      	ldr	r3, [pc, #72]	@ (8016ee0 <rand+0x6c>)
 8016e98:	e9c0 1300 	strd	r1, r3, [r0]
 8016e9c:	4b11      	ldr	r3, [pc, #68]	@ (8016ee4 <rand+0x70>)
 8016e9e:	6083      	str	r3, [r0, #8]
 8016ea0:	230b      	movs	r3, #11
 8016ea2:	8183      	strh	r3, [r0, #12]
 8016ea4:	2100      	movs	r1, #0
 8016ea6:	2001      	movs	r0, #1
 8016ea8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016eac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016eae:	480e      	ldr	r0, [pc, #56]	@ (8016ee8 <rand+0x74>)
 8016eb0:	690b      	ldr	r3, [r1, #16]
 8016eb2:	694c      	ldr	r4, [r1, #20]
 8016eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8016eec <rand+0x78>)
 8016eb6:	4358      	muls	r0, r3
 8016eb8:	fb02 0004 	mla	r0, r2, r4, r0
 8016ebc:	fba3 3202 	umull	r3, r2, r3, r2
 8016ec0:	3301      	adds	r3, #1
 8016ec2:	eb40 0002 	adc.w	r0, r0, r2
 8016ec6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016eca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016ece:	bd10      	pop	{r4, pc}
 8016ed0:	20000e88 	.word	0x20000e88
 8016ed4:	080193fc 	.word	0x080193fc
 8016ed8:	08019413 	.word	0x08019413
 8016edc:	abcd330e 	.word	0xabcd330e
 8016ee0:	e66d1234 	.word	0xe66d1234
 8016ee4:	0005deec 	.word	0x0005deec
 8016ee8:	5851f42d 	.word	0x5851f42d
 8016eec:	4c957f2d 	.word	0x4c957f2d

08016ef0 <realloc>:
 8016ef0:	4b02      	ldr	r3, [pc, #8]	@ (8016efc <realloc+0xc>)
 8016ef2:	460a      	mov	r2, r1
 8016ef4:	4601      	mov	r1, r0
 8016ef6:	6818      	ldr	r0, [r3, #0]
 8016ef8:	f000 b802 	b.w	8016f00 <_realloc_r>
 8016efc:	20000e88 	.word	0x20000e88

08016f00 <_realloc_r>:
 8016f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f04:	4607      	mov	r7, r0
 8016f06:	4614      	mov	r4, r2
 8016f08:	460d      	mov	r5, r1
 8016f0a:	b921      	cbnz	r1, 8016f16 <_realloc_r+0x16>
 8016f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f10:	4611      	mov	r1, r2
 8016f12:	f7ff bef5 	b.w	8016d00 <_malloc_r>
 8016f16:	b92a      	cbnz	r2, 8016f24 <_realloc_r+0x24>
 8016f18:	f000 fc3c 	bl	8017794 <_free_r>
 8016f1c:	4625      	mov	r5, r4
 8016f1e:	4628      	mov	r0, r5
 8016f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f24:	f000 fc80 	bl	8017828 <_malloc_usable_size_r>
 8016f28:	4284      	cmp	r4, r0
 8016f2a:	4606      	mov	r6, r0
 8016f2c:	d802      	bhi.n	8016f34 <_realloc_r+0x34>
 8016f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016f32:	d8f4      	bhi.n	8016f1e <_realloc_r+0x1e>
 8016f34:	4621      	mov	r1, r4
 8016f36:	4638      	mov	r0, r7
 8016f38:	f7ff fee2 	bl	8016d00 <_malloc_r>
 8016f3c:	4680      	mov	r8, r0
 8016f3e:	b908      	cbnz	r0, 8016f44 <_realloc_r+0x44>
 8016f40:	4645      	mov	r5, r8
 8016f42:	e7ec      	b.n	8016f1e <_realloc_r+0x1e>
 8016f44:	42b4      	cmp	r4, r6
 8016f46:	4622      	mov	r2, r4
 8016f48:	4629      	mov	r1, r5
 8016f4a:	bf28      	it	cs
 8016f4c:	4632      	movcs	r2, r6
 8016f4e:	f000 fbe8 	bl	8017722 <memcpy>
 8016f52:	4629      	mov	r1, r5
 8016f54:	4638      	mov	r0, r7
 8016f56:	f000 fc1d 	bl	8017794 <_free_r>
 8016f5a:	e7f1      	b.n	8016f40 <_realloc_r+0x40>

08016f5c <_strtoul_l.isra.0>:
 8016f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f60:	4e34      	ldr	r6, [pc, #208]	@ (8017034 <_strtoul_l.isra.0+0xd8>)
 8016f62:	4686      	mov	lr, r0
 8016f64:	460d      	mov	r5, r1
 8016f66:	4628      	mov	r0, r5
 8016f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f6c:	5d37      	ldrb	r7, [r6, r4]
 8016f6e:	f017 0708 	ands.w	r7, r7, #8
 8016f72:	d1f8      	bne.n	8016f66 <_strtoul_l.isra.0+0xa>
 8016f74:	2c2d      	cmp	r4, #45	@ 0x2d
 8016f76:	d110      	bne.n	8016f9a <_strtoul_l.isra.0+0x3e>
 8016f78:	782c      	ldrb	r4, [r5, #0]
 8016f7a:	2701      	movs	r7, #1
 8016f7c:	1c85      	adds	r5, r0, #2
 8016f7e:	f033 0010 	bics.w	r0, r3, #16
 8016f82:	d115      	bne.n	8016fb0 <_strtoul_l.isra.0+0x54>
 8016f84:	2c30      	cmp	r4, #48	@ 0x30
 8016f86:	d10d      	bne.n	8016fa4 <_strtoul_l.isra.0+0x48>
 8016f88:	7828      	ldrb	r0, [r5, #0]
 8016f8a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016f8e:	2858      	cmp	r0, #88	@ 0x58
 8016f90:	d108      	bne.n	8016fa4 <_strtoul_l.isra.0+0x48>
 8016f92:	786c      	ldrb	r4, [r5, #1]
 8016f94:	3502      	adds	r5, #2
 8016f96:	2310      	movs	r3, #16
 8016f98:	e00a      	b.n	8016fb0 <_strtoul_l.isra.0+0x54>
 8016f9a:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f9c:	bf04      	itt	eq
 8016f9e:	782c      	ldrbeq	r4, [r5, #0]
 8016fa0:	1c85      	addeq	r5, r0, #2
 8016fa2:	e7ec      	b.n	8016f7e <_strtoul_l.isra.0+0x22>
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d1f6      	bne.n	8016f96 <_strtoul_l.isra.0+0x3a>
 8016fa8:	2c30      	cmp	r4, #48	@ 0x30
 8016faa:	bf14      	ite	ne
 8016fac:	230a      	movne	r3, #10
 8016fae:	2308      	moveq	r3, #8
 8016fb0:	f04f 38ff 	mov.w	r8, #4294967295
 8016fb4:	2600      	movs	r6, #0
 8016fb6:	fbb8 f8f3 	udiv	r8, r8, r3
 8016fba:	fb03 f908 	mul.w	r9, r3, r8
 8016fbe:	ea6f 0909 	mvn.w	r9, r9
 8016fc2:	4630      	mov	r0, r6
 8016fc4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016fc8:	f1bc 0f09 	cmp.w	ip, #9
 8016fcc:	d810      	bhi.n	8016ff0 <_strtoul_l.isra.0+0x94>
 8016fce:	4664      	mov	r4, ip
 8016fd0:	42a3      	cmp	r3, r4
 8016fd2:	dd1e      	ble.n	8017012 <_strtoul_l.isra.0+0xb6>
 8016fd4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016fd8:	d007      	beq.n	8016fea <_strtoul_l.isra.0+0x8e>
 8016fda:	4580      	cmp	r8, r0
 8016fdc:	d316      	bcc.n	801700c <_strtoul_l.isra.0+0xb0>
 8016fde:	d101      	bne.n	8016fe4 <_strtoul_l.isra.0+0x88>
 8016fe0:	45a1      	cmp	r9, r4
 8016fe2:	db13      	blt.n	801700c <_strtoul_l.isra.0+0xb0>
 8016fe4:	fb00 4003 	mla	r0, r0, r3, r4
 8016fe8:	2601      	movs	r6, #1
 8016fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016fee:	e7e9      	b.n	8016fc4 <_strtoul_l.isra.0+0x68>
 8016ff0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016ff4:	f1bc 0f19 	cmp.w	ip, #25
 8016ff8:	d801      	bhi.n	8016ffe <_strtoul_l.isra.0+0xa2>
 8016ffa:	3c37      	subs	r4, #55	@ 0x37
 8016ffc:	e7e8      	b.n	8016fd0 <_strtoul_l.isra.0+0x74>
 8016ffe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017002:	f1bc 0f19 	cmp.w	ip, #25
 8017006:	d804      	bhi.n	8017012 <_strtoul_l.isra.0+0xb6>
 8017008:	3c57      	subs	r4, #87	@ 0x57
 801700a:	e7e1      	b.n	8016fd0 <_strtoul_l.isra.0+0x74>
 801700c:	f04f 36ff 	mov.w	r6, #4294967295
 8017010:	e7eb      	b.n	8016fea <_strtoul_l.isra.0+0x8e>
 8017012:	1c73      	adds	r3, r6, #1
 8017014:	d106      	bne.n	8017024 <_strtoul_l.isra.0+0xc8>
 8017016:	2322      	movs	r3, #34	@ 0x22
 8017018:	f8ce 3000 	str.w	r3, [lr]
 801701c:	4630      	mov	r0, r6
 801701e:	b932      	cbnz	r2, 801702e <_strtoul_l.isra.0+0xd2>
 8017020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017024:	b107      	cbz	r7, 8017028 <_strtoul_l.isra.0+0xcc>
 8017026:	4240      	negs	r0, r0
 8017028:	2a00      	cmp	r2, #0
 801702a:	d0f9      	beq.n	8017020 <_strtoul_l.isra.0+0xc4>
 801702c:	b106      	cbz	r6, 8017030 <_strtoul_l.isra.0+0xd4>
 801702e:	1e69      	subs	r1, r5, #1
 8017030:	6011      	str	r1, [r2, #0]
 8017032:	e7f5      	b.n	8017020 <_strtoul_l.isra.0+0xc4>
 8017034:	080194db 	.word	0x080194db

08017038 <strtoul>:
 8017038:	4613      	mov	r3, r2
 801703a:	460a      	mov	r2, r1
 801703c:	4601      	mov	r1, r0
 801703e:	4802      	ldr	r0, [pc, #8]	@ (8017048 <strtoul+0x10>)
 8017040:	6800      	ldr	r0, [r0, #0]
 8017042:	f7ff bf8b 	b.w	8016f5c <_strtoul_l.isra.0>
 8017046:	bf00      	nop
 8017048:	20000e88 	.word	0x20000e88

0801704c <std>:
 801704c:	2300      	movs	r3, #0
 801704e:	b510      	push	{r4, lr}
 8017050:	4604      	mov	r4, r0
 8017052:	e9c0 3300 	strd	r3, r3, [r0]
 8017056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801705a:	6083      	str	r3, [r0, #8]
 801705c:	8181      	strh	r1, [r0, #12]
 801705e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017060:	81c2      	strh	r2, [r0, #14]
 8017062:	6183      	str	r3, [r0, #24]
 8017064:	4619      	mov	r1, r3
 8017066:	2208      	movs	r2, #8
 8017068:	305c      	adds	r0, #92	@ 0x5c
 801706a:	f000 fa7f 	bl	801756c <memset>
 801706e:	4b0d      	ldr	r3, [pc, #52]	@ (80170a4 <std+0x58>)
 8017070:	6263      	str	r3, [r4, #36]	@ 0x24
 8017072:	4b0d      	ldr	r3, [pc, #52]	@ (80170a8 <std+0x5c>)
 8017074:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017076:	4b0d      	ldr	r3, [pc, #52]	@ (80170ac <std+0x60>)
 8017078:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801707a:	4b0d      	ldr	r3, [pc, #52]	@ (80170b0 <std+0x64>)
 801707c:	6323      	str	r3, [r4, #48]	@ 0x30
 801707e:	4b0d      	ldr	r3, [pc, #52]	@ (80170b4 <std+0x68>)
 8017080:	6224      	str	r4, [r4, #32]
 8017082:	429c      	cmp	r4, r3
 8017084:	d006      	beq.n	8017094 <std+0x48>
 8017086:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801708a:	4294      	cmp	r4, r2
 801708c:	d002      	beq.n	8017094 <std+0x48>
 801708e:	33d0      	adds	r3, #208	@ 0xd0
 8017090:	429c      	cmp	r4, r3
 8017092:	d105      	bne.n	80170a0 <std+0x54>
 8017094:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801709c:	f000 bb36 	b.w	801770c <__retarget_lock_init_recursive>
 80170a0:	bd10      	pop	{r4, pc}
 80170a2:	bf00      	nop
 80170a4:	080172f1 	.word	0x080172f1
 80170a8:	08017313 	.word	0x08017313
 80170ac:	0801734b 	.word	0x0801734b
 80170b0:	0801736f 	.word	0x0801736f
 80170b4:	2000ebe8 	.word	0x2000ebe8

080170b8 <stdio_exit_handler>:
 80170b8:	4a02      	ldr	r2, [pc, #8]	@ (80170c4 <stdio_exit_handler+0xc>)
 80170ba:	4903      	ldr	r1, [pc, #12]	@ (80170c8 <stdio_exit_handler+0x10>)
 80170bc:	4803      	ldr	r0, [pc, #12]	@ (80170cc <stdio_exit_handler+0x14>)
 80170be:	f000 b869 	b.w	8017194 <_fwalk_sglue>
 80170c2:	bf00      	nop
 80170c4:	20000e7c 	.word	0x20000e7c
 80170c8:	08017f09 	.word	0x08017f09
 80170cc:	20000e8c 	.word	0x20000e8c

080170d0 <cleanup_stdio>:
 80170d0:	6841      	ldr	r1, [r0, #4]
 80170d2:	4b0c      	ldr	r3, [pc, #48]	@ (8017104 <cleanup_stdio+0x34>)
 80170d4:	4299      	cmp	r1, r3
 80170d6:	b510      	push	{r4, lr}
 80170d8:	4604      	mov	r4, r0
 80170da:	d001      	beq.n	80170e0 <cleanup_stdio+0x10>
 80170dc:	f000 ff14 	bl	8017f08 <_fflush_r>
 80170e0:	68a1      	ldr	r1, [r4, #8]
 80170e2:	4b09      	ldr	r3, [pc, #36]	@ (8017108 <cleanup_stdio+0x38>)
 80170e4:	4299      	cmp	r1, r3
 80170e6:	d002      	beq.n	80170ee <cleanup_stdio+0x1e>
 80170e8:	4620      	mov	r0, r4
 80170ea:	f000 ff0d 	bl	8017f08 <_fflush_r>
 80170ee:	68e1      	ldr	r1, [r4, #12]
 80170f0:	4b06      	ldr	r3, [pc, #24]	@ (801710c <cleanup_stdio+0x3c>)
 80170f2:	4299      	cmp	r1, r3
 80170f4:	d004      	beq.n	8017100 <cleanup_stdio+0x30>
 80170f6:	4620      	mov	r0, r4
 80170f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170fc:	f000 bf04 	b.w	8017f08 <_fflush_r>
 8017100:	bd10      	pop	{r4, pc}
 8017102:	bf00      	nop
 8017104:	2000ebe8 	.word	0x2000ebe8
 8017108:	2000ec50 	.word	0x2000ec50
 801710c:	2000ecb8 	.word	0x2000ecb8

08017110 <global_stdio_init.part.0>:
 8017110:	b510      	push	{r4, lr}
 8017112:	4b0b      	ldr	r3, [pc, #44]	@ (8017140 <global_stdio_init.part.0+0x30>)
 8017114:	4c0b      	ldr	r4, [pc, #44]	@ (8017144 <global_stdio_init.part.0+0x34>)
 8017116:	4a0c      	ldr	r2, [pc, #48]	@ (8017148 <global_stdio_init.part.0+0x38>)
 8017118:	601a      	str	r2, [r3, #0]
 801711a:	4620      	mov	r0, r4
 801711c:	2200      	movs	r2, #0
 801711e:	2104      	movs	r1, #4
 8017120:	f7ff ff94 	bl	801704c <std>
 8017124:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017128:	2201      	movs	r2, #1
 801712a:	2109      	movs	r1, #9
 801712c:	f7ff ff8e 	bl	801704c <std>
 8017130:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017134:	2202      	movs	r2, #2
 8017136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801713a:	2112      	movs	r1, #18
 801713c:	f7ff bf86 	b.w	801704c <std>
 8017140:	2000ed20 	.word	0x2000ed20
 8017144:	2000ebe8 	.word	0x2000ebe8
 8017148:	080170b9 	.word	0x080170b9

0801714c <__sfp_lock_acquire>:
 801714c:	4801      	ldr	r0, [pc, #4]	@ (8017154 <__sfp_lock_acquire+0x8>)
 801714e:	f000 bade 	b.w	801770e <__retarget_lock_acquire_recursive>
 8017152:	bf00      	nop
 8017154:	2000ed2a 	.word	0x2000ed2a

08017158 <__sfp_lock_release>:
 8017158:	4801      	ldr	r0, [pc, #4]	@ (8017160 <__sfp_lock_release+0x8>)
 801715a:	f000 bad9 	b.w	8017710 <__retarget_lock_release_recursive>
 801715e:	bf00      	nop
 8017160:	2000ed2a 	.word	0x2000ed2a

08017164 <__sinit>:
 8017164:	b510      	push	{r4, lr}
 8017166:	4604      	mov	r4, r0
 8017168:	f7ff fff0 	bl	801714c <__sfp_lock_acquire>
 801716c:	6a23      	ldr	r3, [r4, #32]
 801716e:	b11b      	cbz	r3, 8017178 <__sinit+0x14>
 8017170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017174:	f7ff bff0 	b.w	8017158 <__sfp_lock_release>
 8017178:	4b04      	ldr	r3, [pc, #16]	@ (801718c <__sinit+0x28>)
 801717a:	6223      	str	r3, [r4, #32]
 801717c:	4b04      	ldr	r3, [pc, #16]	@ (8017190 <__sinit+0x2c>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d1f5      	bne.n	8017170 <__sinit+0xc>
 8017184:	f7ff ffc4 	bl	8017110 <global_stdio_init.part.0>
 8017188:	e7f2      	b.n	8017170 <__sinit+0xc>
 801718a:	bf00      	nop
 801718c:	080170d1 	.word	0x080170d1
 8017190:	2000ed20 	.word	0x2000ed20

08017194 <_fwalk_sglue>:
 8017194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017198:	4607      	mov	r7, r0
 801719a:	4688      	mov	r8, r1
 801719c:	4614      	mov	r4, r2
 801719e:	2600      	movs	r6, #0
 80171a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171a4:	f1b9 0901 	subs.w	r9, r9, #1
 80171a8:	d505      	bpl.n	80171b6 <_fwalk_sglue+0x22>
 80171aa:	6824      	ldr	r4, [r4, #0]
 80171ac:	2c00      	cmp	r4, #0
 80171ae:	d1f7      	bne.n	80171a0 <_fwalk_sglue+0xc>
 80171b0:	4630      	mov	r0, r6
 80171b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171b6:	89ab      	ldrh	r3, [r5, #12]
 80171b8:	2b01      	cmp	r3, #1
 80171ba:	d907      	bls.n	80171cc <_fwalk_sglue+0x38>
 80171bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171c0:	3301      	adds	r3, #1
 80171c2:	d003      	beq.n	80171cc <_fwalk_sglue+0x38>
 80171c4:	4629      	mov	r1, r5
 80171c6:	4638      	mov	r0, r7
 80171c8:	47c0      	blx	r8
 80171ca:	4306      	orrs	r6, r0
 80171cc:	3568      	adds	r5, #104	@ 0x68
 80171ce:	e7e9      	b.n	80171a4 <_fwalk_sglue+0x10>

080171d0 <_fwrite_r>:
 80171d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171d4:	9c08      	ldr	r4, [sp, #32]
 80171d6:	468a      	mov	sl, r1
 80171d8:	4690      	mov	r8, r2
 80171da:	fb02 f903 	mul.w	r9, r2, r3
 80171de:	4606      	mov	r6, r0
 80171e0:	b118      	cbz	r0, 80171ea <_fwrite_r+0x1a>
 80171e2:	6a03      	ldr	r3, [r0, #32]
 80171e4:	b90b      	cbnz	r3, 80171ea <_fwrite_r+0x1a>
 80171e6:	f7ff ffbd 	bl	8017164 <__sinit>
 80171ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80171ec:	07dd      	lsls	r5, r3, #31
 80171ee:	d405      	bmi.n	80171fc <_fwrite_r+0x2c>
 80171f0:	89a3      	ldrh	r3, [r4, #12]
 80171f2:	0598      	lsls	r0, r3, #22
 80171f4:	d402      	bmi.n	80171fc <_fwrite_r+0x2c>
 80171f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80171f8:	f000 fa89 	bl	801770e <__retarget_lock_acquire_recursive>
 80171fc:	89a3      	ldrh	r3, [r4, #12]
 80171fe:	0719      	lsls	r1, r3, #28
 8017200:	d516      	bpl.n	8017230 <_fwrite_r+0x60>
 8017202:	6923      	ldr	r3, [r4, #16]
 8017204:	b1a3      	cbz	r3, 8017230 <_fwrite_r+0x60>
 8017206:	2500      	movs	r5, #0
 8017208:	454d      	cmp	r5, r9
 801720a:	d01f      	beq.n	801724c <_fwrite_r+0x7c>
 801720c:	68a7      	ldr	r7, [r4, #8]
 801720e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8017212:	3f01      	subs	r7, #1
 8017214:	2f00      	cmp	r7, #0
 8017216:	60a7      	str	r7, [r4, #8]
 8017218:	da04      	bge.n	8017224 <_fwrite_r+0x54>
 801721a:	69a3      	ldr	r3, [r4, #24]
 801721c:	429f      	cmp	r7, r3
 801721e:	db0f      	blt.n	8017240 <_fwrite_r+0x70>
 8017220:	290a      	cmp	r1, #10
 8017222:	d00d      	beq.n	8017240 <_fwrite_r+0x70>
 8017224:	6823      	ldr	r3, [r4, #0]
 8017226:	1c5a      	adds	r2, r3, #1
 8017228:	6022      	str	r2, [r4, #0]
 801722a:	7019      	strb	r1, [r3, #0]
 801722c:	3501      	adds	r5, #1
 801722e:	e7eb      	b.n	8017208 <_fwrite_r+0x38>
 8017230:	4621      	mov	r1, r4
 8017232:	4630      	mov	r0, r6
 8017234:	f000 f91a 	bl	801746c <__swsetup_r>
 8017238:	2800      	cmp	r0, #0
 801723a:	d0e4      	beq.n	8017206 <_fwrite_r+0x36>
 801723c:	2500      	movs	r5, #0
 801723e:	e005      	b.n	801724c <_fwrite_r+0x7c>
 8017240:	4622      	mov	r2, r4
 8017242:	4630      	mov	r0, r6
 8017244:	f000 f8d4 	bl	80173f0 <__swbuf_r>
 8017248:	3001      	adds	r0, #1
 801724a:	d1ef      	bne.n	801722c <_fwrite_r+0x5c>
 801724c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801724e:	07da      	lsls	r2, r3, #31
 8017250:	d405      	bmi.n	801725e <_fwrite_r+0x8e>
 8017252:	89a3      	ldrh	r3, [r4, #12]
 8017254:	059b      	lsls	r3, r3, #22
 8017256:	d402      	bmi.n	801725e <_fwrite_r+0x8e>
 8017258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801725a:	f000 fa59 	bl	8017710 <__retarget_lock_release_recursive>
 801725e:	fbb5 f0f8 	udiv	r0, r5, r8
 8017262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017268 <fwrite>:
 8017268:	b507      	push	{r0, r1, r2, lr}
 801726a:	9300      	str	r3, [sp, #0]
 801726c:	4613      	mov	r3, r2
 801726e:	460a      	mov	r2, r1
 8017270:	4601      	mov	r1, r0
 8017272:	4803      	ldr	r0, [pc, #12]	@ (8017280 <fwrite+0x18>)
 8017274:	6800      	ldr	r0, [r0, #0]
 8017276:	f7ff ffab 	bl	80171d0 <_fwrite_r>
 801727a:	b003      	add	sp, #12
 801727c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017280:	20000e88 	.word	0x20000e88

08017284 <sniprintf>:
 8017284:	b40c      	push	{r2, r3}
 8017286:	b530      	push	{r4, r5, lr}
 8017288:	4b18      	ldr	r3, [pc, #96]	@ (80172ec <sniprintf+0x68>)
 801728a:	1e0c      	subs	r4, r1, #0
 801728c:	681d      	ldr	r5, [r3, #0]
 801728e:	b09d      	sub	sp, #116	@ 0x74
 8017290:	da08      	bge.n	80172a4 <sniprintf+0x20>
 8017292:	238b      	movs	r3, #139	@ 0x8b
 8017294:	602b      	str	r3, [r5, #0]
 8017296:	f04f 30ff 	mov.w	r0, #4294967295
 801729a:	b01d      	add	sp, #116	@ 0x74
 801729c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172a0:	b002      	add	sp, #8
 80172a2:	4770      	bx	lr
 80172a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80172a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80172ac:	f04f 0300 	mov.w	r3, #0
 80172b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80172b2:	bf14      	ite	ne
 80172b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80172b8:	4623      	moveq	r3, r4
 80172ba:	9304      	str	r3, [sp, #16]
 80172bc:	9307      	str	r3, [sp, #28]
 80172be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80172c2:	9002      	str	r0, [sp, #8]
 80172c4:	9006      	str	r0, [sp, #24]
 80172c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80172ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80172cc:	ab21      	add	r3, sp, #132	@ 0x84
 80172ce:	a902      	add	r1, sp, #8
 80172d0:	4628      	mov	r0, r5
 80172d2:	9301      	str	r3, [sp, #4]
 80172d4:	f000 fb0c 	bl	80178f0 <_svfiprintf_r>
 80172d8:	1c43      	adds	r3, r0, #1
 80172da:	bfbc      	itt	lt
 80172dc:	238b      	movlt	r3, #139	@ 0x8b
 80172de:	602b      	strlt	r3, [r5, #0]
 80172e0:	2c00      	cmp	r4, #0
 80172e2:	d0da      	beq.n	801729a <sniprintf+0x16>
 80172e4:	9b02      	ldr	r3, [sp, #8]
 80172e6:	2200      	movs	r2, #0
 80172e8:	701a      	strb	r2, [r3, #0]
 80172ea:	e7d6      	b.n	801729a <sniprintf+0x16>
 80172ec:	20000e88 	.word	0x20000e88

080172f0 <__sread>:
 80172f0:	b510      	push	{r4, lr}
 80172f2:	460c      	mov	r4, r1
 80172f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172f8:	f000 f9aa 	bl	8017650 <_read_r>
 80172fc:	2800      	cmp	r0, #0
 80172fe:	bfab      	itete	ge
 8017300:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017302:	89a3      	ldrhlt	r3, [r4, #12]
 8017304:	181b      	addge	r3, r3, r0
 8017306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801730a:	bfac      	ite	ge
 801730c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801730e:	81a3      	strhlt	r3, [r4, #12]
 8017310:	bd10      	pop	{r4, pc}

08017312 <__swrite>:
 8017312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017316:	461f      	mov	r7, r3
 8017318:	898b      	ldrh	r3, [r1, #12]
 801731a:	05db      	lsls	r3, r3, #23
 801731c:	4605      	mov	r5, r0
 801731e:	460c      	mov	r4, r1
 8017320:	4616      	mov	r6, r2
 8017322:	d505      	bpl.n	8017330 <__swrite+0x1e>
 8017324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017328:	2302      	movs	r3, #2
 801732a:	2200      	movs	r2, #0
 801732c:	f000 f97e 	bl	801762c <_lseek_r>
 8017330:	89a3      	ldrh	r3, [r4, #12]
 8017332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017336:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801733a:	81a3      	strh	r3, [r4, #12]
 801733c:	4632      	mov	r2, r6
 801733e:	463b      	mov	r3, r7
 8017340:	4628      	mov	r0, r5
 8017342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017346:	f000 b9a5 	b.w	8017694 <_write_r>

0801734a <__sseek>:
 801734a:	b510      	push	{r4, lr}
 801734c:	460c      	mov	r4, r1
 801734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017352:	f000 f96b 	bl	801762c <_lseek_r>
 8017356:	1c43      	adds	r3, r0, #1
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	bf15      	itete	ne
 801735c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801735e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017362:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017366:	81a3      	strheq	r3, [r4, #12]
 8017368:	bf18      	it	ne
 801736a:	81a3      	strhne	r3, [r4, #12]
 801736c:	bd10      	pop	{r4, pc}

0801736e <__sclose>:
 801736e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017372:	f000 b94b 	b.w	801760c <_close_r>

08017376 <_vsniprintf_r>:
 8017376:	b530      	push	{r4, r5, lr}
 8017378:	4614      	mov	r4, r2
 801737a:	2c00      	cmp	r4, #0
 801737c:	b09b      	sub	sp, #108	@ 0x6c
 801737e:	4605      	mov	r5, r0
 8017380:	461a      	mov	r2, r3
 8017382:	da05      	bge.n	8017390 <_vsniprintf_r+0x1a>
 8017384:	238b      	movs	r3, #139	@ 0x8b
 8017386:	6003      	str	r3, [r0, #0]
 8017388:	f04f 30ff 	mov.w	r0, #4294967295
 801738c:	b01b      	add	sp, #108	@ 0x6c
 801738e:	bd30      	pop	{r4, r5, pc}
 8017390:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017394:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017398:	f04f 0300 	mov.w	r3, #0
 801739c:	9319      	str	r3, [sp, #100]	@ 0x64
 801739e:	bf14      	ite	ne
 80173a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80173a4:	4623      	moveq	r3, r4
 80173a6:	9302      	str	r3, [sp, #8]
 80173a8:	9305      	str	r3, [sp, #20]
 80173aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80173ae:	9100      	str	r1, [sp, #0]
 80173b0:	9104      	str	r1, [sp, #16]
 80173b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80173b6:	4669      	mov	r1, sp
 80173b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80173ba:	f000 fa99 	bl	80178f0 <_svfiprintf_r>
 80173be:	1c43      	adds	r3, r0, #1
 80173c0:	bfbc      	itt	lt
 80173c2:	238b      	movlt	r3, #139	@ 0x8b
 80173c4:	602b      	strlt	r3, [r5, #0]
 80173c6:	2c00      	cmp	r4, #0
 80173c8:	d0e0      	beq.n	801738c <_vsniprintf_r+0x16>
 80173ca:	9b00      	ldr	r3, [sp, #0]
 80173cc:	2200      	movs	r2, #0
 80173ce:	701a      	strb	r2, [r3, #0]
 80173d0:	e7dc      	b.n	801738c <_vsniprintf_r+0x16>
	...

080173d4 <vsniprintf>:
 80173d4:	b507      	push	{r0, r1, r2, lr}
 80173d6:	9300      	str	r3, [sp, #0]
 80173d8:	4613      	mov	r3, r2
 80173da:	460a      	mov	r2, r1
 80173dc:	4601      	mov	r1, r0
 80173de:	4803      	ldr	r0, [pc, #12]	@ (80173ec <vsniprintf+0x18>)
 80173e0:	6800      	ldr	r0, [r0, #0]
 80173e2:	f7ff ffc8 	bl	8017376 <_vsniprintf_r>
 80173e6:	b003      	add	sp, #12
 80173e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80173ec:	20000e88 	.word	0x20000e88

080173f0 <__swbuf_r>:
 80173f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173f2:	460e      	mov	r6, r1
 80173f4:	4614      	mov	r4, r2
 80173f6:	4605      	mov	r5, r0
 80173f8:	b118      	cbz	r0, 8017402 <__swbuf_r+0x12>
 80173fa:	6a03      	ldr	r3, [r0, #32]
 80173fc:	b90b      	cbnz	r3, 8017402 <__swbuf_r+0x12>
 80173fe:	f7ff feb1 	bl	8017164 <__sinit>
 8017402:	69a3      	ldr	r3, [r4, #24]
 8017404:	60a3      	str	r3, [r4, #8]
 8017406:	89a3      	ldrh	r3, [r4, #12]
 8017408:	071a      	lsls	r2, r3, #28
 801740a:	d501      	bpl.n	8017410 <__swbuf_r+0x20>
 801740c:	6923      	ldr	r3, [r4, #16]
 801740e:	b943      	cbnz	r3, 8017422 <__swbuf_r+0x32>
 8017410:	4621      	mov	r1, r4
 8017412:	4628      	mov	r0, r5
 8017414:	f000 f82a 	bl	801746c <__swsetup_r>
 8017418:	b118      	cbz	r0, 8017422 <__swbuf_r+0x32>
 801741a:	f04f 37ff 	mov.w	r7, #4294967295
 801741e:	4638      	mov	r0, r7
 8017420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017422:	6823      	ldr	r3, [r4, #0]
 8017424:	6922      	ldr	r2, [r4, #16]
 8017426:	1a98      	subs	r0, r3, r2
 8017428:	6963      	ldr	r3, [r4, #20]
 801742a:	b2f6      	uxtb	r6, r6
 801742c:	4283      	cmp	r3, r0
 801742e:	4637      	mov	r7, r6
 8017430:	dc05      	bgt.n	801743e <__swbuf_r+0x4e>
 8017432:	4621      	mov	r1, r4
 8017434:	4628      	mov	r0, r5
 8017436:	f000 fd67 	bl	8017f08 <_fflush_r>
 801743a:	2800      	cmp	r0, #0
 801743c:	d1ed      	bne.n	801741a <__swbuf_r+0x2a>
 801743e:	68a3      	ldr	r3, [r4, #8]
 8017440:	3b01      	subs	r3, #1
 8017442:	60a3      	str	r3, [r4, #8]
 8017444:	6823      	ldr	r3, [r4, #0]
 8017446:	1c5a      	adds	r2, r3, #1
 8017448:	6022      	str	r2, [r4, #0]
 801744a:	701e      	strb	r6, [r3, #0]
 801744c:	6962      	ldr	r2, [r4, #20]
 801744e:	1c43      	adds	r3, r0, #1
 8017450:	429a      	cmp	r2, r3
 8017452:	d004      	beq.n	801745e <__swbuf_r+0x6e>
 8017454:	89a3      	ldrh	r3, [r4, #12]
 8017456:	07db      	lsls	r3, r3, #31
 8017458:	d5e1      	bpl.n	801741e <__swbuf_r+0x2e>
 801745a:	2e0a      	cmp	r6, #10
 801745c:	d1df      	bne.n	801741e <__swbuf_r+0x2e>
 801745e:	4621      	mov	r1, r4
 8017460:	4628      	mov	r0, r5
 8017462:	f000 fd51 	bl	8017f08 <_fflush_r>
 8017466:	2800      	cmp	r0, #0
 8017468:	d0d9      	beq.n	801741e <__swbuf_r+0x2e>
 801746a:	e7d6      	b.n	801741a <__swbuf_r+0x2a>

0801746c <__swsetup_r>:
 801746c:	b538      	push	{r3, r4, r5, lr}
 801746e:	4b29      	ldr	r3, [pc, #164]	@ (8017514 <__swsetup_r+0xa8>)
 8017470:	4605      	mov	r5, r0
 8017472:	6818      	ldr	r0, [r3, #0]
 8017474:	460c      	mov	r4, r1
 8017476:	b118      	cbz	r0, 8017480 <__swsetup_r+0x14>
 8017478:	6a03      	ldr	r3, [r0, #32]
 801747a:	b90b      	cbnz	r3, 8017480 <__swsetup_r+0x14>
 801747c:	f7ff fe72 	bl	8017164 <__sinit>
 8017480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017484:	0719      	lsls	r1, r3, #28
 8017486:	d422      	bmi.n	80174ce <__swsetup_r+0x62>
 8017488:	06da      	lsls	r2, r3, #27
 801748a:	d407      	bmi.n	801749c <__swsetup_r+0x30>
 801748c:	2209      	movs	r2, #9
 801748e:	602a      	str	r2, [r5, #0]
 8017490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017494:	81a3      	strh	r3, [r4, #12]
 8017496:	f04f 30ff 	mov.w	r0, #4294967295
 801749a:	e033      	b.n	8017504 <__swsetup_r+0x98>
 801749c:	0758      	lsls	r0, r3, #29
 801749e:	d512      	bpl.n	80174c6 <__swsetup_r+0x5a>
 80174a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80174a2:	b141      	cbz	r1, 80174b6 <__swsetup_r+0x4a>
 80174a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174a8:	4299      	cmp	r1, r3
 80174aa:	d002      	beq.n	80174b2 <__swsetup_r+0x46>
 80174ac:	4628      	mov	r0, r5
 80174ae:	f000 f971 	bl	8017794 <_free_r>
 80174b2:	2300      	movs	r3, #0
 80174b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80174b6:	89a3      	ldrh	r3, [r4, #12]
 80174b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80174bc:	81a3      	strh	r3, [r4, #12]
 80174be:	2300      	movs	r3, #0
 80174c0:	6063      	str	r3, [r4, #4]
 80174c2:	6923      	ldr	r3, [r4, #16]
 80174c4:	6023      	str	r3, [r4, #0]
 80174c6:	89a3      	ldrh	r3, [r4, #12]
 80174c8:	f043 0308 	orr.w	r3, r3, #8
 80174cc:	81a3      	strh	r3, [r4, #12]
 80174ce:	6923      	ldr	r3, [r4, #16]
 80174d0:	b94b      	cbnz	r3, 80174e6 <__swsetup_r+0x7a>
 80174d2:	89a3      	ldrh	r3, [r4, #12]
 80174d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80174d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80174dc:	d003      	beq.n	80174e6 <__swsetup_r+0x7a>
 80174de:	4621      	mov	r1, r4
 80174e0:	4628      	mov	r0, r5
 80174e2:	f000 fd71 	bl	8017fc8 <__smakebuf_r>
 80174e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174ea:	f013 0201 	ands.w	r2, r3, #1
 80174ee:	d00a      	beq.n	8017506 <__swsetup_r+0x9a>
 80174f0:	2200      	movs	r2, #0
 80174f2:	60a2      	str	r2, [r4, #8]
 80174f4:	6962      	ldr	r2, [r4, #20]
 80174f6:	4252      	negs	r2, r2
 80174f8:	61a2      	str	r2, [r4, #24]
 80174fa:	6922      	ldr	r2, [r4, #16]
 80174fc:	b942      	cbnz	r2, 8017510 <__swsetup_r+0xa4>
 80174fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017502:	d1c5      	bne.n	8017490 <__swsetup_r+0x24>
 8017504:	bd38      	pop	{r3, r4, r5, pc}
 8017506:	0799      	lsls	r1, r3, #30
 8017508:	bf58      	it	pl
 801750a:	6962      	ldrpl	r2, [r4, #20]
 801750c:	60a2      	str	r2, [r4, #8]
 801750e:	e7f4      	b.n	80174fa <__swsetup_r+0x8e>
 8017510:	2000      	movs	r0, #0
 8017512:	e7f7      	b.n	8017504 <__swsetup_r+0x98>
 8017514:	20000e88 	.word	0x20000e88

08017518 <memcmp>:
 8017518:	b510      	push	{r4, lr}
 801751a:	3901      	subs	r1, #1
 801751c:	4402      	add	r2, r0
 801751e:	4290      	cmp	r0, r2
 8017520:	d101      	bne.n	8017526 <memcmp+0xe>
 8017522:	2000      	movs	r0, #0
 8017524:	e005      	b.n	8017532 <memcmp+0x1a>
 8017526:	7803      	ldrb	r3, [r0, #0]
 8017528:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801752c:	42a3      	cmp	r3, r4
 801752e:	d001      	beq.n	8017534 <memcmp+0x1c>
 8017530:	1b18      	subs	r0, r3, r4
 8017532:	bd10      	pop	{r4, pc}
 8017534:	3001      	adds	r0, #1
 8017536:	e7f2      	b.n	801751e <memcmp+0x6>

08017538 <memmove>:
 8017538:	4288      	cmp	r0, r1
 801753a:	b510      	push	{r4, lr}
 801753c:	eb01 0402 	add.w	r4, r1, r2
 8017540:	d902      	bls.n	8017548 <memmove+0x10>
 8017542:	4284      	cmp	r4, r0
 8017544:	4623      	mov	r3, r4
 8017546:	d807      	bhi.n	8017558 <memmove+0x20>
 8017548:	1e43      	subs	r3, r0, #1
 801754a:	42a1      	cmp	r1, r4
 801754c:	d008      	beq.n	8017560 <memmove+0x28>
 801754e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017556:	e7f8      	b.n	801754a <memmove+0x12>
 8017558:	4402      	add	r2, r0
 801755a:	4601      	mov	r1, r0
 801755c:	428a      	cmp	r2, r1
 801755e:	d100      	bne.n	8017562 <memmove+0x2a>
 8017560:	bd10      	pop	{r4, pc}
 8017562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801756a:	e7f7      	b.n	801755c <memmove+0x24>

0801756c <memset>:
 801756c:	4402      	add	r2, r0
 801756e:	4603      	mov	r3, r0
 8017570:	4293      	cmp	r3, r2
 8017572:	d100      	bne.n	8017576 <memset+0xa>
 8017574:	4770      	bx	lr
 8017576:	f803 1b01 	strb.w	r1, [r3], #1
 801757a:	e7f9      	b.n	8017570 <memset+0x4>

0801757c <strchr>:
 801757c:	b2c9      	uxtb	r1, r1
 801757e:	4603      	mov	r3, r0
 8017580:	4618      	mov	r0, r3
 8017582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017586:	b112      	cbz	r2, 801758e <strchr+0x12>
 8017588:	428a      	cmp	r2, r1
 801758a:	d1f9      	bne.n	8017580 <strchr+0x4>
 801758c:	4770      	bx	lr
 801758e:	2900      	cmp	r1, #0
 8017590:	bf18      	it	ne
 8017592:	2000      	movne	r0, #0
 8017594:	4770      	bx	lr

08017596 <strncmp>:
 8017596:	b510      	push	{r4, lr}
 8017598:	b16a      	cbz	r2, 80175b6 <strncmp+0x20>
 801759a:	3901      	subs	r1, #1
 801759c:	1884      	adds	r4, r0, r2
 801759e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80175a6:	429a      	cmp	r2, r3
 80175a8:	d103      	bne.n	80175b2 <strncmp+0x1c>
 80175aa:	42a0      	cmp	r0, r4
 80175ac:	d001      	beq.n	80175b2 <strncmp+0x1c>
 80175ae:	2a00      	cmp	r2, #0
 80175b0:	d1f5      	bne.n	801759e <strncmp+0x8>
 80175b2:	1ad0      	subs	r0, r2, r3
 80175b4:	bd10      	pop	{r4, pc}
 80175b6:	4610      	mov	r0, r2
 80175b8:	e7fc      	b.n	80175b4 <strncmp+0x1e>

080175ba <strncpy>:
 80175ba:	b510      	push	{r4, lr}
 80175bc:	3901      	subs	r1, #1
 80175be:	4603      	mov	r3, r0
 80175c0:	b132      	cbz	r2, 80175d0 <strncpy+0x16>
 80175c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80175c6:	f803 4b01 	strb.w	r4, [r3], #1
 80175ca:	3a01      	subs	r2, #1
 80175cc:	2c00      	cmp	r4, #0
 80175ce:	d1f7      	bne.n	80175c0 <strncpy+0x6>
 80175d0:	441a      	add	r2, r3
 80175d2:	2100      	movs	r1, #0
 80175d4:	4293      	cmp	r3, r2
 80175d6:	d100      	bne.n	80175da <strncpy+0x20>
 80175d8:	bd10      	pop	{r4, pc}
 80175da:	f803 1b01 	strb.w	r1, [r3], #1
 80175de:	e7f9      	b.n	80175d4 <strncpy+0x1a>

080175e0 <strstr>:
 80175e0:	780a      	ldrb	r2, [r1, #0]
 80175e2:	b570      	push	{r4, r5, r6, lr}
 80175e4:	b96a      	cbnz	r2, 8017602 <strstr+0x22>
 80175e6:	bd70      	pop	{r4, r5, r6, pc}
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d109      	bne.n	8017600 <strstr+0x20>
 80175ec:	460c      	mov	r4, r1
 80175ee:	4605      	mov	r5, r0
 80175f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d0f6      	beq.n	80175e6 <strstr+0x6>
 80175f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80175fc:	429e      	cmp	r6, r3
 80175fe:	d0f7      	beq.n	80175f0 <strstr+0x10>
 8017600:	3001      	adds	r0, #1
 8017602:	7803      	ldrb	r3, [r0, #0]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d1ef      	bne.n	80175e8 <strstr+0x8>
 8017608:	4618      	mov	r0, r3
 801760a:	e7ec      	b.n	80175e6 <strstr+0x6>

0801760c <_close_r>:
 801760c:	b538      	push	{r3, r4, r5, lr}
 801760e:	4d06      	ldr	r5, [pc, #24]	@ (8017628 <_close_r+0x1c>)
 8017610:	2300      	movs	r3, #0
 8017612:	4604      	mov	r4, r0
 8017614:	4608      	mov	r0, r1
 8017616:	602b      	str	r3, [r5, #0]
 8017618:	f7ea fdb2 	bl	8002180 <_close>
 801761c:	1c43      	adds	r3, r0, #1
 801761e:	d102      	bne.n	8017626 <_close_r+0x1a>
 8017620:	682b      	ldr	r3, [r5, #0]
 8017622:	b103      	cbz	r3, 8017626 <_close_r+0x1a>
 8017624:	6023      	str	r3, [r4, #0]
 8017626:	bd38      	pop	{r3, r4, r5, pc}
 8017628:	2000ed24 	.word	0x2000ed24

0801762c <_lseek_r>:
 801762c:	b538      	push	{r3, r4, r5, lr}
 801762e:	4d07      	ldr	r5, [pc, #28]	@ (801764c <_lseek_r+0x20>)
 8017630:	4604      	mov	r4, r0
 8017632:	4608      	mov	r0, r1
 8017634:	4611      	mov	r1, r2
 8017636:	2200      	movs	r2, #0
 8017638:	602a      	str	r2, [r5, #0]
 801763a:	461a      	mov	r2, r3
 801763c:	f7ea fdc7 	bl	80021ce <_lseek>
 8017640:	1c43      	adds	r3, r0, #1
 8017642:	d102      	bne.n	801764a <_lseek_r+0x1e>
 8017644:	682b      	ldr	r3, [r5, #0]
 8017646:	b103      	cbz	r3, 801764a <_lseek_r+0x1e>
 8017648:	6023      	str	r3, [r4, #0]
 801764a:	bd38      	pop	{r3, r4, r5, pc}
 801764c:	2000ed24 	.word	0x2000ed24

08017650 <_read_r>:
 8017650:	b538      	push	{r3, r4, r5, lr}
 8017652:	4d07      	ldr	r5, [pc, #28]	@ (8017670 <_read_r+0x20>)
 8017654:	4604      	mov	r4, r0
 8017656:	4608      	mov	r0, r1
 8017658:	4611      	mov	r1, r2
 801765a:	2200      	movs	r2, #0
 801765c:	602a      	str	r2, [r5, #0]
 801765e:	461a      	mov	r2, r3
 8017660:	f7ea fd55 	bl	800210e <_read>
 8017664:	1c43      	adds	r3, r0, #1
 8017666:	d102      	bne.n	801766e <_read_r+0x1e>
 8017668:	682b      	ldr	r3, [r5, #0]
 801766a:	b103      	cbz	r3, 801766e <_read_r+0x1e>
 801766c:	6023      	str	r3, [r4, #0]
 801766e:	bd38      	pop	{r3, r4, r5, pc}
 8017670:	2000ed24 	.word	0x2000ed24

08017674 <_sbrk_r>:
 8017674:	b538      	push	{r3, r4, r5, lr}
 8017676:	4d06      	ldr	r5, [pc, #24]	@ (8017690 <_sbrk_r+0x1c>)
 8017678:	2300      	movs	r3, #0
 801767a:	4604      	mov	r4, r0
 801767c:	4608      	mov	r0, r1
 801767e:	602b      	str	r3, [r5, #0]
 8017680:	f7ea fdb2 	bl	80021e8 <_sbrk>
 8017684:	1c43      	adds	r3, r0, #1
 8017686:	d102      	bne.n	801768e <_sbrk_r+0x1a>
 8017688:	682b      	ldr	r3, [r5, #0]
 801768a:	b103      	cbz	r3, 801768e <_sbrk_r+0x1a>
 801768c:	6023      	str	r3, [r4, #0]
 801768e:	bd38      	pop	{r3, r4, r5, pc}
 8017690:	2000ed24 	.word	0x2000ed24

08017694 <_write_r>:
 8017694:	b538      	push	{r3, r4, r5, lr}
 8017696:	4d07      	ldr	r5, [pc, #28]	@ (80176b4 <_write_r+0x20>)
 8017698:	4604      	mov	r4, r0
 801769a:	4608      	mov	r0, r1
 801769c:	4611      	mov	r1, r2
 801769e:	2200      	movs	r2, #0
 80176a0:	602a      	str	r2, [r5, #0]
 80176a2:	461a      	mov	r2, r3
 80176a4:	f7ea fd50 	bl	8002148 <_write>
 80176a8:	1c43      	adds	r3, r0, #1
 80176aa:	d102      	bne.n	80176b2 <_write_r+0x1e>
 80176ac:	682b      	ldr	r3, [r5, #0]
 80176ae:	b103      	cbz	r3, 80176b2 <_write_r+0x1e>
 80176b0:	6023      	str	r3, [r4, #0]
 80176b2:	bd38      	pop	{r3, r4, r5, pc}
 80176b4:	2000ed24 	.word	0x2000ed24

080176b8 <__errno>:
 80176b8:	4b01      	ldr	r3, [pc, #4]	@ (80176c0 <__errno+0x8>)
 80176ba:	6818      	ldr	r0, [r3, #0]
 80176bc:	4770      	bx	lr
 80176be:	bf00      	nop
 80176c0:	20000e88 	.word	0x20000e88

080176c4 <__libc_init_array>:
 80176c4:	b570      	push	{r4, r5, r6, lr}
 80176c6:	4d0d      	ldr	r5, [pc, #52]	@ (80176fc <__libc_init_array+0x38>)
 80176c8:	4c0d      	ldr	r4, [pc, #52]	@ (8017700 <__libc_init_array+0x3c>)
 80176ca:	1b64      	subs	r4, r4, r5
 80176cc:	10a4      	asrs	r4, r4, #2
 80176ce:	2600      	movs	r6, #0
 80176d0:	42a6      	cmp	r6, r4
 80176d2:	d109      	bne.n	80176e8 <__libc_init_array+0x24>
 80176d4:	4d0b      	ldr	r5, [pc, #44]	@ (8017704 <__libc_init_array+0x40>)
 80176d6:	4c0c      	ldr	r4, [pc, #48]	@ (8017708 <__libc_init_array+0x44>)
 80176d8:	f000 fe60 	bl	801839c <_init>
 80176dc:	1b64      	subs	r4, r4, r5
 80176de:	10a4      	asrs	r4, r4, #2
 80176e0:	2600      	movs	r6, #0
 80176e2:	42a6      	cmp	r6, r4
 80176e4:	d105      	bne.n	80176f2 <__libc_init_array+0x2e>
 80176e6:	bd70      	pop	{r4, r5, r6, pc}
 80176e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80176ec:	4798      	blx	r3
 80176ee:	3601      	adds	r6, #1
 80176f0:	e7ee      	b.n	80176d0 <__libc_init_array+0xc>
 80176f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80176f6:	4798      	blx	r3
 80176f8:	3601      	adds	r6, #1
 80176fa:	e7f2      	b.n	80176e2 <__libc_init_array+0x1e>
 80176fc:	080195e4 	.word	0x080195e4
 8017700:	080195e4 	.word	0x080195e4
 8017704:	080195e4 	.word	0x080195e4
 8017708:	080195ec 	.word	0x080195ec

0801770c <__retarget_lock_init_recursive>:
 801770c:	4770      	bx	lr

0801770e <__retarget_lock_acquire_recursive>:
 801770e:	4770      	bx	lr

08017710 <__retarget_lock_release_recursive>:
 8017710:	4770      	bx	lr

08017712 <strcpy>:
 8017712:	4603      	mov	r3, r0
 8017714:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017718:	f803 2b01 	strb.w	r2, [r3], #1
 801771c:	2a00      	cmp	r2, #0
 801771e:	d1f9      	bne.n	8017714 <strcpy+0x2>
 8017720:	4770      	bx	lr

08017722 <memcpy>:
 8017722:	440a      	add	r2, r1
 8017724:	4291      	cmp	r1, r2
 8017726:	f100 33ff 	add.w	r3, r0, #4294967295
 801772a:	d100      	bne.n	801772e <memcpy+0xc>
 801772c:	4770      	bx	lr
 801772e:	b510      	push	{r4, lr}
 8017730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017738:	4291      	cmp	r1, r2
 801773a:	d1f9      	bne.n	8017730 <memcpy+0xe>
 801773c:	bd10      	pop	{r4, pc}
	...

08017740 <__assert_func>:
 8017740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017742:	4614      	mov	r4, r2
 8017744:	461a      	mov	r2, r3
 8017746:	4b09      	ldr	r3, [pc, #36]	@ (801776c <__assert_func+0x2c>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	4605      	mov	r5, r0
 801774c:	68d8      	ldr	r0, [r3, #12]
 801774e:	b14c      	cbz	r4, 8017764 <__assert_func+0x24>
 8017750:	4b07      	ldr	r3, [pc, #28]	@ (8017770 <__assert_func+0x30>)
 8017752:	9100      	str	r1, [sp, #0]
 8017754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017758:	4906      	ldr	r1, [pc, #24]	@ (8017774 <__assert_func+0x34>)
 801775a:	462b      	mov	r3, r5
 801775c:	f000 fbfc 	bl	8017f58 <fiprintf>
 8017760:	f000 fc90 	bl	8018084 <abort>
 8017764:	4b04      	ldr	r3, [pc, #16]	@ (8017778 <__assert_func+0x38>)
 8017766:	461c      	mov	r4, r3
 8017768:	e7f3      	b.n	8017752 <__assert_func+0x12>
 801776a:	bf00      	nop
 801776c:	20000e88 	.word	0x20000e88
 8017770:	0801946b 	.word	0x0801946b
 8017774:	08019478 	.word	0x08019478
 8017778:	080194a6 	.word	0x080194a6

0801777c <__env_lock>:
 801777c:	4801      	ldr	r0, [pc, #4]	@ (8017784 <__env_lock+0x8>)
 801777e:	f7ff bfc6 	b.w	801770e <__retarget_lock_acquire_recursive>
 8017782:	bf00      	nop
 8017784:	2000ed28 	.word	0x2000ed28

08017788 <__env_unlock>:
 8017788:	4801      	ldr	r0, [pc, #4]	@ (8017790 <__env_unlock+0x8>)
 801778a:	f7ff bfc1 	b.w	8017710 <__retarget_lock_release_recursive>
 801778e:	bf00      	nop
 8017790:	2000ed28 	.word	0x2000ed28

08017794 <_free_r>:
 8017794:	b538      	push	{r3, r4, r5, lr}
 8017796:	4605      	mov	r5, r0
 8017798:	2900      	cmp	r1, #0
 801779a:	d041      	beq.n	8017820 <_free_r+0x8c>
 801779c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177a0:	1f0c      	subs	r4, r1, #4
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	bfb8      	it	lt
 80177a6:	18e4      	addlt	r4, r4, r3
 80177a8:	f7ff fb2a 	bl	8016e00 <__malloc_lock>
 80177ac:	4a1d      	ldr	r2, [pc, #116]	@ (8017824 <_free_r+0x90>)
 80177ae:	6813      	ldr	r3, [r2, #0]
 80177b0:	b933      	cbnz	r3, 80177c0 <_free_r+0x2c>
 80177b2:	6063      	str	r3, [r4, #4]
 80177b4:	6014      	str	r4, [r2, #0]
 80177b6:	4628      	mov	r0, r5
 80177b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80177bc:	f7ff bb26 	b.w	8016e0c <__malloc_unlock>
 80177c0:	42a3      	cmp	r3, r4
 80177c2:	d908      	bls.n	80177d6 <_free_r+0x42>
 80177c4:	6820      	ldr	r0, [r4, #0]
 80177c6:	1821      	adds	r1, r4, r0
 80177c8:	428b      	cmp	r3, r1
 80177ca:	bf01      	itttt	eq
 80177cc:	6819      	ldreq	r1, [r3, #0]
 80177ce:	685b      	ldreq	r3, [r3, #4]
 80177d0:	1809      	addeq	r1, r1, r0
 80177d2:	6021      	streq	r1, [r4, #0]
 80177d4:	e7ed      	b.n	80177b2 <_free_r+0x1e>
 80177d6:	461a      	mov	r2, r3
 80177d8:	685b      	ldr	r3, [r3, #4]
 80177da:	b10b      	cbz	r3, 80177e0 <_free_r+0x4c>
 80177dc:	42a3      	cmp	r3, r4
 80177de:	d9fa      	bls.n	80177d6 <_free_r+0x42>
 80177e0:	6811      	ldr	r1, [r2, #0]
 80177e2:	1850      	adds	r0, r2, r1
 80177e4:	42a0      	cmp	r0, r4
 80177e6:	d10b      	bne.n	8017800 <_free_r+0x6c>
 80177e8:	6820      	ldr	r0, [r4, #0]
 80177ea:	4401      	add	r1, r0
 80177ec:	1850      	adds	r0, r2, r1
 80177ee:	4283      	cmp	r3, r0
 80177f0:	6011      	str	r1, [r2, #0]
 80177f2:	d1e0      	bne.n	80177b6 <_free_r+0x22>
 80177f4:	6818      	ldr	r0, [r3, #0]
 80177f6:	685b      	ldr	r3, [r3, #4]
 80177f8:	6053      	str	r3, [r2, #4]
 80177fa:	4408      	add	r0, r1
 80177fc:	6010      	str	r0, [r2, #0]
 80177fe:	e7da      	b.n	80177b6 <_free_r+0x22>
 8017800:	d902      	bls.n	8017808 <_free_r+0x74>
 8017802:	230c      	movs	r3, #12
 8017804:	602b      	str	r3, [r5, #0]
 8017806:	e7d6      	b.n	80177b6 <_free_r+0x22>
 8017808:	6820      	ldr	r0, [r4, #0]
 801780a:	1821      	adds	r1, r4, r0
 801780c:	428b      	cmp	r3, r1
 801780e:	bf04      	itt	eq
 8017810:	6819      	ldreq	r1, [r3, #0]
 8017812:	685b      	ldreq	r3, [r3, #4]
 8017814:	6063      	str	r3, [r4, #4]
 8017816:	bf04      	itt	eq
 8017818:	1809      	addeq	r1, r1, r0
 801781a:	6021      	streq	r1, [r4, #0]
 801781c:	6054      	str	r4, [r2, #4]
 801781e:	e7ca      	b.n	80177b6 <_free_r+0x22>
 8017820:	bd38      	pop	{r3, r4, r5, pc}
 8017822:	bf00      	nop
 8017824:	2000ebe4 	.word	0x2000ebe4

08017828 <_malloc_usable_size_r>:
 8017828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801782c:	1f18      	subs	r0, r3, #4
 801782e:	2b00      	cmp	r3, #0
 8017830:	bfbc      	itt	lt
 8017832:	580b      	ldrlt	r3, [r1, r0]
 8017834:	18c0      	addlt	r0, r0, r3
 8017836:	4770      	bx	lr

08017838 <__ssputs_r>:
 8017838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801783c:	688e      	ldr	r6, [r1, #8]
 801783e:	461f      	mov	r7, r3
 8017840:	42be      	cmp	r6, r7
 8017842:	680b      	ldr	r3, [r1, #0]
 8017844:	4682      	mov	sl, r0
 8017846:	460c      	mov	r4, r1
 8017848:	4690      	mov	r8, r2
 801784a:	d82d      	bhi.n	80178a8 <__ssputs_r+0x70>
 801784c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017854:	d026      	beq.n	80178a4 <__ssputs_r+0x6c>
 8017856:	6965      	ldr	r5, [r4, #20]
 8017858:	6909      	ldr	r1, [r1, #16]
 801785a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801785e:	eba3 0901 	sub.w	r9, r3, r1
 8017862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017866:	1c7b      	adds	r3, r7, #1
 8017868:	444b      	add	r3, r9
 801786a:	106d      	asrs	r5, r5, #1
 801786c:	429d      	cmp	r5, r3
 801786e:	bf38      	it	cc
 8017870:	461d      	movcc	r5, r3
 8017872:	0553      	lsls	r3, r2, #21
 8017874:	d527      	bpl.n	80178c6 <__ssputs_r+0x8e>
 8017876:	4629      	mov	r1, r5
 8017878:	f7ff fa42 	bl	8016d00 <_malloc_r>
 801787c:	4606      	mov	r6, r0
 801787e:	b360      	cbz	r0, 80178da <__ssputs_r+0xa2>
 8017880:	6921      	ldr	r1, [r4, #16]
 8017882:	464a      	mov	r2, r9
 8017884:	f7ff ff4d 	bl	8017722 <memcpy>
 8017888:	89a3      	ldrh	r3, [r4, #12]
 801788a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801788e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017892:	81a3      	strh	r3, [r4, #12]
 8017894:	6126      	str	r6, [r4, #16]
 8017896:	6165      	str	r5, [r4, #20]
 8017898:	444e      	add	r6, r9
 801789a:	eba5 0509 	sub.w	r5, r5, r9
 801789e:	6026      	str	r6, [r4, #0]
 80178a0:	60a5      	str	r5, [r4, #8]
 80178a2:	463e      	mov	r6, r7
 80178a4:	42be      	cmp	r6, r7
 80178a6:	d900      	bls.n	80178aa <__ssputs_r+0x72>
 80178a8:	463e      	mov	r6, r7
 80178aa:	6820      	ldr	r0, [r4, #0]
 80178ac:	4632      	mov	r2, r6
 80178ae:	4641      	mov	r1, r8
 80178b0:	f7ff fe42 	bl	8017538 <memmove>
 80178b4:	68a3      	ldr	r3, [r4, #8]
 80178b6:	1b9b      	subs	r3, r3, r6
 80178b8:	60a3      	str	r3, [r4, #8]
 80178ba:	6823      	ldr	r3, [r4, #0]
 80178bc:	4433      	add	r3, r6
 80178be:	6023      	str	r3, [r4, #0]
 80178c0:	2000      	movs	r0, #0
 80178c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178c6:	462a      	mov	r2, r5
 80178c8:	f7ff fb1a 	bl	8016f00 <_realloc_r>
 80178cc:	4606      	mov	r6, r0
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d1e0      	bne.n	8017894 <__ssputs_r+0x5c>
 80178d2:	6921      	ldr	r1, [r4, #16]
 80178d4:	4650      	mov	r0, sl
 80178d6:	f7ff ff5d 	bl	8017794 <_free_r>
 80178da:	230c      	movs	r3, #12
 80178dc:	f8ca 3000 	str.w	r3, [sl]
 80178e0:	89a3      	ldrh	r3, [r4, #12]
 80178e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178e6:	81a3      	strh	r3, [r4, #12]
 80178e8:	f04f 30ff 	mov.w	r0, #4294967295
 80178ec:	e7e9      	b.n	80178c2 <__ssputs_r+0x8a>
	...

080178f0 <_svfiprintf_r>:
 80178f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f4:	4698      	mov	r8, r3
 80178f6:	898b      	ldrh	r3, [r1, #12]
 80178f8:	061b      	lsls	r3, r3, #24
 80178fa:	b09d      	sub	sp, #116	@ 0x74
 80178fc:	4607      	mov	r7, r0
 80178fe:	460d      	mov	r5, r1
 8017900:	4614      	mov	r4, r2
 8017902:	d510      	bpl.n	8017926 <_svfiprintf_r+0x36>
 8017904:	690b      	ldr	r3, [r1, #16]
 8017906:	b973      	cbnz	r3, 8017926 <_svfiprintf_r+0x36>
 8017908:	2140      	movs	r1, #64	@ 0x40
 801790a:	f7ff f9f9 	bl	8016d00 <_malloc_r>
 801790e:	6028      	str	r0, [r5, #0]
 8017910:	6128      	str	r0, [r5, #16]
 8017912:	b930      	cbnz	r0, 8017922 <_svfiprintf_r+0x32>
 8017914:	230c      	movs	r3, #12
 8017916:	603b      	str	r3, [r7, #0]
 8017918:	f04f 30ff 	mov.w	r0, #4294967295
 801791c:	b01d      	add	sp, #116	@ 0x74
 801791e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017922:	2340      	movs	r3, #64	@ 0x40
 8017924:	616b      	str	r3, [r5, #20]
 8017926:	2300      	movs	r3, #0
 8017928:	9309      	str	r3, [sp, #36]	@ 0x24
 801792a:	2320      	movs	r3, #32
 801792c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017930:	f8cd 800c 	str.w	r8, [sp, #12]
 8017934:	2330      	movs	r3, #48	@ 0x30
 8017936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017ad4 <_svfiprintf_r+0x1e4>
 801793a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801793e:	f04f 0901 	mov.w	r9, #1
 8017942:	4623      	mov	r3, r4
 8017944:	469a      	mov	sl, r3
 8017946:	f813 2b01 	ldrb.w	r2, [r3], #1
 801794a:	b10a      	cbz	r2, 8017950 <_svfiprintf_r+0x60>
 801794c:	2a25      	cmp	r2, #37	@ 0x25
 801794e:	d1f9      	bne.n	8017944 <_svfiprintf_r+0x54>
 8017950:	ebba 0b04 	subs.w	fp, sl, r4
 8017954:	d00b      	beq.n	801796e <_svfiprintf_r+0x7e>
 8017956:	465b      	mov	r3, fp
 8017958:	4622      	mov	r2, r4
 801795a:	4629      	mov	r1, r5
 801795c:	4638      	mov	r0, r7
 801795e:	f7ff ff6b 	bl	8017838 <__ssputs_r>
 8017962:	3001      	adds	r0, #1
 8017964:	f000 80a7 	beq.w	8017ab6 <_svfiprintf_r+0x1c6>
 8017968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801796a:	445a      	add	r2, fp
 801796c:	9209      	str	r2, [sp, #36]	@ 0x24
 801796e:	f89a 3000 	ldrb.w	r3, [sl]
 8017972:	2b00      	cmp	r3, #0
 8017974:	f000 809f 	beq.w	8017ab6 <_svfiprintf_r+0x1c6>
 8017978:	2300      	movs	r3, #0
 801797a:	f04f 32ff 	mov.w	r2, #4294967295
 801797e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017982:	f10a 0a01 	add.w	sl, sl, #1
 8017986:	9304      	str	r3, [sp, #16]
 8017988:	9307      	str	r3, [sp, #28]
 801798a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801798e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017990:	4654      	mov	r4, sl
 8017992:	2205      	movs	r2, #5
 8017994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017998:	484e      	ldr	r0, [pc, #312]	@ (8017ad4 <_svfiprintf_r+0x1e4>)
 801799a:	f7e8 fc49 	bl	8000230 <memchr>
 801799e:	9a04      	ldr	r2, [sp, #16]
 80179a0:	b9d8      	cbnz	r0, 80179da <_svfiprintf_r+0xea>
 80179a2:	06d0      	lsls	r0, r2, #27
 80179a4:	bf44      	itt	mi
 80179a6:	2320      	movmi	r3, #32
 80179a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179ac:	0711      	lsls	r1, r2, #28
 80179ae:	bf44      	itt	mi
 80179b0:	232b      	movmi	r3, #43	@ 0x2b
 80179b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179b6:	f89a 3000 	ldrb.w	r3, [sl]
 80179ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80179bc:	d015      	beq.n	80179ea <_svfiprintf_r+0xfa>
 80179be:	9a07      	ldr	r2, [sp, #28]
 80179c0:	4654      	mov	r4, sl
 80179c2:	2000      	movs	r0, #0
 80179c4:	f04f 0c0a 	mov.w	ip, #10
 80179c8:	4621      	mov	r1, r4
 80179ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179ce:	3b30      	subs	r3, #48	@ 0x30
 80179d0:	2b09      	cmp	r3, #9
 80179d2:	d94b      	bls.n	8017a6c <_svfiprintf_r+0x17c>
 80179d4:	b1b0      	cbz	r0, 8017a04 <_svfiprintf_r+0x114>
 80179d6:	9207      	str	r2, [sp, #28]
 80179d8:	e014      	b.n	8017a04 <_svfiprintf_r+0x114>
 80179da:	eba0 0308 	sub.w	r3, r0, r8
 80179de:	fa09 f303 	lsl.w	r3, r9, r3
 80179e2:	4313      	orrs	r3, r2
 80179e4:	9304      	str	r3, [sp, #16]
 80179e6:	46a2      	mov	sl, r4
 80179e8:	e7d2      	b.n	8017990 <_svfiprintf_r+0xa0>
 80179ea:	9b03      	ldr	r3, [sp, #12]
 80179ec:	1d19      	adds	r1, r3, #4
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	9103      	str	r1, [sp, #12]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	bfbb      	ittet	lt
 80179f6:	425b      	neglt	r3, r3
 80179f8:	f042 0202 	orrlt.w	r2, r2, #2
 80179fc:	9307      	strge	r3, [sp, #28]
 80179fe:	9307      	strlt	r3, [sp, #28]
 8017a00:	bfb8      	it	lt
 8017a02:	9204      	strlt	r2, [sp, #16]
 8017a04:	7823      	ldrb	r3, [r4, #0]
 8017a06:	2b2e      	cmp	r3, #46	@ 0x2e
 8017a08:	d10a      	bne.n	8017a20 <_svfiprintf_r+0x130>
 8017a0a:	7863      	ldrb	r3, [r4, #1]
 8017a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a0e:	d132      	bne.n	8017a76 <_svfiprintf_r+0x186>
 8017a10:	9b03      	ldr	r3, [sp, #12]
 8017a12:	1d1a      	adds	r2, r3, #4
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	9203      	str	r2, [sp, #12]
 8017a18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017a1c:	3402      	adds	r4, #2
 8017a1e:	9305      	str	r3, [sp, #20]
 8017a20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017ae4 <_svfiprintf_r+0x1f4>
 8017a24:	7821      	ldrb	r1, [r4, #0]
 8017a26:	2203      	movs	r2, #3
 8017a28:	4650      	mov	r0, sl
 8017a2a:	f7e8 fc01 	bl	8000230 <memchr>
 8017a2e:	b138      	cbz	r0, 8017a40 <_svfiprintf_r+0x150>
 8017a30:	9b04      	ldr	r3, [sp, #16]
 8017a32:	eba0 000a 	sub.w	r0, r0, sl
 8017a36:	2240      	movs	r2, #64	@ 0x40
 8017a38:	4082      	lsls	r2, r0
 8017a3a:	4313      	orrs	r3, r2
 8017a3c:	3401      	adds	r4, #1
 8017a3e:	9304      	str	r3, [sp, #16]
 8017a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a44:	4824      	ldr	r0, [pc, #144]	@ (8017ad8 <_svfiprintf_r+0x1e8>)
 8017a46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a4a:	2206      	movs	r2, #6
 8017a4c:	f7e8 fbf0 	bl	8000230 <memchr>
 8017a50:	2800      	cmp	r0, #0
 8017a52:	d036      	beq.n	8017ac2 <_svfiprintf_r+0x1d2>
 8017a54:	4b21      	ldr	r3, [pc, #132]	@ (8017adc <_svfiprintf_r+0x1ec>)
 8017a56:	bb1b      	cbnz	r3, 8017aa0 <_svfiprintf_r+0x1b0>
 8017a58:	9b03      	ldr	r3, [sp, #12]
 8017a5a:	3307      	adds	r3, #7
 8017a5c:	f023 0307 	bic.w	r3, r3, #7
 8017a60:	3308      	adds	r3, #8
 8017a62:	9303      	str	r3, [sp, #12]
 8017a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a66:	4433      	add	r3, r6
 8017a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a6a:	e76a      	b.n	8017942 <_svfiprintf_r+0x52>
 8017a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a70:	460c      	mov	r4, r1
 8017a72:	2001      	movs	r0, #1
 8017a74:	e7a8      	b.n	80179c8 <_svfiprintf_r+0xd8>
 8017a76:	2300      	movs	r3, #0
 8017a78:	3401      	adds	r4, #1
 8017a7a:	9305      	str	r3, [sp, #20]
 8017a7c:	4619      	mov	r1, r3
 8017a7e:	f04f 0c0a 	mov.w	ip, #10
 8017a82:	4620      	mov	r0, r4
 8017a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a88:	3a30      	subs	r2, #48	@ 0x30
 8017a8a:	2a09      	cmp	r2, #9
 8017a8c:	d903      	bls.n	8017a96 <_svfiprintf_r+0x1a6>
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d0c6      	beq.n	8017a20 <_svfiprintf_r+0x130>
 8017a92:	9105      	str	r1, [sp, #20]
 8017a94:	e7c4      	b.n	8017a20 <_svfiprintf_r+0x130>
 8017a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a9a:	4604      	mov	r4, r0
 8017a9c:	2301      	movs	r3, #1
 8017a9e:	e7f0      	b.n	8017a82 <_svfiprintf_r+0x192>
 8017aa0:	ab03      	add	r3, sp, #12
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	462a      	mov	r2, r5
 8017aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8017ae0 <_svfiprintf_r+0x1f0>)
 8017aa8:	a904      	add	r1, sp, #16
 8017aaa:	4638      	mov	r0, r7
 8017aac:	f3af 8000 	nop.w
 8017ab0:	1c42      	adds	r2, r0, #1
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	d1d6      	bne.n	8017a64 <_svfiprintf_r+0x174>
 8017ab6:	89ab      	ldrh	r3, [r5, #12]
 8017ab8:	065b      	lsls	r3, r3, #25
 8017aba:	f53f af2d 	bmi.w	8017918 <_svfiprintf_r+0x28>
 8017abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ac0:	e72c      	b.n	801791c <_svfiprintf_r+0x2c>
 8017ac2:	ab03      	add	r3, sp, #12
 8017ac4:	9300      	str	r3, [sp, #0]
 8017ac6:	462a      	mov	r2, r5
 8017ac8:	4b05      	ldr	r3, [pc, #20]	@ (8017ae0 <_svfiprintf_r+0x1f0>)
 8017aca:	a904      	add	r1, sp, #16
 8017acc:	4638      	mov	r0, r7
 8017ace:	f000 f879 	bl	8017bc4 <_printf_i>
 8017ad2:	e7ed      	b.n	8017ab0 <_svfiprintf_r+0x1c0>
 8017ad4:	080194a7 	.word	0x080194a7
 8017ad8:	080194b1 	.word	0x080194b1
 8017adc:	00000000 	.word	0x00000000
 8017ae0:	08017839 	.word	0x08017839
 8017ae4:	080194ad 	.word	0x080194ad

08017ae8 <_printf_common>:
 8017ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017aec:	4616      	mov	r6, r2
 8017aee:	4698      	mov	r8, r3
 8017af0:	688a      	ldr	r2, [r1, #8]
 8017af2:	690b      	ldr	r3, [r1, #16]
 8017af4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017af8:	4293      	cmp	r3, r2
 8017afa:	bfb8      	it	lt
 8017afc:	4613      	movlt	r3, r2
 8017afe:	6033      	str	r3, [r6, #0]
 8017b00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017b04:	4607      	mov	r7, r0
 8017b06:	460c      	mov	r4, r1
 8017b08:	b10a      	cbz	r2, 8017b0e <_printf_common+0x26>
 8017b0a:	3301      	adds	r3, #1
 8017b0c:	6033      	str	r3, [r6, #0]
 8017b0e:	6823      	ldr	r3, [r4, #0]
 8017b10:	0699      	lsls	r1, r3, #26
 8017b12:	bf42      	ittt	mi
 8017b14:	6833      	ldrmi	r3, [r6, #0]
 8017b16:	3302      	addmi	r3, #2
 8017b18:	6033      	strmi	r3, [r6, #0]
 8017b1a:	6825      	ldr	r5, [r4, #0]
 8017b1c:	f015 0506 	ands.w	r5, r5, #6
 8017b20:	d106      	bne.n	8017b30 <_printf_common+0x48>
 8017b22:	f104 0a19 	add.w	sl, r4, #25
 8017b26:	68e3      	ldr	r3, [r4, #12]
 8017b28:	6832      	ldr	r2, [r6, #0]
 8017b2a:	1a9b      	subs	r3, r3, r2
 8017b2c:	42ab      	cmp	r3, r5
 8017b2e:	dc26      	bgt.n	8017b7e <_printf_common+0x96>
 8017b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017b34:	6822      	ldr	r2, [r4, #0]
 8017b36:	3b00      	subs	r3, #0
 8017b38:	bf18      	it	ne
 8017b3a:	2301      	movne	r3, #1
 8017b3c:	0692      	lsls	r2, r2, #26
 8017b3e:	d42b      	bmi.n	8017b98 <_printf_common+0xb0>
 8017b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017b44:	4641      	mov	r1, r8
 8017b46:	4638      	mov	r0, r7
 8017b48:	47c8      	blx	r9
 8017b4a:	3001      	adds	r0, #1
 8017b4c:	d01e      	beq.n	8017b8c <_printf_common+0xa4>
 8017b4e:	6823      	ldr	r3, [r4, #0]
 8017b50:	6922      	ldr	r2, [r4, #16]
 8017b52:	f003 0306 	and.w	r3, r3, #6
 8017b56:	2b04      	cmp	r3, #4
 8017b58:	bf02      	ittt	eq
 8017b5a:	68e5      	ldreq	r5, [r4, #12]
 8017b5c:	6833      	ldreq	r3, [r6, #0]
 8017b5e:	1aed      	subeq	r5, r5, r3
 8017b60:	68a3      	ldr	r3, [r4, #8]
 8017b62:	bf0c      	ite	eq
 8017b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b68:	2500      	movne	r5, #0
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	bfc4      	itt	gt
 8017b6e:	1a9b      	subgt	r3, r3, r2
 8017b70:	18ed      	addgt	r5, r5, r3
 8017b72:	2600      	movs	r6, #0
 8017b74:	341a      	adds	r4, #26
 8017b76:	42b5      	cmp	r5, r6
 8017b78:	d11a      	bne.n	8017bb0 <_printf_common+0xc8>
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	e008      	b.n	8017b90 <_printf_common+0xa8>
 8017b7e:	2301      	movs	r3, #1
 8017b80:	4652      	mov	r2, sl
 8017b82:	4641      	mov	r1, r8
 8017b84:	4638      	mov	r0, r7
 8017b86:	47c8      	blx	r9
 8017b88:	3001      	adds	r0, #1
 8017b8a:	d103      	bne.n	8017b94 <_printf_common+0xac>
 8017b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b94:	3501      	adds	r5, #1
 8017b96:	e7c6      	b.n	8017b26 <_printf_common+0x3e>
 8017b98:	18e1      	adds	r1, r4, r3
 8017b9a:	1c5a      	adds	r2, r3, #1
 8017b9c:	2030      	movs	r0, #48	@ 0x30
 8017b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017ba2:	4422      	add	r2, r4
 8017ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017bac:	3302      	adds	r3, #2
 8017bae:	e7c7      	b.n	8017b40 <_printf_common+0x58>
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	4622      	mov	r2, r4
 8017bb4:	4641      	mov	r1, r8
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	47c8      	blx	r9
 8017bba:	3001      	adds	r0, #1
 8017bbc:	d0e6      	beq.n	8017b8c <_printf_common+0xa4>
 8017bbe:	3601      	adds	r6, #1
 8017bc0:	e7d9      	b.n	8017b76 <_printf_common+0x8e>
	...

08017bc4 <_printf_i>:
 8017bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bc8:	7e0f      	ldrb	r7, [r1, #24]
 8017bca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017bcc:	2f78      	cmp	r7, #120	@ 0x78
 8017bce:	4691      	mov	r9, r2
 8017bd0:	4680      	mov	r8, r0
 8017bd2:	460c      	mov	r4, r1
 8017bd4:	469a      	mov	sl, r3
 8017bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017bda:	d807      	bhi.n	8017bec <_printf_i+0x28>
 8017bdc:	2f62      	cmp	r7, #98	@ 0x62
 8017bde:	d80a      	bhi.n	8017bf6 <_printf_i+0x32>
 8017be0:	2f00      	cmp	r7, #0
 8017be2:	f000 80d1 	beq.w	8017d88 <_printf_i+0x1c4>
 8017be6:	2f58      	cmp	r7, #88	@ 0x58
 8017be8:	f000 80b8 	beq.w	8017d5c <_printf_i+0x198>
 8017bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017bf4:	e03a      	b.n	8017c6c <_printf_i+0xa8>
 8017bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017bfa:	2b15      	cmp	r3, #21
 8017bfc:	d8f6      	bhi.n	8017bec <_printf_i+0x28>
 8017bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8017c04 <_printf_i+0x40>)
 8017c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017c04:	08017c5d 	.word	0x08017c5d
 8017c08:	08017c71 	.word	0x08017c71
 8017c0c:	08017bed 	.word	0x08017bed
 8017c10:	08017bed 	.word	0x08017bed
 8017c14:	08017bed 	.word	0x08017bed
 8017c18:	08017bed 	.word	0x08017bed
 8017c1c:	08017c71 	.word	0x08017c71
 8017c20:	08017bed 	.word	0x08017bed
 8017c24:	08017bed 	.word	0x08017bed
 8017c28:	08017bed 	.word	0x08017bed
 8017c2c:	08017bed 	.word	0x08017bed
 8017c30:	08017d6f 	.word	0x08017d6f
 8017c34:	08017c9b 	.word	0x08017c9b
 8017c38:	08017d29 	.word	0x08017d29
 8017c3c:	08017bed 	.word	0x08017bed
 8017c40:	08017bed 	.word	0x08017bed
 8017c44:	08017d91 	.word	0x08017d91
 8017c48:	08017bed 	.word	0x08017bed
 8017c4c:	08017c9b 	.word	0x08017c9b
 8017c50:	08017bed 	.word	0x08017bed
 8017c54:	08017bed 	.word	0x08017bed
 8017c58:	08017d31 	.word	0x08017d31
 8017c5c:	6833      	ldr	r3, [r6, #0]
 8017c5e:	1d1a      	adds	r2, r3, #4
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	6032      	str	r2, [r6, #0]
 8017c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	e09c      	b.n	8017daa <_printf_i+0x1e6>
 8017c70:	6833      	ldr	r3, [r6, #0]
 8017c72:	6820      	ldr	r0, [r4, #0]
 8017c74:	1d19      	adds	r1, r3, #4
 8017c76:	6031      	str	r1, [r6, #0]
 8017c78:	0606      	lsls	r6, r0, #24
 8017c7a:	d501      	bpl.n	8017c80 <_printf_i+0xbc>
 8017c7c:	681d      	ldr	r5, [r3, #0]
 8017c7e:	e003      	b.n	8017c88 <_printf_i+0xc4>
 8017c80:	0645      	lsls	r5, r0, #25
 8017c82:	d5fb      	bpl.n	8017c7c <_printf_i+0xb8>
 8017c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017c88:	2d00      	cmp	r5, #0
 8017c8a:	da03      	bge.n	8017c94 <_printf_i+0xd0>
 8017c8c:	232d      	movs	r3, #45	@ 0x2d
 8017c8e:	426d      	negs	r5, r5
 8017c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c94:	4858      	ldr	r0, [pc, #352]	@ (8017df8 <_printf_i+0x234>)
 8017c96:	230a      	movs	r3, #10
 8017c98:	e011      	b.n	8017cbe <_printf_i+0xfa>
 8017c9a:	6821      	ldr	r1, [r4, #0]
 8017c9c:	6833      	ldr	r3, [r6, #0]
 8017c9e:	0608      	lsls	r0, r1, #24
 8017ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8017ca4:	d402      	bmi.n	8017cac <_printf_i+0xe8>
 8017ca6:	0649      	lsls	r1, r1, #25
 8017ca8:	bf48      	it	mi
 8017caa:	b2ad      	uxthmi	r5, r5
 8017cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8017cae:	4852      	ldr	r0, [pc, #328]	@ (8017df8 <_printf_i+0x234>)
 8017cb0:	6033      	str	r3, [r6, #0]
 8017cb2:	bf14      	ite	ne
 8017cb4:	230a      	movne	r3, #10
 8017cb6:	2308      	moveq	r3, #8
 8017cb8:	2100      	movs	r1, #0
 8017cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017cbe:	6866      	ldr	r6, [r4, #4]
 8017cc0:	60a6      	str	r6, [r4, #8]
 8017cc2:	2e00      	cmp	r6, #0
 8017cc4:	db05      	blt.n	8017cd2 <_printf_i+0x10e>
 8017cc6:	6821      	ldr	r1, [r4, #0]
 8017cc8:	432e      	orrs	r6, r5
 8017cca:	f021 0104 	bic.w	r1, r1, #4
 8017cce:	6021      	str	r1, [r4, #0]
 8017cd0:	d04b      	beq.n	8017d6a <_printf_i+0x1a6>
 8017cd2:	4616      	mov	r6, r2
 8017cd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8017cd8:	fb03 5711 	mls	r7, r3, r1, r5
 8017cdc:	5dc7      	ldrb	r7, [r0, r7]
 8017cde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017ce2:	462f      	mov	r7, r5
 8017ce4:	42bb      	cmp	r3, r7
 8017ce6:	460d      	mov	r5, r1
 8017ce8:	d9f4      	bls.n	8017cd4 <_printf_i+0x110>
 8017cea:	2b08      	cmp	r3, #8
 8017cec:	d10b      	bne.n	8017d06 <_printf_i+0x142>
 8017cee:	6823      	ldr	r3, [r4, #0]
 8017cf0:	07df      	lsls	r7, r3, #31
 8017cf2:	d508      	bpl.n	8017d06 <_printf_i+0x142>
 8017cf4:	6923      	ldr	r3, [r4, #16]
 8017cf6:	6861      	ldr	r1, [r4, #4]
 8017cf8:	4299      	cmp	r1, r3
 8017cfa:	bfde      	ittt	le
 8017cfc:	2330      	movle	r3, #48	@ 0x30
 8017cfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017d02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017d06:	1b92      	subs	r2, r2, r6
 8017d08:	6122      	str	r2, [r4, #16]
 8017d0a:	f8cd a000 	str.w	sl, [sp]
 8017d0e:	464b      	mov	r3, r9
 8017d10:	aa03      	add	r2, sp, #12
 8017d12:	4621      	mov	r1, r4
 8017d14:	4640      	mov	r0, r8
 8017d16:	f7ff fee7 	bl	8017ae8 <_printf_common>
 8017d1a:	3001      	adds	r0, #1
 8017d1c:	d14a      	bne.n	8017db4 <_printf_i+0x1f0>
 8017d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017d22:	b004      	add	sp, #16
 8017d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	f043 0320 	orr.w	r3, r3, #32
 8017d2e:	6023      	str	r3, [r4, #0]
 8017d30:	4832      	ldr	r0, [pc, #200]	@ (8017dfc <_printf_i+0x238>)
 8017d32:	2778      	movs	r7, #120	@ 0x78
 8017d34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017d38:	6823      	ldr	r3, [r4, #0]
 8017d3a:	6831      	ldr	r1, [r6, #0]
 8017d3c:	061f      	lsls	r7, r3, #24
 8017d3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8017d42:	d402      	bmi.n	8017d4a <_printf_i+0x186>
 8017d44:	065f      	lsls	r7, r3, #25
 8017d46:	bf48      	it	mi
 8017d48:	b2ad      	uxthmi	r5, r5
 8017d4a:	6031      	str	r1, [r6, #0]
 8017d4c:	07d9      	lsls	r1, r3, #31
 8017d4e:	bf44      	itt	mi
 8017d50:	f043 0320 	orrmi.w	r3, r3, #32
 8017d54:	6023      	strmi	r3, [r4, #0]
 8017d56:	b11d      	cbz	r5, 8017d60 <_printf_i+0x19c>
 8017d58:	2310      	movs	r3, #16
 8017d5a:	e7ad      	b.n	8017cb8 <_printf_i+0xf4>
 8017d5c:	4826      	ldr	r0, [pc, #152]	@ (8017df8 <_printf_i+0x234>)
 8017d5e:	e7e9      	b.n	8017d34 <_printf_i+0x170>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	f023 0320 	bic.w	r3, r3, #32
 8017d66:	6023      	str	r3, [r4, #0]
 8017d68:	e7f6      	b.n	8017d58 <_printf_i+0x194>
 8017d6a:	4616      	mov	r6, r2
 8017d6c:	e7bd      	b.n	8017cea <_printf_i+0x126>
 8017d6e:	6833      	ldr	r3, [r6, #0]
 8017d70:	6825      	ldr	r5, [r4, #0]
 8017d72:	6961      	ldr	r1, [r4, #20]
 8017d74:	1d18      	adds	r0, r3, #4
 8017d76:	6030      	str	r0, [r6, #0]
 8017d78:	062e      	lsls	r6, r5, #24
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	d501      	bpl.n	8017d82 <_printf_i+0x1be>
 8017d7e:	6019      	str	r1, [r3, #0]
 8017d80:	e002      	b.n	8017d88 <_printf_i+0x1c4>
 8017d82:	0668      	lsls	r0, r5, #25
 8017d84:	d5fb      	bpl.n	8017d7e <_printf_i+0x1ba>
 8017d86:	8019      	strh	r1, [r3, #0]
 8017d88:	2300      	movs	r3, #0
 8017d8a:	6123      	str	r3, [r4, #16]
 8017d8c:	4616      	mov	r6, r2
 8017d8e:	e7bc      	b.n	8017d0a <_printf_i+0x146>
 8017d90:	6833      	ldr	r3, [r6, #0]
 8017d92:	1d1a      	adds	r2, r3, #4
 8017d94:	6032      	str	r2, [r6, #0]
 8017d96:	681e      	ldr	r6, [r3, #0]
 8017d98:	6862      	ldr	r2, [r4, #4]
 8017d9a:	2100      	movs	r1, #0
 8017d9c:	4630      	mov	r0, r6
 8017d9e:	f7e8 fa47 	bl	8000230 <memchr>
 8017da2:	b108      	cbz	r0, 8017da8 <_printf_i+0x1e4>
 8017da4:	1b80      	subs	r0, r0, r6
 8017da6:	6060      	str	r0, [r4, #4]
 8017da8:	6863      	ldr	r3, [r4, #4]
 8017daa:	6123      	str	r3, [r4, #16]
 8017dac:	2300      	movs	r3, #0
 8017dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017db2:	e7aa      	b.n	8017d0a <_printf_i+0x146>
 8017db4:	6923      	ldr	r3, [r4, #16]
 8017db6:	4632      	mov	r2, r6
 8017db8:	4649      	mov	r1, r9
 8017dba:	4640      	mov	r0, r8
 8017dbc:	47d0      	blx	sl
 8017dbe:	3001      	adds	r0, #1
 8017dc0:	d0ad      	beq.n	8017d1e <_printf_i+0x15a>
 8017dc2:	6823      	ldr	r3, [r4, #0]
 8017dc4:	079b      	lsls	r3, r3, #30
 8017dc6:	d413      	bmi.n	8017df0 <_printf_i+0x22c>
 8017dc8:	68e0      	ldr	r0, [r4, #12]
 8017dca:	9b03      	ldr	r3, [sp, #12]
 8017dcc:	4298      	cmp	r0, r3
 8017dce:	bfb8      	it	lt
 8017dd0:	4618      	movlt	r0, r3
 8017dd2:	e7a6      	b.n	8017d22 <_printf_i+0x15e>
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	4632      	mov	r2, r6
 8017dd8:	4649      	mov	r1, r9
 8017dda:	4640      	mov	r0, r8
 8017ddc:	47d0      	blx	sl
 8017dde:	3001      	adds	r0, #1
 8017de0:	d09d      	beq.n	8017d1e <_printf_i+0x15a>
 8017de2:	3501      	adds	r5, #1
 8017de4:	68e3      	ldr	r3, [r4, #12]
 8017de6:	9903      	ldr	r1, [sp, #12]
 8017de8:	1a5b      	subs	r3, r3, r1
 8017dea:	42ab      	cmp	r3, r5
 8017dec:	dcf2      	bgt.n	8017dd4 <_printf_i+0x210>
 8017dee:	e7eb      	b.n	8017dc8 <_printf_i+0x204>
 8017df0:	2500      	movs	r5, #0
 8017df2:	f104 0619 	add.w	r6, r4, #25
 8017df6:	e7f5      	b.n	8017de4 <_printf_i+0x220>
 8017df8:	080194b8 	.word	0x080194b8
 8017dfc:	080194c9 	.word	0x080194c9

08017e00 <__sflush_r>:
 8017e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e08:	0716      	lsls	r6, r2, #28
 8017e0a:	4605      	mov	r5, r0
 8017e0c:	460c      	mov	r4, r1
 8017e0e:	d454      	bmi.n	8017eba <__sflush_r+0xba>
 8017e10:	684b      	ldr	r3, [r1, #4]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	dc02      	bgt.n	8017e1c <__sflush_r+0x1c>
 8017e16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	dd48      	ble.n	8017eae <__sflush_r+0xae>
 8017e1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017e1e:	2e00      	cmp	r6, #0
 8017e20:	d045      	beq.n	8017eae <__sflush_r+0xae>
 8017e22:	2300      	movs	r3, #0
 8017e24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017e28:	682f      	ldr	r7, [r5, #0]
 8017e2a:	6a21      	ldr	r1, [r4, #32]
 8017e2c:	602b      	str	r3, [r5, #0]
 8017e2e:	d030      	beq.n	8017e92 <__sflush_r+0x92>
 8017e30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017e32:	89a3      	ldrh	r3, [r4, #12]
 8017e34:	0759      	lsls	r1, r3, #29
 8017e36:	d505      	bpl.n	8017e44 <__sflush_r+0x44>
 8017e38:	6863      	ldr	r3, [r4, #4]
 8017e3a:	1ad2      	subs	r2, r2, r3
 8017e3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017e3e:	b10b      	cbz	r3, 8017e44 <__sflush_r+0x44>
 8017e40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017e42:	1ad2      	subs	r2, r2, r3
 8017e44:	2300      	movs	r3, #0
 8017e46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017e48:	6a21      	ldr	r1, [r4, #32]
 8017e4a:	4628      	mov	r0, r5
 8017e4c:	47b0      	blx	r6
 8017e4e:	1c43      	adds	r3, r0, #1
 8017e50:	89a3      	ldrh	r3, [r4, #12]
 8017e52:	d106      	bne.n	8017e62 <__sflush_r+0x62>
 8017e54:	6829      	ldr	r1, [r5, #0]
 8017e56:	291d      	cmp	r1, #29
 8017e58:	d82b      	bhi.n	8017eb2 <__sflush_r+0xb2>
 8017e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8017f04 <__sflush_r+0x104>)
 8017e5c:	40ca      	lsrs	r2, r1
 8017e5e:	07d6      	lsls	r6, r2, #31
 8017e60:	d527      	bpl.n	8017eb2 <__sflush_r+0xb2>
 8017e62:	2200      	movs	r2, #0
 8017e64:	6062      	str	r2, [r4, #4]
 8017e66:	04d9      	lsls	r1, r3, #19
 8017e68:	6922      	ldr	r2, [r4, #16]
 8017e6a:	6022      	str	r2, [r4, #0]
 8017e6c:	d504      	bpl.n	8017e78 <__sflush_r+0x78>
 8017e6e:	1c42      	adds	r2, r0, #1
 8017e70:	d101      	bne.n	8017e76 <__sflush_r+0x76>
 8017e72:	682b      	ldr	r3, [r5, #0]
 8017e74:	b903      	cbnz	r3, 8017e78 <__sflush_r+0x78>
 8017e76:	6560      	str	r0, [r4, #84]	@ 0x54
 8017e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017e7a:	602f      	str	r7, [r5, #0]
 8017e7c:	b1b9      	cbz	r1, 8017eae <__sflush_r+0xae>
 8017e7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017e82:	4299      	cmp	r1, r3
 8017e84:	d002      	beq.n	8017e8c <__sflush_r+0x8c>
 8017e86:	4628      	mov	r0, r5
 8017e88:	f7ff fc84 	bl	8017794 <_free_r>
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017e90:	e00d      	b.n	8017eae <__sflush_r+0xae>
 8017e92:	2301      	movs	r3, #1
 8017e94:	4628      	mov	r0, r5
 8017e96:	47b0      	blx	r6
 8017e98:	4602      	mov	r2, r0
 8017e9a:	1c50      	adds	r0, r2, #1
 8017e9c:	d1c9      	bne.n	8017e32 <__sflush_r+0x32>
 8017e9e:	682b      	ldr	r3, [r5, #0]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d0c6      	beq.n	8017e32 <__sflush_r+0x32>
 8017ea4:	2b1d      	cmp	r3, #29
 8017ea6:	d001      	beq.n	8017eac <__sflush_r+0xac>
 8017ea8:	2b16      	cmp	r3, #22
 8017eaa:	d11e      	bne.n	8017eea <__sflush_r+0xea>
 8017eac:	602f      	str	r7, [r5, #0]
 8017eae:	2000      	movs	r0, #0
 8017eb0:	e022      	b.n	8017ef8 <__sflush_r+0xf8>
 8017eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017eb6:	b21b      	sxth	r3, r3
 8017eb8:	e01b      	b.n	8017ef2 <__sflush_r+0xf2>
 8017eba:	690f      	ldr	r7, [r1, #16]
 8017ebc:	2f00      	cmp	r7, #0
 8017ebe:	d0f6      	beq.n	8017eae <__sflush_r+0xae>
 8017ec0:	0793      	lsls	r3, r2, #30
 8017ec2:	680e      	ldr	r6, [r1, #0]
 8017ec4:	bf08      	it	eq
 8017ec6:	694b      	ldreq	r3, [r1, #20]
 8017ec8:	600f      	str	r7, [r1, #0]
 8017eca:	bf18      	it	ne
 8017ecc:	2300      	movne	r3, #0
 8017ece:	eba6 0807 	sub.w	r8, r6, r7
 8017ed2:	608b      	str	r3, [r1, #8]
 8017ed4:	f1b8 0f00 	cmp.w	r8, #0
 8017ed8:	dde9      	ble.n	8017eae <__sflush_r+0xae>
 8017eda:	6a21      	ldr	r1, [r4, #32]
 8017edc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017ede:	4643      	mov	r3, r8
 8017ee0:	463a      	mov	r2, r7
 8017ee2:	4628      	mov	r0, r5
 8017ee4:	47b0      	blx	r6
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	dc08      	bgt.n	8017efc <__sflush_r+0xfc>
 8017eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ef2:	81a3      	strh	r3, [r4, #12]
 8017ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017efc:	4407      	add	r7, r0
 8017efe:	eba8 0800 	sub.w	r8, r8, r0
 8017f02:	e7e7      	b.n	8017ed4 <__sflush_r+0xd4>
 8017f04:	20400001 	.word	0x20400001

08017f08 <_fflush_r>:
 8017f08:	b538      	push	{r3, r4, r5, lr}
 8017f0a:	690b      	ldr	r3, [r1, #16]
 8017f0c:	4605      	mov	r5, r0
 8017f0e:	460c      	mov	r4, r1
 8017f10:	b913      	cbnz	r3, 8017f18 <_fflush_r+0x10>
 8017f12:	2500      	movs	r5, #0
 8017f14:	4628      	mov	r0, r5
 8017f16:	bd38      	pop	{r3, r4, r5, pc}
 8017f18:	b118      	cbz	r0, 8017f22 <_fflush_r+0x1a>
 8017f1a:	6a03      	ldr	r3, [r0, #32]
 8017f1c:	b90b      	cbnz	r3, 8017f22 <_fflush_r+0x1a>
 8017f1e:	f7ff f921 	bl	8017164 <__sinit>
 8017f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d0f3      	beq.n	8017f12 <_fflush_r+0xa>
 8017f2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017f2c:	07d0      	lsls	r0, r2, #31
 8017f2e:	d404      	bmi.n	8017f3a <_fflush_r+0x32>
 8017f30:	0599      	lsls	r1, r3, #22
 8017f32:	d402      	bmi.n	8017f3a <_fflush_r+0x32>
 8017f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017f36:	f7ff fbea 	bl	801770e <__retarget_lock_acquire_recursive>
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	4621      	mov	r1, r4
 8017f3e:	f7ff ff5f 	bl	8017e00 <__sflush_r>
 8017f42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017f44:	07da      	lsls	r2, r3, #31
 8017f46:	4605      	mov	r5, r0
 8017f48:	d4e4      	bmi.n	8017f14 <_fflush_r+0xc>
 8017f4a:	89a3      	ldrh	r3, [r4, #12]
 8017f4c:	059b      	lsls	r3, r3, #22
 8017f4e:	d4e1      	bmi.n	8017f14 <_fflush_r+0xc>
 8017f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017f52:	f7ff fbdd 	bl	8017710 <__retarget_lock_release_recursive>
 8017f56:	e7dd      	b.n	8017f14 <_fflush_r+0xc>

08017f58 <fiprintf>:
 8017f58:	b40e      	push	{r1, r2, r3}
 8017f5a:	b503      	push	{r0, r1, lr}
 8017f5c:	4601      	mov	r1, r0
 8017f5e:	ab03      	add	r3, sp, #12
 8017f60:	4805      	ldr	r0, [pc, #20]	@ (8017f78 <fiprintf+0x20>)
 8017f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f66:	6800      	ldr	r0, [r0, #0]
 8017f68:	9301      	str	r3, [sp, #4]
 8017f6a:	f000 f8bb 	bl	80180e4 <_vfiprintf_r>
 8017f6e:	b002      	add	sp, #8
 8017f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f74:	b003      	add	sp, #12
 8017f76:	4770      	bx	lr
 8017f78:	20000e88 	.word	0x20000e88

08017f7c <__swhatbuf_r>:
 8017f7c:	b570      	push	{r4, r5, r6, lr}
 8017f7e:	460c      	mov	r4, r1
 8017f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f84:	2900      	cmp	r1, #0
 8017f86:	b096      	sub	sp, #88	@ 0x58
 8017f88:	4615      	mov	r5, r2
 8017f8a:	461e      	mov	r6, r3
 8017f8c:	da0d      	bge.n	8017faa <__swhatbuf_r+0x2e>
 8017f8e:	89a3      	ldrh	r3, [r4, #12]
 8017f90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017f94:	f04f 0100 	mov.w	r1, #0
 8017f98:	bf14      	ite	ne
 8017f9a:	2340      	movne	r3, #64	@ 0x40
 8017f9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	6031      	str	r1, [r6, #0]
 8017fa4:	602b      	str	r3, [r5, #0]
 8017fa6:	b016      	add	sp, #88	@ 0x58
 8017fa8:	bd70      	pop	{r4, r5, r6, pc}
 8017faa:	466a      	mov	r2, sp
 8017fac:	f000 f848 	bl	8018040 <_fstat_r>
 8017fb0:	2800      	cmp	r0, #0
 8017fb2:	dbec      	blt.n	8017f8e <__swhatbuf_r+0x12>
 8017fb4:	9901      	ldr	r1, [sp, #4]
 8017fb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017fba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017fbe:	4259      	negs	r1, r3
 8017fc0:	4159      	adcs	r1, r3
 8017fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017fc6:	e7eb      	b.n	8017fa0 <__swhatbuf_r+0x24>

08017fc8 <__smakebuf_r>:
 8017fc8:	898b      	ldrh	r3, [r1, #12]
 8017fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fcc:	079d      	lsls	r5, r3, #30
 8017fce:	4606      	mov	r6, r0
 8017fd0:	460c      	mov	r4, r1
 8017fd2:	d507      	bpl.n	8017fe4 <__smakebuf_r+0x1c>
 8017fd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017fd8:	6023      	str	r3, [r4, #0]
 8017fda:	6123      	str	r3, [r4, #16]
 8017fdc:	2301      	movs	r3, #1
 8017fde:	6163      	str	r3, [r4, #20]
 8017fe0:	b003      	add	sp, #12
 8017fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fe4:	ab01      	add	r3, sp, #4
 8017fe6:	466a      	mov	r2, sp
 8017fe8:	f7ff ffc8 	bl	8017f7c <__swhatbuf_r>
 8017fec:	9f00      	ldr	r7, [sp, #0]
 8017fee:	4605      	mov	r5, r0
 8017ff0:	4639      	mov	r1, r7
 8017ff2:	4630      	mov	r0, r6
 8017ff4:	f7fe fe84 	bl	8016d00 <_malloc_r>
 8017ff8:	b948      	cbnz	r0, 801800e <__smakebuf_r+0x46>
 8017ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ffe:	059a      	lsls	r2, r3, #22
 8018000:	d4ee      	bmi.n	8017fe0 <__smakebuf_r+0x18>
 8018002:	f023 0303 	bic.w	r3, r3, #3
 8018006:	f043 0302 	orr.w	r3, r3, #2
 801800a:	81a3      	strh	r3, [r4, #12]
 801800c:	e7e2      	b.n	8017fd4 <__smakebuf_r+0xc>
 801800e:	89a3      	ldrh	r3, [r4, #12]
 8018010:	6020      	str	r0, [r4, #0]
 8018012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018016:	81a3      	strh	r3, [r4, #12]
 8018018:	9b01      	ldr	r3, [sp, #4]
 801801a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801801e:	b15b      	cbz	r3, 8018038 <__smakebuf_r+0x70>
 8018020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018024:	4630      	mov	r0, r6
 8018026:	f000 f81d 	bl	8018064 <_isatty_r>
 801802a:	b128      	cbz	r0, 8018038 <__smakebuf_r+0x70>
 801802c:	89a3      	ldrh	r3, [r4, #12]
 801802e:	f023 0303 	bic.w	r3, r3, #3
 8018032:	f043 0301 	orr.w	r3, r3, #1
 8018036:	81a3      	strh	r3, [r4, #12]
 8018038:	89a3      	ldrh	r3, [r4, #12]
 801803a:	431d      	orrs	r5, r3
 801803c:	81a5      	strh	r5, [r4, #12]
 801803e:	e7cf      	b.n	8017fe0 <__smakebuf_r+0x18>

08018040 <_fstat_r>:
 8018040:	b538      	push	{r3, r4, r5, lr}
 8018042:	4d07      	ldr	r5, [pc, #28]	@ (8018060 <_fstat_r+0x20>)
 8018044:	2300      	movs	r3, #0
 8018046:	4604      	mov	r4, r0
 8018048:	4608      	mov	r0, r1
 801804a:	4611      	mov	r1, r2
 801804c:	602b      	str	r3, [r5, #0]
 801804e:	f7ea f8a3 	bl	8002198 <_fstat>
 8018052:	1c43      	adds	r3, r0, #1
 8018054:	d102      	bne.n	801805c <_fstat_r+0x1c>
 8018056:	682b      	ldr	r3, [r5, #0]
 8018058:	b103      	cbz	r3, 801805c <_fstat_r+0x1c>
 801805a:	6023      	str	r3, [r4, #0]
 801805c:	bd38      	pop	{r3, r4, r5, pc}
 801805e:	bf00      	nop
 8018060:	2000ed24 	.word	0x2000ed24

08018064 <_isatty_r>:
 8018064:	b538      	push	{r3, r4, r5, lr}
 8018066:	4d06      	ldr	r5, [pc, #24]	@ (8018080 <_isatty_r+0x1c>)
 8018068:	2300      	movs	r3, #0
 801806a:	4604      	mov	r4, r0
 801806c:	4608      	mov	r0, r1
 801806e:	602b      	str	r3, [r5, #0]
 8018070:	f7ea f8a2 	bl	80021b8 <_isatty>
 8018074:	1c43      	adds	r3, r0, #1
 8018076:	d102      	bne.n	801807e <_isatty_r+0x1a>
 8018078:	682b      	ldr	r3, [r5, #0]
 801807a:	b103      	cbz	r3, 801807e <_isatty_r+0x1a>
 801807c:	6023      	str	r3, [r4, #0]
 801807e:	bd38      	pop	{r3, r4, r5, pc}
 8018080:	2000ed24 	.word	0x2000ed24

08018084 <abort>:
 8018084:	b508      	push	{r3, lr}
 8018086:	2006      	movs	r0, #6
 8018088:	f000 f96c 	bl	8018364 <raise>
 801808c:	2001      	movs	r0, #1
 801808e:	f7ea f833 	bl	80020f8 <_exit>

08018092 <__sfputc_r>:
 8018092:	6893      	ldr	r3, [r2, #8]
 8018094:	3b01      	subs	r3, #1
 8018096:	2b00      	cmp	r3, #0
 8018098:	b410      	push	{r4}
 801809a:	6093      	str	r3, [r2, #8]
 801809c:	da08      	bge.n	80180b0 <__sfputc_r+0x1e>
 801809e:	6994      	ldr	r4, [r2, #24]
 80180a0:	42a3      	cmp	r3, r4
 80180a2:	db01      	blt.n	80180a8 <__sfputc_r+0x16>
 80180a4:	290a      	cmp	r1, #10
 80180a6:	d103      	bne.n	80180b0 <__sfputc_r+0x1e>
 80180a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180ac:	f7ff b9a0 	b.w	80173f0 <__swbuf_r>
 80180b0:	6813      	ldr	r3, [r2, #0]
 80180b2:	1c58      	adds	r0, r3, #1
 80180b4:	6010      	str	r0, [r2, #0]
 80180b6:	7019      	strb	r1, [r3, #0]
 80180b8:	4608      	mov	r0, r1
 80180ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180be:	4770      	bx	lr

080180c0 <__sfputs_r>:
 80180c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180c2:	4606      	mov	r6, r0
 80180c4:	460f      	mov	r7, r1
 80180c6:	4614      	mov	r4, r2
 80180c8:	18d5      	adds	r5, r2, r3
 80180ca:	42ac      	cmp	r4, r5
 80180cc:	d101      	bne.n	80180d2 <__sfputs_r+0x12>
 80180ce:	2000      	movs	r0, #0
 80180d0:	e007      	b.n	80180e2 <__sfputs_r+0x22>
 80180d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180d6:	463a      	mov	r2, r7
 80180d8:	4630      	mov	r0, r6
 80180da:	f7ff ffda 	bl	8018092 <__sfputc_r>
 80180de:	1c43      	adds	r3, r0, #1
 80180e0:	d1f3      	bne.n	80180ca <__sfputs_r+0xa>
 80180e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080180e4 <_vfiprintf_r>:
 80180e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180e8:	460d      	mov	r5, r1
 80180ea:	b09d      	sub	sp, #116	@ 0x74
 80180ec:	4614      	mov	r4, r2
 80180ee:	4698      	mov	r8, r3
 80180f0:	4606      	mov	r6, r0
 80180f2:	b118      	cbz	r0, 80180fc <_vfiprintf_r+0x18>
 80180f4:	6a03      	ldr	r3, [r0, #32]
 80180f6:	b90b      	cbnz	r3, 80180fc <_vfiprintf_r+0x18>
 80180f8:	f7ff f834 	bl	8017164 <__sinit>
 80180fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80180fe:	07d9      	lsls	r1, r3, #31
 8018100:	d405      	bmi.n	801810e <_vfiprintf_r+0x2a>
 8018102:	89ab      	ldrh	r3, [r5, #12]
 8018104:	059a      	lsls	r2, r3, #22
 8018106:	d402      	bmi.n	801810e <_vfiprintf_r+0x2a>
 8018108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801810a:	f7ff fb00 	bl	801770e <__retarget_lock_acquire_recursive>
 801810e:	89ab      	ldrh	r3, [r5, #12]
 8018110:	071b      	lsls	r3, r3, #28
 8018112:	d501      	bpl.n	8018118 <_vfiprintf_r+0x34>
 8018114:	692b      	ldr	r3, [r5, #16]
 8018116:	b99b      	cbnz	r3, 8018140 <_vfiprintf_r+0x5c>
 8018118:	4629      	mov	r1, r5
 801811a:	4630      	mov	r0, r6
 801811c:	f7ff f9a6 	bl	801746c <__swsetup_r>
 8018120:	b170      	cbz	r0, 8018140 <_vfiprintf_r+0x5c>
 8018122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018124:	07dc      	lsls	r4, r3, #31
 8018126:	d504      	bpl.n	8018132 <_vfiprintf_r+0x4e>
 8018128:	f04f 30ff 	mov.w	r0, #4294967295
 801812c:	b01d      	add	sp, #116	@ 0x74
 801812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018132:	89ab      	ldrh	r3, [r5, #12]
 8018134:	0598      	lsls	r0, r3, #22
 8018136:	d4f7      	bmi.n	8018128 <_vfiprintf_r+0x44>
 8018138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801813a:	f7ff fae9 	bl	8017710 <__retarget_lock_release_recursive>
 801813e:	e7f3      	b.n	8018128 <_vfiprintf_r+0x44>
 8018140:	2300      	movs	r3, #0
 8018142:	9309      	str	r3, [sp, #36]	@ 0x24
 8018144:	2320      	movs	r3, #32
 8018146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801814a:	f8cd 800c 	str.w	r8, [sp, #12]
 801814e:	2330      	movs	r3, #48	@ 0x30
 8018150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018300 <_vfiprintf_r+0x21c>
 8018154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018158:	f04f 0901 	mov.w	r9, #1
 801815c:	4623      	mov	r3, r4
 801815e:	469a      	mov	sl, r3
 8018160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018164:	b10a      	cbz	r2, 801816a <_vfiprintf_r+0x86>
 8018166:	2a25      	cmp	r2, #37	@ 0x25
 8018168:	d1f9      	bne.n	801815e <_vfiprintf_r+0x7a>
 801816a:	ebba 0b04 	subs.w	fp, sl, r4
 801816e:	d00b      	beq.n	8018188 <_vfiprintf_r+0xa4>
 8018170:	465b      	mov	r3, fp
 8018172:	4622      	mov	r2, r4
 8018174:	4629      	mov	r1, r5
 8018176:	4630      	mov	r0, r6
 8018178:	f7ff ffa2 	bl	80180c0 <__sfputs_r>
 801817c:	3001      	adds	r0, #1
 801817e:	f000 80a7 	beq.w	80182d0 <_vfiprintf_r+0x1ec>
 8018182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018184:	445a      	add	r2, fp
 8018186:	9209      	str	r2, [sp, #36]	@ 0x24
 8018188:	f89a 3000 	ldrb.w	r3, [sl]
 801818c:	2b00      	cmp	r3, #0
 801818e:	f000 809f 	beq.w	80182d0 <_vfiprintf_r+0x1ec>
 8018192:	2300      	movs	r3, #0
 8018194:	f04f 32ff 	mov.w	r2, #4294967295
 8018198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801819c:	f10a 0a01 	add.w	sl, sl, #1
 80181a0:	9304      	str	r3, [sp, #16]
 80181a2:	9307      	str	r3, [sp, #28]
 80181a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80181a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80181aa:	4654      	mov	r4, sl
 80181ac:	2205      	movs	r2, #5
 80181ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181b2:	4853      	ldr	r0, [pc, #332]	@ (8018300 <_vfiprintf_r+0x21c>)
 80181b4:	f7e8 f83c 	bl	8000230 <memchr>
 80181b8:	9a04      	ldr	r2, [sp, #16]
 80181ba:	b9d8      	cbnz	r0, 80181f4 <_vfiprintf_r+0x110>
 80181bc:	06d1      	lsls	r1, r2, #27
 80181be:	bf44      	itt	mi
 80181c0:	2320      	movmi	r3, #32
 80181c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181c6:	0713      	lsls	r3, r2, #28
 80181c8:	bf44      	itt	mi
 80181ca:	232b      	movmi	r3, #43	@ 0x2b
 80181cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181d0:	f89a 3000 	ldrb.w	r3, [sl]
 80181d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80181d6:	d015      	beq.n	8018204 <_vfiprintf_r+0x120>
 80181d8:	9a07      	ldr	r2, [sp, #28]
 80181da:	4654      	mov	r4, sl
 80181dc:	2000      	movs	r0, #0
 80181de:	f04f 0c0a 	mov.w	ip, #10
 80181e2:	4621      	mov	r1, r4
 80181e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181e8:	3b30      	subs	r3, #48	@ 0x30
 80181ea:	2b09      	cmp	r3, #9
 80181ec:	d94b      	bls.n	8018286 <_vfiprintf_r+0x1a2>
 80181ee:	b1b0      	cbz	r0, 801821e <_vfiprintf_r+0x13a>
 80181f0:	9207      	str	r2, [sp, #28]
 80181f2:	e014      	b.n	801821e <_vfiprintf_r+0x13a>
 80181f4:	eba0 0308 	sub.w	r3, r0, r8
 80181f8:	fa09 f303 	lsl.w	r3, r9, r3
 80181fc:	4313      	orrs	r3, r2
 80181fe:	9304      	str	r3, [sp, #16]
 8018200:	46a2      	mov	sl, r4
 8018202:	e7d2      	b.n	80181aa <_vfiprintf_r+0xc6>
 8018204:	9b03      	ldr	r3, [sp, #12]
 8018206:	1d19      	adds	r1, r3, #4
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	9103      	str	r1, [sp, #12]
 801820c:	2b00      	cmp	r3, #0
 801820e:	bfbb      	ittet	lt
 8018210:	425b      	neglt	r3, r3
 8018212:	f042 0202 	orrlt.w	r2, r2, #2
 8018216:	9307      	strge	r3, [sp, #28]
 8018218:	9307      	strlt	r3, [sp, #28]
 801821a:	bfb8      	it	lt
 801821c:	9204      	strlt	r2, [sp, #16]
 801821e:	7823      	ldrb	r3, [r4, #0]
 8018220:	2b2e      	cmp	r3, #46	@ 0x2e
 8018222:	d10a      	bne.n	801823a <_vfiprintf_r+0x156>
 8018224:	7863      	ldrb	r3, [r4, #1]
 8018226:	2b2a      	cmp	r3, #42	@ 0x2a
 8018228:	d132      	bne.n	8018290 <_vfiprintf_r+0x1ac>
 801822a:	9b03      	ldr	r3, [sp, #12]
 801822c:	1d1a      	adds	r2, r3, #4
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	9203      	str	r2, [sp, #12]
 8018232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018236:	3402      	adds	r4, #2
 8018238:	9305      	str	r3, [sp, #20]
 801823a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018310 <_vfiprintf_r+0x22c>
 801823e:	7821      	ldrb	r1, [r4, #0]
 8018240:	2203      	movs	r2, #3
 8018242:	4650      	mov	r0, sl
 8018244:	f7e7 fff4 	bl	8000230 <memchr>
 8018248:	b138      	cbz	r0, 801825a <_vfiprintf_r+0x176>
 801824a:	9b04      	ldr	r3, [sp, #16]
 801824c:	eba0 000a 	sub.w	r0, r0, sl
 8018250:	2240      	movs	r2, #64	@ 0x40
 8018252:	4082      	lsls	r2, r0
 8018254:	4313      	orrs	r3, r2
 8018256:	3401      	adds	r4, #1
 8018258:	9304      	str	r3, [sp, #16]
 801825a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801825e:	4829      	ldr	r0, [pc, #164]	@ (8018304 <_vfiprintf_r+0x220>)
 8018260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018264:	2206      	movs	r2, #6
 8018266:	f7e7 ffe3 	bl	8000230 <memchr>
 801826a:	2800      	cmp	r0, #0
 801826c:	d03f      	beq.n	80182ee <_vfiprintf_r+0x20a>
 801826e:	4b26      	ldr	r3, [pc, #152]	@ (8018308 <_vfiprintf_r+0x224>)
 8018270:	bb1b      	cbnz	r3, 80182ba <_vfiprintf_r+0x1d6>
 8018272:	9b03      	ldr	r3, [sp, #12]
 8018274:	3307      	adds	r3, #7
 8018276:	f023 0307 	bic.w	r3, r3, #7
 801827a:	3308      	adds	r3, #8
 801827c:	9303      	str	r3, [sp, #12]
 801827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018280:	443b      	add	r3, r7
 8018282:	9309      	str	r3, [sp, #36]	@ 0x24
 8018284:	e76a      	b.n	801815c <_vfiprintf_r+0x78>
 8018286:	fb0c 3202 	mla	r2, ip, r2, r3
 801828a:	460c      	mov	r4, r1
 801828c:	2001      	movs	r0, #1
 801828e:	e7a8      	b.n	80181e2 <_vfiprintf_r+0xfe>
 8018290:	2300      	movs	r3, #0
 8018292:	3401      	adds	r4, #1
 8018294:	9305      	str	r3, [sp, #20]
 8018296:	4619      	mov	r1, r3
 8018298:	f04f 0c0a 	mov.w	ip, #10
 801829c:	4620      	mov	r0, r4
 801829e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182a2:	3a30      	subs	r2, #48	@ 0x30
 80182a4:	2a09      	cmp	r2, #9
 80182a6:	d903      	bls.n	80182b0 <_vfiprintf_r+0x1cc>
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d0c6      	beq.n	801823a <_vfiprintf_r+0x156>
 80182ac:	9105      	str	r1, [sp, #20]
 80182ae:	e7c4      	b.n	801823a <_vfiprintf_r+0x156>
 80182b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80182b4:	4604      	mov	r4, r0
 80182b6:	2301      	movs	r3, #1
 80182b8:	e7f0      	b.n	801829c <_vfiprintf_r+0x1b8>
 80182ba:	ab03      	add	r3, sp, #12
 80182bc:	9300      	str	r3, [sp, #0]
 80182be:	462a      	mov	r2, r5
 80182c0:	4b12      	ldr	r3, [pc, #72]	@ (801830c <_vfiprintf_r+0x228>)
 80182c2:	a904      	add	r1, sp, #16
 80182c4:	4630      	mov	r0, r6
 80182c6:	f3af 8000 	nop.w
 80182ca:	4607      	mov	r7, r0
 80182cc:	1c78      	adds	r0, r7, #1
 80182ce:	d1d6      	bne.n	801827e <_vfiprintf_r+0x19a>
 80182d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80182d2:	07d9      	lsls	r1, r3, #31
 80182d4:	d405      	bmi.n	80182e2 <_vfiprintf_r+0x1fe>
 80182d6:	89ab      	ldrh	r3, [r5, #12]
 80182d8:	059a      	lsls	r2, r3, #22
 80182da:	d402      	bmi.n	80182e2 <_vfiprintf_r+0x1fe>
 80182dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80182de:	f7ff fa17 	bl	8017710 <__retarget_lock_release_recursive>
 80182e2:	89ab      	ldrh	r3, [r5, #12]
 80182e4:	065b      	lsls	r3, r3, #25
 80182e6:	f53f af1f 	bmi.w	8018128 <_vfiprintf_r+0x44>
 80182ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80182ec:	e71e      	b.n	801812c <_vfiprintf_r+0x48>
 80182ee:	ab03      	add	r3, sp, #12
 80182f0:	9300      	str	r3, [sp, #0]
 80182f2:	462a      	mov	r2, r5
 80182f4:	4b05      	ldr	r3, [pc, #20]	@ (801830c <_vfiprintf_r+0x228>)
 80182f6:	a904      	add	r1, sp, #16
 80182f8:	4630      	mov	r0, r6
 80182fa:	f7ff fc63 	bl	8017bc4 <_printf_i>
 80182fe:	e7e4      	b.n	80182ca <_vfiprintf_r+0x1e6>
 8018300:	080194a7 	.word	0x080194a7
 8018304:	080194b1 	.word	0x080194b1
 8018308:	00000000 	.word	0x00000000
 801830c:	080180c1 	.word	0x080180c1
 8018310:	080194ad 	.word	0x080194ad

08018314 <_raise_r>:
 8018314:	291f      	cmp	r1, #31
 8018316:	b538      	push	{r3, r4, r5, lr}
 8018318:	4605      	mov	r5, r0
 801831a:	460c      	mov	r4, r1
 801831c:	d904      	bls.n	8018328 <_raise_r+0x14>
 801831e:	2316      	movs	r3, #22
 8018320:	6003      	str	r3, [r0, #0]
 8018322:	f04f 30ff 	mov.w	r0, #4294967295
 8018326:	bd38      	pop	{r3, r4, r5, pc}
 8018328:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801832a:	b112      	cbz	r2, 8018332 <_raise_r+0x1e>
 801832c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018330:	b94b      	cbnz	r3, 8018346 <_raise_r+0x32>
 8018332:	4628      	mov	r0, r5
 8018334:	f000 f830 	bl	8018398 <_getpid_r>
 8018338:	4622      	mov	r2, r4
 801833a:	4601      	mov	r1, r0
 801833c:	4628      	mov	r0, r5
 801833e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018342:	f000 b817 	b.w	8018374 <_kill_r>
 8018346:	2b01      	cmp	r3, #1
 8018348:	d00a      	beq.n	8018360 <_raise_r+0x4c>
 801834a:	1c59      	adds	r1, r3, #1
 801834c:	d103      	bne.n	8018356 <_raise_r+0x42>
 801834e:	2316      	movs	r3, #22
 8018350:	6003      	str	r3, [r0, #0]
 8018352:	2001      	movs	r0, #1
 8018354:	e7e7      	b.n	8018326 <_raise_r+0x12>
 8018356:	2100      	movs	r1, #0
 8018358:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801835c:	4620      	mov	r0, r4
 801835e:	4798      	blx	r3
 8018360:	2000      	movs	r0, #0
 8018362:	e7e0      	b.n	8018326 <_raise_r+0x12>

08018364 <raise>:
 8018364:	4b02      	ldr	r3, [pc, #8]	@ (8018370 <raise+0xc>)
 8018366:	4601      	mov	r1, r0
 8018368:	6818      	ldr	r0, [r3, #0]
 801836a:	f7ff bfd3 	b.w	8018314 <_raise_r>
 801836e:	bf00      	nop
 8018370:	20000e88 	.word	0x20000e88

08018374 <_kill_r>:
 8018374:	b538      	push	{r3, r4, r5, lr}
 8018376:	4d07      	ldr	r5, [pc, #28]	@ (8018394 <_kill_r+0x20>)
 8018378:	2300      	movs	r3, #0
 801837a:	4604      	mov	r4, r0
 801837c:	4608      	mov	r0, r1
 801837e:	4611      	mov	r1, r2
 8018380:	602b      	str	r3, [r5, #0]
 8018382:	f7e9 fea9 	bl	80020d8 <_kill>
 8018386:	1c43      	adds	r3, r0, #1
 8018388:	d102      	bne.n	8018390 <_kill_r+0x1c>
 801838a:	682b      	ldr	r3, [r5, #0]
 801838c:	b103      	cbz	r3, 8018390 <_kill_r+0x1c>
 801838e:	6023      	str	r3, [r4, #0]
 8018390:	bd38      	pop	{r3, r4, r5, pc}
 8018392:	bf00      	nop
 8018394:	2000ed24 	.word	0x2000ed24

08018398 <_getpid_r>:
 8018398:	f7e9 be96 	b.w	80020c8 <_getpid>

0801839c <_init>:
 801839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801839e:	bf00      	nop
 80183a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183a2:	bc08      	pop	{r3}
 80183a4:	469e      	mov	lr, r3
 80183a6:	4770      	bx	lr

080183a8 <_fini>:
 80183a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183aa:	bf00      	nop
 80183ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183ae:	bc08      	pop	{r3}
 80183b0:	469e      	mov	lr, r3
 80183b2:	4770      	bx	lr
