
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018694  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  08018868  08018868  00019868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a8c  08019a8c  0001bf00  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019a8c  08019a8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a94  08019a94  0001bf00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019a94  08019a94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019a9c  08019a9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000f00  20000000  08019aa0  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de44  20000f00  0801a9a0  0001bf00  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ed44  0801a9a0  0001cd44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001bf00  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c851  00000000  00000000  0001bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fc0  00000000  00000000  00038781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  0003c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011eb  00000000  00000000  0003de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027985  00000000  00000000  0003f05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbce  00000000  00000000  000669e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec37f  00000000  00000000  000845ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  0017092d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f10  00000000  00000000  00170998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001778a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000f00 	.word	0x20000f00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801884c 	.word	0x0801884c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000f04 	.word	0x20000f04
 800020c:	0801884c 	.word	0x0801884c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9d3 	b.w	80006a8 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f007 f93e 	bl	8007938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f986 	bl	80009d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b58      	ldr	r3, [pc, #352]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8090 	bne.w	80007f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01e      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d015      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00b      	beq.n	800071a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000706:	f383 8811 	msr	BASEPRI, r3
 800070a:	f3bf 8f6f 	isb	sy
 800070e:	f3bf 8f4f 	dsb	sy
 8000712:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d06a      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
 8000720:	4b43      	ldr	r3, [pc, #268]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d865      	bhi.n	80007f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072a:	4b42      	ldr	r3, [pc, #264]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 800072c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800072e:	4b41      	ldr	r3, [pc, #260]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000734:	e004      	b.n	8000740 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d903      	bls.n	8000752 <pvPortMallocMicroROS+0xa6>
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f1      	bne.n	8000736 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000758:	429a      	cmp	r2, r3
 800075a:	d04c      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2208      	movs	r2, #8
 8000762:	4413      	add	r3, r2
 8000764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1ad2      	subs	r2, r2, r3
 8000776:	2308      	movs	r3, #8
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	429a      	cmp	r2, r3
 800077c:	d920      	bls.n	80007c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800077e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	613b      	str	r3, [r7, #16]
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ba:	69b8      	ldr	r0, [r7, #24]
 80007bc:	f000 f96c 	bl	8000a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4a19      	ldr	r2, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d203      	bcs.n	80007e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	431a      	orrs	r2, r3
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f6:	f007 f8ad 	bl	8007954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00b      	beq.n	800081c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800081c:	69fb      	ldr	r3, [r7, #28]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20004b24 	.word	0x20004b24
 800082c:	20004b30 	.word	0x20004b30
 8000830:	20004b28 	.word	0x20004b28
 8000834:	20004b1c 	.word	0x20004b1c
 8000838:	20004b2c 	.word	0x20004b2c

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04a      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10b      	bne.n	8000882 <vPortFreeMicroROS+0x46>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	f383 8811 	msr	BASEPRI, r3
 8000872:	f3bf 8f6f 	isb	sy
 8000876:	f3bf 8f4f 	dsb	sy
 800087a:	60fb      	str	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800088a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	60bb      	str	r3, [r7, #8]
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	e7fd      	b.n	800089e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d019      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d115      	bne.n	80008e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	401a      	ands	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008c8:	f007 f836 	bl	8007938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a06      	ldr	r2, [pc, #24]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008da:	6938      	ldr	r0, [r7, #16]
 80008dc:	f000 f8dc 	bl	8000a98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e0:	f007 f838 	bl	8007954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20004b30 	.word	0x20004b30
 80008f0:	20004b28 	.word	0x20004b28

080008f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000900:	2308      	movs	r3, #8
 8000902:	425b      	negs	r3, r3
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4413      	add	r3, r2
 8000908:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <getBlockSize+0x38>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	43db      	mvns	r3, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	return count;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20004b30 	.word	0x20004b30

08000930 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800093a:	f006 fffd 	bl	8007938 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f7ff feb4 	bl	80006ac <pvPortMallocMicroROS>
 8000944:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d017      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d014      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffce 	bl	80008f4 <getBlockSize>
 8000958:	4603      	mov	r3, r0
 800095a:	2208      	movs	r2, #8
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d201      	bcs.n	800096c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68b8      	ldr	r0, [r7, #8]
 8000972:	f017 f92e 	bl	8017bd2 <memcpy>

		vPortFreeMicroROS(pv);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff60 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800097c:	f006 ffea 	bl	8007954 <xTaskResumeAll>

	return newmem;
 8000980:	68bb      	ldr	r3, [r7, #8]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000994:	f006 ffd0 	bl	8007938 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff fe82 	bl	80006ac <pvPortMallocMicroROS>
 80009a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009ae:	e004      	b.n	80009ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	613a      	str	r2, [r7, #16]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	617a      	str	r2, [r7, #20]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f5      	bne.n	80009b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009c4:	f006 ffc6 	bl	8007954 <xTaskResumeAll>
  	return mem;
 80009c8:	68fb      	ldr	r3, [r7, #12]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <prvHeapInit+0xac>)
 80009e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00c      	beq.n	8000a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3307      	adds	r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a1f      	ldr	r2, [pc, #124]	@ (8000a80 <prvHeapInit+0xac>)
 8000a04:	4413      	add	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a20:	2208      	movs	r2, #8
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	1ad2      	subs	r2, r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <prvHeapInit+0xb8>)
 8000a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <prvHeapInit+0xbc>)
 8000a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <prvHeapInit+0xc0>)
 8000a6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	20000f1c 	.word	0x20000f1c
 8000a84:	20004b1c 	.word	0x20004b1c
 8000a88:	20004b24 	.word	0x20004b24
 8000a8c:	20004b2c 	.word	0x20004b2c
 8000a90:	20004b28 	.word	0x20004b28
 8000a94:	20004b30 	.word	0x20004b30

08000a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <prvInsertBlockIntoFreeList+0xac>)
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	e002      	b.n	8000aac <prvInsertBlockIntoFreeList+0x14>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d8f7      	bhi.n	8000aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d108      	bne.n	8000ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d118      	bne.n	8000b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d00d      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e008      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e003      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d002      	beq.n	8000b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20004b1c 	.word	0x20004b1c
 8000b48:	20004b24 	.word	0x20004b24

08000b4c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b5a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b60:	4904      	ldr	r1, [pc, #16]	@ (8000b74 <cubemx_transport_open+0x28>)
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f004 fbc4 	bl	80052f0 <HAL_UART_Receive_DMA>
    return true;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20004b34 	.word	0x20004b34

08000b78 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b86:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f004 fbd6 	bl	800533a <HAL_UART_DMAStop>
    return true;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bac:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	d11c      	bne.n	8000bf4 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f004 fb18 	bl	80051f8 <HAL_UART_Transmit_DMA>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bcc:	e002      	b.n	8000bd4 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f005 fe70 	bl	80068b4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <cubemx_transport_write+0x4e>
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b20      	cmp	r3, #32
 8000be4:	d1f3      	bne.n	8000bce <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000be6:	7cfb      	ldrb	r3, [r7, #19]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <cubemx_transport_write+0x58>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	e002      	b.n	8000bf6 <cubemx_transport_write+0x5e>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bf4:	2300      	movs	r3, #0
    }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c14:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1a:	b672      	cpsid	i
}
 8000c1c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c2c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c2e:	b662      	cpsie	i
}
 8000c30:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f005 fe3b 	bl	80068b4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d103      	bne.n	8000c52 <cubemx_transport_read+0x52>
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbe3      	blt.n	8000c1a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c56:	e011      	b.n	8000c7c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	440b      	add	r3, r1
 8000c62:	4910      	ldr	r1, [pc, #64]	@ (8000ca4 <cubemx_transport_read+0xa4>)
 8000c64:	5c8a      	ldrb	r2, [r1, r2]
 8000c66:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c74:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <cubemx_transport_read+0xa0>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <cubemx_transport_read+0x9c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d003      	beq.n	8000c90 <cubemx_transport_read+0x90>
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3e3      	bcc.n	8000c58 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c90:	69bb      	ldr	r3, [r7, #24]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20005338 	.word	0x20005338
 8000ca0:	20005334 	.word	0x20005334
 8000ca4:	20004b34 	.word	0x20004b34

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f001 fbee 	bl	800248c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f824 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 fad0 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f000 faa6 	bl	8001208 <MX_DMA_Init>
  MX_TIM1_Init();
 8000cbc:	f000 f88c 	bl	8000dd8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cc0:	f000 f978 	bl	8000fb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cc4:	f000 f9ca 	bl	800105c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cc8:	f000 fa1c 	bl	8001104 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000ccc:	f000 fa72 	bl	80011b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cd0:	f000 f8da 	bl	8000e88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cd4:	f005 fd12 	bl	80066fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cd8:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <main+0x48>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <main+0x4c>)
 8000cde:	f005 fd57 	bl	8006790 <osThreadNew>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <main+0x50>)
 8000ce6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ce8:	f005 fd2c 	bl	8006744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <main+0x44>
 8000cf0:	08018900 	.word	0x08018900
 8000cf4:	080016d9 	.word	0x080016d9
 8000cf8:	200055ac 	.word	0x200055ac

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	@ 0x50
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2234      	movs	r2, #52	@ 0x34
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f016 fe86 	bl	8017a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <SystemClock_Config+0xd4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	4a29      	ldr	r2, [pc, #164]	@ (8000dd0 <SystemClock_Config+0xd4>)
 8000d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <SystemClock_Config+0xd4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <SystemClock_Config+0xd8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d48:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <SystemClock_Config+0xd8>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <SystemClock_Config+0xd8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d64:	2310      	movs	r3, #16
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d70:	2310      	movs	r3, #16
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d74:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fde8 	bl	8003960 <HAL_RCC_OscConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d96:	f000 fe09 	bl	80019ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fa56 	bl	8003268 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dc2:	f000 fdf3 	bl	80019ac <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	@ 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	@ 0x30
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2224      	movs	r2, #36	@ 0x24
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f016 fe18 	bl	8017a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000df6:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <MX_TIM1_Init+0xac>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e4c:	f003 fa08 	bl	8004260 <HAL_TIM_Encoder_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e56:	f000 fda9 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_TIM1_Init+0xa8>)
 8000e68:	f004 f8e6 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e72:	f000 fd9b 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	@ 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000533c 	.word	0x2000533c
 8000e84:	40010000 	.word	0x40010000

08000e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	@ 0x38
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8000ecc:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ece:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b36      	ldr	r3, [pc, #216]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eda:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee0:	4833      	ldr	r0, [pc, #204]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000ee2:	f002 ffdb 	bl	8003e9c <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000eec:	f000 fd5e 	bl	80019ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efa:	4619      	mov	r1, r3
 8000efc:	482c      	ldr	r0, [pc, #176]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000efe:	f003 fc95 	bl	800482c <HAL_TIM_ConfigClockSource>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f08:	f000 fd50 	bl	80019ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f0c:	4828      	ldr	r0, [pc, #160]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f0e:	f003 f885 	bl	800401c <HAL_TIM_PWM_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f18:	f000 fd48 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4821      	ldr	r0, [pc, #132]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f2c:	f004 f884 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f36:	f000 fd39 	bl	80019ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3a:	2360      	movs	r3, #96	@ 0x60
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4817      	ldr	r0, [pc, #92]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f52:	f003 fba9 	bl	80046a8 <HAL_TIM_PWM_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f5c:	f000 fd26 	bl	80019ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2204      	movs	r2, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f68:	f003 fb9e 	bl	80046a8 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f72:	f000 fd1b 	bl	80019ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f7e:	f003 fb93 	bl	80046a8 <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000f88:	f000 fd10 	bl	80019ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	220c      	movs	r2, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000f94:	f003 fb88 	bl	80046a8 <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000f9e:	f000 fd05 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fa2:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <MX_TIM2_Init+0x128>)
 8000fa4:	f000 ffa0 	bl	8001ee8 <HAL_TIM_MspPostInit>

}
 8000fa8:	bf00      	nop
 8000faa:	3738      	adds	r7, #56	@ 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20005384 	.word	0x20005384

08000fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2224      	movs	r2, #36	@ 0x24
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f016 fd2a 	bl	8017a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fd2:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <MX_TIM3_Init+0xa4>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <MX_TIM3_Init+0xa0>)
 8001022:	f003 f91d 	bl	8004260 <HAL_TIM_Encoder_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800102c:	f000 fcbe 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_TIM3_Init+0xa0>)
 800103e:	f003 fffb 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001048:	f000 fcb0 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
}
 800104c:	bf00      	nop
 800104e:	3730      	adds	r7, #48	@ 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200053cc 	.word	0x200053cc
 8001058:	40000400 	.word	0x40000400

0800105c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2224      	movs	r2, #36	@ 0x24
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f016 fcd6 	bl	8017a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_TIM4_Init+0xa0>)
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <MX_TIM4_Init+0xa4>)
 800107c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_TIM4_Init+0xa0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_TIM4_Init+0xa0>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_TIM4_Init+0xa0>)
 800108c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001090:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_TIM4_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_TIM4_Init+0xa0>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800109e:	2301      	movs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b6:	2301      	movs	r3, #1
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <MX_TIM4_Init+0xa0>)
 80010ca:	f003 f8c9 	bl	8004260 <HAL_TIM_Encoder_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 fc6a 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_TIM4_Init+0xa0>)
 80010e6:	f003 ffa7 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80010f0:	f000 fc5c 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
}
 80010f4:	bf00      	nop
 80010f6:	3730      	adds	r7, #48	@ 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20005414 	.word	0x20005414
 8001100:	40000800 	.word	0x40000800

08001104 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2224      	movs	r2, #36	@ 0x24
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f016 fc82 	bl	8017a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001122:	4a23      	ldr	r2, [pc, #140]	@ (80011b0 <MX_TIM8_Init+0xac>)
 8001124:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <MX_TIM8_Init+0xa8>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001134:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001138:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_TIM8_Init+0xa8>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800114c:	2301      	movs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001178:	f003 f872 	bl	8004260 <HAL_TIM_Encoder_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001182:	f000 fc13 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <MX_TIM8_Init+0xa8>)
 8001194:	f003 ff50 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800119e:	f000 fc05 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	@ 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000545c 	.word	0x2000545c
 80011b0:	40010400 	.word	0x40010400

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f003 ffb4 	bl	8005158 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 fbd9 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200054a4 	.word	0x200054a4
 8001204:	40004400 	.word	0x40004400

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2105      	movs	r1, #5
 800122e:	2010      	movs	r0, #16
 8001230:	f001 fa26 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001234:	2010      	movs	r0, #16
 8001236:	f001 fa3f 	bl	80026b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2105      	movs	r1, #5
 800123e:	2011      	movs	r0, #17
 8001240:	f001 fa1e 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001244:	2011      	movs	r0, #17
 8001246:	f001 fa37 	bl	80026b8 <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b49      	ldr	r3, [pc, #292]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a48      	ldr	r2, [pc, #288]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b46      	ldr	r3, [pc, #280]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a41      	ldr	r2, [pc, #260]	@ (8001398 <MX_GPIO_Init+0x140>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <MX_GPIO_Init+0x140>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a33      	ldr	r2, [pc, #204]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b31      	ldr	r3, [pc, #196]	@ (8001398 <MX_GPIO_Init+0x140>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, RL_INB_GPO_Pin|RL_INA_GPO_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2103      	movs	r1, #3
 80012e2:	482e      	ldr	r0, [pc, #184]	@ (800139c <MX_GPIO_Init+0x144>)
 80012e4:	f001 ff8c 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|LR_INA_GPO_Pin|LR_INB_GPO_Pin
 80012e8:	2200      	movs	r2, #0
 80012ea:	f640 411f 	movw	r1, #3103	@ 0xc1f
 80012ee:	482c      	ldr	r0, [pc, #176]	@ (80013a0 <MX_GPIO_Init+0x148>)
 80012f0:	f001 ff86 	bl	8003200 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UR_INA_GPO_Pin|FR_INA_GPO_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80012fa:	482a      	ldr	r0, [pc, #168]	@ (80013a4 <MX_GPIO_Init+0x14c>)
 80012fc:	f001 ff80 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UR_INB_GPO_Pin|RR_INA_GPO_Pin|UL_INA_GPO_Pin|UL_INB_GPO_Pin
 8001300:	2200      	movs	r2, #0
 8001302:	f24e 0121 	movw	r1, #57377	@ 0xe021
 8001306:	4828      	ldr	r0, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0x150>)
 8001308:	f001 ff7a 	bl	8003200 <HAL_GPIO_WritePin>
                          |FR_INB_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001312:	4823      	ldr	r0, [pc, #140]	@ (80013a0 <MX_GPIO_Init+0x148>)
 8001314:	f001 ff74 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RL_INB_GPO_Pin RL_INA_GPO_Pin */
  GPIO_InitStruct.Pin = RL_INB_GPO_Pin|RL_INA_GPO_Pin;
 8001318:	2303      	movs	r3, #3
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	481b      	ldr	r0, [pc, #108]	@ (800139c <MX_GPIO_Init+0x144>)
 8001330:	f001 fdd2 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_INA_GPO_Pin FL_INB_GPO_Pin LR_INA_GPO_Pin LR_INB_GPO_Pin
                           RR_INB_GPO_Pin RR_VDD_GPO_Pin FR_VDD_GPO_Pin RL_VDD_GPO_Pin
                           FL_VDD_GPO_Pin */
  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|LR_INA_GPO_Pin|LR_INB_GPO_Pin
 8001334:	f640 731f 	movw	r3, #3871	@ 0xf1f
 8001338:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin|RL_VDD_GPO_Pin
                          |FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_GPIO_Init+0x148>)
 800134e:	f001 fdc3 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UR_INA_GPO_Pin FR_INA_GPO_Pin */
  GPIO_InitStruct.Pin = UR_INA_GPO_Pin|FR_INA_GPO_Pin;
 8001352:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <MX_GPIO_Init+0x14c>)
 800136c:	f001 fdb4 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UR_INB_GPO_Pin RR_INA_GPO_Pin UL_INA_GPO_Pin UL_INB_GPO_Pin
                           FR_INB_GPO_Pin */
  GPIO_InitStruct.Pin = UR_INB_GPO_Pin|RR_INA_GPO_Pin|UL_INA_GPO_Pin|UL_INB_GPO_Pin
 8001370:	f24e 0321 	movw	r3, #57377	@ 0xe021
 8001374:	617b      	str	r3, [r7, #20]
                          |FR_INB_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <MX_GPIO_Init+0x150>)
 800138a:	f001 fda5 	bl	8002ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400

080013ac <clamp500>:

/* USER CODE BEGIN 4 */

static inline int32_t clamp500(int32_t x){ return x<-500?-500:(x>500?500:x); }
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80013ba:	db06      	blt.n	80013ca <clamp500+0x1e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013c2:	bfa8      	it	ge
 80013c4:	f44f 73fa 	movge.w	r3, #500	@ 0x1f4
 80013c8:	e000      	b.n	80013cc <clamp500+0x20>
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <clamp500+0x2c>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	fffffe0c 	.word	0xfffffe0c

080013dc <init_multiarray_4>:

/* Fixed-size 4-element Int32MultiArray bound to external storage */
static void init_multiarray_4(std_msgs__msg__Int32MultiArray* m, int32_t* backing)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  std_msgs__msg__Int32MultiArray__init(m);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f009 fdb4 	bl	800af54 <std_msgs__msg__Int32MultiArray__init>
  m->layout.dim.data = NULL; m->layout.dim.size = 0; m->layout.dim.capacity = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  m->layout.data_offset = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  m->data.data = backing; m->data.size = 4; m->data.capacity = 4;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2204      	movs	r2, #4
 800140e:	615a      	str	r2, [r3, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2204      	movs	r2, #4
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <motor_enable>:
  .htim_enc = &htim1,
  .last_raw = 0, .accum = 0
};

static void motor_enable(motor_t* m)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* power/enable pin */
  HAL_GPIO_WritePin(m->port_vdd, m->pin_vdd, GPIO_PIN_SET);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6998      	ldr	r0, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	8b9b      	ldrh	r3, [r3, #28]
 800142e:	2201      	movs	r2, #1
 8001430:	4619      	mov	r1, r3
 8001432:	f001 fee5 	bl	8003200 <HAL_GPIO_WritePin>

  /* start PWM channel and set 0% duty */
  HAL_TIM_PWM_Start(m->htim_pwm, m->ch_pwm);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f002 fe45 	bl	80040d0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <motor_enable+0x3c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001458:	e018      	b.n	800148c <motor_enable+0x6e>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d105      	bne.n	800146e <motor_enable+0x50>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800146c:	e00e      	b.n	800148c <motor_enable+0x6e>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b08      	cmp	r3, #8
 8001474:	d105      	bne.n	8001482 <motor_enable+0x64>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001480:	e004      	b.n	800148c <motor_enable+0x6e>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, 0);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2300      	movs	r3, #0
 800148a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <motor_set_speed>:

static void motor_set_speed(motor_t* m, int32_t v/*-500..500*/)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  v = clamp500(v);
 800149e:	6838      	ldr	r0, [r7, #0]
 80014a0:	f7ff ff84 	bl	80013ac <clamp500>
 80014a4:	6038      	str	r0, [r7, #0]
  /* set direction */
  if (v >= 0) {
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db10      	blt.n	80014ce <motor_set_speed+0x3a>
    HAL_GPIO_WritePin(m->port_ina, m->pin_ina, GPIO_PIN_SET);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6898      	ldr	r0, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	899b      	ldrh	r3, [r3, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	f001 fea2 	bl	8003200 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->port_inb, m->pin_inb, GPIO_PIN_RESET);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6918      	ldr	r0, [r3, #16]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	8a9b      	ldrh	r3, [r3, #20]
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f001 fe9a 	bl	8003200 <HAL_GPIO_WritePin>
 80014cc:	e012      	b.n	80014f4 <motor_set_speed+0x60>
  } else {
    HAL_GPIO_WritePin(m->port_ina, m->pin_ina, GPIO_PIN_RESET);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6898      	ldr	r0, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	899b      	ldrh	r3, [r3, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	f001 fe91 	bl	8003200 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->port_inb, m->pin_inb, GPIO_PIN_SET);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6918      	ldr	r0, [r3, #16]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8a9b      	ldrh	r3, [r3, #20]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4619      	mov	r1, r3
 80014ea:	f001 fe89 	bl	8003200 <HAL_GPIO_WritePin>
    v = -v;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	425b      	negs	r3, r3
 80014f2:	603b      	str	r3, [r7, #0]
  }
  /* scale to ARR (TIM2 configured ARR=4199 -> 20 kHz PWM) */
  uint32_t arr  = __HAL_TIM_GET_AUTORELOAD(m->htim_pwm);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	60bb      	str	r3, [r7, #8]
  uint32_t duty = (uint32_t)((v * (int32_t)arr) / 500);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	4a1a      	ldr	r2, [pc, #104]	@ (8001570 <motor_set_speed+0xdc>)
 8001508:	fb82 1203 	smull	r1, r2, r2, r3
 800150c:	1152      	asrs	r2, r2, #5
 800150e:	17db      	asrs	r3, r3, #31
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
  if (duty > arr) duty = arr;
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	429a      	cmp	r2, r3
 800151a:	d901      	bls.n	8001520 <motor_set_speed+0x8c>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <motor_set_speed+0xa0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001532:	e018      	b.n	8001566 <motor_set_speed+0xd2>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d105      	bne.n	8001548 <motor_set_speed+0xb4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001546:	e00e      	b.n	8001566 <motor_set_speed+0xd2>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b08      	cmp	r3, #8
 800154e:	d105      	bne.n	800155c <motor_set_speed+0xc8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800155a:	e004      	b.n	8001566 <motor_set_speed+0xd2>
  __HAL_TIM_SET_COMPARE(m->htim_pwm, m->ch_pwm, duty);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	10624dd3 	.word	0x10624dd3

08001574 <encoder_start>:

static void encoder_start(motor_t* m)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(m->htim_enc, 0);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Encoder_Start(m->htim_enc, TIM_CHANNEL_ALL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	213c      	movs	r1, #60	@ 0x3c
 800158c:	4618      	mov	r0, r3
 800158e:	f002 ff0d 	bl	80043ac <HAL_TIM_Encoder_Start>
  m->last_raw = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	849a      	strh	r2, [r3, #36]	@ 0x24
  m->accum    = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <encoder_sample_accum>:

/* Read encoder with wrap-safe accumulation to 32-bit */
static int32_t encoder_sample_accum(motor_t* m)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  uint16_t raw = __HAL_TIM_GET_COUNTER(m->htim_enc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	81fb      	strh	r3, [r7, #14]
  int16_t delta = (int16_t)((int32_t)raw - (int32_t)(uint16_t)m->last_raw);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80015be:	b29b      	uxth	r3, r3
 80015c0:	89fa      	ldrh	r2, [r7, #14]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	81bb      	strh	r3, [r7, #12]
  m->last_raw = (int16_t)raw;
 80015c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	849a      	strh	r2, [r3, #36]	@ 0x24
  m->accum += delta;              /* delta can be negative; handles wrap */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015d8:	441a      	add	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
  return m->accum;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <wheel_cmd_cb>:

static void wheel_cmd_cb(const void * msgin)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32MultiArray* in = (const std_msgs__msg__Int32MultiArray*)msgin;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	613b      	str	r3, [r7, #16]
  int n = (in->data.size >= 4) ? 4 : (int)in->data.size;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d802      	bhi.n	800160a <wheel_cmd_cb+0x1a>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	e000      	b.n	800160c <wheel_cmd_cb+0x1c>
 800160a:	2304      	movs	r3, #4
 800160c:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < 4; ++i) {
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e01d      	b.n	8001650 <wheel_cmd_cb+0x60>
    int32_t v = (i < n) ? in->data.data[i] : 0;
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	da06      	bge.n	800162a <wheel_cmd_cb+0x3a>
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e000      	b.n	800162c <wheel_cmd_cb+0x3c>
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
    v = clamp500(v);
 800162e:	68b8      	ldr	r0, [r7, #8]
 8001630:	f7ff febc 	bl	80013ac <clamp500>
 8001634:	60b8      	str	r0, [r7, #8]
    last_cmd[i] = v;
 8001636:	490d      	ldr	r1, [pc, #52]	@ (800166c <wheel_cmd_cb+0x7c>)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    cmd_data[i] = v;              /* for /wheel_status/cmd_echo */
 8001640:	490b      	ldr	r1, [pc, #44]	@ (8001670 <wheel_cmd_cb+0x80>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 4; ++i) {
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b03      	cmp	r3, #3
 8001654:	ddde      	ble.n	8001614 <wheel_cmd_cb+0x24>
  }

  /* drive only the first motor for now */
  motor_set_speed(&M_FL, last_cmd[0]);
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <wheel_cmd_cb+0x7c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <wheel_cmd_cb+0x84>)
 800165e:	f7ff ff19 	bl	8001494 <motor_set_speed>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200056d4 	.word	0x200056d4
 8001670:	200056a4 	.word	0x200056a4
 8001674:	20000000 	.word	0x20000000

08001678 <timer_cb>:

/* Timer @100 Hz: publish echo + encoder accum */
static void timer_cb(rcl_timer_t * t, int64_t last_call_time)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	e9c7 2300 	strd	r2, r3, [r7]
  (void)t; (void)last_call_time;

  /* encoder position (ticks since boot) for FL at index 0 */
  enc_data[0] = encoder_sample_accum(&M_FL);
 8001684:	480e      	ldr	r0, [pc, #56]	@ (80016c0 <timer_cb+0x48>)
 8001686:	f7ff ff8e 	bl	80015a6 <encoder_sample_accum>
 800168a:	4603      	mov	r3, r0
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <timer_cb+0x4c>)
 800168e:	6013      	str	r3, [r2, #0]
  enc_data[1] = 0; enc_data[2] = 0; enc_data[3] = 0;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <timer_cb+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <timer_cb+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <timer_cb+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]

  (void)rcl_publish(&pub_cmd_echo, &msg_cmd_echo, NULL);
 80016a2:	2200      	movs	r2, #0
 80016a4:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <timer_cb+0x50>)
 80016a6:	4809      	ldr	r0, [pc, #36]	@ (80016cc <timer_cb+0x54>)
 80016a8:	f007 fe94 	bl	80093d4 <rcl_publish>
  (void)rcl_publish(&pub_encoders, &msg_enc, NULL);
 80016ac:	2200      	movs	r2, #0
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <timer_cb+0x58>)
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <timer_cb+0x5c>)
 80016b2:	f007 fe8f 	bl	80093d4 <rcl_publish>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000
 80016c4:	200056b4 	.word	0x200056b4
 80016c8:	20005650 	.word	0x20005650
 80016cc:	200055b0 	.word	0x200055b0
 80016d0:	2000566c 	.word	0x2000566c
 80016d4:	200055b4 	.word	0x200055b4

080016d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0a8      	sub	sp, #160	@ 0xa0
 80016dc:	af02      	add	r7, sp, #8
 80016de:	6078      	str	r0, [r7, #4]
	// start PWM on CH1 (do this once)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  */
 
	/* -------- transport -------- */
	  rmw_uros_set_custom_transport(
 80016e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001910 <StartDefaultTask+0x238>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	4b8b      	ldr	r3, [pc, #556]	@ (8001914 <StartDefaultTask+0x23c>)
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4b8b      	ldr	r3, [pc, #556]	@ (8001918 <StartDefaultTask+0x240>)
 80016ea:	4a8c      	ldr	r2, [pc, #560]	@ (800191c <StartDefaultTask+0x244>)
 80016ec:	498c      	ldr	r1, [pc, #560]	@ (8001920 <StartDefaultTask+0x248>)
 80016ee:	2001      	movs	r0, #1
 80016f0:	f008 fe9a 	bl	800a428 <rmw_uros_set_custom_transport>
	      true, (void *)&huart2,
	      cubemx_transport_open, cubemx_transport_close,
	      cubemx_transport_write, cubemx_transport_read);

	  /* -------- allocators -------- */
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80016f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016f8:	4618      	mov	r0, r3
 80016fa:	f008 fdbb 	bl	800a274 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 80016fe:	4b89      	ldr	r3, [pc, #548]	@ (8001924 <StartDefaultTask+0x24c>)
 8001700:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <StartDefaultTask+0x250>)
 8001704:	663b      	str	r3, [r7, #96]	@ 0x60
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 8001706:	4b89      	ldr	r3, [pc, #548]	@ (800192c <StartDefaultTask+0x254>)
 8001708:	667b      	str	r3, [r7, #100]	@ 0x64
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 800170a:	4b89      	ldr	r3, [pc, #548]	@ (8001930 <StartDefaultTask+0x258>)
 800170c:	66bb      	str	r3, [r7, #104]	@ 0x68
	  (void)rcutils_set_default_allocator(&freeRTOS_allocator);
 800170e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001712:	4618      	mov	r0, r3
 8001714:	f008 fdca 	bl	800a2ac <rcutils_set_default_allocator>

	  /* -------- wait for agent (~5 s) -------- */
	  for (int i = 0; i < 50; ++i) {
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800171e:	e00e      	b.n	800173e <StartDefaultTask+0x66>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001720:	2101      	movs	r1, #1
 8001722:	2064      	movs	r0, #100	@ 0x64
 8001724:	f008 fe96 	bl	800a454 <rmw_uros_ping_agent>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <StartDefaultTask+0x70>
	    osDelay(100);
 800172e:	2064      	movs	r0, #100	@ 0x64
 8001730:	f005 f8c0 	bl	80068b4 <osDelay>
	  for (int i = 0; i < 50; ++i) {
 8001734:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001738:	3301      	adds	r3, #1
 800173a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800173e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001742:	2b31      	cmp	r3, #49	@ 0x31
 8001744:	ddec      	ble.n	8001720 <StartDefaultTask+0x48>
 8001746:	e000      	b.n	800174a <StartDefaultTask+0x72>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001748:	bf00      	nop
	  }

	  /* -------- start peripherals for FL motor -------- */
	  motor_enable(&M_FL);      /* PWM + enable pin */
 800174a:	487a      	ldr	r0, [pc, #488]	@ (8001934 <StartDefaultTask+0x25c>)
 800174c:	f7ff fe67 	bl	800141e <motor_enable>
	  encoder_start(&M_FL);     /* TIM1 encoder */
 8001750:	4878      	ldr	r0, [pc, #480]	@ (8001934 <StartDefaultTask+0x25c>)
 8001752:	f7ff ff0f 	bl	8001574 <encoder_start>

	  /* -------- micro-ROS graph -------- */
	  rclc_support_t support;
	  rcl_allocator_t allocator = rcl_get_default_allocator();
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4618      	mov	r0, r3
 800175c:	f008 fd98 	bl	800a290 <rcutils_get_default_allocator>
	  CHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	f008 fc5a 	bl	800a024 <rclc_support_init>
 8001770:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 8001774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <StartDefaultTask+0xb4>
 800177c:	2120      	movs	r1, #32
 800177e:	486e      	ldr	r0, [pc, #440]	@ (8001938 <StartDefaultTask+0x260>)
 8001780:	f001 fd57 	bl	8003232 <HAL_GPIO_TogglePin>
 8001784:	20c8      	movs	r0, #200	@ 0xc8
 8001786:	f005 f895 	bl	80068b4 <osDelay>
 800178a:	e7f7      	b.n	800177c <StartDefaultTask+0xa4>

	  rcl_node_t node;
	  CHECK(rclc_node_init_default(&node, "nucleo_f446re", "", &support));
 800178c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001790:	f107 000c 	add.w	r0, r7, #12
 8001794:	4a69      	ldr	r2, [pc, #420]	@ (800193c <StartDefaultTask+0x264>)
 8001796:	496a      	ldr	r1, [pc, #424]	@ (8001940 <StartDefaultTask+0x268>)
 8001798:	f008 fc8e 	bl	800a0b8 <rclc_node_init_default>
 800179c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80017a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <StartDefaultTask+0xe0>
 80017a8:	2120      	movs	r1, #32
 80017aa:	4863      	ldr	r0, [pc, #396]	@ (8001938 <StartDefaultTask+0x260>)
 80017ac:	f001 fd41 	bl	8003232 <HAL_GPIO_TogglePin>
 80017b0:	20c8      	movs	r0, #200	@ 0xc8
 80017b2:	f005 f87f 	bl	80068b4 <osDelay>
 80017b6:	e7f7      	b.n	80017a8 <StartDefaultTask+0xd0>

	  init_multiarray_4(&msg_cmd_echo, cmd_data);
 80017b8:	4962      	ldr	r1, [pc, #392]	@ (8001944 <StartDefaultTask+0x26c>)
 80017ba:	4863      	ldr	r0, [pc, #396]	@ (8001948 <StartDefaultTask+0x270>)
 80017bc:	f7ff fe0e 	bl	80013dc <init_multiarray_4>
	  init_multiarray_4(&msg_enc,      enc_data);
 80017c0:	4962      	ldr	r1, [pc, #392]	@ (800194c <StartDefaultTask+0x274>)
 80017c2:	4863      	ldr	r0, [pc, #396]	@ (8001950 <StartDefaultTask+0x278>)
 80017c4:	f7ff fe0a 	bl	80013dc <init_multiarray_4>
	  init_multiarray_4(&msg_cmd_rx,   rx_data);
 80017c8:	4962      	ldr	r1, [pc, #392]	@ (8001954 <StartDefaultTask+0x27c>)
 80017ca:	4863      	ldr	r0, [pc, #396]	@ (8001958 <StartDefaultTask+0x280>)
 80017cc:	f7ff fe06 	bl	80013dc <init_multiarray_4>

	  CHECK(rclc_publisher_init_default(
 80017d0:	f009 fc00 	bl	800afd4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f107 010c 	add.w	r1, r7, #12
 80017da:	4b60      	ldr	r3, [pc, #384]	@ (800195c <StartDefaultTask+0x284>)
 80017dc:	4860      	ldr	r0, [pc, #384]	@ (8001960 <StartDefaultTask+0x288>)
 80017de:	f008 fca7 	bl	800a130 <rclc_publisher_init_default>
 80017e2:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 80017e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <StartDefaultTask+0x126>
 80017ee:	2120      	movs	r1, #32
 80017f0:	4851      	ldr	r0, [pc, #324]	@ (8001938 <StartDefaultTask+0x260>)
 80017f2:	f001 fd1e 	bl	8003232 <HAL_GPIO_TogglePin>
 80017f6:	20c8      	movs	r0, #200	@ 0xc8
 80017f8:	f005 f85c 	bl	80068b4 <osDelay>
 80017fc:	e7f7      	b.n	80017ee <StartDefaultTask+0x116>
	      &pub_cmd_echo, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/cmd_echo"));

	  CHECK(rclc_publisher_init_default(
 80017fe:	f009 fbe9 	bl	800afd4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 8001802:	4602      	mov	r2, r0
 8001804:	f107 010c 	add.w	r1, r7, #12
 8001808:	4b56      	ldr	r3, [pc, #344]	@ (8001964 <StartDefaultTask+0x28c>)
 800180a:	4857      	ldr	r0, [pc, #348]	@ (8001968 <StartDefaultTask+0x290>)
 800180c:	f008 fc90 	bl	800a130 <rclc_publisher_init_default>
 8001810:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8001814:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <StartDefaultTask+0x154>
 800181c:	2120      	movs	r1, #32
 800181e:	4846      	ldr	r0, [pc, #280]	@ (8001938 <StartDefaultTask+0x260>)
 8001820:	f001 fd07 	bl	8003232 <HAL_GPIO_TogglePin>
 8001824:	20c8      	movs	r0, #200	@ 0xc8
 8001826:	f005 f845 	bl	80068b4 <osDelay>
 800182a:	e7f7      	b.n	800181c <StartDefaultTask+0x144>
	      &pub_encoders, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/encoders"));

	  CHECK(rclc_subscription_init_default(
 800182c:	f009 fbd2 	bl	800afd4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 8001830:	4602      	mov	r2, r0
 8001832:	f107 010c 	add.w	r1, r7, #12
 8001836:	4b4d      	ldr	r3, [pc, #308]	@ (800196c <StartDefaultTask+0x294>)
 8001838:	484d      	ldr	r0, [pc, #308]	@ (8001970 <StartDefaultTask+0x298>)
 800183a:	f008 fcad 	bl	800a198 <rclc_subscription_init_default>
 800183e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8001842:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <StartDefaultTask+0x182>
 800184a:	2120      	movs	r1, #32
 800184c:	483a      	ldr	r0, [pc, #232]	@ (8001938 <StartDefaultTask+0x260>)
 800184e:	f001 fcf0 	bl	8003232 <HAL_GPIO_TogglePin>
 8001852:	20c8      	movs	r0, #200	@ 0xc8
 8001854:	f005 f82e 	bl	80068b4 <osDelay>
 8001858:	e7f7      	b.n	800184a <StartDefaultTask+0x172>
	      &sub_cmd, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_cmd"));

	  /* 100 Hz timer (new API with autostart) */
	  CHECK(rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(10), timer_cb, true));
 800185a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800185e:	2301      	movs	r3, #1
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	4b44      	ldr	r3, [pc, #272]	@ (8001974 <StartDefaultTask+0x29c>)
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	4a44      	ldr	r2, [pc, #272]	@ (8001978 <StartDefaultTask+0x2a0>)
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	4843      	ldr	r0, [pc, #268]	@ (800197c <StartDefaultTask+0x2a4>)
 800186e:	f008 fcc7 	bl	800a200 <rclc_timer_init_default2>
 8001872:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8001874:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <StartDefaultTask+0x1b2>
 800187a:	2120      	movs	r1, #32
 800187c:	482e      	ldr	r0, [pc, #184]	@ (8001938 <StartDefaultTask+0x260>)
 800187e:	f001 fcd8 	bl	8003232 <HAL_GPIO_TogglePin>
 8001882:	20c8      	movs	r0, #200	@ 0xc8
 8001884:	f005 f816 	bl	80068b4 <osDelay>
 8001888:	e7f7      	b.n	800187a <StartDefaultTask+0x1a2>

	  CHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001892:	2202      	movs	r2, #2
 8001894:	483a      	ldr	r0, [pc, #232]	@ (8001980 <StartDefaultTask+0x2a8>)
 8001896:	f008 f94b 	bl	8009b30 <rclc_executor_init>
 800189a:	67b8      	str	r0, [r7, #120]	@ 0x78
 800189c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <StartDefaultTask+0x1da>
 80018a2:	2120      	movs	r1, #32
 80018a4:	4824      	ldr	r0, [pc, #144]	@ (8001938 <StartDefaultTask+0x260>)
 80018a6:	f001 fcc4 	bl	8003232 <HAL_GPIO_TogglePin>
 80018aa:	20c8      	movs	r0, #200	@ 0xc8
 80018ac:	f005 f802 	bl	80068b4 <osDelay>
 80018b0:	e7f7      	b.n	80018a2 <StartDefaultTask+0x1ca>
	  CHECK(rclc_executor_add_subscription(&executor, &sub_cmd, &msg_cmd_rx, &wheel_cmd_cb, ON_NEW_DATA));
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4b33      	ldr	r3, [pc, #204]	@ (8001984 <StartDefaultTask+0x2ac>)
 80018b8:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <StartDefaultTask+0x280>)
 80018ba:	492d      	ldr	r1, [pc, #180]	@ (8001970 <StartDefaultTask+0x298>)
 80018bc:	4830      	ldr	r0, [pc, #192]	@ (8001980 <StartDefaultTask+0x2a8>)
 80018be:	f008 f9a3 	bl	8009c08 <rclc_executor_add_subscription>
 80018c2:	6778      	str	r0, [r7, #116]	@ 0x74
 80018c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <StartDefaultTask+0x202>
 80018ca:	2120      	movs	r1, #32
 80018cc:	481a      	ldr	r0, [pc, #104]	@ (8001938 <StartDefaultTask+0x260>)
 80018ce:	f001 fcb0 	bl	8003232 <HAL_GPIO_TogglePin>
 80018d2:	20c8      	movs	r0, #200	@ 0xc8
 80018d4:	f004 ffee 	bl	80068b4 <osDelay>
 80018d8:	e7f7      	b.n	80018ca <StartDefaultTask+0x1f2>
	  CHECK(rclc_executor_add_timer(&executor, &timer));
 80018da:	4928      	ldr	r1, [pc, #160]	@ (800197c <StartDefaultTask+0x2a4>)
 80018dc:	4828      	ldr	r0, [pc, #160]	@ (8001980 <StartDefaultTask+0x2a8>)
 80018de:	f008 f9c7 	bl	8009c70 <rclc_executor_add_timer>
 80018e2:	6738      	str	r0, [r7, #112]	@ 0x70
 80018e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <StartDefaultTask+0x222>
 80018ea:	2120      	movs	r1, #32
 80018ec:	4812      	ldr	r0, [pc, #72]	@ (8001938 <StartDefaultTask+0x260>)
 80018ee:	f001 fca0 	bl	8003232 <HAL_GPIO_TogglePin>
 80018f2:	20c8      	movs	r0, #200	@ 0xc8
 80018f4:	f004 ffde 	bl	80068b4 <osDelay>
 80018f8:	e7f7      	b.n	80018ea <StartDefaultTask+0x212>

	  for (;;) {
	    (void)rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));
 80018fa:	a303      	add	r3, pc, #12	@ (adr r3, 8001908 <StartDefaultTask+0x230>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	481f      	ldr	r0, [pc, #124]	@ (8001980 <StartDefaultTask+0x2a8>)
 8001902:	f008 fa29 	bl	8009d58 <rclc_executor_spin_some>
 8001906:	e7f8      	b.n	80018fa <StartDefaultTask+0x222>
 8001908:	004c4b40 	.word	0x004c4b40
 800190c:	00000000 	.word	0x00000000
 8001910:	08000c01 	.word	0x08000c01
 8001914:	08000b99 	.word	0x08000b99
 8001918:	08000b79 	.word	0x08000b79
 800191c:	08000b4d 	.word	0x08000b4d
 8001920:	200054a4 	.word	0x200054a4
 8001924:	080019b9 	.word	0x080019b9
 8001928:	080019fd 	.word	0x080019fd
 800192c:	08001a35 	.word	0x08001a35
 8001930:	08001aa1 	.word	0x08001aa1
 8001934:	20000000 	.word	0x20000000
 8001938:	40020000 	.word	0x40020000
 800193c:	08018874 	.word	0x08018874
 8001940:	08018878 	.word	0x08018878
 8001944:	200056a4 	.word	0x200056a4
 8001948:	20005650 	.word	0x20005650
 800194c:	200056b4 	.word	0x200056b4
 8001950:	2000566c 	.word	0x2000566c
 8001954:	200056c4 	.word	0x200056c4
 8001958:	20005688 	.word	0x20005688
 800195c:	08018888 	.word	0x08018888
 8001960:	200055b0 	.word	0x200055b0
 8001964:	080188a0 	.word	0x080188a0
 8001968:	200055b4 	.word	0x200055b4
 800196c:	080188b8 	.word	0x080188b8
 8001970:	200055b8 	.word	0x200055b8
 8001974:	08001679 	.word	0x08001679
 8001978:	00989680 	.word	0x00989680
 800197c:	200055bc 	.word	0x200055bc
 8001980:	200055c0 	.word	0x200055c0
 8001984:	080015f1 	.word	0x080015f1

08001988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800199a:	f000 fd99 	bl	80024d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40001400 	.word	0x40001400

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <Error_Handler+0x8>

080019b8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <microros_allocate+0x3c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <microros_allocate+0x3c>)
 80019d0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <microros_allocate+0x40>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <microros_allocate+0x40>)
 80019e0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fe62 	bl	80006ac <pvPortMallocMicroROS>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200056e4 	.word	0x200056e4
 80019f8:	200056e8 	.word	0x200056e8

080019fc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7fe ff71 	bl	80008f4 <getBlockSize>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <microros_deallocate+0x34>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <microros_deallocate+0x34>)
 8001a1e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe ff0b 	bl	800083c <vPortFreeMicroROS>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200056e8 	.word	0x200056e8

08001a34 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <microros_reallocate+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <microros_reallocate+0x64>)
 8001a4e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <microros_reallocate+0x68>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <microros_reallocate+0x68>)
 8001a5e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001a66:	68b8      	ldr	r0, [r7, #8]
 8001a68:	f7fe fe20 	bl	80006ac <pvPortMallocMicroROS>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e00e      	b.n	8001a8e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7fe ff3f 	bl	80008f4 <getBlockSize>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <microros_reallocate+0x68>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <microros_reallocate+0x68>)
 8001a82:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7fe ff52 	bl	8000930 <pvPortReallocMicroROS>
 8001a8c:	4603      	mov	r3, r0
  }
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200056e4 	.word	0x200056e4
 8001a9c:	200056e8 	.word	0x200056e8

08001aa0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae8 <microros_zero_allocate+0x48>)
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <microros_zero_allocate+0x48>)
 8001abe:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <microros_zero_allocate+0x4c>)
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <microros_zero_allocate+0x4c>)
 8001ad2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7fe ff57 	bl	800098a <pvPortCallocMicroROS>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200056e4 	.word	0x200056e4
 8001aec:	200056e8 	.word	0x200056e8

08001af0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b06:	a320      	add	r3, pc, #128	@ (adr r3, 8001b88 <UTILS_NanosecondsToTimespec+0x98>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fbe8 	bl	80002e0 <__aeabi_ldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b88 <UTILS_NanosecondsToTimespec+0x98>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fbdc 	bl	80002e0 <__aeabi_ldivmod>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da20      	bge.n	8001b76 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a11      	ldr	r2, [pc, #68]	@ (8001b80 <UTILS_NanosecondsToTimespec+0x90>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1712      	asrs	r2, r2, #28
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	6979      	ldr	r1, [r7, #20]
 8001b50:	17c8      	asrs	r0, r1, #31
 8001b52:	460c      	mov	r4, r1
 8001b54:	4605      	mov	r5, r0
 8001b56:	ebb2 0804 	subs.w	r8, r2, r4
 8001b5a:	eb63 0905 	sbc.w	r9, r3, r5
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <UTILS_NanosecondsToTimespec+0x94>)
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	441a      	add	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]
    }
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b80:	44b82fa1 	.word	0x44b82fa1
 8001b84:	3b9aca00 	.word	0x3b9aca00
 8001b88:	3b9aca00 	.word	0x3b9aca00
 8001b8c:	00000000 	.word	0x00000000

08001b90 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	b08e      	sub	sp, #56	@ 0x38
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b9a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001b9c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001bb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 f948 	bl	8007e4c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbe:	17da      	asrs	r2, r3, #31
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	61fa      	str	r2, [r7, #28]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	69b9      	ldr	r1, [r7, #24]
 8001bce:	000b      	movs	r3, r1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	461c      	mov	r4, r3
 8001bdc:	4615      	mov	r5, r2
 8001bde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001be2:	1911      	adds	r1, r2, r4
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	416b      	adcs	r3, r5
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bee:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001bf2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	f04f 0500 	mov.w	r5, #0
 8001c02:	015d      	lsls	r5, r3, #5
 8001c04:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001c08:	0154      	lsls	r4, r2, #5
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	ebb2 0800 	subs.w	r8, r2, r0
 8001c12:	eb63 0901 	sbc.w	r9, r3, r1
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c22:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c26:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001c2a:	4690      	mov	r8, r2
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	eb18 0a00 	adds.w	sl, r8, r0
 8001c32:	eb49 0b01 	adc.w	fp, r9, r1
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c42:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c46:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c4a:	ebb2 040a 	subs.w	r4, r2, sl
 8001c4e:	603c      	str	r4, [r7, #0]
 8001c50:	eb63 030b 	sbc.w	r3, r3, fp
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	181b      	adds	r3, r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	462b      	mov	r3, r5
 8001c62:	eb41 0303 	adc.w	r3, r1, r3
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	6a3a      	ldr	r2, [r7, #32]
 8001c6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c6e:	f7ff ff3f 	bl	8001af0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	3738      	adds	r7, #56	@ 0x38
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <HAL_MspInit+0x54>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <HAL_MspInit+0x54>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_MspInit+0x54>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_MspInit+0x54>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_MspInit+0x54>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_MspInit+0x54>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	f06f 0001 	mvn.w	r0, #1
 8001cc6:	f000 fcdb 	bl	8002680 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b090      	sub	sp, #64	@ 0x40
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a64      	ldr	r2, [pc, #400]	@ (8001e88 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d12d      	bne.n	8001d56 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cfe:	4b63      	ldr	r3, [pc, #396]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a62      	ldr	r2, [pc, #392]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b60      	ldr	r3, [pc, #384]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b59      	ldr	r3, [pc, #356]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = UL_ENC_A_T1C1_Pin|UL_ENC_B_T1C2_Pin;
 8001d32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4850      	ldr	r0, [pc, #320]	@ (8001e90 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001d50:	f001 f8c2 	bl	8002ed8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d54:	e094      	b.n	8001e80 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8001e94 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d12c      	bne.n	8001dba <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	4a48      	ldr	r2, [pc, #288]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d70:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a41      	ldr	r2, [pc, #260]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UR_ENC_A_T3C1_Pin|UR_ENC_B_T3C2_Pin;
 8001d98:	23c0      	movs	r3, #192	@ 0xc0
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da8:	2302      	movs	r3, #2
 8001daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db0:	4619      	mov	r1, r3
 8001db2:	4837      	ldr	r0, [pc, #220]	@ (8001e90 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001db4:	f001 f890 	bl	8002ed8 <HAL_GPIO_Init>
}
 8001db8:	e062      	b.n	8001e80 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a36      	ldr	r2, [pc, #216]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d12c      	bne.n	8001e1e <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	4b30      	ldr	r3, [pc, #192]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	4a28      	ldr	r2, [pc, #160]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df0:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LL_ENC_A_T4C1_Pin|LL_ENC_B_T4C2_Pin;
 8001dfc:	23c0      	movs	r3, #192	@ 0xc0
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e14:	4619      	mov	r1, r3
 8001e16:	4821      	ldr	r0, [pc, #132]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001e18:	f001 f85e 	bl	8002ed8 <HAL_GPIO_Init>
}
 8001e1c:	e030      	b.n	8001e80 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d12b      	bne.n	8001e80 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	4a16      	ldr	r2, [pc, #88]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e54:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LR_ENC_A_T8C1_Pin|LR_ENC_B_T8C2_Pin;
 8001e60:	23c0      	movs	r3, #192	@ 0xc0
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e70:	2303      	movs	r3, #3
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480a      	ldr	r0, [pc, #40]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001e7c:	f001 f82c 	bl	8002ed8 <HAL_GPIO_Init>
}
 8001e80:	bf00      	nop
 8001e82:	3740      	adds	r7, #64	@ 0x40
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40010400 	.word	0x40010400
 8001ea4:	40020800 	.word	0x40020800

08001ea8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f08:	d13c      	bne.n	8001f84 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_TIM_MspPostInit+0xa4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <HAL_TIM_MspPostInit+0xa4>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <HAL_TIM_MspPostInit+0xa4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <HAL_TIM_MspPostInit+0xa4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a17      	ldr	r2, [pc, #92]	@ (8001f8c <HAL_TIM_MspPostInit+0xa4>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_TIM_MspPostInit+0xa4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 8001f42:	2303      	movs	r3, #3
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f52:	2301      	movs	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <HAL_TIM_MspPostInit+0xa8>)
 8001f5e:	f000 ffbb 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 8001f62:	f240 4304 	movw	r3, #1028	@ 0x404
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f74:	2301      	movs	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_TIM_MspPostInit+0xac>)
 8001f80:	f000 ffaa 	bl	8002ed8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400

08001f98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80020ec <HAL_UART_MspInit+0x154>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 8093 	bne.w	80020e2 <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80020f0 <HAL_UART_MspInit+0x158>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80020f0 <HAL_UART_MspInit+0x158>)
 8001fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fcc:	4b48      	ldr	r3, [pc, #288]	@ (80020f0 <HAL_UART_MspInit+0x158>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	4b44      	ldr	r3, [pc, #272]	@ (80020f0 <HAL_UART_MspInit+0x158>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a43      	ldr	r2, [pc, #268]	@ (80020f0 <HAL_UART_MspInit+0x158>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe8:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <HAL_UART_MspInit+0x158>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002004:	2307      	movs	r3, #7
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4839      	ldr	r0, [pc, #228]	@ (80020f4 <HAL_UART_MspInit+0x15c>)
 8002010:	f000 ff62 	bl	8002ed8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002014:	4b38      	ldr	r3, [pc, #224]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 8002016:	4a39      	ldr	r2, [pc, #228]	@ (80020fc <HAL_UART_MspInit+0x164>)
 8002018:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800201a:	4b37      	ldr	r3, [pc, #220]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 800201c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002020:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002022:	4b35      	ldr	r3, [pc, #212]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002028:	4b33      	ldr	r3, [pc, #204]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800202e:	4b32      	ldr	r3, [pc, #200]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 8002030:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002034:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002036:	4b30      	ldr	r3, [pc, #192]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203c:	4b2e      	ldr	r3, [pc, #184]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002042:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 8002044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002048:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800204a:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 800204c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002050:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002052:	4b29      	ldr	r3, [pc, #164]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002058:	4827      	ldr	r0, [pc, #156]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 800205a:	f000 fb3b 	bl	80026d4 <HAL_DMA_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002064:	f7ff fca2 	bl	80019ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 800206c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800206e:	4a22      	ldr	r2, [pc, #136]	@ (80020f8 <HAL_UART_MspInit+0x160>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002074:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_UART_MspInit+0x168>)
 8002076:	4a23      	ldr	r2, [pc, #140]	@ (8002104 <HAL_UART_MspInit+0x16c>)
 8002078:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800207a:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <HAL_UART_MspInit+0x168>)
 800207c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002080:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <HAL_UART_MspInit+0x168>)
 8002084:	2240      	movs	r2, #64	@ 0x40
 8002086:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <HAL_UART_MspInit+0x168>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800208e:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <HAL_UART_MspInit+0x168>)
 8002090:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002094:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002096:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <HAL_UART_MspInit+0x168>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209c:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_UART_MspInit+0x168>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020a2:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <HAL_UART_MspInit+0x168>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_UART_MspInit+0x168>)
 80020aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_UART_MspInit+0x168>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020b6:	4812      	ldr	r0, [pc, #72]	@ (8002100 <HAL_UART_MspInit+0x168>)
 80020b8:	f000 fb0c 	bl	80026d4 <HAL_DMA_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80020c2:	f7ff fc73 	bl	80019ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <HAL_UART_MspInit+0x168>)
 80020ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80020cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <HAL_UART_MspInit+0x168>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2105      	movs	r1, #5
 80020d6:	2026      	movs	r0, #38	@ 0x26
 80020d8:	f000 fad2 	bl	8002680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020dc:	2026      	movs	r0, #38	@ 0x26
 80020de:	f000 faeb 	bl	80026b8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	@ 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40004400 	.word	0x40004400
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	200054ec 	.word	0x200054ec
 80020fc:	40026088 	.word	0x40026088
 8002100:	2000554c 	.word	0x2000554c
 8002104:	400260a0 	.word	0x400260a0

08002108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	@ 0x38
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <HAL_InitTick+0xe4>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <HAL_InitTick+0xe4>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6413      	str	r3, [r2, #64]	@ 0x40
 8002128:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_InitTick+0xe4>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f001 f9ac 	bl	800349c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800214e:	f001 f97d 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8002152:	6378      	str	r0, [r7, #52]	@ 0x34
 8002154:	e004      	b.n	8002160 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002156:	f001 f979 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 800215a:	4603      	mov	r3, r0
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002162:	4a23      	ldr	r2, [pc, #140]	@ (80021f0 <HAL_InitTick+0xe8>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	3b01      	subs	r3, #1
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <HAL_InitTick+0xec>)
 8002170:	4a21      	ldr	r2, [pc, #132]	@ (80021f8 <HAL_InitTick+0xf0>)
 8002172:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002174:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <HAL_InitTick+0xec>)
 8002176:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800217a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800217c:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_InitTick+0xec>)
 800217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002180:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <HAL_InitTick+0xec>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_InitTick+0xec>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_InitTick+0xec>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002194:	4817      	ldr	r0, [pc, #92]	@ (80021f4 <HAL_InitTick+0xec>)
 8002196:	f001 fe81 	bl	8003e9c <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11b      	bne.n	80021e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80021a8:	4812      	ldr	r0, [pc, #72]	@ (80021f4 <HAL_InitTick+0xec>)
 80021aa:	f001 fec7 	bl	8003f3c <HAL_TIM_Base_Start_IT>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80021b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d111      	bne.n	80021e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021bc:	2037      	movs	r0, #55	@ 0x37
 80021be:	f000 fa7b 	bl	80026b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d808      	bhi.n	80021da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	2037      	movs	r0, #55	@ 0x37
 80021ce:	f000 fa57 	bl	8002680 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_InitTick+0xf4>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e002      	b.n	80021e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3738      	adds	r7, #56	@ 0x38
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	200056ec 	.word	0x200056ec
 80021f8:	40001400 	.word	0x40001400
 80021fc:	20000034 	.word	0x20000034

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <NMI_Handler+0x4>

08002208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <MemManage_Handler+0x4>

08002218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <UsageFault_Handler+0x4>

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800223c:	4802      	ldr	r0, [pc, #8]	@ (8002248 <DMA1_Stream5_IRQHandler+0x10>)
 800223e:	f000 fbe1 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200054ec 	.word	0x200054ec

0800224c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <DMA1_Stream6_IRQHandler+0x10>)
 8002252:	f000 fbd7 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000554c 	.word	0x2000554c

08002260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <USART2_IRQHandler+0x10>)
 8002266:	f003 f8e7 	bl	8005438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200054a4 	.word	0x200054a4

08002274 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <TIM7_IRQHandler+0x10>)
 800227a:	f002 f925 	bl	80044c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200056ec 	.word	0x200056ec

08002288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_kill>:

int _kill(int pid, int sig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a2:	f015 fc61 	bl	8017b68 <__errno>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2216      	movs	r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
  return -1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_exit>:

void _exit (int status)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffe7 	bl	8002298 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ca:	bf00      	nop
 80022cc:	e7fd      	b.n	80022ca <_exit+0x12>

080022ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e00a      	b.n	80022f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e0:	f3af 8000 	nop.w
 80022e4:	4601      	mov	r1, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	b2ca      	uxtb	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	dbf0      	blt.n	80022e0 <_read+0x12>
  }

  return len;
 80022fe:	687b      	ldr	r3, [r7, #4]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e009      	b.n	800232e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	dbf1      	blt.n	800231a <_write+0x12>
  }
  return len;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_close>:

int _close(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002368:	605a      	str	r2, [r3, #4]
  return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_isatty>:

int _isatty(int file)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f015 fbc6 	bl	8017b68 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20020000 	.word	0x20020000
 8002408:	00000400 	.word	0x00000400
 800240c:	20005738 	.word	0x20005738
 8002410:	2000ed48 	.word	0x2000ed48

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002470 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800243c:	f7ff ffea 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002440:	480c      	ldr	r0, [pc, #48]	@ (8002474 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002442:	490d      	ldr	r1, [pc, #52]	@ (8002478 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002448:	e002      	b.n	8002450 <LoopCopyDataInit>

0800244a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244e:	3304      	adds	r3, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002454:	d3f9      	bcc.n	800244a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002458:	4c0a      	ldr	r4, [pc, #40]	@ (8002484 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800245c:	e001      	b.n	8002462 <LoopFillZerobss>

0800245e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002460:	3204      	adds	r2, #4

08002462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002464:	d3fb      	bcc.n	800245e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002466:	f015 fb85 	bl	8017b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246a:	f7fe fc1d 	bl	8000ca8 <main>
  bx  lr    
 800246e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002478:	20000f00 	.word	0x20000f00
  ldr r2, =_sidata
 800247c:	08019aa0 	.word	0x08019aa0
  ldr r2, =_sbss
 8002480:	20000f00 	.word	0x20000f00
  ldr r4, =_ebss
 8002484:	2000ed44 	.word	0x2000ed44

08002488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <ADC_IRQHandler>
	...

0800248c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002490:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <HAL_Init+0x40>)
 8002496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <HAL_Init+0x40>)
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <HAL_Init+0x40>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 f8d8 	bl	800266a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	200f      	movs	r0, #15
 80024bc:	f7ff fe24 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f7ff fbde 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000038 	.word	0x20000038
 80024f4:	2000573c 	.word	0x2000573c

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000573c 	.word	0x2000573c

08002510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	@ (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	@ (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	@ (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	@ 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ff4c 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002692:	f7ff ff61 	bl	8002558 <__NVIC_GetPriorityGrouping>
 8002696:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	6978      	ldr	r0, [r7, #20]
 800269e:	f7ff ffb1 	bl	8002604 <NVIC_EncodePriority>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff80 	bl	80025b0 <__NVIC_SetPriority>
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff54 	bl	8002574 <__NVIC_EnableIRQ>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff ff0a 	bl	80024f8 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e099      	b.n	8002824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002710:	e00f      	b.n	8002732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002712:	f7ff fef1 	bl	80024f8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b05      	cmp	r3, #5
 800271e:	d908      	bls.n	8002732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e078      	b.n	8002824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e8      	bne.n	8002712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4b38      	ldr	r3, [pc, #224]	@ (800282c <HAL_DMA_Init+0x158>)
 800274c:	4013      	ands	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	4313      	orrs	r3, r2
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0307 	bic.w	r3, r3, #7
 80027b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d117      	bne.n	80027f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fb01 	bl	8002de0 <DMA_CheckFifoParam>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2240      	movs	r2, #64	@ 0x40
 80027e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027f2:	2301      	movs	r3, #1
 80027f4:	e016      	b.n	8002824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fab8 	bl	8002d74 <DMA_CalcBaseAndBitshift>
 8002804:	4603      	mov	r3, r0
 8002806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	223f      	movs	r2, #63	@ 0x3f
 800280e:	409a      	lsls	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	f010803f 	.word	0xf010803f

08002830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Start_IT+0x26>
 8002852:	2302      	movs	r3, #2
 8002854:	e040      	b.n	80028d8 <HAL_DMA_Start_IT+0xa8>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d12f      	bne.n	80028ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fa4a 	bl	8002d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	223f      	movs	r2, #63	@ 0x3f
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0216 	orr.w	r2, r2, #22
 800289e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0208 	orr.w	r2, r2, #8
 80028b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e005      	b.n	80028d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
 80028d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028ee:	f7ff fe03 	bl	80024f8 <HAL_GetTick>
 80028f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d008      	beq.n	8002912 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2280      	movs	r2, #128	@ 0x80
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e052      	b.n	80029b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0216 	bic.w	r2, r2, #22
 8002920:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002930:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <HAL_DMA_Abort+0x62>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0208 	bic.w	r2, r2, #8
 8002950:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002962:	e013      	b.n	800298c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002964:	f7ff fdc8 	bl	80024f8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b05      	cmp	r3, #5
 8002970:	d90c      	bls.n	800298c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e015      	b.n	80029b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e4      	bne.n	8002964 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299e:	223f      	movs	r2, #63	@ 0x3f
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2280      	movs	r2, #128	@ 0x80
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00c      	b.n	80029f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2205      	movs	r2, #5
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a10:	4b8e      	ldr	r3, [pc, #568]	@ (8002c4c <HAL_DMA_IRQHandler+0x248>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a8e      	ldr	r2, [pc, #568]	@ (8002c50 <HAL_DMA_IRQHandler+0x24c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0a9b      	lsrs	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	2208      	movs	r2, #8
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	2201      	movs	r2, #1
 8002a94:	409a      	lsls	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	2204      	movs	r2, #4
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	2204      	movs	r2, #4
 8002aca:	409a      	lsls	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f043 0204 	orr.w	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d043      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d03c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	2210      	movs	r2, #16
 8002b00:	409a      	lsls	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
 8002b32:	e01f      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e016      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0208 	bic.w	r2, r2, #8
 8002b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	2220      	movs	r2, #32
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 808f 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8087 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d136      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0216 	bic.w	r2, r2, #22
 8002bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_DMA_IRQHandler+0x1da>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0208 	bic.w	r2, r2, #8
 8002bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	223f      	movs	r2, #63	@ 0x3f
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d07e      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
        }
        return;
 8002c1a:	e079      	b.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d031      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
 8002c48:	e02c      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
 8002c4a:	bf00      	nop
 8002c4c:	20000030 	.word	0x20000030
 8002c50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e01e      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0210 	bic.w	r2, r2, #16
 8002c82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d032      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2205      	movs	r2, #5
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d307      	bcc.n	8002cec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x2cc>
 8002cea:	e000      	b.n	8002cee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d10:	bf00      	nop
    }
  }
}
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b40      	cmp	r3, #64	@ 0x40
 8002d44:	d108      	bne.n	8002d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d56:	e007      	b.n	8002d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3b10      	subs	r3, #16
 8002d84:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d8e:	4a13      	ldr	r2, [pc, #76]	@ (8002ddc <DMA_CalcBaseAndBitshift+0x68>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d909      	bls.n	8002db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	1d1a      	adds	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002db4:	e007      	b.n	8002dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	aaaaaaab 	.word	0xaaaaaaab
 8002ddc:	0801893c 	.word	0x0801893c

08002de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11f      	bne.n	8002e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d856      	bhi.n	8002eae <DMA_CheckFifoParam+0xce>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <DMA_CheckFifoParam+0x28>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e2b 	.word	0x08002e2b
 8002e10:	08002e19 	.word	0x08002e19
 8002e14:	08002eaf 	.word	0x08002eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d046      	beq.n	8002eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e043      	b.n	8002eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e32:	d140      	bne.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e03d      	b.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e42:	d121      	bne.n	8002e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d837      	bhi.n	8002eba <DMA_CheckFifoParam+0xda>
 8002e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <DMA_CheckFifoParam+0x70>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e61 	.word	0x08002e61
 8002e54:	08002e67 	.word	0x08002e67
 8002e58:	08002e61 	.word	0x08002e61
 8002e5c:	08002e79 	.word	0x08002e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e030      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d025      	beq.n	8002ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e76:	e022      	b.n	8002ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e80:	d11f      	bne.n	8002ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e86:	e01c      	b.n	8002ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d903      	bls.n	8002e96 <DMA_CheckFifoParam+0xb6>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e94:	e018      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9a:	e015      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002eac:	e00b      	b.n	8002ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e00a      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e008      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e006      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	@ 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e165      	b.n	80031c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f040 8154 	bne.w	80031ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d130      	bne.n	8002f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0201 	and.w	r2, r3, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d017      	beq.n	8002fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d123      	bne.n	800301c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80ae 	beq.w	80031ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b5d      	ldr	r3, [pc, #372]	@ (80031d8 <HAL_GPIO_Init+0x300>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	4a5c      	ldr	r2, [pc, #368]	@ (80031d8 <HAL_GPIO_Init+0x300>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800306c:	6453      	str	r3, [r2, #68]	@ 0x44
 800306e:	4b5a      	ldr	r3, [pc, #360]	@ (80031d8 <HAL_GPIO_Init+0x300>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307a:	4a58      	ldr	r2, [pc, #352]	@ (80031dc <HAL_GPIO_Init+0x304>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4f      	ldr	r2, [pc, #316]	@ (80031e0 <HAL_GPIO_Init+0x308>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x21a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4e      	ldr	r2, [pc, #312]	@ (80031e4 <HAL_GPIO_Init+0x30c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x216>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4d      	ldr	r2, [pc, #308]	@ (80031e8 <HAL_GPIO_Init+0x310>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x212>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4c      	ldr	r2, [pc, #304]	@ (80031ec <HAL_GPIO_Init+0x314>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x20e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4b      	ldr	r2, [pc, #300]	@ (80031f0 <HAL_GPIO_Init+0x318>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x20a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4a      	ldr	r2, [pc, #296]	@ (80031f4 <HAL_GPIO_Init+0x31c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x206>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a49      	ldr	r2, [pc, #292]	@ (80031f8 <HAL_GPIO_Init+0x320>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x202>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00c      	b.n	80030f4 <HAL_GPIO_Init+0x21c>
 80030da:	2307      	movs	r3, #7
 80030dc:	e00a      	b.n	80030f4 <HAL_GPIO_Init+0x21c>
 80030de:	2305      	movs	r3, #5
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x21c>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x21c>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x21c>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x21c>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x21c>
 80030f2:	2300      	movs	r3, #0
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003104:	4935      	ldr	r1, [pc, #212]	@ (80031dc <HAL_GPIO_Init+0x304>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003112:	4b3a      	ldr	r3, [pc, #232]	@ (80031fc <HAL_GPIO_Init+0x324>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003136:	4a31      	ldr	r2, [pc, #196]	@ (80031fc <HAL_GPIO_Init+0x324>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313c:	4b2f      	ldr	r3, [pc, #188]	@ (80031fc <HAL_GPIO_Init+0x324>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003160:	4a26      	ldr	r2, [pc, #152]	@ (80031fc <HAL_GPIO_Init+0x324>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003166:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <HAL_GPIO_Init+0x324>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318a:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <HAL_GPIO_Init+0x324>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003190:	4b1a      	ldr	r3, [pc, #104]	@ (80031fc <HAL_GPIO_Init+0x324>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b4:	4a11      	ldr	r2, [pc, #68]	@ (80031fc <HAL_GPIO_Init+0x324>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	f67f ae96 	bls.w	8002ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3724      	adds	r7, #36	@ 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40020400 	.word	0x40020400
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020c00 	.word	0x40020c00
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40021400 	.word	0x40021400
 80031f8:	40021800 	.word	0x40021800
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	041a      	lsls	r2, r3, #16
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43d9      	mvns	r1, r3
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	400b      	ands	r3, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0cc      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b68      	ldr	r3, [pc, #416]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d90c      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b65      	ldr	r3, [pc, #404]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b63      	ldr	r3, [pc, #396]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b8      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b59      	ldr	r3, [pc, #356]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a58      	ldr	r2, [pc, #352]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a52      	ldr	r2, [pc, #328]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b50      	ldr	r3, [pc, #320]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	494d      	ldr	r1, [pc, #308]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d044      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d119      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d003      	beq.n	8003326 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b3f      	ldr	r3, [pc, #252]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b3b      	ldr	r3, [pc, #236]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e067      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b37      	ldr	r3, [pc, #220]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4934      	ldr	r1, [pc, #208]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7ff f8ce 	bl	80024f8 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7ff f8ca 	bl	80024f8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d20c      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e032      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4916      	ldr	r1, [pc, #88]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490e      	ldr	r1, [pc, #56]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ee:	f000 f887 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490a      	ldr	r1, [pc, #40]	@ (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a09      	ldr	r2, [pc, #36]	@ (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800340a:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fe7a 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00
 8003424:	40023800 	.word	0x40023800
 8003428:	08018924 	.word	0x08018924
 800342c:	20000030 	.word	0x20000030
 8003430:	20000034 	.word	0x20000034

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	@ (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000030 	.word	0x20000030

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003450:	f7ff fff0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	@ (800346c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a9b      	lsrs	r3, r3, #10
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	@ (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	08018934 	.word	0x08018934

08003474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003478:	f7ff ffdc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0b5b      	lsrs	r3, r3, #13
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	@ (8003498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	08018934 	.word	0x08018934

0800349c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	220f      	movs	r2, #15
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034ac:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034b8:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034d0:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_RCC_GetClockConfig+0x60>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003504:	b0ae      	sub	sp, #184	@ 0xb8
 8003506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003526:	4bcb      	ldr	r3, [pc, #812]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b0c      	cmp	r3, #12
 8003530:	f200 8206 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x440>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003571 	.word	0x08003571
 8003540:	08003941 	.word	0x08003941
 8003544:	08003941 	.word	0x08003941
 8003548:	08003941 	.word	0x08003941
 800354c:	08003579 	.word	0x08003579
 8003550:	08003941 	.word	0x08003941
 8003554:	08003941 	.word	0x08003941
 8003558:	08003941 	.word	0x08003941
 800355c:	08003581 	.word	0x08003581
 8003560:	08003941 	.word	0x08003941
 8003564:	08003941 	.word	0x08003941
 8003568:	08003941 	.word	0x08003941
 800356c:	08003771 	.word	0x08003771
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4bb9      	ldr	r3, [pc, #740]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x358>)
 8003572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003576:	e1e7      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003578:	4bb8      	ldr	r3, [pc, #736]	@ (800385c <HAL_RCC_GetSysClockFreq+0x35c>)
 800357a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800357e:	e1e3      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003580:	4bb4      	ldr	r3, [pc, #720]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358c:	4bb1      	ldr	r3, [pc, #708]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d071      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003598:	4bae      	ldr	r3, [pc, #696]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d0:	0150      	lsls	r0, r2, #5
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4621      	mov	r1, r4
 80035d8:	1a51      	subs	r1, r2, r1
 80035da:	6439      	str	r1, [r7, #64]	@ 0x40
 80035dc:	4629      	mov	r1, r5
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035f0:	4649      	mov	r1, r9
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	4641      	mov	r1, r8
 80035f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fa:	4641      	mov	r1, r8
 80035fc:	018a      	lsls	r2, r1, #6
 80035fe:	4641      	mov	r1, r8
 8003600:	1a51      	subs	r1, r2, r1
 8003602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003604:	4649      	mov	r1, r9
 8003606:	eb63 0301 	sbc.w	r3, r3, r1
 800360a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003618:	4649      	mov	r1, r9
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	4641      	mov	r1, r8
 800361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003622:	4641      	mov	r1, r8
 8003624:	00ca      	lsls	r2, r1, #3
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4603      	mov	r3, r0
 800362c:	4622      	mov	r2, r4
 800362e:	189b      	adds	r3, r3, r2
 8003630:	633b      	str	r3, [r7, #48]	@ 0x30
 8003632:	462b      	mov	r3, r5
 8003634:	460a      	mov	r2, r1
 8003636:	eb42 0303 	adc.w	r3, r2, r3
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003648:	4629      	mov	r1, r5
 800364a:	024b      	lsls	r3, r1, #9
 800364c:	4621      	mov	r1, r4
 800364e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003652:	4621      	mov	r1, r4
 8003654:	024a      	lsls	r2, r1, #9
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003668:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800366c:	f7fc fe88 	bl	8000380 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800367a:	e067      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367c:	4b75      	ldr	r3, [pc, #468]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003688:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800368c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003696:	2300      	movs	r3, #0
 8003698:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800369a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800369e:	4622      	mov	r2, r4
 80036a0:	462b      	mov	r3, r5
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	0159      	lsls	r1, r3, #5
 80036ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b0:	0150      	lsls	r0, r2, #5
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4621      	mov	r1, r4
 80036b8:	1a51      	subs	r1, r2, r1
 80036ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036bc:	4629      	mov	r1, r5
 80036be:	eb63 0301 	sbc.w	r3, r3, r1
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80036d0:	4649      	mov	r1, r9
 80036d2:	018b      	lsls	r3, r1, #6
 80036d4:	4641      	mov	r1, r8
 80036d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036da:	4641      	mov	r1, r8
 80036dc:	018a      	lsls	r2, r1, #6
 80036de:	4641      	mov	r1, r8
 80036e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e4:	4649      	mov	r1, r9
 80036e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036fe:	4692      	mov	sl, r2
 8003700:	469b      	mov	fp, r3
 8003702:	4623      	mov	r3, r4
 8003704:	eb1a 0303 	adds.w	r3, sl, r3
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	462b      	mov	r3, r5
 800370c:	eb4b 0303 	adc.w	r3, fp, r3
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800371e:	4629      	mov	r1, r5
 8003720:	028b      	lsls	r3, r1, #10
 8003722:	4621      	mov	r1, r4
 8003724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003728:	4621      	mov	r1, r4
 800372a:	028a      	lsls	r2, r1, #10
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003734:	2200      	movs	r2, #0
 8003736:	673b      	str	r3, [r7, #112]	@ 0x70
 8003738:	677a      	str	r2, [r7, #116]	@ 0x74
 800373a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800373e:	f7fc fe1f 	bl	8000380 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4613      	mov	r3, r2
 8003748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800374c:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	3301      	adds	r3, #1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800375e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800376e:	e0eb      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003770:	4b38      	ldr	r3, [pc, #224]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800377c:	4b35      	ldr	r3, [pc, #212]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d06b      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003788:	4b32      	ldr	r3, [pc, #200]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x354>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	2200      	movs	r2, #0
 8003790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003792:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379a:	663b      	str	r3, [r7, #96]	@ 0x60
 800379c:	2300      	movs	r3, #0
 800379e:	667b      	str	r3, [r7, #100]	@ 0x64
 80037a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	f04f 0000 	mov.w	r0, #0
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	0159      	lsls	r1, r3, #5
 80037b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b6:	0150      	lsls	r0, r2, #5
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4621      	mov	r1, r4
 80037be:	1a51      	subs	r1, r2, r1
 80037c0:	61b9      	str	r1, [r7, #24]
 80037c2:	4629      	mov	r1, r5
 80037c4:	eb63 0301 	sbc.w	r3, r3, r1
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037d6:	4659      	mov	r1, fp
 80037d8:	018b      	lsls	r3, r1, #6
 80037da:	4651      	mov	r1, sl
 80037dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e0:	4651      	mov	r1, sl
 80037e2:	018a      	lsls	r2, r1, #6
 80037e4:	4651      	mov	r1, sl
 80037e6:	ebb2 0801 	subs.w	r8, r2, r1
 80037ea:	4659      	mov	r1, fp
 80037ec:	eb63 0901 	sbc.w	r9, r3, r1
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003804:	4690      	mov	r8, r2
 8003806:	4699      	mov	r9, r3
 8003808:	4623      	mov	r3, r4
 800380a:	eb18 0303 	adds.w	r3, r8, r3
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	462b      	mov	r3, r5
 8003812:	eb49 0303 	adc.w	r3, r9, r3
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003824:	4629      	mov	r1, r5
 8003826:	024b      	lsls	r3, r1, #9
 8003828:	4621      	mov	r1, r4
 800382a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800382e:	4621      	mov	r1, r4
 8003830:	024a      	lsls	r2, r1, #9
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800383a:	2200      	movs	r2, #0
 800383c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800383e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003844:	f7fc fd9c 	bl	8000380 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003852:	e065      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x420>
 8003854:	40023800 	.word	0x40023800
 8003858:	00f42400 	.word	0x00f42400
 800385c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x458>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	2200      	movs	r2, #0
 8003868:	4618      	mov	r0, r3
 800386a:	4611      	mov	r1, r2
 800386c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003870:	653b      	str	r3, [r7, #80]	@ 0x50
 8003872:	2300      	movs	r3, #0
 8003874:	657b      	str	r3, [r7, #84]	@ 0x54
 8003876:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800387a:	4642      	mov	r2, r8
 800387c:	464b      	mov	r3, r9
 800387e:	f04f 0000 	mov.w	r0, #0
 8003882:	f04f 0100 	mov.w	r1, #0
 8003886:	0159      	lsls	r1, r3, #5
 8003888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800388c:	0150      	lsls	r0, r2, #5
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4641      	mov	r1, r8
 8003894:	1a51      	subs	r1, r2, r1
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	4649      	mov	r1, r9
 800389a:	eb63 0301 	sbc.w	r3, r3, r1
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038ac:	4659      	mov	r1, fp
 80038ae:	018b      	lsls	r3, r1, #6
 80038b0:	4651      	mov	r1, sl
 80038b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038b6:	4651      	mov	r1, sl
 80038b8:	018a      	lsls	r2, r1, #6
 80038ba:	4651      	mov	r1, sl
 80038bc:	1a54      	subs	r4, r2, r1
 80038be:	4659      	mov	r1, fp
 80038c0:	eb63 0501 	sbc.w	r5, r3, r1
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	464b      	mov	r3, r9
 80038e0:	eb45 0303 	adc.w	r3, r5, r3
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038fc:	4621      	mov	r1, r4
 80038fe:	028a      	lsls	r2, r1, #10
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003908:	2200      	movs	r2, #0
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800390c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800390e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003912:	f7fc fd35 	bl	8000380 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4613      	mov	r3, r2
 800391c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003920:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x458>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0f1b      	lsrs	r3, r3, #28
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800392e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800393e:	e003      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800394c:	4618      	mov	r0, r3
 800394e:	37b8      	adds	r7, #184	@ 0xb8
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400

08003960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e28d      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8083 	beq.w	8003a86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003980:	4b94      	ldr	r3, [pc, #592]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b04      	cmp	r3, #4
 800398a:	d019      	beq.n	80039c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800398c:	4b91      	ldr	r3, [pc, #580]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
        || \
 8003994:	2b08      	cmp	r3, #8
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003998:	4b8e      	ldr	r3, [pc, #568]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a4:	d00c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a6:	4b8b      	ldr	r3, [pc, #556]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d112      	bne.n	80039d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039be:	d10b      	bne.n	80039d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	4b84      	ldr	r3, [pc, #528]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d05b      	beq.n	8003a84 <HAL_RCC_OscConfig+0x124>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d157      	bne.n	8003a84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e25a      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e0:	d106      	bne.n	80039f0 <HAL_RCC_OscConfig+0x90>
 80039e2:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7b      	ldr	r2, [pc, #492]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e01d      	b.n	8003a2c <HAL_RCC_OscConfig+0xcc>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0xb4>
 80039fa:	4b76      	ldr	r3, [pc, #472]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a75      	ldr	r2, [pc, #468]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b73      	ldr	r3, [pc, #460]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a72      	ldr	r2, [pc, #456]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0xcc>
 8003a14:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fd60 	bl	80024f8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fd5c 	bl	80024f8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	@ 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e21f      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b61      	ldr	r3, [pc, #388]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fd4c 	bl	80024f8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe fd48 	bl	80024f8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	@ 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e20b      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	4b57      	ldr	r3, [pc, #348]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x104>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d06f      	beq.n	8003b72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a92:	4b50      	ldr	r3, [pc, #320]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
        || \
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b47      	ldr	r3, [pc, #284]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b44      	ldr	r3, [pc, #272]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x186>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1d3      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4937      	ldr	r1, [pc, #220]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b34      	ldr	r3, [pc, #208]	@ (8003bd8 <HAL_RCC_OscConfig+0x278>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fcf5 	bl	80024f8 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe fcf1 	bl	80024f8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1b4      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b28      	ldr	r3, [pc, #160]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4925      	ldr	r1, [pc, #148]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <HAL_RCC_OscConfig+0x278>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fcd4 	bl	80024f8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fe fcd0 	bl	80024f8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e193      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d036      	beq.n	8003bec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_RCC_OscConfig+0x27c>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fe fcb4 	bl	80024f8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fe fcb0 	bl	80024f8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e173      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x234>
 8003bb2:	e01b      	b.n	8003bec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_OscConfig+0x27c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bba:	f7fe fc9d 	bl	80024f8 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fc99 	bl	80024f8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d907      	bls.n	8003be0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e15c      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	42470000 	.word	0x42470000
 8003bdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	4b8a      	ldr	r3, [pc, #552]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ea      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8097 	beq.w	8003d28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b83      	ldr	r3, [pc, #524]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	4a7e      	ldr	r2, [pc, #504]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b79      	ldr	r3, [pc, #484]	@ (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d118      	bne.n	8003c68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c36:	4b76      	ldr	r3, [pc, #472]	@ (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	@ (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c42:	f7fe fc59 	bl	80024f8 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4a:	f7fe fc55 	bl	80024f8 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e118      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x31e>
 8003c70:	4b66      	ldr	r3, [pc, #408]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c74:	4a65      	ldr	r2, [pc, #404]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x358>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x340>
 8003c86:	4b61      	ldr	r3, [pc, #388]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	4a60      	ldr	r2, [pc, #384]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c92:	4b5e      	ldr	r3, [pc, #376]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	4a5d      	ldr	r2, [pc, #372]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x358>
 8003ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca4:	4a59      	ldr	r2, [pc, #356]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cac:	4b57      	ldr	r3, [pc, #348]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a56      	ldr	r2, [pc, #344]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fc1a 	bl	80024f8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fc16 	bl	80024f8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0d7      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	4b4b      	ldr	r3, [pc, #300]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x368>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe fc04 	bl	80024f8 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fe fc00 	bl	80024f8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0c1      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0a:	4b40      	ldr	r3, [pc, #256]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ee      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	4a3a      	ldr	r2, [pc, #232]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80ad 	beq.w	8003e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d32:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d060      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d145      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <HAL_RCC_OscConfig+0x4b4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fbd4 	bl	80024f8 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe fbd0 	bl	80024f8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e093      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b29      	ldr	r3, [pc, #164]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	491b      	ldr	r1, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x4b4>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fe fba5 	bl	80024f8 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fe fba1 	bl	80024f8 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e064      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc4:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x452>
 8003dd0:	e05c      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <HAL_RCC_OscConfig+0x4b4>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fb8e 	bl	80024f8 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fe fb8a 	bl	80024f8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e04d      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x480>
 8003dfe:	e045      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e040      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
 8003e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e18:	4b1f      	ldr	r3, [pc, #124]	@ (8003e98 <HAL_RCC_OscConfig+0x538>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d030      	beq.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d129      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d122      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d119      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10f      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e041      	b.n	8003f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fff0 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 fd96 	bl	8004a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d001      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e04e      	b.n	8003ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a23      	ldr	r2, [pc, #140]	@ (8004000 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d022      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7e:	d01d      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1f      	ldr	r2, [pc, #124]	@ (8004004 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004008 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <HAL_TIM_Base_Start_IT+0xd0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8004010 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a19      	ldr	r2, [pc, #100]	@ (8004014 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a18      	ldr	r2, [pc, #96]	@ (8004018 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d111      	bne.n	8003fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d010      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	e007      	b.n	8003ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40010400 	.word	0x40010400
 8004014:	40014000 	.word	0x40014000
 8004018:	40001800 	.word	0x40001800

0800401c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e041      	b.n	80040b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f839 	bl	80040ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fcd6 	bl	8004a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <HAL_TIM_PWM_Start+0x24>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e022      	b.n	800413a <HAL_TIM_PWM_Start+0x6a>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d109      	bne.n	800410e <HAL_TIM_PWM_Start+0x3e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	e015      	b.n	800413a <HAL_TIM_PWM_Start+0x6a>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d109      	bne.n	8004128 <HAL_TIM_PWM_Start+0x58>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e008      	b.n	800413a <HAL_TIM_PWM_Start+0x6a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e07c      	b.n	800423c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0x82>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004150:	e013      	b.n	800417a <HAL_TIM_PWM_Start+0xaa>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0x92>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004160:	e00b      	b.n	800417a <HAL_TIM_PWM_Start+0xaa>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xa2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004170:	e003      	b.n	800417a <HAL_TIM_PWM_Start+0xaa>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	6839      	ldr	r1, [r7, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 ff32 	bl	8004fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2d      	ldr	r2, [pc, #180]	@ (8004244 <HAL_TIM_PWM_Start+0x174>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_TIM_PWM_Start+0xcc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2c      	ldr	r2, [pc, #176]	@ (8004248 <HAL_TIM_PWM_Start+0x178>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_PWM_Start+0xd0>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_TIM_PWM_Start+0xd2>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <HAL_TIM_PWM_Start+0x174>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c8:	d01d      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <HAL_TIM_PWM_Start+0x17c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <HAL_TIM_PWM_Start+0x180>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004254 <HAL_TIM_PWM_Start+0x184>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <HAL_TIM_PWM_Start+0x178>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <HAL_TIM_PWM_Start+0x188>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_TIM_PWM_Start+0x18c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d010      	beq.n	800423a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	e007      	b.n	800423a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40010000 	.word	0x40010000
 8004248:	40010400 	.word	0x40010400
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000
 800425c:	40001800 	.word	0x40001800

08004260 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e097      	b.n	80043a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fd fd25 	bl	8001cd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042a4:	f023 0307 	bic.w	r3, r3, #7
 80042a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f000 fba9 	bl	8004a0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	4313      	orrs	r3, r2
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004300:	f023 030c 	bic.w	r3, r3, #12
 8004304:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800430c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	4313      	orrs	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	4313      	orrs	r3, r2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4313      	orrs	r3, r2
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d110      	bne.n	80043fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043e2:	7b7b      	ldrb	r3, [r7, #13]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d001      	beq.n	80043ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e069      	b.n	80044c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043fc:	e031      	b.n	8004462 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d110      	bne.n	8004426 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004404:	7bbb      	ldrb	r3, [r7, #14]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800440a:	7b3b      	ldrb	r3, [r7, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e055      	b.n	80044c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004424:	e01d      	b.n	8004462 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d108      	bne.n	800443e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800442c:	7bbb      	ldrb	r3, [r7, #14]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004432:	7b7b      	ldrb	r3, [r7, #13]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004438:	7b3b      	ldrb	r3, [r7, #12]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d001      	beq.n	8004442 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e03e      	b.n	80044c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_Encoder_Start+0xc4>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b04      	cmp	r3, #4
 800446c:	d008      	beq.n	8004480 <HAL_TIM_Encoder_Start+0xd4>
 800446e:	e00f      	b.n	8004490 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2201      	movs	r2, #1
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fdb7 	bl	8004fec <TIM_CCxChannelCmd>
      break;
 800447e:	e016      	b.n	80044ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2201      	movs	r2, #1
 8004486:	2104      	movs	r1, #4
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fdaf 	bl	8004fec <TIM_CCxChannelCmd>
      break;
 800448e:	e00e      	b.n	80044ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2201      	movs	r2, #1
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fda7 	bl	8004fec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2201      	movs	r2, #1
 80044a4:	2104      	movs	r1, #4
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fda0 	bl	8004fec <TIM_CCxChannelCmd>
      break;
 80044ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d020      	beq.n	800452c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01b      	beq.n	800452c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0202 	mvn.w	r2, #2
 80044fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa5b 	bl	80049ce <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa4d 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa5e 	bl	80049e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0204 	mvn.w	r2, #4
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa35 	bl	80049ce <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fa27 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fa38 	bl	80049e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01b      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0208 	mvn.w	r2, #8
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa0f 	bl	80049ce <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fa01 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fa12 	bl	80049e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0210 	mvn.w	r2, #16
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2208      	movs	r2, #8
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f9e9 	bl	80049ce <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f9db 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f9ec 	bl	80049e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0201 	mvn.w	r2, #1
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd f9aa 	bl	8001988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fd76 	bl	8005144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9bd 	bl	80049f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00c      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0220 	mvn.w	r2, #32
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fd48 	bl	8005130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e0ae      	b.n	8004824 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	f200 809f 	bhi.w	8004814 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046d6:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004815 	.word	0x08004815
 80046e4:	08004815 	.word	0x08004815
 80046e8:	08004815 	.word	0x08004815
 80046ec:	08004751 	.word	0x08004751
 80046f0:	08004815 	.word	0x08004815
 80046f4:	08004815 	.word	0x08004815
 80046f8:	08004815 	.word	0x08004815
 80046fc:	08004793 	.word	0x08004793
 8004700:	08004815 	.word	0x08004815
 8004704:	08004815 	.word	0x08004815
 8004708:	08004815 	.word	0x08004815
 800470c:	080047d3 	.word	0x080047d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fa1e 	bl	8004b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0208 	orr.w	r2, r2, #8
 800472a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0204 	bic.w	r2, r2, #4
 800473a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6999      	ldr	r1, [r3, #24]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	619a      	str	r2, [r3, #24]
      break;
 800474e:	e064      	b.n	800481a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fa6e 	bl	8004c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800476a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800477a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6999      	ldr	r1, [r3, #24]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	021a      	lsls	r2, r3, #8
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	619a      	str	r2, [r3, #24]
      break;
 8004790:	e043      	b.n	800481a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fac3 	bl	8004d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0208 	orr.w	r2, r2, #8
 80047ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0204 	bic.w	r2, r2, #4
 80047bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69d9      	ldr	r1, [r3, #28]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	61da      	str	r2, [r3, #28]
      break;
 80047d0:	e023      	b.n	800481a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fb17 	bl	8004e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69d9      	ldr	r1, [r3, #28]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	021a      	lsls	r2, r3, #8
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	61da      	str	r2, [r3, #28]
      break;
 8004812:	e002      	b.n	800481a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
      break;
 8004818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIM_ConfigClockSource+0x1c>
 8004844:	2302      	movs	r3, #2
 8004846:	e0b4      	b.n	80049b2 <HAL_TIM_ConfigClockSource+0x186>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800486e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004880:	d03e      	beq.n	8004900 <HAL_TIM_ConfigClockSource+0xd4>
 8004882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004886:	f200 8087 	bhi.w	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488e:	f000 8086 	beq.w	800499e <HAL_TIM_ConfigClockSource+0x172>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004896:	d87f      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b70      	cmp	r3, #112	@ 0x70
 800489a:	d01a      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0xa6>
 800489c:	2b70      	cmp	r3, #112	@ 0x70
 800489e:	d87b      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b60      	cmp	r3, #96	@ 0x60
 80048a2:	d050      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0x11a>
 80048a4:	2b60      	cmp	r3, #96	@ 0x60
 80048a6:	d877      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b50      	cmp	r3, #80	@ 0x50
 80048aa:	d03c      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0xfa>
 80048ac:	2b50      	cmp	r3, #80	@ 0x50
 80048ae:	d873      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b40      	cmp	r3, #64	@ 0x40
 80048b2:	d058      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x13a>
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d86f      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b30      	cmp	r3, #48	@ 0x30
 80048ba:	d064      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048bc:	2b30      	cmp	r3, #48	@ 0x30
 80048be:	d86b      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d060      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d867      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05c      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d05a      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048d0:	e062      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e2:	f000 fb63 	bl	8004fac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	609a      	str	r2, [r3, #8]
      break;
 80048fe:	e04f      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	f000 fb4c 	bl	8004fac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004922:	609a      	str	r2, [r3, #8]
      break;
 8004924:	e03c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	461a      	mov	r2, r3
 8004934:	f000 fac0 	bl	8004eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2150      	movs	r1, #80	@ 0x50
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb19 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004944:	e02c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004952:	461a      	mov	r2, r3
 8004954:	f000 fadf 	bl	8004f16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2160      	movs	r1, #96	@ 0x60
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fb09 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004964:	e01c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004972:	461a      	mov	r2, r3
 8004974:	f000 faa0 	bl	8004eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2140      	movs	r1, #64	@ 0x40
 800497e:	4618      	mov	r0, r3
 8004980:	f000 faf9 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004984:	e00c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f000 faf0 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004996:	e003      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      break;
 800499c:	e000      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800499e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a43      	ldr	r2, [pc, #268]	@ (8004b2c <TIM_Base_SetConfig+0x120>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d00f      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a40      	ldr	r2, [pc, #256]	@ (8004b30 <TIM_Base_SetConfig+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a3f      	ldr	r2, [pc, #252]	@ (8004b34 <TIM_Base_SetConfig+0x128>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b38 <TIM_Base_SetConfig+0x12c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a3d      	ldr	r2, [pc, #244]	@ (8004b3c <TIM_Base_SetConfig+0x130>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a32      	ldr	r2, [pc, #200]	@ (8004b2c <TIM_Base_SetConfig+0x120>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6c:	d027      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2f      	ldr	r2, [pc, #188]	@ (8004b30 <TIM_Base_SetConfig+0x124>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d023      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2e      	ldr	r2, [pc, #184]	@ (8004b34 <TIM_Base_SetConfig+0x128>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01f      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2d      	ldr	r2, [pc, #180]	@ (8004b38 <TIM_Base_SetConfig+0x12c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	@ (8004b3c <TIM_Base_SetConfig+0x130>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d017      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	@ (8004b40 <TIM_Base_SetConfig+0x134>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2a      	ldr	r2, [pc, #168]	@ (8004b44 <TIM_Base_SetConfig+0x138>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	@ (8004b48 <TIM_Base_SetConfig+0x13c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a28      	ldr	r2, [pc, #160]	@ (8004b4c <TIM_Base_SetConfig+0x140>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a27      	ldr	r2, [pc, #156]	@ (8004b50 <TIM_Base_SetConfig+0x144>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a26      	ldr	r2, [pc, #152]	@ (8004b54 <TIM_Base_SetConfig+0x148>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a0e      	ldr	r2, [pc, #56]	@ (8004b2c <TIM_Base_SetConfig+0x120>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_Base_SetConfig+0xf2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a10      	ldr	r2, [pc, #64]	@ (8004b3c <TIM_Base_SetConfig+0x130>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d103      	bne.n	8004b06 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40010400 	.word	0x40010400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40001800 	.word	0x40001800
 8004b50:	40001c00 	.word	0x40001c00
 8004b54:	40002000 	.word	0x40002000

08004b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f023 0201 	bic.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0303 	bic.w	r3, r3, #3
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 0302 	bic.w	r3, r3, #2
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a20      	ldr	r2, [pc, #128]	@ (8004c30 <TIM_OC1_SetConfig+0xd8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC1_SetConfig+0x64>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c34 <TIM_OC1_SetConfig+0xdc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10c      	bne.n	8004bd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0308 	bic.w	r3, r3, #8
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f023 0304 	bic.w	r3, r3, #4
 8004bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	@ (8004c30 <TIM_OC1_SetConfig+0xd8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_OC1_SetConfig+0x8e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a14      	ldr	r2, [pc, #80]	@ (8004c34 <TIM_OC1_SetConfig+0xdc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d111      	bne.n	8004c0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	621a      	str	r2, [r3, #32]
}
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40010400 	.word	0x40010400

08004c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 0210 	bic.w	r2, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a22      	ldr	r2, [pc, #136]	@ (8004d1c <TIM_OC2_SetConfig+0xe4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_OC2_SetConfig+0x68>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a21      	ldr	r2, [pc, #132]	@ (8004d20 <TIM_OC2_SetConfig+0xe8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10d      	bne.n	8004cbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a17      	ldr	r2, [pc, #92]	@ (8004d1c <TIM_OC2_SetConfig+0xe4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC2_SetConfig+0x94>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a16      	ldr	r2, [pc, #88]	@ (8004d20 <TIM_OC2_SetConfig+0xe8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d113      	bne.n	8004cf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400

08004d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0303 	bic.w	r3, r3, #3
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	@ (8004e04 <TIM_OC3_SetConfig+0xe0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <TIM_OC3_SetConfig+0x66>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a20      	ldr	r2, [pc, #128]	@ (8004e08 <TIM_OC3_SetConfig+0xe4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10d      	bne.n	8004da6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a16      	ldr	r2, [pc, #88]	@ (8004e04 <TIM_OC3_SetConfig+0xe0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_OC3_SetConfig+0x92>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <TIM_OC3_SetConfig+0xe4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d113      	bne.n	8004dde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400

08004e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a12      	ldr	r2, [pc, #72]	@ (8004eb0 <TIM_OC4_SetConfig+0xa4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC4_SetConfig+0x68>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a11      	ldr	r2, [pc, #68]	@ (8004eb4 <TIM_OC4_SetConfig+0xa8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d109      	bne.n	8004e88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 030a 	bic.w	r3, r3, #10
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 0210 	bic.w	r2, r3, #16
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	031b      	lsls	r3, r3, #12
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f043 0307 	orr.w	r3, r3, #7
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	021a      	lsls	r2, r3, #8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2201      	movs	r2, #1
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1a      	ldr	r2, [r3, #32]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	fa01 f303 	lsl.w	r3, r1, r3
 8005024:	431a      	orrs	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800504c:	2302      	movs	r3, #2
 800504e:	e05a      	b.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a21      	ldr	r2, [pc, #132]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509c:	d01d      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1b      	ldr	r2, [pc, #108]	@ (800511c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a18      	ldr	r2, [pc, #96]	@ (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a17      	ldr	r2, [pc, #92]	@ (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a15      	ldr	r2, [pc, #84]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10c      	bne.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40010000 	.word	0x40010000
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40010400 	.word	0x40010400
 8005128:	40014000 	.word	0x40014000
 800512c:	40001800 	.word	0x40001800

08005130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e042      	b.n	80051f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc ff0a 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	@ 0x24
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800519a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fff5 	bl	800618c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	@ 0x30
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	d162      	bne.n	80052d8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_Transmit_DMA+0x26>
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e05b      	b.n	80052da <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	88fa      	ldrh	r2, [r7, #6]
 8005232:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2221      	movs	r2, #33	@ 0x21
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005246:	4a27      	ldr	r2, [pc, #156]	@ (80052e4 <HAL_UART_Transmit_DMA+0xec>)
 8005248:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	4a26      	ldr	r2, [pc, #152]	@ (80052e8 <HAL_UART_Transmit_DMA+0xf0>)
 8005250:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005256:	4a25      	ldr	r2, [pc, #148]	@ (80052ec <HAL_UART_Transmit_DMA+0xf4>)
 8005258:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	2200      	movs	r2, #0
 8005260:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005262:	f107 0308 	add.w	r3, r7, #8
 8005266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3304      	adds	r3, #4
 8005276:	461a      	mov	r2, r3
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	f7fd fad9 	bl	8002830 <HAL_DMA_Start_IT>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2210      	movs	r2, #16
 8005288:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e021      	b.n	80052da <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800529e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3314      	adds	r3, #20
 80052a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	617b      	str	r3, [r7, #20]
   return(result);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3314      	adds	r3, #20
 80052be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80052c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6a39      	ldr	r1, [r7, #32]
 80052c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3730      	adds	r7, #48	@ 0x30
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	08005a09 	.word	0x08005a09
 80052e8:	08005aa3 	.word	0x08005aa3
 80052ec:	08005c27 	.word	0x08005c27

080052f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b20      	cmp	r3, #32
 8005308:	d112      	bne.n	8005330 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_UART_Receive_DMA+0x26>
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e00b      	b.n	8005332 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	461a      	mov	r2, r3
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fcc8 	bl	8005cbc <UART_Start_Receive_DMA>
 800532c:	4603      	mov	r3, r0
 800532e:	e000      	b.n	8005332 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b090      	sub	sp, #64	@ 0x40
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005342:	2300      	movs	r3, #0
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005350:	2b80      	cmp	r3, #128	@ 0x80
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b21      	cmp	r3, #33	@ 0x21
 8005366:	d128      	bne.n	80053ba <HAL_UART_DMAStop+0x80>
 8005368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d025      	beq.n	80053ba <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3314      	adds	r3, #20
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	623b      	str	r3, [r7, #32]
   return(result);
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3314      	adds	r3, #20
 800538c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800538e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e5      	bne.n	800536e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fd fa96 	bl	80028e0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fd27 	bl	8005e08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b22      	cmp	r3, #34	@ 0x22
 80053da:	d128      	bne.n	800542e <HAL_UART_DMAStop+0xf4>
 80053dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d025      	beq.n	800542e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005402:	61fa      	str	r2, [r7, #28]
 8005404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	69b9      	ldr	r1, [r7, #24]
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	617b      	str	r3, [r7, #20]
   return(result);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e5      	bne.n	80053e2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	4618      	mov	r0, r3
 8005424:	f7fd fa5c 	bl	80028e0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fd15 	bl	8005e58 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3740      	adds	r7, #64	@ 0x40
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b0ba      	sub	sp, #232	@ 0xe8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005464:	2300      	movs	r3, #0
 8005466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800546a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_UART_IRQHandler+0x66>
 800548a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fdba 	bl	8006010 <UART_Receive_IT>
      return;
 800549c:	e273      	b.n	8005986 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800549e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80de 	beq.w	8005664 <HAL_UART_IRQHandler+0x22c>
 80054a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80d1 	beq.w	8005664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_UART_IRQHandler+0xae>
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	f043 0201 	orr.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <HAL_UART_IRQHandler+0xd2>
 80054f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	f043 0202 	orr.w	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_UART_IRQHandler+0xf6>
 8005516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f043 0204 	orr.w	r2, r3, #4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d011      	beq.n	800555e <HAL_UART_IRQHandler+0x126>
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d105      	bne.n	8005552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005556:	f043 0208 	orr.w	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 820a 	beq.w	800597c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_UART_IRQHandler+0x14e>
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fd45 	bl	8006010 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005590:	2b40      	cmp	r3, #64	@ 0x40
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d103      	bne.n	80055b2 <HAL_UART_IRQHandler+0x17a>
 80055aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d04f      	beq.n	8005652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fc50 	bl	8005e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d141      	bne.n	800564a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3314      	adds	r3, #20
 80055cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800560a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1d9      	bne.n	80055c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d013      	beq.n	8005642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561e:	4a8a      	ldr	r2, [pc, #552]	@ (8005848 <HAL_UART_IRQHandler+0x410>)
 8005620:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005626:	4618      	mov	r0, r3
 8005628:	f7fd f9ca 	bl	80029c0 <HAL_DMA_Abort_IT>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800563c:	4610      	mov	r0, r2
 800563e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e00e      	b.n	8005660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9ca 	bl	80059dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	e00a      	b.n	8005660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9c6 	bl	80059dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e006      	b.n	8005660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9c2 	bl	80059dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800565e:	e18d      	b.n	800597c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	bf00      	nop
    return;
 8005662:	e18b      	b.n	800597c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	2b01      	cmp	r3, #1
 800566a:	f040 8167 	bne.w	800593c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8160 	beq.w	800593c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8159 	beq.w	800593c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056aa:	2b40      	cmp	r3, #64	@ 0x40
 80056ac:	f040 80ce 	bne.w	800584c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80a9 	beq.w	8005818 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056ce:	429a      	cmp	r2, r3
 80056d0:	f080 80a2 	bcs.w	8005818 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e6:	f000 8088 	beq.w	80057fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800571a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005722:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800572e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1d9      	bne.n	80056ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3314      	adds	r3, #20
 800573c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800575a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800575e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800576c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e1      	bne.n	8005736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3314      	adds	r3, #20
 8005778:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3314      	adds	r3, #20
 8005792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005798:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800579c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e3      	bne.n	8005772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ca:	f023 0310 	bic.w	r3, r3, #16
 80057ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e3      	bne.n	80057b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fd f873 	bl	80028e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005808:	b29b      	uxth	r3, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	b29b      	uxth	r3, r3
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8ed 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005816:	e0b3      	b.n	8005980 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800581c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005820:	429a      	cmp	r2, r3
 8005822:	f040 80ad 	bne.w	8005980 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005830:	f040 80a6 	bne.w	8005980 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f8d5 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
      return;
 8005846:	e09b      	b.n	8005980 <HAL_UART_IRQHandler+0x548>
 8005848:	08005f1f 	.word	0x08005f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005854:	b29b      	uxth	r3, r3
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 808e 	beq.w	8005984 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8089 	beq.w	8005984 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005888:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005896:	647a      	str	r2, [r7, #68]	@ 0x44
 8005898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800589c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e3      	bne.n	8005872 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3314      	adds	r3, #20
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	623b      	str	r3, [r7, #32]
   return(result);
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3314      	adds	r3, #20
 80058ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e3      	bne.n	80058aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0310 	bic.w	r3, r3, #16
 8005906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005914:	61fa      	str	r2, [r7, #28]
 8005916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	69b9      	ldr	r1, [r7, #24]
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	617b      	str	r3, [r7, #20]
   return(result);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e3      	bne.n	80058f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800592e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f85b 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800593a:	e023      	b.n	8005984 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <HAL_UART_IRQHandler+0x524>
 8005948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800594c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 faf3 	bl	8005f40 <UART_Transmit_IT>
    return;
 800595a:	e014      	b.n	8005986 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <HAL_UART_IRQHandler+0x54e>
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb33 	bl	8005fe0 <UART_EndTransmit_IT>
    return;
 800597a:	e004      	b.n	8005986 <HAL_UART_IRQHandler+0x54e>
    return;
 800597c:	bf00      	nop
 800597e:	e002      	b.n	8005986 <HAL_UART_IRQHandler+0x54e>
      return;
 8005980:	bf00      	nop
 8005982:	e000      	b.n	8005986 <HAL_UART_IRQHandler+0x54e>
      return;
 8005984:	bf00      	nop
  }
}
 8005986:	37e8      	adds	r7, #232	@ 0xe8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b090      	sub	sp, #64	@ 0x40
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d137      	bne.n	8005a94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a26:	2200      	movs	r2, #0
 8005a28:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	623b      	str	r3, [r7, #32]
   return(result);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a7e:	61fa      	str	r2, [r7, #28]
 8005a80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a92:	e002      	b.n	8005a9a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a96:	f7ff ff79 	bl	800598c <HAL_UART_TxCpltCallback>
}
 8005a9a:	bf00      	nop
 8005a9c:	3740      	adds	r7, #64	@ 0x40
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff ff75 	bl	80059a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab6:	bf00      	nop
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b09c      	sub	sp, #112	@ 0x70
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d172      	bne.n	8005bc0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005adc:	2200      	movs	r2, #0
 8005ade:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3314      	adds	r3, #20
 8005b32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b34:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b36:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	623b      	str	r3, [r7, #32]
   return(result);
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3314      	adds	r3, #20
 8005b66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b68:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d119      	bne.n	8005bc0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0310 	bic.w	r3, r3, #16
 8005ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005bac:	61fa      	str	r2, [r7, #28]
 8005bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	69b9      	ldr	r1, [r7, #24]
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d106      	bne.n	8005bdc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005bd6:	f7ff ff0b 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bda:	e002      	b.n	8005be2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005bdc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005bde:	f7ff fee9 	bl	80059b4 <HAL_UART_RxCpltCallback>
}
 8005be2:	bf00      	nop
 8005be4:	3770      	adds	r7, #112	@ 0x70
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d108      	bne.n	8005c18 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff feed 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c16:	e002      	b.n	8005c1e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff fed5 	bl	80059c8 <HAL_UART_RxHalfCpltCallback>
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c42:	2b80      	cmp	r3, #128	@ 0x80
 8005c44:	bf0c      	ite	eq
 8005c46:	2301      	moveq	r3, #1
 8005c48:	2300      	movne	r3, #0
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b21      	cmp	r3, #33	@ 0x21
 8005c58:	d108      	bne.n	8005c6c <UART_DMAError+0x46>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005c66:	68b8      	ldr	r0, [r7, #8]
 8005c68:	f000 f8ce 	bl	8005e08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c76:	2b40      	cmp	r3, #64	@ 0x40
 8005c78:	bf0c      	ite	eq
 8005c7a:	2301      	moveq	r3, #1
 8005c7c:	2300      	movne	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b22      	cmp	r3, #34	@ 0x22
 8005c8c:	d108      	bne.n	8005ca0 <UART_DMAError+0x7a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2200      	movs	r2, #0
 8005c98:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005c9a:	68b8      	ldr	r0, [r7, #8]
 8005c9c:	f000 f8dc 	bl	8005e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca4:	f043 0210 	orr.w	r2, r3, #16
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cac:	68b8      	ldr	r0, [r7, #8]
 8005cae:	f7ff fe95 	bl	80059dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b098      	sub	sp, #96	@ 0x60
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	88fa      	ldrh	r2, [r7, #6]
 8005cd4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2222      	movs	r2, #34	@ 0x22
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce8:	4a44      	ldr	r2, [pc, #272]	@ (8005dfc <UART_Start_Receive_DMA+0x140>)
 8005cea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf0:	4a43      	ldr	r2, [pc, #268]	@ (8005e00 <UART_Start_Receive_DMA+0x144>)
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf8:	4a42      	ldr	r2, [pc, #264]	@ (8005e04 <UART_Start_Receive_DMA+0x148>)
 8005cfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d00:	2200      	movs	r2, #0
 8005d02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005d04:	f107 0308 	add.w	r3, r7, #8
 8005d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	f7fc fd88 	bl	8002830 <HAL_DMA_Start_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2210      	movs	r2, #16
 8005d2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e05d      	b.n	8005df4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005d38:	2300      	movs	r3, #0
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d019      	beq.n	8005d8a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d76:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3314      	adds	r3, #20
 8005da8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005daa:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005dac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005db0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e5      	bne.n	8005d8a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3314      	adds	r3, #20
 8005dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3314      	adds	r3, #20
 8005ddc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dde:	627a      	str	r2, [r7, #36]	@ 0x24
 8005de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3760      	adds	r7, #96	@ 0x60
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	08005abf 	.word	0x08005abf
 8005e00:	08005beb 	.word	0x08005beb
 8005e04:	08005c27 	.word	0x08005c27

08005e08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b089      	sub	sp, #36	@ 0x24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	330c      	adds	r3, #12
 8005e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	61ba      	str	r2, [r7, #24]
 8005e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6979      	ldr	r1, [r7, #20]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e5      	bne.n	8005e10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005e4c:	bf00      	nop
 8005e4e:	3724      	adds	r7, #36	@ 0x24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b095      	sub	sp, #84	@ 0x54
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e80:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3314      	adds	r3, #20
 8005eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e5      	bne.n	8005e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d119      	bne.n	8005f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0310 	bic.w	r3, r3, #16
 8005ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef0:	61ba      	str	r2, [r7, #24]
 8005ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6979      	ldr	r1, [r7, #20]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	613b      	str	r3, [r7, #16]
   return(result);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e5      	bne.n	8005ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f12:	bf00      	nop
 8005f14:	3754      	adds	r7, #84	@ 0x54
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff fd52 	bl	80059dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b21      	cmp	r3, #33	@ 0x21
 8005f52:	d13e      	bne.n	8005fd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5c:	d114      	bne.n	8005f88 <UART_Transmit_IT+0x48>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d110      	bne.n	8005f88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	1c9a      	adds	r2, r3, #2
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	621a      	str	r2, [r3, #32]
 8005f86:	e008      	b.n	8005f9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	1c59      	adds	r1, r3, #1
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6211      	str	r1, [r2, #32]
 8005f92:	781a      	ldrb	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10f      	bne.n	8005fce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e000      	b.n	8005fd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
  }
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fcc3 	bl	800598c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08c      	sub	sp, #48	@ 0x30
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800601c:	2300      	movs	r3, #0
 800601e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b22      	cmp	r3, #34	@ 0x22
 800602a:	f040 80aa 	bne.w	8006182 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006036:	d115      	bne.n	8006064 <UART_Receive_IT+0x54>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d111      	bne.n	8006064 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006052:	b29a      	uxth	r2, r3
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	629a      	str	r2, [r3, #40]	@ 0x28
 8006062:	e024      	b.n	80060ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006072:	d007      	beq.n	8006084 <UART_Receive_IT+0x74>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <UART_Receive_IT+0x82>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e008      	b.n	80060a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	4619      	mov	r1, r3
 80060bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d15d      	bne.n	800617e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0220 	bic.w	r2, r2, #32
 80060d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006104:	2b01      	cmp	r3, #1
 8006106:	d135      	bne.n	8006174 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	613b      	str	r3, [r7, #16]
   return(result);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f023 0310 	bic.w	r3, r3, #16
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612e:	623a      	str	r2, [r7, #32]
 8006130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	69f9      	ldr	r1, [r7, #28]
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	61bb      	str	r3, [r7, #24]
   return(result);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b10      	cmp	r3, #16
 800614e:	d10a      	bne.n	8006166 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff fc3f 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
 8006172:	e002      	b.n	800617a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fc1d 	bl	80059b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	e002      	b.n	8006184 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	e000      	b.n	8006184 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006182:	2302      	movs	r3, #2
  }
}
 8006184:	4618      	mov	r0, r3
 8006186:	3730      	adds	r7, #48	@ 0x30
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800618c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006190:	b0c0      	sub	sp, #256	@ 0x100
 8006192:	af00      	add	r7, sp, #0
 8006194:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	68d9      	ldr	r1, [r3, #12]
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	ea40 0301 	orr.w	r3, r0, r1
 80061b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061e4:	f021 010c 	bic.w	r1, r1, #12
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061f2:	430b      	orrs	r3, r1
 80061f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006206:	6999      	ldr	r1, [r3, #24]
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	ea40 0301 	orr.w	r3, r0, r1
 8006212:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b8f      	ldr	r3, [pc, #572]	@ (8006458 <UART_SetConfig+0x2cc>)
 800621c:	429a      	cmp	r2, r3
 800621e:	d005      	beq.n	800622c <UART_SetConfig+0xa0>
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b8d      	ldr	r3, [pc, #564]	@ (800645c <UART_SetConfig+0x2d0>)
 8006228:	429a      	cmp	r2, r3
 800622a:	d104      	bne.n	8006236 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800622c:	f7fd f922 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 8006230:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006234:	e003      	b.n	800623e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006236:	f7fd f909 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 800623a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006248:	f040 810c 	bne.w	8006464 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800624c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006256:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800625a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800625e:	4622      	mov	r2, r4
 8006260:	462b      	mov	r3, r5
 8006262:	1891      	adds	r1, r2, r2
 8006264:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006266:	415b      	adcs	r3, r3
 8006268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800626a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800626e:	4621      	mov	r1, r4
 8006270:	eb12 0801 	adds.w	r8, r2, r1
 8006274:	4629      	mov	r1, r5
 8006276:	eb43 0901 	adc.w	r9, r3, r1
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800628a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800628e:	4690      	mov	r8, r2
 8006290:	4699      	mov	r9, r3
 8006292:	4623      	mov	r3, r4
 8006294:	eb18 0303 	adds.w	r3, r8, r3
 8006298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800629c:	462b      	mov	r3, r5
 800629e:	eb49 0303 	adc.w	r3, r9, r3
 80062a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80062b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062ba:	460b      	mov	r3, r1
 80062bc:	18db      	adds	r3, r3, r3
 80062be:	653b      	str	r3, [r7, #80]	@ 0x50
 80062c0:	4613      	mov	r3, r2
 80062c2:	eb42 0303 	adc.w	r3, r2, r3
 80062c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062d0:	f7fa f856 	bl	8000380 <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4b61      	ldr	r3, [pc, #388]	@ (8006460 <UART_SetConfig+0x2d4>)
 80062da:	fba3 2302 	umull	r2, r3, r3, r2
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	011c      	lsls	r4, r3, #4
 80062e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062f4:	4642      	mov	r2, r8
 80062f6:	464b      	mov	r3, r9
 80062f8:	1891      	adds	r1, r2, r2
 80062fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062fc:	415b      	adcs	r3, r3
 80062fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006300:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006304:	4641      	mov	r1, r8
 8006306:	eb12 0a01 	adds.w	sl, r2, r1
 800630a:	4649      	mov	r1, r9
 800630c:	eb43 0b01 	adc.w	fp, r3, r1
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800631c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006324:	4692      	mov	sl, r2
 8006326:	469b      	mov	fp, r3
 8006328:	4643      	mov	r3, r8
 800632a:	eb1a 0303 	adds.w	r3, sl, r3
 800632e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006332:	464b      	mov	r3, r9
 8006334:	eb4b 0303 	adc.w	r3, fp, r3
 8006338:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006348:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800634c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006350:	460b      	mov	r3, r1
 8006352:	18db      	adds	r3, r3, r3
 8006354:	643b      	str	r3, [r7, #64]	@ 0x40
 8006356:	4613      	mov	r3, r2
 8006358:	eb42 0303 	adc.w	r3, r2, r3
 800635c:	647b      	str	r3, [r7, #68]	@ 0x44
 800635e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006362:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006366:	f7fa f80b 	bl	8000380 <__aeabi_uldivmod>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4611      	mov	r1, r2
 8006370:	4b3b      	ldr	r3, [pc, #236]	@ (8006460 <UART_SetConfig+0x2d4>)
 8006372:	fba3 2301 	umull	r2, r3, r3, r1
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	2264      	movs	r2, #100	@ 0x64
 800637a:	fb02 f303 	mul.w	r3, r2, r3
 800637e:	1acb      	subs	r3, r1, r3
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006386:	4b36      	ldr	r3, [pc, #216]	@ (8006460 <UART_SetConfig+0x2d4>)
 8006388:	fba3 2302 	umull	r2, r3, r3, r2
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006394:	441c      	add	r4, r3
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639a:	2200      	movs	r2, #0
 800639c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80063a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	1891      	adds	r1, r2, r2
 80063ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80063b0:	415b      	adcs	r3, r3
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80063b8:	4641      	mov	r1, r8
 80063ba:	1851      	adds	r1, r2, r1
 80063bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80063be:	4649      	mov	r1, r9
 80063c0:	414b      	adcs	r3, r1
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063d0:	4659      	mov	r1, fp
 80063d2:	00cb      	lsls	r3, r1, #3
 80063d4:	4651      	mov	r1, sl
 80063d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063da:	4651      	mov	r1, sl
 80063dc:	00ca      	lsls	r2, r1, #3
 80063de:	4610      	mov	r0, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	4642      	mov	r2, r8
 80063e6:	189b      	adds	r3, r3, r2
 80063e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063ec:	464b      	mov	r3, r9
 80063ee:	460a      	mov	r2, r1
 80063f0:	eb42 0303 	adc.w	r3, r2, r3
 80063f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006404:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800640c:	460b      	mov	r3, r1
 800640e:	18db      	adds	r3, r3, r3
 8006410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006412:	4613      	mov	r3, r2
 8006414:	eb42 0303 	adc.w	r3, r2, r3
 8006418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800641a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800641e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006422:	f7f9 ffad 	bl	8000380 <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <UART_SetConfig+0x2d4>)
 800642c:	fba3 1302 	umull	r1, r3, r3, r2
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	2164      	movs	r1, #100	@ 0x64
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	3332      	adds	r3, #50	@ 0x32
 800643e:	4a08      	ldr	r2, [pc, #32]	@ (8006460 <UART_SetConfig+0x2d4>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	f003 0207 	and.w	r2, r3, #7
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4422      	add	r2, r4
 8006452:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006454:	e106      	b.n	8006664 <UART_SetConfig+0x4d8>
 8006456:	bf00      	nop
 8006458:	40011000 	.word	0x40011000
 800645c:	40011400 	.word	0x40011400
 8006460:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006468:	2200      	movs	r2, #0
 800646a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800646e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006472:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006476:	4642      	mov	r2, r8
 8006478:	464b      	mov	r3, r9
 800647a:	1891      	adds	r1, r2, r2
 800647c:	6239      	str	r1, [r7, #32]
 800647e:	415b      	adcs	r3, r3
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
 8006482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006486:	4641      	mov	r1, r8
 8006488:	1854      	adds	r4, r2, r1
 800648a:	4649      	mov	r1, r9
 800648c:	eb43 0501 	adc.w	r5, r3, r1
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	00eb      	lsls	r3, r5, #3
 800649a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800649e:	00e2      	lsls	r2, r4, #3
 80064a0:	4614      	mov	r4, r2
 80064a2:	461d      	mov	r5, r3
 80064a4:	4643      	mov	r3, r8
 80064a6:	18e3      	adds	r3, r4, r3
 80064a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064ac:	464b      	mov	r3, r9
 80064ae:	eb45 0303 	adc.w	r3, r5, r3
 80064b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064d2:	4629      	mov	r1, r5
 80064d4:	008b      	lsls	r3, r1, #2
 80064d6:	4621      	mov	r1, r4
 80064d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064dc:	4621      	mov	r1, r4
 80064de:	008a      	lsls	r2, r1, #2
 80064e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064e4:	f7f9 ff4c 	bl	8000380 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4b60      	ldr	r3, [pc, #384]	@ (8006670 <UART_SetConfig+0x4e4>)
 80064ee:	fba3 2302 	umull	r2, r3, r3, r2
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	011c      	lsls	r4, r3, #4
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006500:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006504:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006508:	4642      	mov	r2, r8
 800650a:	464b      	mov	r3, r9
 800650c:	1891      	adds	r1, r2, r2
 800650e:	61b9      	str	r1, [r7, #24]
 8006510:	415b      	adcs	r3, r3
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006518:	4641      	mov	r1, r8
 800651a:	1851      	adds	r1, r2, r1
 800651c:	6139      	str	r1, [r7, #16]
 800651e:	4649      	mov	r1, r9
 8006520:	414b      	adcs	r3, r1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006530:	4659      	mov	r1, fp
 8006532:	00cb      	lsls	r3, r1, #3
 8006534:	4651      	mov	r1, sl
 8006536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653a:	4651      	mov	r1, sl
 800653c:	00ca      	lsls	r2, r1, #3
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	4603      	mov	r3, r0
 8006544:	4642      	mov	r2, r8
 8006546:	189b      	adds	r3, r3, r2
 8006548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800654c:	464b      	mov	r3, r9
 800654e:	460a      	mov	r2, r1
 8006550:	eb42 0303 	adc.w	r3, r2, r3
 8006554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006562:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006570:	4649      	mov	r1, r9
 8006572:	008b      	lsls	r3, r1, #2
 8006574:	4641      	mov	r1, r8
 8006576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657a:	4641      	mov	r1, r8
 800657c:	008a      	lsls	r2, r1, #2
 800657e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006582:	f7f9 fefd 	bl	8000380 <__aeabi_uldivmod>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4611      	mov	r1, r2
 800658c:	4b38      	ldr	r3, [pc, #224]	@ (8006670 <UART_SetConfig+0x4e4>)
 800658e:	fba3 2301 	umull	r2, r3, r3, r1
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	2264      	movs	r2, #100	@ 0x64
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	1acb      	subs	r3, r1, r3
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	3332      	adds	r3, #50	@ 0x32
 80065a0:	4a33      	ldr	r2, [pc, #204]	@ (8006670 <UART_SetConfig+0x4e4>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065ac:	441c      	add	r4, r3
 80065ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b2:	2200      	movs	r2, #0
 80065b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80065b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80065b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	1891      	adds	r1, r2, r2
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	415b      	adcs	r3, r3
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065cc:	4641      	mov	r1, r8
 80065ce:	1851      	adds	r1, r2, r1
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	4649      	mov	r1, r9
 80065d4:	414b      	adcs	r3, r1
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065e4:	4659      	mov	r1, fp
 80065e6:	00cb      	lsls	r3, r1, #3
 80065e8:	4651      	mov	r1, sl
 80065ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ee:	4651      	mov	r1, sl
 80065f0:	00ca      	lsls	r2, r1, #3
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	4642      	mov	r2, r8
 80065fa:	189b      	adds	r3, r3, r2
 80065fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065fe:	464b      	mov	r3, r9
 8006600:	460a      	mov	r2, r1
 8006602:	eb42 0303 	adc.w	r3, r2, r3
 8006606:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	663b      	str	r3, [r7, #96]	@ 0x60
 8006612:	667a      	str	r2, [r7, #100]	@ 0x64
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006620:	4649      	mov	r1, r9
 8006622:	008b      	lsls	r3, r1, #2
 8006624:	4641      	mov	r1, r8
 8006626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662a:	4641      	mov	r1, r8
 800662c:	008a      	lsls	r2, r1, #2
 800662e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006632:	f7f9 fea5 	bl	8000380 <__aeabi_uldivmod>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4b0d      	ldr	r3, [pc, #52]	@ (8006670 <UART_SetConfig+0x4e4>)
 800663c:	fba3 1302 	umull	r1, r3, r3, r2
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	2164      	movs	r1, #100	@ 0x64
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	3332      	adds	r3, #50	@ 0x32
 800664e:	4a08      	ldr	r2, [pc, #32]	@ (8006670 <UART_SetConfig+0x4e4>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	f003 020f 	and.w	r2, r3, #15
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4422      	add	r2, r4
 8006662:	609a      	str	r2, [r3, #8]
}
 8006664:	bf00      	nop
 8006666:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800666a:	46bd      	mov	sp, r7
 800666c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006670:	51eb851f 	.word	0x51eb851f

08006674 <__NVIC_SetPriority>:
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006684:	2b00      	cmp	r3, #0
 8006686:	db0a      	blt.n	800669e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	490c      	ldr	r1, [pc, #48]	@ (80066c0 <__NVIC_SetPriority+0x4c>)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	0112      	lsls	r2, r2, #4
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	440b      	add	r3, r1
 8006698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800669c:	e00a      	b.n	80066b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4908      	ldr	r1, [pc, #32]	@ (80066c4 <__NVIC_SetPriority+0x50>)
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	3b04      	subs	r3, #4
 80066ac:	0112      	lsls	r2, r2, #4
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	440b      	add	r3, r1
 80066b2:	761a      	strb	r2, [r3, #24]
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	e000e100 	.word	0xe000e100
 80066c4:	e000ed00 	.word	0xe000ed00

080066c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066cc:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <SysTick_Handler+0x1c>)
 80066ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066d0:	f001 fd40 	bl	8008154 <xTaskGetSchedulerState>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d001      	beq.n	80066de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066da:	f002 fb35 	bl	8008d48 <xPortSysTickHandler>
  }
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	e000e010 	.word	0xe000e010

080066e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066ec:	2100      	movs	r1, #0
 80066ee:	f06f 0004 	mvn.w	r0, #4
 80066f2:	f7ff ffbf 	bl	8006674 <__NVIC_SetPriority>
#endif
}
 80066f6:	bf00      	nop
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006702:	f3ef 8305 	mrs	r3, IPSR
 8006706:	603b      	str	r3, [r7, #0]
  return(result);
 8006708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800670e:	f06f 0305 	mvn.w	r3, #5
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	e00c      	b.n	8006730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006716:	4b0a      	ldr	r3, [pc, #40]	@ (8006740 <osKernelInitialize+0x44>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800671e:	4b08      	ldr	r3, [pc, #32]	@ (8006740 <osKernelInitialize+0x44>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006724:	2300      	movs	r3, #0
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	e002      	b.n	8006730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800672a:	f04f 33ff 	mov.w	r3, #4294967295
 800672e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006730:	687b      	ldr	r3, [r7, #4]
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20005740 	.word	0x20005740

08006744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674a:	f3ef 8305 	mrs	r3, IPSR
 800674e:	603b      	str	r3, [r7, #0]
  return(result);
 8006750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006756:	f06f 0305 	mvn.w	r3, #5
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	e010      	b.n	8006780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800675e:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <osKernelStart+0x48>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d109      	bne.n	800677a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006766:	f7ff ffbf 	bl	80066e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800676a:	4b08      	ldr	r3, [pc, #32]	@ (800678c <osKernelStart+0x48>)
 800676c:	2202      	movs	r2, #2
 800676e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006770:	f001 f87a 	bl	8007868 <vTaskStartScheduler>
      stat = osOK;
 8006774:	2300      	movs	r3, #0
 8006776:	607b      	str	r3, [r7, #4]
 8006778:	e002      	b.n	8006780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006780:	687b      	ldr	r3, [r7, #4]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20005740 	.word	0x20005740

08006790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b08e      	sub	sp, #56	@ 0x38
 8006794:	af04      	add	r7, sp, #16
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a0:	f3ef 8305 	mrs	r3, IPSR
 80067a4:	617b      	str	r3, [r7, #20]
  return(result);
 80067a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d17e      	bne.n	80068aa <osThreadNew+0x11a>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d07b      	beq.n	80068aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80067b2:	2380      	movs	r3, #128	@ 0x80
 80067b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80067b6:	2318      	movs	r3, #24
 80067b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295
 80067c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d045      	beq.n	8006856 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <osThreadNew+0x48>
        name = attr->name;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <osThreadNew+0x6e>
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b38      	cmp	r3, #56	@ 0x38
 80067f0:	d805      	bhi.n	80067fe <osThreadNew+0x6e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <osThreadNew+0x72>
        return (NULL);
 80067fe:	2300      	movs	r3, #0
 8006800:	e054      	b.n	80068ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <osThreadNew+0xa8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006820:	d90a      	bls.n	8006838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <osThreadNew+0xa8>
        mem = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	e010      	b.n	800685a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10c      	bne.n	800685a <osThreadNew+0xca>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d108      	bne.n	800685a <osThreadNew+0xca>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <osThreadNew+0xca>
          mem = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e001      	b.n	800685a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d110      	bne.n	8006882 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006868:	9202      	str	r2, [sp, #8]
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fe1a 	bl	80074b0 <xTaskCreateStatic>
 800687c:	4603      	mov	r3, r0
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	e013      	b.n	80068aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	b29a      	uxth	r2, r3
 800688c:	f107 0310 	add.w	r3, r7, #16
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fe68 	bl	8007570 <xTaskCreate>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d001      	beq.n	80068aa <osThreadNew+0x11a>
            hTask = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068aa:	693b      	ldr	r3, [r7, #16]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3728      	adds	r7, #40	@ 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068bc:	f3ef 8305 	mrs	r3, IPSR
 80068c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80068c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <osDelay+0x1c>
    stat = osErrorISR;
 80068c8:	f06f 0305 	mvn.w	r3, #5
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e007      	b.n	80068e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 ff8e 	bl	80077fc <vTaskDelay>
    }
  }

  return (stat);
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a07      	ldr	r2, [pc, #28]	@ (8006918 <vApplicationGetIdleTaskMemory+0x2c>)
 80068fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a06      	ldr	r2, [pc, #24]	@ (800691c <vApplicationGetIdleTaskMemory+0x30>)
 8006902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2280      	movs	r2, #128	@ 0x80
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20005744 	.word	0x20005744
 800691c:	200057a0 	.word	0x200057a0

08006920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4a07      	ldr	r2, [pc, #28]	@ (800694c <vApplicationGetTimerTaskMemory+0x2c>)
 8006930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4a06      	ldr	r2, [pc, #24]	@ (8006950 <vApplicationGetTimerTaskMemory+0x30>)
 8006936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800693e:	601a      	str	r2, [r3, #0]
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	200059a0 	.word	0x200059a0
 8006950:	200059fc 	.word	0x200059fc

08006954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f103 0208 	add.w	r2, r3, #8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f04f 32ff 	mov.w	r2, #4294967295
 800696c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f103 0208 	add.w	r2, r3, #8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f103 0208 	add.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	601a      	str	r2, [r3, #0]
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d103      	bne.n	8006a16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e00c      	b.n	8006a30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e002      	b.n	8006a24 <vListInsert+0x2e>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d2f6      	bcs.n	8006a1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	601a      	str	r2, [r3, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6892      	ldr	r2, [r2, #8]
 8006a7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6852      	ldr	r2, [r2, #4]
 8006a88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d103      	bne.n	8006a9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	1e5a      	subs	r2, r3, #1
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10b      	bne.n	8006ae8 <xQueueGenericReset+0x2c>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60bb      	str	r3, [r7, #8]
}
 8006ae2:	bf00      	nop
 8006ae4:	bf00      	nop
 8006ae6:	e7fd      	b.n	8006ae4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ae8:	f002 f89e 	bl	8008c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af4:	68f9      	ldr	r1, [r7, #12]
 8006af6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	441a      	add	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	441a      	add	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	22ff      	movs	r2, #255	@ 0xff
 8006b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	22ff      	movs	r2, #255	@ 0xff
 8006b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d114      	bne.n	8006b68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01a      	beq.n	8006b7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3310      	adds	r3, #16
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 f91a 	bl	8007d84 <xTaskRemoveFromEventList>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d012      	beq.n	8006b7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b56:	4b0d      	ldr	r3, [pc, #52]	@ (8006b8c <xQueueGenericReset+0xd0>)
 8006b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	e009      	b.n	8006b7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3310      	adds	r3, #16
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fef1 	bl	8006954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3324      	adds	r3, #36	@ 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff feec 	bl	8006954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b7c:	f002 f886 	bl	8008c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b80:	2301      	movs	r3, #1
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08e      	sub	sp, #56	@ 0x38
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <xQueueGenericCreateStatic+0x56>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <xQueueGenericCreateStatic+0x5a>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <xQueueGenericCreateStatic+0x5c>
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	623b      	str	r3, [r7, #32]
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <xQueueGenericCreateStatic+0x84>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <xQueueGenericCreateStatic+0x88>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <xQueueGenericCreateStatic+0x8a>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	61fb      	str	r3, [r7, #28]
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	e7fd      	b.n	8006c32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c36:	2350      	movs	r3, #80	@ 0x50
 8006c38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b50      	cmp	r3, #80	@ 0x50
 8006c3e:	d00b      	beq.n	8006c58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	61bb      	str	r3, [r7, #24]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00d      	beq.n	8006c80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	4613      	mov	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f805 	bl	8006c8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3730      	adds	r7, #48	@ 0x30
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e002      	b.n	8006cac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cb8:	2101      	movs	r1, #1
 8006cba:	69b8      	ldr	r0, [r7, #24]
 8006cbc:	f7ff fefe 	bl	8006abc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	@ 0x38
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <xQueueGenericSend+0x34>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <xQueueGenericSend+0x42>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <xQueueGenericSend+0x46>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <xQueueGenericSend+0x48>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <xQueueGenericSend+0x64>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d103      	bne.n	8006d42 <xQueueGenericSend+0x72>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <xQueueGenericSend+0x76>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <xQueueGenericSend+0x78>
 8006d46:	2300      	movs	r3, #0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10b      	bne.n	8006d64 <xQueueGenericSend+0x94>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	623b      	str	r3, [r7, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	e7fd      	b.n	8006d60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d64:	f001 f9f6 	bl	8008154 <xTaskGetSchedulerState>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <xQueueGenericSend+0xa4>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <xQueueGenericSend+0xa8>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <xQueueGenericSend+0xaa>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10b      	bne.n	8006d96 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	61fb      	str	r3, [r7, #28]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d96:	f001 ff47 	bl	8008c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d302      	bcc.n	8006dac <xQueueGenericSend+0xdc>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d129      	bne.n	8006e00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006db2:	f000 fa0f 	bl	80071d4 <prvCopyDataToQueue>
 8006db6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d010      	beq.n	8006de2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	3324      	adds	r3, #36	@ 0x24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 ffdd 	bl	8007d84 <xTaskRemoveFromEventList>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d013      	beq.n	8006df8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed0 <xQueueGenericSend+0x200>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	e00a      	b.n	8006df8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006de8:	4b39      	ldr	r3, [pc, #228]	@ (8006ed0 <xQueueGenericSend+0x200>)
 8006dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006df8:	f001 ff48 	bl	8008c8c <vPortExitCritical>
				return pdPASS;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e063      	b.n	8006ec8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e06:	f001 ff41 	bl	8008c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e05c      	b.n	8006ec8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e14:	f107 0314 	add.w	r3, r7, #20
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 f83f 	bl	8007e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e22:	f001 ff33 	bl	8008c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e26:	f000 fd87 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e2a:	f001 fefd 	bl	8008c28 <vPortEnterCritical>
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e34:	b25b      	sxtb	r3, r3
 8006e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3a:	d103      	bne.n	8006e44 <xQueueGenericSend+0x174>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d103      	bne.n	8006e5a <xQueueGenericSend+0x18a>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e5a:	f001 ff17 	bl	8008c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e5e:	1d3a      	adds	r2, r7, #4
 8006e60:	f107 0314 	add.w	r3, r7, #20
 8006e64:	4611      	mov	r1, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f82e 	bl	8007ec8 <xTaskCheckForTimeOut>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d124      	bne.n	8006ebc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e74:	f000 faa6 	bl	80073c4 <prvIsQueueFull>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d018      	beq.n	8006eb0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	3310      	adds	r3, #16
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	4611      	mov	r1, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 ff2a 	bl	8007ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e8e:	f000 fa31 	bl	80072f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e92:	f000 fd5f 	bl	8007954 <xTaskResumeAll>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f47f af7c 	bne.w	8006d96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <xQueueGenericSend+0x200>)
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	e772      	b.n	8006d96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006eb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eb2:	f000 fa1f 	bl	80072f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eb6:	f000 fd4d 	bl	8007954 <xTaskResumeAll>
 8006eba:	e76c      	b.n	8006d96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ebe:	f000 fa19 	bl	80072f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ec2:	f000 fd47 	bl	8007954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ec6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3738      	adds	r7, #56	@ 0x38
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b090      	sub	sp, #64	@ 0x40
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <xQueueGenericSendFromISR+0x3e>
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <xQueueGenericSendFromISR+0x42>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <xQueueGenericSendFromISR+0x44>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	e7fd      	b.n	8006f30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d103      	bne.n	8006f42 <xQueueGenericSendFromISR+0x6e>
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <xQueueGenericSendFromISR+0x72>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <xQueueGenericSendFromISR+0x74>
 8006f46:	2300      	movs	r3, #0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10b      	bne.n	8006f64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	623b      	str	r3, [r7, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f64:	f001 ff40 	bl	8008de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f68:	f3ef 8211 	mrs	r2, BASEPRI
 8006f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	61fa      	str	r2, [r7, #28]
 8006f7e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f80:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d302      	bcc.n	8006f96 <xQueueGenericSendFromISR+0xc2>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d12f      	bne.n	8006ff6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006fac:	f000 f912 	bl	80071d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fb0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d112      	bne.n	8006fe0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	3324      	adds	r3, #36	@ 0x24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fedc 	bl	8007d84 <xTaskRemoveFromEventList>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e007      	b.n	8006ff0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	b25a      	sxtb	r2, r3
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006ff4:	e001      	b.n	8006ffa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007004:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007008:	4618      	mov	r0, r3
 800700a:	3740      	adds	r7, #64	@ 0x40
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08c      	sub	sp, #48	@ 0x30
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xQueueReceive+0x32>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	623b      	str	r3, [r7, #32]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <xQueueReceive+0x40>
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <xQueueReceive+0x44>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <xQueueReceive+0x46>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10b      	bne.n	8007072 <xQueueReceive+0x62>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	61fb      	str	r3, [r7, #28]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007072:	f001 f86f 	bl	8008154 <xTaskGetSchedulerState>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <xQueueReceive+0x72>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <xQueueReceive+0x76>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <xQueueReceive+0x78>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <xQueueReceive+0x94>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	61bb      	str	r3, [r7, #24]
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	e7fd      	b.n	80070a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070a4:	f001 fdc0 	bl	8008c28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01f      	beq.n	80070f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b8:	f000 f8f6 	bl	80072a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	1e5a      	subs	r2, r3, #1
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00f      	beq.n	80070ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	3310      	adds	r3, #16
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fe57 	bl	8007d84 <xTaskRemoveFromEventList>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070dc:	4b3c      	ldr	r3, [pc, #240]	@ (80071d0 <xQueueReceive+0x1c0>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070ec:	f001 fdce 	bl	8008c8c <vPortExitCritical>
				return pdPASS;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e069      	b.n	80071c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d103      	bne.n	8007102 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070fa:	f001 fdc7 	bl	8008c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070fe:	2300      	movs	r3, #0
 8007100:	e062      	b.n	80071c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007108:	f107 0310 	add.w	r3, r7, #16
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fec5 	bl	8007e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007112:	2301      	movs	r3, #1
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007116:	f001 fdb9 	bl	8008c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800711a:	f000 fc0d 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800711e:	f001 fd83 	bl	8008c28 <vPortEnterCritical>
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007128:	b25b      	sxtb	r3, r3
 800712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712e:	d103      	bne.n	8007138 <xQueueReceive+0x128>
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800713e:	b25b      	sxtb	r3, r3
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d103      	bne.n	800714e <xQueueReceive+0x13e>
 8007146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800714e:	f001 fd9d 	bl	8008c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007152:	1d3a      	adds	r2, r7, #4
 8007154:	f107 0310 	add.w	r3, r7, #16
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f000 feb4 	bl	8007ec8 <xTaskCheckForTimeOut>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d123      	bne.n	80071ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007168:	f000 f916 	bl	8007398 <prvIsQueueEmpty>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007174:	3324      	adds	r3, #36	@ 0x24
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4611      	mov	r1, r2
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fdb0 	bl	8007ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007182:	f000 f8b7 	bl	80072f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007186:	f000 fbe5 	bl	8007954 <xTaskResumeAll>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d189      	bne.n	80070a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007190:	4b0f      	ldr	r3, [pc, #60]	@ (80071d0 <xQueueReceive+0x1c0>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	e780      	b.n	80070a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a4:	f000 f8a6 	bl	80072f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071a8:	f000 fbd4 	bl	8007954 <xTaskResumeAll>
 80071ac:	e77a      	b.n	80070a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071b0:	f000 f8a0 	bl	80072f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071b4:	f000 fbce 	bl	8007954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ba:	f000 f8ed 	bl	8007398 <prvIsQueueEmpty>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f43f af6f 	beq.w	80070a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3730      	adds	r7, #48	@ 0x30
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	e000ed04 	.word	0xe000ed04

080071d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10d      	bne.n	800720e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d14d      	bne.n	8007296 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 ffc6 	bl	8008190 <xTaskPriorityDisinherit>
 8007204:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	e043      	b.n	8007296 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d119      	bne.n	8007248 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6858      	ldr	r0, [r3, #4]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721c:	461a      	mov	r2, r3
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	f010 fcd7 	bl	8017bd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722c:	441a      	add	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	429a      	cmp	r2, r3
 800723c:	d32b      	bcc.n	8007296 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	605a      	str	r2, [r3, #4]
 8007246:	e026      	b.n	8007296 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68d8      	ldr	r0, [r3, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	461a      	mov	r2, r3
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	f010 fcbd 	bl	8017bd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007260:	425b      	negs	r3, r3
 8007262:	441a      	add	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d207      	bcs.n	8007284 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727c:	425b      	negs	r3, r3
 800727e:	441a      	add	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d105      	bne.n	8007296 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	3b01      	subs	r3, #1
 8007294:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800729e:	697b      	ldr	r3, [r7, #20]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d018      	beq.n	80072ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	441a      	add	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d303      	bcc.n	80072dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68d9      	ldr	r1, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e4:	461a      	mov	r2, r3
 80072e6:	6838      	ldr	r0, [r7, #0]
 80072e8:	f010 fc73 	bl	8017bd2 <memcpy>
	}
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072fc:	f001 fc94 	bl	8008c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007308:	e011      	b.n	800732e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	d012      	beq.n	8007338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3324      	adds	r3, #36	@ 0x24
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fd34 	bl	8007d84 <xTaskRemoveFromEventList>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007322:	f000 fe35 	bl	8007f90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	3b01      	subs	r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800732e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007332:	2b00      	cmp	r3, #0
 8007334:	dce9      	bgt.n	800730a <prvUnlockQueue+0x16>
 8007336:	e000      	b.n	800733a <prvUnlockQueue+0x46>
					break;
 8007338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	22ff      	movs	r2, #255	@ 0xff
 800733e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007342:	f001 fca3 	bl	8008c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007346:	f001 fc6f 	bl	8008c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007352:	e011      	b.n	8007378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d012      	beq.n	8007382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3310      	adds	r3, #16
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fd0f 	bl	8007d84 <xTaskRemoveFromEventList>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800736c:	f000 fe10 	bl	8007f90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	3b01      	subs	r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800737c:	2b00      	cmp	r3, #0
 800737e:	dce9      	bgt.n	8007354 <prvUnlockQueue+0x60>
 8007380:	e000      	b.n	8007384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	22ff      	movs	r2, #255	@ 0xff
 8007388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800738c:	f001 fc7e 	bl	8008c8c <vPortExitCritical>
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073a0:	f001 fc42 	bl	8008c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e001      	b.n	80073b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073b6:	f001 fc69 	bl	8008c8c <vPortExitCritical>

	return xReturn;
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073cc:	f001 fc2c 	bl	8008c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d8:	429a      	cmp	r2, r3
 80073da:	d102      	bne.n	80073e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	e001      	b.n	80073e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073e6:	f001 fc51 	bl	8008c8c <vPortExitCritical>

	return xReturn;
 80073ea:	68fb      	ldr	r3, [r7, #12]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e014      	b.n	800742e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007404:	4a0f      	ldr	r2, [pc, #60]	@ (8007444 <vQueueAddToRegistry+0x50>)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007410:	490c      	ldr	r1, [pc, #48]	@ (8007444 <vQueueAddToRegistry+0x50>)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800741a:	4a0a      	ldr	r2, [pc, #40]	@ (8007444 <vQueueAddToRegistry+0x50>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	4413      	add	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007426:	e006      	b.n	8007436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b07      	cmp	r3, #7
 8007432:	d9e7      	bls.n	8007404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20005dfc 	.word	0x20005dfc

08007448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007458:	f001 fbe6 	bl	8008c28 <vPortEnterCritical>
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007462:	b25b      	sxtb	r3, r3
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d103      	bne.n	8007472 <vQueueWaitForMessageRestricted+0x2a>
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007478:	b25b      	sxtb	r3, r3
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d103      	bne.n	8007488 <vQueueWaitForMessageRestricted+0x40>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007488:	f001 fc00 	bl	8008c8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	3324      	adds	r3, #36	@ 0x24
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fc45 	bl	8007d2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074a2:	6978      	ldr	r0, [r7, #20]
 80074a4:	f7ff ff26 	bl	80072f4 <prvUnlockQueue>
	}
 80074a8:	bf00      	nop
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08e      	sub	sp, #56	@ 0x38
 80074b4:	af04      	add	r7, sp, #16
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10b      	bne.n	80074dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	623b      	str	r3, [r7, #32]
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	61fb      	str	r3, [r7, #28]
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	e7fd      	b.n	80074f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074fa:	235c      	movs	r3, #92	@ 0x5c
 80074fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b5c      	cmp	r3, #92	@ 0x5c
 8007502:	d00b      	beq.n	800751c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	61bb      	str	r3, [r7, #24]
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800751c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800751e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01e      	beq.n	8007562 <xTaskCreateStatic+0xb2>
 8007524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01b      	beq.n	8007562 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007532:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f850 	bl	80075fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800755a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800755c:	f000 f8de 	bl	800771c <prvAddNewTaskToReadyList>
 8007560:	e001      	b.n	8007566 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007566:	697b      	ldr	r3, [r7, #20]
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	@ 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08c      	sub	sp, #48	@ 0x30
 8007574:	af04      	add	r7, sp, #16
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f001 fc71 	bl	8008e6c <pvPortMalloc>
 800758a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007592:	205c      	movs	r0, #92	@ 0x5c
 8007594:	f001 fc6a 	bl	8008e6c <pvPortMalloc>
 8007598:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80075a6:	e005      	b.n	80075b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075a8:	6978      	ldr	r0, [r7, #20]
 80075aa:	f001 fd2d 	bl	8009008 <vPortFree>
 80075ae:	e001      	b.n	80075b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d017      	beq.n	80075ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	2300      	movs	r3, #0
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	9302      	str	r3, [sp, #8]
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f80e 	bl	80075fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075de:	69f8      	ldr	r0, [r7, #28]
 80075e0:	f000 f89c 	bl	800771c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075e4:	2301      	movs	r3, #1
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	e002      	b.n	80075f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
 80075ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075f0:	69bb      	ldr	r3, [r7, #24]
	}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3720      	adds	r7, #32
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b088      	sub	sp, #32
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	461a      	mov	r2, r3
 8007612:	21a5      	movs	r1, #165	@ 0xa5
 8007614:	f010 fa02 	bl	8017a1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007622:	3b01      	subs	r3, #1
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f023 0307 	bic.w	r3, r3, #7
 8007630:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	617b      	str	r3, [r7, #20]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01f      	beq.n	800769a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e012      	b.n	8007686 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	7819      	ldrb	r1, [r3, #0]
 8007668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	3334      	adds	r3, #52	@ 0x34
 8007670:	460a      	mov	r2, r1
 8007672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	3301      	adds	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b0f      	cmp	r3, #15
 800768a:	d9e9      	bls.n	8007660 <prvInitialiseNewTask+0x66>
 800768c:	e000      	b.n	8007690 <prvInitialiseNewTask+0x96>
			{
				break;
 800768e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007698:	e003      	b.n	80076a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	2b37      	cmp	r3, #55	@ 0x37
 80076a6:	d901      	bls.n	80076ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076a8:	2337      	movs	r3, #55	@ 0x37
 80076aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff f966 	bl	8006994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	3318      	adds	r3, #24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff f961 	bl	8006994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	2200      	movs	r2, #0
 80076ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	69b8      	ldr	r0, [r7, #24]
 80076fc:	f001 f966 	bl	80089cc <pxPortInitialiseStack>
 8007700:	4602      	mov	r2, r0
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800770c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007712:	bf00      	nop
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007724:	f001 fa80 	bl	8008c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007728:	4b2d      	ldr	r3, [pc, #180]	@ (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	4a2c      	ldr	r2, [pc, #176]	@ (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 8007730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007732:	4b2c      	ldr	r3, [pc, #176]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800773a:	4a2a      	ldr	r2, [pc, #168]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007740:	4b27      	ldr	r3, [pc, #156]	@ (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d110      	bne.n	800776a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007748:	f000 fc46 	bl	8007fd8 <prvInitialiseTaskLists>
 800774c:	e00d      	b.n	800776a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800774e:	4b26      	ldr	r3, [pc, #152]	@ (80077e8 <prvAddNewTaskToReadyList+0xcc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007756:	4b23      	ldr	r3, [pc, #140]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d802      	bhi.n	800776a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007764:	4a1f      	ldr	r2, [pc, #124]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800776a:	4b20      	ldr	r3, [pc, #128]	@ (80077ec <prvAddNewTaskToReadyList+0xd0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3301      	adds	r3, #1
 8007770:	4a1e      	ldr	r2, [pc, #120]	@ (80077ec <prvAddNewTaskToReadyList+0xd0>)
 8007772:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007774:	4b1d      	ldr	r3, [pc, #116]	@ (80077ec <prvAddNewTaskToReadyList+0xd0>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007780:	4b1b      	ldr	r3, [pc, #108]	@ (80077f0 <prvAddNewTaskToReadyList+0xd4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d903      	bls.n	8007790 <prvAddNewTaskToReadyList+0x74>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778c:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <prvAddNewTaskToReadyList+0xd4>)
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a15      	ldr	r2, [pc, #84]	@ (80077f4 <prvAddNewTaskToReadyList+0xd8>)
 800779e:	441a      	add	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7ff f901 	bl	80069ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077ac:	f001 fa6e 	bl	8008c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077b0:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <prvAddNewTaskToReadyList+0xcc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077b8:	4b0a      	ldr	r3, [pc, #40]	@ (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d207      	bcs.n	80077d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077c6:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <prvAddNewTaskToReadyList+0xdc>)
 80077c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20006310 	.word	0x20006310
 80077e4:	20005e3c 	.word	0x20005e3c
 80077e8:	2000631c 	.word	0x2000631c
 80077ec:	2000632c 	.word	0x2000632c
 80077f0:	20006318 	.word	0x20006318
 80077f4:	20005e40 	.word	0x20005e40
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800780e:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <vTaskDelay+0x64>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <vTaskDelay+0x32>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800782e:	f000 f883 	bl	8007938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007832:	2100      	movs	r1, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fd1b 	bl	8008270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800783a:	f000 f88b 	bl	8007954 <xTaskResumeAll>
 800783e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d107      	bne.n	8007856 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007846:	4b07      	ldr	r3, [pc, #28]	@ (8007864 <vTaskDelay+0x68>)
 8007848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20006338 	.word	0x20006338
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08a      	sub	sp, #40	@ 0x28
 800786c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007872:	2300      	movs	r3, #0
 8007874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007876:	463a      	mov	r2, r7
 8007878:	1d39      	adds	r1, r7, #4
 800787a:	f107 0308 	add.w	r3, r7, #8
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff f834 	bl	80068ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	9202      	str	r2, [sp, #8]
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	2300      	movs	r3, #0
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	460a      	mov	r2, r1
 8007896:	4922      	ldr	r1, [pc, #136]	@ (8007920 <vTaskStartScheduler+0xb8>)
 8007898:	4822      	ldr	r0, [pc, #136]	@ (8007924 <vTaskStartScheduler+0xbc>)
 800789a:	f7ff fe09 	bl	80074b0 <xTaskCreateStatic>
 800789e:	4603      	mov	r3, r0
 80078a0:	4a21      	ldr	r2, [pc, #132]	@ (8007928 <vTaskStartScheduler+0xc0>)
 80078a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078a4:	4b20      	ldr	r3, [pc, #128]	@ (8007928 <vTaskStartScheduler+0xc0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078ac:	2301      	movs	r3, #1
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e001      	b.n	80078b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d102      	bne.n	80078c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078bc:	f000 fd2c 	bl	8008318 <xTimerCreateTimerTask>
 80078c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d116      	bne.n	80078f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	613b      	str	r3, [r7, #16]
}
 80078da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078dc:	4b13      	ldr	r3, [pc, #76]	@ (800792c <vTaskStartScheduler+0xc4>)
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078e4:	4b12      	ldr	r3, [pc, #72]	@ (8007930 <vTaskStartScheduler+0xc8>)
 80078e6:	2201      	movs	r2, #1
 80078e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078ea:	4b12      	ldr	r3, [pc, #72]	@ (8007934 <vTaskStartScheduler+0xcc>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078f0:	f001 f8f6 	bl	8008ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078f4:	e00f      	b.n	8007916 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fc:	d10b      	bne.n	8007916 <vTaskStartScheduler+0xae>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <vTaskStartScheduler+0xaa>
}
 8007916:	bf00      	nop
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	080188c4 	.word	0x080188c4
 8007924:	08007fa9 	.word	0x08007fa9
 8007928:	20006334 	.word	0x20006334
 800792c:	20006330 	.word	0x20006330
 8007930:	2000631c 	.word	0x2000631c
 8007934:	20006314 	.word	0x20006314

08007938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800793c:	4b04      	ldr	r3, [pc, #16]	@ (8007950 <vTaskSuspendAll+0x18>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a03      	ldr	r2, [pc, #12]	@ (8007950 <vTaskSuspendAll+0x18>)
 8007944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007946:	bf00      	nop
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20006338 	.word	0x20006338

08007954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007962:	4b42      	ldr	r3, [pc, #264]	@ (8007a6c <xTaskResumeAll+0x118>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <xTaskResumeAll+0x2e>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	603b      	str	r3, [r7, #0]
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	e7fd      	b.n	800797e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007982:	f001 f951 	bl	8008c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007986:	4b39      	ldr	r3, [pc, #228]	@ (8007a6c <xTaskResumeAll+0x118>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a37      	ldr	r2, [pc, #220]	@ (8007a6c <xTaskResumeAll+0x118>)
 800798e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007990:	4b36      	ldr	r3, [pc, #216]	@ (8007a6c <xTaskResumeAll+0x118>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d162      	bne.n	8007a5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007998:	4b35      	ldr	r3, [pc, #212]	@ (8007a70 <xTaskResumeAll+0x11c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d05e      	beq.n	8007a5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079a0:	e02f      	b.n	8007a02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a2:	4b34      	ldr	r3, [pc, #208]	@ (8007a74 <xTaskResumeAll+0x120>)
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3318      	adds	r3, #24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff f85a 	bl	8006a68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff f855 	bl	8006a68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007a78 <xTaskResumeAll+0x124>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d903      	bls.n	80079d2 <xTaskResumeAll+0x7e>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007a78 <xTaskResumeAll+0x124>)
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4a27      	ldr	r2, [pc, #156]	@ (8007a7c <xTaskResumeAll+0x128>)
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3304      	adds	r3, #4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f7fe ffe0 	bl	80069ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f2:	4b23      	ldr	r3, [pc, #140]	@ (8007a80 <xTaskResumeAll+0x12c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80079fc:	4b21      	ldr	r3, [pc, #132]	@ (8007a84 <xTaskResumeAll+0x130>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a02:	4b1c      	ldr	r3, [pc, #112]	@ (8007a74 <xTaskResumeAll+0x120>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1cb      	bne.n	80079a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a10:	f000 fb80 	bl	8008114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a14:	4b1c      	ldr	r3, [pc, #112]	@ (8007a88 <xTaskResumeAll+0x134>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d010      	beq.n	8007a42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a20:	f000 f846 	bl	8007ab0 <xTaskIncrementTick>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007a2a:	4b16      	ldr	r3, [pc, #88]	@ (8007a84 <xTaskResumeAll+0x130>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f1      	bne.n	8007a20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007a3c:	4b12      	ldr	r3, [pc, #72]	@ (8007a88 <xTaskResumeAll+0x134>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <xTaskResumeAll+0x130>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a8c <xTaskResumeAll+0x138>)
 8007a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a5e:	f001 f915 	bl	8008c8c <vPortExitCritical>

	return xAlreadyYielded;
 8007a62:	68bb      	ldr	r3, [r7, #8]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20006338 	.word	0x20006338
 8007a70:	20006310 	.word	0x20006310
 8007a74:	200062d0 	.word	0x200062d0
 8007a78:	20006318 	.word	0x20006318
 8007a7c:	20005e40 	.word	0x20005e40
 8007a80:	20005e3c 	.word	0x20005e3c
 8007a84:	20006324 	.word	0x20006324
 8007a88:	20006320 	.word	0x20006320
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a96:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <xTaskGetTickCount+0x1c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a9c:	687b      	ldr	r3, [r7, #4]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20006314 	.word	0x20006314

08007ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aba:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <xTaskIncrementTick+0x148>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f040 8090 	bne.w	8007be4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8007bfc <xTaskIncrementTick+0x14c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007acc:	4a4b      	ldr	r2, [pc, #300]	@ (8007bfc <xTaskIncrementTick+0x14c>)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d121      	bne.n	8007b1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ad8:	4b49      	ldr	r3, [pc, #292]	@ (8007c00 <xTaskIncrementTick+0x150>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <xTaskIncrementTick+0x4a>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	603b      	str	r3, [r7, #0]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <xTaskIncrementTick+0x46>
 8007afa:	4b41      	ldr	r3, [pc, #260]	@ (8007c00 <xTaskIncrementTick+0x150>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	4b40      	ldr	r3, [pc, #256]	@ (8007c04 <xTaskIncrementTick+0x154>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a3e      	ldr	r2, [pc, #248]	@ (8007c00 <xTaskIncrementTick+0x150>)
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	4a3e      	ldr	r2, [pc, #248]	@ (8007c04 <xTaskIncrementTick+0x154>)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c08 <xTaskIncrementTick+0x158>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a3c      	ldr	r2, [pc, #240]	@ (8007c08 <xTaskIncrementTick+0x158>)
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	f000 fafc 	bl	8008114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c0c <xTaskIncrementTick+0x15c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d349      	bcc.n	8007bba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b26:	4b36      	ldr	r3, [pc, #216]	@ (8007c00 <xTaskIncrementTick+0x150>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b30:	4b36      	ldr	r3, [pc, #216]	@ (8007c0c <xTaskIncrementTick+0x15c>)
 8007b32:	f04f 32ff 	mov.w	r2, #4294967295
 8007b36:	601a      	str	r2, [r3, #0]
					break;
 8007b38:	e03f      	b.n	8007bba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b3a:	4b31      	ldr	r3, [pc, #196]	@ (8007c00 <xTaskIncrementTick+0x150>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d203      	bcs.n	8007b5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b52:	4a2e      	ldr	r2, [pc, #184]	@ (8007c0c <xTaskIncrementTick+0x15c>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b58:	e02f      	b.n	8007bba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe ff82 	bl	8006a68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d004      	beq.n	8007b76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe ff79 	bl	8006a68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7a:	4b25      	ldr	r3, [pc, #148]	@ (8007c10 <xTaskIncrementTick+0x160>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d903      	bls.n	8007b8a <xTaskIncrementTick+0xda>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	4a22      	ldr	r2, [pc, #136]	@ (8007c10 <xTaskIncrementTick+0x160>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4a1f      	ldr	r2, [pc, #124]	@ (8007c14 <xTaskIncrementTick+0x164>)
 8007b98:	441a      	add	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7fe ff04 	bl	80069ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007baa:	4b1b      	ldr	r3, [pc, #108]	@ (8007c18 <xTaskIncrementTick+0x168>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d3b8      	bcc.n	8007b26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bb8:	e7b5      	b.n	8007b26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bba:	4b17      	ldr	r3, [pc, #92]	@ (8007c18 <xTaskIncrementTick+0x168>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc0:	4914      	ldr	r1, [pc, #80]	@ (8007c14 <xTaskIncrementTick+0x164>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	440b      	add	r3, r1
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d901      	bls.n	8007bd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bd6:	4b11      	ldr	r3, [pc, #68]	@ (8007c1c <xTaskIncrementTick+0x16c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007bde:	2301      	movs	r3, #1
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	e004      	b.n	8007bee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007be4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c20 <xTaskIncrementTick+0x170>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3301      	adds	r3, #1
 8007bea:	4a0d      	ldr	r2, [pc, #52]	@ (8007c20 <xTaskIncrementTick+0x170>)
 8007bec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bee:	697b      	ldr	r3, [r7, #20]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20006338 	.word	0x20006338
 8007bfc:	20006314 	.word	0x20006314
 8007c00:	200062c8 	.word	0x200062c8
 8007c04:	200062cc 	.word	0x200062cc
 8007c08:	20006328 	.word	0x20006328
 8007c0c:	20006330 	.word	0x20006330
 8007c10:	20006318 	.word	0x20006318
 8007c14:	20005e40 	.word	0x20005e40
 8007c18:	20005e3c 	.word	0x20005e3c
 8007c1c:	20006324 	.word	0x20006324
 8007c20:	20006320 	.word	0x20006320

08007c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c2a:	4b28      	ldr	r3, [pc, #160]	@ (8007ccc <vTaskSwitchContext+0xa8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c32:	4b27      	ldr	r3, [pc, #156]	@ (8007cd0 <vTaskSwitchContext+0xac>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c38:	e042      	b.n	8007cc0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007c3a:	4b25      	ldr	r3, [pc, #148]	@ (8007cd0 <vTaskSwitchContext+0xac>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c40:	4b24      	ldr	r3, [pc, #144]	@ (8007cd4 <vTaskSwitchContext+0xb0>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e011      	b.n	8007c6c <vTaskSwitchContext+0x48>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10b      	bne.n	8007c66 <vTaskSwitchContext+0x42>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <vTaskSwitchContext+0x3e>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	491a      	ldr	r1, [pc, #104]	@ (8007cd8 <vTaskSwitchContext+0xb4>)
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0e3      	beq.n	8007c48 <vTaskSwitchContext+0x24>
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4a13      	ldr	r2, [pc, #76]	@ (8007cd8 <vTaskSwitchContext+0xb4>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	605a      	str	r2, [r3, #4]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d104      	bne.n	8007cb0 <vTaskSwitchContext+0x8c>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	605a      	str	r2, [r3, #4]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	4a09      	ldr	r2, [pc, #36]	@ (8007cdc <vTaskSwitchContext+0xb8>)
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	4a06      	ldr	r2, [pc, #24]	@ (8007cd4 <vTaskSwitchContext+0xb0>)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6013      	str	r3, [r2, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	20006338 	.word	0x20006338
 8007cd0:	20006324 	.word	0x20006324
 8007cd4:	20006318 	.word	0x20006318
 8007cd8:	20005e40 	.word	0x20005e40
 8007cdc:	20005e3c 	.word	0x20005e3c

08007ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	60fb      	str	r3, [r7, #12]
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d08:	4b07      	ldr	r3, [pc, #28]	@ (8007d28 <vTaskPlaceOnEventList+0x48>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3318      	adds	r3, #24
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7fe fe70 	bl	80069f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d16:	2101      	movs	r1, #1
 8007d18:	6838      	ldr	r0, [r7, #0]
 8007d1a:	f000 faa9 	bl	8008270 <prvAddCurrentTaskToDelayedList>
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20005e3c 	.word	0x20005e3c

08007d2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10b      	bne.n	8007d56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	617b      	str	r3, [r7, #20]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d56:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7fe fe25 	bl	80069ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	68b8      	ldr	r0, [r7, #8]
 8007d74:	f000 fa7c 	bl	8008270 <prvAddCurrentTaskToDelayedList>
	}
 8007d78:	bf00      	nop
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20005e3c 	.word	0x20005e3c

08007d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	60fb      	str	r3, [r7, #12]
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3318      	adds	r3, #24
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fe56 	bl	8006a68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8007e34 <xTaskRemoveFromEventList+0xb0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d11d      	bne.n	8007e00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fe4d 	bl	8006a68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd2:	4b19      	ldr	r3, [pc, #100]	@ (8007e38 <xTaskRemoveFromEventList+0xb4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d903      	bls.n	8007de2 <xTaskRemoveFromEventList+0x5e>
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dde:	4a16      	ldr	r2, [pc, #88]	@ (8007e38 <xTaskRemoveFromEventList+0xb4>)
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4a13      	ldr	r2, [pc, #76]	@ (8007e3c <xTaskRemoveFromEventList+0xb8>)
 8007df0:	441a      	add	r2, r3
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f7fe fdd8 	bl	80069ae <vListInsertEnd>
 8007dfe:	e005      	b.n	8007e0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	3318      	adds	r3, #24
 8007e04:	4619      	mov	r1, r3
 8007e06:	480e      	ldr	r0, [pc, #56]	@ (8007e40 <xTaskRemoveFromEventList+0xbc>)
 8007e08:	f7fe fdd1 	bl	80069ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e10:	4b0c      	ldr	r3, [pc, #48]	@ (8007e44 <xTaskRemoveFromEventList+0xc0>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d905      	bls.n	8007e26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <xTaskRemoveFromEventList+0xc4>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e001      	b.n	8007e2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e2a:	697b      	ldr	r3, [r7, #20]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20006338 	.word	0x20006338
 8007e38:	20006318 	.word	0x20006318
 8007e3c:	20005e40 	.word	0x20005e40
 8007e40:	200062d0 	.word	0x200062d0
 8007e44:	20005e3c 	.word	0x20005e3c
 8007e48:	20006324 	.word	0x20006324

08007e4c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	60fb      	str	r3, [r7, #12]
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007e72:	f000 fed9 	bl	8008c28 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e76:	4b07      	ldr	r3, [pc, #28]	@ (8007e94 <vTaskSetTimeOutState+0x48>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007e7e:	4b06      	ldr	r3, [pc, #24]	@ (8007e98 <vTaskSetTimeOutState+0x4c>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007e86:	f000 ff01 	bl	8008c8c <vPortExitCritical>
}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20006328 	.word	0x20006328
 8007e98:	20006314 	.word	0x20006314

08007e9c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ea4:	4b06      	ldr	r3, [pc, #24]	@ (8007ec0 <vTaskInternalSetTimeOutState+0x24>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007eac:	4b05      	ldr	r3, [pc, #20]	@ (8007ec4 <vTaskInternalSetTimeOutState+0x28>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	605a      	str	r2, [r3, #4]
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	20006328 	.word	0x20006328
 8007ec4:	20006314 	.word	0x20006314

08007ec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	613b      	str	r3, [r7, #16]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10b      	bne.n	8007f0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60fb      	str	r3, [r7, #12]
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f0e:	f000 fe8b 	bl	8008c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f12:	4b1d      	ldr	r3, [pc, #116]	@ (8007f88 <xTaskCheckForTimeOut+0xc0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2a:	d102      	bne.n	8007f32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61fb      	str	r3, [r7, #28]
 8007f30:	e023      	b.n	8007f7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b15      	ldr	r3, [pc, #84]	@ (8007f8c <xTaskCheckForTimeOut+0xc4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d007      	beq.n	8007f4e <xTaskCheckForTimeOut+0x86>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d302      	bcc.n	8007f4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	e015      	b.n	8007f7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d20b      	bcs.n	8007f70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	1ad2      	subs	r2, r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ff99 	bl	8007e9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	e004      	b.n	8007f7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f76:	2301      	movs	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f7a:	f000 fe87 	bl	8008c8c <vPortExitCritical>

	return xReturn;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20006314 	.word	0x20006314
 8007f8c:	20006328 	.word	0x20006328

08007f90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f94:	4b03      	ldr	r3, [pc, #12]	@ (8007fa4 <vTaskMissedYield+0x14>)
 8007f96:	2201      	movs	r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
}
 8007f9a:	bf00      	nop
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	20006324 	.word	0x20006324

08007fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fb0:	f000 f852 	bl	8008058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fb4:	4b06      	ldr	r3, [pc, #24]	@ (8007fd0 <prvIdleTask+0x28>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d9f9      	bls.n	8007fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fbc:	4b05      	ldr	r3, [pc, #20]	@ (8007fd4 <prvIdleTask+0x2c>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fcc:	e7f0      	b.n	8007fb0 <prvIdleTask+0x8>
 8007fce:	bf00      	nop
 8007fd0:	20005e40 	.word	0x20005e40
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]
 8007fe2:	e00c      	b.n	8007ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4a12      	ldr	r2, [pc, #72]	@ (8008038 <prvInitialiseTaskLists+0x60>)
 8007ff0:	4413      	add	r3, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe fcae 	bl	8006954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	607b      	str	r3, [r7, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b37      	cmp	r3, #55	@ 0x37
 8008002:	d9ef      	bls.n	8007fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008004:	480d      	ldr	r0, [pc, #52]	@ (800803c <prvInitialiseTaskLists+0x64>)
 8008006:	f7fe fca5 	bl	8006954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800800a:	480d      	ldr	r0, [pc, #52]	@ (8008040 <prvInitialiseTaskLists+0x68>)
 800800c:	f7fe fca2 	bl	8006954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008010:	480c      	ldr	r0, [pc, #48]	@ (8008044 <prvInitialiseTaskLists+0x6c>)
 8008012:	f7fe fc9f 	bl	8006954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008016:	480c      	ldr	r0, [pc, #48]	@ (8008048 <prvInitialiseTaskLists+0x70>)
 8008018:	f7fe fc9c 	bl	8006954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800801c:	480b      	ldr	r0, [pc, #44]	@ (800804c <prvInitialiseTaskLists+0x74>)
 800801e:	f7fe fc99 	bl	8006954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008022:	4b0b      	ldr	r3, [pc, #44]	@ (8008050 <prvInitialiseTaskLists+0x78>)
 8008024:	4a05      	ldr	r2, [pc, #20]	@ (800803c <prvInitialiseTaskLists+0x64>)
 8008026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008028:	4b0a      	ldr	r3, [pc, #40]	@ (8008054 <prvInitialiseTaskLists+0x7c>)
 800802a:	4a05      	ldr	r2, [pc, #20]	@ (8008040 <prvInitialiseTaskLists+0x68>)
 800802c:	601a      	str	r2, [r3, #0]
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20005e40 	.word	0x20005e40
 800803c:	200062a0 	.word	0x200062a0
 8008040:	200062b4 	.word	0x200062b4
 8008044:	200062d0 	.word	0x200062d0
 8008048:	200062e4 	.word	0x200062e4
 800804c:	200062fc 	.word	0x200062fc
 8008050:	200062c8 	.word	0x200062c8
 8008054:	200062cc 	.word	0x200062cc

08008058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800805e:	e019      	b.n	8008094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008060:	f000 fde2 	bl	8008c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008064:	4b10      	ldr	r3, [pc, #64]	@ (80080a8 <prvCheckTasksWaitingTermination+0x50>)
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3304      	adds	r3, #4
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe fcf9 	bl	8006a68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008076:	4b0d      	ldr	r3, [pc, #52]	@ (80080ac <prvCheckTasksWaitingTermination+0x54>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3b01      	subs	r3, #1
 800807c:	4a0b      	ldr	r2, [pc, #44]	@ (80080ac <prvCheckTasksWaitingTermination+0x54>)
 800807e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008080:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <prvCheckTasksWaitingTermination+0x58>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3b01      	subs	r3, #1
 8008086:	4a0a      	ldr	r2, [pc, #40]	@ (80080b0 <prvCheckTasksWaitingTermination+0x58>)
 8008088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800808a:	f000 fdff 	bl	8008c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f810 	bl	80080b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008094:	4b06      	ldr	r3, [pc, #24]	@ (80080b0 <prvCheckTasksWaitingTermination+0x58>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e1      	bne.n	8008060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200062e4 	.word	0x200062e4
 80080ac:	20006310 	.word	0x20006310
 80080b0:	200062f8 	.word	0x200062f8

080080b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d108      	bne.n	80080d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 ff9c 	bl	8009008 <vPortFree>
				vPortFree( pxTCB );
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 ff99 	bl	8009008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080d6:	e019      	b.n	800810c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d103      	bne.n	80080ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 ff90 	bl	8009008 <vPortFree>
	}
 80080e8:	e010      	b.n	800810c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d00b      	beq.n	800810c <prvDeleteTCB+0x58>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	60fb      	str	r3, [r7, #12]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <prvDeleteTCB+0x54>
	}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800811a:	4b0c      	ldr	r3, [pc, #48]	@ (800814c <prvResetNextTaskUnblockTime+0x38>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008124:	4b0a      	ldr	r3, [pc, #40]	@ (8008150 <prvResetNextTaskUnblockTime+0x3c>)
 8008126:	f04f 32ff 	mov.w	r2, #4294967295
 800812a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800812c:	e008      	b.n	8008140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812e:	4b07      	ldr	r3, [pc, #28]	@ (800814c <prvResetNextTaskUnblockTime+0x38>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4a04      	ldr	r2, [pc, #16]	@ (8008150 <prvResetNextTaskUnblockTime+0x3c>)
 800813e:	6013      	str	r3, [r2, #0]
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	200062c8 	.word	0x200062c8
 8008150:	20006330 	.word	0x20006330

08008154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800815a:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <xTaskGetSchedulerState+0x34>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008162:	2301      	movs	r3, #1
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	e008      	b.n	800817a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008168:	4b08      	ldr	r3, [pc, #32]	@ (800818c <xTaskGetSchedulerState+0x38>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008170:	2302      	movs	r3, #2
 8008172:	607b      	str	r3, [r7, #4]
 8008174:	e001      	b.n	800817a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800817a:	687b      	ldr	r3, [r7, #4]
	}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	2000631c 	.word	0x2000631c
 800818c:	20006338 	.word	0x20006338

08008190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d058      	beq.n	8008258 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008264 <xTaskPriorityDisinherit+0xd4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d00b      	beq.n	80081c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	60fb      	str	r3, [r7, #12]
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60bb      	str	r3, [r7, #8]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ec:	1e5a      	subs	r2, r3, #1
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d02c      	beq.n	8008258 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008202:	2b00      	cmp	r3, #0
 8008204:	d128      	bne.n	8008258 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	3304      	adds	r3, #4
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe fc2c 	bl	8006a68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008228:	4b0f      	ldr	r3, [pc, #60]	@ (8008268 <xTaskPriorityDisinherit+0xd8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d903      	bls.n	8008238 <xTaskPriorityDisinherit+0xa8>
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	4a0c      	ldr	r2, [pc, #48]	@ (8008268 <xTaskPriorityDisinherit+0xd8>)
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4a09      	ldr	r2, [pc, #36]	@ (800826c <xTaskPriorityDisinherit+0xdc>)
 8008246:	441a      	add	r2, r3
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f7fe fbad 	bl	80069ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008258:	697b      	ldr	r3, [r7, #20]
	}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20005e3c 	.word	0x20005e3c
 8008268:	20006318 	.word	0x20006318
 800826c:	20005e40 	.word	0x20005e40

08008270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800827a:	4b21      	ldr	r3, [pc, #132]	@ (8008300 <prvAddCurrentTaskToDelayedList+0x90>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008280:	4b20      	ldr	r3, [pc, #128]	@ (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3304      	adds	r3, #4
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fbee 	bl	8006a68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d10a      	bne.n	80082aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b1a      	ldr	r3, [pc, #104]	@ (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4819      	ldr	r0, [pc, #100]	@ (8008308 <prvAddCurrentTaskToDelayedList+0x98>)
 80082a4:	f7fe fb83 	bl	80069ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082a8:	e026      	b.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082b2:	4b14      	ldr	r3, [pc, #80]	@ (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d209      	bcs.n	80082d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c2:	4b12      	ldr	r3, [pc, #72]	@ (800830c <prvAddCurrentTaskToDelayedList+0x9c>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fe fb91 	bl	80069f6 <vListInsert>
}
 80082d4:	e010      	b.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b0a      	ldr	r3, [pc, #40]	@ (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fe fb87 	bl	80069f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d202      	bcs.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082f2:	4a08      	ldr	r2, [pc, #32]	@ (8008314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6013      	str	r3, [r2, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20006314 	.word	0x20006314
 8008304:	20005e3c 	.word	0x20005e3c
 8008308:	200062fc 	.word	0x200062fc
 800830c:	200062cc 	.word	0x200062cc
 8008310:	200062c8 	.word	0x200062c8
 8008314:	20006330 	.word	0x20006330

08008318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	@ 0x28
 800831c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008322:	f000 fb13 	bl	800894c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008326:	4b1d      	ldr	r3, [pc, #116]	@ (800839c <xTimerCreateTimerTask+0x84>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d021      	beq.n	8008372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008336:	1d3a      	adds	r2, r7, #4
 8008338:	f107 0108 	add.w	r1, r7, #8
 800833c:	f107 030c 	add.w	r3, r7, #12
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe faed 	bl	8006920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	9202      	str	r2, [sp, #8]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	2302      	movs	r3, #2
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2300      	movs	r3, #0
 8008356:	460a      	mov	r2, r1
 8008358:	4911      	ldr	r1, [pc, #68]	@ (80083a0 <xTimerCreateTimerTask+0x88>)
 800835a:	4812      	ldr	r0, [pc, #72]	@ (80083a4 <xTimerCreateTimerTask+0x8c>)
 800835c:	f7ff f8a8 	bl	80074b0 <xTaskCreateStatic>
 8008360:	4603      	mov	r3, r0
 8008362:	4a11      	ldr	r2, [pc, #68]	@ (80083a8 <xTimerCreateTimerTask+0x90>)
 8008364:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008366:	4b10      	ldr	r3, [pc, #64]	@ (80083a8 <xTimerCreateTimerTask+0x90>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800836e:	2301      	movs	r3, #1
 8008370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10b      	bne.n	8008390 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	613b      	str	r3, [r7, #16]
}
 800838a:	bf00      	nop
 800838c:	bf00      	nop
 800838e:	e7fd      	b.n	800838c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008390:	697b      	ldr	r3, [r7, #20]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	2000636c 	.word	0x2000636c
 80083a0:	080188cc 	.word	0x080188cc
 80083a4:	080084e5 	.word	0x080084e5
 80083a8:	20006370 	.word	0x20006370

080083ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08a      	sub	sp, #40	@ 0x28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10b      	bne.n	80083dc <xTimerGenericCommand+0x30>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	623b      	str	r3, [r7, #32]
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	e7fd      	b.n	80083d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083dc:	4b19      	ldr	r3, [pc, #100]	@ (8008444 <xTimerGenericCommand+0x98>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d02a      	beq.n	800843a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	dc18      	bgt.n	8008428 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083f6:	f7ff fead 	bl	8008154 <xTaskGetSchedulerState>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d109      	bne.n	8008414 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008400:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <xTimerGenericCommand+0x98>)
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	f107 0110 	add.w	r1, r7, #16
 8008408:	2300      	movs	r3, #0
 800840a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840c:	f7fe fc60 	bl	8006cd0 <xQueueGenericSend>
 8008410:	6278      	str	r0, [r7, #36]	@ 0x24
 8008412:	e012      	b.n	800843a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008414:	4b0b      	ldr	r3, [pc, #44]	@ (8008444 <xTimerGenericCommand+0x98>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	f107 0110 	add.w	r1, r7, #16
 800841c:	2300      	movs	r3, #0
 800841e:	2200      	movs	r2, #0
 8008420:	f7fe fc56 	bl	8006cd0 <xQueueGenericSend>
 8008424:	6278      	str	r0, [r7, #36]	@ 0x24
 8008426:	e008      	b.n	800843a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008428:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <xTimerGenericCommand+0x98>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	f107 0110 	add.w	r1, r7, #16
 8008430:	2300      	movs	r3, #0
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	f7fe fd4e 	bl	8006ed4 <xQueueGenericSendFromISR>
 8008438:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800843c:	4618      	mov	r0, r3
 800843e:	3728      	adds	r7, #40	@ 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	2000636c 	.word	0x2000636c

08008448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af02      	add	r7, sp, #8
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008452:	4b23      	ldr	r3, [pc, #140]	@ (80084e0 <prvProcessExpiredTimer+0x98>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fb01 	bl	8006a68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d023      	beq.n	80084bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	18d1      	adds	r1, r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	6978      	ldr	r0, [r7, #20]
 8008482:	f000 f8d5 	bl	8008630 <prvInsertTimerInActiveList>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d020      	beq.n	80084ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800848c:	2300      	movs	r3, #0
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	2300      	movs	r3, #0
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	2100      	movs	r1, #0
 8008496:	6978      	ldr	r0, [r7, #20]
 8008498:	f7ff ff88 	bl	80083ac <xTimerGenericCommand>
 800849c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d114      	bne.n	80084ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	6978      	ldr	r0, [r7, #20]
 80084d4:	4798      	blx	r3
}
 80084d6:	bf00      	nop
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20006364 	.word	0x20006364

080084e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084ec:	f107 0308 	add.w	r3, r7, #8
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f859 	bl	80085a8 <prvGetNextExpireTime>
 80084f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4619      	mov	r1, r3
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f805 	bl	800850c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008502:	f000 f8d7 	bl	80086b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008506:	bf00      	nop
 8008508:	e7f0      	b.n	80084ec <prvTimerTask+0x8>
	...

0800850c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008516:	f7ff fa0f 	bl	8007938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800851a:	f107 0308 	add.w	r3, r7, #8
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f866 	bl	80085f0 <prvSampleTimeNow>
 8008524:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d130      	bne.n	800858e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <prvProcessTimerOrBlockTask+0x3c>
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	429a      	cmp	r2, r3
 8008538:	d806      	bhi.n	8008548 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800853a:	f7ff fa0b 	bl	8007954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff ff81 	bl	8008448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008546:	e024      	b.n	8008592 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800854e:	4b13      	ldr	r3, [pc, #76]	@ (800859c <prvProcessTimerOrBlockTask+0x90>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <prvProcessTimerOrBlockTask+0x50>
 8008558:	2301      	movs	r3, #1
 800855a:	e000      	b.n	800855e <prvProcessTimerOrBlockTask+0x52>
 800855c:	2300      	movs	r3, #0
 800855e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008560:	4b0f      	ldr	r3, [pc, #60]	@ (80085a0 <prvProcessTimerOrBlockTask+0x94>)
 8008562:	6818      	ldr	r0, [r3, #0]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	f7fe ff6b 	bl	8007448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008572:	f7ff f9ef 	bl	8007954 <xTaskResumeAll>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800857c:	4b09      	ldr	r3, [pc, #36]	@ (80085a4 <prvProcessTimerOrBlockTask+0x98>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
}
 800858c:	e001      	b.n	8008592 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800858e:	f7ff f9e1 	bl	8007954 <xTaskResumeAll>
}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20006368 	.word	0x20006368
 80085a0:	2000636c 	.word	0x2000636c
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085b0:	4b0e      	ldr	r3, [pc, #56]	@ (80085ec <prvGetNextExpireTime+0x44>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <prvGetNextExpireTime+0x16>
 80085ba:	2201      	movs	r2, #1
 80085bc:	e000      	b.n	80085c0 <prvGetNextExpireTime+0x18>
 80085be:	2200      	movs	r2, #0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085cc:	4b07      	ldr	r3, [pc, #28]	@ (80085ec <prvGetNextExpireTime+0x44>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	e001      	b.n	80085dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085dc:	68fb      	ldr	r3, [r7, #12]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20006364 	.word	0x20006364

080085f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085f8:	f7ff fa4a 	bl	8007a90 <xTaskGetTickCount>
 80085fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085fe:	4b0b      	ldr	r3, [pc, #44]	@ (800862c <prvSampleTimeNow+0x3c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	429a      	cmp	r2, r3
 8008606:	d205      	bcs.n	8008614 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008608:	f000 f93a 	bl	8008880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	e002      	b.n	800861a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800861a:	4a04      	ldr	r2, [pc, #16]	@ (800862c <prvSampleTimeNow+0x3c>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008620:	68fb      	ldr	r3, [r7, #12]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20006374 	.word	0x20006374

08008630 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	429a      	cmp	r2, r3
 8008654:	d812      	bhi.n	800867c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	429a      	cmp	r2, r3
 8008662:	d302      	bcc.n	800866a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008664:	2301      	movs	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e01b      	b.n	80086a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800866a:	4b10      	ldr	r3, [pc, #64]	@ (80086ac <prvInsertTimerInActiveList+0x7c>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3304      	adds	r3, #4
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f7fe f9be 	bl	80069f6 <vListInsert>
 800867a:	e012      	b.n	80086a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d206      	bcs.n	8008692 <prvInsertTimerInActiveList+0x62>
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d302      	bcc.n	8008692 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e007      	b.n	80086a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008692:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <prvInsertTimerInActiveList+0x80>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fe f9aa 	bl	80069f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086a2:	697b      	ldr	r3, [r7, #20]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20006368 	.word	0x20006368
 80086b0:	20006364 	.word	0x20006364

080086b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	@ 0x38
 80086b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086ba:	e0ce      	b.n	800885a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da19      	bge.n	80086f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086c2:	1d3b      	adds	r3, r7, #4
 80086c4:	3304      	adds	r3, #4
 80086c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	61fb      	str	r3, [r7, #28]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ec:	6850      	ldr	r0, [r2, #4]
 80086ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086f0:	6892      	ldr	r2, [r2, #8]
 80086f2:	4611      	mov	r1, r2
 80086f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f2c0 80ae 	blt.w	800885a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d004      	beq.n	8008714 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800870a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870c:	3304      	adds	r3, #4
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe f9aa 	bl	8006a68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008714:	463b      	mov	r3, r7
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff ff6a 	bl	80085f0 <prvSampleTimeNow>
 800871c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b09      	cmp	r3, #9
 8008722:	f200 8097 	bhi.w	8008854 <prvProcessReceivedCommands+0x1a0>
 8008726:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <prvProcessReceivedCommands+0x78>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008755 	.word	0x08008755
 8008730:	08008755 	.word	0x08008755
 8008734:	08008755 	.word	0x08008755
 8008738:	080087cb 	.word	0x080087cb
 800873c:	080087df 	.word	0x080087df
 8008740:	0800882b 	.word	0x0800882b
 8008744:	08008755 	.word	0x08008755
 8008748:	08008755 	.word	0x08008755
 800874c:	080087cb 	.word	0x080087cb
 8008750:	080087df 	.word	0x080087df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	b2da      	uxtb	r2, r3
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	18d1      	adds	r1, r2, r3
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008774:	f7ff ff5c 	bl	8008630 <prvInsertTimerInActiveList>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d06c      	beq.n	8008858 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008784:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d061      	beq.n	8008858 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	441a      	add	r2, r3
 800879c:	2300      	movs	r3, #0
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	2300      	movs	r3, #0
 80087a2:	2100      	movs	r1, #0
 80087a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a6:	f7ff fe01 	bl	80083ac <xTimerGenericCommand>
 80087aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d152      	bne.n	8008858 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	61bb      	str	r3, [r7, #24]
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop
 80087c8:	e7fd      	b.n	80087c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087d0:	f023 0301 	bic.w	r3, r3, #1
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087dc:	e03d      	b.n	800885a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087e4:	f043 0301 	orr.w	r3, r3, #1
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10b      	bne.n	8008816 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	617b      	str	r3, [r7, #20]
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	e7fd      	b.n	8008812 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	699a      	ldr	r2, [r3, #24]
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	18d1      	adds	r1, r2, r3
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008824:	f7ff ff04 	bl	8008630 <prvInsertTimerInActiveList>
					break;
 8008828:	e017      	b.n	800885a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d103      	bne.n	8008840 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800883a:	f000 fbe5 	bl	8009008 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800883e:	e00c      	b.n	800885a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008846:	f023 0301 	bic.w	r3, r3, #1
 800884a:	b2da      	uxtb	r2, r3
 800884c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008852:	e002      	b.n	800885a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <prvProcessReceivedCommands+0x1a6>
					break;
 8008858:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800885a:	4b08      	ldr	r3, [pc, #32]	@ (800887c <prvProcessReceivedCommands+0x1c8>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	1d39      	adds	r1, r7, #4
 8008860:	2200      	movs	r2, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fbd4 	bl	8007010 <xQueueReceive>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	f47f af26 	bne.w	80086bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	3730      	adds	r7, #48	@ 0x30
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	2000636c 	.word	0x2000636c

08008880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008886:	e049      	b.n	800891c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008888:	4b2e      	ldr	r3, [pc, #184]	@ (8008944 <prvSwitchTimerLists+0xc4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008892:	4b2c      	ldr	r3, [pc, #176]	@ (8008944 <prvSwitchTimerLists+0xc4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3304      	adds	r3, #4
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe f8e1 	bl	8006a68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d02f      	beq.n	800891c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	4413      	add	r3, r2
 80088c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d90e      	bls.n	80088ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088da:	4b1a      	ldr	r3, [pc, #104]	@ (8008944 <prvSwitchTimerLists+0xc4>)
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fe f886 	bl	80069f6 <vListInsert>
 80088ea:	e017      	b.n	800891c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088ec:	2300      	movs	r3, #0
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	2300      	movs	r3, #0
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	2100      	movs	r1, #0
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff fd58 	bl	80083ac <xTimerGenericCommand>
 80088fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10b      	bne.n	800891c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	603b      	str	r3, [r7, #0]
}
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	e7fd      	b.n	8008918 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800891c:	4b09      	ldr	r3, [pc, #36]	@ (8008944 <prvSwitchTimerLists+0xc4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1b0      	bne.n	8008888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008926:	4b07      	ldr	r3, [pc, #28]	@ (8008944 <prvSwitchTimerLists+0xc4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800892c:	4b06      	ldr	r3, [pc, #24]	@ (8008948 <prvSwitchTimerLists+0xc8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a04      	ldr	r2, [pc, #16]	@ (8008944 <prvSwitchTimerLists+0xc4>)
 8008932:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008934:	4a04      	ldr	r2, [pc, #16]	@ (8008948 <prvSwitchTimerLists+0xc8>)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	6013      	str	r3, [r2, #0]
}
 800893a:	bf00      	nop
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20006364 	.word	0x20006364
 8008948:	20006368 	.word	0x20006368

0800894c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008952:	f000 f969 	bl	8008c28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008956:	4b15      	ldr	r3, [pc, #84]	@ (80089ac <prvCheckForValidListAndQueue+0x60>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d120      	bne.n	80089a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800895e:	4814      	ldr	r0, [pc, #80]	@ (80089b0 <prvCheckForValidListAndQueue+0x64>)
 8008960:	f7fd fff8 	bl	8006954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008964:	4813      	ldr	r0, [pc, #76]	@ (80089b4 <prvCheckForValidListAndQueue+0x68>)
 8008966:	f7fd fff5 	bl	8006954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800896a:	4b13      	ldr	r3, [pc, #76]	@ (80089b8 <prvCheckForValidListAndQueue+0x6c>)
 800896c:	4a10      	ldr	r2, [pc, #64]	@ (80089b0 <prvCheckForValidListAndQueue+0x64>)
 800896e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008970:	4b12      	ldr	r3, [pc, #72]	@ (80089bc <prvCheckForValidListAndQueue+0x70>)
 8008972:	4a10      	ldr	r2, [pc, #64]	@ (80089b4 <prvCheckForValidListAndQueue+0x68>)
 8008974:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008976:	2300      	movs	r3, #0
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	4b11      	ldr	r3, [pc, #68]	@ (80089c0 <prvCheckForValidListAndQueue+0x74>)
 800897c:	4a11      	ldr	r2, [pc, #68]	@ (80089c4 <prvCheckForValidListAndQueue+0x78>)
 800897e:	2110      	movs	r1, #16
 8008980:	200a      	movs	r0, #10
 8008982:	f7fe f905 	bl	8006b90 <xQueueGenericCreateStatic>
 8008986:	4603      	mov	r3, r0
 8008988:	4a08      	ldr	r2, [pc, #32]	@ (80089ac <prvCheckForValidListAndQueue+0x60>)
 800898a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800898c:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <prvCheckForValidListAndQueue+0x60>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008994:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <prvCheckForValidListAndQueue+0x60>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	490b      	ldr	r1, [pc, #44]	@ (80089c8 <prvCheckForValidListAndQueue+0x7c>)
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fd2a 	bl	80073f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a0:	f000 f974 	bl	8008c8c <vPortExitCritical>
}
 80089a4:	bf00      	nop
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	2000636c 	.word	0x2000636c
 80089b0:	2000633c 	.word	0x2000633c
 80089b4:	20006350 	.word	0x20006350
 80089b8:	20006364 	.word	0x20006364
 80089bc:	20006368 	.word	0x20006368
 80089c0:	20006418 	.word	0x20006418
 80089c4:	20006378 	.word	0x20006378
 80089c8:	080188d4 	.word	0x080188d4

080089cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3b04      	subs	r3, #4
 80089dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80089e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f023 0201 	bic.w	r2, r3, #1
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3b04      	subs	r3, #4
 80089fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008a30 <pxPortInitialiseStack+0x64>)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3b14      	subs	r3, #20
 8008a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3b04      	subs	r3, #4
 8008a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f06f 0202 	mvn.w	r2, #2
 8008a1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3b20      	subs	r3, #32
 8008a20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a22:	68fb      	ldr	r3, [r7, #12]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	08008a35 	.word	0x08008a35

08008a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a3e:	4b13      	ldr	r3, [pc, #76]	@ (8008a8c <prvTaskExitError+0x58>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a46:	d00b      	beq.n	8008a60 <prvTaskExitError+0x2c>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	60fb      	str	r3, [r7, #12]
}
 8008a5a:	bf00      	nop
 8008a5c:	bf00      	nop
 8008a5e:	e7fd      	b.n	8008a5c <prvTaskExitError+0x28>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60bb      	str	r3, [r7, #8]
}
 8008a72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a74:	bf00      	nop
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0fc      	beq.n	8008a76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	2000003c 	.word	0x2000003c

08008a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a90:	4b07      	ldr	r3, [pc, #28]	@ (8008ab0 <pxCurrentTCBConst2>)
 8008a92:	6819      	ldr	r1, [r3, #0]
 8008a94:	6808      	ldr	r0, [r1, #0]
 8008a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	f380 8809 	msr	PSP, r0
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f380 8811 	msr	BASEPRI, r0
 8008aaa:	4770      	bx	lr
 8008aac:	f3af 8000 	nop.w

08008ab0 <pxCurrentTCBConst2>:
 8008ab0:	20005e3c 	.word	0x20005e3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop

08008ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ab8:	4808      	ldr	r0, [pc, #32]	@ (8008adc <prvPortStartFirstTask+0x24>)
 8008aba:	6800      	ldr	r0, [r0, #0]
 8008abc:	6800      	ldr	r0, [r0, #0]
 8008abe:	f380 8808 	msr	MSP, r0
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f380 8814 	msr	CONTROL, r0
 8008aca:	b662      	cpsie	i
 8008acc:	b661      	cpsie	f
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	df00      	svc	0
 8008ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ada:	bf00      	nop
 8008adc:	e000ed08 	.word	0xe000ed08

08008ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ae6:	4b47      	ldr	r3, [pc, #284]	@ (8008c04 <xPortStartScheduler+0x124>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a47      	ldr	r2, [pc, #284]	@ (8008c08 <xPortStartScheduler+0x128>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d10b      	bne.n	8008b08 <xPortStartScheduler+0x28>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	60fb      	str	r3, [r7, #12]
}
 8008b02:	bf00      	nop
 8008b04:	bf00      	nop
 8008b06:	e7fd      	b.n	8008b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b08:	4b3e      	ldr	r3, [pc, #248]	@ (8008c04 <xPortStartScheduler+0x124>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c0c <xPortStartScheduler+0x12c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d10b      	bne.n	8008b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	613b      	str	r3, [r7, #16]
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	e7fd      	b.n	8008b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b2a:	4b39      	ldr	r3, [pc, #228]	@ (8008c10 <xPortStartScheduler+0x130>)
 8008b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	22ff      	movs	r2, #255	@ 0xff
 8008b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	4b31      	ldr	r3, [pc, #196]	@ (8008c14 <xPortStartScheduler+0x134>)
 8008b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b52:	4b31      	ldr	r3, [pc, #196]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008b54:	2207      	movs	r2, #7
 8008b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b58:	e009      	b.n	8008b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	4a2d      	ldr	r2, [pc, #180]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b6e:	78fb      	ldrb	r3, [r7, #3]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b76:	2b80      	cmp	r3, #128	@ 0x80
 8008b78:	d0ef      	beq.n	8008b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b7a:	4b27      	ldr	r3, [pc, #156]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1c3 0307 	rsb	r3, r3, #7
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d00b      	beq.n	8008b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60bb      	str	r3, [r7, #8]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008bb0:	4a19      	ldr	r2, [pc, #100]	@ (8008c18 <xPortStartScheduler+0x138>)
 8008bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bbc:	4b17      	ldr	r3, [pc, #92]	@ (8008c1c <xPortStartScheduler+0x13c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a16      	ldr	r2, [pc, #88]	@ (8008c1c <xPortStartScheduler+0x13c>)
 8008bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bc8:	4b14      	ldr	r3, [pc, #80]	@ (8008c1c <xPortStartScheduler+0x13c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a13      	ldr	r2, [pc, #76]	@ (8008c1c <xPortStartScheduler+0x13c>)
 8008bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bd4:	f000 f8da 	bl	8008d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bd8:	4b11      	ldr	r3, [pc, #68]	@ (8008c20 <xPortStartScheduler+0x140>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bde:	f000 f8f9 	bl	8008dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008be2:	4b10      	ldr	r3, [pc, #64]	@ (8008c24 <xPortStartScheduler+0x144>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a0f      	ldr	r2, [pc, #60]	@ (8008c24 <xPortStartScheduler+0x144>)
 8008be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bee:	f7ff ff63 	bl	8008ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bf2:	f7ff f817 	bl	8007c24 <vTaskSwitchContext>
	prvTaskExitError();
 8008bf6:	f7ff ff1d 	bl	8008a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	e000ed00 	.word	0xe000ed00
 8008c08:	410fc271 	.word	0x410fc271
 8008c0c:	410fc270 	.word	0x410fc270
 8008c10:	e000e400 	.word	0xe000e400
 8008c14:	20006468 	.word	0x20006468
 8008c18:	2000646c 	.word	0x2000646c
 8008c1c:	e000ed20 	.word	0xe000ed20
 8008c20:	2000003c 	.word	0x2000003c
 8008c24:	e000ef34 	.word	0xe000ef34

08008c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	607b      	str	r3, [r7, #4]
}
 8008c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c42:	4b10      	ldr	r3, [pc, #64]	@ (8008c84 <vPortEnterCritical+0x5c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3301      	adds	r3, #1
 8008c48:	4a0e      	ldr	r2, [pc, #56]	@ (8008c84 <vPortEnterCritical+0x5c>)
 8008c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <vPortEnterCritical+0x5c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d110      	bne.n	8008c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c54:	4b0c      	ldr	r3, [pc, #48]	@ (8008c88 <vPortEnterCritical+0x60>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	603b      	str	r3, [r7, #0]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <vPortEnterCritical+0x4a>
	}
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	2000003c 	.word	0x2000003c
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c92:	4b12      	ldr	r3, [pc, #72]	@ (8008cdc <vPortExitCritical+0x50>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10b      	bne.n	8008cb2 <vPortExitCritical+0x26>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	607b      	str	r3, [r7, #4]
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cdc <vPortExitCritical+0x50>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	4a08      	ldr	r2, [pc, #32]	@ (8008cdc <vPortExitCritical+0x50>)
 8008cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cbc:	4b07      	ldr	r3, [pc, #28]	@ (8008cdc <vPortExitCritical+0x50>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d105      	bne.n	8008cd0 <vPortExitCritical+0x44>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f383 8811 	msr	BASEPRI, r3
}
 8008cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	2000003c 	.word	0x2000003c

08008ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ce0:	f3ef 8009 	mrs	r0, PSP
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	4b15      	ldr	r3, [pc, #84]	@ (8008d40 <pxCurrentTCBConst>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	f01e 0f10 	tst.w	lr, #16
 8008cf0:	bf08      	it	eq
 8008cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfa:	6010      	str	r0, [r2, #0]
 8008cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d04:	f380 8811 	msr	BASEPRI, r0
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f7fe ff88 	bl	8007c24 <vTaskSwitchContext>
 8008d14:	f04f 0000 	mov.w	r0, #0
 8008d18:	f380 8811 	msr	BASEPRI, r0
 8008d1c:	bc09      	pop	{r0, r3}
 8008d1e:	6819      	ldr	r1, [r3, #0]
 8008d20:	6808      	ldr	r0, [r1, #0]
 8008d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d26:	f01e 0f10 	tst.w	lr, #16
 8008d2a:	bf08      	it	eq
 8008d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d30:	f380 8809 	msr	PSP, r0
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	f3af 8000 	nop.w

08008d40 <pxCurrentTCBConst>:
 8008d40:	20005e3c 	.word	0x20005e3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
}
 8008d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d62:	f7fe fea5 	bl	8007ab0 <xTaskIncrementTick>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <xPortSysTickHandler+0x40>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	2300      	movs	r3, #0
 8008d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f383 8811 	msr	BASEPRI, r3
}
 8008d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d90:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc0 <vPortSetupTimerInterrupt+0x34>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d96:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc4 <vPortSetupTimerInterrupt+0x38>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc8 <vPortSetupTimerInterrupt+0x3c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a0a      	ldr	r2, [pc, #40]	@ (8008dcc <vPortSetupTimerInterrupt+0x40>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	099b      	lsrs	r3, r3, #6
 8008da8:	4a09      	ldr	r2, [pc, #36]	@ (8008dd0 <vPortSetupTimerInterrupt+0x44>)
 8008daa:	3b01      	subs	r3, #1
 8008dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dae:	4b04      	ldr	r3, [pc, #16]	@ (8008dc0 <vPortSetupTimerInterrupt+0x34>)
 8008db0:	2207      	movs	r2, #7
 8008db2:	601a      	str	r2, [r3, #0]
}
 8008db4:	bf00      	nop
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	e000e010 	.word	0xe000e010
 8008dc4:	e000e018 	.word	0xe000e018
 8008dc8:	20000030 	.word	0x20000030
 8008dcc:	10624dd3 	.word	0x10624dd3
 8008dd0:	e000e014 	.word	0xe000e014

08008dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008de4 <vPortEnableVFP+0x10>
 8008dd8:	6801      	ldr	r1, [r0, #0]
 8008dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008dde:	6001      	str	r1, [r0, #0]
 8008de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008de2:	bf00      	nop
 8008de4:	e000ed88 	.word	0xe000ed88

08008de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dee:	f3ef 8305 	mrs	r3, IPSR
 8008df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b0f      	cmp	r3, #15
 8008df8:	d915      	bls.n	8008e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dfa:	4a18      	ldr	r2, [pc, #96]	@ (8008e5c <vPortValidateInterruptPriority+0x74>)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e04:	4b16      	ldr	r3, [pc, #88]	@ (8008e60 <vPortValidateInterruptPriority+0x78>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	7afa      	ldrb	r2, [r7, #11]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d20b      	bcs.n	8008e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e26:	4b0f      	ldr	r3, [pc, #60]	@ (8008e64 <vPortValidateInterruptPriority+0x7c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e68 <vPortValidateInterruptPriority+0x80>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d90b      	bls.n	8008e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	603b      	str	r3, [r7, #0]
}
 8008e48:	bf00      	nop
 8008e4a:	bf00      	nop
 8008e4c:	e7fd      	b.n	8008e4a <vPortValidateInterruptPriority+0x62>
	}
 8008e4e:	bf00      	nop
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	e000e3f0 	.word	0xe000e3f0
 8008e60:	20006468 	.word	0x20006468
 8008e64:	e000ed0c 	.word	0xe000ed0c
 8008e68:	2000646c 	.word	0x2000646c

08008e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	@ 0x28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e78:	f7fe fd5e 	bl	8007938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ff0 <pvPortMalloc+0x184>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e84:	f000 f924 	bl	80090d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e88:	4b5a      	ldr	r3, [pc, #360]	@ (8008ff4 <pvPortMalloc+0x188>)
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 8095 	bne.w	8008fc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01e      	beq.n	8008eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d015      	beq.n	8008eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f023 0307 	bic.w	r3, r3, #7
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <pvPortMalloc+0x6e>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	617b      	str	r3, [r7, #20]
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	e7fd      	b.n	8008ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d06f      	beq.n	8008fc0 <pvPortMalloc+0x154>
 8008ee0:	4b45      	ldr	r3, [pc, #276]	@ (8008ff8 <pvPortMalloc+0x18c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d86a      	bhi.n	8008fc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eea:	4b44      	ldr	r3, [pc, #272]	@ (8008ffc <pvPortMalloc+0x190>)
 8008eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008eee:	4b43      	ldr	r3, [pc, #268]	@ (8008ffc <pvPortMalloc+0x190>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ef4:	e004      	b.n	8008f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d903      	bls.n	8008f12 <pvPortMalloc+0xa6>
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f1      	bne.n	8008ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f12:	4b37      	ldr	r3, [pc, #220]	@ (8008ff0 <pvPortMalloc+0x184>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d051      	beq.n	8008fc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2208      	movs	r2, #8
 8008f22:	4413      	add	r3, r2
 8008f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	1ad2      	subs	r2, r2, r3
 8008f36:	2308      	movs	r3, #8
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d920      	bls.n	8008f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4413      	add	r3, r2
 8008f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <pvPortMalloc+0xfc>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	613b      	str	r3, [r7, #16]
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f7a:	69b8      	ldr	r0, [r7, #24]
 8008f7c:	f000 f90a 	bl	8009194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff8 <pvPortMalloc+0x18c>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff8 <pvPortMalloc+0x18c>)
 8008f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff8 <pvPortMalloc+0x18c>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <pvPortMalloc+0x194>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d203      	bcs.n	8008fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f9a:	4b17      	ldr	r3, [pc, #92]	@ (8008ff8 <pvPortMalloc+0x18c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a18      	ldr	r2, [pc, #96]	@ (8009000 <pvPortMalloc+0x194>)
 8008fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	4b13      	ldr	r3, [pc, #76]	@ (8008ff4 <pvPortMalloc+0x188>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fb6:	4b13      	ldr	r3, [pc, #76]	@ (8009004 <pvPortMalloc+0x198>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	4a11      	ldr	r2, [pc, #68]	@ (8009004 <pvPortMalloc+0x198>)
 8008fbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fc0:	f7fe fcc8 	bl	8007954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <pvPortMalloc+0x17a>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <pvPortMalloc+0x176>
	return pvReturn;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3728      	adds	r7, #40	@ 0x28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	2000a078 	.word	0x2000a078
 8008ff4:	2000a08c 	.word	0x2000a08c
 8008ff8:	2000a07c 	.word	0x2000a07c
 8008ffc:	2000a070 	.word	0x2000a070
 8009000:	2000a080 	.word	0x2000a080
 8009004:	2000a084 	.word	0x2000a084

08009008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d04f      	beq.n	80090ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800901a:	2308      	movs	r3, #8
 800901c:	425b      	negs	r3, r3
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4413      	add	r3, r2
 8009022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	4b25      	ldr	r3, [pc, #148]	@ (80090c4 <vPortFree+0xbc>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <vPortFree+0x46>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	60fb      	str	r3, [r7, #12]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <vPortFree+0x66>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	60bb      	str	r3, [r7, #8]
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	4b14      	ldr	r3, [pc, #80]	@ (80090c4 <vPortFree+0xbc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4013      	ands	r3, r2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01e      	beq.n	80090ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d11a      	bne.n	80090ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	4b0e      	ldr	r3, [pc, #56]	@ (80090c4 <vPortFree+0xbc>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	43db      	mvns	r3, r3
 800908e:	401a      	ands	r2, r3
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009094:	f7fe fc50 	bl	8007938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	4b0a      	ldr	r3, [pc, #40]	@ (80090c8 <vPortFree+0xc0>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4413      	add	r3, r2
 80090a2:	4a09      	ldr	r2, [pc, #36]	@ (80090c8 <vPortFree+0xc0>)
 80090a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090a6:	6938      	ldr	r0, [r7, #16]
 80090a8:	f000 f874 	bl	8009194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090ac:	4b07      	ldr	r3, [pc, #28]	@ (80090cc <vPortFree+0xc4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	4a06      	ldr	r2, [pc, #24]	@ (80090cc <vPortFree+0xc4>)
 80090b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090b6:	f7fe fc4d 	bl	8007954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090ba:	bf00      	nop
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	2000a08c 	.word	0x2000a08c
 80090c8:	2000a07c 	.word	0x2000a07c
 80090cc:	2000a088 	.word	0x2000a088

080090d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80090da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090dc:	4b27      	ldr	r3, [pc, #156]	@ (800917c <prvHeapInit+0xac>)
 80090de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00c      	beq.n	8009104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3307      	adds	r3, #7
 80090ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0307 	bic.w	r3, r3, #7
 80090f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	4a1f      	ldr	r2, [pc, #124]	@ (800917c <prvHeapInit+0xac>)
 8009100:	4413      	add	r3, r2
 8009102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009108:	4a1d      	ldr	r2, [pc, #116]	@ (8009180 <prvHeapInit+0xb0>)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800910e:	4b1c      	ldr	r3, [pc, #112]	@ (8009180 <prvHeapInit+0xb0>)
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	4413      	add	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800911c:	2208      	movs	r2, #8
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0307 	bic.w	r3, r3, #7
 800912a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a15      	ldr	r2, [pc, #84]	@ (8009184 <prvHeapInit+0xb4>)
 8009130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009132:	4b14      	ldr	r3, [pc, #80]	@ (8009184 <prvHeapInit+0xb4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800913a:	4b12      	ldr	r3, [pc, #72]	@ (8009184 <prvHeapInit+0xb4>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	1ad2      	subs	r2, r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009150:	4b0c      	ldr	r3, [pc, #48]	@ (8009184 <prvHeapInit+0xb4>)
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4a0a      	ldr	r2, [pc, #40]	@ (8009188 <prvHeapInit+0xb8>)
 800915e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4a09      	ldr	r2, [pc, #36]	@ (800918c <prvHeapInit+0xbc>)
 8009166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009168:	4b09      	ldr	r3, [pc, #36]	@ (8009190 <prvHeapInit+0xc0>)
 800916a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800916e:	601a      	str	r2, [r3, #0]
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	20006470 	.word	0x20006470
 8009180:	2000a070 	.word	0x2000a070
 8009184:	2000a078 	.word	0x2000a078
 8009188:	2000a080 	.word	0x2000a080
 800918c:	2000a07c 	.word	0x2000a07c
 8009190:	2000a08c 	.word	0x2000a08c

08009194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800919c:	4b28      	ldr	r3, [pc, #160]	@ (8009240 <prvInsertBlockIntoFreeList+0xac>)
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	e002      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x14>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d8f7      	bhi.n	80091a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4413      	add	r3, r2
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d108      	bne.n	80091d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	441a      	add	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	441a      	add	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d118      	bne.n	800921c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b15      	ldr	r3, [pc, #84]	@ (8009244 <prvInsertBlockIntoFreeList+0xb0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d00d      	beq.n	8009212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	441a      	add	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e008      	b.n	8009224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009212:	4b0c      	ldr	r3, [pc, #48]	@ (8009244 <prvInsertBlockIntoFreeList+0xb0>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e003      	b.n	8009224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	429a      	cmp	r2, r3
 800922a:	d002      	beq.n	8009232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009232:	bf00      	nop
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	2000a070 	.word	0x2000a070
 8009244:	2000a078 	.word	0x2000a078

08009248 <rcl_get_zero_initialized_publisher>:
 8009248:	4b01      	ldr	r3, [pc, #4]	@ (8009250 <rcl_get_zero_initialized_publisher+0x8>)
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	08018944 	.word	0x08018944

08009254 <rcl_publisher_init>:
 8009254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800925c:	2d00      	cmp	r5, #0
 800925e:	d06a      	beq.n	8009336 <rcl_publisher_init+0xe2>
 8009260:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009264:	4604      	mov	r4, r0
 8009266:	4648      	mov	r0, r9
 8009268:	460e      	mov	r6, r1
 800926a:	4690      	mov	r8, r2
 800926c:	461f      	mov	r7, r3
 800926e:	f001 f83b 	bl	800a2e8 <rcutils_allocator_is_valid>
 8009272:	2800      	cmp	r0, #0
 8009274:	d05f      	beq.n	8009336 <rcl_publisher_init+0xe2>
 8009276:	2c00      	cmp	r4, #0
 8009278:	d05d      	beq.n	8009336 <rcl_publisher_init+0xe2>
 800927a:	f8d4 a000 	ldr.w	sl, [r4]
 800927e:	f1ba 0f00 	cmp.w	sl, #0
 8009282:	d004      	beq.n	800928e <rcl_publisher_init+0x3a>
 8009284:	2764      	movs	r7, #100	@ 0x64
 8009286:	4638      	mov	r0, r7
 8009288:	b008      	add	sp, #32
 800928a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928e:	4630      	mov	r0, r6
 8009290:	f007 fb54 	bl	801093c <rcl_node_is_valid>
 8009294:	2800      	cmp	r0, #0
 8009296:	d053      	beq.n	8009340 <rcl_publisher_init+0xec>
 8009298:	f1b8 0f00 	cmp.w	r8, #0
 800929c:	d04b      	beq.n	8009336 <rcl_publisher_init+0xe2>
 800929e:	2f00      	cmp	r7, #0
 80092a0:	d049      	beq.n	8009336 <rcl_publisher_init+0xe2>
 80092a2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80092a6:	aa07      	add	r2, sp, #28
 80092a8:	9205      	str	r2, [sp, #20]
 80092aa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80092ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80092b6:	f8cd a01c 	str.w	sl, [sp, #28]
 80092ba:	4639      	mov	r1, r7
 80092bc:	e899 000c 	ldmia.w	r9, {r2, r3}
 80092c0:	4630      	mov	r0, r6
 80092c2:	f007 fbcb 	bl	8010a5c <rcl_node_resolve_name>
 80092c6:	4607      	mov	r7, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d150      	bne.n	800936e <rcl_publisher_init+0x11a>
 80092cc:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 80092d0:	21c8      	movs	r1, #200	@ 0xc8
 80092d2:	2001      	movs	r0, #1
 80092d4:	4798      	blx	r3
 80092d6:	6020      	str	r0, [r4, #0]
 80092d8:	2800      	cmp	r0, #0
 80092da:	d04e      	beq.n	800937a <rcl_publisher_init+0x126>
 80092dc:	4630      	mov	r0, r6
 80092de:	f007 fb4f 	bl	8010980 <rcl_node_get_rmw_handle>
 80092e2:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	9a07      	ldr	r2, [sp, #28]
 80092ea:	6827      	ldr	r7, [r4, #0]
 80092ec:	462b      	mov	r3, r5
 80092ee:	4641      	mov	r1, r8
 80092f0:	f001 f95e 	bl	800a5b0 <rmw_create_publisher>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80092fa:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80092fe:	b370      	cbz	r0, 800935e <rcl_publisher_init+0x10a>
 8009300:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8009304:	f001 fa30 	bl	800a768 <rmw_publisher_get_actual_qos>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	4607      	mov	r7, r0
 800930c:	b9d0      	cbnz	r0, 8009344 <rcl_publisher_init+0xf0>
 800930e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8009312:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8009316:	4629      	mov	r1, r5
 8009318:	2270      	movs	r2, #112	@ 0x70
 800931a:	4618      	mov	r0, r3
 800931c:	f00e fc59 	bl	8017bd2 <memcpy>
 8009320:	6832      	ldr	r2, [r6, #0]
 8009322:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8009326:	9807      	ldr	r0, [sp, #28]
 8009328:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800932a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800932c:	4798      	blx	r3
 800932e:	4638      	mov	r0, r7
 8009330:	b008      	add	sp, #32
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	270b      	movs	r7, #11
 8009338:	4638      	mov	r0, r7
 800933a:	b008      	add	sp, #32
 800933c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009340:	27c8      	movs	r7, #200	@ 0xc8
 8009342:	e7a0      	b.n	8009286 <rcl_publisher_init+0x32>
 8009344:	b18b      	cbz	r3, 800936a <rcl_publisher_init+0x116>
 8009346:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800934a:	b142      	cbz	r2, 800935e <rcl_publisher_init+0x10a>
 800934c:	4630      	mov	r0, r6
 800934e:	f007 fb17 	bl	8010980 <rcl_node_get_rmw_handle>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009358:	f001 fa14 	bl	800a784 <rmw_destroy_publisher>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8009360:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009362:	4618      	mov	r0, r3
 8009364:	4790      	blx	r2
 8009366:	2300      	movs	r3, #0
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	2701      	movs	r7, #1
 800936c:	e7db      	b.n	8009326 <rcl_publisher_init+0xd2>
 800936e:	2867      	cmp	r0, #103	@ 0x67
 8009370:	d0d9      	beq.n	8009326 <rcl_publisher_init+0xd2>
 8009372:	2869      	cmp	r0, #105	@ 0x69
 8009374:	d003      	beq.n	800937e <rcl_publisher_init+0x12a>
 8009376:	280a      	cmp	r0, #10
 8009378:	d1f7      	bne.n	800936a <rcl_publisher_init+0x116>
 800937a:	270a      	movs	r7, #10
 800937c:	e7d3      	b.n	8009326 <rcl_publisher_init+0xd2>
 800937e:	2767      	movs	r7, #103	@ 0x67
 8009380:	e7d1      	b.n	8009326 <rcl_publisher_init+0xd2>
 8009382:	bf00      	nop

08009384 <rcl_publisher_get_default_options>:
 8009384:	b530      	push	{r4, r5, lr}
 8009386:	4912      	ldr	r1, [pc, #72]	@ (80093d0 <rcl_publisher_get_default_options+0x4c>)
 8009388:	b083      	sub	sp, #12
 800938a:	2250      	movs	r2, #80	@ 0x50
 800938c:	4604      	mov	r4, r0
 800938e:	f00e fc20 	bl	8017bd2 <memcpy>
 8009392:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009396:	f000 ff7b 	bl	800a290 <rcutils_get_default_allocator>
 800939a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800939e:	f001 f83f 	bl	800a420 <rmw_get_default_publisher_options>
 80093a2:	2500      	movs	r5, #0
 80093a4:	f10d 0007 	add.w	r0, sp, #7
 80093a8:	f88d 5007 	strb.w	r5, [sp, #7]
 80093ac:	f007 faee 	bl	801098c <rcl_get_disable_loaned_message>
 80093b0:	b930      	cbnz	r0, 80093c0 <rcl_publisher_get_default_options+0x3c>
 80093b2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80093b6:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 80093ba:	4620      	mov	r0, r4
 80093bc:	b003      	add	sp, #12
 80093be:	bd30      	pop	{r4, r5, pc}
 80093c0:	f000 ffbe 	bl	800a340 <rcutils_reset_error>
 80093c4:	4620      	mov	r0, r4
 80093c6:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 80093ca:	b003      	add	sp, #12
 80093cc:	bd30      	pop	{r4, r5, pc}
 80093ce:	bf00      	nop
 80093d0:	08018948 	.word	0x08018948

080093d4 <rcl_publish>:
 80093d4:	b308      	cbz	r0, 800941a <rcl_publish+0x46>
 80093d6:	6803      	ldr	r3, [r0, #0]
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4604      	mov	r4, r0
 80093dc:	b1c3      	cbz	r3, 8009410 <rcl_publish+0x3c>
 80093de:	4616      	mov	r6, r2
 80093e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80093e4:	b1a2      	cbz	r2, 8009410 <rcl_publish+0x3c>
 80093e6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80093ea:	460d      	mov	r5, r1
 80093ec:	f006 fef8 	bl	80101e0 <rcl_context_is_valid>
 80093f0:	b160      	cbz	r0, 800940c <rcl_publish+0x38>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80093f8:	b150      	cbz	r0, 8009410 <rcl_publish+0x3c>
 80093fa:	b165      	cbz	r5, 8009416 <rcl_publish+0x42>
 80093fc:	4632      	mov	r2, r6
 80093fe:	4629      	mov	r1, r5
 8009400:	f001 f876 	bl	800a4f0 <rmw_publish>
 8009404:	3800      	subs	r0, #0
 8009406:	bf18      	it	ne
 8009408:	2001      	movne	r0, #1
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f000 ff7a 	bl	800a304 <rcutils_error_is_set>
 8009410:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009414:	bd70      	pop	{r4, r5, r6, pc}
 8009416:	200b      	movs	r0, #11
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800941e:	4770      	bx	lr

08009420 <rcl_publisher_is_valid>:
 8009420:	b1b0      	cbz	r0, 8009450 <rcl_publisher_is_valid+0x30>
 8009422:	6803      	ldr	r3, [r0, #0]
 8009424:	b510      	push	{r4, lr}
 8009426:	4604      	mov	r4, r0
 8009428:	b183      	cbz	r3, 800944c <rcl_publisher_is_valid+0x2c>
 800942a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800942e:	b16a      	cbz	r2, 800944c <rcl_publisher_is_valid+0x2c>
 8009430:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009434:	f006 fed4 	bl	80101e0 <rcl_context_is_valid>
 8009438:	b130      	cbz	r0, 8009448 <rcl_publisher_is_valid+0x28>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009440:	3800      	subs	r0, #0
 8009442:	bf18      	it	ne
 8009444:	2001      	movne	r0, #1
 8009446:	bd10      	pop	{r4, pc}
 8009448:	f000 ff5c 	bl	800a304 <rcutils_error_is_set>
 800944c:	2000      	movs	r0, #0
 800944e:	bd10      	pop	{r4, pc}
 8009450:	2000      	movs	r0, #0
 8009452:	4770      	bx	lr

08009454 <rcl_publisher_is_valid_except_context>:
 8009454:	b130      	cbz	r0, 8009464 <rcl_publisher_is_valid_except_context+0x10>
 8009456:	6800      	ldr	r0, [r0, #0]
 8009458:	b120      	cbz	r0, 8009464 <rcl_publisher_is_valid_except_context+0x10>
 800945a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800945e:	3800      	subs	r0, #0
 8009460:	bf18      	it	ne
 8009462:	2001      	movne	r0, #1
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop

08009468 <_rclc_check_for_new_data>:
 8009468:	2800      	cmp	r0, #0
 800946a:	d046      	beq.n	80094fa <_rclc_check_for_new_data+0x92>
 800946c:	b510      	push	{r4, lr}
 800946e:	7802      	ldrb	r2, [r0, #0]
 8009470:	b084      	sub	sp, #16
 8009472:	4603      	mov	r3, r0
 8009474:	2a0a      	cmp	r2, #10
 8009476:	d842      	bhi.n	80094fe <_rclc_check_for_new_data+0x96>
 8009478:	e8df f002 	tbb	[pc, r2]
 800947c:	14181212 	.word	0x14181212
 8009480:	06060614 	.word	0x06060614
 8009484:	2e1a      	.short	0x2e1a
 8009486:	16          	.byte	0x16
 8009487:	00          	.byte	0x00
 8009488:	6a0a      	ldr	r2, [r1, #32]
 800948a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800948c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009490:	3a00      	subs	r2, #0
 8009492:	bf18      	it	ne
 8009494:	2201      	movne	r2, #1
 8009496:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800949a:	2000      	movs	r0, #0
 800949c:	b004      	add	sp, #16
 800949e:	bd10      	pop	{r4, pc}
 80094a0:	680a      	ldr	r2, [r1, #0]
 80094a2:	e7f2      	b.n	800948a <_rclc_check_for_new_data+0x22>
 80094a4:	698a      	ldr	r2, [r1, #24]
 80094a6:	e7f0      	b.n	800948a <_rclc_check_for_new_data+0x22>
 80094a8:	688a      	ldr	r2, [r1, #8]
 80094aa:	e7ee      	b.n	800948a <_rclc_check_for_new_data+0x22>
 80094ac:	690a      	ldr	r2, [r1, #16]
 80094ae:	e7ec      	b.n	800948a <_rclc_check_for_new_data+0x22>
 80094b0:	685c      	ldr	r4, [r3, #4]
 80094b2:	4608      	mov	r0, r1
 80094b4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80094b8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80094bc:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80094c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80094ca:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80094ce:	f104 0110 	add.w	r1, r4, #16
 80094d2:	f009 f969 	bl	80127a8 <rcl_action_client_wait_set_get_entities_ready>
 80094d6:	e7e1      	b.n	800949c <_rclc_check_for_new_data+0x34>
 80094d8:	685c      	ldr	r4, [r3, #4]
 80094da:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80094de:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80094e2:	e9cd 3200 	strd	r3, r2, [sp]
 80094e6:	4608      	mov	r0, r1
 80094e8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80094ec:	f104 0220 	add.w	r2, r4, #32
 80094f0:	f104 0110 	add.w	r1, r4, #16
 80094f4:	f009 fb5a 	bl	8012bac <rcl_action_server_wait_set_get_entities_ready>
 80094f8:	e7d0      	b.n	800949c <_rclc_check_for_new_data+0x34>
 80094fa:	200b      	movs	r0, #11
 80094fc:	4770      	bx	lr
 80094fe:	2001      	movs	r0, #1
 8009500:	e7cc      	b.n	800949c <_rclc_check_for_new_data+0x34>
 8009502:	bf00      	nop

08009504 <_rclc_take_new_data>:
 8009504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009506:	b099      	sub	sp, #100	@ 0x64
 8009508:	2800      	cmp	r0, #0
 800950a:	f000 8082 	beq.w	8009612 <_rclc_take_new_data+0x10e>
 800950e:	7803      	ldrb	r3, [r0, #0]
 8009510:	4604      	mov	r4, r0
 8009512:	2b0a      	cmp	r3, #10
 8009514:	f200 815d 	bhi.w	80097d2 <_rclc_take_new_data+0x2ce>
 8009518:	e8df f003 	tbb	[pc, r3]
 800951c:	31531f1f 	.word	0x31531f1f
 8009520:	06060631 	.word	0x06060631
 8009524:	4555      	.short	0x4555
 8009526:	53          	.byte	0x53
 8009527:	00          	.byte	0x00
 8009528:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800952a:	6a0b      	ldr	r3, [r1, #32]
 800952c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d046      	beq.n	80095c2 <_rclc_take_new_data+0xbe>
 8009534:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009538:	f104 0110 	add.w	r1, r4, #16
 800953c:	f007 fb3c 	bl	8010bb8 <rcl_take_request>
 8009540:	4605      	mov	r5, r0
 8009542:	2800      	cmp	r0, #0
 8009544:	d03d      	beq.n	80095c2 <_rclc_take_new_data+0xbe>
 8009546:	f240 2359 	movw	r3, #601	@ 0x259
 800954a:	4298      	cmp	r0, r3
 800954c:	d128      	bne.n	80095a0 <_rclc_take_new_data+0x9c>
 800954e:	2300      	movs	r3, #0
 8009550:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009554:	4628      	mov	r0, r5
 8009556:	b019      	add	sp, #100	@ 0x64
 8009558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800955c:	680b      	ldr	r3, [r1, #0]
 800955e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009562:	b373      	cbz	r3, 80095c2 <_rclc_take_new_data+0xbe>
 8009564:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009568:	2300      	movs	r3, #0
 800956a:	aa0a      	add	r2, sp, #40	@ 0x28
 800956c:	f007 fcf8 	bl	8010f60 <rcl_take>
 8009570:	4605      	mov	r5, r0
 8009572:	b330      	cbz	r0, 80095c2 <_rclc_take_new_data+0xbe>
 8009574:	f240 1391 	movw	r3, #401	@ 0x191
 8009578:	4298      	cmp	r0, r3
 800957a:	d0e8      	beq.n	800954e <_rclc_take_new_data+0x4a>
 800957c:	e010      	b.n	80095a0 <_rclc_take_new_data+0x9c>
 800957e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009580:	698b      	ldr	r3, [r1, #24]
 8009582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009586:	b1e3      	cbz	r3, 80095c2 <_rclc_take_new_data+0xbe>
 8009588:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800958c:	f104 0110 	add.w	r1, r4, #16
 8009590:	f006 fd96 	bl	80100c0 <rcl_take_response>
 8009594:	4605      	mov	r5, r0
 8009596:	b1a0      	cbz	r0, 80095c2 <_rclc_take_new_data+0xbe>
 8009598:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800959c:	4298      	cmp	r0, r3
 800959e:	d0d9      	beq.n	8009554 <_rclc_take_new_data+0x50>
 80095a0:	f000 fece 	bl	800a340 <rcutils_reset_error>
 80095a4:	e7d6      	b.n	8009554 <_rclc_take_new_data+0x50>
 80095a6:	6840      	ldr	r0, [r0, #4]
 80095a8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d15f      	bne.n	8009670 <_rclc_take_new_data+0x16c>
 80095b0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d179      	bne.n	80096ac <_rclc_take_new_data+0x1a8>
 80095b8:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 8096 	bne.w	80096ee <_rclc_take_new_data+0x1ea>
 80095c2:	2500      	movs	r5, #0
 80095c4:	e7c6      	b.n	8009554 <_rclc_take_new_data+0x50>
 80095c6:	6840      	ldr	r0, [r0, #4]
 80095c8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d138      	bne.n	8009642 <_rclc_take_new_data+0x13e>
 80095d0:	69c3      	ldr	r3, [r0, #28]
 80095d2:	b113      	cbz	r3, 80095da <_rclc_take_new_data+0xd6>
 80095d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80095d8:	b9fb      	cbnz	r3, 800961a <_rclc_take_new_data+0x116>
 80095da:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 80a8 	bne.w	8009734 <_rclc_take_new_data+0x230>
 80095e4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0ea      	beq.n	80095c2 <_rclc_take_new_data+0xbe>
 80095ec:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80095ee:	a90a      	add	r1, sp, #40	@ 0x28
 80095f0:	3010      	adds	r0, #16
 80095f2:	f008 ffbd 	bl	8012570 <rcl_action_take_result_response>
 80095f6:	4605      	mov	r5, r0
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d1d1      	bne.n	80095a0 <_rclc_take_new_data+0x9c>
 80095fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009600:	6860      	ldr	r0, [r4, #4]
 8009602:	f009 fbfd 	bl	8012e00 <rclc_action_find_handle_by_result_request_sequence_number>
 8009606:	2800      	cmp	r0, #0
 8009608:	d0db      	beq.n	80095c2 <_rclc_take_new_data+0xbe>
 800960a:	2301      	movs	r3, #1
 800960c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009610:	e7d7      	b.n	80095c2 <_rclc_take_new_data+0xbe>
 8009612:	250b      	movs	r5, #11
 8009614:	4628      	mov	r0, r5
 8009616:	b019      	add	sp, #100	@ 0x64
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800961c:	3010      	adds	r0, #16
 800961e:	f009 f823 	bl	8012668 <rcl_action_take_feedback>
 8009622:	4605      	mov	r5, r0
 8009624:	2800      	cmp	r0, #0
 8009626:	d1bb      	bne.n	80095a0 <_rclc_take_new_data+0x9c>
 8009628:	6860      	ldr	r0, [r4, #4]
 800962a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800962c:	f009 fba6 	bl	8012d7c <rclc_action_find_goal_handle_by_uuid>
 8009630:	4603      	mov	r3, r0
 8009632:	2800      	cmp	r0, #0
 8009634:	f000 80c4 	beq.w	80097c0 <_rclc_take_new_data+0x2bc>
 8009638:	2201      	movs	r2, #1
 800963a:	6860      	ldr	r0, [r4, #4]
 800963c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009640:	e7cb      	b.n	80095da <_rclc_take_new_data+0xd6>
 8009642:	aa04      	add	r2, sp, #16
 8009644:	a90a      	add	r1, sp, #40	@ 0x28
 8009646:	3010      	adds	r0, #16
 8009648:	f008 ff22 	bl	8012490 <rcl_action_take_goal_response>
 800964c:	4605      	mov	r5, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	d1a6      	bne.n	80095a0 <_rclc_take_new_data+0x9c>
 8009652:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009656:	6860      	ldr	r0, [r4, #4]
 8009658:	f009 fbc0 	bl	8012ddc <rclc_action_find_handle_by_goal_request_sequence_number>
 800965c:	b130      	cbz	r0, 800966c <_rclc_take_new_data+0x168>
 800965e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009662:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009666:	2201      	movs	r2, #1
 8009668:	f880 2020 	strb.w	r2, [r0, #32]
 800966c:	6860      	ldr	r0, [r4, #4]
 800966e:	e7af      	b.n	80095d0 <_rclc_take_new_data+0xcc>
 8009670:	f009 fb5e 	bl	8012d30 <rclc_action_take_goal_handle>
 8009674:	4606      	mov	r6, r0
 8009676:	6860      	ldr	r0, [r4, #4]
 8009678:	2e00      	cmp	r6, #0
 800967a:	d099      	beq.n	80095b0 <_rclc_take_new_data+0xac>
 800967c:	6070      	str	r0, [r6, #4]
 800967e:	69f2      	ldr	r2, [r6, #28]
 8009680:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009684:	3010      	adds	r0, #16
 8009686:	f009 f91f 	bl	80128c8 <rcl_action_take_goal_request>
 800968a:	4605      	mov	r5, r0
 800968c:	2800      	cmp	r0, #0
 800968e:	f040 8099 	bne.w	80097c4 <_rclc_take_new_data+0x2c0>
 8009692:	69f7      	ldr	r7, [r6, #28]
 8009694:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009696:	7235      	strb	r5, [r6, #8]
 8009698:	f8c6 0009 	str.w	r0, [r6, #9]
 800969c:	f8c6 100d 	str.w	r1, [r6, #13]
 80096a0:	6860      	ldr	r0, [r4, #4]
 80096a2:	f8c6 2011 	str.w	r2, [r6, #17]
 80096a6:	f8c6 3015 	str.w	r3, [r6, #21]
 80096aa:	e781      	b.n	80095b0 <_rclc_take_new_data+0xac>
 80096ac:	aa04      	add	r2, sp, #16
 80096ae:	3010      	adds	r0, #16
 80096b0:	a90a      	add	r1, sp, #40	@ 0x28
 80096b2:	f009 f979 	bl	80129a8 <rcl_action_take_result_request>
 80096b6:	4605      	mov	r5, r0
 80096b8:	2800      	cmp	r0, #0
 80096ba:	f47f af71 	bne.w	80095a0 <_rclc_take_new_data+0x9c>
 80096be:	6860      	ldr	r0, [r4, #4]
 80096c0:	a904      	add	r1, sp, #16
 80096c2:	f009 fb5b 	bl	8012d7c <rclc_action_find_goal_handle_by_uuid>
 80096c6:	4607      	mov	r7, r0
 80096c8:	b160      	cbz	r0, 80096e4 <_rclc_take_new_data+0x1e0>
 80096ca:	ad0a      	add	r5, sp, #40	@ 0x28
 80096cc:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80096d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80096d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80096d8:	f04f 0c02 	mov.w	ip, #2
 80096dc:	e886 0003 	stmia.w	r6, {r0, r1}
 80096e0:	f887 c008 	strb.w	ip, [r7, #8]
 80096e4:	6860      	ldr	r0, [r4, #4]
 80096e6:	2300      	movs	r3, #0
 80096e8:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80096ec:	e764      	b.n	80095b8 <_rclc_take_new_data+0xb4>
 80096ee:	ae04      	add	r6, sp, #16
 80096f0:	aa0a      	add	r2, sp, #40	@ 0x28
 80096f2:	3010      	adds	r0, #16
 80096f4:	4631      	mov	r1, r6
 80096f6:	f009 f995 	bl	8012a24 <rcl_action_take_cancel_request>
 80096fa:	4605      	mov	r5, r0
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f47f af4f 	bne.w	80095a0 <_rclc_take_new_data+0x9c>
 8009702:	6860      	ldr	r0, [r4, #4]
 8009704:	a90a      	add	r1, sp, #40	@ 0x28
 8009706:	f009 fb39 	bl	8012d7c <rclc_action_find_goal_handle_by_uuid>
 800970a:	4605      	mov	r5, r0
 800970c:	2800      	cmp	r0, #0
 800970e:	d04c      	beq.n	80097aa <_rclc_take_new_data+0x2a6>
 8009710:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009714:	2101      	movs	r1, #1
 8009716:	f009 fab9 	bl	8012c8c <rcl_action_transition_goal_state>
 800971a:	2803      	cmp	r0, #3
 800971c:	4607      	mov	r7, r0
 800971e:	d139      	bne.n	8009794 <_rclc_take_new_data+0x290>
 8009720:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009722:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8009726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009728:	e896 0003 	ldmia.w	r6, {r0, r1}
 800972c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009730:	722f      	strb	r7, [r5, #8]
 8009732:	e746      	b.n	80095c2 <_rclc_take_new_data+0xbe>
 8009734:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009738:	a90a      	add	r1, sp, #40	@ 0x28
 800973a:	3010      	adds	r0, #16
 800973c:	f008 ff56 	bl	80125ec <rcl_action_take_cancel_response>
 8009740:	4605      	mov	r5, r0
 8009742:	2800      	cmp	r0, #0
 8009744:	f47f af2c 	bne.w	80095a0 <_rclc_take_new_data+0x9c>
 8009748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800974c:	6860      	ldr	r0, [r4, #4]
 800974e:	f009 fb69 	bl	8012e24 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009752:	4606      	mov	r6, r0
 8009754:	6860      	ldr	r0, [r4, #4]
 8009756:	2e00      	cmp	r6, #0
 8009758:	f43f af44 	beq.w	80095e4 <_rclc_take_new_data+0xe0>
 800975c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800975e:	2701      	movs	r7, #1
 8009760:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	f43f af3e 	beq.w	80095e4 <_rclc_take_new_data+0xe0>
 8009768:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800976a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800976e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009772:	f009 fb03 	bl	8012d7c <rclc_action_find_goal_handle_by_uuid>
 8009776:	b138      	cbz	r0, 8009788 <_rclc_take_new_data+0x284>
 8009778:	6860      	ldr	r0, [r4, #4]
 800977a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800977c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009780:	3501      	adds	r5, #1
 8009782:	42ab      	cmp	r3, r5
 8009784:	d8f0      	bhi.n	8009768 <_rclc_take_new_data+0x264>
 8009786:	e72d      	b.n	80095e4 <_rclc_take_new_data+0xe0>
 8009788:	6860      	ldr	r0, [r4, #4]
 800978a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800978c:	3501      	adds	r5, #1
 800978e:	42ab      	cmp	r3, r5
 8009790:	d8ea      	bhi.n	8009768 <_rclc_take_new_data+0x264>
 8009792:	e727      	b.n	80095e4 <_rclc_take_new_data+0xe0>
 8009794:	ab06      	add	r3, sp, #24
 8009796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009798:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800979c:	2103      	movs	r1, #3
 800979e:	e896 000c 	ldmia.w	r6, {r2, r3}
 80097a2:	6860      	ldr	r0, [r4, #4]
 80097a4:	f009 fbb4 	bl	8012f10 <rclc_action_server_goal_cancel_reject>
 80097a8:	e70b      	b.n	80095c2 <_rclc_take_new_data+0xbe>
 80097aa:	ab06      	add	r3, sp, #24
 80097ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80097b2:	2102      	movs	r1, #2
 80097b4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80097b8:	6860      	ldr	r0, [r4, #4]
 80097ba:	f009 fba9 	bl	8012f10 <rclc_action_server_goal_cancel_reject>
 80097be:	e700      	b.n	80095c2 <_rclc_take_new_data+0xbe>
 80097c0:	6860      	ldr	r0, [r4, #4]
 80097c2:	e70a      	b.n	80095da <_rclc_take_new_data+0xd6>
 80097c4:	6860      	ldr	r0, [r4, #4]
 80097c6:	4631      	mov	r1, r6
 80097c8:	f009 fac2 	bl	8012d50 <rclc_action_remove_used_goal_handle>
 80097cc:	f000 fdb8 	bl	800a340 <rcutils_reset_error>
 80097d0:	e6c0      	b.n	8009554 <_rclc_take_new_data+0x50>
 80097d2:	2501      	movs	r5, #1
 80097d4:	e6be      	b.n	8009554 <_rclc_take_new_data+0x50>
 80097d6:	bf00      	nop

080097d8 <rclc_executor_trigger_any>:
 80097d8:	4603      	mov	r3, r0
 80097da:	b370      	cbz	r0, 800983a <rclc_executor_trigger_any+0x62>
 80097dc:	b379      	cbz	r1, 800983e <rclc_executor_trigger_any+0x66>
 80097de:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80097e2:	2200      	movs	r2, #0
 80097e4:	b350      	cbz	r0, 800983c <rclc_executor_trigger_any+0x64>
 80097e6:	b430      	push	{r4, r5}
 80097e8:	f893 c000 	ldrb.w	ip, [r3]
 80097ec:	f1bc 0f08 	cmp.w	ip, #8
 80097f0:	d017      	beq.n	8009822 <rclc_executor_trigger_any+0x4a>
 80097f2:	f1bc 0f09 	cmp.w	ip, #9
 80097f6:	d00d      	beq.n	8009814 <rclc_executor_trigger_any+0x3c>
 80097f8:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80097fc:	b940      	cbnz	r0, 8009810 <rclc_executor_trigger_any+0x38>
 80097fe:	3201      	adds	r2, #1
 8009800:	4291      	cmp	r1, r2
 8009802:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009806:	d003      	beq.n	8009810 <rclc_executor_trigger_any+0x38>
 8009808:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800980c:	2800      	cmp	r0, #0
 800980e:	d1eb      	bne.n	80097e8 <rclc_executor_trigger_any+0x10>
 8009810:	bc30      	pop	{r4, r5}
 8009812:	4770      	bx	lr
 8009814:	685c      	ldr	r4, [r3, #4]
 8009816:	6a25      	ldr	r5, [r4, #32]
 8009818:	2d00      	cmp	r5, #0
 800981a:	d1f9      	bne.n	8009810 <rclc_executor_trigger_any+0x38>
 800981c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009820:	e7ec      	b.n	80097fc <rclc_executor_trigger_any+0x24>
 8009822:	685c      	ldr	r4, [r3, #4]
 8009824:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009826:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800982a:	d1f1      	bne.n	8009810 <rclc_executor_trigger_any+0x38>
 800982c:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009830:	2800      	cmp	r0, #0
 8009832:	d1ed      	bne.n	8009810 <rclc_executor_trigger_any+0x38>
 8009834:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009838:	e7e0      	b.n	80097fc <rclc_executor_trigger_any+0x24>
 800983a:	4770      	bx	lr
 800983c:	4770      	bx	lr
 800983e:	4608      	mov	r0, r1
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop

08009844 <_rclc_execute>:
 8009844:	2800      	cmp	r0, #0
 8009846:	f000 80dc 	beq.w	8009a02 <_rclc_execute+0x1be>
 800984a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984c:	7843      	ldrb	r3, [r0, #1]
 800984e:	b087      	sub	sp, #28
 8009850:	4604      	mov	r4, r0
 8009852:	b123      	cbz	r3, 800985e <_rclc_execute+0x1a>
 8009854:	2b01      	cmp	r3, #1
 8009856:	d01c      	beq.n	8009892 <_rclc_execute+0x4e>
 8009858:	2000      	movs	r0, #0
 800985a:	b007      	add	sp, #28
 800985c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800985e:	7803      	ldrb	r3, [r0, #0]
 8009860:	2b08      	cmp	r3, #8
 8009862:	f000 80a0 	beq.w	80099a6 <_rclc_execute+0x162>
 8009866:	2b09      	cmp	r3, #9
 8009868:	d024      	beq.n	80098b4 <_rclc_execute+0x70>
 800986a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800986e:	2800      	cmp	r0, #0
 8009870:	d0f2      	beq.n	8009858 <_rclc_execute+0x14>
 8009872:	2b0a      	cmp	r3, #10
 8009874:	f200 815a 	bhi.w	8009b2c <_rclc_execute+0x2e8>
 8009878:	e8df f013 	tbh	[pc, r3, lsl #1]
 800987c:	008e006f 	.word	0x008e006f
 8009880:	006f007c 	.word	0x006f007c
 8009884:	00590073 	.word	0x00590073
 8009888:	00590059 	.word	0x00590059
 800988c:	01580158 	.word	0x01580158
 8009890:	0079      	.short	0x0079
 8009892:	7803      	ldrb	r3, [r0, #0]
 8009894:	2b0a      	cmp	r3, #10
 8009896:	f200 8149 	bhi.w	8009b2c <_rclc_execute+0x2e8>
 800989a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800989e:	00f9      	.short	0x00f9
 80098a0:	006b007b 	.word	0x006b007b
 80098a4:	0062005e 	.word	0x0062005e
 80098a8:	00480048 	.word	0x00480048
 80098ac:	01000048 	.word	0x01000048
 80098b0:	00680102 	.word	0x00680102
 80098b4:	6840      	ldr	r0, [r0, #4]
 80098b6:	6a02      	ldr	r2, [r0, #32]
 80098b8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80098bc:	2a00      	cmp	r2, #0
 80098be:	f040 80f3 	bne.w	8009aa8 <_rclc_execute+0x264>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0c8      	beq.n	8009858 <_rclc_execute+0x14>
 80098c6:	e003      	b.n	80098d0 <_rclc_execute+0x8c>
 80098c8:	6858      	ldr	r0, [r3, #4]
 80098ca:	f009 fa41 	bl	8012d50 <rclc_action_remove_used_goal_handle>
 80098ce:	6860      	ldr	r0, [r4, #4]
 80098d0:	f009 fa78 	bl	8012dc4 <rclc_action_find_first_terminated_handle>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4601      	mov	r1, r0
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1f5      	bne.n	80098c8 <_rclc_execute+0x84>
 80098dc:	6860      	ldr	r0, [r4, #4]
 80098de:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 80098e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80eb 	beq.w	8009ac2 <_rclc_execute+0x27e>
 80098ec:	f241 0604 	movw	r6, #4100	@ 0x1004
 80098f0:	2701      	movs	r7, #1
 80098f2:	e007      	b.n	8009904 <_rclc_execute+0xc0>
 80098f4:	4628      	mov	r0, r5
 80098f6:	f009 fabf 	bl	8012e78 <rclc_action_server_response_goal_request>
 80098fa:	6860      	ldr	r0, [r4, #4]
 80098fc:	4629      	mov	r1, r5
 80098fe:	f009 fa27 	bl	8012d50 <rclc_action_remove_used_goal_handle>
 8009902:	6860      	ldr	r0, [r4, #4]
 8009904:	2100      	movs	r1, #0
 8009906:	f009 fa51 	bl	8012dac <rclc_action_find_first_handle_by_status>
 800990a:	4605      	mov	r5, r0
 800990c:	2800      	cmp	r0, #0
 800990e:	f000 80d5 	beq.w	8009abc <_rclc_execute+0x278>
 8009912:	6863      	ldr	r3, [r4, #4]
 8009914:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	4798      	blx	r3
 800991a:	42b0      	cmp	r0, r6
 800991c:	f04f 0100 	mov.w	r1, #0
 8009920:	d1e8      	bne.n	80098f4 <_rclc_execute+0xb0>
 8009922:	2101      	movs	r1, #1
 8009924:	4628      	mov	r0, r5
 8009926:	f009 faa7 	bl	8012e78 <rclc_action_server_response_goal_request>
 800992a:	722f      	strb	r7, [r5, #8]
 800992c:	e7e9      	b.n	8009902 <_rclc_execute+0xbe>
 800992e:	2b06      	cmp	r3, #6
 8009930:	68a0      	ldr	r0, [r4, #8]
 8009932:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009934:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8009936:	f000 80bb 	beq.w	8009ab0 <_rclc_execute+0x26c>
 800993a:	2b07      	cmp	r3, #7
 800993c:	f000 80f1 	beq.w	8009b22 <_rclc_execute+0x2de>
 8009940:	47b0      	blx	r6
 8009942:	f104 0510 	add.w	r5, r4, #16
 8009946:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009948:	6860      	ldr	r0, [r4, #4]
 800994a:	4629      	mov	r1, r5
 800994c:	f007 f984 	bl	8010c58 <rcl_send_response>
 8009950:	2802      	cmp	r0, #2
 8009952:	d117      	bne.n	8009984 <_rclc_execute+0x140>
 8009954:	f000 fcf4 	bl	800a340 <rcutils_reset_error>
 8009958:	e77e      	b.n	8009858 <_rclc_execute+0x14>
 800995a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800995c:	68a0      	ldr	r0, [r4, #8]
 800995e:	4798      	blx	r3
 8009960:	e77a      	b.n	8009858 <_rclc_execute+0x14>
 8009962:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009964:	68a0      	ldr	r0, [r4, #8]
 8009966:	f104 0110 	add.w	r1, r4, #16
 800996a:	4798      	blx	r3
 800996c:	e774      	b.n	8009858 <_rclc_execute+0x14>
 800996e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009970:	4798      	blx	r3
 8009972:	e771      	b.n	8009858 <_rclc_execute+0x14>
 8009974:	6860      	ldr	r0, [r4, #4]
 8009976:	f007 fe37 	bl	80115e8 <rcl_timer_call>
 800997a:	f240 3321 	movw	r3, #801	@ 0x321
 800997e:	4298      	cmp	r0, r3
 8009980:	f43f af6a 	beq.w	8009858 <_rclc_execute+0x14>
 8009984:	2800      	cmp	r0, #0
 8009986:	f43f af68 	beq.w	800985a <_rclc_execute+0x16>
 800998a:	9005      	str	r0, [sp, #20]
 800998c:	f000 fcd8 	bl	800a340 <rcutils_reset_error>
 8009990:	9805      	ldr	r0, [sp, #20]
 8009992:	e762      	b.n	800985a <_rclc_execute+0x16>
 8009994:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009998:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800999c:	2800      	cmp	r0, #0
 800999e:	d0e4      	beq.n	800996a <_rclc_execute+0x126>
 80099a0:	68a0      	ldr	r0, [r4, #8]
 80099a2:	4798      	blx	r3
 80099a4:	e758      	b.n	8009858 <_rclc_execute+0x14>
 80099a6:	6840      	ldr	r0, [r0, #4]
 80099a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80099aa:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 80099ae:	d107      	bne.n	80099c0 <_rclc_execute+0x17c>
 80099b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80099b4:	b923      	cbnz	r3, 80099c0 <_rclc_execute+0x17c>
 80099b6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f43f af4c 	beq.w	8009858 <_rclc_execute+0x14>
 80099c0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80099c4:	b303      	cbz	r3, 8009a08 <_rclc_execute+0x1c4>
 80099c6:	2600      	movs	r6, #0
 80099c8:	2701      	movs	r7, #1
 80099ca:	e004      	b.n	80099d6 <_rclc_execute+0x192>
 80099cc:	f009 f98a 	bl	8012ce4 <rclc_action_send_result_request>
 80099d0:	b990      	cbnz	r0, 80099f8 <_rclc_execute+0x1b4>
 80099d2:	722f      	strb	r7, [r5, #8]
 80099d4:	6860      	ldr	r0, [r4, #4]
 80099d6:	f009 fa37 	bl	8012e48 <rclc_action_find_first_handle_with_goal_response>
 80099da:	4605      	mov	r5, r0
 80099dc:	b198      	cbz	r0, 8009a06 <_rclc_execute+0x1c2>
 80099de:	6863      	ldr	r3, [r4, #4]
 80099e0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80099e8:	f885 6020 	strb.w	r6, [r5, #32]
 80099ec:	4798      	blx	r3
 80099ee:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80099f2:	4628      	mov	r0, r5
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e9      	bne.n	80099cc <_rclc_execute+0x188>
 80099f8:	6860      	ldr	r0, [r4, #4]
 80099fa:	4629      	mov	r1, r5
 80099fc:	f009 f9a8 	bl	8012d50 <rclc_action_remove_used_goal_handle>
 8009a00:	e7e8      	b.n	80099d4 <_rclc_execute+0x190>
 8009a02:	200b      	movs	r0, #11
 8009a04:	4770      	bx	lr
 8009a06:	6860      	ldr	r0, [r4, #4]
 8009a08:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009a0c:	b18b      	cbz	r3, 8009a32 <_rclc_execute+0x1ee>
 8009a0e:	68c5      	ldr	r5, [r0, #12]
 8009a10:	b32d      	cbz	r5, 8009a5e <_rclc_execute+0x21a>
 8009a12:	2600      	movs	r6, #0
 8009a14:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009a18:	b143      	cbz	r3, 8009a2c <_rclc_execute+0x1e8>
 8009a1a:	69c3      	ldr	r3, [r0, #28]
 8009a1c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009a20:	b123      	cbz	r3, 8009a2c <_rclc_execute+0x1e8>
 8009a22:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a26:	4628      	mov	r0, r5
 8009a28:	4798      	blx	r3
 8009a2a:	6860      	ldr	r0, [r4, #4]
 8009a2c:	682d      	ldr	r5, [r5, #0]
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	d1f0      	bne.n	8009a14 <_rclc_execute+0x1d0>
 8009a32:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009a36:	b193      	cbz	r3, 8009a5e <_rclc_execute+0x21a>
 8009a38:	68c5      	ldr	r5, [r0, #12]
 8009a3a:	b185      	cbz	r5, 8009a5e <_rclc_execute+0x21a>
 8009a3c:	2600      	movs	r6, #0
 8009a3e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009a42:	b14b      	cbz	r3, 8009a58 <_rclc_execute+0x214>
 8009a44:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a46:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009a4a:	b12b      	cbz	r3, 8009a58 <_rclc_execute+0x214>
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a50:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009a54:	4798      	blx	r3
 8009a56:	6860      	ldr	r0, [r4, #4]
 8009a58:	682d      	ldr	r5, [r5, #0]
 8009a5a:	2d00      	cmp	r5, #0
 8009a5c:	d1ef      	bne.n	8009a3e <_rclc_execute+0x1fa>
 8009a5e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f43f aef8 	beq.w	8009858 <_rclc_execute+0x14>
 8009a68:	2700      	movs	r7, #0
 8009a6a:	e00b      	b.n	8009a84 <_rclc_execute+0x240>
 8009a6c:	6863      	ldr	r3, [r4, #4]
 8009a6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009a72:	6a1e      	ldr	r6, [r3, #32]
 8009a74:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009a78:	47b0      	blx	r6
 8009a7a:	6860      	ldr	r0, [r4, #4]
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	f009 f967 	bl	8012d50 <rclc_action_remove_used_goal_handle>
 8009a82:	6860      	ldr	r0, [r4, #4]
 8009a84:	f009 f9ec 	bl	8012e60 <rclc_action_find_first_handle_with_result_response>
 8009a88:	4605      	mov	r5, r0
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d1ee      	bne.n	8009a6c <_rclc_execute+0x228>
 8009a8e:	e6e3      	b.n	8009858 <_rclc_execute+0x14>
 8009a90:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009a94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f af61 	beq.w	800995e <_rclc_execute+0x11a>
 8009a9c:	e75e      	b.n	800995c <_rclc_execute+0x118>
 8009a9e:	6840      	ldr	r0, [r0, #4]
 8009aa0:	e78e      	b.n	80099c0 <_rclc_execute+0x17c>
 8009aa2:	6840      	ldr	r0, [r0, #4]
 8009aa4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f43f af1a 	beq.w	80098e2 <_rclc_execute+0x9e>
 8009aae:	e70f      	b.n	80098d0 <_rclc_execute+0x8c>
 8009ab0:	f104 0510 	add.w	r5, r4, #16
 8009ab4:	460a      	mov	r2, r1
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	47b0      	blx	r6
 8009aba:	e744      	b.n	8009946 <_rclc_execute+0x102>
 8009abc:	6860      	ldr	r0, [r4, #4]
 8009abe:	f880 5020 	strb.w	r5, [r0, #32]
 8009ac2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f43f aec6 	beq.w	8009858 <_rclc_execute+0x14>
 8009acc:	68c5      	ldr	r5, [r0, #12]
 8009ace:	b325      	cbz	r5, 8009b1a <_rclc_execute+0x2d6>
 8009ad0:	2602      	movs	r6, #2
 8009ad2:	e001      	b.n	8009ad8 <_rclc_execute+0x294>
 8009ad4:	682d      	ldr	r5, [r5, #0]
 8009ad6:	b305      	cbz	r5, 8009b1a <_rclc_execute+0x2d6>
 8009ad8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d1f9      	bne.n	8009ad4 <_rclc_execute+0x290>
 8009ae0:	69c3      	ldr	r3, [r0, #28]
 8009ae2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	4798      	blx	r3
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009aee:	4628      	mov	r0, r5
 8009af0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009af4:	b11b      	cbz	r3, 8009afe <_rclc_execute+0x2ba>
 8009af6:	f009 f9df 	bl	8012eb8 <rclc_action_server_goal_cancel_accept>
 8009afa:	6860      	ldr	r0, [r4, #4]
 8009afc:	e7ea      	b.n	8009ad4 <_rclc_execute+0x290>
 8009afe:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009b00:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b04:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b0c:	6860      	ldr	r0, [r4, #4]
 8009b0e:	2101      	movs	r1, #1
 8009b10:	f009 f9fe 	bl	8012f10 <rclc_action_server_goal_cancel_reject>
 8009b14:	722e      	strb	r6, [r5, #8]
 8009b16:	6860      	ldr	r0, [r4, #4]
 8009b18:	e7dc      	b.n	8009ad4 <_rclc_execute+0x290>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009b20:	e69a      	b.n	8009858 <_rclc_execute+0x14>
 8009b22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009b24:	47b0      	blx	r6
 8009b26:	f104 0510 	add.w	r5, r4, #16
 8009b2a:	e70c      	b.n	8009946 <_rclc_execute+0x102>
 8009b2c:	2001      	movs	r0, #1
 8009b2e:	e694      	b.n	800985a <_rclc_execute+0x16>

08009b30 <rclc_executor_init>:
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d05a      	beq.n	8009bea <rclc_executor_init+0xba>
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	460d      	mov	r5, r1
 8009b3a:	b0b2      	sub	sp, #200	@ 0xc8
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d050      	beq.n	8009be2 <rclc_executor_init+0xb2>
 8009b40:	4604      	mov	r4, r0
 8009b42:	4618      	mov	r0, r3
 8009b44:	4616      	mov	r6, r2
 8009b46:	461f      	mov	r7, r3
 8009b48:	f000 fbce 	bl	800a2e8 <rcutils_allocator_is_valid>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d048      	beq.n	8009be2 <rclc_executor_init+0xb2>
 8009b50:	2e00      	cmp	r6, #0
 8009b52:	d046      	beq.n	8009be2 <rclc_executor_init+0xb2>
 8009b54:	492a      	ldr	r1, [pc, #168]	@ (8009c00 <rclc_executor_init+0xd0>)
 8009b56:	2290      	movs	r2, #144	@ 0x90
 8009b58:	a80e      	add	r0, sp, #56	@ 0x38
 8009b5a:	f00e f83a 	bl	8017bd2 <memcpy>
 8009b5e:	a90e      	add	r1, sp, #56	@ 0x38
 8009b60:	2290      	movs	r2, #144	@ 0x90
 8009b62:	4620      	mov	r0, r4
 8009b64:	f00e f835 	bl	8017bd2 <memcpy>
 8009b68:	6065      	str	r5, [r4, #4]
 8009b6a:	4668      	mov	r0, sp
 8009b6c:	60e6      	str	r6, [r4, #12]
 8009b6e:	466d      	mov	r5, sp
 8009b70:	f007 fe2c 	bl	80117cc <rcl_get_zero_initialized_wait_set>
 8009b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b76:	f104 0c18 	add.w	ip, r4, #24
 8009b7a:	f8d7 8000 	ldr.w	r8, [r7]
 8009b7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b8e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8009bf8 <rclc_executor_init+0xc8>
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	f8cc 3000 	str.w	r3, [ip]
 8009b98:	6939      	ldr	r1, [r7, #16]
 8009b9a:	6167      	str	r7, [r4, #20]
 8009b9c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 8009ba0:	01b0      	lsls	r0, r6, #6
 8009ba2:	47c0      	blx	r8
 8009ba4:	60a0      	str	r0, [r4, #8]
 8009ba6:	b310      	cbz	r0, 8009bee <rclc_executor_init+0xbe>
 8009ba8:	2500      	movs	r5, #0
 8009baa:	e000      	b.n	8009bae <rclc_executor_init+0x7e>
 8009bac:	68a0      	ldr	r0, [r4, #8]
 8009bae:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	f000 fa25 	bl	800a004 <rclc_executor_handle_init>
 8009bba:	42ae      	cmp	r6, r5
 8009bbc:	d1f6      	bne.n	8009bac <rclc_executor_init+0x7c>
 8009bbe:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8009bc2:	f000 fa15 	bl	8009ff0 <rclc_executor_handle_counters_zero_init>
 8009bc6:	490f      	ldr	r1, [pc, #60]	@ (8009c04 <rclc_executor_init+0xd4>)
 8009bc8:	68a2      	ldr	r2, [r4, #8]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 8009bd0:	b12a      	cbz	r2, 8009bde <rclc_executor_init+0xae>
 8009bd2:	6962      	ldr	r2, [r4, #20]
 8009bd4:	b11a      	cbz	r2, 8009bde <rclc_executor_init+0xae>
 8009bd6:	68e2      	ldr	r2, [r4, #12]
 8009bd8:	b10a      	cbz	r2, 8009bde <rclc_executor_init+0xae>
 8009bda:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8009bde:	2000      	movs	r0, #0
 8009be0:	e000      	b.n	8009be4 <rclc_executor_init+0xb4>
 8009be2:	200b      	movs	r0, #11
 8009be4:	b032      	add	sp, #200	@ 0xc8
 8009be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bea:	200b      	movs	r0, #11
 8009bec:	4770      	bx	lr
 8009bee:	200a      	movs	r0, #10
 8009bf0:	e7f8      	b.n	8009be4 <rclc_executor_init+0xb4>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	3b9aca00 	.word	0x3b9aca00
 8009bfc:	00000000 	.word	0x00000000
 8009c00:	08018998 	.word	0x08018998
 8009c04:	080097d9 	.word	0x080097d9

08009c08 <rclc_executor_add_subscription>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009c0e:	b338      	cbz	r0, 8009c60 <rclc_executor_add_subscription+0x58>
 8009c10:	b331      	cbz	r1, 8009c60 <rclc_executor_add_subscription+0x58>
 8009c12:	b32a      	cbz	r2, 8009c60 <rclc_executor_add_subscription+0x58>
 8009c14:	b323      	cbz	r3, 8009c60 <rclc_executor_add_subscription+0x58>
 8009c16:	4604      	mov	r4, r0
 8009c18:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 8009c1c:	42a8      	cmp	r0, r5
 8009c1e:	d301      	bcc.n	8009c24 <rclc_executor_add_subscription+0x1c>
 8009c20:	2001      	movs	r0, #1
 8009c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c24:	68a6      	ldr	r6, [r4, #8]
 8009c26:	0187      	lsls	r7, r0, #6
 8009c28:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009c2c:	2500      	movs	r5, #0
 8009c2e:	55f5      	strb	r5, [r6, r7]
 8009c30:	3001      	adds	r0, #1
 8009c32:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009c36:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	f104 0518 	add.w	r5, r4, #24
 8009c40:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009c44:	f88c e001 	strb.w	lr, [ip, #1]
 8009c48:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009c4c:	6120      	str	r0, [r4, #16]
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f007 fdd0 	bl	80117f4 <rcl_wait_set_is_valid>
 8009c54:	b930      	cbnz	r0, 8009c64 <rclc_executor_add_subscription+0x5c>
 8009c56:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009c58:	3301      	adds	r3, #1
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8009c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c60:	200b      	movs	r0, #11
 8009c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c64:	4628      	mov	r0, r5
 8009c66:	f007 fdcb 	bl	8011800 <rcl_wait_set_fini>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d0f3      	beq.n	8009c56 <rclc_executor_add_subscription+0x4e>
 8009c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c70 <rclc_executor_add_timer>:
 8009c70:	b300      	cbz	r0, 8009cb4 <rclc_executor_add_timer+0x44>
 8009c72:	b1f9      	cbz	r1, 8009cb4 <rclc_executor_add_timer+0x44>
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	d301      	bcc.n	8009c84 <rclc_executor_add_timer+0x14>
 8009c80:	2001      	movs	r0, #1
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	6880      	ldr	r0, [r0, #8]
 8009c86:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8009c8a:	019d      	lsls	r5, r3, #6
 8009c8c:	6051      	str	r1, [r2, #4]
 8009c8e:	2102      	movs	r1, #2
 8009c90:	5341      	strh	r1, [r0, r5]
 8009c92:	3301      	adds	r3, #1
 8009c94:	2000      	movs	r0, #0
 8009c96:	2101      	movs	r1, #1
 8009c98:	f104 0518 	add.w	r5, r4, #24
 8009c9c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8009c9e:	8711      	strh	r1, [r2, #56]	@ 0x38
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	f007 fda6 	bl	80117f4 <rcl_wait_set_is_valid>
 8009ca8:	b930      	cbnz	r0, 8009cb8 <rclc_executor_add_timer+0x48>
 8009caa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009cac:	3301      	adds	r3, #1
 8009cae:	2000      	movs	r0, #0
 8009cb0:	6523      	str	r3, [r4, #80]	@ 0x50
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	200b      	movs	r0, #11
 8009cb6:	4770      	bx	lr
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f007 fda1 	bl	8011800 <rcl_wait_set_fini>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0f3      	beq.n	8009caa <rclc_executor_add_timer+0x3a>
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}

08009cc4 <rclc_executor_prepare>:
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d044      	beq.n	8009d52 <rclc_executor_prepare+0x8e>
 8009cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cca:	f100 0518 	add.w	r5, r0, #24
 8009cce:	b09b      	sub	sp, #108	@ 0x6c
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f007 fd8e 	bl	80117f4 <rcl_wait_set_is_valid>
 8009cd8:	b110      	cbz	r0, 8009ce0 <rclc_executor_prepare+0x1c>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	b01b      	add	sp, #108	@ 0x6c
 8009cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f007 fd8d 	bl	8011800 <rcl_wait_set_fini>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d130      	bne.n	8009d4c <rclc_executor_prepare+0x88>
 8009cea:	a80c      	add	r0, sp, #48	@ 0x30
 8009cec:	f007 fd6e 	bl	80117cc <rcl_get_zero_initialized_wait_set>
 8009cf0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009cf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009cf8:	46ae      	mov	lr, r5
 8009cfa:	6967      	ldr	r7, [r4, #20]
 8009cfc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d10:	f8dc 3000 	ldr.w	r3, [ip]
 8009d14:	f8ce 3000 	str.w	r3, [lr]
 8009d18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009d1a:	ae04      	add	r6, sp, #16
 8009d1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	6862      	ldr	r2, [r4, #4]
 8009d22:	6033      	str	r3, [r6, #0]
 8009d24:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009d26:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009d28:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009d2c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8009d30:	e9cd 2100 	strd	r2, r1, [sp]
 8009d34:	4628      	mov	r0, r5
 8009d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d38:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009d3a:	f008 f891 	bl	8011e60 <rcl_wait_set_init>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d0cc      	beq.n	8009cdc <rclc_executor_prepare+0x18>
 8009d42:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009d44:	f000 fafc 	bl	800a340 <rcutils_reset_error>
 8009d48:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009d4a:	e7c7      	b.n	8009cdc <rclc_executor_prepare+0x18>
 8009d4c:	f000 faf8 	bl	800a340 <rcutils_reset_error>
 8009d50:	e7cb      	b.n	8009cea <rclc_executor_prepare+0x26>
 8009d52:	200b      	movs	r0, #11
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop

08009d58 <rclc_executor_spin_some>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f000 8091 	beq.w	8009e86 <rclc_executor_spin_some+0x12e>
 8009d64:	4604      	mov	r4, r0
 8009d66:	6840      	ldr	r0, [r0, #4]
 8009d68:	4690      	mov	r8, r2
 8009d6a:	4699      	mov	r9, r3
 8009d6c:	f006 fa38 	bl	80101e0 <rcl_context_is_valid>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d037      	beq.n	8009de4 <rclc_executor_spin_some+0x8c>
 8009d74:	4620      	mov	r0, r4
 8009d76:	f104 0718 	add.w	r7, r4, #24
 8009d7a:	f7ff ffa3 	bl	8009cc4 <rclc_executor_prepare>
 8009d7e:	4638      	mov	r0, r7
 8009d80:	f007 fe22 	bl	80119c8 <rcl_wait_set_clear>
 8009d84:	4606      	mov	r6, r0
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d177      	bne.n	8009e7a <rclc_executor_spin_some+0x122>
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	b1eb      	cbz	r3, 8009dcc <rclc_executor_spin_some+0x74>
 8009d90:	68a1      	ldr	r1, [r4, #8]
 8009d92:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 8009d96:	01aa      	lsls	r2, r5, #6
 8009d98:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009d9c:	b1b3      	cbz	r3, 8009dcc <rclc_executor_spin_some+0x74>
 8009d9e:	5c8b      	ldrb	r3, [r1, r2]
 8009da0:	2b0a      	cmp	r3, #10
 8009da2:	d81f      	bhi.n	8009de4 <rclc_executor_spin_some+0x8c>
 8009da4:	e8df f003 	tbb	[pc, r3]
 8009da8:	253e3434 	.word	0x253e3434
 8009dac:	06060625 	.word	0x06060625
 8009db0:	525d      	.short	0x525d
 8009db2:	48          	.byte	0x48
 8009db3:	00          	.byte	0x00
 8009db4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009db8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f008 f959 	bl	8012074 <rcl_wait_set_add_service>
 8009dc2:	b9f8      	cbnz	r0, 8009e04 <rclc_executor_spin_some+0xac>
 8009dc4:	68e3      	ldr	r3, [r4, #12]
 8009dc6:	3501      	adds	r5, #1
 8009dc8:	42ab      	cmp	r3, r5
 8009dca:	d8e1      	bhi.n	8009d90 <rclc_executor_spin_some+0x38>
 8009dcc:	4642      	mov	r2, r8
 8009dce:	464b      	mov	r3, r9
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f008 f97d 	bl	80120d0 <rcl_wait>
 8009dd6:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	f000 80ab 	beq.w	8009f36 <rclc_executor_spin_some+0x1de>
 8009de0:	2d01      	cmp	r5, #1
 8009de2:	d055      	beq.n	8009e90 <rclc_executor_spin_some+0x138>
 8009de4:	f000 faac 	bl	800a340 <rcutils_reset_error>
 8009de8:	2601      	movs	r6, #1
 8009dea:	4630      	mov	r0, r6
 8009dec:	b003      	add	sp, #12
 8009dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009df6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f008 f90e 	bl	801201c <rcl_wait_set_add_client>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d0df      	beq.n	8009dc4 <rclc_executor_spin_some+0x6c>
 8009e04:	9001      	str	r0, [sp, #4]
 8009e06:	f000 fa9b 	bl	800a340 <rcutils_reset_error>
 8009e0a:	9801      	ldr	r0, [sp, #4]
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	e7ec      	b.n	8009dea <rclc_executor_spin_some+0x92>
 8009e10:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e14:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f007 fda9 	bl	8011970 <rcl_wait_set_add_subscription>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d0d0      	beq.n	8009dc4 <rclc_executor_spin_some+0x6c>
 8009e22:	e7ef      	b.n	8009e04 <rclc_executor_spin_some+0xac>
 8009e24:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e28:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f008 f8c5 	bl	8011fbc <rcl_wait_set_add_timer>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d0c6      	beq.n	8009dc4 <rclc_executor_spin_some+0x6c>
 8009e36:	e7e5      	b.n	8009e04 <rclc_executor_spin_some+0xac>
 8009e38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e3c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e40:	4638      	mov	r0, r7
 8009e42:	f008 f88f 	bl	8011f64 <rcl_wait_set_add_guard_condition>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0bc      	beq.n	8009dc4 <rclc_executor_spin_some+0x6c>
 8009e4a:	e7db      	b.n	8009e04 <rclc_executor_spin_some+0xac>
 8009e4c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e50:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e54:	3110      	adds	r1, #16
 8009e56:	4638      	mov	r0, r7
 8009e58:	f008 fe58 	bl	8012b0c <rcl_action_wait_set_add_action_server>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d0b1      	beq.n	8009dc4 <rclc_executor_spin_some+0x6c>
 8009e60:	e7d0      	b.n	8009e04 <rclc_executor_spin_some+0xac>
 8009e62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e66:	2300      	movs	r3, #0
 8009e68:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e6c:	3110      	adds	r1, #16
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f008 fc3a 	bl	80126e8 <rcl_action_wait_set_add_action_client>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d0a5      	beq.n	8009dc4 <rclc_executor_spin_some+0x6c>
 8009e78:	e7c4      	b.n	8009e04 <rclc_executor_spin_some+0xac>
 8009e7a:	f000 fa61 	bl	800a340 <rcutils_reset_error>
 8009e7e:	4630      	mov	r0, r6
 8009e80:	b003      	add	sp, #12
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e86:	260b      	movs	r6, #11
 8009e88:	4630      	mov	r0, r6
 8009e8a:	b003      	add	sp, #12
 8009e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e90:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8009e94:	4663      	mov	r3, ip
 8009e96:	4615      	mov	r5, r2
 8009e98:	b1ca      	cbz	r2, 8009ece <rclc_executor_spin_some+0x176>
 8009e9a:	2500      	movs	r5, #0
 8009e9c:	46a8      	mov	r8, r5
 8009e9e:	f240 1991 	movw	r9, #401	@ 0x191
 8009ea2:	e00c      	b.n	8009ebe <rclc_executor_spin_some+0x166>
 8009ea4:	f7ff fae0 	bl	8009468 <_rclc_check_for_new_data>
 8009ea8:	f108 0801 	add.w	r8, r8, #1
 8009eac:	4605      	mov	r5, r0
 8009eae:	b108      	cbz	r0, 8009eb4 <rclc_executor_spin_some+0x15c>
 8009eb0:	4548      	cmp	r0, r9
 8009eb2:	d13e      	bne.n	8009f32 <rclc_executor_spin_some+0x1da>
 8009eb4:	68e2      	ldr	r2, [r4, #12]
 8009eb6:	4590      	cmp	r8, r2
 8009eb8:	f080 808b 	bcs.w	8009fd2 <rclc_executor_spin_some+0x27a>
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009ec2:	469c      	mov	ip, r3
 8009ec4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009ec8:	4639      	mov	r1, r7
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1ea      	bne.n	8009ea4 <rclc_executor_spin_some+0x14c>
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4660      	mov	r0, ip
 8009ed2:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8009ed6:	4798      	blx	r3
 8009ed8:	b358      	cbz	r0, 8009f32 <rclc_executor_spin_some+0x1da>
 8009eda:	68e3      	ldr	r3, [r4, #12]
 8009edc:	b34b      	cbz	r3, 8009f32 <rclc_executor_spin_some+0x1da>
 8009ede:	f04f 0800 	mov.w	r8, #0
 8009ee2:	f240 1991 	movw	r9, #401	@ 0x191
 8009ee6:	e00a      	b.n	8009efe <rclc_executor_spin_some+0x1a6>
 8009ee8:	f7ff fb0c 	bl	8009504 <_rclc_take_new_data>
 8009eec:	f108 0801 	add.w	r8, r8, #1
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	b108      	cbz	r0, 8009ef8 <rclc_executor_spin_some+0x1a0>
 8009ef4:	4548      	cmp	r0, r9
 8009ef6:	d11c      	bne.n	8009f32 <rclc_executor_spin_some+0x1da>
 8009ef8:	68e3      	ldr	r3, [r4, #12]
 8009efa:	4598      	cmp	r8, r3
 8009efc:	d26f      	bcs.n	8009fde <rclc_executor_spin_some+0x286>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009f04:	4639      	mov	r1, r7
 8009f06:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	d1ec      	bne.n	8009ee8 <rclc_executor_spin_some+0x190>
 8009f0e:	2700      	movs	r7, #0
 8009f10:	e009      	b.n	8009f26 <rclc_executor_spin_some+0x1ce>
 8009f12:	f7ff fc97 	bl	8009844 <_rclc_execute>
 8009f16:	3701      	adds	r7, #1
 8009f18:	4605      	mov	r5, r0
 8009f1a:	b950      	cbnz	r0, 8009f32 <rclc_executor_spin_some+0x1da>
 8009f1c:	68e3      	ldr	r3, [r4, #12]
 8009f1e:	429f      	cmp	r7, r3
 8009f20:	f4bf af63 	bcs.w	8009dea <rclc_executor_spin_some+0x92>
 8009f24:	68a3      	ldr	r3, [r4, #8]
 8009f26:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 8009f2a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1ef      	bne.n	8009f12 <rclc_executor_spin_some+0x1ba>
 8009f32:	462e      	mov	r6, r5
 8009f34:	e759      	b.n	8009dea <rclc_executor_spin_some+0x92>
 8009f36:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8009f3a:	4663      	mov	r3, ip
 8009f3c:	2a00      	cmp	r2, #0
 8009f3e:	d054      	beq.n	8009fea <rclc_executor_spin_some+0x292>
 8009f40:	46a8      	mov	r8, r5
 8009f42:	f240 1991 	movw	r9, #401	@ 0x191
 8009f46:	e00b      	b.n	8009f60 <rclc_executor_spin_some+0x208>
 8009f48:	f7ff fa8e 	bl	8009468 <_rclc_check_for_new_data>
 8009f4c:	f108 0801 	add.w	r8, r8, #1
 8009f50:	4605      	mov	r5, r0
 8009f52:	b108      	cbz	r0, 8009f58 <rclc_executor_spin_some+0x200>
 8009f54:	4548      	cmp	r0, r9
 8009f56:	d1ec      	bne.n	8009f32 <rclc_executor_spin_some+0x1da>
 8009f58:	68e2      	ldr	r2, [r4, #12]
 8009f5a:	4590      	cmp	r8, r2
 8009f5c:	d23c      	bcs.n	8009fd8 <rclc_executor_spin_some+0x280>
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009f64:	469c      	mov	ip, r3
 8009f66:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1eb      	bne.n	8009f48 <rclc_executor_spin_some+0x1f0>
 8009f70:	4611      	mov	r1, r2
 8009f72:	4660      	mov	r0, ip
 8009f74:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8009f78:	4798      	blx	r3
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d0d9      	beq.n	8009f32 <rclc_executor_spin_some+0x1da>
 8009f7e:	68e3      	ldr	r3, [r4, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0d6      	beq.n	8009f32 <rclc_executor_spin_some+0x1da>
 8009f84:	f04f 0a00 	mov.w	sl, #0
 8009f88:	f240 1891 	movw	r8, #401	@ 0x191
 8009f8c:	f240 2959 	movw	r9, #601	@ 0x259
 8009f90:	e013      	b.n	8009fba <rclc_executor_spin_some+0x262>
 8009f92:	f7ff fab7 	bl	8009504 <_rclc_take_new_data>
 8009f96:	b118      	cbz	r0, 8009fa0 <rclc_executor_spin_some+0x248>
 8009f98:	4540      	cmp	r0, r8
 8009f9a:	d001      	beq.n	8009fa0 <rclc_executor_spin_some+0x248>
 8009f9c:	4548      	cmp	r0, r9
 8009f9e:	d122      	bne.n	8009fe6 <rclc_executor_spin_some+0x28e>
 8009fa0:	68a0      	ldr	r0, [r4, #8]
 8009fa2:	4458      	add	r0, fp
 8009fa4:	f7ff fc4e 	bl	8009844 <_rclc_execute>
 8009fa8:	f10a 0a01 	add.w	sl, sl, #1
 8009fac:	4605      	mov	r5, r0
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d1bf      	bne.n	8009f32 <rclc_executor_spin_some+0x1da>
 8009fb2:	68e3      	ldr	r3, [r4, #12]
 8009fb4:	459a      	cmp	sl, r3
 8009fb6:	f4bf af18 	bcs.w	8009dea <rclc_executor_spin_some+0x92>
 8009fba:	68a0      	ldr	r0, [r4, #8]
 8009fbc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009fc6:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e1      	bne.n	8009f92 <rclc_executor_spin_some+0x23a>
 8009fce:	462e      	mov	r6, r5
 8009fd0:	e70b      	b.n	8009dea <rclc_executor_spin_some+0x92>
 8009fd2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009fd6:	e77a      	b.n	8009ece <rclc_executor_spin_some+0x176>
 8009fd8:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009fdc:	e7c8      	b.n	8009f70 <rclc_executor_spin_some+0x218>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0a7      	beq.n	8009f32 <rclc_executor_spin_some+0x1da>
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	e793      	b.n	8009f0e <rclc_executor_spin_some+0x1b6>
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	e6ff      	b.n	8009dea <rclc_executor_spin_some+0x92>
 8009fea:	4615      	mov	r5, r2
 8009fec:	e7c0      	b.n	8009f70 <rclc_executor_spin_some+0x218>
 8009fee:	bf00      	nop

08009ff0 <rclc_executor_handle_counters_zero_init>:
 8009ff0:	b130      	cbz	r0, 800a000 <rclc_executor_handle_counters_zero_init+0x10>
 8009ff2:	b508      	push	{r3, lr}
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	f00d fd10 	bl	8017a1c <memset>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	bd08      	pop	{r3, pc}
 800a000:	200b      	movs	r0, #11
 800a002:	4770      	bx	lr

0800a004 <rclc_executor_handle_init>:
 800a004:	b158      	cbz	r0, 800a01e <rclc_executor_handle_init+0x1a>
 800a006:	2300      	movs	r3, #0
 800a008:	220b      	movs	r2, #11
 800a00a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a00e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800a012:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a016:	8002      	strh	r2, [r0, #0]
 800a018:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a01a:	4618      	mov	r0, r3
 800a01c:	4770      	bx	lr
 800a01e:	200b      	movs	r0, #11
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop

0800a024 <rclc_support_init>:
 800a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	b3b8      	cbz	r0, 800a09c <rclc_support_init+0x78>
 800a02c:	461c      	mov	r4, r3
 800a02e:	b3ab      	cbz	r3, 800a09c <rclc_support_init+0x78>
 800a030:	460f      	mov	r7, r1
 800a032:	4690      	mov	r8, r2
 800a034:	4606      	mov	r6, r0
 800a036:	f006 fa3d 	bl	80104b4 <rcl_get_zero_initialized_init_options>
 800a03a:	f104 030c 	add.w	r3, r4, #12
 800a03e:	9005      	str	r0, [sp, #20]
 800a040:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a044:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a048:	a805      	add	r0, sp, #20
 800a04a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a04e:	f006 fa33 	bl	80104b8 <rcl_init_options_init>
 800a052:	4605      	mov	r5, r0
 800a054:	b9e0      	cbnz	r0, 800a090 <rclc_support_init+0x6c>
 800a056:	ad02      	add	r5, sp, #8
 800a058:	4628      	mov	r0, r5
 800a05a:	f006 f8bd 	bl	80101d8 <rcl_get_zero_initialized_context>
 800a05e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a062:	4633      	mov	r3, r6
 800a064:	e886 0003 	stmia.w	r6, {r0, r1}
 800a068:	aa05      	add	r2, sp, #20
 800a06a:	4641      	mov	r1, r8
 800a06c:	4638      	mov	r0, r7
 800a06e:	f006 f91d 	bl	80102ac <rcl_init>
 800a072:	4605      	mov	r5, r0
 800a074:	b9b8      	cbnz	r0, 800a0a6 <rclc_support_init+0x82>
 800a076:	60b4      	str	r4, [r6, #8]
 800a078:	4622      	mov	r2, r4
 800a07a:	f106 010c 	add.w	r1, r6, #12
 800a07e:	2003      	movs	r0, #3
 800a080:	f006 fffa 	bl	8011078 <rcl_clock_init>
 800a084:	4605      	mov	r5, r0
 800a086:	b970      	cbnz	r0, 800a0a6 <rclc_support_init+0x82>
 800a088:	a805      	add	r0, sp, #20
 800a08a:	f006 fa71 	bl	8010570 <rcl_init_options_fini>
 800a08e:	b108      	cbz	r0, 800a094 <rclc_support_init+0x70>
 800a090:	f000 f956 	bl	800a340 <rcutils_reset_error>
 800a094:	4628      	mov	r0, r5
 800a096:	b006      	add	sp, #24
 800a098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09c:	250b      	movs	r5, #11
 800a09e:	4628      	mov	r0, r5
 800a0a0:	b006      	add	sp, #24
 800a0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a6:	f000 f94b 	bl	800a340 <rcutils_reset_error>
 800a0aa:	a805      	add	r0, sp, #20
 800a0ac:	f006 fa60 	bl	8010570 <rcl_init_options_fini>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d0ef      	beq.n	800a094 <rclc_support_init+0x70>
 800a0b4:	e7ec      	b.n	800a090 <rclc_support_init+0x6c>
 800a0b6:	bf00      	nop

0800a0b8 <rclc_node_init_default>:
 800a0b8:	b3b8      	cbz	r0, 800a12a <rclc_node_init_default+0x72>
 800a0ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0be:	460d      	mov	r5, r1
 800a0c0:	b0a1      	sub	sp, #132	@ 0x84
 800a0c2:	b329      	cbz	r1, 800a110 <rclc_node_init_default+0x58>
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	b31a      	cbz	r2, 800a110 <rclc_node_init_default+0x58>
 800a0c8:	461f      	mov	r7, r3
 800a0ca:	b30b      	cbz	r3, 800a110 <rclc_node_init_default+0x58>
 800a0cc:	f10d 0810 	add.w	r8, sp, #16
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	f006 fad2 	bl	801067c <rcl_get_zero_initialized_node>
 800a0d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a0dc:	f10d 0918 	add.w	r9, sp, #24
 800a0e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800a0e4:	4648      	mov	r0, r9
 800a0e6:	f006 fc71 	bl	80109cc <rcl_node_get_default_options>
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	f006 fac6 	bl	801067c <rcl_get_zero_initialized_node>
 800a0f0:	f8cd 9000 	str.w	r9, [sp]
 800a0f4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	e884 0003 	stmia.w	r4, {r0, r1}
 800a0fe:	4632      	mov	r2, r6
 800a100:	4629      	mov	r1, r5
 800a102:	4620      	mov	r0, r4
 800a104:	f006 fac4 	bl	8010690 <rcl_node_init>
 800a108:	b930      	cbnz	r0, 800a118 <rclc_node_init_default+0x60>
 800a10a:	b021      	add	sp, #132	@ 0x84
 800a10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a110:	200b      	movs	r0, #11
 800a112:	b021      	add	sp, #132	@ 0x84
 800a114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a118:	9003      	str	r0, [sp, #12]
 800a11a:	f000 f911 	bl	800a340 <rcutils_reset_error>
 800a11e:	f000 f90f 	bl	800a340 <rcutils_reset_error>
 800a122:	9803      	ldr	r0, [sp, #12]
 800a124:	b021      	add	sp, #132	@ 0x84
 800a126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a12a:	200b      	movs	r0, #11
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop

0800a130 <rclc_publisher_init_default>:
 800a130:	b368      	cbz	r0, 800a18e <rclc_publisher_init_default+0x5e>
 800a132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a136:	460d      	mov	r5, r1
 800a138:	b0a0      	sub	sp, #128	@ 0x80
 800a13a:	b321      	cbz	r1, 800a186 <rclc_publisher_init_default+0x56>
 800a13c:	4616      	mov	r6, r2
 800a13e:	b312      	cbz	r2, 800a186 <rclc_publisher_init_default+0x56>
 800a140:	461f      	mov	r7, r3
 800a142:	b303      	cbz	r3, 800a186 <rclc_publisher_init_default+0x56>
 800a144:	4604      	mov	r4, r0
 800a146:	f7ff f87f 	bl	8009248 <rcl_get_zero_initialized_publisher>
 800a14a:	f10d 0810 	add.w	r8, sp, #16
 800a14e:	6020      	str	r0, [r4, #0]
 800a150:	4640      	mov	r0, r8
 800a152:	f7ff f917 	bl	8009384 <rcl_publisher_get_default_options>
 800a156:	490f      	ldr	r1, [pc, #60]	@ (800a194 <rclc_publisher_init_default+0x64>)
 800a158:	2250      	movs	r2, #80	@ 0x50
 800a15a:	4640      	mov	r0, r8
 800a15c:	f00d fd39 	bl	8017bd2 <memcpy>
 800a160:	f8cd 8000 	str.w	r8, [sp]
 800a164:	463b      	mov	r3, r7
 800a166:	4632      	mov	r2, r6
 800a168:	4629      	mov	r1, r5
 800a16a:	4620      	mov	r0, r4
 800a16c:	f7ff f872 	bl	8009254 <rcl_publisher_init>
 800a170:	b910      	cbnz	r0, 800a178 <rclc_publisher_init_default+0x48>
 800a172:	b020      	add	sp, #128	@ 0x80
 800a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a178:	9003      	str	r0, [sp, #12]
 800a17a:	f000 f8e1 	bl	800a340 <rcutils_reset_error>
 800a17e:	9803      	ldr	r0, [sp, #12]
 800a180:	b020      	add	sp, #128	@ 0x80
 800a182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a186:	200b      	movs	r0, #11
 800a188:	b020      	add	sp, #128	@ 0x80
 800a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a18e:	200b      	movs	r0, #11
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	08018a28 	.word	0x08018a28

0800a198 <rclc_subscription_init_default>:
 800a198:	b368      	cbz	r0, 800a1f6 <rclc_subscription_init_default+0x5e>
 800a19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19e:	460d      	mov	r5, r1
 800a1a0:	b0a2      	sub	sp, #136	@ 0x88
 800a1a2:	b321      	cbz	r1, 800a1ee <rclc_subscription_init_default+0x56>
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	b312      	cbz	r2, 800a1ee <rclc_subscription_init_default+0x56>
 800a1a8:	461f      	mov	r7, r3
 800a1aa:	b303      	cbz	r3, 800a1ee <rclc_subscription_init_default+0x56>
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	f006 fe17 	bl	8010de0 <rcl_get_zero_initialized_subscription>
 800a1b2:	f10d 0810 	add.w	r8, sp, #16
 800a1b6:	6020      	str	r0, [r4, #0]
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	f006 febf 	bl	8010f3c <rcl_subscription_get_default_options>
 800a1be:	490f      	ldr	r1, [pc, #60]	@ (800a1fc <rclc_subscription_init_default+0x64>)
 800a1c0:	2250      	movs	r2, #80	@ 0x50
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	f00d fd05 	bl	8017bd2 <memcpy>
 800a1c8:	f8cd 8000 	str.w	r8, [sp]
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f006 fe0a 	bl	8010dec <rcl_subscription_init>
 800a1d8:	b910      	cbnz	r0, 800a1e0 <rclc_subscription_init_default+0x48>
 800a1da:	b022      	add	sp, #136	@ 0x88
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	9003      	str	r0, [sp, #12]
 800a1e2:	f000 f8ad 	bl	800a340 <rcutils_reset_error>
 800a1e6:	9803      	ldr	r0, [sp, #12]
 800a1e8:	b022      	add	sp, #136	@ 0x88
 800a1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ee:	200b      	movs	r0, #11
 800a1f0:	b022      	add	sp, #136	@ 0x88
 800a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f6:	200b      	movs	r0, #11
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	08018a78 	.word	0x08018a78

0800a200 <rclc_timer_init_default2>:
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	b08c      	sub	sp, #48	@ 0x30
 800a206:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800a20a:	b330      	cbz	r0, 800a25a <rclc_timer_init_default2+0x5a>
 800a20c:	460e      	mov	r6, r1
 800a20e:	b321      	cbz	r1, 800a25a <rclc_timer_init_default2+0x5a>
 800a210:	4690      	mov	r8, r2
 800a212:	461f      	mov	r7, r3
 800a214:	4605      	mov	r5, r0
 800a216:	f007 f90f 	bl	8011438 <rcl_get_zero_initialized_timer>
 800a21a:	9408      	str	r4, [sp, #32]
 800a21c:	68b4      	ldr	r4, [r6, #8]
 800a21e:	6028      	str	r0, [r5, #0]
 800a220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a222:	f10d 0c0c 	add.w	ip, sp, #12
 800a226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	f8cc 3000 	str.w	r3, [ip]
 800a230:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a232:	9302      	str	r3, [sp, #8]
 800a234:	e9cd 8700 	strd	r8, r7, [sp]
 800a238:	4628      	mov	r0, r5
 800a23a:	4632      	mov	r2, r6
 800a23c:	f106 010c 	add.w	r1, r6, #12
 800a240:	f007 f902 	bl	8011448 <rcl_timer_init2>
 800a244:	b910      	cbnz	r0, 800a24c <rclc_timer_init_default2+0x4c>
 800a246:	b00c      	add	sp, #48	@ 0x30
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a24e:	f000 f877 	bl	800a340 <rcutils_reset_error>
 800a252:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a254:	b00c      	add	sp, #48	@ 0x30
 800a256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25a:	200b      	movs	r0, #11
 800a25c:	b00c      	add	sp, #48	@ 0x30
 800a25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a262:	bf00      	nop

0800a264 <__default_zero_allocate>:
 800a264:	f00c befc 	b.w	8017060 <calloc>

0800a268 <__default_reallocate>:
 800a268:	f00d b89a 	b.w	80173a0 <realloc>

0800a26c <__default_deallocate>:
 800a26c:	f00c bf76 	b.w	801715c <free>

0800a270 <__default_allocate>:
 800a270:	f00c bf6c 	b.w	801714c <malloc>

0800a274 <rcutils_get_zero_initialized_allocator>:
 800a274:	b510      	push	{r4, lr}
 800a276:	4c05      	ldr	r4, [pc, #20]	@ (800a28c <rcutils_get_zero_initialized_allocator+0x18>)
 800a278:	4686      	mov	lr, r0
 800a27a:	4684      	mov	ip, r0
 800a27c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a27e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	f8cc 3000 	str.w	r3, [ip]
 800a288:	4670      	mov	r0, lr
 800a28a:	bd10      	pop	{r4, pc}
 800a28c:	08018ac8 	.word	0x08018ac8

0800a290 <rcutils_get_default_allocator>:
 800a290:	b510      	push	{r4, lr}
 800a292:	4c05      	ldr	r4, [pc, #20]	@ (800a2a8 <rcutils_get_default_allocator+0x18>)
 800a294:	4686      	mov	lr, r0
 800a296:	4684      	mov	ip, r0
 800a298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a29a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	f8cc 3000 	str.w	r3, [ip]
 800a2a4:	4670      	mov	r0, lr
 800a2a6:	bd10      	pop	{r4, pc}
 800a2a8:	20000040 	.word	0x20000040

0800a2ac <rcutils_set_default_allocator>:
 800a2ac:	b1a8      	cbz	r0, 800a2da <rcutils_set_default_allocator+0x2e>
 800a2ae:	6802      	ldr	r2, [r0, #0]
 800a2b0:	b1a2      	cbz	r2, 800a2dc <rcutils_set_default_allocator+0x30>
 800a2b2:	6841      	ldr	r1, [r0, #4]
 800a2b4:	b1a1      	cbz	r1, 800a2e0 <rcutils_set_default_allocator+0x34>
 800a2b6:	b410      	push	{r4}
 800a2b8:	68c4      	ldr	r4, [r0, #12]
 800a2ba:	b164      	cbz	r4, 800a2d6 <rcutils_set_default_allocator+0x2a>
 800a2bc:	6880      	ldr	r0, [r0, #8]
 800a2be:	b138      	cbz	r0, 800a2d0 <rcutils_set_default_allocator+0x24>
 800a2c0:	4b08      	ldr	r3, [pc, #32]	@ (800a2e4 <rcutils_set_default_allocator+0x38>)
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a2ca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	e7fa      	b.n	800a2d0 <rcutils_set_default_allocator+0x24>
 800a2da:	4770      	bx	lr
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4770      	bx	lr
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	4770      	bx	lr
 800a2e4:	20000040 	.word	0x20000040

0800a2e8 <rcutils_allocator_is_valid>:
 800a2e8:	b158      	cbz	r0, 800a302 <rcutils_allocator_is_valid+0x1a>
 800a2ea:	6803      	ldr	r3, [r0, #0]
 800a2ec:	b143      	cbz	r3, 800a300 <rcutils_allocator_is_valid+0x18>
 800a2ee:	6843      	ldr	r3, [r0, #4]
 800a2f0:	b133      	cbz	r3, 800a300 <rcutils_allocator_is_valid+0x18>
 800a2f2:	68c3      	ldr	r3, [r0, #12]
 800a2f4:	b123      	cbz	r3, 800a300 <rcutils_allocator_is_valid+0x18>
 800a2f6:	6880      	ldr	r0, [r0, #8]
 800a2f8:	3800      	subs	r0, #0
 800a2fa:	bf18      	it	ne
 800a2fc:	2001      	movne	r0, #1
 800a2fe:	4770      	bx	lr
 800a300:	4618      	mov	r0, r3
 800a302:	4770      	bx	lr

0800a304 <rcutils_error_is_set>:
 800a304:	4b01      	ldr	r3, [pc, #4]	@ (800a30c <rcutils_error_is_set+0x8>)
 800a306:	7818      	ldrb	r0, [r3, #0]
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	2000a090 	.word	0x2000a090

0800a310 <rcutils_get_error_string>:
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <rcutils_get_error_string+0x1c>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b13b      	cbz	r3, 800a326 <rcutils_get_error_string+0x16>
 800a316:	4b06      	ldr	r3, [pc, #24]	@ (800a330 <rcutils_get_error_string+0x20>)
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	b90a      	cbnz	r2, 800a320 <rcutils_get_error_string+0x10>
 800a31c:	2201      	movs	r2, #1
 800a31e:	701a      	strb	r2, [r3, #0]
 800a320:	4b04      	ldr	r3, [pc, #16]	@ (800a334 <rcutils_get_error_string+0x24>)
 800a322:	7818      	ldrb	r0, [r3, #0]
 800a324:	4770      	bx	lr
 800a326:	4b04      	ldr	r3, [pc, #16]	@ (800a338 <rcutils_get_error_string+0x28>)
 800a328:	7818      	ldrb	r0, [r3, #0]
 800a32a:	4770      	bx	lr
 800a32c:	2000a090 	.word	0x2000a090
 800a330:	2000a095 	.word	0x2000a095
 800a334:	2000a094 	.word	0x2000a094
 800a338:	08018adc 	.word	0x08018adc
 800a33c:	00000000 	.word	0x00000000

0800a340 <rcutils_reset_error>:
 800a340:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a360 <rcutils_reset_error+0x20>
 800a344:	4a08      	ldr	r2, [pc, #32]	@ (800a368 <rcutils_reset_error+0x28>)
 800a346:	4809      	ldr	r0, [pc, #36]	@ (800a36c <rcutils_reset_error+0x2c>)
 800a348:	4909      	ldr	r1, [pc, #36]	@ (800a370 <rcutils_reset_error+0x30>)
 800a34a:	2300      	movs	r3, #0
 800a34c:	8013      	strh	r3, [r2, #0]
 800a34e:	ed82 7b02 	vstr	d7, [r2, #8]
 800a352:	4a08      	ldr	r2, [pc, #32]	@ (800a374 <rcutils_reset_error+0x34>)
 800a354:	7003      	strb	r3, [r0, #0]
 800a356:	700b      	strb	r3, [r1, #0]
 800a358:	7013      	strb	r3, [r2, #0]
 800a35a:	4770      	bx	lr
 800a35c:	f3af 8000 	nop.w
	...
 800a368:	2000a098 	.word	0x2000a098
 800a36c:	2000a095 	.word	0x2000a095
 800a370:	2000a094 	.word	0x2000a094
 800a374:	2000a090 	.word	0x2000a090

0800a378 <rcutils_system_time_now>:
 800a378:	b318      	cbz	r0, 800a3c2 <rcutils_system_time_now+0x4a>
 800a37a:	b570      	push	{r4, r5, r6, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	4604      	mov	r4, r0
 800a380:	4669      	mov	r1, sp
 800a382:	2001      	movs	r0, #1
 800a384:	f7f7 fc04 	bl	8001b90 <clock_gettime>
 800a388:	2800      	cmp	r0, #0
 800a38a:	db17      	blt.n	800a3bc <rcutils_system_time_now+0x44>
 800a38c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a390:	2900      	cmp	r1, #0
 800a392:	db13      	blt.n	800a3bc <rcutils_system_time_now+0x44>
 800a394:	9d02      	ldr	r5, [sp, #8]
 800a396:	2d00      	cmp	r5, #0
 800a398:	db0d      	blt.n	800a3b6 <rcutils_system_time_now+0x3e>
 800a39a:	4e0b      	ldr	r6, [pc, #44]	@ (800a3c8 <rcutils_system_time_now+0x50>)
 800a39c:	fba3 3206 	umull	r3, r2, r3, r6
 800a3a0:	195b      	adds	r3, r3, r5
 800a3a2:	fb06 2201 	mla	r2, r6, r1, r2
 800a3a6:	f04f 0000 	mov.w	r0, #0
 800a3aa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a3ae:	e9c4 3200 	strd	r3, r2, [r4]
 800a3b2:	b004      	add	sp, #16
 800a3b4:	bd70      	pop	{r4, r5, r6, pc}
 800a3b6:	ea53 0201 	orrs.w	r2, r3, r1
 800a3ba:	d1ee      	bne.n	800a39a <rcutils_system_time_now+0x22>
 800a3bc:	2002      	movs	r0, #2
 800a3be:	b004      	add	sp, #16
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}
 800a3c2:	200b      	movs	r0, #11
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	3b9aca00 	.word	0x3b9aca00

0800a3cc <rcutils_steady_time_now>:
 800a3cc:	b318      	cbz	r0, 800a416 <rcutils_steady_time_now+0x4a>
 800a3ce:	b570      	push	{r4, r5, r6, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4669      	mov	r1, sp
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	f7f7 fbda 	bl	8001b90 <clock_gettime>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	db17      	blt.n	800a410 <rcutils_steady_time_now+0x44>
 800a3e0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	db13      	blt.n	800a410 <rcutils_steady_time_now+0x44>
 800a3e8:	9d02      	ldr	r5, [sp, #8]
 800a3ea:	2d00      	cmp	r5, #0
 800a3ec:	db0d      	blt.n	800a40a <rcutils_steady_time_now+0x3e>
 800a3ee:	4e0b      	ldr	r6, [pc, #44]	@ (800a41c <rcutils_steady_time_now+0x50>)
 800a3f0:	fba3 3206 	umull	r3, r2, r3, r6
 800a3f4:	195b      	adds	r3, r3, r5
 800a3f6:	fb06 2201 	mla	r2, r6, r1, r2
 800a3fa:	f04f 0000 	mov.w	r0, #0
 800a3fe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a402:	e9c4 3200 	strd	r3, r2, [r4]
 800a406:	b004      	add	sp, #16
 800a408:	bd70      	pop	{r4, r5, r6, pc}
 800a40a:	ea53 0201 	orrs.w	r2, r3, r1
 800a40e:	d1ee      	bne.n	800a3ee <rcutils_steady_time_now+0x22>
 800a410:	2002      	movs	r0, #2
 800a412:	b004      	add	sp, #16
 800a414:	bd70      	pop	{r4, r5, r6, pc}
 800a416:	200b      	movs	r0, #11
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	3b9aca00 	.word	0x3b9aca00

0800a420 <rmw_get_default_publisher_options>:
 800a420:	2200      	movs	r2, #0
 800a422:	6002      	str	r2, [r0, #0]
 800a424:	7102      	strb	r2, [r0, #4]
 800a426:	4770      	bx	lr

0800a428 <rmw_uros_set_custom_transport>:
 800a428:	b470      	push	{r4, r5, r6}
 800a42a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a42e:	b162      	cbz	r2, 800a44a <rmw_uros_set_custom_transport+0x22>
 800a430:	b15b      	cbz	r3, 800a44a <rmw_uros_set_custom_transport+0x22>
 800a432:	b155      	cbz	r5, 800a44a <rmw_uros_set_custom_transport+0x22>
 800a434:	b14e      	cbz	r6, 800a44a <rmw_uros_set_custom_transport+0x22>
 800a436:	4c06      	ldr	r4, [pc, #24]	@ (800a450 <rmw_uros_set_custom_transport+0x28>)
 800a438:	7020      	strb	r0, [r4, #0]
 800a43a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a43e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a442:	6166      	str	r6, [r4, #20]
 800a444:	2000      	movs	r0, #0
 800a446:	bc70      	pop	{r4, r5, r6}
 800a448:	4770      	bx	lr
 800a44a:	200b      	movs	r0, #11
 800a44c:	bc70      	pop	{r4, r5, r6}
 800a44e:	4770      	bx	lr
 800a450:	2000a0a8 	.word	0x2000a0a8

0800a454 <rmw_uros_ping_agent>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4b22      	ldr	r3, [pc, #136]	@ (800a4e0 <rmw_uros_ping_agent+0x8c>)
 800a458:	7b1a      	ldrb	r2, [r3, #12]
 800a45a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800a45e:	4605      	mov	r5, r0
 800a460:	460e      	mov	r6, r1
 800a462:	b10a      	cbz	r2, 800a468 <rmw_uros_ping_agent+0x14>
 800a464:	681c      	ldr	r4, [r3, #0]
 800a466:	b9bc      	cbnz	r4, 800a498 <rmw_uros_ping_agent+0x44>
 800a468:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e4 <rmw_uros_ping_agent+0x90>)
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	6918      	ldr	r0, [r3, #16]
 800a46e:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800a476:	2100      	movs	r1, #0
 800a478:	68da      	ldr	r2, [r3, #12]
 800a47a:	909c      	str	r0, [sp, #624]	@ 0x270
 800a47c:	6958      	ldr	r0, [r3, #20]
 800a47e:	929b      	str	r2, [sp, #620]	@ 0x26c
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	909d      	str	r0, [sp, #628]	@ 0x274
 800a484:	466a      	mov	r2, sp
 800a486:	4608      	mov	r0, r1
 800a488:	939a      	str	r3, [sp, #616]	@ 0x268
 800a48a:	f000 f9cd 	bl	800a828 <rmw_uxrce_transport_init>
 800a48e:	b198      	cbz	r0, 800a4b8 <rmw_uros_ping_agent+0x64>
 800a490:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a494:	bd70      	pop	{r4, r5, r6, pc}
 800a496:	b9f0      	cbnz	r0, 800a4d6 <rmw_uros_ping_agent+0x82>
 800a498:	68a0      	ldr	r0, [r4, #8]
 800a49a:	4632      	mov	r2, r6
 800a49c:	4629      	mov	r1, r5
 800a49e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a4a2:	f002 fc2d 	bl	800cd00 <uxr_ping_agent_session>
 800a4a6:	6864      	ldr	r4, [r4, #4]
 800a4a8:	2c00      	cmp	r4, #0
 800a4aa:	d1f4      	bne.n	800a496 <rmw_uros_ping_agent+0x42>
 800a4ac:	f080 0001 	eor.w	r0, r0, #1
 800a4b0:	b2c0      	uxtb	r0, r0
 800a4b2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	4632      	mov	r2, r6
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	a89e      	add	r0, sp, #632	@ 0x278
 800a4be:	f002 fc6f 	bl	800cda0 <uxr_ping_agent_attempts>
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4668      	mov	r0, sp
 800a4c6:	f002 fbe9 	bl	800cc9c <uxr_close_custom_transport>
 800a4ca:	f084 0001 	eor.w	r0, r4, #1
 800a4ce:	b2c0      	uxtb	r0, r0
 800a4d0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a4d4:	bd70      	pop	{r4, r5, r6, pc}
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a4dc:	bd70      	pop	{r4, r5, r6, pc}
 800a4de:	bf00      	nop
 800a4e0:	2000ea08 	.word	0x2000ea08
 800a4e4:	2000a0a8 	.word	0x2000a0a8

0800a4e8 <flush_session>:
 800a4e8:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a4ea:	f003 b9a9 	b.w	800d840 <uxr_run_session_until_confirm_delivery>
 800a4ee:	bf00      	nop

0800a4f0 <rmw_publish>:
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d053      	beq.n	800a59c <rmw_publish+0xac>
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	b08e      	sub	sp, #56	@ 0x38
 800a4fa:	2900      	cmp	r1, #0
 800a4fc:	d04b      	beq.n	800a596 <rmw_publish+0xa6>
 800a4fe:	4604      	mov	r4, r0
 800a500:	6800      	ldr	r0, [r0, #0]
 800a502:	f000 fd0d 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 800a506:	2800      	cmp	r0, #0
 800a508:	d045      	beq.n	800a596 <rmw_publish+0xa6>
 800a50a:	6866      	ldr	r6, [r4, #4]
 800a50c:	2e00      	cmp	r6, #0
 800a50e:	d042      	beq.n	800a596 <rmw_publish+0xa6>
 800a510:	69b4      	ldr	r4, [r6, #24]
 800a512:	4628      	mov	r0, r5
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	4798      	blx	r3
 800a518:	69f3      	ldr	r3, [r6, #28]
 800a51a:	9005      	str	r0, [sp, #20]
 800a51c:	b113      	cbz	r3, 800a524 <rmw_publish+0x34>
 800a51e:	a805      	add	r0, sp, #20
 800a520:	4798      	blx	r3
 800a522:	9805      	ldr	r0, [sp, #20]
 800a524:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	9000      	str	r0, [sp, #0]
 800a52c:	6972      	ldr	r2, [r6, #20]
 800a52e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a530:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a534:	ab06      	add	r3, sp, #24
 800a536:	f004 fbf5 	bl	800ed24 <uxr_prepare_output_stream>
 800a53a:	b1d8      	cbz	r0, 800a574 <rmw_publish+0x84>
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	a906      	add	r1, sp, #24
 800a540:	4628      	mov	r0, r5
 800a542:	4798      	blx	r3
 800a544:	6a33      	ldr	r3, [r6, #32]
 800a546:	4604      	mov	r4, r0
 800a548:	b10b      	cbz	r3, 800a54e <rmw_publish+0x5e>
 800a54a:	a806      	add	r0, sp, #24
 800a54c:	4798      	blx	r3
 800a54e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a552:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800a556:	2b01      	cmp	r3, #1
 800a558:	6910      	ldr	r0, [r2, #16]
 800a55a:	d021      	beq.n	800a5a0 <rmw_publish+0xb0>
 800a55c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a55e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a562:	f003 f96d 	bl	800d840 <uxr_run_session_until_confirm_delivery>
 800a566:	4004      	ands	r4, r0
 800a568:	b2e4      	uxtb	r4, r4
 800a56a:	f084 0001 	eor.w	r0, r4, #1
 800a56e:	b2c0      	uxtb	r0, r0
 800a570:	b00e      	add	sp, #56	@ 0x38
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a578:	6918      	ldr	r0, [r3, #16]
 800a57a:	4b0c      	ldr	r3, [pc, #48]	@ (800a5ac <rmw_publish+0xbc>)
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	9b05      	ldr	r3, [sp, #20]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	9602      	str	r6, [sp, #8]
 800a584:	6972      	ldr	r2, [r6, #20]
 800a586:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a588:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a58c:	ab06      	add	r3, sp, #24
 800a58e:	f004 fbf9 	bl	800ed84 <uxr_prepare_output_stream_fragmented>
 800a592:	2800      	cmp	r0, #0
 800a594:	d1d2      	bne.n	800a53c <rmw_publish+0x4c>
 800a596:	2001      	movs	r0, #1
 800a598:	b00e      	add	sp, #56	@ 0x38
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	2001      	movs	r0, #1
 800a59e:	4770      	bx	lr
 800a5a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5a4:	f002 fdb4 	bl	800d110 <uxr_flash_output_streams>
 800a5a8:	e7df      	b.n	800a56a <rmw_publish+0x7a>
 800a5aa:	bf00      	nop
 800a5ac:	0800a4e9 	.word	0x0800a4e9

0800a5b0 <rmw_create_publisher>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	b087      	sub	sp, #28
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	f000 80c9 	beq.w	800a74e <rmw_create_publisher+0x19e>
 800a5bc:	460f      	mov	r7, r1
 800a5be:	2900      	cmp	r1, #0
 800a5c0:	f000 80c5 	beq.w	800a74e <rmw_create_publisher+0x19e>
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	6800      	ldr	r0, [r0, #0]
 800a5c8:	4615      	mov	r5, r2
 800a5ca:	461e      	mov	r6, r3
 800a5cc:	f000 fca8 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f000 80bc 	beq.w	800a74e <rmw_create_publisher+0x19e>
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	f000 80b9 	beq.w	800a74e <rmw_create_publisher+0x19e>
 800a5dc:	782b      	ldrb	r3, [r5, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 80b5 	beq.w	800a74e <rmw_create_publisher+0x19e>
 800a5e4:	2e00      	cmp	r6, #0
 800a5e6:	f000 80b2 	beq.w	800a74e <rmw_create_publisher+0x19e>
 800a5ea:	485c      	ldr	r0, [pc, #368]	@ (800a75c <rmw_create_publisher+0x1ac>)
 800a5ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a5f0:	f009 fa04 	bl	80139fc <get_memory>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	f000 80aa 	beq.w	800a74e <rmw_create_publisher+0x19e>
 800a5fa:	6884      	ldr	r4, [r0, #8]
 800a5fc:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a600:	f009 fa82 	bl	8013b08 <rmw_get_implementation_identifier>
 800a604:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a608:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a60c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a610:	4628      	mov	r0, r5
 800a612:	f7f5 fe5d 	bl	80002d0 <strlen>
 800a616:	3001      	adds	r0, #1
 800a618:	283c      	cmp	r0, #60	@ 0x3c
 800a61a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800a61e:	f200 808f 	bhi.w	800a740 <rmw_create_publisher+0x190>
 800a622:	4a4f      	ldr	r2, [pc, #316]	@ (800a760 <rmw_create_publisher+0x1b0>)
 800a624:	462b      	mov	r3, r5
 800a626:	213c      	movs	r1, #60	@ 0x3c
 800a628:	4650      	mov	r0, sl
 800a62a:	f00d f883 	bl	8017734 <sniprintf>
 800a62e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a632:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a634:	4631      	mov	r1, r6
 800a636:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a63a:	2250      	movs	r2, #80	@ 0x50
 800a63c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a640:	f00d fac7 	bl	8017bd2 <memcpy>
 800a644:	7a33      	ldrb	r3, [r6, #8]
 800a646:	4947      	ldr	r1, [pc, #284]	@ (800a764 <rmw_create_publisher+0x1b4>)
 800a648:	2b02      	cmp	r3, #2
 800a64a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a64e:	bf0c      	ite	eq
 800a650:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a654:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a658:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a65a:	2300      	movs	r3, #0
 800a65c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a660:	4638      	mov	r0, r7
 800a662:	f000 fc6b 	bl	800af3c <get_message_typesupport_handle>
 800a666:	2800      	cmp	r0, #0
 800a668:	d06a      	beq.n	800a740 <rmw_create_publisher+0x190>
 800a66a:	6842      	ldr	r2, [r0, #4]
 800a66c:	61a2      	str	r2, [r4, #24]
 800a66e:	2a00      	cmp	r2, #0
 800a670:	d066      	beq.n	800a740 <rmw_create_publisher+0x190>
 800a672:	4629      	mov	r1, r5
 800a674:	4633      	mov	r3, r6
 800a676:	4648      	mov	r0, r9
 800a678:	f009 fca2 	bl	8013fc0 <create_topic>
 800a67c:	6260      	str	r0, [r4, #36]	@ 0x24
 800a67e:	2800      	cmp	r0, #0
 800a680:	d062      	beq.n	800a748 <rmw_create_publisher+0x198>
 800a682:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a68a:	2103      	movs	r1, #3
 800a68c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a690:	1c42      	adds	r2, r0, #1
 800a692:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a696:	f002 fb05 	bl	800cca4 <uxr_object_id>
 800a69a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a69e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6a2:	6120      	str	r0, [r4, #16]
 800a6a4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a6a8:	6910      	ldr	r0, [r2, #16]
 800a6aa:	2506      	movs	r5, #6
 800a6ac:	9500      	str	r5, [sp, #0]
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	6922      	ldr	r2, [r4, #16]
 800a6b2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a6b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a6ba:	f002 f909 	bl	800c8d0 <uxr_buffer_create_publisher_bin>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a6c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a6c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a6cc:	f000 fba2 	bl	800ae14 <run_xrce_session>
 800a6d0:	b3b0      	cbz	r0, 800a740 <rmw_create_publisher+0x190>
 800a6d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6da:	2105      	movs	r1, #5
 800a6dc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a6e0:	1c42      	adds	r2, r0, #1
 800a6e2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a6e6:	f002 fadd 	bl	800cca4 <uxr_object_id>
 800a6ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a6ee:	6160      	str	r0, [r4, #20]
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	af04      	add	r7, sp, #16
 800a6f4:	691e      	ldr	r6, [r3, #16]
 800a6f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6fa:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a6fe:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800a702:	4638      	mov	r0, r7
 800a704:	f000 fba6 	bl	800ae54 <convert_qos_profile>
 800a708:	9503      	str	r5, [sp, #12]
 800a70a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a70e:	9001      	str	r0, [sp, #4]
 800a710:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a714:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a71e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a722:	f8da 1000 	ldr.w	r1, [sl]
 800a726:	4630      	mov	r0, r6
 800a728:	f002 f930 	bl	800c98c <uxr_buffer_create_datawriter_bin>
 800a72c:	4602      	mov	r2, r0
 800a72e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a732:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a736:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a73a:	f000 fb6b 	bl	800ae14 <run_xrce_session>
 800a73e:	b940      	cbnz	r0, 800a752 <rmw_create_publisher+0x1a2>
 800a740:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a742:	b108      	cbz	r0, 800a748 <rmw_create_publisher+0x198>
 800a744:	f000 fa5e 	bl	800ac04 <rmw_uxrce_fini_topic_memory>
 800a748:	4640      	mov	r0, r8
 800a74a:	f000 fa03 	bl	800ab54 <rmw_uxrce_fini_publisher_memory>
 800a74e:	f04f 0800 	mov.w	r8, #0
 800a752:	4640      	mov	r0, r8
 800a754:	b007      	add	sp, #28
 800a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75a:	bf00      	nop
 800a75c:	2000d398 	.word	0x2000d398
 800a760:	08018b14 	.word	0x08018b14
 800a764:	08018ae0 	.word	0x08018ae0

0800a768 <rmw_publisher_get_actual_qos>:
 800a768:	b508      	push	{r3, lr}
 800a76a:	4603      	mov	r3, r0
 800a76c:	b140      	cbz	r0, 800a780 <rmw_publisher_get_actual_qos+0x18>
 800a76e:	4608      	mov	r0, r1
 800a770:	b131      	cbz	r1, 800a780 <rmw_publisher_get_actual_qos+0x18>
 800a772:	6859      	ldr	r1, [r3, #4]
 800a774:	2250      	movs	r2, #80	@ 0x50
 800a776:	3128      	adds	r1, #40	@ 0x28
 800a778:	f00d fa2b 	bl	8017bd2 <memcpy>
 800a77c:	2000      	movs	r0, #0
 800a77e:	bd08      	pop	{r3, pc}
 800a780:	200b      	movs	r0, #11
 800a782:	bd08      	pop	{r3, pc}

0800a784 <rmw_destroy_publisher>:
 800a784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a788:	b128      	cbz	r0, 800a796 <rmw_destroy_publisher+0x12>
 800a78a:	4604      	mov	r4, r0
 800a78c:	6800      	ldr	r0, [r0, #0]
 800a78e:	460d      	mov	r5, r1
 800a790:	f000 fbc6 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 800a794:	b918      	cbnz	r0, 800a79e <rmw_destroy_publisher+0x1a>
 800a796:	2401      	movs	r4, #1
 800a798:	4620      	mov	r0, r4
 800a79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0f8      	beq.n	800a796 <rmw_destroy_publisher+0x12>
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	d0f6      	beq.n	800a796 <rmw_destroy_publisher+0x12>
 800a7a8:	6828      	ldr	r0, [r5, #0]
 800a7aa:	f000 fbb9 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d0f1      	beq.n	800a796 <rmw_destroy_publisher+0x12>
 800a7b2:	686c      	ldr	r4, [r5, #4]
 800a7b4:	2c00      	cmp	r4, #0
 800a7b6:	d0ee      	beq.n	800a796 <rmw_destroy_publisher+0x12>
 800a7b8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a7ba:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a7be:	f009 fc53 	bl	8014068 <destroy_topic>
 800a7c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a7c6:	6962      	ldr	r2, [r4, #20]
 800a7c8:	6918      	ldr	r0, [r3, #16]
 800a7ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a7ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	f001 ffcc 	bl	800c770 <uxr_buffer_delete_entity>
 800a7d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a7dc:	6922      	ldr	r2, [r4, #16]
 800a7de:	4680      	mov	r8, r0
 800a7e0:	6918      	ldr	r0, [r3, #16]
 800a7e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a7e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a7ea:	6819      	ldr	r1, [r3, #0]
 800a7ec:	f001 ffc0 	bl	800c770 <uxr_buffer_delete_entity>
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	6938      	ldr	r0, [r7, #16]
 800a7f4:	4642      	mov	r2, r8
 800a7f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a7fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a7fe:	f000 fb09 	bl	800ae14 <run_xrce_session>
 800a802:	4604      	mov	r4, r0
 800a804:	6938      	ldr	r0, [r7, #16]
 800a806:	4632      	mov	r2, r6
 800a808:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a80c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a810:	f000 fb00 	bl	800ae14 <run_xrce_session>
 800a814:	4004      	ands	r4, r0
 800a816:	f084 0401 	eor.w	r4, r4, #1
 800a81a:	b2e4      	uxtb	r4, r4
 800a81c:	4628      	mov	r0, r5
 800a81e:	0064      	lsls	r4, r4, #1
 800a820:	f000 f998 	bl	800ab54 <rmw_uxrce_fini_publisher_memory>
 800a824:	e7b8      	b.n	800a798 <rmw_destroy_publisher+0x14>
 800a826:	bf00      	nop

0800a828 <rmw_uxrce_transport_init>:
 800a828:	b508      	push	{r3, lr}
 800a82a:	b108      	cbz	r0, 800a830 <rmw_uxrce_transport_init+0x8>
 800a82c:	f100 0210 	add.w	r2, r0, #16
 800a830:	b139      	cbz	r1, 800a842 <rmw_uxrce_transport_init+0x1a>
 800a832:	6949      	ldr	r1, [r1, #20]
 800a834:	4610      	mov	r0, r2
 800a836:	f002 f9fd 	bl	800cc34 <uxr_init_custom_transport>
 800a83a:	f080 0001 	eor.w	r0, r0, #1
 800a83e:	b2c0      	uxtb	r0, r0
 800a840:	bd08      	pop	{r3, pc}
 800a842:	4b04      	ldr	r3, [pc, #16]	@ (800a854 <rmw_uxrce_transport_init+0x2c>)
 800a844:	4610      	mov	r0, r2
 800a846:	6859      	ldr	r1, [r3, #4]
 800a848:	f002 f9f4 	bl	800cc34 <uxr_init_custom_transport>
 800a84c:	f080 0001 	eor.w	r0, r0, #1
 800a850:	b2c0      	uxtb	r0, r0
 800a852:	bd08      	pop	{r3, pc}
 800a854:	2000a0a8 	.word	0x2000a0a8

0800a858 <rmw_uxrce_init_service_memory>:
 800a858:	b1e2      	cbz	r2, 800a894 <rmw_uxrce_init_service_memory+0x3c>
 800a85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85e:	7b05      	ldrb	r5, [r0, #12]
 800a860:	4606      	mov	r6, r0
 800a862:	b9ad      	cbnz	r5, 800a890 <rmw_uxrce_init_service_memory+0x38>
 800a864:	23c8      	movs	r3, #200	@ 0xc8
 800a866:	e9c0 5500 	strd	r5, r5, [r0]
 800a86a:	6083      	str	r3, [r0, #8]
 800a86c:	f240 1301 	movw	r3, #257	@ 0x101
 800a870:	4617      	mov	r7, r2
 800a872:	8183      	strh	r3, [r0, #12]
 800a874:	460c      	mov	r4, r1
 800a876:	46a8      	mov	r8, r5
 800a878:	4621      	mov	r1, r4
 800a87a:	4630      	mov	r0, r6
 800a87c:	3501      	adds	r5, #1
 800a87e:	f009 f8cd 	bl	8013a1c <put_memory>
 800a882:	42af      	cmp	r7, r5
 800a884:	60a4      	str	r4, [r4, #8]
 800a886:	f884 800c 	strb.w	r8, [r4, #12]
 800a88a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a88e:	d1f3      	bne.n	800a878 <rmw_uxrce_init_service_memory+0x20>
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop

0800a898 <rmw_uxrce_init_client_memory>:
 800a898:	b1e2      	cbz	r2, 800a8d4 <rmw_uxrce_init_client_memory+0x3c>
 800a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	7b05      	ldrb	r5, [r0, #12]
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	b9ad      	cbnz	r5, 800a8d0 <rmw_uxrce_init_client_memory+0x38>
 800a8a4:	23c8      	movs	r3, #200	@ 0xc8
 800a8a6:	e9c0 5500 	strd	r5, r5, [r0]
 800a8aa:	6083      	str	r3, [r0, #8]
 800a8ac:	f240 1301 	movw	r3, #257	@ 0x101
 800a8b0:	4617      	mov	r7, r2
 800a8b2:	8183      	strh	r3, [r0, #12]
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	46a8      	mov	r8, r5
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	3501      	adds	r5, #1
 800a8be:	f009 f8ad 	bl	8013a1c <put_memory>
 800a8c2:	42af      	cmp	r7, r5
 800a8c4:	60a4      	str	r4, [r4, #8]
 800a8c6:	f884 800c 	strb.w	r8, [r4, #12]
 800a8ca:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a8ce:	d1f3      	bne.n	800a8b8 <rmw_uxrce_init_client_memory+0x20>
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop

0800a8d8 <rmw_uxrce_init_publisher_memory>:
 800a8d8:	b1e2      	cbz	r2, 800a914 <rmw_uxrce_init_publisher_memory+0x3c>
 800a8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	7b05      	ldrb	r5, [r0, #12]
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	b9ad      	cbnz	r5, 800a910 <rmw_uxrce_init_publisher_memory+0x38>
 800a8e4:	23d8      	movs	r3, #216	@ 0xd8
 800a8e6:	e9c0 5500 	strd	r5, r5, [r0]
 800a8ea:	6083      	str	r3, [r0, #8]
 800a8ec:	f240 1301 	movw	r3, #257	@ 0x101
 800a8f0:	4617      	mov	r7, r2
 800a8f2:	8183      	strh	r3, [r0, #12]
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	46a8      	mov	r8, r5
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	3501      	adds	r5, #1
 800a8fe:	f009 f88d 	bl	8013a1c <put_memory>
 800a902:	42af      	cmp	r7, r5
 800a904:	60a4      	str	r4, [r4, #8]
 800a906:	f884 800c 	strb.w	r8, [r4, #12]
 800a90a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a90e:	d1f3      	bne.n	800a8f8 <rmw_uxrce_init_publisher_memory+0x20>
 800a910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop

0800a918 <rmw_uxrce_init_subscription_memory>:
 800a918:	b1e2      	cbz	r2, 800a954 <rmw_uxrce_init_subscription_memory+0x3c>
 800a91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	7b05      	ldrb	r5, [r0, #12]
 800a920:	4606      	mov	r6, r0
 800a922:	b9ad      	cbnz	r5, 800a950 <rmw_uxrce_init_subscription_memory+0x38>
 800a924:	23d8      	movs	r3, #216	@ 0xd8
 800a926:	e9c0 5500 	strd	r5, r5, [r0]
 800a92a:	6083      	str	r3, [r0, #8]
 800a92c:	f240 1301 	movw	r3, #257	@ 0x101
 800a930:	4617      	mov	r7, r2
 800a932:	8183      	strh	r3, [r0, #12]
 800a934:	460c      	mov	r4, r1
 800a936:	46a8      	mov	r8, r5
 800a938:	4621      	mov	r1, r4
 800a93a:	4630      	mov	r0, r6
 800a93c:	3501      	adds	r5, #1
 800a93e:	f009 f86d 	bl	8013a1c <put_memory>
 800a942:	42af      	cmp	r7, r5
 800a944:	60a4      	str	r4, [r4, #8]
 800a946:	f884 800c 	strb.w	r8, [r4, #12]
 800a94a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a94e:	d1f3      	bne.n	800a938 <rmw_uxrce_init_subscription_memory+0x20>
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop

0800a958 <rmw_uxrce_init_node_memory>:
 800a958:	b1e2      	cbz	r2, 800a994 <rmw_uxrce_init_node_memory+0x3c>
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	7b05      	ldrb	r5, [r0, #12]
 800a960:	4606      	mov	r6, r0
 800a962:	b9ad      	cbnz	r5, 800a990 <rmw_uxrce_init_node_memory+0x38>
 800a964:	23a4      	movs	r3, #164	@ 0xa4
 800a966:	e9c0 5500 	strd	r5, r5, [r0]
 800a96a:	6083      	str	r3, [r0, #8]
 800a96c:	f240 1301 	movw	r3, #257	@ 0x101
 800a970:	4617      	mov	r7, r2
 800a972:	8183      	strh	r3, [r0, #12]
 800a974:	460c      	mov	r4, r1
 800a976:	46a8      	mov	r8, r5
 800a978:	4621      	mov	r1, r4
 800a97a:	4630      	mov	r0, r6
 800a97c:	3501      	adds	r5, #1
 800a97e:	f009 f84d 	bl	8013a1c <put_memory>
 800a982:	42af      	cmp	r7, r5
 800a984:	60a4      	str	r4, [r4, #8]
 800a986:	f884 800c 	strb.w	r8, [r4, #12]
 800a98a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800a98e:	d1f3      	bne.n	800a978 <rmw_uxrce_init_node_memory+0x20>
 800a990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop

0800a998 <rmw_uxrce_init_session_memory>:
 800a998:	b1ea      	cbz	r2, 800a9d6 <rmw_uxrce_init_session_memory+0x3e>
 800a99a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a99e:	7b05      	ldrb	r5, [r0, #12]
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	b9b5      	cbnz	r5, 800a9d2 <rmw_uxrce_init_session_memory+0x3a>
 800a9a4:	e9c0 5500 	strd	r5, r5, [r0]
 800a9a8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800a9ac:	f240 1301 	movw	r3, #257	@ 0x101
 800a9b0:	4617      	mov	r7, r2
 800a9b2:	f8c0 8008 	str.w	r8, [r0, #8]
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	8183      	strh	r3, [r0, #12]
 800a9ba:	46a9      	mov	r9, r5
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4630      	mov	r0, r6
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	f009 f82b 	bl	8013a1c <put_memory>
 800a9c6:	42af      	cmp	r7, r5
 800a9c8:	60a4      	str	r4, [r4, #8]
 800a9ca:	f884 900c 	strb.w	r9, [r4, #12]
 800a9ce:	4444      	add	r4, r8
 800a9d0:	d1f4      	bne.n	800a9bc <rmw_uxrce_init_session_memory+0x24>
 800a9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d6:	4770      	bx	lr

0800a9d8 <rmw_uxrce_init_topic_memory>:
 800a9d8:	b1e2      	cbz	r2, 800aa14 <rmw_uxrce_init_topic_memory+0x3c>
 800a9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9de:	7b05      	ldrb	r5, [r0, #12]
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	b9ad      	cbnz	r5, 800aa10 <rmw_uxrce_init_topic_memory+0x38>
 800a9e4:	231c      	movs	r3, #28
 800a9e6:	e9c0 5500 	strd	r5, r5, [r0]
 800a9ea:	6083      	str	r3, [r0, #8]
 800a9ec:	f240 1301 	movw	r3, #257	@ 0x101
 800a9f0:	4617      	mov	r7, r2
 800a9f2:	8183      	strh	r3, [r0, #12]
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	46a8      	mov	r8, r5
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	f009 f80d 	bl	8013a1c <put_memory>
 800aa02:	42af      	cmp	r7, r5
 800aa04:	60a4      	str	r4, [r4, #8]
 800aa06:	f884 800c 	strb.w	r8, [r4, #12]
 800aa0a:	f104 041c 	add.w	r4, r4, #28
 800aa0e:	d1f3      	bne.n	800a9f8 <rmw_uxrce_init_topic_memory+0x20>
 800aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop

0800aa18 <rmw_uxrce_init_static_input_buffer_memory>:
 800aa18:	b1ea      	cbz	r2, 800aa56 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800aa1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1e:	7b05      	ldrb	r5, [r0, #12]
 800aa20:	4606      	mov	r6, r0
 800aa22:	b9b5      	cbnz	r5, 800aa52 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800aa24:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800aa28:	e9c0 5500 	strd	r5, r5, [r0]
 800aa2c:	6083      	str	r3, [r0, #8]
 800aa2e:	f240 1301 	movw	r3, #257	@ 0x101
 800aa32:	4617      	mov	r7, r2
 800aa34:	8183      	strh	r3, [r0, #12]
 800aa36:	460c      	mov	r4, r1
 800aa38:	46a8      	mov	r8, r5
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	3501      	adds	r5, #1
 800aa40:	f008 ffec 	bl	8013a1c <put_memory>
 800aa44:	42af      	cmp	r7, r5
 800aa46:	60a4      	str	r4, [r4, #8]
 800aa48:	f884 800c 	strb.w	r8, [r4, #12]
 800aa4c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800aa50:	d1f3      	bne.n	800aa3a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa56:	4770      	bx	lr

0800aa58 <rmw_uxrce_init_init_options_impl_memory>:
 800aa58:	b1e2      	cbz	r2, 800aa94 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800aa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5e:	7b05      	ldrb	r5, [r0, #12]
 800aa60:	4606      	mov	r6, r0
 800aa62:	b9ad      	cbnz	r5, 800aa90 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800aa64:	232c      	movs	r3, #44	@ 0x2c
 800aa66:	e9c0 5500 	strd	r5, r5, [r0]
 800aa6a:	6083      	str	r3, [r0, #8]
 800aa6c:	f240 1301 	movw	r3, #257	@ 0x101
 800aa70:	4617      	mov	r7, r2
 800aa72:	8183      	strh	r3, [r0, #12]
 800aa74:	460c      	mov	r4, r1
 800aa76:	46a8      	mov	r8, r5
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	f008 ffcd 	bl	8013a1c <put_memory>
 800aa82:	42af      	cmp	r7, r5
 800aa84:	60a4      	str	r4, [r4, #8]
 800aa86:	f884 800c 	strb.w	r8, [r4, #12]
 800aa8a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800aa8e:	d1f3      	bne.n	800aa78 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800aa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop

0800aa98 <rmw_uxrce_init_wait_set_memory>:
 800aa98:	b1e2      	cbz	r2, 800aad4 <rmw_uxrce_init_wait_set_memory+0x3c>
 800aa9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9e:	7b05      	ldrb	r5, [r0, #12]
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	b9ad      	cbnz	r5, 800aad0 <rmw_uxrce_init_wait_set_memory+0x38>
 800aaa4:	231c      	movs	r3, #28
 800aaa6:	e9c0 5500 	strd	r5, r5, [r0]
 800aaaa:	6083      	str	r3, [r0, #8]
 800aaac:	f240 1301 	movw	r3, #257	@ 0x101
 800aab0:	4617      	mov	r7, r2
 800aab2:	8183      	strh	r3, [r0, #12]
 800aab4:	460c      	mov	r4, r1
 800aab6:	46a8      	mov	r8, r5
 800aab8:	4621      	mov	r1, r4
 800aaba:	4630      	mov	r0, r6
 800aabc:	3501      	adds	r5, #1
 800aabe:	f008 ffad 	bl	8013a1c <put_memory>
 800aac2:	42af      	cmp	r7, r5
 800aac4:	60a4      	str	r4, [r4, #8]
 800aac6:	f884 800c 	strb.w	r8, [r4, #12]
 800aaca:	f104 041c 	add.w	r4, r4, #28
 800aace:	d1f3      	bne.n	800aab8 <rmw_uxrce_init_wait_set_memory+0x20>
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop

0800aad8 <rmw_uxrce_init_guard_condition_memory>:
 800aad8:	b1e2      	cbz	r2, 800ab14 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800aada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aade:	7b05      	ldrb	r5, [r0, #12]
 800aae0:	4606      	mov	r6, r0
 800aae2:	b9ad      	cbnz	r5, 800ab10 <rmw_uxrce_init_guard_condition_memory+0x38>
 800aae4:	2320      	movs	r3, #32
 800aae6:	e9c0 5500 	strd	r5, r5, [r0]
 800aaea:	6083      	str	r3, [r0, #8]
 800aaec:	f240 1301 	movw	r3, #257	@ 0x101
 800aaf0:	4617      	mov	r7, r2
 800aaf2:	8183      	strh	r3, [r0, #12]
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	46a8      	mov	r8, r5
 800aaf8:	4621      	mov	r1, r4
 800aafa:	4630      	mov	r0, r6
 800aafc:	3501      	adds	r5, #1
 800aafe:	f008 ff8d 	bl	8013a1c <put_memory>
 800ab02:	42af      	cmp	r7, r5
 800ab04:	60a4      	str	r4, [r4, #8]
 800ab06:	f884 800c 	strb.w	r8, [r4, #12]
 800ab0a:	f104 0420 	add.w	r4, r4, #32
 800ab0e:	d1f3      	bne.n	800aaf8 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ab10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop

0800ab18 <rmw_uxrce_fini_session_memory>:
 800ab18:	4601      	mov	r1, r0
 800ab1a:	4801      	ldr	r0, [pc, #4]	@ (800ab20 <rmw_uxrce_fini_session_memory+0x8>)
 800ab1c:	f008 bf7e 	b.w	8013a1c <put_memory>
 800ab20:	2000ea08 	.word	0x2000ea08

0800ab24 <rmw_uxrce_fini_node_memory>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4604      	mov	r4, r0
 800ab28:	6800      	ldr	r0, [r0, #0]
 800ab2a:	b128      	cbz	r0, 800ab38 <rmw_uxrce_fini_node_memory+0x14>
 800ab2c:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <rmw_uxrce_fini_node_memory+0x28>)
 800ab2e:	6819      	ldr	r1, [r3, #0]
 800ab30:	f7f5 fb6e 	bl	8000210 <strcmp>
 800ab34:	b940      	cbnz	r0, 800ab48 <rmw_uxrce_fini_node_memory+0x24>
 800ab36:	6020      	str	r0, [r4, #0]
 800ab38:	6861      	ldr	r1, [r4, #4]
 800ab3a:	b129      	cbz	r1, 800ab48 <rmw_uxrce_fini_node_memory+0x24>
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	4804      	ldr	r0, [pc, #16]	@ (800ab50 <rmw_uxrce_fini_node_memory+0x2c>)
 800ab40:	610d      	str	r5, [r1, #16]
 800ab42:	f008 ff6b 	bl	8013a1c <put_memory>
 800ab46:	6065      	str	r5, [r4, #4]
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	bf00      	nop
 800ab4c:	08019754 	.word	0x08019754
 800ab50:	2000d44c 	.word	0x2000d44c

0800ab54 <rmw_uxrce_fini_publisher_memory>:
 800ab54:	b510      	push	{r4, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	6800      	ldr	r0, [r0, #0]
 800ab5a:	b128      	cbz	r0, 800ab68 <rmw_uxrce_fini_publisher_memory+0x14>
 800ab5c:	4b06      	ldr	r3, [pc, #24]	@ (800ab78 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ab5e:	6819      	ldr	r1, [r3, #0]
 800ab60:	f7f5 fb56 	bl	8000210 <strcmp>
 800ab64:	b938      	cbnz	r0, 800ab76 <rmw_uxrce_fini_publisher_memory+0x22>
 800ab66:	6020      	str	r0, [r4, #0]
 800ab68:	6861      	ldr	r1, [r4, #4]
 800ab6a:	b121      	cbz	r1, 800ab76 <rmw_uxrce_fini_publisher_memory+0x22>
 800ab6c:	4803      	ldr	r0, [pc, #12]	@ (800ab7c <rmw_uxrce_fini_publisher_memory+0x28>)
 800ab6e:	f008 ff55 	bl	8013a1c <put_memory>
 800ab72:	2300      	movs	r3, #0
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	bd10      	pop	{r4, pc}
 800ab78:	08019754 	.word	0x08019754
 800ab7c:	2000d398 	.word	0x2000d398

0800ab80 <rmw_uxrce_fini_subscription_memory>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	4604      	mov	r4, r0
 800ab84:	6800      	ldr	r0, [r0, #0]
 800ab86:	b128      	cbz	r0, 800ab94 <rmw_uxrce_fini_subscription_memory+0x14>
 800ab88:	4b06      	ldr	r3, [pc, #24]	@ (800aba4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ab8a:	6819      	ldr	r1, [r3, #0]
 800ab8c:	f7f5 fb40 	bl	8000210 <strcmp>
 800ab90:	b938      	cbnz	r0, 800aba2 <rmw_uxrce_fini_subscription_memory+0x22>
 800ab92:	6020      	str	r0, [r4, #0]
 800ab94:	6861      	ldr	r1, [r4, #4]
 800ab96:	b121      	cbz	r1, 800aba2 <rmw_uxrce_fini_subscription_memory+0x22>
 800ab98:	4803      	ldr	r0, [pc, #12]	@ (800aba8 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ab9a:	f008 ff3f 	bl	8013a1c <put_memory>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6063      	str	r3, [r4, #4]
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	08019754 	.word	0x08019754
 800aba8:	2000cb18 	.word	0x2000cb18

0800abac <rmw_uxrce_fini_service_memory>:
 800abac:	b510      	push	{r4, lr}
 800abae:	4604      	mov	r4, r0
 800abb0:	6800      	ldr	r0, [r0, #0]
 800abb2:	b128      	cbz	r0, 800abc0 <rmw_uxrce_fini_service_memory+0x14>
 800abb4:	4b06      	ldr	r3, [pc, #24]	@ (800abd0 <rmw_uxrce_fini_service_memory+0x24>)
 800abb6:	6819      	ldr	r1, [r3, #0]
 800abb8:	f7f5 fb2a 	bl	8000210 <strcmp>
 800abbc:	b938      	cbnz	r0, 800abce <rmw_uxrce_fini_service_memory+0x22>
 800abbe:	6020      	str	r0, [r4, #0]
 800abc0:	6861      	ldr	r1, [r4, #4]
 800abc2:	b121      	cbz	r1, 800abce <rmw_uxrce_fini_service_memory+0x22>
 800abc4:	4803      	ldr	r0, [pc, #12]	@ (800abd4 <rmw_uxrce_fini_service_memory+0x28>)
 800abc6:	f008 ff29 	bl	8013a1c <put_memory>
 800abca:	2300      	movs	r3, #0
 800abcc:	6063      	str	r3, [r4, #4]
 800abce:	bd10      	pop	{r4, pc}
 800abd0:	08019754 	.word	0x08019754
 800abd4:	2000c6d0 	.word	0x2000c6d0

0800abd8 <rmw_uxrce_fini_client_memory>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	4604      	mov	r4, r0
 800abdc:	6800      	ldr	r0, [r0, #0]
 800abde:	b128      	cbz	r0, 800abec <rmw_uxrce_fini_client_memory+0x14>
 800abe0:	4b06      	ldr	r3, [pc, #24]	@ (800abfc <rmw_uxrce_fini_client_memory+0x24>)
 800abe2:	6819      	ldr	r1, [r3, #0]
 800abe4:	f7f5 fb14 	bl	8000210 <strcmp>
 800abe8:	b938      	cbnz	r0, 800abfa <rmw_uxrce_fini_client_memory+0x22>
 800abea:	6020      	str	r0, [r4, #0]
 800abec:	6861      	ldr	r1, [r4, #4]
 800abee:	b121      	cbz	r1, 800abfa <rmw_uxrce_fini_client_memory+0x22>
 800abf0:	4803      	ldr	r0, [pc, #12]	@ (800ac00 <rmw_uxrce_fini_client_memory+0x28>)
 800abf2:	f008 ff13 	bl	8013a1c <put_memory>
 800abf6:	2300      	movs	r3, #0
 800abf8:	6063      	str	r3, [r4, #4]
 800abfa:	bd10      	pop	{r4, pc}
 800abfc:	08019754 	.word	0x08019754
 800ac00:	2000c5f8 	.word	0x2000c5f8

0800ac04 <rmw_uxrce_fini_topic_memory>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	4604      	mov	r4, r0
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4803      	ldr	r0, [pc, #12]	@ (800ac18 <rmw_uxrce_fini_topic_memory+0x14>)
 800ac0c:	f008 ff06 	bl	8013a1c <put_memory>
 800ac10:	2300      	movs	r3, #0
 800ac12:	61a3      	str	r3, [r4, #24]
 800ac14:	bd10      	pop	{r4, pc}
 800ac16:	bf00      	nop
 800ac18:	2000c51c 	.word	0x2000c51c

0800ac1c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	b530      	push	{r4, r5, lr}
 800ac20:	4929      	ldr	r1, [pc, #164]	@ (800acc8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800ac22:	ac03      	add	r4, sp, #12
 800ac24:	e884 000c 	stmia.w	r4, {r2, r3}
 800ac28:	680c      	ldr	r4, [r1, #0]
 800ac2a:	461d      	mov	r5, r3
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	d043      	beq.n	800acba <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800ac32:	4620      	mov	r0, r4
 800ac34:	2100      	movs	r1, #0
 800ac36:	6883      	ldr	r3, [r0, #8]
 800ac38:	6840      	ldr	r0, [r0, #4]
 800ac3a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	bf08      	it	eq
 800ac42:	3101      	addeq	r1, #1
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d1f6      	bne.n	800ac36 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800ac48:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d027      	beq.n	800aca0 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800ac50:	d906      	bls.n	800ac60 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d004      	beq.n	800ac60 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	b002      	add	sp, #8
 800ac5e:	4770      	bx	lr
 800ac60:	b1fd      	cbz	r5, 800aca2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac62:	428d      	cmp	r5, r1
 800ac64:	d81d      	bhi.n	800aca2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	d0f5      	beq.n	800ac56 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f04f 3cff 	mov.w	ip, #4294967295
 800ac70:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ac74:	e001      	b.n	800ac7a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ac76:	6864      	ldr	r4, [r4, #4]
 800ac78:	b1dc      	cbz	r4, 800acb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800ac7a:	68a3      	ldr	r3, [r4, #8]
 800ac7c:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800ac80:	428a      	cmp	r2, r1
 800ac82:	d1f8      	bne.n	800ac76 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac84:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800ac88:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ac8c:	4561      	cmp	r1, ip
 800ac8e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ac92:	eb73 0e05 	sbcs.w	lr, r3, r5
 800ac96:	daee      	bge.n	800ac76 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac98:	468c      	mov	ip, r1
 800ac9a:	461d      	mov	r5, r3
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	e7ea      	b.n	800ac76 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800aca0:	b92d      	cbnz	r5, 800acae <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800aca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aca6:	4808      	ldr	r0, [pc, #32]	@ (800acc8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800aca8:	b002      	add	sp, #8
 800acaa:	f008 bea7 	b.w	80139fc <get_memory>
 800acae:	428d      	cmp	r5, r1
 800acb0:	d8f7      	bhi.n	800aca2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800acb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acb6:	b002      	add	sp, #8
 800acb8:	4770      	bx	lr
 800acba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d0ef      	beq.n	800aca2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800acc2:	d9ee      	bls.n	800aca2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800acc4:	4621      	mov	r1, r4
 800acc6:	e7c4      	b.n	800ac52 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800acc8:	2000c368 	.word	0x2000c368

0800accc <rmw_uxrce_find_static_input_buffer_by_owner>:
 800accc:	4b11      	ldr	r3, [pc, #68]	@ (800ad14 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	b1eb      	cbz	r3, 800ad0e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800acd2:	b530      	push	{r4, r5, lr}
 800acd4:	4684      	mov	ip, r0
 800acd6:	f04f 34ff 	mov.w	r4, #4294967295
 800acda:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800acde:	2000      	movs	r0, #0
 800ace0:	e001      	b.n	800ace6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	b193      	cbz	r3, 800ad0c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800acec:	458c      	cmp	ip, r1
 800acee:	d1f8      	bne.n	800ace2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800acf0:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800acf4:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800acf8:	42a1      	cmp	r1, r4
 800acfa:	eb72 050e 	sbcs.w	r5, r2, lr
 800acfe:	daf0      	bge.n	800ace2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ad00:	4618      	mov	r0, r3
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	460c      	mov	r4, r1
 800ad06:	4696      	mov	lr, r2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1ec      	bne.n	800ace6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ad0c:	bd30      	pop	{r4, r5, pc}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	2000c368 	.word	0x2000c368

0800ad18 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ad1e:	ed2d 8b06 	vpush	{d8-d10}
 800ad22:	f8d3 8000 	ldr.w	r8, [r3]
 800ad26:	b08d      	sub	sp, #52	@ 0x34
 800ad28:	f009 ffa2 	bl	8014c70 <rmw_uros_epoch_nanos>
 800ad2c:	f1b8 0f00 	cmp.w	r8, #0
 800ad30:	d05c      	beq.n	800adec <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800ad32:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ad36:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ad3a:	2b04      	cmp	r3, #4
 800ad3c:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800adf8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ad40:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800ae00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ad44:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800ae08 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ad48:	4683      	mov	fp, r0
 800ad4a:	ac04      	add	r4, sp, #16
 800ad4c:	468a      	mov	sl, r1
 800ad4e:	d03f      	beq.n	800add0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800ad50:	2b05      	cmp	r3, #5
 800ad52:	d044      	beq.n	800adde <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d03b      	beq.n	800add0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800ad58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ad5c:	ed8d ab06 	vstr	d10, [sp, #24]
 800ad60:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ad64:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ad68:	ab08      	add	r3, sp, #32
 800ad6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad6c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ad70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad74:	f008 fc78 	bl	8013668 <rmw_time_equal>
 800ad78:	b118      	cbz	r0, 800ad82 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800ad7a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ad7e:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ad82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad86:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800ad8a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800ad8e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800ad92:	f008 fcbd 	bl	8013710 <rmw_time_total_nsec>
 800ad96:	183f      	adds	r7, r7, r0
 800ad98:	eb46 0601 	adc.w	r6, r6, r1
 800ad9c:	455f      	cmp	r7, fp
 800ad9e:	eb76 060a 	sbcs.w	r6, r6, sl
 800ada2:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ada6:	db05      	blt.n	800adb4 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800ada8:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800adac:	4593      	cmp	fp, r2
 800adae:	eb7a 0303 	sbcs.w	r3, sl, r3
 800adb2:	da03      	bge.n	800adbc <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800adb4:	4816      	ldr	r0, [pc, #88]	@ (800ae10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800adb6:	4641      	mov	r1, r8
 800adb8:	f008 fe30 	bl	8013a1c <put_memory>
 800adbc:	f1b9 0f00 	cmp.w	r9, #0
 800adc0:	d014      	beq.n	800adec <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800adc2:	46c8      	mov	r8, r9
 800adc4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800adc8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d1bf      	bne.n	800ad50 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800add0:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800add4:	3340      	adds	r3, #64	@ 0x40
 800add6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800add8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800addc:	e7c0      	b.n	800ad60 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800adde:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ade2:	3348      	adds	r3, #72	@ 0x48
 800ade4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ade6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800adea:	e7b9      	b.n	800ad60 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800adec:	b00d      	add	sp, #52	@ 0x34
 800adee:	ecbd 8b06 	vpop	{d8-d10}
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	bf00      	nop
	...
 800ae00:	00000001 	.word	0x00000001
 800ae04:	00000000 	.word	0x00000000
 800ae08:	0000001e 	.word	0x0000001e
 800ae0c:	00000000 	.word	0x00000000
 800ae10:	2000c368 	.word	0x2000c368

0800ae14 <run_xrce_session>:
 800ae14:	b500      	push	{lr}
 800ae16:	f891 c002 	ldrb.w	ip, [r1, #2]
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	f1bc 0f01 	cmp.w	ip, #1
 800ae20:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ae24:	d00f      	beq.n	800ae46 <run_xrce_session+0x32>
 800ae26:	4619      	mov	r1, r3
 800ae28:	2301      	movs	r3, #1
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	f10d 020e 	add.w	r2, sp, #14
 800ae30:	f10d 0317 	add.w	r3, sp, #23
 800ae34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ae38:	f002 fd28 	bl	800d88c <uxr_run_session_until_all_status>
 800ae3c:	b100      	cbz	r0, 800ae40 <run_xrce_session+0x2c>
 800ae3e:	2001      	movs	r0, #1
 800ae40:	b007      	add	sp, #28
 800ae42:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ae4a:	f002 f961 	bl	800d110 <uxr_flash_output_streams>
 800ae4e:	2001      	movs	r0, #1
 800ae50:	e7f6      	b.n	800ae40 <run_xrce_session+0x2c>
 800ae52:	bf00      	nop

0800ae54 <convert_qos_profile>:
 800ae54:	780a      	ldrb	r2, [r1, #0]
 800ae56:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ae5a:	f1a2 0202 	sub.w	r2, r2, #2
 800ae5e:	fab2 f282 	clz	r2, r2
 800ae62:	0952      	lsrs	r2, r2, #5
 800ae64:	7082      	strb	r2, [r0, #2]
 800ae66:	7a4a      	ldrb	r2, [r1, #9]
 800ae68:	8889      	ldrh	r1, [r1, #4]
 800ae6a:	8081      	strh	r1, [r0, #4]
 800ae6c:	f1a2 0202 	sub.w	r2, r2, #2
 800ae70:	f1ac 0c02 	sub.w	ip, ip, #2
 800ae74:	fab2 f282 	clz	r2, r2
 800ae78:	fabc fc8c 	clz	ip, ip
 800ae7c:	0952      	lsrs	r2, r2, #5
 800ae7e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ae82:	0052      	lsls	r2, r2, #1
 800ae84:	f880 c001 	strb.w	ip, [r0, #1]
 800ae88:	7002      	strb	r2, [r0, #0]
 800ae8a:	4770      	bx	lr

0800ae8c <generate_type_name>:
 800ae8c:	b530      	push	{r4, r5, lr}
 800ae8e:	2300      	movs	r3, #0
 800ae90:	700b      	strb	r3, [r1, #0]
 800ae92:	6803      	ldr	r3, [r0, #0]
 800ae94:	b087      	sub	sp, #28
 800ae96:	4614      	mov	r4, r2
 800ae98:	b1d3      	cbz	r3, 800aed0 <generate_type_name+0x44>
 800ae9a:	4a0f      	ldr	r2, [pc, #60]	@ (800aed8 <generate_type_name+0x4c>)
 800ae9c:	4615      	mov	r5, r2
 800ae9e:	9203      	str	r2, [sp, #12]
 800aea0:	9500      	str	r5, [sp, #0]
 800aea2:	6842      	ldr	r2, [r0, #4]
 800aea4:	480d      	ldr	r0, [pc, #52]	@ (800aedc <generate_type_name+0x50>)
 800aea6:	9001      	str	r0, [sp, #4]
 800aea8:	4608      	mov	r0, r1
 800aeaa:	490d      	ldr	r1, [pc, #52]	@ (800aee0 <generate_type_name+0x54>)
 800aeac:	9204      	str	r2, [sp, #16]
 800aeae:	9105      	str	r1, [sp, #20]
 800aeb0:	9102      	str	r1, [sp, #8]
 800aeb2:	4a0c      	ldr	r2, [pc, #48]	@ (800aee4 <generate_type_name+0x58>)
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	f00c fc3d 	bl	8017734 <sniprintf>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	db05      	blt.n	800aeca <generate_type_name+0x3e>
 800aebe:	4284      	cmp	r4, r0
 800aec0:	bfd4      	ite	le
 800aec2:	2000      	movle	r0, #0
 800aec4:	2001      	movgt	r0, #1
 800aec6:	b007      	add	sp, #28
 800aec8:	bd30      	pop	{r4, r5, pc}
 800aeca:	2000      	movs	r0, #0
 800aecc:	b007      	add	sp, #28
 800aece:	bd30      	pop	{r4, r5, pc}
 800aed0:	4b05      	ldr	r3, [pc, #20]	@ (800aee8 <generate_type_name+0x5c>)
 800aed2:	4a01      	ldr	r2, [pc, #4]	@ (800aed8 <generate_type_name+0x4c>)
 800aed4:	461d      	mov	r5, r3
 800aed6:	e7e2      	b.n	800ae9e <generate_type_name+0x12>
 800aed8:	08018b04 	.word	0x08018b04
 800aedc:	08018b1c 	.word	0x08018b1c
 800aee0:	08018b18 	.word	0x08018b18
 800aee4:	08018b08 	.word	0x08018b08
 800aee8:	080191c4 	.word	0x080191c4

0800aeec <generate_topic_name>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	4614      	mov	r4, r2
 800aef2:	9000      	str	r0, [sp, #0]
 800aef4:	4b08      	ldr	r3, [pc, #32]	@ (800af18 <generate_topic_name+0x2c>)
 800aef6:	4a09      	ldr	r2, [pc, #36]	@ (800af1c <generate_topic_name+0x30>)
 800aef8:	4608      	mov	r0, r1
 800aefa:	4621      	mov	r1, r4
 800aefc:	f00c fc1a 	bl	8017734 <sniprintf>
 800af00:	2800      	cmp	r0, #0
 800af02:	db05      	blt.n	800af10 <generate_topic_name+0x24>
 800af04:	4284      	cmp	r4, r0
 800af06:	bfd4      	ite	le
 800af08:	2000      	movle	r0, #0
 800af0a:	2001      	movgt	r0, #1
 800af0c:	b002      	add	sp, #8
 800af0e:	bd10      	pop	{r4, pc}
 800af10:	2000      	movs	r0, #0
 800af12:	b002      	add	sp, #8
 800af14:	bd10      	pop	{r4, pc}
 800af16:	bf00      	nop
 800af18:	0801926c 	.word	0x0801926c
 800af1c:	08018b20 	.word	0x08018b20

0800af20 <is_uxrce_rmw_identifier_valid>:
 800af20:	b510      	push	{r4, lr}
 800af22:	4604      	mov	r4, r0
 800af24:	b140      	cbz	r0, 800af38 <is_uxrce_rmw_identifier_valid+0x18>
 800af26:	f008 fdef 	bl	8013b08 <rmw_get_implementation_identifier>
 800af2a:	4601      	mov	r1, r0
 800af2c:	4620      	mov	r0, r4
 800af2e:	f7f5 f96f 	bl	8000210 <strcmp>
 800af32:	fab0 f080 	clz	r0, r0
 800af36:	0940      	lsrs	r0, r0, #5
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	bf00      	nop

0800af3c <get_message_typesupport_handle>:
 800af3c:	6883      	ldr	r3, [r0, #8]
 800af3e:	4718      	bx	r3

0800af40 <get_message_typesupport_handle_function>:
 800af40:	b510      	push	{r4, lr}
 800af42:	4604      	mov	r4, r0
 800af44:	6800      	ldr	r0, [r0, #0]
 800af46:	f7f5 f963 	bl	8000210 <strcmp>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	bf0c      	ite	eq
 800af4e:	4620      	moveq	r0, r4
 800af50:	2000      	movne	r0, #0
 800af52:	bd10      	pop	{r4, pc}

0800af54 <std_msgs__msg__Int32MultiArray__init>:
 800af54:	b1e0      	cbz	r0, 800af90 <std_msgs__msg__Int32MultiArray__init+0x3c>
 800af56:	b538      	push	{r3, r4, r5, lr}
 800af58:	4604      	mov	r4, r0
 800af5a:	f000 f827 	bl	800afac <std_msgs__msg__MultiArrayLayout__init>
 800af5e:	b138      	cbz	r0, 800af70 <std_msgs__msg__Int32MultiArray__init+0x1c>
 800af60:	f104 0510 	add.w	r5, r4, #16
 800af64:	2100      	movs	r1, #0
 800af66:	4628      	mov	r0, r5
 800af68:	f009 fe90 	bl	8014c8c <rosidl_runtime_c__int32__Sequence__init>
 800af6c:	b148      	cbz	r0, 800af82 <std_msgs__msg__Int32MultiArray__init+0x2e>
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	4620      	mov	r0, r4
 800af72:	f000 f82b 	bl	800afcc <std_msgs__msg__MultiArrayLayout__fini>
 800af76:	f104 0010 	add.w	r0, r4, #16
 800af7a:	f009 fea1 	bl	8014cc0 <rosidl_runtime_c__int32__Sequence__fini>
 800af7e:	2000      	movs	r0, #0
 800af80:	bd38      	pop	{r3, r4, r5, pc}
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f822 	bl	800afcc <std_msgs__msg__MultiArrayLayout__fini>
 800af88:	4628      	mov	r0, r5
 800af8a:	f009 fe99 	bl	8014cc0 <rosidl_runtime_c__int32__Sequence__fini>
 800af8e:	e7f6      	b.n	800af7e <std_msgs__msg__Int32MultiArray__init+0x2a>
 800af90:	2000      	movs	r0, #0
 800af92:	4770      	bx	lr

0800af94 <std_msgs__msg__Int32MultiArray__fini>:
 800af94:	b148      	cbz	r0, 800afaa <std_msgs__msg__Int32MultiArray__fini+0x16>
 800af96:	b510      	push	{r4, lr}
 800af98:	4604      	mov	r4, r0
 800af9a:	f000 f817 	bl	800afcc <std_msgs__msg__MultiArrayLayout__fini>
 800af9e:	f104 0010 	add.w	r0, r4, #16
 800afa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa6:	f009 be8b 	b.w	8014cc0 <rosidl_runtime_c__int32__Sequence__fini>
 800afaa:	4770      	bx	lr

0800afac <std_msgs__msg__MultiArrayLayout__init>:
 800afac:	b158      	cbz	r0, 800afc6 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 800afae:	b510      	push	{r4, lr}
 800afb0:	2100      	movs	r1, #0
 800afb2:	4604      	mov	r4, r0
 800afb4:	f009 ff66 	bl	8014e84 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800afb8:	b100      	cbz	r0, 800afbc <std_msgs__msg__MultiArrayLayout__init+0x10>
 800afba:	bd10      	pop	{r4, pc}
 800afbc:	4620      	mov	r0, r4
 800afbe:	f009 ffa5 	bl	8014f0c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800afc2:	2000      	movs	r0, #0
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	2000      	movs	r0, #0
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop

0800afcc <std_msgs__msg__MultiArrayLayout__fini>:
 800afcc:	b108      	cbz	r0, 800afd2 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 800afce:	f009 bf9d 	b.w	8014f0c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800afd2:	4770      	bx	lr

0800afd4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800afd4:	4b04      	ldr	r3, [pc, #16]	@ (800afe8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	b10a      	cbz	r2, 800afde <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xa>
 800afda:	4803      	ldr	r0, [pc, #12]	@ (800afe8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800afdc:	4770      	bx	lr
 800afde:	4a03      	ldr	r2, [pc, #12]	@ (800afec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x18>)
 800afe0:	4801      	ldr	r0, [pc, #4]	@ (800afe8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	4770      	bx	lr
 800afe8:	20000054 	.word	0x20000054
 800afec:	200001fc 	.word	0x200001fc

0800aff0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800aff0:	4a02      	ldr	r2, [pc, #8]	@ (800affc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xc>)
 800aff2:	4b03      	ldr	r3, [pc, #12]	@ (800b000 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x10>)
 800aff4:	6812      	ldr	r2, [r2, #0]
 800aff6:	601a      	str	r2, [r3, #0]
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	200001fc 	.word	0x200001fc
 800b000:	20000054 	.word	0x20000054

0800b004 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__size_function__Int32MultiArray__data>:
 800b004:	6840      	ldr	r0, [r0, #4]
 800b006:	4770      	bx	lr

0800b008 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Int32MultiArray__data>:
 800b008:	6800      	ldr	r0, [r0, #0]
 800b00a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b00e:	4770      	bx	lr

0800b010 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Int32MultiArray__data>:
 800b010:	6803      	ldr	r3, [r0, #0]
 800b012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop

0800b01c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__assign_function__Int32MultiArray__data>:
 800b01c:	6803      	ldr	r3, [r0, #0]
 800b01e:	6812      	ldr	r2, [r2, #0]
 800b020:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop

0800b028 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_init_function>:
 800b028:	f7ff bf94 	b.w	800af54 <std_msgs__msg__Int32MultiArray__init>

0800b02c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_fini_function>:
 800b02c:	f7ff bfb2 	b.w	800af94 <std_msgs__msg__Int32MultiArray__fini>

0800b030 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__resize_function__Int32MultiArray__data>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4604      	mov	r4, r0
 800b034:	460d      	mov	r5, r1
 800b036:	f009 fe43 	bl	8014cc0 <rosidl_runtime_c__int32__Sequence__fini>
 800b03a:	4629      	mov	r1, r5
 800b03c:	4620      	mov	r0, r4
 800b03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b042:	f009 be23 	b.w	8014c8c <rosidl_runtime_c__int32__Sequence__init>
 800b046:	bf00      	nop

0800b048 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_function__Int32MultiArray__data>:
 800b048:	6800      	ldr	r0, [r0, #0]
 800b04a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b04e:	4770      	bx	lr

0800b050 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800b050:	b508      	push	{r3, lr}
 800b052:	f000 f855 	bl	800b100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b056:	4b06      	ldr	r3, [pc, #24]	@ (800b070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800b058:	4906      	ldr	r1, [pc, #24]	@ (800b074 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x24>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	60c8      	str	r0, [r1, #12]
 800b05e:	b10a      	cbz	r2, 800b064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>
 800b060:	4803      	ldr	r0, [pc, #12]	@ (800b070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800b062:	bd08      	pop	{r3, pc}
 800b064:	4a04      	ldr	r2, [pc, #16]	@ (800b078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x28>)
 800b066:	4802      	ldr	r0, [pc, #8]	@ (800b070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	bd08      	pop	{r3, pc}
 800b06e:	bf00      	nop
 800b070:	20000074 	.word	0x20000074
 800b074:	2000008c 	.word	0x2000008c
 800b078:	20000200 	.word	0x20000200

0800b07c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800b07c:	6840      	ldr	r0, [r0, #4]
 800b07e:	4770      	bx	lr

0800b080 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800b080:	6800      	ldr	r0, [r0, #0]
 800b082:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b086:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b08a:	4770      	bx	lr

0800b08c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800b08c:	6803      	ldr	r3, [r0, #0]
 800b08e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b092:	b500      	push	{lr}
 800b094:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800b098:	4694      	mov	ip, r2
 800b09a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b09e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0a2:	f8de 3000 	ldr.w	r3, [lr]
 800b0a6:	f8cc 3000 	str.w	r3, [ip]
 800b0aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0ae:	bf00      	nop

0800b0b0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800b0b0:	6803      	ldr	r3, [r0, #0]
 800b0b2:	b500      	push	{lr}
 800b0b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b0b8:	4696      	mov	lr, r2
 800b0ba:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800b0be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b0c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0c6:	f8de 3000 	ldr.w	r3, [lr]
 800b0ca:	f8cc 3000 	str.w	r3, [ip]
 800b0ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0d2:	bf00      	nop

0800b0d4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800b0d4:	f7ff bf6a 	b.w	800afac <std_msgs__msg__MultiArrayLayout__init>

0800b0d8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800b0d8:	f7ff bf78 	b.w	800afcc <std_msgs__msg__MultiArrayLayout__fini>

0800b0dc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4604      	mov	r4, r0
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	f009 ff13 	bl	8014f0c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ee:	f009 bec9 	b.w	8014e84 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800b0f2:	bf00      	nop

0800b0f4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800b0f4:	6800      	ldr	r0, [r0, #0]
 800b0f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b0fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b0fe:	4770      	bx	lr

0800b100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800b100:	b508      	push	{r3, lr}
 800b102:	f009 ff77 	bl	8014ff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b106:	4b06      	ldr	r3, [pc, #24]	@ (800b120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b108:	4906      	ldr	r1, [pc, #24]	@ (800b124 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	60c8      	str	r0, [r1, #12]
 800b10e:	b10a      	cbz	r2, 800b114 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800b110:	4803      	ldr	r0, [pc, #12]	@ (800b120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b112:	bd08      	pop	{r3, pc}
 800b114:	4a04      	ldr	r2, [pc, #16]	@ (800b128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800b116:	4802      	ldr	r0, [pc, #8]	@ (800b120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b118:	6812      	ldr	r2, [r2, #0]
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	bd08      	pop	{r3, pc}
 800b11e:	bf00      	nop
 800b120:	20000104 	.word	0x20000104
 800b124:	2000011c 	.word	0x2000011c
 800b128:	20000200 	.word	0x20000200

0800b12c <_Int32MultiArray__max_serialized_size>:
 800b12c:	b500      	push	{lr}
 800b12e:	b083      	sub	sp, #12
 800b130:	2301      	movs	r3, #1
 800b132:	2100      	movs	r1, #0
 800b134:	f10d 0007 	add.w	r0, sp, #7
 800b138:	f88d 3007 	strb.w	r3, [sp, #7]
 800b13c:	f000 f91c 	bl	800b378 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b140:	b003      	add	sp, #12
 800b142:	f85d fb04 	ldr.w	pc, [sp], #4
 800b146:	bf00      	nop

0800b148 <get_serialized_size_std_msgs__msg__Int32MultiArray>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	4604      	mov	r4, r0
 800b14c:	b160      	cbz	r0, 800b168 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>
 800b14e:	460d      	mov	r5, r1
 800b150:	f000 f8e4 	bl	800b31c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b154:	182e      	adds	r6, r5, r0
 800b156:	2104      	movs	r1, #4
 800b158:	4630      	mov	r0, r6
 800b15a:	6967      	ldr	r7, [r4, #20]
 800b15c:	f001 fa12 	bl	800c584 <ucdr_alignment>
 800b160:	1d04      	adds	r4, r0, #4
 800b162:	4434      	add	r4, r6
 800b164:	b90f      	cbnz	r7, 800b16a <get_serialized_size_std_msgs__msg__Int32MultiArray+0x22>
 800b166:	1b60      	subs	r0, r4, r5
 800b168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b16a:	4620      	mov	r0, r4
 800b16c:	2104      	movs	r1, #4
 800b16e:	f001 fa09 	bl	800c584 <ucdr_alignment>
 800b172:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800b176:	4404      	add	r4, r0
 800b178:	1b60      	subs	r0, r4, r5
 800b17a:	e7f5      	b.n	800b168 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>

0800b17c <_Int32MultiArray__cdr_deserialize>:
 800b17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b17e:	460c      	mov	r4, r1
 800b180:	b083      	sub	sp, #12
 800b182:	b1d1      	cbz	r1, 800b1ba <_Int32MultiArray__cdr_deserialize+0x3e>
 800b184:	4606      	mov	r6, r0
 800b186:	f000 f901 	bl	800b38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b18a:	6843      	ldr	r3, [r0, #4]
 800b18c:	4621      	mov	r1, r4
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	4630      	mov	r0, r6
 800b192:	4798      	blx	r3
 800b194:	69a7      	ldr	r7, [r4, #24]
 800b196:	6921      	ldr	r1, [r4, #16]
 800b198:	ab01      	add	r3, sp, #4
 800b19a:	463a      	mov	r2, r7
 800b19c:	4630      	mov	r0, r6
 800b19e:	f001 facb 	bl	800c738 <ucdr_deserialize_sequence_int32_t>
 800b1a2:	9b01      	ldr	r3, [sp, #4]
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	b920      	cbnz	r0, 800b1b2 <_Int32MultiArray__cdr_deserialize+0x36>
 800b1a8:	429f      	cmp	r7, r3
 800b1aa:	d30a      	bcc.n	800b1c2 <_Int32MultiArray__cdr_deserialize+0x46>
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	b003      	add	sp, #12
 800b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	6163      	str	r3, [r4, #20]
 800b1b6:	b003      	add	sp, #12
 800b1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	4628      	mov	r0, r5
 800b1be:	b003      	add	sp, #12
 800b1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	75b0      	strb	r0, [r6, #22]
 800b1c6:	7573      	strb	r3, [r6, #21]
 800b1c8:	2104      	movs	r1, #4
 800b1ca:	6160      	str	r0, [r4, #20]
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f001 f9ef 	bl	800c5b0 <ucdr_align_to>
 800b1d2:	9901      	ldr	r1, [sp, #4]
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	0089      	lsls	r1, r1, #2
 800b1d8:	f001 fa20 	bl	800c61c <ucdr_advance_buffer>
 800b1dc:	4628      	mov	r0, r5
 800b1de:	b003      	add	sp, #12
 800b1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e2:	bf00      	nop

0800b1e4 <_Int32MultiArray__cdr_serialize>:
 800b1e4:	b180      	cbz	r0, 800b208 <_Int32MultiArray__cdr_serialize+0x24>
 800b1e6:	b538      	push	{r3, r4, r5, lr}
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	f000 f8ce 	bl	800b38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b1f0:	6843      	ldr	r3, [r0, #4]
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	4798      	blx	r3
 800b1fa:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800b1fe:	4628      	mov	r0, r5
 800b200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b204:	f001 ba86 	b.w	800c714 <ucdr_serialize_sequence_int32_t>
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop

0800b20c <_Int32MultiArray__get_serialized_size>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4604      	mov	r4, r0
 800b210:	b150      	cbz	r0, 800b228 <_Int32MultiArray__get_serialized_size+0x1c>
 800b212:	2100      	movs	r1, #0
 800b214:	f000 f882 	bl	800b31c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b218:	2104      	movs	r1, #4
 800b21a:	6965      	ldr	r5, [r4, #20]
 800b21c:	4604      	mov	r4, r0
 800b21e:	f001 f9b1 	bl	800c584 <ucdr_alignment>
 800b222:	4404      	add	r4, r0
 800b224:	3404      	adds	r4, #4
 800b226:	b90d      	cbnz	r5, 800b22c <_Int32MultiArray__get_serialized_size+0x20>
 800b228:	4620      	mov	r0, r4
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	2104      	movs	r1, #4
 800b22e:	4620      	mov	r0, r4
 800b230:	f001 f9a8 	bl	800c584 <ucdr_alignment>
 800b234:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b238:	4404      	add	r4, r0
 800b23a:	4620      	mov	r0, r4
 800b23c:	bd38      	pop	{r3, r4, r5, pc}
 800b23e:	bf00      	nop

0800b240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800b240:	4800      	ldr	r0, [pc, #0]	@ (800b244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x4>)
 800b242:	4770      	bx	lr
 800b244:	20000194 	.word	0x20000194

0800b248 <_MultiArrayLayout__max_serialized_size>:
 800b248:	b508      	push	{r3, lr}
 800b24a:	2104      	movs	r1, #4
 800b24c:	2000      	movs	r0, #0
 800b24e:	f001 f999 	bl	800c584 <ucdr_alignment>
 800b252:	3004      	adds	r0, #4
 800b254:	bd08      	pop	{r3, pc}
 800b256:	bf00      	nop

0800b258 <_MultiArrayLayout__cdr_deserialize>:
 800b258:	b351      	cbz	r1, 800b2b0 <_MultiArrayLayout__cdr_deserialize+0x58>
 800b25a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b25c:	460e      	mov	r6, r1
 800b25e:	b083      	sub	sp, #12
 800b260:	a901      	add	r1, sp, #4
 800b262:	4607      	mov	r7, r0
 800b264:	f000 fc0a 	bl	800ba7c <ucdr_deserialize_uint32_t>
 800b268:	9b01      	ldr	r3, [sp, #4]
 800b26a:	68b2      	ldr	r2, [r6, #8]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d31c      	bcc.n	800b2aa <_MultiArrayLayout__cdr_deserialize+0x52>
 800b270:	6073      	str	r3, [r6, #4]
 800b272:	b193      	cbz	r3, 800b29a <_MultiArrayLayout__cdr_deserialize+0x42>
 800b274:	2400      	movs	r4, #0
 800b276:	4625      	mov	r5, r4
 800b278:	e005      	b.n	800b286 <_MultiArrayLayout__cdr_deserialize+0x2e>
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	3501      	adds	r5, #1
 800b27e:	42ab      	cmp	r3, r5
 800b280:	f104 0414 	add.w	r4, r4, #20
 800b284:	d909      	bls.n	800b29a <_MultiArrayLayout__cdr_deserialize+0x42>
 800b286:	f009 ff53 	bl	8015130 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b28a:	6831      	ldr	r1, [r6, #0]
 800b28c:	6843      	ldr	r3, [r0, #4]
 800b28e:	4421      	add	r1, r4
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	4638      	mov	r0, r7
 800b294:	4798      	blx	r3
 800b296:	2800      	cmp	r0, #0
 800b298:	d1ef      	bne.n	800b27a <_MultiArrayLayout__cdr_deserialize+0x22>
 800b29a:	f106 010c 	add.w	r1, r6, #12
 800b29e:	4638      	mov	r0, r7
 800b2a0:	b003      	add	sp, #12
 800b2a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b2a6:	f000 bbe9 	b.w	800ba7c <ucdr_deserialize_uint32_t>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	b003      	add	sp, #12
 800b2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	4770      	bx	lr

0800b2b4 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800b2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b8:	4689      	mov	r9, r1
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	2104      	movs	r1, #4
 800b2be:	4648      	mov	r0, r9
 800b2c0:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800b2c4:	f001 f95e 	bl	800c584 <ucdr_alignment>
 800b2c8:	f109 0304 	add.w	r3, r9, #4
 800b2cc:	18c6      	adds	r6, r0, r3
 800b2ce:	f1b8 0f00 	cmp.w	r8, #0
 800b2d2:	d019      	beq.n	800b308 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x54>
 800b2d4:	2500      	movs	r5, #0
 800b2d6:	f009 ff2b 	bl	8015130 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	6843      	ldr	r3, [r0, #4]
 800b2de:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b2ea:	4798      	blx	r3
 800b2ec:	2804      	cmp	r0, #4
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	bf28      	it	cs
 800b2f4:	2104      	movcs	r1, #4
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f001 f944 	bl	800c584 <ucdr_alignment>
 800b2fc:	3501      	adds	r5, #1
 800b2fe:	4434      	add	r4, r6
 800b300:	45a8      	cmp	r8, r5
 800b302:	eb00 0604 	add.w	r6, r0, r4
 800b306:	d1e6      	bne.n	800b2d6 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800b308:	2104      	movs	r1, #4
 800b30a:	4630      	mov	r0, r6
 800b30c:	f001 f93a 	bl	800c584 <ucdr_alignment>
 800b310:	f1c9 0904 	rsb	r9, r9, #4
 800b314:	44b1      	add	r9, r6
 800b316:	4448      	add	r0, r9
 800b318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b31c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800b31c:	b108      	cbz	r0, 800b322 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800b31e:	f7ff bfc9 	b.w	800b2b4 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800b322:	4770      	bx	lr

0800b324 <_MultiArrayLayout__get_serialized_size>:
 800b324:	b110      	cbz	r0, 800b32c <_MultiArrayLayout__get_serialized_size+0x8>
 800b326:	2100      	movs	r1, #0
 800b328:	f7ff bfc4 	b.w	800b2b4 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop

0800b330 <_MultiArrayLayout__cdr_serialize>:
 800b330:	b308      	cbz	r0, 800b376 <_MultiArrayLayout__cdr_serialize+0x46>
 800b332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b334:	6847      	ldr	r7, [r0, #4]
 800b336:	460e      	mov	r6, r1
 800b338:	4605      	mov	r5, r0
 800b33a:	4608      	mov	r0, r1
 800b33c:	4639      	mov	r1, r7
 800b33e:	f000 fa73 	bl	800b828 <ucdr_serialize_uint32_t>
 800b342:	b190      	cbz	r0, 800b36a <_MultiArrayLayout__cdr_serialize+0x3a>
 800b344:	b18f      	cbz	r7, 800b36a <_MultiArrayLayout__cdr_serialize+0x3a>
 800b346:	2400      	movs	r4, #0
 800b348:	e002      	b.n	800b350 <_MultiArrayLayout__cdr_serialize+0x20>
 800b34a:	3401      	adds	r4, #1
 800b34c:	42a7      	cmp	r7, r4
 800b34e:	d00c      	beq.n	800b36a <_MultiArrayLayout__cdr_serialize+0x3a>
 800b350:	f009 feee 	bl	8015130 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b354:	6841      	ldr	r1, [r0, #4]
 800b356:	6828      	ldr	r0, [r5, #0]
 800b358:	688a      	ldr	r2, [r1, #8]
 800b35a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800b35e:	4631      	mov	r1, r6
 800b360:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b364:	4790      	blx	r2
 800b366:	2800      	cmp	r0, #0
 800b368:	d1ef      	bne.n	800b34a <_MultiArrayLayout__cdr_serialize+0x1a>
 800b36a:	68e9      	ldr	r1, [r5, #12]
 800b36c:	4630      	mov	r0, r6
 800b36e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b372:	f000 ba59 	b.w	800b828 <ucdr_serialize_uint32_t>
 800b376:	4770      	bx	lr

0800b378 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800b378:	b508      	push	{r3, lr}
 800b37a:	4603      	mov	r3, r0
 800b37c:	2200      	movs	r2, #0
 800b37e:	4608      	mov	r0, r1
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	2104      	movs	r1, #4
 800b384:	f001 f8fe 	bl	800c584 <ucdr_alignment>
 800b388:	3004      	adds	r0, #4
 800b38a:	bd08      	pop	{r3, pc}

0800b38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800b38c:	4800      	ldr	r0, [pc, #0]	@ (800b390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800b38e:	4770      	bx	lr
 800b390:	200001c8 	.word	0x200001c8

0800b394 <ucdr_serialize_bool>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	460d      	mov	r5, r1
 800b398:	2101      	movs	r1, #1
 800b39a:	4604      	mov	r4, r0
 800b39c:	f001 f8a6 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b3a0:	b148      	cbz	r0, 800b3b6 <ucdr_serialize_bool+0x22>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	701d      	strb	r5, [r3, #0]
 800b3a6:	68a2      	ldr	r2, [r4, #8]
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	440a      	add	r2, r1
 800b3ae:	440b      	add	r3, r1
 800b3b0:	60a2      	str	r2, [r4, #8]
 800b3b2:	6123      	str	r3, [r4, #16]
 800b3b4:	7561      	strb	r1, [r4, #21]
 800b3b6:	7da0      	ldrb	r0, [r4, #22]
 800b3b8:	f080 0001 	eor.w	r0, r0, #1
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
 800b3be:	bf00      	nop

0800b3c0 <ucdr_deserialize_bool>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	f001 f890 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b3cc:	b160      	cbz	r0, 800b3e8 <ucdr_deserialize_bool+0x28>
 800b3ce:	68a2      	ldr	r2, [r4, #8]
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b3d6:	3900      	subs	r1, #0
 800b3d8:	bf18      	it	ne
 800b3da:	2101      	movne	r1, #1
 800b3dc:	7029      	strb	r1, [r5, #0]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	60a2      	str	r2, [r4, #8]
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	7561      	strb	r1, [r4, #21]
 800b3e8:	7da0      	ldrb	r0, [r4, #22]
 800b3ea:	f080 0001 	eor.w	r0, r0, #1
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}

0800b3f0 <ucdr_serialize_uint8_t>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	460d      	mov	r5, r1
 800b3f4:	2101      	movs	r1, #1
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	f001 f878 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b3fc:	b148      	cbz	r0, 800b412 <ucdr_serialize_uint8_t+0x22>
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	701d      	strb	r5, [r3, #0]
 800b402:	68a2      	ldr	r2, [r4, #8]
 800b404:	6923      	ldr	r3, [r4, #16]
 800b406:	2101      	movs	r1, #1
 800b408:	440a      	add	r2, r1
 800b40a:	440b      	add	r3, r1
 800b40c:	60a2      	str	r2, [r4, #8]
 800b40e:	6123      	str	r3, [r4, #16]
 800b410:	7561      	strb	r1, [r4, #21]
 800b412:	7da0      	ldrb	r0, [r4, #22]
 800b414:	f080 0001 	eor.w	r0, r0, #1
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	bf00      	nop

0800b41c <ucdr_deserialize_uint8_t>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	460d      	mov	r5, r1
 800b420:	2101      	movs	r1, #1
 800b422:	4604      	mov	r4, r0
 800b424:	f001 f862 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b428:	b150      	cbz	r0, 800b440 <ucdr_deserialize_uint8_t+0x24>
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	702b      	strb	r3, [r5, #0]
 800b430:	68a2      	ldr	r2, [r4, #8]
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	2101      	movs	r1, #1
 800b436:	440a      	add	r2, r1
 800b438:	440b      	add	r3, r1
 800b43a:	60a2      	str	r2, [r4, #8]
 800b43c:	6123      	str	r3, [r4, #16]
 800b43e:	7561      	strb	r1, [r4, #21]
 800b440:	7da0      	ldrb	r0, [r4, #22]
 800b442:	f080 0001 	eor.w	r0, r0, #1
 800b446:	bd38      	pop	{r3, r4, r5, pc}

0800b448 <ucdr_serialize_uint16_t>:
 800b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44c:	b082      	sub	sp, #8
 800b44e:	460b      	mov	r3, r1
 800b450:	2102      	movs	r1, #2
 800b452:	4604      	mov	r4, r0
 800b454:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b458:	f001 f89c 	bl	800c594 <ucdr_buffer_alignment>
 800b45c:	4601      	mov	r1, r0
 800b45e:	4620      	mov	r0, r4
 800b460:	7d67      	ldrb	r7, [r4, #21]
 800b462:	f001 f8db 	bl	800c61c <ucdr_advance_buffer>
 800b466:	2102      	movs	r1, #2
 800b468:	4620      	mov	r0, r4
 800b46a:	f001 f833 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800b46e:	b1c0      	cbz	r0, 800b4a2 <ucdr_serialize_uint16_t+0x5a>
 800b470:	7d22      	ldrb	r2, [r4, #20]
 800b472:	68a3      	ldr	r3, [r4, #8]
 800b474:	2a01      	cmp	r2, #1
 800b476:	d04e      	beq.n	800b516 <ucdr_serialize_uint16_t+0xce>
 800b478:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b484:	705a      	strb	r2, [r3, #1]
 800b486:	68a2      	ldr	r2, [r4, #8]
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	3202      	adds	r2, #2
 800b48c:	3302      	adds	r3, #2
 800b48e:	2102      	movs	r1, #2
 800b490:	60a2      	str	r2, [r4, #8]
 800b492:	6123      	str	r3, [r4, #16]
 800b494:	7561      	strb	r1, [r4, #21]
 800b496:	7da0      	ldrb	r0, [r4, #22]
 800b498:	f080 0001 	eor.w	r0, r0, #1
 800b49c:	b002      	add	sp, #8
 800b49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b4a6:	42ab      	cmp	r3, r5
 800b4a8:	d923      	bls.n	800b4f2 <ucdr_serialize_uint16_t+0xaa>
 800b4aa:	1b5e      	subs	r6, r3, r5
 800b4ac:	60a3      	str	r3, [r4, #8]
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	f1c6 0802 	rsb	r8, r6, #2
 800b4b4:	4433      	add	r3, r6
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	4641      	mov	r1, r8
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f001 f816 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b4c0:	b368      	cbz	r0, 800b51e <ucdr_serialize_uint16_t+0xd6>
 800b4c2:	7d23      	ldrb	r3, [r4, #20]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d03b      	beq.n	800b540 <ucdr_serialize_uint16_t+0xf8>
 800b4c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4cc:	702b      	strb	r3, [r5, #0]
 800b4ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4d2:	706b      	strb	r3, [r5, #1]
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	68a2      	ldr	r2, [r4, #8]
 800b4d8:	7da0      	ldrb	r0, [r4, #22]
 800b4da:	3302      	adds	r3, #2
 800b4dc:	4442      	add	r2, r8
 800b4de:	1b9b      	subs	r3, r3, r6
 800b4e0:	2102      	movs	r1, #2
 800b4e2:	f080 0001 	eor.w	r0, r0, #1
 800b4e6:	60a2      	str	r2, [r4, #8]
 800b4e8:	6123      	str	r3, [r4, #16]
 800b4ea:	7561      	strb	r1, [r4, #21]
 800b4ec:	b002      	add	sp, #8
 800b4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f2:	2102      	movs	r1, #2
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fff9 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d0cb      	beq.n	800b496 <ucdr_serialize_uint16_t+0x4e>
 800b4fe:	7d23      	ldrb	r3, [r4, #20]
 800b500:	68a2      	ldr	r2, [r4, #8]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d018      	beq.n	800b538 <ucdr_serialize_uint16_t+0xf0>
 800b506:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b50a:	7013      	strb	r3, [r2, #0]
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b512:	705a      	strb	r2, [r3, #1]
 800b514:	e7b7      	b.n	800b486 <ucdr_serialize_uint16_t+0x3e>
 800b516:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b51a:	801a      	strh	r2, [r3, #0]
 800b51c:	e7b3      	b.n	800b486 <ucdr_serialize_uint16_t+0x3e>
 800b51e:	68a2      	ldr	r2, [r4, #8]
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	7da0      	ldrb	r0, [r4, #22]
 800b524:	7567      	strb	r7, [r4, #21]
 800b526:	1b92      	subs	r2, r2, r6
 800b528:	1b9b      	subs	r3, r3, r6
 800b52a:	f080 0001 	eor.w	r0, r0, #1
 800b52e:	60a2      	str	r2, [r4, #8]
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	b002      	add	sp, #8
 800b534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b538:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b53c:	8013      	strh	r3, [r2, #0]
 800b53e:	e7a2      	b.n	800b486 <ucdr_serialize_uint16_t+0x3e>
 800b540:	4628      	mov	r0, r5
 800b542:	f10d 0506 	add.w	r5, sp, #6
 800b546:	4632      	mov	r2, r6
 800b548:	4629      	mov	r1, r5
 800b54a:	f00c fb42 	bl	8017bd2 <memcpy>
 800b54e:	68a0      	ldr	r0, [r4, #8]
 800b550:	4642      	mov	r2, r8
 800b552:	19a9      	adds	r1, r5, r6
 800b554:	f00c fb3d 	bl	8017bd2 <memcpy>
 800b558:	e7bc      	b.n	800b4d4 <ucdr_serialize_uint16_t+0x8c>
 800b55a:	bf00      	nop

0800b55c <ucdr_serialize_endian_uint16_t>:
 800b55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b560:	b083      	sub	sp, #12
 800b562:	460d      	mov	r5, r1
 800b564:	2102      	movs	r1, #2
 800b566:	4604      	mov	r4, r0
 800b568:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b56c:	f001 f812 	bl	800c594 <ucdr_buffer_alignment>
 800b570:	4601      	mov	r1, r0
 800b572:	4620      	mov	r0, r4
 800b574:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b578:	f001 f850 	bl	800c61c <ucdr_advance_buffer>
 800b57c:	2102      	movs	r1, #2
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 ffa8 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800b584:	bb60      	cbnz	r0, 800b5e0 <ucdr_serialize_endian_uint16_t+0x84>
 800b586:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b58a:	42be      	cmp	r6, r7
 800b58c:	d923      	bls.n	800b5d6 <ucdr_serialize_endian_uint16_t+0x7a>
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	60a6      	str	r6, [r4, #8]
 800b592:	1bf6      	subs	r6, r6, r7
 800b594:	4433      	add	r3, r6
 800b596:	f1c6 0902 	rsb	r9, r6, #2
 800b59a:	6123      	str	r3, [r4, #16]
 800b59c:	4649      	mov	r1, r9
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 ffa4 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d037      	beq.n	800b618 <ucdr_serialize_endian_uint16_t+0xbc>
 800b5a8:	2d01      	cmp	r5, #1
 800b5aa:	d043      	beq.n	800b634 <ucdr_serialize_endian_uint16_t+0xd8>
 800b5ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5b0:	703b      	strb	r3, [r7, #0]
 800b5b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5b6:	707b      	strb	r3, [r7, #1]
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	68a2      	ldr	r2, [r4, #8]
 800b5bc:	7da0      	ldrb	r0, [r4, #22]
 800b5be:	3302      	adds	r3, #2
 800b5c0:	444a      	add	r2, r9
 800b5c2:	1b9b      	subs	r3, r3, r6
 800b5c4:	2102      	movs	r1, #2
 800b5c6:	f080 0001 	eor.w	r0, r0, #1
 800b5ca:	60a2      	str	r2, [r4, #8]
 800b5cc:	6123      	str	r3, [r4, #16]
 800b5ce:	7561      	strb	r1, [r4, #21]
 800b5d0:	b003      	add	sp, #12
 800b5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5d6:	2102      	movs	r1, #2
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 ff87 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b5de:	b188      	cbz	r0, 800b604 <ucdr_serialize_endian_uint16_t+0xa8>
 800b5e0:	2d01      	cmp	r5, #1
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	d014      	beq.n	800b610 <ucdr_serialize_endian_uint16_t+0xb4>
 800b5e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5ea:	701a      	strb	r2, [r3, #0]
 800b5ec:	68a3      	ldr	r3, [r4, #8]
 800b5ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5f2:	705a      	strb	r2, [r3, #1]
 800b5f4:	68a2      	ldr	r2, [r4, #8]
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	3202      	adds	r2, #2
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	2102      	movs	r1, #2
 800b5fe:	60a2      	str	r2, [r4, #8]
 800b600:	6123      	str	r3, [r4, #16]
 800b602:	7561      	strb	r1, [r4, #21]
 800b604:	7da0      	ldrb	r0, [r4, #22]
 800b606:	f080 0001 	eor.w	r0, r0, #1
 800b60a:	b003      	add	sp, #12
 800b60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b610:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b614:	801a      	strh	r2, [r3, #0]
 800b616:	e7ed      	b.n	800b5f4 <ucdr_serialize_endian_uint16_t+0x98>
 800b618:	68a2      	ldr	r2, [r4, #8]
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	7da0      	ldrb	r0, [r4, #22]
 800b61e:	f884 8015 	strb.w	r8, [r4, #21]
 800b622:	1b92      	subs	r2, r2, r6
 800b624:	1b9b      	subs	r3, r3, r6
 800b626:	f080 0001 	eor.w	r0, r0, #1
 800b62a:	60a2      	str	r2, [r4, #8]
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	b003      	add	sp, #12
 800b630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b634:	f10d 0506 	add.w	r5, sp, #6
 800b638:	4632      	mov	r2, r6
 800b63a:	4629      	mov	r1, r5
 800b63c:	4638      	mov	r0, r7
 800b63e:	f00c fac8 	bl	8017bd2 <memcpy>
 800b642:	68a0      	ldr	r0, [r4, #8]
 800b644:	464a      	mov	r2, r9
 800b646:	19a9      	adds	r1, r5, r6
 800b648:	f00c fac3 	bl	8017bd2 <memcpy>
 800b64c:	e7b4      	b.n	800b5b8 <ucdr_serialize_endian_uint16_t+0x5c>
 800b64e:	bf00      	nop

0800b650 <ucdr_deserialize_uint16_t>:
 800b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b654:	460d      	mov	r5, r1
 800b656:	2102      	movs	r1, #2
 800b658:	4604      	mov	r4, r0
 800b65a:	f000 ff9b 	bl	800c594 <ucdr_buffer_alignment>
 800b65e:	4601      	mov	r1, r0
 800b660:	4620      	mov	r0, r4
 800b662:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b666:	f000 ffd9 	bl	800c61c <ucdr_advance_buffer>
 800b66a:	2102      	movs	r1, #2
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 ff31 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800b672:	b1a8      	cbz	r0, 800b6a0 <ucdr_deserialize_uint16_t+0x50>
 800b674:	7d22      	ldrb	r2, [r4, #20]
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	2a01      	cmp	r2, #1
 800b67a:	d046      	beq.n	800b70a <ucdr_deserialize_uint16_t+0xba>
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	702b      	strb	r3, [r5, #0]
 800b680:	68a3      	ldr	r3, [r4, #8]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	706b      	strb	r3, [r5, #1]
 800b686:	68a2      	ldr	r2, [r4, #8]
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	3202      	adds	r2, #2
 800b68c:	3302      	adds	r3, #2
 800b68e:	2102      	movs	r1, #2
 800b690:	60a2      	str	r2, [r4, #8]
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	7561      	strb	r1, [r4, #21]
 800b696:	7da0      	ldrb	r0, [r4, #22]
 800b698:	f080 0001 	eor.w	r0, r0, #1
 800b69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b6a4:	42be      	cmp	r6, r7
 800b6a6:	d920      	bls.n	800b6ea <ucdr_deserialize_uint16_t+0x9a>
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	60a6      	str	r6, [r4, #8]
 800b6ac:	1bf6      	subs	r6, r6, r7
 800b6ae:	4433      	add	r3, r6
 800b6b0:	f1c6 0902 	rsb	r9, r6, #2
 800b6b4:	6123      	str	r3, [r4, #16]
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 ff17 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b6be:	b338      	cbz	r0, 800b710 <ucdr_deserialize_uint16_t+0xc0>
 800b6c0:	7d23      	ldrb	r3, [r4, #20]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d034      	beq.n	800b730 <ucdr_deserialize_uint16_t+0xe0>
 800b6c6:	787b      	ldrb	r3, [r7, #1]
 800b6c8:	702b      	strb	r3, [r5, #0]
 800b6ca:	783b      	ldrb	r3, [r7, #0]
 800b6cc:	706b      	strb	r3, [r5, #1]
 800b6ce:	6923      	ldr	r3, [r4, #16]
 800b6d0:	68a2      	ldr	r2, [r4, #8]
 800b6d2:	7da0      	ldrb	r0, [r4, #22]
 800b6d4:	2102      	movs	r1, #2
 800b6d6:	3302      	adds	r3, #2
 800b6d8:	444a      	add	r2, r9
 800b6da:	1b9b      	subs	r3, r3, r6
 800b6dc:	7561      	strb	r1, [r4, #21]
 800b6de:	60a2      	str	r2, [r4, #8]
 800b6e0:	6123      	str	r3, [r4, #16]
 800b6e2:	f080 0001 	eor.w	r0, r0, #1
 800b6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ea:	2102      	movs	r1, #2
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fefd 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d0cf      	beq.n	800b696 <ucdr_deserialize_uint16_t+0x46>
 800b6f6:	7d23      	ldrb	r3, [r4, #20]
 800b6f8:	68a2      	ldr	r2, [r4, #8]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d015      	beq.n	800b72a <ucdr_deserialize_uint16_t+0xda>
 800b6fe:	7853      	ldrb	r3, [r2, #1]
 800b700:	702b      	strb	r3, [r5, #0]
 800b702:	68a3      	ldr	r3, [r4, #8]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	706b      	strb	r3, [r5, #1]
 800b708:	e7bd      	b.n	800b686 <ucdr_deserialize_uint16_t+0x36>
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	802b      	strh	r3, [r5, #0]
 800b70e:	e7ba      	b.n	800b686 <ucdr_deserialize_uint16_t+0x36>
 800b710:	68a2      	ldr	r2, [r4, #8]
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	7da0      	ldrb	r0, [r4, #22]
 800b716:	f884 8015 	strb.w	r8, [r4, #21]
 800b71a:	1b92      	subs	r2, r2, r6
 800b71c:	1b9b      	subs	r3, r3, r6
 800b71e:	60a2      	str	r2, [r4, #8]
 800b720:	6123      	str	r3, [r4, #16]
 800b722:	f080 0001 	eor.w	r0, r0, #1
 800b726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b72a:	8813      	ldrh	r3, [r2, #0]
 800b72c:	802b      	strh	r3, [r5, #0]
 800b72e:	e7aa      	b.n	800b686 <ucdr_deserialize_uint16_t+0x36>
 800b730:	4639      	mov	r1, r7
 800b732:	4632      	mov	r2, r6
 800b734:	4628      	mov	r0, r5
 800b736:	f00c fa4c 	bl	8017bd2 <memcpy>
 800b73a:	68a1      	ldr	r1, [r4, #8]
 800b73c:	464a      	mov	r2, r9
 800b73e:	19a8      	adds	r0, r5, r6
 800b740:	f00c fa47 	bl	8017bd2 <memcpy>
 800b744:	e7c3      	b.n	800b6ce <ucdr_deserialize_uint16_t+0x7e>
 800b746:	bf00      	nop

0800b748 <ucdr_deserialize_endian_uint16_t>:
 800b748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b74c:	460e      	mov	r6, r1
 800b74e:	2102      	movs	r1, #2
 800b750:	4604      	mov	r4, r0
 800b752:	4615      	mov	r5, r2
 800b754:	f000 ff1e 	bl	800c594 <ucdr_buffer_alignment>
 800b758:	4601      	mov	r1, r0
 800b75a:	4620      	mov	r0, r4
 800b75c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b760:	f000 ff5c 	bl	800c61c <ucdr_advance_buffer>
 800b764:	2102      	movs	r1, #2
 800b766:	4620      	mov	r0, r4
 800b768:	f000 feb4 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800b76c:	bb60      	cbnz	r0, 800b7c8 <ucdr_deserialize_endian_uint16_t+0x80>
 800b76e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b772:	4547      	cmp	r7, r8
 800b774:	d923      	bls.n	800b7be <ucdr_deserialize_endian_uint16_t+0x76>
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	60a7      	str	r7, [r4, #8]
 800b77a:	eba7 0708 	sub.w	r7, r7, r8
 800b77e:	443b      	add	r3, r7
 800b780:	f1c7 0a02 	rsb	sl, r7, #2
 800b784:	6123      	str	r3, [r4, #16]
 800b786:	4651      	mov	r1, sl
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 feaf 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d032      	beq.n	800b7f8 <ucdr_deserialize_endian_uint16_t+0xb0>
 800b792:	2e01      	cmp	r6, #1
 800b794:	d03d      	beq.n	800b812 <ucdr_deserialize_endian_uint16_t+0xca>
 800b796:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b79a:	702b      	strb	r3, [r5, #0]
 800b79c:	f898 3000 	ldrb.w	r3, [r8]
 800b7a0:	706b      	strb	r3, [r5, #1]
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	68a2      	ldr	r2, [r4, #8]
 800b7a6:	7da0      	ldrb	r0, [r4, #22]
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	3302      	adds	r3, #2
 800b7ac:	4452      	add	r2, sl
 800b7ae:	1bdb      	subs	r3, r3, r7
 800b7b0:	7561      	strb	r1, [r4, #21]
 800b7b2:	60a2      	str	r2, [r4, #8]
 800b7b4:	6123      	str	r3, [r4, #16]
 800b7b6:	f080 0001 	eor.w	r0, r0, #1
 800b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7be:	2102      	movs	r1, #2
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 fe93 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b7c6:	b178      	cbz	r0, 800b7e8 <ucdr_deserialize_endian_uint16_t+0xa0>
 800b7c8:	2e01      	cmp	r6, #1
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	d011      	beq.n	800b7f2 <ucdr_deserialize_endian_uint16_t+0xaa>
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	702b      	strb	r3, [r5, #0]
 800b7d2:	68a3      	ldr	r3, [r4, #8]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	706b      	strb	r3, [r5, #1]
 800b7d8:	68a2      	ldr	r2, [r4, #8]
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	3202      	adds	r2, #2
 800b7de:	3302      	adds	r3, #2
 800b7e0:	2102      	movs	r1, #2
 800b7e2:	60a2      	str	r2, [r4, #8]
 800b7e4:	6123      	str	r3, [r4, #16]
 800b7e6:	7561      	strb	r1, [r4, #21]
 800b7e8:	7da0      	ldrb	r0, [r4, #22]
 800b7ea:	f080 0001 	eor.w	r0, r0, #1
 800b7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	802b      	strh	r3, [r5, #0]
 800b7f6:	e7ef      	b.n	800b7d8 <ucdr_deserialize_endian_uint16_t+0x90>
 800b7f8:	68a2      	ldr	r2, [r4, #8]
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	7da0      	ldrb	r0, [r4, #22]
 800b7fe:	f884 9015 	strb.w	r9, [r4, #21]
 800b802:	1bd2      	subs	r2, r2, r7
 800b804:	1bdb      	subs	r3, r3, r7
 800b806:	60a2      	str	r2, [r4, #8]
 800b808:	6123      	str	r3, [r4, #16]
 800b80a:	f080 0001 	eor.w	r0, r0, #1
 800b80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b812:	4641      	mov	r1, r8
 800b814:	463a      	mov	r2, r7
 800b816:	4628      	mov	r0, r5
 800b818:	f00c f9db 	bl	8017bd2 <memcpy>
 800b81c:	68a1      	ldr	r1, [r4, #8]
 800b81e:	4652      	mov	r2, sl
 800b820:	19e8      	adds	r0, r5, r7
 800b822:	f00c f9d6 	bl	8017bd2 <memcpy>
 800b826:	e7bc      	b.n	800b7a2 <ucdr_deserialize_endian_uint16_t+0x5a>

0800b828 <ucdr_serialize_uint32_t>:
 800b828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	4604      	mov	r4, r0
 800b830:	9101      	str	r1, [sp, #4]
 800b832:	2104      	movs	r1, #4
 800b834:	f000 feae 	bl	800c594 <ucdr_buffer_alignment>
 800b838:	4601      	mov	r1, r0
 800b83a:	4620      	mov	r0, r4
 800b83c:	7d67      	ldrb	r7, [r4, #21]
 800b83e:	f000 feed 	bl	800c61c <ucdr_advance_buffer>
 800b842:	2104      	movs	r1, #4
 800b844:	4620      	mov	r0, r4
 800b846:	f000 fe45 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800b84a:	b300      	cbz	r0, 800b88e <ucdr_serialize_uint32_t+0x66>
 800b84c:	7d22      	ldrb	r2, [r4, #20]
 800b84e:	68a3      	ldr	r3, [r4, #8]
 800b850:	2a01      	cmp	r2, #1
 800b852:	d05d      	beq.n	800b910 <ucdr_serialize_uint32_t+0xe8>
 800b854:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b858:	701a      	strb	r2, [r3, #0]
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b860:	705a      	strb	r2, [r3, #1]
 800b862:	68a3      	ldr	r3, [r4, #8]
 800b864:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b868:	709a      	strb	r2, [r3, #2]
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b870:	70da      	strb	r2, [r3, #3]
 800b872:	68a2      	ldr	r2, [r4, #8]
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	3204      	adds	r2, #4
 800b878:	3304      	adds	r3, #4
 800b87a:	2104      	movs	r1, #4
 800b87c:	60a2      	str	r2, [r4, #8]
 800b87e:	6123      	str	r3, [r4, #16]
 800b880:	7561      	strb	r1, [r4, #21]
 800b882:	7da0      	ldrb	r0, [r4, #22]
 800b884:	f080 0001 	eor.w	r0, r0, #1
 800b888:	b002      	add	sp, #8
 800b88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b892:	42ab      	cmp	r3, r5
 800b894:	d92e      	bls.n	800b8f4 <ucdr_serialize_uint32_t+0xcc>
 800b896:	1b5e      	subs	r6, r3, r5
 800b898:	60a3      	str	r3, [r4, #8]
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	f1c6 0804 	rsb	r8, r6, #4
 800b8a0:	4433      	add	r3, r6
 800b8a2:	6123      	str	r3, [r4, #16]
 800b8a4:	4641      	mov	r1, r8
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 fe20 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b8ac:	b398      	cbz	r0, 800b916 <ucdr_serialize_uint32_t+0xee>
 800b8ae:	7d23      	ldrb	r3, [r4, #20]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d046      	beq.n	800b942 <ucdr_serialize_uint32_t+0x11a>
 800b8b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b8b8:	702b      	strb	r3, [r5, #0]
 800b8ba:	2e01      	cmp	r6, #1
 800b8bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b8c0:	706b      	strb	r3, [r5, #1]
 800b8c2:	d035      	beq.n	800b930 <ucdr_serialize_uint32_t+0x108>
 800b8c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b8c8:	70ab      	strb	r3, [r5, #2]
 800b8ca:	2e02      	cmp	r6, #2
 800b8cc:	d034      	beq.n	800b938 <ucdr_serialize_uint32_t+0x110>
 800b8ce:	3503      	adds	r5, #3
 800b8d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b8d4:	702b      	strb	r3, [r5, #0]
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	68a2      	ldr	r2, [r4, #8]
 800b8da:	7da0      	ldrb	r0, [r4, #22]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4442      	add	r2, r8
 800b8e0:	1b9b      	subs	r3, r3, r6
 800b8e2:	2104      	movs	r1, #4
 800b8e4:	f080 0001 	eor.w	r0, r0, #1
 800b8e8:	60a2      	str	r2, [r4, #8]
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	7561      	strb	r1, [r4, #21]
 800b8ee:	b002      	add	sp, #8
 800b8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f4:	2104      	movs	r1, #4
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fdf8 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d0c0      	beq.n	800b882 <ucdr_serialize_uint32_t+0x5a>
 800b900:	7d23      	ldrb	r3, [r4, #20]
 800b902:	68a2      	ldr	r2, [r4, #8]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d019      	beq.n	800b93c <ucdr_serialize_uint32_t+0x114>
 800b908:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b90c:	7013      	strb	r3, [r2, #0]
 800b90e:	e7a4      	b.n	800b85a <ucdr_serialize_uint32_t+0x32>
 800b910:	9a01      	ldr	r2, [sp, #4]
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	e7ad      	b.n	800b872 <ucdr_serialize_uint32_t+0x4a>
 800b916:	68a2      	ldr	r2, [r4, #8]
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	7da0      	ldrb	r0, [r4, #22]
 800b91c:	7567      	strb	r7, [r4, #21]
 800b91e:	1b92      	subs	r2, r2, r6
 800b920:	1b9b      	subs	r3, r3, r6
 800b922:	f080 0001 	eor.w	r0, r0, #1
 800b926:	60a2      	str	r2, [r4, #8]
 800b928:	6123      	str	r3, [r4, #16]
 800b92a:	b002      	add	sp, #8
 800b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b936:	701a      	strb	r2, [r3, #0]
 800b938:	68a5      	ldr	r5, [r4, #8]
 800b93a:	e7c9      	b.n	800b8d0 <ucdr_serialize_uint32_t+0xa8>
 800b93c:	9b01      	ldr	r3, [sp, #4]
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	e797      	b.n	800b872 <ucdr_serialize_uint32_t+0x4a>
 800b942:	4628      	mov	r0, r5
 800b944:	ad01      	add	r5, sp, #4
 800b946:	4632      	mov	r2, r6
 800b948:	4629      	mov	r1, r5
 800b94a:	f00c f942 	bl	8017bd2 <memcpy>
 800b94e:	68a0      	ldr	r0, [r4, #8]
 800b950:	4642      	mov	r2, r8
 800b952:	19a9      	adds	r1, r5, r6
 800b954:	f00c f93d 	bl	8017bd2 <memcpy>
 800b958:	e7bd      	b.n	800b8d6 <ucdr_serialize_uint32_t+0xae>
 800b95a:	bf00      	nop

0800b95c <ucdr_serialize_endian_uint32_t>:
 800b95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b960:	b083      	sub	sp, #12
 800b962:	460d      	mov	r5, r1
 800b964:	2104      	movs	r1, #4
 800b966:	4604      	mov	r4, r0
 800b968:	9201      	str	r2, [sp, #4]
 800b96a:	f000 fe13 	bl	800c594 <ucdr_buffer_alignment>
 800b96e:	4601      	mov	r1, r0
 800b970:	4620      	mov	r0, r4
 800b972:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b976:	f000 fe51 	bl	800c61c <ucdr_advance_buffer>
 800b97a:	2104      	movs	r1, #4
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fda9 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800b982:	2800      	cmp	r0, #0
 800b984:	d137      	bne.n	800b9f6 <ucdr_serialize_endian_uint32_t+0x9a>
 800b986:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b98a:	42b7      	cmp	r7, r6
 800b98c:	d92e      	bls.n	800b9ec <ucdr_serialize_endian_uint32_t+0x90>
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	60a7      	str	r7, [r4, #8]
 800b992:	1bbf      	subs	r7, r7, r6
 800b994:	443b      	add	r3, r7
 800b996:	f1c7 0904 	rsb	r9, r7, #4
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	4649      	mov	r1, r9
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fda4 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d049      	beq.n	800ba3c <ucdr_serialize_endian_uint32_t+0xe0>
 800b9a8:	2d01      	cmp	r5, #1
 800b9aa:	d05b      	beq.n	800ba64 <ucdr_serialize_endian_uint32_t+0x108>
 800b9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9b0:	7033      	strb	r3, [r6, #0]
 800b9b2:	2f01      	cmp	r7, #1
 800b9b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9b8:	7073      	strb	r3, [r6, #1]
 800b9ba:	d04d      	beq.n	800ba58 <ucdr_serialize_endian_uint32_t+0xfc>
 800b9bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b9c0:	70b3      	strb	r3, [r6, #2]
 800b9c2:	2f02      	cmp	r7, #2
 800b9c4:	d04c      	beq.n	800ba60 <ucdr_serialize_endian_uint32_t+0x104>
 800b9c6:	3603      	adds	r6, #3
 800b9c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9cc:	7033      	strb	r3, [r6, #0]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	68a2      	ldr	r2, [r4, #8]
 800b9d2:	7da0      	ldrb	r0, [r4, #22]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	444a      	add	r2, r9
 800b9d8:	1bdb      	subs	r3, r3, r7
 800b9da:	2104      	movs	r1, #4
 800b9dc:	f080 0001 	eor.w	r0, r0, #1
 800b9e0:	60a2      	str	r2, [r4, #8]
 800b9e2:	6123      	str	r3, [r4, #16]
 800b9e4:	7561      	strb	r1, [r4, #21]
 800b9e6:	b003      	add	sp, #12
 800b9e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9ec:	2104      	movs	r1, #4
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 fd7c 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800b9f4:	b1c8      	cbz	r0, 800ba2a <ucdr_serialize_endian_uint32_t+0xce>
 800b9f6:	2d01      	cmp	r5, #1
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	d01c      	beq.n	800ba36 <ucdr_serialize_endian_uint32_t+0xda>
 800b9fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba00:	701a      	strb	r2, [r3, #0]
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba08:	705a      	strb	r2, [r3, #1]
 800ba0a:	68a3      	ldr	r3, [r4, #8]
 800ba0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba10:	709a      	strb	r2, [r3, #2]
 800ba12:	68a3      	ldr	r3, [r4, #8]
 800ba14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba18:	70da      	strb	r2, [r3, #3]
 800ba1a:	68a2      	ldr	r2, [r4, #8]
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	3204      	adds	r2, #4
 800ba20:	3304      	adds	r3, #4
 800ba22:	2104      	movs	r1, #4
 800ba24:	60a2      	str	r2, [r4, #8]
 800ba26:	6123      	str	r3, [r4, #16]
 800ba28:	7561      	strb	r1, [r4, #21]
 800ba2a:	7da0      	ldrb	r0, [r4, #22]
 800ba2c:	f080 0001 	eor.w	r0, r0, #1
 800ba30:	b003      	add	sp, #12
 800ba32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba36:	9a01      	ldr	r2, [sp, #4]
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	e7ee      	b.n	800ba1a <ucdr_serialize_endian_uint32_t+0xbe>
 800ba3c:	68a2      	ldr	r2, [r4, #8]
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	7da0      	ldrb	r0, [r4, #22]
 800ba42:	f884 8015 	strb.w	r8, [r4, #21]
 800ba46:	1bd2      	subs	r2, r2, r7
 800ba48:	1bdb      	subs	r3, r3, r7
 800ba4a:	f080 0001 	eor.w	r0, r0, #1
 800ba4e:	60a2      	str	r2, [r4, #8]
 800ba50:	6123      	str	r3, [r4, #16]
 800ba52:	b003      	add	sp, #12
 800ba54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba58:	68a3      	ldr	r3, [r4, #8]
 800ba5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba5e:	701a      	strb	r2, [r3, #0]
 800ba60:	68a6      	ldr	r6, [r4, #8]
 800ba62:	e7b1      	b.n	800b9c8 <ucdr_serialize_endian_uint32_t+0x6c>
 800ba64:	ad01      	add	r5, sp, #4
 800ba66:	463a      	mov	r2, r7
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f00c f8b1 	bl	8017bd2 <memcpy>
 800ba70:	68a0      	ldr	r0, [r4, #8]
 800ba72:	464a      	mov	r2, r9
 800ba74:	19e9      	adds	r1, r5, r7
 800ba76:	f00c f8ac 	bl	8017bd2 <memcpy>
 800ba7a:	e7a8      	b.n	800b9ce <ucdr_serialize_endian_uint32_t+0x72>

0800ba7c <ucdr_deserialize_uint32_t>:
 800ba7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba80:	460d      	mov	r5, r1
 800ba82:	2104      	movs	r1, #4
 800ba84:	4604      	mov	r4, r0
 800ba86:	f000 fd85 	bl	800c594 <ucdr_buffer_alignment>
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba92:	f000 fdc3 	bl	800c61c <ucdr_advance_buffer>
 800ba96:	2104      	movs	r1, #4
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fd1b 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800ba9e:	b1d8      	cbz	r0, 800bad8 <ucdr_deserialize_uint32_t+0x5c>
 800baa0:	7d22      	ldrb	r2, [r4, #20]
 800baa2:	68a3      	ldr	r3, [r4, #8]
 800baa4:	2a01      	cmp	r2, #1
 800baa6:	d052      	beq.n	800bb4e <ucdr_deserialize_uint32_t+0xd2>
 800baa8:	78db      	ldrb	r3, [r3, #3]
 800baaa:	702b      	strb	r3, [r5, #0]
 800baac:	68a3      	ldr	r3, [r4, #8]
 800baae:	789b      	ldrb	r3, [r3, #2]
 800bab0:	706b      	strb	r3, [r5, #1]
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	70ab      	strb	r3, [r5, #2]
 800bab8:	68a3      	ldr	r3, [r4, #8]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	70eb      	strb	r3, [r5, #3]
 800babe:	68a2      	ldr	r2, [r4, #8]
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	3204      	adds	r2, #4
 800bac4:	3304      	adds	r3, #4
 800bac6:	2104      	movs	r1, #4
 800bac8:	60a2      	str	r2, [r4, #8]
 800baca:	6123      	str	r3, [r4, #16]
 800bacc:	7561      	strb	r1, [r4, #21]
 800bace:	7da0      	ldrb	r0, [r4, #22]
 800bad0:	f080 0001 	eor.w	r0, r0, #1
 800bad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800badc:	42b7      	cmp	r7, r6
 800bade:	d92a      	bls.n	800bb36 <ucdr_deserialize_uint32_t+0xba>
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	60a7      	str	r7, [r4, #8]
 800bae4:	1bbf      	subs	r7, r7, r6
 800bae6:	443b      	add	r3, r7
 800bae8:	f1c7 0904 	rsb	r9, r7, #4
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	4649      	mov	r1, r9
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fcfb 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800baf6:	b368      	cbz	r0, 800bb54 <ucdr_deserialize_uint32_t+0xd8>
 800baf8:	7d23      	ldrb	r3, [r4, #20]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d040      	beq.n	800bb80 <ucdr_deserialize_uint32_t+0x104>
 800bafe:	78f3      	ldrb	r3, [r6, #3]
 800bb00:	702b      	strb	r3, [r5, #0]
 800bb02:	78b3      	ldrb	r3, [r6, #2]
 800bb04:	706b      	strb	r3, [r5, #1]
 800bb06:	2f01      	cmp	r7, #1
 800bb08:	d031      	beq.n	800bb6e <ucdr_deserialize_uint32_t+0xf2>
 800bb0a:	7873      	ldrb	r3, [r6, #1]
 800bb0c:	70ab      	strb	r3, [r5, #2]
 800bb0e:	2f02      	cmp	r7, #2
 800bb10:	f105 0503 	add.w	r5, r5, #3
 800bb14:	d02f      	beq.n	800bb76 <ucdr_deserialize_uint32_t+0xfa>
 800bb16:	7833      	ldrb	r3, [r6, #0]
 800bb18:	702b      	strb	r3, [r5, #0]
 800bb1a:	6923      	ldr	r3, [r4, #16]
 800bb1c:	68a2      	ldr	r2, [r4, #8]
 800bb1e:	7da0      	ldrb	r0, [r4, #22]
 800bb20:	2104      	movs	r1, #4
 800bb22:	3304      	adds	r3, #4
 800bb24:	444a      	add	r2, r9
 800bb26:	1bdb      	subs	r3, r3, r7
 800bb28:	7561      	strb	r1, [r4, #21]
 800bb2a:	60a2      	str	r2, [r4, #8]
 800bb2c:	6123      	str	r3, [r4, #16]
 800bb2e:	f080 0001 	eor.w	r0, r0, #1
 800bb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb36:	2104      	movs	r1, #4
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fcd7 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d0c5      	beq.n	800bace <ucdr_deserialize_uint32_t+0x52>
 800bb42:	7d23      	ldrb	r3, [r4, #20]
 800bb44:	68a2      	ldr	r2, [r4, #8]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d017      	beq.n	800bb7a <ucdr_deserialize_uint32_t+0xfe>
 800bb4a:	78d3      	ldrb	r3, [r2, #3]
 800bb4c:	e7ad      	b.n	800baaa <ucdr_deserialize_uint32_t+0x2e>
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	602b      	str	r3, [r5, #0]
 800bb52:	e7b4      	b.n	800babe <ucdr_deserialize_uint32_t+0x42>
 800bb54:	68a2      	ldr	r2, [r4, #8]
 800bb56:	6923      	ldr	r3, [r4, #16]
 800bb58:	7da0      	ldrb	r0, [r4, #22]
 800bb5a:	f884 8015 	strb.w	r8, [r4, #21]
 800bb5e:	1bd2      	subs	r2, r2, r7
 800bb60:	1bdb      	subs	r3, r3, r7
 800bb62:	60a2      	str	r2, [r4, #8]
 800bb64:	6123      	str	r3, [r4, #16]
 800bb66:	f080 0001 	eor.w	r0, r0, #1
 800bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	785b      	ldrb	r3, [r3, #1]
 800bb72:	70ab      	strb	r3, [r5, #2]
 800bb74:	3503      	adds	r5, #3
 800bb76:	68a6      	ldr	r6, [r4, #8]
 800bb78:	e7cd      	b.n	800bb16 <ucdr_deserialize_uint32_t+0x9a>
 800bb7a:	6813      	ldr	r3, [r2, #0]
 800bb7c:	602b      	str	r3, [r5, #0]
 800bb7e:	e79e      	b.n	800babe <ucdr_deserialize_uint32_t+0x42>
 800bb80:	4631      	mov	r1, r6
 800bb82:	463a      	mov	r2, r7
 800bb84:	4628      	mov	r0, r5
 800bb86:	f00c f824 	bl	8017bd2 <memcpy>
 800bb8a:	68a1      	ldr	r1, [r4, #8]
 800bb8c:	464a      	mov	r2, r9
 800bb8e:	19e8      	adds	r0, r5, r7
 800bb90:	f00c f81f 	bl	8017bd2 <memcpy>
 800bb94:	e7c1      	b.n	800bb1a <ucdr_deserialize_uint32_t+0x9e>
 800bb96:	bf00      	nop

0800bb98 <ucdr_deserialize_endian_uint32_t>:
 800bb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9c:	460e      	mov	r6, r1
 800bb9e:	2104      	movs	r1, #4
 800bba0:	4604      	mov	r4, r0
 800bba2:	4615      	mov	r5, r2
 800bba4:	f000 fcf6 	bl	800c594 <ucdr_buffer_alignment>
 800bba8:	4601      	mov	r1, r0
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bbb0:	f000 fd34 	bl	800c61c <ucdr_advance_buffer>
 800bbb4:	2104      	movs	r1, #4
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 fc8c 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d137      	bne.n	800bc30 <ucdr_deserialize_endian_uint32_t+0x98>
 800bbc0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bbc4:	42bb      	cmp	r3, r7
 800bbc6:	d92e      	bls.n	800bc26 <ucdr_deserialize_endian_uint32_t+0x8e>
 800bbc8:	eba3 0807 	sub.w	r8, r3, r7
 800bbcc:	60a3      	str	r3, [r4, #8]
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	f1c8 0a04 	rsb	sl, r8, #4
 800bbd4:	4443      	add	r3, r8
 800bbd6:	6123      	str	r3, [r4, #16]
 800bbd8:	4651      	mov	r1, sl
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 fc86 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d043      	beq.n	800bc6c <ucdr_deserialize_endian_uint32_t+0xd4>
 800bbe4:	2e01      	cmp	r6, #1
 800bbe6:	d056      	beq.n	800bc96 <ucdr_deserialize_endian_uint32_t+0xfe>
 800bbe8:	78fb      	ldrb	r3, [r7, #3]
 800bbea:	702b      	strb	r3, [r5, #0]
 800bbec:	78bb      	ldrb	r3, [r7, #2]
 800bbee:	706b      	strb	r3, [r5, #1]
 800bbf0:	f1b8 0f01 	cmp.w	r8, #1
 800bbf4:	d049      	beq.n	800bc8a <ucdr_deserialize_endian_uint32_t+0xf2>
 800bbf6:	787b      	ldrb	r3, [r7, #1]
 800bbf8:	70ab      	strb	r3, [r5, #2]
 800bbfa:	f1b8 0f02 	cmp.w	r8, #2
 800bbfe:	f105 0503 	add.w	r5, r5, #3
 800bc02:	d046      	beq.n	800bc92 <ucdr_deserialize_endian_uint32_t+0xfa>
 800bc04:	783b      	ldrb	r3, [r7, #0]
 800bc06:	702b      	strb	r3, [r5, #0]
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	68a2      	ldr	r2, [r4, #8]
 800bc0c:	7da0      	ldrb	r0, [r4, #22]
 800bc0e:	2104      	movs	r1, #4
 800bc10:	3304      	adds	r3, #4
 800bc12:	4452      	add	r2, sl
 800bc14:	eba3 0308 	sub.w	r3, r3, r8
 800bc18:	7561      	strb	r1, [r4, #21]
 800bc1a:	60a2      	str	r2, [r4, #8]
 800bc1c:	6123      	str	r3, [r4, #16]
 800bc1e:	f080 0001 	eor.w	r0, r0, #1
 800bc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc26:	2104      	movs	r1, #4
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 fc5f 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bc2e:	b1a8      	cbz	r0, 800bc5c <ucdr_deserialize_endian_uint32_t+0xc4>
 800bc30:	2e01      	cmp	r6, #1
 800bc32:	68a3      	ldr	r3, [r4, #8]
 800bc34:	d017      	beq.n	800bc66 <ucdr_deserialize_endian_uint32_t+0xce>
 800bc36:	78db      	ldrb	r3, [r3, #3]
 800bc38:	702b      	strb	r3, [r5, #0]
 800bc3a:	68a3      	ldr	r3, [r4, #8]
 800bc3c:	789b      	ldrb	r3, [r3, #2]
 800bc3e:	706b      	strb	r3, [r5, #1]
 800bc40:	68a3      	ldr	r3, [r4, #8]
 800bc42:	785b      	ldrb	r3, [r3, #1]
 800bc44:	70ab      	strb	r3, [r5, #2]
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	70eb      	strb	r3, [r5, #3]
 800bc4c:	68a2      	ldr	r2, [r4, #8]
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	3204      	adds	r2, #4
 800bc52:	3304      	adds	r3, #4
 800bc54:	2104      	movs	r1, #4
 800bc56:	60a2      	str	r2, [r4, #8]
 800bc58:	6123      	str	r3, [r4, #16]
 800bc5a:	7561      	strb	r1, [r4, #21]
 800bc5c:	7da0      	ldrb	r0, [r4, #22]
 800bc5e:	f080 0001 	eor.w	r0, r0, #1
 800bc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	602b      	str	r3, [r5, #0]
 800bc6a:	e7ef      	b.n	800bc4c <ucdr_deserialize_endian_uint32_t+0xb4>
 800bc6c:	68a2      	ldr	r2, [r4, #8]
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	7da0      	ldrb	r0, [r4, #22]
 800bc72:	f884 9015 	strb.w	r9, [r4, #21]
 800bc76:	eba2 0208 	sub.w	r2, r2, r8
 800bc7a:	eba3 0308 	sub.w	r3, r3, r8
 800bc7e:	60a2      	str	r2, [r4, #8]
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	f080 0001 	eor.w	r0, r0, #1
 800bc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	70ab      	strb	r3, [r5, #2]
 800bc90:	3503      	adds	r5, #3
 800bc92:	68a7      	ldr	r7, [r4, #8]
 800bc94:	e7b6      	b.n	800bc04 <ucdr_deserialize_endian_uint32_t+0x6c>
 800bc96:	4639      	mov	r1, r7
 800bc98:	4642      	mov	r2, r8
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f00b ff99 	bl	8017bd2 <memcpy>
 800bca0:	68a1      	ldr	r1, [r4, #8]
 800bca2:	4652      	mov	r2, sl
 800bca4:	eb05 0008 	add.w	r0, r5, r8
 800bca8:	f00b ff93 	bl	8017bd2 <memcpy>
 800bcac:	e7ac      	b.n	800bc08 <ucdr_deserialize_endian_uint32_t+0x70>
 800bcae:	bf00      	nop

0800bcb0 <ucdr_serialize_uint64_t>:
 800bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb4:	2108      	movs	r1, #8
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	4604      	mov	r4, r0
 800bcba:	e9cd 2300 	strd	r2, r3, [sp]
 800bcbe:	f000 fc69 	bl	800c594 <ucdr_buffer_alignment>
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	7d67      	ldrb	r7, [r4, #21]
 800bcc8:	f000 fca8 	bl	800c61c <ucdr_advance_buffer>
 800bccc:	2108      	movs	r1, #8
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f000 fc00 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d14d      	bne.n	800bd74 <ucdr_serialize_uint64_t+0xc4>
 800bcd8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bcdc:	42ab      	cmp	r3, r5
 800bcde:	d944      	bls.n	800bd6a <ucdr_serialize_uint64_t+0xba>
 800bce0:	1b5e      	subs	r6, r3, r5
 800bce2:	60a3      	str	r3, [r4, #8]
 800bce4:	6923      	ldr	r3, [r4, #16]
 800bce6:	f1c6 0808 	rsb	r8, r6, #8
 800bcea:	4433      	add	r3, r6
 800bcec:	6123      	str	r3, [r4, #16]
 800bcee:	4641      	mov	r1, r8
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 fbfb 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d072      	beq.n	800bde0 <ucdr_serialize_uint64_t+0x130>
 800bcfa:	7d23      	ldrb	r3, [r4, #20]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	f000 8092 	beq.w	800be26 <ucdr_serialize_uint64_t+0x176>
 800bd02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd06:	702b      	strb	r3, [r5, #0]
 800bd08:	2e01      	cmp	r6, #1
 800bd0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd0e:	706b      	strb	r3, [r5, #1]
 800bd10:	d073      	beq.n	800bdfa <ucdr_serialize_uint64_t+0x14a>
 800bd12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd16:	70ab      	strb	r3, [r5, #2]
 800bd18:	2e02      	cmp	r6, #2
 800bd1a:	d072      	beq.n	800be02 <ucdr_serialize_uint64_t+0x152>
 800bd1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd20:	70eb      	strb	r3, [r5, #3]
 800bd22:	2e03      	cmp	r6, #3
 800bd24:	d071      	beq.n	800be0a <ucdr_serialize_uint64_t+0x15a>
 800bd26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bd2a:	712b      	strb	r3, [r5, #4]
 800bd2c:	2e04      	cmp	r6, #4
 800bd2e:	d070      	beq.n	800be12 <ucdr_serialize_uint64_t+0x162>
 800bd30:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bd34:	716b      	strb	r3, [r5, #5]
 800bd36:	2e05      	cmp	r6, #5
 800bd38:	d06f      	beq.n	800be1a <ucdr_serialize_uint64_t+0x16a>
 800bd3a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bd3e:	71ab      	strb	r3, [r5, #6]
 800bd40:	2e06      	cmp	r6, #6
 800bd42:	d06e      	beq.n	800be22 <ucdr_serialize_uint64_t+0x172>
 800bd44:	3507      	adds	r5, #7
 800bd46:	f89d 3000 	ldrb.w	r3, [sp]
 800bd4a:	702b      	strb	r3, [r5, #0]
 800bd4c:	6923      	ldr	r3, [r4, #16]
 800bd4e:	68a2      	ldr	r2, [r4, #8]
 800bd50:	7da0      	ldrb	r0, [r4, #22]
 800bd52:	3308      	adds	r3, #8
 800bd54:	4442      	add	r2, r8
 800bd56:	1b9b      	subs	r3, r3, r6
 800bd58:	2108      	movs	r1, #8
 800bd5a:	f080 0001 	eor.w	r0, r0, #1
 800bd5e:	60a2      	str	r2, [r4, #8]
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	7561      	strb	r1, [r4, #21]
 800bd64:	b002      	add	sp, #8
 800bd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd6a:	2108      	movs	r1, #8
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 fbbd 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bd72:	b350      	cbz	r0, 800bdca <ucdr_serialize_uint64_t+0x11a>
 800bd74:	7d22      	ldrb	r2, [r4, #20]
 800bd76:	68a3      	ldr	r3, [r4, #8]
 800bd78:	2a01      	cmp	r2, #1
 800bd7a:	d02c      	beq.n	800bdd6 <ucdr_serialize_uint64_t+0x126>
 800bd7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd88:	705a      	strb	r2, [r3, #1]
 800bd8a:	68a3      	ldr	r3, [r4, #8]
 800bd8c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd90:	709a      	strb	r2, [r3, #2]
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd98:	70da      	strb	r2, [r3, #3]
 800bd9a:	68a3      	ldr	r3, [r4, #8]
 800bd9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bda0:	711a      	strb	r2, [r3, #4]
 800bda2:	68a3      	ldr	r3, [r4, #8]
 800bda4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bda8:	715a      	strb	r2, [r3, #5]
 800bdaa:	68a3      	ldr	r3, [r4, #8]
 800bdac:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bdb0:	719a      	strb	r2, [r3, #6]
 800bdb2:	68a3      	ldr	r3, [r4, #8]
 800bdb4:	f89d 2000 	ldrb.w	r2, [sp]
 800bdb8:	71da      	strb	r2, [r3, #7]
 800bdba:	68a2      	ldr	r2, [r4, #8]
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	3208      	adds	r2, #8
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	2108      	movs	r1, #8
 800bdc4:	60a2      	str	r2, [r4, #8]
 800bdc6:	6123      	str	r3, [r4, #16]
 800bdc8:	7561      	strb	r1, [r4, #21]
 800bdca:	7da0      	ldrb	r0, [r4, #22]
 800bdcc:	f080 0001 	eor.w	r0, r0, #1
 800bdd0:	b002      	add	sp, #8
 800bdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdda:	6019      	str	r1, [r3, #0]
 800bddc:	605a      	str	r2, [r3, #4]
 800bdde:	e7ec      	b.n	800bdba <ucdr_serialize_uint64_t+0x10a>
 800bde0:	68a2      	ldr	r2, [r4, #8]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	7da0      	ldrb	r0, [r4, #22]
 800bde6:	7567      	strb	r7, [r4, #21]
 800bde8:	1b92      	subs	r2, r2, r6
 800bdea:	1b9b      	subs	r3, r3, r6
 800bdec:	f080 0001 	eor.w	r0, r0, #1
 800bdf0:	60a2      	str	r2, [r4, #8]
 800bdf2:	6123      	str	r3, [r4, #16]
 800bdf4:	b002      	add	sp, #8
 800bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdfa:	68a3      	ldr	r3, [r4, #8]
 800bdfc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	68a3      	ldr	r3, [r4, #8]
 800be1c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	68a5      	ldr	r5, [r4, #8]
 800be24:	e78f      	b.n	800bd46 <ucdr_serialize_uint64_t+0x96>
 800be26:	4628      	mov	r0, r5
 800be28:	466d      	mov	r5, sp
 800be2a:	4632      	mov	r2, r6
 800be2c:	4629      	mov	r1, r5
 800be2e:	f00b fed0 	bl	8017bd2 <memcpy>
 800be32:	68a0      	ldr	r0, [r4, #8]
 800be34:	4642      	mov	r2, r8
 800be36:	19a9      	adds	r1, r5, r6
 800be38:	f00b fecb 	bl	8017bd2 <memcpy>
 800be3c:	e786      	b.n	800bd4c <ucdr_serialize_uint64_t+0x9c>
 800be3e:	bf00      	nop

0800be40 <ucdr_serialize_int16_t>:
 800be40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be44:	b082      	sub	sp, #8
 800be46:	460b      	mov	r3, r1
 800be48:	2102      	movs	r1, #2
 800be4a:	4604      	mov	r4, r0
 800be4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be50:	f000 fba0 	bl	800c594 <ucdr_buffer_alignment>
 800be54:	4601      	mov	r1, r0
 800be56:	4620      	mov	r0, r4
 800be58:	7d67      	ldrb	r7, [r4, #21]
 800be5a:	f000 fbdf 	bl	800c61c <ucdr_advance_buffer>
 800be5e:	2102      	movs	r1, #2
 800be60:	4620      	mov	r0, r4
 800be62:	f000 fb37 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800be66:	b1c0      	cbz	r0, 800be9a <ucdr_serialize_int16_t+0x5a>
 800be68:	7d22      	ldrb	r2, [r4, #20]
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	2a01      	cmp	r2, #1
 800be6e:	d04e      	beq.n	800bf0e <ucdr_serialize_int16_t+0xce>
 800be70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	68a3      	ldr	r3, [r4, #8]
 800be78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be7c:	705a      	strb	r2, [r3, #1]
 800be7e:	68a2      	ldr	r2, [r4, #8]
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	3202      	adds	r2, #2
 800be84:	3302      	adds	r3, #2
 800be86:	2102      	movs	r1, #2
 800be88:	60a2      	str	r2, [r4, #8]
 800be8a:	6123      	str	r3, [r4, #16]
 800be8c:	7561      	strb	r1, [r4, #21]
 800be8e:	7da0      	ldrb	r0, [r4, #22]
 800be90:	f080 0001 	eor.w	r0, r0, #1
 800be94:	b002      	add	sp, #8
 800be96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be9e:	42ab      	cmp	r3, r5
 800bea0:	d923      	bls.n	800beea <ucdr_serialize_int16_t+0xaa>
 800bea2:	1b5e      	subs	r6, r3, r5
 800bea4:	60a3      	str	r3, [r4, #8]
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	f1c6 0802 	rsb	r8, r6, #2
 800beac:	4433      	add	r3, r6
 800beae:	6123      	str	r3, [r4, #16]
 800beb0:	4641      	mov	r1, r8
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fb1a 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800beb8:	b368      	cbz	r0, 800bf16 <ucdr_serialize_int16_t+0xd6>
 800beba:	7d23      	ldrb	r3, [r4, #20]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d03b      	beq.n	800bf38 <ucdr_serialize_int16_t+0xf8>
 800bec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bec4:	702b      	strb	r3, [r5, #0]
 800bec6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800beca:	706b      	strb	r3, [r5, #1]
 800becc:	6923      	ldr	r3, [r4, #16]
 800bece:	68a2      	ldr	r2, [r4, #8]
 800bed0:	7da0      	ldrb	r0, [r4, #22]
 800bed2:	3302      	adds	r3, #2
 800bed4:	4442      	add	r2, r8
 800bed6:	1b9b      	subs	r3, r3, r6
 800bed8:	2102      	movs	r1, #2
 800beda:	f080 0001 	eor.w	r0, r0, #1
 800bede:	60a2      	str	r2, [r4, #8]
 800bee0:	6123      	str	r3, [r4, #16]
 800bee2:	7561      	strb	r1, [r4, #21]
 800bee4:	b002      	add	sp, #8
 800bee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beea:	2102      	movs	r1, #2
 800beec:	4620      	mov	r0, r4
 800beee:	f000 fafd 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d0cb      	beq.n	800be8e <ucdr_serialize_int16_t+0x4e>
 800bef6:	7d23      	ldrb	r3, [r4, #20]
 800bef8:	68a2      	ldr	r2, [r4, #8]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d018      	beq.n	800bf30 <ucdr_serialize_int16_t+0xf0>
 800befe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf02:	7013      	strb	r3, [r2, #0]
 800bf04:	68a3      	ldr	r3, [r4, #8]
 800bf06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf0a:	705a      	strb	r2, [r3, #1]
 800bf0c:	e7b7      	b.n	800be7e <ucdr_serialize_int16_t+0x3e>
 800bf0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bf12:	801a      	strh	r2, [r3, #0]
 800bf14:	e7b3      	b.n	800be7e <ucdr_serialize_int16_t+0x3e>
 800bf16:	68a2      	ldr	r2, [r4, #8]
 800bf18:	6923      	ldr	r3, [r4, #16]
 800bf1a:	7da0      	ldrb	r0, [r4, #22]
 800bf1c:	7567      	strb	r7, [r4, #21]
 800bf1e:	1b92      	subs	r2, r2, r6
 800bf20:	1b9b      	subs	r3, r3, r6
 800bf22:	f080 0001 	eor.w	r0, r0, #1
 800bf26:	60a2      	str	r2, [r4, #8]
 800bf28:	6123      	str	r3, [r4, #16]
 800bf2a:	b002      	add	sp, #8
 800bf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bf34:	8013      	strh	r3, [r2, #0]
 800bf36:	e7a2      	b.n	800be7e <ucdr_serialize_int16_t+0x3e>
 800bf38:	4628      	mov	r0, r5
 800bf3a:	f10d 0506 	add.w	r5, sp, #6
 800bf3e:	4632      	mov	r2, r6
 800bf40:	4629      	mov	r1, r5
 800bf42:	f00b fe46 	bl	8017bd2 <memcpy>
 800bf46:	68a0      	ldr	r0, [r4, #8]
 800bf48:	4642      	mov	r2, r8
 800bf4a:	19a9      	adds	r1, r5, r6
 800bf4c:	f00b fe41 	bl	8017bd2 <memcpy>
 800bf50:	e7bc      	b.n	800becc <ucdr_serialize_int16_t+0x8c>
 800bf52:	bf00      	nop

0800bf54 <ucdr_deserialize_int16_t>:
 800bf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf58:	460d      	mov	r5, r1
 800bf5a:	2102      	movs	r1, #2
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	f000 fb19 	bl	800c594 <ucdr_buffer_alignment>
 800bf62:	4601      	mov	r1, r0
 800bf64:	4620      	mov	r0, r4
 800bf66:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf6a:	f000 fb57 	bl	800c61c <ucdr_advance_buffer>
 800bf6e:	2102      	movs	r1, #2
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 faaf 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800bf76:	b1a8      	cbz	r0, 800bfa4 <ucdr_deserialize_int16_t+0x50>
 800bf78:	7d22      	ldrb	r2, [r4, #20]
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	2a01      	cmp	r2, #1
 800bf7e:	d046      	beq.n	800c00e <ucdr_deserialize_int16_t+0xba>
 800bf80:	785b      	ldrb	r3, [r3, #1]
 800bf82:	702b      	strb	r3, [r5, #0]
 800bf84:	68a3      	ldr	r3, [r4, #8]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	706b      	strb	r3, [r5, #1]
 800bf8a:	68a2      	ldr	r2, [r4, #8]
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	3202      	adds	r2, #2
 800bf90:	3302      	adds	r3, #2
 800bf92:	2102      	movs	r1, #2
 800bf94:	60a2      	str	r2, [r4, #8]
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	7561      	strb	r1, [r4, #21]
 800bf9a:	7da0      	ldrb	r0, [r4, #22]
 800bf9c:	f080 0001 	eor.w	r0, r0, #1
 800bfa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bfa8:	42be      	cmp	r6, r7
 800bfaa:	d920      	bls.n	800bfee <ucdr_deserialize_int16_t+0x9a>
 800bfac:	6923      	ldr	r3, [r4, #16]
 800bfae:	60a6      	str	r6, [r4, #8]
 800bfb0:	1bf6      	subs	r6, r6, r7
 800bfb2:	4433      	add	r3, r6
 800bfb4:	f1c6 0902 	rsb	r9, r6, #2
 800bfb8:	6123      	str	r3, [r4, #16]
 800bfba:	4649      	mov	r1, r9
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f000 fa95 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bfc2:	b338      	cbz	r0, 800c014 <ucdr_deserialize_int16_t+0xc0>
 800bfc4:	7d23      	ldrb	r3, [r4, #20]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d034      	beq.n	800c034 <ucdr_deserialize_int16_t+0xe0>
 800bfca:	787b      	ldrb	r3, [r7, #1]
 800bfcc:	702b      	strb	r3, [r5, #0]
 800bfce:	783b      	ldrb	r3, [r7, #0]
 800bfd0:	706b      	strb	r3, [r5, #1]
 800bfd2:	6923      	ldr	r3, [r4, #16]
 800bfd4:	68a2      	ldr	r2, [r4, #8]
 800bfd6:	7da0      	ldrb	r0, [r4, #22]
 800bfd8:	2102      	movs	r1, #2
 800bfda:	3302      	adds	r3, #2
 800bfdc:	444a      	add	r2, r9
 800bfde:	1b9b      	subs	r3, r3, r6
 800bfe0:	7561      	strb	r1, [r4, #21]
 800bfe2:	60a2      	str	r2, [r4, #8]
 800bfe4:	6123      	str	r3, [r4, #16]
 800bfe6:	f080 0001 	eor.w	r0, r0, #1
 800bfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfee:	2102      	movs	r1, #2
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 fa7b 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d0cf      	beq.n	800bf9a <ucdr_deserialize_int16_t+0x46>
 800bffa:	7d23      	ldrb	r3, [r4, #20]
 800bffc:	68a2      	ldr	r2, [r4, #8]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d015      	beq.n	800c02e <ucdr_deserialize_int16_t+0xda>
 800c002:	7853      	ldrb	r3, [r2, #1]
 800c004:	702b      	strb	r3, [r5, #0]
 800c006:	68a3      	ldr	r3, [r4, #8]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	706b      	strb	r3, [r5, #1]
 800c00c:	e7bd      	b.n	800bf8a <ucdr_deserialize_int16_t+0x36>
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	802b      	strh	r3, [r5, #0]
 800c012:	e7ba      	b.n	800bf8a <ucdr_deserialize_int16_t+0x36>
 800c014:	68a2      	ldr	r2, [r4, #8]
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	7da0      	ldrb	r0, [r4, #22]
 800c01a:	f884 8015 	strb.w	r8, [r4, #21]
 800c01e:	1b92      	subs	r2, r2, r6
 800c020:	1b9b      	subs	r3, r3, r6
 800c022:	60a2      	str	r2, [r4, #8]
 800c024:	6123      	str	r3, [r4, #16]
 800c026:	f080 0001 	eor.w	r0, r0, #1
 800c02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c02e:	8813      	ldrh	r3, [r2, #0]
 800c030:	802b      	strh	r3, [r5, #0]
 800c032:	e7aa      	b.n	800bf8a <ucdr_deserialize_int16_t+0x36>
 800c034:	4639      	mov	r1, r7
 800c036:	4632      	mov	r2, r6
 800c038:	4628      	mov	r0, r5
 800c03a:	f00b fdca 	bl	8017bd2 <memcpy>
 800c03e:	68a1      	ldr	r1, [r4, #8]
 800c040:	464a      	mov	r2, r9
 800c042:	19a8      	adds	r0, r5, r6
 800c044:	f00b fdc5 	bl	8017bd2 <memcpy>
 800c048:	e7c3      	b.n	800bfd2 <ucdr_deserialize_int16_t+0x7e>
 800c04a:	bf00      	nop

0800c04c <ucdr_serialize_int32_t>:
 800c04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	4604      	mov	r4, r0
 800c054:	9101      	str	r1, [sp, #4]
 800c056:	2104      	movs	r1, #4
 800c058:	f000 fa9c 	bl	800c594 <ucdr_buffer_alignment>
 800c05c:	4601      	mov	r1, r0
 800c05e:	4620      	mov	r0, r4
 800c060:	7d67      	ldrb	r7, [r4, #21]
 800c062:	f000 fadb 	bl	800c61c <ucdr_advance_buffer>
 800c066:	2104      	movs	r1, #4
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fa33 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800c06e:	b300      	cbz	r0, 800c0b2 <ucdr_serialize_int32_t+0x66>
 800c070:	7d22      	ldrb	r2, [r4, #20]
 800c072:	68a3      	ldr	r3, [r4, #8]
 800c074:	2a01      	cmp	r2, #1
 800c076:	d05d      	beq.n	800c134 <ucdr_serialize_int32_t+0xe8>
 800c078:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	68a3      	ldr	r3, [r4, #8]
 800c080:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c084:	705a      	strb	r2, [r3, #1]
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c08c:	709a      	strb	r2, [r3, #2]
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c094:	70da      	strb	r2, [r3, #3]
 800c096:	68a2      	ldr	r2, [r4, #8]
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	3204      	adds	r2, #4
 800c09c:	3304      	adds	r3, #4
 800c09e:	2104      	movs	r1, #4
 800c0a0:	60a2      	str	r2, [r4, #8]
 800c0a2:	6123      	str	r3, [r4, #16]
 800c0a4:	7561      	strb	r1, [r4, #21]
 800c0a6:	7da0      	ldrb	r0, [r4, #22]
 800c0a8:	f080 0001 	eor.w	r0, r0, #1
 800c0ac:	b002      	add	sp, #8
 800c0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c0b6:	42ab      	cmp	r3, r5
 800c0b8:	d92e      	bls.n	800c118 <ucdr_serialize_int32_t+0xcc>
 800c0ba:	1b5e      	subs	r6, r3, r5
 800c0bc:	60a3      	str	r3, [r4, #8]
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	f1c6 0804 	rsb	r8, r6, #4
 800c0c4:	4433      	add	r3, r6
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 fa0e 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c0d0:	b398      	cbz	r0, 800c13a <ucdr_serialize_int32_t+0xee>
 800c0d2:	7d23      	ldrb	r3, [r4, #20]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d046      	beq.n	800c166 <ucdr_serialize_int32_t+0x11a>
 800c0d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0dc:	702b      	strb	r3, [r5, #0]
 800c0de:	2e01      	cmp	r6, #1
 800c0e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c0e4:	706b      	strb	r3, [r5, #1]
 800c0e6:	d035      	beq.n	800c154 <ucdr_serialize_int32_t+0x108>
 800c0e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c0ec:	70ab      	strb	r3, [r5, #2]
 800c0ee:	2e02      	cmp	r6, #2
 800c0f0:	d034      	beq.n	800c15c <ucdr_serialize_int32_t+0x110>
 800c0f2:	3503      	adds	r5, #3
 800c0f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0f8:	702b      	strb	r3, [r5, #0]
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	68a2      	ldr	r2, [r4, #8]
 800c0fe:	7da0      	ldrb	r0, [r4, #22]
 800c100:	3304      	adds	r3, #4
 800c102:	4442      	add	r2, r8
 800c104:	1b9b      	subs	r3, r3, r6
 800c106:	2104      	movs	r1, #4
 800c108:	f080 0001 	eor.w	r0, r0, #1
 800c10c:	60a2      	str	r2, [r4, #8]
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	7561      	strb	r1, [r4, #21]
 800c112:	b002      	add	sp, #8
 800c114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c118:	2104      	movs	r1, #4
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 f9e6 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c120:	2800      	cmp	r0, #0
 800c122:	d0c0      	beq.n	800c0a6 <ucdr_serialize_int32_t+0x5a>
 800c124:	7d23      	ldrb	r3, [r4, #20]
 800c126:	68a2      	ldr	r2, [r4, #8]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d019      	beq.n	800c160 <ucdr_serialize_int32_t+0x114>
 800c12c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c130:	7013      	strb	r3, [r2, #0]
 800c132:	e7a4      	b.n	800c07e <ucdr_serialize_int32_t+0x32>
 800c134:	9a01      	ldr	r2, [sp, #4]
 800c136:	601a      	str	r2, [r3, #0]
 800c138:	e7ad      	b.n	800c096 <ucdr_serialize_int32_t+0x4a>
 800c13a:	68a2      	ldr	r2, [r4, #8]
 800c13c:	6923      	ldr	r3, [r4, #16]
 800c13e:	7da0      	ldrb	r0, [r4, #22]
 800c140:	7567      	strb	r7, [r4, #21]
 800c142:	1b92      	subs	r2, r2, r6
 800c144:	1b9b      	subs	r3, r3, r6
 800c146:	f080 0001 	eor.w	r0, r0, #1
 800c14a:	60a2      	str	r2, [r4, #8]
 800c14c:	6123      	str	r3, [r4, #16]
 800c14e:	b002      	add	sp, #8
 800c150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c154:	68a3      	ldr	r3, [r4, #8]
 800c156:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c15a:	701a      	strb	r2, [r3, #0]
 800c15c:	68a5      	ldr	r5, [r4, #8]
 800c15e:	e7c9      	b.n	800c0f4 <ucdr_serialize_int32_t+0xa8>
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	e797      	b.n	800c096 <ucdr_serialize_int32_t+0x4a>
 800c166:	4628      	mov	r0, r5
 800c168:	ad01      	add	r5, sp, #4
 800c16a:	4632      	mov	r2, r6
 800c16c:	4629      	mov	r1, r5
 800c16e:	f00b fd30 	bl	8017bd2 <memcpy>
 800c172:	68a0      	ldr	r0, [r4, #8]
 800c174:	4642      	mov	r2, r8
 800c176:	19a9      	adds	r1, r5, r6
 800c178:	f00b fd2b 	bl	8017bd2 <memcpy>
 800c17c:	e7bd      	b.n	800c0fa <ucdr_serialize_int32_t+0xae>
 800c17e:	bf00      	nop

0800c180 <ucdr_serialize_endian_int32_t>:
 800c180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c184:	b083      	sub	sp, #12
 800c186:	460d      	mov	r5, r1
 800c188:	2104      	movs	r1, #4
 800c18a:	4604      	mov	r4, r0
 800c18c:	9201      	str	r2, [sp, #4]
 800c18e:	f000 fa01 	bl	800c594 <ucdr_buffer_alignment>
 800c192:	4601      	mov	r1, r0
 800c194:	4620      	mov	r0, r4
 800c196:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c19a:	f000 fa3f 	bl	800c61c <ucdr_advance_buffer>
 800c19e:	2104      	movs	r1, #4
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f000 f997 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d137      	bne.n	800c21a <ucdr_serialize_endian_int32_t+0x9a>
 800c1aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c1ae:	42b7      	cmp	r7, r6
 800c1b0:	d92e      	bls.n	800c210 <ucdr_serialize_endian_int32_t+0x90>
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	60a7      	str	r7, [r4, #8]
 800c1b6:	1bbf      	subs	r7, r7, r6
 800c1b8:	443b      	add	r3, r7
 800c1ba:	f1c7 0904 	rsb	r9, r7, #4
 800c1be:	6123      	str	r3, [r4, #16]
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f000 f992 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d049      	beq.n	800c260 <ucdr_serialize_endian_int32_t+0xe0>
 800c1cc:	2d01      	cmp	r5, #1
 800c1ce:	d05b      	beq.n	800c288 <ucdr_serialize_endian_int32_t+0x108>
 800c1d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1d4:	7033      	strb	r3, [r6, #0]
 800c1d6:	2f01      	cmp	r7, #1
 800c1d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1dc:	7073      	strb	r3, [r6, #1]
 800c1de:	d04d      	beq.n	800c27c <ucdr_serialize_endian_int32_t+0xfc>
 800c1e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c1e4:	70b3      	strb	r3, [r6, #2]
 800c1e6:	2f02      	cmp	r7, #2
 800c1e8:	d04c      	beq.n	800c284 <ucdr_serialize_endian_int32_t+0x104>
 800c1ea:	3603      	adds	r6, #3
 800c1ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1f0:	7033      	strb	r3, [r6, #0]
 800c1f2:	6923      	ldr	r3, [r4, #16]
 800c1f4:	68a2      	ldr	r2, [r4, #8]
 800c1f6:	7da0      	ldrb	r0, [r4, #22]
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	444a      	add	r2, r9
 800c1fc:	1bdb      	subs	r3, r3, r7
 800c1fe:	2104      	movs	r1, #4
 800c200:	f080 0001 	eor.w	r0, r0, #1
 800c204:	60a2      	str	r2, [r4, #8]
 800c206:	6123      	str	r3, [r4, #16]
 800c208:	7561      	strb	r1, [r4, #21]
 800c20a:	b003      	add	sp, #12
 800c20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c210:	2104      	movs	r1, #4
 800c212:	4620      	mov	r0, r4
 800c214:	f000 f96a 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c218:	b1c8      	cbz	r0, 800c24e <ucdr_serialize_endian_int32_t+0xce>
 800c21a:	2d01      	cmp	r5, #1
 800c21c:	68a3      	ldr	r3, [r4, #8]
 800c21e:	d01c      	beq.n	800c25a <ucdr_serialize_endian_int32_t+0xda>
 800c220:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c224:	701a      	strb	r2, [r3, #0]
 800c226:	68a3      	ldr	r3, [r4, #8]
 800c228:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c22c:	705a      	strb	r2, [r3, #1]
 800c22e:	68a3      	ldr	r3, [r4, #8]
 800c230:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c234:	709a      	strb	r2, [r3, #2]
 800c236:	68a3      	ldr	r3, [r4, #8]
 800c238:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c23c:	70da      	strb	r2, [r3, #3]
 800c23e:	68a2      	ldr	r2, [r4, #8]
 800c240:	6923      	ldr	r3, [r4, #16]
 800c242:	3204      	adds	r2, #4
 800c244:	3304      	adds	r3, #4
 800c246:	2104      	movs	r1, #4
 800c248:	60a2      	str	r2, [r4, #8]
 800c24a:	6123      	str	r3, [r4, #16]
 800c24c:	7561      	strb	r1, [r4, #21]
 800c24e:	7da0      	ldrb	r0, [r4, #22]
 800c250:	f080 0001 	eor.w	r0, r0, #1
 800c254:	b003      	add	sp, #12
 800c256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c25a:	9a01      	ldr	r2, [sp, #4]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e7ee      	b.n	800c23e <ucdr_serialize_endian_int32_t+0xbe>
 800c260:	68a2      	ldr	r2, [r4, #8]
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	7da0      	ldrb	r0, [r4, #22]
 800c266:	f884 8015 	strb.w	r8, [r4, #21]
 800c26a:	1bd2      	subs	r2, r2, r7
 800c26c:	1bdb      	subs	r3, r3, r7
 800c26e:	f080 0001 	eor.w	r0, r0, #1
 800c272:	60a2      	str	r2, [r4, #8]
 800c274:	6123      	str	r3, [r4, #16]
 800c276:	b003      	add	sp, #12
 800c278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c27c:	68a3      	ldr	r3, [r4, #8]
 800c27e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c282:	701a      	strb	r2, [r3, #0]
 800c284:	68a6      	ldr	r6, [r4, #8]
 800c286:	e7b1      	b.n	800c1ec <ucdr_serialize_endian_int32_t+0x6c>
 800c288:	ad01      	add	r5, sp, #4
 800c28a:	463a      	mov	r2, r7
 800c28c:	4629      	mov	r1, r5
 800c28e:	4630      	mov	r0, r6
 800c290:	f00b fc9f 	bl	8017bd2 <memcpy>
 800c294:	68a0      	ldr	r0, [r4, #8]
 800c296:	464a      	mov	r2, r9
 800c298:	19e9      	adds	r1, r5, r7
 800c29a:	f00b fc9a 	bl	8017bd2 <memcpy>
 800c29e:	e7a8      	b.n	800c1f2 <ucdr_serialize_endian_int32_t+0x72>

0800c2a0 <ucdr_deserialize_int32_t>:
 800c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	460d      	mov	r5, r1
 800c2a6:	2104      	movs	r1, #4
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	f000 f973 	bl	800c594 <ucdr_buffer_alignment>
 800c2ae:	4601      	mov	r1, r0
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c2b6:	f000 f9b1 	bl	800c61c <ucdr_advance_buffer>
 800c2ba:	2104      	movs	r1, #4
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 f909 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800c2c2:	b1d8      	cbz	r0, 800c2fc <ucdr_deserialize_int32_t+0x5c>
 800c2c4:	7d22      	ldrb	r2, [r4, #20]
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	2a01      	cmp	r2, #1
 800c2ca:	d052      	beq.n	800c372 <ucdr_deserialize_int32_t+0xd2>
 800c2cc:	78db      	ldrb	r3, [r3, #3]
 800c2ce:	702b      	strb	r3, [r5, #0]
 800c2d0:	68a3      	ldr	r3, [r4, #8]
 800c2d2:	789b      	ldrb	r3, [r3, #2]
 800c2d4:	706b      	strb	r3, [r5, #1]
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	785b      	ldrb	r3, [r3, #1]
 800c2da:	70ab      	strb	r3, [r5, #2]
 800c2dc:	68a3      	ldr	r3, [r4, #8]
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	70eb      	strb	r3, [r5, #3]
 800c2e2:	68a2      	ldr	r2, [r4, #8]
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	3204      	adds	r2, #4
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	2104      	movs	r1, #4
 800c2ec:	60a2      	str	r2, [r4, #8]
 800c2ee:	6123      	str	r3, [r4, #16]
 800c2f0:	7561      	strb	r1, [r4, #21]
 800c2f2:	7da0      	ldrb	r0, [r4, #22]
 800c2f4:	f080 0001 	eor.w	r0, r0, #1
 800c2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fc:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c300:	42b7      	cmp	r7, r6
 800c302:	d92a      	bls.n	800c35a <ucdr_deserialize_int32_t+0xba>
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	60a7      	str	r7, [r4, #8]
 800c308:	1bbf      	subs	r7, r7, r6
 800c30a:	443b      	add	r3, r7
 800c30c:	f1c7 0904 	rsb	r9, r7, #4
 800c310:	6123      	str	r3, [r4, #16]
 800c312:	4649      	mov	r1, r9
 800c314:	4620      	mov	r0, r4
 800c316:	f000 f8e9 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c31a:	b368      	cbz	r0, 800c378 <ucdr_deserialize_int32_t+0xd8>
 800c31c:	7d23      	ldrb	r3, [r4, #20]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d040      	beq.n	800c3a4 <ucdr_deserialize_int32_t+0x104>
 800c322:	78f3      	ldrb	r3, [r6, #3]
 800c324:	702b      	strb	r3, [r5, #0]
 800c326:	78b3      	ldrb	r3, [r6, #2]
 800c328:	706b      	strb	r3, [r5, #1]
 800c32a:	2f01      	cmp	r7, #1
 800c32c:	d031      	beq.n	800c392 <ucdr_deserialize_int32_t+0xf2>
 800c32e:	7873      	ldrb	r3, [r6, #1]
 800c330:	70ab      	strb	r3, [r5, #2]
 800c332:	2f02      	cmp	r7, #2
 800c334:	f105 0503 	add.w	r5, r5, #3
 800c338:	d02f      	beq.n	800c39a <ucdr_deserialize_int32_t+0xfa>
 800c33a:	7833      	ldrb	r3, [r6, #0]
 800c33c:	702b      	strb	r3, [r5, #0]
 800c33e:	6923      	ldr	r3, [r4, #16]
 800c340:	68a2      	ldr	r2, [r4, #8]
 800c342:	7da0      	ldrb	r0, [r4, #22]
 800c344:	2104      	movs	r1, #4
 800c346:	3304      	adds	r3, #4
 800c348:	444a      	add	r2, r9
 800c34a:	1bdb      	subs	r3, r3, r7
 800c34c:	7561      	strb	r1, [r4, #21]
 800c34e:	60a2      	str	r2, [r4, #8]
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	f080 0001 	eor.w	r0, r0, #1
 800c356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35a:	2104      	movs	r1, #4
 800c35c:	4620      	mov	r0, r4
 800c35e:	f000 f8c5 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c362:	2800      	cmp	r0, #0
 800c364:	d0c5      	beq.n	800c2f2 <ucdr_deserialize_int32_t+0x52>
 800c366:	7d23      	ldrb	r3, [r4, #20]
 800c368:	68a2      	ldr	r2, [r4, #8]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d017      	beq.n	800c39e <ucdr_deserialize_int32_t+0xfe>
 800c36e:	78d3      	ldrb	r3, [r2, #3]
 800c370:	e7ad      	b.n	800c2ce <ucdr_deserialize_int32_t+0x2e>
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	e7b4      	b.n	800c2e2 <ucdr_deserialize_int32_t+0x42>
 800c378:	68a2      	ldr	r2, [r4, #8]
 800c37a:	6923      	ldr	r3, [r4, #16]
 800c37c:	7da0      	ldrb	r0, [r4, #22]
 800c37e:	f884 8015 	strb.w	r8, [r4, #21]
 800c382:	1bd2      	subs	r2, r2, r7
 800c384:	1bdb      	subs	r3, r3, r7
 800c386:	60a2      	str	r2, [r4, #8]
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	f080 0001 	eor.w	r0, r0, #1
 800c38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c392:	68a3      	ldr	r3, [r4, #8]
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	70ab      	strb	r3, [r5, #2]
 800c398:	3503      	adds	r5, #3
 800c39a:	68a6      	ldr	r6, [r4, #8]
 800c39c:	e7cd      	b.n	800c33a <ucdr_deserialize_int32_t+0x9a>
 800c39e:	6813      	ldr	r3, [r2, #0]
 800c3a0:	602b      	str	r3, [r5, #0]
 800c3a2:	e79e      	b.n	800c2e2 <ucdr_deserialize_int32_t+0x42>
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	463a      	mov	r2, r7
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f00b fc12 	bl	8017bd2 <memcpy>
 800c3ae:	68a1      	ldr	r1, [r4, #8]
 800c3b0:	464a      	mov	r2, r9
 800c3b2:	19e8      	adds	r0, r5, r7
 800c3b4:	f00b fc0d 	bl	8017bd2 <memcpy>
 800c3b8:	e7c1      	b.n	800c33e <ucdr_deserialize_int32_t+0x9e>
 800c3ba:	bf00      	nop

0800c3bc <ucdr_deserialize_endian_int32_t>:
 800c3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c0:	460e      	mov	r6, r1
 800c3c2:	2104      	movs	r1, #4
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	4615      	mov	r5, r2
 800c3c8:	f000 f8e4 	bl	800c594 <ucdr_buffer_alignment>
 800c3cc:	4601      	mov	r1, r0
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c3d4:	f000 f922 	bl	800c61c <ucdr_advance_buffer>
 800c3d8:	2104      	movs	r1, #4
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 f87a 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d137      	bne.n	800c454 <ucdr_deserialize_endian_int32_t+0x98>
 800c3e4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c3e8:	42bb      	cmp	r3, r7
 800c3ea:	d92e      	bls.n	800c44a <ucdr_deserialize_endian_int32_t+0x8e>
 800c3ec:	eba3 0807 	sub.w	r8, r3, r7
 800c3f0:	60a3      	str	r3, [r4, #8]
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	f1c8 0a04 	rsb	sl, r8, #4
 800c3f8:	4443      	add	r3, r8
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	4651      	mov	r1, sl
 800c3fe:	4620      	mov	r0, r4
 800c400:	f000 f874 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c404:	2800      	cmp	r0, #0
 800c406:	d043      	beq.n	800c490 <ucdr_deserialize_endian_int32_t+0xd4>
 800c408:	2e01      	cmp	r6, #1
 800c40a:	d056      	beq.n	800c4ba <ucdr_deserialize_endian_int32_t+0xfe>
 800c40c:	78fb      	ldrb	r3, [r7, #3]
 800c40e:	702b      	strb	r3, [r5, #0]
 800c410:	78bb      	ldrb	r3, [r7, #2]
 800c412:	706b      	strb	r3, [r5, #1]
 800c414:	f1b8 0f01 	cmp.w	r8, #1
 800c418:	d049      	beq.n	800c4ae <ucdr_deserialize_endian_int32_t+0xf2>
 800c41a:	787b      	ldrb	r3, [r7, #1]
 800c41c:	70ab      	strb	r3, [r5, #2]
 800c41e:	f1b8 0f02 	cmp.w	r8, #2
 800c422:	f105 0503 	add.w	r5, r5, #3
 800c426:	d046      	beq.n	800c4b6 <ucdr_deserialize_endian_int32_t+0xfa>
 800c428:	783b      	ldrb	r3, [r7, #0]
 800c42a:	702b      	strb	r3, [r5, #0]
 800c42c:	6923      	ldr	r3, [r4, #16]
 800c42e:	68a2      	ldr	r2, [r4, #8]
 800c430:	7da0      	ldrb	r0, [r4, #22]
 800c432:	2104      	movs	r1, #4
 800c434:	3304      	adds	r3, #4
 800c436:	4452      	add	r2, sl
 800c438:	eba3 0308 	sub.w	r3, r3, r8
 800c43c:	7561      	strb	r1, [r4, #21]
 800c43e:	60a2      	str	r2, [r4, #8]
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	f080 0001 	eor.w	r0, r0, #1
 800c446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c44a:	2104      	movs	r1, #4
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 f84d 	bl	800c4ec <ucdr_check_final_buffer_behavior>
 800c452:	b1a8      	cbz	r0, 800c480 <ucdr_deserialize_endian_int32_t+0xc4>
 800c454:	2e01      	cmp	r6, #1
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	d017      	beq.n	800c48a <ucdr_deserialize_endian_int32_t+0xce>
 800c45a:	78db      	ldrb	r3, [r3, #3]
 800c45c:	702b      	strb	r3, [r5, #0]
 800c45e:	68a3      	ldr	r3, [r4, #8]
 800c460:	789b      	ldrb	r3, [r3, #2]
 800c462:	706b      	strb	r3, [r5, #1]
 800c464:	68a3      	ldr	r3, [r4, #8]
 800c466:	785b      	ldrb	r3, [r3, #1]
 800c468:	70ab      	strb	r3, [r5, #2]
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	70eb      	strb	r3, [r5, #3]
 800c470:	68a2      	ldr	r2, [r4, #8]
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	3204      	adds	r2, #4
 800c476:	3304      	adds	r3, #4
 800c478:	2104      	movs	r1, #4
 800c47a:	60a2      	str	r2, [r4, #8]
 800c47c:	6123      	str	r3, [r4, #16]
 800c47e:	7561      	strb	r1, [r4, #21]
 800c480:	7da0      	ldrb	r0, [r4, #22]
 800c482:	f080 0001 	eor.w	r0, r0, #1
 800c486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	e7ef      	b.n	800c470 <ucdr_deserialize_endian_int32_t+0xb4>
 800c490:	68a2      	ldr	r2, [r4, #8]
 800c492:	6923      	ldr	r3, [r4, #16]
 800c494:	7da0      	ldrb	r0, [r4, #22]
 800c496:	f884 9015 	strb.w	r9, [r4, #21]
 800c49a:	eba2 0208 	sub.w	r2, r2, r8
 800c49e:	eba3 0308 	sub.w	r3, r3, r8
 800c4a2:	60a2      	str	r2, [r4, #8]
 800c4a4:	6123      	str	r3, [r4, #16]
 800c4a6:	f080 0001 	eor.w	r0, r0, #1
 800c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ae:	68a3      	ldr	r3, [r4, #8]
 800c4b0:	785b      	ldrb	r3, [r3, #1]
 800c4b2:	70ab      	strb	r3, [r5, #2]
 800c4b4:	3503      	adds	r5, #3
 800c4b6:	68a7      	ldr	r7, [r4, #8]
 800c4b8:	e7b6      	b.n	800c428 <ucdr_deserialize_endian_int32_t+0x6c>
 800c4ba:	4639      	mov	r1, r7
 800c4bc:	4642      	mov	r2, r8
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f00b fb87 	bl	8017bd2 <memcpy>
 800c4c4:	68a1      	ldr	r1, [r4, #8]
 800c4c6:	4652      	mov	r2, sl
 800c4c8:	eb05 0008 	add.w	r0, r5, r8
 800c4cc:	f00b fb81 	bl	8017bd2 <memcpy>
 800c4d0:	e7ac      	b.n	800c42c <ucdr_deserialize_endian_int32_t+0x70>
 800c4d2:	bf00      	nop

0800c4d4 <ucdr_check_buffer_available_for>:
 800c4d4:	7d83      	ldrb	r3, [r0, #22]
 800c4d6:	b93b      	cbnz	r3, 800c4e8 <ucdr_check_buffer_available_for+0x14>
 800c4d8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c4dc:	440b      	add	r3, r1
 800c4de:	4298      	cmp	r0, r3
 800c4e0:	bf34      	ite	cc
 800c4e2:	2000      	movcc	r0, #0
 800c4e4:	2001      	movcs	r0, #1
 800c4e6:	4770      	bx	lr
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	4770      	bx	lr

0800c4ec <ucdr_check_final_buffer_behavior>:
 800c4ec:	7d83      	ldrb	r3, [r0, #22]
 800c4ee:	b943      	cbnz	r3, 800c502 <ucdr_check_final_buffer_behavior+0x16>
 800c4f0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c4f4:	4291      	cmp	r1, r2
 800c4f6:	b510      	push	{r4, lr}
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	d205      	bcs.n	800c508 <ucdr_check_final_buffer_behavior+0x1c>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	4618      	mov	r0, r3
 800c500:	bd10      	pop	{r4, pc}
 800c502:	2300      	movs	r3, #0
 800c504:	4618      	mov	r0, r3
 800c506:	4770      	bx	lr
 800c508:	6982      	ldr	r2, [r0, #24]
 800c50a:	b13a      	cbz	r2, 800c51c <ucdr_check_final_buffer_behavior+0x30>
 800c50c:	69c1      	ldr	r1, [r0, #28]
 800c50e:	4790      	blx	r2
 800c510:	f080 0301 	eor.w	r3, r0, #1
 800c514:	b2db      	uxtb	r3, r3
 800c516:	75a0      	strb	r0, [r4, #22]
 800c518:	4618      	mov	r0, r3
 800c51a:	bd10      	pop	{r4, pc}
 800c51c:	2001      	movs	r0, #1
 800c51e:	75a0      	strb	r0, [r4, #22]
 800c520:	e7fa      	b.n	800c518 <ucdr_check_final_buffer_behavior+0x2c>
 800c522:	bf00      	nop

0800c524 <ucdr_set_on_full_buffer_callback>:
 800c524:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop

0800c52c <ucdr_init_buffer_origin_offset_endian>:
 800c52c:	b410      	push	{r4}
 800c52e:	9c01      	ldr	r4, [sp, #4]
 800c530:	6001      	str	r1, [r0, #0]
 800c532:	440a      	add	r2, r1
 800c534:	6042      	str	r2, [r0, #4]
 800c536:	190a      	adds	r2, r1, r4
 800c538:	441c      	add	r4, r3
 800c53a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c53e:	6082      	str	r2, [r0, #8]
 800c540:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c544:	7503      	strb	r3, [r0, #20]
 800c546:	2200      	movs	r2, #0
 800c548:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c550:	7542      	strb	r2, [r0, #21]
 800c552:	7582      	strb	r2, [r0, #22]
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop

0800c558 <ucdr_init_buffer_origin_offset>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	9c04      	ldr	r4, [sp, #16]
 800c55e:	9400      	str	r4, [sp, #0]
 800c560:	2401      	movs	r4, #1
 800c562:	9401      	str	r4, [sp, #4]
 800c564:	f7ff ffe2 	bl	800c52c <ucdr_init_buffer_origin_offset_endian>
 800c568:	b002      	add	sp, #8
 800c56a:	bd10      	pop	{r4, pc}

0800c56c <ucdr_init_buffer_origin>:
 800c56c:	b510      	push	{r4, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	2400      	movs	r4, #0
 800c572:	9400      	str	r4, [sp, #0]
 800c574:	f7ff fff0 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800c578:	b002      	add	sp, #8
 800c57a:	bd10      	pop	{r4, pc}

0800c57c <ucdr_init_buffer>:
 800c57c:	2300      	movs	r3, #0
 800c57e:	f7ff bff5 	b.w	800c56c <ucdr_init_buffer_origin>
 800c582:	bf00      	nop

0800c584 <ucdr_alignment>:
 800c584:	fbb0 f3f1 	udiv	r3, r0, r1
 800c588:	fb03 0011 	mls	r0, r3, r1, r0
 800c58c:	1a08      	subs	r0, r1, r0
 800c58e:	3901      	subs	r1, #1
 800c590:	4008      	ands	r0, r1
 800c592:	4770      	bx	lr

0800c594 <ucdr_buffer_alignment>:
 800c594:	7d43      	ldrb	r3, [r0, #21]
 800c596:	428b      	cmp	r3, r1
 800c598:	d208      	bcs.n	800c5ac <ucdr_buffer_alignment+0x18>
 800c59a:	6900      	ldr	r0, [r0, #16]
 800c59c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c5a0:	fb01 0013 	mls	r0, r1, r3, r0
 800c5a4:	1a08      	subs	r0, r1, r0
 800c5a6:	3901      	subs	r1, #1
 800c5a8:	4008      	ands	r0, r1
 800c5aa:	4770      	bx	lr
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	4770      	bx	lr

0800c5b0 <ucdr_align_to>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	f7ff ffed 	bl	800c594 <ucdr_buffer_alignment>
 800c5ba:	68a3      	ldr	r3, [r4, #8]
 800c5bc:	6861      	ldr	r1, [r4, #4]
 800c5be:	6922      	ldr	r2, [r4, #16]
 800c5c0:	7565      	strb	r5, [r4, #21]
 800c5c2:	4403      	add	r3, r0
 800c5c4:	428b      	cmp	r3, r1
 800c5c6:	bf28      	it	cs
 800c5c8:	460b      	movcs	r3, r1
 800c5ca:	4402      	add	r2, r0
 800c5cc:	60a3      	str	r3, [r4, #8]
 800c5ce:	6122      	str	r2, [r4, #16]
 800c5d0:	bd38      	pop	{r3, r4, r5, pc}
 800c5d2:	bf00      	nop

0800c5d4 <ucdr_buffer_length>:
 800c5d4:	6882      	ldr	r2, [r0, #8]
 800c5d6:	6800      	ldr	r0, [r0, #0]
 800c5d8:	1a10      	subs	r0, r2, r0
 800c5da:	4770      	bx	lr

0800c5dc <ucdr_buffer_remaining>:
 800c5dc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c5e0:	1a10      	subs	r0, r2, r0
 800c5e2:	4770      	bx	lr

0800c5e4 <ucdr_check_final_buffer_behavior_array>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	7d83      	ldrb	r3, [r0, #22]
 800c5e8:	b963      	cbnz	r3, 800c604 <ucdr_check_final_buffer_behavior_array+0x20>
 800c5ea:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	460d      	mov	r5, r1
 800c5f4:	d308      	bcc.n	800c608 <ucdr_check_final_buffer_behavior_array+0x24>
 800c5f6:	b139      	cbz	r1, 800c608 <ucdr_check_final_buffer_behavior_array+0x24>
 800c5f8:	6983      	ldr	r3, [r0, #24]
 800c5fa:	b163      	cbz	r3, 800c616 <ucdr_check_final_buffer_behavior_array+0x32>
 800c5fc:	69c1      	ldr	r1, [r0, #28]
 800c5fe:	4798      	blx	r3
 800c600:	75a0      	strb	r0, [r4, #22]
 800c602:	b108      	cbz	r0, 800c608 <ucdr_check_final_buffer_behavior_array+0x24>
 800c604:	2000      	movs	r0, #0
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	4620      	mov	r0, r4
 800c60a:	f7ff ffe7 	bl	800c5dc <ucdr_buffer_remaining>
 800c60e:	42a8      	cmp	r0, r5
 800c610:	bf28      	it	cs
 800c612:	4628      	movcs	r0, r5
 800c614:	bd38      	pop	{r3, r4, r5, pc}
 800c616:	2301      	movs	r3, #1
 800c618:	7583      	strb	r3, [r0, #22]
 800c61a:	e7f3      	b.n	800c604 <ucdr_check_final_buffer_behavior_array+0x20>

0800c61c <ucdr_advance_buffer>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4604      	mov	r4, r0
 800c620:	460d      	mov	r5, r1
 800c622:	f7ff ff57 	bl	800c4d4 <ucdr_check_buffer_available_for>
 800c626:	b178      	cbz	r0, 800c648 <ucdr_advance_buffer+0x2c>
 800c628:	6923      	ldr	r3, [r4, #16]
 800c62a:	68a2      	ldr	r2, [r4, #8]
 800c62c:	442b      	add	r3, r5
 800c62e:	6123      	str	r3, [r4, #16]
 800c630:	2301      	movs	r3, #1
 800c632:	442a      	add	r2, r5
 800c634:	7563      	strb	r3, [r4, #21]
 800c636:	60a2      	str	r2, [r4, #8]
 800c638:	bd38      	pop	{r3, r4, r5, pc}
 800c63a:	68a2      	ldr	r2, [r4, #8]
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	4402      	add	r2, r0
 800c640:	4403      	add	r3, r0
 800c642:	1a2d      	subs	r5, r5, r0
 800c644:	60a2      	str	r2, [r4, #8]
 800c646:	6123      	str	r3, [r4, #16]
 800c648:	2201      	movs	r2, #1
 800c64a:	4629      	mov	r1, r5
 800c64c:	4620      	mov	r0, r4
 800c64e:	f7ff ffc9 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 800c652:	2800      	cmp	r0, #0
 800c654:	d1f1      	bne.n	800c63a <ucdr_advance_buffer+0x1e>
 800c656:	2301      	movs	r3, #1
 800c658:	7563      	strb	r3, [r4, #21]
 800c65a:	bd38      	pop	{r3, r4, r5, pc}

0800c65c <ucdr_serialize_sequence_char>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	460e      	mov	r6, r1
 800c660:	4615      	mov	r5, r2
 800c662:	7d01      	ldrb	r1, [r0, #20]
 800c664:	4604      	mov	r4, r0
 800c666:	f7ff f979 	bl	800b95c <ucdr_serialize_endian_uint32_t>
 800c66a:	b90d      	cbnz	r5, 800c670 <ucdr_serialize_sequence_char+0x14>
 800c66c:	2001      	movs	r0, #1
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	7d21      	ldrb	r1, [r4, #20]
 800c672:	462b      	mov	r3, r5
 800c674:	4632      	mov	r2, r6
 800c676:	4620      	mov	r0, r4
 800c678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c67c:	f008 bd5c 	b.w	8015138 <ucdr_serialize_endian_array_char>

0800c680 <ucdr_deserialize_sequence_char>:
 800c680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c684:	461d      	mov	r5, r3
 800c686:	4616      	mov	r6, r2
 800c688:	460f      	mov	r7, r1
 800c68a:	461a      	mov	r2, r3
 800c68c:	7d01      	ldrb	r1, [r0, #20]
 800c68e:	4604      	mov	r4, r0
 800c690:	f7ff fa82 	bl	800bb98 <ucdr_deserialize_endian_uint32_t>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	429e      	cmp	r6, r3
 800c698:	d208      	bcs.n	800c6ac <ucdr_deserialize_sequence_char+0x2c>
 800c69a:	2201      	movs	r2, #1
 800c69c:	75a2      	strb	r2, [r4, #22]
 800c69e:	7d21      	ldrb	r1, [r4, #20]
 800c6a0:	463a      	mov	r2, r7
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a8:	f008 bd78 	b.w	801519c <ucdr_deserialize_endian_array_char>
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1f6      	bne.n	800c69e <ucdr_deserialize_sequence_char+0x1e>
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6b6:	bf00      	nop

0800c6b8 <ucdr_serialize_sequence_uint8_t>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	460e      	mov	r6, r1
 800c6bc:	4615      	mov	r5, r2
 800c6be:	7d01      	ldrb	r1, [r0, #20]
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	f7ff f94b 	bl	800b95c <ucdr_serialize_endian_uint32_t>
 800c6c6:	b90d      	cbnz	r5, 800c6cc <ucdr_serialize_sequence_uint8_t+0x14>
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	7d21      	ldrb	r1, [r4, #20]
 800c6ce:	462b      	mov	r3, r5
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6d8:	f008 bdc4 	b.w	8015264 <ucdr_serialize_endian_array_uint8_t>

0800c6dc <ucdr_deserialize_sequence_uint8_t>:
 800c6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e0:	461d      	mov	r5, r3
 800c6e2:	4616      	mov	r6, r2
 800c6e4:	460f      	mov	r7, r1
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	7d01      	ldrb	r1, [r0, #20]
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	f7ff fa54 	bl	800bb98 <ucdr_deserialize_endian_uint32_t>
 800c6f0:	682b      	ldr	r3, [r5, #0]
 800c6f2:	429e      	cmp	r6, r3
 800c6f4:	d208      	bcs.n	800c708 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	75a2      	strb	r2, [r4, #22]
 800c6fa:	7d21      	ldrb	r1, [r4, #20]
 800c6fc:	463a      	mov	r2, r7
 800c6fe:	4620      	mov	r0, r4
 800c700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	f008 be12 	b.w	801532c <ucdr_deserialize_endian_array_uint8_t>
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1f6      	bne.n	800c6fa <ucdr_deserialize_sequence_uint8_t+0x1e>
 800c70c:	2001      	movs	r0, #1
 800c70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c712:	bf00      	nop

0800c714 <ucdr_serialize_sequence_int32_t>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	460e      	mov	r6, r1
 800c718:	4615      	mov	r5, r2
 800c71a:	7d01      	ldrb	r1, [r0, #20]
 800c71c:	4604      	mov	r4, r0
 800c71e:	f7ff f91d 	bl	800b95c <ucdr_serialize_endian_uint32_t>
 800c722:	b90d      	cbnz	r5, 800c728 <ucdr_serialize_sequence_int32_t+0x14>
 800c724:	2001      	movs	r0, #1
 800c726:	bd70      	pop	{r4, r5, r6, pc}
 800c728:	7d21      	ldrb	r1, [r4, #20]
 800c72a:	462b      	mov	r3, r5
 800c72c:	4632      	mov	r2, r6
 800c72e:	4620      	mov	r0, r4
 800c730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c734:	f008 be2c 	b.w	8015390 <ucdr_serialize_endian_array_int32_t>

0800c738 <ucdr_deserialize_sequence_int32_t>:
 800c738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c73c:	461d      	mov	r5, r3
 800c73e:	4616      	mov	r6, r2
 800c740:	460f      	mov	r7, r1
 800c742:	461a      	mov	r2, r3
 800c744:	7d01      	ldrb	r1, [r0, #20]
 800c746:	4604      	mov	r4, r0
 800c748:	f7ff fa26 	bl	800bb98 <ucdr_deserialize_endian_uint32_t>
 800c74c:	682b      	ldr	r3, [r5, #0]
 800c74e:	429e      	cmp	r6, r3
 800c750:	d208      	bcs.n	800c764 <ucdr_deserialize_sequence_int32_t+0x2c>
 800c752:	2201      	movs	r2, #1
 800c754:	75a2      	strb	r2, [r4, #22]
 800c756:	7d21      	ldrb	r1, [r4, #20]
 800c758:	463a      	mov	r2, r7
 800c75a:	4620      	mov	r0, r4
 800c75c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c760:	f008 be6c 	b.w	801543c <ucdr_deserialize_endian_array_int32_t>
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1f6      	bne.n	800c756 <ucdr_deserialize_sequence_int32_t+0x1e>
 800c768:	2001      	movs	r0, #1
 800c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c76e:	bf00      	nop

0800c770 <uxr_buffer_delete_entity>:
 800c770:	b510      	push	{r4, lr}
 800c772:	2300      	movs	r3, #0
 800c774:	b08e      	sub	sp, #56	@ 0x38
 800c776:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c77a:	2303      	movs	r3, #3
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	2204      	movs	r2, #4
 800c780:	ab06      	add	r3, sp, #24
 800c782:	4604      	mov	r4, r0
 800c784:	f001 fae2 	bl	800dd4c <uxr_prepare_stream_to_write_submessage>
 800c788:	b918      	cbnz	r0, 800c792 <uxr_buffer_delete_entity+0x22>
 800c78a:	4604      	mov	r4, r0
 800c78c:	4620      	mov	r0, r4
 800c78e:	b00e      	add	sp, #56	@ 0x38
 800c790:	bd10      	pop	{r4, pc}
 800c792:	9902      	ldr	r1, [sp, #8]
 800c794:	aa05      	add	r2, sp, #20
 800c796:	4620      	mov	r0, r4
 800c798:	f001 fc12 	bl	800dfc0 <uxr_init_base_object_request>
 800c79c:	a905      	add	r1, sp, #20
 800c79e:	4604      	mov	r4, r0
 800c7a0:	a806      	add	r0, sp, #24
 800c7a2:	f003 fa99 	bl	800fcd8 <uxr_serialize_DELETE_Payload>
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	b00e      	add	sp, #56	@ 0x38
 800c7aa:	bd10      	pop	{r4, pc}

0800c7ac <uxr_common_create_entity>:
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c7b2:	b08c      	sub	sp, #48	@ 0x30
 800c7b4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c7b8:	f1bc 0f01 	cmp.w	ip, #1
 800c7bc:	bf08      	it	eq
 800c7be:	f003 0201 	andeq.w	r2, r3, #1
 800c7c2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c7c6:	bf18      	it	ne
 800c7c8:	2200      	movne	r2, #0
 800c7ca:	330e      	adds	r3, #14
 800c7cc:	441a      	add	r2, r3
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e9cd 3100 	strd	r3, r1, [sp]
 800c7d4:	b292      	uxth	r2, r2
 800c7d6:	9903      	ldr	r1, [sp, #12]
 800c7d8:	ab04      	add	r3, sp, #16
 800c7da:	4604      	mov	r4, r0
 800c7dc:	f001 fab6 	bl	800dd4c <uxr_prepare_stream_to_write_submessage>
 800c7e0:	b918      	cbnz	r0, 800c7ea <uxr_common_create_entity+0x3e>
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	b00c      	add	sp, #48	@ 0x30
 800c7e8:	bd10      	pop	{r4, pc}
 800c7ea:	9902      	ldr	r1, [sp, #8]
 800c7ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f001 fbe6 	bl	800dfc0 <uxr_init_base_object_request>
 800c7f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	a804      	add	r0, sp, #16
 800c7fa:	f003 f9b7 	bl	800fb6c <uxr_serialize_CREATE_Payload>
 800c7fe:	4620      	mov	r0, r4
 800c800:	b00c      	add	sp, #48	@ 0x30
 800c802:	bd10      	pop	{r4, pc}

0800c804 <uxr_buffer_create_participant_bin>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c80a:	ac11      	add	r4, sp, #68	@ 0x44
 800c80c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c810:	2303      	movs	r3, #3
 800c812:	7223      	strb	r3, [r4, #8]
 800c814:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c816:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c81a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c81e:	2201      	movs	r2, #1
 800c820:	2100      	movs	r1, #0
 800c822:	4605      	mov	r5, r0
 800c824:	7122      	strb	r2, [r4, #4]
 800c826:	f88d 1014 	strb.w	r1, [sp, #20]
 800c82a:	b1cb      	cbz	r3, 800c860 <uxr_buffer_create_participant_bin+0x5c>
 800c82c:	f88d 201c 	strb.w	r2, [sp, #28]
 800c830:	9308      	str	r3, [sp, #32]
 800c832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c836:	a915      	add	r1, sp, #84	@ 0x54
 800c838:	a809      	add	r0, sp, #36	@ 0x24
 800c83a:	f7ff fe9f 	bl	800c57c <ucdr_init_buffer>
 800c83e:	a905      	add	r1, sp, #20
 800c840:	a809      	add	r0, sp, #36	@ 0x24
 800c842:	f002 fd9b 	bl	800f37c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c848:	9600      	str	r6, [sp, #0]
 800c84a:	9401      	str	r4, [sp, #4]
 800c84c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c850:	60e3      	str	r3, [r4, #12]
 800c852:	4628      	mov	r0, r5
 800c854:	b29b      	uxth	r3, r3
 800c856:	f7ff ffa9 	bl	800c7ac <uxr_common_create_entity>
 800c85a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c85e:	bd70      	pop	{r4, r5, r6, pc}
 800c860:	f88d 301c 	strb.w	r3, [sp, #28]
 800c864:	e7e5      	b.n	800c832 <uxr_buffer_create_participant_bin+0x2e>
 800c866:	bf00      	nop

0800c868 <uxr_buffer_create_topic_bin>:
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c86e:	4605      	mov	r5, r0
 800c870:	9105      	str	r1, [sp, #20]
 800c872:	4618      	mov	r0, r3
 800c874:	a997      	add	r1, sp, #604	@ 0x25c
 800c876:	2302      	movs	r3, #2
 800c878:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c87c:	9204      	str	r2, [sp, #16]
 800c87e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c882:	f000 fa31 	bl	800cce8 <uxr_object_id_to_raw>
 800c886:	2303      	movs	r3, #3
 800c888:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c88c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c88e:	9306      	str	r3, [sp, #24]
 800c890:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c892:	930a      	str	r3, [sp, #40]	@ 0x28
 800c894:	2301      	movs	r3, #1
 800c896:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c89a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c89e:	2300      	movs	r3, #0
 800c8a0:	a917      	add	r1, sp, #92	@ 0x5c
 800c8a2:	a80b      	add	r0, sp, #44	@ 0x2c
 800c8a4:	f88d 301c 	strb.w	r3, [sp, #28]
 800c8a8:	f7ff fe68 	bl	800c57c <ucdr_init_buffer>
 800c8ac:	a906      	add	r1, sp, #24
 800c8ae:	a80b      	add	r0, sp, #44	@ 0x2c
 800c8b0:	f002 fd86 	bl	800f3c0 <uxr_serialize_OBJK_Topic_Binary>
 800c8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8b6:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8b8:	ac13      	add	r4, sp, #76	@ 0x4c
 800c8ba:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c8be:	9600      	str	r6, [sp, #0]
 800c8c0:	9401      	str	r4, [sp, #4]
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f7ff ff71 	bl	800c7ac <uxr_common_create_entity>
 800c8ca:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}

0800c8d0 <uxr_buffer_create_publisher_bin>:
 800c8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8d2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	9105      	str	r1, [sp, #20]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	2603      	movs	r6, #3
 800c8de:	a992      	add	r1, sp, #584	@ 0x248
 800c8e0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c8e4:	9204      	str	r2, [sp, #16]
 800c8e6:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c8ea:	f000 f9fd 	bl	800cce8 <uxr_object_id_to_raw>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8f4:	a912      	add	r1, sp, #72	@ 0x48
 800c8f6:	a806      	add	r0, sp, #24
 800c8f8:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c8fc:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c900:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c904:	f7ff fe3a 	bl	800c57c <ucdr_init_buffer>
 800c908:	a993      	add	r1, sp, #588	@ 0x24c
 800c90a:	a806      	add	r0, sp, #24
 800c90c:	f002 fe0e 	bl	800f52c <uxr_serialize_OBJK_Publisher_Binary>
 800c910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c912:	9311      	str	r3, [sp, #68]	@ 0x44
 800c914:	ac0e      	add	r4, sp, #56	@ 0x38
 800c916:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c91a:	9700      	str	r7, [sp, #0]
 800c91c:	9401      	str	r4, [sp, #4]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4628      	mov	r0, r5
 800c922:	f7ff ff43 	bl	800c7ac <uxr_common_create_entity>
 800c926:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c92a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c92c <uxr_buffer_create_subscriber_bin>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c932:	4605      	mov	r5, r0
 800c934:	9105      	str	r1, [sp, #20]
 800c936:	4618      	mov	r0, r3
 800c938:	a992      	add	r1, sp, #584	@ 0x248
 800c93a:	2304      	movs	r3, #4
 800c93c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c940:	9204      	str	r2, [sp, #16]
 800c942:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c946:	f000 f9cf 	bl	800cce8 <uxr_object_id_to_raw>
 800c94a:	2203      	movs	r2, #3
 800c94c:	2300      	movs	r3, #0
 800c94e:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800c952:	a912      	add	r1, sp, #72	@ 0x48
 800c954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c958:	a806      	add	r0, sp, #24
 800c95a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c95e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c962:	f7ff fe0b 	bl	800c57c <ucdr_init_buffer>
 800c966:	a993      	add	r1, sp, #588	@ 0x24c
 800c968:	a806      	add	r0, sp, #24
 800c96a:	f002 fe91 	bl	800f690 <uxr_serialize_OBJK_Subscriber_Binary>
 800c96e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c970:	9311      	str	r3, [sp, #68]	@ 0x44
 800c972:	ac0e      	add	r4, sp, #56	@ 0x38
 800c974:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c978:	9600      	str	r6, [sp, #0]
 800c97a:	9401      	str	r4, [sp, #4]
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	4628      	mov	r0, r5
 800c980:	f7ff ff14 	bl	800c7ac <uxr_common_create_entity>
 800c984:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	bf00      	nop

0800c98c <uxr_buffer_create_datawriter_bin>:
 800c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c98e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c992:	ac1d      	add	r4, sp, #116	@ 0x74
 800c994:	9105      	str	r1, [sp, #20]
 800c996:	4605      	mov	r5, r0
 800c998:	a9a1      	add	r1, sp, #644	@ 0x284
 800c99a:	4618      	mov	r0, r3
 800c99c:	2305      	movs	r3, #5
 800c99e:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800c9a2:	9204      	str	r2, [sp, #16]
 800c9a4:	7123      	strb	r3, [r4, #4]
 800c9a6:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800c9aa:	f000 f99d 	bl	800cce8 <uxr_object_id_to_raw>
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	a90e      	add	r1, sp, #56	@ 0x38
 800c9b2:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c9b4:	7223      	strb	r3, [r4, #8]
 800c9b6:	f000 f997 	bl	800cce8 <uxr_object_id_to_raw>
 800c9ba:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800c9be:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	3f00      	subs	r7, #0
 800c9c6:	fab3 f383 	clz	r3, r3
 800c9ca:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800c9ce:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800c9d2:	bf18      	it	ne
 800c9d4:	2701      	movne	r7, #1
 800c9d6:	095b      	lsrs	r3, r3, #5
 800c9d8:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800c9dc:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800c9e0:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800c9ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c9ee:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800c9f2:	b919      	cbnz	r1, 800c9fc <uxr_buffer_create_datawriter_bin+0x70>
 800c9f4:	f043 0302 	orr.w	r3, r3, #2
 800c9f8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c9fc:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800ca00:	2a01      	cmp	r2, #1
 800ca02:	d022      	beq.n	800ca4a <uxr_buffer_create_datawriter_bin+0xbe>
 800ca04:	2a03      	cmp	r2, #3
 800ca06:	d01b      	beq.n	800ca40 <uxr_buffer_create_datawriter_bin+0xb4>
 800ca08:	b91a      	cbnz	r2, 800ca12 <uxr_buffer_create_datawriter_bin+0x86>
 800ca0a:	f043 0308 	orr.w	r3, r3, #8
 800ca0e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ca12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca16:	a921      	add	r1, sp, #132	@ 0x84
 800ca18:	a806      	add	r0, sp, #24
 800ca1a:	f7ff fdaf 	bl	800c57c <ucdr_init_buffer>
 800ca1e:	a90e      	add	r1, sp, #56	@ 0x38
 800ca20:	a806      	add	r0, sp, #24
 800ca22:	f002 fed7 	bl	800f7d4 <uxr_serialize_OBJK_DataWriter_Binary>
 800ca26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca28:	9600      	str	r6, [sp, #0]
 800ca2a:	9401      	str	r4, [sp, #4]
 800ca2c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ca30:	60e3      	str	r3, [r4, #12]
 800ca32:	4628      	mov	r0, r5
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	f7ff feb9 	bl	800c7ac <uxr_common_create_entity>
 800ca3a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800ca3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca40:	f043 0320 	orr.w	r3, r3, #32
 800ca44:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ca48:	e7e3      	b.n	800ca12 <uxr_buffer_create_datawriter_bin+0x86>
 800ca4a:	f043 0310 	orr.w	r3, r3, #16
 800ca4e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ca52:	e7de      	b.n	800ca12 <uxr_buffer_create_datawriter_bin+0x86>

0800ca54 <uxr_buffer_create_datareader_bin>:
 800ca54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca56:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800ca5a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ca5c:	9105      	str	r1, [sp, #20]
 800ca5e:	4605      	mov	r5, r0
 800ca60:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ca62:	4618      	mov	r0, r3
 800ca64:	2306      	movs	r3, #6
 800ca66:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800ca6a:	9204      	str	r2, [sp, #16]
 800ca6c:	7123      	strb	r3, [r4, #4]
 800ca6e:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800ca72:	f000 f939 	bl	800cce8 <uxr_object_id_to_raw>
 800ca76:	2303      	movs	r3, #3
 800ca78:	a90e      	add	r1, sp, #56	@ 0x38
 800ca7a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ca7c:	7223      	strb	r3, [r4, #8]
 800ca7e:	f000 f933 	bl	800cce8 <uxr_object_id_to_raw>
 800ca82:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800ca86:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	3f00      	subs	r7, #0
 800ca8e:	fab3 f383 	clz	r3, r3
 800ca92:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800ca96:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800ca9a:	bf18      	it	ne
 800ca9c:	2701      	movne	r7, #1
 800ca9e:	095b      	lsrs	r3, r3, #5
 800caa0:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800caa4:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800caa8:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800caac:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800cab0:	2201      	movs	r2, #1
 800cab2:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800cab6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800caba:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800cabe:	b919      	cbnz	r1, 800cac8 <uxr_buffer_create_datareader_bin+0x74>
 800cac0:	f043 0302 	orr.w	r3, r3, #2
 800cac4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cac8:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800cacc:	2a01      	cmp	r2, #1
 800cace:	d022      	beq.n	800cb16 <uxr_buffer_create_datareader_bin+0xc2>
 800cad0:	2a03      	cmp	r2, #3
 800cad2:	d01b      	beq.n	800cb0c <uxr_buffer_create_datareader_bin+0xb8>
 800cad4:	b91a      	cbnz	r2, 800cade <uxr_buffer_create_datareader_bin+0x8a>
 800cad6:	f043 0308 	orr.w	r3, r3, #8
 800cada:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cae2:	a923      	add	r1, sp, #140	@ 0x8c
 800cae4:	a806      	add	r0, sp, #24
 800cae6:	f7ff fd49 	bl	800c57c <ucdr_init_buffer>
 800caea:	a90e      	add	r1, sp, #56	@ 0x38
 800caec:	a806      	add	r0, sp, #24
 800caee:	f002 fe35 	bl	800f75c <uxr_serialize_OBJK_DataReader_Binary>
 800caf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caf4:	9600      	str	r6, [sp, #0]
 800caf6:	9401      	str	r4, [sp, #4]
 800caf8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cafc:	60e3      	str	r3, [r4, #12]
 800cafe:	4628      	mov	r0, r5
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	f7ff fe53 	bl	800c7ac <uxr_common_create_entity>
 800cb06:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb0c:	f043 0320 	orr.w	r3, r3, #32
 800cb10:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cb14:	e7e3      	b.n	800cade <uxr_buffer_create_datareader_bin+0x8a>
 800cb16:	f043 0310 	orr.w	r3, r3, #16
 800cb1a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cb1e:	e7de      	b.n	800cade <uxr_buffer_create_datareader_bin+0x8a>

0800cb20 <get_custom_error>:
 800cb20:	4b01      	ldr	r3, [pc, #4]	@ (800cb28 <get_custom_error+0x8>)
 800cb22:	7818      	ldrb	r0, [r3, #0]
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	2000ea18 	.word	0x2000ea18

0800cb2c <recv_custom_msg>:
 800cb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	b089      	sub	sp, #36	@ 0x24
 800cb32:	4693      	mov	fp, r2
 800cb34:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800cb38:	9104      	str	r1, [sp, #16]
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800cb40:	9305      	str	r3, [sp, #20]
 800cb42:	4604      	mov	r4, r0
 800cb44:	f88d 101e 	strb.w	r1, [sp, #30]
 800cb48:	b332      	cbz	r2, 800cb98 <recv_custom_msg+0x6c>
 800cb4a:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800cb4e:	f10d 091f 	add.w	r9, sp, #31
 800cb52:	f10d 0814 	add.w	r8, sp, #20
 800cb56:	f10d 071e 	add.w	r7, sp, #30
 800cb5a:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800cb5e:	e004      	b.n	800cb6a <recv_custom_msg+0x3e>
 800cb60:	9b05      	ldr	r3, [sp, #20]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	dd10      	ble.n	800cb88 <recv_custom_msg+0x5c>
 800cb66:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800cb6a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cb6e:	e9cd 6700 	strd	r6, r7, [sp]
 800cb72:	4623      	mov	r3, r4
 800cb74:	4622      	mov	r2, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	4650      	mov	r0, sl
 800cb7a:	f001 fc33 	bl	800e3e4 <uxr_read_framed_msg>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d0ee      	beq.n	800cb60 <recv_custom_msg+0x34>
 800cb82:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cb86:	b1a3      	cbz	r3, 800cbb2 <recv_custom_msg+0x86>
 800cb88:	4b0e      	ldr	r3, [pc, #56]	@ (800cbc4 <recv_custom_msg+0x98>)
 800cb8a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800cb8e:	701a      	strb	r2, [r3, #0]
 800cb90:	2000      	movs	r0, #0
 800cb92:	b009      	add	sp, #36	@ 0x24
 800cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb98:	f10d 021f 	add.w	r2, sp, #31
 800cb9c:	9200      	str	r2, [sp, #0]
 800cb9e:	4601      	mov	r1, r0
 800cba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cba4:	47a8      	blx	r5
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d0ee      	beq.n	800cb88 <recv_custom_msg+0x5c>
 800cbaa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1ea      	bne.n	800cb88 <recv_custom_msg+0x5c>
 800cbb2:	9b04      	ldr	r3, [sp, #16]
 800cbb4:	f8cb 0000 	str.w	r0, [fp]
 800cbb8:	2001      	movs	r0, #1
 800cbba:	601c      	str	r4, [r3, #0]
 800cbbc:	b009      	add	sp, #36	@ 0x24
 800cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc2:	bf00      	nop
 800cbc4:	2000ea18 	.word	0x2000ea18

0800cbc8 <send_custom_msg>:
 800cbc8:	b570      	push	{r4, r5, r6, lr}
 800cbca:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800cbce:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	4616      	mov	r6, r2
 800cbd6:	b965      	cbnz	r5, 800cbf2 <send_custom_msg+0x2a>
 800cbd8:	f10d 0317 	add.w	r3, sp, #23
 800cbdc:	47a0      	blx	r4
 800cbde:	b108      	cbz	r0, 800cbe4 <send_custom_msg+0x1c>
 800cbe0:	42b0      	cmp	r0, r6
 800cbe2:	d014      	beq.n	800cc0e <send_custom_msg+0x46>
 800cbe4:	4b0b      	ldr	r3, [pc, #44]	@ (800cc14 <send_custom_msg+0x4c>)
 800cbe6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	2000      	movs	r0, #0
 800cbee:	b006      	add	sp, #24
 800cbf0:	bd70      	pop	{r4, r5, r6, pc}
 800cbf2:	f10d 0217 	add.w	r2, sp, #23
 800cbf6:	9202      	str	r2, [sp, #8]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	e9cd 6200 	strd	r6, r2, [sp]
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4602      	mov	r2, r0
 800cc02:	4621      	mov	r1, r4
 800cc04:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800cc08:	f001 fa0e 	bl	800e028 <uxr_write_framed_msg>
 800cc0c:	e7e7      	b.n	800cbde <send_custom_msg+0x16>
 800cc0e:	2001      	movs	r0, #1
 800cc10:	b006      	add	sp, #24
 800cc12:	bd70      	pop	{r4, r5, r6, pc}
 800cc14:	2000ea18 	.word	0x2000ea18

0800cc18 <uxr_set_custom_transport_callbacks>:
 800cc18:	b410      	push	{r4}
 800cc1a:	9c01      	ldr	r4, [sp, #4]
 800cc1c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800cc20:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800cc24:	9b02      	ldr	r3, [sp, #8]
 800cc26:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800cc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc2e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800cc32:	4770      	bx	lr

0800cc34 <uxr_init_custom_transport>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800cc3a:	b303      	cbz	r3, 800cc7e <uxr_init_custom_transport+0x4a>
 800cc3c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800cc40:	4604      	mov	r4, r0
 800cc42:	b1e2      	cbz	r2, 800cc7e <uxr_init_custom_transport+0x4a>
 800cc44:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800cc48:	b1ca      	cbz	r2, 800cc7e <uxr_init_custom_transport+0x4a>
 800cc4a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800cc4e:	b1b2      	cbz	r2, 800cc7e <uxr_init_custom_transport+0x4a>
 800cc50:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800cc54:	4798      	blx	r3
 800cc56:	4605      	mov	r5, r0
 800cc58:	b188      	cbz	r0, 800cc7e <uxr_init_custom_transport+0x4a>
 800cc5a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800cc5e:	b98b      	cbnz	r3, 800cc84 <uxr_init_custom_transport+0x50>
 800cc60:	490b      	ldr	r1, [pc, #44]	@ (800cc90 <uxr_init_custom_transport+0x5c>)
 800cc62:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <uxr_init_custom_transport+0x60>)
 800cc64:	4a0c      	ldr	r2, [pc, #48]	@ (800cc98 <uxr_init_custom_transport+0x64>)
 800cc66:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800cc6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc6e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800cc72:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800cc76:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	bd38      	pop	{r3, r4, r5, pc}
 800cc7e:	2500      	movs	r5, #0
 800cc80:	4628      	mov	r0, r5
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	2100      	movs	r1, #0
 800cc86:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800cc8a:	f001 f9c7 	bl	800e01c <uxr_init_framing_io>
 800cc8e:	e7e7      	b.n	800cc60 <uxr_init_custom_transport+0x2c>
 800cc90:	0800cbc9 	.word	0x0800cbc9
 800cc94:	0800cb2d 	.word	0x0800cb2d
 800cc98:	0800cb21 	.word	0x0800cb21

0800cc9c <uxr_close_custom_transport>:
 800cc9c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800cca0:	4718      	bx	r3
 800cca2:	bf00      	nop

0800cca4 <uxr_object_id>:
 800cca4:	b082      	sub	sp, #8
 800cca6:	2300      	movs	r3, #0
 800cca8:	f88d 1006 	strb.w	r1, [sp, #6]
 800ccac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ccb0:	f360 030f 	bfi	r3, r0, #0, #16
 800ccb4:	f362 431f 	bfi	r3, r2, #16, #16
 800ccb8:	4618      	mov	r0, r3
 800ccba:	b002      	add	sp, #8
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop

0800ccc0 <uxr_object_id_from_raw>:
 800ccc0:	7843      	ldrb	r3, [r0, #1]
 800ccc2:	7801      	ldrb	r1, [r0, #0]
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	f003 020f 	and.w	r2, r3, #15
 800ccca:	f88d 2006 	strb.w	r2, [sp, #6]
 800ccce:	091b      	lsrs	r3, r3, #4
 800ccd0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ccd4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ccd8:	2000      	movs	r0, #0
 800ccda:	f363 000f 	bfi	r0, r3, #0, #16
 800ccde:	f362 401f 	bfi	r0, r2, #16, #16
 800cce2:	b002      	add	sp, #8
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop

0800cce8 <uxr_object_id_to_raw>:
 800cce8:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ccec:	b082      	sub	sp, #8
 800ccee:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800ccf2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800ccf6:	700a      	strb	r2, [r1, #0]
 800ccf8:	704b      	strb	r3, [r1, #1]
 800ccfa:	b002      	add	sp, #8
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop

0800cd00 <uxr_ping_agent_session>:
 800cd00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd04:	4616      	mov	r6, r2
 800cd06:	b091      	sub	sp, #68	@ 0x44
 800cd08:	2210      	movs	r2, #16
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	460f      	mov	r7, r1
 800cd0e:	a808      	add	r0, sp, #32
 800cd10:	eb0d 0102 	add.w	r1, sp, r2
 800cd14:	f7ff fc32 	bl	800c57c <ucdr_init_buffer>
 800cd18:	4b20      	ldr	r3, [pc, #128]	@ (800cd9c <uxr_ping_agent_session+0x9c>)
 800cd1a:	2400      	movs	r4, #0
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800cd22:	9400      	str	r4, [sp, #0]
 800cd24:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800cd28:	f04f 0802 	mov.w	r8, #2
 800cd2c:	7829      	ldrb	r1, [r5, #0]
 800cd2e:	f8ad 3008 	strh.w	r3, [sp, #8]
 800cd32:	4622      	mov	r2, r4
 800cd34:	4623      	mov	r3, r4
 800cd36:	a808      	add	r0, sp, #32
 800cd38:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd3c:	f002 f8ee 	bl	800ef1c <uxr_serialize_message_header>
 800cd40:	4641      	mov	r1, r8
 800cd42:	4623      	mov	r3, r4
 800cd44:	2208      	movs	r2, #8
 800cd46:	a808      	add	r0, sp, #32
 800cd48:	f001 feea 	bl	800eb20 <uxr_buffer_submessage_header>
 800cd4c:	a902      	add	r1, sp, #8
 800cd4e:	4680      	mov	r8, r0
 800cd50:	a808      	add	r0, sp, #32
 800cd52:	f002 ff99 	bl	800fc88 <uxr_serialize_GET_INFO_Payload>
 800cd56:	f1b8 0f00 	cmp.w	r8, #0
 800cd5a:	d000      	beq.n	800cd5e <uxr_ping_agent_session+0x5e>
 800cd5c:	b918      	cbnz	r0, 800cd66 <uxr_ping_agent_session+0x66>
 800cd5e:	2000      	movs	r0, #0
 800cd60:	b011      	add	sp, #68	@ 0x44
 800cd62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd66:	a808      	add	r0, sp, #32
 800cd68:	f7ff fc34 	bl	800c5d4 <ucdr_buffer_length>
 800cd6c:	4680      	mov	r8, r0
 800cd6e:	2e00      	cmp	r6, #0
 800cd70:	d0f5      	beq.n	800cd5e <uxr_ping_agent_session+0x5e>
 800cd72:	46a1      	mov	r9, r4
 800cd74:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800cd76:	4642      	mov	r2, r8
 800cd78:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cd7c:	a904      	add	r1, sp, #16
 800cd7e:	47a0      	blx	r4
 800cd80:	4639      	mov	r1, r7
 800cd82:	4604      	mov	r4, r0
 800cd84:	4628      	mov	r0, r5
 800cd86:	f000 fdd5 	bl	800d934 <uxr_run_session_until_pong>
 800cd8a:	4020      	ands	r0, r4
 800cd8c:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800cd90:	f109 0901 	add.w	r9, r9, #1
 800cd94:	d1e4      	bne.n	800cd60 <uxr_ping_agent_session+0x60>
 800cd96:	454e      	cmp	r6, r9
 800cd98:	d1ec      	bne.n	800cd74 <uxr_ping_agent_session+0x74>
 800cd9a:	e7e0      	b.n	800cd5e <uxr_ping_agent_session+0x5e>
 800cd9c:	080188dc 	.word	0x080188dc

0800cda0 <uxr_ping_agent_attempts>:
 800cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	b0d3      	sub	sp, #332	@ 0x14c
 800cda6:	4606      	mov	r6, r0
 800cda8:	4688      	mov	r8, r1
 800cdaa:	a810      	add	r0, sp, #64	@ 0x40
 800cdac:	a90c      	add	r1, sp, #48	@ 0x30
 800cdae:	4692      	mov	sl, r2
 800cdb0:	2210      	movs	r2, #16
 800cdb2:	f7ff fbe3 	bl	800c57c <ucdr_init_buffer>
 800cdb6:	4b56      	ldr	r3, [pc, #344]	@ (800cf10 <uxr_ping_agent_attempts+0x170>)
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800cdbe:	2400      	movs	r4, #0
 800cdc0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800cdc4:	2502      	movs	r5, #2
 800cdc6:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800cdca:	4622      	mov	r2, r4
 800cdcc:	4623      	mov	r3, r4
 800cdce:	2180      	movs	r1, #128	@ 0x80
 800cdd0:	a810      	add	r0, sp, #64	@ 0x40
 800cdd2:	9400      	str	r4, [sp, #0]
 800cdd4:	9521      	str	r5, [sp, #132]	@ 0x84
 800cdd6:	f002 f8a1 	bl	800ef1c <uxr_serialize_message_header>
 800cdda:	4629      	mov	r1, r5
 800cddc:	4623      	mov	r3, r4
 800cdde:	2208      	movs	r2, #8
 800cde0:	a810      	add	r0, sp, #64	@ 0x40
 800cde2:	f001 fe9d 	bl	800eb20 <uxr_buffer_submessage_header>
 800cde6:	a920      	add	r1, sp, #128	@ 0x80
 800cde8:	4605      	mov	r5, r0
 800cdea:	a810      	add	r0, sp, #64	@ 0x40
 800cdec:	f002 ff4c 	bl	800fc88 <uxr_serialize_GET_INFO_Payload>
 800cdf0:	4005      	ands	r5, r0
 800cdf2:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800cdf6:	d104      	bne.n	800ce02 <uxr_ping_agent_attempts+0x62>
 800cdf8:	2500      	movs	r5, #0
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	b053      	add	sp, #332	@ 0x14c
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	a810      	add	r0, sp, #64	@ 0x40
 800ce04:	f7ff fbe6 	bl	800c5d4 <ucdr_buffer_length>
 800ce08:	9004      	str	r0, [sp, #16]
 800ce0a:	f1ba 0f00 	cmp.w	sl, #0
 800ce0e:	d0f3      	beq.n	800cdf8 <uxr_ping_agent_attempts+0x58>
 800ce10:	9505      	str	r5, [sp, #20]
 800ce12:	46a1      	mov	r9, r4
 800ce14:	4627      	mov	r7, r4
 800ce16:	4655      	mov	r5, sl
 800ce18:	e9d6 0300 	ldrd	r0, r3, [r6]
 800ce1c:	9a04      	ldr	r2, [sp, #16]
 800ce1e:	a90c      	add	r1, sp, #48	@ 0x30
 800ce20:	4798      	blx	r3
 800ce22:	f001 fec3 	bl	800ebac <uxr_millis>
 800ce26:	46c2      	mov	sl, r8
 800ce28:	4604      	mov	r4, r0
 800ce2a:	9503      	str	r5, [sp, #12]
 800ce2c:	6830      	ldr	r0, [r6, #0]
 800ce2e:	68b5      	ldr	r5, [r6, #8]
 800ce30:	9708      	str	r7, [sp, #32]
 800ce32:	4643      	mov	r3, r8
 800ce34:	aa09      	add	r2, sp, #36	@ 0x24
 800ce36:	a908      	add	r1, sp, #32
 800ce38:	47a8      	blx	r5
 800ce3a:	4683      	mov	fp, r0
 800ce3c:	b998      	cbnz	r0, 800ce66 <uxr_ping_agent_attempts+0xc6>
 800ce3e:	f001 feb5 	bl	800ebac <uxr_millis>
 800ce42:	1b00      	subs	r0, r0, r4
 800ce44:	ebaa 0a00 	sub.w	sl, sl, r0
 800ce48:	f001 feb0 	bl	800ebac <uxr_millis>
 800ce4c:	f1ba 0f00 	cmp.w	sl, #0
 800ce50:	4604      	mov	r4, r0
 800ce52:	dceb      	bgt.n	800ce2c <uxr_ping_agent_attempts+0x8c>
 800ce54:	9d03      	ldr	r5, [sp, #12]
 800ce56:	f109 0901 	add.w	r9, r9, #1
 800ce5a:	f1bb 0f00 	cmp.w	fp, #0
 800ce5e:	d12a      	bne.n	800ceb6 <uxr_ping_agent_attempts+0x116>
 800ce60:	45a9      	cmp	r9, r5
 800ce62:	d1d9      	bne.n	800ce18 <uxr_ping_agent_attempts+0x78>
 800ce64:	e7c8      	b.n	800cdf8 <uxr_ping_agent_attempts+0x58>
 800ce66:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ce6a:	a818      	add	r0, sp, #96	@ 0x60
 800ce6c:	f7ff fb86 	bl	800c57c <ucdr_init_buffer>
 800ce70:	ab07      	add	r3, sp, #28
 800ce72:	f10d 0219 	add.w	r2, sp, #25
 800ce76:	a918      	add	r1, sp, #96	@ 0x60
 800ce78:	a80a      	add	r0, sp, #40	@ 0x28
 800ce7a:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 800ce7e:	f001 f859 	bl	800df34 <uxr_read_session_header>
 800ce82:	22c8      	movs	r2, #200	@ 0xc8
 800ce84:	2100      	movs	r1, #0
 800ce86:	a820      	add	r0, sp, #128	@ 0x80
 800ce88:	f00a fdc8 	bl	8017a1c <memset>
 800ce8c:	a818      	add	r0, sp, #96	@ 0x60
 800ce8e:	f7ff fba5 	bl	800c5dc <ucdr_buffer_remaining>
 800ce92:	2804      	cmp	r0, #4
 800ce94:	d814      	bhi.n	800cec0 <uxr_ping_agent_attempts+0x120>
 800ce96:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 800ce9a:	f001 fe87 	bl	800ebac <uxr_millis>
 800ce9e:	1b00      	subs	r0, r0, r4
 800cea0:	ebaa 0a00 	sub.w	sl, sl, r0
 800cea4:	f001 fe82 	bl	800ebac <uxr_millis>
 800cea8:	f1ba 0f00 	cmp.w	sl, #0
 800ceac:	4604      	mov	r4, r0
 800ceae:	dd28      	ble.n	800cf02 <uxr_ping_agent_attempts+0x162>
 800ceb0:	f1bb 0f00 	cmp.w	fp, #0
 800ceb4:	d0ba      	beq.n	800ce2c <uxr_ping_agent_attempts+0x8c>
 800ceb6:	9d05      	ldr	r5, [sp, #20]
 800ceb8:	4628      	mov	r0, r5
 800ceba:	b053      	add	sp, #332	@ 0x14c
 800cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	f10d 031e 	add.w	r3, sp, #30
 800cec4:	f10d 021b 	add.w	r2, sp, #27
 800cec8:	f10d 011a 	add.w	r1, sp, #26
 800cecc:	a818      	add	r0, sp, #96	@ 0x60
 800cece:	f88d 701a 	strb.w	r7, [sp, #26]
 800ced2:	f88d 701b 	strb.w	r7, [sp, #27]
 800ced6:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ceda:	f002 f86f 	bl	800efbc <uxr_deserialize_submessage_header>
 800cede:	a818      	add	r0, sp, #96	@ 0x60
 800cee0:	f7ff fb7c 	bl	800c5dc <ucdr_buffer_remaining>
 800cee4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800cee8:	4298      	cmp	r0, r3
 800ceea:	d3d4      	bcc.n	800ce96 <uxr_ping_agent_attempts+0xf6>
 800ceec:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800cef0:	2b06      	cmp	r3, #6
 800cef2:	d1d0      	bne.n	800ce96 <uxr_ping_agent_attempts+0xf6>
 800cef4:	a918      	add	r1, sp, #96	@ 0x60
 800cef6:	a820      	add	r0, sp, #128	@ 0x80
 800cef8:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 800cefc:	f000 f974 	bl	800d1e8 <read_submessage_info>
 800cf00:	e7c9      	b.n	800ce96 <uxr_ping_agent_attempts+0xf6>
 800cf02:	f1bb 0b00 	subs.w	fp, fp, #0
 800cf06:	9d03      	ldr	r5, [sp, #12]
 800cf08:	bf18      	it	ne
 800cf0a:	f04f 0b01 	movne.w	fp, #1
 800cf0e:	e7a2      	b.n	800ce56 <uxr_ping_agent_attempts+0xb6>
 800cf10:	080188dc 	.word	0x080188dc

0800cf14 <on_get_fragmentation_info>:
 800cf14:	b500      	push	{lr}
 800cf16:	b08b      	sub	sp, #44	@ 0x2c
 800cf18:	4601      	mov	r1, r0
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	a802      	add	r0, sp, #8
 800cf1e:	f7ff fb2d 	bl	800c57c <ucdr_init_buffer>
 800cf22:	f10d 0305 	add.w	r3, sp, #5
 800cf26:	f10d 0206 	add.w	r2, sp, #6
 800cf2a:	a901      	add	r1, sp, #4
 800cf2c:	a802      	add	r0, sp, #8
 800cf2e:	f001 fe11 	bl	800eb54 <uxr_read_submessage_header>
 800cf32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf36:	2b0d      	cmp	r3, #13
 800cf38:	d003      	beq.n	800cf42 <on_get_fragmentation_info+0x2e>
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	b00b      	add	sp, #44	@ 0x2c
 800cf3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf46:	f013 0f02 	tst.w	r3, #2
 800cf4a:	bf0c      	ite	eq
 800cf4c:	2001      	moveq	r0, #1
 800cf4e:	2002      	movne	r0, #2
 800cf50:	b00b      	add	sp, #44	@ 0x2c
 800cf52:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf56:	bf00      	nop

0800cf58 <read_submessage_get_info>:
 800cf58:	b570      	push	{r4, r5, r6, lr}
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800cf60:	4604      	mov	r4, r0
 800cf62:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800cf66:	460e      	mov	r6, r1
 800cf68:	a810      	add	r0, sp, #64	@ 0x40
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cf70:	f00a fd54 	bl	8017a1c <memset>
 800cf74:	a903      	add	r1, sp, #12
 800cf76:	4630      	mov	r0, r6
 800cf78:	f002 fe9a 	bl	800fcb0 <uxr_deserialize_GET_INFO_Payload>
 800cf7c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cf80:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cf84:	4620      	mov	r0, r4
 800cf86:	f001 f813 	bl	800dfb0 <uxr_session_header_offset>
 800cf8a:	462b      	mov	r3, r5
 800cf8c:	9000      	str	r0, [sp, #0]
 800cf8e:	220c      	movs	r2, #12
 800cf90:	a905      	add	r1, sp, #20
 800cf92:	a808      	add	r0, sp, #32
 800cf94:	f7ff fae0 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800cf98:	a910      	add	r1, sp, #64	@ 0x40
 800cf9a:	a808      	add	r0, sp, #32
 800cf9c:	f002 fefa 	bl	800fd94 <uxr_serialize_INFO_Payload>
 800cfa0:	9b08      	ldr	r3, [sp, #32]
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 ffae 	bl	800df08 <uxr_stamp_session_header>
 800cfac:	a808      	add	r0, sp, #32
 800cfae:	f7ff fb11 	bl	800c5d4 <ucdr_buffer_length>
 800cfb2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	a905      	add	r1, sp, #20
 800cfb8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cfbc:	47a0      	blx	r4
 800cfbe:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}

0800cfc4 <write_submessage_acknack.isra.0>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	b092      	sub	sp, #72	@ 0x48
 800cfc8:	4605      	mov	r5, r0
 800cfca:	460e      	mov	r6, r1
 800cfcc:	4614      	mov	r4, r2
 800cfce:	f000 ffef 	bl	800dfb0 <uxr_session_header_offset>
 800cfd2:	a905      	add	r1, sp, #20
 800cfd4:	9000      	str	r0, [sp, #0]
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	a80a      	add	r0, sp, #40	@ 0x28
 800cfda:	2211      	movs	r2, #17
 800cfdc:	f7ff fabc 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800cfe0:	2318      	movs	r3, #24
 800cfe2:	fb03 5404 	mla	r4, r3, r4, r5
 800cfe6:	2205      	movs	r2, #5
 800cfe8:	2300      	movs	r3, #0
 800cfea:	3450      	adds	r4, #80	@ 0x50
 800cfec:	210a      	movs	r1, #10
 800cfee:	a80a      	add	r0, sp, #40	@ 0x28
 800cff0:	f001 fd96 	bl	800eb20 <uxr_buffer_submessage_header>
 800cff4:	a903      	add	r1, sp, #12
 800cff6:	4620      	mov	r0, r4
 800cff8:	f008 fc22 	bl	8015840 <uxr_compute_acknack>
 800cffc:	ba40      	rev16	r0, r0
 800cffe:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d002:	a903      	add	r1, sp, #12
 800d004:	a80a      	add	r0, sp, #40	@ 0x28
 800d006:	f88d 6010 	strb.w	r6, [sp, #16]
 800d00a:	f002 ff33 	bl	800fe74 <uxr_serialize_ACKNACK_Payload>
 800d00e:	2200      	movs	r2, #0
 800d010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d012:	4611      	mov	r1, r2
 800d014:	4628      	mov	r0, r5
 800d016:	f000 ff77 	bl	800df08 <uxr_stamp_session_header>
 800d01a:	a80a      	add	r0, sp, #40	@ 0x28
 800d01c:	f7ff fada 	bl	800c5d4 <ucdr_buffer_length>
 800d020:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d022:	4602      	mov	r2, r0
 800d024:	a905      	add	r1, sp, #20
 800d026:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d02a:	47a0      	blx	r4
 800d02c:	b012      	add	sp, #72	@ 0x48
 800d02e:	bd70      	pop	{r4, r5, r6, pc}

0800d030 <uxr_init_session>:
 800d030:	b510      	push	{r4, lr}
 800d032:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d068 <uxr_init_session+0x38>
 800d036:	2300      	movs	r3, #0
 800d038:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d03c:	4604      	mov	r4, r0
 800d03e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d042:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d046:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d04a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d04e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d052:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d056:	2181      	movs	r1, #129	@ 0x81
 800d058:	f000 feba 	bl	800ddd0 <uxr_init_session_info>
 800d05c:	f104 0008 	add.w	r0, r4, #8
 800d060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d064:	f001 bc78 	b.w	800e958 <uxr_init_stream_storage>
	...

0800d070 <uxr_set_status_callback>:
 800d070:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop

0800d078 <uxr_set_topic_callback>:
 800d078:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <uxr_set_request_callback>:
 800d080:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop

0800d088 <uxr_set_reply_callback>:
 800d088:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop

0800d090 <uxr_create_output_best_effort_stream>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	4604      	mov	r4, r0
 800d096:	460d      	mov	r5, r1
 800d098:	4616      	mov	r6, r2
 800d09a:	f000 ff89 	bl	800dfb0 <uxr_session_header_offset>
 800d09e:	4632      	mov	r2, r6
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	f104 0008 	add.w	r0, r4, #8
 800d0a8:	b002      	add	sp, #8
 800d0aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0ae:	f001 bc9d 	b.w	800e9ec <uxr_add_output_best_effort_buffer>
 800d0b2:	bf00      	nop

0800d0b4 <uxr_create_output_reliable_stream>:
 800d0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	460d      	mov	r5, r1
 800d0bc:	4616      	mov	r6, r2
 800d0be:	461f      	mov	r7, r3
 800d0c0:	f000 ff76 	bl	800dfb0 <uxr_session_header_offset>
 800d0c4:	463b      	mov	r3, r7
 800d0c6:	9000      	str	r0, [sp, #0]
 800d0c8:	4632      	mov	r2, r6
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	f104 0008 	add.w	r0, r4, #8
 800d0d0:	f001 fca0 	bl	800ea14 <uxr_add_output_reliable_buffer>
 800d0d4:	b005      	add	sp, #20
 800d0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0d8 <uxr_create_input_best_effort_stream>:
 800d0d8:	b082      	sub	sp, #8
 800d0da:	3008      	adds	r0, #8
 800d0dc:	b002      	add	sp, #8
 800d0de:	f001 bcb3 	b.w	800ea48 <uxr_add_input_best_effort_buffer>
 800d0e2:	bf00      	nop

0800d0e4 <uxr_create_input_reliable_stream>:
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	4c03      	ldr	r4, [pc, #12]	@ (800d0f8 <uxr_create_input_reliable_stream+0x14>)
 800d0ea:	9400      	str	r4, [sp, #0]
 800d0ec:	3008      	adds	r0, #8
 800d0ee:	f001 fcc1 	bl	800ea74 <uxr_add_input_reliable_buffer>
 800d0f2:	b004      	add	sp, #16
 800d0f4:	bd10      	pop	{r4, pc}
 800d0f6:	bf00      	nop
 800d0f8:	0800cf15 	.word	0x0800cf15

0800d0fc <uxr_epoch_nanos>:
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	4604      	mov	r4, r0
 800d100:	f001 fd6e 	bl	800ebe0 <uxr_nanos>
 800d104:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d108:	1ac0      	subs	r0, r0, r3
 800d10a:	eb61 0102 	sbc.w	r1, r1, r2
 800d10e:	bd10      	pop	{r4, pc}

0800d110 <uxr_flash_output_streams>:
 800d110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	7e03      	ldrb	r3, [r0, #24]
 800d116:	b084      	sub	sp, #16
 800d118:	4604      	mov	r4, r0
 800d11a:	b373      	cbz	r3, 800d17a <uxr_flash_output_streams+0x6a>
 800d11c:	2500      	movs	r5, #0
 800d11e:	f100 0908 	add.w	r9, r0, #8
 800d122:	f10d 0802 	add.w	r8, sp, #2
 800d126:	4628      	mov	r0, r5
 800d128:	af03      	add	r7, sp, #12
 800d12a:	ae02      	add	r6, sp, #8
 800d12c:	e006      	b.n	800d13c <uxr_flash_output_streams+0x2c>
 800d12e:	7e23      	ldrb	r3, [r4, #24]
 800d130:	3501      	adds	r5, #1
 800d132:	b2e8      	uxtb	r0, r5
 800d134:	4283      	cmp	r3, r0
 800d136:	f109 0910 	add.w	r9, r9, #16
 800d13a:	d91e      	bls.n	800d17a <uxr_flash_output_streams+0x6a>
 800d13c:	2201      	movs	r2, #1
 800d13e:	4611      	mov	r1, r2
 800d140:	f001 fbd2 	bl	800e8e8 <uxr_stream_id>
 800d144:	4643      	mov	r3, r8
 800d146:	4684      	mov	ip, r0
 800d148:	463a      	mov	r2, r7
 800d14a:	4631      	mov	r1, r6
 800d14c:	4648      	mov	r0, r9
 800d14e:	f8cd c004 	str.w	ip, [sp, #4]
 800d152:	f008 fbf9 	bl	8015948 <uxr_prepare_best_effort_buffer_to_send>
 800d156:	2800      	cmp	r0, #0
 800d158:	d0e9      	beq.n	800d12e <uxr_flash_output_streams+0x1e>
 800d15a:	9b02      	ldr	r3, [sp, #8]
 800d15c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d160:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d164:	4620      	mov	r0, r4
 800d166:	f000 fecf 	bl	800df08 <uxr_stamp_session_header>
 800d16a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d16c:	9a03      	ldr	r2, [sp, #12]
 800d16e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d172:	9902      	ldr	r1, [sp, #8]
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	47d0      	blx	sl
 800d178:	e7d9      	b.n	800d12e <uxr_flash_output_streams+0x1e>
 800d17a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d17e:	b37b      	cbz	r3, 800d1e0 <uxr_flash_output_streams+0xd0>
 800d180:	f04f 0900 	mov.w	r9, #0
 800d184:	f104 0520 	add.w	r5, r4, #32
 800d188:	f10d 0802 	add.w	r8, sp, #2
 800d18c:	af03      	add	r7, sp, #12
 800d18e:	ae02      	add	r6, sp, #8
 800d190:	4648      	mov	r0, r9
 800d192:	2201      	movs	r2, #1
 800d194:	2102      	movs	r1, #2
 800d196:	f001 fba7 	bl	800e8e8 <uxr_stream_id>
 800d19a:	9001      	str	r0, [sp, #4]
 800d19c:	e00e      	b.n	800d1bc <uxr_flash_output_streams+0xac>
 800d19e:	9b02      	ldr	r3, [sp, #8]
 800d1a0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d1a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f000 fead 	bl	800df08 <uxr_stamp_session_header>
 800d1ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d1b0:	9a03      	ldr	r2, [sp, #12]
 800d1b2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d1b6:	9902      	ldr	r1, [sp, #8]
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	47d0      	blx	sl
 800d1bc:	4643      	mov	r3, r8
 800d1be:	463a      	mov	r2, r7
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f008 fdd4 	bl	8015d70 <uxr_prepare_next_reliable_buffer_to_send>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d1e8      	bne.n	800d19e <uxr_flash_output_streams+0x8e>
 800d1cc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d1d0:	f109 0901 	add.w	r9, r9, #1
 800d1d4:	fa5f f089 	uxtb.w	r0, r9
 800d1d8:	4283      	cmp	r3, r0
 800d1da:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800d1de:	d8d8      	bhi.n	800d192 <uxr_flash_output_streams+0x82>
 800d1e0:	b004      	add	sp, #16
 800d1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e6:	bf00      	nop

0800d1e8 <read_submessage_info>:
 800d1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ec:	460d      	mov	r5, r1
 800d1ee:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d1f2:	4669      	mov	r1, sp
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f002 fc56 	bl	800faa8 <uxr_deserialize_BaseObjectReply>
 800d1fc:	a902      	add	r1, sp, #8
 800d1fe:	4604      	mov	r4, r0
 800d200:	4628      	mov	r0, r5
 800d202:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d206:	f7fe f8db 	bl	800b3c0 <ucdr_deserialize_bool>
 800d20a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d20e:	4004      	ands	r4, r0
 800d210:	b2e4      	uxtb	r4, r4
 800d212:	b95b      	cbnz	r3, 800d22c <read_submessage_info+0x44>
 800d214:	a987      	add	r1, sp, #540	@ 0x21c
 800d216:	4628      	mov	r0, r5
 800d218:	f7fe f8d2 	bl	800b3c0 <ucdr_deserialize_bool>
 800d21c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d220:	4606      	mov	r6, r0
 800d222:	b94b      	cbnz	r3, 800d238 <read_submessage_info+0x50>
 800d224:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d22c:	a903      	add	r1, sp, #12
 800d22e:	4628      	mov	r0, r5
 800d230:	f002 fafc 	bl	800f82c <uxr_deserialize_ObjectVariant>
 800d234:	4004      	ands	r4, r0
 800d236:	e7ed      	b.n	800d214 <read_submessage_info+0x2c>
 800d238:	a988      	add	r1, sp, #544	@ 0x220
 800d23a:	4628      	mov	r0, r5
 800d23c:	f7fe f8ee 	bl	800b41c <ucdr_deserialize_uint8_t>
 800d240:	4234      	tst	r4, r6
 800d242:	d0ef      	beq.n	800d224 <read_submessage_info+0x3c>
 800d244:	2800      	cmp	r0, #0
 800d246:	d0ed      	beq.n	800d224 <read_submessage_info+0x3c>
 800d248:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d24c:	2b0d      	cmp	r3, #13
 800d24e:	d1e9      	bne.n	800d224 <read_submessage_info+0x3c>
 800d250:	a98a      	add	r1, sp, #552	@ 0x228
 800d252:	4628      	mov	r0, r5
 800d254:	f7fe fe7e 	bl	800bf54 <ucdr_deserialize_int16_t>
 800d258:	b140      	cbz	r0, 800d26c <read_submessage_info+0x84>
 800d25a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d25e:	2b00      	cmp	r3, #0
 800d260:	dd07      	ble.n	800d272 <read_submessage_info+0x8a>
 800d262:	f1b8 0f00 	cmp.w	r8, #0
 800d266:	bf0c      	ite	eq
 800d268:	2002      	moveq	r0, #2
 800d26a:	2001      	movne	r0, #1
 800d26c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d270:	e7d8      	b.n	800d224 <read_submessage_info+0x3c>
 800d272:	2000      	movs	r0, #0
 800d274:	e7fa      	b.n	800d26c <read_submessage_info+0x84>
 800d276:	bf00      	nop

0800d278 <read_submessage_list>:
 800d278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d27c:	b097      	sub	sp, #92	@ 0x5c
 800d27e:	4604      	mov	r4, r0
 800d280:	460d      	mov	r5, r1
 800d282:	9209      	str	r2, [sp, #36]	@ 0x24
 800d284:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d288:	aa0c      	add	r2, sp, #48	@ 0x30
 800d28a:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d28e:	4628      	mov	r0, r5
 800d290:	f001 fc60 	bl	800eb54 <uxr_read_submessage_header>
 800d294:	2800      	cmp	r0, #0
 800d296:	f000 812c 	beq.w	800d4f2 <read_submessage_list+0x27a>
 800d29a:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800d29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2a0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800d2a4:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800d2a8:	3902      	subs	r1, #2
 800d2aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d2ae:	290d      	cmp	r1, #13
 800d2b0:	d8e8      	bhi.n	800d284 <read_submessage_list+0xc>
 800d2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b8 <read_submessage_list+0x40>)
 800d2b4:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800d2b8:	0800d4e9 	.word	0x0800d4e9
 800d2bc:	0800d285 	.word	0x0800d285
 800d2c0:	0800d4d9 	.word	0x0800d4d9
 800d2c4:	0800d47b 	.word	0x0800d47b
 800d2c8:	0800d471 	.word	0x0800d471
 800d2cc:	0800d285 	.word	0x0800d285
 800d2d0:	0800d285 	.word	0x0800d285
 800d2d4:	0800d3f5 	.word	0x0800d3f5
 800d2d8:	0800d38d 	.word	0x0800d38d
 800d2dc:	0800d34d 	.word	0x0800d34d
 800d2e0:	0800d285 	.word	0x0800d285
 800d2e4:	0800d285 	.word	0x0800d285
 800d2e8:	0800d285 	.word	0x0800d285
 800d2ec:	0800d2f1 	.word	0x0800d2f1
 800d2f0:	a910      	add	r1, sp, #64	@ 0x40
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	f002 fe0e 	bl	800ff14 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d2f8:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800d2fc:	2e00      	cmp	r6, #0
 800d2fe:	f000 8100 	beq.w	800d502 <read_submessage_list+0x28a>
 800d302:	f001 fc6d 	bl	800ebe0 <uxr_nanos>
 800d306:	f04f 0800 	mov.w	r8, #0
 800d30a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d312:	4990      	ldr	r1, [pc, #576]	@ (800d554 <read_submessage_list+0x2dc>)
 800d314:	46c4      	mov	ip, r8
 800d316:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800d31a:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d31e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d320:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d322:	46c6      	mov	lr, r8
 800d324:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800d328:	46bc      	mov	ip, r7
 800d32a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d32e:	fbc0 7801 	smlal	r7, r8, r0, r1
 800d332:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800d336:	e9cd 7800 	strd	r7, r8, [sp]
 800d33a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d33e:	9106      	str	r1, [sp, #24]
 800d340:	4620      	mov	r0, r4
 800d342:	47b0      	blx	r6
 800d344:	2301      	movs	r3, #1
 800d346:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800d34a:	e79b      	b.n	800d284 <read_submessage_list+0xc>
 800d34c:	a910      	add	r1, sp, #64	@ 0x40
 800d34e:	4628      	mov	r0, r5
 800d350:	f002 fdce 	bl	800fef0 <uxr_deserialize_HEARTBEAT_Payload>
 800d354:	2100      	movs	r1, #0
 800d356:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d35a:	f001 fae1 	bl	800e920 <uxr_stream_id_from_raw>
 800d35e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d362:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d364:	4631      	mov	r1, r6
 800d366:	f104 0008 	add.w	r0, r4, #8
 800d36a:	f001 fbb9 	bl	800eae0 <uxr_get_input_reliable_stream>
 800d36e:	2800      	cmp	r0, #0
 800d370:	d088      	beq.n	800d284 <read_submessage_list+0xc>
 800d372:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d376:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d37a:	f008 fa55 	bl	8015828 <uxr_process_heartbeat>
 800d37e:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d382:	4632      	mov	r2, r6
 800d384:	4620      	mov	r0, r4
 800d386:	f7ff fe1d 	bl	800cfc4 <write_submessage_acknack.isra.0>
 800d38a:	e77b      	b.n	800d284 <read_submessage_list+0xc>
 800d38c:	a910      	add	r1, sp, #64	@ 0x40
 800d38e:	4628      	mov	r0, r5
 800d390:	f002 fd86 	bl	800fea0 <uxr_deserialize_ACKNACK_Payload>
 800d394:	2100      	movs	r1, #0
 800d396:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d39a:	f001 fac1 	bl	800e920 <uxr_stream_id_from_raw>
 800d39e:	900d      	str	r0, [sp, #52]	@ 0x34
 800d3a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d3a4:	f104 0008 	add.w	r0, r4, #8
 800d3a8:	f001 fb86 	bl	800eab8 <uxr_get_output_reliable_stream>
 800d3ac:	4606      	mov	r6, r0
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f43f af68 	beq.w	800d284 <read_submessage_list+0xc>
 800d3b4:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800d3b8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d3bc:	ba49      	rev16	r1, r1
 800d3be:	b289      	uxth	r1, r1
 800d3c0:	f008 fd80 	bl	8015ec4 <uxr_process_acknack>
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	f008 fd41 	bl	8015e4c <uxr_begin_output_nack_buffer_it>
 800d3ca:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800d3ce:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d3d2:	e005      	b.n	800d3e0 <read_submessage_list+0x168>
 800d3d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d3d8:	685f      	ldr	r7, [r3, #4]
 800d3da:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d3dc:	6818      	ldr	r0, [r3, #0]
 800d3de:	47b8      	blx	r7
 800d3e0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d3e4:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d3e6:	4641      	mov	r1, r8
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f008 fd31 	bl	8015e50 <uxr_next_reliable_nack_buffer_to_send>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d1f0      	bne.n	800d3d4 <read_submessage_list+0x15c>
 800d3f2:	e747      	b.n	800d284 <read_submessage_list+0xc>
 800d3f4:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800d3f8:	4641      	mov	r1, r8
 800d3fa:	900d      	str	r0, [sp, #52]	@ 0x34
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	f002 fab5 	bl	800f96c <uxr_deserialize_BaseObjectRequest>
 800d402:	3e04      	subs	r6, #4
 800d404:	4640      	mov	r0, r8
 800d406:	a90f      	add	r1, sp, #60	@ 0x3c
 800d408:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d40c:	f000 fdf6 	bl	800dffc <uxr_parse_base_object_request>
 800d410:	fa1f f886 	uxth.w	r8, r6
 800d414:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800d418:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d41a:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800d41e:	9110      	str	r1, [sp, #64]	@ 0x40
 800d420:	f007 070e 	and.w	r7, r7, #14
 800d424:	b136      	cbz	r6, 800d434 <read_submessage_list+0x1bc>
 800d426:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	464a      	mov	r2, r9
 800d42e:	2300      	movs	r3, #0
 800d430:	4620      	mov	r0, r4
 800d432:	47b0      	blx	r6
 800d434:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800d436:	b16b      	cbz	r3, 800d454 <read_submessage_list+0x1dc>
 800d438:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d43a:	2100      	movs	r1, #0
 800d43c:	3802      	subs	r0, #2
 800d43e:	e002      	b.n	800d446 <read_submessage_list+0x1ce>
 800d440:	3101      	adds	r1, #1
 800d442:	428b      	cmp	r3, r1
 800d444:	d006      	beq.n	800d454 <read_submessage_list+0x1dc>
 800d446:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800d44a:	454e      	cmp	r6, r9
 800d44c:	d1f8      	bne.n	800d440 <read_submessage_list+0x1c8>
 800d44e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d450:	2200      	movs	r2, #0
 800d452:	545a      	strb	r2, [r3, r1]
 800d454:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d458:	9102      	str	r1, [sp, #8]
 800d45a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d45c:	9101      	str	r1, [sp, #4]
 800d45e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d460:	9100      	str	r1, [sp, #0]
 800d462:	463b      	mov	r3, r7
 800d464:	4642      	mov	r2, r8
 800d466:	4629      	mov	r1, r5
 800d468:	4620      	mov	r0, r4
 800d46a:	f008 fde3 	bl	8016034 <read_submessage_format>
 800d46e:	e709      	b.n	800d284 <read_submessage_list+0xc>
 800d470:	4629      	mov	r1, r5
 800d472:	4620      	mov	r0, r4
 800d474:	f7ff feb8 	bl	800d1e8 <read_submessage_info>
 800d478:	e704      	b.n	800d284 <read_submessage_list+0xc>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d03c      	beq.n	800d4f8 <read_submessage_list+0x280>
 800d47e:	a910      	add	r1, sp, #64	@ 0x40
 800d480:	4628      	mov	r0, r5
 800d482:	f002 fc69 	bl	800fd58 <uxr_deserialize_STATUS_Payload>
 800d486:	a90e      	add	r1, sp, #56	@ 0x38
 800d488:	a810      	add	r0, sp, #64	@ 0x40
 800d48a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d48c:	f000 fdb6 	bl	800dffc <uxr_parse_base_object_request>
 800d490:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800d494:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d496:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800d49a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d49e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d4a0:	b136      	cbz	r6, 800d4b0 <read_submessage_list+0x238>
 800d4a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	463a      	mov	r2, r7
 800d4aa:	4643      	mov	r3, r8
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	47b0      	blx	r6
 800d4b0:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d4b2:	2a00      	cmp	r2, #0
 800d4b4:	f43f aee6 	beq.w	800d284 <read_submessage_list+0xc>
 800d4b8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	3802      	subs	r0, #2
 800d4be:	e003      	b.n	800d4c8 <read_submessage_list+0x250>
 800d4c0:	3101      	adds	r1, #1
 800d4c2:	4291      	cmp	r1, r2
 800d4c4:	f43f aede 	beq.w	800d284 <read_submessage_list+0xc>
 800d4c8:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800d4cc:	42be      	cmp	r6, r7
 800d4ce:	d1f7      	bne.n	800d4c0 <read_submessage_list+0x248>
 800d4d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d4d2:	f803 8001 	strb.w	r8, [r3, r1]
 800d4d6:	e6d5      	b.n	800d284 <read_submessage_list+0xc>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f47f aed3 	bne.w	800d284 <read_submessage_list+0xc>
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fcd3 	bl	800de8c <uxr_read_create_session_status>
 800d4e6:	e6cd      	b.n	800d284 <read_submessage_list+0xc>
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f7ff fd34 	bl	800cf58 <read_submessage_get_info>
 800d4f0:	e6c8      	b.n	800d284 <read_submessage_list+0xc>
 800d4f2:	b017      	add	sp, #92	@ 0x5c
 800d4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fcd4 	bl	800dea8 <uxr_read_delete_session_status>
 800d500:	e6c0      	b.n	800d284 <read_submessage_list+0xc>
 800d502:	f001 fb6d 	bl	800ebe0 <uxr_nanos>
 800d506:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800d50a:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800d554 <read_submessage_list+0x2dc>
 800d50e:	4633      	mov	r3, r6
 800d510:	fbc7 230c 	smlal	r2, r3, r7, ip
 800d514:	1810      	adds	r0, r2, r0
 800d516:	eb43 0301 	adc.w	r3, r3, r1
 800d51a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800d51e:	46b6      	mov	lr, r6
 800d520:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800d524:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800d528:	fbc1 760c 	smlal	r7, r6, r1, ip
 800d52c:	19d2      	adds	r2, r2, r7
 800d52e:	eb4e 0106 	adc.w	r1, lr, r6
 800d532:	1a80      	subs	r0, r0, r2
 800d534:	eb63 0301 	sbc.w	r3, r3, r1
 800d538:	0fda      	lsrs	r2, r3, #31
 800d53a:	1812      	adds	r2, r2, r0
 800d53c:	f143 0300 	adc.w	r3, r3, #0
 800d540:	0852      	lsrs	r2, r2, #1
 800d542:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d546:	105b      	asrs	r3, r3, #1
 800d548:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d54c:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d550:	e6f8      	b.n	800d344 <read_submessage_list+0xcc>
 800d552:	bf00      	nop
 800d554:	3b9aca00 	.word	0x3b9aca00

0800d558 <listen_message_reliably>:
 800d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55c:	f1b1 0b00 	subs.w	fp, r1, #0
 800d560:	b09f      	sub	sp, #124	@ 0x7c
 800d562:	4606      	mov	r6, r0
 800d564:	bfb8      	it	lt
 800d566:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800d56a:	f001 fb1f 	bl	800ebac <uxr_millis>
 800d56e:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800d572:	9003      	str	r0, [sp, #12]
 800d574:	9104      	str	r1, [sp, #16]
 800d576:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800d57a:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 80a4 	beq.w	800d6cc <listen_message_reliably+0x174>
 800d584:	2500      	movs	r5, #0
 800d586:	e9cd b806 	strd	fp, r8, [sp, #24]
 800d58a:	f106 0420 	add.w	r4, r6, #32
 800d58e:	f04f 37ff 	mov.w	r7, #4294967295
 800d592:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800d596:	4628      	mov	r0, r5
 800d598:	e011      	b.n	800d5be <listen_message_reliably+0x66>
 800d59a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800d59e:	42ba      	cmp	r2, r7
 800d5a0:	eb73 0109 	sbcs.w	r1, r3, r9
 800d5a4:	bfb8      	it	lt
 800d5a6:	4699      	movlt	r9, r3
 800d5a8:	f105 0501 	add.w	r5, r5, #1
 800d5ac:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800d5b0:	b2e8      	uxtb	r0, r5
 800d5b2:	bfb8      	it	lt
 800d5b4:	4617      	movlt	r7, r2
 800d5b6:	4283      	cmp	r3, r0
 800d5b8:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800d5bc:	d94a      	bls.n	800d654 <listen_message_reliably+0xfc>
 800d5be:	2201      	movs	r2, #1
 800d5c0:	2102      	movs	r1, #2
 800d5c2:	f001 f991 	bl	800e8e8 <uxr_stream_id>
 800d5c6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d5d0:	f008 fc0c 	bl	8015dec <uxr_update_output_stream_heartbeat_timestamp>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d0e0      	beq.n	800d59a <listen_message_reliably+0x42>
 800d5d8:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800d5dc:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800d5e0:	9305      	str	r3, [sp, #20]
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f000 fce4 	bl	800dfb0 <uxr_session_header_offset>
 800d5e8:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800d5ec:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800d5f0:	9000      	str	r0, [sp, #0]
 800d5f2:	a90e      	add	r1, sp, #56	@ 0x38
 800d5f4:	4640      	mov	r0, r8
 800d5f6:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	2211      	movs	r2, #17
 800d5fe:	f7fe ffab 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800d602:	2300      	movs	r3, #0
 800d604:	2205      	movs	r2, #5
 800d606:	210b      	movs	r1, #11
 800d608:	4640      	mov	r0, r8
 800d60a:	f001 fa89 	bl	800eb20 <uxr_buffer_submessage_header>
 800d60e:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800d612:	2101      	movs	r1, #1
 800d614:	f008 fde2 	bl	80161dc <uxr_seq_num_add>
 800d618:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800d61c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800d620:	4602      	mov	r2, r0
 800d622:	9b05      	ldr	r3, [sp, #20]
 800d624:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800d628:	a90c      	add	r1, sp, #48	@ 0x30
 800d62a:	4640      	mov	r0, r8
 800d62c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d630:	f002 fc4a 	bl	800fec8 <uxr_serialize_HEARTBEAT_Payload>
 800d634:	2200      	movs	r2, #0
 800d636:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d638:	4611      	mov	r1, r2
 800d63a:	4630      	mov	r0, r6
 800d63c:	f000 fc64 	bl	800df08 <uxr_stamp_session_header>
 800d640:	4640      	mov	r0, r8
 800d642:	f7fe ffc7 	bl	800c5d4 <ucdr_buffer_length>
 800d646:	4602      	mov	r2, r0
 800d648:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800d64a:	a90e      	add	r1, sp, #56	@ 0x38
 800d64c:	e9d0 0300 	ldrd	r0, r3, [r0]
 800d650:	4798      	blx	r3
 800d652:	e7a2      	b.n	800d59a <listen_message_reliably+0x42>
 800d654:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d658:	4599      	cmp	r9, r3
 800d65a:	bf08      	it	eq
 800d65c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 800d660:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800d664:	d032      	beq.n	800d6cc <listen_message_reliably+0x174>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	1aff      	subs	r7, r7, r3
 800d66a:	2f00      	cmp	r7, #0
 800d66c:	bf08      	it	eq
 800d66e:	2701      	moveq	r7, #1
 800d670:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800d672:	455f      	cmp	r7, fp
 800d674:	bfa8      	it	ge
 800d676:	465f      	movge	r7, fp
 800d678:	689c      	ldr	r4, [r3, #8]
 800d67a:	6818      	ldr	r0, [r3, #0]
 800d67c:	4642      	mov	r2, r8
 800d67e:	463b      	mov	r3, r7
 800d680:	4651      	mov	r1, sl
 800d682:	47a0      	blx	r4
 800d684:	ebab 0b07 	sub.w	fp, fp, r7
 800d688:	b958      	cbnz	r0, 800d6a2 <listen_message_reliably+0x14a>
 800d68a:	f1bb 0f00 	cmp.w	fp, #0
 800d68e:	dd44      	ble.n	800d71a <listen_message_reliably+0x1c2>
 800d690:	f001 fa8c 	bl	800ebac <uxr_millis>
 800d694:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d03c      	beq.n	800d716 <listen_message_reliably+0x1be>
 800d69c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800d6a0:	e770      	b.n	800d584 <listen_message_reliably+0x2c>
 800d6a2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	a80e      	add	r0, sp, #56	@ 0x38
 800d6aa:	f7fe ff67 	bl	800c57c <ucdr_init_buffer>
 800d6ae:	2500      	movs	r5, #0
 800d6b0:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800d6b4:	aa08      	add	r2, sp, #32
 800d6b6:	a90e      	add	r1, sp, #56	@ 0x38
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	f88d 5020 	strb.w	r5, [sp, #32]
 800d6be:	f000 fc39 	bl	800df34 <uxr_read_session_header>
 800d6c2:	b928      	cbnz	r0, 800d6d0 <listen_message_reliably+0x178>
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	b01f      	add	sp, #124	@ 0x7c
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	465f      	mov	r7, fp
 800d6ce:	e7cc      	b.n	800d66a <listen_message_reliably+0x112>
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800d6d6:	f001 f923 	bl	800e920 <uxr_stream_id_from_raw>
 800d6da:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d6de:	2f01      	cmp	r7, #1
 800d6e0:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800d6e4:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800d6e8:	fa5f f880 	uxtb.w	r8, r0
 800d6ec:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800d6f0:	d050      	beq.n	800d794 <listen_message_reliably+0x23c>
 800d6f2:	2f02      	cmp	r7, #2
 800d6f4:	d016      	beq.n	800d724 <listen_message_reliably+0x1cc>
 800d6f6:	2f00      	cmp	r7, #0
 800d6f8:	d1e4      	bne.n	800d6c4 <listen_message_reliably+0x16c>
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f001 f90f 	bl	800e920 <uxr_stream_id_from_raw>
 800d702:	a90e      	add	r1, sp, #56	@ 0x38
 800d704:	4602      	mov	r2, r0
 800d706:	4630      	mov	r0, r6
 800d708:	920c      	str	r2, [sp, #48]	@ 0x30
 800d70a:	f7ff fdb5 	bl	800d278 <read_submessage_list>
 800d70e:	4620      	mov	r0, r4
 800d710:	b01f      	add	sp, #124	@ 0x7c
 800d712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d716:	465f      	mov	r7, fp
 800d718:	e7aa      	b.n	800d670 <listen_message_reliably+0x118>
 800d71a:	4604      	mov	r4, r0
 800d71c:	4620      	mov	r0, r4
 800d71e:	b01f      	add	sp, #124	@ 0x7c
 800d720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d724:	4629      	mov	r1, r5
 800d726:	f106 0008 	add.w	r0, r6, #8
 800d72a:	f001 f9d9 	bl	800eae0 <uxr_get_input_reliable_stream>
 800d72e:	4681      	mov	r9, r0
 800d730:	b338      	cbz	r0, 800d782 <listen_message_reliably+0x22a>
 800d732:	a80e      	add	r0, sp, #56	@ 0x38
 800d734:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800d738:	f7fe ff50 	bl	800c5dc <ucdr_buffer_remaining>
 800d73c:	4603      	mov	r3, r0
 800d73e:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800d742:	9000      	str	r0, [sp, #0]
 800d744:	465a      	mov	r2, fp
 800d746:	4651      	mov	r1, sl
 800d748:	4648      	mov	r0, r9
 800d74a:	f007 ff7b 	bl	8015644 <uxr_receive_reliable_message>
 800d74e:	b1c0      	cbz	r0, 800d782 <listen_message_reliably+0x22a>
 800d750:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800d754:	b393      	cbz	r3, 800d7bc <listen_message_reliably+0x264>
 800d756:	af16      	add	r7, sp, #88	@ 0x58
 800d758:	f04f 0a02 	mov.w	sl, #2
 800d75c:	e00a      	b.n	800d774 <listen_message_reliably+0x21c>
 800d75e:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800d762:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800d766:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800d76a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d76c:	4639      	mov	r1, r7
 800d76e:	4630      	mov	r0, r6
 800d770:	f7ff fd82 	bl	800d278 <read_submessage_list>
 800d774:	2204      	movs	r2, #4
 800d776:	4639      	mov	r1, r7
 800d778:	4648      	mov	r0, r9
 800d77a:	f007 ffdd 	bl	8015738 <uxr_next_input_reliable_buffer_available>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d1ed      	bne.n	800d75e <listen_message_reliably+0x206>
 800d782:	4630      	mov	r0, r6
 800d784:	462a      	mov	r2, r5
 800d786:	4641      	mov	r1, r8
 800d788:	f7ff fc1c 	bl	800cfc4 <write_submessage_acknack.isra.0>
 800d78c:	4620      	mov	r0, r4
 800d78e:	b01f      	add	sp, #124	@ 0x7c
 800d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d794:	4629      	mov	r1, r5
 800d796:	f106 0008 	add.w	r0, r6, #8
 800d79a:	f001 f997 	bl	800eacc <uxr_get_input_best_effort_stream>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d090      	beq.n	800d6c4 <listen_message_reliably+0x16c>
 800d7a2:	4651      	mov	r1, sl
 800d7a4:	f007 febe 	bl	8015524 <uxr_receive_best_effort_message>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d08b      	beq.n	800d6c4 <listen_message_reliably+0x16c>
 800d7ac:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d7b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7b2:	a90e      	add	r1, sp, #56	@ 0x38
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f7ff fd5f 	bl	800d278 <read_submessage_list>
 800d7ba:	e783      	b.n	800d6c4 <listen_message_reliably+0x16c>
 800d7bc:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d7c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7c2:	a90e      	add	r1, sp, #56	@ 0x38
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f7ff fd57 	bl	800d278 <read_submessage_list>
 800d7ca:	e7c4      	b.n	800d756 <listen_message_reliably+0x1fe>

0800d7cc <uxr_run_session_timeout>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	f001 f9eb 	bl	800ebac <uxr_millis>
 800d7d6:	4606      	mov	r6, r0
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f7ff fc99 	bl	800d110 <uxr_flash_output_streams>
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7ff feb9 	bl	800d558 <listen_message_reliably>
 800d7e6:	f001 f9e1 	bl	800ebac <uxr_millis>
 800d7ea:	1b81      	subs	r1, r0, r6
 800d7ec:	1a69      	subs	r1, r5, r1
 800d7ee:	2900      	cmp	r1, #0
 800d7f0:	dcf6      	bgt.n	800d7e0 <uxr_run_session_timeout+0x14>
 800d7f2:	f104 0008 	add.w	r0, r4, #8
 800d7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7fa:	f001 b97b 	b.w	800eaf4 <uxr_output_streams_confirmed>
 800d7fe:	bf00      	nop

0800d800 <uxr_run_session_until_data>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	4604      	mov	r4, r0
 800d804:	460d      	mov	r5, r1
 800d806:	f001 f9d1 	bl	800ebac <uxr_millis>
 800d80a:	4606      	mov	r6, r0
 800d80c:	4620      	mov	r0, r4
 800d80e:	f7ff fc7f 	bl	800d110 <uxr_flash_output_streams>
 800d812:	2300      	movs	r3, #0
 800d814:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d818:	4629      	mov	r1, r5
 800d81a:	e005      	b.n	800d828 <uxr_run_session_until_data+0x28>
 800d81c:	f001 f9c6 	bl	800ebac <uxr_millis>
 800d820:	1b81      	subs	r1, r0, r6
 800d822:	1a69      	subs	r1, r5, r1
 800d824:	2900      	cmp	r1, #0
 800d826:	dd07      	ble.n	800d838 <uxr_run_session_until_data+0x38>
 800d828:	4620      	mov	r0, r4
 800d82a:	f7ff fe95 	bl	800d558 <listen_message_reliably>
 800d82e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d832:	2800      	cmp	r0, #0
 800d834:	d0f2      	beq.n	800d81c <uxr_run_session_until_data+0x1c>
 800d836:	bd70      	pop	{r4, r5, r6, pc}
 800d838:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d83c:	bd70      	pop	{r4, r5, r6, pc}
 800d83e:	bf00      	nop

0800d840 <uxr_run_session_until_confirm_delivery>:
 800d840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d844:	4606      	mov	r6, r0
 800d846:	460d      	mov	r5, r1
 800d848:	f001 f9b0 	bl	800ebac <uxr_millis>
 800d84c:	4607      	mov	r7, r0
 800d84e:	4630      	mov	r0, r6
 800d850:	f7ff fc5e 	bl	800d110 <uxr_flash_output_streams>
 800d854:	2d00      	cmp	r5, #0
 800d856:	db16      	blt.n	800d886 <uxr_run_session_until_confirm_delivery+0x46>
 800d858:	462c      	mov	r4, r5
 800d85a:	f106 0808 	add.w	r8, r6, #8
 800d85e:	e008      	b.n	800d872 <uxr_run_session_until_confirm_delivery+0x32>
 800d860:	4621      	mov	r1, r4
 800d862:	4630      	mov	r0, r6
 800d864:	f7ff fe78 	bl	800d558 <listen_message_reliably>
 800d868:	f001 f9a0 	bl	800ebac <uxr_millis>
 800d86c:	1bc1      	subs	r1, r0, r7
 800d86e:	1a6c      	subs	r4, r5, r1
 800d870:	d404      	bmi.n	800d87c <uxr_run_session_until_confirm_delivery+0x3c>
 800d872:	4640      	mov	r0, r8
 800d874:	f001 f93e 	bl	800eaf4 <uxr_output_streams_confirmed>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d0f1      	beq.n	800d860 <uxr_run_session_until_confirm_delivery+0x20>
 800d87c:	4640      	mov	r0, r8
 800d87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d882:	f001 b937 	b.w	800eaf4 <uxr_output_streams_confirmed>
 800d886:	f106 0808 	add.w	r8, r6, #8
 800d88a:	e7f7      	b.n	800d87c <uxr_run_session_until_confirm_delivery+0x3c>

0800d88c <uxr_run_session_until_all_status>:
 800d88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d890:	9c08      	ldr	r4, [sp, #32]
 800d892:	4605      	mov	r5, r0
 800d894:	460f      	mov	r7, r1
 800d896:	4690      	mov	r8, r2
 800d898:	461e      	mov	r6, r3
 800d89a:	f7ff fc39 	bl	800d110 <uxr_flash_output_streams>
 800d89e:	b124      	cbz	r4, 800d8aa <uxr_run_session_until_all_status+0x1e>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	21ff      	movs	r1, #255	@ 0xff
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f00a f8b9 	bl	8017a1c <memset>
 800d8aa:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800d8ae:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d8b0:	f001 f97c 	bl	800ebac <uxr_millis>
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	4681      	mov	r9, r0
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f7ff fe4d 	bl	800d558 <listen_message_reliably>
 800d8be:	f001 f975 	bl	800ebac <uxr_millis>
 800d8c2:	eba0 0109 	sub.w	r1, r0, r9
 800d8c6:	1a79      	subs	r1, r7, r1
 800d8c8:	b36c      	cbz	r4, 800d926 <uxr_run_session_until_all_status+0x9a>
 800d8ca:	1e70      	subs	r0, r6, #1
 800d8cc:	46c6      	mov	lr, r8
 800d8ce:	1902      	adds	r2, r0, r4
 800d8d0:	4684      	mov	ip, r0
 800d8d2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d8d6:	2bff      	cmp	r3, #255	@ 0xff
 800d8d8:	d007      	beq.n	800d8ea <uxr_run_session_until_all_status+0x5e>
 800d8da:	4594      	cmp	ip, r2
 800d8dc:	d00f      	beq.n	800d8fe <uxr_run_session_until_all_status+0x72>
 800d8de:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d8e2:	2bff      	cmp	r3, #255	@ 0xff
 800d8e4:	f10e 0e02 	add.w	lr, lr, #2
 800d8e8:	d1f7      	bne.n	800d8da <uxr_run_session_until_all_status+0x4e>
 800d8ea:	4594      	cmp	ip, r2
 800d8ec:	f8be 3000 	ldrh.w	r3, [lr]
 800d8f0:	d014      	beq.n	800d91c <uxr_run_session_until_all_status+0x90>
 800d8f2:	f10e 0e02 	add.w	lr, lr, #2
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0eb      	beq.n	800d8d2 <uxr_run_session_until_all_status+0x46>
 800d8fa:	2900      	cmp	r1, #0
 800d8fc:	dcdc      	bgt.n	800d8b8 <uxr_run_session_until_all_status+0x2c>
 800d8fe:	2300      	movs	r3, #0
 800d900:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800d902:	e001      	b.n	800d908 <uxr_run_session_until_all_status+0x7c>
 800d904:	2b01      	cmp	r3, #1
 800d906:	d812      	bhi.n	800d92e <uxr_run_session_until_all_status+0xa2>
 800d908:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d90c:	4290      	cmp	r0, r2
 800d90e:	d1f9      	bne.n	800d904 <uxr_run_session_until_all_status+0x78>
 800d910:	2b01      	cmp	r3, #1
 800d912:	bf8c      	ite	hi
 800d914:	2000      	movhi	r0, #0
 800d916:	2001      	movls	r0, #1
 800d918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d91c:	2900      	cmp	r1, #0
 800d91e:	ddee      	ble.n	800d8fe <uxr_run_session_until_all_status+0x72>
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1c9      	bne.n	800d8b8 <uxr_run_session_until_all_status+0x2c>
 800d924:	e7eb      	b.n	800d8fe <uxr_run_session_until_all_status+0x72>
 800d926:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d928:	2001      	movs	r0, #1
 800d92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d92e:	2000      	movs	r0, #0
 800d930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d934 <uxr_run_session_until_pong>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	f001 f937 	bl	800ebac <uxr_millis>
 800d93e:	4606      	mov	r6, r0
 800d940:	4620      	mov	r0, r4
 800d942:	f7ff fbe5 	bl	800d110 <uxr_flash_output_streams>
 800d946:	2300      	movs	r3, #0
 800d948:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 800d94c:	4629      	mov	r1, r5
 800d94e:	e005      	b.n	800d95c <uxr_run_session_until_pong+0x28>
 800d950:	f001 f92c 	bl	800ebac <uxr_millis>
 800d954:	1b81      	subs	r1, r0, r6
 800d956:	1a69      	subs	r1, r5, r1
 800d958:	2900      	cmp	r1, #0
 800d95a:	dd0c      	ble.n	800d976 <uxr_run_session_until_pong+0x42>
 800d95c:	4620      	mov	r0, r4
 800d95e:	f7ff fdfb 	bl	800d558 <listen_message_reliably>
 800d962:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800d966:	2800      	cmp	r0, #0
 800d968:	d0f2      	beq.n	800d950 <uxr_run_session_until_pong+0x1c>
 800d96a:	f1a0 0001 	sub.w	r0, r0, #1
 800d96e:	fab0 f080 	clz	r0, r0
 800d972:	0940      	lsrs	r0, r0, #5
 800d974:	bd70      	pop	{r4, r5, r6, pc}
 800d976:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800d97a:	f1a0 0001 	sub.w	r0, r0, #1
 800d97e:	fab0 f080 	clz	r0, r0
 800d982:	0940      	lsrs	r0, r0, #5
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	bf00      	nop

0800d988 <wait_session_status>:
 800d988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	4604      	mov	r4, r0
 800d98e:	20ff      	movs	r0, #255	@ 0xff
 800d990:	b09f      	sub	sp, #124	@ 0x7c
 800d992:	7160      	strb	r0, [r4, #5]
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 80bb 	beq.w	800db10 <wait_session_status+0x188>
 800d99a:	4692      	mov	sl, r2
 800d99c:	469b      	mov	fp, r3
 800d99e:	f04f 0800 	mov.w	r8, #0
 800d9a2:	9105      	str	r1, [sp, #20]
 800d9a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d9a6:	9905      	ldr	r1, [sp, #20]
 800d9a8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d9ac:	4652      	mov	r2, sl
 800d9ae:	47a8      	blx	r5
 800d9b0:	f001 f8fc 	bl	800ebac <uxr_millis>
 800d9b4:	2700      	movs	r7, #0
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d9bc:	e009      	b.n	800d9d2 <wait_session_status+0x4a>
 800d9be:	f001 f8f5 	bl	800ebac <uxr_millis>
 800d9c2:	1b43      	subs	r3, r0, r5
 800d9c4:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	7962      	ldrb	r2, [r4, #5]
 800d9cc:	dd3d      	ble.n	800da4a <wait_session_status+0xc2>
 800d9ce:	2aff      	cmp	r2, #255	@ 0xff
 800d9d0:	d13b      	bne.n	800da4a <wait_session_status+0xc2>
 800d9d2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d9d4:	a90a      	add	r1, sp, #40	@ 0x28
 800d9d6:	6896      	ldr	r6, [r2, #8]
 800d9d8:	6810      	ldr	r0, [r2, #0]
 800d9da:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d9dc:	47b0      	blx	r6
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0ed      	beq.n	800d9be <wait_session_status+0x36>
 800d9e2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800d9e6:	a80e      	add	r0, sp, #56	@ 0x38
 800d9e8:	f7fe fdc8 	bl	800c57c <ucdr_init_buffer>
 800d9ec:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800d9f0:	aa09      	add	r2, sp, #36	@ 0x24
 800d9f2:	a90e      	add	r1, sp, #56	@ 0x38
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800d9fa:	f000 fa9b 	bl	800df34 <uxr_read_session_header>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d0dd      	beq.n	800d9be <wait_session_status+0x36>
 800da02:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800da06:	2100      	movs	r1, #0
 800da08:	f000 ff8a 	bl	800e920 <uxr_stream_id_from_raw>
 800da0c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800da10:	9304      	str	r3, [sp, #16]
 800da12:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800da16:	b2c3      	uxtb	r3, r0
 800da18:	f1b9 0f01 	cmp.w	r9, #1
 800da1c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800da26:	d05d      	beq.n	800dae4 <wait_session_status+0x15c>
 800da28:	f1b9 0f02 	cmp.w	r9, #2
 800da2c:	d01a      	beq.n	800da64 <wait_session_status+0xdc>
 800da2e:	f1b9 0f00 	cmp.w	r9, #0
 800da32:	d1c4      	bne.n	800d9be <wait_session_status+0x36>
 800da34:	4649      	mov	r1, r9
 800da36:	4648      	mov	r0, r9
 800da38:	f000 ff72 	bl	800e920 <uxr_stream_id_from_raw>
 800da3c:	a90e      	add	r1, sp, #56	@ 0x38
 800da3e:	4602      	mov	r2, r0
 800da40:	900d      	str	r0, [sp, #52]	@ 0x34
 800da42:	4620      	mov	r0, r4
 800da44:	f7ff fc18 	bl	800d278 <read_submessage_list>
 800da48:	e7b9      	b.n	800d9be <wait_session_status+0x36>
 800da4a:	f108 0801 	add.w	r8, r8, #1
 800da4e:	45c3      	cmp	fp, r8
 800da50:	d001      	beq.n	800da56 <wait_session_status+0xce>
 800da52:	2aff      	cmp	r2, #255	@ 0xff
 800da54:	d0a6      	beq.n	800d9a4 <wait_session_status+0x1c>
 800da56:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800da5a:	bf18      	it	ne
 800da5c:	2001      	movne	r0, #1
 800da5e:	b01f      	add	sp, #124	@ 0x7c
 800da60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da64:	4631      	mov	r1, r6
 800da66:	f104 0008 	add.w	r0, r4, #8
 800da6a:	f001 f839 	bl	800eae0 <uxr_get_input_reliable_stream>
 800da6e:	9006      	str	r0, [sp, #24]
 800da70:	2800      	cmp	r0, #0
 800da72:	d031      	beq.n	800dad8 <wait_session_status+0x150>
 800da74:	aa0e      	add	r2, sp, #56	@ 0x38
 800da76:	4610      	mov	r0, r2
 800da78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800da7a:	9207      	str	r2, [sp, #28]
 800da7c:	f7fe fdae 	bl	800c5dc <ucdr_buffer_remaining>
 800da80:	4603      	mov	r3, r0
 800da82:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800da86:	9000      	str	r0, [sp, #0]
 800da88:	9a07      	ldr	r2, [sp, #28]
 800da8a:	9904      	ldr	r1, [sp, #16]
 800da8c:	9806      	ldr	r0, [sp, #24]
 800da8e:	f007 fdd9 	bl	8015644 <uxr_receive_reliable_message>
 800da92:	b308      	cbz	r0, 800dad8 <wait_session_status+0x150>
 800da94:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d041      	beq.n	800db20 <wait_session_status+0x198>
 800da9c:	f8cd 8010 	str.w	r8, [sp, #16]
 800daa0:	9507      	str	r5, [sp, #28]
 800daa2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800daa6:	9d06      	ldr	r5, [sp, #24]
 800daa8:	f04f 0902 	mov.w	r9, #2
 800daac:	e00a      	b.n	800dac4 <wait_session_status+0x13c>
 800daae:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800dab2:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800dab6:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800daba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dabc:	a916      	add	r1, sp, #88	@ 0x58
 800dabe:	4620      	mov	r0, r4
 800dac0:	f7ff fbda 	bl	800d278 <read_submessage_list>
 800dac4:	2204      	movs	r2, #4
 800dac6:	a916      	add	r1, sp, #88	@ 0x58
 800dac8:	4628      	mov	r0, r5
 800daca:	f007 fe35 	bl	8015738 <uxr_next_input_reliable_buffer_available>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d1ed      	bne.n	800daae <wait_session_status+0x126>
 800dad2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dad6:	9d07      	ldr	r5, [sp, #28]
 800dad8:	9903      	ldr	r1, [sp, #12]
 800dada:	4632      	mov	r2, r6
 800dadc:	4620      	mov	r0, r4
 800dade:	f7ff fa71 	bl	800cfc4 <write_submessage_acknack.isra.0>
 800dae2:	e76c      	b.n	800d9be <wait_session_status+0x36>
 800dae4:	4631      	mov	r1, r6
 800dae6:	f104 0008 	add.w	r0, r4, #8
 800daea:	f000 ffef 	bl	800eacc <uxr_get_input_best_effort_stream>
 800daee:	2800      	cmp	r0, #0
 800daf0:	f43f af65 	beq.w	800d9be <wait_session_status+0x36>
 800daf4:	9904      	ldr	r1, [sp, #16]
 800daf6:	f007 fd15 	bl	8015524 <uxr_receive_best_effort_message>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	f43f af5f 	beq.w	800d9be <wait_session_status+0x36>
 800db00:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800db04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800db06:	a90e      	add	r1, sp, #56	@ 0x38
 800db08:	4620      	mov	r0, r4
 800db0a:	f7ff fbb5 	bl	800d278 <read_submessage_list>
 800db0e:	e756      	b.n	800d9be <wait_session_status+0x36>
 800db10:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800db12:	e9d3 0400 	ldrd	r0, r4, [r3]
 800db16:	47a0      	blx	r4
 800db18:	2001      	movs	r0, #1
 800db1a:	b01f      	add	sp, #124	@ 0x7c
 800db1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db20:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800db24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800db26:	a90e      	add	r1, sp, #56	@ 0x38
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff fba5 	bl	800d278 <read_submessage_list>
 800db2e:	e7b5      	b.n	800da9c <wait_session_status+0x114>

0800db30 <uxr_delete_session_retries>:
 800db30:	b530      	push	{r4, r5, lr}
 800db32:	b08f      	sub	sp, #60	@ 0x3c
 800db34:	4604      	mov	r4, r0
 800db36:	460d      	mov	r5, r1
 800db38:	f000 fa3a 	bl	800dfb0 <uxr_session_header_offset>
 800db3c:	2300      	movs	r3, #0
 800db3e:	2210      	movs	r2, #16
 800db40:	9000      	str	r0, [sp, #0]
 800db42:	a902      	add	r1, sp, #8
 800db44:	a806      	add	r0, sp, #24
 800db46:	f7fe fd07 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800db4a:	a906      	add	r1, sp, #24
 800db4c:	4620      	mov	r0, r4
 800db4e:	f000 f981 	bl	800de54 <uxr_buffer_delete_session>
 800db52:	2200      	movs	r2, #0
 800db54:	4611      	mov	r1, r2
 800db56:	9b06      	ldr	r3, [sp, #24]
 800db58:	4620      	mov	r0, r4
 800db5a:	f000 f9d5 	bl	800df08 <uxr_stamp_session_header>
 800db5e:	a806      	add	r0, sp, #24
 800db60:	f7fe fd38 	bl	800c5d4 <ucdr_buffer_length>
 800db64:	462b      	mov	r3, r5
 800db66:	4602      	mov	r2, r0
 800db68:	a902      	add	r1, sp, #8
 800db6a:	4620      	mov	r0, r4
 800db6c:	f7ff ff0c 	bl	800d988 <wait_session_status>
 800db70:	b118      	cbz	r0, 800db7a <uxr_delete_session_retries+0x4a>
 800db72:	7960      	ldrb	r0, [r4, #5]
 800db74:	fab0 f080 	clz	r0, r0
 800db78:	0940      	lsrs	r0, r0, #5
 800db7a:	b00f      	add	sp, #60	@ 0x3c
 800db7c:	bd30      	pop	{r4, r5, pc}
 800db7e:	bf00      	nop

0800db80 <uxr_create_session>:
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	f100 0308 	add.w	r3, r0, #8
 800db88:	b0ab      	sub	sp, #172	@ 0xac
 800db8a:	4604      	mov	r4, r0
 800db8c:	4618      	mov	r0, r3
 800db8e:	9303      	str	r3, [sp, #12]
 800db90:	f000 feec 	bl	800e96c <uxr_reset_stream_storage>
 800db94:	4620      	mov	r0, r4
 800db96:	f000 fa0b 	bl	800dfb0 <uxr_session_header_offset>
 800db9a:	2300      	movs	r3, #0
 800db9c:	9000      	str	r0, [sp, #0]
 800db9e:	221c      	movs	r2, #28
 800dba0:	a90b      	add	r1, sp, #44	@ 0x2c
 800dba2:	a812      	add	r0, sp, #72	@ 0x48
 800dba4:	f7fe fcd8 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800dba8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dbaa:	8a1a      	ldrh	r2, [r3, #16]
 800dbac:	3a04      	subs	r2, #4
 800dbae:	b292      	uxth	r2, r2
 800dbb0:	a912      	add	r1, sp, #72	@ 0x48
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f000 f924 	bl	800de00 <uxr_buffer_create_session>
 800dbb8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 f990 	bl	800dee0 <uxr_stamp_create_session_header>
 800dbc0:	a812      	add	r0, sp, #72	@ 0x48
 800dbc2:	f7fe fd07 	bl	800c5d4 <ucdr_buffer_length>
 800dbc6:	23ff      	movs	r3, #255	@ 0xff
 800dbc8:	4683      	mov	fp, r0
 800dbca:	7163      	strb	r3, [r4, #5]
 800dbcc:	f04f 080a 	mov.w	r8, #10
 800dbd0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dbd2:	465a      	mov	r2, fp
 800dbd4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dbd8:	a90b      	add	r1, sp, #44	@ 0x2c
 800dbda:	47a8      	blx	r5
 800dbdc:	f000 ffe6 	bl	800ebac <uxr_millis>
 800dbe0:	2700      	movs	r7, #0
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dbe8:	e009      	b.n	800dbfe <uxr_create_session+0x7e>
 800dbea:	f000 ffdf 	bl	800ebac <uxr_millis>
 800dbee:	1b43      	subs	r3, r0, r5
 800dbf0:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	7962      	ldrb	r2, [r4, #5]
 800dbf8:	dd3d      	ble.n	800dc76 <uxr_create_session+0xf6>
 800dbfa:	2aff      	cmp	r2, #255	@ 0xff
 800dbfc:	d13b      	bne.n	800dc76 <uxr_create_session+0xf6>
 800dbfe:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800dc00:	a907      	add	r1, sp, #28
 800dc02:	6896      	ldr	r6, [r2, #8]
 800dc04:	6810      	ldr	r0, [r2, #0]
 800dc06:	aa08      	add	r2, sp, #32
 800dc08:	47b0      	blx	r6
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d0ed      	beq.n	800dbea <uxr_create_session+0x6a>
 800dc0e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dc12:	a81a      	add	r0, sp, #104	@ 0x68
 800dc14:	f7fe fcb2 	bl	800c57c <ucdr_init_buffer>
 800dc18:	f10d 031a 	add.w	r3, sp, #26
 800dc1c:	aa06      	add	r2, sp, #24
 800dc1e:	a91a      	add	r1, sp, #104	@ 0x68
 800dc20:	4620      	mov	r0, r4
 800dc22:	f88d 7018 	strb.w	r7, [sp, #24]
 800dc26:	f000 f985 	bl	800df34 <uxr_read_session_header>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d0dd      	beq.n	800dbea <uxr_create_session+0x6a>
 800dc2e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dc32:	2100      	movs	r1, #0
 800dc34:	f000 fe74 	bl	800e920 <uxr_stream_id_from_raw>
 800dc38:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800dc3c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800dc40:	9302      	str	r3, [sp, #8]
 800dc42:	f1b9 0f01 	cmp.w	r9, #1
 800dc46:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800dc4a:	fa5f fa80 	uxtb.w	sl, r0
 800dc4e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dc52:	d056      	beq.n	800dd02 <uxr_create_session+0x182>
 800dc54:	f1b9 0f02 	cmp.w	r9, #2
 800dc58:	d018      	beq.n	800dc8c <uxr_create_session+0x10c>
 800dc5a:	f1b9 0f00 	cmp.w	r9, #0
 800dc5e:	d1c4      	bne.n	800dbea <uxr_create_session+0x6a>
 800dc60:	4649      	mov	r1, r9
 800dc62:	4648      	mov	r0, r9
 800dc64:	f000 fe5c 	bl	800e920 <uxr_stream_id_from_raw>
 800dc68:	a91a      	add	r1, sp, #104	@ 0x68
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f7ff fb02 	bl	800d278 <read_submessage_list>
 800dc74:	e7b9      	b.n	800dbea <uxr_create_session+0x6a>
 800dc76:	f1b8 0801 	subs.w	r8, r8, #1
 800dc7a:	d001      	beq.n	800dc80 <uxr_create_session+0x100>
 800dc7c:	2aff      	cmp	r2, #255	@ 0xff
 800dc7e:	d0a7      	beq.n	800dbd0 <uxr_create_session+0x50>
 800dc80:	2a00      	cmp	r2, #0
 800dc82:	d05b      	beq.n	800dd3c <uxr_create_session+0x1bc>
 800dc84:	2000      	movs	r0, #0
 800dc86:	b02b      	add	sp, #172	@ 0xac
 800dc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8c:	9803      	ldr	r0, [sp, #12]
 800dc8e:	4631      	mov	r1, r6
 800dc90:	f000 ff26 	bl	800eae0 <uxr_get_input_reliable_stream>
 800dc94:	9004      	str	r0, [sp, #16]
 800dc96:	b370      	cbz	r0, 800dcf6 <uxr_create_session+0x176>
 800dc98:	aa1a      	add	r2, sp, #104	@ 0x68
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dc9e:	9205      	str	r2, [sp, #20]
 800dca0:	f7fe fc9c 	bl	800c5dc <ucdr_buffer_remaining>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f10d 0019 	add.w	r0, sp, #25
 800dcaa:	9000      	str	r0, [sp, #0]
 800dcac:	9a05      	ldr	r2, [sp, #20]
 800dcae:	9902      	ldr	r1, [sp, #8]
 800dcb0:	9804      	ldr	r0, [sp, #16]
 800dcb2:	f007 fcc7 	bl	8015644 <uxr_receive_reliable_message>
 800dcb6:	b1f0      	cbz	r0, 800dcf6 <uxr_create_session+0x176>
 800dcb8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d035      	beq.n	800dd2c <uxr_create_session+0x1ac>
 800dcc0:	f8cd b008 	str.w	fp, [sp, #8]
 800dcc4:	f04f 0902 	mov.w	r9, #2
 800dcc8:	f8dd b010 	ldr.w	fp, [sp, #16]
 800dccc:	e00a      	b.n	800dce4 <uxr_create_session+0x164>
 800dcce:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800dcd2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800dcd6:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800dcda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcdc:	a922      	add	r1, sp, #136	@ 0x88
 800dcde:	4620      	mov	r0, r4
 800dce0:	f7ff faca 	bl	800d278 <read_submessage_list>
 800dce4:	2204      	movs	r2, #4
 800dce6:	a922      	add	r1, sp, #136	@ 0x88
 800dce8:	4658      	mov	r0, fp
 800dcea:	f007 fd25 	bl	8015738 <uxr_next_input_reliable_buffer_available>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d1ed      	bne.n	800dcce <uxr_create_session+0x14e>
 800dcf2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dcf6:	4632      	mov	r2, r6
 800dcf8:	4651      	mov	r1, sl
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f7ff f962 	bl	800cfc4 <write_submessage_acknack.isra.0>
 800dd00:	e773      	b.n	800dbea <uxr_create_session+0x6a>
 800dd02:	9803      	ldr	r0, [sp, #12]
 800dd04:	4631      	mov	r1, r6
 800dd06:	f000 fee1 	bl	800eacc <uxr_get_input_best_effort_stream>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f43f af6d 	beq.w	800dbea <uxr_create_session+0x6a>
 800dd10:	9902      	ldr	r1, [sp, #8]
 800dd12:	f007 fc07 	bl	8015524 <uxr_receive_best_effort_message>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	f43f af67 	beq.w	800dbea <uxr_create_session+0x6a>
 800dd1c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800dd20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd22:	a91a      	add	r1, sp, #104	@ 0x68
 800dd24:	4620      	mov	r0, r4
 800dd26:	f7ff faa7 	bl	800d278 <read_submessage_list>
 800dd2a:	e75e      	b.n	800dbea <uxr_create_session+0x6a>
 800dd2c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800dd30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd32:	a91a      	add	r1, sp, #104	@ 0x68
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7ff fa9f 	bl	800d278 <read_submessage_list>
 800dd3a:	e7c1      	b.n	800dcc0 <uxr_create_session+0x140>
 800dd3c:	9803      	ldr	r0, [sp, #12]
 800dd3e:	f000 fe15 	bl	800e96c <uxr_reset_stream_storage>
 800dd42:	2001      	movs	r0, #1
 800dd44:	b02b      	add	sp, #172	@ 0xac
 800dd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4a:	bf00      	nop

0800dd4c <uxr_prepare_stream_to_write_submessage>:
 800dd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd50:	b082      	sub	sp, #8
 800dd52:	4606      	mov	r6, r0
 800dd54:	4610      	mov	r0, r2
 800dd56:	4614      	mov	r4, r2
 800dd58:	9101      	str	r1, [sp, #4]
 800dd5a:	461f      	mov	r7, r3
 800dd5c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800dd60:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800dd64:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800dd68:	f000 ff1a 	bl	800eba0 <uxr_submessage_padding>
 800dd6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd70:	1d21      	adds	r1, r4, #4
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	eb01 0a00 	add.w	sl, r1, r0
 800dd78:	d012      	beq.n	800dda0 <uxr_prepare_stream_to_write_submessage+0x54>
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d003      	beq.n	800dd86 <uxr_prepare_stream_to_write_submessage+0x3a>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	b002      	add	sp, #8
 800dd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd86:	4629      	mov	r1, r5
 800dd88:	f106 0008 	add.w	r0, r6, #8
 800dd8c:	f000 fe94 	bl	800eab8 <uxr_get_output_reliable_stream>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d0f4      	beq.n	800dd7e <uxr_prepare_stream_to_write_submessage+0x32>
 800dd94:	4651      	mov	r1, sl
 800dd96:	463a      	mov	r2, r7
 800dd98:	f007 fe84 	bl	8015aa4 <uxr_prepare_reliable_buffer_to_write>
 800dd9c:	b968      	cbnz	r0, 800ddba <uxr_prepare_stream_to_write_submessage+0x6e>
 800dd9e:	e7ee      	b.n	800dd7e <uxr_prepare_stream_to_write_submessage+0x32>
 800dda0:	4629      	mov	r1, r5
 800dda2:	f106 0008 	add.w	r0, r6, #8
 800dda6:	f000 fe7f 	bl	800eaa8 <uxr_get_output_best_effort_stream>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	d0e7      	beq.n	800dd7e <uxr_prepare_stream_to_write_submessage+0x32>
 800ddae:	4651      	mov	r1, sl
 800ddb0:	463a      	mov	r2, r7
 800ddb2:	f007 fda9 	bl	8015908 <uxr_prepare_best_effort_buffer_to_write>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d0e1      	beq.n	800dd7e <uxr_prepare_stream_to_write_submessage+0x32>
 800ddba:	464b      	mov	r3, r9
 800ddbc:	b2a2      	uxth	r2, r4
 800ddbe:	4641      	mov	r1, r8
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f000 fead 	bl	800eb20 <uxr_buffer_submessage_header>
 800ddc6:	2001      	movs	r0, #1
 800ddc8:	b002      	add	sp, #8
 800ddca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddce:	bf00      	nop

0800ddd0 <uxr_init_session_info>:
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f361 0307 	bfi	r3, r1, #0, #8
 800ddd6:	0e11      	lsrs	r1, r2, #24
 800ddd8:	f361 230f 	bfi	r3, r1, #8, #8
 800dddc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800dde0:	f361 4317 	bfi	r3, r1, #16, #8
 800dde4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800dde8:	f361 631f 	bfi	r3, r1, #24, #8
 800ddec:	f04f 0c09 	mov.w	ip, #9
 800ddf0:	21ff      	movs	r1, #255	@ 0xff
 800ddf2:	6003      	str	r3, [r0, #0]
 800ddf4:	7102      	strb	r2, [r0, #4]
 800ddf6:	f8a0 c006 	strh.w	ip, [r0, #6]
 800ddfa:	7141      	strb	r1, [r0, #5]
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop

0800de00 <uxr_buffer_create_session>:
 800de00:	b530      	push	{r4, r5, lr}
 800de02:	4d13      	ldr	r5, [pc, #76]	@ (800de50 <uxr_buffer_create_session+0x50>)
 800de04:	b089      	sub	sp, #36	@ 0x24
 800de06:	2300      	movs	r3, #0
 800de08:	9307      	str	r3, [sp, #28]
 800de0a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800de0e:	682a      	ldr	r2, [r5, #0]
 800de10:	9200      	str	r2, [sp, #0]
 800de12:	460c      	mov	r4, r1
 800de14:	2201      	movs	r2, #1
 800de16:	88a9      	ldrh	r1, [r5, #4]
 800de18:	9301      	str	r3, [sp, #4]
 800de1a:	80c2      	strh	r2, [r0, #6]
 800de1c:	f8ad 1006 	strh.w	r1, [sp, #6]
 800de20:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800de24:	7800      	ldrb	r0, [r0, #0]
 800de26:	9303      	str	r3, [sp, #12]
 800de28:	f88d 2004 	strb.w	r2, [sp, #4]
 800de2c:	9102      	str	r1, [sp, #8]
 800de2e:	2210      	movs	r2, #16
 800de30:	4619      	mov	r1, r3
 800de32:	f88d 000c 	strb.w	r0, [sp, #12]
 800de36:	4620      	mov	r0, r4
 800de38:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800de3c:	9306      	str	r3, [sp, #24]
 800de3e:	f000 fe6f 	bl	800eb20 <uxr_buffer_submessage_header>
 800de42:	4669      	mov	r1, sp
 800de44:	4620      	mov	r0, r4
 800de46:	f001 fe8f 	bl	800fb68 <uxr_serialize_CREATE_CLIENT_Payload>
 800de4a:	b009      	add	sp, #36	@ 0x24
 800de4c:	bd30      	pop	{r4, r5, pc}
 800de4e:	bf00      	nop
 800de50:	080188e0 	.word	0x080188e0

0800de54 <uxr_buffer_delete_session>:
 800de54:	b510      	push	{r4, lr}
 800de56:	4a0c      	ldr	r2, [pc, #48]	@ (800de88 <uxr_buffer_delete_session+0x34>)
 800de58:	b082      	sub	sp, #8
 800de5a:	460c      	mov	r4, r1
 800de5c:	2302      	movs	r3, #2
 800de5e:	8911      	ldrh	r1, [r2, #8]
 800de60:	80c3      	strh	r3, [r0, #6]
 800de62:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800de66:	2300      	movs	r3, #0
 800de68:	2204      	movs	r2, #4
 800de6a:	f8ad 1006 	strh.w	r1, [sp, #6]
 800de6e:	4620      	mov	r0, r4
 800de70:	2103      	movs	r1, #3
 800de72:	f8ad c004 	strh.w	ip, [sp, #4]
 800de76:	f000 fe53 	bl	800eb20 <uxr_buffer_submessage_header>
 800de7a:	a901      	add	r1, sp, #4
 800de7c:	4620      	mov	r0, r4
 800de7e:	f001 ff2b 	bl	800fcd8 <uxr_serialize_DELETE_Payload>
 800de82:	b002      	add	sp, #8
 800de84:	bd10      	pop	{r4, pc}
 800de86:	bf00      	nop
 800de88:	080188e0 	.word	0x080188e0

0800de8c <uxr_read_create_session_status>:
 800de8c:	b510      	push	{r4, lr}
 800de8e:	460b      	mov	r3, r1
 800de90:	b088      	sub	sp, #32
 800de92:	4604      	mov	r4, r0
 800de94:	a901      	add	r1, sp, #4
 800de96:	4618      	mov	r0, r3
 800de98:	f001 ff2e 	bl	800fcf8 <uxr_deserialize_STATUS_AGENT_Payload>
 800de9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dea0:	7163      	strb	r3, [r4, #5]
 800dea2:	b008      	add	sp, #32
 800dea4:	bd10      	pop	{r4, pc}
 800dea6:	bf00      	nop

0800dea8 <uxr_read_delete_session_status>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	460b      	mov	r3, r1
 800deac:	b082      	sub	sp, #8
 800deae:	4604      	mov	r4, r0
 800deb0:	4669      	mov	r1, sp
 800deb2:	4618      	mov	r0, r3
 800deb4:	f001 ff50 	bl	800fd58 <uxr_deserialize_STATUS_Payload>
 800deb8:	88e3      	ldrh	r3, [r4, #6]
 800deba:	2b02      	cmp	r3, #2
 800debc:	d001      	beq.n	800dec2 <uxr_read_delete_session_status+0x1a>
 800debe:	b002      	add	sp, #8
 800dec0:	bd10      	pop	{r4, pc}
 800dec2:	f10d 0002 	add.w	r0, sp, #2
 800dec6:	f7fe fefb 	bl	800ccc0 <uxr_object_id_from_raw>
 800deca:	f8bd 3000 	ldrh.w	r3, [sp]
 800dece:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ded2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ded6:	bf08      	it	eq
 800ded8:	7162      	strbeq	r2, [r4, #5]
 800deda:	b002      	add	sp, #8
 800dedc:	bd10      	pop	{r4, pc}
 800dede:	bf00      	nop

0800dee0 <uxr_stamp_create_session_header>:
 800dee0:	b510      	push	{r4, lr}
 800dee2:	2208      	movs	r2, #8
 800dee4:	b08a      	sub	sp, #40	@ 0x28
 800dee6:	4604      	mov	r4, r0
 800dee8:	eb0d 0002 	add.w	r0, sp, r2
 800deec:	f7fe fb46 	bl	800c57c <ucdr_init_buffer>
 800def0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def4:	9400      	str	r4, [sp, #0]
 800def6:	2300      	movs	r3, #0
 800def8:	461a      	mov	r2, r3
 800defa:	a802      	add	r0, sp, #8
 800defc:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800df00:	f001 f80c 	bl	800ef1c <uxr_serialize_message_header>
 800df04:	b00a      	add	sp, #40	@ 0x28
 800df06:	bd10      	pop	{r4, pc}

0800df08 <uxr_stamp_session_header>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	4604      	mov	r4, r0
 800df0c:	b08a      	sub	sp, #40	@ 0x28
 800df0e:	4616      	mov	r6, r2
 800df10:	2208      	movs	r2, #8
 800df12:	eb0d 0002 	add.w	r0, sp, r2
 800df16:	460d      	mov	r5, r1
 800df18:	4619      	mov	r1, r3
 800df1a:	f7fe fb2f 	bl	800c57c <ucdr_init_buffer>
 800df1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df22:	9400      	str	r4, [sp, #0]
 800df24:	4633      	mov	r3, r6
 800df26:	462a      	mov	r2, r5
 800df28:	a802      	add	r0, sp, #8
 800df2a:	f000 fff7 	bl	800ef1c <uxr_serialize_message_header>
 800df2e:	b00a      	add	sp, #40	@ 0x28
 800df30:	bd70      	pop	{r4, r5, r6, pc}
 800df32:	bf00      	nop

0800df34 <uxr_read_session_header>:
 800df34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df36:	4607      	mov	r7, r0
 800df38:	b085      	sub	sp, #20
 800df3a:	4608      	mov	r0, r1
 800df3c:	460c      	mov	r4, r1
 800df3e:	4615      	mov	r5, r2
 800df40:	461e      	mov	r6, r3
 800df42:	f7fe fb4b 	bl	800c5dc <ucdr_buffer_remaining>
 800df46:	2808      	cmp	r0, #8
 800df48:	d802      	bhi.n	800df50 <uxr_read_session_header+0x1c>
 800df4a:	2000      	movs	r0, #0
 800df4c:	b005      	add	sp, #20
 800df4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df50:	ab03      	add	r3, sp, #12
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	462a      	mov	r2, r5
 800df56:	4633      	mov	r3, r6
 800df58:	f10d 010b 	add.w	r1, sp, #11
 800df5c:	4620      	mov	r0, r4
 800df5e:	f000 fffb 	bl	800ef58 <uxr_deserialize_message_header>
 800df62:	783a      	ldrb	r2, [r7, #0]
 800df64:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800df68:	4293      	cmp	r3, r2
 800df6a:	d1ee      	bne.n	800df4a <uxr_read_session_header+0x16>
 800df6c:	061b      	lsls	r3, r3, #24
 800df6e:	d41c      	bmi.n	800dfaa <uxr_read_session_header+0x76>
 800df70:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800df74:	787b      	ldrb	r3, [r7, #1]
 800df76:	429a      	cmp	r2, r3
 800df78:	d003      	beq.n	800df82 <uxr_read_session_header+0x4e>
 800df7a:	2001      	movs	r0, #1
 800df7c:	f080 0001 	eor.w	r0, r0, #1
 800df80:	e7e4      	b.n	800df4c <uxr_read_session_header+0x18>
 800df82:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800df86:	78bb      	ldrb	r3, [r7, #2]
 800df88:	429a      	cmp	r2, r3
 800df8a:	f107 0102 	add.w	r1, r7, #2
 800df8e:	d1f4      	bne.n	800df7a <uxr_read_session_header+0x46>
 800df90:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800df94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df98:	429a      	cmp	r2, r3
 800df9a:	d1ee      	bne.n	800df7a <uxr_read_session_header+0x46>
 800df9c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800dfa0:	784b      	ldrb	r3, [r1, #1]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d1e9      	bne.n	800df7a <uxr_read_session_header+0x46>
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	e7e8      	b.n	800df7c <uxr_read_session_header+0x48>
 800dfaa:	2001      	movs	r0, #1
 800dfac:	e7ce      	b.n	800df4c <uxr_read_session_header+0x18>
 800dfae:	bf00      	nop

0800dfb0 <uxr_session_header_offset>:
 800dfb0:	f990 3000 	ldrsb.w	r3, [r0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	bfb4      	ite	lt
 800dfb8:	2004      	movlt	r0, #4
 800dfba:	2008      	movge	r0, #8
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop

0800dfc0 <uxr_init_base_object_request>:
 800dfc0:	b510      	push	{r4, lr}
 800dfc2:	88c3      	ldrh	r3, [r0, #6]
 800dfc4:	b082      	sub	sp, #8
 800dfc6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800dfca:	9101      	str	r1, [sp, #4]
 800dfcc:	f1a3 010a 	sub.w	r1, r3, #10
 800dfd0:	b289      	uxth	r1, r1
 800dfd2:	42a1      	cmp	r1, r4
 800dfd4:	d80e      	bhi.n	800dff4 <uxr_init_base_object_request+0x34>
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b29c      	uxth	r4, r3
 800dfda:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	80c4      	strh	r4, [r0, #6]
 800dfe2:	9801      	ldr	r0, [sp, #4]
 800dfe4:	7011      	strb	r1, [r2, #0]
 800dfe6:	7053      	strb	r3, [r2, #1]
 800dfe8:	1c91      	adds	r1, r2, #2
 800dfea:	f7fe fe7d 	bl	800cce8 <uxr_object_id_to_raw>
 800dfee:	4620      	mov	r0, r4
 800dff0:	b002      	add	sp, #8
 800dff2:	bd10      	pop	{r4, pc}
 800dff4:	230a      	movs	r3, #10
 800dff6:	2100      	movs	r1, #0
 800dff8:	461c      	mov	r4, r3
 800dffa:	e7f1      	b.n	800dfe0 <uxr_init_base_object_request+0x20>

0800dffc <uxr_parse_base_object_request>:
 800dffc:	b570      	push	{r4, r5, r6, lr}
 800dffe:	4604      	mov	r4, r0
 800e000:	3002      	adds	r0, #2
 800e002:	460d      	mov	r5, r1
 800e004:	4616      	mov	r6, r2
 800e006:	f7fe fe5b 	bl	800ccc0 <uxr_object_id_from_raw>
 800e00a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e00e:	8028      	strh	r0, [r5, #0]
 800e010:	806b      	strh	r3, [r5, #2]
 800e012:	8823      	ldrh	r3, [r4, #0]
 800e014:	ba5b      	rev16	r3, r3
 800e016:	8033      	strh	r3, [r6, #0]
 800e018:	bd70      	pop	{r4, r5, r6, pc}
 800e01a:	bf00      	nop

0800e01c <uxr_init_framing_io>:
 800e01c:	2300      	movs	r3, #0
 800e01e:	7041      	strb	r1, [r0, #1]
 800e020:	7003      	strb	r3, [r0, #0]
 800e022:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop

0800e028 <uxr_write_framed_msg>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	f890 c001 	ldrb.w	ip, [r0, #1]
 800e030:	4617      	mov	r7, r2
 800e032:	227e      	movs	r2, #126	@ 0x7e
 800e034:	b085      	sub	sp, #20
 800e036:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800e03a:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800e03e:	2a01      	cmp	r2, #1
 800e040:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800e044:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800e048:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e04c:	4604      	mov	r4, r0
 800e04e:	460e      	mov	r6, r1
 800e050:	469a      	mov	sl, r3
 800e052:	f240 812e 	bls.w	800e2b2 <uxr_write_framed_msg+0x28a>
 800e056:	2003      	movs	r0, #3
 800e058:	2102      	movs	r1, #2
 800e05a:	f04f 0905 	mov.w	r9, #5
 800e05e:	2204      	movs	r2, #4
 800e060:	4686      	mov	lr, r0
 800e062:	460b      	mov	r3, r1
 800e064:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800e068:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800e06c:	f1bc 0f01 	cmp.w	ip, #1
 800e070:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e074:	4421      	add	r1, r4
 800e076:	f240 8110 	bls.w	800e29a <uxr_write_framed_msg+0x272>
 800e07a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e07e:	fa5f fc8b 	uxtb.w	ip, fp
 800e082:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800e086:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800e08a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800e08e:	f1be 0f01 	cmp.w	lr, #1
 800e092:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800e096:	b2ed      	uxtb	r5, r5
 800e098:	d94c      	bls.n	800e134 <uxr_write_framed_msg+0x10c>
 800e09a:	4420      	add	r0, r4
 800e09c:	2d01      	cmp	r5, #1
 800e09e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800e0a2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e0a6:	d95d      	bls.n	800e164 <uxr_write_framed_msg+0x13c>
 800e0a8:	18a0      	adds	r0, r4, r2
 800e0aa:	3201      	adds	r2, #1
 800e0ac:	b2d2      	uxtb	r2, r2
 800e0ae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e0b2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e0b6:	f1bb 0f00 	cmp.w	fp, #0
 800e0ba:	f000 8108 	beq.w	800e2ce <uxr_write_framed_msg+0x2a6>
 800e0be:	f04f 0c00 	mov.w	ip, #0
 800e0c2:	4661      	mov	r1, ip
 800e0c4:	46de      	mov	lr, fp
 800e0c6:	46e3      	mov	fp, ip
 800e0c8:	46d4      	mov	ip, sl
 800e0ca:	468a      	mov	sl, r1
 800e0cc:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800e2d8 <uxr_write_framed_msg+0x2b0>
 800e0d0:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800e0d4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e0d8:	2901      	cmp	r1, #1
 800e0da:	d91b      	bls.n	800e114 <uxr_write_framed_msg+0xec>
 800e0dc:	2a29      	cmp	r2, #41	@ 0x29
 800e0de:	d84e      	bhi.n	800e17e <uxr_write_framed_msg+0x156>
 800e0e0:	18a1      	adds	r1, r4, r2
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e0e8:	b2d2      	uxtb	r2, r2
 800e0ea:	ea8b 0303 	eor.w	r3, fp, r3
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e0f4:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800e0f8:	f10a 0a01 	add.w	sl, sl, #1
 800e0fc:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800e100:	45d6      	cmp	lr, sl
 800e102:	d95a      	bls.n	800e1ba <uxr_write_framed_msg+0x192>
 800e104:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800e108:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e10c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e110:	2901      	cmp	r1, #1
 800e112:	d8e3      	bhi.n	800e0dc <uxr_write_framed_msg+0xb4>
 800e114:	1c51      	adds	r1, r2, #1
 800e116:	b2c9      	uxtb	r1, r1
 800e118:	2929      	cmp	r1, #41	@ 0x29
 800e11a:	d830      	bhi.n	800e17e <uxr_write_framed_msg+0x156>
 800e11c:	18a1      	adds	r1, r4, r2
 800e11e:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800e122:	3202      	adds	r2, #2
 800e124:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800e128:	f083 0020 	eor.w	r0, r3, #32
 800e12c:	b2d2      	uxtb	r2, r2
 800e12e:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800e132:	e7da      	b.n	800e0ea <uxr_write_framed_msg+0xc2>
 800e134:	eb04 0e00 	add.w	lr, r4, r0
 800e138:	f08c 0c20 	eor.w	ip, ip, #32
 800e13c:	1c82      	adds	r2, r0, #2
 800e13e:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800e142:	b2d2      	uxtb	r2, r2
 800e144:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e148:	2d01      	cmp	r5, #1
 800e14a:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800e14e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e152:	d907      	bls.n	800e164 <uxr_write_framed_msg+0x13c>
 800e154:	4422      	add	r2, r4
 800e156:	3003      	adds	r0, #3
 800e158:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800e15c:	b2c2      	uxtb	r2, r0
 800e15e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e162:	e7ac      	b.n	800e0be <uxr_write_framed_msg+0x96>
 800e164:	18a0      	adds	r0, r4, r2
 800e166:	f081 0120 	eor.w	r1, r1, #32
 800e16a:	3202      	adds	r2, #2
 800e16c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800e170:	b2d2      	uxtb	r2, r2
 800e172:	217d      	movs	r1, #125	@ 0x7d
 800e174:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e178:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e17c:	e79f      	b.n	800e0be <uxr_write_framed_msg+0x96>
 800e17e:	e9cd ba00 	strd	fp, sl, [sp]
 800e182:	2500      	movs	r5, #0
 800e184:	46e2      	mov	sl, ip
 800e186:	46f3      	mov	fp, lr
 800e188:	e000      	b.n	800e18c <uxr_write_framed_msg+0x164>
 800e18a:	b190      	cbz	r0, 800e1b2 <uxr_write_framed_msg+0x18a>
 800e18c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e190:	1b52      	subs	r2, r2, r5
 800e192:	4643      	mov	r3, r8
 800e194:	4421      	add	r1, r4
 800e196:	4638      	mov	r0, r7
 800e198:	47b0      	blx	r6
 800e19a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e19e:	4405      	add	r5, r0
 800e1a0:	4295      	cmp	r5, r2
 800e1a2:	d3f2      	bcc.n	800e18a <uxr_write_framed_msg+0x162>
 800e1a4:	46d4      	mov	ip, sl
 800e1a6:	46de      	mov	lr, fp
 800e1a8:	f8dd a004 	ldr.w	sl, [sp, #4]
 800e1ac:	f8dd b000 	ldr.w	fp, [sp]
 800e1b0:	d06f      	beq.n	800e292 <uxr_write_framed_msg+0x26a>
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	b005      	add	sp, #20
 800e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ba:	46dc      	mov	ip, fp
 800e1bc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e1c0:	f8ad c00c 	strh.w	ip, [sp, #12]
 800e1c4:	46f3      	mov	fp, lr
 800e1c6:	fa5f fc8c 	uxtb.w	ip, ip
 800e1ca:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	f04f 0900 	mov.w	r9, #0
 800e1d4:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800e1d8:	d930      	bls.n	800e23c <uxr_write_framed_msg+0x214>
 800e1da:	2a29      	cmp	r2, #41	@ 0x29
 800e1dc:	d91c      	bls.n	800e218 <uxr_write_framed_msg+0x1f0>
 800e1de:	2500      	movs	r5, #0
 800e1e0:	e001      	b.n	800e1e6 <uxr_write_framed_msg+0x1be>
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d0e5      	beq.n	800e1b2 <uxr_write_framed_msg+0x18a>
 800e1e6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e1ea:	1b52      	subs	r2, r2, r5
 800e1ec:	4643      	mov	r3, r8
 800e1ee:	4421      	add	r1, r4
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	47b0      	blx	r6
 800e1f4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e1f8:	4405      	add	r5, r0
 800e1fa:	4295      	cmp	r5, r2
 800e1fc:	d3f1      	bcc.n	800e1e2 <uxr_write_framed_msg+0x1ba>
 800e1fe:	d1d8      	bne.n	800e1b2 <uxr_write_framed_msg+0x18a>
 800e200:	f109 0310 	add.w	r3, r9, #16
 800e204:	446b      	add	r3, sp
 800e206:	2200      	movs	r2, #0
 800e208:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800e20c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e210:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800e214:	2b01      	cmp	r3, #1
 800e216:	d911      	bls.n	800e23c <uxr_write_framed_msg+0x214>
 800e218:	18a3      	adds	r3, r4, r2
 800e21a:	3201      	adds	r2, #1
 800e21c:	b2d2      	uxtb	r2, r2
 800e21e:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800e222:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e226:	f1b9 0f00 	cmp.w	r9, #0
 800e22a:	d119      	bne.n	800e260 <uxr_write_framed_msg+0x238>
 800e22c:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800e230:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800e234:	2b01      	cmp	r3, #1
 800e236:	f04f 0901 	mov.w	r9, #1
 800e23a:	d8ce      	bhi.n	800e1da <uxr_write_framed_msg+0x1b2>
 800e23c:	1c53      	adds	r3, r2, #1
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b29      	cmp	r3, #41	@ 0x29
 800e242:	d8cc      	bhi.n	800e1de <uxr_write_framed_msg+0x1b6>
 800e244:	18a3      	adds	r3, r4, r2
 800e246:	3202      	adds	r2, #2
 800e248:	f08c 0c20 	eor.w	ip, ip, #32
 800e24c:	b2d2      	uxtb	r2, r2
 800e24e:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800e252:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800e256:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e25a:	f1b9 0f00 	cmp.w	r9, #0
 800e25e:	d0e5      	beq.n	800e22c <uxr_write_framed_msg+0x204>
 800e260:	2500      	movs	r5, #0
 800e262:	e001      	b.n	800e268 <uxr_write_framed_msg+0x240>
 800e264:	2800      	cmp	r0, #0
 800e266:	d0a4      	beq.n	800e1b2 <uxr_write_framed_msg+0x18a>
 800e268:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e26c:	1b52      	subs	r2, r2, r5
 800e26e:	4643      	mov	r3, r8
 800e270:	4421      	add	r1, r4
 800e272:	4638      	mov	r0, r7
 800e274:	47b0      	blx	r6
 800e276:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e27a:	4405      	add	r5, r0
 800e27c:	4295      	cmp	r5, r2
 800e27e:	d3f1      	bcc.n	800e264 <uxr_write_framed_msg+0x23c>
 800e280:	d197      	bne.n	800e1b2 <uxr_write_framed_msg+0x18a>
 800e282:	2300      	movs	r3, #0
 800e284:	fa1f f08b 	uxth.w	r0, fp
 800e288:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e28c:	b005      	add	sp, #20
 800e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e292:	2300      	movs	r3, #0
 800e294:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e298:	e732      	b.n	800e100 <uxr_write_framed_msg+0xd8>
 800e29a:	44a6      	add	lr, r4
 800e29c:	f085 0520 	eor.w	r5, r5, #32
 800e2a0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800e2aa:	464a      	mov	r2, r9
 800e2ac:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800e2b0:	e6e5      	b.n	800e07e <uxr_write_framed_msg+0x56>
 800e2b2:	f08c 0c20 	eor.w	ip, ip, #32
 800e2b6:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800e2ba:	2103      	movs	r1, #3
 800e2bc:	2004      	movs	r0, #4
 800e2be:	f04f 0906 	mov.w	r9, #6
 800e2c2:	2205      	movs	r2, #5
 800e2c4:	4686      	mov	lr, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e2cc:	e6ca      	b.n	800e064 <uxr_write_framed_msg+0x3c>
 800e2ce:	f8ad b00c 	strh.w	fp, [sp, #12]
 800e2d2:	46dc      	mov	ip, fp
 800e2d4:	e779      	b.n	800e1ca <uxr_write_framed_msg+0x1a2>
 800e2d6:	bf00      	nop
 800e2d8:	080192d4 	.word	0x080192d4

0800e2dc <uxr_framing_read_transport>:
 800e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	461f      	mov	r7, r3
 800e2e6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800e2ea:	4689      	mov	r9, r1
 800e2ec:	4692      	mov	sl, r2
 800e2ee:	f000 fc5d 	bl	800ebac <uxr_millis>
 800e2f2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e2f6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800e2fa:	42b3      	cmp	r3, r6
 800e2fc:	4680      	mov	r8, r0
 800e2fe:	d062      	beq.n	800e3c6 <uxr_framing_read_transport+0xea>
 800e300:	d81c      	bhi.n	800e33c <uxr_framing_read_transport+0x60>
 800e302:	1e75      	subs	r5, r6, #1
 800e304:	1aed      	subs	r5, r5, r3
 800e306:	b2ed      	uxtb	r5, r5
 800e308:	2600      	movs	r6, #0
 800e30a:	455d      	cmp	r5, fp
 800e30c:	d81f      	bhi.n	800e34e <uxr_framing_read_transport+0x72>
 800e30e:	19ab      	adds	r3, r5, r6
 800e310:	455b      	cmp	r3, fp
 800e312:	bf84      	itt	hi
 800e314:	ebab 0b05 	subhi.w	fp, fp, r5
 800e318:	fa5f f68b 	uxtbhi.w	r6, fp
 800e31c:	b9e5      	cbnz	r5, 800e358 <uxr_framing_read_transport+0x7c>
 800e31e:	f04f 0b00 	mov.w	fp, #0
 800e322:	f000 fc43 	bl	800ebac <uxr_millis>
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	eba0 0108 	sub.w	r1, r0, r8
 800e32c:	1a5b      	subs	r3, r3, r1
 800e32e:	4658      	mov	r0, fp
 800e330:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e334:	603b      	str	r3, [r7, #0]
 800e336:	b003      	add	sp, #12
 800e338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e33c:	2e00      	cmp	r6, #0
 800e33e:	d04a      	beq.n	800e3d6 <uxr_framing_read_transport+0xfa>
 800e340:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800e344:	b2dd      	uxtb	r5, r3
 800e346:	3e01      	subs	r6, #1
 800e348:	455d      	cmp	r5, fp
 800e34a:	b2f6      	uxtb	r6, r6
 800e34c:	d9df      	bls.n	800e30e <uxr_framing_read_transport+0x32>
 800e34e:	fa5f f58b 	uxtb.w	r5, fp
 800e352:	2600      	movs	r6, #0
 800e354:	2d00      	cmp	r5, #0
 800e356:	d0e2      	beq.n	800e31e <uxr_framing_read_transport+0x42>
 800e358:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e35c:	3102      	adds	r1, #2
 800e35e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	4421      	add	r1, r4
 800e366:	462a      	mov	r2, r5
 800e368:	4650      	mov	r0, sl
 800e36a:	47c8      	blx	r9
 800e36c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e370:	4a1b      	ldr	r2, [pc, #108]	@ (800e3e0 <uxr_framing_read_transport+0x104>)
 800e372:	4403      	add	r3, r0
 800e374:	0859      	lsrs	r1, r3, #1
 800e376:	4683      	mov	fp, r0
 800e378:	fba2 0101 	umull	r0, r1, r2, r1
 800e37c:	0889      	lsrs	r1, r1, #2
 800e37e:	222a      	movs	r2, #42	@ 0x2a
 800e380:	fb02 3111 	mls	r1, r2, r1, r3
 800e384:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800e388:	f1bb 0f00 	cmp.w	fp, #0
 800e38c:	d0c7      	beq.n	800e31e <uxr_framing_read_transport+0x42>
 800e38e:	45ab      	cmp	fp, r5
 800e390:	d1c7      	bne.n	800e322 <uxr_framing_read_transport+0x46>
 800e392:	2e00      	cmp	r6, #0
 800e394:	d0c5      	beq.n	800e322 <uxr_framing_read_transport+0x46>
 800e396:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	3102      	adds	r1, #2
 800e39c:	4632      	mov	r2, r6
 800e39e:	4421      	add	r1, r4
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	4650      	mov	r0, sl
 800e3a4:	47c8      	blx	r9
 800e3a6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e3aa:	4a0d      	ldr	r2, [pc, #52]	@ (800e3e0 <uxr_framing_read_transport+0x104>)
 800e3ac:	4403      	add	r3, r0
 800e3ae:	0859      	lsrs	r1, r3, #1
 800e3b0:	fba2 2101 	umull	r2, r1, r2, r1
 800e3b4:	0889      	lsrs	r1, r1, #2
 800e3b6:	222a      	movs	r2, #42	@ 0x2a
 800e3b8:	fb02 3311 	mls	r3, r2, r1, r3
 800e3bc:	eb00 0b05 	add.w	fp, r0, r5
 800e3c0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800e3c4:	e7ad      	b.n	800e322 <uxr_framing_read_transport+0x46>
 800e3c6:	2600      	movs	r6, #0
 800e3c8:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800e3cc:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800e3ce:	d9be      	bls.n	800e34e <uxr_framing_read_transport+0x72>
 800e3d0:	2529      	movs	r5, #41	@ 0x29
 800e3d2:	2102      	movs	r1, #2
 800e3d4:	e7c3      	b.n	800e35e <uxr_framing_read_transport+0x82>
 800e3d6:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800e3da:	b2dd      	uxtb	r5, r3
 800e3dc:	e795      	b.n	800e30a <uxr_framing_read_transport+0x2e>
 800e3de:	bf00      	nop
 800e3e0:	30c30c31 	.word	0x30c30c31

0800e3e4 <uxr_read_framed_msg>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	461d      	mov	r5, r3
 800e3ea:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800e3ee:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	459c      	cmp	ip, r3
 800e3f6:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	460f      	mov	r7, r1
 800e3fe:	4616      	mov	r6, r2
 800e400:	f000 81ae 	beq.w	800e760 <uxr_read_framed_msg+0x37c>
 800e404:	2000      	movs	r0, #0
 800e406:	4639      	mov	r1, r7
 800e408:	2800      	cmp	r0, #0
 800e40a:	d138      	bne.n	800e47e <uxr_read_framed_msg+0x9a>
 800e40c:	468a      	mov	sl, r1
 800e40e:	7823      	ldrb	r3, [r4, #0]
 800e410:	2b07      	cmp	r3, #7
 800e412:	d8fd      	bhi.n	800e410 <uxr_read_framed_msg+0x2c>
 800e414:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e418:	0116013b 	.word	0x0116013b
 800e41c:	00cd00f0 	.word	0x00cd00f0
 800e420:	005a00a0 	.word	0x005a00a0
 800e424:	00080037 	.word	0x00080037
 800e428:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e42c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e430:	4290      	cmp	r0, r2
 800e432:	f000 8167 	beq.w	800e704 <uxr_read_framed_msg+0x320>
 800e436:	18a3      	adds	r3, r4, r2
 800e438:	1c57      	adds	r7, r2, #1
 800e43a:	49c7      	ldr	r1, [pc, #796]	@ (800e758 <uxr_read_framed_msg+0x374>)
 800e43c:	f893 c002 	ldrb.w	ip, [r3, #2]
 800e440:	087b      	lsrs	r3, r7, #1
 800e442:	fba1 8303 	umull	r8, r3, r1, r3
 800e446:	089b      	lsrs	r3, r3, #2
 800e448:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e44c:	fb08 7313 	mls	r3, r8, r3, r7
 800e450:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800e454:	b2df      	uxtb	r7, r3
 800e456:	f000 81b2 	beq.w	800e7be <uxr_read_framed_msg+0x3da>
 800e45a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e45e:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800e462:	f000 8220 	beq.w	800e8a6 <uxr_read_framed_msg+0x4c2>
 800e466:	4661      	mov	r1, ip
 800e468:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e46a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e46c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e470:	b29b      	uxth	r3, r3
 800e472:	2100      	movs	r1, #0
 800e474:	429a      	cmp	r2, r3
 800e476:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e478:	7021      	strb	r1, [r4, #0]
 800e47a:	f000 8198 	beq.w	800e7ae <uxr_read_framed_msg+0x3ca>
 800e47e:	2000      	movs	r0, #0
 800e480:	b005      	add	sp, #20
 800e482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e486:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e48a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e48e:	4297      	cmp	r7, r2
 800e490:	f000 8148 	beq.w	800e724 <uxr_read_framed_msg+0x340>
 800e494:	18a3      	adds	r3, r4, r2
 800e496:	f102 0c01 	add.w	ip, r2, #1
 800e49a:	49af      	ldr	r1, [pc, #700]	@ (800e758 <uxr_read_framed_msg+0x374>)
 800e49c:	7898      	ldrb	r0, [r3, #2]
 800e49e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e4a2:	fba1 8303 	umull	r8, r3, r1, r3
 800e4a6:	089b      	lsrs	r3, r3, #2
 800e4a8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e4ac:	fb08 c313 	mls	r3, r8, r3, ip
 800e4b0:	287d      	cmp	r0, #125	@ 0x7d
 800e4b2:	fa5f fc83 	uxtb.w	ip, r3
 800e4b6:	f000 8194 	beq.w	800e7e2 <uxr_read_framed_msg+0x3fe>
 800e4ba:	287e      	cmp	r0, #126	@ 0x7e
 800e4bc:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e4c0:	f000 8200 	beq.w	800e8c4 <uxr_read_framed_msg+0x4e0>
 800e4c4:	2307      	movs	r3, #7
 800e4c6:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e4c8:	7023      	strb	r3, [r4, #0]
 800e4ca:	e7a0      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e4cc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e4ce:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800e4d0:	429f      	cmp	r7, r3
 800e4d2:	f240 8164 	bls.w	800e79e <uxr_read_framed_msg+0x3ba>
 800e4d6:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800e758 <uxr_read_framed_msg+0x374>
 800e4da:	f8cd a00c 	str.w	sl, [sp, #12]
 800e4de:	212a      	movs	r1, #42	@ 0x2a
 800e4e0:	e01f      	b.n	800e522 <uxr_read_framed_msg+0x13e>
 800e4e2:	f89a e002 	ldrb.w	lr, [sl, #2]
 800e4e6:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800e4ea:	f000 80ea 	beq.w	800e6c2 <uxr_read_framed_msg+0x2de>
 800e4ee:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800e4f2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e4f6:	f000 8142 	beq.w	800e77e <uxr_read_framed_msg+0x39a>
 800e4fa:	f805 e003 	strb.w	lr, [r5, r3]
 800e4fe:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800e500:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e502:	4f96      	ldr	r7, [pc, #600]	@ (800e75c <uxr_read_framed_msg+0x378>)
 800e504:	ea80 020e 	eor.w	r2, r0, lr
 800e508:	b2d2      	uxtb	r2, r2
 800e50a:	3301      	adds	r3, #1
 800e50c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800e510:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800e512:	b29b      	uxth	r3, r3
 800e514:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800e518:	42bb      	cmp	r3, r7
 800e51a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e51c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e51e:	f080 80e7 	bcs.w	800e6f0 <uxr_read_framed_msg+0x30c>
 800e522:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e526:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800e52a:	f100 0c01 	add.w	ip, r0, #1
 800e52e:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800e532:	fba9 e20e 	umull	lr, r2, r9, lr
 800e536:	0892      	lsrs	r2, r2, #2
 800e538:	fb01 c212 	mls	r2, r1, r2, ip
 800e53c:	4580      	cmp	r8, r0
 800e53e:	eb04 0a00 	add.w	sl, r4, r0
 800e542:	fa5f fc82 	uxtb.w	ip, r2
 800e546:	d1cc      	bne.n	800e4e2 <uxr_read_framed_msg+0xfe>
 800e548:	42bb      	cmp	r3, r7
 800e54a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800e54e:	f040 8128 	bne.w	800e7a2 <uxr_read_framed_msg+0x3be>
 800e552:	2306      	movs	r3, #6
 800e554:	7023      	strb	r3, [r4, #0]
 800e556:	e75a      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e558:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e55c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e560:	4297      	cmp	r7, r2
 800e562:	f000 80cf 	beq.w	800e704 <uxr_read_framed_msg+0x320>
 800e566:	18a3      	adds	r3, r4, r2
 800e568:	f102 0c01 	add.w	ip, r2, #1
 800e56c:	497a      	ldr	r1, [pc, #488]	@ (800e758 <uxr_read_framed_msg+0x374>)
 800e56e:	7898      	ldrb	r0, [r3, #2]
 800e570:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e574:	fba1 8303 	umull	r8, r3, r1, r3
 800e578:	089b      	lsrs	r3, r3, #2
 800e57a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e57e:	fb08 c313 	mls	r3, r8, r3, ip
 800e582:	287d      	cmp	r0, #125	@ 0x7d
 800e584:	fa5f fc83 	uxtb.w	ip, r3
 800e588:	f000 813d 	beq.w	800e806 <uxr_read_framed_msg+0x422>
 800e58c:	287e      	cmp	r0, #126	@ 0x7e
 800e58e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e592:	f000 8188 	beq.w	800e8a6 <uxr_read_framed_msg+0x4c2>
 800e596:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e598:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e59a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	428b      	cmp	r3, r1
 800e5a4:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e5a6:	8662      	strh	r2, [r4, #50]	@ 0x32
 800e5a8:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e5aa:	f240 80f5 	bls.w	800e798 <uxr_read_framed_msg+0x3b4>
 800e5ae:	7022      	strb	r2, [r4, #0]
 800e5b0:	e765      	b.n	800e47e <uxr_read_framed_msg+0x9a>
 800e5b2:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e5b6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e5ba:	4297      	cmp	r7, r2
 800e5bc:	f000 80b2 	beq.w	800e724 <uxr_read_framed_msg+0x340>
 800e5c0:	18a3      	adds	r3, r4, r2
 800e5c2:	f102 0c01 	add.w	ip, r2, #1
 800e5c6:	4964      	ldr	r1, [pc, #400]	@ (800e758 <uxr_read_framed_msg+0x374>)
 800e5c8:	7898      	ldrb	r0, [r3, #2]
 800e5ca:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e5ce:	fba1 8303 	umull	r8, r3, r1, r3
 800e5d2:	089b      	lsrs	r3, r3, #2
 800e5d4:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e5d8:	fb08 c313 	mls	r3, r8, r3, ip
 800e5dc:	287d      	cmp	r0, #125	@ 0x7d
 800e5de:	fa5f fc83 	uxtb.w	ip, r3
 800e5e2:	f000 813b 	beq.w	800e85c <uxr_read_framed_msg+0x478>
 800e5e6:	287e      	cmp	r0, #126	@ 0x7e
 800e5e8:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e5ec:	f000 816a 	beq.w	800e8c4 <uxr_read_framed_msg+0x4e0>
 800e5f0:	2304      	movs	r3, #4
 800e5f2:	8620      	strh	r0, [r4, #48]	@ 0x30
 800e5f4:	7023      	strb	r3, [r4, #0]
 800e5f6:	e70a      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e5f8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800e5fc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e600:	4297      	cmp	r7, r2
 800e602:	f000 80c4 	beq.w	800e78e <uxr_read_framed_msg+0x3aa>
 800e606:	18a3      	adds	r3, r4, r2
 800e608:	f102 0c01 	add.w	ip, r2, #1
 800e60c:	4952      	ldr	r1, [pc, #328]	@ (800e758 <uxr_read_framed_msg+0x374>)
 800e60e:	7898      	ldrb	r0, [r3, #2]
 800e610:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e614:	fba1 8303 	umull	r8, r3, r1, r3
 800e618:	089b      	lsrs	r3, r3, #2
 800e61a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e61e:	fb08 c313 	mls	r3, r8, r3, ip
 800e622:	287d      	cmp	r0, #125	@ 0x7d
 800e624:	fa5f fc83 	uxtb.w	ip, r3
 800e628:	f000 812b 	beq.w	800e882 <uxr_read_framed_msg+0x49e>
 800e62c:	287e      	cmp	r0, #126	@ 0x7e
 800e62e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e632:	f000 8155 	beq.w	800e8e0 <uxr_read_framed_msg+0x4fc>
 800e636:	7863      	ldrb	r3, [r4, #1]
 800e638:	4283      	cmp	r3, r0
 800e63a:	bf0c      	ite	eq
 800e63c:	2303      	moveq	r3, #3
 800e63e:	2300      	movne	r3, #0
 800e640:	7023      	strb	r3, [r4, #0]
 800e642:	e6e4      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e644:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e648:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e64c:	2300      	movs	r3, #0
 800e64e:	4290      	cmp	r0, r2
 800e650:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800e654:	d06b      	beq.n	800e72e <uxr_read_framed_msg+0x34a>
 800e656:	18a3      	adds	r3, r4, r2
 800e658:	f102 0c01 	add.w	ip, r2, #1
 800e65c:	493e      	ldr	r1, [pc, #248]	@ (800e758 <uxr_read_framed_msg+0x374>)
 800e65e:	789f      	ldrb	r7, [r3, #2]
 800e660:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800e664:	fba1 8303 	umull	r8, r3, r1, r3
 800e668:	089b      	lsrs	r3, r3, #2
 800e66a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800e66e:	fb08 c313 	mls	r3, r8, r3, ip
 800e672:	2f7d      	cmp	r7, #125	@ 0x7d
 800e674:	fa5f fc83 	uxtb.w	ip, r3
 800e678:	f000 80d8 	beq.w	800e82c <uxr_read_framed_msg+0x448>
 800e67c:	2f7e      	cmp	r7, #126	@ 0x7e
 800e67e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800e682:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800e686:	d052      	beq.n	800e72e <uxr_read_framed_msg+0x34a>
 800e688:	2302      	movs	r3, #2
 800e68a:	7023      	strb	r3, [r4, #0]
 800e68c:	e6bf      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e68e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800e692:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e696:	4930      	ldr	r1, [pc, #192]	@ (800e758 <uxr_read_framed_msg+0x374>)
 800e698:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e69c:	e004      	b.n	800e6a8 <uxr_read_framed_msg+0x2c4>
 800e69e:	78bb      	ldrb	r3, [r7, #2]
 800e6a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e6a4:	2b7e      	cmp	r3, #126	@ 0x7e
 800e6a6:	d02a      	beq.n	800e6fe <uxr_read_framed_msg+0x31a>
 800e6a8:	1c50      	adds	r0, r2, #1
 800e6aa:	0843      	lsrs	r3, r0, #1
 800e6ac:	fba1 e303 	umull	lr, r3, r1, r3
 800e6b0:	089b      	lsrs	r3, r3, #2
 800e6b2:	fb0c 0013 	mls	r0, ip, r3, r0
 800e6b6:	4590      	cmp	r8, r2
 800e6b8:	eb04 0702 	add.w	r7, r4, r2
 800e6bc:	b2c2      	uxtb	r2, r0
 800e6be:	d1ee      	bne.n	800e69e <uxr_read_framed_msg+0x2ba>
 800e6c0:	e6dd      	b.n	800e47e <uxr_read_framed_msg+0x9a>
 800e6c2:	3002      	adds	r0, #2
 800e6c4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800e6c8:	eb04 0a02 	add.w	sl, r4, r2
 800e6cc:	fba9 e20e 	umull	lr, r2, r9, lr
 800e6d0:	0892      	lsrs	r2, r2, #2
 800e6d2:	45e0      	cmp	r8, ip
 800e6d4:	fb01 0012 	mls	r0, r1, r2, r0
 800e6d8:	f43f af36 	beq.w	800e548 <uxr_read_framed_msg+0x164>
 800e6dc:	f89a e002 	ldrb.w	lr, [sl, #2]
 800e6e0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800e6e4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800e6e8:	d049      	beq.n	800e77e <uxr_read_framed_msg+0x39a>
 800e6ea:	f08e 0e20 	eor.w	lr, lr, #32
 800e6ee:	e704      	b.n	800e4fa <uxr_read_framed_msg+0x116>
 800e6f0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800e6f4:	f43f af2d 	beq.w	800e552 <uxr_read_framed_msg+0x16e>
 800e6f8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800e6fc:	d151      	bne.n	800e7a2 <uxr_read_framed_msg+0x3be>
 800e6fe:	2301      	movs	r3, #1
 800e700:	7023      	strb	r3, [r4, #0]
 800e702:	e684      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e704:	4651      	mov	r1, sl
 800e706:	f8cd b000 	str.w	fp, [sp]
 800e70a:	2301      	movs	r3, #1
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e710:	9103      	str	r1, [sp, #12]
 800e712:	4632      	mov	r2, r6
 800e714:	4620      	mov	r0, r4
 800e716:	f7ff fde1 	bl	800e2dc <uxr_framing_read_transport>
 800e71a:	fab0 f080 	clz	r0, r0
 800e71e:	9903      	ldr	r1, [sp, #12]
 800e720:	0940      	lsrs	r0, r0, #5
 800e722:	e671      	b.n	800e408 <uxr_read_framed_msg+0x24>
 800e724:	4651      	mov	r1, sl
 800e726:	f8cd b000 	str.w	fp, [sp]
 800e72a:	2302      	movs	r3, #2
 800e72c:	e7ee      	b.n	800e70c <uxr_read_framed_msg+0x328>
 800e72e:	2304      	movs	r3, #4
 800e730:	9301      	str	r3, [sp, #4]
 800e732:	f8cd b000 	str.w	fp, [sp]
 800e736:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e738:	4632      	mov	r2, r6
 800e73a:	4651      	mov	r1, sl
 800e73c:	4620      	mov	r0, r4
 800e73e:	f7ff fdcd 	bl	800e2dc <uxr_framing_read_transport>
 800e742:	2800      	cmp	r0, #0
 800e744:	f47f ae63 	bne.w	800e40e <uxr_read_framed_msg+0x2a>
 800e748:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800e74c:	387e      	subs	r0, #126	@ 0x7e
 800e74e:	4651      	mov	r1, sl
 800e750:	bf18      	it	ne
 800e752:	2001      	movne	r0, #1
 800e754:	e658      	b.n	800e408 <uxr_read_framed_msg+0x24>
 800e756:	bf00      	nop
 800e758:	30c30c31 	.word	0x30c30c31
 800e75c:	080192d4 	.word	0x080192d4
 800e760:	2305      	movs	r3, #5
 800e762:	9301      	str	r3, [sp, #4]
 800e764:	f8cd b000 	str.w	fp, [sp]
 800e768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e76a:	f7ff fdb7 	bl	800e2dc <uxr_framing_read_transport>
 800e76e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800e772:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e776:	429a      	cmp	r2, r3
 800e778:	f43f ae81 	beq.w	800e47e <uxr_read_framed_msg+0x9a>
 800e77c:	e642      	b.n	800e404 <uxr_read_framed_msg+0x20>
 800e77e:	42bb      	cmp	r3, r7
 800e780:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800e784:	f43f aee5 	beq.w	800e552 <uxr_read_framed_msg+0x16e>
 800e788:	2301      	movs	r3, #1
 800e78a:	7023      	strb	r3, [r4, #0]
 800e78c:	e63f      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e78e:	4651      	mov	r1, sl
 800e790:	f8cd b000 	str.w	fp, [sp]
 800e794:	2303      	movs	r3, #3
 800e796:	e7b9      	b.n	800e70c <uxr_read_framed_msg+0x328>
 800e798:	2305      	movs	r3, #5
 800e79a:	7023      	strb	r3, [r4, #0]
 800e79c:	e637      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e79e:	f43f aed8 	beq.w	800e552 <uxr_read_framed_msg+0x16e>
 800e7a2:	1afb      	subs	r3, r7, r3
 800e7a4:	3302      	adds	r3, #2
 800e7a6:	e9cd b300 	strd	fp, r3, [sp]
 800e7aa:	4651      	mov	r1, sl
 800e7ac:	e7af      	b.n	800e70e <uxr_read_framed_msg+0x32a>
 800e7ae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e7b0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e7b4:	7013      	strb	r3, [r2, #0]
 800e7b6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800e7b8:	b005      	add	sp, #20
 800e7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7be:	4287      	cmp	r7, r0
 800e7c0:	d0a0      	beq.n	800e704 <uxr_read_framed_msg+0x320>
 800e7c2:	4423      	add	r3, r4
 800e7c4:	3202      	adds	r2, #2
 800e7c6:	7898      	ldrb	r0, [r3, #2]
 800e7c8:	0853      	lsrs	r3, r2, #1
 800e7ca:	fba1 e303 	umull	lr, r3, r1, r3
 800e7ce:	089b      	lsrs	r3, r3, #2
 800e7d0:	fb08 2213 	mls	r2, r8, r3, r2
 800e7d4:	287e      	cmp	r0, #126	@ 0x7e
 800e7d6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e7da:	d064      	beq.n	800e8a6 <uxr_read_framed_msg+0x4c2>
 800e7dc:	f080 0120 	eor.w	r1, r0, #32
 800e7e0:	e642      	b.n	800e468 <uxr_read_framed_msg+0x84>
 800e7e2:	45bc      	cmp	ip, r7
 800e7e4:	d09e      	beq.n	800e724 <uxr_read_framed_msg+0x340>
 800e7e6:	4423      	add	r3, r4
 800e7e8:	3202      	adds	r2, #2
 800e7ea:	7898      	ldrb	r0, [r3, #2]
 800e7ec:	0853      	lsrs	r3, r2, #1
 800e7ee:	fba1 e303 	umull	lr, r3, r1, r3
 800e7f2:	089b      	lsrs	r3, r3, #2
 800e7f4:	fb08 2213 	mls	r2, r8, r3, r2
 800e7f8:	287e      	cmp	r0, #126	@ 0x7e
 800e7fa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e7fe:	d061      	beq.n	800e8c4 <uxr_read_framed_msg+0x4e0>
 800e800:	f080 0020 	eor.w	r0, r0, #32
 800e804:	e65e      	b.n	800e4c4 <uxr_read_framed_msg+0xe0>
 800e806:	4567      	cmp	r7, ip
 800e808:	f43f af7c 	beq.w	800e704 <uxr_read_framed_msg+0x320>
 800e80c:	4423      	add	r3, r4
 800e80e:	3202      	adds	r2, #2
 800e810:	7898      	ldrb	r0, [r3, #2]
 800e812:	0853      	lsrs	r3, r2, #1
 800e814:	fba1 e303 	umull	lr, r3, r1, r3
 800e818:	089b      	lsrs	r3, r3, #2
 800e81a:	fb08 2213 	mls	r2, r8, r3, r2
 800e81e:	287e      	cmp	r0, #126	@ 0x7e
 800e820:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e824:	d03f      	beq.n	800e8a6 <uxr_read_framed_msg+0x4c2>
 800e826:	f080 0020 	eor.w	r0, r0, #32
 800e82a:	e6b4      	b.n	800e596 <uxr_read_framed_msg+0x1b2>
 800e82c:	4560      	cmp	r0, ip
 800e82e:	f43f af7e 	beq.w	800e72e <uxr_read_framed_msg+0x34a>
 800e832:	4423      	add	r3, r4
 800e834:	3202      	adds	r2, #2
 800e836:	7898      	ldrb	r0, [r3, #2]
 800e838:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e83c:	0853      	lsrs	r3, r2, #1
 800e83e:	fba1 e303 	umull	lr, r3, r1, r3
 800e842:	089b      	lsrs	r3, r3, #2
 800e844:	fb08 2213 	mls	r2, r8, r3, r2
 800e848:	287e      	cmp	r0, #126	@ 0x7e
 800e84a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e84e:	f43f af6e 	beq.w	800e72e <uxr_read_framed_msg+0x34a>
 800e852:	f080 0020 	eor.w	r0, r0, #32
 800e856:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e85a:	e715      	b.n	800e688 <uxr_read_framed_msg+0x2a4>
 800e85c:	4567      	cmp	r7, ip
 800e85e:	f43f af61 	beq.w	800e724 <uxr_read_framed_msg+0x340>
 800e862:	4423      	add	r3, r4
 800e864:	3202      	adds	r2, #2
 800e866:	7898      	ldrb	r0, [r3, #2]
 800e868:	0853      	lsrs	r3, r2, #1
 800e86a:	fba1 e303 	umull	lr, r3, r1, r3
 800e86e:	089b      	lsrs	r3, r3, #2
 800e870:	fb08 2213 	mls	r2, r8, r3, r2
 800e874:	287e      	cmp	r0, #126	@ 0x7e
 800e876:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e87a:	d023      	beq.n	800e8c4 <uxr_read_framed_msg+0x4e0>
 800e87c:	f080 0020 	eor.w	r0, r0, #32
 800e880:	e6b6      	b.n	800e5f0 <uxr_read_framed_msg+0x20c>
 800e882:	45bc      	cmp	ip, r7
 800e884:	d083      	beq.n	800e78e <uxr_read_framed_msg+0x3aa>
 800e886:	4423      	add	r3, r4
 800e888:	3202      	adds	r2, #2
 800e88a:	7898      	ldrb	r0, [r3, #2]
 800e88c:	0853      	lsrs	r3, r2, #1
 800e88e:	fba1 e303 	umull	lr, r3, r1, r3
 800e892:	089b      	lsrs	r3, r3, #2
 800e894:	fb08 2213 	mls	r2, r8, r3, r2
 800e898:	287e      	cmp	r0, #126	@ 0x7e
 800e89a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e89e:	d01f      	beq.n	800e8e0 <uxr_read_framed_msg+0x4fc>
 800e8a0:	f080 0020 	eor.w	r0, r0, #32
 800e8a4:	e6c7      	b.n	800e636 <uxr_read_framed_msg+0x252>
 800e8a6:	2701      	movs	r7, #1
 800e8a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8aa:	f8cd b000 	str.w	fp, [sp]
 800e8ae:	9701      	str	r7, [sp, #4]
 800e8b0:	4632      	mov	r2, r6
 800e8b2:	4651      	mov	r1, sl
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f7ff fd11 	bl	800e2dc <uxr_framing_read_transport>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	f47f ada7 	bne.w	800e40e <uxr_read_framed_msg+0x2a>
 800e8c0:	7027      	strb	r7, [r4, #0]
 800e8c2:	e5a4      	b.n	800e40e <uxr_read_framed_msg+0x2a>
 800e8c4:	f8cd b000 	str.w	fp, [sp]
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	9301      	str	r3, [sp, #4]
 800e8cc:	4632      	mov	r2, r6
 800e8ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8d0:	4651      	mov	r1, sl
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f7ff fd02 	bl	800e2dc <uxr_framing_read_transport>
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	f47f ad98 	bne.w	800e40e <uxr_read_framed_msg+0x2a>
 800e8de:	e70e      	b.n	800e6fe <uxr_read_framed_msg+0x31a>
 800e8e0:	f8cd b000 	str.w	fp, [sp]
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e7f0      	b.n	800e8ca <uxr_read_framed_msg+0x4e6>

0800e8e8 <uxr_stream_id>:
 800e8e8:	2901      	cmp	r1, #1
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	d011      	beq.n	800e914 <uxr_stream_id+0x2c>
 800e8f0:	2902      	cmp	r1, #2
 800e8f2:	f04f 0c00 	mov.w	ip, #0
 800e8f6:	d00a      	beq.n	800e90e <uxr_stream_id+0x26>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	f36c 0007 	bfi	r0, ip, #0, #8
 800e8fe:	f363 200f 	bfi	r0, r3, #8, #8
 800e902:	f361 4017 	bfi	r0, r1, #16, #8
 800e906:	f362 601f 	bfi	r0, r2, #24, #8
 800e90a:	b002      	add	sp, #8
 800e90c:	4770      	bx	lr
 800e90e:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e912:	e7f1      	b.n	800e8f8 <uxr_stream_id+0x10>
 800e914:	f100 0c01 	add.w	ip, r0, #1
 800e918:	fa5f fc8c 	uxtb.w	ip, ip
 800e91c:	e7ec      	b.n	800e8f8 <uxr_stream_id+0x10>
 800e91e:	bf00      	nop

0800e920 <uxr_stream_id_from_raw>:
 800e920:	b082      	sub	sp, #8
 800e922:	4603      	mov	r3, r0
 800e924:	b130      	cbz	r0, 800e934 <uxr_stream_id_from_raw+0x14>
 800e926:	0602      	lsls	r2, r0, #24
 800e928:	d411      	bmi.n	800e94e <uxr_stream_id_from_raw+0x2e>
 800e92a:	1e42      	subs	r2, r0, #1
 800e92c:	b2d2      	uxtb	r2, r2
 800e92e:	f04f 0c01 	mov.w	ip, #1
 800e932:	e001      	b.n	800e938 <uxr_stream_id_from_raw+0x18>
 800e934:	4684      	mov	ip, r0
 800e936:	4602      	mov	r2, r0
 800e938:	2000      	movs	r0, #0
 800e93a:	f363 0007 	bfi	r0, r3, #0, #8
 800e93e:	f362 200f 	bfi	r0, r2, #8, #8
 800e942:	f36c 4017 	bfi	r0, ip, #16, #8
 800e946:	f361 601f 	bfi	r0, r1, #24, #8
 800e94a:	b002      	add	sp, #8
 800e94c:	4770      	bx	lr
 800e94e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e952:	f04f 0c02 	mov.w	ip, #2
 800e956:	e7ef      	b.n	800e938 <uxr_stream_id_from_raw+0x18>

0800e958 <uxr_init_stream_storage>:
 800e958:	2300      	movs	r3, #0
 800e95a:	7403      	strb	r3, [r0, #16]
 800e95c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e960:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e964:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop

0800e96c <uxr_reset_stream_storage>:
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	7c03      	ldrb	r3, [r0, #16]
 800e970:	4604      	mov	r4, r0
 800e972:	b153      	cbz	r3, 800e98a <uxr_reset_stream_storage+0x1e>
 800e974:	4606      	mov	r6, r0
 800e976:	2500      	movs	r5, #0
 800e978:	4630      	mov	r0, r6
 800e97a:	f006 ffbf 	bl	80158fc <uxr_reset_output_best_effort_stream>
 800e97e:	7c23      	ldrb	r3, [r4, #16]
 800e980:	3501      	adds	r5, #1
 800e982:	42ab      	cmp	r3, r5
 800e984:	f106 0610 	add.w	r6, r6, #16
 800e988:	d8f6      	bhi.n	800e978 <uxr_reset_stream_storage+0xc>
 800e98a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e98e:	b163      	cbz	r3, 800e9aa <uxr_reset_stream_storage+0x3e>
 800e990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e994:	2500      	movs	r5, #0
 800e996:	4630      	mov	r0, r6
 800e998:	f006 fdc0 	bl	801551c <uxr_reset_input_best_effort_stream>
 800e99c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e9a0:	3501      	adds	r5, #1
 800e9a2:	42ab      	cmp	r3, r5
 800e9a4:	f106 0602 	add.w	r6, r6, #2
 800e9a8:	d8f5      	bhi.n	800e996 <uxr_reset_stream_storage+0x2a>
 800e9aa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e9ae:	b163      	cbz	r3, 800e9ca <uxr_reset_stream_storage+0x5e>
 800e9b0:	f104 0618 	add.w	r6, r4, #24
 800e9b4:	2500      	movs	r5, #0
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f007 f84a 	bl	8015a50 <uxr_reset_output_reliable_stream>
 800e9bc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e9c0:	3501      	adds	r5, #1
 800e9c2:	42ab      	cmp	r3, r5
 800e9c4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e9c8:	d8f5      	bhi.n	800e9b6 <uxr_reset_stream_storage+0x4a>
 800e9ca:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e9ce:	b163      	cbz	r3, 800e9ea <uxr_reset_stream_storage+0x7e>
 800e9d0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e9d4:	2500      	movs	r5, #0
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	f006 fe10 	bl	80155fc <uxr_reset_input_reliable_stream>
 800e9dc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e9e0:	3501      	adds	r5, #1
 800e9e2:	42ab      	cmp	r3, r5
 800e9e4:	f106 0618 	add.w	r6, r6, #24
 800e9e8:	d8f5      	bhi.n	800e9d6 <uxr_reset_stream_storage+0x6a>
 800e9ea:	bd70      	pop	{r4, r5, r6, pc}

0800e9ec <uxr_add_output_best_effort_buffer>:
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	7c04      	ldrb	r4, [r0, #16]
 800e9f0:	f104 0c01 	add.w	ip, r4, #1
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	f880 c010 	strb.w	ip, [r0, #16]
 800e9fa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e9fe:	f006 ff73 	bl	80158e8 <uxr_init_output_best_effort_stream>
 800ea02:	2201      	movs	r2, #1
 800ea04:	4611      	mov	r1, r2
 800ea06:	4620      	mov	r0, r4
 800ea08:	b002      	add	sp, #8
 800ea0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea0e:	f7ff bf6b 	b.w	800e8e8 <uxr_stream_id>
 800ea12:	bf00      	nop

0800ea14 <uxr_add_output_reliable_buffer>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	4684      	mov	ip, r0
 800ea1a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ea1e:	9000      	str	r0, [sp, #0]
 800ea20:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ea24:	2028      	movs	r0, #40	@ 0x28
 800ea26:	fb00 c004 	mla	r0, r0, r4, ip
 800ea2a:	f104 0e01 	add.w	lr, r4, #1
 800ea2e:	3018      	adds	r0, #24
 800ea30:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ea34:	f006 ffd4 	bl	80159e0 <uxr_init_output_reliable_stream>
 800ea38:	2201      	movs	r2, #1
 800ea3a:	2102      	movs	r1, #2
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	b004      	add	sp, #16
 800ea40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea44:	f7ff bf50 	b.w	800e8e8 <uxr_stream_id>

0800ea48 <uxr_add_input_best_effort_buffer>:
 800ea48:	b510      	push	{r4, lr}
 800ea4a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ea4e:	1c62      	adds	r2, r4, #1
 800ea50:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ea54:	b082      	sub	sp, #8
 800ea56:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800ea5a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ea5e:	f006 fd59 	bl	8015514 <uxr_init_input_best_effort_stream>
 800ea62:	2200      	movs	r2, #0
 800ea64:	2101      	movs	r1, #1
 800ea66:	4620      	mov	r0, r4
 800ea68:	b002      	add	sp, #8
 800ea6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea6e:	f7ff bf3b 	b.w	800e8e8 <uxr_stream_id>
 800ea72:	bf00      	nop

0800ea74 <uxr_add_input_reliable_buffer>:
 800ea74:	b510      	push	{r4, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	4684      	mov	ip, r0
 800ea7a:	9806      	ldr	r0, [sp, #24]
 800ea7c:	9000      	str	r0, [sp, #0]
 800ea7e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ea82:	2018      	movs	r0, #24
 800ea84:	fb00 c004 	mla	r0, r0, r4, ip
 800ea88:	f104 0e01 	add.w	lr, r4, #1
 800ea8c:	3048      	adds	r0, #72	@ 0x48
 800ea8e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ea92:	f006 fd87 	bl	80155a4 <uxr_init_input_reliable_stream>
 800ea96:	2200      	movs	r2, #0
 800ea98:	2102      	movs	r1, #2
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	b004      	add	sp, #16
 800ea9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaa2:	f7ff bf21 	b.w	800e8e8 <uxr_stream_id>
 800eaa6:	bf00      	nop

0800eaa8 <uxr_get_output_best_effort_stream>:
 800eaa8:	7c03      	ldrb	r3, [r0, #16]
 800eaaa:	428b      	cmp	r3, r1
 800eaac:	bf8c      	ite	hi
 800eaae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800eab2:	2000      	movls	r0, #0
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop

0800eab8 <uxr_get_output_reliable_stream>:
 800eab8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eabc:	428b      	cmp	r3, r1
 800eabe:	bf83      	ittte	hi
 800eac0:	2328      	movhi	r3, #40	@ 0x28
 800eac2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eac6:	3018      	addhi	r0, #24
 800eac8:	2000      	movls	r0, #0
 800eaca:	4770      	bx	lr

0800eacc <uxr_get_input_best_effort_stream>:
 800eacc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ead0:	428b      	cmp	r3, r1
 800ead2:	bf86      	itte	hi
 800ead4:	3121      	addhi	r1, #33	@ 0x21
 800ead6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800eada:	2000      	movls	r0, #0
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop

0800eae0 <uxr_get_input_reliable_stream>:
 800eae0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800eae4:	428b      	cmp	r3, r1
 800eae6:	bf83      	ittte	hi
 800eae8:	2318      	movhi	r3, #24
 800eaea:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eaee:	3048      	addhi	r0, #72	@ 0x48
 800eaf0:	2000      	movls	r0, #0
 800eaf2:	4770      	bx	lr

0800eaf4 <uxr_output_streams_confirmed>:
 800eaf4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eaf8:	b183      	cbz	r3, 800eb1c <uxr_output_streams_confirmed+0x28>
 800eafa:	b570      	push	{r4, r5, r6, lr}
 800eafc:	4606      	mov	r6, r0
 800eafe:	f100 0518 	add.w	r5, r0, #24
 800eb02:	2400      	movs	r4, #0
 800eb04:	e001      	b.n	800eb0a <uxr_output_streams_confirmed+0x16>
 800eb06:	3528      	adds	r5, #40	@ 0x28
 800eb08:	b138      	cbz	r0, 800eb1a <uxr_output_streams_confirmed+0x26>
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f007 fa08 	bl	8015f20 <uxr_is_output_up_to_date>
 800eb10:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800eb14:	3401      	adds	r4, #1
 800eb16:	42a3      	cmp	r3, r4
 800eb18:	d8f5      	bhi.n	800eb06 <uxr_output_streams_confirmed+0x12>
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	2001      	movs	r0, #1
 800eb1e:	4770      	bx	lr

0800eb20 <uxr_buffer_submessage_header>:
 800eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb22:	4604      	mov	r4, r0
 800eb24:	460e      	mov	r6, r1
 800eb26:	2104      	movs	r1, #4
 800eb28:	4615      	mov	r5, r2
 800eb2a:	461f      	mov	r7, r3
 800eb2c:	f7fd fd40 	bl	800c5b0 <ucdr_align_to>
 800eb30:	2301      	movs	r3, #1
 800eb32:	7523      	strb	r3, [r4, #20]
 800eb34:	f047 0201 	orr.w	r2, r7, #1
 800eb38:	462b      	mov	r3, r5
 800eb3a:	4631      	mov	r1, r6
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 fa2b 	bl	800ef98 <uxr_serialize_submessage_header>
 800eb42:	4620      	mov	r0, r4
 800eb44:	f7fd fd4a 	bl	800c5dc <ucdr_buffer_remaining>
 800eb48:	42a8      	cmp	r0, r5
 800eb4a:	bf34      	ite	cc
 800eb4c:	2000      	movcc	r0, #0
 800eb4e:	2001      	movcs	r0, #1
 800eb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb52:	bf00      	nop

0800eb54 <uxr_read_submessage_header>:
 800eb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb58:	4604      	mov	r4, r0
 800eb5a:	460d      	mov	r5, r1
 800eb5c:	2104      	movs	r1, #4
 800eb5e:	4616      	mov	r6, r2
 800eb60:	4698      	mov	r8, r3
 800eb62:	f7fd fd25 	bl	800c5b0 <ucdr_align_to>
 800eb66:	4620      	mov	r0, r4
 800eb68:	f7fd fd38 	bl	800c5dc <ucdr_buffer_remaining>
 800eb6c:	2803      	cmp	r0, #3
 800eb6e:	bf8c      	ite	hi
 800eb70:	2701      	movhi	r7, #1
 800eb72:	2700      	movls	r7, #0
 800eb74:	d802      	bhi.n	800eb7c <uxr_read_submessage_header+0x28>
 800eb76:	4638      	mov	r0, r7
 800eb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb7c:	4633      	mov	r3, r6
 800eb7e:	4642      	mov	r2, r8
 800eb80:	4620      	mov	r0, r4
 800eb82:	4629      	mov	r1, r5
 800eb84:	f000 fa1a 	bl	800efbc <uxr_deserialize_submessage_header>
 800eb88:	f898 3000 	ldrb.w	r3, [r8]
 800eb8c:	f003 0201 	and.w	r2, r3, #1
 800eb90:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800eb94:	f888 3000 	strb.w	r3, [r8]
 800eb98:	7522      	strb	r2, [r4, #20]
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eba0 <uxr_submessage_padding>:
 800eba0:	f010 0003 	ands.w	r0, r0, #3
 800eba4:	bf18      	it	ne
 800eba6:	f1c0 0004 	rsbne	r0, r0, #4
 800ebaa:	4770      	bx	lr

0800ebac <uxr_millis>:
 800ebac:	b510      	push	{r4, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	4669      	mov	r1, sp
 800ebb2:	2001      	movs	r0, #1
 800ebb4:	f7f2 ffec 	bl	8001b90 <clock_gettime>
 800ebb8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ebbc:	4b06      	ldr	r3, [pc, #24]	@ (800ebd8 <uxr_millis+0x2c>)
 800ebbe:	fba0 0103 	umull	r0, r1, r0, r3
 800ebc2:	1900      	adds	r0, r0, r4
 800ebc4:	fb03 1102 	mla	r1, r3, r2, r1
 800ebc8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ebcc:	4a03      	ldr	r2, [pc, #12]	@ (800ebdc <uxr_millis+0x30>)
 800ebce:	2300      	movs	r3, #0
 800ebd0:	f7f1 fb86 	bl	80002e0 <__aeabi_ldivmod>
 800ebd4:	b004      	add	sp, #16
 800ebd6:	bd10      	pop	{r4, pc}
 800ebd8:	3b9aca00 	.word	0x3b9aca00
 800ebdc:	000f4240 	.word	0x000f4240

0800ebe0 <uxr_nanos>:
 800ebe0:	b510      	push	{r4, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	4669      	mov	r1, sp
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	f7f2 ffd2 	bl	8001b90 <clock_gettime>
 800ebec:	4a06      	ldr	r2, [pc, #24]	@ (800ec08 <uxr_nanos+0x28>)
 800ebee:	9800      	ldr	r0, [sp, #0]
 800ebf0:	9902      	ldr	r1, [sp, #8]
 800ebf2:	9c01      	ldr	r4, [sp, #4]
 800ebf4:	fba0 0302 	umull	r0, r3, r0, r2
 800ebf8:	1840      	adds	r0, r0, r1
 800ebfa:	fb02 3304 	mla	r3, r2, r4, r3
 800ebfe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ec02:	b004      	add	sp, #16
 800ec04:	bd10      	pop	{r4, pc}
 800ec06:	bf00      	nop
 800ec08:	3b9aca00 	.word	0x3b9aca00

0800ec0c <on_full_output_buffer_fragmented>:
 800ec0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec10:	460c      	mov	r4, r1
 800ec12:	b08a      	sub	sp, #40	@ 0x28
 800ec14:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800ec18:	4606      	mov	r6, r0
 800ec1a:	f104 0008 	add.w	r0, r4, #8
 800ec1e:	f7ff ff4b 	bl	800eab8 <uxr_get_output_reliable_stream>
 800ec22:	4605      	mov	r5, r0
 800ec24:	f007 f986 	bl	8015f34 <get_available_free_slots>
 800ec28:	b968      	cbnz	r0, 800ec46 <on_full_output_buffer_fragmented+0x3a>
 800ec2a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800ec2e:	4620      	mov	r0, r4
 800ec30:	4798      	blx	r3
 800ec32:	b918      	cbnz	r0, 800ec3c <on_full_output_buffer_fragmented+0x30>
 800ec34:	2001      	movs	r0, #1
 800ec36:	b00a      	add	sp, #40	@ 0x28
 800ec38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	f007 f979 	bl	8015f34 <get_available_free_slots>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d0f6      	beq.n	800ec34 <on_full_output_buffer_fragmented+0x28>
 800ec46:	892a      	ldrh	r2, [r5, #8]
 800ec48:	686b      	ldr	r3, [r5, #4]
 800ec4a:	fbb3 f8f2 	udiv	r8, r3, r2
 800ec4e:	89eb      	ldrh	r3, [r5, #14]
 800ec50:	7b29      	ldrb	r1, [r5, #12]
 800ec52:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec56:	fb02 3310 	mls	r3, r2, r0, r3
 800ec5a:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	fb08 f303 	mul.w	r3, r8, r3
 800ec64:	31fc      	adds	r1, #252	@ 0xfc
 800ec66:	f1a8 0804 	sub.w	r8, r8, #4
 800ec6a:	4441      	add	r1, r8
 800ec6c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ec70:	b28f      	uxth	r7, r1
 800ec72:	6829      	ldr	r1, [r5, #0]
 800ec74:	3304      	adds	r3, #4
 800ec76:	1bd2      	subs	r2, r2, r7
 800ec78:	4419      	add	r1, r3
 800ec7a:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800ec7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	4642      	mov	r2, r8
 800ec86:	2300      	movs	r3, #0
 800ec88:	a802      	add	r0, sp, #8
 800ec8a:	f7fd fc65 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800ec8e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ec92:	f102 0308 	add.w	r3, r2, #8
 800ec96:	4543      	cmp	r3, r8
 800ec98:	d928      	bls.n	800ecec <on_full_output_buffer_fragmented+0xe0>
 800ec9a:	463a      	mov	r2, r7
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	210d      	movs	r1, #13
 800eca0:	a802      	add	r0, sp, #8
 800eca2:	f7ff ff3d 	bl	800eb20 <uxr_buffer_submessage_header>
 800eca6:	8929      	ldrh	r1, [r5, #8]
 800eca8:	89eb      	ldrh	r3, [r5, #14]
 800ecaa:	fbb3 f2f1 	udiv	r2, r3, r1
 800ecae:	fb01 3312 	mls	r3, r1, r2, r3
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	686a      	ldr	r2, [r5, #4]
 800ecb6:	fbb2 f2f1 	udiv	r2, r2, r1
 800ecba:	fb02 f303 	mul.w	r3, r2, r3
 800ecbe:	682a      	ldr	r2, [r5, #0]
 800ecc0:	f842 8003 	str.w	r8, [r2, r3]
 800ecc4:	89e8      	ldrh	r0, [r5, #14]
 800ecc6:	2101      	movs	r1, #1
 800ecc8:	f007 fa88 	bl	80161dc <uxr_seq_num_add>
 800eccc:	9904      	ldr	r1, [sp, #16]
 800ecce:	9a03      	ldr	r2, [sp, #12]
 800ecd0:	81e8      	strh	r0, [r5, #14]
 800ecd2:	1a52      	subs	r2, r2, r1
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	f7fd fc51 	bl	800c57c <ucdr_init_buffer>
 800ecda:	4630      	mov	r0, r6
 800ecdc:	4910      	ldr	r1, [pc, #64]	@ (800ed20 <on_full_output_buffer_fragmented+0x114>)
 800ecde:	4622      	mov	r2, r4
 800ece0:	f7fd fc20 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 800ece4:	2000      	movs	r0, #0
 800ece6:	b00a      	add	sp, #40	@ 0x28
 800ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecec:	b292      	uxth	r2, r2
 800ecee:	2302      	movs	r3, #2
 800ecf0:	210d      	movs	r1, #13
 800ecf2:	a802      	add	r0, sp, #8
 800ecf4:	f7ff ff14 	bl	800eb20 <uxr_buffer_submessage_header>
 800ecf8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800ecfc:	8928      	ldrh	r0, [r5, #8]
 800ecfe:	f103 0208 	add.w	r2, r3, #8
 800ed02:	89eb      	ldrh	r3, [r5, #14]
 800ed04:	fbb3 f1f0 	udiv	r1, r3, r0
 800ed08:	fb00 3311 	mls	r3, r0, r1, r3
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	6869      	ldr	r1, [r5, #4]
 800ed10:	fbb1 f1f0 	udiv	r1, r1, r0
 800ed14:	fb01 f303 	mul.w	r3, r1, r3
 800ed18:	6829      	ldr	r1, [r5, #0]
 800ed1a:	50ca      	str	r2, [r1, r3]
 800ed1c:	e7d2      	b.n	800ecc4 <on_full_output_buffer_fragmented+0xb8>
 800ed1e:	bf00      	nop
 800ed20:	0800ec0d 	.word	0x0800ec0d

0800ed24 <uxr_prepare_output_stream>:
 800ed24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed26:	b087      	sub	sp, #28
 800ed28:	2707      	movs	r7, #7
 800ed2a:	9202      	str	r2, [sp, #8]
 800ed2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ed2e:	2500      	movs	r5, #0
 800ed30:	3204      	adds	r2, #4
 800ed32:	e9cd 7500 	strd	r7, r5, [sp]
 800ed36:	461c      	mov	r4, r3
 800ed38:	4606      	mov	r6, r0
 800ed3a:	f7ff f807 	bl	800dd4c <uxr_prepare_stream_to_write_submessage>
 800ed3e:	f080 0201 	eor.w	r2, r0, #1
 800ed42:	b2d2      	uxtb	r2, r2
 800ed44:	75a2      	strb	r2, [r4, #22]
 800ed46:	b112      	cbz	r2, 800ed4e <uxr_prepare_output_stream+0x2a>
 800ed48:	4628      	mov	r0, r5
 800ed4a:	b007      	add	sp, #28
 800ed4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed4e:	aa05      	add	r2, sp, #20
 800ed50:	9902      	ldr	r1, [sp, #8]
 800ed52:	4630      	mov	r0, r6
 800ed54:	f7ff f934 	bl	800dfc0 <uxr_init_base_object_request>
 800ed58:	a905      	add	r1, sp, #20
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f001 f879 	bl	800fe54 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ed62:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ed66:	69a6      	ldr	r6, [r4, #24]
 800ed68:	69e7      	ldr	r7, [r4, #28]
 800ed6a:	1a52      	subs	r2, r2, r1
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f7fd fc05 	bl	800c57c <ucdr_init_buffer>
 800ed72:	4620      	mov	r0, r4
 800ed74:	463a      	mov	r2, r7
 800ed76:	4631      	mov	r1, r6
 800ed78:	f7fd fbd4 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	b007      	add	sp, #28
 800ed80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed82:	bf00      	nop

0800ed84 <uxr_prepare_output_stream_fragmented>:
 800ed84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed88:	b093      	sub	sp, #76	@ 0x4c
 800ed8a:	4605      	mov	r5, r0
 800ed8c:	9107      	str	r1, [sp, #28]
 800ed8e:	3008      	adds	r0, #8
 800ed90:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800ed94:	9303      	str	r3, [sp, #12]
 800ed96:	9206      	str	r2, [sp, #24]
 800ed98:	f7ff fe8e 	bl	800eab8 <uxr_get_output_reliable_stream>
 800ed9c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	f000 8095 	beq.w	800eed0 <uxr_prepare_output_stream_fragmented+0x14c>
 800eda6:	4604      	mov	r4, r0
 800eda8:	2800      	cmp	r0, #0
 800edaa:	f000 8091 	beq.w	800eed0 <uxr_prepare_output_stream_fragmented+0x14c>
 800edae:	f007 f8c1 	bl	8015f34 <get_available_free_slots>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	f000 8087 	beq.w	800eec6 <uxr_prepare_output_stream_fragmented+0x142>
 800edb8:	8922      	ldrh	r2, [r4, #8]
 800edba:	89e7      	ldrh	r7, [r4, #14]
 800edbc:	fbb7 f3f2 	udiv	r3, r7, r2
 800edc0:	fb02 7313 	mls	r3, r2, r3, r7
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	6861      	ldr	r1, [r4, #4]
 800edc8:	fbb1 f1f2 	udiv	r1, r1, r2
 800edcc:	6822      	ldr	r2, [r4, #0]
 800edce:	9105      	str	r1, [sp, #20]
 800edd0:	fb01 f303 	mul.w	r3, r1, r3
 800edd4:	3304      	adds	r3, #4
 800edd6:	eb02 0903 	add.w	r9, r2, r3
 800edda:	7b23      	ldrb	r3, [r4, #12]
 800eddc:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ede0:	4543      	cmp	r3, r8
 800ede2:	f1a1 0b04 	sub.w	fp, r1, #4
 800ede6:	d37f      	bcc.n	800eee8 <uxr_prepare_output_stream_fragmented+0x164>
 800ede8:	f1ab 0a04 	sub.w	sl, fp, #4
 800edec:	ebaa 0a03 	sub.w	sl, sl, r3
 800edf0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800edf2:	f8cd 8000 	str.w	r8, [sp]
 800edf6:	fa1f f38a 	uxth.w	r3, sl
 800edfa:	9304      	str	r3, [sp, #16]
 800edfc:	465a      	mov	r2, fp
 800edfe:	2300      	movs	r3, #0
 800ee00:	4649      	mov	r1, r9
 800ee02:	a80a      	add	r0, sp, #40	@ 0x28
 800ee04:	f7fd fba8 	bl	800c558 <ucdr_init_buffer_origin_offset>
 800ee08:	f106 0a08 	add.w	sl, r6, #8
 800ee0c:	45da      	cmp	sl, fp
 800ee0e:	bf2c      	ite	cs
 800ee10:	2300      	movcs	r3, #0
 800ee12:	2301      	movcc	r3, #1
 800ee14:	9a04      	ldr	r2, [sp, #16]
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	210d      	movs	r1, #13
 800ee1a:	a80a      	add	r0, sp, #40	@ 0x28
 800ee1c:	f7ff fe80 	bl	800eb20 <uxr_buffer_submessage_header>
 800ee20:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800ee24:	fbb7 f2fc 	udiv	r2, r7, ip
 800ee28:	fb0c 7212 	mls	r2, ip, r2, r7
 800ee2c:	b292      	uxth	r2, r2
 800ee2e:	6863      	ldr	r3, [r4, #4]
 800ee30:	fbb3 f3fc 	udiv	r3, r3, ip
 800ee34:	fb02 f303 	mul.w	r3, r2, r3
 800ee38:	6822      	ldr	r2, [r4, #0]
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	f842 b003 	str.w	fp, [r2, r3]
 800ee40:	4638      	mov	r0, r7
 800ee42:	f007 f9cb 	bl	80161dc <uxr_seq_num_add>
 800ee46:	9b05      	ldr	r3, [sp, #20]
 800ee48:	9e03      	ldr	r6, [sp, #12]
 800ee4a:	f1a3 0208 	sub.w	r2, r3, #8
 800ee4e:	f108 0104 	add.w	r1, r8, #4
 800ee52:	4607      	mov	r7, r0
 800ee54:	eba2 0208 	sub.w	r2, r2, r8
 800ee58:	4449      	add	r1, r9
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7fd fb8e 	bl	800c57c <ucdr_init_buffer>
 800ee60:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ee62:	81e7      	strh	r7, [r4, #14]
 800ee64:	1d1a      	adds	r2, r3, #4
 800ee66:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ee6a:	bf28      	it	cs
 800ee6c:	2200      	movcs	r2, #0
 800ee6e:	2300      	movs	r3, #0
 800ee70:	b292      	uxth	r2, r2
 800ee72:	2107      	movs	r1, #7
 800ee74:	4630      	mov	r0, r6
 800ee76:	f7ff fe53 	bl	800eb20 <uxr_buffer_submessage_header>
 800ee7a:	9906      	ldr	r1, [sp, #24]
 800ee7c:	aa09      	add	r2, sp, #36	@ 0x24
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f7ff f89e 	bl	800dfc0 <uxr_init_base_object_request>
 800ee84:	4604      	mov	r4, r0
 800ee86:	b320      	cbz	r0, 800eed2 <uxr_prepare_output_stream_fragmented+0x14e>
 800ee88:	9e03      	ldr	r6, [sp, #12]
 800ee8a:	a909      	add	r1, sp, #36	@ 0x24
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	f000 ffe1 	bl	800fe54 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ee92:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800ee96:	4630      	mov	r0, r6
 800ee98:	1a52      	subs	r2, r2, r1
 800ee9a:	f7fd fb6f 	bl	800c57c <ucdr_init_buffer>
 800ee9e:	9b07      	ldr	r3, [sp, #28]
 800eea0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800eea4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eea6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800eeaa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800eeac:	491a      	ldr	r1, [pc, #104]	@ (800ef18 <uxr_prepare_output_stream_fragmented+0x194>)
 800eeae:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800eeb8:	462a      	mov	r2, r5
 800eeba:	f7fd fb33 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 800eebe:	4620      	mov	r0, r4
 800eec0:	b013      	add	sp, #76	@ 0x4c
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800eec8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eeca:	4628      	mov	r0, r5
 800eecc:	4798      	blx	r3
 800eece:	b920      	cbnz	r0, 800eeda <uxr_prepare_output_stream_fragmented+0x156>
 800eed0:	2400      	movs	r4, #0
 800eed2:	4620      	mov	r0, r4
 800eed4:	b013      	add	sp, #76	@ 0x4c
 800eed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeda:	4620      	mov	r0, r4
 800eedc:	f007 f82a 	bl	8015f34 <get_available_free_slots>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	f47f af69 	bne.w	800edb8 <uxr_prepare_output_stream_fragmented+0x34>
 800eee6:	e7f3      	b.n	800eed0 <uxr_prepare_output_stream_fragmented+0x14c>
 800eee8:	4638      	mov	r0, r7
 800eeea:	2101      	movs	r1, #1
 800eeec:	f007 f976 	bl	80161dc <uxr_seq_num_add>
 800eef0:	8921      	ldrh	r1, [r4, #8]
 800eef2:	fbb0 f2f1 	udiv	r2, r0, r1
 800eef6:	fb01 0212 	mls	r2, r1, r2, r0
 800eefa:	b292      	uxth	r2, r2
 800eefc:	6863      	ldr	r3, [r4, #4]
 800eefe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef02:	fb02 f303 	mul.w	r3, r2, r3
 800ef06:	6822      	ldr	r2, [r4, #0]
 800ef08:	3304      	adds	r3, #4
 800ef0a:	eb02 0903 	add.w	r9, r2, r3
 800ef0e:	4607      	mov	r7, r0
 800ef10:	7b23      	ldrb	r3, [r4, #12]
 800ef12:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ef16:	e767      	b.n	800ede8 <uxr_prepare_output_stream_fragmented+0x64>
 800ef18:	0800ec0d 	.word	0x0800ec0d

0800ef1c <uxr_serialize_message_header>:
 800ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef20:	4617      	mov	r7, r2
 800ef22:	4604      	mov	r4, r0
 800ef24:	461e      	mov	r6, r3
 800ef26:	460d      	mov	r5, r1
 800ef28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ef2c:	f7fc fa60 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800ef30:	4639      	mov	r1, r7
 800ef32:	4620      	mov	r0, r4
 800ef34:	f7fc fa5c 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800ef38:	4632      	mov	r2, r6
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f7fc fb0d 	bl	800b55c <ucdr_serialize_endian_uint16_t>
 800ef42:	062b      	lsls	r3, r5, #24
 800ef44:	d501      	bpl.n	800ef4a <uxr_serialize_message_header+0x2e>
 800ef46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef4a:	4641      	mov	r1, r8
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	2204      	movs	r2, #4
 800ef50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef54:	f006 b954 	b.w	8015200 <ucdr_serialize_array_uint8_t>

0800ef58 <uxr_deserialize_message_header>:
 800ef58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef5c:	4617      	mov	r7, r2
 800ef5e:	4604      	mov	r4, r0
 800ef60:	461e      	mov	r6, r3
 800ef62:	460d      	mov	r5, r1
 800ef64:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ef68:	f7fc fa58 	bl	800b41c <ucdr_deserialize_uint8_t>
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f7fc fa54 	bl	800b41c <ucdr_deserialize_uint8_t>
 800ef74:	4632      	mov	r2, r6
 800ef76:	2101      	movs	r1, #1
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f7fc fbe5 	bl	800b748 <ucdr_deserialize_endian_uint16_t>
 800ef7e:	f995 3000 	ldrsb.w	r3, [r5]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	da01      	bge.n	800ef8a <uxr_deserialize_message_header+0x32>
 800ef86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef8a:	4641      	mov	r1, r8
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	2204      	movs	r2, #4
 800ef90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef94:	f006 b998 	b.w	80152c8 <ucdr_deserialize_array_uint8_t>

0800ef98 <uxr_serialize_submessage_header>:
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	4616      	mov	r6, r2
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	461d      	mov	r5, r3
 800efa0:	f7fc fa26 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800efa4:	4631      	mov	r1, r6
 800efa6:	4620      	mov	r0, r4
 800efa8:	f7fc fa22 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800efac:	462a      	mov	r2, r5
 800efae:	4620      	mov	r0, r4
 800efb0:	2101      	movs	r1, #1
 800efb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efb6:	f7fc bad1 	b.w	800b55c <ucdr_serialize_endian_uint16_t>
 800efba:	bf00      	nop

0800efbc <uxr_deserialize_submessage_header>:
 800efbc:	b570      	push	{r4, r5, r6, lr}
 800efbe:	4616      	mov	r6, r2
 800efc0:	4604      	mov	r4, r0
 800efc2:	461d      	mov	r5, r3
 800efc4:	f7fc fa2a 	bl	800b41c <ucdr_deserialize_uint8_t>
 800efc8:	4631      	mov	r1, r6
 800efca:	4620      	mov	r0, r4
 800efcc:	f7fc fa26 	bl	800b41c <ucdr_deserialize_uint8_t>
 800efd0:	462a      	mov	r2, r5
 800efd2:	4620      	mov	r0, r4
 800efd4:	2101      	movs	r1, #1
 800efd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efda:	f7fc bbb5 	b.w	800b748 <ucdr_deserialize_endian_uint16_t>
 800efde:	bf00      	nop

0800efe0 <uxr_serialize_CLIENT_Representation>:
 800efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe4:	2204      	movs	r2, #4
 800efe6:	460e      	mov	r6, r1
 800efe8:	4605      	mov	r5, r0
 800efea:	f006 f909 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800efee:	2202      	movs	r2, #2
 800eff0:	1d31      	adds	r1, r6, #4
 800eff2:	4604      	mov	r4, r0
 800eff4:	4628      	mov	r0, r5
 800eff6:	f006 f903 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800effa:	2202      	movs	r2, #2
 800effc:	4004      	ands	r4, r0
 800effe:	1db1      	adds	r1, r6, #6
 800f000:	4628      	mov	r0, r5
 800f002:	f006 f8fd 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f006:	b2e4      	uxtb	r4, r4
 800f008:	2204      	movs	r2, #4
 800f00a:	4004      	ands	r4, r0
 800f00c:	f106 0108 	add.w	r1, r6, #8
 800f010:	4628      	mov	r0, r5
 800f012:	f006 f8f5 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f016:	7b31      	ldrb	r1, [r6, #12]
 800f018:	ea00 0804 	and.w	r8, r0, r4
 800f01c:	4628      	mov	r0, r5
 800f01e:	f7fc f9e7 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800f022:	7b71      	ldrb	r1, [r6, #13]
 800f024:	ea08 0800 	and.w	r8, r8, r0
 800f028:	4628      	mov	r0, r5
 800f02a:	f7fc f9b3 	bl	800b394 <ucdr_serialize_bool>
 800f02e:	7b73      	ldrb	r3, [r6, #13]
 800f030:	ea08 0800 	and.w	r8, r8, r0
 800f034:	b93b      	cbnz	r3, 800f046 <uxr_serialize_CLIENT_Representation+0x66>
 800f036:	8bb1      	ldrh	r1, [r6, #28]
 800f038:	4628      	mov	r0, r5
 800f03a:	f7fc fa05 	bl	800b448 <ucdr_serialize_uint16_t>
 800f03e:	ea08 0000 	and.w	r0, r8, r0
 800f042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f046:	6931      	ldr	r1, [r6, #16]
 800f048:	4628      	mov	r0, r5
 800f04a:	f7fc fbed 	bl	800b828 <ucdr_serialize_uint32_t>
 800f04e:	6933      	ldr	r3, [r6, #16]
 800f050:	b1e3      	cbz	r3, 800f08c <uxr_serialize_CLIENT_Representation+0xac>
 800f052:	b1c0      	cbz	r0, 800f086 <uxr_serialize_CLIENT_Representation+0xa6>
 800f054:	4637      	mov	r7, r6
 800f056:	f04f 0900 	mov.w	r9, #0
 800f05a:	e001      	b.n	800f060 <uxr_serialize_CLIENT_Representation+0x80>
 800f05c:	3708      	adds	r7, #8
 800f05e:	b194      	cbz	r4, 800f086 <uxr_serialize_CLIENT_Representation+0xa6>
 800f060:	6979      	ldr	r1, [r7, #20]
 800f062:	4628      	mov	r0, r5
 800f064:	f006 fa40 	bl	80154e8 <ucdr_serialize_string>
 800f068:	69b9      	ldr	r1, [r7, #24]
 800f06a:	4604      	mov	r4, r0
 800f06c:	4628      	mov	r0, r5
 800f06e:	f006 fa3b 	bl	80154e8 <ucdr_serialize_string>
 800f072:	6933      	ldr	r3, [r6, #16]
 800f074:	f109 0901 	add.w	r9, r9, #1
 800f078:	4004      	ands	r4, r0
 800f07a:	4599      	cmp	r9, r3
 800f07c:	b2e4      	uxtb	r4, r4
 800f07e:	d3ed      	bcc.n	800f05c <uxr_serialize_CLIENT_Representation+0x7c>
 800f080:	ea08 0804 	and.w	r8, r8, r4
 800f084:	e7d7      	b.n	800f036 <uxr_serialize_CLIENT_Representation+0x56>
 800f086:	f04f 0800 	mov.w	r8, #0
 800f08a:	e7d4      	b.n	800f036 <uxr_serialize_CLIENT_Representation+0x56>
 800f08c:	ea08 0800 	and.w	r8, r8, r0
 800f090:	e7d1      	b.n	800f036 <uxr_serialize_CLIENT_Representation+0x56>
 800f092:	bf00      	nop

0800f094 <uxr_deserialize_CLIENT_Representation>:
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	2204      	movs	r2, #4
 800f09a:	460c      	mov	r4, r1
 800f09c:	4605      	mov	r5, r0
 800f09e:	f006 f913 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f0a2:	2202      	movs	r2, #2
 800f0a4:	1d21      	adds	r1, r4, #4
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	f006 f90d 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	4006      	ands	r6, r0
 800f0b2:	1da1      	adds	r1, r4, #6
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	f006 f907 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f0ba:	b2f6      	uxtb	r6, r6
 800f0bc:	2204      	movs	r2, #4
 800f0be:	4006      	ands	r6, r0
 800f0c0:	f104 0108 	add.w	r1, r4, #8
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	f006 f8ff 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f0ca:	f104 010c 	add.w	r1, r4, #12
 800f0ce:	ea00 0706 	and.w	r7, r0, r6
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	f7fc f9a2 	bl	800b41c <ucdr_deserialize_uint8_t>
 800f0d8:	f104 010d 	add.w	r1, r4, #13
 800f0dc:	4007      	ands	r7, r0
 800f0de:	4628      	mov	r0, r5
 800f0e0:	f7fc f96e 	bl	800b3c0 <ucdr_deserialize_bool>
 800f0e4:	7b63      	ldrb	r3, [r4, #13]
 800f0e6:	4007      	ands	r7, r0
 800f0e8:	b93b      	cbnz	r3, 800f0fa <uxr_deserialize_CLIENT_Representation+0x66>
 800f0ea:	f104 011c 	add.w	r1, r4, #28
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f7fc faae 	bl	800b650 <ucdr_deserialize_uint16_t>
 800f0f4:	4038      	ands	r0, r7
 800f0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0fa:	f104 0110 	add.w	r1, r4, #16
 800f0fe:	4628      	mov	r0, r5
 800f100:	f7fc fcbc 	bl	800ba7c <ucdr_deserialize_uint32_t>
 800f104:	6923      	ldr	r3, [r4, #16]
 800f106:	2b01      	cmp	r3, #1
 800f108:	d903      	bls.n	800f112 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f10a:	2301      	movs	r3, #1
 800f10c:	75ab      	strb	r3, [r5, #22]
 800f10e:	2700      	movs	r7, #0
 800f110:	e7eb      	b.n	800f0ea <uxr_deserialize_CLIENT_Representation+0x56>
 800f112:	b30b      	cbz	r3, 800f158 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f114:	2800      	cmp	r0, #0
 800f116:	d0fa      	beq.n	800f10e <uxr_deserialize_CLIENT_Representation+0x7a>
 800f118:	46a0      	mov	r8, r4
 800f11a:	f04f 0900 	mov.w	r9, #0
 800f11e:	e003      	b.n	800f128 <uxr_deserialize_CLIENT_Representation+0x94>
 800f120:	f108 0808 	add.w	r8, r8, #8
 800f124:	2e00      	cmp	r6, #0
 800f126:	d0f2      	beq.n	800f10e <uxr_deserialize_CLIENT_Representation+0x7a>
 800f128:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f12c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f130:	4628      	mov	r0, r5
 800f132:	f006 f9e7 	bl	8015504 <ucdr_deserialize_string>
 800f136:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f13a:	4606      	mov	r6, r0
 800f13c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f140:	4628      	mov	r0, r5
 800f142:	f006 f9df 	bl	8015504 <ucdr_deserialize_string>
 800f146:	6923      	ldr	r3, [r4, #16]
 800f148:	f109 0901 	add.w	r9, r9, #1
 800f14c:	4006      	ands	r6, r0
 800f14e:	4599      	cmp	r9, r3
 800f150:	b2f6      	uxtb	r6, r6
 800f152:	d3e5      	bcc.n	800f120 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f154:	4037      	ands	r7, r6
 800f156:	e7c8      	b.n	800f0ea <uxr_deserialize_CLIENT_Representation+0x56>
 800f158:	4007      	ands	r7, r0
 800f15a:	e7c6      	b.n	800f0ea <uxr_deserialize_CLIENT_Representation+0x56>

0800f15c <uxr_serialize_AGENT_Representation>:
 800f15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f160:	2204      	movs	r2, #4
 800f162:	460f      	mov	r7, r1
 800f164:	4605      	mov	r5, r0
 800f166:	f006 f84b 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f16a:	2202      	movs	r2, #2
 800f16c:	4604      	mov	r4, r0
 800f16e:	1d39      	adds	r1, r7, #4
 800f170:	4628      	mov	r0, r5
 800f172:	f006 f845 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f176:	4020      	ands	r0, r4
 800f178:	2202      	movs	r2, #2
 800f17a:	b2c4      	uxtb	r4, r0
 800f17c:	1db9      	adds	r1, r7, #6
 800f17e:	4628      	mov	r0, r5
 800f180:	f006 f83e 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f184:	7a39      	ldrb	r1, [r7, #8]
 800f186:	4004      	ands	r4, r0
 800f188:	4628      	mov	r0, r5
 800f18a:	f7fc f903 	bl	800b394 <ucdr_serialize_bool>
 800f18e:	7a3b      	ldrb	r3, [r7, #8]
 800f190:	ea00 0804 	and.w	r8, r0, r4
 800f194:	b913      	cbnz	r3, 800f19c <uxr_serialize_AGENT_Representation+0x40>
 800f196:	4640      	mov	r0, r8
 800f198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19c:	68f9      	ldr	r1, [r7, #12]
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f7fc fb42 	bl	800b828 <ucdr_serialize_uint32_t>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	b303      	cbz	r3, 800f1ea <uxr_serialize_AGENT_Representation+0x8e>
 800f1a8:	b1d0      	cbz	r0, 800f1e0 <uxr_serialize_AGENT_Representation+0x84>
 800f1aa:	463e      	mov	r6, r7
 800f1ac:	f04f 0900 	mov.w	r9, #0
 800f1b0:	e001      	b.n	800f1b6 <uxr_serialize_AGENT_Representation+0x5a>
 800f1b2:	3608      	adds	r6, #8
 800f1b4:	b1a4      	cbz	r4, 800f1e0 <uxr_serialize_AGENT_Representation+0x84>
 800f1b6:	6931      	ldr	r1, [r6, #16]
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f006 f995 	bl	80154e8 <ucdr_serialize_string>
 800f1be:	6971      	ldr	r1, [r6, #20]
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f006 f990 	bl	80154e8 <ucdr_serialize_string>
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f109 0901 	add.w	r9, r9, #1
 800f1ce:	4004      	ands	r4, r0
 800f1d0:	4599      	cmp	r9, r3
 800f1d2:	b2e4      	uxtb	r4, r4
 800f1d4:	d3ed      	bcc.n	800f1b2 <uxr_serialize_AGENT_Representation+0x56>
 800f1d6:	ea08 0804 	and.w	r8, r8, r4
 800f1da:	4640      	mov	r0, r8
 800f1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e0:	f04f 0800 	mov.w	r8, #0
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ea:	ea08 0800 	and.w	r8, r8, r0
 800f1ee:	e7d2      	b.n	800f196 <uxr_serialize_AGENT_Representation+0x3a>

0800f1f0 <uxr_serialize_DATAWRITER_Representation>:
 800f1f0:	b570      	push	{r4, r5, r6, lr}
 800f1f2:	460d      	mov	r5, r1
 800f1f4:	7809      	ldrb	r1, [r1, #0]
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	f7fc f8fa 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	b130      	cbz	r0, 800f20e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f200:	782b      	ldrb	r3, [r5, #0]
 800f202:	2b02      	cmp	r3, #2
 800f204:	d00c      	beq.n	800f220 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f206:	2b03      	cmp	r3, #3
 800f208:	d010      	beq.n	800f22c <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d008      	beq.n	800f220 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f20e:	2202      	movs	r2, #2
 800f210:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f214:	4630      	mov	r0, r6
 800f216:	f005 fff3 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f21a:	4020      	ands	r0, r4
 800f21c:	b2c0      	uxtb	r0, r0
 800f21e:	bd70      	pop	{r4, r5, r6, pc}
 800f220:	6869      	ldr	r1, [r5, #4]
 800f222:	4630      	mov	r0, r6
 800f224:	f006 f960 	bl	80154e8 <ucdr_serialize_string>
 800f228:	4604      	mov	r4, r0
 800f22a:	e7f0      	b.n	800f20e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f22c:	4629      	mov	r1, r5
 800f22e:	4630      	mov	r0, r6
 800f230:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f234:	3104      	adds	r1, #4
 800f236:	f7fd fa3f 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800f23a:	4604      	mov	r4, r0
 800f23c:	e7e7      	b.n	800f20e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f23e:	bf00      	nop

0800f240 <uxr_serialize_ObjectVariant.part.0>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	780b      	ldrb	r3, [r1, #0]
 800f244:	3b01      	subs	r3, #1
 800f246:	460c      	mov	r4, r1
 800f248:	4605      	mov	r5, r0
 800f24a:	2b0d      	cmp	r3, #13
 800f24c:	d816      	bhi.n	800f27c <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f24e:	e8df f003 	tbb	[pc, r3]
 800f252:	0733      	.short	0x0733
 800f254:	07071717 	.word	0x07071717
 800f258:	0c150707 	.word	0x0c150707
 800f25c:	4c510c0c 	.word	0x4c510c0c
 800f260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f264:	3104      	adds	r1, #4
 800f266:	f7ff bfc3 	b.w	800f1f0 <uxr_serialize_DATAWRITER_Representation>
 800f26a:	7909      	ldrb	r1, [r1, #4]
 800f26c:	f7fc f8c0 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800f270:	b300      	cbz	r0, 800f2b4 <uxr_serialize_ObjectVariant.part.0+0x74>
 800f272:	7923      	ldrb	r3, [r4, #4]
 800f274:	2b01      	cmp	r3, #1
 800f276:	d042      	beq.n	800f2fe <uxr_serialize_ObjectVariant.part.0+0xbe>
 800f278:	2b02      	cmp	r3, #2
 800f27a:	d040      	beq.n	800f2fe <uxr_serialize_ObjectVariant.part.0+0xbe>
 800f27c:	2001      	movs	r0, #1
 800f27e:	bd70      	pop	{r4, r5, r6, pc}
 800f280:	7909      	ldrb	r1, [r1, #4]
 800f282:	f7fc f8b5 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800f286:	4606      	mov	r6, r0
 800f288:	b158      	cbz	r0, 800f2a2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800f28a:	7923      	ldrb	r3, [r4, #4]
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	d03c      	beq.n	800f30a <uxr_serialize_ObjectVariant.part.0+0xca>
 800f290:	2b03      	cmp	r3, #3
 800f292:	d106      	bne.n	800f2a2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800f294:	68a2      	ldr	r2, [r4, #8]
 800f296:	f104 010c 	add.w	r1, r4, #12
 800f29a:	4628      	mov	r0, r5
 800f29c:	f7fd fa0c 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	2202      	movs	r2, #2
 800f2a4:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f005 ffa9 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f2ae:	4030      	ands	r0, r6
 800f2b0:	b2c0      	uxtb	r0, r0
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}
 800f2b8:	7909      	ldrb	r1, [r1, #4]
 800f2ba:	f7fc f899 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800f2be:	4606      	mov	r6, r0
 800f2c0:	b158      	cbz	r0, 800f2da <uxr_serialize_ObjectVariant.part.0+0x9a>
 800f2c2:	7923      	ldrb	r3, [r4, #4]
 800f2c4:	2b02      	cmp	r3, #2
 800f2c6:	d003      	beq.n	800f2d0 <uxr_serialize_ObjectVariant.part.0+0x90>
 800f2c8:	2b03      	cmp	r3, #3
 800f2ca:	d024      	beq.n	800f316 <uxr_serialize_ObjectVariant.part.0+0xd6>
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d104      	bne.n	800f2da <uxr_serialize_ObjectVariant.part.0+0x9a>
 800f2d0:	68a1      	ldr	r1, [r4, #8]
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	f006 f908 	bl	80154e8 <ucdr_serialize_string>
 800f2d8:	4606      	mov	r6, r0
 800f2da:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f7fc fdae 	bl	800be40 <ucdr_serialize_int16_t>
 800f2e4:	4030      	ands	r0, r6
 800f2e6:	b2c0      	uxtb	r0, r0
 800f2e8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2ee:	3104      	adds	r1, #4
 800f2f0:	f7ff be76 	b.w	800efe0 <uxr_serialize_CLIENT_Representation>
 800f2f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2f8:	3104      	adds	r1, #4
 800f2fa:	f7ff bf2f 	b.w	800f15c <uxr_serialize_AGENT_Representation>
 800f2fe:	68a1      	ldr	r1, [r4, #8]
 800f300:	4628      	mov	r0, r5
 800f302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f306:	f006 b8ef 	b.w	80154e8 <ucdr_serialize_string>
 800f30a:	68a1      	ldr	r1, [r4, #8]
 800f30c:	4628      	mov	r0, r5
 800f30e:	f006 f8eb 	bl	80154e8 <ucdr_serialize_string>
 800f312:	4606      	mov	r6, r0
 800f314:	e7c5      	b.n	800f2a2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800f316:	68a2      	ldr	r2, [r4, #8]
 800f318:	f104 010c 	add.w	r1, r4, #12
 800f31c:	4628      	mov	r0, r5
 800f31e:	f7fd f9cb 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800f322:	4606      	mov	r6, r0
 800f324:	e7d9      	b.n	800f2da <uxr_serialize_ObjectVariant.part.0+0x9a>
 800f326:	bf00      	nop

0800f328 <uxr_deserialize_DATAWRITER_Representation>:
 800f328:	b570      	push	{r4, r5, r6, lr}
 800f32a:	4606      	mov	r6, r0
 800f32c:	460d      	mov	r5, r1
 800f32e:	f7fc f875 	bl	800b41c <ucdr_deserialize_uint8_t>
 800f332:	4604      	mov	r4, r0
 800f334:	b130      	cbz	r0, 800f344 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f336:	782b      	ldrb	r3, [r5, #0]
 800f338:	2b02      	cmp	r3, #2
 800f33a:	d00c      	beq.n	800f356 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f33c:	2b03      	cmp	r3, #3
 800f33e:	d012      	beq.n	800f366 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f340:	2b01      	cmp	r3, #1
 800f342:	d008      	beq.n	800f356 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f344:	2202      	movs	r2, #2
 800f346:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f34a:	4630      	mov	r0, r6
 800f34c:	f005 ffbc 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f350:	4020      	ands	r0, r4
 800f352:	b2c0      	uxtb	r0, r0
 800f354:	bd70      	pop	{r4, r5, r6, pc}
 800f356:	6869      	ldr	r1, [r5, #4]
 800f358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f35c:	4630      	mov	r0, r6
 800f35e:	f006 f8d1 	bl	8015504 <ucdr_deserialize_string>
 800f362:	4604      	mov	r4, r0
 800f364:	e7ee      	b.n	800f344 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f366:	1d2b      	adds	r3, r5, #4
 800f368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f36c:	f105 0108 	add.w	r1, r5, #8
 800f370:	4630      	mov	r0, r6
 800f372:	f7fd f9b3 	bl	800c6dc <ucdr_deserialize_sequence_uint8_t>
 800f376:	4604      	mov	r4, r0
 800f378:	e7e4      	b.n	800f344 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f37a:	bf00      	nop

0800f37c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	460d      	mov	r5, r1
 800f380:	7809      	ldrb	r1, [r1, #0]
 800f382:	4606      	mov	r6, r0
 800f384:	f7fc f806 	bl	800b394 <ucdr_serialize_bool>
 800f388:	782b      	ldrb	r3, [r5, #0]
 800f38a:	4604      	mov	r4, r0
 800f38c:	b94b      	cbnz	r3, 800f3a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f38e:	7a29      	ldrb	r1, [r5, #8]
 800f390:	4630      	mov	r0, r6
 800f392:	f7fb ffff 	bl	800b394 <ucdr_serialize_bool>
 800f396:	7a2b      	ldrb	r3, [r5, #8]
 800f398:	4004      	ands	r4, r0
 800f39a:	b2e4      	uxtb	r4, r4
 800f39c:	b943      	cbnz	r3, 800f3b0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f39e:	4620      	mov	r0, r4
 800f3a0:	bd70      	pop	{r4, r5, r6, pc}
 800f3a2:	6869      	ldr	r1, [r5, #4]
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	f006 f89f 	bl	80154e8 <ucdr_serialize_string>
 800f3aa:	4004      	ands	r4, r0
 800f3ac:	b2e4      	uxtb	r4, r4
 800f3ae:	e7ee      	b.n	800f38e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f3b0:	68e9      	ldr	r1, [r5, #12]
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f006 f898 	bl	80154e8 <ucdr_serialize_string>
 800f3b8:	4004      	ands	r4, r0
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	bd70      	pop	{r4, r5, r6, pc}
 800f3be:	bf00      	nop

0800f3c0 <uxr_serialize_OBJK_Topic_Binary>:
 800f3c0:	b570      	push	{r4, r5, r6, lr}
 800f3c2:	460d      	mov	r5, r1
 800f3c4:	6809      	ldr	r1, [r1, #0]
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	f006 f88e 	bl	80154e8 <ucdr_serialize_string>
 800f3cc:	7929      	ldrb	r1, [r5, #4]
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f7fb ffdf 	bl	800b394 <ucdr_serialize_bool>
 800f3d6:	792b      	ldrb	r3, [r5, #4]
 800f3d8:	4004      	ands	r4, r0
 800f3da:	b2e4      	uxtb	r4, r4
 800f3dc:	b943      	cbnz	r3, 800f3f0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f3de:	7b29      	ldrb	r1, [r5, #12]
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f7fb ffd7 	bl	800b394 <ucdr_serialize_bool>
 800f3e6:	7b2b      	ldrb	r3, [r5, #12]
 800f3e8:	4004      	ands	r4, r0
 800f3ea:	b93b      	cbnz	r3, 800f3fc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	bd70      	pop	{r4, r5, r6, pc}
 800f3f0:	68a9      	ldr	r1, [r5, #8]
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f006 f878 	bl	80154e8 <ucdr_serialize_string>
 800f3f8:	4004      	ands	r4, r0
 800f3fa:	e7f0      	b.n	800f3de <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f3fc:	6929      	ldr	r1, [r5, #16]
 800f3fe:	4630      	mov	r0, r6
 800f400:	f006 f872 	bl	80154e8 <ucdr_serialize_string>
 800f404:	4004      	ands	r4, r0
 800f406:	b2e4      	uxtb	r4, r4
 800f408:	4620      	mov	r0, r4
 800f40a:	bd70      	pop	{r4, r5, r6, pc}

0800f40c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f410:	460c      	mov	r4, r1
 800f412:	7809      	ldrb	r1, [r1, #0]
 800f414:	4606      	mov	r6, r0
 800f416:	f7fb ffbd 	bl	800b394 <ucdr_serialize_bool>
 800f41a:	7823      	ldrb	r3, [r4, #0]
 800f41c:	4605      	mov	r5, r0
 800f41e:	b96b      	cbnz	r3, 800f43c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f420:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f424:	4630      	mov	r0, r6
 800f426:	f7fb ffb5 	bl	800b394 <ucdr_serialize_bool>
 800f42a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f42e:	4005      	ands	r5, r0
 800f430:	b2ed      	uxtb	r5, r5
 800f432:	2b00      	cmp	r3, #0
 800f434:	d16a      	bne.n	800f50c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800f436:	4628      	mov	r0, r5
 800f438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f43c:	6861      	ldr	r1, [r4, #4]
 800f43e:	4630      	mov	r0, r6
 800f440:	f7fc f9f2 	bl	800b828 <ucdr_serialize_uint32_t>
 800f444:	6863      	ldr	r3, [r4, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d06c      	beq.n	800f524 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d068      	beq.n	800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f44e:	68a1      	ldr	r1, [r4, #8]
 800f450:	4630      	mov	r0, r6
 800f452:	f006 f849 	bl	80154e8 <ucdr_serialize_string>
 800f456:	6862      	ldr	r2, [r4, #4]
 800f458:	2a01      	cmp	r2, #1
 800f45a:	d953      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d05f      	beq.n	800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f460:	68e1      	ldr	r1, [r4, #12]
 800f462:	4630      	mov	r0, r6
 800f464:	f006 f840 	bl	80154e8 <ucdr_serialize_string>
 800f468:	6862      	ldr	r2, [r4, #4]
 800f46a:	2a02      	cmp	r2, #2
 800f46c:	d94a      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d056      	beq.n	800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f472:	6921      	ldr	r1, [r4, #16]
 800f474:	4630      	mov	r0, r6
 800f476:	f006 f837 	bl	80154e8 <ucdr_serialize_string>
 800f47a:	6862      	ldr	r2, [r4, #4]
 800f47c:	2a03      	cmp	r2, #3
 800f47e:	d941      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f480:	2800      	cmp	r0, #0
 800f482:	d04d      	beq.n	800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f484:	6961      	ldr	r1, [r4, #20]
 800f486:	4630      	mov	r0, r6
 800f488:	f006 f82e 	bl	80154e8 <ucdr_serialize_string>
 800f48c:	6862      	ldr	r2, [r4, #4]
 800f48e:	2a04      	cmp	r2, #4
 800f490:	d938      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f492:	2800      	cmp	r0, #0
 800f494:	d044      	beq.n	800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f496:	69a1      	ldr	r1, [r4, #24]
 800f498:	4630      	mov	r0, r6
 800f49a:	f006 f825 	bl	80154e8 <ucdr_serialize_string>
 800f49e:	6862      	ldr	r2, [r4, #4]
 800f4a0:	2a05      	cmp	r2, #5
 800f4a2:	d92f      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d03b      	beq.n	800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f4a8:	69e1      	ldr	r1, [r4, #28]
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	f006 f81c 	bl	80154e8 <ucdr_serialize_string>
 800f4b0:	6862      	ldr	r2, [r4, #4]
 800f4b2:	2a06      	cmp	r2, #6
 800f4b4:	d926      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4b6:	b398      	cbz	r0, 800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f4b8:	6a21      	ldr	r1, [r4, #32]
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	f006 f814 	bl	80154e8 <ucdr_serialize_string>
 800f4c0:	6862      	ldr	r2, [r4, #4]
 800f4c2:	2a07      	cmp	r2, #7
 800f4c4:	d91e      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4c6:	b358      	cbz	r0, 800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f4c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f006 f80c 	bl	80154e8 <ucdr_serialize_string>
 800f4d0:	6862      	ldr	r2, [r4, #4]
 800f4d2:	2a08      	cmp	r2, #8
 800f4d4:	d916      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4d6:	b318      	cbz	r0, 800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f4d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f006 f804 	bl	80154e8 <ucdr_serialize_string>
 800f4e0:	6862      	ldr	r2, [r4, #4]
 800f4e2:	2a09      	cmp	r2, #9
 800f4e4:	d90e      	bls.n	800f504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f4e6:	b1d8      	cbz	r0, 800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f4e8:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800f4ec:	2709      	movs	r7, #9
 800f4ee:	e000      	b.n	800f4f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f4f0:	b1b0      	cbz	r0, 800f520 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800f4f2:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	f005 fff6 	bl	80154e8 <ucdr_serialize_string>
 800f4fc:	6862      	ldr	r2, [r4, #4]
 800f4fe:	3701      	adds	r7, #1
 800f500:	4297      	cmp	r7, r2
 800f502:	d3f5      	bcc.n	800f4f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f504:	ea05 0300 	and.w	r3, r5, r0
 800f508:	b2dd      	uxtb	r5, r3
 800f50a:	e789      	b.n	800f420 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f50c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f50e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f512:	4630      	mov	r0, r6
 800f514:	f7fd f8d0 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800f518:	4005      	ands	r5, r0
 800f51a:	4628      	mov	r0, r5
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	2500      	movs	r5, #0
 800f522:	e77d      	b.n	800f420 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f524:	4028      	ands	r0, r5
 800f526:	b2c5      	uxtb	r5, r0
 800f528:	e77a      	b.n	800f420 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f52a:	bf00      	nop

0800f52c <uxr_serialize_OBJK_Publisher_Binary>:
 800f52c:	b570      	push	{r4, r5, r6, lr}
 800f52e:	460d      	mov	r5, r1
 800f530:	7809      	ldrb	r1, [r1, #0]
 800f532:	4606      	mov	r6, r0
 800f534:	f7fb ff2e 	bl	800b394 <ucdr_serialize_bool>
 800f538:	782b      	ldrb	r3, [r5, #0]
 800f53a:	4604      	mov	r4, r0
 800f53c:	b94b      	cbnz	r3, 800f552 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f53e:	7a29      	ldrb	r1, [r5, #8]
 800f540:	4630      	mov	r0, r6
 800f542:	f7fb ff27 	bl	800b394 <ucdr_serialize_bool>
 800f546:	7a2b      	ldrb	r3, [r5, #8]
 800f548:	4004      	ands	r4, r0
 800f54a:	b2e4      	uxtb	r4, r4
 800f54c:	b943      	cbnz	r3, 800f560 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f54e:	4620      	mov	r0, r4
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	6869      	ldr	r1, [r5, #4]
 800f554:	4630      	mov	r0, r6
 800f556:	f005 ffc7 	bl	80154e8 <ucdr_serialize_string>
 800f55a:	4004      	ands	r4, r0
 800f55c:	b2e4      	uxtb	r4, r4
 800f55e:	e7ee      	b.n	800f53e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f560:	f105 010c 	add.w	r1, r5, #12
 800f564:	4630      	mov	r0, r6
 800f566:	f7ff ff51 	bl	800f40c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f56a:	4004      	ands	r4, r0
 800f56c:	4620      	mov	r0, r4
 800f56e:	bd70      	pop	{r4, r5, r6, pc}

0800f570 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f574:	460c      	mov	r4, r1
 800f576:	7809      	ldrb	r1, [r1, #0]
 800f578:	4606      	mov	r6, r0
 800f57a:	f7fb ff0b 	bl	800b394 <ucdr_serialize_bool>
 800f57e:	7823      	ldrb	r3, [r4, #0]
 800f580:	4605      	mov	r5, r0
 800f582:	b96b      	cbnz	r3, 800f5a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f584:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f588:	4630      	mov	r0, r6
 800f58a:	f7fb ff03 	bl	800b394 <ucdr_serialize_bool>
 800f58e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f592:	4005      	ands	r5, r0
 800f594:	b2ed      	uxtb	r5, r5
 800f596:	2b00      	cmp	r3, #0
 800f598:	d16a      	bne.n	800f670 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 800f59a:	4628      	mov	r0, r5
 800f59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a0:	6861      	ldr	r1, [r4, #4]
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f7fc f940 	bl	800b828 <ucdr_serialize_uint32_t>
 800f5a8:	6863      	ldr	r3, [r4, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d06c      	beq.n	800f688 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d068      	beq.n	800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f5b2:	68a1      	ldr	r1, [r4, #8]
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	f005 ff97 	bl	80154e8 <ucdr_serialize_string>
 800f5ba:	6862      	ldr	r2, [r4, #4]
 800f5bc:	2a01      	cmp	r2, #1
 800f5be:	d953      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d05f      	beq.n	800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f5c4:	68e1      	ldr	r1, [r4, #12]
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f005 ff8e 	bl	80154e8 <ucdr_serialize_string>
 800f5cc:	6862      	ldr	r2, [r4, #4]
 800f5ce:	2a02      	cmp	r2, #2
 800f5d0:	d94a      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d056      	beq.n	800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f5d6:	6921      	ldr	r1, [r4, #16]
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f005 ff85 	bl	80154e8 <ucdr_serialize_string>
 800f5de:	6862      	ldr	r2, [r4, #4]
 800f5e0:	2a03      	cmp	r2, #3
 800f5e2:	d941      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d04d      	beq.n	800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f5e8:	6961      	ldr	r1, [r4, #20]
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f005 ff7c 	bl	80154e8 <ucdr_serialize_string>
 800f5f0:	6862      	ldr	r2, [r4, #4]
 800f5f2:	2a04      	cmp	r2, #4
 800f5f4:	d938      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d044      	beq.n	800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f5fa:	69a1      	ldr	r1, [r4, #24]
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	f005 ff73 	bl	80154e8 <ucdr_serialize_string>
 800f602:	6862      	ldr	r2, [r4, #4]
 800f604:	2a05      	cmp	r2, #5
 800f606:	d92f      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f608:	2800      	cmp	r0, #0
 800f60a:	d03b      	beq.n	800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f60c:	69e1      	ldr	r1, [r4, #28]
 800f60e:	4630      	mov	r0, r6
 800f610:	f005 ff6a 	bl	80154e8 <ucdr_serialize_string>
 800f614:	6862      	ldr	r2, [r4, #4]
 800f616:	2a06      	cmp	r2, #6
 800f618:	d926      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f61a:	b398      	cbz	r0, 800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f61c:	6a21      	ldr	r1, [r4, #32]
 800f61e:	4630      	mov	r0, r6
 800f620:	f005 ff62 	bl	80154e8 <ucdr_serialize_string>
 800f624:	6862      	ldr	r2, [r4, #4]
 800f626:	2a07      	cmp	r2, #7
 800f628:	d91e      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f62a:	b358      	cbz	r0, 800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f62c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f62e:	4630      	mov	r0, r6
 800f630:	f005 ff5a 	bl	80154e8 <ucdr_serialize_string>
 800f634:	6862      	ldr	r2, [r4, #4]
 800f636:	2a08      	cmp	r2, #8
 800f638:	d916      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f63a:	b318      	cbz	r0, 800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f63c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f63e:	4630      	mov	r0, r6
 800f640:	f005 ff52 	bl	80154e8 <ucdr_serialize_string>
 800f644:	6862      	ldr	r2, [r4, #4]
 800f646:	2a09      	cmp	r2, #9
 800f648:	d90e      	bls.n	800f668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f64a:	b1d8      	cbz	r0, 800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f64c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800f650:	2709      	movs	r7, #9
 800f652:	e000      	b.n	800f656 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f654:	b1b0      	cbz	r0, 800f684 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 800f656:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800f65a:	4630      	mov	r0, r6
 800f65c:	f005 ff44 	bl	80154e8 <ucdr_serialize_string>
 800f660:	6862      	ldr	r2, [r4, #4]
 800f662:	3701      	adds	r7, #1
 800f664:	4297      	cmp	r7, r2
 800f666:	d3f5      	bcc.n	800f654 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f668:	ea05 0300 	and.w	r3, r5, r0
 800f66c:	b2dd      	uxtb	r5, r3
 800f66e:	e789      	b.n	800f584 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f670:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f672:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f676:	4630      	mov	r0, r6
 800f678:	f7fd f81e 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800f67c:	4005      	ands	r5, r0
 800f67e:	4628      	mov	r0, r5
 800f680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f684:	2500      	movs	r5, #0
 800f686:	e77d      	b.n	800f584 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f688:	4028      	ands	r0, r5
 800f68a:	b2c5      	uxtb	r5, r0
 800f68c:	e77a      	b.n	800f584 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f68e:	bf00      	nop

0800f690 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f690:	b570      	push	{r4, r5, r6, lr}
 800f692:	460d      	mov	r5, r1
 800f694:	7809      	ldrb	r1, [r1, #0]
 800f696:	4606      	mov	r6, r0
 800f698:	f7fb fe7c 	bl	800b394 <ucdr_serialize_bool>
 800f69c:	782b      	ldrb	r3, [r5, #0]
 800f69e:	4604      	mov	r4, r0
 800f6a0:	b94b      	cbnz	r3, 800f6b6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f6a2:	7a29      	ldrb	r1, [r5, #8]
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f7fb fe75 	bl	800b394 <ucdr_serialize_bool>
 800f6aa:	7a2b      	ldrb	r3, [r5, #8]
 800f6ac:	4004      	ands	r4, r0
 800f6ae:	b2e4      	uxtb	r4, r4
 800f6b0:	b943      	cbnz	r3, 800f6c4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	bd70      	pop	{r4, r5, r6, pc}
 800f6b6:	6869      	ldr	r1, [r5, #4]
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f005 ff15 	bl	80154e8 <ucdr_serialize_string>
 800f6be:	4004      	ands	r4, r0
 800f6c0:	b2e4      	uxtb	r4, r4
 800f6c2:	e7ee      	b.n	800f6a2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f6c4:	f105 010c 	add.w	r1, r5, #12
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f7ff ff51 	bl	800f570 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f6ce:	4004      	ands	r4, r0
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	bd70      	pop	{r4, r5, r6, pc}

0800f6d4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f6d4:	b570      	push	{r4, r5, r6, lr}
 800f6d6:	460d      	mov	r5, r1
 800f6d8:	8809      	ldrh	r1, [r1, #0]
 800f6da:	4606      	mov	r6, r0
 800f6dc:	f7fb feb4 	bl	800b448 <ucdr_serialize_uint16_t>
 800f6e0:	78a9      	ldrb	r1, [r5, #2]
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f7fb fe55 	bl	800b394 <ucdr_serialize_bool>
 800f6ea:	78ab      	ldrb	r3, [r5, #2]
 800f6ec:	4004      	ands	r4, r0
 800f6ee:	b2e4      	uxtb	r4, r4
 800f6f0:	b9b3      	cbnz	r3, 800f720 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800f6f2:	79a9      	ldrb	r1, [r5, #6]
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	f7fb fe4d 	bl	800b394 <ucdr_serialize_bool>
 800f6fa:	79ab      	ldrb	r3, [r5, #6]
 800f6fc:	4004      	ands	r4, r0
 800f6fe:	bb33      	cbnz	r3, 800f74e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800f700:	7b29      	ldrb	r1, [r5, #12]
 800f702:	4630      	mov	r0, r6
 800f704:	f7fb fe46 	bl	800b394 <ucdr_serialize_bool>
 800f708:	7b2b      	ldrb	r3, [r5, #12]
 800f70a:	4004      	ands	r4, r0
 800f70c:	b9c3      	cbnz	r3, 800f740 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800f70e:	7d29      	ldrb	r1, [r5, #20]
 800f710:	4630      	mov	r0, r6
 800f712:	f7fb fe3f 	bl	800b394 <ucdr_serialize_bool>
 800f716:	7d2b      	ldrb	r3, [r5, #20]
 800f718:	4004      	ands	r4, r0
 800f71a:	b93b      	cbnz	r3, 800f72c <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800f71c:	4620      	mov	r0, r4
 800f71e:	bd70      	pop	{r4, r5, r6, pc}
 800f720:	88a9      	ldrh	r1, [r5, #4]
 800f722:	4630      	mov	r0, r6
 800f724:	f7fb fe90 	bl	800b448 <ucdr_serialize_uint16_t>
 800f728:	4004      	ands	r4, r0
 800f72a:	e7e2      	b.n	800f6f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800f72c:	69aa      	ldr	r2, [r5, #24]
 800f72e:	f105 011c 	add.w	r1, r5, #28
 800f732:	4630      	mov	r0, r6
 800f734:	f7fc ffc0 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800f738:	4004      	ands	r4, r0
 800f73a:	b2e4      	uxtb	r4, r4
 800f73c:	4620      	mov	r0, r4
 800f73e:	bd70      	pop	{r4, r5, r6, pc}
 800f740:	6929      	ldr	r1, [r5, #16]
 800f742:	4630      	mov	r0, r6
 800f744:	f7fc f870 	bl	800b828 <ucdr_serialize_uint32_t>
 800f748:	4004      	ands	r4, r0
 800f74a:	b2e4      	uxtb	r4, r4
 800f74c:	e7df      	b.n	800f70e <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800f74e:	68a9      	ldr	r1, [r5, #8]
 800f750:	4630      	mov	r0, r6
 800f752:	f7fc f869 	bl	800b828 <ucdr_serialize_uint32_t>
 800f756:	4004      	ands	r4, r0
 800f758:	b2e4      	uxtb	r4, r4
 800f75a:	e7d1      	b.n	800f700 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800f75c <uxr_serialize_OBJK_DataReader_Binary>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	2202      	movs	r2, #2
 800f760:	460c      	mov	r4, r1
 800f762:	4606      	mov	r6, r0
 800f764:	f005 fd4c 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f768:	78a1      	ldrb	r1, [r4, #2]
 800f76a:	4605      	mov	r5, r0
 800f76c:	4630      	mov	r0, r6
 800f76e:	f7fb fe11 	bl	800b394 <ucdr_serialize_bool>
 800f772:	78a3      	ldrb	r3, [r4, #2]
 800f774:	4005      	ands	r5, r0
 800f776:	b2ed      	uxtb	r5, r5
 800f778:	b90b      	cbnz	r3, 800f77e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f77a:	4628      	mov	r0, r5
 800f77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f77e:	f104 0108 	add.w	r1, r4, #8
 800f782:	4630      	mov	r0, r6
 800f784:	f7ff ffa6 	bl	800f6d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f788:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f78c:	4607      	mov	r7, r0
 800f78e:	4630      	mov	r0, r6
 800f790:	f7fb fe00 	bl	800b394 <ucdr_serialize_bool>
 800f794:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f798:	4007      	ands	r7, r0
 800f79a:	b2ff      	uxtb	r7, r7
 800f79c:	b95b      	cbnz	r3, 800f7b6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f79e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f7fb fdf6 	bl	800b394 <ucdr_serialize_bool>
 800f7a8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f7ac:	4007      	ands	r7, r0
 800f7ae:	b94b      	cbnz	r3, 800f7c4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f7b0:	403d      	ands	r5, r7
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7b6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	f7fc fa78 	bl	800bcb0 <ucdr_serialize_uint64_t>
 800f7c0:	4007      	ands	r7, r0
 800f7c2:	e7ec      	b.n	800f79e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f7c4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	f005 fe8e 	bl	80154e8 <ucdr_serialize_string>
 800f7cc:	4007      	ands	r7, r0
 800f7ce:	b2ff      	uxtb	r7, r7
 800f7d0:	e7ee      	b.n	800f7b0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f7d2:	bf00      	nop

0800f7d4 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	2202      	movs	r2, #2
 800f7d8:	460d      	mov	r5, r1
 800f7da:	4606      	mov	r6, r0
 800f7dc:	f005 fd10 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800f7e0:	78a9      	ldrb	r1, [r5, #2]
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	f7fb fdd5 	bl	800b394 <ucdr_serialize_bool>
 800f7ea:	78ab      	ldrb	r3, [r5, #2]
 800f7ec:	4004      	ands	r4, r0
 800f7ee:	b2e4      	uxtb	r4, r4
 800f7f0:	b90b      	cbnz	r3, 800f7f6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7f6:	f105 0108 	add.w	r1, r5, #8
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	f7ff ff6a 	bl	800f6d4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f800:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800f804:	4607      	mov	r7, r0
 800f806:	4630      	mov	r0, r6
 800f808:	f7fb fdc4 	bl	800b394 <ucdr_serialize_bool>
 800f80c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f810:	4007      	ands	r7, r0
 800f812:	b2ff      	uxtb	r7, r7
 800f814:	b913      	cbnz	r3, 800f81c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f816:	403c      	ands	r4, r7
 800f818:	4620      	mov	r0, r4
 800f81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f81c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800f820:	4630      	mov	r0, r6
 800f822:	f7fc fa45 	bl	800bcb0 <ucdr_serialize_uint64_t>
 800f826:	4007      	ands	r7, r0
 800f828:	e7f5      	b.n	800f816 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f82a:	bf00      	nop

0800f82c <uxr_deserialize_ObjectVariant>:
 800f82c:	b570      	push	{r4, r5, r6, lr}
 800f82e:	4605      	mov	r5, r0
 800f830:	460e      	mov	r6, r1
 800f832:	f7fb fdf3 	bl	800b41c <ucdr_deserialize_uint8_t>
 800f836:	b168      	cbz	r0, 800f854 <uxr_deserialize_ObjectVariant+0x28>
 800f838:	7833      	ldrb	r3, [r6, #0]
 800f83a:	3b01      	subs	r3, #1
 800f83c:	4604      	mov	r4, r0
 800f83e:	2b0d      	cmp	r3, #13
 800f840:	d809      	bhi.n	800f856 <uxr_deserialize_ObjectVariant+0x2a>
 800f842:	e8df f003 	tbb	[pc, r3]
 800f846:	0a64      	.short	0x0a64
 800f848:	0a0a2323 	.word	0x0a0a2323
 800f84c:	10080a0a 	.word	0x10080a0a
 800f850:	5e411010 	.word	0x5e411010
 800f854:	2400      	movs	r4, #0
 800f856:	4620      	mov	r0, r4
 800f858:	bd70      	pop	{r4, r5, r6, pc}
 800f85a:	1d31      	adds	r1, r6, #4
 800f85c:	4628      	mov	r0, r5
 800f85e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f862:	f7ff bd61 	b.w	800f328 <uxr_deserialize_DATAWRITER_Representation>
 800f866:	1d31      	adds	r1, r6, #4
 800f868:	4628      	mov	r0, r5
 800f86a:	f7fb fdd7 	bl	800b41c <ucdr_deserialize_uint8_t>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d0f0      	beq.n	800f854 <uxr_deserialize_ObjectVariant+0x28>
 800f872:	7933      	ldrb	r3, [r6, #4]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d001      	beq.n	800f87c <uxr_deserialize_ObjectVariant+0x50>
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d1ec      	bne.n	800f856 <uxr_deserialize_ObjectVariant+0x2a>
 800f87c:	68b1      	ldr	r1, [r6, #8]
 800f87e:	4628      	mov	r0, r5
 800f880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f888:	f005 be3c 	b.w	8015504 <ucdr_deserialize_string>
 800f88c:	1d31      	adds	r1, r6, #4
 800f88e:	4628      	mov	r0, r5
 800f890:	f7fb fdc4 	bl	800b41c <ucdr_deserialize_uint8_t>
 800f894:	4604      	mov	r4, r0
 800f896:	b170      	cbz	r0, 800f8b6 <uxr_deserialize_ObjectVariant+0x8a>
 800f898:	7933      	ldrb	r3, [r6, #4]
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	d053      	beq.n	800f946 <uxr_deserialize_ObjectVariant+0x11a>
 800f89e:	2b03      	cmp	r3, #3
 800f8a0:	d109      	bne.n	800f8b6 <uxr_deserialize_ObjectVariant+0x8a>
 800f8a2:	f106 0308 	add.w	r3, r6, #8
 800f8a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8aa:	f106 010c 	add.w	r1, r6, #12
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f7fc ff14 	bl	800c6dc <ucdr_deserialize_sequence_uint8_t>
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	2202      	movs	r2, #2
 800f8b8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f8bc:	4628      	mov	r0, r5
 800f8be:	f005 fd03 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f8c2:	4004      	ands	r4, r0
 800f8c4:	b2e4      	uxtb	r4, r4
 800f8c6:	e7c6      	b.n	800f856 <uxr_deserialize_ObjectVariant+0x2a>
 800f8c8:	2204      	movs	r2, #4
 800f8ca:	18b1      	adds	r1, r6, r2
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	f005 fcfb 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f8d2:	2202      	movs	r2, #2
 800f8d4:	f106 0108 	add.w	r1, r6, #8
 800f8d8:	4604      	mov	r4, r0
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f005 fcf4 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f8e0:	2202      	movs	r2, #2
 800f8e2:	4004      	ands	r4, r0
 800f8e4:	f106 010a 	add.w	r1, r6, #10
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f005 fced 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f8ee:	b2e4      	uxtb	r4, r4
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	f106 010c 	add.w	r1, r6, #12
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	401c      	ands	r4, r3
 800f8fa:	f7fb fd61 	bl	800b3c0 <ucdr_deserialize_bool>
 800f8fe:	4004      	ands	r4, r0
 800f900:	e7a9      	b.n	800f856 <uxr_deserialize_ObjectVariant+0x2a>
 800f902:	1d31      	adds	r1, r6, #4
 800f904:	4628      	mov	r0, r5
 800f906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f90a:	f7ff bbc3 	b.w	800f094 <uxr_deserialize_CLIENT_Representation>
 800f90e:	1d31      	adds	r1, r6, #4
 800f910:	4628      	mov	r0, r5
 800f912:	f7fb fd83 	bl	800b41c <ucdr_deserialize_uint8_t>
 800f916:	4604      	mov	r4, r0
 800f918:	b168      	cbz	r0, 800f936 <uxr_deserialize_ObjectVariant+0x10a>
 800f91a:	7933      	ldrb	r3, [r6, #4]
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	d003      	beq.n	800f928 <uxr_deserialize_ObjectVariant+0xfc>
 800f920:	2b03      	cmp	r3, #3
 800f922:	d018      	beq.n	800f956 <uxr_deserialize_ObjectVariant+0x12a>
 800f924:	2b01      	cmp	r3, #1
 800f926:	d106      	bne.n	800f936 <uxr_deserialize_ObjectVariant+0x10a>
 800f928:	68b1      	ldr	r1, [r6, #8]
 800f92a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f92e:	4628      	mov	r0, r5
 800f930:	f005 fde8 	bl	8015504 <ucdr_deserialize_string>
 800f934:	4604      	mov	r4, r0
 800f936:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f93a:	4628      	mov	r0, r5
 800f93c:	f7fc fb0a 	bl	800bf54 <ucdr_deserialize_int16_t>
 800f940:	4004      	ands	r4, r0
 800f942:	b2e4      	uxtb	r4, r4
 800f944:	e787      	b.n	800f856 <uxr_deserialize_ObjectVariant+0x2a>
 800f946:	68b1      	ldr	r1, [r6, #8]
 800f948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f94c:	4628      	mov	r0, r5
 800f94e:	f005 fdd9 	bl	8015504 <ucdr_deserialize_string>
 800f952:	4604      	mov	r4, r0
 800f954:	e7af      	b.n	800f8b6 <uxr_deserialize_ObjectVariant+0x8a>
 800f956:	f106 0308 	add.w	r3, r6, #8
 800f95a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f95e:	f106 010c 	add.w	r1, r6, #12
 800f962:	4628      	mov	r0, r5
 800f964:	f7fc feba 	bl	800c6dc <ucdr_deserialize_sequence_uint8_t>
 800f968:	4604      	mov	r4, r0
 800f96a:	e7e4      	b.n	800f936 <uxr_deserialize_ObjectVariant+0x10a>

0800f96c <uxr_deserialize_BaseObjectRequest>:
 800f96c:	b570      	push	{r4, r5, r6, lr}
 800f96e:	2202      	movs	r2, #2
 800f970:	4605      	mov	r5, r0
 800f972:	460e      	mov	r6, r1
 800f974:	f005 fca8 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f978:	2202      	movs	r2, #2
 800f97a:	4604      	mov	r4, r0
 800f97c:	18b1      	adds	r1, r6, r2
 800f97e:	4628      	mov	r0, r5
 800f980:	f005 fca2 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800f984:	4020      	ands	r0, r4
 800f986:	b2c0      	uxtb	r0, r0
 800f988:	bd70      	pop	{r4, r5, r6, pc}
 800f98a:	bf00      	nop

0800f98c <uxr_serialize_ActivityInfoVariant>:
 800f98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f990:	460d      	mov	r5, r1
 800f992:	7809      	ldrb	r1, [r1, #0]
 800f994:	4606      	mov	r6, r0
 800f996:	f7fb fd2b 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800f99a:	b130      	cbz	r0, 800f9aa <uxr_serialize_ActivityInfoVariant+0x1e>
 800f99c:	782b      	ldrb	r3, [r5, #0]
 800f99e:	2b06      	cmp	r3, #6
 800f9a0:	d014      	beq.n	800f9cc <uxr_serialize_ActivityInfoVariant+0x40>
 800f9a2:	2b0d      	cmp	r3, #13
 800f9a4:	d019      	beq.n	800f9da <uxr_serialize_ActivityInfoVariant+0x4e>
 800f9a6:	2b05      	cmp	r3, #5
 800f9a8:	d001      	beq.n	800f9ae <uxr_serialize_ActivityInfoVariant+0x22>
 800f9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ae:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7fc fa44 	bl	800be40 <ucdr_serialize_int16_t>
 800f9b8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f9bc:	4604      	mov	r4, r0
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f7fc f976 	bl	800bcb0 <ucdr_serialize_uint64_t>
 800f9c4:	4020      	ands	r0, r4
 800f9c6:	b2c0      	uxtb	r0, r0
 800f9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9cc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d6:	f7fc ba33 	b.w	800be40 <ucdr_serialize_int16_t>
 800f9da:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f7fc fa2e 	bl	800be40 <ucdr_serialize_int16_t>
 800f9e4:	68e9      	ldr	r1, [r5, #12]
 800f9e6:	4681      	mov	r9, r0
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7fb ff1d 	bl	800b828 <ucdr_serialize_uint32_t>
 800f9ee:	68eb      	ldr	r3, [r5, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d051      	beq.n	800fa98 <uxr_serialize_ActivityInfoVariant+0x10c>
 800f9f4:	b1e8      	cbz	r0, 800fa32 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f9f6:	f105 0714 	add.w	r7, r5, #20
 800f9fa:	f04f 0800 	mov.w	r8, #0
 800f9fe:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 800fa02:	4630      	mov	r0, r6
 800fa04:	f7fb fcf4 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fa08:	b198      	cbz	r0, 800fa32 <uxr_serialize_ActivityInfoVariant+0xa6>
 800fa0a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 800fa0e:	2b03      	cmp	r3, #3
 800fa10:	d839      	bhi.n	800fa86 <uxr_serialize_ActivityInfoVariant+0xfa>
 800fa12:	e8df f003 	tbb	[pc, r3]
 800fa16:	1e2b      	.short	0x1e2b
 800fa18:	0211      	.short	0x0211
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f005 fd63 	bl	80154e8 <ucdr_serialize_string>
 800fa22:	68eb      	ldr	r3, [r5, #12]
 800fa24:	f108 0801 	add.w	r8, r8, #1
 800fa28:	4598      	cmp	r8, r3
 800fa2a:	d231      	bcs.n	800fa90 <uxr_serialize_ActivityInfoVariant+0x104>
 800fa2c:	3718      	adds	r7, #24
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d1e5      	bne.n	800f9fe <uxr_serialize_ActivityInfoVariant+0x72>
 800fa32:	2000      	movs	r0, #0
 800fa34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa38:	2210      	movs	r2, #16
 800fa3a:	4639      	mov	r1, r7
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f005 fbdf 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fa42:	6939      	ldr	r1, [r7, #16]
 800fa44:	4604      	mov	r4, r0
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7fb feee 	bl	800b828 <ucdr_serialize_uint32_t>
 800fa4c:	4020      	ands	r0, r4
 800fa4e:	b2c0      	uxtb	r0, r0
 800fa50:	e7e7      	b.n	800fa22 <uxr_serialize_ActivityInfoVariant+0x96>
 800fa52:	2204      	movs	r2, #4
 800fa54:	4639      	mov	r1, r7
 800fa56:	4630      	mov	r0, r6
 800fa58:	f005 fbd2 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fa5c:	88b9      	ldrh	r1, [r7, #4]
 800fa5e:	4604      	mov	r4, r0
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7fb fcf1 	bl	800b448 <ucdr_serialize_uint16_t>
 800fa66:	4020      	ands	r0, r4
 800fa68:	b2c0      	uxtb	r0, r0
 800fa6a:	e7da      	b.n	800fa22 <uxr_serialize_ActivityInfoVariant+0x96>
 800fa6c:	2202      	movs	r2, #2
 800fa6e:	4639      	mov	r1, r7
 800fa70:	4630      	mov	r0, r6
 800fa72:	f005 fbc5 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fa76:	78b9      	ldrb	r1, [r7, #2]
 800fa78:	4604      	mov	r4, r0
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	f7fb fcb8 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fa80:	4020      	ands	r0, r4
 800fa82:	b2c0      	uxtb	r0, r0
 800fa84:	e7cd      	b.n	800fa22 <uxr_serialize_ActivityInfoVariant+0x96>
 800fa86:	68eb      	ldr	r3, [r5, #12]
 800fa88:	f108 0801 	add.w	r8, r8, #1
 800fa8c:	4598      	cmp	r8, r3
 800fa8e:	d308      	bcc.n	800faa2 <uxr_serialize_ActivityInfoVariant+0x116>
 800fa90:	ea09 0000 	and.w	r0, r9, r0
 800fa94:	b2c0      	uxtb	r0, r0
 800fa96:	e788      	b.n	800f9aa <uxr_serialize_ActivityInfoVariant+0x1e>
 800fa98:	ea09 0900 	and.w	r9, r9, r0
 800fa9c:	fa5f f089 	uxtb.w	r0, r9
 800faa0:	e783      	b.n	800f9aa <uxr_serialize_ActivityInfoVariant+0x1e>
 800faa2:	3718      	adds	r7, #24
 800faa4:	e7ab      	b.n	800f9fe <uxr_serialize_ActivityInfoVariant+0x72>
 800faa6:	bf00      	nop

0800faa8 <uxr_deserialize_BaseObjectReply>:
 800faa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faac:	2202      	movs	r2, #2
 800faae:	4606      	mov	r6, r0
 800fab0:	460f      	mov	r7, r1
 800fab2:	f005 fc09 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fab6:	2202      	movs	r2, #2
 800fab8:	18b9      	adds	r1, r7, r2
 800faba:	4605      	mov	r5, r0
 800fabc:	4630      	mov	r0, r6
 800fabe:	f005 fc03 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fac2:	1d39      	adds	r1, r7, #4
 800fac4:	4680      	mov	r8, r0
 800fac6:	4630      	mov	r0, r6
 800fac8:	f7fb fca8 	bl	800b41c <ucdr_deserialize_uint8_t>
 800facc:	1d79      	adds	r1, r7, #5
 800face:	4604      	mov	r4, r0
 800fad0:	4630      	mov	r0, r6
 800fad2:	f7fb fca3 	bl	800b41c <ucdr_deserialize_uint8_t>
 800fad6:	ea05 0508 	and.w	r5, r5, r8
 800fada:	402c      	ands	r4, r5
 800fadc:	4020      	ands	r0, r4
 800fade:	b2c0      	uxtb	r0, r0
 800fae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fae4 <uxr_serialize_ReadSpecification>:
 800fae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae8:	460d      	mov	r5, r1
 800faea:	7809      	ldrb	r1, [r1, #0]
 800faec:	4606      	mov	r6, r0
 800faee:	f7fb fc7f 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800faf2:	7869      	ldrb	r1, [r5, #1]
 800faf4:	4604      	mov	r4, r0
 800faf6:	4630      	mov	r0, r6
 800faf8:	f7fb fc7a 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fafc:	78a9      	ldrb	r1, [r5, #2]
 800fafe:	4004      	ands	r4, r0
 800fb00:	4630      	mov	r0, r6
 800fb02:	f7fb fc47 	bl	800b394 <ucdr_serialize_bool>
 800fb06:	78ab      	ldrb	r3, [r5, #2]
 800fb08:	b2e4      	uxtb	r4, r4
 800fb0a:	4004      	ands	r4, r0
 800fb0c:	b94b      	cbnz	r3, 800fb22 <uxr_serialize_ReadSpecification+0x3e>
 800fb0e:	7a29      	ldrb	r1, [r5, #8]
 800fb10:	4630      	mov	r0, r6
 800fb12:	f7fb fc3f 	bl	800b394 <ucdr_serialize_bool>
 800fb16:	7a2b      	ldrb	r3, [r5, #8]
 800fb18:	4004      	ands	r4, r0
 800fb1a:	b943      	cbnz	r3, 800fb2e <uxr_serialize_ReadSpecification+0x4a>
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb22:	6869      	ldr	r1, [r5, #4]
 800fb24:	4630      	mov	r0, r6
 800fb26:	f005 fcdf 	bl	80154e8 <ucdr_serialize_string>
 800fb2a:	4004      	ands	r4, r0
 800fb2c:	e7ef      	b.n	800fb0e <uxr_serialize_ReadSpecification+0x2a>
 800fb2e:	8969      	ldrh	r1, [r5, #10]
 800fb30:	4630      	mov	r0, r6
 800fb32:	f7fb fc89 	bl	800b448 <ucdr_serialize_uint16_t>
 800fb36:	89a9      	ldrh	r1, [r5, #12]
 800fb38:	4607      	mov	r7, r0
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f7fb fc84 	bl	800b448 <ucdr_serialize_uint16_t>
 800fb40:	89e9      	ldrh	r1, [r5, #14]
 800fb42:	4007      	ands	r7, r0
 800fb44:	4630      	mov	r0, r6
 800fb46:	f7fb fc7f 	bl	800b448 <ucdr_serialize_uint16_t>
 800fb4a:	8a29      	ldrh	r1, [r5, #16]
 800fb4c:	4680      	mov	r8, r0
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f7fb fc7a 	bl	800b448 <ucdr_serialize_uint16_t>
 800fb54:	b2ff      	uxtb	r7, r7
 800fb56:	ea04 0507 	and.w	r5, r4, r7
 800fb5a:	ea05 0508 	and.w	r5, r5, r8
 800fb5e:	ea00 0405 	and.w	r4, r0, r5
 800fb62:	4620      	mov	r0, r4
 800fb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb68 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fb68:	f7ff ba3a 	b.w	800efe0 <uxr_serialize_CLIENT_Representation>

0800fb6c <uxr_serialize_CREATE_Payload>:
 800fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6e:	2202      	movs	r2, #2
 800fb70:	4606      	mov	r6, r0
 800fb72:	460d      	mov	r5, r1
 800fb74:	f005 fb44 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fb78:	2202      	movs	r2, #2
 800fb7a:	18a9      	adds	r1, r5, r2
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f005 fb3e 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fb84:	7929      	ldrb	r1, [r5, #4]
 800fb86:	4607      	mov	r7, r0
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f7fb fc31 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fb8e:	b170      	cbz	r0, 800fbae <uxr_serialize_CREATE_Payload+0x42>
 800fb90:	792b      	ldrb	r3, [r5, #4]
 800fb92:	403c      	ands	r4, r7
 800fb94:	3b01      	subs	r3, #1
 800fb96:	b2e4      	uxtb	r4, r4
 800fb98:	2b0d      	cmp	r3, #13
 800fb9a:	d809      	bhi.n	800fbb0 <uxr_serialize_CREATE_Payload+0x44>
 800fb9c:	e8df f003 	tbb	[pc, r3]
 800fba0:	23230a3e 	.word	0x23230a3e
 800fba4:	0a0a0a0a 	.word	0x0a0a0a0a
 800fba8:	12121208 	.word	0x12121208
 800fbac:	5f58      	.short	0x5f58
 800fbae:	2400      	movs	r4, #0
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb4:	f105 0108 	add.w	r1, r5, #8
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f7ff fb19 	bl	800f1f0 <uxr_serialize_DATAWRITER_Representation>
 800fbbe:	4004      	ands	r4, r0
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc4:	7a29      	ldrb	r1, [r5, #8]
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f7fb fc12 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0ee      	beq.n	800fbae <uxr_serialize_CREATE_Payload+0x42>
 800fbd0:	7a2b      	ldrb	r3, [r5, #8]
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d001      	beq.n	800fbda <uxr_serialize_CREATE_Payload+0x6e>
 800fbd6:	2b02      	cmp	r3, #2
 800fbd8:	d1ea      	bne.n	800fbb0 <uxr_serialize_CREATE_Payload+0x44>
 800fbda:	68e9      	ldr	r1, [r5, #12]
 800fbdc:	4630      	mov	r0, r6
 800fbde:	f005 fc83 	bl	80154e8 <ucdr_serialize_string>
 800fbe2:	4004      	ands	r4, r0
 800fbe4:	e7e4      	b.n	800fbb0 <uxr_serialize_CREATE_Payload+0x44>
 800fbe6:	7a29      	ldrb	r1, [r5, #8]
 800fbe8:	4630      	mov	r0, r6
 800fbea:	f7fb fc01 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fbee:	4607      	mov	r7, r0
 800fbf0:	b158      	cbz	r0, 800fc0a <uxr_serialize_CREATE_Payload+0x9e>
 800fbf2:	7a2b      	ldrb	r3, [r5, #8]
 800fbf4:	2b02      	cmp	r3, #2
 800fbf6:	d039      	beq.n	800fc6c <uxr_serialize_CREATE_Payload+0x100>
 800fbf8:	2b03      	cmp	r3, #3
 800fbfa:	d106      	bne.n	800fc0a <uxr_serialize_CREATE_Payload+0x9e>
 800fbfc:	68ea      	ldr	r2, [r5, #12]
 800fbfe:	f105 0110 	add.w	r1, r5, #16
 800fc02:	4630      	mov	r0, r6
 800fc04:	f7fc fd58 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800fc08:	4607      	mov	r7, r0
 800fc0a:	2202      	movs	r2, #2
 800fc0c:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800fc10:	4630      	mov	r0, r6
 800fc12:	f005 faf5 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fc16:	4038      	ands	r0, r7
 800fc18:	4004      	ands	r4, r0
 800fc1a:	e7c9      	b.n	800fbb0 <uxr_serialize_CREATE_Payload+0x44>
 800fc1c:	7a29      	ldrb	r1, [r5, #8]
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f7fb fbe6 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fc24:	4607      	mov	r7, r0
 800fc26:	b158      	cbz	r0, 800fc40 <uxr_serialize_CREATE_Payload+0xd4>
 800fc28:	7a2b      	ldrb	r3, [r5, #8]
 800fc2a:	2b02      	cmp	r3, #2
 800fc2c:	d003      	beq.n	800fc36 <uxr_serialize_CREATE_Payload+0xca>
 800fc2e:	2b03      	cmp	r3, #3
 800fc30:	d022      	beq.n	800fc78 <uxr_serialize_CREATE_Payload+0x10c>
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d104      	bne.n	800fc40 <uxr_serialize_CREATE_Payload+0xd4>
 800fc36:	68e9      	ldr	r1, [r5, #12]
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f005 fc55 	bl	80154e8 <ucdr_serialize_string>
 800fc3e:	4607      	mov	r7, r0
 800fc40:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800fc44:	4630      	mov	r0, r6
 800fc46:	f7fc f8fb 	bl	800be40 <ucdr_serialize_int16_t>
 800fc4a:	4038      	ands	r0, r7
 800fc4c:	4004      	ands	r4, r0
 800fc4e:	e7af      	b.n	800fbb0 <uxr_serialize_CREATE_Payload+0x44>
 800fc50:	f105 0108 	add.w	r1, r5, #8
 800fc54:	4630      	mov	r0, r6
 800fc56:	f7ff fa81 	bl	800f15c <uxr_serialize_AGENT_Representation>
 800fc5a:	4004      	ands	r4, r0
 800fc5c:	e7a8      	b.n	800fbb0 <uxr_serialize_CREATE_Payload+0x44>
 800fc5e:	f105 0108 	add.w	r1, r5, #8
 800fc62:	4630      	mov	r0, r6
 800fc64:	f7ff f9bc 	bl	800efe0 <uxr_serialize_CLIENT_Representation>
 800fc68:	4004      	ands	r4, r0
 800fc6a:	e7a1      	b.n	800fbb0 <uxr_serialize_CREATE_Payload+0x44>
 800fc6c:	68e9      	ldr	r1, [r5, #12]
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f005 fc3a 	bl	80154e8 <ucdr_serialize_string>
 800fc74:	4607      	mov	r7, r0
 800fc76:	e7c8      	b.n	800fc0a <uxr_serialize_CREATE_Payload+0x9e>
 800fc78:	68ea      	ldr	r2, [r5, #12]
 800fc7a:	f105 0110 	add.w	r1, r5, #16
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f7fc fd1a 	bl	800c6b8 <ucdr_serialize_sequence_uint8_t>
 800fc84:	4607      	mov	r7, r0
 800fc86:	e7db      	b.n	800fc40 <uxr_serialize_CREATE_Payload+0xd4>

0800fc88 <uxr_serialize_GET_INFO_Payload>:
 800fc88:	b570      	push	{r4, r5, r6, lr}
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	4605      	mov	r5, r0
 800fc8e:	460e      	mov	r6, r1
 800fc90:	f005 fab6 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fc94:	2202      	movs	r2, #2
 800fc96:	18b1      	adds	r1, r6, r2
 800fc98:	4604      	mov	r4, r0
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	f005 fab0 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fca0:	6871      	ldr	r1, [r6, #4]
 800fca2:	4004      	ands	r4, r0
 800fca4:	4628      	mov	r0, r5
 800fca6:	f7fb fdbf 	bl	800b828 <ucdr_serialize_uint32_t>
 800fcaa:	b2e4      	uxtb	r4, r4
 800fcac:	4020      	ands	r0, r4
 800fcae:	bd70      	pop	{r4, r5, r6, pc}

0800fcb0 <uxr_deserialize_GET_INFO_Payload>:
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	460e      	mov	r6, r1
 800fcb8:	f005 fb06 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fcbc:	2202      	movs	r2, #2
 800fcbe:	18b1      	adds	r1, r6, r2
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f005 fb00 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fcc8:	1d31      	adds	r1, r6, #4
 800fcca:	4004      	ands	r4, r0
 800fccc:	4628      	mov	r0, r5
 800fcce:	f7fb fed5 	bl	800ba7c <ucdr_deserialize_uint32_t>
 800fcd2:	b2e4      	uxtb	r4, r4
 800fcd4:	4020      	ands	r0, r4
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}

0800fcd8 <uxr_serialize_DELETE_Payload>:
 800fcd8:	b570      	push	{r4, r5, r6, lr}
 800fcda:	2202      	movs	r2, #2
 800fcdc:	4605      	mov	r5, r0
 800fcde:	460e      	mov	r6, r1
 800fce0:	f005 fa8e 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fce4:	2202      	movs	r2, #2
 800fce6:	4604      	mov	r4, r0
 800fce8:	18b1      	adds	r1, r6, r2
 800fcea:	4628      	mov	r0, r5
 800fcec:	f005 fa88 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fcf0:	4020      	ands	r0, r4
 800fcf2:	b2c0      	uxtb	r0, r0
 800fcf4:	bd70      	pop	{r4, r5, r6, pc}
 800fcf6:	bf00      	nop

0800fcf8 <uxr_deserialize_STATUS_AGENT_Payload>:
 800fcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	460e      	mov	r6, r1
 800fd00:	f7fb fb8c 	bl	800b41c <ucdr_deserialize_uint8_t>
 800fd04:	1c71      	adds	r1, r6, #1
 800fd06:	4604      	mov	r4, r0
 800fd08:	4628      	mov	r0, r5
 800fd0a:	f7fb fb87 	bl	800b41c <ucdr_deserialize_uint8_t>
 800fd0e:	2204      	movs	r2, #4
 800fd10:	18b1      	adds	r1, r6, r2
 800fd12:	4681      	mov	r9, r0
 800fd14:	4628      	mov	r0, r5
 800fd16:	f005 fad7 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fd1a:	f106 0108 	add.w	r1, r6, #8
 800fd1e:	4680      	mov	r8, r0
 800fd20:	2202      	movs	r2, #2
 800fd22:	4628      	mov	r0, r5
 800fd24:	f005 fad0 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fd28:	2202      	movs	r2, #2
 800fd2a:	f106 010a 	add.w	r1, r6, #10
 800fd2e:	4607      	mov	r7, r0
 800fd30:	4628      	mov	r0, r5
 800fd32:	f005 fac9 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fd36:	ea04 0409 	and.w	r4, r4, r9
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	f106 010c 	add.w	r1, r6, #12
 800fd40:	4628      	mov	r0, r5
 800fd42:	b2e4      	uxtb	r4, r4
 800fd44:	461d      	mov	r5, r3
 800fd46:	ea04 0408 	and.w	r4, r4, r8
 800fd4a:	f7fb fb39 	bl	800b3c0 <ucdr_deserialize_bool>
 800fd4e:	4027      	ands	r7, r4
 800fd50:	403d      	ands	r5, r7
 800fd52:	4028      	ands	r0, r5
 800fd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fd58 <uxr_deserialize_STATUS_Payload>:
 800fd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5c:	2202      	movs	r2, #2
 800fd5e:	4606      	mov	r6, r0
 800fd60:	460f      	mov	r7, r1
 800fd62:	f005 fab1 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fd66:	2202      	movs	r2, #2
 800fd68:	18b9      	adds	r1, r7, r2
 800fd6a:	4605      	mov	r5, r0
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	f005 faab 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800fd72:	1d39      	adds	r1, r7, #4
 800fd74:	4680      	mov	r8, r0
 800fd76:	4630      	mov	r0, r6
 800fd78:	f7fb fb50 	bl	800b41c <ucdr_deserialize_uint8_t>
 800fd7c:	1d79      	adds	r1, r7, #5
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4630      	mov	r0, r6
 800fd82:	f7fb fb4b 	bl	800b41c <ucdr_deserialize_uint8_t>
 800fd86:	ea05 0508 	and.w	r5, r5, r8
 800fd8a:	402c      	ands	r4, r5
 800fd8c:	4020      	ands	r0, r4
 800fd8e:	b2c0      	uxtb	r0, r0
 800fd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd94 <uxr_serialize_INFO_Payload>:
 800fd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd98:	2202      	movs	r2, #2
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	f005 fa2f 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fda2:	2202      	movs	r2, #2
 800fda4:	18a1      	adds	r1, r4, r2
 800fda6:	4680      	mov	r8, r0
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f005 fa29 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fdae:	7921      	ldrb	r1, [r4, #4]
 800fdb0:	4607      	mov	r7, r0
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	f7fb fb1c 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fdb8:	7961      	ldrb	r1, [r4, #5]
 800fdba:	4606      	mov	r6, r0
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	f7fb fb17 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fdc2:	ea08 0807 	and.w	r8, r8, r7
 800fdc6:	ea06 0608 	and.w	r6, r6, r8
 800fdca:	ea00 0706 	and.w	r7, r0, r6
 800fdce:	7a21      	ldrb	r1, [r4, #8]
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	f7fb fadf 	bl	800b394 <ucdr_serialize_bool>
 800fdd6:	7a23      	ldrb	r3, [r4, #8]
 800fdd8:	b2ff      	uxtb	r7, r7
 800fdda:	4606      	mov	r6, r0
 800fddc:	b96b      	cbnz	r3, 800fdfa <uxr_serialize_INFO_Payload+0x66>
 800fdde:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800fde2:	4628      	mov	r0, r5
 800fde4:	f7fb fad6 	bl	800b394 <ucdr_serialize_bool>
 800fde8:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800fdec:	4030      	ands	r0, r6
 800fdee:	b2c6      	uxtb	r6, r0
 800fdf0:	b983      	cbnz	r3, 800fe14 <uxr_serialize_INFO_Payload+0x80>
 800fdf2:	ea06 0007 	and.w	r0, r6, r7
 800fdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfa:	7b21      	ldrb	r1, [r4, #12]
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	f7fb faf7 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fe02:	b188      	cbz	r0, 800fe28 <uxr_serialize_INFO_Payload+0x94>
 800fe04:	f104 010c 	add.w	r1, r4, #12
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f7ff fa19 	bl	800f240 <uxr_serialize_ObjectVariant.part.0>
 800fe0e:	4030      	ands	r0, r6
 800fe10:	b2c6      	uxtb	r6, r0
 800fe12:	e7e4      	b.n	800fdde <uxr_serialize_INFO_Payload+0x4a>
 800fe14:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f7ff fdb7 	bl	800f98c <uxr_serialize_ActivityInfoVariant>
 800fe1e:	4006      	ands	r6, r0
 800fe20:	ea06 0007 	and.w	r0, r6, r7
 800fe24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe28:	4606      	mov	r6, r0
 800fe2a:	e7d8      	b.n	800fdde <uxr_serialize_INFO_Payload+0x4a>

0800fe2c <uxr_serialize_READ_DATA_Payload>:
 800fe2c:	b570      	push	{r4, r5, r6, lr}
 800fe2e:	2202      	movs	r2, #2
 800fe30:	4605      	mov	r5, r0
 800fe32:	460e      	mov	r6, r1
 800fe34:	f005 f9e4 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fe38:	2202      	movs	r2, #2
 800fe3a:	18b1      	adds	r1, r6, r2
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f005 f9de 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fe44:	1d31      	adds	r1, r6, #4
 800fe46:	4004      	ands	r4, r0
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f7ff fe4b 	bl	800fae4 <uxr_serialize_ReadSpecification>
 800fe4e:	b2e4      	uxtb	r4, r4
 800fe50:	4020      	ands	r0, r4
 800fe52:	bd70      	pop	{r4, r5, r6, pc}

0800fe54 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800fe54:	b570      	push	{r4, r5, r6, lr}
 800fe56:	2202      	movs	r2, #2
 800fe58:	4605      	mov	r5, r0
 800fe5a:	460e      	mov	r6, r1
 800fe5c:	f005 f9d0 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fe60:	2202      	movs	r2, #2
 800fe62:	4604      	mov	r4, r0
 800fe64:	18b1      	adds	r1, r6, r2
 800fe66:	4628      	mov	r0, r5
 800fe68:	f005 f9ca 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fe6c:	4020      	ands	r0, r4
 800fe6e:	b2c0      	uxtb	r0, r0
 800fe70:	bd70      	pop	{r4, r5, r6, pc}
 800fe72:	bf00      	nop

0800fe74 <uxr_serialize_ACKNACK_Payload>:
 800fe74:	b570      	push	{r4, r5, r6, lr}
 800fe76:	460c      	mov	r4, r1
 800fe78:	460e      	mov	r6, r1
 800fe7a:	f834 1b02 	ldrh.w	r1, [r4], #2
 800fe7e:	4605      	mov	r5, r0
 800fe80:	f7fb fae2 	bl	800b448 <ucdr_serialize_uint16_t>
 800fe84:	2202      	movs	r2, #2
 800fe86:	4621      	mov	r1, r4
 800fe88:	4604      	mov	r4, r0
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	f005 f9b8 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800fe90:	7931      	ldrb	r1, [r6, #4]
 800fe92:	4004      	ands	r4, r0
 800fe94:	4628      	mov	r0, r5
 800fe96:	f7fb faab 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fe9a:	b2e4      	uxtb	r4, r4
 800fe9c:	4020      	ands	r0, r4
 800fe9e:	bd70      	pop	{r4, r5, r6, pc}

0800fea0 <uxr_deserialize_ACKNACK_Payload>:
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	4605      	mov	r5, r0
 800fea4:	460e      	mov	r6, r1
 800fea6:	f7fb fbd3 	bl	800b650 <ucdr_deserialize_uint16_t>
 800feaa:	2202      	movs	r2, #2
 800feac:	18b1      	adds	r1, r6, r2
 800feae:	4604      	mov	r4, r0
 800feb0:	4628      	mov	r0, r5
 800feb2:	f005 fa09 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800feb6:	1d31      	adds	r1, r6, #4
 800feb8:	4004      	ands	r4, r0
 800feba:	4628      	mov	r0, r5
 800febc:	f7fb faae 	bl	800b41c <ucdr_deserialize_uint8_t>
 800fec0:	b2e4      	uxtb	r4, r4
 800fec2:	4020      	ands	r0, r4
 800fec4:	bd70      	pop	{r4, r5, r6, pc}
 800fec6:	bf00      	nop

0800fec8 <uxr_serialize_HEARTBEAT_Payload>:
 800fec8:	b570      	push	{r4, r5, r6, lr}
 800feca:	460d      	mov	r5, r1
 800fecc:	8809      	ldrh	r1, [r1, #0]
 800fece:	4606      	mov	r6, r0
 800fed0:	f7fb faba 	bl	800b448 <ucdr_serialize_uint16_t>
 800fed4:	8869      	ldrh	r1, [r5, #2]
 800fed6:	4604      	mov	r4, r0
 800fed8:	4630      	mov	r0, r6
 800feda:	f7fb fab5 	bl	800b448 <ucdr_serialize_uint16_t>
 800fede:	7929      	ldrb	r1, [r5, #4]
 800fee0:	4004      	ands	r4, r0
 800fee2:	4630      	mov	r0, r6
 800fee4:	f7fb fa84 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800fee8:	b2e4      	uxtb	r4, r4
 800feea:	4020      	ands	r0, r4
 800feec:	bd70      	pop	{r4, r5, r6, pc}
 800feee:	bf00      	nop

0800fef0 <uxr_deserialize_HEARTBEAT_Payload>:
 800fef0:	b570      	push	{r4, r5, r6, lr}
 800fef2:	4605      	mov	r5, r0
 800fef4:	460e      	mov	r6, r1
 800fef6:	f7fb fbab 	bl	800b650 <ucdr_deserialize_uint16_t>
 800fefa:	1cb1      	adds	r1, r6, #2
 800fefc:	4604      	mov	r4, r0
 800fefe:	4628      	mov	r0, r5
 800ff00:	f7fb fba6 	bl	800b650 <ucdr_deserialize_uint16_t>
 800ff04:	1d31      	adds	r1, r6, #4
 800ff06:	4004      	ands	r4, r0
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f7fb fa87 	bl	800b41c <ucdr_deserialize_uint8_t>
 800ff0e:	b2e4      	uxtb	r4, r4
 800ff10:	4020      	ands	r0, r4
 800ff12:	bd70      	pop	{r4, r5, r6, pc}

0800ff14 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800ff14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff18:	4605      	mov	r5, r0
 800ff1a:	460e      	mov	r6, r1
 800ff1c:	f7fc f9c0 	bl	800c2a0 <ucdr_deserialize_int32_t>
 800ff20:	1d31      	adds	r1, r6, #4
 800ff22:	4607      	mov	r7, r0
 800ff24:	4628      	mov	r0, r5
 800ff26:	f7fb fda9 	bl	800ba7c <ucdr_deserialize_uint32_t>
 800ff2a:	f106 0108 	add.w	r1, r6, #8
 800ff2e:	4680      	mov	r8, r0
 800ff30:	4628      	mov	r0, r5
 800ff32:	f7fc f9b5 	bl	800c2a0 <ucdr_deserialize_int32_t>
 800ff36:	f106 010c 	add.w	r1, r6, #12
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f7fb fd9d 	bl	800ba7c <ucdr_deserialize_uint32_t>
 800ff42:	ea07 0708 	and.w	r7, r7, r8
 800ff46:	403c      	ands	r4, r7
 800ff48:	f106 0110 	add.w	r1, r6, #16
 800ff4c:	4004      	ands	r4, r0
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f7fc f9a6 	bl	800c2a0 <ucdr_deserialize_int32_t>
 800ff54:	f106 0114 	add.w	r1, r6, #20
 800ff58:	4607      	mov	r7, r0
 800ff5a:	4628      	mov	r0, r5
 800ff5c:	f7fb fd8e 	bl	800ba7c <ucdr_deserialize_uint32_t>
 800ff60:	b2e4      	uxtb	r4, r4
 800ff62:	403c      	ands	r4, r7
 800ff64:	4020      	ands	r0, r4
 800ff66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6a:	bf00      	nop

0800ff6c <uxr_serialize_SampleIdentity>:
 800ff6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff70:	220c      	movs	r2, #12
 800ff72:	4604      	mov	r4, r0
 800ff74:	460d      	mov	r5, r1
 800ff76:	f005 f943 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800ff7a:	2203      	movs	r2, #3
 800ff7c:	f105 010c 	add.w	r1, r5, #12
 800ff80:	4680      	mov	r8, r0
 800ff82:	4620      	mov	r0, r4
 800ff84:	f005 f93c 	bl	8015200 <ucdr_serialize_array_uint8_t>
 800ff88:	7be9      	ldrb	r1, [r5, #15]
 800ff8a:	4681      	mov	r9, r0
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f7fb fa2f 	bl	800b3f0 <ucdr_serialize_uint8_t>
 800ff92:	6929      	ldr	r1, [r5, #16]
 800ff94:	4607      	mov	r7, r0
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7fc f858 	bl	800c04c <ucdr_serialize_int32_t>
 800ff9c:	6969      	ldr	r1, [r5, #20]
 800ff9e:	4606      	mov	r6, r0
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f7fb fc41 	bl	800b828 <ucdr_serialize_uint32_t>
 800ffa6:	ea08 0809 	and.w	r8, r8, r9
 800ffaa:	ea07 0708 	and.w	r7, r7, r8
 800ffae:	403e      	ands	r6, r7
 800ffb0:	4030      	ands	r0, r6
 800ffb2:	b2c0      	uxtb	r0, r0
 800ffb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ffb8 <uxr_deserialize_SampleIdentity>:
 800ffb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffbc:	220c      	movs	r2, #12
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	460d      	mov	r5, r1
 800ffc2:	f005 f981 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800ffc6:	2203      	movs	r2, #3
 800ffc8:	f105 010c 	add.w	r1, r5, #12
 800ffcc:	4680      	mov	r8, r0
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f005 f97a 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 800ffd4:	f105 010f 	add.w	r1, r5, #15
 800ffd8:	4681      	mov	r9, r0
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f7fb fa1e 	bl	800b41c <ucdr_deserialize_uint8_t>
 800ffe0:	f105 0110 	add.w	r1, r5, #16
 800ffe4:	4607      	mov	r7, r0
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7fc f95a 	bl	800c2a0 <ucdr_deserialize_int32_t>
 800ffec:	f105 0114 	add.w	r1, r5, #20
 800fff0:	4606      	mov	r6, r0
 800fff2:	4620      	mov	r0, r4
 800fff4:	f7fb fd42 	bl	800ba7c <ucdr_deserialize_uint32_t>
 800fff8:	ea08 0809 	and.w	r8, r8, r9
 800fffc:	ea07 0708 	and.w	r7, r7, r8
 8010000:	403e      	ands	r6, r7
 8010002:	4030      	ands	r0, r6
 8010004:	b2c0      	uxtb	r0, r0
 8010006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801000a:	bf00      	nop

0801000c <rcl_client_get_rmw_handle>:
 801000c:	b118      	cbz	r0, 8010016 <rcl_client_get_rmw_handle+0xa>
 801000e:	6800      	ldr	r0, [r0, #0]
 8010010:	b108      	cbz	r0, 8010016 <rcl_client_get_rmw_handle+0xa>
 8010012:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010016:	4770      	bx	lr

08010018 <rcl_send_request>:
 8010018:	2800      	cmp	r0, #0
 801001a:	d048      	beq.n	80100ae <rcl_send_request+0x96>
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	4604      	mov	r4, r0
 8010020:	6800      	ldr	r0, [r0, #0]
 8010022:	b08a      	sub	sp, #40	@ 0x28
 8010024:	b1c0      	cbz	r0, 8010058 <rcl_send_request+0x40>
 8010026:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801002a:	b1ab      	cbz	r3, 8010058 <rcl_send_request+0x40>
 801002c:	460e      	mov	r6, r1
 801002e:	b1b9      	cbz	r1, 8010060 <rcl_send_request+0x48>
 8010030:	4615      	mov	r5, r2
 8010032:	b1aa      	cbz	r2, 8010060 <rcl_send_request+0x48>
 8010034:	2105      	movs	r1, #5
 8010036:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801003a:	f002 ff89 	bl	8012f50 <__atomic_load_8>
 801003e:	6823      	ldr	r3, [r4, #0]
 8010040:	e9c5 0100 	strd	r0, r1, [r5]
 8010044:	462a      	mov	r2, r5
 8010046:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801004a:	4631      	mov	r1, r6
 801004c:	f004 f942 	bl	80142d4 <rmw_send_request>
 8010050:	b148      	cbz	r0, 8010066 <rcl_send_request+0x4e>
 8010052:	2001      	movs	r0, #1
 8010054:	b00a      	add	sp, #40	@ 0x28
 8010056:	bd70      	pop	{r4, r5, r6, pc}
 8010058:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801005c:	b00a      	add	sp, #40	@ 0x28
 801005e:	bd70      	pop	{r4, r5, r6, pc}
 8010060:	200b      	movs	r0, #11
 8010062:	b00a      	add	sp, #40	@ 0x28
 8010064:	bd70      	pop	{r4, r5, r6, pc}
 8010066:	6820      	ldr	r0, [r4, #0]
 8010068:	2305      	movs	r3, #5
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010070:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010074:	f002 ffd8 	bl	8013028 <__atomic_exchange_8>
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801007e:	b1a2      	cbz	r2, 80100aa <rcl_send_request+0x92>
 8010080:	a905      	add	r1, sp, #20
 8010082:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010086:	f003 fd21 	bl	8013acc <rmw_get_gid_for_client>
 801008a:	4601      	mov	r1, r0
 801008c:	b990      	cbnz	r0, 80100b4 <rcl_send_request+0x9c>
 801008e:	6822      	ldr	r2, [r4, #0]
 8010090:	ab06      	add	r3, sp, #24
 8010092:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8010096:	9302      	str	r3, [sp, #8]
 8010098:	e9d5 4500 	ldrd	r4, r5, [r5]
 801009c:	4632      	mov	r2, r6
 801009e:	e9cd 4500 	strd	r4, r5, [sp]
 80100a2:	f000 fe15 	bl	8010cd0 <rcl_send_service_event_message>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d1d4      	bne.n	8010054 <rcl_send_request+0x3c>
 80100aa:	2000      	movs	r0, #0
 80100ac:	e7d2      	b.n	8010054 <rcl_send_request+0x3c>
 80100ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80100b2:	4770      	bx	lr
 80100b4:	f000 f87a 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 80100b8:	e7cc      	b.n	8010054 <rcl_send_request+0x3c>
 80100ba:	bf00      	nop
 80100bc:	0000      	movs	r0, r0
	...

080100c0 <rcl_take_response>:
 80100c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100c2:	468e      	mov	lr, r1
 80100c4:	460c      	mov	r4, r1
 80100c6:	4617      	mov	r7, r2
 80100c8:	4605      	mov	r5, r0
 80100ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100ce:	b095      	sub	sp, #84	@ 0x54
 80100d0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80100d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80100dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80100e0:	2d00      	cmp	r5, #0
 80100e2:	d044      	beq.n	801016e <rcl_take_response+0xae>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d041      	beq.n	801016e <rcl_take_response+0xae>
 80100ea:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d03d      	beq.n	801016e <rcl_take_response+0xae>
 80100f2:	2f00      	cmp	r7, #0
 80100f4:	d03e      	beq.n	8010174 <rcl_take_response+0xb4>
 80100f6:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8010190 <rcl_take_response+0xd0>
 80100fa:	2300      	movs	r3, #0
 80100fc:	f88d 3013 	strb.w	r3, [sp, #19]
 8010100:	463a      	mov	r2, r7
 8010102:	f10d 0313 	add.w	r3, sp, #19
 8010106:	a90a      	add	r1, sp, #40	@ 0x28
 8010108:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801010c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010110:	f004 f9e0 	bl	80144d4 <rmw_take_response>
 8010114:	4606      	mov	r6, r0
 8010116:	bb78      	cbnz	r0, 8010178 <rcl_take_response+0xb8>
 8010118:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801011c:	b373      	cbz	r3, 801017c <rcl_take_response+0xbc>
 801011e:	682b      	ldr	r3, [r5, #0]
 8010120:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010124:	b1aa      	cbz	r2, 8010152 <rcl_take_response+0x92>
 8010126:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801012a:	a905      	add	r1, sp, #20
 801012c:	f003 fcce 	bl	8013acc <rmw_get_gid_for_client>
 8010130:	bb38      	cbnz	r0, 8010182 <rcl_take_response+0xc2>
 8010132:	682b      	ldr	r3, [r5, #0]
 8010134:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8010138:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 801013c:	ab06      	add	r3, sp, #24
 801013e:	ed8d 7b00 	vstr	d7, [sp]
 8010142:	463a      	mov	r2, r7
 8010144:	9302      	str	r3, [sp, #8]
 8010146:	2103      	movs	r1, #3
 8010148:	f000 fdc2 	bl	8010cd0 <rcl_send_service_event_message>
 801014c:	2800      	cmp	r0, #0
 801014e:	bf18      	it	ne
 8010150:	4606      	movne	r6, r0
 8010152:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8010156:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801015a:	46a4      	mov	ip, r4
 801015c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010160:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010164:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010168:	4630      	mov	r0, r6
 801016a:	b015      	add	sp, #84	@ 0x54
 801016c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801016e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010172:	e7ee      	b.n	8010152 <rcl_take_response+0x92>
 8010174:	260b      	movs	r6, #11
 8010176:	e7ec      	b.n	8010152 <rcl_take_response+0x92>
 8010178:	2601      	movs	r6, #1
 801017a:	e7ea      	b.n	8010152 <rcl_take_response+0x92>
 801017c:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8010180:	e7e7      	b.n	8010152 <rcl_take_response+0x92>
 8010182:	f000 f813 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 8010186:	4606      	mov	r6, r0
 8010188:	e7e3      	b.n	8010152 <rcl_take_response+0x92>
 801018a:	bf00      	nop
 801018c:	f3af 8000 	nop.w
	...

08010198 <rcl_client_is_valid>:
 8010198:	b130      	cbz	r0, 80101a8 <rcl_client_is_valid+0x10>
 801019a:	6800      	ldr	r0, [r0, #0]
 801019c:	b120      	cbz	r0, 80101a8 <rcl_client_is_valid+0x10>
 801019e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80101a2:	3800      	subs	r0, #0
 80101a4:	bf18      	it	ne
 80101a6:	2001      	movne	r0, #1
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop

080101ac <rcl_convert_rmw_ret_to_rcl_ret>:
 80101ac:	280b      	cmp	r0, #11
 80101ae:	dc0d      	bgt.n	80101cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80101b0:	2800      	cmp	r0, #0
 80101b2:	db09      	blt.n	80101c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80101b4:	280b      	cmp	r0, #11
 80101b6:	d807      	bhi.n	80101c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80101b8:	e8df f000 	tbb	[pc, r0]
 80101bc:	07060607 	.word	0x07060607
 80101c0:	06060606 	.word	0x06060606
 80101c4:	07070606 	.word	0x07070606
 80101c8:	2001      	movs	r0, #1
 80101ca:	4770      	bx	lr
 80101cc:	28cb      	cmp	r0, #203	@ 0xcb
 80101ce:	bf14      	ite	ne
 80101d0:	2001      	movne	r0, #1
 80101d2:	20cb      	moveq	r0, #203	@ 0xcb
 80101d4:	4770      	bx	lr
 80101d6:	bf00      	nop

080101d8 <rcl_get_zero_initialized_context>:
 80101d8:	2200      	movs	r2, #0
 80101da:	e9c0 2200 	strd	r2, r2, [r0]
 80101de:	4770      	bx	lr

080101e0 <rcl_context_is_valid>:
 80101e0:	b118      	cbz	r0, 80101ea <rcl_context_is_valid+0xa>
 80101e2:	6840      	ldr	r0, [r0, #4]
 80101e4:	3800      	subs	r0, #0
 80101e6:	bf18      	it	ne
 80101e8:	2001      	movne	r0, #1
 80101ea:	4770      	bx	lr

080101ec <__cleanup_context>:
 80101ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101f0:	4606      	mov	r6, r0
 80101f2:	6800      	ldr	r0, [r0, #0]
 80101f4:	2300      	movs	r3, #0
 80101f6:	6073      	str	r3, [r6, #4]
 80101f8:	2800      	cmp	r0, #0
 80101fa:	d042      	beq.n	8010282 <__cleanup_context+0x96>
 80101fc:	6943      	ldr	r3, [r0, #20]
 80101fe:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010202:	6907      	ldr	r7, [r0, #16]
 8010204:	b39b      	cbz	r3, 801026e <__cleanup_context+0x82>
 8010206:	3014      	adds	r0, #20
 8010208:	f000 f9b2 	bl	8010570 <rcl_init_options_fini>
 801020c:	4680      	mov	r8, r0
 801020e:	2800      	cmp	r0, #0
 8010210:	d144      	bne.n	801029c <__cleanup_context+0xb0>
 8010212:	6830      	ldr	r0, [r6, #0]
 8010214:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010216:	b123      	cbz	r3, 8010222 <__cleanup_context+0x36>
 8010218:	3028      	adds	r0, #40	@ 0x28
 801021a:	f003 fe9f 	bl	8013f5c <rmw_context_fini>
 801021e:	bbb8      	cbnz	r0, 8010290 <__cleanup_context+0xa4>
 8010220:	6830      	ldr	r0, [r6, #0]
 8010222:	6a03      	ldr	r3, [r0, #32]
 8010224:	b1db      	cbz	r3, 801025e <__cleanup_context+0x72>
 8010226:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801022a:	2a01      	cmp	r2, #1
 801022c:	f17c 0100 	sbcs.w	r1, ip, #0
 8010230:	db11      	blt.n	8010256 <__cleanup_context+0x6a>
 8010232:	2400      	movs	r4, #0
 8010234:	4625      	mov	r5, r4
 8010236:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801023a:	4639      	mov	r1, r7
 801023c:	b1c8      	cbz	r0, 8010272 <__cleanup_context+0x86>
 801023e:	47c8      	blx	r9
 8010240:	6833      	ldr	r3, [r6, #0]
 8010242:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010246:	3401      	adds	r4, #1
 8010248:	f145 0500 	adc.w	r5, r5, #0
 801024c:	4294      	cmp	r4, r2
 801024e:	eb75 010c 	sbcs.w	r1, r5, ip
 8010252:	6a1b      	ldr	r3, [r3, #32]
 8010254:	dbef      	blt.n	8010236 <__cleanup_context+0x4a>
 8010256:	4618      	mov	r0, r3
 8010258:	4639      	mov	r1, r7
 801025a:	47c8      	blx	r9
 801025c:	6830      	ldr	r0, [r6, #0]
 801025e:	4639      	mov	r1, r7
 8010260:	47c8      	blx	r9
 8010262:	2300      	movs	r3, #0
 8010264:	e9c6 3300 	strd	r3, r3, [r6]
 8010268:	4640      	mov	r0, r8
 801026a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801026e:	4698      	mov	r8, r3
 8010270:	e7d0      	b.n	8010214 <__cleanup_context+0x28>
 8010272:	3401      	adds	r4, #1
 8010274:	f145 0500 	adc.w	r5, r5, #0
 8010278:	4294      	cmp	r4, r2
 801027a:	eb75 010c 	sbcs.w	r1, r5, ip
 801027e:	dbda      	blt.n	8010236 <__cleanup_context+0x4a>
 8010280:	e7e9      	b.n	8010256 <__cleanup_context+0x6a>
 8010282:	4680      	mov	r8, r0
 8010284:	2300      	movs	r3, #0
 8010286:	e9c6 3300 	strd	r3, r3, [r6]
 801028a:	4640      	mov	r0, r8
 801028c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010290:	f1b8 0f00 	cmp.w	r8, #0
 8010294:	d005      	beq.n	80102a2 <__cleanup_context+0xb6>
 8010296:	f7fa f853 	bl	800a340 <rcutils_reset_error>
 801029a:	e7c1      	b.n	8010220 <__cleanup_context+0x34>
 801029c:	f7fa f850 	bl	800a340 <rcutils_reset_error>
 80102a0:	e7b7      	b.n	8010212 <__cleanup_context+0x26>
 80102a2:	f7ff ff83 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 80102a6:	4680      	mov	r8, r0
 80102a8:	e7f5      	b.n	8010296 <__cleanup_context+0xaa>
 80102aa:	bf00      	nop

080102ac <rcl_init>:
 80102ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b0:	1e04      	subs	r4, r0, #0
 80102b2:	b0a5      	sub	sp, #148	@ 0x94
 80102b4:	460d      	mov	r5, r1
 80102b6:	4617      	mov	r7, r2
 80102b8:	461e      	mov	r6, r3
 80102ba:	dd13      	ble.n	80102e4 <rcl_init+0x38>
 80102bc:	b161      	cbz	r1, 80102d8 <rcl_init+0x2c>
 80102be:	f1a1 0e04 	sub.w	lr, r1, #4
 80102c2:	f04f 0c00 	mov.w	ip, #0
 80102c6:	e001      	b.n	80102cc <rcl_init+0x20>
 80102c8:	4564      	cmp	r4, ip
 80102ca:	d00d      	beq.n	80102e8 <rcl_init+0x3c>
 80102cc:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 80102d0:	f10c 0c01 	add.w	ip, ip, #1
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d1f7      	bne.n	80102c8 <rcl_init+0x1c>
 80102d8:	f04f 080b 	mov.w	r8, #11
 80102dc:	4640      	mov	r0, r8
 80102de:	b025      	add	sp, #148	@ 0x94
 80102e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e4:	2900      	cmp	r1, #0
 80102e6:	d1f7      	bne.n	80102d8 <rcl_init+0x2c>
 80102e8:	2f00      	cmp	r7, #0
 80102ea:	d0f5      	beq.n	80102d8 <rcl_init+0x2c>
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d0f2      	beq.n	80102d8 <rcl_init+0x2c>
 80102f2:	469c      	mov	ip, r3
 80102f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102f8:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80102fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010300:	f8dc 3000 	ldr.w	r3, [ip]
 8010304:	f8ce 3000 	str.w	r3, [lr]
 8010308:	a81f      	add	r0, sp, #124	@ 0x7c
 801030a:	f7f9 ffed 	bl	800a2e8 <rcutils_allocator_is_valid>
 801030e:	2800      	cmp	r0, #0
 8010310:	d0e2      	beq.n	80102d8 <rcl_init+0x2c>
 8010312:	2e00      	cmp	r6, #0
 8010314:	d0e0      	beq.n	80102d8 <rcl_init+0x2c>
 8010316:	6833      	ldr	r3, [r6, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d173      	bne.n	8010404 <rcl_init+0x158>
 801031c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8010320:	2198      	movs	r1, #152	@ 0x98
 8010322:	2001      	movs	r0, #1
 8010324:	4798      	blx	r3
 8010326:	4680      	mov	r8, r0
 8010328:	6030      	str	r0, [r6, #0]
 801032a:	2800      	cmp	r0, #0
 801032c:	f000 80ac 	beq.w	8010488 <rcl_init+0x1dc>
 8010330:	a802      	add	r0, sp, #8
 8010332:	f003 f965 	bl	8013600 <rmw_get_zero_initialized_context>
 8010336:	a902      	add	r1, sp, #8
 8010338:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801033c:	2270      	movs	r2, #112	@ 0x70
 801033e:	f007 fc48 	bl	8017bd2 <memcpy>
 8010342:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8010346:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801034a:	f8d6 8000 	ldr.w	r8, [r6]
 801034e:	46c4      	mov	ip, r8
 8010350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010354:	f8de 3000 	ldr.w	r3, [lr]
 8010358:	f8cc 3000 	str.w	r3, [ip]
 801035c:	f108 0114 	add.w	r1, r8, #20
 8010360:	4638      	mov	r0, r7
 8010362:	f000 f92f 	bl	80105c4 <rcl_init_options_copy>
 8010366:	4680      	mov	r8, r0
 8010368:	2800      	cmp	r0, #0
 801036a:	d147      	bne.n	80103fc <rcl_init+0x150>
 801036c:	f8d6 9000 	ldr.w	r9, [r6]
 8010370:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8010374:	f8c9 0020 	str.w	r0, [r9, #32]
 8010378:	f8c9 4018 	str.w	r4, [r9, #24]
 801037c:	f8c9 a01c 	str.w	sl, [r9, #28]
 8010380:	2c00      	cmp	r4, #0
 8010382:	d047      	beq.n	8010414 <rcl_init+0x168>
 8010384:	2d00      	cmp	r5, #0
 8010386:	d045      	beq.n	8010414 <rcl_init+0x168>
 8010388:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 801038c:	2104      	movs	r1, #4
 801038e:	4620      	mov	r0, r4
 8010390:	4798      	blx	r3
 8010392:	f8c9 0020 	str.w	r0, [r9, #32]
 8010396:	f8d6 9000 	ldr.w	r9, [r6]
 801039a:	f8d9 b020 	ldr.w	fp, [r9, #32]
 801039e:	f1bb 0f00 	cmp.w	fp, #0
 80103a2:	d029      	beq.n	80103f8 <rcl_init+0x14c>
 80103a4:	2c01      	cmp	r4, #1
 80103a6:	f17a 0300 	sbcs.w	r3, sl, #0
 80103aa:	db33      	blt.n	8010414 <rcl_init+0x168>
 80103ac:	f04f 0800 	mov.w	r8, #0
 80103b0:	3d04      	subs	r5, #4
 80103b2:	46c1      	mov	r9, r8
 80103b4:	e00d      	b.n	80103d2 <rcl_init+0x126>
 80103b6:	6829      	ldr	r1, [r5, #0]
 80103b8:	f007 fc0b 	bl	8017bd2 <memcpy>
 80103bc:	f118 0801 	adds.w	r8, r8, #1
 80103c0:	f149 0900 	adc.w	r9, r9, #0
 80103c4:	45ca      	cmp	sl, r9
 80103c6:	bf08      	it	eq
 80103c8:	4544      	cmpeq	r4, r8
 80103ca:	d021      	beq.n	8010410 <rcl_init+0x164>
 80103cc:	6833      	ldr	r3, [r6, #0]
 80103ce:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80103d2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80103d6:	f7ef ff7b 	bl	80002d0 <strlen>
 80103da:	1c42      	adds	r2, r0, #1
 80103dc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80103de:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80103e0:	9201      	str	r2, [sp, #4]
 80103e2:	4610      	mov	r0, r2
 80103e4:	4798      	blx	r3
 80103e6:	6833      	ldr	r3, [r6, #0]
 80103e8:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 80103ec:	6a1b      	ldr	r3, [r3, #32]
 80103ee:	9a01      	ldr	r2, [sp, #4]
 80103f0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80103f4:	2800      	cmp	r0, #0
 80103f6:	d1de      	bne.n	80103b6 <rcl_init+0x10a>
 80103f8:	f04f 080a 	mov.w	r8, #10
 80103fc:	4630      	mov	r0, r6
 80103fe:	f7ff fef5 	bl	80101ec <__cleanup_context>
 8010402:	e76b      	b.n	80102dc <rcl_init+0x30>
 8010404:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8010408:	4640      	mov	r0, r8
 801040a:	b025      	add	sp, #148	@ 0x94
 801040c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010410:	f8d6 9000 	ldr.w	r9, [r6]
 8010414:	4a26      	ldr	r2, [pc, #152]	@ (80104b0 <rcl_init+0x204>)
 8010416:	6813      	ldr	r3, [r2, #0]
 8010418:	3301      	adds	r3, #1
 801041a:	d030      	beq.n	801047e <rcl_init+0x1d2>
 801041c:	461d      	mov	r5, r3
 801041e:	2000      	movs	r0, #0
 8010420:	4619      	mov	r1, r3
 8010422:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8010426:	6073      	str	r3, [r6, #4]
 8010428:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801042a:	6011      	str	r1, [r2, #0]
 801042c:	3301      	adds	r3, #1
 801042e:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8010432:	d033      	beq.n	801049c <rcl_init+0x1f0>
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801043a:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 801043e:	b333      	cbz	r3, 801048e <rcl_init+0x1e2>
 8010440:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010442:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8010446:	b953      	cbnz	r3, 801045e <rcl_init+0x1b2>
 8010448:	2801      	cmp	r0, #1
 801044a:	d008      	beq.n	801045e <rcl_init+0x1b2>
 801044c:	a91f      	add	r1, sp, #124	@ 0x7c
 801044e:	4628      	mov	r0, r5
 8010450:	f005 ff2e 	bl	80162b0 <rcl_get_discovery_static_peers>
 8010454:	4680      	mov	r8, r0
 8010456:	2800      	cmp	r0, #0
 8010458:	d1d0      	bne.n	80103fc <rcl_init+0x150>
 801045a:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 801045e:	f005 ff1d 	bl	801629c <rcl_automatic_discovery_range_to_string>
 8010462:	6831      	ldr	r1, [r6, #0]
 8010464:	6948      	ldr	r0, [r1, #20]
 8010466:	3128      	adds	r1, #40	@ 0x28
 8010468:	3018      	adds	r0, #24
 801046a:	f003 fc43 	bl	8013cf4 <rmw_init>
 801046e:	4680      	mov	r8, r0
 8010470:	2800      	cmp	r0, #0
 8010472:	f43f af33 	beq.w	80102dc <rcl_init+0x30>
 8010476:	f7ff fe99 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 801047a:	4680      	mov	r8, r0
 801047c:	e7be      	b.n	80103fc <rcl_init+0x150>
 801047e:	2101      	movs	r1, #1
 8010480:	4618      	mov	r0, r3
 8010482:	460d      	mov	r5, r1
 8010484:	460b      	mov	r3, r1
 8010486:	e7cc      	b.n	8010422 <rcl_init+0x176>
 8010488:	f04f 080a 	mov.w	r8, #10
 801048c:	e726      	b.n	80102dc <rcl_init+0x30>
 801048e:	4628      	mov	r0, r5
 8010490:	f005 fec2 	bl	8016218 <rcl_get_automatic_discovery_range>
 8010494:	4680      	mov	r8, r0
 8010496:	2800      	cmp	r0, #0
 8010498:	d0d2      	beq.n	8010440 <rcl_init+0x194>
 801049a:	e7af      	b.n	80103fc <rcl_init+0x150>
 801049c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80104a0:	f005 ff70 	bl	8016384 <rcl_get_default_domain_id>
 80104a4:	4680      	mov	r8, r0
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d1a8      	bne.n	80103fc <rcl_init+0x150>
 80104aa:	6833      	ldr	r3, [r6, #0]
 80104ac:	695c      	ldr	r4, [r3, #20]
 80104ae:	e7c1      	b.n	8010434 <rcl_init+0x188>
 80104b0:	2000ea1c 	.word	0x2000ea1c

080104b4 <rcl_get_zero_initialized_init_options>:
 80104b4:	2000      	movs	r0, #0
 80104b6:	4770      	bx	lr

080104b8 <rcl_init_options_init>:
 80104b8:	b084      	sub	sp, #16
 80104ba:	b570      	push	{r4, r5, r6, lr}
 80104bc:	b09e      	sub	sp, #120	@ 0x78
 80104be:	ad23      	add	r5, sp, #140	@ 0x8c
 80104c0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d046      	beq.n	8010556 <rcl_init_options_init+0x9e>
 80104c8:	6803      	ldr	r3, [r0, #0]
 80104ca:	4604      	mov	r4, r0
 80104cc:	b133      	cbz	r3, 80104dc <rcl_init_options_init+0x24>
 80104ce:	2564      	movs	r5, #100	@ 0x64
 80104d0:	4628      	mov	r0, r5
 80104d2:	b01e      	add	sp, #120	@ 0x78
 80104d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104d8:	b004      	add	sp, #16
 80104da:	4770      	bx	lr
 80104dc:	4628      	mov	r0, r5
 80104de:	f7f9 ff03 	bl	800a2e8 <rcutils_allocator_is_valid>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d037      	beq.n	8010556 <rcl_init_options_init+0x9e>
 80104e6:	46ae      	mov	lr, r5
 80104e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104ec:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80104f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104f4:	f8de 3000 	ldr.w	r3, [lr]
 80104f8:	f8cc 3000 	str.w	r3, [ip]
 80104fc:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80104fe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010500:	2070      	movs	r0, #112	@ 0x70
 8010502:	4798      	blx	r3
 8010504:	4606      	mov	r6, r0
 8010506:	6020      	str	r0, [r4, #0]
 8010508:	b338      	cbz	r0, 801055a <rcl_init_options_init+0xa2>
 801050a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801050e:	4686      	mov	lr, r0
 8010510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010514:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010518:	f8dc 3000 	ldr.w	r3, [ip]
 801051c:	f8ce 3000 	str.w	r3, [lr]
 8010520:	a802      	add	r0, sp, #8
 8010522:	f003 f877 	bl	8013614 <rmw_get_zero_initialized_init_options>
 8010526:	2258      	movs	r2, #88	@ 0x58
 8010528:	a902      	add	r1, sp, #8
 801052a:	f106 0018 	add.w	r0, r6, #24
 801052e:	f007 fb50 	bl	8017bd2 <memcpy>
 8010532:	ab26      	add	r3, sp, #152	@ 0x98
 8010534:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010538:	6826      	ldr	r6, [r4, #0]
 801053a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801053e:	f106 0018 	add.w	r0, r6, #24
 8010542:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010546:	f003 fae5 	bl	8013b14 <rmw_init_options_init>
 801054a:	4605      	mov	r5, r0
 801054c:	b938      	cbnz	r0, 801055e <rcl_init_options_init+0xa6>
 801054e:	6823      	ldr	r3, [r4, #0]
 8010550:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 8010554:	e7bc      	b.n	80104d0 <rcl_init_options_init+0x18>
 8010556:	250b      	movs	r5, #11
 8010558:	e7ba      	b.n	80104d0 <rcl_init_options_init+0x18>
 801055a:	250a      	movs	r5, #10
 801055c:	e7b8      	b.n	80104d0 <rcl_init_options_init+0x18>
 801055e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010560:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8010562:	6820      	ldr	r0, [r4, #0]
 8010564:	4798      	blx	r3
 8010566:	4628      	mov	r0, r5
 8010568:	f7ff fe20 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 801056c:	4605      	mov	r5, r0
 801056e:	e7af      	b.n	80104d0 <rcl_init_options_init+0x18>

08010570 <rcl_init_options_fini>:
 8010570:	b530      	push	{r4, r5, lr}
 8010572:	b087      	sub	sp, #28
 8010574:	b1f0      	cbz	r0, 80105b4 <rcl_init_options_fini+0x44>
 8010576:	6803      	ldr	r3, [r0, #0]
 8010578:	4604      	mov	r4, r0
 801057a:	b1db      	cbz	r3, 80105b4 <rcl_init_options_fini+0x44>
 801057c:	469c      	mov	ip, r3
 801057e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010582:	f10d 0e04 	add.w	lr, sp, #4
 8010586:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801058a:	f8dc 3000 	ldr.w	r3, [ip]
 801058e:	f8ce 3000 	str.w	r3, [lr]
 8010592:	a801      	add	r0, sp, #4
 8010594:	f7f9 fea8 	bl	800a2e8 <rcutils_allocator_is_valid>
 8010598:	b160      	cbz	r0, 80105b4 <rcl_init_options_fini+0x44>
 801059a:	6820      	ldr	r0, [r4, #0]
 801059c:	3018      	adds	r0, #24
 801059e:	f003 fb6b 	bl	8013c78 <rmw_init_options_fini>
 80105a2:	4605      	mov	r5, r0
 80105a4:	b950      	cbnz	r0, 80105bc <rcl_init_options_fini+0x4c>
 80105a6:	6820      	ldr	r0, [r4, #0]
 80105a8:	9b02      	ldr	r3, [sp, #8]
 80105aa:	9905      	ldr	r1, [sp, #20]
 80105ac:	4798      	blx	r3
 80105ae:	4628      	mov	r0, r5
 80105b0:	b007      	add	sp, #28
 80105b2:	bd30      	pop	{r4, r5, pc}
 80105b4:	250b      	movs	r5, #11
 80105b6:	4628      	mov	r0, r5
 80105b8:	b007      	add	sp, #28
 80105ba:	bd30      	pop	{r4, r5, pc}
 80105bc:	f7ff fdf6 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 80105c0:	4605      	mov	r5, r0
 80105c2:	e7f8      	b.n	80105b6 <rcl_init_options_fini+0x46>

080105c4 <rcl_init_options_copy>:
 80105c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c6:	b09d      	sub	sp, #116	@ 0x74
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d04a      	beq.n	8010662 <rcl_init_options_copy+0x9e>
 80105cc:	4604      	mov	r4, r0
 80105ce:	6800      	ldr	r0, [r0, #0]
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d046      	beq.n	8010662 <rcl_init_options_copy+0x9e>
 80105d4:	460d      	mov	r5, r1
 80105d6:	f7f9 fe87 	bl	800a2e8 <rcutils_allocator_is_valid>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d041      	beq.n	8010662 <rcl_init_options_copy+0x9e>
 80105de:	2d00      	cmp	r5, #0
 80105e0:	d03f      	beq.n	8010662 <rcl_init_options_copy+0x9e>
 80105e2:	682b      	ldr	r3, [r5, #0]
 80105e4:	b11b      	cbz	r3, 80105ee <rcl_init_options_copy+0x2a>
 80105e6:	2464      	movs	r4, #100	@ 0x64
 80105e8:	4620      	mov	r0, r4
 80105ea:	b01d      	add	sp, #116	@ 0x74
 80105ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ee:	6826      	ldr	r6, [r4, #0]
 80105f0:	46b6      	mov	lr, r6
 80105f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80105f6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80105fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105fe:	f8de 3000 	ldr.w	r3, [lr]
 8010602:	6837      	ldr	r7, [r6, #0]
 8010604:	f8cc 3000 	str.w	r3, [ip]
 8010608:	4619      	mov	r1, r3
 801060a:	2070      	movs	r0, #112	@ 0x70
 801060c:	47b8      	blx	r7
 801060e:	4606      	mov	r6, r0
 8010610:	6028      	str	r0, [r5, #0]
 8010612:	b350      	cbz	r0, 801066a <rcl_init_options_copy+0xa6>
 8010614:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8010618:	4686      	mov	lr, r0
 801061a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801061e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010622:	f8dc 3000 	ldr.w	r3, [ip]
 8010626:	f8ce 3000 	str.w	r3, [lr]
 801062a:	4668      	mov	r0, sp
 801062c:	f002 fff2 	bl	8013614 <rmw_get_zero_initialized_init_options>
 8010630:	2258      	movs	r2, #88	@ 0x58
 8010632:	4669      	mov	r1, sp
 8010634:	f106 0018 	add.w	r0, r6, #24
 8010638:	f007 facb 	bl	8017bd2 <memcpy>
 801063c:	6820      	ldr	r0, [r4, #0]
 801063e:	6829      	ldr	r1, [r5, #0]
 8010640:	3018      	adds	r0, #24
 8010642:	3118      	adds	r1, #24
 8010644:	f003 fac8 	bl	8013bd8 <rmw_init_options_copy>
 8010648:	4604      	mov	r4, r0
 801064a:	2800      	cmp	r0, #0
 801064c:	d0cc      	beq.n	80105e8 <rcl_init_options_copy+0x24>
 801064e:	f7f9 fe5f 	bl	800a310 <rcutils_get_error_string>
 8010652:	f7f9 fe75 	bl	800a340 <rcutils_reset_error>
 8010656:	4628      	mov	r0, r5
 8010658:	f7ff ff8a 	bl	8010570 <rcl_init_options_fini>
 801065c:	b138      	cbz	r0, 801066e <rcl_init_options_copy+0xaa>
 801065e:	4604      	mov	r4, r0
 8010660:	e7c2      	b.n	80105e8 <rcl_init_options_copy+0x24>
 8010662:	240b      	movs	r4, #11
 8010664:	4620      	mov	r0, r4
 8010666:	b01d      	add	sp, #116	@ 0x74
 8010668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801066a:	240a      	movs	r4, #10
 801066c:	e7bc      	b.n	80105e8 <rcl_init_options_copy+0x24>
 801066e:	4620      	mov	r0, r4
 8010670:	b01d      	add	sp, #116	@ 0x74
 8010672:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010676:	f7ff bd99 	b.w	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 801067a:	bf00      	nop

0801067c <rcl_get_zero_initialized_node>:
 801067c:	4a03      	ldr	r2, [pc, #12]	@ (801068c <rcl_get_zero_initialized_node+0x10>)
 801067e:	4603      	mov	r3, r0
 8010680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010684:	e883 0003 	stmia.w	r3, {r0, r1}
 8010688:	4618      	mov	r0, r3
 801068a:	4770      	bx	lr
 801068c:	080194d4 	.word	0x080194d4

08010690 <rcl_node_init>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	b0ab      	sub	sp, #172	@ 0xac
 8010696:	4604      	mov	r4, r0
 8010698:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 801069a:	a825      	add	r0, sp, #148	@ 0x94
 801069c:	4689      	mov	r9, r1
 801069e:	4690      	mov	r8, r2
 80106a0:	461f      	mov	r7, r3
 80106a2:	f006 f8e1 	bl	8016868 <rcl_guard_condition_get_default_options>
 80106a6:	2d00      	cmp	r5, #0
 80106a8:	f000 80d8 	beq.w	801085c <rcl_node_init+0x1cc>
 80106ac:	4628      	mov	r0, r5
 80106ae:	f7f9 fe1b 	bl	800a2e8 <rcutils_allocator_is_valid>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	f000 80d2 	beq.w	801085c <rcl_node_init+0x1cc>
 80106b8:	f1b9 0f00 	cmp.w	r9, #0
 80106bc:	f000 80ce 	beq.w	801085c <rcl_node_init+0x1cc>
 80106c0:	f1b8 0f00 	cmp.w	r8, #0
 80106c4:	f000 80ca 	beq.w	801085c <rcl_node_init+0x1cc>
 80106c8:	2c00      	cmp	r4, #0
 80106ca:	f000 80c7 	beq.w	801085c <rcl_node_init+0x1cc>
 80106ce:	6866      	ldr	r6, [r4, #4]
 80106d0:	2e00      	cmp	r6, #0
 80106d2:	f040 80ca 	bne.w	801086a <rcl_node_init+0x1da>
 80106d6:	2f00      	cmp	r7, #0
 80106d8:	f000 80c0 	beq.w	801085c <rcl_node_init+0x1cc>
 80106dc:	4638      	mov	r0, r7
 80106de:	f7ff fd7f 	bl	80101e0 <rcl_context_is_valid>
 80106e2:	2800      	cmp	r0, #0
 80106e4:	f000 80bf 	beq.w	8010866 <rcl_node_init+0x1d6>
 80106e8:	4632      	mov	r2, r6
 80106ea:	a924      	add	r1, sp, #144	@ 0x90
 80106ec:	4648      	mov	r0, r9
 80106ee:	9624      	str	r6, [sp, #144]	@ 0x90
 80106f0:	f003 f92c 	bl	801394c <rmw_validate_node_name>
 80106f4:	4606      	mov	r6, r0
 80106f6:	2800      	cmp	r0, #0
 80106f8:	f040 80b1 	bne.w	801085e <rcl_node_init+0x1ce>
 80106fc:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80106fe:	2800      	cmp	r0, #0
 8010700:	f040 8104 	bne.w	801090c <rcl_node_init+0x27c>
 8010704:	f898 3000 	ldrb.w	r3, [r8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	f000 80f0 	beq.w	80108ee <rcl_node_init+0x25e>
 801070e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010710:	f000 80b0 	beq.w	8010874 <rcl_node_init+0x1e4>
 8010714:	4b85      	ldr	r3, [pc, #532]	@ (801092c <rcl_node_init+0x29c>)
 8010716:	f8cd 800c 	str.w	r8, [sp, #12]
 801071a:	9302      	str	r3, [sp, #8]
 801071c:	692b      	ldr	r3, [r5, #16]
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010724:	9301      	str	r3, [sp, #4]
 8010726:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801072a:	f002 fccf 	bl	80130cc <rcutils_format_string_limit>
 801072e:	4680      	mov	r8, r0
 8010730:	f1b8 0f00 	cmp.w	r8, #0
 8010734:	f000 80e8 	beq.w	8010908 <rcl_node_init+0x278>
 8010738:	2200      	movs	r2, #0
 801073a:	a924      	add	r1, sp, #144	@ 0x90
 801073c:	4640      	mov	r0, r8
 801073e:	9224      	str	r2, [sp, #144]	@ 0x90
 8010740:	f003 f8e6 	bl	8013910 <rmw_validate_namespace>
 8010744:	4606      	mov	r6, r0
 8010746:	2800      	cmp	r0, #0
 8010748:	f040 80a4 	bne.w	8010894 <rcl_node_init+0x204>
 801074c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801074e:	2800      	cmp	r0, #0
 8010750:	f040 809d 	bne.w	801088e <rcl_node_init+0x1fe>
 8010754:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8010758:	2178      	movs	r1, #120	@ 0x78
 801075a:	2001      	movs	r0, #1
 801075c:	4798      	blx	r3
 801075e:	4606      	mov	r6, r0
 8010760:	6060      	str	r0, [r4, #4]
 8010762:	2800      	cmp	r0, #0
 8010764:	f000 80d6 	beq.w	8010914 <rcl_node_init+0x284>
 8010768:	a80a      	add	r0, sp, #40	@ 0x28
 801076a:	f000 f92f 	bl	80109cc <rcl_node_get_default_options>
 801076e:	a90a      	add	r1, sp, #40	@ 0x28
 8010770:	4630      	mov	r0, r6
 8010772:	2268      	movs	r2, #104	@ 0x68
 8010774:	f007 fa2d 	bl	8017bd2 <memcpy>
 8010778:	6861      	ldr	r1, [r4, #4]
 801077a:	6027      	str	r7, [r4, #0]
 801077c:	4628      	mov	r0, r5
 801077e:	f000 f933 	bl	80109e8 <rcl_node_options_copy>
 8010782:	4606      	mov	r6, r0
 8010784:	2800      	cmp	r0, #0
 8010786:	f040 8085 	bne.w	8010894 <rcl_node_init+0x204>
 801078a:	4640      	mov	r0, r8
 801078c:	f7ef fda0 	bl	80002d0 <strlen>
 8010790:	eb08 0300 	add.w	r3, r8, r0
 8010794:	6866      	ldr	r6, [r4, #4]
 8010796:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801079a:	e9cd 8903 	strd	r8, r9, [sp, #12]
 801079e:	2b2f      	cmp	r3, #47	@ 0x2f
 80107a0:	bf0c      	ite	eq
 80107a2:	4b63      	ldreq	r3, [pc, #396]	@ (8010930 <rcl_node_init+0x2a0>)
 80107a4:	4b63      	ldrne	r3, [pc, #396]	@ (8010934 <rcl_node_init+0x2a4>)
 80107a6:	9302      	str	r3, [sp, #8]
 80107a8:	692b      	ldr	r3, [r5, #16]
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80107b0:	9301      	str	r3, [sp, #4]
 80107b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80107b6:	f002 fc89 	bl	80130cc <rcutils_format_string_limit>
 80107ba:	6863      	ldr	r3, [r4, #4]
 80107bc:	6770      	str	r0, [r6, #116]	@ 0x74
 80107be:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80107c0:	2a00      	cmp	r2, #0
 80107c2:	f000 80a9 	beq.w	8010918 <rcl_node_init+0x288>
 80107c6:	6822      	ldr	r2, [r4, #0]
 80107c8:	9307      	str	r3, [sp, #28]
 80107ca:	6810      	ldr	r0, [r2, #0]
 80107cc:	4649      	mov	r1, r9
 80107ce:	3028      	adds	r0, #40	@ 0x28
 80107d0:	4642      	mov	r2, r8
 80107d2:	f003 fce7 	bl	80141a4 <rmw_create_node>
 80107d6:	9b07      	ldr	r3, [sp, #28]
 80107d8:	6698      	str	r0, [r3, #104]	@ 0x68
 80107da:	6863      	ldr	r3, [r4, #4]
 80107dc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80107de:	2800      	cmp	r0, #0
 80107e0:	f000 809d 	beq.w	801091e <rcl_node_init+0x28e>
 80107e4:	f003 fd70 	bl	80142c8 <rmw_node_get_graph_guard_condition>
 80107e8:	4681      	mov	r9, r0
 80107ea:	2800      	cmp	r0, #0
 80107ec:	f000 809c 	beq.w	8010928 <rcl_node_init+0x298>
 80107f0:	682b      	ldr	r3, [r5, #0]
 80107f2:	6929      	ldr	r1, [r5, #16]
 80107f4:	6866      	ldr	r6, [r4, #4]
 80107f6:	2008      	movs	r0, #8
 80107f8:	4798      	blx	r3
 80107fa:	6863      	ldr	r3, [r4, #4]
 80107fc:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80107fe:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8010802:	f1ba 0f00 	cmp.w	sl, #0
 8010806:	f000 808d 	beq.w	8010924 <rcl_node_init+0x294>
 801080a:	f10d 0b20 	add.w	fp, sp, #32
 801080e:	4658      	mov	r0, fp
 8010810:	f005 ff52 	bl	80166b8 <rcl_get_zero_initialized_guard_condition>
 8010814:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8010818:	6863      	ldr	r3, [r4, #4]
 801081a:	46ac      	mov	ip, r5
 801081c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010820:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010828:	ae25      	add	r6, sp, #148	@ 0x94
 801082a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801082c:	f8dc 3000 	ldr.w	r3, [ip]
 8010830:	6033      	str	r3, [r6, #0]
 8010832:	ab2a      	add	r3, sp, #168	@ 0xa8
 8010834:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010838:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801083c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801083e:	463a      	mov	r2, r7
 8010840:	4649      	mov	r1, r9
 8010842:	4670      	mov	r0, lr
 8010844:	f005 ff8e 	bl	8016764 <rcl_guard_condition_init_from_rmw>
 8010848:	4606      	mov	r6, r0
 801084a:	bb18      	cbnz	r0, 8010894 <rcl_node_init+0x204>
 801084c:	686b      	ldr	r3, [r5, #4]
 801084e:	6929      	ldr	r1, [r5, #16]
 8010850:	4798      	blx	r3
 8010852:	686b      	ldr	r3, [r5, #4]
 8010854:	6929      	ldr	r1, [r5, #16]
 8010856:	4640      	mov	r0, r8
 8010858:	4798      	blx	r3
 801085a:	e000      	b.n	801085e <rcl_node_init+0x1ce>
 801085c:	260b      	movs	r6, #11
 801085e:	4630      	mov	r0, r6
 8010860:	b02b      	add	sp, #172	@ 0xac
 8010862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010866:	2665      	movs	r6, #101	@ 0x65
 8010868:	e7f9      	b.n	801085e <rcl_node_init+0x1ce>
 801086a:	2664      	movs	r6, #100	@ 0x64
 801086c:	4630      	mov	r0, r6
 801086e:	b02b      	add	sp, #172	@ 0xac
 8010870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010874:	f105 030c 	add.w	r3, r5, #12
 8010878:	e893 0003 	ldmia.w	r3, {r0, r1}
 801087c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010880:	4640      	mov	r0, r8
 8010882:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010886:	f002 fd3f 	bl	8013308 <rcutils_strdup>
 801088a:	4680      	mov	r8, r0
 801088c:	e750      	b.n	8010730 <rcl_node_init+0xa0>
 801088e:	f003 f851 	bl	8013934 <rmw_namespace_validation_result_string>
 8010892:	26ca      	movs	r6, #202	@ 0xca
 8010894:	6863      	ldr	r3, [r4, #4]
 8010896:	b1f3      	cbz	r3, 80108d6 <rcl_node_init+0x246>
 8010898:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801089a:	b138      	cbz	r0, 80108ac <rcl_node_init+0x21c>
 801089c:	f005 ffc2 	bl	8016824 <rcl_guard_condition_fini>
 80108a0:	6863      	ldr	r3, [r4, #4]
 80108a2:	6929      	ldr	r1, [r5, #16]
 80108a4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80108a6:	686b      	ldr	r3, [r5, #4]
 80108a8:	4798      	blx	r3
 80108aa:	6863      	ldr	r3, [r4, #4]
 80108ac:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80108ae:	b110      	cbz	r0, 80108b6 <rcl_node_init+0x226>
 80108b0:	f003 fc8e 	bl	80141d0 <rmw_destroy_node>
 80108b4:	6863      	ldr	r3, [r4, #4]
 80108b6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80108b8:	6929      	ldr	r1, [r5, #16]
 80108ba:	686b      	ldr	r3, [r5, #4]
 80108bc:	4798      	blx	r3
 80108be:	6863      	ldr	r3, [r4, #4]
 80108c0:	6929      	ldr	r1, [r5, #16]
 80108c2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80108c4:	686b      	ldr	r3, [r5, #4]
 80108c6:	4798      	blx	r3
 80108c8:	6860      	ldr	r0, [r4, #4]
 80108ca:	f000 f8ab 	bl	8010a24 <rcl_node_options_fini>
 80108ce:	686b      	ldr	r3, [r5, #4]
 80108d0:	6929      	ldr	r1, [r5, #16]
 80108d2:	6860      	ldr	r0, [r4, #4]
 80108d4:	4798      	blx	r3
 80108d6:	686b      	ldr	r3, [r5, #4]
 80108d8:	6929      	ldr	r1, [r5, #16]
 80108da:	2000      	movs	r0, #0
 80108dc:	4798      	blx	r3
 80108de:	686b      	ldr	r3, [r5, #4]
 80108e0:	6929      	ldr	r1, [r5, #16]
 80108e2:	4640      	mov	r0, r8
 80108e4:	4798      	blx	r3
 80108e6:	2300      	movs	r3, #0
 80108e8:	e9c4 3300 	strd	r3, r3, [r4]
 80108ec:	e7b7      	b.n	801085e <rcl_node_init+0x1ce>
 80108ee:	f105 030c 	add.w	r3, r5, #12
 80108f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80108f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80108fa:	480f      	ldr	r0, [pc, #60]	@ (8010938 <rcl_node_init+0x2a8>)
 80108fc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010900:	f002 fd02 	bl	8013308 <rcutils_strdup>
 8010904:	4680      	mov	r8, r0
 8010906:	e713      	b.n	8010730 <rcl_node_init+0xa0>
 8010908:	260a      	movs	r6, #10
 801090a:	e7a8      	b.n	801085e <rcl_node_init+0x1ce>
 801090c:	f003 f86a 	bl	80139e4 <rmw_node_name_validation_result_string>
 8010910:	26c9      	movs	r6, #201	@ 0xc9
 8010912:	e7a4      	b.n	801085e <rcl_node_init+0x1ce>
 8010914:	260a      	movs	r6, #10
 8010916:	e7de      	b.n	80108d6 <rcl_node_init+0x246>
 8010918:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801091a:	260a      	movs	r6, #10
 801091c:	e7bd      	b.n	801089a <rcl_node_init+0x20a>
 801091e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010920:	2601      	movs	r6, #1
 8010922:	e7ba      	b.n	801089a <rcl_node_init+0x20a>
 8010924:	260a      	movs	r6, #10
 8010926:	e7c1      	b.n	80108ac <rcl_node_init+0x21c>
 8010928:	2601      	movs	r6, #1
 801092a:	e7b3      	b.n	8010894 <rcl_node_init+0x204>
 801092c:	08018c7c 	.word	0x08018c7c
 8010930:	08018b20 	.word	0x08018b20
 8010934:	08018c80 	.word	0x08018c80
 8010938:	08018c78 	.word	0x08018c78

0801093c <rcl_node_is_valid>:
 801093c:	b130      	cbz	r0, 801094c <rcl_node_is_valid+0x10>
 801093e:	6843      	ldr	r3, [r0, #4]
 8010940:	b123      	cbz	r3, 801094c <rcl_node_is_valid+0x10>
 8010942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010944:	b113      	cbz	r3, 801094c <rcl_node_is_valid+0x10>
 8010946:	6800      	ldr	r0, [r0, #0]
 8010948:	f7ff bc4a 	b.w	80101e0 <rcl_context_is_valid>
 801094c:	2000      	movs	r0, #0
 801094e:	4770      	bx	lr

08010950 <rcl_node_get_name>:
 8010950:	b120      	cbz	r0, 801095c <rcl_node_get_name+0xc>
 8010952:	6840      	ldr	r0, [r0, #4]
 8010954:	b110      	cbz	r0, 801095c <rcl_node_get_name+0xc>
 8010956:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010958:	b100      	cbz	r0, 801095c <rcl_node_get_name+0xc>
 801095a:	6880      	ldr	r0, [r0, #8]
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop

08010960 <rcl_node_get_namespace>:
 8010960:	b120      	cbz	r0, 801096c <rcl_node_get_namespace+0xc>
 8010962:	6840      	ldr	r0, [r0, #4]
 8010964:	b110      	cbz	r0, 801096c <rcl_node_get_namespace+0xc>
 8010966:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010968:	b100      	cbz	r0, 801096c <rcl_node_get_namespace+0xc>
 801096a:	68c0      	ldr	r0, [r0, #12]
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop

08010970 <rcl_node_get_options>:
 8010970:	b128      	cbz	r0, 801097e <rcl_node_get_options+0xe>
 8010972:	6840      	ldr	r0, [r0, #4]
 8010974:	b118      	cbz	r0, 801097e <rcl_node_get_options+0xe>
 8010976:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010978:	2b00      	cmp	r3, #0
 801097a:	bf08      	it	eq
 801097c:	2000      	moveq	r0, #0
 801097e:	4770      	bx	lr

08010980 <rcl_node_get_rmw_handle>:
 8010980:	b110      	cbz	r0, 8010988 <rcl_node_get_rmw_handle+0x8>
 8010982:	6840      	ldr	r0, [r0, #4]
 8010984:	b100      	cbz	r0, 8010988 <rcl_node_get_rmw_handle+0x8>
 8010986:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop

0801098c <rcl_get_disable_loaned_message>:
 801098c:	b510      	push	{r4, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	2300      	movs	r3, #0
 8010992:	9301      	str	r3, [sp, #4]
 8010994:	b1a0      	cbz	r0, 80109c0 <rcl_get_disable_loaned_message+0x34>
 8010996:	4604      	mov	r4, r0
 8010998:	a901      	add	r1, sp, #4
 801099a:	480b      	ldr	r0, [pc, #44]	@ (80109c8 <rcl_get_disable_loaned_message+0x3c>)
 801099c:	f002 fb7e 	bl	801309c <rcutils_get_env>
 80109a0:	b110      	cbz	r0, 80109a8 <rcl_get_disable_loaned_message+0x1c>
 80109a2:	2001      	movs	r0, #1
 80109a4:	b002      	add	sp, #8
 80109a6:	bd10      	pop	{r4, pc}
 80109a8:	9a01      	ldr	r2, [sp, #4]
 80109aa:	7813      	ldrb	r3, [r2, #0]
 80109ac:	3b31      	subs	r3, #49	@ 0x31
 80109ae:	bf08      	it	eq
 80109b0:	7853      	ldrbeq	r3, [r2, #1]
 80109b2:	fab3 f383 	clz	r3, r3
 80109b6:	095b      	lsrs	r3, r3, #5
 80109b8:	2000      	movs	r0, #0
 80109ba:	7023      	strb	r3, [r4, #0]
 80109bc:	b002      	add	sp, #8
 80109be:	bd10      	pop	{r4, pc}
 80109c0:	200b      	movs	r0, #11
 80109c2:	b002      	add	sp, #8
 80109c4:	bd10      	pop	{r4, pc}
 80109c6:	bf00      	nop
 80109c8:	08018c88 	.word	0x08018c88

080109cc <rcl_node_get_default_options>:
 80109cc:	b510      	push	{r4, lr}
 80109ce:	2253      	movs	r2, #83	@ 0x53
 80109d0:	4604      	mov	r4, r0
 80109d2:	2100      	movs	r1, #0
 80109d4:	3015      	adds	r0, #21
 80109d6:	f007 f821 	bl	8017a1c <memset>
 80109da:	4620      	mov	r0, r4
 80109dc:	f7f9 fc58 	bl	800a290 <rcutils_get_default_allocator>
 80109e0:	2301      	movs	r3, #1
 80109e2:	7523      	strb	r3, [r4, #20]
 80109e4:	4620      	mov	r0, r4
 80109e6:	bd10      	pop	{r4, pc}

080109e8 <rcl_node_options_copy>:
 80109e8:	b1d0      	cbz	r0, 8010a20 <rcl_node_options_copy+0x38>
 80109ea:	b570      	push	{r4, r5, r6, lr}
 80109ec:	460c      	mov	r4, r1
 80109ee:	b1a9      	cbz	r1, 8010a1c <rcl_node_options_copy+0x34>
 80109f0:	4288      	cmp	r0, r1
 80109f2:	4684      	mov	ip, r0
 80109f4:	d012      	beq.n	8010a1c <rcl_node_options_copy+0x34>
 80109f6:	4605      	mov	r5, r0
 80109f8:	8a86      	ldrh	r6, [r0, #20]
 80109fa:	468e      	mov	lr, r1
 80109fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010a02:	682b      	ldr	r3, [r5, #0]
 8010a04:	f8ce 3000 	str.w	r3, [lr]
 8010a08:	f10c 0118 	add.w	r1, ip, #24
 8010a0c:	2250      	movs	r2, #80	@ 0x50
 8010a0e:	82a6      	strh	r6, [r4, #20]
 8010a10:	f104 0018 	add.w	r0, r4, #24
 8010a14:	f007 f8dd 	bl	8017bd2 <memcpy>
 8010a18:	2000      	movs	r0, #0
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}
 8010a1c:	200b      	movs	r0, #11
 8010a1e:	bd70      	pop	{r4, r5, r6, pc}
 8010a20:	200b      	movs	r0, #11
 8010a22:	4770      	bx	lr

08010a24 <rcl_node_options_fini>:
 8010a24:	b1c0      	cbz	r0, 8010a58 <rcl_node_options_fini+0x34>
 8010a26:	b500      	push	{lr}
 8010a28:	4684      	mov	ip, r0
 8010a2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	f10d 0e04 	add.w	lr, sp, #4
 8010a34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010a38:	f8dc 3000 	ldr.w	r3, [ip]
 8010a3c:	f8ce 3000 	str.w	r3, [lr]
 8010a40:	a801      	add	r0, sp, #4
 8010a42:	f7f9 fc51 	bl	800a2e8 <rcutils_allocator_is_valid>
 8010a46:	b118      	cbz	r0, 8010a50 <rcl_node_options_fini+0x2c>
 8010a48:	2000      	movs	r0, #0
 8010a4a:	b007      	add	sp, #28
 8010a4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a50:	200b      	movs	r0, #11
 8010a52:	b007      	add	sp, #28
 8010a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a58:	200b      	movs	r0, #11
 8010a5a:	4770      	bx	lr

08010a5c <rcl_node_resolve_name>:
 8010a5c:	b082      	sub	sp, #8
 8010a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a62:	b091      	sub	sp, #68	@ 0x44
 8010a64:	ac1a      	add	r4, sp, #104	@ 0x68
 8010a66:	e884 000c 	stmia.w	r4, {r2, r3}
 8010a6a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d03a      	beq.n	8010ae8 <rcl_node_resolve_name+0x8c>
 8010a72:	460c      	mov	r4, r1
 8010a74:	4605      	mov	r5, r0
 8010a76:	f7ff ff7b 	bl	8010970 <rcl_node_get_options>
 8010a7a:	b370      	cbz	r0, 8010ada <rcl_node_resolve_name+0x7e>
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	f7ff ff67 	bl	8010950 <rcl_node_get_name>
 8010a82:	4681      	mov	r9, r0
 8010a84:	4628      	mov	r0, r5
 8010a86:	f7ff ff6b 	bl	8010960 <rcl_node_get_namespace>
 8010a8a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010a8e:	4607      	mov	r7, r0
 8010a90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a94:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010a96:	46ac      	mov	ip, r5
 8010a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a9c:	f8de 3000 	ldr.w	r3, [lr]
 8010aa0:	f8cc 3000 	str.w	r3, [ip]
 8010aa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010aa6:	b1fb      	cbz	r3, 8010ae8 <rcl_node_resolve_name+0x8c>
 8010aa8:	468a      	mov	sl, r1
 8010aaa:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010aae:	f002 fc8b 	bl	80133c8 <rcutils_get_zero_initialized_string_map>
 8010ab2:	ab10      	add	r3, sp, #64	@ 0x40
 8010ab4:	9008      	str	r0, [sp, #32]
 8010ab6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010aba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010abe:	2100      	movs	r1, #0
 8010ac0:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010ac4:	a808      	add	r0, sp, #32
 8010ac6:	f002 fcd9 	bl	801347c <rcutils_string_map_init>
 8010aca:	4606      	mov	r6, r0
 8010acc:	b170      	cbz	r0, 8010aec <rcl_node_resolve_name+0x90>
 8010ace:	f7f9 fc1f 	bl	800a310 <rcutils_get_error_string>
 8010ad2:	f7f9 fc35 	bl	800a340 <rcutils_reset_error>
 8010ad6:	2e0a      	cmp	r6, #10
 8010ad8:	d000      	beq.n	8010adc <rcl_node_resolve_name+0x80>
 8010ada:	2601      	movs	r6, #1
 8010adc:	4630      	mov	r0, r6
 8010ade:	b011      	add	sp, #68	@ 0x44
 8010ae0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae4:	b002      	add	sp, #8
 8010ae6:	4770      	bx	lr
 8010ae8:	260b      	movs	r6, #11
 8010aea:	e7f7      	b.n	8010adc <rcl_node_resolve_name+0x80>
 8010aec:	9009      	str	r0, [sp, #36]	@ 0x24
 8010aee:	9007      	str	r0, [sp, #28]
 8010af0:	a808      	add	r0, sp, #32
 8010af2:	f005 fddb 	bl	80166ac <rcl_get_default_topic_name_substitutions>
 8010af6:	4606      	mov	r6, r0
 8010af8:	b1b0      	cbz	r0, 8010b28 <rcl_node_resolve_name+0xcc>
 8010afa:	280a      	cmp	r0, #10
 8010afc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010b00:	d000      	beq.n	8010b04 <rcl_node_resolve_name+0xa8>
 8010b02:	2601      	movs	r6, #1
 8010b04:	a808      	add	r0, sp, #32
 8010b06:	f002 fcf7 	bl	80134f8 <rcutils_string_map_fini>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d132      	bne.n	8010b74 <rcl_node_resolve_name+0x118>
 8010b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b10:	4659      	mov	r1, fp
 8010b12:	47d0      	blx	sl
 8010b14:	4659      	mov	r1, fp
 8010b16:	4648      	mov	r0, r9
 8010b18:	47d0      	blx	sl
 8010b1a:	f1b8 0f00 	cmp.w	r8, #0
 8010b1e:	d0dd      	beq.n	8010adc <rcl_node_resolve_name+0x80>
 8010b20:	2e67      	cmp	r6, #103	@ 0x67
 8010b22:	bf08      	it	eq
 8010b24:	2668      	moveq	r6, #104	@ 0x68
 8010b26:	e7d9      	b.n	8010adc <rcl_node_resolve_name+0x80>
 8010b28:	ab09      	add	r3, sp, #36	@ 0x24
 8010b2a:	9305      	str	r3, [sp, #20]
 8010b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b2e:	46ec      	mov	ip, sp
 8010b30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b34:	682b      	ldr	r3, [r5, #0]
 8010b36:	f8cc 3000 	str.w	r3, [ip]
 8010b3a:	463a      	mov	r2, r7
 8010b3c:	4649      	mov	r1, r9
 8010b3e:	4620      	mov	r0, r4
 8010b40:	ab08      	add	r3, sp, #32
 8010b42:	f005 fc4d 	bl	80163e0 <rcl_expand_topic_name>
 8010b46:	4606      	mov	r6, r0
 8010b48:	b9c8      	cbnz	r0, 8010b7e <rcl_node_resolve_name+0x122>
 8010b4a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8010b4e:	9009      	str	r0, [sp, #36]	@ 0x24
 8010b50:	4602      	mov	r2, r0
 8010b52:	a90a      	add	r1, sp, #40	@ 0x28
 8010b54:	4648      	mov	r0, r9
 8010b56:	f002 fe23 	bl	80137a0 <rmw_validate_full_topic_name>
 8010b5a:	b998      	cbnz	r0, 8010b84 <rcl_node_resolve_name+0x128>
 8010b5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b5e:	bb14      	cbnz	r4, 8010ba6 <rcl_node_resolve_name+0x14a>
 8010b60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010b62:	a808      	add	r0, sp, #32
 8010b64:	f8c3 9000 	str.w	r9, [r3]
 8010b68:	f002 fcc6 	bl	80134f8 <rcutils_string_map_fini>
 8010b6c:	4606      	mov	r6, r0
 8010b6e:	b978      	cbnz	r0, 8010b90 <rcl_node_resolve_name+0x134>
 8010b70:	4681      	mov	r9, r0
 8010b72:	e7cc      	b.n	8010b0e <rcl_node_resolve_name+0xb2>
 8010b74:	f7f9 fbcc 	bl	800a310 <rcutils_get_error_string>
 8010b78:	f7f9 fbe2 	bl	800a340 <rcutils_reset_error>
 8010b7c:	e7c7      	b.n	8010b0e <rcl_node_resolve_name+0xb2>
 8010b7e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010b82:	e7bf      	b.n	8010b04 <rcl_node_resolve_name+0xa8>
 8010b84:	f7f9 fbc4 	bl	800a310 <rcutils_get_error_string>
 8010b88:	2601      	movs	r6, #1
 8010b8a:	f7f9 fbd9 	bl	800a340 <rcutils_reset_error>
 8010b8e:	e7b9      	b.n	8010b04 <rcl_node_resolve_name+0xa8>
 8010b90:	f7f9 fbbe 	bl	800a310 <rcutils_get_error_string>
 8010b94:	f7f9 fbd4 	bl	800a340 <rcutils_reset_error>
 8010b98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b9a:	4659      	mov	r1, fp
 8010b9c:	47d0      	blx	sl
 8010b9e:	4659      	mov	r1, fp
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	47d0      	blx	sl
 8010ba4:	e799      	b.n	8010ada <rcl_node_resolve_name+0x7e>
 8010ba6:	2667      	movs	r6, #103	@ 0x67
 8010ba8:	e7ac      	b.n	8010b04 <rcl_node_resolve_name+0xa8>
 8010baa:	bf00      	nop

08010bac <rcl_service_get_rmw_handle>:
 8010bac:	b118      	cbz	r0, 8010bb6 <rcl_service_get_rmw_handle+0xa>
 8010bae:	6800      	ldr	r0, [r0, #0]
 8010bb0:	b108      	cbz	r0, 8010bb6 <rcl_service_get_rmw_handle+0xa>
 8010bb2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010bb6:	4770      	bx	lr

08010bb8 <rcl_take_request>:
 8010bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bba:	468e      	mov	lr, r1
 8010bbc:	460c      	mov	r4, r1
 8010bbe:	4617      	mov	r7, r2
 8010bc0:	4605      	mov	r5, r0
 8010bc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bc6:	b091      	sub	sp, #68	@ 0x44
 8010bc8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8010bcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bd0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010bd4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010bd8:	b30d      	cbz	r5, 8010c1e <rcl_take_request+0x66>
 8010bda:	682b      	ldr	r3, [r5, #0]
 8010bdc:	b1fb      	cbz	r3, 8010c1e <rcl_take_request+0x66>
 8010bde:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010be2:	b1e0      	cbz	r0, 8010c1e <rcl_take_request+0x66>
 8010be4:	b397      	cbz	r7, 8010c4c <rcl_take_request+0x94>
 8010be6:	2300      	movs	r3, #0
 8010be8:	f88d 3017 	strb.w	r3, [sp, #23]
 8010bec:	463a      	mov	r2, r7
 8010bee:	f10d 0317 	add.w	r3, sp, #23
 8010bf2:	a906      	add	r1, sp, #24
 8010bf4:	f003 fbb6 	bl	8014364 <rmw_take_request>
 8010bf8:	4606      	mov	r6, r0
 8010bfa:	b198      	cbz	r0, 8010c24 <rcl_take_request+0x6c>
 8010bfc:	280a      	cmp	r0, #10
 8010bfe:	bf18      	it	ne
 8010c00:	2601      	movne	r6, #1
 8010c02:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8010c06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c0a:	46a6      	mov	lr, r4
 8010c0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c10:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010c14:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010c18:	4630      	mov	r0, r6
 8010c1a:	b011      	add	sp, #68	@ 0x44
 8010c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c1e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8010c22:	e7ee      	b.n	8010c02 <rcl_take_request+0x4a>
 8010c24:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010c28:	b193      	cbz	r3, 8010c50 <rcl_take_request+0x98>
 8010c2a:	682b      	ldr	r3, [r5, #0]
 8010c2c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8010c30:	2800      	cmp	r0, #0
 8010c32:	d0e6      	beq.n	8010c02 <rcl_take_request+0x4a>
 8010c34:	463a      	mov	r2, r7
 8010c36:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8010c3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8010c3c:	e9cd 6700 	strd	r6, r7, [sp]
 8010c40:	9302      	str	r3, [sp, #8]
 8010c42:	2101      	movs	r1, #1
 8010c44:	f000 f844 	bl	8010cd0 <rcl_send_service_event_message>
 8010c48:	4606      	mov	r6, r0
 8010c4a:	e7da      	b.n	8010c02 <rcl_take_request+0x4a>
 8010c4c:	260b      	movs	r6, #11
 8010c4e:	e7d8      	b.n	8010c02 <rcl_take_request+0x4a>
 8010c50:	f240 2659 	movw	r6, #601	@ 0x259
 8010c54:	e7d5      	b.n	8010c02 <rcl_take_request+0x4a>
 8010c56:	bf00      	nop

08010c58 <rcl_send_response>:
 8010c58:	b350      	cbz	r0, 8010cb0 <rcl_send_response+0x58>
 8010c5a:	b570      	push	{r4, r5, r6, lr}
 8010c5c:	6803      	ldr	r3, [r0, #0]
 8010c5e:	b084      	sub	sp, #16
 8010c60:	4604      	mov	r4, r0
 8010c62:	b1cb      	cbz	r3, 8010c98 <rcl_send_response+0x40>
 8010c64:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010c68:	b1b0      	cbz	r0, 8010c98 <rcl_send_response+0x40>
 8010c6a:	460e      	mov	r6, r1
 8010c6c:	b1e9      	cbz	r1, 8010caa <rcl_send_response+0x52>
 8010c6e:	4615      	mov	r5, r2
 8010c70:	b1da      	cbz	r2, 8010caa <rcl_send_response+0x52>
 8010c72:	f003 fbd5 	bl	8014420 <rmw_send_response>
 8010c76:	b998      	cbnz	r0, 8010ca0 <rcl_send_response+0x48>
 8010c78:	6823      	ldr	r3, [r4, #0]
 8010c7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8010c7e:	b16b      	cbz	r3, 8010c9c <rcl_send_response+0x44>
 8010c80:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8010c84:	462a      	mov	r2, r5
 8010c86:	e9cd 0100 	strd	r0, r1, [sp]
 8010c8a:	9602      	str	r6, [sp, #8]
 8010c8c:	2102      	movs	r1, #2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 f81e 	bl	8010cd0 <rcl_send_service_event_message>
 8010c94:	b004      	add	sp, #16
 8010c96:	bd70      	pop	{r4, r5, r6, pc}
 8010c98:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010c9c:	b004      	add	sp, #16
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ca0:	2802      	cmp	r0, #2
 8010ca2:	bf18      	it	ne
 8010ca4:	2001      	movne	r0, #1
 8010ca6:	b004      	add	sp, #16
 8010ca8:	bd70      	pop	{r4, r5, r6, pc}
 8010caa:	200b      	movs	r0, #11
 8010cac:	b004      	add	sp, #16
 8010cae:	bd70      	pop	{r4, r5, r6, pc}
 8010cb0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <rcl_service_is_valid>:
 8010cb8:	b130      	cbz	r0, 8010cc8 <rcl_service_is_valid+0x10>
 8010cba:	6800      	ldr	r0, [r0, #0]
 8010cbc:	b120      	cbz	r0, 8010cc8 <rcl_service_is_valid+0x10>
 8010cbe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010cc2:	3800      	subs	r0, #0
 8010cc4:	bf18      	it	ne
 8010cc6:	2001      	movne	r0, #1
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	0000      	movs	r0, r0
	...

08010cd0 <rcl_send_service_event_message>:
 8010cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cd2:	b093      	sub	sp, #76	@ 0x4c
 8010cd4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010cd6:	b17a      	cbz	r2, 8010cf8 <rcl_send_service_event_message+0x28>
 8010cd8:	b176      	cbz	r6, 8010cf8 <rcl_send_service_event_message+0x28>
 8010cda:	4604      	mov	r4, r0
 8010cdc:	b150      	cbz	r0, 8010cf4 <rcl_send_service_event_message+0x24>
 8010cde:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8010ce2:	b13b      	cbz	r3, 8010cf4 <rcl_send_service_event_message+0x24>
 8010ce4:	68c0      	ldr	r0, [r0, #12]
 8010ce6:	460f      	mov	r7, r1
 8010ce8:	4615      	mov	r5, r2
 8010cea:	f000 f9bb 	bl	8011064 <rcl_clock_valid>
 8010cee:	b108      	cbz	r0, 8010cf4 <rcl_send_service_event_message+0x24>
 8010cf0:	7a23      	ldrb	r3, [r4, #8]
 8010cf2:	b92b      	cbnz	r3, 8010d00 <rcl_send_service_event_message+0x30>
 8010cf4:	2501      	movs	r5, #1
 8010cf6:	e000      	b.n	8010cfa <rcl_send_service_event_message+0x2a>
 8010cf8:	250b      	movs	r5, #11
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	b013      	add	sp, #76	@ 0x4c
 8010cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d00:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8010d04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d08:	f10d 0c0c 	add.w	ip, sp, #12
 8010d0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d10:	f8de 3000 	ldr.w	r3, [lr]
 8010d14:	f8cc 3000 	str.w	r3, [ip]
 8010d18:	a803      	add	r0, sp, #12
 8010d1a:	f7f9 fae5 	bl	800a2e8 <rcutils_allocator_is_valid>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	d0ea      	beq.n	8010cf8 <rcl_send_service_event_message+0x28>
 8010d22:	6820      	ldr	r0, [r4, #0]
 8010d24:	f7f8 fb7c 	bl	8009420 <rcl_publisher_is_valid>
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	d045      	beq.n	8010db8 <rcl_send_service_event_message+0xe8>
 8010d2c:	4669      	mov	r1, sp
 8010d2e:	68e0      	ldr	r0, [r4, #12]
 8010d30:	f000 fa10 	bl	8011154 <rcl_clock_get_now>
 8010d34:	4601      	mov	r1, r0
 8010d36:	2800      	cmp	r0, #0
 8010d38:	d13b      	bne.n	8010db2 <rcl_send_service_event_message+0xe2>
 8010d3a:	2220      	movs	r2, #32
 8010d3c:	eb0d 0002 	add.w	r0, sp, r2
 8010d40:	f006 fe6c 	bl	8017a1c <memset>
 8010d44:	a324      	add	r3, pc, #144	@ (adr r3, 8010dd8 <rcl_send_service_event_message+0x108>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d4e:	f88d 7020 	strb.w	r7, [sp, #32]
 8010d52:	f7ef fac5 	bl	80002e0 <__aeabi_ldivmod>
 8010d56:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8010d5a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8010d5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010d62:	7a23      	ldrb	r3, [r4, #8]
 8010d64:	6830      	ldr	r0, [r6, #0]
 8010d66:	6871      	ldr	r1, [r6, #4]
 8010d68:	68b2      	ldr	r2, [r6, #8]
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	68f3      	ldr	r3, [r6, #12]
 8010d6e:	bf08      	it	eq
 8010d70:	2500      	moveq	r5, #0
 8010d72:	ae0b      	add	r6, sp, #44	@ 0x2c
 8010d74:	2f01      	cmp	r7, #1
 8010d76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010d78:	d821      	bhi.n	8010dbe <rcl_send_service_event_message+0xee>
 8010d7a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010d7e:	462a      	mov	r2, r5
 8010d80:	a808      	add	r0, sp, #32
 8010d82:	699d      	ldr	r5, [r3, #24]
 8010d84:	a903      	add	r1, sp, #12
 8010d86:	2300      	movs	r3, #0
 8010d88:	47a8      	blx	r5
 8010d8a:	4606      	mov	r6, r0
 8010d8c:	2e00      	cmp	r6, #0
 8010d8e:	d0b1      	beq.n	8010cf4 <rcl_send_service_event_message+0x24>
 8010d90:	4631      	mov	r1, r6
 8010d92:	6820      	ldr	r0, [r4, #0]
 8010d94:	2200      	movs	r2, #0
 8010d96:	f7f8 fb1d 	bl	80093d4 <rcl_publish>
 8010d9a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010d9e:	4605      	mov	r5, r0
 8010da0:	69db      	ldr	r3, [r3, #28]
 8010da2:	a903      	add	r1, sp, #12
 8010da4:	4630      	mov	r0, r6
 8010da6:	4798      	blx	r3
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	d0a6      	beq.n	8010cfa <rcl_send_service_event_message+0x2a>
 8010dac:	f7f9 fac8 	bl	800a340 <rcutils_reset_error>
 8010db0:	e7a3      	b.n	8010cfa <rcl_send_service_event_message+0x2a>
 8010db2:	f7f9 fac5 	bl	800a340 <rcutils_reset_error>
 8010db6:	e79d      	b.n	8010cf4 <rcl_send_service_event_message+0x24>
 8010db8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8010dbc:	e79d      	b.n	8010cfa <rcl_send_service_event_message+0x2a>
 8010dbe:	1eb9      	subs	r1, r7, #2
 8010dc0:	2901      	cmp	r1, #1
 8010dc2:	d8f6      	bhi.n	8010db2 <rcl_send_service_event_message+0xe2>
 8010dc4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8010dc8:	462b      	mov	r3, r5
 8010dca:	a808      	add	r0, sp, #32
 8010dcc:	6995      	ldr	r5, [r2, #24]
 8010dce:	a903      	add	r1, sp, #12
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	47a8      	blx	r5
 8010dd4:	4606      	mov	r6, r0
 8010dd6:	e7d9      	b.n	8010d8c <rcl_send_service_event_message+0xbc>
 8010dd8:	3b9aca00 	.word	0x3b9aca00
 8010ddc:	00000000 	.word	0x00000000

08010de0 <rcl_get_zero_initialized_subscription>:
 8010de0:	4b01      	ldr	r3, [pc, #4]	@ (8010de8 <rcl_get_zero_initialized_subscription+0x8>)
 8010de2:	6818      	ldr	r0, [r3, #0]
 8010de4:	4770      	bx	lr
 8010de6:	bf00      	nop
 8010de8:	080194dc 	.word	0x080194dc

08010dec <rcl_subscription_init>:
 8010dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010df0:	b089      	sub	sp, #36	@ 0x24
 8010df2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010df4:	b1d6      	cbz	r6, 8010e2c <rcl_subscription_init+0x40>
 8010df6:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	4648      	mov	r0, r9
 8010dfe:	460d      	mov	r5, r1
 8010e00:	4690      	mov	r8, r2
 8010e02:	461f      	mov	r7, r3
 8010e04:	f7f9 fa70 	bl	800a2e8 <rcutils_allocator_is_valid>
 8010e08:	b180      	cbz	r0, 8010e2c <rcl_subscription_init+0x40>
 8010e0a:	b17c      	cbz	r4, 8010e2c <rcl_subscription_init+0x40>
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f7ff fd95 	bl	801093c <rcl_node_is_valid>
 8010e12:	2800      	cmp	r0, #0
 8010e14:	d054      	beq.n	8010ec0 <rcl_subscription_init+0xd4>
 8010e16:	f1b8 0f00 	cmp.w	r8, #0
 8010e1a:	d007      	beq.n	8010e2c <rcl_subscription_init+0x40>
 8010e1c:	b137      	cbz	r7, 8010e2c <rcl_subscription_init+0x40>
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	b14b      	cbz	r3, 8010e36 <rcl_subscription_init+0x4a>
 8010e22:	2764      	movs	r7, #100	@ 0x64
 8010e24:	4638      	mov	r0, r7
 8010e26:	b009      	add	sp, #36	@ 0x24
 8010e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e2c:	270b      	movs	r7, #11
 8010e2e:	4638      	mov	r0, r7
 8010e30:	b009      	add	sp, #36	@ 0x24
 8010e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e36:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010e3a:	aa07      	add	r2, sp, #28
 8010e3c:	9205      	str	r2, [sp, #20]
 8010e3e:	9307      	str	r3, [sp, #28]
 8010e40:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010e44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010e4c:	4639      	mov	r1, r7
 8010e4e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8010e52:	4628      	mov	r0, r5
 8010e54:	f7ff fe02 	bl	8010a5c <rcl_node_resolve_name>
 8010e58:	4607      	mov	r7, r0
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d15f      	bne.n	8010f1e <rcl_subscription_init+0x132>
 8010e5e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8010e62:	21d0      	movs	r1, #208	@ 0xd0
 8010e64:	2001      	movs	r0, #1
 8010e66:	4798      	blx	r3
 8010e68:	6020      	str	r0, [r4, #0]
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d05d      	beq.n	8010f2a <rcl_subscription_init+0x13e>
 8010e6e:	2278      	movs	r2, #120	@ 0x78
 8010e70:	4631      	mov	r1, r6
 8010e72:	f006 feae 	bl	8017bd2 <memcpy>
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7ff fd82 	bl	8010980 <rcl_node_get_rmw_handle>
 8010e7c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8010e80:	9300      	str	r3, [sp, #0]
 8010e82:	9a07      	ldr	r2, [sp, #28]
 8010e84:	6827      	ldr	r7, [r4, #0]
 8010e86:	4641      	mov	r1, r8
 8010e88:	4633      	mov	r3, r6
 8010e8a:	f003 fbb1 	bl	80145f0 <rmw_create_subscription>
 8010e8e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 8010e92:	6827      	ldr	r7, [r4, #0]
 8010e94:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010e98:	b338      	cbz	r0, 8010eea <rcl_subscription_init+0xfe>
 8010e9a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8010e9e:	f003 fc87 	bl	80147b0 <rmw_subscription_get_actual_qos>
 8010ea2:	4607      	mov	r7, r0
 8010ea4:	b988      	cbnz	r0, 8010eca <rcl_subscription_init+0xde>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8010eac:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8010eb0:	9807      	ldr	r0, [sp, #28]
 8010eb2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010eb4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010eb6:	4798      	blx	r3
 8010eb8:	4638      	mov	r0, r7
 8010eba:	b009      	add	sp, #36	@ 0x24
 8010ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ec0:	27c8      	movs	r7, #200	@ 0xc8
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	b009      	add	sp, #36	@ 0x24
 8010ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eca:	6827      	ldr	r7, [r4, #0]
 8010ecc:	b32f      	cbz	r7, 8010f1a <rcl_subscription_init+0x12e>
 8010ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010ed2:	b153      	cbz	r3, 8010eea <rcl_subscription_init+0xfe>
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f7ff fd53 	bl	8010980 <rcl_node_get_rmw_handle>
 8010eda:	6823      	ldr	r3, [r4, #0]
 8010edc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8010ee0:	f003 fc74 	bl	80147cc <rmw_destroy_subscription>
 8010ee4:	6827      	ldr	r7, [r4, #0]
 8010ee6:	4638      	mov	r0, r7
 8010ee8:	b197      	cbz	r7, 8010f10 <rcl_subscription_init+0x124>
 8010eea:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f7f9 f9fa 	bl	800a2e8 <rcutils_allocator_is_valid>
 8010ef4:	b1e8      	cbz	r0, 8010f32 <rcl_subscription_init+0x146>
 8010ef6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010ef8:	b1d8      	cbz	r0, 8010f32 <rcl_subscription_init+0x146>
 8010efa:	4629      	mov	r1, r5
 8010efc:	f002 fb94 	bl	8013628 <rmw_subscription_content_filter_options_fini>
 8010f00:	4605      	mov	r5, r0
 8010f02:	b9a0      	cbnz	r0, 8010f2e <rcl_subscription_init+0x142>
 8010f04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010f08:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010f0a:	4798      	blx	r3
 8010f0c:	6820      	ldr	r0, [r4, #0]
 8010f0e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8010f10:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010f12:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010f14:	4798      	blx	r3
 8010f16:	2300      	movs	r3, #0
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	2701      	movs	r7, #1
 8010f1c:	e7c8      	b.n	8010eb0 <rcl_subscription_init+0xc4>
 8010f1e:	2867      	cmp	r0, #103	@ 0x67
 8010f20:	d0c6      	beq.n	8010eb0 <rcl_subscription_init+0xc4>
 8010f22:	2869      	cmp	r0, #105	@ 0x69
 8010f24:	d007      	beq.n	8010f36 <rcl_subscription_init+0x14a>
 8010f26:	280a      	cmp	r0, #10
 8010f28:	d1f7      	bne.n	8010f1a <rcl_subscription_init+0x12e>
 8010f2a:	270a      	movs	r7, #10
 8010f2c:	e7c0      	b.n	8010eb0 <rcl_subscription_init+0xc4>
 8010f2e:	f7ff f93d 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 8010f32:	6820      	ldr	r0, [r4, #0]
 8010f34:	e7ec      	b.n	8010f10 <rcl_subscription_init+0x124>
 8010f36:	2767      	movs	r7, #103	@ 0x67
 8010f38:	e7ba      	b.n	8010eb0 <rcl_subscription_init+0xc4>
 8010f3a:	bf00      	nop

08010f3c <rcl_subscription_get_default_options>:
 8010f3c:	b510      	push	{r4, lr}
 8010f3e:	4907      	ldr	r1, [pc, #28]	@ (8010f5c <rcl_subscription_get_default_options+0x20>)
 8010f40:	4604      	mov	r4, r0
 8010f42:	2250      	movs	r2, #80	@ 0x50
 8010f44:	f006 fe45 	bl	8017bd2 <memcpy>
 8010f48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010f4c:	f7f9 f9a0 	bl	800a290 <rcutils_get_default_allocator>
 8010f50:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8010f54:	f002 fb82 	bl	801365c <rmw_get_default_subscription_options>
 8010f58:	4620      	mov	r0, r4
 8010f5a:	bd10      	pop	{r4, pc}
 8010f5c:	080194e0 	.word	0x080194e0

08010f60 <rcl_take>:
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d04b      	beq.n	8010ffc <rcl_take+0x9c>
 8010f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f68:	4615      	mov	r5, r2
 8010f6a:	6802      	ldr	r2, [r0, #0]
 8010f6c:	b0a0      	sub	sp, #128	@ 0x80
 8010f6e:	4604      	mov	r4, r0
 8010f70:	2a00      	cmp	r2, #0
 8010f72:	d03b      	beq.n	8010fec <rcl_take+0x8c>
 8010f74:	461f      	mov	r7, r3
 8010f76:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d036      	beq.n	8010fec <rcl_take+0x8c>
 8010f7e:	460e      	mov	r6, r1
 8010f80:	2900      	cmp	r1, #0
 8010f82:	d039      	beq.n	8010ff8 <rcl_take+0x98>
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	d03d      	beq.n	8011004 <rcl_take+0xa4>
 8010f88:	a802      	add	r0, sp, #8
 8010f8a:	f002 fbf3 	bl	8013774 <rmw_get_zero_initialized_message_info>
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	f10d 0c08 	add.w	ip, sp, #8
 8010f94:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8010f98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f9c:	46ae      	mov	lr, r5
 8010f9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010fa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fa6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010faa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010fb2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010fb6:	462b      	mov	r3, r5
 8010fb8:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010fbc:	f04f 0800 	mov.w	r8, #0
 8010fc0:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8010fc4:	4631      	mov	r1, r6
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8010fcc:	9700      	str	r7, [sp, #0]
 8010fce:	f003 fc5d 	bl	801488c <rmw_take_with_info>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	b9c0      	cbnz	r0, 8011008 <rcl_take+0xa8>
 8010fd6:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8010fda:	f240 1291 	movw	r2, #401	@ 0x191
 8010fde:	2900      	cmp	r1, #0
 8010fe0:	bf08      	it	eq
 8010fe2:	4613      	moveq	r3, r2
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	b020      	add	sp, #128	@ 0x80
 8010fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fec:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	b020      	add	sp, #128	@ 0x80
 8010ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff8:	230b      	movs	r3, #11
 8010ffa:	e7f3      	b.n	8010fe4 <rcl_take+0x84>
 8010ffc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011000:	4618      	mov	r0, r3
 8011002:	4770      	bx	lr
 8011004:	ad12      	add	r5, sp, #72	@ 0x48
 8011006:	e7bf      	b.n	8010f88 <rcl_take+0x28>
 8011008:	f7ff f8d0 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 801100c:	4603      	mov	r3, r0
 801100e:	e7e9      	b.n	8010fe4 <rcl_take+0x84>

08011010 <rcl_subscription_get_rmw_handle>:
 8011010:	b118      	cbz	r0, 801101a <rcl_subscription_get_rmw_handle+0xa>
 8011012:	6800      	ldr	r0, [r0, #0]
 8011014:	b108      	cbz	r0, 801101a <rcl_subscription_get_rmw_handle+0xa>
 8011016:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801101a:	4770      	bx	lr

0801101c <rcl_subscription_is_valid>:
 801101c:	b130      	cbz	r0, 801102c <rcl_subscription_is_valid+0x10>
 801101e:	6800      	ldr	r0, [r0, #0]
 8011020:	b120      	cbz	r0, 801102c <rcl_subscription_is_valid+0x10>
 8011022:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8011026:	3800      	subs	r0, #0
 8011028:	bf18      	it	ne
 801102a:	2001      	movne	r0, #1
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop

08011030 <rcl_get_system_time>:
 8011030:	4608      	mov	r0, r1
 8011032:	f7f9 b9a1 	b.w	800a378 <rcutils_system_time_now>
 8011036:	bf00      	nop

08011038 <rcl_get_steady_time>:
 8011038:	4608      	mov	r0, r1
 801103a:	f7f9 b9c7 	b.w	800a3cc <rcutils_steady_time_now>
 801103e:	bf00      	nop

08011040 <rcl_get_ros_time>:
 8011040:	7a03      	ldrb	r3, [r0, #8]
 8011042:	b510      	push	{r4, lr}
 8011044:	460c      	mov	r4, r1
 8011046:	b143      	cbz	r3, 801105a <rcl_get_ros_time+0x1a>
 8011048:	2105      	movs	r1, #5
 801104a:	f001 ff81 	bl	8012f50 <__atomic_load_8>
 801104e:	4602      	mov	r2, r0
 8011050:	460b      	mov	r3, r1
 8011052:	e9c4 2300 	strd	r2, r3, [r4]
 8011056:	2000      	movs	r0, #0
 8011058:	bd10      	pop	{r4, pc}
 801105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801105e:	4608      	mov	r0, r1
 8011060:	f7f9 b98a 	b.w	800a378 <rcutils_system_time_now>

08011064 <rcl_clock_valid>:
 8011064:	b138      	cbz	r0, 8011076 <rcl_clock_valid+0x12>
 8011066:	7803      	ldrb	r3, [r0, #0]
 8011068:	b123      	cbz	r3, 8011074 <rcl_clock_valid+0x10>
 801106a:	68c0      	ldr	r0, [r0, #12]
 801106c:	3800      	subs	r0, #0
 801106e:	bf18      	it	ne
 8011070:	2001      	movne	r0, #1
 8011072:	4770      	bx	lr
 8011074:	4618      	mov	r0, r3
 8011076:	4770      	bx	lr

08011078 <rcl_clock_init>:
 8011078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107a:	4605      	mov	r5, r0
 801107c:	4610      	mov	r0, r2
 801107e:	4614      	mov	r4, r2
 8011080:	460e      	mov	r6, r1
 8011082:	f7f9 f931 	bl	800a2e8 <rcutils_allocator_is_valid>
 8011086:	b128      	cbz	r0, 8011094 <rcl_clock_init+0x1c>
 8011088:	2d03      	cmp	r5, #3
 801108a:	d803      	bhi.n	8011094 <rcl_clock_init+0x1c>
 801108c:	e8df f005 	tbb	[pc, r5]
 8011090:	044c291a 	.word	0x044c291a
 8011094:	200b      	movs	r0, #11
 8011096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011098:	2e00      	cmp	r6, #0
 801109a:	d0fb      	beq.n	8011094 <rcl_clock_init+0x1c>
 801109c:	2c00      	cmp	r4, #0
 801109e:	d0f9      	beq.n	8011094 <rcl_clock_init+0x1c>
 80110a0:	2300      	movs	r3, #0
 80110a2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80110a6:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 801114c <rcl_clock_init+0xd4>
 80110aa:	6133      	str	r3, [r6, #16]
 80110ac:	f106 0514 	add.w	r5, r6, #20
 80110b0:	2703      	movs	r7, #3
 80110b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	602b      	str	r3, [r5, #0]
 80110ba:	f8c6 c00c 	str.w	ip, [r6, #12]
 80110be:	7037      	strb	r7, [r6, #0]
 80110c0:	2000      	movs	r0, #0
 80110c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c4:	2e00      	cmp	r6, #0
 80110c6:	d0e5      	beq.n	8011094 <rcl_clock_init+0x1c>
 80110c8:	2300      	movs	r3, #0
 80110ca:	7033      	strb	r3, [r6, #0]
 80110cc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80110d0:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80110d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110d6:	f106 0514 	add.w	r5, r6, #20
 80110da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	602b      	str	r3, [r5, #0]
 80110e0:	e7ee      	b.n	80110c0 <rcl_clock_init+0x48>
 80110e2:	2e00      	cmp	r6, #0
 80110e4:	d0d6      	beq.n	8011094 <rcl_clock_init+0x1c>
 80110e6:	2c00      	cmp	r4, #0
 80110e8:	d0d4      	beq.n	8011094 <rcl_clock_init+0x1c>
 80110ea:	2700      	movs	r7, #0
 80110ec:	7037      	strb	r7, [r6, #0]
 80110ee:	46a4      	mov	ip, r4
 80110f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110f4:	f106 0514 	add.w	r5, r6, #20
 80110f8:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80110fc:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011102:	f8dc 3000 	ldr.w	r3, [ip]
 8011106:	602b      	str	r3, [r5, #0]
 8011108:	6921      	ldr	r1, [r4, #16]
 801110a:	6823      	ldr	r3, [r4, #0]
 801110c:	2010      	movs	r0, #16
 801110e:	4798      	blx	r3
 8011110:	6130      	str	r0, [r6, #16]
 8011112:	b1b8      	cbz	r0, 8011144 <rcl_clock_init+0xcc>
 8011114:	2200      	movs	r2, #0
 8011116:	2300      	movs	r3, #0
 8011118:	e9c0 2300 	strd	r2, r3, [r0]
 801111c:	4a0a      	ldr	r2, [pc, #40]	@ (8011148 <rcl_clock_init+0xd0>)
 801111e:	7207      	strb	r7, [r0, #8]
 8011120:	2301      	movs	r3, #1
 8011122:	60f2      	str	r2, [r6, #12]
 8011124:	7033      	strb	r3, [r6, #0]
 8011126:	e7cb      	b.n	80110c0 <rcl_clock_init+0x48>
 8011128:	2e00      	cmp	r6, #0
 801112a:	d0b3      	beq.n	8011094 <rcl_clock_init+0x1c>
 801112c:	2c00      	cmp	r4, #0
 801112e:	d0b1      	beq.n	8011094 <rcl_clock_init+0x1c>
 8011130:	2300      	movs	r3, #0
 8011132:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011136:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8011150 <rcl_clock_init+0xd8>
 801113a:	6133      	str	r3, [r6, #16]
 801113c:	f106 0514 	add.w	r5, r6, #20
 8011140:	2702      	movs	r7, #2
 8011142:	e7b6      	b.n	80110b2 <rcl_clock_init+0x3a>
 8011144:	200a      	movs	r0, #10
 8011146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011148:	08011041 	.word	0x08011041
 801114c:	08011039 	.word	0x08011039
 8011150:	08011031 	.word	0x08011031

08011154 <rcl_clock_get_now>:
 8011154:	b140      	cbz	r0, 8011168 <rcl_clock_get_now+0x14>
 8011156:	b139      	cbz	r1, 8011168 <rcl_clock_get_now+0x14>
 8011158:	7803      	ldrb	r3, [r0, #0]
 801115a:	b11b      	cbz	r3, 8011164 <rcl_clock_get_now+0x10>
 801115c:	68c3      	ldr	r3, [r0, #12]
 801115e:	b10b      	cbz	r3, 8011164 <rcl_clock_get_now+0x10>
 8011160:	6900      	ldr	r0, [r0, #16]
 8011162:	4718      	bx	r3
 8011164:	2001      	movs	r0, #1
 8011166:	4770      	bx	lr
 8011168:	200b      	movs	r0, #11
 801116a:	4770      	bx	lr

0801116c <rcl_is_enabled_ros_time_override>:
 801116c:	b158      	cbz	r0, 8011186 <rcl_is_enabled_ros_time_override+0x1a>
 801116e:	b151      	cbz	r1, 8011186 <rcl_is_enabled_ros_time_override+0x1a>
 8011170:	7803      	ldrb	r3, [r0, #0]
 8011172:	2b01      	cmp	r3, #1
 8011174:	d105      	bne.n	8011182 <rcl_is_enabled_ros_time_override+0x16>
 8011176:	6902      	ldr	r2, [r0, #16]
 8011178:	b11a      	cbz	r2, 8011182 <rcl_is_enabled_ros_time_override+0x16>
 801117a:	7a13      	ldrb	r3, [r2, #8]
 801117c:	700b      	strb	r3, [r1, #0]
 801117e:	2000      	movs	r0, #0
 8011180:	4770      	bx	lr
 8011182:	2001      	movs	r0, #1
 8011184:	4770      	bx	lr
 8011186:	200b      	movs	r0, #11
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop

0801118c <rcl_clock_add_jump_callback>:
 801118c:	b082      	sub	sp, #8
 801118e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011192:	a906      	add	r1, sp, #24
 8011194:	e881 000c 	stmia.w	r1, {r2, r3}
 8011198:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 801119c:	b320      	cbz	r0, 80111e8 <rcl_clock_add_jump_callback+0x5c>
 801119e:	4605      	mov	r5, r0
 80111a0:	3014      	adds	r0, #20
 80111a2:	f7f9 f8a1 	bl	800a2e8 <rcutils_allocator_is_valid>
 80111a6:	b1f8      	cbz	r0, 80111e8 <rcl_clock_add_jump_callback+0x5c>
 80111a8:	b1f7      	cbz	r7, 80111e8 <rcl_clock_add_jump_callback+0x5c>
 80111aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	db1b      	blt.n	80111e8 <rcl_clock_add_jump_callback+0x5c>
 80111b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80111b4:	2a01      	cmp	r2, #1
 80111b6:	f173 0300 	sbcs.w	r3, r3, #0
 80111ba:	da15      	bge.n	80111e8 <rcl_clock_add_jump_callback+0x5c>
 80111bc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 80111c0:	2c00      	cmp	r4, #0
 80111c2:	d042      	beq.n	801124a <rcl_clock_add_jump_callback+0xbe>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2200      	movs	r2, #0
 80111c8:	e003      	b.n	80111d2 <rcl_clock_add_jump_callback+0x46>
 80111ca:	4294      	cmp	r4, r2
 80111cc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80111d0:	d011      	beq.n	80111f6 <rcl_clock_add_jump_callback+0x6a>
 80111d2:	6819      	ldr	r1, [r3, #0]
 80111d4:	42b9      	cmp	r1, r7
 80111d6:	f102 0201 	add.w	r2, r2, #1
 80111da:	d1f6      	bne.n	80111ca <rcl_clock_add_jump_callback+0x3e>
 80111dc:	6a19      	ldr	r1, [r3, #32]
 80111de:	42b1      	cmp	r1, r6
 80111e0:	d1f3      	bne.n	80111ca <rcl_clock_add_jump_callback+0x3e>
 80111e2:	f04f 0e01 	mov.w	lr, #1
 80111e6:	e001      	b.n	80111ec <rcl_clock_add_jump_callback+0x60>
 80111e8:	f04f 0e0b 	mov.w	lr, #11
 80111ec:	4670      	mov	r0, lr
 80111ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111f2:	b002      	add	sp, #8
 80111f4:	4770      	bx	lr
 80111f6:	3401      	adds	r4, #1
 80111f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80111fc:	00e1      	lsls	r1, r4, #3
 80111fe:	69eb      	ldr	r3, [r5, #28]
 8011200:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011202:	4798      	blx	r3
 8011204:	b1f0      	cbz	r0, 8011244 <rcl_clock_add_jump_callback+0xb8>
 8011206:	68ab      	ldr	r3, [r5, #8]
 8011208:	6068      	str	r0, [r5, #4]
 801120a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801120e:	f10d 0c18 	add.w	ip, sp, #24
 8011212:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8011216:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 801121a:	f103 0801 	add.w	r8, r3, #1
 801121e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011222:	f104 0708 	add.w	r7, r4, #8
 8011226:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011228:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801122c:	f04f 0e00 	mov.w	lr, #0
 8011230:	e887 0003 	stmia.w	r7, {r0, r1}
 8011234:	6226      	str	r6, [r4, #32]
 8011236:	4670      	mov	r0, lr
 8011238:	f8c5 8008 	str.w	r8, [r5, #8]
 801123c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011240:	b002      	add	sp, #8
 8011242:	4770      	bx	lr
 8011244:	f04f 0e0a 	mov.w	lr, #10
 8011248:	e7d0      	b.n	80111ec <rcl_clock_add_jump_callback+0x60>
 801124a:	2128      	movs	r1, #40	@ 0x28
 801124c:	e7d7      	b.n	80111fe <rcl_clock_add_jump_callback+0x72>
 801124e:	bf00      	nop

08011250 <rcl_clock_remove_jump_callback>:
 8011250:	2800      	cmp	r0, #0
 8011252:	d05a      	beq.n	801130a <rcl_clock_remove_jump_callback+0xba>
 8011254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011258:	4605      	mov	r5, r0
 801125a:	3014      	adds	r0, #20
 801125c:	460f      	mov	r7, r1
 801125e:	4692      	mov	sl, r2
 8011260:	f7f9 f842 	bl	800a2e8 <rcutils_allocator_is_valid>
 8011264:	2800      	cmp	r0, #0
 8011266:	d03f      	beq.n	80112e8 <rcl_clock_remove_jump_callback+0x98>
 8011268:	2f00      	cmp	r7, #0
 801126a:	d03d      	beq.n	80112e8 <rcl_clock_remove_jump_callback+0x98>
 801126c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8011270:	f1b8 0f00 	cmp.w	r8, #0
 8011274:	d00c      	beq.n	8011290 <rcl_clock_remove_jump_callback+0x40>
 8011276:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801127a:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801127e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8011282:	464c      	mov	r4, r9
 8011284:	6823      	ldr	r3, [r4, #0]
 8011286:	42bb      	cmp	r3, r7
 8011288:	d005      	beq.n	8011296 <rcl_clock_remove_jump_callback+0x46>
 801128a:	3428      	adds	r4, #40	@ 0x28
 801128c:	42b4      	cmp	r4, r6
 801128e:	d1f9      	bne.n	8011284 <rcl_clock_remove_jump_callback+0x34>
 8011290:	2001      	movs	r0, #1
 8011292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011296:	6a23      	ldr	r3, [r4, #32]
 8011298:	3428      	adds	r4, #40	@ 0x28
 801129a:	42b4      	cmp	r4, r6
 801129c:	d02c      	beq.n	80112f8 <rcl_clock_remove_jump_callback+0xa8>
 801129e:	4553      	cmp	r3, sl
 80112a0:	d1f0      	bne.n	8011284 <rcl_clock_remove_jump_callback+0x34>
 80112a2:	46a6      	mov	lr, r4
 80112a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80112a8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80112ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80112b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80112bc:	3428      	adds	r4, #40	@ 0x28
 80112be:	42a6      	cmp	r6, r4
 80112c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80112c4:	d1ed      	bne.n	80112a2 <rcl_clock_remove_jump_callback+0x52>
 80112c6:	f108 34ff 	add.w	r4, r8, #4294967295
 80112ca:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80112cc:	60ac      	str	r4, [r5, #8]
 80112ce:	b174      	cbz	r4, 80112ee <rcl_clock_remove_jump_callback+0x9e>
 80112d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80112d4:	00e1      	lsls	r1, r4, #3
 80112d6:	69eb      	ldr	r3, [r5, #28]
 80112d8:	4648      	mov	r0, r9
 80112da:	4798      	blx	r3
 80112dc:	4604      	mov	r4, r0
 80112de:	b1b0      	cbz	r0, 801130e <rcl_clock_remove_jump_callback+0xbe>
 80112e0:	606c      	str	r4, [r5, #4]
 80112e2:	2000      	movs	r0, #0
 80112e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112e8:	200b      	movs	r0, #11
 80112ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ee:	69ab      	ldr	r3, [r5, #24]
 80112f0:	4611      	mov	r1, r2
 80112f2:	4648      	mov	r0, r9
 80112f4:	4798      	blx	r3
 80112f6:	e7f3      	b.n	80112e0 <rcl_clock_remove_jump_callback+0x90>
 80112f8:	4553      	cmp	r3, sl
 80112fa:	d1c9      	bne.n	8011290 <rcl_clock_remove_jump_callback+0x40>
 80112fc:	f108 34ff 	add.w	r4, r8, #4294967295
 8011300:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011302:	60ac      	str	r4, [r5, #8]
 8011304:	2c00      	cmp	r4, #0
 8011306:	d1e3      	bne.n	80112d0 <rcl_clock_remove_jump_callback+0x80>
 8011308:	e7f1      	b.n	80112ee <rcl_clock_remove_jump_callback+0x9e>
 801130a:	200b      	movs	r0, #11
 801130c:	4770      	bx	lr
 801130e:	200a      	movs	r0, #10
 8011310:	e7eb      	b.n	80112ea <rcl_clock_remove_jump_callback+0x9a>
 8011312:	bf00      	nop

08011314 <_rcl_timer_time_jump>:
 8011314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011318:	4681      	mov	r9, r0
 801131a:	b087      	sub	sp, #28
 801131c:	4614      	mov	r4, r2
 801131e:	b131      	cbz	r1, 801132e <_rcl_timer_time_jump+0x1a>
 8011320:	7803      	ldrb	r3, [r0, #0]
 8011322:	3b02      	subs	r3, #2
 8011324:	2b01      	cmp	r3, #1
 8011326:	d93e      	bls.n	80113a6 <_rcl_timer_time_jump+0x92>
 8011328:	b007      	add	sp, #28
 801132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132e:	6810      	ldr	r0, [r2, #0]
 8011330:	a904      	add	r1, sp, #16
 8011332:	f7ff ff0f 	bl	8011154 <rcl_clock_get_now>
 8011336:	2800      	cmp	r0, #0
 8011338:	d1f6      	bne.n	8011328 <_rcl_timer_time_jump+0x14>
 801133a:	f104 0a20 	add.w	sl, r4, #32
 801133e:	2105      	movs	r1, #5
 8011340:	4650      	mov	r0, sl
 8011342:	f001 fe05 	bl	8012f50 <__atomic_load_8>
 8011346:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 801134a:	4680      	mov	r8, r0
 801134c:	460e      	mov	r6, r1
 801134e:	4658      	mov	r0, fp
 8011350:	2105      	movs	r1, #5
 8011352:	f001 fdfd 	bl	8012f50 <__atomic_load_8>
 8011356:	4607      	mov	r7, r0
 8011358:	460d      	mov	r5, r1
 801135a:	f104 0018 	add.w	r0, r4, #24
 801135e:	2105      	movs	r1, #5
 8011360:	f001 fdf6 	bl	8012f50 <__atomic_load_8>
 8011364:	f899 3000 	ldrb.w	r3, [r9]
 8011368:	9003      	str	r0, [sp, #12]
 801136a:	3b02      	subs	r3, #2
 801136c:	2b01      	cmp	r3, #1
 801136e:	4689      	mov	r9, r1
 8011370:	d935      	bls.n	80113de <_rcl_timer_time_jump+0xca>
 8011372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011376:	42ba      	cmp	r2, r7
 8011378:	eb73 0505 	sbcs.w	r5, r3, r5
 801137c:	da57      	bge.n	801142e <_rcl_timer_time_jump+0x11a>
 801137e:	4542      	cmp	r2, r8
 8011380:	eb73 0606 	sbcs.w	r6, r3, r6
 8011384:	dad0      	bge.n	8011328 <_rcl_timer_time_jump+0x14>
 8011386:	1882      	adds	r2, r0, r2
 8011388:	f04f 0405 	mov.w	r4, #5
 801138c:	eb43 0309 	adc.w	r3, r3, r9
 8011390:	4658      	mov	r0, fp
 8011392:	9400      	str	r4, [sp, #0]
 8011394:	f001 fe12 	bl	8012fbc <__atomic_store_8>
 8011398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801139c:	9400      	str	r4, [sp, #0]
 801139e:	4650      	mov	r0, sl
 80113a0:	f001 fe0c 	bl	8012fbc <__atomic_store_8>
 80113a4:	e7c0      	b.n	8011328 <_rcl_timer_time_jump+0x14>
 80113a6:	6810      	ldr	r0, [r2, #0]
 80113a8:	a904      	add	r1, sp, #16
 80113aa:	f7ff fed3 	bl	8011154 <rcl_clock_get_now>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d1ba      	bne.n	8011328 <_rcl_timer_time_jump+0x14>
 80113b2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80113b6:	4313      	orrs	r3, r2
 80113b8:	d0b6      	beq.n	8011328 <_rcl_timer_time_jump+0x14>
 80113ba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80113be:	2105      	movs	r1, #5
 80113c0:	f001 fdc6 	bl	8012f50 <__atomic_load_8>
 80113c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113c8:	1a82      	subs	r2, r0, r2
 80113ca:	f04f 0005 	mov.w	r0, #5
 80113ce:	9000      	str	r0, [sp, #0]
 80113d0:	eb61 0303 	sbc.w	r3, r1, r3
 80113d4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80113d8:	f001 fdf0 	bl	8012fbc <__atomic_store_8>
 80113dc:	e7a4      	b.n	8011328 <_rcl_timer_time_jump+0x14>
 80113de:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80113e2:	4313      	orrs	r3, r2
 80113e4:	d0a0      	beq.n	8011328 <_rcl_timer_time_jump+0x14>
 80113e6:	2605      	movs	r6, #5
 80113e8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80113ec:	2300      	movs	r3, #0
 80113ee:	9600      	str	r6, [sp, #0]
 80113f0:	2200      	movs	r2, #0
 80113f2:	f001 fe19 	bl	8013028 <__atomic_exchange_8>
 80113f6:	ea51 0300 	orrs.w	r3, r1, r0
 80113fa:	4604      	mov	r4, r0
 80113fc:	460d      	mov	r5, r1
 80113fe:	d093      	beq.n	8011328 <_rcl_timer_time_jump+0x14>
 8011400:	9a04      	ldr	r2, [sp, #16]
 8011402:	9b05      	ldr	r3, [sp, #20]
 8011404:	9600      	str	r6, [sp, #0]
 8011406:	1b12      	subs	r2, r2, r4
 8011408:	eb63 0301 	sbc.w	r3, r3, r1
 801140c:	9903      	ldr	r1, [sp, #12]
 801140e:	1852      	adds	r2, r2, r1
 8011410:	eb43 0309 	adc.w	r3, r3, r9
 8011414:	4658      	mov	r0, fp
 8011416:	f001 fdd1 	bl	8012fbc <__atomic_store_8>
 801141a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801141e:	1b12      	subs	r2, r2, r4
 8011420:	9600      	str	r6, [sp, #0]
 8011422:	eb63 0305 	sbc.w	r3, r3, r5
 8011426:	4650      	mov	r0, sl
 8011428:	f001 fdc8 	bl	8012fbc <__atomic_store_8>
 801142c:	e77c      	b.n	8011328 <_rcl_timer_time_jump+0x14>
 801142e:	f104 0008 	add.w	r0, r4, #8
 8011432:	f005 fa1f 	bl	8016874 <rcl_trigger_guard_condition>
 8011436:	e777      	b.n	8011328 <_rcl_timer_time_jump+0x14>

08011438 <rcl_get_zero_initialized_timer>:
 8011438:	4b01      	ldr	r3, [pc, #4]	@ (8011440 <rcl_get_zero_initialized_timer+0x8>)
 801143a:	6818      	ldr	r0, [r3, #0]
 801143c:	4770      	bx	lr
 801143e:	bf00      	nop
 8011440:	08019530 	.word	0x08019530
 8011444:	00000000 	.word	0x00000000

08011448 <rcl_timer_init2>:
 8011448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801144c:	b0ae      	sub	sp, #184	@ 0xb8
 801144e:	4604      	mov	r4, r0
 8011450:	a839      	add	r0, sp, #228	@ 0xe4
 8011452:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 8011456:	460d      	mov	r5, r1
 8011458:	4691      	mov	r9, r2
 801145a:	f7f8 ff45 	bl	800a2e8 <rcutils_allocator_is_valid>
 801145e:	2800      	cmp	r0, #0
 8011460:	f000 8097 	beq.w	8011592 <rcl_timer_init2+0x14a>
 8011464:	2c00      	cmp	r4, #0
 8011466:	f000 8094 	beq.w	8011592 <rcl_timer_init2+0x14a>
 801146a:	2d00      	cmp	r5, #0
 801146c:	f000 8091 	beq.w	8011592 <rcl_timer_init2+0x14a>
 8011470:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8011472:	2b00      	cmp	r3, #0
 8011474:	f2c0 808d 	blt.w	8011592 <rcl_timer_init2+0x14a>
 8011478:	6823      	ldr	r3, [r4, #0]
 801147a:	b123      	cbz	r3, 8011486 <rcl_timer_init2+0x3e>
 801147c:	2664      	movs	r6, #100	@ 0x64
 801147e:	4630      	mov	r0, r6
 8011480:	b02e      	add	sp, #184	@ 0xb8
 8011482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011486:	a908      	add	r1, sp, #32
 8011488:	4628      	mov	r0, r5
 801148a:	f7ff fe63 	bl	8011154 <rcl_clock_get_now>
 801148e:	4606      	mov	r6, r0
 8011490:	2800      	cmp	r0, #0
 8011492:	d1f4      	bne.n	801147e <rcl_timer_init2+0x36>
 8011494:	ae06      	add	r6, sp, #24
 8011496:	4630      	mov	r0, r6
 8011498:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 801149c:	f005 f90c 	bl	80166b8 <rcl_get_zero_initialized_guard_condition>
 80114a0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114a4:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80114a8:	ae0b      	add	r6, sp, #44	@ 0x2c
 80114aa:	e88a 0003 	stmia.w	sl, {r0, r1}
 80114ae:	4630      	mov	r0, r6
 80114b0:	f005 f9da 	bl	8016868 <rcl_guard_condition_get_default_options>
 80114b4:	ab0d      	add	r3, sp, #52	@ 0x34
 80114b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80114ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80114be:	4649      	mov	r1, r9
 80114c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80114c4:	4650      	mov	r0, sl
 80114c6:	f005 f901 	bl	80166cc <rcl_guard_condition_init>
 80114ca:	4606      	mov	r6, r0
 80114cc:	2800      	cmp	r0, #0
 80114ce:	d1d6      	bne.n	801147e <rcl_timer_init2+0x36>
 80114d0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80114d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80114d4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 80114d8:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80114dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80114e0:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 80114e2:	902a      	str	r0, [sp, #168]	@ 0xa8
 80114e4:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 80114e8:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 80115c0 <rcl_timer_init2+0x178>
 80114ec:	19d0      	adds	r0, r2, r7
 80114ee:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 80114f0:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 80114f4:	eb43 0107 	adc.w	r1, r3, r7
 80114f8:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80114fc:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8011500:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8011504:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011508:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 801150c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011510:	f8dc 3000 	ldr.w	r3, [ip]
 8011514:	f8ce 3000 	str.w	r3, [lr]
 8011518:	f088 0801 	eor.w	r8, r8, #1
 801151c:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8011520:	4619      	mov	r1, r3
 8011522:	2060      	movs	r0, #96	@ 0x60
 8011524:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011526:	4798      	blx	r3
 8011528:	4680      	mov	r8, r0
 801152a:	6020      	str	r0, [r4, #0]
 801152c:	2800      	cmp	r0, #0
 801152e:	d035      	beq.n	801159c <rcl_timer_init2+0x154>
 8011530:	a916      	add	r1, sp, #88	@ 0x58
 8011532:	2260      	movs	r2, #96	@ 0x60
 8011534:	f006 fb4d 	bl	8017bd2 <memcpy>
 8011538:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	2b01      	cmp	r3, #1
 801153e:	d19e      	bne.n	801147e <rcl_timer_init2+0x36>
 8011540:	2001      	movs	r0, #1
 8011542:	2100      	movs	r1, #0
 8011544:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8011548:	f04f 30ff 	mov.w	r0, #4294967295
 801154c:	f04f 31ff 	mov.w	r1, #4294967295
 8011550:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8011554:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8011558:	4b1b      	ldr	r3, [pc, #108]	@ (80115c8 <rcl_timer_init2+0x180>)
 801155a:	9304      	str	r3, [sp, #16]
 801155c:	f8cd 8014 	str.w	r8, [sp, #20]
 8011560:	ab12      	add	r3, sp, #72	@ 0x48
 8011562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011564:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011568:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801156c:	4628      	mov	r0, r5
 801156e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8011572:	f7ff fe0b 	bl	801118c <rcl_clock_add_jump_callback>
 8011576:	4605      	mov	r5, r0
 8011578:	2800      	cmp	r0, #0
 801157a:	d080      	beq.n	801147e <rcl_timer_init2+0x36>
 801157c:	4650      	mov	r0, sl
 801157e:	f005 f951 	bl	8016824 <rcl_guard_condition_fini>
 8011582:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8011584:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8011586:	6820      	ldr	r0, [r4, #0]
 8011588:	4798      	blx	r3
 801158a:	2300      	movs	r3, #0
 801158c:	6023      	str	r3, [r4, #0]
 801158e:	462e      	mov	r6, r5
 8011590:	e775      	b.n	801147e <rcl_timer_init2+0x36>
 8011592:	260b      	movs	r6, #11
 8011594:	4630      	mov	r0, r6
 8011596:	b02e      	add	sp, #184	@ 0xb8
 8011598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801159c:	4650      	mov	r0, sl
 801159e:	f005 f941 	bl	8016824 <rcl_guard_condition_fini>
 80115a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	d001      	beq.n	80115ae <rcl_timer_init2+0x166>
 80115aa:	260a      	movs	r6, #10
 80115ac:	e767      	b.n	801147e <rcl_timer_init2+0x36>
 80115ae:	4906      	ldr	r1, [pc, #24]	@ (80115c8 <rcl_timer_init2+0x180>)
 80115b0:	4622      	mov	r2, r4
 80115b2:	4628      	mov	r0, r5
 80115b4:	f7ff fe4c 	bl	8011250 <rcl_clock_remove_jump_callback>
 80115b8:	e7f7      	b.n	80115aa <rcl_timer_init2+0x162>
 80115ba:	bf00      	nop
 80115bc:	f3af 8000 	nop.w
	...
 80115c8:	08011315 	.word	0x08011315

080115cc <rcl_timer_clock>:
 80115cc:	b130      	cbz	r0, 80115dc <rcl_timer_clock+0x10>
 80115ce:	b129      	cbz	r1, 80115dc <rcl_timer_clock+0x10>
 80115d0:	6803      	ldr	r3, [r0, #0]
 80115d2:	b12b      	cbz	r3, 80115e0 <rcl_timer_clock+0x14>
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	600b      	str	r3, [r1, #0]
 80115d8:	2000      	movs	r0, #0
 80115da:	4770      	bx	lr
 80115dc:	200b      	movs	r0, #11
 80115de:	4770      	bx	lr
 80115e0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop

080115e8 <rcl_timer_call>:
 80115e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ec:	b087      	sub	sp, #28
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d067      	beq.n	80116c2 <rcl_timer_call+0xda>
 80115f2:	6803      	ldr	r3, [r0, #0]
 80115f4:	4604      	mov	r4, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d068      	beq.n	80116cc <rcl_timer_call+0xe4>
 80115fa:	f3bf 8f5b 	dmb	ish
 80115fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011602:	f3bf 8f5b 	dmb	ish
 8011606:	2b00      	cmp	r3, #0
 8011608:	d150      	bne.n	80116ac <rcl_timer_call+0xc4>
 801160a:	6803      	ldr	r3, [r0, #0]
 801160c:	a904      	add	r1, sp, #16
 801160e:	6818      	ldr	r0, [r3, #0]
 8011610:	f7ff fda0 	bl	8011154 <rcl_clock_get_now>
 8011614:	4605      	mov	r5, r0
 8011616:	2800      	cmp	r0, #0
 8011618:	d144      	bne.n	80116a4 <rcl_timer_call+0xbc>
 801161a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801161e:	2b00      	cmp	r3, #0
 8011620:	db4a      	blt.n	80116b8 <rcl_timer_call+0xd0>
 8011622:	6820      	ldr	r0, [r4, #0]
 8011624:	f04f 0a05 	mov.w	sl, #5
 8011628:	f8cd a000 	str.w	sl, [sp]
 801162c:	3020      	adds	r0, #32
 801162e:	f001 fcfb 	bl	8013028 <__atomic_exchange_8>
 8011632:	6823      	ldr	r3, [r4, #0]
 8011634:	f3bf 8f5b 	dmb	ish
 8011638:	4680      	mov	r8, r0
 801163a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801163e:	f3bf 8f5b 	dmb	ish
 8011642:	6820      	ldr	r0, [r4, #0]
 8011644:	4689      	mov	r9, r1
 8011646:	3028      	adds	r0, #40	@ 0x28
 8011648:	4651      	mov	r1, sl
 801164a:	f001 fc81 	bl	8012f50 <__atomic_load_8>
 801164e:	4606      	mov	r6, r0
 8011650:	6820      	ldr	r0, [r4, #0]
 8011652:	460f      	mov	r7, r1
 8011654:	3018      	adds	r0, #24
 8011656:	4651      	mov	r1, sl
 8011658:	f001 fc7a 	bl	8012f50 <__atomic_load_8>
 801165c:	1836      	adds	r6, r6, r0
 801165e:	eb41 0707 	adc.w	r7, r1, r7
 8011662:	4602      	mov	r2, r0
 8011664:	460b      	mov	r3, r1
 8011666:	4682      	mov	sl, r0
 8011668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801166c:	42b0      	cmp	r0, r6
 801166e:	eb71 0c07 	sbcs.w	ip, r1, r7
 8011672:	db04      	blt.n	801167e <rcl_timer_call+0x96>
 8011674:	ea53 0c02 	orrs.w	ip, r3, r2
 8011678:	d12b      	bne.n	80116d2 <rcl_timer_call+0xea>
 801167a:	4606      	mov	r6, r0
 801167c:	460f      	mov	r7, r1
 801167e:	6820      	ldr	r0, [r4, #0]
 8011680:	2105      	movs	r1, #5
 8011682:	4632      	mov	r2, r6
 8011684:	463b      	mov	r3, r7
 8011686:	3028      	adds	r0, #40	@ 0x28
 8011688:	9100      	str	r1, [sp, #0]
 801168a:	f001 fc97 	bl	8012fbc <__atomic_store_8>
 801168e:	f1bb 0f00 	cmp.w	fp, #0
 8011692:	d007      	beq.n	80116a4 <rcl_timer_call+0xbc>
 8011694:	9a04      	ldr	r2, [sp, #16]
 8011696:	9b05      	ldr	r3, [sp, #20]
 8011698:	ebb2 0208 	subs.w	r2, r2, r8
 801169c:	4620      	mov	r0, r4
 801169e:	eb63 0309 	sbc.w	r3, r3, r9
 80116a2:	47d8      	blx	fp
 80116a4:	4628      	mov	r0, r5
 80116a6:	b007      	add	sp, #28
 80116a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ac:	f240 3521 	movw	r5, #801	@ 0x321
 80116b0:	4628      	mov	r0, r5
 80116b2:	b007      	add	sp, #28
 80116b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b8:	2501      	movs	r5, #1
 80116ba:	4628      	mov	r0, r5
 80116bc:	b007      	add	sp, #28
 80116be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c2:	250b      	movs	r5, #11
 80116c4:	4628      	mov	r0, r5
 80116c6:	b007      	add	sp, #28
 80116c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116cc:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80116d0:	e7e8      	b.n	80116a4 <rcl_timer_call+0xbc>
 80116d2:	1b80      	subs	r0, r0, r6
 80116d4:	eb61 0107 	sbc.w	r1, r1, r7
 80116d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80116dc:	f7ee fe00 	bl	80002e0 <__aeabi_ldivmod>
 80116e0:	9b02      	ldr	r3, [sp, #8]
 80116e2:	3001      	adds	r0, #1
 80116e4:	f141 0100 	adc.w	r1, r1, #0
 80116e8:	fb00 f303 	mul.w	r3, r0, r3
 80116ec:	fb01 330a 	mla	r3, r1, sl, r3
 80116f0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80116f4:	1830      	adds	r0, r6, r0
 80116f6:	4453      	add	r3, sl
 80116f8:	eb43 0707 	adc.w	r7, r3, r7
 80116fc:	4606      	mov	r6, r0
 80116fe:	e7be      	b.n	801167e <rcl_timer_call+0x96>

08011700 <rcl_timer_is_ready>:
 8011700:	b398      	cbz	r0, 801176a <rcl_timer_is_ready+0x6a>
 8011702:	b530      	push	{r4, r5, lr}
 8011704:	6803      	ldr	r3, [r0, #0]
 8011706:	b083      	sub	sp, #12
 8011708:	4604      	mov	r4, r0
 801170a:	b383      	cbz	r3, 801176e <rcl_timer_is_ready+0x6e>
 801170c:	460d      	mov	r5, r1
 801170e:	b349      	cbz	r1, 8011764 <rcl_timer_is_ready+0x64>
 8011710:	f3bf 8f5b 	dmb	ish
 8011714:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011718:	f3bf 8f5b 	dmb	ish
 801171c:	b9fb      	cbnz	r3, 801175e <rcl_timer_is_ready+0x5e>
 801171e:	6803      	ldr	r3, [r0, #0]
 8011720:	4669      	mov	r1, sp
 8011722:	6818      	ldr	r0, [r3, #0]
 8011724:	f7ff fd16 	bl	8011154 <rcl_clock_get_now>
 8011728:	b128      	cbz	r0, 8011736 <rcl_timer_is_ready+0x36>
 801172a:	f240 3321 	movw	r3, #801	@ 0x321
 801172e:	4298      	cmp	r0, r3
 8011730:	d015      	beq.n	801175e <rcl_timer_is_ready+0x5e>
 8011732:	b003      	add	sp, #12
 8011734:	bd30      	pop	{r4, r5, pc}
 8011736:	6820      	ldr	r0, [r4, #0]
 8011738:	2105      	movs	r1, #5
 801173a:	3028      	adds	r0, #40	@ 0x28
 801173c:	f001 fc08 	bl	8012f50 <__atomic_load_8>
 8011740:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011744:	1ac0      	subs	r0, r0, r3
 8011746:	eb61 0102 	sbc.w	r1, r1, r2
 801174a:	2801      	cmp	r0, #1
 801174c:	f171 0100 	sbcs.w	r1, r1, #0
 8011750:	bfb4      	ite	lt
 8011752:	2301      	movlt	r3, #1
 8011754:	2300      	movge	r3, #0
 8011756:	702b      	strb	r3, [r5, #0]
 8011758:	2000      	movs	r0, #0
 801175a:	b003      	add	sp, #12
 801175c:	bd30      	pop	{r4, r5, pc}
 801175e:	2300      	movs	r3, #0
 8011760:	702b      	strb	r3, [r5, #0]
 8011762:	e7f9      	b.n	8011758 <rcl_timer_is_ready+0x58>
 8011764:	200b      	movs	r0, #11
 8011766:	b003      	add	sp, #12
 8011768:	bd30      	pop	{r4, r5, pc}
 801176a:	200b      	movs	r0, #11
 801176c:	4770      	bx	lr
 801176e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8011772:	e7de      	b.n	8011732 <rcl_timer_is_ready+0x32>

08011774 <rcl_timer_get_next_call_time>:
 8011774:	b1d8      	cbz	r0, 80117ae <rcl_timer_get_next_call_time+0x3a>
 8011776:	b538      	push	{r3, r4, r5, lr}
 8011778:	6803      	ldr	r3, [r0, #0]
 801177a:	b1d3      	cbz	r3, 80117b2 <rcl_timer_get_next_call_time+0x3e>
 801177c:	460c      	mov	r4, r1
 801177e:	b1a1      	cbz	r1, 80117aa <rcl_timer_get_next_call_time+0x36>
 8011780:	f3bf 8f5b 	dmb	ish
 8011784:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011788:	f3bf 8f5b 	dmb	ish
 801178c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8011790:	b943      	cbnz	r3, 80117a4 <rcl_timer_get_next_call_time+0x30>
 8011792:	6800      	ldr	r0, [r0, #0]
 8011794:	2105      	movs	r1, #5
 8011796:	3028      	adds	r0, #40	@ 0x28
 8011798:	f001 fbda 	bl	8012f50 <__atomic_load_8>
 801179c:	e9c4 0100 	strd	r0, r1, [r4]
 80117a0:	4628      	mov	r0, r5
 80117a2:	bd38      	pop	{r3, r4, r5, pc}
 80117a4:	f240 3021 	movw	r0, #801	@ 0x321
 80117a8:	bd38      	pop	{r3, r4, r5, pc}
 80117aa:	200b      	movs	r0, #11
 80117ac:	bd38      	pop	{r3, r4, r5, pc}
 80117ae:	200b      	movs	r0, #11
 80117b0:	4770      	bx	lr
 80117b2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80117b6:	bd38      	pop	{r3, r4, r5, pc}

080117b8 <rcl_timer_get_guard_condition>:
 80117b8:	b130      	cbz	r0, 80117c8 <rcl_timer_get_guard_condition+0x10>
 80117ba:	6800      	ldr	r0, [r0, #0]
 80117bc:	b120      	cbz	r0, 80117c8 <rcl_timer_get_guard_condition+0x10>
 80117be:	68c3      	ldr	r3, [r0, #12]
 80117c0:	b10b      	cbz	r3, 80117c6 <rcl_timer_get_guard_condition+0xe>
 80117c2:	3008      	adds	r0, #8
 80117c4:	4770      	bx	lr
 80117c6:	4618      	mov	r0, r3
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop

080117cc <rcl_get_zero_initialized_wait_set>:
 80117cc:	b510      	push	{r4, lr}
 80117ce:	4c08      	ldr	r4, [pc, #32]	@ (80117f0 <rcl_get_zero_initialized_wait_set+0x24>)
 80117d0:	4686      	mov	lr, r0
 80117d2:	4684      	mov	ip, r0
 80117d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80117d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80117dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80117e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	f8cc 3000 	str.w	r3, [ip]
 80117ec:	4670      	mov	r0, lr
 80117ee:	bd10      	pop	{r4, pc}
 80117f0:	08019534 	.word	0x08019534

080117f4 <rcl_wait_set_is_valid>:
 80117f4:	b118      	cbz	r0, 80117fe <rcl_wait_set_is_valid+0xa>
 80117f6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80117f8:	3800      	subs	r0, #0
 80117fa:	bf18      	it	ne
 80117fc:	2001      	movne	r0, #1
 80117fe:	4770      	bx	lr

08011800 <rcl_wait_set_fini>:
 8011800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011804:	2800      	cmp	r0, #0
 8011806:	f000 80ab 	beq.w	8011960 <rcl_wait_set_fini+0x160>
 801180a:	4605      	mov	r5, r0
 801180c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801180e:	2800      	cmp	r0, #0
 8011810:	f000 809c 	beq.w	801194c <rcl_wait_set_fini+0x14c>
 8011814:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8011816:	f003 fa17 	bl	8014c48 <rmw_destroy_wait_set>
 801181a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801181c:	4680      	mov	r8, r0
 801181e:	2800      	cmp	r0, #0
 8011820:	f040 808e 	bne.w	8011940 <rcl_wait_set_fini+0x140>
 8011824:	2c00      	cmp	r4, #0
 8011826:	f000 80a0 	beq.w	801196a <rcl_wait_set_fini+0x16a>
 801182a:	6828      	ldr	r0, [r5, #0]
 801182c:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801182e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011832:	2600      	movs	r6, #0
 8011834:	606e      	str	r6, [r5, #4]
 8011836:	6026      	str	r6, [r4, #0]
 8011838:	b118      	cbz	r0, 8011842 <rcl_wait_set_fini+0x42>
 801183a:	4649      	mov	r1, r9
 801183c:	47b8      	blx	r7
 801183e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011840:	602e      	str	r6, [r5, #0]
 8011842:	68a0      	ldr	r0, [r4, #8]
 8011844:	b128      	cbz	r0, 8011852 <rcl_wait_set_fini+0x52>
 8011846:	4649      	mov	r1, r9
 8011848:	47b8      	blx	r7
 801184a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801184c:	2300      	movs	r3, #0
 801184e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011852:	68a8      	ldr	r0, [r5, #8]
 8011854:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8011856:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011858:	f04f 0900 	mov.w	r9, #0
 801185c:	f8c5 900c 	str.w	r9, [r5, #12]
 8011860:	f8c4 900c 	str.w	r9, [r4, #12]
 8011864:	b130      	cbz	r0, 8011874 <rcl_wait_set_fini+0x74>
 8011866:	4639      	mov	r1, r7
 8011868:	47b0      	blx	r6
 801186a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801186c:	f8c5 9008 	str.w	r9, [r5, #8]
 8011870:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8011872:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011874:	6960      	ldr	r0, [r4, #20]
 8011876:	f04f 0900 	mov.w	r9, #0
 801187a:	f8c4 9010 	str.w	r9, [r4, #16]
 801187e:	b130      	cbz	r0, 801188e <rcl_wait_set_fini+0x8e>
 8011880:	4639      	mov	r1, r7
 8011882:	47b0      	blx	r6
 8011884:	f8c4 9014 	str.w	r9, [r4, #20]
 8011888:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801188a:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 801188c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801188e:	6928      	ldr	r0, [r5, #16]
 8011890:	f04f 0900 	mov.w	r9, #0
 8011894:	f8c5 9014 	str.w	r9, [r5, #20]
 8011898:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 801189c:	b130      	cbz	r0, 80118ac <rcl_wait_set_fini+0xac>
 801189e:	4639      	mov	r1, r7
 80118a0:	47b0      	blx	r6
 80118a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80118a4:	f8c5 9010 	str.w	r9, [r5, #16]
 80118a8:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80118aa:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80118ac:	69a8      	ldr	r0, [r5, #24]
 80118ae:	f04f 0900 	mov.w	r9, #0
 80118b2:	f8c5 901c 	str.w	r9, [r5, #28]
 80118b6:	f8c4 9018 	str.w	r9, [r4, #24]
 80118ba:	b120      	cbz	r0, 80118c6 <rcl_wait_set_fini+0xc6>
 80118bc:	4639      	mov	r1, r7
 80118be:	47b0      	blx	r6
 80118c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80118c2:	f8c5 9018 	str.w	r9, [r5, #24]
 80118c6:	6a20      	ldr	r0, [r4, #32]
 80118c8:	b128      	cbz	r0, 80118d6 <rcl_wait_set_fini+0xd6>
 80118ca:	4639      	mov	r1, r7
 80118cc:	47b0      	blx	r6
 80118ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80118d0:	2300      	movs	r3, #0
 80118d2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80118d6:	6a28      	ldr	r0, [r5, #32]
 80118d8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80118da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80118de:	2600      	movs	r6, #0
 80118e0:	626e      	str	r6, [r5, #36]	@ 0x24
 80118e2:	6266      	str	r6, [r4, #36]	@ 0x24
 80118e4:	b118      	cbz	r0, 80118ee <rcl_wait_set_fini+0xee>
 80118e6:	4649      	mov	r1, r9
 80118e8:	47b8      	blx	r7
 80118ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80118ec:	622e      	str	r6, [r5, #32]
 80118ee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80118f0:	b128      	cbz	r0, 80118fe <rcl_wait_set_fini+0xfe>
 80118f2:	4649      	mov	r1, r9
 80118f4:	47b8      	blx	r7
 80118f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80118f8:	2300      	movs	r3, #0
 80118fa:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80118fe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011900:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8011902:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011906:	2600      	movs	r6, #0
 8011908:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801190a:	6326      	str	r6, [r4, #48]	@ 0x30
 801190c:	b118      	cbz	r0, 8011916 <rcl_wait_set_fini+0x116>
 801190e:	4649      	mov	r1, r9
 8011910:	47b8      	blx	r7
 8011912:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011914:	62ae      	str	r6, [r5, #40]	@ 0x28
 8011916:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011918:	b1e0      	cbz	r0, 8011954 <rcl_wait_set_fini+0x154>
 801191a:	4649      	mov	r1, r9
 801191c:	47b8      	blx	r7
 801191e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011920:	2300      	movs	r3, #0
 8011922:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8011926:	4598      	cmp	r8, r3
 8011928:	bf18      	it	ne
 801192a:	f44f 7861 	movne.w	r8, #900	@ 0x384
 801192e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011930:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8011932:	4620      	mov	r0, r4
 8011934:	4798      	blx	r3
 8011936:	2300      	movs	r3, #0
 8011938:	632b      	str	r3, [r5, #48]	@ 0x30
 801193a:	4640      	mov	r0, r8
 801193c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011940:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8011944:	2c00      	cmp	r4, #0
 8011946:	f47f af70 	bne.w	801182a <rcl_wait_set_fini+0x2a>
 801194a:	e7f6      	b.n	801193a <rcl_wait_set_fini+0x13a>
 801194c:	4680      	mov	r8, r0
 801194e:	4640      	mov	r0, r8
 8011950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011954:	f1b8 0f00 	cmp.w	r8, #0
 8011958:	bf18      	it	ne
 801195a:	f44f 7861 	movne.w	r8, #900	@ 0x384
 801195e:	e7e6      	b.n	801192e <rcl_wait_set_fini+0x12e>
 8011960:	f04f 080b 	mov.w	r8, #11
 8011964:	4640      	mov	r0, r8
 8011966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801196a:	f44f 7861 	mov.w	r8, #900	@ 0x384
 801196e:	e7e4      	b.n	801193a <rcl_wait_set_fini+0x13a>

08011970 <rcl_wait_set_add_subscription>:
 8011970:	b318      	cbz	r0, 80119ba <rcl_wait_set_add_subscription+0x4a>
 8011972:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011974:	b570      	push	{r4, r5, r6, lr}
 8011976:	4604      	mov	r4, r0
 8011978:	b30b      	cbz	r3, 80119be <rcl_wait_set_add_subscription+0x4e>
 801197a:	b319      	cbz	r1, 80119c4 <rcl_wait_set_add_subscription+0x54>
 801197c:	681d      	ldr	r5, [r3, #0]
 801197e:	6840      	ldr	r0, [r0, #4]
 8011980:	4285      	cmp	r5, r0
 8011982:	d217      	bcs.n	80119b4 <rcl_wait_set_add_subscription+0x44>
 8011984:	6820      	ldr	r0, [r4, #0]
 8011986:	1c6e      	adds	r6, r5, #1
 8011988:	601e      	str	r6, [r3, #0]
 801198a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801198e:	b102      	cbz	r2, 8011992 <rcl_wait_set_add_subscription+0x22>
 8011990:	6015      	str	r5, [r2, #0]
 8011992:	4608      	mov	r0, r1
 8011994:	f7ff fb3c 	bl	8011010 <rcl_subscription_get_rmw_handle>
 8011998:	b150      	cbz	r0, 80119b0 <rcl_wait_set_add_subscription+0x40>
 801199a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801199c:	6842      	ldr	r2, [r0, #4]
 801199e:	689b      	ldr	r3, [r3, #8]
 80119a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80119a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80119a6:	6853      	ldr	r3, [r2, #4]
 80119a8:	3301      	adds	r3, #1
 80119aa:	2000      	movs	r0, #0
 80119ac:	6053      	str	r3, [r2, #4]
 80119ae:	bd70      	pop	{r4, r5, r6, pc}
 80119b0:	2001      	movs	r0, #1
 80119b2:	bd70      	pop	{r4, r5, r6, pc}
 80119b4:	f240 3086 	movw	r0, #902	@ 0x386
 80119b8:	bd70      	pop	{r4, r5, r6, pc}
 80119ba:	200b      	movs	r0, #11
 80119bc:	4770      	bx	lr
 80119be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80119c2:	bd70      	pop	{r4, r5, r6, pc}
 80119c4:	200b      	movs	r0, #11
 80119c6:	bd70      	pop	{r4, r5, r6, pc}

080119c8 <rcl_wait_set_clear>:
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d074      	beq.n	8011ab6 <rcl_wait_set_clear+0xee>
 80119cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119ce:	b510      	push	{r4, lr}
 80119d0:	4604      	mov	r4, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d071      	beq.n	8011aba <rcl_wait_set_clear+0xf2>
 80119d6:	6800      	ldr	r0, [r0, #0]
 80119d8:	b138      	cbz	r0, 80119ea <rcl_wait_set_clear+0x22>
 80119da:	6862      	ldr	r2, [r4, #4]
 80119dc:	2100      	movs	r1, #0
 80119de:	0092      	lsls	r2, r2, #2
 80119e0:	f006 f81c 	bl	8017a1c <memset>
 80119e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119e6:	2200      	movs	r2, #0
 80119e8:	601a      	str	r2, [r3, #0]
 80119ea:	68a0      	ldr	r0, [r4, #8]
 80119ec:	b138      	cbz	r0, 80119fe <rcl_wait_set_clear+0x36>
 80119ee:	68e2      	ldr	r2, [r4, #12]
 80119f0:	2100      	movs	r1, #0
 80119f2:	0092      	lsls	r2, r2, #2
 80119f4:	f006 f812 	bl	8017a1c <memset>
 80119f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119fa:	2200      	movs	r2, #0
 80119fc:	60da      	str	r2, [r3, #12]
 80119fe:	69a0      	ldr	r0, [r4, #24]
 8011a00:	b138      	cbz	r0, 8011a12 <rcl_wait_set_clear+0x4a>
 8011a02:	69e2      	ldr	r2, [r4, #28]
 8011a04:	2100      	movs	r1, #0
 8011a06:	0092      	lsls	r2, r2, #2
 8011a08:	f006 f808 	bl	8017a1c <memset>
 8011a0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a0e:	2200      	movs	r2, #0
 8011a10:	619a      	str	r2, [r3, #24]
 8011a12:	6a20      	ldr	r0, [r4, #32]
 8011a14:	b138      	cbz	r0, 8011a26 <rcl_wait_set_clear+0x5e>
 8011a16:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011a18:	2100      	movs	r1, #0
 8011a1a:	0092      	lsls	r2, r2, #2
 8011a1c:	f005 fffe 	bl	8017a1c <memset>
 8011a20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a22:	2200      	movs	r2, #0
 8011a24:	625a      	str	r2, [r3, #36]	@ 0x24
 8011a26:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011a28:	b138      	cbz	r0, 8011a3a <rcl_wait_set_clear+0x72>
 8011a2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	0092      	lsls	r2, r2, #2
 8011a30:	f005 fff4 	bl	8017a1c <memset>
 8011a34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a36:	2200      	movs	r2, #0
 8011a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a3a:	6920      	ldr	r0, [r4, #16]
 8011a3c:	b138      	cbz	r0, 8011a4e <rcl_wait_set_clear+0x86>
 8011a3e:	6962      	ldr	r2, [r4, #20]
 8011a40:	2100      	movs	r1, #0
 8011a42:	0092      	lsls	r2, r2, #2
 8011a44:	f005 ffea 	bl	8017a1c <memset>
 8011a48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8011a4e:	6898      	ldr	r0, [r3, #8]
 8011a50:	b138      	cbz	r0, 8011a62 <rcl_wait_set_clear+0x9a>
 8011a52:	685a      	ldr	r2, [r3, #4]
 8011a54:	2100      	movs	r1, #0
 8011a56:	0092      	lsls	r2, r2, #2
 8011a58:	f005 ffe0 	bl	8017a1c <memset>
 8011a5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a5e:	2200      	movs	r2, #0
 8011a60:	605a      	str	r2, [r3, #4]
 8011a62:	6958      	ldr	r0, [r3, #20]
 8011a64:	b138      	cbz	r0, 8011a76 <rcl_wait_set_clear+0xae>
 8011a66:	691a      	ldr	r2, [r3, #16]
 8011a68:	2100      	movs	r1, #0
 8011a6a:	0092      	lsls	r2, r2, #2
 8011a6c:	f005 ffd6 	bl	8017a1c <memset>
 8011a70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a72:	2200      	movs	r2, #0
 8011a74:	611a      	str	r2, [r3, #16]
 8011a76:	6a18      	ldr	r0, [r3, #32]
 8011a78:	b138      	cbz	r0, 8011a8a <rcl_wait_set_clear+0xc2>
 8011a7a:	69da      	ldr	r2, [r3, #28]
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	0092      	lsls	r2, r2, #2
 8011a80:	f005 ffcc 	bl	8017a1c <memset>
 8011a84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a86:	2200      	movs	r2, #0
 8011a88:	61da      	str	r2, [r3, #28]
 8011a8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011a8c:	b138      	cbz	r0, 8011a9e <rcl_wait_set_clear+0xd6>
 8011a8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a90:	2100      	movs	r1, #0
 8011a92:	0092      	lsls	r2, r2, #2
 8011a94:	f005 ffc2 	bl	8017a1c <memset>
 8011a98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8011a9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011aa0:	b138      	cbz	r0, 8011ab2 <rcl_wait_set_clear+0xea>
 8011aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011aa4:	2100      	movs	r1, #0
 8011aa6:	0092      	lsls	r2, r2, #2
 8011aa8:	f005 ffb8 	bl	8017a1c <memset>
 8011aac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011aae:	2200      	movs	r2, #0
 8011ab0:	635a      	str	r2, [r3, #52]	@ 0x34
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	bd10      	pop	{r4, pc}
 8011ab6:	200b      	movs	r0, #11
 8011ab8:	4770      	bx	lr
 8011aba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011abe:	bd10      	pop	{r4, pc}

08011ac0 <rcl_wait_set_resize>:
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	f000 81a1 	beq.w	8011e08 <rcl_wait_set_resize+0x348>
 8011ac6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aca:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8011ace:	b083      	sub	sp, #12
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	f1ba 0f00 	cmp.w	sl, #0
 8011ad6:	f000 8199 	beq.w	8011e0c <rcl_wait_set_resize+0x34c>
 8011ada:	f04f 0800 	mov.w	r8, #0
 8011ade:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8011ae2:	461e      	mov	r6, r3
 8011ae4:	460f      	mov	r7, r1
 8011ae6:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8011aea:	4615      	mov	r5, r2
 8011aec:	f8c0 8004 	str.w	r8, [r0, #4]
 8011af0:	6800      	ldr	r0, [r0, #0]
 8011af2:	f8ca 8000 	str.w	r8, [sl]
 8011af6:	2900      	cmp	r1, #0
 8011af8:	f000 80cf 	beq.w	8011c9a <rcl_wait_set_resize+0x1da>
 8011afc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8011b00:	464a      	mov	r2, r9
 8011b02:	4651      	mov	r1, sl
 8011b04:	9301      	str	r3, [sp, #4]
 8011b06:	4798      	blx	r3
 8011b08:	9b01      	ldr	r3, [sp, #4]
 8011b0a:	6020      	str	r0, [r4, #0]
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	f000 8109 	beq.w	8011d24 <rcl_wait_set_resize+0x264>
 8011b12:	4652      	mov	r2, sl
 8011b14:	4641      	mov	r1, r8
 8011b16:	9301      	str	r3, [sp, #4]
 8011b18:	f005 ff80 	bl	8017a1c <memset>
 8011b1c:	6067      	str	r7, [r4, #4]
 8011b1e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8011b20:	9b01      	ldr	r3, [sp, #4]
 8011b22:	68b8      	ldr	r0, [r7, #8]
 8011b24:	f8c7 8004 	str.w	r8, [r7, #4]
 8011b28:	464a      	mov	r2, r9
 8011b2a:	4651      	mov	r1, sl
 8011b2c:	4798      	blx	r3
 8011b2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b30:	60b8      	str	r0, [r7, #8]
 8011b32:	689f      	ldr	r7, [r3, #8]
 8011b34:	2f00      	cmp	r7, #0
 8011b36:	f000 80f0 	beq.w	8011d1a <rcl_wait_set_resize+0x25a>
 8011b3a:	4652      	mov	r2, sl
 8011b3c:	4641      	mov	r1, r8
 8011b3e:	4638      	mov	r0, r7
 8011b40:	f005 ff6c 	bl	8017a1c <memset>
 8011b44:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011b48:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011b4c:	68a0      	ldr	r0, [r4, #8]
 8011b4e:	2700      	movs	r7, #0
 8011b50:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8011b54:	60e7      	str	r7, [r4, #12]
 8011b56:	f8ca 700c 	str.w	r7, [sl, #12]
 8011b5a:	2d00      	cmp	r5, #0
 8011b5c:	f040 80b0 	bne.w	8011cc0 <rcl_wait_set_resize+0x200>
 8011b60:	b130      	cbz	r0, 8011b70 <rcl_wait_set_resize+0xb0>
 8011b62:	4641      	mov	r1, r8
 8011b64:	4790      	blx	r2
 8011b66:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011b6a:	60a5      	str	r5, [r4, #8]
 8011b6c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011b70:	f8da 0014 	ldr.w	r0, [sl, #20]
 8011b74:	2700      	movs	r7, #0
 8011b76:	19ad      	adds	r5, r5, r6
 8011b78:	f8ca 7010 	str.w	r7, [sl, #16]
 8011b7c:	f040 80b8 	bne.w	8011cf0 <rcl_wait_set_resize+0x230>
 8011b80:	b148      	cbz	r0, 8011b96 <rcl_wait_set_resize+0xd6>
 8011b82:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8011b86:	4641      	mov	r1, r8
 8011b88:	4798      	blx	r3
 8011b8a:	f8ca 5014 	str.w	r5, [sl, #20]
 8011b8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011b92:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011b96:	6920      	ldr	r0, [r4, #16]
 8011b98:	2500      	movs	r5, #0
 8011b9a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8011b9e:	6165      	str	r5, [r4, #20]
 8011ba0:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8011ba4:	2e00      	cmp	r6, #0
 8011ba6:	f040 80c1 	bne.w	8011d2c <rcl_wait_set_resize+0x26c>
 8011baa:	b140      	cbz	r0, 8011bbe <rcl_wait_set_resize+0xfe>
 8011bac:	4641      	mov	r1, r8
 8011bae:	47c8      	blx	r9
 8011bb0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011bb4:	6126      	str	r6, [r4, #16]
 8011bb6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8011bba:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011bbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bc0:	69a0      	ldr	r0, [r4, #24]
 8011bc2:	2500      	movs	r5, #0
 8011bc4:	61e5      	str	r5, [r4, #28]
 8011bc6:	f8ca 5018 	str.w	r5, [sl, #24]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f040 80c2 	bne.w	8011d54 <rcl_wait_set_resize+0x294>
 8011bd0:	b128      	cbz	r0, 8011bde <rcl_wait_set_resize+0x11e>
 8011bd2:	4641      	mov	r1, r8
 8011bd4:	47c8      	blx	r9
 8011bd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bd8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011bdc:	61a3      	str	r3, [r4, #24]
 8011bde:	f8da 0020 	ldr.w	r0, [sl, #32]
 8011be2:	b130      	cbz	r0, 8011bf2 <rcl_wait_set_resize+0x132>
 8011be4:	4641      	mov	r1, r8
 8011be6:	47c8      	blx	r9
 8011be8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011bec:	2300      	movs	r3, #0
 8011bee:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8011bf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011bf4:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8011bf8:	6a20      	ldr	r0, [r4, #32]
 8011bfa:	2500      	movs	r5, #0
 8011bfc:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8011c00:	6265      	str	r5, [r4, #36]	@ 0x24
 8011c02:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	f000 80c8 	beq.w	8011d9c <rcl_wait_set_resize+0x2dc>
 8011c0c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8011c10:	4632      	mov	r2, r6
 8011c12:	4649      	mov	r1, r9
 8011c14:	47c0      	blx	r8
 8011c16:	6220      	str	r0, [r4, #32]
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	f000 8083 	beq.w	8011d24 <rcl_wait_set_resize+0x264>
 8011c1e:	464a      	mov	r2, r9
 8011c20:	4629      	mov	r1, r5
 8011c22:	f005 fefb 	bl	8017a1c <memset>
 8011c26:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011c2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c2e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8011c32:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8011c36:	4632      	mov	r2, r6
 8011c38:	4649      	mov	r1, r9
 8011c3a:	47c0      	blx	r8
 8011c3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011c3e:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8011c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	f000 80fb 	beq.w	8011e40 <rcl_wait_set_resize+0x380>
 8011c4a:	464a      	mov	r2, r9
 8011c4c:	4629      	mov	r1, r5
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f005 fee4 	bl	8017a1c <memset>
 8011c54:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c5a:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8011c5e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011c60:	2500      	movs	r5, #0
 8011c62:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8011c66:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8011c68:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f040 80a9 	bne.w	8011dc4 <rcl_wait_set_resize+0x304>
 8011c72:	b128      	cbz	r0, 8011c80 <rcl_wait_set_resize+0x1c0>
 8011c74:	4631      	mov	r1, r6
 8011c76:	47b8      	blx	r7
 8011c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c7a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011c7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c80:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011c84:	b128      	cbz	r0, 8011c92 <rcl_wait_set_resize+0x1d2>
 8011c86:	4631      	mov	r1, r6
 8011c88:	47b8      	blx	r7
 8011c8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8011c92:	2000      	movs	r0, #0
 8011c94:	b003      	add	sp, #12
 8011c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c9a:	b120      	cbz	r0, 8011ca6 <rcl_wait_set_resize+0x1e6>
 8011c9c:	4649      	mov	r1, r9
 8011c9e:	47d8      	blx	fp
 8011ca0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011ca4:	6027      	str	r7, [r4, #0]
 8011ca6:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011caa:	2800      	cmp	r0, #0
 8011cac:	f43f af4c 	beq.w	8011b48 <rcl_wait_set_resize+0x88>
 8011cb0:	4649      	mov	r1, r9
 8011cb2:	47d8      	blx	fp
 8011cb4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011cb8:	2300      	movs	r3, #0
 8011cba:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8011cbe:	e743      	b.n	8011b48 <rcl_wait_set_resize+0x88>
 8011cc0:	4642      	mov	r2, r8
 8011cc2:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8011cc6:	4641      	mov	r1, r8
 8011cc8:	4798      	blx	r3
 8011cca:	60a0      	str	r0, [r4, #8]
 8011ccc:	b350      	cbz	r0, 8011d24 <rcl_wait_set_resize+0x264>
 8011cce:	4642      	mov	r2, r8
 8011cd0:	4639      	mov	r1, r7
 8011cd2:	f005 fea3 	bl	8017a1c <memset>
 8011cd6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011cda:	60e5      	str	r5, [r4, #12]
 8011cdc:	2700      	movs	r7, #0
 8011cde:	19ad      	adds	r5, r5, r6
 8011ce0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011ce4:	f8da 0014 	ldr.w	r0, [sl, #20]
 8011ce8:	f8ca 7010 	str.w	r7, [sl, #16]
 8011cec:	f43f af48 	beq.w	8011b80 <rcl_wait_set_resize+0xc0>
 8011cf0:	00ad      	lsls	r5, r5, #2
 8011cf2:	4642      	mov	r2, r8
 8011cf4:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8011cf8:	4629      	mov	r1, r5
 8011cfa:	4798      	blx	r3
 8011cfc:	4680      	mov	r8, r0
 8011cfe:	f8ca 0014 	str.w	r0, [sl, #20]
 8011d02:	2800      	cmp	r0, #0
 8011d04:	f000 8085 	beq.w	8011e12 <rcl_wait_set_resize+0x352>
 8011d08:	462a      	mov	r2, r5
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f005 fe86 	bl	8017a1c <memset>
 8011d10:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011d14:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011d18:	e73d      	b.n	8011b96 <rcl_wait_set_resize+0xd6>
 8011d1a:	6820      	ldr	r0, [r4, #0]
 8011d1c:	4649      	mov	r1, r9
 8011d1e:	47d8      	blx	fp
 8011d20:	e9c4 7700 	strd	r7, r7, [r4]
 8011d24:	200a      	movs	r0, #10
 8011d26:	b003      	add	sp, #12
 8011d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2c:	4642      	mov	r2, r8
 8011d2e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8011d32:	4641      	mov	r1, r8
 8011d34:	47b8      	blx	r7
 8011d36:	6120      	str	r0, [r4, #16]
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d0f3      	beq.n	8011d24 <rcl_wait_set_resize+0x264>
 8011d3c:	4642      	mov	r2, r8
 8011d3e:	4629      	mov	r1, r5
 8011d40:	f005 fe6c 	bl	8017a1c <memset>
 8011d44:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011d48:	6166      	str	r6, [r4, #20]
 8011d4a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8011d4e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8011d52:	e734      	b.n	8011bbe <rcl_wait_set_resize+0xfe>
 8011d54:	009e      	lsls	r6, r3, #2
 8011d56:	4642      	mov	r2, r8
 8011d58:	4631      	mov	r1, r6
 8011d5a:	47b8      	blx	r7
 8011d5c:	61a0      	str	r0, [r4, #24]
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d0e0      	beq.n	8011d24 <rcl_wait_set_resize+0x264>
 8011d62:	4632      	mov	r2, r6
 8011d64:	4629      	mov	r1, r5
 8011d66:	f005 fe59 	bl	8017a1c <memset>
 8011d6a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011d6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d70:	61e3      	str	r3, [r4, #28]
 8011d72:	f8da 0020 	ldr.w	r0, [sl, #32]
 8011d76:	f8ca 501c 	str.w	r5, [sl, #28]
 8011d7a:	4642      	mov	r2, r8
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	47b8      	blx	r7
 8011d80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011d82:	f8ca 0020 	str.w	r0, [sl, #32]
 8011d86:	6a1f      	ldr	r7, [r3, #32]
 8011d88:	2f00      	cmp	r7, #0
 8011d8a:	d053      	beq.n	8011e34 <rcl_wait_set_resize+0x374>
 8011d8c:	4632      	mov	r2, r6
 8011d8e:	4629      	mov	r1, r5
 8011d90:	4638      	mov	r0, r7
 8011d92:	f005 fe43 	bl	8017a1c <memset>
 8011d96:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011d9a:	e72a      	b.n	8011bf2 <rcl_wait_set_resize+0x132>
 8011d9c:	b128      	cbz	r0, 8011daa <rcl_wait_set_resize+0x2ea>
 8011d9e:	4631      	mov	r1, r6
 8011da0:	47b8      	blx	r7
 8011da2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011da4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011da8:	6223      	str	r3, [r4, #32]
 8011daa:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8011dae:	2800      	cmp	r0, #0
 8011db0:	f43f af52 	beq.w	8011c58 <rcl_wait_set_resize+0x198>
 8011db4:	4631      	mov	r1, r6
 8011db6:	47b8      	blx	r7
 8011db8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8011dc2:	e749      	b.n	8011c58 <rcl_wait_set_resize+0x198>
 8011dc4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8011dc8:	4632      	mov	r2, r6
 8011dca:	4649      	mov	r1, r9
 8011dcc:	47c0      	blx	r8
 8011dce:	62a0      	str	r0, [r4, #40]	@ 0x28
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	d0a7      	beq.n	8011d24 <rcl_wait_set_resize+0x264>
 8011dd4:	464a      	mov	r2, r9
 8011dd6:	4629      	mov	r1, r5
 8011dd8:	f005 fe20 	bl	8017a1c <memset>
 8011ddc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8011de0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011de2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011de4:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011de8:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8011dec:	4632      	mov	r2, r6
 8011dee:	4649      	mov	r1, r9
 8011df0:	47c0      	blx	r8
 8011df2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011df4:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dfa:	b34b      	cbz	r3, 8011e50 <rcl_wait_set_resize+0x390>
 8011dfc:	464a      	mov	r2, r9
 8011dfe:	4629      	mov	r1, r5
 8011e00:	4618      	mov	r0, r3
 8011e02:	f005 fe0b 	bl	8017a1c <memset>
 8011e06:	e744      	b.n	8011c92 <rcl_wait_set_resize+0x1d2>
 8011e08:	200b      	movs	r0, #11
 8011e0a:	4770      	bx	lr
 8011e0c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011e10:	e789      	b.n	8011d26 <rcl_wait_set_resize+0x266>
 8011e12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e14:	68a0      	ldr	r0, [r4, #8]
 8011e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e18:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011e1a:	4790      	blx	r2
 8011e1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e1e:	6920      	ldr	r0, [r4, #16]
 8011e20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e22:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011e24:	f8c4 800c 	str.w	r8, [r4, #12]
 8011e28:	f8c4 8008 	str.w	r8, [r4, #8]
 8011e2c:	4790      	blx	r2
 8011e2e:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8011e32:	e777      	b.n	8011d24 <rcl_wait_set_resize+0x264>
 8011e34:	69a0      	ldr	r0, [r4, #24]
 8011e36:	4641      	mov	r1, r8
 8011e38:	47c8      	blx	r9
 8011e3a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8011e3e:	e771      	b.n	8011d24 <rcl_wait_set_resize+0x264>
 8011e40:	6a20      	ldr	r0, [r4, #32]
 8011e42:	9301      	str	r3, [sp, #4]
 8011e44:	4631      	mov	r1, r6
 8011e46:	47b8      	blx	r7
 8011e48:	9b01      	ldr	r3, [sp, #4]
 8011e4a:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8011e4e:	e769      	b.n	8011d24 <rcl_wait_set_resize+0x264>
 8011e50:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011e52:	9301      	str	r3, [sp, #4]
 8011e54:	4631      	mov	r1, r6
 8011e56:	47b8      	blx	r7
 8011e58:	9b01      	ldr	r3, [sp, #4]
 8011e5a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011e5e:	e761      	b.n	8011d24 <rcl_wait_set_resize+0x264>

08011e60 <rcl_wait_set_init>:
 8011e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e64:	b084      	sub	sp, #16
 8011e66:	4604      	mov	r4, r0
 8011e68:	a810      	add	r0, sp, #64	@ 0x40
 8011e6a:	460d      	mov	r5, r1
 8011e6c:	4690      	mov	r8, r2
 8011e6e:	461f      	mov	r7, r3
 8011e70:	f7f8 fa3a 	bl	800a2e8 <rcutils_allocator_is_valid>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d068      	beq.n	8011f4a <rcl_wait_set_init+0xea>
 8011e78:	2c00      	cmp	r4, #0
 8011e7a:	d066      	beq.n	8011f4a <rcl_wait_set_init+0xea>
 8011e7c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011e7e:	b126      	cbz	r6, 8011e8a <rcl_wait_set_init+0x2a>
 8011e80:	2564      	movs	r5, #100	@ 0x64
 8011e82:	4628      	mov	r0, r5
 8011e84:	b004      	add	sp, #16
 8011e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d05c      	beq.n	8011f4a <rcl_wait_set_init+0xea>
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7fe f9a5 	bl	80101e0 <rcl_context_is_valid>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d05c      	beq.n	8011f54 <rcl_wait_set_init+0xf4>
 8011e9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e9c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011e9e:	205c      	movs	r0, #92	@ 0x5c
 8011ea0:	4798      	blx	r3
 8011ea2:	6320      	str	r0, [r4, #48]	@ 0x30
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d059      	beq.n	8011f5c <rcl_wait_set_init+0xfc>
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	225c      	movs	r2, #92	@ 0x5c
 8011eac:	f005 fdb6 	bl	8017a1c <memset>
 8011eb0:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8011eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eb6:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8011eba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011ebe:	eb03 0e02 	add.w	lr, r3, r2
 8011ec2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ec4:	449e      	add	lr, r3
 8011ec6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ec8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011ecc:	f8d3 a000 	ldr.w	sl, [r3]
 8011ed0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ed4:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8011ed8:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8011edc:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8011ee0:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8011ee4:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8011ee8:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8011eec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011eee:	44c6      	add	lr, r8
 8011ef0:	f8dc 3000 	ldr.w	r3, [ip]
 8011ef4:	6033      	str	r3, [r6, #0]
 8011ef6:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8011efa:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011efe:	f002 fe99 	bl	8014c34 <rmw_create_wait_set>
 8011f02:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8011f06:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011f08:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011f0a:	b32b      	cbz	r3, 8011f58 <rcl_wait_set_init+0xf8>
 8011f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f0e:	9302      	str	r3, [sp, #8]
 8011f10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f12:	9301      	str	r3, [sp, #4]
 8011f14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	4629      	mov	r1, r5
 8011f1a:	463b      	mov	r3, r7
 8011f1c:	4642      	mov	r2, r8
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f7ff fdce 	bl	8011ac0 <rcl_wait_set_resize>
 8011f24:	4605      	mov	r5, r0
 8011f26:	2800      	cmp	r0, #0
 8011f28:	d0ab      	beq.n	8011e82 <rcl_wait_set_init+0x22>
 8011f2a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011f2c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011f2e:	b133      	cbz	r3, 8011f3e <rcl_wait_set_init+0xde>
 8011f30:	4618      	mov	r0, r3
 8011f32:	f002 fe89 	bl	8014c48 <rmw_destroy_wait_set>
 8011f36:	b198      	cbz	r0, 8011f60 <rcl_wait_set_init+0x100>
 8011f38:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011f3a:	f44f 7561 	mov.w	r5, #900	@ 0x384
 8011f3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011f40:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011f42:	4798      	blx	r3
 8011f44:	2300      	movs	r3, #0
 8011f46:	6323      	str	r3, [r4, #48]	@ 0x30
 8011f48:	e79b      	b.n	8011e82 <rcl_wait_set_init+0x22>
 8011f4a:	250b      	movs	r5, #11
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	b004      	add	sp, #16
 8011f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f54:	2565      	movs	r5, #101	@ 0x65
 8011f56:	e794      	b.n	8011e82 <rcl_wait_set_init+0x22>
 8011f58:	250a      	movs	r5, #10
 8011f5a:	e7f0      	b.n	8011f3e <rcl_wait_set_init+0xde>
 8011f5c:	250a      	movs	r5, #10
 8011f5e:	e790      	b.n	8011e82 <rcl_wait_set_init+0x22>
 8011f60:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011f62:	e7ec      	b.n	8011f3e <rcl_wait_set_init+0xde>

08011f64 <rcl_wait_set_add_guard_condition>:
 8011f64:	b318      	cbz	r0, 8011fae <rcl_wait_set_add_guard_condition+0x4a>
 8011f66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011f68:	b570      	push	{r4, r5, r6, lr}
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	b30b      	cbz	r3, 8011fb2 <rcl_wait_set_add_guard_condition+0x4e>
 8011f6e:	b319      	cbz	r1, 8011fb8 <rcl_wait_set_add_guard_condition+0x54>
 8011f70:	68dd      	ldr	r5, [r3, #12]
 8011f72:	68c0      	ldr	r0, [r0, #12]
 8011f74:	4285      	cmp	r5, r0
 8011f76:	d217      	bcs.n	8011fa8 <rcl_wait_set_add_guard_condition+0x44>
 8011f78:	68a0      	ldr	r0, [r4, #8]
 8011f7a:	1c6e      	adds	r6, r5, #1
 8011f7c:	60de      	str	r6, [r3, #12]
 8011f7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011f82:	b102      	cbz	r2, 8011f86 <rcl_wait_set_add_guard_condition+0x22>
 8011f84:	6015      	str	r5, [r2, #0]
 8011f86:	4608      	mov	r0, r1
 8011f88:	f004 fc84 	bl	8016894 <rcl_guard_condition_get_rmw_handle>
 8011f8c:	b150      	cbz	r0, 8011fa4 <rcl_wait_set_add_guard_condition+0x40>
 8011f8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f90:	6842      	ldr	r2, [r0, #4]
 8011f92:	695b      	ldr	r3, [r3, #20]
 8011f94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011f9a:	6913      	ldr	r3, [r2, #16]
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	2000      	movs	r0, #0
 8011fa0:	6113      	str	r3, [r2, #16]
 8011fa2:	bd70      	pop	{r4, r5, r6, pc}
 8011fa4:	2001      	movs	r0, #1
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}
 8011fa8:	f240 3086 	movw	r0, #902	@ 0x386
 8011fac:	bd70      	pop	{r4, r5, r6, pc}
 8011fae:	200b      	movs	r0, #11
 8011fb0:	4770      	bx	lr
 8011fb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011fb6:	bd70      	pop	{r4, r5, r6, pc}
 8011fb8:	200b      	movs	r0, #11
 8011fba:	bd70      	pop	{r4, r5, r6, pc}

08011fbc <rcl_wait_set_add_timer>:
 8011fbc:	b328      	cbz	r0, 801200a <rcl_wait_set_add_timer+0x4e>
 8011fbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011fc0:	b570      	push	{r4, r5, r6, lr}
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	b31b      	cbz	r3, 801200e <rcl_wait_set_add_timer+0x52>
 8011fc6:	b329      	cbz	r1, 8012014 <rcl_wait_set_add_timer+0x58>
 8011fc8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011fca:	6965      	ldr	r5, [r4, #20]
 8011fcc:	42a8      	cmp	r0, r5
 8011fce:	d219      	bcs.n	8012004 <rcl_wait_set_add_timer+0x48>
 8011fd0:	6925      	ldr	r5, [r4, #16]
 8011fd2:	1c46      	adds	r6, r0, #1
 8011fd4:	641e      	str	r6, [r3, #64]	@ 0x40
 8011fd6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011fda:	b102      	cbz	r2, 8011fde <rcl_wait_set_add_timer+0x22>
 8011fdc:	6010      	str	r0, [r2, #0]
 8011fde:	4608      	mov	r0, r1
 8011fe0:	f7ff fbea 	bl	80117b8 <rcl_timer_get_guard_condition>
 8011fe4:	b160      	cbz	r0, 8012000 <rcl_wait_set_add_timer+0x44>
 8011fe6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011fe8:	68e3      	ldr	r3, [r4, #12]
 8011fea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011fec:	3b01      	subs	r3, #1
 8011fee:	441d      	add	r5, r3
 8011ff0:	f004 fc50 	bl	8016894 <rcl_guard_condition_get_rmw_handle>
 8011ff4:	b180      	cbz	r0, 8012018 <rcl_wait_set_add_timer+0x5c>
 8011ff6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ff8:	6842      	ldr	r2, [r0, #4]
 8011ffa:	695b      	ldr	r3, [r3, #20]
 8011ffc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012000:	2000      	movs	r0, #0
 8012002:	bd70      	pop	{r4, r5, r6, pc}
 8012004:	f240 3086 	movw	r0, #902	@ 0x386
 8012008:	bd70      	pop	{r4, r5, r6, pc}
 801200a:	200b      	movs	r0, #11
 801200c:	4770      	bx	lr
 801200e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012012:	bd70      	pop	{r4, r5, r6, pc}
 8012014:	200b      	movs	r0, #11
 8012016:	bd70      	pop	{r4, r5, r6, pc}
 8012018:	2001      	movs	r0, #1
 801201a:	bd70      	pop	{r4, r5, r6, pc}

0801201c <rcl_wait_set_add_client>:
 801201c:	b318      	cbz	r0, 8012066 <rcl_wait_set_add_client+0x4a>
 801201e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012020:	b570      	push	{r4, r5, r6, lr}
 8012022:	4604      	mov	r4, r0
 8012024:	b30b      	cbz	r3, 801206a <rcl_wait_set_add_client+0x4e>
 8012026:	b319      	cbz	r1, 8012070 <rcl_wait_set_add_client+0x54>
 8012028:	699d      	ldr	r5, [r3, #24]
 801202a:	69c0      	ldr	r0, [r0, #28]
 801202c:	4285      	cmp	r5, r0
 801202e:	d217      	bcs.n	8012060 <rcl_wait_set_add_client+0x44>
 8012030:	69a0      	ldr	r0, [r4, #24]
 8012032:	1c6e      	adds	r6, r5, #1
 8012034:	619e      	str	r6, [r3, #24]
 8012036:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801203a:	b102      	cbz	r2, 801203e <rcl_wait_set_add_client+0x22>
 801203c:	6015      	str	r5, [r2, #0]
 801203e:	4608      	mov	r0, r1
 8012040:	f7fd ffe4 	bl	801000c <rcl_client_get_rmw_handle>
 8012044:	b150      	cbz	r0, 801205c <rcl_wait_set_add_client+0x40>
 8012046:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012048:	6842      	ldr	r2, [r0, #4]
 801204a:	6a1b      	ldr	r3, [r3, #32]
 801204c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012050:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012052:	69d3      	ldr	r3, [r2, #28]
 8012054:	3301      	adds	r3, #1
 8012056:	2000      	movs	r0, #0
 8012058:	61d3      	str	r3, [r2, #28]
 801205a:	bd70      	pop	{r4, r5, r6, pc}
 801205c:	2001      	movs	r0, #1
 801205e:	bd70      	pop	{r4, r5, r6, pc}
 8012060:	f240 3086 	movw	r0, #902	@ 0x386
 8012064:	bd70      	pop	{r4, r5, r6, pc}
 8012066:	200b      	movs	r0, #11
 8012068:	4770      	bx	lr
 801206a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801206e:	bd70      	pop	{r4, r5, r6, pc}
 8012070:	200b      	movs	r0, #11
 8012072:	bd70      	pop	{r4, r5, r6, pc}

08012074 <rcl_wait_set_add_service>:
 8012074:	b318      	cbz	r0, 80120be <rcl_wait_set_add_service+0x4a>
 8012076:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	4604      	mov	r4, r0
 801207c:	b30b      	cbz	r3, 80120c2 <rcl_wait_set_add_service+0x4e>
 801207e:	b319      	cbz	r1, 80120c8 <rcl_wait_set_add_service+0x54>
 8012080:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012082:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012084:	4285      	cmp	r5, r0
 8012086:	d217      	bcs.n	80120b8 <rcl_wait_set_add_service+0x44>
 8012088:	6a20      	ldr	r0, [r4, #32]
 801208a:	1c6e      	adds	r6, r5, #1
 801208c:	625e      	str	r6, [r3, #36]	@ 0x24
 801208e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012092:	b102      	cbz	r2, 8012096 <rcl_wait_set_add_service+0x22>
 8012094:	6015      	str	r5, [r2, #0]
 8012096:	4608      	mov	r0, r1
 8012098:	f7fe fd88 	bl	8010bac <rcl_service_get_rmw_handle>
 801209c:	b150      	cbz	r0, 80120b4 <rcl_wait_set_add_service+0x40>
 801209e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120a0:	6842      	ldr	r2, [r0, #4]
 80120a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80120aa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80120ac:	3301      	adds	r3, #1
 80120ae:	2000      	movs	r0, #0
 80120b0:	6293      	str	r3, [r2, #40]	@ 0x28
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
 80120b4:	2001      	movs	r0, #1
 80120b6:	bd70      	pop	{r4, r5, r6, pc}
 80120b8:	f240 3086 	movw	r0, #902	@ 0x386
 80120bc:	bd70      	pop	{r4, r5, r6, pc}
 80120be:	200b      	movs	r0, #11
 80120c0:	4770      	bx	lr
 80120c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80120c6:	bd70      	pop	{r4, r5, r6, pc}
 80120c8:	200b      	movs	r0, #11
 80120ca:	bd70      	pop	{r4, r5, r6, pc}
 80120cc:	0000      	movs	r0, r0
	...

080120d0 <rcl_wait>:
 80120d0:	2800      	cmp	r0, #0
 80120d2:	f000 81d4 	beq.w	801247e <rcl_wait+0x3ae>
 80120d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120da:	ed2d 8b02 	vpush	{d8}
 80120de:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80120e0:	b099      	sub	sp, #100	@ 0x64
 80120e2:	4604      	mov	r4, r0
 80120e4:	2d00      	cmp	r5, #0
 80120e6:	f000 8178 	beq.w	80123da <rcl_wait+0x30a>
 80120ea:	461f      	mov	r7, r3
 80120ec:	6843      	ldr	r3, [r0, #4]
 80120ee:	4690      	mov	r8, r2
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	f000 809b 	beq.w	801222c <rcl_wait+0x15c>
 80120f6:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80120f8:	2e00      	cmp	r6, #0
 80120fa:	f000 80b2 	beq.w	8012262 <rcl_wait+0x192>
 80120fe:	2100      	movs	r1, #0
 8012100:	468c      	mov	ip, r1
 8012102:	460a      	mov	r2, r1
 8012104:	46a6      	mov	lr, r4
 8012106:	f8de 3010 	ldr.w	r3, [lr, #16]
 801210a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801210e:	b173      	cbz	r3, 801212e <rcl_wait+0x5e>
 8012110:	f8de 300c 	ldr.w	r3, [lr, #12]
 8012114:	6968      	ldr	r0, [r5, #20]
 8012116:	440b      	add	r3, r1
 8012118:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801211c:	b13c      	cbz	r4, 801212e <rcl_wait+0x5e>
 801211e:	692b      	ldr	r3, [r5, #16]
 8012120:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8012124:	3301      	adds	r3, #1
 8012126:	612b      	str	r3, [r5, #16]
 8012128:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 801212c:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 801212e:	3101      	adds	r1, #1
 8012130:	f14c 0c00 	adc.w	ip, ip, #0
 8012134:	42b1      	cmp	r1, r6
 8012136:	f17c 0300 	sbcs.w	r3, ip, #0
 801213a:	d3e4      	bcc.n	8012106 <rcl_wait+0x36>
 801213c:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 80123e8 <rcl_wait+0x318>
 8012140:	ea58 0307 	orrs.w	r3, r8, r7
 8012144:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8012148:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 801214c:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8012150:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8012154:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8012158:	4674      	mov	r4, lr
 801215a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801215e:	f000 8094 	beq.w	801228a <rcl_wait+0x1ba>
 8012162:	2e00      	cmp	r6, #0
 8012164:	f000 8145 	beq.w	80123f2 <rcl_wait+0x322>
 8012168:	2500      	movs	r5, #0
 801216a:	46bb      	mov	fp, r7
 801216c:	e02c      	b.n	80121c8 <rcl_wait+0xf8>
 801216e:	6923      	ldr	r3, [r4, #16]
 8012170:	f853 0009 	ldr.w	r0, [r3, r9]
 8012174:	a908      	add	r1, sp, #32
 8012176:	ed8d 8b08 	vstr	d8, [sp, #32]
 801217a:	f7ff fafb 	bl	8011774 <rcl_timer_get_next_call_time>
 801217e:	f240 3321 	movw	r3, #801	@ 0x321
 8012182:	4298      	cmp	r0, r3
 8012184:	f000 80bb 	beq.w	80122fe <rcl_wait+0x22e>
 8012188:	2800      	cmp	r0, #0
 801218a:	d165      	bne.n	8012258 <rcl_wait+0x188>
 801218c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8012190:	7830      	ldrb	r0, [r6, #0]
 8012192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012194:	ab18      	add	r3, sp, #96	@ 0x60
 8012196:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801219a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 801219e:	9205      	str	r2, [sp, #20]
 80121a0:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80121a4:	4297      	cmp	r7, r2
 80121a6:	9a05      	ldr	r2, [sp, #20]
 80121a8:	eb71 0202 	sbcs.w	r2, r1, r2
 80121ac:	da06      	bge.n	80121bc <rcl_wait+0xec>
 80121ae:	e943 7108 	strd	r7, r1, [r3, #-32]
 80121b2:	ab18      	add	r3, sp, #96	@ 0x60
 80121b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80121b8:	f840 6c30 	str.w	r6, [r0, #-48]
 80121bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80121be:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80121c0:	3501      	adds	r5, #1
 80121c2:	42b5      	cmp	r5, r6
 80121c4:	f080 8114 	bcs.w	80123f0 <rcl_wait+0x320>
 80121c8:	6923      	ldr	r3, [r4, #16]
 80121ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121ce:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d0f4      	beq.n	80121c0 <rcl_wait+0xf0>
 80121d6:	a907      	add	r1, sp, #28
 80121d8:	f7ff f9f8 	bl	80115cc <rcl_timer_clock>
 80121dc:	4603      	mov	r3, r0
 80121de:	2800      	cmp	r0, #0
 80121e0:	f040 8141 	bne.w	8012466 <rcl_wait+0x396>
 80121e4:	9807      	ldr	r0, [sp, #28]
 80121e6:	7802      	ldrb	r2, [r0, #0]
 80121e8:	2a01      	cmp	r2, #1
 80121ea:	d1c0      	bne.n	801216e <rcl_wait+0x9e>
 80121ec:	f10d 011b 	add.w	r1, sp, #27
 80121f0:	f88d 301b 	strb.w	r3, [sp, #27]
 80121f4:	f7fe ffba 	bl	801116c <rcl_is_enabled_ros_time_override>
 80121f8:	4602      	mov	r2, r0
 80121fa:	2800      	cmp	r0, #0
 80121fc:	f040 8133 	bne.w	8012466 <rcl_wait+0x396>
 8012200:	6923      	ldr	r3, [r4, #16]
 8012202:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8012206:	f853 0009 	ldr.w	r0, [r3, r9]
 801220a:	2900      	cmp	r1, #0
 801220c:	d0b0      	beq.n	8012170 <rcl_wait+0xa0>
 801220e:	ae08      	add	r6, sp, #32
 8012210:	4631      	mov	r1, r6
 8012212:	f88d 2020 	strb.w	r2, [sp, #32]
 8012216:	f7ff fa73 	bl	8011700 <rcl_timer_is_ready>
 801221a:	2800      	cmp	r0, #0
 801221c:	f040 8123 	bne.w	8012466 <rcl_wait+0x396>
 8012220:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d0c9      	beq.n	80121bc <rcl_wait+0xec>
 8012228:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801222a:	e02f      	b.n	801228c <rcl_wait+0x1bc>
 801222c:	68c3      	ldr	r3, [r0, #12]
 801222e:	2b00      	cmp	r3, #0
 8012230:	f47f af61 	bne.w	80120f6 <rcl_wait+0x26>
 8012234:	6943      	ldr	r3, [r0, #20]
 8012236:	2b00      	cmp	r3, #0
 8012238:	f47f af5d 	bne.w	80120f6 <rcl_wait+0x26>
 801223c:	69c3      	ldr	r3, [r0, #28]
 801223e:	2b00      	cmp	r3, #0
 8012240:	f47f af59 	bne.w	80120f6 <rcl_wait+0x26>
 8012244:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012246:	2b00      	cmp	r3, #0
 8012248:	f47f af55 	bne.w	80120f6 <rcl_wait+0x26>
 801224c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801224e:	2b00      	cmp	r3, #0
 8012250:	f47f af51 	bne.w	80120f6 <rcl_wait+0x26>
 8012254:	f240 3085 	movw	r0, #901	@ 0x385
 8012258:	b019      	add	sp, #100	@ 0x64
 801225a:	ecbd 8b02 	vpop	{d8}
 801225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012262:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012266:	f04f 32ff 	mov.w	r2, #4294967295
 801226a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 801226e:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8012272:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8012276:	ea58 0307 	orrs.w	r3, r8, r7
 801227a:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 801227e:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8012282:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8012286:	f040 80b4 	bne.w	80123f2 <rcl_wait+0x322>
 801228a:	ae08      	add	r6, sp, #32
 801228c:	2200      	movs	r2, #0
 801228e:	2300      	movs	r3, #0
 8012290:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012294:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012298:	9602      	str	r6, [sp, #8]
 801229a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801229c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80122a0:	e9cd 3200 	strd	r3, r2, [sp]
 80122a4:	f105 0110 	add.w	r1, r5, #16
 80122a8:	f105 031c 	add.w	r3, r5, #28
 80122ac:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80122b0:	1d28      	adds	r0, r5, #4
 80122b2:	f002 fb3d 	bl	8014930 <rmw_wait>
 80122b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80122ba:	4680      	mov	r8, r0
 80122bc:	b332      	cbz	r2, 801230c <rcl_wait+0x23c>
 80122be:	2500      	movs	r5, #0
 80122c0:	462f      	mov	r7, r5
 80122c2:	462e      	mov	r6, r5
 80122c4:	e007      	b.n	80122d6 <rcl_wait+0x206>
 80122c6:	6922      	ldr	r2, [r4, #16]
 80122c8:	f842 3009 	str.w	r3, [r2, r9]
 80122cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80122d0:	3501      	adds	r5, #1
 80122d2:	4295      	cmp	r5, r2
 80122d4:	d21b      	bcs.n	801230e <rcl_wait+0x23e>
 80122d6:	6920      	ldr	r0, [r4, #16]
 80122d8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80122dc:	a907      	add	r1, sp, #28
 80122de:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d0f4      	beq.n	80122d0 <rcl_wait+0x200>
 80122e6:	f88d 601c 	strb.w	r6, [sp, #28]
 80122ea:	f7ff fa09 	bl	8011700 <rcl_timer_is_ready>
 80122ee:	2800      	cmp	r0, #0
 80122f0:	d1b2      	bne.n	8012258 <rcl_wait+0x188>
 80122f2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d0e5      	beq.n	80122c6 <rcl_wait+0x1f6>
 80122fa:	461f      	mov	r7, r3
 80122fc:	e7e6      	b.n	80122cc <rcl_wait+0x1fc>
 80122fe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012300:	6923      	ldr	r3, [r4, #16]
 8012302:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8012304:	2200      	movs	r2, #0
 8012306:	f843 2009 	str.w	r2, [r3, r9]
 801230a:	e759      	b.n	80121c0 <rcl_wait+0xf0>
 801230c:	4617      	mov	r7, r2
 801230e:	f038 0002 	bics.w	r0, r8, #2
 8012312:	f040 80a8 	bne.w	8012466 <rcl_wait+0x396>
 8012316:	6866      	ldr	r6, [r4, #4]
 8012318:	4602      	mov	r2, r0
 801231a:	b91e      	cbnz	r6, 8012324 <rcl_wait+0x254>
 801231c:	e00d      	b.n	801233a <rcl_wait+0x26a>
 801231e:	3201      	adds	r2, #1
 8012320:	4296      	cmp	r6, r2
 8012322:	d00a      	beq.n	801233a <rcl_wait+0x26a>
 8012324:	6899      	ldr	r1, [r3, #8]
 8012326:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801232a:	2900      	cmp	r1, #0
 801232c:	d1f7      	bne.n	801231e <rcl_wait+0x24e>
 801232e:	6825      	ldr	r5, [r4, #0]
 8012330:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012334:	3201      	adds	r2, #1
 8012336:	4296      	cmp	r6, r2
 8012338:	d1f4      	bne.n	8012324 <rcl_wait+0x254>
 801233a:	68e6      	ldr	r6, [r4, #12]
 801233c:	2200      	movs	r2, #0
 801233e:	b91e      	cbnz	r6, 8012348 <rcl_wait+0x278>
 8012340:	e00d      	b.n	801235e <rcl_wait+0x28e>
 8012342:	3201      	adds	r2, #1
 8012344:	42b2      	cmp	r2, r6
 8012346:	d00a      	beq.n	801235e <rcl_wait+0x28e>
 8012348:	6959      	ldr	r1, [r3, #20]
 801234a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801234e:	2900      	cmp	r1, #0
 8012350:	d1f7      	bne.n	8012342 <rcl_wait+0x272>
 8012352:	68a5      	ldr	r5, [r4, #8]
 8012354:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012358:	3201      	adds	r2, #1
 801235a:	42b2      	cmp	r2, r6
 801235c:	d1f4      	bne.n	8012348 <rcl_wait+0x278>
 801235e:	69e6      	ldr	r6, [r4, #28]
 8012360:	2200      	movs	r2, #0
 8012362:	b91e      	cbnz	r6, 801236c <rcl_wait+0x29c>
 8012364:	e00d      	b.n	8012382 <rcl_wait+0x2b2>
 8012366:	3201      	adds	r2, #1
 8012368:	4296      	cmp	r6, r2
 801236a:	d00a      	beq.n	8012382 <rcl_wait+0x2b2>
 801236c:	6a19      	ldr	r1, [r3, #32]
 801236e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012372:	2900      	cmp	r1, #0
 8012374:	d1f7      	bne.n	8012366 <rcl_wait+0x296>
 8012376:	69a5      	ldr	r5, [r4, #24]
 8012378:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801237c:	3201      	adds	r2, #1
 801237e:	4296      	cmp	r6, r2
 8012380:	d1f4      	bne.n	801236c <rcl_wait+0x29c>
 8012382:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8012384:	2200      	movs	r2, #0
 8012386:	b91e      	cbnz	r6, 8012390 <rcl_wait+0x2c0>
 8012388:	e00d      	b.n	80123a6 <rcl_wait+0x2d6>
 801238a:	3201      	adds	r2, #1
 801238c:	42b2      	cmp	r2, r6
 801238e:	d00a      	beq.n	80123a6 <rcl_wait+0x2d6>
 8012390:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012392:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012396:	2900      	cmp	r1, #0
 8012398:	d1f7      	bne.n	801238a <rcl_wait+0x2ba>
 801239a:	6a25      	ldr	r5, [r4, #32]
 801239c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80123a0:	3201      	adds	r2, #1
 80123a2:	42b2      	cmp	r2, r6
 80123a4:	d1f4      	bne.n	8012390 <rcl_wait+0x2c0>
 80123a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123a8:	2200      	movs	r2, #0
 80123aa:	b91e      	cbnz	r6, 80123b4 <rcl_wait+0x2e4>
 80123ac:	e00d      	b.n	80123ca <rcl_wait+0x2fa>
 80123ae:	3201      	adds	r2, #1
 80123b0:	42b2      	cmp	r2, r6
 80123b2:	d00a      	beq.n	80123ca <rcl_wait+0x2fa>
 80123b4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80123b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80123ba:	2900      	cmp	r1, #0
 80123bc:	d1f7      	bne.n	80123ae <rcl_wait+0x2de>
 80123be:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80123c0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80123c4:	3201      	adds	r2, #1
 80123c6:	42b2      	cmp	r2, r6
 80123c8:	d1f4      	bne.n	80123b4 <rcl_wait+0x2e4>
 80123ca:	f1b8 0f02 	cmp.w	r8, #2
 80123ce:	f47f af43 	bne.w	8012258 <rcl_wait+0x188>
 80123d2:	f087 0701 	eor.w	r7, r7, #1
 80123d6:	0078      	lsls	r0, r7, #1
 80123d8:	e73e      	b.n	8012258 <rcl_wait+0x188>
 80123da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80123de:	b019      	add	sp, #100	@ 0x64
 80123e0:	ecbd 8b02 	vpop	{d8}
 80123e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e8:	ffffffff 	.word	0xffffffff
 80123ec:	7fffffff 	.word	0x7fffffff
 80123f0:	465f      	mov	r7, fp
 80123f2:	f1b8 0f01 	cmp.w	r8, #1
 80123f6:	f177 0300 	sbcs.w	r3, r7, #0
 80123fa:	db3a      	blt.n	8012472 <rcl_wait+0x3a2>
 80123fc:	2601      	movs	r6, #1
 80123fe:	ad10      	add	r5, sp, #64	@ 0x40
 8012400:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8012404:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8012408:	a908      	add	r1, sp, #32
 801240a:	b1a0      	cbz	r0, 8012436 <rcl_wait+0x366>
 801240c:	f7fe fea2 	bl	8011154 <rcl_clock_get_now>
 8012410:	2800      	cmp	r0, #0
 8012412:	f47f af21 	bne.w	8012258 <rcl_wait+0x188>
 8012416:	9a08      	ldr	r2, [sp, #32]
 8012418:	68ab      	ldr	r3, [r5, #8]
 801241a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801241c:	1a9b      	subs	r3, r3, r2
 801241e:	68ea      	ldr	r2, [r5, #12]
 8012420:	eb62 0201 	sbc.w	r2, r2, r1
 8012424:	4598      	cmp	r8, r3
 8012426:	eb77 0102 	sbcs.w	r1, r7, r2
 801242a:	bfba      	itte	lt
 801242c:	4643      	movlt	r3, r8
 801242e:	463a      	movlt	r2, r7
 8012430:	2601      	movge	r6, #1
 8012432:	4698      	mov	r8, r3
 8012434:	4617      	mov	r7, r2
 8012436:	3508      	adds	r5, #8
 8012438:	45a9      	cmp	r9, r5
 801243a:	d1e3      	bne.n	8012404 <rcl_wait+0x334>
 801243c:	2f00      	cmp	r7, #0
 801243e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012440:	bfab      	itete	ge
 8012442:	4640      	movge	r0, r8
 8012444:	2000      	movlt	r0, #0
 8012446:	4639      	movge	r1, r7
 8012448:	2100      	movlt	r1, #0
 801244a:	2e00      	cmp	r6, #0
 801244c:	f43f af24 	beq.w	8012298 <rcl_wait+0x1c8>
 8012450:	a30d      	add	r3, pc, #52	@ (adr r3, 8012488 <rcl_wait+0x3b8>)
 8012452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012456:	f7ed ff43 	bl	80002e0 <__aeabi_ldivmod>
 801245a:	ae08      	add	r6, sp, #32
 801245c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012460:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012464:	e718      	b.n	8012298 <rcl_wait+0x1c8>
 8012466:	2001      	movs	r0, #1
 8012468:	b019      	add	sp, #100	@ 0x64
 801246a:	ecbd 8b02 	vpop	{d8}
 801246e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012472:	2600      	movs	r6, #0
 8012474:	f04f 38ff 	mov.w	r8, #4294967295
 8012478:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801247c:	e7bf      	b.n	80123fe <rcl_wait+0x32e>
 801247e:	200b      	movs	r0, #11
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	f3af 8000 	nop.w
 8012488:	3b9aca00 	.word	0x3b9aca00
 801248c:	00000000 	.word	0x00000000

08012490 <rcl_action_take_goal_response>:
 8012490:	b3b0      	cbz	r0, 8012500 <rcl_action_take_goal_response+0x70>
 8012492:	b570      	push	{r4, r5, r6, lr}
 8012494:	4604      	mov	r4, r0
 8012496:	6800      	ldr	r0, [r0, #0]
 8012498:	b368      	cbz	r0, 80124f6 <rcl_action_take_goal_response+0x66>
 801249a:	460d      	mov	r5, r1
 801249c:	4616      	mov	r6, r2
 801249e:	f7fd fe7b 	bl	8010198 <rcl_client_is_valid>
 80124a2:	b330      	cbz	r0, 80124f2 <rcl_action_take_goal_response+0x62>
 80124a4:	6820      	ldr	r0, [r4, #0]
 80124a6:	3004      	adds	r0, #4
 80124a8:	f7fd fe76 	bl	8010198 <rcl_client_is_valid>
 80124ac:	b308      	cbz	r0, 80124f2 <rcl_action_take_goal_response+0x62>
 80124ae:	6820      	ldr	r0, [r4, #0]
 80124b0:	3008      	adds	r0, #8
 80124b2:	f7fd fe71 	bl	8010198 <rcl_client_is_valid>
 80124b6:	b1e0      	cbz	r0, 80124f2 <rcl_action_take_goal_response+0x62>
 80124b8:	6820      	ldr	r0, [r4, #0]
 80124ba:	300c      	adds	r0, #12
 80124bc:	f7fe fdae 	bl	801101c <rcl_subscription_is_valid>
 80124c0:	b1b8      	cbz	r0, 80124f2 <rcl_action_take_goal_response+0x62>
 80124c2:	6820      	ldr	r0, [r4, #0]
 80124c4:	3010      	adds	r0, #16
 80124c6:	f7fe fda9 	bl	801101c <rcl_subscription_is_valid>
 80124ca:	b190      	cbz	r0, 80124f2 <rcl_action_take_goal_response+0x62>
 80124cc:	b1b5      	cbz	r5, 80124fc <rcl_action_take_goal_response+0x6c>
 80124ce:	b1ae      	cbz	r6, 80124fc <rcl_action_take_goal_response+0x6c>
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	4632      	mov	r2, r6
 80124d4:	4629      	mov	r1, r5
 80124d6:	f7fd fdf3 	bl	80100c0 <rcl_take_response>
 80124da:	b148      	cbz	r0, 80124f0 <rcl_action_take_goal_response+0x60>
 80124dc:	280a      	cmp	r0, #10
 80124de:	d007      	beq.n	80124f0 <rcl_action_take_goal_response+0x60>
 80124e0:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80124e4:	f241 0307 	movw	r3, #4103	@ 0x1007
 80124e8:	4290      	cmp	r0, r2
 80124ea:	bf0c      	ite	eq
 80124ec:	4618      	moveq	r0, r3
 80124ee:	2001      	movne	r0, #1
 80124f0:	bd70      	pop	{r4, r5, r6, pc}
 80124f2:	f7f7 ff25 	bl	800a340 <rcutils_reset_error>
 80124f6:	f241 0006 	movw	r0, #4102	@ 0x1006
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	200b      	movs	r0, #11
 80124fe:	bd70      	pop	{r4, r5, r6, pc}
 8012500:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012504:	4770      	bx	lr
 8012506:	bf00      	nop

08012508 <rcl_action_send_result_request>:
 8012508:	b378      	cbz	r0, 801256a <rcl_action_send_result_request+0x62>
 801250a:	b570      	push	{r4, r5, r6, lr}
 801250c:	4604      	mov	r4, r0
 801250e:	6800      	ldr	r0, [r0, #0]
 8012510:	b330      	cbz	r0, 8012560 <rcl_action_send_result_request+0x58>
 8012512:	460d      	mov	r5, r1
 8012514:	4616      	mov	r6, r2
 8012516:	f7fd fe3f 	bl	8010198 <rcl_client_is_valid>
 801251a:	b1f8      	cbz	r0, 801255c <rcl_action_send_result_request+0x54>
 801251c:	6820      	ldr	r0, [r4, #0]
 801251e:	3004      	adds	r0, #4
 8012520:	f7fd fe3a 	bl	8010198 <rcl_client_is_valid>
 8012524:	b1d0      	cbz	r0, 801255c <rcl_action_send_result_request+0x54>
 8012526:	6820      	ldr	r0, [r4, #0]
 8012528:	3008      	adds	r0, #8
 801252a:	f7fd fe35 	bl	8010198 <rcl_client_is_valid>
 801252e:	b1a8      	cbz	r0, 801255c <rcl_action_send_result_request+0x54>
 8012530:	6820      	ldr	r0, [r4, #0]
 8012532:	300c      	adds	r0, #12
 8012534:	f7fe fd72 	bl	801101c <rcl_subscription_is_valid>
 8012538:	b180      	cbz	r0, 801255c <rcl_action_send_result_request+0x54>
 801253a:	6820      	ldr	r0, [r4, #0]
 801253c:	3010      	adds	r0, #16
 801253e:	f7fe fd6d 	bl	801101c <rcl_subscription_is_valid>
 8012542:	b158      	cbz	r0, 801255c <rcl_action_send_result_request+0x54>
 8012544:	b17d      	cbz	r5, 8012566 <rcl_action_send_result_request+0x5e>
 8012546:	b176      	cbz	r6, 8012566 <rcl_action_send_result_request+0x5e>
 8012548:	6820      	ldr	r0, [r4, #0]
 801254a:	4632      	mov	r2, r6
 801254c:	4629      	mov	r1, r5
 801254e:	3008      	adds	r0, #8
 8012550:	f7fd fd62 	bl	8010018 <rcl_send_request>
 8012554:	3800      	subs	r0, #0
 8012556:	bf18      	it	ne
 8012558:	2001      	movne	r0, #1
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	f7f7 fef0 	bl	800a340 <rcutils_reset_error>
 8012560:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012564:	bd70      	pop	{r4, r5, r6, pc}
 8012566:	200b      	movs	r0, #11
 8012568:	bd70      	pop	{r4, r5, r6, pc}
 801256a:	f241 0006 	movw	r0, #4102	@ 0x1006
 801256e:	4770      	bx	lr

08012570 <rcl_action_take_result_response>:
 8012570:	2800      	cmp	r0, #0
 8012572:	d037      	beq.n	80125e4 <rcl_action_take_result_response+0x74>
 8012574:	b570      	push	{r4, r5, r6, lr}
 8012576:	4604      	mov	r4, r0
 8012578:	6800      	ldr	r0, [r0, #0]
 801257a:	b370      	cbz	r0, 80125da <rcl_action_take_result_response+0x6a>
 801257c:	460d      	mov	r5, r1
 801257e:	4616      	mov	r6, r2
 8012580:	f7fd fe0a 	bl	8010198 <rcl_client_is_valid>
 8012584:	b338      	cbz	r0, 80125d6 <rcl_action_take_result_response+0x66>
 8012586:	6820      	ldr	r0, [r4, #0]
 8012588:	3004      	adds	r0, #4
 801258a:	f7fd fe05 	bl	8010198 <rcl_client_is_valid>
 801258e:	b310      	cbz	r0, 80125d6 <rcl_action_take_result_response+0x66>
 8012590:	6820      	ldr	r0, [r4, #0]
 8012592:	3008      	adds	r0, #8
 8012594:	f7fd fe00 	bl	8010198 <rcl_client_is_valid>
 8012598:	b1e8      	cbz	r0, 80125d6 <rcl_action_take_result_response+0x66>
 801259a:	6820      	ldr	r0, [r4, #0]
 801259c:	300c      	adds	r0, #12
 801259e:	f7fe fd3d 	bl	801101c <rcl_subscription_is_valid>
 80125a2:	b1c0      	cbz	r0, 80125d6 <rcl_action_take_result_response+0x66>
 80125a4:	6820      	ldr	r0, [r4, #0]
 80125a6:	3010      	adds	r0, #16
 80125a8:	f7fe fd38 	bl	801101c <rcl_subscription_is_valid>
 80125ac:	b198      	cbz	r0, 80125d6 <rcl_action_take_result_response+0x66>
 80125ae:	b1bd      	cbz	r5, 80125e0 <rcl_action_take_result_response+0x70>
 80125b0:	b1b6      	cbz	r6, 80125e0 <rcl_action_take_result_response+0x70>
 80125b2:	6820      	ldr	r0, [r4, #0]
 80125b4:	4632      	mov	r2, r6
 80125b6:	4629      	mov	r1, r5
 80125b8:	3008      	adds	r0, #8
 80125ba:	f7fd fd81 	bl	80100c0 <rcl_take_response>
 80125be:	b148      	cbz	r0, 80125d4 <rcl_action_take_result_response+0x64>
 80125c0:	280a      	cmp	r0, #10
 80125c2:	d007      	beq.n	80125d4 <rcl_action_take_result_response+0x64>
 80125c4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80125c8:	f241 0307 	movw	r3, #4103	@ 0x1007
 80125cc:	4290      	cmp	r0, r2
 80125ce:	bf0c      	ite	eq
 80125d0:	4618      	moveq	r0, r3
 80125d2:	2001      	movne	r0, #1
 80125d4:	bd70      	pop	{r4, r5, r6, pc}
 80125d6:	f7f7 feb3 	bl	800a340 <rcutils_reset_error>
 80125da:	f241 0006 	movw	r0, #4102	@ 0x1006
 80125de:	bd70      	pop	{r4, r5, r6, pc}
 80125e0:	200b      	movs	r0, #11
 80125e2:	bd70      	pop	{r4, r5, r6, pc}
 80125e4:	f241 0006 	movw	r0, #4102	@ 0x1006
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop

080125ec <rcl_action_take_cancel_response>:
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d037      	beq.n	8012660 <rcl_action_take_cancel_response+0x74>
 80125f0:	b570      	push	{r4, r5, r6, lr}
 80125f2:	4604      	mov	r4, r0
 80125f4:	6800      	ldr	r0, [r0, #0]
 80125f6:	b370      	cbz	r0, 8012656 <rcl_action_take_cancel_response+0x6a>
 80125f8:	460d      	mov	r5, r1
 80125fa:	4616      	mov	r6, r2
 80125fc:	f7fd fdcc 	bl	8010198 <rcl_client_is_valid>
 8012600:	b338      	cbz	r0, 8012652 <rcl_action_take_cancel_response+0x66>
 8012602:	6820      	ldr	r0, [r4, #0]
 8012604:	3004      	adds	r0, #4
 8012606:	f7fd fdc7 	bl	8010198 <rcl_client_is_valid>
 801260a:	b310      	cbz	r0, 8012652 <rcl_action_take_cancel_response+0x66>
 801260c:	6820      	ldr	r0, [r4, #0]
 801260e:	3008      	adds	r0, #8
 8012610:	f7fd fdc2 	bl	8010198 <rcl_client_is_valid>
 8012614:	b1e8      	cbz	r0, 8012652 <rcl_action_take_cancel_response+0x66>
 8012616:	6820      	ldr	r0, [r4, #0]
 8012618:	300c      	adds	r0, #12
 801261a:	f7fe fcff 	bl	801101c <rcl_subscription_is_valid>
 801261e:	b1c0      	cbz	r0, 8012652 <rcl_action_take_cancel_response+0x66>
 8012620:	6820      	ldr	r0, [r4, #0]
 8012622:	3010      	adds	r0, #16
 8012624:	f7fe fcfa 	bl	801101c <rcl_subscription_is_valid>
 8012628:	b198      	cbz	r0, 8012652 <rcl_action_take_cancel_response+0x66>
 801262a:	b1bd      	cbz	r5, 801265c <rcl_action_take_cancel_response+0x70>
 801262c:	b1b6      	cbz	r6, 801265c <rcl_action_take_cancel_response+0x70>
 801262e:	6820      	ldr	r0, [r4, #0]
 8012630:	4632      	mov	r2, r6
 8012632:	4629      	mov	r1, r5
 8012634:	3004      	adds	r0, #4
 8012636:	f7fd fd43 	bl	80100c0 <rcl_take_response>
 801263a:	b148      	cbz	r0, 8012650 <rcl_action_take_cancel_response+0x64>
 801263c:	280a      	cmp	r0, #10
 801263e:	d007      	beq.n	8012650 <rcl_action_take_cancel_response+0x64>
 8012640:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012644:	f241 0307 	movw	r3, #4103	@ 0x1007
 8012648:	4290      	cmp	r0, r2
 801264a:	bf0c      	ite	eq
 801264c:	4618      	moveq	r0, r3
 801264e:	2001      	movne	r0, #1
 8012650:	bd70      	pop	{r4, r5, r6, pc}
 8012652:	f7f7 fe75 	bl	800a340 <rcutils_reset_error>
 8012656:	f241 0006 	movw	r0, #4102	@ 0x1006
 801265a:	bd70      	pop	{r4, r5, r6, pc}
 801265c:	200b      	movs	r0, #11
 801265e:	bd70      	pop	{r4, r5, r6, pc}
 8012660:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012664:	4770      	bx	lr
 8012666:	bf00      	nop

08012668 <rcl_action_take_feedback>:
 8012668:	2800      	cmp	r0, #0
 801266a:	d037      	beq.n	80126dc <rcl_action_take_feedback+0x74>
 801266c:	b530      	push	{r4, r5, lr}
 801266e:	4604      	mov	r4, r0
 8012670:	6800      	ldr	r0, [r0, #0]
 8012672:	b08f      	sub	sp, #60	@ 0x3c
 8012674:	b358      	cbz	r0, 80126ce <rcl_action_take_feedback+0x66>
 8012676:	460d      	mov	r5, r1
 8012678:	f7fd fd8e 	bl	8010198 <rcl_client_is_valid>
 801267c:	b328      	cbz	r0, 80126ca <rcl_action_take_feedback+0x62>
 801267e:	6820      	ldr	r0, [r4, #0]
 8012680:	3004      	adds	r0, #4
 8012682:	f7fd fd89 	bl	8010198 <rcl_client_is_valid>
 8012686:	b300      	cbz	r0, 80126ca <rcl_action_take_feedback+0x62>
 8012688:	6820      	ldr	r0, [r4, #0]
 801268a:	3008      	adds	r0, #8
 801268c:	f7fd fd84 	bl	8010198 <rcl_client_is_valid>
 8012690:	b1d8      	cbz	r0, 80126ca <rcl_action_take_feedback+0x62>
 8012692:	6820      	ldr	r0, [r4, #0]
 8012694:	300c      	adds	r0, #12
 8012696:	f7fe fcc1 	bl	801101c <rcl_subscription_is_valid>
 801269a:	b1b0      	cbz	r0, 80126ca <rcl_action_take_feedback+0x62>
 801269c:	6820      	ldr	r0, [r4, #0]
 801269e:	3010      	adds	r0, #16
 80126a0:	f7fe fcbc 	bl	801101c <rcl_subscription_is_valid>
 80126a4:	b188      	cbz	r0, 80126ca <rcl_action_take_feedback+0x62>
 80126a6:	b1b5      	cbz	r5, 80126d6 <rcl_action_take_feedback+0x6e>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	2300      	movs	r3, #0
 80126ac:	466a      	mov	r2, sp
 80126ae:	4629      	mov	r1, r5
 80126b0:	300c      	adds	r0, #12
 80126b2:	f7fe fc55 	bl	8010f60 <rcl_take>
 80126b6:	b160      	cbz	r0, 80126d2 <rcl_action_take_feedback+0x6a>
 80126b8:	f240 1391 	movw	r3, #401	@ 0x191
 80126bc:	4298      	cmp	r0, r3
 80126be:	d010      	beq.n	80126e2 <rcl_action_take_feedback+0x7a>
 80126c0:	280a      	cmp	r0, #10
 80126c2:	bf18      	it	ne
 80126c4:	2001      	movne	r0, #1
 80126c6:	b00f      	add	sp, #60	@ 0x3c
 80126c8:	bd30      	pop	{r4, r5, pc}
 80126ca:	f7f7 fe39 	bl	800a340 <rcutils_reset_error>
 80126ce:	f241 0006 	movw	r0, #4102	@ 0x1006
 80126d2:	b00f      	add	sp, #60	@ 0x3c
 80126d4:	bd30      	pop	{r4, r5, pc}
 80126d6:	200b      	movs	r0, #11
 80126d8:	b00f      	add	sp, #60	@ 0x3c
 80126da:	bd30      	pop	{r4, r5, pc}
 80126dc:	f241 0006 	movw	r0, #4102	@ 0x1006
 80126e0:	4770      	bx	lr
 80126e2:	f241 0007 	movw	r0, #4103	@ 0x1007
 80126e6:	e7f4      	b.n	80126d2 <rcl_action_take_feedback+0x6a>

080126e8 <rcl_action_wait_set_add_action_client>:
 80126e8:	2800      	cmp	r0, #0
 80126ea:	d045      	beq.n	8012778 <rcl_action_wait_set_add_action_client+0x90>
 80126ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ee:	460c      	mov	r4, r1
 80126f0:	2900      	cmp	r1, #0
 80126f2:	d03e      	beq.n	8012772 <rcl_action_wait_set_add_action_client+0x8a>
 80126f4:	4605      	mov	r5, r0
 80126f6:	6808      	ldr	r0, [r1, #0]
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d03a      	beq.n	8012772 <rcl_action_wait_set_add_action_client+0x8a>
 80126fc:	4617      	mov	r7, r2
 80126fe:	461e      	mov	r6, r3
 8012700:	f7fd fd4a 	bl	8010198 <rcl_client_is_valid>
 8012704:	b398      	cbz	r0, 801276e <rcl_action_wait_set_add_action_client+0x86>
 8012706:	6820      	ldr	r0, [r4, #0]
 8012708:	3004      	adds	r0, #4
 801270a:	f7fd fd45 	bl	8010198 <rcl_client_is_valid>
 801270e:	b370      	cbz	r0, 801276e <rcl_action_wait_set_add_action_client+0x86>
 8012710:	6820      	ldr	r0, [r4, #0]
 8012712:	3008      	adds	r0, #8
 8012714:	f7fd fd40 	bl	8010198 <rcl_client_is_valid>
 8012718:	b348      	cbz	r0, 801276e <rcl_action_wait_set_add_action_client+0x86>
 801271a:	6820      	ldr	r0, [r4, #0]
 801271c:	300c      	adds	r0, #12
 801271e:	f7fe fc7d 	bl	801101c <rcl_subscription_is_valid>
 8012722:	b320      	cbz	r0, 801276e <rcl_action_wait_set_add_action_client+0x86>
 8012724:	6820      	ldr	r0, [r4, #0]
 8012726:	3010      	adds	r0, #16
 8012728:	f7fe fc78 	bl	801101c <rcl_subscription_is_valid>
 801272c:	b1f8      	cbz	r0, 801276e <rcl_action_wait_set_add_action_client+0x86>
 801272e:	6821      	ldr	r1, [r4, #0]
 8012730:	4628      	mov	r0, r5
 8012732:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8012736:	f7ff fc71 	bl	801201c <rcl_wait_set_add_client>
 801273a:	b9b8      	cbnz	r0, 801276c <rcl_action_wait_set_add_action_client+0x84>
 801273c:	6821      	ldr	r1, [r4, #0]
 801273e:	4628      	mov	r0, r5
 8012740:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8012744:	3104      	adds	r1, #4
 8012746:	f7ff fc69 	bl	801201c <rcl_wait_set_add_client>
 801274a:	b978      	cbnz	r0, 801276c <rcl_action_wait_set_add_action_client+0x84>
 801274c:	6821      	ldr	r1, [r4, #0]
 801274e:	4628      	mov	r0, r5
 8012750:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8012754:	3108      	adds	r1, #8
 8012756:	f7ff fc61 	bl	801201c <rcl_wait_set_add_client>
 801275a:	b938      	cbnz	r0, 801276c <rcl_action_wait_set_add_action_client+0x84>
 801275c:	6821      	ldr	r1, [r4, #0]
 801275e:	4628      	mov	r0, r5
 8012760:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8012764:	310c      	adds	r1, #12
 8012766:	f7ff f903 	bl	8011970 <rcl_wait_set_add_subscription>
 801276a:	b140      	cbz	r0, 801277e <rcl_action_wait_set_add_action_client+0x96>
 801276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801276e:	f7f7 fde7 	bl	800a340 <rcutils_reset_error>
 8012772:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012778:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801277c:	4770      	bx	lr
 801277e:	6821      	ldr	r1, [r4, #0]
 8012780:	4628      	mov	r0, r5
 8012782:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8012786:	3110      	adds	r1, #16
 8012788:	f7ff f8f2 	bl	8011970 <rcl_wait_set_add_subscription>
 801278c:	2800      	cmp	r0, #0
 801278e:	d1ed      	bne.n	801276c <rcl_action_wait_set_add_action_client+0x84>
 8012790:	b11f      	cbz	r7, 801279a <rcl_action_wait_set_add_action_client+0xb2>
 8012792:	6823      	ldr	r3, [r4, #0]
 8012794:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8012798:	603b      	str	r3, [r7, #0]
 801279a:	2e00      	cmp	r6, #0
 801279c:	d0e6      	beq.n	801276c <rcl_action_wait_set_add_action_client+0x84>
 801279e:	6823      	ldr	r3, [r4, #0]
 80127a0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80127a4:	6033      	str	r3, [r6, #0]
 80127a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127a8 <rcl_action_client_wait_set_get_entities_ready>:
 80127a8:	2800      	cmp	r0, #0
 80127aa:	f000 8089 	beq.w	80128c0 <rcl_action_client_wait_set_get_entities_ready+0x118>
 80127ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b2:	460c      	mov	r4, r1
 80127b4:	2900      	cmp	r1, #0
 80127b6:	d079      	beq.n	80128ac <rcl_action_client_wait_set_get_entities_ready+0x104>
 80127b8:	4605      	mov	r5, r0
 80127ba:	6808      	ldr	r0, [r1, #0]
 80127bc:	2800      	cmp	r0, #0
 80127be:	d075      	beq.n	80128ac <rcl_action_client_wait_set_get_entities_ready+0x104>
 80127c0:	4616      	mov	r6, r2
 80127c2:	461f      	mov	r7, r3
 80127c4:	f7fd fce8 	bl	8010198 <rcl_client_is_valid>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d06d      	beq.n	80128a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80127cc:	6820      	ldr	r0, [r4, #0]
 80127ce:	3004      	adds	r0, #4
 80127d0:	f7fd fce2 	bl	8010198 <rcl_client_is_valid>
 80127d4:	2800      	cmp	r0, #0
 80127d6:	d067      	beq.n	80128a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80127d8:	6820      	ldr	r0, [r4, #0]
 80127da:	3008      	adds	r0, #8
 80127dc:	f7fd fcdc 	bl	8010198 <rcl_client_is_valid>
 80127e0:	2800      	cmp	r0, #0
 80127e2:	d061      	beq.n	80128a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80127e4:	6820      	ldr	r0, [r4, #0]
 80127e6:	300c      	adds	r0, #12
 80127e8:	f7fe fc18 	bl	801101c <rcl_subscription_is_valid>
 80127ec:	2800      	cmp	r0, #0
 80127ee:	d05b      	beq.n	80128a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80127f0:	6820      	ldr	r0, [r4, #0]
 80127f2:	3010      	adds	r0, #16
 80127f4:	f7fe fc12 	bl	801101c <rcl_subscription_is_valid>
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d055      	beq.n	80128a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80127fc:	2e00      	cmp	r6, #0
 80127fe:	d05c      	beq.n	80128ba <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012800:	2f00      	cmp	r7, #0
 8012802:	d05a      	beq.n	80128ba <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012804:	9b06      	ldr	r3, [sp, #24]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d057      	beq.n	80128ba <rcl_action_client_wait_set_get_entities_ready+0x112>
 801280a:	9b07      	ldr	r3, [sp, #28]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d054      	beq.n	80128ba <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012810:	9b08      	ldr	r3, [sp, #32]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d051      	beq.n	80128ba <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	686a      	ldr	r2, [r5, #4]
 801281a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801281e:	428a      	cmp	r2, r1
 8012820:	d948      	bls.n	80128b4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012822:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8012826:	4282      	cmp	r2, r0
 8012828:	d944      	bls.n	80128b4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801282a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801282e:	69ea      	ldr	r2, [r5, #28]
 8012830:	42a2      	cmp	r2, r4
 8012832:	d93f      	bls.n	80128b4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012834:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012838:	4562      	cmp	r2, ip
 801283a:	d93b      	bls.n	80128b4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801283c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8012840:	4572      	cmp	r2, lr
 8012842:	d937      	bls.n	80128b4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012844:	69aa      	ldr	r2, [r5, #24]
 8012846:	682d      	ldr	r5, [r5, #0]
 8012848:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801284c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012850:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8012854:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012858:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801285c:	f103 0c0c 	add.w	ip, r3, #12
 8012860:	eba5 050c 	sub.w	r5, r5, ip
 8012864:	fab5 f585 	clz	r5, r5
 8012868:	096d      	lsrs	r5, r5, #5
 801286a:	7035      	strb	r5, [r6, #0]
 801286c:	f103 0510 	add.w	r5, r3, #16
 8012870:	1b64      	subs	r4, r4, r5
 8012872:	fab4 f484 	clz	r4, r4
 8012876:	0964      	lsrs	r4, r4, #5
 8012878:	703c      	strb	r4, [r7, #0]
 801287a:	eba3 0008 	sub.w	r0, r3, r8
 801287e:	1d1c      	adds	r4, r3, #4
 8012880:	3308      	adds	r3, #8
 8012882:	1ad3      	subs	r3, r2, r3
 8012884:	fab0 f080 	clz	r0, r0
 8012888:	9a06      	ldr	r2, [sp, #24]
 801288a:	0940      	lsrs	r0, r0, #5
 801288c:	1b09      	subs	r1, r1, r4
 801288e:	7010      	strb	r0, [r2, #0]
 8012890:	fab1 f181 	clz	r1, r1
 8012894:	9a07      	ldr	r2, [sp, #28]
 8012896:	0949      	lsrs	r1, r1, #5
 8012898:	7011      	strb	r1, [r2, #0]
 801289a:	fab3 f383 	clz	r3, r3
 801289e:	9a08      	ldr	r2, [sp, #32]
 80128a0:	095b      	lsrs	r3, r3, #5
 80128a2:	2000      	movs	r0, #0
 80128a4:	7013      	strb	r3, [r2, #0]
 80128a6:	e003      	b.n	80128b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80128a8:	f7f7 fd4a 	bl	800a340 <rcutils_reset_error>
 80128ac:	f241 0006 	movw	r0, #4102	@ 0x1006
 80128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b4:	2001      	movs	r0, #1
 80128b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ba:	200b      	movs	r0, #11
 80128bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop

080128c8 <rcl_action_take_goal_request>:
 80128c8:	b3b0      	cbz	r0, 8012938 <rcl_action_take_goal_request+0x70>
 80128ca:	b570      	push	{r4, r5, r6, lr}
 80128cc:	4604      	mov	r4, r0
 80128ce:	6800      	ldr	r0, [r0, #0]
 80128d0:	b368      	cbz	r0, 801292e <rcl_action_take_goal_request+0x66>
 80128d2:	460d      	mov	r5, r1
 80128d4:	4616      	mov	r6, r2
 80128d6:	f7fe f9ef 	bl	8010cb8 <rcl_service_is_valid>
 80128da:	b330      	cbz	r0, 801292a <rcl_action_take_goal_request+0x62>
 80128dc:	6820      	ldr	r0, [r4, #0]
 80128de:	3004      	adds	r0, #4
 80128e0:	f7fe f9ea 	bl	8010cb8 <rcl_service_is_valid>
 80128e4:	b308      	cbz	r0, 801292a <rcl_action_take_goal_request+0x62>
 80128e6:	6820      	ldr	r0, [r4, #0]
 80128e8:	3008      	adds	r0, #8
 80128ea:	f7fe f9e5 	bl	8010cb8 <rcl_service_is_valid>
 80128ee:	b1e0      	cbz	r0, 801292a <rcl_action_take_goal_request+0x62>
 80128f0:	6820      	ldr	r0, [r4, #0]
 80128f2:	300c      	adds	r0, #12
 80128f4:	f7f6 fd94 	bl	8009420 <rcl_publisher_is_valid>
 80128f8:	b1b8      	cbz	r0, 801292a <rcl_action_take_goal_request+0x62>
 80128fa:	6820      	ldr	r0, [r4, #0]
 80128fc:	3010      	adds	r0, #16
 80128fe:	f7f6 fd8f 	bl	8009420 <rcl_publisher_is_valid>
 8012902:	b190      	cbz	r0, 801292a <rcl_action_take_goal_request+0x62>
 8012904:	b1b5      	cbz	r5, 8012934 <rcl_action_take_goal_request+0x6c>
 8012906:	b1ae      	cbz	r6, 8012934 <rcl_action_take_goal_request+0x6c>
 8012908:	6820      	ldr	r0, [r4, #0]
 801290a:	4632      	mov	r2, r6
 801290c:	4629      	mov	r1, r5
 801290e:	f7fe f953 	bl	8010bb8 <rcl_take_request>
 8012912:	b148      	cbz	r0, 8012928 <rcl_action_take_goal_request+0x60>
 8012914:	280a      	cmp	r0, #10
 8012916:	d007      	beq.n	8012928 <rcl_action_take_goal_request+0x60>
 8012918:	f240 2259 	movw	r2, #601	@ 0x259
 801291c:	f241 0369 	movw	r3, #4201	@ 0x1069
 8012920:	4290      	cmp	r0, r2
 8012922:	bf0c      	ite	eq
 8012924:	4618      	moveq	r0, r3
 8012926:	2001      	movne	r0, #1
 8012928:	bd70      	pop	{r4, r5, r6, pc}
 801292a:	f7f7 fd09 	bl	800a340 <rcutils_reset_error>
 801292e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012932:	bd70      	pop	{r4, r5, r6, pc}
 8012934:	200b      	movs	r0, #11
 8012936:	bd70      	pop	{r4, r5, r6, pc}
 8012938:	f241 0068 	movw	r0, #4200	@ 0x1068
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop

08012940 <rcl_action_send_goal_response>:
 8012940:	b378      	cbz	r0, 80129a2 <rcl_action_send_goal_response+0x62>
 8012942:	b570      	push	{r4, r5, r6, lr}
 8012944:	4604      	mov	r4, r0
 8012946:	6800      	ldr	r0, [r0, #0]
 8012948:	b330      	cbz	r0, 8012998 <rcl_action_send_goal_response+0x58>
 801294a:	460d      	mov	r5, r1
 801294c:	4616      	mov	r6, r2
 801294e:	f7fe f9b3 	bl	8010cb8 <rcl_service_is_valid>
 8012952:	b1f8      	cbz	r0, 8012994 <rcl_action_send_goal_response+0x54>
 8012954:	6820      	ldr	r0, [r4, #0]
 8012956:	3004      	adds	r0, #4
 8012958:	f7fe f9ae 	bl	8010cb8 <rcl_service_is_valid>
 801295c:	b1d0      	cbz	r0, 8012994 <rcl_action_send_goal_response+0x54>
 801295e:	6820      	ldr	r0, [r4, #0]
 8012960:	3008      	adds	r0, #8
 8012962:	f7fe f9a9 	bl	8010cb8 <rcl_service_is_valid>
 8012966:	b1a8      	cbz	r0, 8012994 <rcl_action_send_goal_response+0x54>
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	300c      	adds	r0, #12
 801296c:	f7f6 fd58 	bl	8009420 <rcl_publisher_is_valid>
 8012970:	b180      	cbz	r0, 8012994 <rcl_action_send_goal_response+0x54>
 8012972:	6820      	ldr	r0, [r4, #0]
 8012974:	3010      	adds	r0, #16
 8012976:	f7f6 fd53 	bl	8009420 <rcl_publisher_is_valid>
 801297a:	b158      	cbz	r0, 8012994 <rcl_action_send_goal_response+0x54>
 801297c:	b17d      	cbz	r5, 801299e <rcl_action_send_goal_response+0x5e>
 801297e:	b176      	cbz	r6, 801299e <rcl_action_send_goal_response+0x5e>
 8012980:	6820      	ldr	r0, [r4, #0]
 8012982:	4632      	mov	r2, r6
 8012984:	4629      	mov	r1, r5
 8012986:	f7fe f967 	bl	8010c58 <rcl_send_response>
 801298a:	b110      	cbz	r0, 8012992 <rcl_action_send_goal_response+0x52>
 801298c:	2802      	cmp	r0, #2
 801298e:	bf18      	it	ne
 8012990:	2001      	movne	r0, #1
 8012992:	bd70      	pop	{r4, r5, r6, pc}
 8012994:	f7f7 fcd4 	bl	800a340 <rcutils_reset_error>
 8012998:	f241 0068 	movw	r0, #4200	@ 0x1068
 801299c:	bd70      	pop	{r4, r5, r6, pc}
 801299e:	200b      	movs	r0, #11
 80129a0:	bd70      	pop	{r4, r5, r6, pc}
 80129a2:	f241 0068 	movw	r0, #4200	@ 0x1068
 80129a6:	4770      	bx	lr

080129a8 <rcl_action_take_result_request>:
 80129a8:	2800      	cmp	r0, #0
 80129aa:	d037      	beq.n	8012a1c <rcl_action_take_result_request+0x74>
 80129ac:	b570      	push	{r4, r5, r6, lr}
 80129ae:	4604      	mov	r4, r0
 80129b0:	6800      	ldr	r0, [r0, #0]
 80129b2:	b370      	cbz	r0, 8012a12 <rcl_action_take_result_request+0x6a>
 80129b4:	460d      	mov	r5, r1
 80129b6:	4616      	mov	r6, r2
 80129b8:	f7fe f97e 	bl	8010cb8 <rcl_service_is_valid>
 80129bc:	b338      	cbz	r0, 8012a0e <rcl_action_take_result_request+0x66>
 80129be:	6820      	ldr	r0, [r4, #0]
 80129c0:	3004      	adds	r0, #4
 80129c2:	f7fe f979 	bl	8010cb8 <rcl_service_is_valid>
 80129c6:	b310      	cbz	r0, 8012a0e <rcl_action_take_result_request+0x66>
 80129c8:	6820      	ldr	r0, [r4, #0]
 80129ca:	3008      	adds	r0, #8
 80129cc:	f7fe f974 	bl	8010cb8 <rcl_service_is_valid>
 80129d0:	b1e8      	cbz	r0, 8012a0e <rcl_action_take_result_request+0x66>
 80129d2:	6820      	ldr	r0, [r4, #0]
 80129d4:	300c      	adds	r0, #12
 80129d6:	f7f6 fd23 	bl	8009420 <rcl_publisher_is_valid>
 80129da:	b1c0      	cbz	r0, 8012a0e <rcl_action_take_result_request+0x66>
 80129dc:	6820      	ldr	r0, [r4, #0]
 80129de:	3010      	adds	r0, #16
 80129e0:	f7f6 fd1e 	bl	8009420 <rcl_publisher_is_valid>
 80129e4:	b198      	cbz	r0, 8012a0e <rcl_action_take_result_request+0x66>
 80129e6:	b1bd      	cbz	r5, 8012a18 <rcl_action_take_result_request+0x70>
 80129e8:	b1b6      	cbz	r6, 8012a18 <rcl_action_take_result_request+0x70>
 80129ea:	6820      	ldr	r0, [r4, #0]
 80129ec:	4632      	mov	r2, r6
 80129ee:	4629      	mov	r1, r5
 80129f0:	3008      	adds	r0, #8
 80129f2:	f7fe f8e1 	bl	8010bb8 <rcl_take_request>
 80129f6:	b148      	cbz	r0, 8012a0c <rcl_action_take_result_request+0x64>
 80129f8:	280a      	cmp	r0, #10
 80129fa:	d007      	beq.n	8012a0c <rcl_action_take_result_request+0x64>
 80129fc:	f240 2259 	movw	r2, #601	@ 0x259
 8012a00:	f241 0369 	movw	r3, #4201	@ 0x1069
 8012a04:	4290      	cmp	r0, r2
 8012a06:	bf0c      	ite	eq
 8012a08:	4618      	moveq	r0, r3
 8012a0a:	2001      	movne	r0, #1
 8012a0c:	bd70      	pop	{r4, r5, r6, pc}
 8012a0e:	f7f7 fc97 	bl	800a340 <rcutils_reset_error>
 8012a12:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012a16:	bd70      	pop	{r4, r5, r6, pc}
 8012a18:	200b      	movs	r0, #11
 8012a1a:	bd70      	pop	{r4, r5, r6, pc}
 8012a1c:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012a20:	4770      	bx	lr
 8012a22:	bf00      	nop

08012a24 <rcl_action_take_cancel_request>:
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d037      	beq.n	8012a98 <rcl_action_take_cancel_request+0x74>
 8012a28:	b570      	push	{r4, r5, r6, lr}
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	6800      	ldr	r0, [r0, #0]
 8012a2e:	b370      	cbz	r0, 8012a8e <rcl_action_take_cancel_request+0x6a>
 8012a30:	460d      	mov	r5, r1
 8012a32:	4616      	mov	r6, r2
 8012a34:	f7fe f940 	bl	8010cb8 <rcl_service_is_valid>
 8012a38:	b338      	cbz	r0, 8012a8a <rcl_action_take_cancel_request+0x66>
 8012a3a:	6820      	ldr	r0, [r4, #0]
 8012a3c:	3004      	adds	r0, #4
 8012a3e:	f7fe f93b 	bl	8010cb8 <rcl_service_is_valid>
 8012a42:	b310      	cbz	r0, 8012a8a <rcl_action_take_cancel_request+0x66>
 8012a44:	6820      	ldr	r0, [r4, #0]
 8012a46:	3008      	adds	r0, #8
 8012a48:	f7fe f936 	bl	8010cb8 <rcl_service_is_valid>
 8012a4c:	b1e8      	cbz	r0, 8012a8a <rcl_action_take_cancel_request+0x66>
 8012a4e:	6820      	ldr	r0, [r4, #0]
 8012a50:	300c      	adds	r0, #12
 8012a52:	f7f6 fce5 	bl	8009420 <rcl_publisher_is_valid>
 8012a56:	b1c0      	cbz	r0, 8012a8a <rcl_action_take_cancel_request+0x66>
 8012a58:	6820      	ldr	r0, [r4, #0]
 8012a5a:	3010      	adds	r0, #16
 8012a5c:	f7f6 fce0 	bl	8009420 <rcl_publisher_is_valid>
 8012a60:	b198      	cbz	r0, 8012a8a <rcl_action_take_cancel_request+0x66>
 8012a62:	b1bd      	cbz	r5, 8012a94 <rcl_action_take_cancel_request+0x70>
 8012a64:	b1b6      	cbz	r6, 8012a94 <rcl_action_take_cancel_request+0x70>
 8012a66:	6820      	ldr	r0, [r4, #0]
 8012a68:	4632      	mov	r2, r6
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	3004      	adds	r0, #4
 8012a6e:	f7fe f8a3 	bl	8010bb8 <rcl_take_request>
 8012a72:	b148      	cbz	r0, 8012a88 <rcl_action_take_cancel_request+0x64>
 8012a74:	280a      	cmp	r0, #10
 8012a76:	d007      	beq.n	8012a88 <rcl_action_take_cancel_request+0x64>
 8012a78:	f240 2259 	movw	r2, #601	@ 0x259
 8012a7c:	f241 0369 	movw	r3, #4201	@ 0x1069
 8012a80:	4290      	cmp	r0, r2
 8012a82:	bf0c      	ite	eq
 8012a84:	4618      	moveq	r0, r3
 8012a86:	2001      	movne	r0, #1
 8012a88:	bd70      	pop	{r4, r5, r6, pc}
 8012a8a:	f7f7 fc59 	bl	800a340 <rcutils_reset_error>
 8012a8e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012a92:	bd70      	pop	{r4, r5, r6, pc}
 8012a94:	200b      	movs	r0, #11
 8012a96:	bd70      	pop	{r4, r5, r6, pc}
 8012a98:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop

08012aa0 <rcl_action_send_cancel_response>:
 8012aa0:	b380      	cbz	r0, 8012b04 <rcl_action_send_cancel_response+0x64>
 8012aa2:	b570      	push	{r4, r5, r6, lr}
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	6800      	ldr	r0, [r0, #0]
 8012aa8:	b338      	cbz	r0, 8012afa <rcl_action_send_cancel_response+0x5a>
 8012aaa:	460d      	mov	r5, r1
 8012aac:	4616      	mov	r6, r2
 8012aae:	f7fe f903 	bl	8010cb8 <rcl_service_is_valid>
 8012ab2:	b300      	cbz	r0, 8012af6 <rcl_action_send_cancel_response+0x56>
 8012ab4:	6820      	ldr	r0, [r4, #0]
 8012ab6:	3004      	adds	r0, #4
 8012ab8:	f7fe f8fe 	bl	8010cb8 <rcl_service_is_valid>
 8012abc:	b1d8      	cbz	r0, 8012af6 <rcl_action_send_cancel_response+0x56>
 8012abe:	6820      	ldr	r0, [r4, #0]
 8012ac0:	3008      	adds	r0, #8
 8012ac2:	f7fe f8f9 	bl	8010cb8 <rcl_service_is_valid>
 8012ac6:	b1b0      	cbz	r0, 8012af6 <rcl_action_send_cancel_response+0x56>
 8012ac8:	6820      	ldr	r0, [r4, #0]
 8012aca:	300c      	adds	r0, #12
 8012acc:	f7f6 fca8 	bl	8009420 <rcl_publisher_is_valid>
 8012ad0:	b188      	cbz	r0, 8012af6 <rcl_action_send_cancel_response+0x56>
 8012ad2:	6820      	ldr	r0, [r4, #0]
 8012ad4:	3010      	adds	r0, #16
 8012ad6:	f7f6 fca3 	bl	8009420 <rcl_publisher_is_valid>
 8012ada:	b160      	cbz	r0, 8012af6 <rcl_action_send_cancel_response+0x56>
 8012adc:	b185      	cbz	r5, 8012b00 <rcl_action_send_cancel_response+0x60>
 8012ade:	b17e      	cbz	r6, 8012b00 <rcl_action_send_cancel_response+0x60>
 8012ae0:	6820      	ldr	r0, [r4, #0]
 8012ae2:	4632      	mov	r2, r6
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	3004      	adds	r0, #4
 8012ae8:	f7fe f8b6 	bl	8010c58 <rcl_send_response>
 8012aec:	b110      	cbz	r0, 8012af4 <rcl_action_send_cancel_response+0x54>
 8012aee:	2802      	cmp	r0, #2
 8012af0:	bf18      	it	ne
 8012af2:	2001      	movne	r0, #1
 8012af4:	bd70      	pop	{r4, r5, r6, pc}
 8012af6:	f7f7 fc23 	bl	800a340 <rcutils_reset_error>
 8012afa:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012afe:	bd70      	pop	{r4, r5, r6, pc}
 8012b00:	200b      	movs	r0, #11
 8012b02:	bd70      	pop	{r4, r5, r6, pc}
 8012b04:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012b08:	4770      	bx	lr
 8012b0a:	bf00      	nop

08012b0c <rcl_action_wait_set_add_action_server>:
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	d04a      	beq.n	8012ba6 <rcl_action_wait_set_add_action_server+0x9a>
 8012b10:	b570      	push	{r4, r5, r6, lr}
 8012b12:	460c      	mov	r4, r1
 8012b14:	2900      	cmp	r1, #0
 8012b16:	d043      	beq.n	8012ba0 <rcl_action_wait_set_add_action_server+0x94>
 8012b18:	4605      	mov	r5, r0
 8012b1a:	6808      	ldr	r0, [r1, #0]
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	d03f      	beq.n	8012ba0 <rcl_action_wait_set_add_action_server+0x94>
 8012b20:	4616      	mov	r6, r2
 8012b22:	f7fe f8c9 	bl	8010cb8 <rcl_service_is_valid>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d038      	beq.n	8012b9c <rcl_action_wait_set_add_action_server+0x90>
 8012b2a:	6820      	ldr	r0, [r4, #0]
 8012b2c:	3004      	adds	r0, #4
 8012b2e:	f7fe f8c3 	bl	8010cb8 <rcl_service_is_valid>
 8012b32:	b398      	cbz	r0, 8012b9c <rcl_action_wait_set_add_action_server+0x90>
 8012b34:	6820      	ldr	r0, [r4, #0]
 8012b36:	3008      	adds	r0, #8
 8012b38:	f7fe f8be 	bl	8010cb8 <rcl_service_is_valid>
 8012b3c:	b370      	cbz	r0, 8012b9c <rcl_action_wait_set_add_action_server+0x90>
 8012b3e:	6820      	ldr	r0, [r4, #0]
 8012b40:	300c      	adds	r0, #12
 8012b42:	f7f6 fc87 	bl	8009454 <rcl_publisher_is_valid_except_context>
 8012b46:	b348      	cbz	r0, 8012b9c <rcl_action_wait_set_add_action_server+0x90>
 8012b48:	6820      	ldr	r0, [r4, #0]
 8012b4a:	3010      	adds	r0, #16
 8012b4c:	f7f6 fc82 	bl	8009454 <rcl_publisher_is_valid_except_context>
 8012b50:	b320      	cbz	r0, 8012b9c <rcl_action_wait_set_add_action_server+0x90>
 8012b52:	6821      	ldr	r1, [r4, #0]
 8012b54:	4628      	mov	r0, r5
 8012b56:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8012b5a:	f7ff fa8b 	bl	8012074 <rcl_wait_set_add_service>
 8012b5e:	b9e0      	cbnz	r0, 8012b9a <rcl_action_wait_set_add_action_server+0x8e>
 8012b60:	6821      	ldr	r1, [r4, #0]
 8012b62:	4628      	mov	r0, r5
 8012b64:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8012b68:	3104      	adds	r1, #4
 8012b6a:	f7ff fa83 	bl	8012074 <rcl_wait_set_add_service>
 8012b6e:	b9a0      	cbnz	r0, 8012b9a <rcl_action_wait_set_add_action_server+0x8e>
 8012b70:	6821      	ldr	r1, [r4, #0]
 8012b72:	4628      	mov	r0, r5
 8012b74:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8012b78:	3108      	adds	r1, #8
 8012b7a:	f7ff fa7b 	bl	8012074 <rcl_wait_set_add_service>
 8012b7e:	b960      	cbnz	r0, 8012b9a <rcl_action_wait_set_add_action_server+0x8e>
 8012b80:	6821      	ldr	r1, [r4, #0]
 8012b82:	4628      	mov	r0, r5
 8012b84:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012b88:	3114      	adds	r1, #20
 8012b8a:	f7ff fa17 	bl	8011fbc <rcl_wait_set_add_timer>
 8012b8e:	b920      	cbnz	r0, 8012b9a <rcl_action_wait_set_add_action_server+0x8e>
 8012b90:	b11e      	cbz	r6, 8012b9a <rcl_action_wait_set_add_action_server+0x8e>
 8012b92:	6823      	ldr	r3, [r4, #0]
 8012b94:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012b98:	6033      	str	r3, [r6, #0]
 8012b9a:	bd70      	pop	{r4, r5, r6, pc}
 8012b9c:	f7f7 fbd0 	bl	800a340 <rcutils_reset_error>
 8012ba0:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012ba4:	bd70      	pop	{r4, r5, r6, pc}
 8012ba6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012baa:	4770      	bx	lr

08012bac <rcl_action_server_wait_set_get_entities_ready>:
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d060      	beq.n	8012c72 <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8012bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	2900      	cmp	r1, #0
 8012bb6:	d057      	beq.n	8012c68 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8012bb8:	4605      	mov	r5, r0
 8012bba:	6808      	ldr	r0, [r1, #0]
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	d053      	beq.n	8012c68 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8012bc0:	4616      	mov	r6, r2
 8012bc2:	461f      	mov	r7, r3
 8012bc4:	f7fe f878 	bl	8010cb8 <rcl_service_is_valid>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d04b      	beq.n	8012c64 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012bcc:	6820      	ldr	r0, [r4, #0]
 8012bce:	3004      	adds	r0, #4
 8012bd0:	f7fe f872 	bl	8010cb8 <rcl_service_is_valid>
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	d045      	beq.n	8012c64 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012bd8:	6820      	ldr	r0, [r4, #0]
 8012bda:	3008      	adds	r0, #8
 8012bdc:	f7fe f86c 	bl	8010cb8 <rcl_service_is_valid>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d03f      	beq.n	8012c64 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012be4:	6820      	ldr	r0, [r4, #0]
 8012be6:	300c      	adds	r0, #12
 8012be8:	f7f6 fc34 	bl	8009454 <rcl_publisher_is_valid_except_context>
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d039      	beq.n	8012c64 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012bf0:	6820      	ldr	r0, [r4, #0]
 8012bf2:	3010      	adds	r0, #16
 8012bf4:	f7f6 fc2e 	bl	8009454 <rcl_publisher_is_valid_except_context>
 8012bf8:	b3a0      	cbz	r0, 8012c64 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8012bfa:	b3c6      	cbz	r6, 8012c6e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8012bfc:	b3bf      	cbz	r7, 8012c6e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8012bfe:	9b06      	ldr	r3, [sp, #24]
 8012c00:	b3ab      	cbz	r3, 8012c6e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8012c02:	9b07      	ldr	r3, [sp, #28]
 8012c04:	b39b      	cbz	r3, 8012c6e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	692a      	ldr	r2, [r5, #16]
 8012c0a:	6a2c      	ldr	r4, [r5, #32]
 8012c0c:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8012c10:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 8012c14:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8012c18:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012c1c:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8012c20:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 8012c24:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8012c28:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012c2c:	1ae4      	subs	r4, r4, r3
 8012c2e:	fab4 f484 	clz	r4, r4
 8012c32:	0964      	lsrs	r4, r4, #5
 8012c34:	7034      	strb	r4, [r6, #0]
 8012c36:	1d1c      	adds	r4, r3, #4
 8012c38:	1b00      	subs	r0, r0, r4
 8012c3a:	fab0 f080 	clz	r0, r0
 8012c3e:	0940      	lsrs	r0, r0, #5
 8012c40:	7038      	strb	r0, [r7, #0]
 8012c42:	f103 0008 	add.w	r0, r3, #8
 8012c46:	1a09      	subs	r1, r1, r0
 8012c48:	3314      	adds	r3, #20
 8012c4a:	1ad3      	subs	r3, r2, r3
 8012c4c:	fab1 f181 	clz	r1, r1
 8012c50:	9a06      	ldr	r2, [sp, #24]
 8012c52:	0949      	lsrs	r1, r1, #5
 8012c54:	7011      	strb	r1, [r2, #0]
 8012c56:	fab3 f383 	clz	r3, r3
 8012c5a:	9a07      	ldr	r2, [sp, #28]
 8012c5c:	095b      	lsrs	r3, r3, #5
 8012c5e:	2000      	movs	r0, #0
 8012c60:	7013      	strb	r3, [r2, #0]
 8012c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c64:	f7f7 fb6c 	bl	800a340 <rcutils_reset_error>
 8012c68:	f241 0068 	movw	r0, #4200	@ 0x1068
 8012c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c6e:	200b      	movs	r0, #11
 8012c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c76:	4770      	bx	lr

08012c78 <_execute_event_handler>:
 8012c78:	2002      	movs	r0, #2
 8012c7a:	4770      	bx	lr

08012c7c <_cancel_goal_event_handler>:
 8012c7c:	2003      	movs	r0, #3
 8012c7e:	4770      	bx	lr

08012c80 <_succeed_event_handler>:
 8012c80:	2004      	movs	r0, #4
 8012c82:	4770      	bx	lr

08012c84 <_abort_event_handler>:
 8012c84:	2006      	movs	r0, #6
 8012c86:	4770      	bx	lr

08012c88 <_canceled_event_handler>:
 8012c88:	2005      	movs	r0, #5
 8012c8a:	4770      	bx	lr

08012c8c <rcl_action_transition_goal_state>:
 8012c8c:	fa5f fc80 	uxtb.w	ip, r0
 8012c90:	f1bc 0f06 	cmp.w	ip, #6
 8012c94:	d80c      	bhi.n	8012cb0 <rcl_action_transition_goal_state+0x24>
 8012c96:	2904      	cmp	r1, #4
 8012c98:	d80a      	bhi.n	8012cb0 <rcl_action_transition_goal_state+0x24>
 8012c9a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012c9e:	b410      	push	{r4}
 8012ca0:	440b      	add	r3, r1
 8012ca2:	4c06      	ldr	r4, [pc, #24]	@ (8012cbc <rcl_action_transition_goal_state+0x30>)
 8012ca4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012ca8:	b123      	cbz	r3, 8012cb4 <rcl_action_transition_goal_state+0x28>
 8012caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cae:	4718      	bx	r3
 8012cb0:	2000      	movs	r0, #0
 8012cb2:	4770      	bx	lr
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cba:	4770      	bx	lr
 8012cbc:	08019568 	.word	0x08019568

08012cc0 <rcl_action_get_zero_initialized_cancel_response>:
 8012cc0:	b510      	push	{r4, lr}
 8012cc2:	4c07      	ldr	r4, [pc, #28]	@ (8012ce0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012cc4:	4686      	mov	lr, r0
 8012cc6:	4684      	mov	ip, r0
 8012cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012cca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012cd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cd4:	6823      	ldr	r3, [r4, #0]
 8012cd6:	f8cc 3000 	str.w	r3, [ip]
 8012cda:	4670      	mov	r0, lr
 8012cdc:	bd10      	pop	{r4, pc}
 8012cde:	bf00      	nop
 8012ce0:	080195f4 	.word	0x080195f4

08012ce4 <rclc_action_send_result_request>:
 8012ce4:	b1d0      	cbz	r0, 8012d1c <rclc_action_send_result_request+0x38>
 8012ce6:	b500      	push	{lr}
 8012ce8:	4684      	mov	ip, r0
 8012cea:	b087      	sub	sp, #28
 8012cec:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012cf0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012cf4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012cf8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012cfc:	f10d 0e08 	add.w	lr, sp, #8
 8012d00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d04:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012d08:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012d0c:	a902      	add	r1, sp, #8
 8012d0e:	3010      	adds	r0, #16
 8012d10:	f7ff fbfa 	bl	8012508 <rcl_action_send_result_request>
 8012d14:	b920      	cbnz	r0, 8012d20 <rclc_action_send_result_request+0x3c>
 8012d16:	b007      	add	sp, #28
 8012d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d1c:	200b      	movs	r0, #11
 8012d1e:	4770      	bx	lr
 8012d20:	9001      	str	r0, [sp, #4]
 8012d22:	f7f7 fb0d 	bl	800a340 <rcutils_reset_error>
 8012d26:	9801      	ldr	r0, [sp, #4]
 8012d28:	b007      	add	sp, #28
 8012d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d2e:	bf00      	nop

08012d30 <rclc_action_take_goal_handle>:
 8012d30:	4603      	mov	r3, r0
 8012d32:	b158      	cbz	r0, 8012d4c <rclc_action_take_goal_handle+0x1c>
 8012d34:	6880      	ldr	r0, [r0, #8]
 8012d36:	b148      	cbz	r0, 8012d4c <rclc_action_take_goal_handle+0x1c>
 8012d38:	6801      	ldr	r1, [r0, #0]
 8012d3a:	6099      	str	r1, [r3, #8]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	7202      	strb	r2, [r0, #8]
 8012d40:	68d9      	ldr	r1, [r3, #12]
 8012d42:	6001      	str	r1, [r0, #0]
 8012d44:	6202      	str	r2, [r0, #32]
 8012d46:	8482      	strh	r2, [r0, #36]	@ 0x24
 8012d48:	60d8      	str	r0, [r3, #12]
 8012d4a:	4770      	bx	lr
 8012d4c:	4770      	bx	lr
 8012d4e:	bf00      	nop

08012d50 <rclc_action_remove_used_goal_handle>:
 8012d50:	b180      	cbz	r0, 8012d74 <rclc_action_remove_used_goal_handle+0x24>
 8012d52:	b179      	cbz	r1, 8012d74 <rclc_action_remove_used_goal_handle+0x24>
 8012d54:	68c3      	ldr	r3, [r0, #12]
 8012d56:	4299      	cmp	r1, r3
 8012d58:	d00d      	beq.n	8012d76 <rclc_action_remove_used_goal_handle+0x26>
 8012d5a:	b12b      	cbz	r3, 8012d68 <rclc_action_remove_used_goal_handle+0x18>
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	4291      	cmp	r1, r2
 8012d60:	d003      	beq.n	8012d6a <rclc_action_remove_used_goal_handle+0x1a>
 8012d62:	4613      	mov	r3, r2
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d1f9      	bne.n	8012d5c <rclc_action_remove_used_goal_handle+0xc>
 8012d68:	4770      	bx	lr
 8012d6a:	680a      	ldr	r2, [r1, #0]
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	6883      	ldr	r3, [r0, #8]
 8012d70:	600b      	str	r3, [r1, #0]
 8012d72:	6081      	str	r1, [r0, #8]
 8012d74:	4770      	bx	lr
 8012d76:	680b      	ldr	r3, [r1, #0]
 8012d78:	60c3      	str	r3, [r0, #12]
 8012d7a:	e7f8      	b.n	8012d6e <rclc_action_remove_used_goal_handle+0x1e>

08012d7c <rclc_action_find_goal_handle_by_uuid>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	b180      	cbz	r0, 8012da2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8012d80:	460d      	mov	r5, r1
 8012d82:	b181      	cbz	r1, 8012da6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012d84:	68c4      	ldr	r4, [r0, #12]
 8012d86:	b914      	cbnz	r4, 8012d8e <rclc_action_find_goal_handle_by_uuid+0x12>
 8012d88:	e009      	b.n	8012d9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012d8a:	6824      	ldr	r4, [r4, #0]
 8012d8c:	b13c      	cbz	r4, 8012d9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012d8e:	2210      	movs	r2, #16
 8012d90:	4629      	mov	r1, r5
 8012d92:	f104 0009 	add.w	r0, r4, #9
 8012d96:	f004 fe17 	bl	80179c8 <memcmp>
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	d1f5      	bne.n	8012d8a <rclc_action_find_goal_handle_by_uuid+0xe>
 8012d9e:	4620      	mov	r0, r4
 8012da0:	bd38      	pop	{r3, r4, r5, pc}
 8012da2:	4604      	mov	r4, r0
 8012da4:	e7fb      	b.n	8012d9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012da6:	460c      	mov	r4, r1
 8012da8:	e7f9      	b.n	8012d9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012daa:	bf00      	nop

08012dac <rclc_action_find_first_handle_by_status>:
 8012dac:	b140      	cbz	r0, 8012dc0 <rclc_action_find_first_handle_by_status+0x14>
 8012dae:	68c0      	ldr	r0, [r0, #12]
 8012db0:	b910      	cbnz	r0, 8012db8 <rclc_action_find_first_handle_by_status+0xc>
 8012db2:	e005      	b.n	8012dc0 <rclc_action_find_first_handle_by_status+0x14>
 8012db4:	6800      	ldr	r0, [r0, #0]
 8012db6:	b118      	cbz	r0, 8012dc0 <rclc_action_find_first_handle_by_status+0x14>
 8012db8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012dbc:	428b      	cmp	r3, r1
 8012dbe:	d1f9      	bne.n	8012db4 <rclc_action_find_first_handle_by_status+0x8>
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop

08012dc4 <rclc_action_find_first_terminated_handle>:
 8012dc4:	b140      	cbz	r0, 8012dd8 <rclc_action_find_first_terminated_handle+0x14>
 8012dc6:	68c0      	ldr	r0, [r0, #12]
 8012dc8:	b910      	cbnz	r0, 8012dd0 <rclc_action_find_first_terminated_handle+0xc>
 8012dca:	e005      	b.n	8012dd8 <rclc_action_find_first_terminated_handle+0x14>
 8012dcc:	6800      	ldr	r0, [r0, #0]
 8012dce:	b118      	cbz	r0, 8012dd8 <rclc_action_find_first_terminated_handle+0x14>
 8012dd0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012dd4:	2b03      	cmp	r3, #3
 8012dd6:	ddf9      	ble.n	8012dcc <rclc_action_find_first_terminated_handle+0x8>
 8012dd8:	4770      	bx	lr
 8012dda:	bf00      	nop

08012ddc <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012ddc:	b170      	cbz	r0, 8012dfc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012dde:	68c0      	ldr	r0, [r0, #12]
 8012de0:	b160      	cbz	r0, 8012dfc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012de2:	b410      	push	{r4}
 8012de4:	e001      	b.n	8012dea <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012de6:	6800      	ldr	r0, [r0, #0]
 8012de8:	b128      	cbz	r0, 8012df6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012dea:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012dee:	4299      	cmp	r1, r3
 8012df0:	bf08      	it	eq
 8012df2:	4294      	cmpeq	r4, r2
 8012df4:	d1f7      	bne.n	8012de6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dfa:	4770      	bx	lr
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop

08012e00 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012e00:	b170      	cbz	r0, 8012e20 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012e02:	68c0      	ldr	r0, [r0, #12]
 8012e04:	b160      	cbz	r0, 8012e20 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012e06:	b410      	push	{r4}
 8012e08:	e001      	b.n	8012e0e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012e0a:	6800      	ldr	r0, [r0, #0]
 8012e0c:	b128      	cbz	r0, 8012e1a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012e0e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012e12:	4299      	cmp	r1, r3
 8012e14:	bf08      	it	eq
 8012e16:	4294      	cmpeq	r4, r2
 8012e18:	d1f7      	bne.n	8012e0a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e1e:	4770      	bx	lr
 8012e20:	4770      	bx	lr
 8012e22:	bf00      	nop

08012e24 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012e24:	b170      	cbz	r0, 8012e44 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012e26:	68c0      	ldr	r0, [r0, #12]
 8012e28:	b160      	cbz	r0, 8012e44 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012e2a:	b410      	push	{r4}
 8012e2c:	e001      	b.n	8012e32 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012e2e:	6800      	ldr	r0, [r0, #0]
 8012e30:	b128      	cbz	r0, 8012e3e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012e32:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012e36:	4299      	cmp	r1, r3
 8012e38:	bf08      	it	eq
 8012e3a:	4294      	cmpeq	r4, r2
 8012e3c:	d1f7      	bne.n	8012e2e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e42:	4770      	bx	lr
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop

08012e48 <rclc_action_find_first_handle_with_goal_response>:
 8012e48:	b140      	cbz	r0, 8012e5c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012e4a:	68c0      	ldr	r0, [r0, #12]
 8012e4c:	b910      	cbnz	r0, 8012e54 <rclc_action_find_first_handle_with_goal_response+0xc>
 8012e4e:	e005      	b.n	8012e5c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012e50:	6800      	ldr	r0, [r0, #0]
 8012e52:	b118      	cbz	r0, 8012e5c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012e54:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d0f9      	beq.n	8012e50 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop

08012e60 <rclc_action_find_first_handle_with_result_response>:
 8012e60:	b140      	cbz	r0, 8012e74 <rclc_action_find_first_handle_with_result_response+0x14>
 8012e62:	68c0      	ldr	r0, [r0, #12]
 8012e64:	b910      	cbnz	r0, 8012e6c <rclc_action_find_first_handle_with_result_response+0xc>
 8012e66:	e005      	b.n	8012e74 <rclc_action_find_first_handle_with_result_response+0x14>
 8012e68:	6800      	ldr	r0, [r0, #0]
 8012e6a:	b118      	cbz	r0, 8012e74 <rclc_action_find_first_handle_with_result_response+0x14>
 8012e6c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d0f9      	beq.n	8012e68 <rclc_action_find_first_handle_with_result_response+0x8>
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop

08012e78 <rclc_action_server_response_goal_request>:
 8012e78:	b198      	cbz	r0, 8012ea2 <rclc_action_server_response_goal_request+0x2a>
 8012e7a:	b510      	push	{r4, lr}
 8012e7c:	6844      	ldr	r4, [r0, #4]
 8012e7e:	b086      	sub	sp, #24
 8012e80:	2200      	movs	r2, #0
 8012e82:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012e86:	460b      	mov	r3, r1
 8012e88:	9205      	str	r2, [sp, #20]
 8012e8a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012e8e:	aa03      	add	r2, sp, #12
 8012e90:	f104 0010 	add.w	r0, r4, #16
 8012e94:	f88d 300c 	strb.w	r3, [sp, #12]
 8012e98:	f7ff fd52 	bl	8012940 <rcl_action_send_goal_response>
 8012e9c:	b918      	cbnz	r0, 8012ea6 <rclc_action_server_response_goal_request+0x2e>
 8012e9e:	b006      	add	sp, #24
 8012ea0:	bd10      	pop	{r4, pc}
 8012ea2:	200b      	movs	r0, #11
 8012ea4:	4770      	bx	lr
 8012ea6:	9001      	str	r0, [sp, #4]
 8012ea8:	f7f7 fa4a 	bl	800a340 <rcutils_reset_error>
 8012eac:	9801      	ldr	r0, [sp, #4]
 8012eae:	b006      	add	sp, #24
 8012eb0:	bd10      	pop	{r4, pc}
 8012eb2:	bf00      	nop
 8012eb4:	0000      	movs	r0, r0
	...

08012eb8 <rclc_action_server_goal_cancel_accept>:
 8012eb8:	b310      	cbz	r0, 8012f00 <rclc_action_server_goal_cancel_accept+0x48>
 8012eba:	b510      	push	{r4, lr}
 8012ebc:	b090      	sub	sp, #64	@ 0x40
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	a806      	add	r0, sp, #24
 8012ec2:	f7ff fefd 	bl	8012cc0 <rcl_action_get_zero_initialized_cancel_response>
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012ecc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012ed0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012ed4:	f88d 3018 	strb.w	r3, [sp, #24]
 8012ed8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012edc:	f8cd d01c 	str.w	sp, [sp, #28]
 8012ee0:	46ec      	mov	ip, sp
 8012ee2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ee6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012f08 <rclc_action_server_goal_cancel_accept+0x50>
 8012eea:	6860      	ldr	r0, [r4, #4]
 8012eec:	aa06      	add	r2, sp, #24
 8012eee:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012ef2:	3010      	adds	r0, #16
 8012ef4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012ef8:	f7ff fdd2 	bl	8012aa0 <rcl_action_send_cancel_response>
 8012efc:	b010      	add	sp, #64	@ 0x40
 8012efe:	bd10      	pop	{r4, pc}
 8012f00:	200b      	movs	r0, #11
 8012f02:	4770      	bx	lr
 8012f04:	f3af 8000 	nop.w
 8012f08:	00000001 	.word	0x00000001
 8012f0c:	00000001 	.word	0x00000001

08012f10 <rclc_action_server_goal_cancel_reject>:
 8012f10:	b082      	sub	sp, #8
 8012f12:	b530      	push	{r4, r5, lr}
 8012f14:	b08b      	sub	sp, #44	@ 0x2c
 8012f16:	ac0e      	add	r4, sp, #56	@ 0x38
 8012f18:	e884 000c 	stmia.w	r4, {r2, r3}
 8012f1c:	b188      	cbz	r0, 8012f42 <rclc_action_server_goal_cancel_reject+0x32>
 8012f1e:	4604      	mov	r4, r0
 8012f20:	a801      	add	r0, sp, #4
 8012f22:	460d      	mov	r5, r1
 8012f24:	f7ff fecc 	bl	8012cc0 <rcl_action_get_zero_initialized_cancel_response>
 8012f28:	aa01      	add	r2, sp, #4
 8012f2a:	a90e      	add	r1, sp, #56	@ 0x38
 8012f2c:	f104 0010 	add.w	r0, r4, #16
 8012f30:	f88d 5004 	strb.w	r5, [sp, #4]
 8012f34:	f7ff fdb4 	bl	8012aa0 <rcl_action_send_cancel_response>
 8012f38:	b00b      	add	sp, #44	@ 0x2c
 8012f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f3e:	b002      	add	sp, #8
 8012f40:	4770      	bx	lr
 8012f42:	200b      	movs	r0, #11
 8012f44:	b00b      	add	sp, #44	@ 0x2c
 8012f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f4a:	b002      	add	sp, #8
 8012f4c:	4770      	bx	lr
 8012f4e:	bf00      	nop

08012f50 <__atomic_load_8>:
 8012f50:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012f54:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012f58:	4a15      	ldr	r2, [pc, #84]	@ (8012fb0 <__atomic_load_8+0x60>)
 8012f5a:	4b16      	ldr	r3, [pc, #88]	@ (8012fb4 <__atomic_load_8+0x64>)
 8012f5c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012f60:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012f64:	fb02 f101 	mul.w	r1, r2, r1
 8012f68:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012f6c:	fba3 2301 	umull	r2, r3, r3, r1
 8012f70:	091b      	lsrs	r3, r3, #4
 8012f72:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012f76:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012f7a:	b4f0      	push	{r4, r5, r6, r7}
 8012f7c:	4d0e      	ldr	r5, [pc, #56]	@ (8012fb8 <__atomic_load_8+0x68>)
 8012f7e:	1ac9      	subs	r1, r1, r3
 8012f80:	194a      	adds	r2, r1, r5
 8012f82:	f04f 0c01 	mov.w	ip, #1
 8012f86:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012f8a:	e8c2 cf44 	strexb	r4, ip, [r2]
 8012f8e:	2c00      	cmp	r4, #0
 8012f90:	d1f9      	bne.n	8012f86 <__atomic_load_8+0x36>
 8012f92:	f3bf 8f5b 	dmb	ish
 8012f96:	b2dc      	uxtb	r4, r3
 8012f98:	2c00      	cmp	r4, #0
 8012f9a:	d1f4      	bne.n	8012f86 <__atomic_load_8+0x36>
 8012f9c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012fa0:	f3bf 8f5b 	dmb	ish
 8012fa4:	546b      	strb	r3, [r5, r1]
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	4639      	mov	r1, r7
 8012faa:	bcf0      	pop	{r4, r5, r6, r7}
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	27d4eb2d 	.word	0x27d4eb2d
 8012fb4:	b21642c9 	.word	0xb21642c9
 8012fb8:	2000ea20 	.word	0x2000ea20

08012fbc <__atomic_store_8>:
 8012fbc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012fc0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012fca:	4c14      	ldr	r4, [pc, #80]	@ (801301c <__atomic_store_8+0x60>)
 8012fcc:	4e14      	ldr	r6, [pc, #80]	@ (8013020 <__atomic_store_8+0x64>)
 8012fce:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012fd2:	fb04 f101 	mul.w	r1, r4, r1
 8012fd6:	4c13      	ldr	r4, [pc, #76]	@ (8013024 <__atomic_store_8+0x68>)
 8012fd8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012fdc:	fba4 5401 	umull	r5, r4, r4, r1
 8012fe0:	0924      	lsrs	r4, r4, #4
 8012fe2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012fe6:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8012fea:	eba1 0e04 	sub.w	lr, r1, r4
 8012fee:	f04f 0501 	mov.w	r5, #1
 8012ff2:	eb0e 0c06 	add.w	ip, lr, r6
 8012ff6:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012ffa:	e8cc 5f44 	strexb	r4, r5, [ip]
 8012ffe:	2c00      	cmp	r4, #0
 8013000:	d1f9      	bne.n	8012ff6 <__atomic_store_8+0x3a>
 8013002:	f3bf 8f5b 	dmb	ish
 8013006:	b2cc      	uxtb	r4, r1
 8013008:	2c00      	cmp	r4, #0
 801300a:	d1f4      	bne.n	8012ff6 <__atomic_store_8+0x3a>
 801300c:	e9c0 2300 	strd	r2, r3, [r0]
 8013010:	f3bf 8f5b 	dmb	ish
 8013014:	f806 100e 	strb.w	r1, [r6, lr]
 8013018:	bd70      	pop	{r4, r5, r6, pc}
 801301a:	bf00      	nop
 801301c:	27d4eb2d 	.word	0x27d4eb2d
 8013020:	2000ea20 	.word	0x2000ea20
 8013024:	b21642c9 	.word	0xb21642c9

08013028 <__atomic_exchange_8>:
 8013028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801302a:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801302e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8013032:	4917      	ldr	r1, [pc, #92]	@ (8013090 <__atomic_exchange_8+0x68>)
 8013034:	4f17      	ldr	r7, [pc, #92]	@ (8013094 <__atomic_exchange_8+0x6c>)
 8013036:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801303a:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801303e:	fb01 fe0e 	mul.w	lr, r1, lr
 8013042:	4915      	ldr	r1, [pc, #84]	@ (8013098 <__atomic_exchange_8+0x70>)
 8013044:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8013048:	4606      	mov	r6, r0
 801304a:	fba1 010e 	umull	r0, r1, r1, lr
 801304e:	0909      	lsrs	r1, r1, #4
 8013050:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013054:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013058:	ebae 0e01 	sub.w	lr, lr, r1
 801305c:	f04f 0501 	mov.w	r5, #1
 8013060:	eb0e 0107 	add.w	r1, lr, r7
 8013064:	e8d1 cf4f 	ldrexb	ip, [r1]
 8013068:	e8c1 5f40 	strexb	r0, r5, [r1]
 801306c:	2800      	cmp	r0, #0
 801306e:	d1f9      	bne.n	8013064 <__atomic_exchange_8+0x3c>
 8013070:	f3bf 8f5b 	dmb	ish
 8013074:	fa5f f48c 	uxtb.w	r4, ip
 8013078:	2c00      	cmp	r4, #0
 801307a:	d1f3      	bne.n	8013064 <__atomic_exchange_8+0x3c>
 801307c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013080:	e9c6 2300 	strd	r2, r3, [r6]
 8013084:	f3bf 8f5b 	dmb	ish
 8013088:	f807 c00e 	strb.w	ip, [r7, lr]
 801308c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801308e:	bf00      	nop
 8013090:	27d4eb2d 	.word	0x27d4eb2d
 8013094:	2000ea20 	.word	0x2000ea20
 8013098:	b21642c9 	.word	0xb21642c9

0801309c <rcutils_get_env>:
 801309c:	b150      	cbz	r0, 80130b4 <rcutils_get_env+0x18>
 801309e:	b510      	push	{r4, lr}
 80130a0:	460c      	mov	r4, r1
 80130a2:	b909      	cbnz	r1, 80130a8 <rcutils_get_env+0xc>
 80130a4:	4806      	ldr	r0, [pc, #24]	@ (80130c0 <rcutils_get_env+0x24>)
 80130a6:	bd10      	pop	{r4, pc}
 80130a8:	f004 f808 	bl	80170bc <getenv>
 80130ac:	b120      	cbz	r0, 80130b8 <rcutils_get_env+0x1c>
 80130ae:	6020      	str	r0, [r4, #0]
 80130b0:	2000      	movs	r0, #0
 80130b2:	bd10      	pop	{r4, pc}
 80130b4:	4803      	ldr	r0, [pc, #12]	@ (80130c4 <rcutils_get_env+0x28>)
 80130b6:	4770      	bx	lr
 80130b8:	4b03      	ldr	r3, [pc, #12]	@ (80130c8 <rcutils_get_env+0x2c>)
 80130ba:	6023      	str	r3, [r4, #0]
 80130bc:	e7f8      	b.n	80130b0 <rcutils_get_env+0x14>
 80130be:	bf00      	nop
 80130c0:	08018cc0 	.word	0x08018cc0
 80130c4:	08018ca4 	.word	0x08018ca4
 80130c8:	080191c4 	.word	0x080191c4

080130cc <rcutils_format_string_limit>:
 80130cc:	b40f      	push	{r0, r1, r2, r3}
 80130ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130d0:	b083      	sub	sp, #12
 80130d2:	ac08      	add	r4, sp, #32
 80130d4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80130d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80130da:	b376      	cbz	r6, 801313a <rcutils_format_string_limit+0x6e>
 80130dc:	4620      	mov	r0, r4
 80130de:	f7f7 f903 	bl	800a2e8 <rcutils_allocator_is_valid>
 80130e2:	b350      	cbz	r0, 801313a <rcutils_format_string_limit+0x6e>
 80130e4:	2100      	movs	r1, #0
 80130e6:	ab0f      	add	r3, sp, #60	@ 0x3c
 80130e8:	4632      	mov	r2, r6
 80130ea:	4608      	mov	r0, r1
 80130ec:	e9cd 3300 	strd	r3, r3, [sp]
 80130f0:	f000 f8f8 	bl	80132e4 <rcutils_vsnprintf>
 80130f4:	1c43      	adds	r3, r0, #1
 80130f6:	4605      	mov	r5, r0
 80130f8:	d01f      	beq.n	801313a <rcutils_format_string_limit+0x6e>
 80130fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80130fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80130fe:	1c47      	adds	r7, r0, #1
 8013100:	429f      	cmp	r7, r3
 8013102:	bf84      	itt	hi
 8013104:	461f      	movhi	r7, r3
 8013106:	f103 35ff 	addhi.w	r5, r3, #4294967295
 801310a:	4638      	mov	r0, r7
 801310c:	9b08      	ldr	r3, [sp, #32]
 801310e:	4798      	blx	r3
 8013110:	4604      	mov	r4, r0
 8013112:	b190      	cbz	r0, 801313a <rcutils_format_string_limit+0x6e>
 8013114:	9b01      	ldr	r3, [sp, #4]
 8013116:	4632      	mov	r2, r6
 8013118:	4639      	mov	r1, r7
 801311a:	f000 f8e3 	bl	80132e4 <rcutils_vsnprintf>
 801311e:	2800      	cmp	r0, #0
 8013120:	db07      	blt.n	8013132 <rcutils_format_string_limit+0x66>
 8013122:	2300      	movs	r3, #0
 8013124:	5563      	strb	r3, [r4, r5]
 8013126:	4620      	mov	r0, r4
 8013128:	b003      	add	sp, #12
 801312a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801312e:	b004      	add	sp, #16
 8013130:	4770      	bx	lr
 8013132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013134:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013136:	4620      	mov	r0, r4
 8013138:	4798      	blx	r3
 801313a:	2400      	movs	r4, #0
 801313c:	e7f3      	b.n	8013126 <rcutils_format_string_limit+0x5a>
 801313e:	bf00      	nop

08013140 <rcutils_repl_str>:
 8013140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013144:	4699      	mov	r9, r3
 8013146:	b089      	sub	sp, #36	@ 0x24
 8013148:	4603      	mov	r3, r0
 801314a:	4648      	mov	r0, r9
 801314c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013150:	4698      	mov	r8, r3
 8013152:	9300      	str	r3, [sp, #0]
 8013154:	460c      	mov	r4, r1
 8013156:	f7f7 f8c7 	bl	800a2e8 <rcutils_allocator_is_valid>
 801315a:	2800      	cmp	r0, #0
 801315c:	f000 80a3 	beq.w	80132a6 <rcutils_repl_str+0x166>
 8013160:	4620      	mov	r0, r4
 8013162:	f7ed f8b5 	bl	80002d0 <strlen>
 8013166:	f04f 0a00 	mov.w	sl, #0
 801316a:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801316e:	9001      	str	r0, [sp, #4]
 8013170:	4657      	mov	r7, sl
 8013172:	4655      	mov	r5, sl
 8013174:	2610      	movs	r6, #16
 8013176:	e01e      	b.n	80131b6 <rcutils_repl_str+0x76>
 8013178:	3501      	adds	r5, #1
 801317a:	45aa      	cmp	sl, r5
 801317c:	d212      	bcs.n	80131a4 <rcutils_repl_str+0x64>
 801317e:	44b2      	add	sl, r6
 8013180:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013184:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8013188:	4798      	blx	r3
 801318a:	2800      	cmp	r0, #0
 801318c:	f000 8088 	beq.w	80132a0 <rcutils_repl_str+0x160>
 8013190:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013194:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8013198:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801319c:	4607      	mov	r7, r0
 801319e:	bf28      	it	cs
 80131a0:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80131a4:	9a00      	ldr	r2, [sp, #0]
 80131a6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80131aa:	1aa2      	subs	r2, r4, r2
 80131ac:	f843 2c04 	str.w	r2, [r3, #-4]
 80131b0:	9b01      	ldr	r3, [sp, #4]
 80131b2:	eb04 0803 	add.w	r8, r4, r3
 80131b6:	9902      	ldr	r1, [sp, #8]
 80131b8:	4640      	mov	r0, r8
 80131ba:	f004 fc69 	bl	8017a90 <strstr>
 80131be:	4604      	mov	r4, r0
 80131c0:	465a      	mov	r2, fp
 80131c2:	4638      	mov	r0, r7
 80131c4:	2c00      	cmp	r4, #0
 80131c6:	d1d7      	bne.n	8013178 <rcutils_repl_str+0x38>
 80131c8:	4640      	mov	r0, r8
 80131ca:	f7ed f881 	bl	80002d0 <strlen>
 80131ce:	9b00      	ldr	r3, [sp, #0]
 80131d0:	eba8 0803 	sub.w	r8, r8, r3
 80131d4:	eb08 0300 	add.w	r3, r8, r0
 80131d8:	9304      	str	r3, [sp, #16]
 80131da:	f8d9 8000 	ldr.w	r8, [r9]
 80131de:	2d00      	cmp	r5, #0
 80131e0:	d03f      	beq.n	8013262 <rcutils_repl_str+0x122>
 80131e2:	9803      	ldr	r0, [sp, #12]
 80131e4:	f7ed f874 	bl	80002d0 <strlen>
 80131e8:	4606      	mov	r6, r0
 80131ea:	9801      	ldr	r0, [sp, #4]
 80131ec:	9a04      	ldr	r2, [sp, #16]
 80131ee:	1a33      	subs	r3, r6, r0
 80131f0:	fb05 2a03 	mla	sl, r5, r3, r2
 80131f4:	4659      	mov	r1, fp
 80131f6:	f10a 0001 	add.w	r0, sl, #1
 80131fa:	47c0      	blx	r8
 80131fc:	4683      	mov	fp, r0
 80131fe:	2800      	cmp	r0, #0
 8013200:	d04e      	beq.n	80132a0 <rcutils_repl_str+0x160>
 8013202:	683a      	ldr	r2, [r7, #0]
 8013204:	9900      	ldr	r1, [sp, #0]
 8013206:	f004 fce4 	bl	8017bd2 <memcpy>
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	9706      	str	r7, [sp, #24]
 801320e:	1e6a      	subs	r2, r5, #1
 8013210:	445b      	add	r3, fp
 8013212:	46a8      	mov	r8, r5
 8013214:	9202      	str	r2, [sp, #8]
 8013216:	4625      	mov	r5, r4
 8013218:	f8cd 901c 	str.w	r9, [sp, #28]
 801321c:	461c      	mov	r4, r3
 801321e:	9903      	ldr	r1, [sp, #12]
 8013220:	4632      	mov	r2, r6
 8013222:	4620      	mov	r0, r4
 8013224:	f004 fcd5 	bl	8017bd2 <memcpy>
 8013228:	9b01      	ldr	r3, [sp, #4]
 801322a:	f857 2b04 	ldr.w	r2, [r7], #4
 801322e:	eb02 0c03 	add.w	ip, r2, r3
 8013232:	9b00      	ldr	r3, [sp, #0]
 8013234:	eb03 010c 	add.w	r1, r3, ip
 8013238:	9b02      	ldr	r3, [sp, #8]
 801323a:	4434      	add	r4, r6
 801323c:	429d      	cmp	r5, r3
 801323e:	4620      	mov	r0, r4
 8013240:	d022      	beq.n	8013288 <rcutils_repl_str+0x148>
 8013242:	683a      	ldr	r2, [r7, #0]
 8013244:	eba2 090c 	sub.w	r9, r2, ip
 8013248:	464a      	mov	r2, r9
 801324a:	3501      	adds	r5, #1
 801324c:	f004 fcc1 	bl	8017bd2 <memcpy>
 8013250:	45a8      	cmp	r8, r5
 8013252:	444c      	add	r4, r9
 8013254:	d1e3      	bne.n	801321e <rcutils_repl_str+0xde>
 8013256:	2300      	movs	r3, #0
 8013258:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 801325c:	f80b 300a 	strb.w	r3, [fp, sl]
 8013260:	e008      	b.n	8013274 <rcutils_repl_str+0x134>
 8013262:	4618      	mov	r0, r3
 8013264:	4659      	mov	r1, fp
 8013266:	3001      	adds	r0, #1
 8013268:	47c0      	blx	r8
 801326a:	4683      	mov	fp, r0
 801326c:	b110      	cbz	r0, 8013274 <rcutils_repl_str+0x134>
 801326e:	9900      	ldr	r1, [sp, #0]
 8013270:	f004 fca7 	bl	8017bc2 <strcpy>
 8013274:	4638      	mov	r0, r7
 8013276:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801327a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801327e:	4798      	blx	r3
 8013280:	4658      	mov	r0, fp
 8013282:	b009      	add	sp, #36	@ 0x24
 8013284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013288:	9b04      	ldr	r3, [sp, #16]
 801328a:	eba3 020c 	sub.w	r2, r3, ip
 801328e:	9205      	str	r2, [sp, #20]
 8013290:	3501      	adds	r5, #1
 8013292:	f004 fc9e 	bl	8017bd2 <memcpy>
 8013296:	9a05      	ldr	r2, [sp, #20]
 8013298:	45a8      	cmp	r8, r5
 801329a:	4414      	add	r4, r2
 801329c:	d1bf      	bne.n	801321e <rcutils_repl_str+0xde>
 801329e:	e7da      	b.n	8013256 <rcutils_repl_str+0x116>
 80132a0:	f04f 0b00 	mov.w	fp, #0
 80132a4:	e7e6      	b.n	8013274 <rcutils_repl_str+0x134>
 80132a6:	4683      	mov	fp, r0
 80132a8:	4658      	mov	r0, fp
 80132aa:	b009      	add	sp, #36	@ 0x24
 80132ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132b0 <rcutils_snprintf>:
 80132b0:	b40c      	push	{r2, r3}
 80132b2:	b530      	push	{r4, r5, lr}
 80132b4:	b083      	sub	sp, #12
 80132b6:	ab06      	add	r3, sp, #24
 80132b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80132bc:	9301      	str	r3, [sp, #4]
 80132be:	b152      	cbz	r2, 80132d6 <rcutils_snprintf+0x26>
 80132c0:	b138      	cbz	r0, 80132d2 <rcutils_snprintf+0x22>
 80132c2:	b141      	cbz	r1, 80132d6 <rcutils_snprintf+0x26>
 80132c4:	f004 fade 	bl	8017884 <vsniprintf>
 80132c8:	b003      	add	sp, #12
 80132ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132ce:	b002      	add	sp, #8
 80132d0:	4770      	bx	lr
 80132d2:	2900      	cmp	r1, #0
 80132d4:	d0f6      	beq.n	80132c4 <rcutils_snprintf+0x14>
 80132d6:	f004 fc47 	bl	8017b68 <__errno>
 80132da:	2316      	movs	r3, #22
 80132dc:	6003      	str	r3, [r0, #0]
 80132de:	f04f 30ff 	mov.w	r0, #4294967295
 80132e2:	e7f1      	b.n	80132c8 <rcutils_snprintf+0x18>

080132e4 <rcutils_vsnprintf>:
 80132e4:	b570      	push	{r4, r5, r6, lr}
 80132e6:	b13a      	cbz	r2, 80132f8 <rcutils_vsnprintf+0x14>
 80132e8:	b120      	cbz	r0, 80132f4 <rcutils_vsnprintf+0x10>
 80132ea:	b129      	cbz	r1, 80132f8 <rcutils_vsnprintf+0x14>
 80132ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132f0:	f004 bac8 	b.w	8017884 <vsniprintf>
 80132f4:	2900      	cmp	r1, #0
 80132f6:	d0f9      	beq.n	80132ec <rcutils_vsnprintf+0x8>
 80132f8:	f004 fc36 	bl	8017b68 <__errno>
 80132fc:	2316      	movs	r3, #22
 80132fe:	6003      	str	r3, [r0, #0]
 8013300:	f04f 30ff 	mov.w	r0, #4294967295
 8013304:	bd70      	pop	{r4, r5, r6, pc}
 8013306:	bf00      	nop

08013308 <rcutils_strdup>:
 8013308:	b084      	sub	sp, #16
 801330a:	b570      	push	{r4, r5, r6, lr}
 801330c:	b086      	sub	sp, #24
 801330e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8013312:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8013316:	4604      	mov	r4, r0
 8013318:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801331c:	f10d 0e04 	add.w	lr, sp, #4
 8013320:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013324:	f8dc 3000 	ldr.w	r3, [ip]
 8013328:	f8ce 3000 	str.w	r3, [lr]
 801332c:	b304      	cbz	r4, 8013370 <rcutils_strdup+0x68>
 801332e:	a801      	add	r0, sp, #4
 8013330:	f7f6 ffda 	bl	800a2e8 <rcutils_allocator_is_valid>
 8013334:	b1e0      	cbz	r0, 8013370 <rcutils_strdup+0x68>
 8013336:	f04f 32ff 	mov.w	r2, #4294967295
 801333a:	2100      	movs	r1, #0
 801333c:	4620      	mov	r0, r4
 801333e:	f7ec ff77 	bl	8000230 <memchr>
 8013342:	b190      	cbz	r0, 801336a <rcutils_strdup+0x62>
 8013344:	1b06      	subs	r6, r0, r4
 8013346:	1c70      	adds	r0, r6, #1
 8013348:	9b01      	ldr	r3, [sp, #4]
 801334a:	9905      	ldr	r1, [sp, #20]
 801334c:	4798      	blx	r3
 801334e:	4605      	mov	r5, r0
 8013350:	b128      	cbz	r0, 801335e <rcutils_strdup+0x56>
 8013352:	4632      	mov	r2, r6
 8013354:	4621      	mov	r1, r4
 8013356:	f004 fc3c 	bl	8017bd2 <memcpy>
 801335a:	2300      	movs	r3, #0
 801335c:	55ab      	strb	r3, [r5, r6]
 801335e:	4628      	mov	r0, r5
 8013360:	b006      	add	sp, #24
 8013362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013366:	b004      	add	sp, #16
 8013368:	4770      	bx	lr
 801336a:	f04f 36ff 	mov.w	r6, #4294967295
 801336e:	e7eb      	b.n	8013348 <rcutils_strdup+0x40>
 8013370:	2500      	movs	r5, #0
 8013372:	e7f4      	b.n	801335e <rcutils_strdup+0x56>

08013374 <rcutils_strndup>:
 8013374:	b082      	sub	sp, #8
 8013376:	b570      	push	{r4, r5, r6, lr}
 8013378:	ac04      	add	r4, sp, #16
 801337a:	e884 000c 	stmia.w	r4, {r2, r3}
 801337e:	b1e8      	cbz	r0, 80133bc <rcutils_strndup+0x48>
 8013380:	4605      	mov	r5, r0
 8013382:	a804      	add	r0, sp, #16
 8013384:	460c      	mov	r4, r1
 8013386:	f7f6 ffaf 	bl	800a2e8 <rcutils_allocator_is_valid>
 801338a:	b1b8      	cbz	r0, 80133bc <rcutils_strndup+0x48>
 801338c:	4622      	mov	r2, r4
 801338e:	2100      	movs	r1, #0
 8013390:	4628      	mov	r0, r5
 8013392:	f7ec ff4d 	bl	8000230 <memchr>
 8013396:	b100      	cbz	r0, 801339a <rcutils_strndup+0x26>
 8013398:	1b44      	subs	r4, r0, r5
 801339a:	9b04      	ldr	r3, [sp, #16]
 801339c:	9908      	ldr	r1, [sp, #32]
 801339e:	1c60      	adds	r0, r4, #1
 80133a0:	4798      	blx	r3
 80133a2:	4606      	mov	r6, r0
 80133a4:	b128      	cbz	r0, 80133b2 <rcutils_strndup+0x3e>
 80133a6:	4622      	mov	r2, r4
 80133a8:	4629      	mov	r1, r5
 80133aa:	f004 fc12 	bl	8017bd2 <memcpy>
 80133ae:	2300      	movs	r3, #0
 80133b0:	5533      	strb	r3, [r6, r4]
 80133b2:	4630      	mov	r0, r6
 80133b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133b8:	b002      	add	sp, #8
 80133ba:	4770      	bx	lr
 80133bc:	2600      	movs	r6, #0
 80133be:	4630      	mov	r0, r6
 80133c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133c4:	b002      	add	sp, #8
 80133c6:	4770      	bx	lr

080133c8 <rcutils_get_zero_initialized_string_map>:
 80133c8:	4b01      	ldr	r3, [pc, #4]	@ (80133d0 <rcutils_get_zero_initialized_string_map+0x8>)
 80133ca:	6818      	ldr	r0, [r3, #0]
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	08019618 	.word	0x08019618

080133d4 <rcutils_string_map_reserve>:
 80133d4:	2800      	cmp	r0, #0
 80133d6:	d04e      	beq.n	8013476 <rcutils_string_map_reserve+0xa2>
 80133d8:	b530      	push	{r4, r5, lr}
 80133da:	6803      	ldr	r3, [r0, #0]
 80133dc:	b087      	sub	sp, #28
 80133de:	4604      	mov	r4, r0
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d043      	beq.n	801346c <rcutils_string_map_reserve+0x98>
 80133e4:	f103 0c0c 	add.w	ip, r3, #12
 80133e8:	460d      	mov	r5, r1
 80133ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133ee:	f10d 0e04 	add.w	lr, sp, #4
 80133f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80133f6:	f8dc 3000 	ldr.w	r3, [ip]
 80133fa:	f8ce 3000 	str.w	r3, [lr]
 80133fe:	a801      	add	r0, sp, #4
 8013400:	f7f6 ff72 	bl	800a2e8 <rcutils_allocator_is_valid>
 8013404:	b308      	cbz	r0, 801344a <rcutils_string_map_reserve+0x76>
 8013406:	6823      	ldr	r3, [r4, #0]
 8013408:	6899      	ldr	r1, [r3, #8]
 801340a:	42a9      	cmp	r1, r5
 801340c:	d829      	bhi.n	8013462 <rcutils_string_map_reserve+0x8e>
 801340e:	685a      	ldr	r2, [r3, #4]
 8013410:	42aa      	cmp	r2, r5
 8013412:	d024      	beq.n	801345e <rcutils_string_map_reserve+0x8a>
 8013414:	b1e5      	cbz	r5, 8013450 <rcutils_string_map_reserve+0x7c>
 8013416:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801341a:	d22a      	bcs.n	8013472 <rcutils_string_map_reserve+0x9e>
 801341c:	6818      	ldr	r0, [r3, #0]
 801341e:	9a05      	ldr	r2, [sp, #20]
 8013420:	9b03      	ldr	r3, [sp, #12]
 8013422:	00e9      	lsls	r1, r5, #3
 8013424:	4798      	blx	r3
 8013426:	b320      	cbz	r0, 8013472 <rcutils_string_map_reserve+0x9e>
 8013428:	6824      	ldr	r4, [r4, #0]
 801342a:	6861      	ldr	r1, [r4, #4]
 801342c:	6020      	str	r0, [r4, #0]
 801342e:	42a9      	cmp	r1, r5
 8013430:	d214      	bcs.n	801345c <rcutils_string_map_reserve+0x88>
 8013432:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8013436:	1a69      	subs	r1, r5, r1
 8013438:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801343c:	2200      	movs	r2, #0
 801343e:	e9c3 2200 	strd	r2, r2, [r3]
 8013442:	3308      	adds	r3, #8
 8013444:	428b      	cmp	r3, r1
 8013446:	d1fa      	bne.n	801343e <rcutils_string_map_reserve+0x6a>
 8013448:	e008      	b.n	801345c <rcutils_string_map_reserve+0x88>
 801344a:	200b      	movs	r0, #11
 801344c:	b007      	add	sp, #28
 801344e:	bd30      	pop	{r4, r5, pc}
 8013450:	9a02      	ldr	r2, [sp, #8]
 8013452:	9905      	ldr	r1, [sp, #20]
 8013454:	6818      	ldr	r0, [r3, #0]
 8013456:	4790      	blx	r2
 8013458:	6824      	ldr	r4, [r4, #0]
 801345a:	6025      	str	r5, [r4, #0]
 801345c:	6065      	str	r5, [r4, #4]
 801345e:	2000      	movs	r0, #0
 8013460:	e7f4      	b.n	801344c <rcutils_string_map_reserve+0x78>
 8013462:	4620      	mov	r0, r4
 8013464:	f7ff ffb6 	bl	80133d4 <rcutils_string_map_reserve>
 8013468:	b007      	add	sp, #28
 801346a:	bd30      	pop	{r4, r5, pc}
 801346c:	201f      	movs	r0, #31
 801346e:	b007      	add	sp, #28
 8013470:	bd30      	pop	{r4, r5, pc}
 8013472:	200a      	movs	r0, #10
 8013474:	e7ea      	b.n	801344c <rcutils_string_map_reserve+0x78>
 8013476:	200b      	movs	r0, #11
 8013478:	4770      	bx	lr
 801347a:	bf00      	nop

0801347c <rcutils_string_map_init>:
 801347c:	b082      	sub	sp, #8
 801347e:	b570      	push	{r4, r5, r6, lr}
 8013480:	ac04      	add	r4, sp, #16
 8013482:	e884 000c 	stmia.w	r4, {r2, r3}
 8013486:	b378      	cbz	r0, 80134e8 <rcutils_string_map_init+0x6c>
 8013488:	6806      	ldr	r6, [r0, #0]
 801348a:	4604      	mov	r4, r0
 801348c:	b12e      	cbz	r6, 801349a <rcutils_string_map_init+0x1e>
 801348e:	251e      	movs	r5, #30
 8013490:	4628      	mov	r0, r5
 8013492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013496:	b002      	add	sp, #8
 8013498:	4770      	bx	lr
 801349a:	a804      	add	r0, sp, #16
 801349c:	460d      	mov	r5, r1
 801349e:	f7f6 ff23 	bl	800a2e8 <rcutils_allocator_is_valid>
 80134a2:	b308      	cbz	r0, 80134e8 <rcutils_string_map_init+0x6c>
 80134a4:	9b04      	ldr	r3, [sp, #16]
 80134a6:	9908      	ldr	r1, [sp, #32]
 80134a8:	2020      	movs	r0, #32
 80134aa:	4798      	blx	r3
 80134ac:	6020      	str	r0, [r4, #0]
 80134ae:	b308      	cbz	r0, 80134f4 <rcutils_string_map_init+0x78>
 80134b0:	f10d 0e10 	add.w	lr, sp, #16
 80134b4:	e9c0 6600 	strd	r6, r6, [r0]
 80134b8:	6086      	str	r6, [r0, #8]
 80134ba:	f100 0c0c 	add.w	ip, r0, #12
 80134be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134c6:	f8de 3000 	ldr.w	r3, [lr]
 80134ca:	f8cc 3000 	str.w	r3, [ip]
 80134ce:	4629      	mov	r1, r5
 80134d0:	4620      	mov	r0, r4
 80134d2:	f7ff ff7f 	bl	80133d4 <rcutils_string_map_reserve>
 80134d6:	4605      	mov	r5, r0
 80134d8:	2800      	cmp	r0, #0
 80134da:	d0d9      	beq.n	8013490 <rcutils_string_map_init+0x14>
 80134dc:	9b05      	ldr	r3, [sp, #20]
 80134de:	9908      	ldr	r1, [sp, #32]
 80134e0:	6820      	ldr	r0, [r4, #0]
 80134e2:	4798      	blx	r3
 80134e4:	6026      	str	r6, [r4, #0]
 80134e6:	e7d3      	b.n	8013490 <rcutils_string_map_init+0x14>
 80134e8:	250b      	movs	r5, #11
 80134ea:	4628      	mov	r0, r5
 80134ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134f0:	b002      	add	sp, #8
 80134f2:	4770      	bx	lr
 80134f4:	250a      	movs	r5, #10
 80134f6:	e7cb      	b.n	8013490 <rcutils_string_map_init+0x14>

080134f8 <rcutils_string_map_fini>:
 80134f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134fc:	b086      	sub	sp, #24
 80134fe:	2800      	cmp	r0, #0
 8013500:	d04f      	beq.n	80135a2 <rcutils_string_map_fini+0xaa>
 8013502:	6805      	ldr	r5, [r0, #0]
 8013504:	4606      	mov	r6, r0
 8013506:	2d00      	cmp	r5, #0
 8013508:	d046      	beq.n	8013598 <rcutils_string_map_fini+0xa0>
 801350a:	686b      	ldr	r3, [r5, #4]
 801350c:	b353      	cbz	r3, 8013564 <rcutils_string_map_fini+0x6c>
 801350e:	2400      	movs	r4, #0
 8013510:	682a      	ldr	r2, [r5, #0]
 8013512:	4627      	mov	r7, r4
 8013514:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8013518:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801351c:	b1f8      	cbz	r0, 801355e <rcutils_string_map_fini+0x66>
 801351e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8013522:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013526:	4651      	mov	r1, sl
 8013528:	47c8      	blx	r9
 801352a:	682b      	ldr	r3, [r5, #0]
 801352c:	eb03 0208 	add.w	r2, r3, r8
 8013530:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8013534:	6850      	ldr	r0, [r2, #4]
 8013536:	4651      	mov	r1, sl
 8013538:	47c8      	blx	r9
 801353a:	682a      	ldr	r2, [r5, #0]
 801353c:	68ab      	ldr	r3, [r5, #8]
 801353e:	4442      	add	r2, r8
 8013540:	3b01      	subs	r3, #1
 8013542:	6057      	str	r7, [r2, #4]
 8013544:	60ab      	str	r3, [r5, #8]
 8013546:	6835      	ldr	r5, [r6, #0]
 8013548:	686b      	ldr	r3, [r5, #4]
 801354a:	3401      	adds	r4, #1
 801354c:	429c      	cmp	r4, r3
 801354e:	d209      	bcs.n	8013564 <rcutils_string_map_fini+0x6c>
 8013550:	682a      	ldr	r2, [r5, #0]
 8013552:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8013556:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801355a:	2800      	cmp	r0, #0
 801355c:	d1df      	bne.n	801351e <rcutils_string_map_fini+0x26>
 801355e:	3401      	adds	r4, #1
 8013560:	42a3      	cmp	r3, r4
 8013562:	d8d7      	bhi.n	8013514 <rcutils_string_map_fini+0x1c>
 8013564:	2100      	movs	r1, #0
 8013566:	4630      	mov	r0, r6
 8013568:	f7ff ff34 	bl	80133d4 <rcutils_string_map_reserve>
 801356c:	4604      	mov	r4, r0
 801356e:	b118      	cbz	r0, 8013578 <rcutils_string_map_fini+0x80>
 8013570:	4620      	mov	r0, r4
 8013572:	b006      	add	sp, #24
 8013574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013578:	6835      	ldr	r5, [r6, #0]
 801357a:	350c      	adds	r5, #12
 801357c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801357e:	af01      	add	r7, sp, #4
 8013580:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013582:	682b      	ldr	r3, [r5, #0]
 8013584:	603b      	str	r3, [r7, #0]
 8013586:	a801      	add	r0, sp, #4
 8013588:	f7f6 feae 	bl	800a2e8 <rcutils_allocator_is_valid>
 801358c:	b148      	cbz	r0, 80135a2 <rcutils_string_map_fini+0xaa>
 801358e:	9b02      	ldr	r3, [sp, #8]
 8013590:	9905      	ldr	r1, [sp, #20]
 8013592:	6830      	ldr	r0, [r6, #0]
 8013594:	4798      	blx	r3
 8013596:	6034      	str	r4, [r6, #0]
 8013598:	2400      	movs	r4, #0
 801359a:	4620      	mov	r0, r4
 801359c:	b006      	add	sp, #24
 801359e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135a2:	240b      	movs	r4, #11
 80135a4:	4620      	mov	r0, r4
 80135a6:	b006      	add	sp, #24
 80135a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080135ac <rcutils_string_map_getn>:
 80135ac:	b338      	cbz	r0, 80135fe <rcutils_string_map_getn+0x52>
 80135ae:	6800      	ldr	r0, [r0, #0]
 80135b0:	b328      	cbz	r0, 80135fe <rcutils_string_map_getn+0x52>
 80135b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135b6:	460e      	mov	r6, r1
 80135b8:	b1c1      	cbz	r1, 80135ec <rcutils_string_map_getn+0x40>
 80135ba:	e9d0 9800 	ldrd	r9, r8, [r0]
 80135be:	f1b8 0f00 	cmp.w	r8, #0
 80135c2:	d013      	beq.n	80135ec <rcutils_string_map_getn+0x40>
 80135c4:	4617      	mov	r7, r2
 80135c6:	2400      	movs	r4, #0
 80135c8:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 80135cc:	4628      	mov	r0, r5
 80135ce:	b155      	cbz	r5, 80135e6 <rcutils_string_map_getn+0x3a>
 80135d0:	f7ec fe7e 	bl	80002d0 <strlen>
 80135d4:	42b8      	cmp	r0, r7
 80135d6:	4602      	mov	r2, r0
 80135d8:	4629      	mov	r1, r5
 80135da:	bf38      	it	cc
 80135dc:	463a      	movcc	r2, r7
 80135de:	4630      	mov	r0, r6
 80135e0:	f004 fa31 	bl	8017a46 <strncmp>
 80135e4:	b128      	cbz	r0, 80135f2 <rcutils_string_map_getn+0x46>
 80135e6:	3401      	adds	r4, #1
 80135e8:	45a0      	cmp	r8, r4
 80135ea:	d1ed      	bne.n	80135c8 <rcutils_string_map_getn+0x1c>
 80135ec:	2000      	movs	r0, #0
 80135ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135f2:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 80135f6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80135fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135fe:	4770      	bx	lr

08013600 <rmw_get_zero_initialized_context>:
 8013600:	b510      	push	{r4, lr}
 8013602:	4903      	ldr	r1, [pc, #12]	@ (8013610 <rmw_get_zero_initialized_context+0x10>)
 8013604:	4604      	mov	r4, r0
 8013606:	2270      	movs	r2, #112	@ 0x70
 8013608:	f004 fae3 	bl	8017bd2 <memcpy>
 801360c:	4620      	mov	r0, r4
 801360e:	bd10      	pop	{r4, pc}
 8013610:	08019620 	.word	0x08019620

08013614 <rmw_get_zero_initialized_init_options>:
 8013614:	b510      	push	{r4, lr}
 8013616:	4903      	ldr	r1, [pc, #12]	@ (8013624 <rmw_get_zero_initialized_init_options+0x10>)
 8013618:	4604      	mov	r4, r0
 801361a:	2258      	movs	r2, #88	@ 0x58
 801361c:	f004 fad9 	bl	8017bd2 <memcpy>
 8013620:	4620      	mov	r0, r4
 8013622:	bd10      	pop	{r4, pc}
 8013624:	08019690 	.word	0x08019690

08013628 <rmw_subscription_content_filter_options_fini>:
 8013628:	b1b0      	cbz	r0, 8013658 <rmw_subscription_content_filter_options_fini+0x30>
 801362a:	b538      	push	{r3, r4, r5, lr}
 801362c:	4604      	mov	r4, r0
 801362e:	4608      	mov	r0, r1
 8013630:	460d      	mov	r5, r1
 8013632:	f7f6 fe59 	bl	800a2e8 <rcutils_allocator_is_valid>
 8013636:	b168      	cbz	r0, 8013654 <rmw_subscription_content_filter_options_fini+0x2c>
 8013638:	6820      	ldr	r0, [r4, #0]
 801363a:	b120      	cbz	r0, 8013646 <rmw_subscription_content_filter_options_fini+0x1e>
 801363c:	686b      	ldr	r3, [r5, #4]
 801363e:	6929      	ldr	r1, [r5, #16]
 8013640:	4798      	blx	r3
 8013642:	2300      	movs	r3, #0
 8013644:	6023      	str	r3, [r4, #0]
 8013646:	1d20      	adds	r0, r4, #4
 8013648:	f003 fafe 	bl	8016c48 <rcutils_string_array_fini>
 801364c:	3800      	subs	r0, #0
 801364e:	bf18      	it	ne
 8013650:	2001      	movne	r0, #1
 8013652:	bd38      	pop	{r3, r4, r5, pc}
 8013654:	200b      	movs	r0, #11
 8013656:	bd38      	pop	{r3, r4, r5, pc}
 8013658:	200b      	movs	r0, #11
 801365a:	4770      	bx	lr

0801365c <rmw_get_default_subscription_options>:
 801365c:	2200      	movs	r2, #0
 801365e:	e9c0 2200 	strd	r2, r2, [r0]
 8013662:	6082      	str	r2, [r0, #8]
 8013664:	4770      	bx	lr
 8013666:	bf00      	nop

08013668 <rmw_time_equal>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	ac04      	add	r4, sp, #16
 801366e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013672:	4925      	ldr	r1, [pc, #148]	@ (8013708 <rmw_time_equal+0xa0>)
 8013674:	9c01      	ldr	r4, [sp, #4]
 8013676:	2202      	movs	r2, #2
 8013678:	4281      	cmp	r1, r0
 801367a:	41a2      	sbcs	r2, r4
 801367c:	d333      	bcc.n	80136e6 <rmw_time_equal+0x7e>
 801367e:	4603      	mov	r3, r0
 8013680:	4822      	ldr	r0, [pc, #136]	@ (801370c <rmw_time_equal+0xa4>)
 8013682:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8013686:	fba3 3200 	umull	r3, r2, r3, r0
 801368a:	fb00 2204 	mla	r2, r0, r4, r2
 801368e:	43de      	mvns	r6, r3
 8013690:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013694:	1a84      	subs	r4, r0, r2
 8013696:	428e      	cmp	r6, r1
 8013698:	41ac      	sbcs	r4, r5
 801369a:	d332      	bcc.n	8013702 <rmw_time_equal+0x9a>
 801369c:	eb11 0e03 	adds.w	lr, r1, r3
 80136a0:	eb42 0005 	adc.w	r0, r2, r5
 80136a4:	9b08      	ldr	r3, [sp, #32]
 80136a6:	4918      	ldr	r1, [pc, #96]	@ (8013708 <rmw_time_equal+0xa0>)
 80136a8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80136aa:	2202      	movs	r2, #2
 80136ac:	4299      	cmp	r1, r3
 80136ae:	41aa      	sbcs	r2, r5
 80136b0:	d31e      	bcc.n	80136f0 <rmw_time_equal+0x88>
 80136b2:	4c16      	ldr	r4, [pc, #88]	@ (801370c <rmw_time_equal+0xa4>)
 80136b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80136b8:	fba3 3104 	umull	r3, r1, r3, r4
 80136bc:	fb04 1105 	mla	r1, r4, r5, r1
 80136c0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80136c4:	43dd      	mvns	r5, r3
 80136c6:	ebac 0401 	sub.w	r4, ip, r1
 80136ca:	4295      	cmp	r5, r2
 80136cc:	41b4      	sbcs	r4, r6
 80136ce:	d314      	bcc.n	80136fa <rmw_time_equal+0x92>
 80136d0:	18d2      	adds	r2, r2, r3
 80136d2:	eb41 0306 	adc.w	r3, r1, r6
 80136d6:	4283      	cmp	r3, r0
 80136d8:	bf08      	it	eq
 80136da:	4572      	cmpeq	r2, lr
 80136dc:	bf0c      	ite	eq
 80136de:	2001      	moveq	r0, #1
 80136e0:	2000      	movne	r0, #0
 80136e2:	b004      	add	sp, #16
 80136e4:	bd70      	pop	{r4, r5, r6, pc}
 80136e6:	f04f 3eff 	mov.w	lr, #4294967295
 80136ea:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80136ee:	e7d9      	b.n	80136a4 <rmw_time_equal+0x3c>
 80136f0:	f04f 32ff 	mov.w	r2, #4294967295
 80136f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80136f8:	e7ed      	b.n	80136d6 <rmw_time_equal+0x6e>
 80136fa:	f04f 32ff 	mov.w	r2, #4294967295
 80136fe:	4663      	mov	r3, ip
 8013700:	e7e9      	b.n	80136d6 <rmw_time_equal+0x6e>
 8013702:	f04f 3eff 	mov.w	lr, #4294967295
 8013706:	e7cd      	b.n	80136a4 <rmw_time_equal+0x3c>
 8013708:	25c17d04 	.word	0x25c17d04
 801370c:	3b9aca00 	.word	0x3b9aca00

08013710 <rmw_time_total_nsec>:
 8013710:	b430      	push	{r4, r5}
 8013712:	b084      	sub	sp, #16
 8013714:	ac04      	add	r4, sp, #16
 8013716:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801371a:	4914      	ldr	r1, [pc, #80]	@ (801376c <rmw_time_total_nsec+0x5c>)
 801371c:	9c01      	ldr	r4, [sp, #4]
 801371e:	2202      	movs	r2, #2
 8013720:	4281      	cmp	r1, r0
 8013722:	41a2      	sbcs	r2, r4
 8013724:	d315      	bcc.n	8013752 <rmw_time_total_nsec+0x42>
 8013726:	4912      	ldr	r1, [pc, #72]	@ (8013770 <rmw_time_total_nsec+0x60>)
 8013728:	4603      	mov	r3, r0
 801372a:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 801372e:	fba3 3201 	umull	r3, r2, r3, r1
 8013732:	fb01 2204 	mla	r2, r1, r4, r2
 8013736:	ea6f 0c03 	mvn.w	ip, r3
 801373a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801373e:	1a8c      	subs	r4, r1, r2
 8013740:	4584      	cmp	ip, r0
 8013742:	41ac      	sbcs	r4, r5
 8013744:	d30c      	bcc.n	8013760 <rmw_time_total_nsec+0x50>
 8013746:	1818      	adds	r0, r3, r0
 8013748:	eb42 0105 	adc.w	r1, r2, r5
 801374c:	b004      	add	sp, #16
 801374e:	bc30      	pop	{r4, r5}
 8013750:	4770      	bx	lr
 8013752:	f04f 30ff 	mov.w	r0, #4294967295
 8013756:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801375a:	b004      	add	sp, #16
 801375c:	bc30      	pop	{r4, r5}
 801375e:	4770      	bx	lr
 8013760:	f04f 30ff 	mov.w	r0, #4294967295
 8013764:	b004      	add	sp, #16
 8013766:	bc30      	pop	{r4, r5}
 8013768:	4770      	bx	lr
 801376a:	bf00      	nop
 801376c:	25c17d04 	.word	0x25c17d04
 8013770:	3b9aca00 	.word	0x3b9aca00

08013774 <rmw_get_zero_initialized_message_info>:
 8013774:	b510      	push	{r4, lr}
 8013776:	4c09      	ldr	r4, [pc, #36]	@ (801379c <rmw_get_zero_initialized_message_info+0x28>)
 8013778:	4686      	mov	lr, r0
 801377a:	4684      	mov	ip, r0
 801377c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801377e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013784:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801378a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801378e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013792:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013796:	4670      	mov	r0, lr
 8013798:	bd10      	pop	{r4, pc}
 801379a:	bf00      	nop
 801379c:	080196e8 	.word	0x080196e8

080137a0 <rmw_validate_full_topic_name>:
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d049      	beq.n	8013838 <rmw_validate_full_topic_name+0x98>
 80137a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a8:	460e      	mov	r6, r1
 80137aa:	2900      	cmp	r1, #0
 80137ac:	d056      	beq.n	801385c <rmw_validate_full_topic_name+0xbc>
 80137ae:	4615      	mov	r5, r2
 80137b0:	4604      	mov	r4, r0
 80137b2:	f7ec fd8d 	bl	80002d0 <strlen>
 80137b6:	b150      	cbz	r0, 80137ce <rmw_validate_full_topic_name+0x2e>
 80137b8:	7823      	ldrb	r3, [r4, #0]
 80137ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80137bc:	d00c      	beq.n	80137d8 <rmw_validate_full_topic_name+0x38>
 80137be:	2302      	movs	r3, #2
 80137c0:	6033      	str	r3, [r6, #0]
 80137c2:	b10d      	cbz	r5, 80137c8 <rmw_validate_full_topic_name+0x28>
 80137c4:	2300      	movs	r3, #0
 80137c6:	602b      	str	r3, [r5, #0]
 80137c8:	2000      	movs	r0, #0
 80137ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137ce:	2301      	movs	r3, #1
 80137d0:	6033      	str	r3, [r6, #0]
 80137d2:	2d00      	cmp	r5, #0
 80137d4:	d1f6      	bne.n	80137c4 <rmw_validate_full_topic_name+0x24>
 80137d6:	e7f7      	b.n	80137c8 <rmw_validate_full_topic_name+0x28>
 80137d8:	1e47      	subs	r7, r0, #1
 80137da:	5de3      	ldrb	r3, [r4, r7]
 80137dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80137de:	d03f      	beq.n	8013860 <rmw_validate_full_topic_name+0xc0>
 80137e0:	1e63      	subs	r3, r4, #1
 80137e2:	4621      	mov	r1, r4
 80137e4:	eb03 0e00 	add.w	lr, r3, r0
 80137e8:	469c      	mov	ip, r3
 80137ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80137ee:	2a5f      	cmp	r2, #95	@ 0x5f
 80137f0:	d006      	beq.n	8013800 <rmw_validate_full_topic_name+0x60>
 80137f2:	d823      	bhi.n	801383c <rmw_validate_full_topic_name+0x9c>
 80137f4:	2a39      	cmp	r2, #57	@ 0x39
 80137f6:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 80137fa:	d82b      	bhi.n	8013854 <rmw_validate_full_topic_name+0xb4>
 80137fc:	2a2e      	cmp	r2, #46	@ 0x2e
 80137fe:	d920      	bls.n	8013842 <rmw_validate_full_topic_name+0xa2>
 8013800:	4573      	cmp	r3, lr
 8013802:	d1f1      	bne.n	80137e8 <rmw_validate_full_topic_name+0x48>
 8013804:	4c21      	ldr	r4, [pc, #132]	@ (801388c <rmw_validate_full_topic_name+0xec>)
 8013806:	2300      	movs	r3, #0
 8013808:	e003      	b.n	8013812 <rmw_validate_full_topic_name+0x72>
 801380a:	4298      	cmp	r0, r3
 801380c:	f101 0101 	add.w	r1, r1, #1
 8013810:	d02c      	beq.n	801386c <rmw_validate_full_topic_name+0xcc>
 8013812:	429f      	cmp	r7, r3
 8013814:	f103 0301 	add.w	r3, r3, #1
 8013818:	d0f7      	beq.n	801380a <rmw_validate_full_topic_name+0x6a>
 801381a:	780a      	ldrb	r2, [r1, #0]
 801381c:	2a2f      	cmp	r2, #47	@ 0x2f
 801381e:	d1f4      	bne.n	801380a <rmw_validate_full_topic_name+0x6a>
 8013820:	784a      	ldrb	r2, [r1, #1]
 8013822:	2a2f      	cmp	r2, #47	@ 0x2f
 8013824:	d02d      	beq.n	8013882 <rmw_validate_full_topic_name+0xe2>
 8013826:	5ca2      	ldrb	r2, [r4, r2]
 8013828:	0752      	lsls	r2, r2, #29
 801382a:	d5ee      	bpl.n	801380a <rmw_validate_full_topic_name+0x6a>
 801382c:	2206      	movs	r2, #6
 801382e:	6032      	str	r2, [r6, #0]
 8013830:	2d00      	cmp	r5, #0
 8013832:	d0c9      	beq.n	80137c8 <rmw_validate_full_topic_name+0x28>
 8013834:	602b      	str	r3, [r5, #0]
 8013836:	e7c7      	b.n	80137c8 <rmw_validate_full_topic_name+0x28>
 8013838:	200b      	movs	r0, #11
 801383a:	4770      	bx	lr
 801383c:	3a61      	subs	r2, #97	@ 0x61
 801383e:	2a19      	cmp	r2, #25
 8013840:	d9de      	bls.n	8013800 <rmw_validate_full_topic_name+0x60>
 8013842:	2304      	movs	r3, #4
 8013844:	6033      	str	r3, [r6, #0]
 8013846:	2d00      	cmp	r5, #0
 8013848:	d0be      	beq.n	80137c8 <rmw_validate_full_topic_name+0x28>
 801384a:	f1c4 0401 	rsb	r4, r4, #1
 801384e:	4464      	add	r4, ip
 8013850:	602c      	str	r4, [r5, #0]
 8013852:	e7b9      	b.n	80137c8 <rmw_validate_full_topic_name+0x28>
 8013854:	f1b8 0f19 	cmp.w	r8, #25
 8013858:	d9d2      	bls.n	8013800 <rmw_validate_full_topic_name+0x60>
 801385a:	e7f2      	b.n	8013842 <rmw_validate_full_topic_name+0xa2>
 801385c:	200b      	movs	r0, #11
 801385e:	e7b4      	b.n	80137ca <rmw_validate_full_topic_name+0x2a>
 8013860:	2303      	movs	r3, #3
 8013862:	6033      	str	r3, [r6, #0]
 8013864:	2d00      	cmp	r5, #0
 8013866:	d0af      	beq.n	80137c8 <rmw_validate_full_topic_name+0x28>
 8013868:	602f      	str	r7, [r5, #0]
 801386a:	e7ad      	b.n	80137c8 <rmw_validate_full_topic_name+0x28>
 801386c:	28f7      	cmp	r0, #247	@ 0xf7
 801386e:	d802      	bhi.n	8013876 <rmw_validate_full_topic_name+0xd6>
 8013870:	2300      	movs	r3, #0
 8013872:	6033      	str	r3, [r6, #0]
 8013874:	e7a8      	b.n	80137c8 <rmw_validate_full_topic_name+0x28>
 8013876:	2307      	movs	r3, #7
 8013878:	6033      	str	r3, [r6, #0]
 801387a:	2d00      	cmp	r5, #0
 801387c:	d0a4      	beq.n	80137c8 <rmw_validate_full_topic_name+0x28>
 801387e:	23f6      	movs	r3, #246	@ 0xf6
 8013880:	e7d8      	b.n	8013834 <rmw_validate_full_topic_name+0x94>
 8013882:	2205      	movs	r2, #5
 8013884:	6032      	str	r2, [r6, #0]
 8013886:	2d00      	cmp	r5, #0
 8013888:	d1d4      	bne.n	8013834 <rmw_validate_full_topic_name+0x94>
 801388a:	e79d      	b.n	80137c8 <rmw_validate_full_topic_name+0x28>
 801388c:	0801998b 	.word	0x0801998b

08013890 <rmw_validate_namespace_with_size>:
 8013890:	2800      	cmp	r0, #0
 8013892:	d031      	beq.n	80138f8 <rmw_validate_namespace_with_size+0x68>
 8013894:	b570      	push	{r4, r5, r6, lr}
 8013896:	4614      	mov	r4, r2
 8013898:	b0c2      	sub	sp, #264	@ 0x108
 801389a:	b1ba      	cbz	r2, 80138cc <rmw_validate_namespace_with_size+0x3c>
 801389c:	2901      	cmp	r1, #1
 801389e:	460e      	mov	r6, r1
 80138a0:	461d      	mov	r5, r3
 80138a2:	d102      	bne.n	80138aa <rmw_validate_namespace_with_size+0x1a>
 80138a4:	7803      	ldrb	r3, [r0, #0]
 80138a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80138a8:	d015      	beq.n	80138d6 <rmw_validate_namespace_with_size+0x46>
 80138aa:	aa01      	add	r2, sp, #4
 80138ac:	4669      	mov	r1, sp
 80138ae:	f7ff ff77 	bl	80137a0 <rmw_validate_full_topic_name>
 80138b2:	b960      	cbnz	r0, 80138ce <rmw_validate_namespace_with_size+0x3e>
 80138b4:	9b00      	ldr	r3, [sp, #0]
 80138b6:	b163      	cbz	r3, 80138d2 <rmw_validate_namespace_with_size+0x42>
 80138b8:	2b07      	cmp	r3, #7
 80138ba:	d00a      	beq.n	80138d2 <rmw_validate_namespace_with_size+0x42>
 80138bc:	1e5a      	subs	r2, r3, #1
 80138be:	2a05      	cmp	r2, #5
 80138c0:	d81c      	bhi.n	80138fc <rmw_validate_namespace_with_size+0x6c>
 80138c2:	e8df f002 	tbb	[pc, r2]
 80138c6:	0c0c      	.short	0x0c0c
 80138c8:	0c0c0c0c 	.word	0x0c0c0c0c
 80138cc:	200b      	movs	r0, #11
 80138ce:	b042      	add	sp, #264	@ 0x108
 80138d0:	bd70      	pop	{r4, r5, r6, pc}
 80138d2:	2ef5      	cmp	r6, #245	@ 0xf5
 80138d4:	d809      	bhi.n	80138ea <rmw_validate_namespace_with_size+0x5a>
 80138d6:	2300      	movs	r3, #0
 80138d8:	6023      	str	r3, [r4, #0]
 80138da:	2000      	movs	r0, #0
 80138dc:	e7f7      	b.n	80138ce <rmw_validate_namespace_with_size+0x3e>
 80138de:	6023      	str	r3, [r4, #0]
 80138e0:	2d00      	cmp	r5, #0
 80138e2:	d0fa      	beq.n	80138da <rmw_validate_namespace_with_size+0x4a>
 80138e4:	9b01      	ldr	r3, [sp, #4]
 80138e6:	602b      	str	r3, [r5, #0]
 80138e8:	e7f7      	b.n	80138da <rmw_validate_namespace_with_size+0x4a>
 80138ea:	2307      	movs	r3, #7
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	2d00      	cmp	r5, #0
 80138f0:	d0f3      	beq.n	80138da <rmw_validate_namespace_with_size+0x4a>
 80138f2:	23f4      	movs	r3, #244	@ 0xf4
 80138f4:	602b      	str	r3, [r5, #0]
 80138f6:	e7f0      	b.n	80138da <rmw_validate_namespace_with_size+0x4a>
 80138f8:	200b      	movs	r0, #11
 80138fa:	4770      	bx	lr
 80138fc:	4a03      	ldr	r2, [pc, #12]	@ (801390c <rmw_validate_namespace_with_size+0x7c>)
 80138fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013902:	a802      	add	r0, sp, #8
 8013904:	f7ff fcd4 	bl	80132b0 <rcutils_snprintf>
 8013908:	2001      	movs	r0, #1
 801390a:	e7e0      	b.n	80138ce <rmw_validate_namespace_with_size+0x3e>
 801390c:	08018cdc 	.word	0x08018cdc

08013910 <rmw_validate_namespace>:
 8013910:	b168      	cbz	r0, 801392e <rmw_validate_namespace+0x1e>
 8013912:	b570      	push	{r4, r5, r6, lr}
 8013914:	460d      	mov	r5, r1
 8013916:	4616      	mov	r6, r2
 8013918:	4604      	mov	r4, r0
 801391a:	f7ec fcd9 	bl	80002d0 <strlen>
 801391e:	4633      	mov	r3, r6
 8013920:	4601      	mov	r1, r0
 8013922:	462a      	mov	r2, r5
 8013924:	4620      	mov	r0, r4
 8013926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801392a:	f7ff bfb1 	b.w	8013890 <rmw_validate_namespace_with_size>
 801392e:	200b      	movs	r0, #11
 8013930:	4770      	bx	lr
 8013932:	bf00      	nop

08013934 <rmw_namespace_validation_result_string>:
 8013934:	2807      	cmp	r0, #7
 8013936:	bf9a      	itte	ls
 8013938:	4b02      	ldrls	r3, [pc, #8]	@ (8013944 <rmw_namespace_validation_result_string+0x10>)
 801393a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801393e:	4802      	ldrhi	r0, [pc, #8]	@ (8013948 <rmw_namespace_validation_result_string+0x14>)
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop
 8013944:	08019720 	.word	0x08019720
 8013948:	08018d2c 	.word	0x08018d2c

0801394c <rmw_validate_node_name>:
 801394c:	2800      	cmp	r0, #0
 801394e:	d037      	beq.n	80139c0 <rmw_validate_node_name+0x74>
 8013950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013952:	460e      	mov	r6, r1
 8013954:	2900      	cmp	r1, #0
 8013956:	d035      	beq.n	80139c4 <rmw_validate_node_name+0x78>
 8013958:	4617      	mov	r7, r2
 801395a:	4604      	mov	r4, r0
 801395c:	f7ec fcb8 	bl	80002d0 <strlen>
 8013960:	b1d8      	cbz	r0, 801399a <rmw_validate_node_name+0x4e>
 8013962:	1e63      	subs	r3, r4, #1
 8013964:	1819      	adds	r1, r3, r0
 8013966:	461a      	mov	r2, r3
 8013968:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801396c:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8013970:	f02e 0c20 	bic.w	ip, lr, #32
 8013974:	2d09      	cmp	r5, #9
 8013976:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801397a:	d915      	bls.n	80139a8 <rmw_validate_node_name+0x5c>
 801397c:	f1bc 0f19 	cmp.w	ip, #25
 8013980:	d912      	bls.n	80139a8 <rmw_validate_node_name+0x5c>
 8013982:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8013986:	d00f      	beq.n	80139a8 <rmw_validate_node_name+0x5c>
 8013988:	2302      	movs	r3, #2
 801398a:	6033      	str	r3, [r6, #0]
 801398c:	b11f      	cbz	r7, 8013996 <rmw_validate_node_name+0x4a>
 801398e:	f1c4 0401 	rsb	r4, r4, #1
 8013992:	4414      	add	r4, r2
 8013994:	603c      	str	r4, [r7, #0]
 8013996:	2000      	movs	r0, #0
 8013998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801399a:	2301      	movs	r3, #1
 801399c:	6033      	str	r3, [r6, #0]
 801399e:	2f00      	cmp	r7, #0
 80139a0:	d0f9      	beq.n	8013996 <rmw_validate_node_name+0x4a>
 80139a2:	2300      	movs	r3, #0
 80139a4:	603b      	str	r3, [r7, #0]
 80139a6:	e7f6      	b.n	8013996 <rmw_validate_node_name+0x4a>
 80139a8:	4299      	cmp	r1, r3
 80139aa:	d1dc      	bne.n	8013966 <rmw_validate_node_name+0x1a>
 80139ac:	7823      	ldrb	r3, [r4, #0]
 80139ae:	4a0c      	ldr	r2, [pc, #48]	@ (80139e0 <rmw_validate_node_name+0x94>)
 80139b0:	5cd3      	ldrb	r3, [r2, r3]
 80139b2:	f013 0304 	ands.w	r3, r3, #4
 80139b6:	d10e      	bne.n	80139d6 <rmw_validate_node_name+0x8a>
 80139b8:	28ff      	cmp	r0, #255	@ 0xff
 80139ba:	d805      	bhi.n	80139c8 <rmw_validate_node_name+0x7c>
 80139bc:	6033      	str	r3, [r6, #0]
 80139be:	e7ea      	b.n	8013996 <rmw_validate_node_name+0x4a>
 80139c0:	200b      	movs	r0, #11
 80139c2:	4770      	bx	lr
 80139c4:	200b      	movs	r0, #11
 80139c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c8:	2304      	movs	r3, #4
 80139ca:	6033      	str	r3, [r6, #0]
 80139cc:	2f00      	cmp	r7, #0
 80139ce:	d0e2      	beq.n	8013996 <rmw_validate_node_name+0x4a>
 80139d0:	23fe      	movs	r3, #254	@ 0xfe
 80139d2:	603b      	str	r3, [r7, #0]
 80139d4:	e7df      	b.n	8013996 <rmw_validate_node_name+0x4a>
 80139d6:	2303      	movs	r3, #3
 80139d8:	6033      	str	r3, [r6, #0]
 80139da:	2f00      	cmp	r7, #0
 80139dc:	d1e1      	bne.n	80139a2 <rmw_validate_node_name+0x56>
 80139de:	e7da      	b.n	8013996 <rmw_validate_node_name+0x4a>
 80139e0:	0801998b 	.word	0x0801998b

080139e4 <rmw_node_name_validation_result_string>:
 80139e4:	2804      	cmp	r0, #4
 80139e6:	bf9a      	itte	ls
 80139e8:	4b02      	ldrls	r3, [pc, #8]	@ (80139f4 <rmw_node_name_validation_result_string+0x10>)
 80139ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80139ee:	4802      	ldrhi	r0, [pc, #8]	@ (80139f8 <rmw_node_name_validation_result_string+0x14>)
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop
 80139f4:	08019740 	.word	0x08019740
 80139f8:	08018ed4 	.word	0x08018ed4

080139fc <get_memory>:
 80139fc:	4603      	mov	r3, r0
 80139fe:	6840      	ldr	r0, [r0, #4]
 8013a00:	b158      	cbz	r0, 8013a1a <get_memory+0x1e>
 8013a02:	6842      	ldr	r2, [r0, #4]
 8013a04:	605a      	str	r2, [r3, #4]
 8013a06:	b10a      	cbz	r2, 8013a0c <get_memory+0x10>
 8013a08:	2100      	movs	r1, #0
 8013a0a:	6011      	str	r1, [r2, #0]
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	6042      	str	r2, [r0, #4]
 8013a10:	b102      	cbz	r2, 8013a14 <get_memory+0x18>
 8013a12:	6010      	str	r0, [r2, #0]
 8013a14:	2200      	movs	r2, #0
 8013a16:	6002      	str	r2, [r0, #0]
 8013a18:	6018      	str	r0, [r3, #0]
 8013a1a:	4770      	bx	lr

08013a1c <put_memory>:
 8013a1c:	680b      	ldr	r3, [r1, #0]
 8013a1e:	b10b      	cbz	r3, 8013a24 <put_memory+0x8>
 8013a20:	684a      	ldr	r2, [r1, #4]
 8013a22:	605a      	str	r2, [r3, #4]
 8013a24:	684a      	ldr	r2, [r1, #4]
 8013a26:	b102      	cbz	r2, 8013a2a <put_memory+0xe>
 8013a28:	6013      	str	r3, [r2, #0]
 8013a2a:	6803      	ldr	r3, [r0, #0]
 8013a2c:	428b      	cmp	r3, r1
 8013a2e:	6843      	ldr	r3, [r0, #4]
 8013a30:	bf08      	it	eq
 8013a32:	6002      	streq	r2, [r0, #0]
 8013a34:	604b      	str	r3, [r1, #4]
 8013a36:	b103      	cbz	r3, 8013a3a <put_memory+0x1e>
 8013a38:	6019      	str	r1, [r3, #0]
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	600b      	str	r3, [r1, #0]
 8013a3e:	6041      	str	r1, [r0, #4]
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop

08013a44 <rmw_destroy_client>:
 8013a44:	b570      	push	{r4, r5, r6, lr}
 8013a46:	b128      	cbz	r0, 8013a54 <rmw_destroy_client+0x10>
 8013a48:	4604      	mov	r4, r0
 8013a4a:	6800      	ldr	r0, [r0, #0]
 8013a4c:	460d      	mov	r5, r1
 8013a4e:	f7f7 fa67 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 8013a52:	b910      	cbnz	r0, 8013a5a <rmw_destroy_client+0x16>
 8013a54:	2401      	movs	r4, #1
 8013a56:	4620      	mov	r0, r4
 8013a58:	bd70      	pop	{r4, r5, r6, pc}
 8013a5a:	6863      	ldr	r3, [r4, #4]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d0f9      	beq.n	8013a54 <rmw_destroy_client+0x10>
 8013a60:	2d00      	cmp	r5, #0
 8013a62:	d0f7      	beq.n	8013a54 <rmw_destroy_client+0x10>
 8013a64:	6828      	ldr	r0, [r5, #0]
 8013a66:	f7f7 fa5b 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d0f2      	beq.n	8013a54 <rmw_destroy_client+0x10>
 8013a6e:	686e      	ldr	r6, [r5, #4]
 8013a70:	2e00      	cmp	r6, #0
 8013a72:	d0ef      	beq.n	8013a54 <rmw_destroy_client+0x10>
 8013a74:	6864      	ldr	r4, [r4, #4]
 8013a76:	6932      	ldr	r2, [r6, #16]
 8013a78:	6920      	ldr	r0, [r4, #16]
 8013a7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a82:	6819      	ldr	r1, [r3, #0]
 8013a84:	f002 faac 	bl	8015fe0 <uxr_buffer_cancel_data>
 8013a88:	4602      	mov	r2, r0
 8013a8a:	6920      	ldr	r0, [r4, #16]
 8013a8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a94:	f7f7 f9be 	bl	800ae14 <run_xrce_session>
 8013a98:	6920      	ldr	r0, [r4, #16]
 8013a9a:	6932      	ldr	r2, [r6, #16]
 8013a9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013aa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013aa4:	6819      	ldr	r1, [r3, #0]
 8013aa6:	f7f8 fe63 	bl	800c770 <uxr_buffer_delete_entity>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	6920      	ldr	r0, [r4, #16]
 8013aae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013ab2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013ab6:	f7f7 f9ad 	bl	800ae14 <run_xrce_session>
 8013aba:	f080 0401 	eor.w	r4, r0, #1
 8013abe:	b2e4      	uxtb	r4, r4
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	0064      	lsls	r4, r4, #1
 8013ac4:	f7f7 f888 	bl	800abd8 <rmw_uxrce_fini_client_memory>
 8013ac8:	e7c5      	b.n	8013a56 <rmw_destroy_client+0x12>
 8013aca:	bf00      	nop

08013acc <rmw_get_gid_for_client>:
 8013acc:	b1a8      	cbz	r0, 8013afa <rmw_get_gid_for_client+0x2e>
 8013ace:	b538      	push	{r3, r4, r5, lr}
 8013ad0:	460c      	mov	r4, r1
 8013ad2:	b1a1      	cbz	r1, 8013afe <rmw_get_gid_for_client+0x32>
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	6800      	ldr	r0, [r0, #0]
 8013ad8:	b120      	cbz	r0, 8013ae4 <rmw_get_gid_for_client+0x18>
 8013ada:	4b0a      	ldr	r3, [pc, #40]	@ (8013b04 <rmw_get_gid_for_client+0x38>)
 8013adc:	6819      	ldr	r1, [r3, #0]
 8013ade:	f7ec fb97 	bl	8000210 <strcmp>
 8013ae2:	b940      	cbnz	r0, 8013af6 <rmw_get_gid_for_client+0x2a>
 8013ae4:	686b      	ldr	r3, [r5, #4]
 8013ae6:	2000      	movs	r0, #0
 8013ae8:	6060      	str	r0, [r4, #4]
 8013aea:	60a0      	str	r0, [r4, #8]
 8013aec:	60e0      	str	r0, [r4, #12]
 8013aee:	6120      	str	r0, [r4, #16]
 8013af0:	691b      	ldr	r3, [r3, #16]
 8013af2:	6063      	str	r3, [r4, #4]
 8013af4:	bd38      	pop	{r3, r4, r5, pc}
 8013af6:	200c      	movs	r0, #12
 8013af8:	bd38      	pop	{r3, r4, r5, pc}
 8013afa:	200b      	movs	r0, #11
 8013afc:	4770      	bx	lr
 8013afe:	200b      	movs	r0, #11
 8013b00:	bd38      	pop	{r3, r4, r5, pc}
 8013b02:	bf00      	nop
 8013b04:	08019754 	.word	0x08019754

08013b08 <rmw_get_implementation_identifier>:
 8013b08:	4b01      	ldr	r3, [pc, #4]	@ (8013b10 <rmw_get_implementation_identifier+0x8>)
 8013b0a:	6818      	ldr	r0, [r3, #0]
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop
 8013b10:	08019754 	.word	0x08019754

08013b14 <rmw_init_options_init>:
 8013b14:	b084      	sub	sp, #16
 8013b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b18:	b083      	sub	sp, #12
 8013b1a:	ad09      	add	r5, sp, #36	@ 0x24
 8013b1c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013b20:	b130      	cbz	r0, 8013b30 <rmw_init_options_init+0x1c>
 8013b22:	4604      	mov	r4, r0
 8013b24:	4628      	mov	r0, r5
 8013b26:	f7f6 fbdf 	bl	800a2e8 <rcutils_allocator_is_valid>
 8013b2a:	b108      	cbz	r0, 8013b30 <rmw_init_options_init+0x1c>
 8013b2c:	68a6      	ldr	r6, [r4, #8]
 8013b2e:	b12e      	cbz	r6, 8013b3c <rmw_init_options_init+0x28>
 8013b30:	200b      	movs	r0, #11
 8013b32:	b003      	add	sp, #12
 8013b34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013b38:	b004      	add	sp, #16
 8013b3a:	4770      	bx	lr
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	2300      	movs	r3, #0
 8013b40:	e9c4 2300 	strd	r2, r3, [r4]
 8013b44:	4b20      	ldr	r3, [pc, #128]	@ (8013bc8 <rmw_init_options_init+0xb4>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	60a3      	str	r3, [r4, #8]
 8013b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b4c:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 8013b50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b54:	466f      	mov	r7, sp
 8013b56:	682b      	ldr	r3, [r5, #0]
 8013b58:	f8cc 3000 	str.w	r3, [ip]
 8013b5c:	4638      	mov	r0, r7
 8013b5e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8013b60:	60e6      	str	r6, [r4, #12]
 8013b62:	f003 f8f7 	bl	8016d54 <rmw_get_default_security_options>
 8013b66:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013b6a:	f104 0310 	add.w	r3, r4, #16
 8013b6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b72:	2203      	movs	r2, #3
 8013b74:	4815      	ldr	r0, [pc, #84]	@ (8013bcc <rmw_init_options_init+0xb8>)
 8013b76:	4916      	ldr	r1, [pc, #88]	@ (8013bd0 <rmw_init_options_init+0xbc>)
 8013b78:	f7f6 ff6e 	bl	800aa58 <rmw_uxrce_init_init_options_impl_memory>
 8013b7c:	4813      	ldr	r0, [pc, #76]	@ (8013bcc <rmw_init_options_init+0xb8>)
 8013b7e:	f7ff ff3d 	bl	80139fc <get_memory>
 8013b82:	b1f0      	cbz	r0, 8013bc2 <rmw_init_options_init+0xae>
 8013b84:	4a13      	ldr	r2, [pc, #76]	@ (8013bd4 <rmw_init_options_init+0xc0>)
 8013b86:	6883      	ldr	r3, [r0, #8]
 8013b88:	6851      	ldr	r1, [r2, #4]
 8013b8a:	7810      	ldrb	r0, [r2, #0]
 8013b8c:	6523      	str	r3, [r4, #80]	@ 0x50
 8013b8e:	7418      	strb	r0, [r3, #16]
 8013b90:	6159      	str	r1, [r3, #20]
 8013b92:	68d1      	ldr	r1, [r2, #12]
 8013b94:	61d9      	str	r1, [r3, #28]
 8013b96:	6911      	ldr	r1, [r2, #16]
 8013b98:	6219      	str	r1, [r3, #32]
 8013b9a:	6951      	ldr	r1, [r2, #20]
 8013b9c:	6892      	ldr	r2, [r2, #8]
 8013b9e:	619a      	str	r2, [r3, #24]
 8013ba0:	6259      	str	r1, [r3, #36]	@ 0x24
 8013ba2:	f7fb f81d 	bl	800ebe0 <uxr_nanos>
 8013ba6:	f003 fb8f 	bl	80172c8 <srand>
 8013baa:	f003 fbbb 	bl	8017324 <rand>
 8013bae:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013bb0:	6298      	str	r0, [r3, #40]	@ 0x28
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	d0f9      	beq.n	8013baa <rmw_init_options_init+0x96>
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	b003      	add	sp, #12
 8013bba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013bbe:	b004      	add	sp, #16
 8013bc0:	4770      	bx	lr
 8013bc2:	2001      	movs	r0, #1
 8013bc4:	e7b5      	b.n	8013b32 <rmw_init_options_init+0x1e>
 8013bc6:	bf00      	nop
 8013bc8:	08019754 	.word	0x08019754
 8013bcc:	2000a258 	.word	0x2000a258
 8013bd0:	2000a1d4 	.word	0x2000a1d4
 8013bd4:	2000a0a8 	.word	0x2000a0a8

08013bd8 <rmw_init_options_copy>:
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d03e      	beq.n	8013c5a <rmw_init_options_copy+0x82>
 8013bdc:	b570      	push	{r4, r5, r6, lr}
 8013bde:	460d      	mov	r5, r1
 8013be0:	b149      	cbz	r1, 8013bf6 <rmw_init_options_copy+0x1e>
 8013be2:	4604      	mov	r4, r0
 8013be4:	6880      	ldr	r0, [r0, #8]
 8013be6:	b120      	cbz	r0, 8013bf2 <rmw_init_options_copy+0x1a>
 8013be8:	4b21      	ldr	r3, [pc, #132]	@ (8013c70 <rmw_init_options_copy+0x98>)
 8013bea:	6819      	ldr	r1, [r3, #0]
 8013bec:	f7ec fb10 	bl	8000210 <strcmp>
 8013bf0:	bb78      	cbnz	r0, 8013c52 <rmw_init_options_copy+0x7a>
 8013bf2:	68ab      	ldr	r3, [r5, #8]
 8013bf4:	b11b      	cbz	r3, 8013bfe <rmw_init_options_copy+0x26>
 8013bf6:	f04f 0c0b 	mov.w	ip, #11
 8013bfa:	4660      	mov	r0, ip
 8013bfc:	bd70      	pop	{r4, r5, r6, pc}
 8013bfe:	2258      	movs	r2, #88	@ 0x58
 8013c00:	4621      	mov	r1, r4
 8013c02:	4628      	mov	r0, r5
 8013c04:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8013c08:	f003 ffe3 	bl	8017bd2 <memcpy>
 8013c0c:	4630      	mov	r0, r6
 8013c0e:	f7f6 fb6b 	bl	800a2e8 <rcutils_allocator_is_valid>
 8013c12:	2800      	cmp	r0, #0
 8013c14:	d0ef      	beq.n	8013bf6 <rmw_init_options_copy+0x1e>
 8013c16:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013c18:	b138      	cbz	r0, 8013c2a <rmw_init_options_copy+0x52>
 8013c1a:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 8013c1e:	4631      	mov	r1, r6
 8013c20:	f003 f864 	bl	8016cec <rmw_enclave_options_copy>
 8013c24:	4684      	mov	ip, r0
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d1e7      	bne.n	8013bfa <rmw_init_options_copy+0x22>
 8013c2a:	4812      	ldr	r0, [pc, #72]	@ (8013c74 <rmw_init_options_copy+0x9c>)
 8013c2c:	f7ff fee6 	bl	80139fc <get_memory>
 8013c30:	b1b8      	cbz	r0, 8013c62 <rmw_init_options_copy+0x8a>
 8013c32:	6883      	ldr	r3, [r0, #8]
 8013c34:	652b      	str	r3, [r5, #80]	@ 0x50
 8013c36:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8013c38:	3510      	adds	r5, #16
 8013c3a:	f103 0410 	add.w	r4, r3, #16
 8013c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013c46:	f04f 0c00 	mov.w	ip, #0
 8013c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013c4e:	4660      	mov	r0, ip
 8013c50:	bd70      	pop	{r4, r5, r6, pc}
 8013c52:	f04f 0c0c 	mov.w	ip, #12
 8013c56:	4660      	mov	r0, ip
 8013c58:	bd70      	pop	{r4, r5, r6, pc}
 8013c5a:	f04f 0c0b 	mov.w	ip, #11
 8013c5e:	4660      	mov	r0, ip
 8013c60:	4770      	bx	lr
 8013c62:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013c64:	4631      	mov	r1, r6
 8013c66:	f003 f863 	bl	8016d30 <rmw_enclave_options_fini>
 8013c6a:	f04f 0c01 	mov.w	ip, #1
 8013c6e:	e7c4      	b.n	8013bfa <rmw_init_options_copy+0x22>
 8013c70:	08019754 	.word	0x08019754
 8013c74:	2000a258 	.word	0x2000a258

08013c78 <rmw_init_options_fini>:
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d035      	beq.n	8013ce8 <rmw_init_options_fini+0x70>
 8013c7c:	b530      	push	{r4, r5, lr}
 8013c7e:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 8013c82:	b097      	sub	sp, #92	@ 0x5c
 8013c84:	4604      	mov	r4, r0
 8013c86:	4628      	mov	r0, r5
 8013c88:	f7f6 fb2e 	bl	800a2e8 <rcutils_allocator_is_valid>
 8013c8c:	b320      	cbz	r0, 8013cd8 <rmw_init_options_fini+0x60>
 8013c8e:	68a0      	ldr	r0, [r4, #8]
 8013c90:	b120      	cbz	r0, 8013c9c <rmw_init_options_fini+0x24>
 8013c92:	4b16      	ldr	r3, [pc, #88]	@ (8013cec <rmw_init_options_fini+0x74>)
 8013c94:	6819      	ldr	r1, [r3, #0]
 8013c96:	f7ec fabb 	bl	8000210 <strcmp>
 8013c9a:	bb18      	cbnz	r0, 8013ce4 <rmw_init_options_fini+0x6c>
 8013c9c:	4b14      	ldr	r3, [pc, #80]	@ (8013cf0 <rmw_init_options_fini+0x78>)
 8013c9e:	6819      	ldr	r1, [r3, #0]
 8013ca0:	b1e9      	cbz	r1, 8013cde <rmw_init_options_fini+0x66>
 8013ca2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8013ca4:	e001      	b.n	8013caa <rmw_init_options_fini+0x32>
 8013ca6:	6849      	ldr	r1, [r1, #4]
 8013ca8:	b1c9      	cbz	r1, 8013cde <rmw_init_options_fini+0x66>
 8013caa:	688b      	ldr	r3, [r1, #8]
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d1fa      	bne.n	8013ca6 <rmw_init_options_fini+0x2e>
 8013cb0:	480f      	ldr	r0, [pc, #60]	@ (8013cf0 <rmw_init_options_fini+0x78>)
 8013cb2:	f7ff feb3 	bl	8013a1c <put_memory>
 8013cb6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013cb8:	b118      	cbz	r0, 8013cc2 <rmw_init_options_fini+0x4a>
 8013cba:	4629      	mov	r1, r5
 8013cbc:	f003 f838 	bl	8016d30 <rmw_enclave_options_fini>
 8013cc0:	b940      	cbnz	r0, 8013cd4 <rmw_init_options_fini+0x5c>
 8013cc2:	4668      	mov	r0, sp
 8013cc4:	f7ff fca6 	bl	8013614 <rmw_get_zero_initialized_init_options>
 8013cc8:	2258      	movs	r2, #88	@ 0x58
 8013cca:	4669      	mov	r1, sp
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f003 ff80 	bl	8017bd2 <memcpy>
 8013cd2:	2000      	movs	r0, #0
 8013cd4:	b017      	add	sp, #92	@ 0x5c
 8013cd6:	bd30      	pop	{r4, r5, pc}
 8013cd8:	200b      	movs	r0, #11
 8013cda:	b017      	add	sp, #92	@ 0x5c
 8013cdc:	bd30      	pop	{r4, r5, pc}
 8013cde:	2001      	movs	r0, #1
 8013ce0:	b017      	add	sp, #92	@ 0x5c
 8013ce2:	bd30      	pop	{r4, r5, pc}
 8013ce4:	200c      	movs	r0, #12
 8013ce6:	e7f5      	b.n	8013cd4 <rmw_init_options_fini+0x5c>
 8013ce8:	200b      	movs	r0, #11
 8013cea:	4770      	bx	lr
 8013cec:	08019754 	.word	0x08019754
 8013cf0:	2000a258 	.word	0x2000a258

08013cf4 <rmw_init>:
 8013cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013cf8:	b083      	sub	sp, #12
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	f000 80d4 	beq.w	8013ea8 <rmw_init+0x1b4>
 8013d00:	460e      	mov	r6, r1
 8013d02:	2900      	cmp	r1, #0
 8013d04:	f000 80d0 	beq.w	8013ea8 <rmw_init+0x1b4>
 8013d08:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f000 80cb 	beq.w	8013ea8 <rmw_init+0x1b4>
 8013d12:	4b77      	ldr	r3, [pc, #476]	@ (8013ef0 <rmw_init+0x1fc>)
 8013d14:	6880      	ldr	r0, [r0, #8]
 8013d16:	681f      	ldr	r7, [r3, #0]
 8013d18:	b128      	cbz	r0, 8013d26 <rmw_init+0x32>
 8013d1a:	4639      	mov	r1, r7
 8013d1c:	f7ec fa78 	bl	8000210 <strcmp>
 8013d20:	2800      	cmp	r0, #0
 8013d22:	f040 80d3 	bne.w	8013ecc <rmw_init+0x1d8>
 8013d26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013d2a:	4c72      	ldr	r4, [pc, #456]	@ (8013ef4 <rmw_init+0x200>)
 8013d2c:	4972      	ldr	r1, [pc, #456]	@ (8013ef8 <rmw_init+0x204>)
 8013d2e:	4873      	ldr	r0, [pc, #460]	@ (8013efc <rmw_init+0x208>)
 8013d30:	60b7      	str	r7, [r6, #8]
 8013d32:	e9c6 2300 	strd	r2, r3, [r6]
 8013d36:	68eb      	ldr	r3, [r5, #12]
 8013d38:	66b3      	str	r3, [r6, #104]	@ 0x68
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	f7f6 fe2c 	bl	800a998 <rmw_uxrce_init_session_memory>
 8013d40:	4620      	mov	r0, r4
 8013d42:	496f      	ldr	r1, [pc, #444]	@ (8013f00 <rmw_init+0x20c>)
 8013d44:	2204      	movs	r2, #4
 8013d46:	f7f6 fe67 	bl	800aa18 <rmw_uxrce_init_static_input_buffer_memory>
 8013d4a:	f04f 0800 	mov.w	r8, #0
 8013d4e:	486b      	ldr	r0, [pc, #428]	@ (8013efc <rmw_init+0x208>)
 8013d50:	f884 800d 	strb.w	r8, [r4, #13]
 8013d54:	f7ff fe52 	bl	80139fc <get_memory>
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	f000 80b2 	beq.w	8013ec2 <rmw_init+0x1ce>
 8013d5e:	6884      	ldr	r4, [r0, #8]
 8013d60:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8013d62:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013d64:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013d68:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013d6c:	9101      	str	r1, [sp, #4]
 8013d6e:	6a00      	ldr	r0, [r0, #32]
 8013d70:	9000      	str	r0, [sp, #0]
 8013d72:	f104 0910 	add.w	r9, r4, #16
 8013d76:	4661      	mov	r1, ip
 8013d78:	4648      	mov	r0, r9
 8013d7a:	f7f8 ff4d 	bl	800cc18 <uxr_set_custom_transport_callbacks>
 8013d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013d82:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8013d86:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8013d8a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013d8e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013d92:	495c      	ldr	r1, [pc, #368]	@ (8013f04 <rmw_init+0x210>)
 8013d94:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013d98:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013d9c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013da0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013da4:	4858      	ldr	r0, [pc, #352]	@ (8013f08 <rmw_init+0x214>)
 8013da6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013daa:	2201      	movs	r2, #1
 8013dac:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8013dae:	f7f6 fdd3 	bl	800a958 <rmw_uxrce_init_node_memory>
 8013db2:	4956      	ldr	r1, [pc, #344]	@ (8013f0c <rmw_init+0x218>)
 8013db4:	4856      	ldr	r0, [pc, #344]	@ (8013f10 <rmw_init+0x21c>)
 8013db6:	2205      	movs	r2, #5
 8013db8:	f7f6 fdae 	bl	800a918 <rmw_uxrce_init_subscription_memory>
 8013dbc:	4955      	ldr	r1, [pc, #340]	@ (8013f14 <rmw_init+0x220>)
 8013dbe:	4856      	ldr	r0, [pc, #344]	@ (8013f18 <rmw_init+0x224>)
 8013dc0:	220a      	movs	r2, #10
 8013dc2:	f7f6 fd89 	bl	800a8d8 <rmw_uxrce_init_publisher_memory>
 8013dc6:	4955      	ldr	r1, [pc, #340]	@ (8013f1c <rmw_init+0x228>)
 8013dc8:	4855      	ldr	r0, [pc, #340]	@ (8013f20 <rmw_init+0x22c>)
 8013dca:	2201      	movs	r2, #1
 8013dcc:	f7f6 fd44 	bl	800a858 <rmw_uxrce_init_service_memory>
 8013dd0:	4954      	ldr	r1, [pc, #336]	@ (8013f24 <rmw_init+0x230>)
 8013dd2:	4855      	ldr	r0, [pc, #340]	@ (8013f28 <rmw_init+0x234>)
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	f7f6 fd5f 	bl	800a898 <rmw_uxrce_init_client_memory>
 8013dda:	4954      	ldr	r1, [pc, #336]	@ (8013f2c <rmw_init+0x238>)
 8013ddc:	4854      	ldr	r0, [pc, #336]	@ (8013f30 <rmw_init+0x23c>)
 8013dde:	220f      	movs	r2, #15
 8013de0:	f7f6 fdfa 	bl	800a9d8 <rmw_uxrce_init_topic_memory>
 8013de4:	4953      	ldr	r1, [pc, #332]	@ (8013f34 <rmw_init+0x240>)
 8013de6:	4854      	ldr	r0, [pc, #336]	@ (8013f38 <rmw_init+0x244>)
 8013de8:	2203      	movs	r2, #3
 8013dea:	f7f6 fe35 	bl	800aa58 <rmw_uxrce_init_init_options_impl_memory>
 8013dee:	4953      	ldr	r1, [pc, #332]	@ (8013f3c <rmw_init+0x248>)
 8013df0:	4853      	ldr	r0, [pc, #332]	@ (8013f40 <rmw_init+0x24c>)
 8013df2:	2204      	movs	r2, #4
 8013df4:	f7f6 fe50 	bl	800aa98 <rmw_uxrce_init_wait_set_memory>
 8013df8:	4952      	ldr	r1, [pc, #328]	@ (8013f44 <rmw_init+0x250>)
 8013dfa:	4853      	ldr	r0, [pc, #332]	@ (8013f48 <rmw_init+0x254>)
 8013dfc:	2204      	movs	r2, #4
 8013dfe:	f7f6 fe6b 	bl	800aad8 <rmw_uxrce_init_guard_condition_memory>
 8013e02:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8013e04:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8013e06:	4642      	mov	r2, r8
 8013e08:	f7f6 fd0e 	bl	800a828 <rmw_uxrce_transport_init>
 8013e0c:	4607      	mov	r7, r0
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	d161      	bne.n	8013ed6 <rmw_init+0x1e2>
 8013e12:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013e14:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8013e20:	f7f9 f906 	bl	800d030 <uxr_init_session>
 8013e24:	4628      	mov	r0, r5
 8013e26:	4949      	ldr	r1, [pc, #292]	@ (8013f4c <rmw_init+0x258>)
 8013e28:	4622      	mov	r2, r4
 8013e2a:	f7f9 f925 	bl	800d078 <uxr_set_topic_callback>
 8013e2e:	4628      	mov	r0, r5
 8013e30:	4947      	ldr	r1, [pc, #284]	@ (8013f50 <rmw_init+0x25c>)
 8013e32:	463a      	mov	r2, r7
 8013e34:	f7f9 f91c 	bl	800d070 <uxr_set_status_callback>
 8013e38:	4628      	mov	r0, r5
 8013e3a:	4946      	ldr	r1, [pc, #280]	@ (8013f54 <rmw_init+0x260>)
 8013e3c:	463a      	mov	r2, r7
 8013e3e:	f7f9 f91f 	bl	800d080 <uxr_set_request_callback>
 8013e42:	4628      	mov	r0, r5
 8013e44:	4944      	ldr	r1, [pc, #272]	@ (8013f58 <rmw_init+0x264>)
 8013e46:	463a      	mov	r2, r7
 8013e48:	f7f9 f91e 	bl	800d088 <uxr_set_reply_callback>
 8013e4c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013e50:	2304      	movs	r3, #4
 8013e52:	0092      	lsls	r2, r2, #2
 8013e54:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013e58:	4628      	mov	r0, r5
 8013e5a:	f7f9 f943 	bl	800d0e4 <uxr_create_input_reliable_stream>
 8013e5e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013e62:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8013e66:	2304      	movs	r3, #4
 8013e68:	0092      	lsls	r2, r2, #2
 8013e6a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8013e6e:	4628      	mov	r0, r5
 8013e70:	f7f9 f920 	bl	800d0b4 <uxr_create_output_reliable_stream>
 8013e74:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013e78:	4628      	mov	r0, r5
 8013e7a:	f7f9 f92d 	bl	800d0d8 <uxr_create_input_best_effort_stream>
 8013e7e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8013e82:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013e86:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013e8a:	3114      	adds	r1, #20
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	f7f9 f8ff 	bl	800d090 <uxr_create_output_best_effort_stream>
 8013e92:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013e96:	4628      	mov	r0, r5
 8013e98:	f7f9 fe72 	bl	800db80 <uxr_create_session>
 8013e9c:	4605      	mov	r5, r0
 8013e9e:	b140      	cbz	r0, 8013eb2 <rmw_init+0x1be>
 8013ea0:	4638      	mov	r0, r7
 8013ea2:	b003      	add	sp, #12
 8013ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ea8:	270b      	movs	r7, #11
 8013eaa:	4638      	mov	r0, r7
 8013eac:	b003      	add	sp, #12
 8013eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eb2:	4648      	mov	r0, r9
 8013eb4:	f7f8 fef2 	bl	800cc9c <uxr_close_custom_transport>
 8013eb8:	4810      	ldr	r0, [pc, #64]	@ (8013efc <rmw_init+0x208>)
 8013eba:	4621      	mov	r1, r4
 8013ebc:	f7ff fdae 	bl	8013a1c <put_memory>
 8013ec0:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8013ec2:	2701      	movs	r7, #1
 8013ec4:	4638      	mov	r0, r7
 8013ec6:	b003      	add	sp, #12
 8013ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ecc:	270c      	movs	r7, #12
 8013ece:	4638      	mov	r0, r7
 8013ed0:	b003      	add	sp, #12
 8013ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ed6:	4648      	mov	r0, r9
 8013ed8:	f7f8 fee0 	bl	800cc9c <uxr_close_custom_transport>
 8013edc:	4807      	ldr	r0, [pc, #28]	@ (8013efc <rmw_init+0x208>)
 8013ede:	4621      	mov	r1, r4
 8013ee0:	f7ff fd9c 	bl	8013a1c <put_memory>
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8013eea:	b003      	add	sp, #12
 8013eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ef0:	08019754 	.word	0x08019754
 8013ef4:	2000c368 	.word	0x2000c368
 8013ef8:	2000d460 	.word	0x2000d460
 8013efc:	2000ea08 	.word	0x2000ea08
 8013f00:	2000a268 	.word	0x2000a268
 8013f04:	2000d3a8 	.word	0x2000d3a8
 8013f08:	2000d44c 	.word	0x2000d44c
 8013f0c:	2000c6e0 	.word	0x2000c6e0
 8013f10:	2000cb18 	.word	0x2000cb18
 8013f14:	2000cb28 	.word	0x2000cb28
 8013f18:	2000d398 	.word	0x2000d398
 8013f1c:	2000c608 	.word	0x2000c608
 8013f20:	2000c6d0 	.word	0x2000c6d0
 8013f24:	2000c530 	.word	0x2000c530
 8013f28:	2000c5f8 	.word	0x2000c5f8
 8013f2c:	2000c378 	.word	0x2000c378
 8013f30:	2000c51c 	.word	0x2000c51c
 8013f34:	2000a1d4 	.word	0x2000a1d4
 8013f38:	2000a258 	.word	0x2000a258
 8013f3c:	2000a154 	.word	0x2000a154
 8013f40:	2000a1c4 	.word	0x2000a1c4
 8013f44:	2000a0c4 	.word	0x2000a0c4
 8013f48:	2000a144 	.word	0x2000a144
 8013f4c:	08016d65 	.word	0x08016d65
 8013f50:	08016d5d 	.word	0x08016d5d
 8013f54:	08016dfd 	.word	0x08016dfd
 8013f58:	08016e99 	.word	0x08016e99

08013f5c <rmw_context_fini>:
 8013f5c:	4b17      	ldr	r3, [pc, #92]	@ (8013fbc <rmw_context_fini+0x60>)
 8013f5e:	b570      	push	{r4, r5, r6, lr}
 8013f60:	681c      	ldr	r4, [r3, #0]
 8013f62:	4605      	mov	r5, r0
 8013f64:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8013f66:	b33c      	cbz	r4, 8013fb8 <rmw_context_fini+0x5c>
 8013f68:	2600      	movs	r6, #0
 8013f6a:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 8013f6e:	691a      	ldr	r2, [r3, #16]
 8013f70:	4282      	cmp	r2, r0
 8013f72:	d018      	beq.n	8013fa6 <rmw_context_fini+0x4a>
 8013f74:	2c00      	cmp	r4, #0
 8013f76:	d1f8      	bne.n	8013f6a <rmw_context_fini+0xe>
 8013f78:	b188      	cbz	r0, 8013f9e <rmw_context_fini+0x42>
 8013f7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013f7e:	789b      	ldrb	r3, [r3, #2]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	bf14      	ite	ne
 8013f84:	210a      	movne	r1, #10
 8013f86:	2100      	moveq	r1, #0
 8013f88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013f8c:	f7f9 fdd0 	bl	800db30 <uxr_delete_session_retries>
 8013f90:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013f92:	f7f6 fdc1 	bl	800ab18 <rmw_uxrce_fini_session_memory>
 8013f96:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013f98:	3010      	adds	r0, #16
 8013f9a:	f7f8 fe7f 	bl	800cc9c <uxr_close_custom_transport>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	bd70      	pop	{r4, r5, r6, pc}
 8013fa6:	f103 0018 	add.w	r0, r3, #24
 8013faa:	f000 f911 	bl	80141d0 <rmw_destroy_node>
 8013fae:	4606      	mov	r6, r0
 8013fb0:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013fb2:	2c00      	cmp	r4, #0
 8013fb4:	d1d9      	bne.n	8013f6a <rmw_context_fini+0xe>
 8013fb6:	e7df      	b.n	8013f78 <rmw_context_fini+0x1c>
 8013fb8:	4626      	mov	r6, r4
 8013fba:	e7dd      	b.n	8013f78 <rmw_context_fini+0x1c>
 8013fbc:	2000d44c 	.word	0x2000d44c

08013fc0 <create_topic>:
 8013fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	4824      	ldr	r0, [pc, #144]	@ (801405c <create_topic+0x9c>)
 8013fca:	460f      	mov	r7, r1
 8013fcc:	4616      	mov	r6, r2
 8013fce:	f7ff fd15 	bl	80139fc <get_memory>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d03c      	beq.n	8014050 <create_topic+0x90>
 8013fd6:	6923      	ldr	r3, [r4, #16]
 8013fd8:	6885      	ldr	r5, [r0, #8]
 8013fda:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8014064 <create_topic+0xa4>
 8013fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013fe2:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8013fe6:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013fea:	1c42      	adds	r2, r0, #1
 8013fec:	2102      	movs	r1, #2
 8013fee:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013ff2:	f7f8 fe57 	bl	800cca4 <uxr_object_id>
 8013ff6:	223c      	movs	r2, #60	@ 0x3c
 8013ff8:	6128      	str	r0, [r5, #16]
 8013ffa:	4641      	mov	r1, r8
 8013ffc:	4638      	mov	r0, r7
 8013ffe:	f7f6 ff75 	bl	800aeec <generate_topic_name>
 8014002:	b310      	cbz	r0, 801404a <create_topic+0x8a>
 8014004:	4f16      	ldr	r7, [pc, #88]	@ (8014060 <create_topic+0xa0>)
 8014006:	4630      	mov	r0, r6
 8014008:	2264      	movs	r2, #100	@ 0x64
 801400a:	4639      	mov	r1, r7
 801400c:	f7f6 ff3e 	bl	800ae8c <generate_type_name>
 8014010:	b1d8      	cbz	r0, 801404a <create_topic+0x8a>
 8014012:	6920      	ldr	r0, [r4, #16]
 8014014:	2306      	movs	r3, #6
 8014016:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801401a:	f8cd 8000 	str.w	r8, [sp]
 801401e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014022:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014026:	6811      	ldr	r1, [r2, #0]
 8014028:	6963      	ldr	r3, [r4, #20]
 801402a:	692a      	ldr	r2, [r5, #16]
 801402c:	f7f8 fc1c 	bl	800c868 <uxr_buffer_create_topic_bin>
 8014030:	4602      	mov	r2, r0
 8014032:	6920      	ldr	r0, [r4, #16]
 8014034:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014038:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801403c:	f7f6 feea 	bl	800ae14 <run_xrce_session>
 8014040:	b118      	cbz	r0, 801404a <create_topic+0x8a>
 8014042:	4628      	mov	r0, r5
 8014044:	b004      	add	sp, #16
 8014046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801404a:	4628      	mov	r0, r5
 801404c:	f7f6 fdda 	bl	800ac04 <rmw_uxrce_fini_topic_memory>
 8014050:	2500      	movs	r5, #0
 8014052:	4628      	mov	r0, r5
 8014054:	b004      	add	sp, #16
 8014056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801405a:	bf00      	nop
 801405c:	2000c51c 	.word	0x2000c51c
 8014060:	2000ea38 	.word	0x2000ea38
 8014064:	2000ea9c 	.word	0x2000ea9c

08014068 <destroy_topic>:
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	6984      	ldr	r4, [r0, #24]
 801406c:	b1d4      	cbz	r4, 80140a4 <destroy_topic+0x3c>
 801406e:	4605      	mov	r5, r0
 8014070:	6920      	ldr	r0, [r4, #16]
 8014072:	692a      	ldr	r2, [r5, #16]
 8014074:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014078:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801407c:	6819      	ldr	r1, [r3, #0]
 801407e:	f7f8 fb77 	bl	800c770 <uxr_buffer_delete_entity>
 8014082:	4602      	mov	r2, r0
 8014084:	6920      	ldr	r0, [r4, #16]
 8014086:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801408a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801408e:	f7f6 fec1 	bl	800ae14 <run_xrce_session>
 8014092:	f080 0401 	eor.w	r4, r0, #1
 8014096:	b2e4      	uxtb	r4, r4
 8014098:	4628      	mov	r0, r5
 801409a:	0064      	lsls	r4, r4, #1
 801409c:	f7f6 fdb2 	bl	800ac04 <rmw_uxrce_fini_topic_memory>
 80140a0:	4620      	mov	r0, r4
 80140a2:	bd38      	pop	{r3, r4, r5, pc}
 80140a4:	2401      	movs	r4, #1
 80140a6:	4620      	mov	r0, r4
 80140a8:	bd38      	pop	{r3, r4, r5, pc}
 80140aa:	bf00      	nop

080140ac <create_node>:
 80140ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140b0:	b083      	sub	sp, #12
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d063      	beq.n	801417e <create_node+0xd2>
 80140b6:	4606      	mov	r6, r0
 80140b8:	4836      	ldr	r0, [pc, #216]	@ (8014194 <create_node+0xe8>)
 80140ba:	460f      	mov	r7, r1
 80140bc:	4690      	mov	r8, r2
 80140be:	461d      	mov	r5, r3
 80140c0:	f7ff fc9c 	bl	80139fc <get_memory>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d05a      	beq.n	801417e <create_node+0xd2>
 80140c8:	6884      	ldr	r4, [r0, #8]
 80140ca:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80140cc:	6123      	str	r3, [r4, #16]
 80140ce:	f7ff fd1b 	bl	8013b08 <rmw_get_implementation_identifier>
 80140d2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80140d6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80140da:	f8c4 9020 	str.w	r9, [r4, #32]
 80140de:	4630      	mov	r0, r6
 80140e0:	f7ec f8f6 	bl	80002d0 <strlen>
 80140e4:	1c42      	adds	r2, r0, #1
 80140e6:	2a3c      	cmp	r2, #60	@ 0x3c
 80140e8:	f104 0518 	add.w	r5, r4, #24
 80140ec:	d844      	bhi.n	8014178 <create_node+0xcc>
 80140ee:	4648      	mov	r0, r9
 80140f0:	4631      	mov	r1, r6
 80140f2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80140f6:	f003 fd6c 	bl	8017bd2 <memcpy>
 80140fa:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80140fe:	4638      	mov	r0, r7
 8014100:	f7ec f8e6 	bl	80002d0 <strlen>
 8014104:	1c42      	adds	r2, r0, #1
 8014106:	2a3c      	cmp	r2, #60	@ 0x3c
 8014108:	d836      	bhi.n	8014178 <create_node+0xcc>
 801410a:	4639      	mov	r1, r7
 801410c:	4648      	mov	r0, r9
 801410e:	f003 fd60 	bl	8017bd2 <memcpy>
 8014112:	6923      	ldr	r3, [r4, #16]
 8014114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014118:	2101      	movs	r1, #1
 801411a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801411e:	1842      	adds	r2, r0, r1
 8014120:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8014124:	f7f8 fdbe 	bl	800cca4 <uxr_object_id>
 8014128:	6160      	str	r0, [r4, #20]
 801412a:	783b      	ldrb	r3, [r7, #0]
 801412c:	2b2f      	cmp	r3, #47	@ 0x2f
 801412e:	d128      	bne.n	8014182 <create_node+0xd6>
 8014130:	787b      	ldrb	r3, [r7, #1]
 8014132:	bb33      	cbnz	r3, 8014182 <create_node+0xd6>
 8014134:	4a18      	ldr	r2, [pc, #96]	@ (8014198 <create_node+0xec>)
 8014136:	4819      	ldr	r0, [pc, #100]	@ (801419c <create_node+0xf0>)
 8014138:	4633      	mov	r3, r6
 801413a:	213c      	movs	r1, #60	@ 0x3c
 801413c:	f003 fafa 	bl	8017734 <sniprintf>
 8014140:	6920      	ldr	r0, [r4, #16]
 8014142:	4916      	ldr	r1, [pc, #88]	@ (801419c <create_node+0xf0>)
 8014144:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014148:	9100      	str	r1, [sp, #0]
 801414a:	2106      	movs	r1, #6
 801414c:	9101      	str	r1, [sp, #4]
 801414e:	6811      	ldr	r1, [r2, #0]
 8014150:	6962      	ldr	r2, [r4, #20]
 8014152:	fa1f f388 	uxth.w	r3, r8
 8014156:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801415a:	f7f8 fb53 	bl	800c804 <uxr_buffer_create_participant_bin>
 801415e:	4602      	mov	r2, r0
 8014160:	6920      	ldr	r0, [r4, #16]
 8014162:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014166:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801416a:	f7f6 fe53 	bl	800ae14 <run_xrce_session>
 801416e:	b118      	cbz	r0, 8014178 <create_node+0xcc>
 8014170:	4628      	mov	r0, r5
 8014172:	b003      	add	sp, #12
 8014174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014178:	4628      	mov	r0, r5
 801417a:	f7f6 fcd3 	bl	800ab24 <rmw_uxrce_fini_node_memory>
 801417e:	2500      	movs	r5, #0
 8014180:	e7f6      	b.n	8014170 <create_node+0xc4>
 8014182:	4a07      	ldr	r2, [pc, #28]	@ (80141a0 <create_node+0xf4>)
 8014184:	9600      	str	r6, [sp, #0]
 8014186:	463b      	mov	r3, r7
 8014188:	213c      	movs	r1, #60	@ 0x3c
 801418a:	4804      	ldr	r0, [pc, #16]	@ (801419c <create_node+0xf0>)
 801418c:	f003 fad2 	bl	8017734 <sniprintf>
 8014190:	e7d6      	b.n	8014140 <create_node+0x94>
 8014192:	bf00      	nop
 8014194:	2000d44c 	.word	0x2000d44c
 8014198:	08018b14 	.word	0x08018b14
 801419c:	2000ead8 	.word	0x2000ead8
 80141a0:	08018c80 	.word	0x08018c80

080141a4 <rmw_create_node>:
 80141a4:	b191      	cbz	r1, 80141cc <rmw_create_node+0x28>
 80141a6:	b410      	push	{r4}
 80141a8:	4614      	mov	r4, r2
 80141aa:	780a      	ldrb	r2, [r1, #0]
 80141ac:	4603      	mov	r3, r0
 80141ae:	4608      	mov	r0, r1
 80141b0:	b142      	cbz	r2, 80141c4 <rmw_create_node+0x20>
 80141b2:	b13c      	cbz	r4, 80141c4 <rmw_create_node+0x20>
 80141b4:	7822      	ldrb	r2, [r4, #0]
 80141b6:	b12a      	cbz	r2, 80141c4 <rmw_create_node+0x20>
 80141b8:	4621      	mov	r1, r4
 80141ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80141bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141c0:	f7ff bf74 	b.w	80140ac <create_node>
 80141c4:	2000      	movs	r0, #0
 80141c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141ca:	4770      	bx	lr
 80141cc:	2000      	movs	r0, #0
 80141ce:	4770      	bx	lr

080141d0 <rmw_destroy_node>:
 80141d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141d2:	b328      	cbz	r0, 8014220 <rmw_destroy_node+0x50>
 80141d4:	4607      	mov	r7, r0
 80141d6:	6800      	ldr	r0, [r0, #0]
 80141d8:	b120      	cbz	r0, 80141e4 <rmw_destroy_node+0x14>
 80141da:	4b36      	ldr	r3, [pc, #216]	@ (80142b4 <rmw_destroy_node+0xe4>)
 80141dc:	6819      	ldr	r1, [r3, #0]
 80141de:	f7ec f817 	bl	8000210 <strcmp>
 80141e2:	b9e8      	cbnz	r0, 8014220 <rmw_destroy_node+0x50>
 80141e4:	687d      	ldr	r5, [r7, #4]
 80141e6:	b1dd      	cbz	r5, 8014220 <rmw_destroy_node+0x50>
 80141e8:	4b33      	ldr	r3, [pc, #204]	@ (80142b8 <rmw_destroy_node+0xe8>)
 80141ea:	681c      	ldr	r4, [r3, #0]
 80141ec:	2c00      	cmp	r4, #0
 80141ee:	d05f      	beq.n	80142b0 <rmw_destroy_node+0xe0>
 80141f0:	2600      	movs	r6, #0
 80141f2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80141f6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80141fa:	429d      	cmp	r5, r3
 80141fc:	d013      	beq.n	8014226 <rmw_destroy_node+0x56>
 80141fe:	2c00      	cmp	r4, #0
 8014200:	d1f7      	bne.n	80141f2 <rmw_destroy_node+0x22>
 8014202:	4b2e      	ldr	r3, [pc, #184]	@ (80142bc <rmw_destroy_node+0xec>)
 8014204:	681c      	ldr	r4, [r3, #0]
 8014206:	b1c4      	cbz	r4, 801423a <rmw_destroy_node+0x6a>
 8014208:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801420c:	6a0b      	ldr	r3, [r1, #32]
 801420e:	429d      	cmp	r5, r3
 8014210:	d1f9      	bne.n	8014206 <rmw_destroy_node+0x36>
 8014212:	317c      	adds	r1, #124	@ 0x7c
 8014214:	4638      	mov	r0, r7
 8014216:	f000 fad9 	bl	80147cc <rmw_destroy_subscription>
 801421a:	2801      	cmp	r0, #1
 801421c:	4606      	mov	r6, r0
 801421e:	d1f2      	bne.n	8014206 <rmw_destroy_node+0x36>
 8014220:	2601      	movs	r6, #1
 8014222:	4630      	mov	r0, r6
 8014224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014226:	3184      	adds	r1, #132	@ 0x84
 8014228:	4638      	mov	r0, r7
 801422a:	f7f6 faab 	bl	800a784 <rmw_destroy_publisher>
 801422e:	2801      	cmp	r0, #1
 8014230:	4606      	mov	r6, r0
 8014232:	d0f5      	beq.n	8014220 <rmw_destroy_node+0x50>
 8014234:	2c00      	cmp	r4, #0
 8014236:	d1dc      	bne.n	80141f2 <rmw_destroy_node+0x22>
 8014238:	e7e3      	b.n	8014202 <rmw_destroy_node+0x32>
 801423a:	4b21      	ldr	r3, [pc, #132]	@ (80142c0 <rmw_destroy_node+0xf0>)
 801423c:	681c      	ldr	r4, [r3, #0]
 801423e:	b16c      	cbz	r4, 801425c <rmw_destroy_node+0x8c>
 8014240:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014244:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014246:	429d      	cmp	r5, r3
 8014248:	d1f9      	bne.n	801423e <rmw_destroy_node+0x6e>
 801424a:	317c      	adds	r1, #124	@ 0x7c
 801424c:	4638      	mov	r0, r7
 801424e:	f000 f98b 	bl	8014568 <rmw_destroy_service>
 8014252:	2801      	cmp	r0, #1
 8014254:	4606      	mov	r6, r0
 8014256:	d0e3      	beq.n	8014220 <rmw_destroy_node+0x50>
 8014258:	2c00      	cmp	r4, #0
 801425a:	d1f1      	bne.n	8014240 <rmw_destroy_node+0x70>
 801425c:	4b19      	ldr	r3, [pc, #100]	@ (80142c4 <rmw_destroy_node+0xf4>)
 801425e:	681c      	ldr	r4, [r3, #0]
 8014260:	b16c      	cbz	r4, 801427e <rmw_destroy_node+0xae>
 8014262:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014266:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014268:	429d      	cmp	r5, r3
 801426a:	d1f9      	bne.n	8014260 <rmw_destroy_node+0x90>
 801426c:	317c      	adds	r1, #124	@ 0x7c
 801426e:	4638      	mov	r0, r7
 8014270:	f7ff fbe8 	bl	8013a44 <rmw_destroy_client>
 8014274:	2801      	cmp	r0, #1
 8014276:	4606      	mov	r6, r0
 8014278:	d0d2      	beq.n	8014220 <rmw_destroy_node+0x50>
 801427a:	2c00      	cmp	r4, #0
 801427c:	d1f1      	bne.n	8014262 <rmw_destroy_node+0x92>
 801427e:	6928      	ldr	r0, [r5, #16]
 8014280:	696a      	ldr	r2, [r5, #20]
 8014282:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014286:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801428a:	6819      	ldr	r1, [r3, #0]
 801428c:	f7f8 fa70 	bl	800c770 <uxr_buffer_delete_entity>
 8014290:	4602      	mov	r2, r0
 8014292:	6928      	ldr	r0, [r5, #16]
 8014294:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014298:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801429c:	f7f6 fdba 	bl	800ae14 <run_xrce_session>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	bf08      	it	eq
 80142a4:	2602      	moveq	r6, #2
 80142a6:	4638      	mov	r0, r7
 80142a8:	f7f6 fc3c 	bl	800ab24 <rmw_uxrce_fini_node_memory>
 80142ac:	4630      	mov	r0, r6
 80142ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142b0:	4626      	mov	r6, r4
 80142b2:	e7a6      	b.n	8014202 <rmw_destroy_node+0x32>
 80142b4:	08019754 	.word	0x08019754
 80142b8:	2000d398 	.word	0x2000d398
 80142bc:	2000cb18 	.word	0x2000cb18
 80142c0:	2000c6d0 	.word	0x2000c6d0
 80142c4:	2000c5f8 	.word	0x2000c5f8

080142c8 <rmw_node_get_graph_guard_condition>:
 80142c8:	6843      	ldr	r3, [r0, #4]
 80142ca:	6918      	ldr	r0, [r3, #16]
 80142cc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80142d0:	4770      	bx	lr
 80142d2:	bf00      	nop

080142d4 <rmw_send_request>:
 80142d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142d8:	4604      	mov	r4, r0
 80142da:	6800      	ldr	r0, [r0, #0]
 80142dc:	b08a      	sub	sp, #40	@ 0x28
 80142de:	460e      	mov	r6, r1
 80142e0:	4615      	mov	r5, r2
 80142e2:	b128      	cbz	r0, 80142f0 <rmw_send_request+0x1c>
 80142e4:	4b1e      	ldr	r3, [pc, #120]	@ (8014360 <rmw_send_request+0x8c>)
 80142e6:	6819      	ldr	r1, [r3, #0]
 80142e8:	f7eb ff92 	bl	8000210 <strcmp>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d133      	bne.n	8014358 <rmw_send_request+0x84>
 80142f0:	6864      	ldr	r4, [r4, #4]
 80142f2:	6963      	ldr	r3, [r4, #20]
 80142f4:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 80142f6:	689b      	ldr	r3, [r3, #8]
 80142f8:	4798      	blx	r3
 80142fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80142fe:	4630      	mov	r0, r6
 8014300:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014304:	4798      	blx	r3
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	9000      	str	r0, [sp, #0]
 801430a:	6922      	ldr	r2, [r4, #16]
 801430c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801430e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014312:	ab02      	add	r3, sp, #8
 8014314:	f7fa fd06 	bl	800ed24 <uxr_prepare_output_stream>
 8014318:	2300      	movs	r3, #0
 801431a:	6028      	str	r0, [r5, #0]
 801431c:	606b      	str	r3, [r5, #4]
 801431e:	b190      	cbz	r0, 8014346 <rmw_send_request+0x72>
 8014320:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014324:	a902      	add	r1, sp, #8
 8014326:	4630      	mov	r0, r6
 8014328:	4798      	blx	r3
 801432a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801432e:	6938      	ldr	r0, [r7, #16]
 8014330:	2b01      	cmp	r3, #1
 8014332:	d00c      	beq.n	801434e <rmw_send_request+0x7a>
 8014334:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014336:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801433a:	f7f9 fa81 	bl	800d840 <uxr_run_session_until_confirm_delivery>
 801433e:	2000      	movs	r0, #0
 8014340:	b00a      	add	sp, #40	@ 0x28
 8014342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014346:	2001      	movs	r0, #1
 8014348:	b00a      	add	sp, #40	@ 0x28
 801434a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801434e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014352:	f7f8 fedd 	bl	800d110 <uxr_flash_output_streams>
 8014356:	e7f2      	b.n	801433e <rmw_send_request+0x6a>
 8014358:	200c      	movs	r0, #12
 801435a:	b00a      	add	sp, #40	@ 0x28
 801435c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014360:	08019754 	.word	0x08019754

08014364 <rmw_take_request>:
 8014364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014368:	4605      	mov	r5, r0
 801436a:	6800      	ldr	r0, [r0, #0]
 801436c:	b089      	sub	sp, #36	@ 0x24
 801436e:	460c      	mov	r4, r1
 8014370:	4690      	mov	r8, r2
 8014372:	461e      	mov	r6, r3
 8014374:	b128      	cbz	r0, 8014382 <rmw_take_request+0x1e>
 8014376:	4b28      	ldr	r3, [pc, #160]	@ (8014418 <rmw_take_request+0xb4>)
 8014378:	6819      	ldr	r1, [r3, #0]
 801437a:	f7eb ff49 	bl	8000210 <strcmp>
 801437e:	2800      	cmp	r0, #0
 8014380:	d146      	bne.n	8014410 <rmw_take_request+0xac>
 8014382:	b10e      	cbz	r6, 8014388 <rmw_take_request+0x24>
 8014384:	2300      	movs	r3, #0
 8014386:	7033      	strb	r3, [r6, #0]
 8014388:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801438c:	f7f6 fcc4 	bl	800ad18 <rmw_uxrce_clean_expired_static_input_buffer>
 8014390:	4648      	mov	r0, r9
 8014392:	f7f6 fc9b 	bl	800accc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014396:	4607      	mov	r7, r0
 8014398:	b3b0      	cbz	r0, 8014408 <rmw_take_request+0xa4>
 801439a:	6885      	ldr	r5, [r0, #8]
 801439c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80143a0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80143a4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80143a8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80143ac:	7423      	strb	r3, [r4, #16]
 80143ae:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80143b2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80143b6:	74e2      	strb	r2, [r4, #19]
 80143b8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80143bc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80143c0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80143c4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80143c8:	61e1      	str	r1, [r4, #28]
 80143ca:	6162      	str	r2, [r4, #20]
 80143cc:	61a3      	str	r3, [r4, #24]
 80143ce:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80143d2:	689b      	ldr	r3, [r3, #8]
 80143d4:	4798      	blx	r3
 80143d6:	6844      	ldr	r4, [r0, #4]
 80143d8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80143dc:	f105 0110 	add.w	r1, r5, #16
 80143e0:	4668      	mov	r0, sp
 80143e2:	f7f8 f8cb 	bl	800c57c <ucdr_init_buffer>
 80143e6:	68e3      	ldr	r3, [r4, #12]
 80143e8:	4641      	mov	r1, r8
 80143ea:	4668      	mov	r0, sp
 80143ec:	4798      	blx	r3
 80143ee:	4639      	mov	r1, r7
 80143f0:	4604      	mov	r4, r0
 80143f2:	480a      	ldr	r0, [pc, #40]	@ (801441c <rmw_take_request+0xb8>)
 80143f4:	f7ff fb12 	bl	8013a1c <put_memory>
 80143f8:	b106      	cbz	r6, 80143fc <rmw_take_request+0x98>
 80143fa:	7034      	strb	r4, [r6, #0]
 80143fc:	f084 0001 	eor.w	r0, r4, #1
 8014400:	b2c0      	uxtb	r0, r0
 8014402:	b009      	add	sp, #36	@ 0x24
 8014404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014408:	2001      	movs	r0, #1
 801440a:	b009      	add	sp, #36	@ 0x24
 801440c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014410:	200c      	movs	r0, #12
 8014412:	b009      	add	sp, #36	@ 0x24
 8014414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014418:	08019754 	.word	0x08019754
 801441c:	2000c368 	.word	0x2000c368

08014420 <rmw_send_response>:
 8014420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014422:	4605      	mov	r5, r0
 8014424:	6800      	ldr	r0, [r0, #0]
 8014426:	b091      	sub	sp, #68	@ 0x44
 8014428:	460c      	mov	r4, r1
 801442a:	4616      	mov	r6, r2
 801442c:	b128      	cbz	r0, 801443a <rmw_send_response+0x1a>
 801442e:	4b28      	ldr	r3, [pc, #160]	@ (80144d0 <rmw_send_response+0xb0>)
 8014430:	6819      	ldr	r1, [r3, #0]
 8014432:	f7eb feed 	bl	8000210 <strcmp>
 8014436:	2800      	cmp	r0, #0
 8014438:	d141      	bne.n	80144be <rmw_send_response+0x9e>
 801443a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801443e:	9306      	str	r3, [sp, #24]
 8014440:	4623      	mov	r3, r4
 8014442:	9207      	str	r2, [sp, #28]
 8014444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014448:	686d      	ldr	r5, [r5, #4]
 801444a:	789b      	ldrb	r3, [r3, #2]
 801444c:	68a1      	ldr	r1, [r4, #8]
 801444e:	f88d 2017 	strb.w	r2, [sp, #23]
 8014452:	f88d 3016 	strb.w	r3, [sp, #22]
 8014456:	68e2      	ldr	r2, [r4, #12]
 8014458:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801445c:	6860      	ldr	r0, [r4, #4]
 801445e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014462:	ab02      	add	r3, sp, #8
 8014464:	c307      	stmia	r3!, {r0, r1, r2}
 8014466:	696b      	ldr	r3, [r5, #20]
 8014468:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	4798      	blx	r3
 801446e:	6844      	ldr	r4, [r0, #4]
 8014470:	4630      	mov	r0, r6
 8014472:	6923      	ldr	r3, [r4, #16]
 8014474:	4798      	blx	r3
 8014476:	f100 0318 	add.w	r3, r0, #24
 801447a:	6938      	ldr	r0, [r7, #16]
 801447c:	9300      	str	r3, [sp, #0]
 801447e:	692a      	ldr	r2, [r5, #16]
 8014480:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014482:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014486:	ab08      	add	r3, sp, #32
 8014488:	f7fa fc4c 	bl	800ed24 <uxr_prepare_output_stream>
 801448c:	b910      	cbnz	r0, 8014494 <rmw_send_response+0x74>
 801448e:	2001      	movs	r0, #1
 8014490:	b011      	add	sp, #68	@ 0x44
 8014492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014494:	a902      	add	r1, sp, #8
 8014496:	a808      	add	r0, sp, #32
 8014498:	f7fb fd68 	bl	800ff6c <uxr_serialize_SampleIdentity>
 801449c:	68a3      	ldr	r3, [r4, #8]
 801449e:	a908      	add	r1, sp, #32
 80144a0:	4630      	mov	r0, r6
 80144a2:	4798      	blx	r3
 80144a4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80144a8:	6938      	ldr	r0, [r7, #16]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d00a      	beq.n	80144c4 <rmw_send_response+0xa4>
 80144ae:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80144b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80144b4:	f7f9 f9c4 	bl	800d840 <uxr_run_session_until_confirm_delivery>
 80144b8:	2000      	movs	r0, #0
 80144ba:	b011      	add	sp, #68	@ 0x44
 80144bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144be:	200c      	movs	r0, #12
 80144c0:	b011      	add	sp, #68	@ 0x44
 80144c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80144c8:	f7f8 fe22 	bl	800d110 <uxr_flash_output_streams>
 80144cc:	e7f4      	b.n	80144b8 <rmw_send_response+0x98>
 80144ce:	bf00      	nop
 80144d0:	08019754 	.word	0x08019754

080144d4 <rmw_take_response>:
 80144d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d8:	4604      	mov	r4, r0
 80144da:	6800      	ldr	r0, [r0, #0]
 80144dc:	b088      	sub	sp, #32
 80144de:	4688      	mov	r8, r1
 80144e0:	4617      	mov	r7, r2
 80144e2:	461d      	mov	r5, r3
 80144e4:	b120      	cbz	r0, 80144f0 <rmw_take_response+0x1c>
 80144e6:	4b1e      	ldr	r3, [pc, #120]	@ (8014560 <rmw_take_response+0x8c>)
 80144e8:	6819      	ldr	r1, [r3, #0]
 80144ea:	f7eb fe91 	bl	8000210 <strcmp>
 80144ee:	bb78      	cbnz	r0, 8014550 <rmw_take_response+0x7c>
 80144f0:	b10d      	cbz	r5, 80144f6 <rmw_take_response+0x22>
 80144f2:	2300      	movs	r3, #0
 80144f4:	702b      	strb	r3, [r5, #0]
 80144f6:	6864      	ldr	r4, [r4, #4]
 80144f8:	f7f6 fc0e 	bl	800ad18 <rmw_uxrce_clean_expired_static_input_buffer>
 80144fc:	4620      	mov	r0, r4
 80144fe:	f7f6 fbe5 	bl	800accc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014502:	4606      	mov	r6, r0
 8014504:	b340      	cbz	r0, 8014558 <rmw_take_response+0x84>
 8014506:	6963      	ldr	r3, [r4, #20]
 8014508:	6884      	ldr	r4, [r0, #8]
 801450a:	68db      	ldr	r3, [r3, #12]
 801450c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014510:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014514:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014518:	4798      	blx	r3
 801451a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801451e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014522:	f104 0110 	add.w	r1, r4, #16
 8014526:	4668      	mov	r0, sp
 8014528:	f7f8 f828 	bl	800c57c <ucdr_init_buffer>
 801452c:	4639      	mov	r1, r7
 801452e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014532:	4668      	mov	r0, sp
 8014534:	4798      	blx	r3
 8014536:	4631      	mov	r1, r6
 8014538:	4604      	mov	r4, r0
 801453a:	480a      	ldr	r0, [pc, #40]	@ (8014564 <rmw_take_response+0x90>)
 801453c:	f7ff fa6e 	bl	8013a1c <put_memory>
 8014540:	b105      	cbz	r5, 8014544 <rmw_take_response+0x70>
 8014542:	702c      	strb	r4, [r5, #0]
 8014544:	f084 0001 	eor.w	r0, r4, #1
 8014548:	b2c0      	uxtb	r0, r0
 801454a:	b008      	add	sp, #32
 801454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014550:	200c      	movs	r0, #12
 8014552:	b008      	add	sp, #32
 8014554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014558:	2001      	movs	r0, #1
 801455a:	b008      	add	sp, #32
 801455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014560:	08019754 	.word	0x08019754
 8014564:	2000c368 	.word	0x2000c368

08014568 <rmw_destroy_service>:
 8014568:	b570      	push	{r4, r5, r6, lr}
 801456a:	b128      	cbz	r0, 8014578 <rmw_destroy_service+0x10>
 801456c:	4604      	mov	r4, r0
 801456e:	6800      	ldr	r0, [r0, #0]
 8014570:	460d      	mov	r5, r1
 8014572:	f7f6 fcd5 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 8014576:	b910      	cbnz	r0, 801457e <rmw_destroy_service+0x16>
 8014578:	2401      	movs	r4, #1
 801457a:	4620      	mov	r0, r4
 801457c:	bd70      	pop	{r4, r5, r6, pc}
 801457e:	6863      	ldr	r3, [r4, #4]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d0f9      	beq.n	8014578 <rmw_destroy_service+0x10>
 8014584:	2d00      	cmp	r5, #0
 8014586:	d0f7      	beq.n	8014578 <rmw_destroy_service+0x10>
 8014588:	6828      	ldr	r0, [r5, #0]
 801458a:	f7f6 fcc9 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 801458e:	2800      	cmp	r0, #0
 8014590:	d0f2      	beq.n	8014578 <rmw_destroy_service+0x10>
 8014592:	686e      	ldr	r6, [r5, #4]
 8014594:	2e00      	cmp	r6, #0
 8014596:	d0ef      	beq.n	8014578 <rmw_destroy_service+0x10>
 8014598:	6864      	ldr	r4, [r4, #4]
 801459a:	6932      	ldr	r2, [r6, #16]
 801459c:	6920      	ldr	r0, [r4, #16]
 801459e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80145a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80145a6:	6819      	ldr	r1, [r3, #0]
 80145a8:	f001 fd1a 	bl	8015fe0 <uxr_buffer_cancel_data>
 80145ac:	4602      	mov	r2, r0
 80145ae:	6920      	ldr	r0, [r4, #16]
 80145b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80145b4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80145b8:	f7f6 fc2c 	bl	800ae14 <run_xrce_session>
 80145bc:	6920      	ldr	r0, [r4, #16]
 80145be:	6932      	ldr	r2, [r6, #16]
 80145c0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80145c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80145c8:	6819      	ldr	r1, [r3, #0]
 80145ca:	f7f8 f8d1 	bl	800c770 <uxr_buffer_delete_entity>
 80145ce:	4602      	mov	r2, r0
 80145d0:	6920      	ldr	r0, [r4, #16]
 80145d2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80145d6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80145da:	f7f6 fc1b 	bl	800ae14 <run_xrce_session>
 80145de:	f080 0401 	eor.w	r4, r0, #1
 80145e2:	b2e4      	uxtb	r4, r4
 80145e4:	4628      	mov	r0, r5
 80145e6:	0064      	lsls	r4, r4, #1
 80145e8:	f7f6 fae0 	bl	800abac <rmw_uxrce_fini_service_memory>
 80145ec:	e7c5      	b.n	801457a <rmw_destroy_service+0x12>
 80145ee:	bf00      	nop

080145f0 <rmw_create_subscription>:
 80145f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f4:	b08d      	sub	sp, #52	@ 0x34
 80145f6:	2800      	cmp	r0, #0
 80145f8:	f000 80d1 	beq.w	801479e <rmw_create_subscription+0x1ae>
 80145fc:	460f      	mov	r7, r1
 80145fe:	2900      	cmp	r1, #0
 8014600:	f000 80cd 	beq.w	801479e <rmw_create_subscription+0x1ae>
 8014604:	4604      	mov	r4, r0
 8014606:	6800      	ldr	r0, [r0, #0]
 8014608:	4615      	mov	r5, r2
 801460a:	461e      	mov	r6, r3
 801460c:	f7f6 fc88 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 8014610:	2800      	cmp	r0, #0
 8014612:	f000 80c4 	beq.w	801479e <rmw_create_subscription+0x1ae>
 8014616:	2d00      	cmp	r5, #0
 8014618:	f000 80c1 	beq.w	801479e <rmw_create_subscription+0x1ae>
 801461c:	782b      	ldrb	r3, [r5, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	f000 80bd 	beq.w	801479e <rmw_create_subscription+0x1ae>
 8014624:	2e00      	cmp	r6, #0
 8014626:	f000 80ba 	beq.w	801479e <rmw_create_subscription+0x1ae>
 801462a:	485e      	ldr	r0, [pc, #376]	@ (80147a4 <rmw_create_subscription+0x1b4>)
 801462c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014630:	f7ff f9e4 	bl	80139fc <get_memory>
 8014634:	2800      	cmp	r0, #0
 8014636:	f000 80b2 	beq.w	801479e <rmw_create_subscription+0x1ae>
 801463a:	6884      	ldr	r4, [r0, #8]
 801463c:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8014640:	f7ff fa62 	bl	8013b08 <rmw_get_implementation_identifier>
 8014644:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8014648:	67e0      	str	r0, [r4, #124]	@ 0x7c
 801464a:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 801464e:	4628      	mov	r0, r5
 8014650:	f7eb fe3e 	bl	80002d0 <strlen>
 8014654:	3001      	adds	r0, #1
 8014656:	283c      	cmp	r0, #60	@ 0x3c
 8014658:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 801465c:	f200 8098 	bhi.w	8014790 <rmw_create_subscription+0x1a0>
 8014660:	4a51      	ldr	r2, [pc, #324]	@ (80147a8 <rmw_create_subscription+0x1b8>)
 8014662:	462b      	mov	r3, r5
 8014664:	213c      	movs	r1, #60	@ 0x3c
 8014666:	4650      	mov	r0, sl
 8014668:	f003 f864 	bl	8017734 <sniprintf>
 801466c:	4631      	mov	r1, r6
 801466e:	f8c4 9020 	str.w	r9, [r4, #32]
 8014672:	2250      	movs	r2, #80	@ 0x50
 8014674:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014678:	f003 faab 	bl	8017bd2 <memcpy>
 801467c:	494b      	ldr	r1, [pc, #300]	@ (80147ac <rmw_create_subscription+0x1bc>)
 801467e:	4638      	mov	r0, r7
 8014680:	f7f6 fc5c 	bl	800af3c <get_message_typesupport_handle>
 8014684:	2800      	cmp	r0, #0
 8014686:	f000 8083 	beq.w	8014790 <rmw_create_subscription+0x1a0>
 801468a:	6842      	ldr	r2, [r0, #4]
 801468c:	61a2      	str	r2, [r4, #24]
 801468e:	2a00      	cmp	r2, #0
 8014690:	d07e      	beq.n	8014790 <rmw_create_subscription+0x1a0>
 8014692:	4629      	mov	r1, r5
 8014694:	4633      	mov	r3, r6
 8014696:	4648      	mov	r0, r9
 8014698:	f7ff fc92 	bl	8013fc0 <create_topic>
 801469c:	61e0      	str	r0, [r4, #28]
 801469e:	2800      	cmp	r0, #0
 80146a0:	d07a      	beq.n	8014798 <rmw_create_subscription+0x1a8>
 80146a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80146a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80146aa:	2104      	movs	r1, #4
 80146ac:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80146b0:	1c42      	adds	r2, r0, #1
 80146b2:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80146b6:	f7f8 faf5 	bl	800cca4 <uxr_object_id>
 80146ba:	6120      	str	r0, [r4, #16]
 80146bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80146c0:	2506      	movs	r5, #6
 80146c2:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80146c6:	9500      	str	r5, [sp, #0]
 80146c8:	6819      	ldr	r1, [r3, #0]
 80146ca:	6922      	ldr	r2, [r4, #16]
 80146cc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80146d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80146d4:	f7f8 f92a 	bl	800c92c <uxr_buffer_create_subscriber_bin>
 80146d8:	4602      	mov	r2, r0
 80146da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80146de:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80146e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80146e6:	f7f6 fb95 	bl	800ae14 <run_xrce_session>
 80146ea:	2800      	cmp	r0, #0
 80146ec:	d050      	beq.n	8014790 <rmw_create_subscription+0x1a0>
 80146ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80146f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80146f6:	4629      	mov	r1, r5
 80146f8:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80146fc:	1c42      	adds	r2, r0, #1
 80146fe:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8014702:	f7f8 facf 	bl	800cca4 <uxr_object_id>
 8014706:	af08      	add	r7, sp, #32
 8014708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801470c:	69e3      	ldr	r3, [r4, #28]
 801470e:	6160      	str	r0, [r4, #20]
 8014710:	4631      	mov	r1, r6
 8014712:	4638      	mov	r0, r7
 8014714:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8014718:	9305      	str	r3, [sp, #20]
 801471a:	f7f6 fb9b 	bl	800ae54 <convert_qos_profile>
 801471e:	9503      	str	r5, [sp, #12]
 8014720:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014724:	9b05      	ldr	r3, [sp, #20]
 8014726:	9001      	str	r0, [sp, #4]
 8014728:	f8ad 1008 	strh.w	r1, [sp, #8]
 801472c:	691b      	ldr	r3, [r3, #16]
 801472e:	9300      	str	r3, [sp, #0]
 8014730:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8014734:	f8db 1000 	ldr.w	r1, [fp]
 8014738:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801473c:	f7f8 f98a 	bl	800ca54 <uxr_buffer_create_datareader_bin>
 8014740:	4602      	mov	r2, r0
 8014742:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014746:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801474a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801474e:	f7f6 fb61 	bl	800ae14 <run_xrce_session>
 8014752:	b1e8      	cbz	r0, 8014790 <rmw_create_subscription+0x1a0>
 8014754:	7a33      	ldrb	r3, [r6, #8]
 8014756:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801475a:	2b02      	cmp	r3, #2
 801475c:	bf0c      	ite	eq
 801475e:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8014762:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8014766:	9307      	str	r3, [sp, #28]
 8014768:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801476c:	2200      	movs	r2, #0
 801476e:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8014772:	ab0a      	add	r3, sp, #40	@ 0x28
 8014774:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014778:	9300      	str	r3, [sp, #0]
 801477a:	6962      	ldr	r2, [r4, #20]
 801477c:	9b07      	ldr	r3, [sp, #28]
 801477e:	6809      	ldr	r1, [r1, #0]
 8014780:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014784:	f001 fbf4 	bl	8015f70 <uxr_buffer_request_data>
 8014788:	4640      	mov	r0, r8
 801478a:	b00d      	add	sp, #52	@ 0x34
 801478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014790:	69e0      	ldr	r0, [r4, #28]
 8014792:	b108      	cbz	r0, 8014798 <rmw_create_subscription+0x1a8>
 8014794:	f7f6 fa36 	bl	800ac04 <rmw_uxrce_fini_topic_memory>
 8014798:	4640      	mov	r0, r8
 801479a:	f7f6 f9f1 	bl	800ab80 <rmw_uxrce_fini_subscription_memory>
 801479e:	f04f 0800 	mov.w	r8, #0
 80147a2:	e7f1      	b.n	8014788 <rmw_create_subscription+0x198>
 80147a4:	2000cb18 	.word	0x2000cb18
 80147a8:	08018b14 	.word	0x08018b14
 80147ac:	08018ae0 	.word	0x08018ae0

080147b0 <rmw_subscription_get_actual_qos>:
 80147b0:	b508      	push	{r3, lr}
 80147b2:	4603      	mov	r3, r0
 80147b4:	b140      	cbz	r0, 80147c8 <rmw_subscription_get_actual_qos+0x18>
 80147b6:	4608      	mov	r0, r1
 80147b8:	b131      	cbz	r1, 80147c8 <rmw_subscription_get_actual_qos+0x18>
 80147ba:	6859      	ldr	r1, [r3, #4]
 80147bc:	2250      	movs	r2, #80	@ 0x50
 80147be:	3128      	adds	r1, #40	@ 0x28
 80147c0:	f003 fa07 	bl	8017bd2 <memcpy>
 80147c4:	2000      	movs	r0, #0
 80147c6:	bd08      	pop	{r3, pc}
 80147c8:	200b      	movs	r0, #11
 80147ca:	bd08      	pop	{r3, pc}

080147cc <rmw_destroy_subscription>:
 80147cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d0:	b128      	cbz	r0, 80147de <rmw_destroy_subscription+0x12>
 80147d2:	4604      	mov	r4, r0
 80147d4:	6800      	ldr	r0, [r0, #0]
 80147d6:	460d      	mov	r5, r1
 80147d8:	f7f6 fba2 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 80147dc:	b918      	cbnz	r0, 80147e6 <rmw_destroy_subscription+0x1a>
 80147de:	2401      	movs	r4, #1
 80147e0:	4620      	mov	r0, r4
 80147e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147e6:	6863      	ldr	r3, [r4, #4]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d0f8      	beq.n	80147de <rmw_destroy_subscription+0x12>
 80147ec:	2d00      	cmp	r5, #0
 80147ee:	d0f6      	beq.n	80147de <rmw_destroy_subscription+0x12>
 80147f0:	6828      	ldr	r0, [r5, #0]
 80147f2:	f7f6 fb95 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 80147f6:	2800      	cmp	r0, #0
 80147f8:	d0f1      	beq.n	80147de <rmw_destroy_subscription+0x12>
 80147fa:	686c      	ldr	r4, [r5, #4]
 80147fc:	2c00      	cmp	r4, #0
 80147fe:	d0ee      	beq.n	80147de <rmw_destroy_subscription+0x12>
 8014800:	6a26      	ldr	r6, [r4, #32]
 8014802:	6962      	ldr	r2, [r4, #20]
 8014804:	6930      	ldr	r0, [r6, #16]
 8014806:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801480a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801480e:	6819      	ldr	r1, [r3, #0]
 8014810:	f001 fbe6 	bl	8015fe0 <uxr_buffer_cancel_data>
 8014814:	4602      	mov	r2, r0
 8014816:	6930      	ldr	r0, [r6, #16]
 8014818:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801481c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014820:	f7f6 faf8 	bl	800ae14 <run_xrce_session>
 8014824:	69e0      	ldr	r0, [r4, #28]
 8014826:	f7ff fc1f 	bl	8014068 <destroy_topic>
 801482a:	6a23      	ldr	r3, [r4, #32]
 801482c:	6962      	ldr	r2, [r4, #20]
 801482e:	6918      	ldr	r0, [r3, #16]
 8014830:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014834:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014838:	6819      	ldr	r1, [r3, #0]
 801483a:	f7f7 ff99 	bl	800c770 <uxr_buffer_delete_entity>
 801483e:	6a23      	ldr	r3, [r4, #32]
 8014840:	6922      	ldr	r2, [r4, #16]
 8014842:	4680      	mov	r8, r0
 8014844:	6918      	ldr	r0, [r3, #16]
 8014846:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801484a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801484e:	6819      	ldr	r1, [r3, #0]
 8014850:	f7f7 ff8e 	bl	800c770 <uxr_buffer_delete_entity>
 8014854:	4607      	mov	r7, r0
 8014856:	6930      	ldr	r0, [r6, #16]
 8014858:	4642      	mov	r2, r8
 801485a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801485e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014862:	f7f6 fad7 	bl	800ae14 <run_xrce_session>
 8014866:	4604      	mov	r4, r0
 8014868:	6930      	ldr	r0, [r6, #16]
 801486a:	463a      	mov	r2, r7
 801486c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014870:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014874:	f7f6 face 	bl	800ae14 <run_xrce_session>
 8014878:	4004      	ands	r4, r0
 801487a:	f084 0401 	eor.w	r4, r4, #1
 801487e:	b2e4      	uxtb	r4, r4
 8014880:	4628      	mov	r0, r5
 8014882:	0064      	lsls	r4, r4, #1
 8014884:	f7f6 f97c 	bl	800ab80 <rmw_uxrce_fini_subscription_memory>
 8014888:	e7aa      	b.n	80147e0 <rmw_destroy_subscription+0x14>
 801488a:	bf00      	nop

0801488c <rmw_take_with_info>:
 801488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801488e:	4604      	mov	r4, r0
 8014890:	6800      	ldr	r0, [r0, #0]
 8014892:	b089      	sub	sp, #36	@ 0x24
 8014894:	460f      	mov	r7, r1
 8014896:	4615      	mov	r5, r2
 8014898:	b128      	cbz	r0, 80148a6 <rmw_take_with_info+0x1a>
 801489a:	4b23      	ldr	r3, [pc, #140]	@ (8014928 <rmw_take_with_info+0x9c>)
 801489c:	6819      	ldr	r1, [r3, #0]
 801489e:	f7eb fcb7 	bl	8000210 <strcmp>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d13d      	bne.n	8014922 <rmw_take_with_info+0x96>
 80148a6:	6864      	ldr	r4, [r4, #4]
 80148a8:	b1fd      	cbz	r5, 80148ea <rmw_take_with_info+0x5e>
 80148aa:	2300      	movs	r3, #0
 80148ac:	702b      	strb	r3, [r5, #0]
 80148ae:	f7f6 fa33 	bl	800ad18 <rmw_uxrce_clean_expired_static_input_buffer>
 80148b2:	4620      	mov	r0, r4
 80148b4:	f7f6 fa0a 	bl	800accc <rmw_uxrce_find_static_input_buffer_by_owner>
 80148b8:	4606      	mov	r6, r0
 80148ba:	b1e8      	cbz	r0, 80148f8 <rmw_take_with_info+0x6c>
 80148bc:	6881      	ldr	r1, [r0, #8]
 80148be:	4668      	mov	r0, sp
 80148c0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80148c4:	3110      	adds	r1, #16
 80148c6:	f7f7 fe59 	bl	800c57c <ucdr_init_buffer>
 80148ca:	69a3      	ldr	r3, [r4, #24]
 80148cc:	4639      	mov	r1, r7
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	4668      	mov	r0, sp
 80148d2:	4798      	blx	r3
 80148d4:	4631      	mov	r1, r6
 80148d6:	4604      	mov	r4, r0
 80148d8:	4814      	ldr	r0, [pc, #80]	@ (801492c <rmw_take_with_info+0xa0>)
 80148da:	f7ff f89f 	bl	8013a1c <put_memory>
 80148de:	702c      	strb	r4, [r5, #0]
 80148e0:	f084 0001 	eor.w	r0, r4, #1
 80148e4:	b2c0      	uxtb	r0, r0
 80148e6:	b009      	add	sp, #36	@ 0x24
 80148e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ea:	f7f6 fa15 	bl	800ad18 <rmw_uxrce_clean_expired_static_input_buffer>
 80148ee:	4620      	mov	r0, r4
 80148f0:	f7f6 f9ec 	bl	800accc <rmw_uxrce_find_static_input_buffer_by_owner>
 80148f4:	4605      	mov	r5, r0
 80148f6:	b910      	cbnz	r0, 80148fe <rmw_take_with_info+0x72>
 80148f8:	2001      	movs	r0, #1
 80148fa:	b009      	add	sp, #36	@ 0x24
 80148fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fe:	68a9      	ldr	r1, [r5, #8]
 8014900:	4668      	mov	r0, sp
 8014902:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014906:	3110      	adds	r1, #16
 8014908:	f7f7 fe38 	bl	800c57c <ucdr_init_buffer>
 801490c:	69a3      	ldr	r3, [r4, #24]
 801490e:	4639      	mov	r1, r7
 8014910:	68db      	ldr	r3, [r3, #12]
 8014912:	4668      	mov	r0, sp
 8014914:	4798      	blx	r3
 8014916:	4629      	mov	r1, r5
 8014918:	4604      	mov	r4, r0
 801491a:	4804      	ldr	r0, [pc, #16]	@ (801492c <rmw_take_with_info+0xa0>)
 801491c:	f7ff f87e 	bl	8013a1c <put_memory>
 8014920:	e7de      	b.n	80148e0 <rmw_take_with_info+0x54>
 8014922:	200c      	movs	r0, #12
 8014924:	b009      	add	sp, #36	@ 0x24
 8014926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014928:	08019754 	.word	0x08019754
 801492c:	2000c368 	.word	0x2000c368

08014930 <rmw_wait>:
 8014930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014934:	b089      	sub	sp, #36	@ 0x24
 8014936:	4607      	mov	r7, r0
 8014938:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801493a:	460e      	mov	r6, r1
 801493c:	4698      	mov	r8, r3
 801493e:	4691      	mov	r9, r2
 8014940:	2a00      	cmp	r2, #0
 8014942:	f000 811e 	beq.w	8014b82 <rmw_wait+0x252>
 8014946:	2c00      	cmp	r4, #0
 8014948:	f000 80ef 	beq.w	8014b2a <rmw_wait+0x1fa>
 801494c:	4bb5      	ldr	r3, [pc, #724]	@ (8014c24 <rmw_wait+0x2f4>)
 801494e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014950:	ad04      	add	r5, sp, #16
 8014952:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8014956:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801495a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801495e:	f7fe fe83 	bl	8013668 <rmw_time_equal>
 8014962:	2800      	cmp	r0, #0
 8014964:	f000 811b 	beq.w	8014b9e <rmw_wait+0x26e>
 8014968:	f04f 35ff 	mov.w	r5, #4294967295
 801496c:	f7f6 f9d4 	bl	800ad18 <rmw_uxrce_clean_expired_static_input_buffer>
 8014970:	4bad      	ldr	r3, [pc, #692]	@ (8014c28 <rmw_wait+0x2f8>)
 8014972:	681c      	ldr	r4, [r3, #0]
 8014974:	b14c      	cbz	r4, 801498a <rmw_wait+0x5a>
 8014976:	4623      	mov	r3, r4
 8014978:	2100      	movs	r1, #0
 801497a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801497e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014982:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014986:	2b00      	cmp	r3, #0
 8014988:	d1f7      	bne.n	801497a <rmw_wait+0x4a>
 801498a:	f1b9 0f00 	cmp.w	r9, #0
 801498e:	d011      	beq.n	80149b4 <rmw_wait+0x84>
 8014990:	f8d9 1000 	ldr.w	r1, [r9]
 8014994:	b171      	cbz	r1, 80149b4 <rmw_wait+0x84>
 8014996:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801499a:	2300      	movs	r3, #0
 801499c:	2001      	movs	r0, #1
 801499e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80149a2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80149a4:	6912      	ldr	r2, [r2, #16]
 80149a6:	3301      	adds	r3, #1
 80149a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80149ac:	4299      	cmp	r1, r3
 80149ae:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80149b2:	d1f4      	bne.n	801499e <rmw_wait+0x6e>
 80149b4:	f1b8 0f00 	cmp.w	r8, #0
 80149b8:	f000 8109 	beq.w	8014bce <rmw_wait+0x29e>
 80149bc:	f8d8 1000 	ldr.w	r1, [r8]
 80149c0:	2900      	cmp	r1, #0
 80149c2:	f000 8116 	beq.w	8014bf2 <rmw_wait+0x2c2>
 80149c6:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80149ca:	2300      	movs	r3, #0
 80149cc:	2001      	movs	r0, #1
 80149ce:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80149d2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80149d4:	6912      	ldr	r2, [r2, #16]
 80149d6:	3301      	adds	r3, #1
 80149d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80149dc:	4299      	cmp	r1, r3
 80149de:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80149e2:	d1f4      	bne.n	80149ce <rmw_wait+0x9e>
 80149e4:	2f00      	cmp	r7, #0
 80149e6:	f000 8114 	beq.w	8014c12 <rmw_wait+0x2e2>
 80149ea:	6839      	ldr	r1, [r7, #0]
 80149ec:	b171      	cbz	r1, 8014a0c <rmw_wait+0xdc>
 80149ee:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80149f2:	2300      	movs	r3, #0
 80149f4:	2001      	movs	r0, #1
 80149f6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80149fa:	6a12      	ldr	r2, [r2, #32]
 80149fc:	6912      	ldr	r2, [r2, #16]
 80149fe:	3301      	adds	r3, #1
 8014a00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014a04:	4299      	cmp	r1, r3
 8014a06:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014a0a:	d1f4      	bne.n	80149f6 <rmw_wait+0xc6>
 8014a0c:	b344      	cbz	r4, 8014a60 <rmw_wait+0x130>
 8014a0e:	4622      	mov	r2, r4
 8014a10:	2300      	movs	r3, #0
 8014a12:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014a16:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8014a1a:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8014a1e:	440b      	add	r3, r1
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	2a00      	cmp	r2, #0
 8014a24:	d1f5      	bne.n	8014a12 <rmw_wait+0xe2>
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d075      	beq.n	8014b16 <rmw_wait+0x1e6>
 8014a2a:	1c6a      	adds	r2, r5, #1
 8014a2c:	d00d      	beq.n	8014a4a <rmw_wait+0x11a>
 8014a2e:	ee07 5a90 	vmov	s15, r5
 8014a32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014a36:	ee07 3a90 	vmov	s15, r3
 8014a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014a42:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014a46:	ee17 5a90 	vmov	r5, s15
 8014a4a:	68a0      	ldr	r0, [r4, #8]
 8014a4c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014a50:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	f040 808a 	bne.w	8014b6e <rmw_wait+0x23e>
 8014a5a:	6864      	ldr	r4, [r4, #4]
 8014a5c:	2c00      	cmp	r4, #0
 8014a5e:	d1f4      	bne.n	8014a4a <rmw_wait+0x11a>
 8014a60:	f1b9 0f00 	cmp.w	r9, #0
 8014a64:	f000 80c3 	beq.w	8014bee <rmw_wait+0x2be>
 8014a68:	f8d9 5000 	ldr.w	r5, [r9]
 8014a6c:	b185      	cbz	r5, 8014a90 <rmw_wait+0x160>
 8014a6e:	2400      	movs	r4, #0
 8014a70:	4625      	mov	r5, r4
 8014a72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014a76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014a7a:	f7f6 f927 	bl	800accc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d06d      	beq.n	8014b5e <rmw_wait+0x22e>
 8014a82:	f8d9 3000 	ldr.w	r3, [r9]
 8014a86:	3401      	adds	r4, #1
 8014a88:	42a3      	cmp	r3, r4
 8014a8a:	f04f 0501 	mov.w	r5, #1
 8014a8e:	d8f0      	bhi.n	8014a72 <rmw_wait+0x142>
 8014a90:	f1b8 0f00 	cmp.w	r8, #0
 8014a94:	d012      	beq.n	8014abc <rmw_wait+0x18c>
 8014a96:	f8d8 1000 	ldr.w	r1, [r8]
 8014a9a:	2400      	movs	r4, #0
 8014a9c:	b171      	cbz	r1, 8014abc <rmw_wait+0x18c>
 8014a9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014aa2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014aa6:	f7f6 f911 	bl	800accc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d047      	beq.n	8014b3e <rmw_wait+0x20e>
 8014aae:	f8d8 3000 	ldr.w	r3, [r8]
 8014ab2:	3401      	adds	r4, #1
 8014ab4:	42a3      	cmp	r3, r4
 8014ab6:	f04f 0501 	mov.w	r5, #1
 8014aba:	d8f0      	bhi.n	8014a9e <rmw_wait+0x16e>
 8014abc:	b17f      	cbz	r7, 8014ade <rmw_wait+0x1ae>
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	2400      	movs	r4, #0
 8014ac2:	b163      	cbz	r3, 8014ade <rmw_wait+0x1ae>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014aca:	f7f6 f8ff 	bl	800accc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	d03d      	beq.n	8014b4e <rmw_wait+0x21e>
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	3401      	adds	r4, #1
 8014ad6:	42a3      	cmp	r3, r4
 8014ad8:	f04f 0501 	mov.w	r5, #1
 8014adc:	d8f2      	bhi.n	8014ac4 <rmw_wait+0x194>
 8014ade:	b1a6      	cbz	r6, 8014b0a <rmw_wait+0x1da>
 8014ae0:	6834      	ldr	r4, [r6, #0]
 8014ae2:	b194      	cbz	r4, 8014b0a <rmw_wait+0x1da>
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	461f      	mov	r7, r3
 8014ae8:	e004      	b.n	8014af4 <rmw_wait+0x1c4>
 8014aea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014aee:	3301      	adds	r3, #1
 8014af0:	429c      	cmp	r4, r3
 8014af2:	d00a      	beq.n	8014b0a <rmw_wait+0x1da>
 8014af4:	6870      	ldr	r0, [r6, #4]
 8014af6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8014afa:	7c0a      	ldrb	r2, [r1, #16]
 8014afc:	2a00      	cmp	r2, #0
 8014afe:	d0f4      	beq.n	8014aea <rmw_wait+0x1ba>
 8014b00:	3301      	adds	r3, #1
 8014b02:	429c      	cmp	r4, r3
 8014b04:	740f      	strb	r7, [r1, #16]
 8014b06:	4615      	mov	r5, r2
 8014b08:	d1f4      	bne.n	8014af4 <rmw_wait+0x1c4>
 8014b0a:	f085 0001 	eor.w	r0, r5, #1
 8014b0e:	0040      	lsls	r0, r0, #1
 8014b10:	b009      	add	sp, #36	@ 0x24
 8014b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b16:	68a0      	ldr	r0, [r4, #8]
 8014b18:	2100      	movs	r1, #0
 8014b1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b1e:	f7f8 fe55 	bl	800d7cc <uxr_run_session_timeout>
 8014b22:	6864      	ldr	r4, [r4, #4]
 8014b24:	2c00      	cmp	r4, #0
 8014b26:	d1f6      	bne.n	8014b16 <rmw_wait+0x1e6>
 8014b28:	e79a      	b.n	8014a60 <rmw_wait+0x130>
 8014b2a:	f7f6 f8f5 	bl	800ad18 <rmw_uxrce_clean_expired_static_input_buffer>
 8014b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8014c28 <rmw_wait+0x2f8>)
 8014b30:	681c      	ldr	r4, [r3, #0]
 8014b32:	f04f 35ff 	mov.w	r5, #4294967295
 8014b36:	2c00      	cmp	r4, #0
 8014b38:	f47f af1d 	bne.w	8014976 <rmw_wait+0x46>
 8014b3c:	e728      	b.n	8014990 <rmw_wait+0x60>
 8014b3e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014b42:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014b46:	3401      	adds	r4, #1
 8014b48:	429c      	cmp	r4, r3
 8014b4a:	d3a8      	bcc.n	8014a9e <rmw_wait+0x16e>
 8014b4c:	e7b6      	b.n	8014abc <rmw_wait+0x18c>
 8014b4e:	e9d7 3200 	ldrd	r3, r2, [r7]
 8014b52:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014b56:	3401      	adds	r4, #1
 8014b58:	42a3      	cmp	r3, r4
 8014b5a:	d8b3      	bhi.n	8014ac4 <rmw_wait+0x194>
 8014b5c:	e7bf      	b.n	8014ade <rmw_wait+0x1ae>
 8014b5e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8014b62:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014b66:	3401      	adds	r4, #1
 8014b68:	42a3      	cmp	r3, r4
 8014b6a:	d882      	bhi.n	8014a72 <rmw_wait+0x142>
 8014b6c:	e790      	b.n	8014a90 <rmw_wait+0x160>
 8014b6e:	4629      	mov	r1, r5
 8014b70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b74:	f7f8 fe44 	bl	800d800 <uxr_run_session_until_data>
 8014b78:	6864      	ldr	r4, [r4, #4]
 8014b7a:	2c00      	cmp	r4, #0
 8014b7c:	f47f af65 	bne.w	8014a4a <rmw_wait+0x11a>
 8014b80:	e76e      	b.n	8014a60 <rmw_wait+0x130>
 8014b82:	b1f3      	cbz	r3, 8014bc2 <rmw_wait+0x292>
 8014b84:	2c00      	cmp	r4, #0
 8014b86:	f47f aee1 	bne.w	801494c <rmw_wait+0x1c>
 8014b8a:	f7f6 f8c5 	bl	800ad18 <rmw_uxrce_clean_expired_static_input_buffer>
 8014b8e:	4b26      	ldr	r3, [pc, #152]	@ (8014c28 <rmw_wait+0x2f8>)
 8014b90:	681c      	ldr	r4, [r3, #0]
 8014b92:	f04f 35ff 	mov.w	r5, #4294967295
 8014b96:	2c00      	cmp	r4, #0
 8014b98:	f47f aeed 	bne.w	8014976 <rmw_wait+0x46>
 8014b9c:	e70a      	b.n	80149b4 <rmw_wait+0x84>
 8014b9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014ba2:	f7fe fdb5 	bl	8013710 <rmw_time_total_nsec>
 8014ba6:	4a21      	ldr	r2, [pc, #132]	@ (8014c2c <rmw_wait+0x2fc>)
 8014ba8:	2300      	movs	r3, #0
 8014baa:	f7eb fbe9 	bl	8000380 <__aeabi_uldivmod>
 8014bae:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014bb2:	f171 0100 	sbcs.w	r1, r1, #0
 8014bb6:	4605      	mov	r5, r0
 8014bb8:	f6ff aed8 	blt.w	801496c <rmw_wait+0x3c>
 8014bbc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8014bc0:	e6d4      	b.n	801496c <rmw_wait+0x3c>
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	d1de      	bne.n	8014b84 <rmw_wait+0x254>
 8014bc6:	2900      	cmp	r1, #0
 8014bc8:	d1dc      	bne.n	8014b84 <rmw_wait+0x254>
 8014bca:	4608      	mov	r0, r1
 8014bcc:	e7a0      	b.n	8014b10 <rmw_wait+0x1e0>
 8014bce:	2f00      	cmp	r7, #0
 8014bd0:	f47f af0b 	bne.w	80149ea <rmw_wait+0xba>
 8014bd4:	2c00      	cmp	r4, #0
 8014bd6:	f47f af1a 	bne.w	8014a0e <rmw_wait+0xde>
 8014bda:	f1b9 0f00 	cmp.w	r9, #0
 8014bde:	d027      	beq.n	8014c30 <rmw_wait+0x300>
 8014be0:	f8d9 3000 	ldr.w	r3, [r9]
 8014be4:	4625      	mov	r5, r4
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	f47f af41 	bne.w	8014a6e <rmw_wait+0x13e>
 8014bec:	e777      	b.n	8014ade <rmw_wait+0x1ae>
 8014bee:	464d      	mov	r5, r9
 8014bf0:	e74e      	b.n	8014a90 <rmw_wait+0x160>
 8014bf2:	2f00      	cmp	r7, #0
 8014bf4:	f47f aef9 	bne.w	80149ea <rmw_wait+0xba>
 8014bf8:	2c00      	cmp	r4, #0
 8014bfa:	f47f af08 	bne.w	8014a0e <rmw_wait+0xde>
 8014bfe:	f1b9 0f00 	cmp.w	r9, #0
 8014c02:	d015      	beq.n	8014c30 <rmw_wait+0x300>
 8014c04:	f8d9 3000 	ldr.w	r3, [r9]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	f47f af30 	bne.w	8014a6e <rmw_wait+0x13e>
 8014c0e:	2500      	movs	r5, #0
 8014c10:	e743      	b.n	8014a9a <rmw_wait+0x16a>
 8014c12:	2c00      	cmp	r4, #0
 8014c14:	f47f aefb 	bne.w	8014a0e <rmw_wait+0xde>
 8014c18:	f1b9 0f00 	cmp.w	r9, #0
 8014c1c:	f47f af24 	bne.w	8014a68 <rmw_wait+0x138>
 8014c20:	e7f5      	b.n	8014c0e <rmw_wait+0x2de>
 8014c22:	bf00      	nop
 8014c24:	080188f0 	.word	0x080188f0
 8014c28:	2000ea08 	.word	0x2000ea08
 8014c2c:	000f4240 	.word	0x000f4240
 8014c30:	464d      	mov	r5, r9
 8014c32:	e754      	b.n	8014ade <rmw_wait+0x1ae>

08014c34 <rmw_create_wait_set>:
 8014c34:	b508      	push	{r3, lr}
 8014c36:	4803      	ldr	r0, [pc, #12]	@ (8014c44 <rmw_create_wait_set+0x10>)
 8014c38:	f7fe fee0 	bl	80139fc <get_memory>
 8014c3c:	b108      	cbz	r0, 8014c42 <rmw_create_wait_set+0xe>
 8014c3e:	6880      	ldr	r0, [r0, #8]
 8014c40:	3010      	adds	r0, #16
 8014c42:	bd08      	pop	{r3, pc}
 8014c44:	2000a1c4 	.word	0x2000a1c4

08014c48 <rmw_destroy_wait_set>:
 8014c48:	b508      	push	{r3, lr}
 8014c4a:	4b08      	ldr	r3, [pc, #32]	@ (8014c6c <rmw_destroy_wait_set+0x24>)
 8014c4c:	6819      	ldr	r1, [r3, #0]
 8014c4e:	b911      	cbnz	r1, 8014c56 <rmw_destroy_wait_set+0xe>
 8014c50:	e00a      	b.n	8014c68 <rmw_destroy_wait_set+0x20>
 8014c52:	6849      	ldr	r1, [r1, #4]
 8014c54:	b141      	cbz	r1, 8014c68 <rmw_destroy_wait_set+0x20>
 8014c56:	688b      	ldr	r3, [r1, #8]
 8014c58:	3310      	adds	r3, #16
 8014c5a:	4298      	cmp	r0, r3
 8014c5c:	d1f9      	bne.n	8014c52 <rmw_destroy_wait_set+0xa>
 8014c5e:	4803      	ldr	r0, [pc, #12]	@ (8014c6c <rmw_destroy_wait_set+0x24>)
 8014c60:	f7fe fedc 	bl	8013a1c <put_memory>
 8014c64:	2000      	movs	r0, #0
 8014c66:	bd08      	pop	{r3, pc}
 8014c68:	2001      	movs	r0, #1
 8014c6a:	bd08      	pop	{r3, pc}
 8014c6c:	2000a1c4 	.word	0x2000a1c4

08014c70 <rmw_uros_epoch_nanos>:
 8014c70:	4b05      	ldr	r3, [pc, #20]	@ (8014c88 <rmw_uros_epoch_nanos+0x18>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	b123      	cbz	r3, 8014c80 <rmw_uros_epoch_nanos+0x10>
 8014c76:	6898      	ldr	r0, [r3, #8]
 8014c78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c7c:	f7f8 ba3e 	b.w	800d0fc <uxr_epoch_nanos>
 8014c80:	2000      	movs	r0, #0
 8014c82:	2100      	movs	r1, #0
 8014c84:	4770      	bx	lr
 8014c86:	bf00      	nop
 8014c88:	2000ea08 	.word	0x2000ea08

08014c8c <rosidl_runtime_c__int32__Sequence__init>:
 8014c8c:	b1b0      	cbz	r0, 8014cbc <rosidl_runtime_c__int32__Sequence__init+0x30>
 8014c8e:	b530      	push	{r4, r5, lr}
 8014c90:	460d      	mov	r5, r1
 8014c92:	b087      	sub	sp, #28
 8014c94:	4604      	mov	r4, r0
 8014c96:	b931      	cbnz	r1, 8014ca6 <rosidl_runtime_c__int32__Sequence__init+0x1a>
 8014c98:	4608      	mov	r0, r1
 8014c9a:	e9c4 0500 	strd	r0, r5, [r4]
 8014c9e:	60a5      	str	r5, [r4, #8]
 8014ca0:	2001      	movs	r0, #1
 8014ca2:	b007      	add	sp, #28
 8014ca4:	bd30      	pop	{r4, r5, pc}
 8014ca6:	a801      	add	r0, sp, #4
 8014ca8:	f7f5 faf2 	bl	800a290 <rcutils_get_default_allocator>
 8014cac:	9b01      	ldr	r3, [sp, #4]
 8014cae:	9905      	ldr	r1, [sp, #20]
 8014cb0:	00a8      	lsls	r0, r5, #2
 8014cb2:	4798      	blx	r3
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	d1f0      	bne.n	8014c9a <rosidl_runtime_c__int32__Sequence__init+0xe>
 8014cb8:	2000      	movs	r0, #0
 8014cba:	e7f2      	b.n	8014ca2 <rosidl_runtime_c__int32__Sequence__init+0x16>
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	4770      	bx	lr

08014cc0 <rosidl_runtime_c__int32__Sequence__fini>:
 8014cc0:	b188      	cbz	r0, 8014ce6 <rosidl_runtime_c__int32__Sequence__fini+0x26>
 8014cc2:	b510      	push	{r4, lr}
 8014cc4:	6803      	ldr	r3, [r0, #0]
 8014cc6:	b086      	sub	sp, #24
 8014cc8:	4604      	mov	r4, r0
 8014cca:	b153      	cbz	r3, 8014ce2 <rosidl_runtime_c__int32__Sequence__fini+0x22>
 8014ccc:	a801      	add	r0, sp, #4
 8014cce:	f7f5 fadf 	bl	800a290 <rcutils_get_default_allocator>
 8014cd2:	9b02      	ldr	r3, [sp, #8]
 8014cd4:	9905      	ldr	r1, [sp, #20]
 8014cd6:	6820      	ldr	r0, [r4, #0]
 8014cd8:	4798      	blx	r3
 8014cda:	2300      	movs	r3, #0
 8014cdc:	e9c4 3300 	strd	r3, r3, [r4]
 8014ce0:	60a3      	str	r3, [r4, #8]
 8014ce2:	b006      	add	sp, #24
 8014ce4:	bd10      	pop	{r4, pc}
 8014ce6:	4770      	bx	lr

08014ce8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cec:	6805      	ldr	r5, [r0, #0]
 8014cee:	4604      	mov	r4, r0
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	460e      	mov	r6, r1
 8014cf4:	f7eb fa8c 	bl	8000210 <strcmp>
 8014cf8:	b308      	cbz	r0, 8014d3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8014cfa:	4b12      	ldr	r3, [pc, #72]	@ (8014d44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	6819      	ldr	r1, [r3, #0]
 8014d00:	f7eb fa86 	bl	8000210 <strcmp>
 8014d04:	4605      	mov	r5, r0
 8014d06:	b980      	cbnz	r0, 8014d2a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8014d08:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8014d10:	b1ac      	cbz	r4, 8014d3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8014d12:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014d16:	3f04      	subs	r7, #4
 8014d18:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8014d1c:	4631      	mov	r1, r6
 8014d1e:	f7eb fa77 	bl	8000210 <strcmp>
 8014d22:	b128      	cbz	r0, 8014d30 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8014d24:	3501      	adds	r5, #1
 8014d26:	42a5      	cmp	r5, r4
 8014d28:	d1f6      	bne.n	8014d18 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d30:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014d34:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d3c:	4718      	bx	r3
 8014d3e:	4620      	mov	r0, r4
 8014d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d44:	200001fc 	.word	0x200001fc

08014d48 <std_msgs__msg__Int32MultiArray__get_type_hash>:
 8014d48:	4800      	ldr	r0, [pc, #0]	@ (8014d4c <std_msgs__msg__Int32MultiArray__get_type_hash+0x4>)
 8014d4a:	4770      	bx	lr
 8014d4c:	20000204 	.word	0x20000204

08014d50 <std_msgs__msg__Int32MultiArray__get_type_description>:
 8014d50:	b570      	push	{r4, r5, r6, lr}
 8014d52:	4e0c      	ldr	r6, [pc, #48]	@ (8014d84 <std_msgs__msg__Int32MultiArray__get_type_description+0x34>)
 8014d54:	7835      	ldrb	r5, [r6, #0]
 8014d56:	b10d      	cbz	r5, 8014d5c <std_msgs__msg__Int32MultiArray__get_type_description+0xc>
 8014d58:	480b      	ldr	r0, [pc, #44]	@ (8014d88 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 8014d5a:	bd70      	pop	{r4, r5, r6, pc}
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	f000 f853 	bl	8014e08 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8014d62:	300c      	adds	r0, #12
 8014d64:	c807      	ldmia	r0, {r0, r1, r2}
 8014d66:	4c09      	ldr	r4, [pc, #36]	@ (8014d8c <std_msgs__msg__Int32MultiArray__get_type_description+0x3c>)
 8014d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	f000 f8f9 	bl	8014f64 <std_msgs__msg__MultiArrayLayout__get_type_description>
 8014d72:	300c      	adds	r0, #12
 8014d74:	c807      	ldmia	r0, {r0, r1, r2}
 8014d76:	3418      	adds	r4, #24
 8014d78:	2301      	movs	r3, #1
 8014d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014d7e:	7033      	strb	r3, [r6, #0]
 8014d80:	4801      	ldr	r0, [pc, #4]	@ (8014d88 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 8014d82:	bd70      	pop	{r4, r5, r6, pc}
 8014d84:	2000eb81 	.word	0x2000eb81
 8014d88:	08019788 	.word	0x08019788
 8014d8c:	20000404 	.word	0x20000404

08014d90 <std_msgs__msg__Int32MultiArray__get_type_description_sources>:
 8014d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d92:	4e17      	ldr	r6, [pc, #92]	@ (8014df0 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x60>)
 8014d94:	7837      	ldrb	r7, [r6, #0]
 8014d96:	b10f      	cbz	r7, 8014d9c <std_msgs__msg__Int32MultiArray__get_type_description_sources+0xc>
 8014d98:	4816      	ldr	r0, [pc, #88]	@ (8014df4 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 8014d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d9c:	4d16      	ldr	r5, [pc, #88]	@ (8014df8 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x68>)
 8014d9e:	4c17      	ldr	r4, [pc, #92]	@ (8014dfc <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x6c>)
 8014da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014da8:	682b      	ldr	r3, [r5, #0]
 8014daa:	4625      	mov	r5, r4
 8014dac:	4638      	mov	r0, r7
 8014dae:	f845 3b04 	str.w	r3, [r5], #4
 8014db2:	f000 f835 	bl	8014e20 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8014db6:	4684      	mov	ip, r0
 8014db8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014dbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014dc4:	4638      	mov	r0, r7
 8014dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8014dca:	602b      	str	r3, [r5, #0]
 8014dcc:	f000 f8e2 	bl	8014f94 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	4684      	mov	ip, r0
 8014dd4:	7033      	strb	r3, [r6, #0]
 8014dd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014dda:	3428      	adds	r4, #40	@ 0x28
 8014ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014de4:	f8dc 3000 	ldr.w	r3, [ip]
 8014de8:	4802      	ldr	r0, [pc, #8]	@ (8014df4 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 8014dea:	6023      	str	r3, [r4, #0]
 8014dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dee:	bf00      	nop
 8014df0:	2000eb80 	.word	0x2000eb80
 8014df4:	08019758 	.word	0x08019758
 8014df8:	08019764 	.word	0x08019764
 8014dfc:	2000eb14 	.word	0x2000eb14

08014e00 <std_msgs__msg__MultiArrayDimension__get_type_hash>:
 8014e00:	4800      	ldr	r0, [pc, #0]	@ (8014e04 <std_msgs__msg__MultiArrayDimension__get_type_hash+0x4>)
 8014e02:	4770      	bx	lr
 8014e04:	2000052c 	.word	0x2000052c

08014e08 <std_msgs__msg__MultiArrayDimension__get_type_description>:
 8014e08:	4b03      	ldr	r3, [pc, #12]	@ (8014e18 <std_msgs__msg__MultiArrayDimension__get_type_description+0x10>)
 8014e0a:	781a      	ldrb	r2, [r3, #0]
 8014e0c:	b90a      	cbnz	r2, 8014e12 <std_msgs__msg__MultiArrayDimension__get_type_description+0xa>
 8014e0e:	2201      	movs	r2, #1
 8014e10:	701a      	strb	r2, [r3, #0]
 8014e12:	4802      	ldr	r0, [pc, #8]	@ (8014e1c <std_msgs__msg__MultiArrayDimension__get_type_description+0x14>)
 8014e14:	4770      	bx	lr
 8014e16:	bf00      	nop
 8014e18:	2000eba9 	.word	0x2000eba9
 8014e1c:	080197dc 	.word	0x080197dc

08014e20 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>:
 8014e20:	4800      	ldr	r0, [pc, #0]	@ (8014e24 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 8014e22:	4770      	bx	lr
 8014e24:	080197b8 	.word	0x080197b8

08014e28 <std_msgs__msg__MultiArrayDimension__get_type_description_sources>:
 8014e28:	4b09      	ldr	r3, [pc, #36]	@ (8014e50 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 8014e2a:	781a      	ldrb	r2, [r3, #0]
 8014e2c:	b96a      	cbnz	r2, 8014e4a <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x22>
 8014e2e:	b430      	push	{r4, r5}
 8014e30:	4d08      	ldr	r5, [pc, #32]	@ (8014e54 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 8014e32:	4c09      	ldr	r4, [pc, #36]	@ (8014e58 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 8014e34:	2201      	movs	r2, #1
 8014e36:	701a      	strb	r2, [r3, #0]
 8014e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e40:	682b      	ldr	r3, [r5, #0]
 8014e42:	4806      	ldr	r0, [pc, #24]	@ (8014e5c <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8014e44:	6023      	str	r3, [r4, #0]
 8014e46:	bc30      	pop	{r4, r5}
 8014e48:	4770      	bx	lr
 8014e4a:	4804      	ldr	r0, [pc, #16]	@ (8014e5c <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8014e4c:	4770      	bx	lr
 8014e4e:	bf00      	nop
 8014e50:	2000eba8 	.word	0x2000eba8
 8014e54:	080197b8 	.word	0x080197b8
 8014e58:	2000eb84 	.word	0x2000eb84
 8014e5c:	080197ac 	.word	0x080197ac

08014e60 <std_msgs__msg__MultiArrayDimension__init>:
 8014e60:	b150      	cbz	r0, 8014e78 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8014e62:	b510      	push	{r4, lr}
 8014e64:	4604      	mov	r4, r0
 8014e66:	f002 f899 	bl	8016f9c <rosidl_runtime_c__String__init>
 8014e6a:	b100      	cbz	r0, 8014e6e <std_msgs__msg__MultiArrayDimension__init+0xe>
 8014e6c:	bd10      	pop	{r4, pc}
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f002 f8ae 	bl	8016fd0 <rosidl_runtime_c__String__fini>
 8014e74:	2000      	movs	r0, #0
 8014e76:	bd10      	pop	{r4, pc}
 8014e78:	2000      	movs	r0, #0
 8014e7a:	4770      	bx	lr

08014e7c <std_msgs__msg__MultiArrayDimension__fini>:
 8014e7c:	b108      	cbz	r0, 8014e82 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8014e7e:	f002 b8a7 	b.w	8016fd0 <rosidl_runtime_c__String__fini>
 8014e82:	4770      	bx	lr

08014e84 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d03f      	beq.n	8014f08 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x84>
 8014e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e8c:	b087      	sub	sp, #28
 8014e8e:	460d      	mov	r5, r1
 8014e90:	4681      	mov	r9, r0
 8014e92:	a801      	add	r0, sp, #4
 8014e94:	f7f5 f9fc 	bl	800a290 <rcutils_get_default_allocator>
 8014e98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014e9c:	b35d      	cbz	r5, 8014ef6 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x72>
 8014e9e:	9b04      	ldr	r3, [sp, #16]
 8014ea0:	4642      	mov	r2, r8
 8014ea2:	2114      	movs	r1, #20
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	4798      	blx	r3
 8014ea8:	4607      	mov	r7, r0
 8014eaa:	b310      	cbz	r0, 8014ef2 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6e>
 8014eac:	4606      	mov	r6, r0
 8014eae:	2400      	movs	r4, #0
 8014eb0:	e004      	b.n	8014ebc <std_msgs__msg__MultiArrayDimension__Sequence__init+0x38>
 8014eb2:	3401      	adds	r4, #1
 8014eb4:	42a5      	cmp	r5, r4
 8014eb6:	f106 0614 	add.w	r6, r6, #20
 8014eba:	d01d      	beq.n	8014ef8 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	f002 f86d 	bl	8016f9c <rosidl_runtime_c__String__init>
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d1f5      	bne.n	8014eb2 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x2e>
 8014ec6:	4630      	mov	r0, r6
 8014ec8:	f002 f882 	bl	8016fd0 <rosidl_runtime_c__String__fini>
 8014ecc:	42a5      	cmp	r5, r4
 8014ece:	d913      	bls.n	8014ef8 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8014ed0:	b15c      	cbz	r4, 8014eea <std_msgs__msg__MultiArrayDimension__Sequence__init+0x66>
 8014ed2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014ed6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8014eda:	3c14      	subs	r4, #20
 8014edc:	4620      	mov	r0, r4
 8014ede:	f002 f877 	bl	8016fd0 <rosidl_runtime_c__String__fini>
 8014ee2:	42bc      	cmp	r4, r7
 8014ee4:	f1a4 0414 	sub.w	r4, r4, #20
 8014ee8:	d1f8      	bne.n	8014edc <std_msgs__msg__MultiArrayDimension__Sequence__init+0x58>
 8014eea:	9b02      	ldr	r3, [sp, #8]
 8014eec:	4641      	mov	r1, r8
 8014eee:	4638      	mov	r0, r7
 8014ef0:	4798      	blx	r3
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	e005      	b.n	8014f02 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x7e>
 8014ef6:	462f      	mov	r7, r5
 8014ef8:	e9c9 7500 	strd	r7, r5, [r9]
 8014efc:	f8c9 5008 	str.w	r5, [r9, #8]
 8014f00:	2001      	movs	r0, #1
 8014f02:	b007      	add	sp, #28
 8014f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f08:	2000      	movs	r0, #0
 8014f0a:	4770      	bx	lr

08014f0c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8014f0c:	b320      	cbz	r0, 8014f58 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8014f0e:	b530      	push	{r4, r5, lr}
 8014f10:	4605      	mov	r5, r0
 8014f12:	b087      	sub	sp, #28
 8014f14:	a801      	add	r0, sp, #4
 8014f16:	f7f5 f9bb 	bl	800a290 <rcutils_get_default_allocator>
 8014f1a:	682a      	ldr	r2, [r5, #0]
 8014f1c:	b1b2      	cbz	r2, 8014f4c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8014f1e:	68a9      	ldr	r1, [r5, #8]
 8014f20:	b161      	cbz	r1, 8014f3c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014f22:	2400      	movs	r4, #0
 8014f24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8014f28:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8014f2c:	d010      	beq.n	8014f50 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8014f2e:	f002 f84f 	bl	8016fd0 <rosidl_runtime_c__String__fini>
 8014f32:	68a9      	ldr	r1, [r5, #8]
 8014f34:	682a      	ldr	r2, [r5, #0]
 8014f36:	3401      	adds	r4, #1
 8014f38:	428c      	cmp	r4, r1
 8014f3a:	d3f3      	bcc.n	8014f24 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8014f3c:	9b02      	ldr	r3, [sp, #8]
 8014f3e:	9905      	ldr	r1, [sp, #20]
 8014f40:	4610      	mov	r0, r2
 8014f42:	4798      	blx	r3
 8014f44:	2300      	movs	r3, #0
 8014f46:	e9c5 3300 	strd	r3, r3, [r5]
 8014f4a:	60ab      	str	r3, [r5, #8]
 8014f4c:	b007      	add	sp, #28
 8014f4e:	bd30      	pop	{r4, r5, pc}
 8014f50:	3401      	adds	r4, #1
 8014f52:	428c      	cmp	r4, r1
 8014f54:	d3e6      	bcc.n	8014f24 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8014f56:	e7f1      	b.n	8014f3c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop

08014f5c <std_msgs__msg__MultiArrayLayout__get_type_hash>:
 8014f5c:	4800      	ldr	r0, [pc, #0]	@ (8014f60 <std_msgs__msg__MultiArrayLayout__get_type_hash+0x4>)
 8014f5e:	4770      	bx	lr
 8014f60:	200007f4 	.word	0x200007f4

08014f64 <std_msgs__msg__MultiArrayLayout__get_type_description>:
 8014f64:	b510      	push	{r4, lr}
 8014f66:	4c08      	ldr	r4, [pc, #32]	@ (8014f88 <std_msgs__msg__MultiArrayLayout__get_type_description+0x24>)
 8014f68:	7820      	ldrb	r0, [r4, #0]
 8014f6a:	b108      	cbz	r0, 8014f70 <std_msgs__msg__MultiArrayLayout__get_type_description+0xc>
 8014f6c:	4807      	ldr	r0, [pc, #28]	@ (8014f8c <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8014f6e:	bd10      	pop	{r4, pc}
 8014f70:	f7ff ff4a 	bl	8014e08 <std_msgs__msg__MultiArrayDimension__get_type_description>
 8014f74:	300c      	adds	r0, #12
 8014f76:	c807      	ldmia	r0, {r0, r1, r2}
 8014f78:	4b05      	ldr	r3, [pc, #20]	@ (8014f90 <std_msgs__msg__MultiArrayLayout__get_type_description+0x2c>)
 8014f7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014f7e:	2301      	movs	r3, #1
 8014f80:	4802      	ldr	r0, [pc, #8]	@ (8014f8c <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8014f82:	7023      	strb	r3, [r4, #0]
 8014f84:	bd10      	pop	{r4, pc}
 8014f86:	bf00      	nop
 8014f88:	2000ebf5 	.word	0x2000ebf5
 8014f8c:	08019830 	.word	0x08019830
 8014f90:	20000cb0 	.word	0x20000cb0

08014f94 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>:
 8014f94:	4800      	ldr	r0, [pc, #0]	@ (8014f98 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 8014f96:	4770      	bx	lr
 8014f98:	0801980c 	.word	0x0801980c

08014f9c <std_msgs__msg__MultiArrayLayout__get_type_description_sources>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	4e0f      	ldr	r6, [pc, #60]	@ (8014fdc <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 8014fa0:	7837      	ldrb	r7, [r6, #0]
 8014fa2:	b10f      	cbz	r7, 8014fa8 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0xc>
 8014fa4:	480e      	ldr	r0, [pc, #56]	@ (8014fe0 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8014fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fa8:	4d0e      	ldr	r5, [pc, #56]	@ (8014fe4 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 8014faa:	4c0f      	ldr	r4, [pc, #60]	@ (8014fe8 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 8014fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fb4:	682b      	ldr	r3, [r5, #0]
 8014fb6:	f844 3b04 	str.w	r3, [r4], #4
 8014fba:	4638      	mov	r0, r7
 8014fbc:	f7ff ff30 	bl	8014e20 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	4684      	mov	ip, r0
 8014fc4:	7033      	strb	r3, [r6, #0]
 8014fc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8014fd6:	4802      	ldr	r0, [pc, #8]	@ (8014fe0 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8014fd8:	6023      	str	r3, [r4, #0]
 8014fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fdc:	2000ebf4 	.word	0x2000ebf4
 8014fe0:	08019800 	.word	0x08019800
 8014fe4:	0801980c 	.word	0x0801980c
 8014fe8:	2000ebac 	.word	0x2000ebac

08014fec <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8014fec:	f7ff bf38 	b.w	8014e60 <std_msgs__msg__MultiArrayDimension__init>

08014ff0 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8014ff0:	f7ff bf44 	b.w	8014e7c <std_msgs__msg__MultiArrayDimension__fini>

08014ff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014ff4:	4b04      	ldr	r3, [pc, #16]	@ (8015008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	b10a      	cbz	r2, 8014ffe <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8014ffa:	4803      	ldr	r0, [pc, #12]	@ (8015008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014ffc:	4770      	bx	lr
 8014ffe:	4a03      	ldr	r2, [pc, #12]	@ (801500c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8015000:	4801      	ldr	r0, [pc, #4]	@ (8015008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8015002:	6812      	ldr	r2, [r2, #0]
 8015004:	601a      	str	r2, [r3, #0]
 8015006:	4770      	bx	lr
 8015008:	20000da4 	.word	0x20000da4
 801500c:	20000200 	.word	0x20000200

08015010 <_MultiArrayDimension__cdr_serialize>:
 8015010:	b1d0      	cbz	r0, 8015048 <_MultiArrayDimension__cdr_serialize+0x38>
 8015012:	b570      	push	{r4, r5, r6, lr}
 8015014:	6806      	ldr	r6, [r0, #0]
 8015016:	460d      	mov	r5, r1
 8015018:	4604      	mov	r4, r0
 801501a:	b196      	cbz	r6, 8015042 <_MultiArrayDimension__cdr_serialize+0x32>
 801501c:	4630      	mov	r0, r6
 801501e:	f7eb f957 	bl	80002d0 <strlen>
 8015022:	1c42      	adds	r2, r0, #1
 8015024:	6060      	str	r0, [r4, #4]
 8015026:	4631      	mov	r1, r6
 8015028:	4628      	mov	r0, r5
 801502a:	f7f7 fb17 	bl	800c65c <ucdr_serialize_sequence_char>
 801502e:	68e1      	ldr	r1, [r4, #12]
 8015030:	4628      	mov	r0, r5
 8015032:	f7f6 fbf9 	bl	800b828 <ucdr_serialize_uint32_t>
 8015036:	6921      	ldr	r1, [r4, #16]
 8015038:	4628      	mov	r0, r5
 801503a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801503e:	f7f6 bbf3 	b.w	800b828 <ucdr_serialize_uint32_t>
 8015042:	4632      	mov	r2, r6
 8015044:	4630      	mov	r0, r6
 8015046:	e7ed      	b.n	8015024 <_MultiArrayDimension__cdr_serialize+0x14>
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop

0801504c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801504c:	b570      	push	{r4, r5, r6, lr}
 801504e:	4604      	mov	r4, r0
 8015050:	b1b0      	cbz	r0, 8015080 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8015052:	460d      	mov	r5, r1
 8015054:	4628      	mov	r0, r5
 8015056:	2104      	movs	r1, #4
 8015058:	f7f7 fa94 	bl	800c584 <ucdr_alignment>
 801505c:	6863      	ldr	r3, [r4, #4]
 801505e:	1d6e      	adds	r6, r5, #5
 8015060:	441e      	add	r6, r3
 8015062:	4406      	add	r6, r0
 8015064:	2104      	movs	r1, #4
 8015066:	4630      	mov	r0, r6
 8015068:	f7f7 fa8c 	bl	800c584 <ucdr_alignment>
 801506c:	1d04      	adds	r4, r0, #4
 801506e:	4434      	add	r4, r6
 8015070:	2104      	movs	r1, #4
 8015072:	4620      	mov	r0, r4
 8015074:	f7f7 fa86 	bl	800c584 <ucdr_alignment>
 8015078:	f1c5 0504 	rsb	r5, r5, #4
 801507c:	4405      	add	r5, r0
 801507e:	1928      	adds	r0, r5, r4
 8015080:	bd70      	pop	{r4, r5, r6, pc}
 8015082:	bf00      	nop

08015084 <_MultiArrayDimension__cdr_deserialize>:
 8015084:	b570      	push	{r4, r5, r6, lr}
 8015086:	460c      	mov	r4, r1
 8015088:	b082      	sub	sp, #8
 801508a:	b1d9      	cbz	r1, 80150c4 <_MultiArrayDimension__cdr_deserialize+0x40>
 801508c:	688e      	ldr	r6, [r1, #8]
 801508e:	6809      	ldr	r1, [r1, #0]
 8015090:	ab01      	add	r3, sp, #4
 8015092:	4632      	mov	r2, r6
 8015094:	4605      	mov	r5, r0
 8015096:	f7f7 faf3 	bl	800c680 <ucdr_deserialize_sequence_char>
 801509a:	9b01      	ldr	r3, [sp, #4]
 801509c:	b970      	cbnz	r0, 80150bc <_MultiArrayDimension__cdr_deserialize+0x38>
 801509e:	429e      	cmp	r6, r3
 80150a0:	d313      	bcc.n	80150ca <_MultiArrayDimension__cdr_deserialize+0x46>
 80150a2:	f104 010c 	add.w	r1, r4, #12
 80150a6:	4628      	mov	r0, r5
 80150a8:	f7f6 fce8 	bl	800ba7c <ucdr_deserialize_uint32_t>
 80150ac:	f104 0110 	add.w	r1, r4, #16
 80150b0:	4628      	mov	r0, r5
 80150b2:	b002      	add	sp, #8
 80150b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150b8:	f7f6 bce0 	b.w	800ba7c <ucdr_deserialize_uint32_t>
 80150bc:	b103      	cbz	r3, 80150c0 <_MultiArrayDimension__cdr_deserialize+0x3c>
 80150be:	3b01      	subs	r3, #1
 80150c0:	6063      	str	r3, [r4, #4]
 80150c2:	e7ee      	b.n	80150a2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80150c4:	4608      	mov	r0, r1
 80150c6:	b002      	add	sp, #8
 80150c8:	bd70      	pop	{r4, r5, r6, pc}
 80150ca:	2101      	movs	r1, #1
 80150cc:	75a8      	strb	r0, [r5, #22]
 80150ce:	7569      	strb	r1, [r5, #21]
 80150d0:	6060      	str	r0, [r4, #4]
 80150d2:	4628      	mov	r0, r5
 80150d4:	f7f7 fa6c 	bl	800c5b0 <ucdr_align_to>
 80150d8:	9901      	ldr	r1, [sp, #4]
 80150da:	4628      	mov	r0, r5
 80150dc:	f7f7 fa9e 	bl	800c61c <ucdr_advance_buffer>
 80150e0:	e7df      	b.n	80150a2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80150e2:	bf00      	nop

080150e4 <_MultiArrayDimension__max_serialized_size>:
 80150e4:	b510      	push	{r4, lr}
 80150e6:	2104      	movs	r1, #4
 80150e8:	2000      	movs	r0, #0
 80150ea:	f7f7 fa4b 	bl	800c584 <ucdr_alignment>
 80150ee:	1d04      	adds	r4, r0, #4
 80150f0:	2104      	movs	r1, #4
 80150f2:	4620      	mov	r0, r4
 80150f4:	f7f7 fa46 	bl	800c584 <ucdr_alignment>
 80150f8:	3004      	adds	r0, #4
 80150fa:	4420      	add	r0, r4
 80150fc:	bd10      	pop	{r4, pc}
 80150fe:	bf00      	nop

08015100 <_MultiArrayDimension__get_serialized_size>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4604      	mov	r4, r0
 8015104:	b190      	cbz	r0, 801512c <_MultiArrayDimension__get_serialized_size+0x2c>
 8015106:	2104      	movs	r1, #4
 8015108:	2000      	movs	r0, #0
 801510a:	f7f7 fa3b 	bl	800c584 <ucdr_alignment>
 801510e:	6865      	ldr	r5, [r4, #4]
 8015110:	3505      	adds	r5, #5
 8015112:	4405      	add	r5, r0
 8015114:	2104      	movs	r1, #4
 8015116:	4628      	mov	r0, r5
 8015118:	f7f7 fa34 	bl	800c584 <ucdr_alignment>
 801511c:	1d04      	adds	r4, r0, #4
 801511e:	442c      	add	r4, r5
 8015120:	2104      	movs	r1, #4
 8015122:	4620      	mov	r0, r4
 8015124:	f7f7 fa2e 	bl	800c584 <ucdr_alignment>
 8015128:	3004      	adds	r0, #4
 801512a:	4420      	add	r0, r4
 801512c:	bd38      	pop	{r3, r4, r5, pc}
 801512e:	bf00      	nop

08015130 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8015130:	4800      	ldr	r0, [pc, #0]	@ (8015134 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8015132:	4770      	bx	lr
 8015134:	20000e70 	.word	0x20000e70

08015138 <ucdr_serialize_endian_array_char>:
 8015138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801513c:	4619      	mov	r1, r3
 801513e:	461f      	mov	r7, r3
 8015140:	4605      	mov	r5, r0
 8015142:	4690      	mov	r8, r2
 8015144:	f7f7 f9c6 	bl	800c4d4 <ucdr_check_buffer_available_for>
 8015148:	b9e0      	cbnz	r0, 8015184 <ucdr_serialize_endian_array_char+0x4c>
 801514a:	463e      	mov	r6, r7
 801514c:	e009      	b.n	8015162 <ucdr_serialize_endian_array_char+0x2a>
 801514e:	68a8      	ldr	r0, [r5, #8]
 8015150:	f002 fd3f 	bl	8017bd2 <memcpy>
 8015154:	68ab      	ldr	r3, [r5, #8]
 8015156:	6928      	ldr	r0, [r5, #16]
 8015158:	4423      	add	r3, r4
 801515a:	4420      	add	r0, r4
 801515c:	1b36      	subs	r6, r6, r4
 801515e:	60ab      	str	r3, [r5, #8]
 8015160:	6128      	str	r0, [r5, #16]
 8015162:	2201      	movs	r2, #1
 8015164:	4631      	mov	r1, r6
 8015166:	4628      	mov	r0, r5
 8015168:	f7f7 fa3c 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 801516c:	1bb9      	subs	r1, r7, r6
 801516e:	4604      	mov	r4, r0
 8015170:	4602      	mov	r2, r0
 8015172:	4441      	add	r1, r8
 8015174:	2800      	cmp	r0, #0
 8015176:	d1ea      	bne.n	801514e <ucdr_serialize_endian_array_char+0x16>
 8015178:	2301      	movs	r3, #1
 801517a:	7da8      	ldrb	r0, [r5, #22]
 801517c:	756b      	strb	r3, [r5, #21]
 801517e:	4058      	eors	r0, r3
 8015180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015184:	463a      	mov	r2, r7
 8015186:	68a8      	ldr	r0, [r5, #8]
 8015188:	4641      	mov	r1, r8
 801518a:	f002 fd22 	bl	8017bd2 <memcpy>
 801518e:	68aa      	ldr	r2, [r5, #8]
 8015190:	692b      	ldr	r3, [r5, #16]
 8015192:	443a      	add	r2, r7
 8015194:	443b      	add	r3, r7
 8015196:	60aa      	str	r2, [r5, #8]
 8015198:	612b      	str	r3, [r5, #16]
 801519a:	e7ed      	b.n	8015178 <ucdr_serialize_endian_array_char+0x40>

0801519c <ucdr_deserialize_endian_array_char>:
 801519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a0:	4619      	mov	r1, r3
 80151a2:	461f      	mov	r7, r3
 80151a4:	4605      	mov	r5, r0
 80151a6:	4690      	mov	r8, r2
 80151a8:	f7f7 f994 	bl	800c4d4 <ucdr_check_buffer_available_for>
 80151ac:	b9e0      	cbnz	r0, 80151e8 <ucdr_deserialize_endian_array_char+0x4c>
 80151ae:	463e      	mov	r6, r7
 80151b0:	e009      	b.n	80151c6 <ucdr_deserialize_endian_array_char+0x2a>
 80151b2:	68a9      	ldr	r1, [r5, #8]
 80151b4:	f002 fd0d 	bl	8017bd2 <memcpy>
 80151b8:	68aa      	ldr	r2, [r5, #8]
 80151ba:	692b      	ldr	r3, [r5, #16]
 80151bc:	4422      	add	r2, r4
 80151be:	4423      	add	r3, r4
 80151c0:	1b36      	subs	r6, r6, r4
 80151c2:	60aa      	str	r2, [r5, #8]
 80151c4:	612b      	str	r3, [r5, #16]
 80151c6:	2201      	movs	r2, #1
 80151c8:	4631      	mov	r1, r6
 80151ca:	4628      	mov	r0, r5
 80151cc:	f7f7 fa0a 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 80151d0:	4604      	mov	r4, r0
 80151d2:	1bb8      	subs	r0, r7, r6
 80151d4:	4622      	mov	r2, r4
 80151d6:	4440      	add	r0, r8
 80151d8:	2c00      	cmp	r4, #0
 80151da:	d1ea      	bne.n	80151b2 <ucdr_deserialize_endian_array_char+0x16>
 80151dc:	2301      	movs	r3, #1
 80151de:	7da8      	ldrb	r0, [r5, #22]
 80151e0:	756b      	strb	r3, [r5, #21]
 80151e2:	4058      	eors	r0, r3
 80151e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e8:	463a      	mov	r2, r7
 80151ea:	68a9      	ldr	r1, [r5, #8]
 80151ec:	4640      	mov	r0, r8
 80151ee:	f002 fcf0 	bl	8017bd2 <memcpy>
 80151f2:	68aa      	ldr	r2, [r5, #8]
 80151f4:	692b      	ldr	r3, [r5, #16]
 80151f6:	443a      	add	r2, r7
 80151f8:	443b      	add	r3, r7
 80151fa:	60aa      	str	r2, [r5, #8]
 80151fc:	612b      	str	r3, [r5, #16]
 80151fe:	e7ed      	b.n	80151dc <ucdr_deserialize_endian_array_char+0x40>

08015200 <ucdr_serialize_array_uint8_t>:
 8015200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015204:	4688      	mov	r8, r1
 8015206:	4611      	mov	r1, r2
 8015208:	4617      	mov	r7, r2
 801520a:	4605      	mov	r5, r0
 801520c:	f7f7 f962 	bl	800c4d4 <ucdr_check_buffer_available_for>
 8015210:	b9e0      	cbnz	r0, 801524c <ucdr_serialize_array_uint8_t+0x4c>
 8015212:	463e      	mov	r6, r7
 8015214:	e009      	b.n	801522a <ucdr_serialize_array_uint8_t+0x2a>
 8015216:	68a8      	ldr	r0, [r5, #8]
 8015218:	f002 fcdb 	bl	8017bd2 <memcpy>
 801521c:	68aa      	ldr	r2, [r5, #8]
 801521e:	692b      	ldr	r3, [r5, #16]
 8015220:	4422      	add	r2, r4
 8015222:	4423      	add	r3, r4
 8015224:	1b36      	subs	r6, r6, r4
 8015226:	60aa      	str	r2, [r5, #8]
 8015228:	612b      	str	r3, [r5, #16]
 801522a:	2201      	movs	r2, #1
 801522c:	4631      	mov	r1, r6
 801522e:	4628      	mov	r0, r5
 8015230:	f7f7 f9d8 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 8015234:	1bb9      	subs	r1, r7, r6
 8015236:	4604      	mov	r4, r0
 8015238:	4602      	mov	r2, r0
 801523a:	4441      	add	r1, r8
 801523c:	2800      	cmp	r0, #0
 801523e:	d1ea      	bne.n	8015216 <ucdr_serialize_array_uint8_t+0x16>
 8015240:	2301      	movs	r3, #1
 8015242:	7da8      	ldrb	r0, [r5, #22]
 8015244:	756b      	strb	r3, [r5, #21]
 8015246:	4058      	eors	r0, r3
 8015248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801524c:	463a      	mov	r2, r7
 801524e:	68a8      	ldr	r0, [r5, #8]
 8015250:	4641      	mov	r1, r8
 8015252:	f002 fcbe 	bl	8017bd2 <memcpy>
 8015256:	68aa      	ldr	r2, [r5, #8]
 8015258:	692b      	ldr	r3, [r5, #16]
 801525a:	443a      	add	r2, r7
 801525c:	443b      	add	r3, r7
 801525e:	60aa      	str	r2, [r5, #8]
 8015260:	612b      	str	r3, [r5, #16]
 8015262:	e7ed      	b.n	8015240 <ucdr_serialize_array_uint8_t+0x40>

08015264 <ucdr_serialize_endian_array_uint8_t>:
 8015264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015268:	4619      	mov	r1, r3
 801526a:	461f      	mov	r7, r3
 801526c:	4605      	mov	r5, r0
 801526e:	4690      	mov	r8, r2
 8015270:	f7f7 f930 	bl	800c4d4 <ucdr_check_buffer_available_for>
 8015274:	b9e0      	cbnz	r0, 80152b0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015276:	463e      	mov	r6, r7
 8015278:	e009      	b.n	801528e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801527a:	68a8      	ldr	r0, [r5, #8]
 801527c:	f002 fca9 	bl	8017bd2 <memcpy>
 8015280:	68ab      	ldr	r3, [r5, #8]
 8015282:	6928      	ldr	r0, [r5, #16]
 8015284:	4423      	add	r3, r4
 8015286:	4420      	add	r0, r4
 8015288:	1b36      	subs	r6, r6, r4
 801528a:	60ab      	str	r3, [r5, #8]
 801528c:	6128      	str	r0, [r5, #16]
 801528e:	2201      	movs	r2, #1
 8015290:	4631      	mov	r1, r6
 8015292:	4628      	mov	r0, r5
 8015294:	f7f7 f9a6 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 8015298:	1bb9      	subs	r1, r7, r6
 801529a:	4604      	mov	r4, r0
 801529c:	4602      	mov	r2, r0
 801529e:	4441      	add	r1, r8
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d1ea      	bne.n	801527a <ucdr_serialize_endian_array_uint8_t+0x16>
 80152a4:	2301      	movs	r3, #1
 80152a6:	7da8      	ldrb	r0, [r5, #22]
 80152a8:	756b      	strb	r3, [r5, #21]
 80152aa:	4058      	eors	r0, r3
 80152ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b0:	463a      	mov	r2, r7
 80152b2:	68a8      	ldr	r0, [r5, #8]
 80152b4:	4641      	mov	r1, r8
 80152b6:	f002 fc8c 	bl	8017bd2 <memcpy>
 80152ba:	68aa      	ldr	r2, [r5, #8]
 80152bc:	692b      	ldr	r3, [r5, #16]
 80152be:	443a      	add	r2, r7
 80152c0:	443b      	add	r3, r7
 80152c2:	60aa      	str	r2, [r5, #8]
 80152c4:	612b      	str	r3, [r5, #16]
 80152c6:	e7ed      	b.n	80152a4 <ucdr_serialize_endian_array_uint8_t+0x40>

080152c8 <ucdr_deserialize_array_uint8_t>:
 80152c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152cc:	4688      	mov	r8, r1
 80152ce:	4611      	mov	r1, r2
 80152d0:	4617      	mov	r7, r2
 80152d2:	4605      	mov	r5, r0
 80152d4:	f7f7 f8fe 	bl	800c4d4 <ucdr_check_buffer_available_for>
 80152d8:	b9e0      	cbnz	r0, 8015314 <ucdr_deserialize_array_uint8_t+0x4c>
 80152da:	463e      	mov	r6, r7
 80152dc:	e009      	b.n	80152f2 <ucdr_deserialize_array_uint8_t+0x2a>
 80152de:	68a9      	ldr	r1, [r5, #8]
 80152e0:	f002 fc77 	bl	8017bd2 <memcpy>
 80152e4:	68aa      	ldr	r2, [r5, #8]
 80152e6:	692b      	ldr	r3, [r5, #16]
 80152e8:	4422      	add	r2, r4
 80152ea:	4423      	add	r3, r4
 80152ec:	1b36      	subs	r6, r6, r4
 80152ee:	60aa      	str	r2, [r5, #8]
 80152f0:	612b      	str	r3, [r5, #16]
 80152f2:	2201      	movs	r2, #1
 80152f4:	4631      	mov	r1, r6
 80152f6:	4628      	mov	r0, r5
 80152f8:	f7f7 f974 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 80152fc:	4604      	mov	r4, r0
 80152fe:	1bb8      	subs	r0, r7, r6
 8015300:	4622      	mov	r2, r4
 8015302:	4440      	add	r0, r8
 8015304:	2c00      	cmp	r4, #0
 8015306:	d1ea      	bne.n	80152de <ucdr_deserialize_array_uint8_t+0x16>
 8015308:	2301      	movs	r3, #1
 801530a:	7da8      	ldrb	r0, [r5, #22]
 801530c:	756b      	strb	r3, [r5, #21]
 801530e:	4058      	eors	r0, r3
 8015310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015314:	463a      	mov	r2, r7
 8015316:	68a9      	ldr	r1, [r5, #8]
 8015318:	4640      	mov	r0, r8
 801531a:	f002 fc5a 	bl	8017bd2 <memcpy>
 801531e:	68aa      	ldr	r2, [r5, #8]
 8015320:	692b      	ldr	r3, [r5, #16]
 8015322:	443a      	add	r2, r7
 8015324:	443b      	add	r3, r7
 8015326:	60aa      	str	r2, [r5, #8]
 8015328:	612b      	str	r3, [r5, #16]
 801532a:	e7ed      	b.n	8015308 <ucdr_deserialize_array_uint8_t+0x40>

0801532c <ucdr_deserialize_endian_array_uint8_t>:
 801532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015330:	4619      	mov	r1, r3
 8015332:	461f      	mov	r7, r3
 8015334:	4605      	mov	r5, r0
 8015336:	4690      	mov	r8, r2
 8015338:	f7f7 f8cc 	bl	800c4d4 <ucdr_check_buffer_available_for>
 801533c:	b9e0      	cbnz	r0, 8015378 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801533e:	463e      	mov	r6, r7
 8015340:	e009      	b.n	8015356 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015342:	68a9      	ldr	r1, [r5, #8]
 8015344:	f002 fc45 	bl	8017bd2 <memcpy>
 8015348:	68aa      	ldr	r2, [r5, #8]
 801534a:	692b      	ldr	r3, [r5, #16]
 801534c:	4422      	add	r2, r4
 801534e:	4423      	add	r3, r4
 8015350:	1b36      	subs	r6, r6, r4
 8015352:	60aa      	str	r2, [r5, #8]
 8015354:	612b      	str	r3, [r5, #16]
 8015356:	2201      	movs	r2, #1
 8015358:	4631      	mov	r1, r6
 801535a:	4628      	mov	r0, r5
 801535c:	f7f7 f942 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 8015360:	4604      	mov	r4, r0
 8015362:	1bb8      	subs	r0, r7, r6
 8015364:	4622      	mov	r2, r4
 8015366:	4440      	add	r0, r8
 8015368:	2c00      	cmp	r4, #0
 801536a:	d1ea      	bne.n	8015342 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801536c:	2301      	movs	r3, #1
 801536e:	7da8      	ldrb	r0, [r5, #22]
 8015370:	756b      	strb	r3, [r5, #21]
 8015372:	4058      	eors	r0, r3
 8015374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015378:	463a      	mov	r2, r7
 801537a:	68a9      	ldr	r1, [r5, #8]
 801537c:	4640      	mov	r0, r8
 801537e:	f002 fc28 	bl	8017bd2 <memcpy>
 8015382:	68aa      	ldr	r2, [r5, #8]
 8015384:	692b      	ldr	r3, [r5, #16]
 8015386:	443a      	add	r2, r7
 8015388:	443b      	add	r3, r7
 801538a:	60aa      	str	r2, [r5, #8]
 801538c:	612b      	str	r3, [r5, #16]
 801538e:	e7ed      	b.n	801536c <ucdr_deserialize_endian_array_uint8_t+0x40>

08015390 <ucdr_serialize_endian_array_int32_t>:
 8015390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015394:	4688      	mov	r8, r1
 8015396:	2104      	movs	r1, #4
 8015398:	4604      	mov	r4, r0
 801539a:	4616      	mov	r6, r2
 801539c:	461f      	mov	r7, r3
 801539e:	f7f7 f8f9 	bl	800c594 <ucdr_buffer_alignment>
 80153a2:	4601      	mov	r1, r0
 80153a4:	4620      	mov	r0, r4
 80153a6:	7d65      	ldrb	r5, [r4, #21]
 80153a8:	f7f7 f938 	bl	800c61c <ucdr_advance_buffer>
 80153ac:	f1b8 0f01 	cmp.w	r8, #1
 80153b0:	7565      	strb	r5, [r4, #21]
 80153b2:	d010      	beq.n	80153d6 <ucdr_serialize_endian_array_int32_t+0x46>
 80153b4:	b157      	cbz	r7, 80153cc <ucdr_serialize_endian_array_int32_t+0x3c>
 80153b6:	3e04      	subs	r6, #4
 80153b8:	2500      	movs	r5, #0
 80153ba:	f856 2f04 	ldr.w	r2, [r6, #4]!
 80153be:	4641      	mov	r1, r8
 80153c0:	4620      	mov	r0, r4
 80153c2:	3501      	adds	r5, #1
 80153c4:	f7f6 fedc 	bl	800c180 <ucdr_serialize_endian_int32_t>
 80153c8:	42af      	cmp	r7, r5
 80153ca:	d1f6      	bne.n	80153ba <ucdr_serialize_endian_array_int32_t+0x2a>
 80153cc:	7da0      	ldrb	r0, [r4, #22]
 80153ce:	f080 0001 	eor.w	r0, r0, #1
 80153d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153d6:	00bf      	lsls	r7, r7, #2
 80153d8:	4639      	mov	r1, r7
 80153da:	4620      	mov	r0, r4
 80153dc:	f7f7 f87a 	bl	800c4d4 <ucdr_check_buffer_available_for>
 80153e0:	b9f8      	cbnz	r0, 8015422 <ucdr_serialize_endian_array_int32_t+0x92>
 80153e2:	46b8      	mov	r8, r7
 80153e4:	e00a      	b.n	80153fc <ucdr_serialize_endian_array_int32_t+0x6c>
 80153e6:	68a0      	ldr	r0, [r4, #8]
 80153e8:	f002 fbf3 	bl	8017bd2 <memcpy>
 80153ec:	68a2      	ldr	r2, [r4, #8]
 80153ee:	6923      	ldr	r3, [r4, #16]
 80153f0:	442a      	add	r2, r5
 80153f2:	442b      	add	r3, r5
 80153f4:	eba8 0805 	sub.w	r8, r8, r5
 80153f8:	60a2      	str	r2, [r4, #8]
 80153fa:	6123      	str	r3, [r4, #16]
 80153fc:	2204      	movs	r2, #4
 80153fe:	4641      	mov	r1, r8
 8015400:	4620      	mov	r0, r4
 8015402:	f7f7 f8ef 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 8015406:	eba7 0108 	sub.w	r1, r7, r8
 801540a:	4605      	mov	r5, r0
 801540c:	4602      	mov	r2, r0
 801540e:	4431      	add	r1, r6
 8015410:	2800      	cmp	r0, #0
 8015412:	d1e8      	bne.n	80153e6 <ucdr_serialize_endian_array_int32_t+0x56>
 8015414:	7da0      	ldrb	r0, [r4, #22]
 8015416:	2304      	movs	r3, #4
 8015418:	7563      	strb	r3, [r4, #21]
 801541a:	f080 0001 	eor.w	r0, r0, #1
 801541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015422:	463a      	mov	r2, r7
 8015424:	68a0      	ldr	r0, [r4, #8]
 8015426:	4631      	mov	r1, r6
 8015428:	f002 fbd3 	bl	8017bd2 <memcpy>
 801542c:	68a2      	ldr	r2, [r4, #8]
 801542e:	6923      	ldr	r3, [r4, #16]
 8015430:	443a      	add	r2, r7
 8015432:	443b      	add	r3, r7
 8015434:	60a2      	str	r2, [r4, #8]
 8015436:	6123      	str	r3, [r4, #16]
 8015438:	e7ec      	b.n	8015414 <ucdr_serialize_endian_array_int32_t+0x84>
 801543a:	bf00      	nop

0801543c <ucdr_deserialize_endian_array_int32_t>:
 801543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015440:	4688      	mov	r8, r1
 8015442:	2104      	movs	r1, #4
 8015444:	4605      	mov	r5, r0
 8015446:	4614      	mov	r4, r2
 8015448:	461f      	mov	r7, r3
 801544a:	f7f7 f8a3 	bl	800c594 <ucdr_buffer_alignment>
 801544e:	4601      	mov	r1, r0
 8015450:	4628      	mov	r0, r5
 8015452:	7d6e      	ldrb	r6, [r5, #21]
 8015454:	f7f7 f8e2 	bl	800c61c <ucdr_advance_buffer>
 8015458:	f1b8 0f01 	cmp.w	r8, #1
 801545c:	756e      	strb	r6, [r5, #21]
 801545e:	d010      	beq.n	8015482 <ucdr_deserialize_endian_array_int32_t+0x46>
 8015460:	2600      	movs	r6, #0
 8015462:	b14f      	cbz	r7, 8015478 <ucdr_deserialize_endian_array_int32_t+0x3c>
 8015464:	4622      	mov	r2, r4
 8015466:	4641      	mov	r1, r8
 8015468:	4628      	mov	r0, r5
 801546a:	3601      	adds	r6, #1
 801546c:	f7f6 ffa6 	bl	800c3bc <ucdr_deserialize_endian_int32_t>
 8015470:	42b7      	cmp	r7, r6
 8015472:	f104 0404 	add.w	r4, r4, #4
 8015476:	d1f5      	bne.n	8015464 <ucdr_deserialize_endian_array_int32_t+0x28>
 8015478:	7da8      	ldrb	r0, [r5, #22]
 801547a:	f080 0001 	eor.w	r0, r0, #1
 801547e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015482:	00bf      	lsls	r7, r7, #2
 8015484:	4639      	mov	r1, r7
 8015486:	4628      	mov	r0, r5
 8015488:	f7f7 f824 	bl	800c4d4 <ucdr_check_buffer_available_for>
 801548c:	b9f8      	cbnz	r0, 80154ce <ucdr_deserialize_endian_array_int32_t+0x92>
 801548e:	46b8      	mov	r8, r7
 8015490:	e00a      	b.n	80154a8 <ucdr_deserialize_endian_array_int32_t+0x6c>
 8015492:	68a9      	ldr	r1, [r5, #8]
 8015494:	f002 fb9d 	bl	8017bd2 <memcpy>
 8015498:	68aa      	ldr	r2, [r5, #8]
 801549a:	692b      	ldr	r3, [r5, #16]
 801549c:	4432      	add	r2, r6
 801549e:	4433      	add	r3, r6
 80154a0:	eba8 0806 	sub.w	r8, r8, r6
 80154a4:	60aa      	str	r2, [r5, #8]
 80154a6:	612b      	str	r3, [r5, #16]
 80154a8:	2204      	movs	r2, #4
 80154aa:	4641      	mov	r1, r8
 80154ac:	4628      	mov	r0, r5
 80154ae:	f7f7 f899 	bl	800c5e4 <ucdr_check_final_buffer_behavior_array>
 80154b2:	4606      	mov	r6, r0
 80154b4:	eba7 0008 	sub.w	r0, r7, r8
 80154b8:	4632      	mov	r2, r6
 80154ba:	4420      	add	r0, r4
 80154bc:	2e00      	cmp	r6, #0
 80154be:	d1e8      	bne.n	8015492 <ucdr_deserialize_endian_array_int32_t+0x56>
 80154c0:	7da8      	ldrb	r0, [r5, #22]
 80154c2:	2304      	movs	r3, #4
 80154c4:	756b      	strb	r3, [r5, #21]
 80154c6:	f080 0001 	eor.w	r0, r0, #1
 80154ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ce:	463a      	mov	r2, r7
 80154d0:	68a9      	ldr	r1, [r5, #8]
 80154d2:	4620      	mov	r0, r4
 80154d4:	f002 fb7d 	bl	8017bd2 <memcpy>
 80154d8:	68aa      	ldr	r2, [r5, #8]
 80154da:	692b      	ldr	r3, [r5, #16]
 80154dc:	443a      	add	r2, r7
 80154de:	443b      	add	r3, r7
 80154e0:	60aa      	str	r2, [r5, #8]
 80154e2:	612b      	str	r3, [r5, #16]
 80154e4:	e7ec      	b.n	80154c0 <ucdr_deserialize_endian_array_int32_t+0x84>
 80154e6:	bf00      	nop

080154e8 <ucdr_serialize_string>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4605      	mov	r5, r0
 80154ec:	4608      	mov	r0, r1
 80154ee:	460c      	mov	r4, r1
 80154f0:	f7ea feee 	bl	80002d0 <strlen>
 80154f4:	4621      	mov	r1, r4
 80154f6:	1c42      	adds	r2, r0, #1
 80154f8:	4628      	mov	r0, r5
 80154fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154fe:	f7f7 b8ad 	b.w	800c65c <ucdr_serialize_sequence_char>
 8015502:	bf00      	nop

08015504 <ucdr_deserialize_string>:
 8015504:	b500      	push	{lr}
 8015506:	b083      	sub	sp, #12
 8015508:	ab01      	add	r3, sp, #4
 801550a:	f7f7 f8b9 	bl	800c680 <ucdr_deserialize_sequence_char>
 801550e:	b003      	add	sp, #12
 8015510:	f85d fb04 	ldr.w	pc, [sp], #4

08015514 <uxr_init_input_best_effort_stream>:
 8015514:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015518:	8003      	strh	r3, [r0, #0]
 801551a:	4770      	bx	lr

0801551c <uxr_reset_input_best_effort_stream>:
 801551c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015520:	8003      	strh	r3, [r0, #0]
 8015522:	4770      	bx	lr

08015524 <uxr_receive_best_effort_message>:
 8015524:	b538      	push	{r3, r4, r5, lr}
 8015526:	4604      	mov	r4, r0
 8015528:	8800      	ldrh	r0, [r0, #0]
 801552a:	460d      	mov	r5, r1
 801552c:	f000 fe5e 	bl	80161ec <uxr_seq_num_cmp>
 8015530:	4603      	mov	r3, r0
 8015532:	2b00      	cmp	r3, #0
 8015534:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015538:	bfb8      	it	lt
 801553a:	8025      	strhlt	r5, [r4, #0]
 801553c:	bd38      	pop	{r3, r4, r5, pc}
 801553e:	bf00      	nop

08015540 <on_full_input_buffer>:
 8015540:	b570      	push	{r4, r5, r6, lr}
 8015542:	4605      	mov	r5, r0
 8015544:	460c      	mov	r4, r1
 8015546:	682b      	ldr	r3, [r5, #0]
 8015548:	6809      	ldr	r1, [r1, #0]
 801554a:	8920      	ldrh	r0, [r4, #8]
 801554c:	6862      	ldr	r2, [r4, #4]
 801554e:	fbb2 f2f0 	udiv	r2, r2, r0
 8015552:	1a5b      	subs	r3, r3, r1
 8015554:	fbb3 f3f2 	udiv	r3, r3, r2
 8015558:	3301      	adds	r3, #1
 801555a:	b29b      	uxth	r3, r3
 801555c:	fbb3 f6f0 	udiv	r6, r3, r0
 8015560:	fb00 3316 	mls	r3, r0, r6, r3
 8015564:	b29b      	uxth	r3, r3
 8015566:	fb02 f303 	mul.w	r3, r2, r3
 801556a:	1d18      	adds	r0, r3, #4
 801556c:	4408      	add	r0, r1
 801556e:	7d26      	ldrb	r6, [r4, #20]
 8015570:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015574:	b116      	cbz	r6, 801557c <on_full_input_buffer+0x3c>
 8015576:	2600      	movs	r6, #0
 8015578:	f840 6c04 	str.w	r6, [r0, #-4]
 801557c:	2a03      	cmp	r2, #3
 801557e:	d801      	bhi.n	8015584 <on_full_input_buffer+0x44>
 8015580:	2001      	movs	r0, #1
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	3308      	adds	r3, #8
 8015586:	4419      	add	r1, r3
 8015588:	4628      	mov	r0, r5
 801558a:	692b      	ldr	r3, [r5, #16]
 801558c:	3a04      	subs	r2, #4
 801558e:	f7f6 ffed 	bl	800c56c <ucdr_init_buffer_origin>
 8015592:	4628      	mov	r0, r5
 8015594:	4902      	ldr	r1, [pc, #8]	@ (80155a0 <on_full_input_buffer+0x60>)
 8015596:	4622      	mov	r2, r4
 8015598:	f7f6 ffc4 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 801559c:	2000      	movs	r0, #0
 801559e:	bd70      	pop	{r4, r5, r6, pc}
 80155a0:	08015541 	.word	0x08015541

080155a4 <uxr_init_input_reliable_stream>:
 80155a4:	b500      	push	{lr}
 80155a6:	e9c0 1200 	strd	r1, r2, [r0]
 80155aa:	f04f 0e00 	mov.w	lr, #0
 80155ae:	9a01      	ldr	r2, [sp, #4]
 80155b0:	8103      	strh	r3, [r0, #8]
 80155b2:	6102      	str	r2, [r0, #16]
 80155b4:	f880 e014 	strb.w	lr, [r0, #20]
 80155b8:	b1d3      	cbz	r3, 80155f0 <uxr_init_input_reliable_stream+0x4c>
 80155ba:	f8c1 e000 	str.w	lr, [r1]
 80155be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80155c2:	f1bc 0f01 	cmp.w	ip, #1
 80155c6:	d913      	bls.n	80155f0 <uxr_init_input_reliable_stream+0x4c>
 80155c8:	2301      	movs	r3, #1
 80155ca:	fbb3 f1fc 	udiv	r1, r3, ip
 80155ce:	fb0c 3111 	mls	r1, ip, r1, r3
 80155d2:	b289      	uxth	r1, r1
 80155d4:	6842      	ldr	r2, [r0, #4]
 80155d6:	fbb2 f2fc 	udiv	r2, r2, ip
 80155da:	fb01 f202 	mul.w	r2, r1, r2
 80155de:	6801      	ldr	r1, [r0, #0]
 80155e0:	f841 e002 	str.w	lr, [r1, r2]
 80155e4:	3301      	adds	r3, #1
 80155e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	459c      	cmp	ip, r3
 80155ee:	d8ec      	bhi.n	80155ca <uxr_init_input_reliable_stream+0x26>
 80155f0:	f04f 33ff 	mov.w	r3, #4294967295
 80155f4:	60c3      	str	r3, [r0, #12]
 80155f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80155fa:	bf00      	nop

080155fc <uxr_reset_input_reliable_stream>:
 80155fc:	8901      	ldrh	r1, [r0, #8]
 80155fe:	b1e9      	cbz	r1, 801563c <uxr_reset_input_reliable_stream+0x40>
 8015600:	f04f 0c00 	mov.w	ip, #0
 8015604:	b500      	push	{lr}
 8015606:	4663      	mov	r3, ip
 8015608:	46e6      	mov	lr, ip
 801560a:	fbb3 f2f1 	udiv	r2, r3, r1
 801560e:	fb01 3312 	mls	r3, r1, r2, r3
 8015612:	b29b      	uxth	r3, r3
 8015614:	6842      	ldr	r2, [r0, #4]
 8015616:	fbb2 f2f1 	udiv	r2, r2, r1
 801561a:	fb03 f202 	mul.w	r2, r3, r2
 801561e:	6803      	ldr	r3, [r0, #0]
 8015620:	f843 e002 	str.w	lr, [r3, r2]
 8015624:	f10c 0c01 	add.w	ip, ip, #1
 8015628:	8901      	ldrh	r1, [r0, #8]
 801562a:	fa1f f38c 	uxth.w	r3, ip
 801562e:	4299      	cmp	r1, r3
 8015630:	d8eb      	bhi.n	801560a <uxr_reset_input_reliable_stream+0xe>
 8015632:	f04f 33ff 	mov.w	r3, #4294967295
 8015636:	60c3      	str	r3, [r0, #12]
 8015638:	f85d fb04 	ldr.w	pc, [sp], #4
 801563c:	f04f 33ff 	mov.w	r3, #4294967295
 8015640:	60c3      	str	r3, [r0, #12]
 8015642:	4770      	bx	lr

08015644 <uxr_receive_reliable_message>:
 8015644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015648:	4604      	mov	r4, r0
 801564a:	460d      	mov	r5, r1
 801564c:	8901      	ldrh	r1, [r0, #8]
 801564e:	8980      	ldrh	r0, [r0, #12]
 8015650:	4690      	mov	r8, r2
 8015652:	461f      	mov	r7, r3
 8015654:	f000 fdc2 	bl	80161dc <uxr_seq_num_add>
 8015658:	4629      	mov	r1, r5
 801565a:	4606      	mov	r6, r0
 801565c:	89a0      	ldrh	r0, [r4, #12]
 801565e:	f000 fdc5 	bl	80161ec <uxr_seq_num_cmp>
 8015662:	2800      	cmp	r0, #0
 8015664:	db0a      	blt.n	801567c <uxr_receive_reliable_message+0x38>
 8015666:	2600      	movs	r6, #0
 8015668:	89e0      	ldrh	r0, [r4, #14]
 801566a:	4629      	mov	r1, r5
 801566c:	f000 fdbe 	bl	80161ec <uxr_seq_num_cmp>
 8015670:	2800      	cmp	r0, #0
 8015672:	bfb8      	it	lt
 8015674:	81e5      	strhlt	r5, [r4, #14]
 8015676:	4630      	mov	r0, r6
 8015678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801567c:	4630      	mov	r0, r6
 801567e:	4629      	mov	r1, r5
 8015680:	f000 fdb4 	bl	80161ec <uxr_seq_num_cmp>
 8015684:	2800      	cmp	r0, #0
 8015686:	dbee      	blt.n	8015666 <uxr_receive_reliable_message+0x22>
 8015688:	6923      	ldr	r3, [r4, #16]
 801568a:	4640      	mov	r0, r8
 801568c:	4798      	blx	r3
 801568e:	2101      	movs	r1, #1
 8015690:	4606      	mov	r6, r0
 8015692:	89a0      	ldrh	r0, [r4, #12]
 8015694:	f000 fda2 	bl	80161dc <uxr_seq_num_add>
 8015698:	b90e      	cbnz	r6, 801569e <uxr_receive_reliable_message+0x5a>
 801569a:	4285      	cmp	r5, r0
 801569c:	d046      	beq.n	801572c <uxr_receive_reliable_message+0xe8>
 801569e:	8921      	ldrh	r1, [r4, #8]
 80156a0:	fbb5 f2f1 	udiv	r2, r5, r1
 80156a4:	fb01 5212 	mls	r2, r1, r2, r5
 80156a8:	b292      	uxth	r2, r2
 80156aa:	6863      	ldr	r3, [r4, #4]
 80156ac:	6820      	ldr	r0, [r4, #0]
 80156ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80156b2:	fb02 f303 	mul.w	r3, r2, r3
 80156b6:	3304      	adds	r3, #4
 80156b8:	4418      	add	r0, r3
 80156ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d1d1      	bne.n	8015666 <uxr_receive_reliable_message+0x22>
 80156c2:	4641      	mov	r1, r8
 80156c4:	463a      	mov	r2, r7
 80156c6:	f002 fa84 	bl	8017bd2 <memcpy>
 80156ca:	8921      	ldrh	r1, [r4, #8]
 80156cc:	fbb5 f2f1 	udiv	r2, r5, r1
 80156d0:	fb01 5212 	mls	r2, r1, r2, r5
 80156d4:	b292      	uxth	r2, r2
 80156d6:	6863      	ldr	r3, [r4, #4]
 80156d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80156dc:	fb02 f303 	mul.w	r3, r2, r3
 80156e0:	6822      	ldr	r2, [r4, #0]
 80156e2:	50d7      	str	r7, [r2, r3]
 80156e4:	9a06      	ldr	r2, [sp, #24]
 80156e6:	2301      	movs	r3, #1
 80156e8:	7013      	strb	r3, [r2, #0]
 80156ea:	2e00      	cmp	r6, #0
 80156ec:	d0bb      	beq.n	8015666 <uxr_receive_reliable_message+0x22>
 80156ee:	89a6      	ldrh	r6, [r4, #12]
 80156f0:	2101      	movs	r1, #1
 80156f2:	4630      	mov	r0, r6
 80156f4:	f000 fd72 	bl	80161dc <uxr_seq_num_add>
 80156f8:	8921      	ldrh	r1, [r4, #8]
 80156fa:	fbb0 f2f1 	udiv	r2, r0, r1
 80156fe:	fb01 0212 	mls	r2, r1, r2, r0
 8015702:	b292      	uxth	r2, r2
 8015704:	6863      	ldr	r3, [r4, #4]
 8015706:	fbb3 f3f1 	udiv	r3, r3, r1
 801570a:	4606      	mov	r6, r0
 801570c:	fb02 f303 	mul.w	r3, r2, r3
 8015710:	6820      	ldr	r0, [r4, #0]
 8015712:	3304      	adds	r3, #4
 8015714:	4418      	add	r0, r3
 8015716:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d0a3      	beq.n	8015666 <uxr_receive_reliable_message+0x22>
 801571e:	6923      	ldr	r3, [r4, #16]
 8015720:	4798      	blx	r3
 8015722:	2802      	cmp	r0, #2
 8015724:	d005      	beq.n	8015732 <uxr_receive_reliable_message+0xee>
 8015726:	2801      	cmp	r0, #1
 8015728:	d0e2      	beq.n	80156f0 <uxr_receive_reliable_message+0xac>
 801572a:	e79c      	b.n	8015666 <uxr_receive_reliable_message+0x22>
 801572c:	9b06      	ldr	r3, [sp, #24]
 801572e:	81a5      	strh	r5, [r4, #12]
 8015730:	701e      	strb	r6, [r3, #0]
 8015732:	2601      	movs	r6, #1
 8015734:	e798      	b.n	8015668 <uxr_receive_reliable_message+0x24>
 8015736:	bf00      	nop

08015738 <uxr_next_input_reliable_buffer_available>:
 8015738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801573c:	4604      	mov	r4, r0
 801573e:	460f      	mov	r7, r1
 8015740:	8980      	ldrh	r0, [r0, #12]
 8015742:	2101      	movs	r1, #1
 8015744:	4690      	mov	r8, r2
 8015746:	f000 fd49 	bl	80161dc <uxr_seq_num_add>
 801574a:	8921      	ldrh	r1, [r4, #8]
 801574c:	fbb0 f2f1 	udiv	r2, r0, r1
 8015750:	fb01 0212 	mls	r2, r1, r2, r0
 8015754:	b292      	uxth	r2, r2
 8015756:	6863      	ldr	r3, [r4, #4]
 8015758:	6826      	ldr	r6, [r4, #0]
 801575a:	fbb3 f3f1 	udiv	r3, r3, r1
 801575e:	fb02 f303 	mul.w	r3, r2, r3
 8015762:	3304      	adds	r3, #4
 8015764:	441e      	add	r6, r3
 8015766:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801576a:	f1b9 0f00 	cmp.w	r9, #0
 801576e:	d023      	beq.n	80157b8 <uxr_next_input_reliable_buffer_available+0x80>
 8015770:	6923      	ldr	r3, [r4, #16]
 8015772:	4605      	mov	r5, r0
 8015774:	4630      	mov	r0, r6
 8015776:	4798      	blx	r3
 8015778:	4682      	mov	sl, r0
 801577a:	b300      	cbz	r0, 80157be <uxr_next_input_reliable_buffer_available+0x86>
 801577c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015780:	2101      	movs	r1, #1
 8015782:	4650      	mov	r0, sl
 8015784:	f000 fd2a 	bl	80161dc <uxr_seq_num_add>
 8015788:	8921      	ldrh	r1, [r4, #8]
 801578a:	fbb0 f2f1 	udiv	r2, r0, r1
 801578e:	4682      	mov	sl, r0
 8015790:	fb01 0212 	mls	r2, r1, r2, r0
 8015794:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015798:	b292      	uxth	r2, r2
 801579a:	fbb3 f3f1 	udiv	r3, r3, r1
 801579e:	fb02 f303 	mul.w	r3, r2, r3
 80157a2:	3304      	adds	r3, #4
 80157a4:	4418      	add	r0, r3
 80157a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80157aa:	b12b      	cbz	r3, 80157b8 <uxr_next_input_reliable_buffer_available+0x80>
 80157ac:	6923      	ldr	r3, [r4, #16]
 80157ae:	4798      	blx	r3
 80157b0:	2802      	cmp	r0, #2
 80157b2:	d01b      	beq.n	80157ec <uxr_next_input_reliable_buffer_available+0xb4>
 80157b4:	2801      	cmp	r0, #1
 80157b6:	d0e3      	beq.n	8015780 <uxr_next_input_reliable_buffer_available+0x48>
 80157b8:	2000      	movs	r0, #0
 80157ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157be:	464a      	mov	r2, r9
 80157c0:	4631      	mov	r1, r6
 80157c2:	4638      	mov	r0, r7
 80157c4:	f7f6 feda 	bl	800c57c <ucdr_init_buffer>
 80157c8:	8921      	ldrh	r1, [r4, #8]
 80157ca:	fbb5 f2f1 	udiv	r2, r5, r1
 80157ce:	fb01 5212 	mls	r2, r1, r2, r5
 80157d2:	b292      	uxth	r2, r2
 80157d4:	6863      	ldr	r3, [r4, #4]
 80157d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80157da:	fb02 f303 	mul.w	r3, r2, r3
 80157de:	6822      	ldr	r2, [r4, #0]
 80157e0:	f842 a003 	str.w	sl, [r2, r3]
 80157e4:	81a5      	strh	r5, [r4, #12]
 80157e6:	2001      	movs	r0, #1
 80157e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157ec:	eb06 0108 	add.w	r1, r6, r8
 80157f0:	8926      	ldrh	r6, [r4, #8]
 80157f2:	fbb5 f0f6 	udiv	r0, r5, r6
 80157f6:	fb06 5010 	mls	r0, r6, r0, r5
 80157fa:	b280      	uxth	r0, r0
 80157fc:	6863      	ldr	r3, [r4, #4]
 80157fe:	fbb3 f3f6 	udiv	r3, r3, r6
 8015802:	fb00 f303 	mul.w	r3, r0, r3
 8015806:	6820      	ldr	r0, [r4, #0]
 8015808:	2500      	movs	r5, #0
 801580a:	50c5      	str	r5, [r0, r3]
 801580c:	eba9 0208 	sub.w	r2, r9, r8
 8015810:	4638      	mov	r0, r7
 8015812:	f7f6 feb3 	bl	800c57c <ucdr_init_buffer>
 8015816:	4903      	ldr	r1, [pc, #12]	@ (8015824 <uxr_next_input_reliable_buffer_available+0xec>)
 8015818:	4622      	mov	r2, r4
 801581a:	4638      	mov	r0, r7
 801581c:	f7f6 fe82 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 8015820:	4655      	mov	r5, sl
 8015822:	e7df      	b.n	80157e4 <uxr_next_input_reliable_buffer_available+0xac>
 8015824:	08015541 	.word	0x08015541

08015828 <uxr_process_heartbeat>:
 8015828:	b538      	push	{r3, r4, r5, lr}
 801582a:	4611      	mov	r1, r2
 801582c:	4604      	mov	r4, r0
 801582e:	89c0      	ldrh	r0, [r0, #14]
 8015830:	4615      	mov	r5, r2
 8015832:	f000 fcdb 	bl	80161ec <uxr_seq_num_cmp>
 8015836:	2800      	cmp	r0, #0
 8015838:	bfb8      	it	lt
 801583a:	81e5      	strhlt	r5, [r4, #14]
 801583c:	bd38      	pop	{r3, r4, r5, pc}
 801583e:	bf00      	nop

08015840 <uxr_compute_acknack>:
 8015840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015844:	8903      	ldrh	r3, [r0, #8]
 8015846:	8985      	ldrh	r5, [r0, #12]
 8015848:	4604      	mov	r4, r0
 801584a:	460e      	mov	r6, r1
 801584c:	2b00      	cmp	r3, #0
 801584e:	d048      	beq.n	80158e2 <uxr_compute_acknack+0xa2>
 8015850:	4628      	mov	r0, r5
 8015852:	2701      	movs	r7, #1
 8015854:	e003      	b.n	801585e <uxr_compute_acknack+0x1e>
 8015856:	4567      	cmp	r7, ip
 8015858:	d243      	bcs.n	80158e2 <uxr_compute_acknack+0xa2>
 801585a:	89a0      	ldrh	r0, [r4, #12]
 801585c:	3701      	adds	r7, #1
 801585e:	b2b9      	uxth	r1, r7
 8015860:	f000 fcbc 	bl	80161dc <uxr_seq_num_add>
 8015864:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015868:	fbb0 f2fc 	udiv	r2, r0, ip
 801586c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015870:	fb0c 0212 	mls	r2, ip, r2, r0
 8015874:	b292      	uxth	r2, r2
 8015876:	fbb3 f3fc 	udiv	r3, r3, ip
 801587a:	fb02 f303 	mul.w	r3, r2, r3
 801587e:	58cb      	ldr	r3, [r1, r3]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d1e8      	bne.n	8015856 <uxr_compute_acknack+0x16>
 8015884:	8030      	strh	r0, [r6, #0]
 8015886:	2101      	movs	r1, #1
 8015888:	89e5      	ldrh	r5, [r4, #14]
 801588a:	f000 fcab 	bl	80161e4 <uxr_seq_num_sub>
 801588e:	4601      	mov	r1, r0
 8015890:	4628      	mov	r0, r5
 8015892:	f000 fca7 	bl	80161e4 <uxr_seq_num_sub>
 8015896:	4605      	mov	r5, r0
 8015898:	4607      	mov	r7, r0
 801589a:	b1f8      	cbz	r0, 80158dc <uxr_compute_acknack+0x9c>
 801589c:	f04f 0900 	mov.w	r9, #0
 80158a0:	464d      	mov	r5, r9
 80158a2:	f04f 0801 	mov.w	r8, #1
 80158a6:	fa1f f189 	uxth.w	r1, r9
 80158aa:	8830      	ldrh	r0, [r6, #0]
 80158ac:	f000 fc96 	bl	80161dc <uxr_seq_num_add>
 80158b0:	8921      	ldrh	r1, [r4, #8]
 80158b2:	fbb0 f3f1 	udiv	r3, r0, r1
 80158b6:	fb03 0011 	mls	r0, r3, r1, r0
 80158ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80158be:	b280      	uxth	r0, r0
 80158c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80158c4:	fb00 f303 	mul.w	r3, r0, r3
 80158c8:	fa08 f109 	lsl.w	r1, r8, r9
 80158cc:	58d3      	ldr	r3, [r2, r3]
 80158ce:	f109 0901 	add.w	r9, r9, #1
 80158d2:	b90b      	cbnz	r3, 80158d8 <uxr_compute_acknack+0x98>
 80158d4:	4329      	orrs	r1, r5
 80158d6:	b28d      	uxth	r5, r1
 80158d8:	454f      	cmp	r7, r9
 80158da:	d1e4      	bne.n	80158a6 <uxr_compute_acknack+0x66>
 80158dc:	4628      	mov	r0, r5
 80158de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158e2:	4628      	mov	r0, r5
 80158e4:	e7ce      	b.n	8015884 <uxr_compute_acknack+0x44>
 80158e6:	bf00      	nop

080158e8 <uxr_init_output_best_effort_stream>:
 80158e8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80158ec:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80158f0:	6001      	str	r1, [r0, #0]
 80158f2:	7303      	strb	r3, [r0, #12]
 80158f4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80158f8:	4770      	bx	lr
 80158fa:	bf00      	nop

080158fc <uxr_reset_output_best_effort_stream>:
 80158fc:	7b02      	ldrb	r2, [r0, #12]
 80158fe:	6042      	str	r2, [r0, #4]
 8015900:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015904:	81c3      	strh	r3, [r0, #14]
 8015906:	4770      	bx	lr

08015908 <uxr_prepare_best_effort_buffer_to_write>:
 8015908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801590a:	4604      	mov	r4, r0
 801590c:	b083      	sub	sp, #12
 801590e:	6840      	ldr	r0, [r0, #4]
 8015910:	460d      	mov	r5, r1
 8015912:	4616      	mov	r6, r2
 8015914:	f7f9 f944 	bl	800eba0 <uxr_submessage_padding>
 8015918:	6863      	ldr	r3, [r4, #4]
 801591a:	4418      	add	r0, r3
 801591c:	68a3      	ldr	r3, [r4, #8]
 801591e:	1942      	adds	r2, r0, r5
 8015920:	4293      	cmp	r3, r2
 8015922:	bf2c      	ite	cs
 8015924:	2701      	movcs	r7, #1
 8015926:	2700      	movcc	r7, #0
 8015928:	d202      	bcs.n	8015930 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801592a:	4638      	mov	r0, r7
 801592c:	b003      	add	sp, #12
 801592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015930:	9000      	str	r0, [sp, #0]
 8015932:	6821      	ldr	r1, [r4, #0]
 8015934:	4630      	mov	r0, r6
 8015936:	2300      	movs	r3, #0
 8015938:	f7f6 fe0e 	bl	800c558 <ucdr_init_buffer_origin_offset>
 801593c:	6863      	ldr	r3, [r4, #4]
 801593e:	4638      	mov	r0, r7
 8015940:	442b      	add	r3, r5
 8015942:	6063      	str	r3, [r4, #4]
 8015944:	b003      	add	sp, #12
 8015946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015948 <uxr_prepare_best_effort_buffer_to_send>:
 8015948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801594c:	4604      	mov	r4, r0
 801594e:	461d      	mov	r5, r3
 8015950:	6840      	ldr	r0, [r0, #4]
 8015952:	7b23      	ldrb	r3, [r4, #12]
 8015954:	4298      	cmp	r0, r3
 8015956:	bf8c      	ite	hi
 8015958:	2601      	movhi	r6, #1
 801595a:	2600      	movls	r6, #0
 801595c:	d802      	bhi.n	8015964 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801595e:	4630      	mov	r0, r6
 8015960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015964:	4688      	mov	r8, r1
 8015966:	89e0      	ldrh	r0, [r4, #14]
 8015968:	2101      	movs	r1, #1
 801596a:	4617      	mov	r7, r2
 801596c:	f000 fc36 	bl	80161dc <uxr_seq_num_add>
 8015970:	6823      	ldr	r3, [r4, #0]
 8015972:	81e0      	strh	r0, [r4, #14]
 8015974:	8028      	strh	r0, [r5, #0]
 8015976:	f8c8 3000 	str.w	r3, [r8]
 801597a:	6863      	ldr	r3, [r4, #4]
 801597c:	603b      	str	r3, [r7, #0]
 801597e:	7b23      	ldrb	r3, [r4, #12]
 8015980:	6063      	str	r3, [r4, #4]
 8015982:	4630      	mov	r0, r6
 8015984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015988 <on_full_output_buffer>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	460c      	mov	r4, r1
 801598c:	6803      	ldr	r3, [r0, #0]
 801598e:	6809      	ldr	r1, [r1, #0]
 8015990:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015994:	6862      	ldr	r2, [r4, #4]
 8015996:	fbb2 f2fc 	udiv	r2, r2, ip
 801599a:	1a5b      	subs	r3, r3, r1
 801599c:	fbb3 f3f2 	udiv	r3, r3, r2
 80159a0:	3301      	adds	r3, #1
 80159a2:	b29b      	uxth	r3, r3
 80159a4:	fbb3 fefc 	udiv	lr, r3, ip
 80159a8:	fb0c 331e 	mls	r3, ip, lr, r3
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	fb02 f303 	mul.w	r3, r2, r3
 80159b2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80159b6:	58ca      	ldr	r2, [r1, r3]
 80159b8:	4463      	add	r3, ip
 80159ba:	eba2 020c 	sub.w	r2, r2, ip
 80159be:	3308      	adds	r3, #8
 80159c0:	4605      	mov	r5, r0
 80159c2:	4419      	add	r1, r3
 80159c4:	3a04      	subs	r2, #4
 80159c6:	6903      	ldr	r3, [r0, #16]
 80159c8:	f7f6 fdd0 	bl	800c56c <ucdr_init_buffer_origin>
 80159cc:	4628      	mov	r0, r5
 80159ce:	4903      	ldr	r1, [pc, #12]	@ (80159dc <on_full_output_buffer+0x54>)
 80159d0:	4622      	mov	r2, r4
 80159d2:	f7f6 fda7 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 80159d6:	2000      	movs	r0, #0
 80159d8:	bd38      	pop	{r3, r4, r5, pc}
 80159da:	bf00      	nop
 80159dc:	08015989 	.word	0x08015989

080159e0 <uxr_init_output_reliable_stream>:
 80159e0:	b410      	push	{r4}
 80159e2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80159e6:	8103      	strh	r3, [r0, #8]
 80159e8:	e9c0 1200 	strd	r1, r2, [r0]
 80159ec:	f880 c00c 	strb.w	ip, [r0, #12]
 80159f0:	b1d3      	cbz	r3, 8015a28 <uxr_init_output_reliable_stream+0x48>
 80159f2:	f8c1 c000 	str.w	ip, [r1]
 80159f6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80159fa:	f1bc 0f01 	cmp.w	ip, #1
 80159fe:	d913      	bls.n	8015a28 <uxr_init_output_reliable_stream+0x48>
 8015a00:	2301      	movs	r3, #1
 8015a02:	fbb3 f1fc 	udiv	r1, r3, ip
 8015a06:	fb0c 3111 	mls	r1, ip, r1, r3
 8015a0a:	b289      	uxth	r1, r1
 8015a0c:	6842      	ldr	r2, [r0, #4]
 8015a0e:	6804      	ldr	r4, [r0, #0]
 8015a10:	fbb2 f2fc 	udiv	r2, r2, ip
 8015a14:	fb01 f202 	mul.w	r2, r1, r2
 8015a18:	7b01      	ldrb	r1, [r0, #12]
 8015a1a:	50a1      	str	r1, [r4, r2]
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	459c      	cmp	ip, r3
 8015a26:	d8ec      	bhi.n	8015a02 <uxr_init_output_reliable_stream+0x22>
 8015a28:	f04f 32ff 	mov.w	r2, #4294967295
 8015a2c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015a30:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015a34:	4905      	ldr	r1, [pc, #20]	@ (8015a4c <uxr_init_output_reliable_stream+0x6c>)
 8015a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a3a:	f8c0 100e 	str.w	r1, [r0, #14]
 8015a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a42:	2300      	movs	r3, #0
 8015a44:	8242      	strh	r2, [r0, #18]
 8015a46:	8403      	strh	r3, [r0, #32]
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop
 8015a4c:	ffff0000 	.word	0xffff0000

08015a50 <uxr_reset_output_reliable_stream>:
 8015a50:	8901      	ldrh	r1, [r0, #8]
 8015a52:	b1b1      	cbz	r1, 8015a82 <uxr_reset_output_reliable_stream+0x32>
 8015a54:	f04f 0c00 	mov.w	ip, #0
 8015a58:	4663      	mov	r3, ip
 8015a5a:	fbb3 f2f1 	udiv	r2, r3, r1
 8015a5e:	fb01 3312 	mls	r3, r1, r2, r3
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	6842      	ldr	r2, [r0, #4]
 8015a66:	fbb2 f2f1 	udiv	r2, r2, r1
 8015a6a:	6801      	ldr	r1, [r0, #0]
 8015a6c:	fb03 f202 	mul.w	r2, r3, r2
 8015a70:	7b03      	ldrb	r3, [r0, #12]
 8015a72:	508b      	str	r3, [r1, r2]
 8015a74:	f10c 0c01 	add.w	ip, ip, #1
 8015a78:	8901      	ldrh	r1, [r0, #8]
 8015a7a:	fa1f f38c 	uxth.w	r3, ip
 8015a7e:	4299      	cmp	r1, r3
 8015a80:	d8eb      	bhi.n	8015a5a <uxr_reset_output_reliable_stream+0xa>
 8015a82:	f04f 32ff 	mov.w	r2, #4294967295
 8015a86:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015a8a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015a8e:	4904      	ldr	r1, [pc, #16]	@ (8015aa0 <uxr_reset_output_reliable_stream+0x50>)
 8015a90:	f8c0 100e 	str.w	r1, [r0, #14]
 8015a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a98:	2300      	movs	r3, #0
 8015a9a:	8242      	strh	r2, [r0, #18]
 8015a9c:	8403      	strh	r3, [r0, #32]
 8015a9e:	4770      	bx	lr
 8015aa0:	ffff0000 	.word	0xffff0000

08015aa4 <uxr_prepare_reliable_buffer_to_write>:
 8015aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa8:	4604      	mov	r4, r0
 8015aaa:	b091      	sub	sp, #68	@ 0x44
 8015aac:	8900      	ldrh	r0, [r0, #8]
 8015aae:	89e7      	ldrh	r7, [r4, #14]
 8015ab0:	6823      	ldr	r3, [r4, #0]
 8015ab2:	9204      	str	r2, [sp, #16]
 8015ab4:	fbb7 f2f0 	udiv	r2, r7, r0
 8015ab8:	fb00 7212 	mls	r2, r0, r2, r7
 8015abc:	b292      	uxth	r2, r2
 8015abe:	6865      	ldr	r5, [r4, #4]
 8015ac0:	fbb5 f5f0 	udiv	r5, r5, r0
 8015ac4:	fb05 3202 	mla	r2, r5, r2, r3
 8015ac8:	3204      	adds	r2, #4
 8015aca:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8015ace:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8015ad2:	9203      	str	r2, [sp, #12]
 8015ad4:	4688      	mov	r8, r1
 8015ad6:	f1a5 0904 	sub.w	r9, r5, #4
 8015ada:	2800      	cmp	r0, #0
 8015adc:	f000 8143 	beq.w	8015d66 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	460e      	mov	r6, r1
 8015ae4:	b28a      	uxth	r2, r1
 8015ae6:	fbb2 fcf0 	udiv	ip, r2, r0
 8015aea:	fb00 221c 	mls	r2, r0, ip, r2
 8015aee:	b292      	uxth	r2, r2
 8015af0:	fb05 f202 	mul.w	r2, r5, r2
 8015af4:	3101      	adds	r1, #1
 8015af6:	589a      	ldr	r2, [r3, r2]
 8015af8:	455a      	cmp	r2, fp
 8015afa:	bf04      	itt	eq
 8015afc:	3601      	addeq	r6, #1
 8015afe:	b2b6      	uxtheq	r6, r6
 8015b00:	4281      	cmp	r1, r0
 8015b02:	d1ef      	bne.n	8015ae4 <uxr_prepare_reliable_buffer_to_write+0x40>
 8015b04:	4650      	mov	r0, sl
 8015b06:	2104      	movs	r1, #4
 8015b08:	9605      	str	r6, [sp, #20]
 8015b0a:	f7f6 fd3b 	bl	800c584 <ucdr_alignment>
 8015b0e:	4482      	add	sl, r0
 8015b10:	eb0a 0208 	add.w	r2, sl, r8
 8015b14:	454a      	cmp	r2, r9
 8015b16:	f240 80ca 	bls.w	8015cae <uxr_prepare_reliable_buffer_to_write+0x20a>
 8015b1a:	7b22      	ldrb	r2, [r4, #12]
 8015b1c:	4442      	add	r2, r8
 8015b1e:	454a      	cmp	r2, r9
 8015b20:	f240 80b2 	bls.w	8015c88 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8015b24:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8015b28:	32fc      	adds	r2, #252	@ 0xfc
 8015b2a:	fa1f f389 	uxth.w	r3, r9
 8015b2e:	441a      	add	r2, r3
 8015b30:	b292      	uxth	r2, r2
 8015b32:	fb06 fb02 	mul.w	fp, r6, r2
 8015b36:	45c3      	cmp	fp, r8
 8015b38:	9205      	str	r2, [sp, #20]
 8015b3a:	9206      	str	r2, [sp, #24]
 8015b3c:	f0c0 80b3 	bcc.w	8015ca6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015b40:	f10a 0204 	add.w	r2, sl, #4
 8015b44:	454a      	cmp	r2, r9
 8015b46:	f080 80db 	bcs.w	8015d00 <uxr_prepare_reliable_buffer_to_write+0x25c>
 8015b4a:	f1a3 0b04 	sub.w	fp, r3, #4
 8015b4e:	ebab 0b0a 	sub.w	fp, fp, sl
 8015b52:	9b05      	ldr	r3, [sp, #20]
 8015b54:	fa1f fb8b 	uxth.w	fp, fp
 8015b58:	eba8 080b 	sub.w	r8, r8, fp
 8015b5c:	fbb8 fcf3 	udiv	ip, r8, r3
 8015b60:	fb03 831c 	mls	r3, r3, ip, r8
 8015b64:	fa1f fc8c 	uxth.w	ip, ip
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	f040 80c1 	bne.w	8015cf0 <uxr_prepare_reliable_buffer_to_write+0x24c>
 8015b6e:	45b4      	cmp	ip, r6
 8015b70:	f200 8099 	bhi.w	8015ca6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015b74:	f10d 0820 	add.w	r8, sp, #32
 8015b78:	f1bc 0f00 	cmp.w	ip, #0
 8015b7c:	d040      	beq.n	8015c00 <uxr_prepare_reliable_buffer_to_write+0x15c>
 8015b7e:	f8cd a01c 	str.w	sl, [sp, #28]
 8015b82:	2600      	movs	r6, #0
 8015b84:	f8dd a014 	ldr.w	sl, [sp, #20]
 8015b88:	9505      	str	r5, [sp, #20]
 8015b8a:	f10d 0820 	add.w	r8, sp, #32
 8015b8e:	4665      	mov	r5, ip
 8015b90:	e000      	b.n	8015b94 <uxr_prepare_reliable_buffer_to_write+0xf0>
 8015b92:	46d3      	mov	fp, sl
 8015b94:	8921      	ldrh	r1, [r4, #8]
 8015b96:	fbb7 f2f1 	udiv	r2, r7, r1
 8015b9a:	fb01 7212 	mls	r2, r1, r2, r7
 8015b9e:	b292      	uxth	r2, r2
 8015ba0:	6863      	ldr	r3, [r4, #4]
 8015ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ba6:	6821      	ldr	r1, [r4, #0]
 8015ba8:	fb02 f303 	mul.w	r3, r2, r3
 8015bac:	3304      	adds	r3, #4
 8015bae:	4419      	add	r1, r3
 8015bb0:	4640      	mov	r0, r8
 8015bb2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015bb6:	9200      	str	r2, [sp, #0]
 8015bb8:	2300      	movs	r3, #0
 8015bba:	464a      	mov	r2, r9
 8015bbc:	f7f6 fccc 	bl	800c558 <ucdr_init_buffer_origin_offset>
 8015bc0:	465a      	mov	r2, fp
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	210d      	movs	r1, #13
 8015bc6:	4640      	mov	r0, r8
 8015bc8:	f7f8 ffaa 	bl	800eb20 <uxr_buffer_submessage_header>
 8015bcc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015bd0:	fbb7 f2fc 	udiv	r2, r7, ip
 8015bd4:	fb0c 7212 	mls	r2, ip, r2, r7
 8015bd8:	b292      	uxth	r2, r2
 8015bda:	6863      	ldr	r3, [r4, #4]
 8015bdc:	fbb3 f3fc 	udiv	r3, r3, ip
 8015be0:	fb02 f303 	mul.w	r3, r2, r3
 8015be4:	6822      	ldr	r2, [r4, #0]
 8015be6:	4638      	mov	r0, r7
 8015be8:	f842 9003 	str.w	r9, [r2, r3]
 8015bec:	2101      	movs	r1, #1
 8015bee:	f000 faf5 	bl	80161dc <uxr_seq_num_add>
 8015bf2:	3601      	adds	r6, #1
 8015bf4:	42ae      	cmp	r6, r5
 8015bf6:	4607      	mov	r7, r0
 8015bf8:	d1cb      	bne.n	8015b92 <uxr_prepare_reliable_buffer_to_write+0xee>
 8015bfa:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015bfe:	9d05      	ldr	r5, [sp, #20]
 8015c00:	8920      	ldrh	r0, [r4, #8]
 8015c02:	fbb7 f1f0 	udiv	r1, r7, r0
 8015c06:	fb00 7111 	mls	r1, r0, r1, r7
 8015c0a:	b289      	uxth	r1, r1
 8015c0c:	6863      	ldr	r3, [r4, #4]
 8015c0e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015c12:	fb01 f303 	mul.w	r3, r1, r3
 8015c16:	6821      	ldr	r1, [r4, #0]
 8015c18:	3304      	adds	r3, #4
 8015c1a:	4419      	add	r1, r3
 8015c1c:	464a      	mov	r2, r9
 8015c1e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015c22:	9000      	str	r0, [sp, #0]
 8015c24:	2300      	movs	r3, #0
 8015c26:	4640      	mov	r0, r8
 8015c28:	f7f6 fc96 	bl	800c558 <ucdr_init_buffer_origin_offset>
 8015c2c:	4640      	mov	r0, r8
 8015c2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015c32:	2302      	movs	r3, #2
 8015c34:	fa1f f288 	uxth.w	r2, r8
 8015c38:	210d      	movs	r1, #13
 8015c3a:	f7f8 ff71 	bl	800eb20 <uxr_buffer_submessage_header>
 8015c3e:	8926      	ldrh	r6, [r4, #8]
 8015c40:	9b03      	ldr	r3, [sp, #12]
 8015c42:	7b20      	ldrb	r0, [r4, #12]
 8015c44:	f1a5 0208 	sub.w	r2, r5, #8
 8015c48:	f10a 0104 	add.w	r1, sl, #4
 8015c4c:	fbb7 f5f6 	udiv	r5, r7, r6
 8015c50:	fb06 7515 	mls	r5, r6, r5, r7
 8015c54:	440b      	add	r3, r1
 8015c56:	b2ad      	uxth	r5, r5
 8015c58:	4619      	mov	r1, r3
 8015c5a:	3004      	adds	r0, #4
 8015c5c:	6863      	ldr	r3, [r4, #4]
 8015c5e:	fbb3 f3f6 	udiv	r3, r3, r6
 8015c62:	fb05 f303 	mul.w	r3, r5, r3
 8015c66:	6825      	ldr	r5, [r4, #0]
 8015c68:	4440      	add	r0, r8
 8015c6a:	50e8      	str	r0, [r5, r3]
 8015c6c:	9d04      	ldr	r5, [sp, #16]
 8015c6e:	eba2 020a 	sub.w	r2, r2, sl
 8015c72:	4628      	mov	r0, r5
 8015c74:	f7f6 fc82 	bl	800c57c <ucdr_init_buffer>
 8015c78:	493c      	ldr	r1, [pc, #240]	@ (8015d6c <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 8015c7a:	4622      	mov	r2, r4
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	f7f6 fc51 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 8015c82:	81e7      	strh	r7, [r4, #14]
 8015c84:	2001      	movs	r0, #1
 8015c86:	e00f      	b.n	8015ca8 <uxr_prepare_reliable_buffer_to_write+0x204>
 8015c88:	2101      	movs	r1, #1
 8015c8a:	89e0      	ldrh	r0, [r4, #14]
 8015c8c:	f000 faa6 	bl	80161dc <uxr_seq_num_add>
 8015c90:	8921      	ldrh	r1, [r4, #8]
 8015c92:	4605      	mov	r5, r0
 8015c94:	8a60      	ldrh	r0, [r4, #18]
 8015c96:	f000 faa1 	bl	80161dc <uxr_seq_num_add>
 8015c9a:	4601      	mov	r1, r0
 8015c9c:	4628      	mov	r0, r5
 8015c9e:	f000 faa5 	bl	80161ec <uxr_seq_num_cmp>
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	dd45      	ble.n	8015d32 <uxr_prepare_reliable_buffer_to_write+0x28e>
 8015ca6:	2000      	movs	r0, #0
 8015ca8:	b011      	add	sp, #68	@ 0x44
 8015caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cae:	8921      	ldrh	r1, [r4, #8]
 8015cb0:	8a60      	ldrh	r0, [r4, #18]
 8015cb2:	9205      	str	r2, [sp, #20]
 8015cb4:	f000 fa92 	bl	80161dc <uxr_seq_num_add>
 8015cb8:	4601      	mov	r1, r0
 8015cba:	4638      	mov	r0, r7
 8015cbc:	f000 fa96 	bl	80161ec <uxr_seq_num_cmp>
 8015cc0:	2800      	cmp	r0, #0
 8015cc2:	9a05      	ldr	r2, [sp, #20]
 8015cc4:	dcef      	bgt.n	8015ca6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015cc6:	8926      	ldrh	r6, [r4, #8]
 8015cc8:	fbb7 f5f6 	udiv	r5, r7, r6
 8015ccc:	fb06 7515 	mls	r5, r6, r5, r7
 8015cd0:	b2ad      	uxth	r5, r5
 8015cd2:	6863      	ldr	r3, [r4, #4]
 8015cd4:	6824      	ldr	r4, [r4, #0]
 8015cd6:	fbb3 f3f6 	udiv	r3, r3, r6
 8015cda:	fb05 f303 	mul.w	r3, r5, r3
 8015cde:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015ce2:	50e2      	str	r2, [r4, r3]
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	f8cd a000 	str.w	sl, [sp]
 8015cea:	f7f6 fc35 	bl	800c558 <ucdr_init_buffer_origin_offset>
 8015cee:	e7c9      	b.n	8015c84 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8015cf0:	f10c 0c01 	add.w	ip, ip, #1
 8015cf4:	fa1f fc8c 	uxth.w	ip, ip
 8015cf8:	45b4      	cmp	ip, r6
 8015cfa:	9306      	str	r3, [sp, #24]
 8015cfc:	d8d3      	bhi.n	8015ca6 <uxr_prepare_reliable_buffer_to_write+0x202>
 8015cfe:	e739      	b.n	8015b74 <uxr_prepare_reliable_buffer_to_write+0xd0>
 8015d00:	4638      	mov	r0, r7
 8015d02:	2101      	movs	r1, #1
 8015d04:	9307      	str	r3, [sp, #28]
 8015d06:	f000 fa69 	bl	80161dc <uxr_seq_num_add>
 8015d0a:	8921      	ldrh	r1, [r4, #8]
 8015d0c:	6862      	ldr	r2, [r4, #4]
 8015d0e:	4607      	mov	r7, r0
 8015d10:	fbb0 f0f1 	udiv	r0, r0, r1
 8015d14:	fb01 7010 	mls	r0, r1, r0, r7
 8015d18:	b280      	uxth	r0, r0
 8015d1a:	fbb2 f1f1 	udiv	r1, r2, r1
 8015d1e:	6822      	ldr	r2, [r4, #0]
 8015d20:	fb00 f101 	mul.w	r1, r0, r1
 8015d24:	3104      	adds	r1, #4
 8015d26:	1853      	adds	r3, r2, r1
 8015d28:	9303      	str	r3, [sp, #12]
 8015d2a:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8015d2e:	9b07      	ldr	r3, [sp, #28]
 8015d30:	e70b      	b.n	8015b4a <uxr_prepare_reliable_buffer_to_write+0xa6>
 8015d32:	8921      	ldrh	r1, [r4, #8]
 8015d34:	fbb5 f2f1 	udiv	r2, r5, r1
 8015d38:	fb01 5212 	mls	r2, r1, r2, r5
 8015d3c:	b292      	uxth	r2, r2
 8015d3e:	6863      	ldr	r3, [r4, #4]
 8015d40:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d44:	6821      	ldr	r1, [r4, #0]
 8015d46:	9804      	ldr	r0, [sp, #16]
 8015d48:	fb02 f303 	mul.w	r3, r2, r3
 8015d4c:	3304      	adds	r3, #4
 8015d4e:	7b22      	ldrb	r2, [r4, #12]
 8015d50:	4419      	add	r1, r3
 8015d52:	4442      	add	r2, r8
 8015d54:	f841 2c04 	str.w	r2, [r1, #-4]
 8015d58:	7b23      	ldrb	r3, [r4, #12]
 8015d5a:	9300      	str	r3, [sp, #0]
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	f7f6 fbfb 	bl	800c558 <ucdr_init_buffer_origin_offset>
 8015d62:	81e5      	strh	r5, [r4, #14]
 8015d64:	e78e      	b.n	8015c84 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8015d66:	4606      	mov	r6, r0
 8015d68:	e6cc      	b.n	8015b04 <uxr_prepare_reliable_buffer_to_write+0x60>
 8015d6a:	bf00      	nop
 8015d6c:	08015989 	.word	0x08015989

08015d70 <uxr_prepare_next_reliable_buffer_to_send>:
 8015d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d72:	4604      	mov	r4, r0
 8015d74:	460f      	mov	r7, r1
 8015d76:	8a00      	ldrh	r0, [r0, #16]
 8015d78:	2101      	movs	r1, #1
 8015d7a:	4615      	mov	r5, r2
 8015d7c:	461e      	mov	r6, r3
 8015d7e:	f000 fa2d 	bl	80161dc <uxr_seq_num_add>
 8015d82:	8030      	strh	r0, [r6, #0]
 8015d84:	8922      	ldrh	r2, [r4, #8]
 8015d86:	fbb0 f3f2 	udiv	r3, r0, r2
 8015d8a:	fb02 0c13 	mls	ip, r2, r3, r0
 8015d8e:	fa1f fc8c 	uxth.w	ip, ip
 8015d92:	6863      	ldr	r3, [r4, #4]
 8015d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d98:	fb0c fc03 	mul.w	ip, ip, r3
 8015d9c:	6823      	ldr	r3, [r4, #0]
 8015d9e:	89e1      	ldrh	r1, [r4, #14]
 8015da0:	f10c 0c04 	add.w	ip, ip, #4
 8015da4:	4463      	add	r3, ip
 8015da6:	603b      	str	r3, [r7, #0]
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	4463      	add	r3, ip
 8015dac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015db0:	602b      	str	r3, [r5, #0]
 8015db2:	f000 fa1b 	bl	80161ec <uxr_seq_num_cmp>
 8015db6:	2800      	cmp	r0, #0
 8015db8:	dd01      	ble.n	8015dbe <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015dba:	2000      	movs	r0, #0
 8015dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dbe:	7b23      	ldrb	r3, [r4, #12]
 8015dc0:	682a      	ldr	r2, [r5, #0]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d9f9      	bls.n	8015dba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015dc6:	8a61      	ldrh	r1, [r4, #18]
 8015dc8:	8a20      	ldrh	r0, [r4, #16]
 8015dca:	f000 fa0b 	bl	80161e4 <uxr_seq_num_sub>
 8015dce:	8923      	ldrh	r3, [r4, #8]
 8015dd0:	4283      	cmp	r3, r0
 8015dd2:	d0f2      	beq.n	8015dba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015dd4:	8830      	ldrh	r0, [r6, #0]
 8015dd6:	89e3      	ldrh	r3, [r4, #14]
 8015dd8:	8220      	strh	r0, [r4, #16]
 8015dda:	4298      	cmp	r0, r3
 8015ddc:	d001      	beq.n	8015de2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015dde:	2001      	movs	r0, #1
 8015de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015de2:	2101      	movs	r1, #1
 8015de4:	f000 f9fa 	bl	80161dc <uxr_seq_num_add>
 8015de8:	81e0      	strh	r0, [r4, #14]
 8015dea:	e7f8      	b.n	8015dde <uxr_prepare_next_reliable_buffer_to_send+0x6e>

08015dec <uxr_update_output_stream_heartbeat_timestamp>:
 8015dec:	b570      	push	{r4, r5, r6, lr}
 8015dee:	8a01      	ldrh	r1, [r0, #16]
 8015df0:	4604      	mov	r4, r0
 8015df2:	8a40      	ldrh	r0, [r0, #18]
 8015df4:	4615      	mov	r5, r2
 8015df6:	461e      	mov	r6, r3
 8015df8:	f000 f9f8 	bl	80161ec <uxr_seq_num_cmp>
 8015dfc:	2800      	cmp	r0, #0
 8015dfe:	db07      	blt.n	8015e10 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015e00:	f04f 35ff 	mov.w	r5, #4294967295
 8015e04:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8015e08:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015e0c:	2000      	movs	r0, #0
 8015e0e:	bd70      	pop	{r4, r5, r6, pc}
 8015e10:	f894 3020 	ldrb.w	r3, [r4, #32]
 8015e14:	b953      	cbnz	r3, 8015e2c <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8015e16:	2301      	movs	r3, #1
 8015e18:	f884 3020 	strb.w	r3, [r4, #32]
 8015e1c:	3564      	adds	r5, #100	@ 0x64
 8015e1e:	f04f 0000 	mov.w	r0, #0
 8015e22:	f146 0600 	adc.w	r6, r6, #0
 8015e26:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015e2a:	bd70      	pop	{r4, r5, r6, pc}
 8015e2c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015e30:	428d      	cmp	r5, r1
 8015e32:	eb76 0202 	sbcs.w	r2, r6, r2
 8015e36:	dbf1      	blt.n	8015e1c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8015e38:	3301      	adds	r3, #1
 8015e3a:	3564      	adds	r5, #100	@ 0x64
 8015e3c:	f884 3020 	strb.w	r3, [r4, #32]
 8015e40:	f04f 0001 	mov.w	r0, #1
 8015e44:	f146 0600 	adc.w	r6, r6, #0
 8015e48:	e7ed      	b.n	8015e26 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8015e4a:	bf00      	nop

08015e4c <uxr_begin_output_nack_buffer_it>:
 8015e4c:	8a40      	ldrh	r0, [r0, #18]
 8015e4e:	4770      	bx	lr

08015e50 <uxr_next_reliable_nack_buffer_to_send>:
 8015e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e54:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015e58:	f1b8 0f00 	cmp.w	r8, #0
 8015e5c:	d104      	bne.n	8015e68 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8015e5e:	f04f 0800 	mov.w	r8, #0
 8015e62:	4640      	mov	r0, r8
 8015e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e68:	4604      	mov	r4, r0
 8015e6a:	460e      	mov	r6, r1
 8015e6c:	8818      	ldrh	r0, [r3, #0]
 8015e6e:	4617      	mov	r7, r2
 8015e70:	461d      	mov	r5, r3
 8015e72:	e019      	b.n	8015ea8 <uxr_next_reliable_nack_buffer_to_send+0x58>
 8015e74:	8921      	ldrh	r1, [r4, #8]
 8015e76:	8828      	ldrh	r0, [r5, #0]
 8015e78:	fbb0 fcf1 	udiv	ip, r0, r1
 8015e7c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8015e80:	fb01 0c1c 	mls	ip, r1, ip, r0
 8015e84:	fa1f fc8c 	uxth.w	ip, ip
 8015e88:	fbb2 f2f1 	udiv	r2, r2, r1
 8015e8c:	fb02 fc0c 	mul.w	ip, r2, ip
 8015e90:	f10c 0c04 	add.w	ip, ip, #4
 8015e94:	4463      	add	r3, ip
 8015e96:	6033      	str	r3, [r6, #0]
 8015e98:	6823      	ldr	r3, [r4, #0]
 8015e9a:	4463      	add	r3, ip
 8015e9c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015ea0:	603b      	str	r3, [r7, #0]
 8015ea2:	7b22      	ldrb	r2, [r4, #12]
 8015ea4:	429a      	cmp	r2, r3
 8015ea6:	d1dc      	bne.n	8015e62 <uxr_next_reliable_nack_buffer_to_send+0x12>
 8015ea8:	2101      	movs	r1, #1
 8015eaa:	f000 f997 	bl	80161dc <uxr_seq_num_add>
 8015eae:	8028      	strh	r0, [r5, #0]
 8015eb0:	8a21      	ldrh	r1, [r4, #16]
 8015eb2:	f000 f99b 	bl	80161ec <uxr_seq_num_cmp>
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	dddc      	ble.n	8015e74 <uxr_next_reliable_nack_buffer_to_send+0x24>
 8015eba:	2300      	movs	r3, #0
 8015ebc:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8015ec0:	e7cd      	b.n	8015e5e <uxr_next_reliable_nack_buffer_to_send+0xe>
 8015ec2:	bf00      	nop

08015ec4 <uxr_process_acknack>:
 8015ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	460e      	mov	r6, r1
 8015eca:	4610      	mov	r0, r2
 8015ecc:	2101      	movs	r1, #1
 8015ece:	f000 f989 	bl	80161e4 <uxr_seq_num_sub>
 8015ed2:	8a61      	ldrh	r1, [r4, #18]
 8015ed4:	f000 f986 	bl	80161e4 <uxr_seq_num_sub>
 8015ed8:	b1c0      	cbz	r0, 8015f0c <uxr_process_acknack+0x48>
 8015eda:	4605      	mov	r5, r0
 8015edc:	2700      	movs	r7, #0
 8015ede:	2101      	movs	r1, #1
 8015ee0:	8a60      	ldrh	r0, [r4, #18]
 8015ee2:	f000 f97b 	bl	80161dc <uxr_seq_num_add>
 8015ee6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015eea:	fbb0 f1fc 	udiv	r1, r0, ip
 8015eee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015ef2:	fb0c 0111 	mls	r1, ip, r1, r0
 8015ef6:	b289      	uxth	r1, r1
 8015ef8:	3701      	adds	r7, #1
 8015efa:	fbb3 f3fc 	udiv	r3, r3, ip
 8015efe:	fb01 f303 	mul.w	r3, r1, r3
 8015f02:	42bd      	cmp	r5, r7
 8015f04:	7b21      	ldrb	r1, [r4, #12]
 8015f06:	8260      	strh	r0, [r4, #18]
 8015f08:	50d1      	str	r1, [r2, r3]
 8015f0a:	d1e8      	bne.n	8015ede <uxr_process_acknack+0x1a>
 8015f0c:	3e00      	subs	r6, #0
 8015f0e:	f04f 0300 	mov.w	r3, #0
 8015f12:	bf18      	it	ne
 8015f14:	2601      	movne	r6, #1
 8015f16:	f884 3020 	strb.w	r3, [r4, #32]
 8015f1a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015f20 <uxr_is_output_up_to_date>:
 8015f20:	8a01      	ldrh	r1, [r0, #16]
 8015f22:	8a40      	ldrh	r0, [r0, #18]
 8015f24:	b508      	push	{r3, lr}
 8015f26:	f000 f961 	bl	80161ec <uxr_seq_num_cmp>
 8015f2a:	fab0 f080 	clz	r0, r0
 8015f2e:	0940      	lsrs	r0, r0, #5
 8015f30:	bd08      	pop	{r3, pc}
 8015f32:	bf00      	nop

08015f34 <get_available_free_slots>:
 8015f34:	8901      	ldrh	r1, [r0, #8]
 8015f36:	b1c1      	cbz	r1, 8015f6a <get_available_free_slots+0x36>
 8015f38:	b530      	push	{r4, r5, lr}
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	6843      	ldr	r3, [r0, #4]
 8015f3e:	6805      	ldr	r5, [r0, #0]
 8015f40:	7b04      	ldrb	r4, [r0, #12]
 8015f42:	fbb3 fef1 	udiv	lr, r3, r1
 8015f46:	4610      	mov	r0, r2
 8015f48:	b293      	uxth	r3, r2
 8015f4a:	fbb3 fcf1 	udiv	ip, r3, r1
 8015f4e:	fb01 331c 	mls	r3, r1, ip, r3
 8015f52:	b29b      	uxth	r3, r3
 8015f54:	fb0e f303 	mul.w	r3, lr, r3
 8015f58:	3201      	adds	r2, #1
 8015f5a:	58eb      	ldr	r3, [r5, r3]
 8015f5c:	429c      	cmp	r4, r3
 8015f5e:	bf04      	itt	eq
 8015f60:	3001      	addeq	r0, #1
 8015f62:	b280      	uxtheq	r0, r0
 8015f64:	4291      	cmp	r1, r2
 8015f66:	d1ef      	bne.n	8015f48 <get_available_free_slots+0x14>
 8015f68:	bd30      	pop	{r4, r5, pc}
 8015f6a:	4608      	mov	r0, r1
 8015f6c:	4770      	bx	lr
 8015f6e:	bf00      	nop

08015f70 <uxr_buffer_request_data>:
 8015f70:	b530      	push	{r4, r5, lr}
 8015f72:	b095      	sub	sp, #84	@ 0x54
 8015f74:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015f78:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015f7a:	f88d 301c 	strb.w	r3, [sp, #28]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	2d00      	cmp	r5, #0
 8015f82:	bf14      	ite	ne
 8015f84:	2101      	movne	r1, #1
 8015f86:	4611      	moveq	r1, r2
 8015f88:	4604      	mov	r4, r0
 8015f8a:	f88d 201d 	strb.w	r2, [sp, #29]
 8015f8e:	f88d 201e 	strb.w	r2, [sp, #30]
 8015f92:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015f96:	d021      	beq.n	8015fdc <uxr_buffer_request_data+0x6c>
 8015f98:	682a      	ldr	r2, [r5, #0]
 8015f9a:	686b      	ldr	r3, [r5, #4]
 8015f9c:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8015fa0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015fa4:	2210      	movs	r2, #16
 8015fa6:	2308      	movs	r3, #8
 8015fa8:	2100      	movs	r1, #0
 8015faa:	e9cd 3100 	strd	r3, r1, [sp]
 8015fae:	4620      	mov	r0, r4
 8015fb0:	9905      	ldr	r1, [sp, #20]
 8015fb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8015fb4:	f7f7 feca 	bl	800dd4c <uxr_prepare_stream_to_write_submessage>
 8015fb8:	b918      	cbnz	r0, 8015fc2 <uxr_buffer_request_data+0x52>
 8015fba:	4604      	mov	r4, r0
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	b015      	add	sp, #84	@ 0x54
 8015fc0:	bd30      	pop	{r4, r5, pc}
 8015fc2:	9904      	ldr	r1, [sp, #16]
 8015fc4:	aa06      	add	r2, sp, #24
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f7f7 fffa 	bl	800dfc0 <uxr_init_base_object_request>
 8015fcc:	a906      	add	r1, sp, #24
 8015fce:	4604      	mov	r4, r0
 8015fd0:	a80c      	add	r0, sp, #48	@ 0x30
 8015fd2:	f7f9 ff2b 	bl	800fe2c <uxr_serialize_READ_DATA_Payload>
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	b015      	add	sp, #84	@ 0x54
 8015fda:	bd30      	pop	{r4, r5, pc}
 8015fdc:	2208      	movs	r2, #8
 8015fde:	e7e2      	b.n	8015fa6 <uxr_buffer_request_data+0x36>

08015fe0 <uxr_buffer_cancel_data>:
 8015fe0:	b510      	push	{r4, lr}
 8015fe2:	b094      	sub	sp, #80	@ 0x50
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	9301      	str	r3, [sp, #4]
 8015fe8:	9205      	str	r2, [sp, #20]
 8015fea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015fee:	2201      	movs	r2, #1
 8015ff0:	f88d 301e 	strb.w	r3, [sp, #30]
 8015ff4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015ff8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015ffc:	2308      	movs	r3, #8
 8015ffe:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016002:	9300      	str	r3, [sp, #0]
 8016004:	2210      	movs	r2, #16
 8016006:	ab0c      	add	r3, sp, #48	@ 0x30
 8016008:	4604      	mov	r4, r0
 801600a:	f7f7 fe9f 	bl	800dd4c <uxr_prepare_stream_to_write_submessage>
 801600e:	b918      	cbnz	r0, 8016018 <uxr_buffer_cancel_data+0x38>
 8016010:	4604      	mov	r4, r0
 8016012:	4620      	mov	r0, r4
 8016014:	b014      	add	sp, #80	@ 0x50
 8016016:	bd10      	pop	{r4, pc}
 8016018:	9905      	ldr	r1, [sp, #20]
 801601a:	aa06      	add	r2, sp, #24
 801601c:	4620      	mov	r0, r4
 801601e:	f7f7 ffcf 	bl	800dfc0 <uxr_init_base_object_request>
 8016022:	a906      	add	r1, sp, #24
 8016024:	4604      	mov	r4, r0
 8016026:	a80c      	add	r0, sp, #48	@ 0x30
 8016028:	f7f9 ff00 	bl	800fe2c <uxr_serialize_READ_DATA_Payload>
 801602c:	4620      	mov	r0, r4
 801602e:	b014      	add	sp, #80	@ 0x50
 8016030:	bd10      	pop	{r4, pc}
 8016032:	bf00      	nop

08016034 <read_submessage_format>:
 8016034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016038:	b095      	sub	sp, #84	@ 0x54
 801603a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801603e:	b113      	cbz	r3, 8016046 <read_submessage_format+0x12>
 8016040:	b015      	add	sp, #84	@ 0x54
 8016042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016046:	460c      	mov	r4, r1
 8016048:	4616      	mov	r6, r2
 801604a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801604e:	461d      	mov	r5, r3
 8016050:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016052:	9304      	str	r3, [sp, #16]
 8016054:	1a52      	subs	r2, r2, r1
 8016056:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016058:	9305      	str	r3, [sp, #20]
 801605a:	4680      	mov	r8, r0
 801605c:	a80c      	add	r0, sp, #48	@ 0x30
 801605e:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 8016062:	f7f6 fa8b 	bl	800c57c <ucdr_init_buffer>
 8016066:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801606a:	a80c      	add	r0, sp, #48	@ 0x30
 801606c:	f7f6 fa5a 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 8016070:	69e3      	ldr	r3, [r4, #28]
 8016072:	b35b      	cbz	r3, 80160cc <read_submessage_format+0x98>
 8016074:	f1b9 0f07 	cmp.w	r9, #7
 8016078:	751d      	strb	r5, [r3, #20]
 801607a:	d043      	beq.n	8016104 <read_submessage_format+0xd0>
 801607c:	f1b9 0f08 	cmp.w	r9, #8
 8016080:	d032      	beq.n	80160e8 <read_submessage_format+0xb4>
 8016082:	f1b9 0f06 	cmp.w	r9, #6
 8016086:	d008      	beq.n	801609a <read_submessage_format+0x66>
 8016088:	2201      	movs	r2, #1
 801608a:	751a      	strb	r2, [r3, #20]
 801608c:	4631      	mov	r1, r6
 801608e:	4620      	mov	r0, r4
 8016090:	f7f6 fac4 	bl	800c61c <ucdr_advance_buffer>
 8016094:	b015      	add	sp, #84	@ 0x54
 8016096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801609a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801609e:	2d00      	cmp	r5, #0
 80160a0:	d0f2      	beq.n	8016088 <read_submessage_format+0x54>
 80160a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80160a4:	e9cd 3600 	strd	r3, r6, [sp]
 80160a8:	2306      	movs	r3, #6
 80160aa:	f88d 3016 	strb.w	r3, [sp, #22]
 80160ae:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 80160b2:	9302      	str	r3, [sp, #8]
 80160b4:	463a      	mov	r2, r7
 80160b6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80160ba:	4640      	mov	r0, r8
 80160bc:	47a8      	blx	r5
 80160be:	69e3      	ldr	r3, [r4, #28]
 80160c0:	2201      	movs	r2, #1
 80160c2:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d1de      	bne.n	8016088 <read_submessage_format+0x54>
 80160ca:	e7df      	b.n	801608c <read_submessage_format+0x58>
 80160cc:	f1b9 0f07 	cmp.w	r9, #7
 80160d0:	d032      	beq.n	8016138 <read_submessage_format+0x104>
 80160d2:	f1b9 0f08 	cmp.w	r9, #8
 80160d6:	d02a      	beq.n	801612e <read_submessage_format+0xfa>
 80160d8:	f1b9 0f06 	cmp.w	r9, #6
 80160dc:	d1d6      	bne.n	801608c <read_submessage_format+0x58>
 80160de:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80160e2:	2d00      	cmp	r5, #0
 80160e4:	d1dd      	bne.n	80160a2 <read_submessage_format+0x6e>
 80160e6:	e7d1      	b.n	801608c <read_submessage_format+0x58>
 80160e8:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 80160ec:	2a00      	cmp	r2, #0
 80160ee:	d0cb      	beq.n	8016088 <read_submessage_format+0x54>
 80160f0:	a906      	add	r1, sp, #24
 80160f2:	a80c      	add	r0, sp, #48	@ 0x30
 80160f4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80160f6:	f7f9 ff5f 	bl	800ffb8 <uxr_deserialize_SampleIdentity>
 80160fa:	bb28      	cbnz	r0, 8016148 <read_submessage_format+0x114>
 80160fc:	69e3      	ldr	r3, [r4, #28]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d1c2      	bne.n	8016088 <read_submessage_format+0x54>
 8016102:	e7c3      	b.n	801608c <read_submessage_format+0x58>
 8016104:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8016108:	b16a      	cbz	r2, 8016126 <read_submessage_format+0xf2>
 801610a:	a906      	add	r1, sp, #24
 801610c:	a80c      	add	r0, sp, #48	@ 0x30
 801610e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016110:	f7f9 fc2c 	bl	800f96c <uxr_deserialize_BaseObjectRequest>
 8016114:	2800      	cmp	r0, #0
 8016116:	d13a      	bne.n	801618e <read_submessage_format+0x15a>
 8016118:	68a2      	ldr	r2, [r4, #8]
 801611a:	69e3      	ldr	r3, [r4, #28]
 801611c:	4432      	add	r2, r6
 801611e:	60a2      	str	r2, [r4, #8]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d1b1      	bne.n	8016088 <read_submessage_format+0x54>
 8016124:	e7b2      	b.n	801608c <read_submessage_format+0x58>
 8016126:	68a2      	ldr	r2, [r4, #8]
 8016128:	4432      	add	r2, r6
 801612a:	60a2      	str	r2, [r4, #8]
 801612c:	e7ac      	b.n	8016088 <read_submessage_format+0x54>
 801612e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 8016132:	2b00      	cmp	r3, #0
 8016134:	d1dc      	bne.n	80160f0 <read_submessage_format+0xbc>
 8016136:	e7a9      	b.n	801608c <read_submessage_format+0x58>
 8016138:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1e4      	bne.n	801610a <read_submessage_format+0xd6>
 8016140:	68a3      	ldr	r3, [r4, #8]
 8016142:	4433      	add	r3, r6
 8016144:	60a3      	str	r3, [r4, #8]
 8016146:	e7a1      	b.n	801608c <read_submessage_format+0x58>
 8016148:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801614c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801614e:	1a52      	subs	r2, r2, r1
 8016150:	1aed      	subs	r5, r5, r3
 8016152:	a80c      	add	r0, sp, #48	@ 0x30
 8016154:	f7f6 fa12 	bl	800c57c <ucdr_init_buffer>
 8016158:	4435      	add	r5, r6
 801615a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801615e:	a80c      	add	r0, sp, #48	@ 0x30
 8016160:	f7f6 f9e0 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 8016164:	b2ad      	uxth	r5, r5
 8016166:	ab0c      	add	r3, sp, #48	@ 0x30
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	9501      	str	r5, [sp, #4]
 801616c:	2108      	movs	r1, #8
 801616e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016172:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8016176:	9102      	str	r1, [sp, #8]
 8016178:	ab06      	add	r3, sp, #24
 801617a:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801617e:	9905      	ldr	r1, [sp, #20]
 8016180:	463a      	mov	r2, r7
 8016182:	4640      	mov	r0, r8
 8016184:	47a8      	blx	r5
 8016186:	2301      	movs	r3, #1
 8016188:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801618c:	e7b6      	b.n	80160fc <read_submessage_format+0xc8>
 801618e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016192:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016194:	1a52      	subs	r2, r2, r1
 8016196:	1aed      	subs	r5, r5, r3
 8016198:	a80c      	add	r0, sp, #48	@ 0x30
 801619a:	f7f6 f9ef 	bl	800c57c <ucdr_init_buffer>
 801619e:	4435      	add	r5, r6
 80161a0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80161a4:	a80c      	add	r0, sp, #48	@ 0x30
 80161a6:	f7f6 f9bd 	bl	800c524 <ucdr_set_on_full_buffer_callback>
 80161aa:	b2ad      	uxth	r5, r5
 80161ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80161ae:	9300      	str	r3, [sp, #0]
 80161b0:	9501      	str	r5, [sp, #4]
 80161b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80161b6:	2107      	movs	r1, #7
 80161b8:	f88d 1016 	strb.w	r1, [sp, #22]
 80161bc:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 80161c0:	9102      	str	r1, [sp, #8]
 80161c2:	ba5b      	rev16	r3, r3
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 80161ca:	9905      	ldr	r1, [sp, #20]
 80161cc:	463a      	mov	r2, r7
 80161ce:	4640      	mov	r0, r8
 80161d0:	47a8      	blx	r5
 80161d2:	2301      	movs	r3, #1
 80161d4:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80161d8:	e79e      	b.n	8016118 <read_submessage_format+0xe4>
 80161da:	bf00      	nop

080161dc <uxr_seq_num_add>:
 80161dc:	4408      	add	r0, r1
 80161de:	b280      	uxth	r0, r0
 80161e0:	4770      	bx	lr
 80161e2:	bf00      	nop

080161e4 <uxr_seq_num_sub>:
 80161e4:	1a40      	subs	r0, r0, r1
 80161e6:	b280      	uxth	r0, r0
 80161e8:	4770      	bx	lr
 80161ea:	bf00      	nop

080161ec <uxr_seq_num_cmp>:
 80161ec:	4288      	cmp	r0, r1
 80161ee:	d010      	beq.n	8016212 <uxr_seq_num_cmp+0x26>
 80161f0:	d207      	bcs.n	8016202 <uxr_seq_num_cmp+0x16>
 80161f2:	1a09      	subs	r1, r1, r0
 80161f4:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80161f8:	bfb4      	ite	lt
 80161fa:	f04f 30ff 	movlt.w	r0, #4294967295
 80161fe:	2001      	movge	r0, #1
 8016200:	4770      	bx	lr
 8016202:	1a41      	subs	r1, r0, r1
 8016204:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016208:	bfcc      	ite	gt
 801620a:	f04f 30ff 	movgt.w	r0, #4294967295
 801620e:	2001      	movle	r0, #1
 8016210:	4770      	bx	lr
 8016212:	2000      	movs	r0, #0
 8016214:	4770      	bx	lr
 8016216:	bf00      	nop

08016218 <rcl_get_automatic_discovery_range>:
 8016218:	b530      	push	{r4, r5, lr}
 801621a:	b083      	sub	sp, #12
 801621c:	2300      	movs	r3, #0
 801621e:	9301      	str	r3, [sp, #4]
 8016220:	b1c0      	cbz	r0, 8016254 <rcl_get_automatic_discovery_range+0x3c>
 8016222:	4604      	mov	r4, r0
 8016224:	a901      	add	r1, sp, #4
 8016226:	4818      	ldr	r0, [pc, #96]	@ (8016288 <rcl_get_automatic_discovery_range+0x70>)
 8016228:	f7fc ff38 	bl	801309c <rcutils_get_env>
 801622c:	b110      	cbz	r0, 8016234 <rcl_get_automatic_discovery_range+0x1c>
 801622e:	2001      	movs	r0, #1
 8016230:	b003      	add	sp, #12
 8016232:	bd30      	pop	{r4, r5, pc}
 8016234:	9d01      	ldr	r5, [sp, #4]
 8016236:	782b      	ldrb	r3, [r5, #0]
 8016238:	b923      	cbnz	r3, 8016244 <rcl_get_automatic_discovery_range+0x2c>
 801623a:	2303      	movs	r3, #3
 801623c:	7023      	strb	r3, [r4, #0]
 801623e:	2000      	movs	r0, #0
 8016240:	b003      	add	sp, #12
 8016242:	bd30      	pop	{r4, r5, pc}
 8016244:	4911      	ldr	r1, [pc, #68]	@ (801628c <rcl_get_automatic_discovery_range+0x74>)
 8016246:	4628      	mov	r0, r5
 8016248:	f7e9 ffe2 	bl	8000210 <strcmp>
 801624c:	b928      	cbnz	r0, 801625a <rcl_get_automatic_discovery_range+0x42>
 801624e:	2301      	movs	r3, #1
 8016250:	7023      	strb	r3, [r4, #0]
 8016252:	e7f4      	b.n	801623e <rcl_get_automatic_discovery_range+0x26>
 8016254:	200b      	movs	r0, #11
 8016256:	b003      	add	sp, #12
 8016258:	bd30      	pop	{r4, r5, pc}
 801625a:	490d      	ldr	r1, [pc, #52]	@ (8016290 <rcl_get_automatic_discovery_range+0x78>)
 801625c:	4628      	mov	r0, r5
 801625e:	f7e9 ffd7 	bl	8000210 <strcmp>
 8016262:	b168      	cbz	r0, 8016280 <rcl_get_automatic_discovery_range+0x68>
 8016264:	490b      	ldr	r1, [pc, #44]	@ (8016294 <rcl_get_automatic_discovery_range+0x7c>)
 8016266:	4628      	mov	r0, r5
 8016268:	f7e9 ffd2 	bl	8000210 <strcmp>
 801626c:	2800      	cmp	r0, #0
 801626e:	d0e4      	beq.n	801623a <rcl_get_automatic_discovery_range+0x22>
 8016270:	4909      	ldr	r1, [pc, #36]	@ (8016298 <rcl_get_automatic_discovery_range+0x80>)
 8016272:	4628      	mov	r0, r5
 8016274:	f7e9 ffcc 	bl	8000210 <strcmp>
 8016278:	b910      	cbnz	r0, 8016280 <rcl_get_automatic_discovery_range+0x68>
 801627a:	2304      	movs	r3, #4
 801627c:	7023      	strb	r3, [r4, #0]
 801627e:	e7de      	b.n	801623e <rcl_get_automatic_discovery_range+0x26>
 8016280:	2302      	movs	r3, #2
 8016282:	7023      	strb	r3, [r4, #0]
 8016284:	e7db      	b.n	801623e <rcl_get_automatic_discovery_range+0x26>
 8016286:	bf00      	nop
 8016288:	0801901c 	.word	0x0801901c
 801628c:	0801903c 	.word	0x0801903c
 8016290:	08019040 	.word	0x08019040
 8016294:	0801904c 	.word	0x0801904c
 8016298:	08019054 	.word	0x08019054

0801629c <rcl_automatic_discovery_range_to_string>:
 801629c:	2804      	cmp	r0, #4
 801629e:	bf9a      	itte	ls
 80162a0:	4b02      	ldrls	r3, [pc, #8]	@ (80162ac <rcl_automatic_discovery_range_to_string+0x10>)
 80162a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80162a6:	2000      	movhi	r0, #0
 80162a8:	4770      	bx	lr
 80162aa:	bf00      	nop
 80162ac:	08019874 	.word	0x08019874

080162b0 <rcl_get_discovery_static_peers>:
 80162b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162b4:	b08c      	sub	sp, #48	@ 0x30
 80162b6:	2300      	movs	r3, #0
 80162b8:	9304      	str	r3, [sp, #16]
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d04e      	beq.n	801635c <rcl_get_discovery_static_peers+0xac>
 80162be:	460d      	mov	r5, r1
 80162c0:	2900      	cmp	r1, #0
 80162c2:	d04b      	beq.n	801635c <rcl_get_discovery_static_peers+0xac>
 80162c4:	4604      	mov	r4, r0
 80162c6:	a904      	add	r1, sp, #16
 80162c8:	482d      	ldr	r0, [pc, #180]	@ (8016380 <rcl_get_discovery_static_peers+0xd0>)
 80162ca:	f7fc fee7 	bl	801309c <rcutils_get_env>
 80162ce:	b118      	cbz	r0, 80162d8 <rcl_get_discovery_static_peers+0x28>
 80162d0:	2001      	movs	r0, #1
 80162d2:	b00c      	add	sp, #48	@ 0x30
 80162d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162d8:	9b04      	ldr	r3, [sp, #16]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d0f8      	beq.n	80162d0 <rcl_get_discovery_static_peers+0x20>
 80162de:	af05      	add	r7, sp, #20
 80162e0:	4638      	mov	r0, r7
 80162e2:	f000 fc7f 	bl	8016be4 <rcutils_get_zero_initialized_string_array>
 80162e6:	f105 0308 	add.w	r3, r5, #8
 80162ea:	9703      	str	r7, [sp, #12]
 80162ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80162f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80162f4:	9804      	ldr	r0, [sp, #16]
 80162f6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80162fa:	213b      	movs	r1, #59	@ 0x3b
 80162fc:	f000 fbc2 	bl	8016a84 <rcutils_split>
 8016300:	2800      	cmp	r0, #0
 8016302:	d1e5      	bne.n	80162d0 <rcl_get_discovery_static_peers+0x20>
 8016304:	9905      	ldr	r1, [sp, #20]
 8016306:	462a      	mov	r2, r5
 8016308:	4620      	mov	r0, r4
 801630a:	f000 fcc3 	bl	8016c94 <rmw_discovery_options_init>
 801630e:	4606      	mov	r6, r0
 8016310:	bb90      	cbnz	r0, 8016378 <rcl_get_discovery_static_peers+0xc8>
 8016312:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016316:	f1b9 0f00 	cmp.w	r9, #0
 801631a:	d026      	beq.n	801636a <rcl_get_discovery_static_peers+0xba>
 801631c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016320:	4680      	mov	r8, r0
 8016322:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8016326:	4628      	mov	r0, r5
 8016328:	f7e9 ffd2 	bl	80002d0 <strlen>
 801632c:	28ff      	cmp	r0, #255	@ 0xff
 801632e:	4629      	mov	r1, r5
 8016330:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8016334:	d816      	bhi.n	8016364 <rcl_get_discovery_static_peers+0xb4>
 8016336:	6860      	ldr	r0, [r4, #4]
 8016338:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801633c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8016340:	f001 fb93 	bl	8017a6a <strncpy>
 8016344:	6863      	ldr	r3, [r4, #4]
 8016346:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801634a:	3601      	adds	r6, #1
 801634c:	442b      	add	r3, r5
 801634e:	454e      	cmp	r6, r9
 8016350:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8016354:	d209      	bcs.n	801636a <rcl_get_discovery_static_peers+0xba>
 8016356:	f8dd a018 	ldr.w	sl, [sp, #24]
 801635a:	e7e2      	b.n	8016322 <rcl_get_discovery_static_peers+0x72>
 801635c:	200b      	movs	r0, #11
 801635e:	b00c      	add	sp, #48	@ 0x30
 8016360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016364:	3601      	adds	r6, #1
 8016366:	454e      	cmp	r6, r9
 8016368:	d3db      	bcc.n	8016322 <rcl_get_discovery_static_peers+0x72>
 801636a:	4638      	mov	r0, r7
 801636c:	f000 fc6c 	bl	8016c48 <rcutils_string_array_fini>
 8016370:	3800      	subs	r0, #0
 8016372:	bf18      	it	ne
 8016374:	2001      	movne	r0, #1
 8016376:	e7ac      	b.n	80162d2 <rcl_get_discovery_static_peers+0x22>
 8016378:	f7f9 ff18 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 801637c:	e7a9      	b.n	80162d2 <rcl_get_discovery_static_peers+0x22>
 801637e:	bf00      	nop
 8016380:	08019064 	.word	0x08019064

08016384 <rcl_get_default_domain_id>:
 8016384:	b530      	push	{r4, r5, lr}
 8016386:	b083      	sub	sp, #12
 8016388:	2300      	movs	r3, #0
 801638a:	9300      	str	r3, [sp, #0]
 801638c:	b1f0      	cbz	r0, 80163cc <rcl_get_default_domain_id+0x48>
 801638e:	4604      	mov	r4, r0
 8016390:	4669      	mov	r1, sp
 8016392:	4812      	ldr	r0, [pc, #72]	@ (80163dc <rcl_get_default_domain_id+0x58>)
 8016394:	f7fc fe82 	bl	801309c <rcutils_get_env>
 8016398:	4602      	mov	r2, r0
 801639a:	b108      	cbz	r0, 80163a0 <rcl_get_default_domain_id+0x1c>
 801639c:	2001      	movs	r0, #1
 801639e:	e004      	b.n	80163aa <rcl_get_default_domain_id+0x26>
 80163a0:	9800      	ldr	r0, [sp, #0]
 80163a2:	b108      	cbz	r0, 80163a8 <rcl_get_default_domain_id+0x24>
 80163a4:	7803      	ldrb	r3, [r0, #0]
 80163a6:	b913      	cbnz	r3, 80163ae <rcl_get_default_domain_id+0x2a>
 80163a8:	2000      	movs	r0, #0
 80163aa:	b003      	add	sp, #12
 80163ac:	bd30      	pop	{r4, r5, pc}
 80163ae:	a901      	add	r1, sp, #4
 80163b0:	9201      	str	r2, [sp, #4]
 80163b2:	f001 f899 	bl	80174e8 <strtoul>
 80163b6:	4605      	mov	r5, r0
 80163b8:	b158      	cbz	r0, 80163d2 <rcl_get_default_domain_id+0x4e>
 80163ba:	1c43      	adds	r3, r0, #1
 80163bc:	d104      	bne.n	80163c8 <rcl_get_default_domain_id+0x44>
 80163be:	f001 fbd3 	bl	8017b68 <__errno>
 80163c2:	6803      	ldr	r3, [r0, #0]
 80163c4:	2b22      	cmp	r3, #34	@ 0x22
 80163c6:	d0e9      	beq.n	801639c <rcl_get_default_domain_id+0x18>
 80163c8:	6025      	str	r5, [r4, #0]
 80163ca:	e7ed      	b.n	80163a8 <rcl_get_default_domain_id+0x24>
 80163cc:	200b      	movs	r0, #11
 80163ce:	b003      	add	sp, #12
 80163d0:	bd30      	pop	{r4, r5, pc}
 80163d2:	9b01      	ldr	r3, [sp, #4]
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d0f6      	beq.n	80163c8 <rcl_get_default_domain_id+0x44>
 80163da:	e7df      	b.n	801639c <rcl_get_default_domain_id+0x18>
 80163dc:	08019144 	.word	0x08019144

080163e0 <rcl_expand_topic_name>:
 80163e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163e4:	b08b      	sub	sp, #44	@ 0x2c
 80163e6:	9306      	str	r3, [sp, #24]
 80163e8:	2800      	cmp	r0, #0
 80163ea:	f000 80ad 	beq.w	8016548 <rcl_expand_topic_name+0x168>
 80163ee:	460e      	mov	r6, r1
 80163f0:	2900      	cmp	r1, #0
 80163f2:	f000 80a9 	beq.w	8016548 <rcl_expand_topic_name+0x168>
 80163f6:	4617      	mov	r7, r2
 80163f8:	2a00      	cmp	r2, #0
 80163fa:	f000 80a5 	beq.w	8016548 <rcl_expand_topic_name+0x168>
 80163fe:	2b00      	cmp	r3, #0
 8016400:	f000 80a2 	beq.w	8016548 <rcl_expand_topic_name+0x168>
 8016404:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016406:	2b00      	cmp	r3, #0
 8016408:	f000 809e 	beq.w	8016548 <rcl_expand_topic_name+0x168>
 801640c:	2200      	movs	r2, #0
 801640e:	a909      	add	r1, sp, #36	@ 0x24
 8016410:	4680      	mov	r8, r0
 8016412:	f000 fa45 	bl	80168a0 <rcl_validate_topic_name>
 8016416:	4605      	mov	r5, r0
 8016418:	2800      	cmp	r0, #0
 801641a:	f040 8096 	bne.w	801654a <rcl_expand_topic_name+0x16a>
 801641e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016420:	2b00      	cmp	r3, #0
 8016422:	f040 809a 	bne.w	801655a <rcl_expand_topic_name+0x17a>
 8016426:	4602      	mov	r2, r0
 8016428:	a909      	add	r1, sp, #36	@ 0x24
 801642a:	4630      	mov	r0, r6
 801642c:	f7fd fa8e 	bl	801394c <rmw_validate_node_name>
 8016430:	2800      	cmp	r0, #0
 8016432:	f040 808e 	bne.w	8016552 <rcl_expand_topic_name+0x172>
 8016436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016438:	2a00      	cmp	r2, #0
 801643a:	f040 8093 	bne.w	8016564 <rcl_expand_topic_name+0x184>
 801643e:	a909      	add	r1, sp, #36	@ 0x24
 8016440:	4638      	mov	r0, r7
 8016442:	f7fd fa65 	bl	8013910 <rmw_validate_namespace>
 8016446:	2800      	cmp	r0, #0
 8016448:	f040 8083 	bne.w	8016552 <rcl_expand_topic_name+0x172>
 801644c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801644e:	2d00      	cmp	r5, #0
 8016450:	f040 80f5 	bne.w	801663e <rcl_expand_topic_name+0x25e>
 8016454:	217b      	movs	r1, #123	@ 0x7b
 8016456:	4640      	mov	r0, r8
 8016458:	f001 fae8 	bl	8017a2c <strchr>
 801645c:	f898 3000 	ldrb.w	r3, [r8]
 8016460:	2b2f      	cmp	r3, #47	@ 0x2f
 8016462:	4604      	mov	r4, r0
 8016464:	f000 809f 	beq.w	80165a6 <rcl_expand_topic_name+0x1c6>
 8016468:	2b7e      	cmp	r3, #126	@ 0x7e
 801646a:	f040 80ea 	bne.w	8016642 <rcl_expand_topic_name+0x262>
 801646e:	4638      	mov	r0, r7
 8016470:	f7e9 ff2e 	bl	80002d0 <strlen>
 8016474:	4a86      	ldr	r2, [pc, #536]	@ (8016690 <rcl_expand_topic_name+0x2b0>)
 8016476:	4b87      	ldr	r3, [pc, #540]	@ (8016694 <rcl_expand_topic_name+0x2b4>)
 8016478:	2801      	cmp	r0, #1
 801647a:	bf08      	it	eq
 801647c:	4613      	moveq	r3, r2
 801647e:	9302      	str	r3, [sp, #8]
 8016480:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016488:	f108 0301 	add.w	r3, r8, #1
 801648c:	9305      	str	r3, [sp, #20]
 801648e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016492:	9301      	str	r3, [sp, #4]
 8016494:	ab14      	add	r3, sp, #80	@ 0x50
 8016496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016498:	f7fc fe18 	bl	80130cc <rcutils_format_string_limit>
 801649c:	4682      	mov	sl, r0
 801649e:	2800      	cmp	r0, #0
 80164a0:	f000 80e1 	beq.w	8016666 <rcl_expand_topic_name+0x286>
 80164a4:	2c00      	cmp	r4, #0
 80164a6:	f000 8085 	beq.w	80165b4 <rcl_expand_topic_name+0x1d4>
 80164aa:	217b      	movs	r1, #123	@ 0x7b
 80164ac:	f001 fabe 	bl	8017a2c <strchr>
 80164b0:	46d1      	mov	r9, sl
 80164b2:	4604      	mov	r4, r0
 80164b4:	9507      	str	r5, [sp, #28]
 80164b6:	464d      	mov	r5, r9
 80164b8:	2c00      	cmp	r4, #0
 80164ba:	f000 80a1 	beq.w	8016600 <rcl_expand_topic_name+0x220>
 80164be:	217d      	movs	r1, #125	@ 0x7d
 80164c0:	4628      	mov	r0, r5
 80164c2:	f001 fab3 	bl	8017a2c <strchr>
 80164c6:	eba0 0904 	sub.w	r9, r0, r4
 80164ca:	f109 0b01 	add.w	fp, r9, #1
 80164ce:	4872      	ldr	r0, [pc, #456]	@ (8016698 <rcl_expand_topic_name+0x2b8>)
 80164d0:	465a      	mov	r2, fp
 80164d2:	4621      	mov	r1, r4
 80164d4:	f001 fab7 	bl	8017a46 <strncmp>
 80164d8:	2800      	cmp	r0, #0
 80164da:	d069      	beq.n	80165b0 <rcl_expand_topic_name+0x1d0>
 80164dc:	486f      	ldr	r0, [pc, #444]	@ (801669c <rcl_expand_topic_name+0x2bc>)
 80164de:	465a      	mov	r2, fp
 80164e0:	4621      	mov	r1, r4
 80164e2:	f001 fab0 	bl	8017a46 <strncmp>
 80164e6:	b130      	cbz	r0, 80164f6 <rcl_expand_topic_name+0x116>
 80164e8:	486d      	ldr	r0, [pc, #436]	@ (80166a0 <rcl_expand_topic_name+0x2c0>)
 80164ea:	465a      	mov	r2, fp
 80164ec:	4621      	mov	r1, r4
 80164ee:	f001 faaa 	bl	8017a46 <strncmp>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	d138      	bne.n	8016568 <rcl_expand_topic_name+0x188>
 80164f6:	46b9      	mov	r9, r7
 80164f8:	ab16      	add	r3, sp, #88	@ 0x58
 80164fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80164fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016502:	ab14      	add	r3, sp, #80	@ 0x50
 8016504:	4620      	mov	r0, r4
 8016506:	cb0c      	ldmia	r3, {r2, r3}
 8016508:	4659      	mov	r1, fp
 801650a:	f7fc ff33 	bl	8013374 <rcutils_strndup>
 801650e:	4604      	mov	r4, r0
 8016510:	2800      	cmp	r0, #0
 8016512:	f000 8099 	beq.w	8016648 <rcl_expand_topic_name+0x268>
 8016516:	464a      	mov	r2, r9
 8016518:	4628      	mov	r0, r5
 801651a:	ab14      	add	r3, sp, #80	@ 0x50
 801651c:	4621      	mov	r1, r4
 801651e:	f7fc fe0f 	bl	8013140 <rcutils_repl_str>
 8016522:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016524:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016526:	4605      	mov	r5, r0
 8016528:	4620      	mov	r0, r4
 801652a:	4798      	blx	r3
 801652c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801652e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016530:	4650      	mov	r0, sl
 8016532:	4798      	blx	r3
 8016534:	2d00      	cmp	r5, #0
 8016536:	f000 8091 	beq.w	801665c <rcl_expand_topic_name+0x27c>
 801653a:	217b      	movs	r1, #123	@ 0x7b
 801653c:	4628      	mov	r0, r5
 801653e:	f001 fa75 	bl	8017a2c <strchr>
 8016542:	46aa      	mov	sl, r5
 8016544:	4604      	mov	r4, r0
 8016546:	e7b7      	b.n	80164b8 <rcl_expand_topic_name+0xd8>
 8016548:	250b      	movs	r5, #11
 801654a:	4628      	mov	r0, r5
 801654c:	b00b      	add	sp, #44	@ 0x2c
 801654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016552:	f7f9 fe2b 	bl	80101ac <rcl_convert_rmw_ret_to_rcl_ret>
 8016556:	4605      	mov	r5, r0
 8016558:	e7f7      	b.n	801654a <rcl_expand_topic_name+0x16a>
 801655a:	2567      	movs	r5, #103	@ 0x67
 801655c:	4628      	mov	r0, r5
 801655e:	b00b      	add	sp, #44	@ 0x2c
 8016560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016564:	25c9      	movs	r5, #201	@ 0xc9
 8016566:	e7f0      	b.n	801654a <rcl_expand_topic_name+0x16a>
 8016568:	f109 32ff 	add.w	r2, r9, #4294967295
 801656c:	9806      	ldr	r0, [sp, #24]
 801656e:	1c61      	adds	r1, r4, #1
 8016570:	f7fd f81c 	bl	80135ac <rcutils_string_map_getn>
 8016574:	4681      	mov	r9, r0
 8016576:	2800      	cmp	r0, #0
 8016578:	d1be      	bne.n	80164f8 <rcl_expand_topic_name+0x118>
 801657a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801657c:	ab16      	add	r3, sp, #88	@ 0x58
 801657e:	6010      	str	r0, [r2, #0]
 8016580:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016584:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016588:	ab14      	add	r3, sp, #80	@ 0x50
 801658a:	cb0c      	ldmia	r3, {r2, r3}
 801658c:	4659      	mov	r1, fp
 801658e:	4620      	mov	r0, r4
 8016590:	f7fc fef0 	bl	8013374 <rcutils_strndup>
 8016594:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016596:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016598:	4798      	blx	r3
 801659a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801659c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801659e:	4650      	mov	r0, sl
 80165a0:	4798      	blx	r3
 80165a2:	2569      	movs	r5, #105	@ 0x69
 80165a4:	e7d1      	b.n	801654a <rcl_expand_topic_name+0x16a>
 80165a6:	2800      	cmp	r0, #0
 80165a8:	d061      	beq.n	801666e <rcl_expand_topic_name+0x28e>
 80165aa:	46c1      	mov	r9, r8
 80165ac:	46aa      	mov	sl, r5
 80165ae:	e781      	b.n	80164b4 <rcl_expand_topic_name+0xd4>
 80165b0:	46b1      	mov	r9, r6
 80165b2:	e7a1      	b.n	80164f8 <rcl_expand_topic_name+0x118>
 80165b4:	f89a 3000 	ldrb.w	r3, [sl]
 80165b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80165ba:	d01d      	beq.n	80165f8 <rcl_expand_topic_name+0x218>
 80165bc:	4638      	mov	r0, r7
 80165be:	f7e9 fe87 	bl	80002d0 <strlen>
 80165c2:	4a38      	ldr	r2, [pc, #224]	@ (80166a4 <rcl_expand_topic_name+0x2c4>)
 80165c4:	4b38      	ldr	r3, [pc, #224]	@ (80166a8 <rcl_expand_topic_name+0x2c8>)
 80165c6:	f8cd a010 	str.w	sl, [sp, #16]
 80165ca:	2801      	cmp	r0, #1
 80165cc:	bf18      	it	ne
 80165ce:	4613      	movne	r3, r2
 80165d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80165d4:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80165d8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80165da:	9703      	str	r7, [sp, #12]
 80165dc:	9200      	str	r2, [sp, #0]
 80165de:	ab14      	add	r3, sp, #80	@ 0x50
 80165e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80165e2:	f7fc fd73 	bl	80130cc <rcutils_format_string_limit>
 80165e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80165e8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80165ea:	4604      	mov	r4, r0
 80165ec:	4650      	mov	r0, sl
 80165ee:	4798      	blx	r3
 80165f0:	46a2      	mov	sl, r4
 80165f2:	4653      	mov	r3, sl
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d036      	beq.n	8016666 <rcl_expand_topic_name+0x286>
 80165f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80165fa:	f8c3 a000 	str.w	sl, [r3]
 80165fe:	e7a4      	b.n	801654a <rcl_expand_topic_name+0x16a>
 8016600:	4653      	mov	r3, sl
 8016602:	9d07      	ldr	r5, [sp, #28]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d1d5      	bne.n	80165b4 <rcl_expand_topic_name+0x1d4>
 8016608:	f898 3000 	ldrb.w	r3, [r8]
 801660c:	2b2f      	cmp	r3, #47	@ 0x2f
 801660e:	d0f3      	beq.n	80165f8 <rcl_expand_topic_name+0x218>
 8016610:	4638      	mov	r0, r7
 8016612:	f7e9 fe5d 	bl	80002d0 <strlen>
 8016616:	4a23      	ldr	r2, [pc, #140]	@ (80166a4 <rcl_expand_topic_name+0x2c4>)
 8016618:	4b23      	ldr	r3, [pc, #140]	@ (80166a8 <rcl_expand_topic_name+0x2c8>)
 801661a:	f8cd 8010 	str.w	r8, [sp, #16]
 801661e:	2801      	cmp	r0, #1
 8016620:	bf18      	it	ne
 8016622:	4613      	movne	r3, r2
 8016624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016628:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801662c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801662e:	9703      	str	r7, [sp, #12]
 8016630:	9200      	str	r2, [sp, #0]
 8016632:	ab14      	add	r3, sp, #80	@ 0x50
 8016634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016636:	f7fc fd49 	bl	80130cc <rcutils_format_string_limit>
 801663a:	4682      	mov	sl, r0
 801663c:	e7d9      	b.n	80165f2 <rcl_expand_topic_name+0x212>
 801663e:	25ca      	movs	r5, #202	@ 0xca
 8016640:	e783      	b.n	801654a <rcl_expand_topic_name+0x16a>
 8016642:	2800      	cmp	r0, #0
 8016644:	d1b1      	bne.n	80165aa <rcl_expand_topic_name+0x1ca>
 8016646:	e7e3      	b.n	8016610 <rcl_expand_topic_name+0x230>
 8016648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801664a:	6018      	str	r0, [r3, #0]
 801664c:	f7f3 fe78 	bl	800a340 <rcutils_reset_error>
 8016650:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016652:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016654:	4650      	mov	r0, sl
 8016656:	4798      	blx	r3
 8016658:	250a      	movs	r5, #10
 801665a:	e776      	b.n	801654a <rcl_expand_topic_name+0x16a>
 801665c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801665e:	601d      	str	r5, [r3, #0]
 8016660:	f7f3 fe6e 	bl	800a340 <rcutils_reset_error>
 8016664:	e7f8      	b.n	8016658 <rcl_expand_topic_name+0x278>
 8016666:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016668:	2300      	movs	r3, #0
 801666a:	6013      	str	r3, [r2, #0]
 801666c:	e7f4      	b.n	8016658 <rcl_expand_topic_name+0x278>
 801666e:	ab17      	add	r3, sp, #92	@ 0x5c
 8016670:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016674:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016678:	ab14      	add	r3, sp, #80	@ 0x50
 801667a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801667c:	4640      	mov	r0, r8
 801667e:	f7fc fe43 	bl	8013308 <rcutils_strdup>
 8016682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016684:	6018      	str	r0, [r3, #0]
 8016686:	2800      	cmp	r0, #0
 8016688:	f47f af5f 	bne.w	801654a <rcl_expand_topic_name+0x16a>
 801668c:	e7e8      	b.n	8016660 <rcl_expand_topic_name+0x280>
 801668e:	bf00      	nop
 8016690:	08018b10 	.word	0x08018b10
 8016694:	08019154 	.word	0x08019154
 8016698:	0801915c 	.word	0x0801915c
 801669c:	08019164 	.word	0x08019164
 80166a0:	0801916c 	.word	0x0801916c
 80166a4:	08018c80 	.word	0x08018c80
 80166a8:	08018b20 	.word	0x08018b20

080166ac <rcl_get_default_topic_name_substitutions>:
 80166ac:	2800      	cmp	r0, #0
 80166ae:	bf0c      	ite	eq
 80166b0:	200b      	moveq	r0, #11
 80166b2:	2000      	movne	r0, #0
 80166b4:	4770      	bx	lr
 80166b6:	bf00      	nop

080166b8 <rcl_get_zero_initialized_guard_condition>:
 80166b8:	4a03      	ldr	r2, [pc, #12]	@ (80166c8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80166ba:	4603      	mov	r3, r0
 80166bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80166c4:	4618      	mov	r0, r3
 80166c6:	4770      	bx	lr
 80166c8:	08019888 	.word	0x08019888

080166cc <rcl_guard_condition_init>:
 80166cc:	b082      	sub	sp, #8
 80166ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166d0:	b087      	sub	sp, #28
 80166d2:	ac0c      	add	r4, sp, #48	@ 0x30
 80166d4:	e884 000c 	stmia.w	r4, {r2, r3}
 80166d8:	46a6      	mov	lr, r4
 80166da:	460d      	mov	r5, r1
 80166dc:	4604      	mov	r4, r0
 80166de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80166e2:	f10d 0c04 	add.w	ip, sp, #4
 80166e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166ea:	f8de 3000 	ldr.w	r3, [lr]
 80166ee:	f8cc 3000 	str.w	r3, [ip]
 80166f2:	a801      	add	r0, sp, #4
 80166f4:	f7f3 fdf8 	bl	800a2e8 <rcutils_allocator_is_valid>
 80166f8:	b338      	cbz	r0, 801674a <rcl_guard_condition_init+0x7e>
 80166fa:	b334      	cbz	r4, 801674a <rcl_guard_condition_init+0x7e>
 80166fc:	6866      	ldr	r6, [r4, #4]
 80166fe:	b9ee      	cbnz	r6, 801673c <rcl_guard_condition_init+0x70>
 8016700:	b31d      	cbz	r5, 801674a <rcl_guard_condition_init+0x7e>
 8016702:	4628      	mov	r0, r5
 8016704:	f7f9 fd6c 	bl	80101e0 <rcl_context_is_valid>
 8016708:	b308      	cbz	r0, 801674e <rcl_guard_condition_init+0x82>
 801670a:	9b01      	ldr	r3, [sp, #4]
 801670c:	9905      	ldr	r1, [sp, #20]
 801670e:	201c      	movs	r0, #28
 8016710:	4798      	blx	r3
 8016712:	4607      	mov	r7, r0
 8016714:	6060      	str	r0, [r4, #4]
 8016716:	b310      	cbz	r0, 801675e <rcl_guard_condition_init+0x92>
 8016718:	6828      	ldr	r0, [r5, #0]
 801671a:	3028      	adds	r0, #40	@ 0x28
 801671c:	f000 fc06 	bl	8016f2c <rmw_create_guard_condition>
 8016720:	6038      	str	r0, [r7, #0]
 8016722:	6860      	ldr	r0, [r4, #4]
 8016724:	6807      	ldr	r7, [r0, #0]
 8016726:	b1a7      	cbz	r7, 8016752 <rcl_guard_condition_init+0x86>
 8016728:	2301      	movs	r3, #1
 801672a:	ac01      	add	r4, sp, #4
 801672c:	7103      	strb	r3, [r0, #4]
 801672e:	f100 0708 	add.w	r7, r0, #8
 8016732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016734:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016736:	6823      	ldr	r3, [r4, #0]
 8016738:	603b      	str	r3, [r7, #0]
 801673a:	e000      	b.n	801673e <rcl_guard_condition_init+0x72>
 801673c:	2664      	movs	r6, #100	@ 0x64
 801673e:	4630      	mov	r0, r6
 8016740:	b007      	add	sp, #28
 8016742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016746:	b002      	add	sp, #8
 8016748:	4770      	bx	lr
 801674a:	260b      	movs	r6, #11
 801674c:	e7f7      	b.n	801673e <rcl_guard_condition_init+0x72>
 801674e:	2665      	movs	r6, #101	@ 0x65
 8016750:	e7f5      	b.n	801673e <rcl_guard_condition_init+0x72>
 8016752:	9b02      	ldr	r3, [sp, #8]
 8016754:	9905      	ldr	r1, [sp, #20]
 8016756:	4798      	blx	r3
 8016758:	2601      	movs	r6, #1
 801675a:	6067      	str	r7, [r4, #4]
 801675c:	e7ef      	b.n	801673e <rcl_guard_condition_init+0x72>
 801675e:	260a      	movs	r6, #10
 8016760:	e7ed      	b.n	801673e <rcl_guard_condition_init+0x72>
 8016762:	bf00      	nop

08016764 <rcl_guard_condition_init_from_rmw>:
 8016764:	b082      	sub	sp, #8
 8016766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801676a:	b086      	sub	sp, #24
 801676c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016770:	4604      	mov	r4, r0
 8016772:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016776:	460e      	mov	r6, r1
 8016778:	4617      	mov	r7, r2
 801677a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801677e:	f10d 0e04 	add.w	lr, sp, #4
 8016782:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016786:	f8dc 3000 	ldr.w	r3, [ip]
 801678a:	f8ce 3000 	str.w	r3, [lr]
 801678e:	a801      	add	r0, sp, #4
 8016790:	f7f3 fdaa 	bl	800a2e8 <rcutils_allocator_is_valid>
 8016794:	b350      	cbz	r0, 80167ec <rcl_guard_condition_init_from_rmw+0x88>
 8016796:	b34c      	cbz	r4, 80167ec <rcl_guard_condition_init_from_rmw+0x88>
 8016798:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801679c:	f1b8 0f00 	cmp.w	r8, #0
 80167a0:	d11e      	bne.n	80167e0 <rcl_guard_condition_init_from_rmw+0x7c>
 80167a2:	b31f      	cbz	r7, 80167ec <rcl_guard_condition_init_from_rmw+0x88>
 80167a4:	4638      	mov	r0, r7
 80167a6:	f7f9 fd1b 	bl	80101e0 <rcl_context_is_valid>
 80167aa:	b328      	cbz	r0, 80167f8 <rcl_guard_condition_init_from_rmw+0x94>
 80167ac:	9b01      	ldr	r3, [sp, #4]
 80167ae:	9905      	ldr	r1, [sp, #20]
 80167b0:	201c      	movs	r0, #28
 80167b2:	4798      	blx	r3
 80167b4:	4605      	mov	r5, r0
 80167b6:	6060      	str	r0, [r4, #4]
 80167b8:	b358      	cbz	r0, 8016812 <rcl_guard_condition_init_from_rmw+0xae>
 80167ba:	b1fe      	cbz	r6, 80167fc <rcl_guard_condition_init_from_rmw+0x98>
 80167bc:	6006      	str	r6, [r0, #0]
 80167be:	f880 8004 	strb.w	r8, [r0, #4]
 80167c2:	ac01      	add	r4, sp, #4
 80167c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167c6:	f105 0c08 	add.w	ip, r5, #8
 80167ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167ce:	6823      	ldr	r3, [r4, #0]
 80167d0:	f8cc 3000 	str.w	r3, [ip]
 80167d4:	2000      	movs	r0, #0
 80167d6:	b006      	add	sp, #24
 80167d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167dc:	b002      	add	sp, #8
 80167de:	4770      	bx	lr
 80167e0:	2064      	movs	r0, #100	@ 0x64
 80167e2:	b006      	add	sp, #24
 80167e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167e8:	b002      	add	sp, #8
 80167ea:	4770      	bx	lr
 80167ec:	200b      	movs	r0, #11
 80167ee:	b006      	add	sp, #24
 80167f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167f4:	b002      	add	sp, #8
 80167f6:	4770      	bx	lr
 80167f8:	2065      	movs	r0, #101	@ 0x65
 80167fa:	e7f2      	b.n	80167e2 <rcl_guard_condition_init_from_rmw+0x7e>
 80167fc:	6838      	ldr	r0, [r7, #0]
 80167fe:	3028      	adds	r0, #40	@ 0x28
 8016800:	f000 fb94 	bl	8016f2c <rmw_create_guard_condition>
 8016804:	6028      	str	r0, [r5, #0]
 8016806:	6865      	ldr	r5, [r4, #4]
 8016808:	682e      	ldr	r6, [r5, #0]
 801680a:	b126      	cbz	r6, 8016816 <rcl_guard_condition_init_from_rmw+0xb2>
 801680c:	2301      	movs	r3, #1
 801680e:	712b      	strb	r3, [r5, #4]
 8016810:	e7d7      	b.n	80167c2 <rcl_guard_condition_init_from_rmw+0x5e>
 8016812:	200a      	movs	r0, #10
 8016814:	e7e5      	b.n	80167e2 <rcl_guard_condition_init_from_rmw+0x7e>
 8016816:	4628      	mov	r0, r5
 8016818:	9b02      	ldr	r3, [sp, #8]
 801681a:	9905      	ldr	r1, [sp, #20]
 801681c:	4798      	blx	r3
 801681e:	2001      	movs	r0, #1
 8016820:	6066      	str	r6, [r4, #4]
 8016822:	e7de      	b.n	80167e2 <rcl_guard_condition_init_from_rmw+0x7e>

08016824 <rcl_guard_condition_fini>:
 8016824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016826:	b1d8      	cbz	r0, 8016860 <rcl_guard_condition_fini+0x3c>
 8016828:	4604      	mov	r4, r0
 801682a:	6840      	ldr	r0, [r0, #4]
 801682c:	b158      	cbz	r0, 8016846 <rcl_guard_condition_fini+0x22>
 801682e:	6803      	ldr	r3, [r0, #0]
 8016830:	68c6      	ldr	r6, [r0, #12]
 8016832:	6987      	ldr	r7, [r0, #24]
 8016834:	b153      	cbz	r3, 801684c <rcl_guard_condition_fini+0x28>
 8016836:	7905      	ldrb	r5, [r0, #4]
 8016838:	b955      	cbnz	r5, 8016850 <rcl_guard_condition_fini+0x2c>
 801683a:	4639      	mov	r1, r7
 801683c:	47b0      	blx	r6
 801683e:	2300      	movs	r3, #0
 8016840:	6063      	str	r3, [r4, #4]
 8016842:	4628      	mov	r0, r5
 8016844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016846:	4605      	mov	r5, r0
 8016848:	4628      	mov	r0, r5
 801684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801684c:	461d      	mov	r5, r3
 801684e:	e7f4      	b.n	801683a <rcl_guard_condition_fini+0x16>
 8016850:	4618      	mov	r0, r3
 8016852:	f000 fb7f 	bl	8016f54 <rmw_destroy_guard_condition>
 8016856:	1e05      	subs	r5, r0, #0
 8016858:	bf18      	it	ne
 801685a:	2501      	movne	r5, #1
 801685c:	6860      	ldr	r0, [r4, #4]
 801685e:	e7ec      	b.n	801683a <rcl_guard_condition_fini+0x16>
 8016860:	250b      	movs	r5, #11
 8016862:	4628      	mov	r0, r5
 8016864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016866:	bf00      	nop

08016868 <rcl_guard_condition_get_default_options>:
 8016868:	b510      	push	{r4, lr}
 801686a:	4604      	mov	r4, r0
 801686c:	f7f3 fd10 	bl	800a290 <rcutils_get_default_allocator>
 8016870:	4620      	mov	r0, r4
 8016872:	bd10      	pop	{r4, pc}

08016874 <rcl_trigger_guard_condition>:
 8016874:	b148      	cbz	r0, 801688a <rcl_trigger_guard_condition+0x16>
 8016876:	b508      	push	{r3, lr}
 8016878:	6843      	ldr	r3, [r0, #4]
 801687a:	b143      	cbz	r3, 801688e <rcl_trigger_guard_condition+0x1a>
 801687c:	6818      	ldr	r0, [r3, #0]
 801687e:	f000 fb7d 	bl	8016f7c <rmw_trigger_guard_condition>
 8016882:	3800      	subs	r0, #0
 8016884:	bf18      	it	ne
 8016886:	2001      	movne	r0, #1
 8016888:	bd08      	pop	{r3, pc}
 801688a:	200b      	movs	r0, #11
 801688c:	4770      	bx	lr
 801688e:	200b      	movs	r0, #11
 8016890:	bd08      	pop	{r3, pc}
 8016892:	bf00      	nop

08016894 <rcl_guard_condition_get_rmw_handle>:
 8016894:	b110      	cbz	r0, 801689c <rcl_guard_condition_get_rmw_handle+0x8>
 8016896:	6840      	ldr	r0, [r0, #4]
 8016898:	b100      	cbz	r0, 801689c <rcl_guard_condition_get_rmw_handle+0x8>
 801689a:	6800      	ldr	r0, [r0, #0]
 801689c:	4770      	bx	lr
 801689e:	bf00      	nop

080168a0 <rcl_validate_topic_name>:
 80168a0:	2800      	cmp	r0, #0
 80168a2:	d06b      	beq.n	801697c <rcl_validate_topic_name+0xdc>
 80168a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168a8:	460d      	mov	r5, r1
 80168aa:	2900      	cmp	r1, #0
 80168ac:	d06d      	beq.n	801698a <rcl_validate_topic_name+0xea>
 80168ae:	4616      	mov	r6, r2
 80168b0:	4604      	mov	r4, r0
 80168b2:	f7e9 fd0d 	bl	80002d0 <strlen>
 80168b6:	b190      	cbz	r0, 80168de <rcl_validate_topic_name+0x3e>
 80168b8:	7821      	ldrb	r1, [r4, #0]
 80168ba:	4a71      	ldr	r2, [pc, #452]	@ (8016a80 <rcl_validate_topic_name+0x1e0>)
 80168bc:	5c53      	ldrb	r3, [r2, r1]
 80168be:	f013 0304 	ands.w	r3, r3, #4
 80168c2:	d15d      	bne.n	8016980 <rcl_validate_topic_name+0xe0>
 80168c4:	1e47      	subs	r7, r0, #1
 80168c6:	f814 c007 	ldrb.w	ip, [r4, r7]
 80168ca:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 80168ce:	d10d      	bne.n	80168ec <rcl_validate_topic_name+0x4c>
 80168d0:	2302      	movs	r3, #2
 80168d2:	602b      	str	r3, [r5, #0]
 80168d4:	b146      	cbz	r6, 80168e8 <rcl_validate_topic_name+0x48>
 80168d6:	6037      	str	r7, [r6, #0]
 80168d8:	2000      	movs	r0, #0
 80168da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168de:	2301      	movs	r3, #1
 80168e0:	602b      	str	r3, [r5, #0]
 80168e2:	b10e      	cbz	r6, 80168e8 <rcl_validate_topic_name+0x48>
 80168e4:	2300      	movs	r3, #0
 80168e6:	6033      	str	r3, [r6, #0]
 80168e8:	2000      	movs	r0, #0
 80168ea:	e7f6      	b.n	80168da <rcl_validate_topic_name+0x3a>
 80168ec:	f104 38ff 	add.w	r8, r4, #4294967295
 80168f0:	469a      	mov	sl, r3
 80168f2:	469e      	mov	lr, r3
 80168f4:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80168f8:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 80168fc:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8016900:	d85b      	bhi.n	80169ba <rcl_validate_topic_name+0x11a>
 8016902:	e8df f00c 	tbb	[pc, ip]
 8016906:	4463      	.short	0x4463
 8016908:	44444444 	.word	0x44444444
 801690c:	44444444 	.word	0x44444444
 8016910:	5a5a5a44 	.word	0x5a5a5a44
 8016914:	5a5a5a5a 	.word	0x5a5a5a5a
 8016918:	44444444 	.word	0x44444444
 801691c:	44444444 	.word	0x44444444
 8016920:	44444444 	.word	0x44444444
 8016924:	44444444 	.word	0x44444444
 8016928:	44444444 	.word	0x44444444
 801692c:	44444444 	.word	0x44444444
 8016930:	5a5a4444 	.word	0x5a5a4444
 8016934:	5a2e5a5a 	.word	0x5a2e5a5a
 8016938:	44444444 	.word	0x44444444
 801693c:	44444444 	.word	0x44444444
 8016940:	44444444 	.word	0x44444444
 8016944:	44444444 	.word	0x44444444
 8016948:	44444444 	.word	0x44444444
 801694c:	44444444 	.word	0x44444444
 8016950:	5a284444 	.word	0x5a284444
 8016954:	6b73      	.short	0x6b73
 8016956:	f1ba 0f00 	cmp.w	sl, #0
 801695a:	d13a      	bne.n	80169d2 <rcl_validate_topic_name+0x132>
 801695c:	4673      	mov	r3, lr
 801695e:	f04f 0a01 	mov.w	sl, #1
 8016962:	f10e 0e01 	add.w	lr, lr, #1
 8016966:	4570      	cmp	r0, lr
 8016968:	d1c4      	bne.n	80168f4 <rcl_validate_topic_name+0x54>
 801696a:	f1ba 0f00 	cmp.w	sl, #0
 801696e:	d048      	beq.n	8016a02 <rcl_validate_topic_name+0x162>
 8016970:	2205      	movs	r2, #5
 8016972:	602a      	str	r2, [r5, #0]
 8016974:	2e00      	cmp	r6, #0
 8016976:	d0b7      	beq.n	80168e8 <rcl_validate_topic_name+0x48>
 8016978:	6033      	str	r3, [r6, #0]
 801697a:	e7b5      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 801697c:	200b      	movs	r0, #11
 801697e:	4770      	bx	lr
 8016980:	2304      	movs	r3, #4
 8016982:	602b      	str	r3, [r5, #0]
 8016984:	2e00      	cmp	r6, #0
 8016986:	d1ad      	bne.n	80168e4 <rcl_validate_topic_name+0x44>
 8016988:	e7ae      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 801698a:	200b      	movs	r0, #11
 801698c:	e7a5      	b.n	80168da <rcl_validate_topic_name+0x3a>
 801698e:	f812 c009 	ldrb.w	ip, [r2, r9]
 8016992:	f01c 0f04 	tst.w	ip, #4
 8016996:	d0e4      	beq.n	8016962 <rcl_validate_topic_name+0xc2>
 8016998:	f1ba 0f00 	cmp.w	sl, #0
 801699c:	d0e1      	beq.n	8016962 <rcl_validate_topic_name+0xc2>
 801699e:	f1be 0f00 	cmp.w	lr, #0
 80169a2:	d0de      	beq.n	8016962 <rcl_validate_topic_name+0xc2>
 80169a4:	f10e 3cff 	add.w	ip, lr, #4294967295
 80169a8:	4563      	cmp	r3, ip
 80169aa:	d1da      	bne.n	8016962 <rcl_validate_topic_name+0xc2>
 80169ac:	2309      	movs	r3, #9
 80169ae:	602b      	str	r3, [r5, #0]
 80169b0:	2e00      	cmp	r6, #0
 80169b2:	d099      	beq.n	80168e8 <rcl_validate_topic_name+0x48>
 80169b4:	f8c6 e000 	str.w	lr, [r6]
 80169b8:	e796      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 80169ba:	f1ba 0f00 	cmp.w	sl, #0
 80169be:	bf0c      	ite	eq
 80169c0:	2303      	moveq	r3, #3
 80169c2:	2308      	movne	r3, #8
 80169c4:	602b      	str	r3, [r5, #0]
 80169c6:	2e00      	cmp	r6, #0
 80169c8:	d1f4      	bne.n	80169b4 <rcl_validate_topic_name+0x114>
 80169ca:	e78d      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 80169cc:	f1ba 0f00 	cmp.w	sl, #0
 80169d0:	d0c7      	beq.n	8016962 <rcl_validate_topic_name+0xc2>
 80169d2:	2308      	movs	r3, #8
 80169d4:	602b      	str	r3, [r5, #0]
 80169d6:	2e00      	cmp	r6, #0
 80169d8:	d1ec      	bne.n	80169b4 <rcl_validate_topic_name+0x114>
 80169da:	e785      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 80169dc:	f1be 0f00 	cmp.w	lr, #0
 80169e0:	d0bf      	beq.n	8016962 <rcl_validate_topic_name+0xc2>
 80169e2:	2306      	movs	r3, #6
 80169e4:	602b      	str	r3, [r5, #0]
 80169e6:	2e00      	cmp	r6, #0
 80169e8:	d1e4      	bne.n	80169b4 <rcl_validate_topic_name+0x114>
 80169ea:	e77d      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 80169ec:	f1ba 0f00 	cmp.w	sl, #0
 80169f0:	d104      	bne.n	80169fc <rcl_validate_topic_name+0x15c>
 80169f2:	2305      	movs	r3, #5
 80169f4:	602b      	str	r3, [r5, #0]
 80169f6:	2e00      	cmp	r6, #0
 80169f8:	d1dc      	bne.n	80169b4 <rcl_validate_topic_name+0x114>
 80169fa:	e775      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 80169fc:	f04f 0a00 	mov.w	sl, #0
 8016a00:	e7af      	b.n	8016962 <rcl_validate_topic_name+0xc2>
 8016a02:	297e      	cmp	r1, #126	@ 0x7e
 8016a04:	d01d      	beq.n	8016a42 <rcl_validate_topic_name+0x1a2>
 8016a06:	2101      	movs	r1, #1
 8016a08:	e006      	b.n	8016a18 <rcl_validate_topic_name+0x178>
 8016a0a:	458e      	cmp	lr, r1
 8016a0c:	f104 0401 	add.w	r4, r4, #1
 8016a10:	f101 0301 	add.w	r3, r1, #1
 8016a14:	d912      	bls.n	8016a3c <rcl_validate_topic_name+0x19c>
 8016a16:	4619      	mov	r1, r3
 8016a18:	4557      	cmp	r7, sl
 8016a1a:	f10a 0a01 	add.w	sl, sl, #1
 8016a1e:	d0f4      	beq.n	8016a0a <rcl_validate_topic_name+0x16a>
 8016a20:	7823      	ldrb	r3, [r4, #0]
 8016a22:	2b2f      	cmp	r3, #47	@ 0x2f
 8016a24:	d1f1      	bne.n	8016a0a <rcl_validate_topic_name+0x16a>
 8016a26:	7863      	ldrb	r3, [r4, #1]
 8016a28:	5cd3      	ldrb	r3, [r2, r3]
 8016a2a:	075b      	lsls	r3, r3, #29
 8016a2c:	d5ed      	bpl.n	8016a0a <rcl_validate_topic_name+0x16a>
 8016a2e:	2304      	movs	r3, #4
 8016a30:	602b      	str	r3, [r5, #0]
 8016a32:	2e00      	cmp	r6, #0
 8016a34:	f43f af58 	beq.w	80168e8 <rcl_validate_topic_name+0x48>
 8016a38:	6031      	str	r1, [r6, #0]
 8016a3a:	e755      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	602b      	str	r3, [r5, #0]
 8016a40:	e752      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 8016a42:	4653      	mov	r3, sl
 8016a44:	2101      	movs	r1, #1
 8016a46:	e00a      	b.n	8016a5e <rcl_validate_topic_name+0x1be>
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d012      	beq.n	8016a72 <rcl_validate_topic_name+0x1d2>
 8016a4c:	458e      	cmp	lr, r1
 8016a4e:	f103 0301 	add.w	r3, r3, #1
 8016a52:	f104 0401 	add.w	r4, r4, #1
 8016a56:	f101 0001 	add.w	r0, r1, #1
 8016a5a:	d9ef      	bls.n	8016a3c <rcl_validate_topic_name+0x19c>
 8016a5c:	4601      	mov	r1, r0
 8016a5e:	429f      	cmp	r7, r3
 8016a60:	d0f4      	beq.n	8016a4c <rcl_validate_topic_name+0x1ac>
 8016a62:	7820      	ldrb	r0, [r4, #0]
 8016a64:	282f      	cmp	r0, #47	@ 0x2f
 8016a66:	d1ef      	bne.n	8016a48 <rcl_validate_topic_name+0x1a8>
 8016a68:	7860      	ldrb	r0, [r4, #1]
 8016a6a:	5c10      	ldrb	r0, [r2, r0]
 8016a6c:	0740      	lsls	r0, r0, #29
 8016a6e:	d5ed      	bpl.n	8016a4c <rcl_validate_topic_name+0x1ac>
 8016a70:	e7dd      	b.n	8016a2e <rcl_validate_topic_name+0x18e>
 8016a72:	2207      	movs	r2, #7
 8016a74:	602a      	str	r2, [r5, #0]
 8016a76:	2e00      	cmp	r6, #0
 8016a78:	f47f af7e 	bne.w	8016978 <rcl_validate_topic_name+0xd8>
 8016a7c:	e734      	b.n	80168e8 <rcl_validate_topic_name+0x48>
 8016a7e:	bf00      	nop
 8016a80:	0801998b 	.word	0x0801998b

08016a84 <rcutils_split>:
 8016a84:	b082      	sub	sp, #8
 8016a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a8a:	b08b      	sub	sp, #44	@ 0x2c
 8016a8c:	ac14      	add	r4, sp, #80	@ 0x50
 8016a8e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8016a90:	e884 000c 	stmia.w	r4, {r2, r3}
 8016a94:	2f00      	cmp	r7, #0
 8016a96:	f000 8091 	beq.w	8016bbc <rcutils_split+0x138>
 8016a9a:	4606      	mov	r6, r0
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d072      	beq.n	8016b86 <rcutils_split+0x102>
 8016aa0:	7804      	ldrb	r4, [r0, #0]
 8016aa2:	2c00      	cmp	r4, #0
 8016aa4:	d06f      	beq.n	8016b86 <rcutils_split+0x102>
 8016aa6:	460d      	mov	r5, r1
 8016aa8:	f7e9 fc12 	bl	80002d0 <strlen>
 8016aac:	1833      	adds	r3, r6, r0
 8016aae:	1b64      	subs	r4, r4, r5
 8016ab0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016ab4:	4681      	mov	r9, r0
 8016ab6:	fab4 f484 	clz	r4, r4
 8016aba:	0964      	lsrs	r4, r4, #5
 8016abc:	42ab      	cmp	r3, r5
 8016abe:	bf08      	it	eq
 8016ac0:	f1a9 0901 	subeq.w	r9, r9, #1
 8016ac4:	454c      	cmp	r4, r9
 8016ac6:	d26a      	bcs.n	8016b9e <rcutils_split+0x11a>
 8016ac8:	1933      	adds	r3, r6, r4
 8016aca:	eb06 0009 	add.w	r0, r6, r9
 8016ace:	2101      	movs	r1, #1
 8016ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ad4:	42aa      	cmp	r2, r5
 8016ad6:	bf08      	it	eq
 8016ad8:	3101      	addeq	r1, #1
 8016ada:	4283      	cmp	r3, r0
 8016adc:	d1f8      	bne.n	8016ad0 <rcutils_split+0x4c>
 8016ade:	aa14      	add	r2, sp, #80	@ 0x50
 8016ae0:	4638      	mov	r0, r7
 8016ae2:	f000 f88f 	bl	8016c04 <rcutils_string_array_init>
 8016ae6:	2800      	cmp	r0, #0
 8016ae8:	d141      	bne.n	8016b6e <rcutils_split+0xea>
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	4680      	mov	r8, r0
 8016aee:	46a2      	mov	sl, r4
 8016af0:	e002      	b.n	8016af8 <rcutils_split+0x74>
 8016af2:	3401      	adds	r4, #1
 8016af4:	454c      	cmp	r4, r9
 8016af6:	d222      	bcs.n	8016b3e <rcutils_split+0xba>
 8016af8:	5d33      	ldrb	r3, [r6, r4]
 8016afa:	42ab      	cmp	r3, r5
 8016afc:	d1f9      	bne.n	8016af2 <rcutils_split+0x6e>
 8016afe:	4554      	cmp	r4, sl
 8016b00:	eba4 0b0a 	sub.w	fp, r4, sl
 8016b04:	d038      	beq.n	8016b78 <rcutils_split+0xf4>
 8016b06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016b08:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016b0a:	9201      	str	r2, [sp, #4]
 8016b0c:	f10b 0002 	add.w	r0, fp, #2
 8016b10:	4798      	blx	r3
 8016b12:	9a01      	ldr	r2, [sp, #4]
 8016b14:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8016b18:	687a      	ldr	r2, [r7, #4]
 8016b1a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8016b1e:	eb06 030a 	add.w	r3, r6, sl
 8016b22:	f10b 0101 	add.w	r1, fp, #1
 8016b26:	2800      	cmp	r0, #0
 8016b28:	d04e      	beq.n	8016bc8 <rcutils_split+0x144>
 8016b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8016be0 <rcutils_split+0x15c>)
 8016b2c:	f000 fe02 	bl	8017734 <sniprintf>
 8016b30:	687a      	ldr	r2, [r7, #4]
 8016b32:	f108 0801 	add.w	r8, r8, #1
 8016b36:	3401      	adds	r4, #1
 8016b38:	454c      	cmp	r4, r9
 8016b3a:	46a2      	mov	sl, r4
 8016b3c:	d3dc      	bcc.n	8016af8 <rcutils_split+0x74>
 8016b3e:	4554      	cmp	r4, sl
 8016b40:	d035      	beq.n	8016bae <rcutils_split+0x12a>
 8016b42:	eba4 040a 	sub.w	r4, r4, sl
 8016b46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016b48:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016b4a:	9201      	str	r2, [sp, #4]
 8016b4c:	1ca0      	adds	r0, r4, #2
 8016b4e:	4798      	blx	r3
 8016b50:	9a01      	ldr	r2, [sp, #4]
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8016b58:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016b5c:	2800      	cmp	r0, #0
 8016b5e:	d035      	beq.n	8016bcc <rcutils_split+0x148>
 8016b60:	4a1f      	ldr	r2, [pc, #124]	@ (8016be0 <rcutils_split+0x15c>)
 8016b62:	eb06 030a 	add.w	r3, r6, sl
 8016b66:	1c61      	adds	r1, r4, #1
 8016b68:	f000 fde4 	bl	8017734 <sniprintf>
 8016b6c:	2000      	movs	r0, #0
 8016b6e:	b00b      	add	sp, #44	@ 0x2c
 8016b70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b74:	b002      	add	sp, #8
 8016b76:	4770      	bx	lr
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	3b01      	subs	r3, #1
 8016b7c:	2100      	movs	r1, #0
 8016b7e:	603b      	str	r3, [r7, #0]
 8016b80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8016b84:	e7d7      	b.n	8016b36 <rcutils_split+0xb2>
 8016b86:	a802      	add	r0, sp, #8
 8016b88:	ac02      	add	r4, sp, #8
 8016b8a:	f000 f82b 	bl	8016be4 <rcutils_get_zero_initialized_string_array>
 8016b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b90:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016b92:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016b96:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	e7e7      	b.n	8016b6e <rcutils_split+0xea>
 8016b9e:	aa14      	add	r2, sp, #80	@ 0x50
 8016ba0:	2101      	movs	r1, #1
 8016ba2:	4638      	mov	r0, r7
 8016ba4:	f000 f82e 	bl	8016c04 <rcutils_string_array_init>
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	d1e0      	bne.n	8016b6e <rcutils_split+0xea>
 8016bac:	687a      	ldr	r2, [r7, #4]
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	2100      	movs	r1, #0
 8016bb4:	603b      	str	r3, [r7, #0]
 8016bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8016bba:	e7ee      	b.n	8016b9a <rcutils_split+0x116>
 8016bbc:	200b      	movs	r0, #11
 8016bbe:	b00b      	add	sp, #44	@ 0x2c
 8016bc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc4:	b002      	add	sp, #8
 8016bc6:	4770      	bx	lr
 8016bc8:	f8c7 8000 	str.w	r8, [r7]
 8016bcc:	4638      	mov	r0, r7
 8016bce:	f000 f83b 	bl	8016c48 <rcutils_string_array_fini>
 8016bd2:	b908      	cbnz	r0, 8016bd8 <rcutils_split+0x154>
 8016bd4:	200a      	movs	r0, #10
 8016bd6:	e7ca      	b.n	8016b6e <rcutils_split+0xea>
 8016bd8:	f7f3 fbb2 	bl	800a340 <rcutils_reset_error>
 8016bdc:	e7fa      	b.n	8016bd4 <rcutils_split+0x150>
 8016bde:	bf00      	nop
 8016be0:	08018b14 	.word	0x08018b14

08016be4 <rcutils_get_zero_initialized_string_array>:
 8016be4:	b510      	push	{r4, lr}
 8016be6:	4c06      	ldr	r4, [pc, #24]	@ (8016c00 <rcutils_get_zero_initialized_string_array+0x1c>)
 8016be8:	4686      	mov	lr, r0
 8016bea:	4684      	mov	ip, r0
 8016bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bf2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016bf6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8016bfa:	4670      	mov	r0, lr
 8016bfc:	bd10      	pop	{r4, pc}
 8016bfe:	bf00      	nop
 8016c00:	08019890 	.word	0x08019890

08016c04 <rcutils_string_array_init>:
 8016c04:	b1da      	cbz	r2, 8016c3e <rcutils_string_array_init+0x3a>
 8016c06:	b570      	push	{r4, r5, r6, lr}
 8016c08:	4605      	mov	r5, r0
 8016c0a:	b1d0      	cbz	r0, 8016c42 <rcutils_string_array_init+0x3e>
 8016c0c:	460e      	mov	r6, r1
 8016c0e:	4614      	mov	r4, r2
 8016c10:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8016c14:	6001      	str	r1, [r0, #0]
 8016c16:	2104      	movs	r1, #4
 8016c18:	4630      	mov	r0, r6
 8016c1a:	4798      	blx	r3
 8016c1c:	6068      	str	r0, [r5, #4]
 8016c1e:	b150      	cbz	r0, 8016c36 <rcutils_string_array_init+0x32>
 8016c20:	46a4      	mov	ip, r4
 8016c22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c26:	f105 0408 	add.w	r4, r5, #8
 8016c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c2c:	f8dc 3000 	ldr.w	r3, [ip]
 8016c30:	6023      	str	r3, [r4, #0]
 8016c32:	2000      	movs	r0, #0
 8016c34:	bd70      	pop	{r4, r5, r6, pc}
 8016c36:	2e00      	cmp	r6, #0
 8016c38:	d0f2      	beq.n	8016c20 <rcutils_string_array_init+0x1c>
 8016c3a:	200a      	movs	r0, #10
 8016c3c:	bd70      	pop	{r4, r5, r6, pc}
 8016c3e:	200b      	movs	r0, #11
 8016c40:	4770      	bx	lr
 8016c42:	200b      	movs	r0, #11
 8016c44:	bd70      	pop	{r4, r5, r6, pc}
 8016c46:	bf00      	nop

08016c48 <rcutils_string_array_fini>:
 8016c48:	b310      	cbz	r0, 8016c90 <rcutils_string_array_fini+0x48>
 8016c4a:	6843      	ldr	r3, [r0, #4]
 8016c4c:	b570      	push	{r4, r5, r6, lr}
 8016c4e:	4604      	mov	r4, r0
 8016c50:	b1d3      	cbz	r3, 8016c88 <rcutils_string_array_fini+0x40>
 8016c52:	3008      	adds	r0, #8
 8016c54:	f7f3 fb48 	bl	800a2e8 <rcutils_allocator_is_valid>
 8016c58:	b1c0      	cbz	r0, 8016c8c <rcutils_string_array_fini+0x44>
 8016c5a:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016c5e:	b16b      	cbz	r3, 8016c7c <rcutils_string_array_fini+0x34>
 8016c60:	2500      	movs	r5, #0
 8016c62:	462e      	mov	r6, r5
 8016c64:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016c68:	68e3      	ldr	r3, [r4, #12]
 8016c6a:	69a1      	ldr	r1, [r4, #24]
 8016c6c:	4798      	blx	r3
 8016c6e:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016c72:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016c76:	3501      	adds	r5, #1
 8016c78:	42ab      	cmp	r3, r5
 8016c7a:	d8f3      	bhi.n	8016c64 <rcutils_string_array_fini+0x1c>
 8016c7c:	68e3      	ldr	r3, [r4, #12]
 8016c7e:	69a1      	ldr	r1, [r4, #24]
 8016c80:	4798      	blx	r3
 8016c82:	2300      	movs	r3, #0
 8016c84:	e9c4 3300 	strd	r3, r3, [r4]
 8016c88:	2000      	movs	r0, #0
 8016c8a:	bd70      	pop	{r4, r5, r6, pc}
 8016c8c:	200b      	movs	r0, #11
 8016c8e:	bd70      	pop	{r4, r5, r6, pc}
 8016c90:	200b      	movs	r0, #11
 8016c92:	4770      	bx	lr

08016c94 <rmw_discovery_options_init>:
 8016c94:	b328      	cbz	r0, 8016ce2 <rmw_discovery_options_init+0x4e>
 8016c96:	b570      	push	{r4, r5, r6, lr}
 8016c98:	4604      	mov	r4, r0
 8016c9a:	4610      	mov	r0, r2
 8016c9c:	460e      	mov	r6, r1
 8016c9e:	4615      	mov	r5, r2
 8016ca0:	f7f3 fb22 	bl	800a2e8 <rcutils_allocator_is_valid>
 8016ca4:	b1d8      	cbz	r0, 8016cde <rmw_discovery_options_init+0x4a>
 8016ca6:	68a3      	ldr	r3, [r4, #8]
 8016ca8:	b9cb      	cbnz	r3, 8016cde <rmw_discovery_options_init+0x4a>
 8016caa:	6863      	ldr	r3, [r4, #4]
 8016cac:	b9bb      	cbnz	r3, 8016cde <rmw_discovery_options_init+0x4a>
 8016cae:	7823      	ldrb	r3, [r4, #0]
 8016cb0:	b90b      	cbnz	r3, 8016cb6 <rmw_discovery_options_init+0x22>
 8016cb2:	2302      	movs	r3, #2
 8016cb4:	7023      	strb	r3, [r4, #0]
 8016cb6:	b186      	cbz	r6, 8016cda <rmw_discovery_options_init+0x46>
 8016cb8:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8016cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016cc0:	4630      	mov	r0, r6
 8016cc2:	4798      	blx	r3
 8016cc4:	6060      	str	r0, [r4, #4]
 8016cc6:	b170      	cbz	r0, 8016ce6 <rmw_discovery_options_init+0x52>
 8016cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cca:	f104 0c0c 	add.w	ip, r4, #12
 8016cce:	60a6      	str	r6, [r4, #8]
 8016cd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cd4:	682b      	ldr	r3, [r5, #0]
 8016cd6:	f8cc 3000 	str.w	r3, [ip]
 8016cda:	2000      	movs	r0, #0
 8016cdc:	bd70      	pop	{r4, r5, r6, pc}
 8016cde:	200b      	movs	r0, #11
 8016ce0:	bd70      	pop	{r4, r5, r6, pc}
 8016ce2:	200b      	movs	r0, #11
 8016ce4:	4770      	bx	lr
 8016ce6:	200a      	movs	r0, #10
 8016ce8:	bd70      	pop	{r4, r5, r6, pc}
 8016cea:	bf00      	nop

08016cec <rmw_enclave_options_copy>:
 8016cec:	b1e0      	cbz	r0, 8016d28 <rmw_enclave_options_copy+0x3c>
 8016cee:	b570      	push	{r4, r5, r6, lr}
 8016cf0:	4616      	mov	r6, r2
 8016cf2:	b082      	sub	sp, #8
 8016cf4:	b1aa      	cbz	r2, 8016d22 <rmw_enclave_options_copy+0x36>
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	4608      	mov	r0, r1
 8016cfa:	460c      	mov	r4, r1
 8016cfc:	f7f3 faf4 	bl	800a2e8 <rcutils_allocator_is_valid>
 8016d00:	b178      	cbz	r0, 8016d22 <rmw_enclave_options_copy+0x36>
 8016d02:	f104 030c 	add.w	r3, r4, #12
 8016d06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d0a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016d0e:	4628      	mov	r0, r5
 8016d10:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016d14:	f7fc faf8 	bl	8013308 <rcutils_strdup>
 8016d18:	b140      	cbz	r0, 8016d2c <rmw_enclave_options_copy+0x40>
 8016d1a:	6030      	str	r0, [r6, #0]
 8016d1c:	2000      	movs	r0, #0
 8016d1e:	b002      	add	sp, #8
 8016d20:	bd70      	pop	{r4, r5, r6, pc}
 8016d22:	200b      	movs	r0, #11
 8016d24:	b002      	add	sp, #8
 8016d26:	bd70      	pop	{r4, r5, r6, pc}
 8016d28:	200b      	movs	r0, #11
 8016d2a:	4770      	bx	lr
 8016d2c:	200a      	movs	r0, #10
 8016d2e:	e7f6      	b.n	8016d1e <rmw_enclave_options_copy+0x32>

08016d30 <rmw_enclave_options_fini>:
 8016d30:	b170      	cbz	r0, 8016d50 <rmw_enclave_options_fini+0x20>
 8016d32:	b538      	push	{r3, r4, r5, lr}
 8016d34:	4605      	mov	r5, r0
 8016d36:	4608      	mov	r0, r1
 8016d38:	460c      	mov	r4, r1
 8016d3a:	f7f3 fad5 	bl	800a2e8 <rcutils_allocator_is_valid>
 8016d3e:	b128      	cbz	r0, 8016d4c <rmw_enclave_options_fini+0x1c>
 8016d40:	4628      	mov	r0, r5
 8016d42:	6863      	ldr	r3, [r4, #4]
 8016d44:	6921      	ldr	r1, [r4, #16]
 8016d46:	4798      	blx	r3
 8016d48:	2000      	movs	r0, #0
 8016d4a:	bd38      	pop	{r3, r4, r5, pc}
 8016d4c:	200b      	movs	r0, #11
 8016d4e:	bd38      	pop	{r3, r4, r5, pc}
 8016d50:	200b      	movs	r0, #11
 8016d52:	4770      	bx	lr

08016d54 <rmw_get_default_security_options>:
 8016d54:	2200      	movs	r2, #0
 8016d56:	7002      	strb	r2, [r0, #0]
 8016d58:	6042      	str	r2, [r0, #4]
 8016d5a:	4770      	bx	lr

08016d5c <on_status>:
 8016d5c:	b082      	sub	sp, #8
 8016d5e:	b002      	add	sp, #8
 8016d60:	4770      	bx	lr
 8016d62:	bf00      	nop

08016d64 <on_topic>:
 8016d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d68:	4a22      	ldr	r2, [pc, #136]	@ (8016df4 <on_topic+0x90>)
 8016d6a:	b094      	sub	sp, #80	@ 0x50
 8016d6c:	6812      	ldr	r2, [r2, #0]
 8016d6e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016d70:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016d74:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016d78:	b3c2      	cbz	r2, 8016dec <on_topic+0x88>
 8016d7a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016d7e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016d82:	e001      	b.n	8016d88 <on_topic+0x24>
 8016d84:	6852      	ldr	r2, [r2, #4]
 8016d86:	b38a      	cbz	r2, 8016dec <on_topic+0x88>
 8016d88:	6894      	ldr	r4, [r2, #8]
 8016d8a:	8aa3      	ldrh	r3, [r4, #20]
 8016d8c:	428b      	cmp	r3, r1
 8016d8e:	d1f9      	bne.n	8016d84 <on_topic+0x20>
 8016d90:	7da3      	ldrb	r3, [r4, #22]
 8016d92:	4283      	cmp	r3, r0
 8016d94:	d1f6      	bne.n	8016d84 <on_topic+0x20>
 8016d96:	2248      	movs	r2, #72	@ 0x48
 8016d98:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016d9c:	4668      	mov	r0, sp
 8016d9e:	f000 ff18 	bl	8017bd2 <memcpy>
 8016da2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016da6:	cb0c      	ldmia	r3, {r2, r3}
 8016da8:	4620      	mov	r0, r4
 8016daa:	f7f3 ff37 	bl	800ac1c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016dae:	4607      	mov	r7, r0
 8016db0:	b1e0      	cbz	r0, 8016dec <on_topic+0x88>
 8016db2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016db6:	4632      	mov	r2, r6
 8016db8:	4628      	mov	r0, r5
 8016dba:	f108 0110 	add.w	r1, r8, #16
 8016dbe:	f7fe fa83 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 8016dc2:	b930      	cbnz	r0, 8016dd2 <on_topic+0x6e>
 8016dc4:	480c      	ldr	r0, [pc, #48]	@ (8016df8 <on_topic+0x94>)
 8016dc6:	4639      	mov	r1, r7
 8016dc8:	b014      	add	sp, #80	@ 0x50
 8016dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dce:	f7fc be25 	b.w	8013a1c <put_memory>
 8016dd2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016dd6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016dda:	f7fd ff49 	bl	8014c70 <rmw_uros_epoch_nanos>
 8016dde:	2305      	movs	r3, #5
 8016de0:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016de4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016de8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016dec:	b014      	add	sp, #80	@ 0x50
 8016dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df2:	bf00      	nop
 8016df4:	2000cb18 	.word	0x2000cb18
 8016df8:	2000c368 	.word	0x2000c368

08016dfc <on_request>:
 8016dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e00:	4823      	ldr	r0, [pc, #140]	@ (8016e90 <on_request+0x94>)
 8016e02:	b094      	sub	sp, #80	@ 0x50
 8016e04:	6800      	ldr	r0, [r0, #0]
 8016e06:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016e08:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016e0c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	d03b      	beq.n	8016e8a <on_request+0x8e>
 8016e12:	461d      	mov	r5, r3
 8016e14:	e001      	b.n	8016e1a <on_request+0x1e>
 8016e16:	6840      	ldr	r0, [r0, #4]
 8016e18:	b3b8      	cbz	r0, 8016e8a <on_request+0x8e>
 8016e1a:	6884      	ldr	r4, [r0, #8]
 8016e1c:	8b21      	ldrh	r1, [r4, #24]
 8016e1e:	4291      	cmp	r1, r2
 8016e20:	d1f9      	bne.n	8016e16 <on_request+0x1a>
 8016e22:	2248      	movs	r2, #72	@ 0x48
 8016e24:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016e28:	4668      	mov	r0, sp
 8016e2a:	f000 fed2 	bl	8017bd2 <memcpy>
 8016e2e:	f104 0320 	add.w	r3, r4, #32
 8016e32:	cb0c      	ldmia	r3, {r2, r3}
 8016e34:	4620      	mov	r0, r4
 8016e36:	f7f3 fef1 	bl	800ac1c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016e3a:	4680      	mov	r8, r0
 8016e3c:	b328      	cbz	r0, 8016e8a <on_request+0x8e>
 8016e3e:	4638      	mov	r0, r7
 8016e40:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016e44:	4632      	mov	r2, r6
 8016e46:	f107 0110 	add.w	r1, r7, #16
 8016e4a:	f7fe fa3d 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 8016e4e:	b930      	cbnz	r0, 8016e5e <on_request+0x62>
 8016e50:	4810      	ldr	r0, [pc, #64]	@ (8016e94 <on_request+0x98>)
 8016e52:	4641      	mov	r1, r8
 8016e54:	b014      	add	sp, #80	@ 0x50
 8016e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5a:	f7fc bddf 	b.w	8013a1c <put_memory>
 8016e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e60:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016e64:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016e68:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016e6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016e74:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016e78:	f7fd fefa 	bl	8014c70 <rmw_uros_epoch_nanos>
 8016e7c:	2303      	movs	r3, #3
 8016e7e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016e82:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016e86:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016e8a:	b014      	add	sp, #80	@ 0x50
 8016e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e90:	2000c6d0 	.word	0x2000c6d0
 8016e94:	2000c368 	.word	0x2000c368

08016e98 <on_reply>:
 8016e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9c:	4821      	ldr	r0, [pc, #132]	@ (8016f24 <on_reply+0x8c>)
 8016e9e:	b094      	sub	sp, #80	@ 0x50
 8016ea0:	6800      	ldr	r0, [r0, #0]
 8016ea2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016ea4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016ea8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016eaa:	b3b8      	cbz	r0, 8016f1c <on_reply+0x84>
 8016eac:	461d      	mov	r5, r3
 8016eae:	e001      	b.n	8016eb4 <on_reply+0x1c>
 8016eb0:	6840      	ldr	r0, [r0, #4]
 8016eb2:	b398      	cbz	r0, 8016f1c <on_reply+0x84>
 8016eb4:	6884      	ldr	r4, [r0, #8]
 8016eb6:	8b21      	ldrh	r1, [r4, #24]
 8016eb8:	4291      	cmp	r1, r2
 8016eba:	d1f9      	bne.n	8016eb0 <on_reply+0x18>
 8016ebc:	2248      	movs	r2, #72	@ 0x48
 8016ebe:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016ec2:	4668      	mov	r0, sp
 8016ec4:	f000 fe85 	bl	8017bd2 <memcpy>
 8016ec8:	f104 0320 	add.w	r3, r4, #32
 8016ecc:	cb0c      	ldmia	r3, {r2, r3}
 8016ece:	4620      	mov	r0, r4
 8016ed0:	f7f3 fea4 	bl	800ac1c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016ed4:	4680      	mov	r8, r0
 8016ed6:	b308      	cbz	r0, 8016f1c <on_reply+0x84>
 8016ed8:	4638      	mov	r0, r7
 8016eda:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016ede:	4632      	mov	r2, r6
 8016ee0:	f107 0110 	add.w	r1, r7, #16
 8016ee4:	f7fe f9f0 	bl	80152c8 <ucdr_deserialize_array_uint8_t>
 8016ee8:	b930      	cbnz	r0, 8016ef8 <on_reply+0x60>
 8016eea:	480f      	ldr	r0, [pc, #60]	@ (8016f28 <on_reply+0x90>)
 8016eec:	4641      	mov	r1, r8
 8016eee:	b014      	add	sp, #80	@ 0x50
 8016ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef4:	f7fc bd92 	b.w	8013a1c <put_memory>
 8016ef8:	2200      	movs	r2, #0
 8016efa:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016efe:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016f02:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016f06:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016f0a:	f7fd feb1 	bl	8014c70 <rmw_uros_epoch_nanos>
 8016f0e:	2304      	movs	r3, #4
 8016f10:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016f14:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016f18:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016f1c:	b014      	add	sp, #80	@ 0x50
 8016f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f22:	bf00      	nop
 8016f24:	2000c5f8 	.word	0x2000c5f8
 8016f28:	2000c368 	.word	0x2000c368

08016f2c <rmw_create_guard_condition>:
 8016f2c:	b538      	push	{r3, r4, r5, lr}
 8016f2e:	4605      	mov	r5, r0
 8016f30:	4807      	ldr	r0, [pc, #28]	@ (8016f50 <rmw_create_guard_condition+0x24>)
 8016f32:	f7fc fd63 	bl	80139fc <get_memory>
 8016f36:	b148      	cbz	r0, 8016f4c <rmw_create_guard_condition+0x20>
 8016f38:	6884      	ldr	r4, [r0, #8]
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	7423      	strb	r3, [r4, #16]
 8016f3e:	61e5      	str	r5, [r4, #28]
 8016f40:	f7fc fde2 	bl	8013b08 <rmw_get_implementation_identifier>
 8016f44:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016f48:	f104 0014 	add.w	r0, r4, #20
 8016f4c:	bd38      	pop	{r3, r4, r5, pc}
 8016f4e:	bf00      	nop
 8016f50:	2000a144 	.word	0x2000a144

08016f54 <rmw_destroy_guard_condition>:
 8016f54:	b508      	push	{r3, lr}
 8016f56:	4b08      	ldr	r3, [pc, #32]	@ (8016f78 <rmw_destroy_guard_condition+0x24>)
 8016f58:	6819      	ldr	r1, [r3, #0]
 8016f5a:	b911      	cbnz	r1, 8016f62 <rmw_destroy_guard_condition+0xe>
 8016f5c:	e00a      	b.n	8016f74 <rmw_destroy_guard_condition+0x20>
 8016f5e:	6849      	ldr	r1, [r1, #4]
 8016f60:	b141      	cbz	r1, 8016f74 <rmw_destroy_guard_condition+0x20>
 8016f62:	688b      	ldr	r3, [r1, #8]
 8016f64:	3314      	adds	r3, #20
 8016f66:	4298      	cmp	r0, r3
 8016f68:	d1f9      	bne.n	8016f5e <rmw_destroy_guard_condition+0xa>
 8016f6a:	4803      	ldr	r0, [pc, #12]	@ (8016f78 <rmw_destroy_guard_condition+0x24>)
 8016f6c:	f7fc fd56 	bl	8013a1c <put_memory>
 8016f70:	2000      	movs	r0, #0
 8016f72:	bd08      	pop	{r3, pc}
 8016f74:	2001      	movs	r0, #1
 8016f76:	bd08      	pop	{r3, pc}
 8016f78:	2000a144 	.word	0x2000a144

08016f7c <rmw_trigger_guard_condition>:
 8016f7c:	b160      	cbz	r0, 8016f98 <rmw_trigger_guard_condition+0x1c>
 8016f7e:	b510      	push	{r4, lr}
 8016f80:	4604      	mov	r4, r0
 8016f82:	6800      	ldr	r0, [r0, #0]
 8016f84:	f7f3 ffcc 	bl	800af20 <is_uxrce_rmw_identifier_valid>
 8016f88:	b908      	cbnz	r0, 8016f8e <rmw_trigger_guard_condition+0x12>
 8016f8a:	2001      	movs	r0, #1
 8016f8c:	bd10      	pop	{r4, pc}
 8016f8e:	6863      	ldr	r3, [r4, #4]
 8016f90:	2201      	movs	r2, #1
 8016f92:	741a      	strb	r2, [r3, #16]
 8016f94:	2000      	movs	r0, #0
 8016f96:	bd10      	pop	{r4, pc}
 8016f98:	2001      	movs	r0, #1
 8016f9a:	4770      	bx	lr

08016f9c <rosidl_runtime_c__String__init>:
 8016f9c:	b1b0      	cbz	r0, 8016fcc <rosidl_runtime_c__String__init+0x30>
 8016f9e:	b510      	push	{r4, lr}
 8016fa0:	b086      	sub	sp, #24
 8016fa2:	4604      	mov	r4, r0
 8016fa4:	a801      	add	r0, sp, #4
 8016fa6:	f7f3 f973 	bl	800a290 <rcutils_get_default_allocator>
 8016faa:	9b01      	ldr	r3, [sp, #4]
 8016fac:	9905      	ldr	r1, [sp, #20]
 8016fae:	2001      	movs	r0, #1
 8016fb0:	4798      	blx	r3
 8016fb2:	6020      	str	r0, [r4, #0]
 8016fb4:	b138      	cbz	r0, 8016fc6 <rosidl_runtime_c__String__init+0x2a>
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	2301      	movs	r3, #1
 8016fba:	7002      	strb	r2, [r0, #0]
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8016fc2:	b006      	add	sp, #24
 8016fc4:	bd10      	pop	{r4, pc}
 8016fc6:	2000      	movs	r0, #0
 8016fc8:	b006      	add	sp, #24
 8016fca:	bd10      	pop	{r4, pc}
 8016fcc:	2000      	movs	r0, #0
 8016fce:	4770      	bx	lr

08016fd0 <rosidl_runtime_c__String__fini>:
 8016fd0:	b320      	cbz	r0, 801701c <rosidl_runtime_c__String__fini+0x4c>
 8016fd2:	b510      	push	{r4, lr}
 8016fd4:	6803      	ldr	r3, [r0, #0]
 8016fd6:	b086      	sub	sp, #24
 8016fd8:	4604      	mov	r4, r0
 8016fda:	b173      	cbz	r3, 8016ffa <rosidl_runtime_c__String__fini+0x2a>
 8016fdc:	6883      	ldr	r3, [r0, #8]
 8016fde:	b1f3      	cbz	r3, 801701e <rosidl_runtime_c__String__fini+0x4e>
 8016fe0:	a801      	add	r0, sp, #4
 8016fe2:	f7f3 f955 	bl	800a290 <rcutils_get_default_allocator>
 8016fe6:	9b02      	ldr	r3, [sp, #8]
 8016fe8:	9905      	ldr	r1, [sp, #20]
 8016fea:	6820      	ldr	r0, [r4, #0]
 8016fec:	4798      	blx	r3
 8016fee:	2300      	movs	r3, #0
 8016ff0:	e9c4 3300 	strd	r3, r3, [r4]
 8016ff4:	60a3      	str	r3, [r4, #8]
 8016ff6:	b006      	add	sp, #24
 8016ff8:	bd10      	pop	{r4, pc}
 8016ffa:	6843      	ldr	r3, [r0, #4]
 8016ffc:	b9db      	cbnz	r3, 8017036 <rosidl_runtime_c__String__fini+0x66>
 8016ffe:	6883      	ldr	r3, [r0, #8]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d0f8      	beq.n	8016ff6 <rosidl_runtime_c__String__fini+0x26>
 8017004:	4b12      	ldr	r3, [pc, #72]	@ (8017050 <rosidl_runtime_c__String__fini+0x80>)
 8017006:	4813      	ldr	r0, [pc, #76]	@ (8017054 <rosidl_runtime_c__String__fini+0x84>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	2251      	movs	r2, #81	@ 0x51
 801700c:	68db      	ldr	r3, [r3, #12]
 801700e:	2101      	movs	r1, #1
 8017010:	f000 fb82 	bl	8017718 <fwrite>
 8017014:	f04f 30ff 	mov.w	r0, #4294967295
 8017018:	f000 f83e 	bl	8017098 <exit>
 801701c:	4770      	bx	lr
 801701e:	4b0c      	ldr	r3, [pc, #48]	@ (8017050 <rosidl_runtime_c__String__fini+0x80>)
 8017020:	480d      	ldr	r0, [pc, #52]	@ (8017058 <rosidl_runtime_c__String__fini+0x88>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	224c      	movs	r2, #76	@ 0x4c
 8017026:	68db      	ldr	r3, [r3, #12]
 8017028:	2101      	movs	r1, #1
 801702a:	f000 fb75 	bl	8017718 <fwrite>
 801702e:	f04f 30ff 	mov.w	r0, #4294967295
 8017032:	f000 f831 	bl	8017098 <exit>
 8017036:	4b06      	ldr	r3, [pc, #24]	@ (8017050 <rosidl_runtime_c__String__fini+0x80>)
 8017038:	4808      	ldr	r0, [pc, #32]	@ (801705c <rosidl_runtime_c__String__fini+0x8c>)
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	224e      	movs	r2, #78	@ 0x4e
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	2101      	movs	r1, #1
 8017042:	f000 fb69 	bl	8017718 <fwrite>
 8017046:	f04f 30ff 	mov.w	r0, #4294967295
 801704a:	f000 f825 	bl	8017098 <exit>
 801704e:	bf00      	nop
 8017050:	20000eb0 	.word	0x20000eb0
 8017054:	08019218 	.word	0x08019218
 8017058:	08019178 	.word	0x08019178
 801705c:	080191c8 	.word	0x080191c8

08017060 <calloc>:
 8017060:	4b02      	ldr	r3, [pc, #8]	@ (801706c <calloc+0xc>)
 8017062:	460a      	mov	r2, r1
 8017064:	4601      	mov	r1, r0
 8017066:	6818      	ldr	r0, [r3, #0]
 8017068:	f000 b802 	b.w	8017070 <_calloc_r>
 801706c:	20000eb0 	.word	0x20000eb0

08017070 <_calloc_r>:
 8017070:	b570      	push	{r4, r5, r6, lr}
 8017072:	fba1 5402 	umull	r5, r4, r1, r2
 8017076:	b934      	cbnz	r4, 8017086 <_calloc_r+0x16>
 8017078:	4629      	mov	r1, r5
 801707a:	f000 f899 	bl	80171b0 <_malloc_r>
 801707e:	4606      	mov	r6, r0
 8017080:	b928      	cbnz	r0, 801708e <_calloc_r+0x1e>
 8017082:	4630      	mov	r0, r6
 8017084:	bd70      	pop	{r4, r5, r6, pc}
 8017086:	220c      	movs	r2, #12
 8017088:	6002      	str	r2, [r0, #0]
 801708a:	2600      	movs	r6, #0
 801708c:	e7f9      	b.n	8017082 <_calloc_r+0x12>
 801708e:	462a      	mov	r2, r5
 8017090:	4621      	mov	r1, r4
 8017092:	f000 fcc3 	bl	8017a1c <memset>
 8017096:	e7f4      	b.n	8017082 <_calloc_r+0x12>

08017098 <exit>:
 8017098:	b508      	push	{r3, lr}
 801709a:	4b06      	ldr	r3, [pc, #24]	@ (80170b4 <exit+0x1c>)
 801709c:	4604      	mov	r4, r0
 801709e:	b113      	cbz	r3, 80170a6 <exit+0xe>
 80170a0:	2100      	movs	r1, #0
 80170a2:	f3af 8000 	nop.w
 80170a6:	4b04      	ldr	r3, [pc, #16]	@ (80170b8 <exit+0x20>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	b103      	cbz	r3, 80170ae <exit+0x16>
 80170ac:	4798      	blx	r3
 80170ae:	4620      	mov	r0, r4
 80170b0:	f7eb f902 	bl	80022b8 <_exit>
 80170b4:	00000000 	.word	0x00000000
 80170b8:	2000ed38 	.word	0x2000ed38

080170bc <getenv>:
 80170bc:	b507      	push	{r0, r1, r2, lr}
 80170be:	4b04      	ldr	r3, [pc, #16]	@ (80170d0 <getenv+0x14>)
 80170c0:	4601      	mov	r1, r0
 80170c2:	aa01      	add	r2, sp, #4
 80170c4:	6818      	ldr	r0, [r3, #0]
 80170c6:	f000 f805 	bl	80170d4 <_findenv_r>
 80170ca:	b003      	add	sp, #12
 80170cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80170d0:	20000eb0 	.word	0x20000eb0

080170d4 <_findenv_r>:
 80170d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017148 <_findenv_r+0x74>
 80170dc:	4606      	mov	r6, r0
 80170de:	4689      	mov	r9, r1
 80170e0:	4617      	mov	r7, r2
 80170e2:	f000 fda3 	bl	8017c2c <__env_lock>
 80170e6:	f8da 4000 	ldr.w	r4, [sl]
 80170ea:	b134      	cbz	r4, 80170fa <_findenv_r+0x26>
 80170ec:	464b      	mov	r3, r9
 80170ee:	4698      	mov	r8, r3
 80170f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170f4:	b13a      	cbz	r2, 8017106 <_findenv_r+0x32>
 80170f6:	2a3d      	cmp	r2, #61	@ 0x3d
 80170f8:	d1f9      	bne.n	80170ee <_findenv_r+0x1a>
 80170fa:	4630      	mov	r0, r6
 80170fc:	f000 fd9c 	bl	8017c38 <__env_unlock>
 8017100:	2000      	movs	r0, #0
 8017102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017106:	eba8 0809 	sub.w	r8, r8, r9
 801710a:	46a3      	mov	fp, r4
 801710c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017110:	2800      	cmp	r0, #0
 8017112:	d0f2      	beq.n	80170fa <_findenv_r+0x26>
 8017114:	4642      	mov	r2, r8
 8017116:	4649      	mov	r1, r9
 8017118:	f000 fc95 	bl	8017a46 <strncmp>
 801711c:	2800      	cmp	r0, #0
 801711e:	d1f4      	bne.n	801710a <_findenv_r+0x36>
 8017120:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017124:	eb03 0508 	add.w	r5, r3, r8
 8017128:	f813 3008 	ldrb.w	r3, [r3, r8]
 801712c:	2b3d      	cmp	r3, #61	@ 0x3d
 801712e:	d1ec      	bne.n	801710a <_findenv_r+0x36>
 8017130:	f8da 3000 	ldr.w	r3, [sl]
 8017134:	ebab 0303 	sub.w	r3, fp, r3
 8017138:	109b      	asrs	r3, r3, #2
 801713a:	4630      	mov	r0, r6
 801713c:	603b      	str	r3, [r7, #0]
 801713e:	f000 fd7b 	bl	8017c38 <__env_unlock>
 8017142:	1c68      	adds	r0, r5, #1
 8017144:	e7dd      	b.n	8017102 <_findenv_r+0x2e>
 8017146:	bf00      	nop
 8017148:	2000002c 	.word	0x2000002c

0801714c <malloc>:
 801714c:	4b02      	ldr	r3, [pc, #8]	@ (8017158 <malloc+0xc>)
 801714e:	4601      	mov	r1, r0
 8017150:	6818      	ldr	r0, [r3, #0]
 8017152:	f000 b82d 	b.w	80171b0 <_malloc_r>
 8017156:	bf00      	nop
 8017158:	20000eb0 	.word	0x20000eb0

0801715c <free>:
 801715c:	4b02      	ldr	r3, [pc, #8]	@ (8017168 <free+0xc>)
 801715e:	4601      	mov	r1, r0
 8017160:	6818      	ldr	r0, [r3, #0]
 8017162:	f000 bd6f 	b.w	8017c44 <_free_r>
 8017166:	bf00      	nop
 8017168:	20000eb0 	.word	0x20000eb0

0801716c <sbrk_aligned>:
 801716c:	b570      	push	{r4, r5, r6, lr}
 801716e:	4e0f      	ldr	r6, [pc, #60]	@ (80171ac <sbrk_aligned+0x40>)
 8017170:	460c      	mov	r4, r1
 8017172:	6831      	ldr	r1, [r6, #0]
 8017174:	4605      	mov	r5, r0
 8017176:	b911      	cbnz	r1, 801717e <sbrk_aligned+0x12>
 8017178:	f000 fcd4 	bl	8017b24 <_sbrk_r>
 801717c:	6030      	str	r0, [r6, #0]
 801717e:	4621      	mov	r1, r4
 8017180:	4628      	mov	r0, r5
 8017182:	f000 fccf 	bl	8017b24 <_sbrk_r>
 8017186:	1c43      	adds	r3, r0, #1
 8017188:	d103      	bne.n	8017192 <sbrk_aligned+0x26>
 801718a:	f04f 34ff 	mov.w	r4, #4294967295
 801718e:	4620      	mov	r0, r4
 8017190:	bd70      	pop	{r4, r5, r6, pc}
 8017192:	1cc4      	adds	r4, r0, #3
 8017194:	f024 0403 	bic.w	r4, r4, #3
 8017198:	42a0      	cmp	r0, r4
 801719a:	d0f8      	beq.n	801718e <sbrk_aligned+0x22>
 801719c:	1a21      	subs	r1, r4, r0
 801719e:	4628      	mov	r0, r5
 80171a0:	f000 fcc0 	bl	8017b24 <_sbrk_r>
 80171a4:	3001      	adds	r0, #1
 80171a6:	d1f2      	bne.n	801718e <sbrk_aligned+0x22>
 80171a8:	e7ef      	b.n	801718a <sbrk_aligned+0x1e>
 80171aa:	bf00      	nop
 80171ac:	2000ebf8 	.word	0x2000ebf8

080171b0 <_malloc_r>:
 80171b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171b4:	1ccd      	adds	r5, r1, #3
 80171b6:	f025 0503 	bic.w	r5, r5, #3
 80171ba:	3508      	adds	r5, #8
 80171bc:	2d0c      	cmp	r5, #12
 80171be:	bf38      	it	cc
 80171c0:	250c      	movcc	r5, #12
 80171c2:	2d00      	cmp	r5, #0
 80171c4:	4606      	mov	r6, r0
 80171c6:	db01      	blt.n	80171cc <_malloc_r+0x1c>
 80171c8:	42a9      	cmp	r1, r5
 80171ca:	d904      	bls.n	80171d6 <_malloc_r+0x26>
 80171cc:	230c      	movs	r3, #12
 80171ce:	6033      	str	r3, [r6, #0]
 80171d0:	2000      	movs	r0, #0
 80171d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80172ac <_malloc_r+0xfc>
 80171da:	f000 f869 	bl	80172b0 <__malloc_lock>
 80171de:	f8d8 3000 	ldr.w	r3, [r8]
 80171e2:	461c      	mov	r4, r3
 80171e4:	bb44      	cbnz	r4, 8017238 <_malloc_r+0x88>
 80171e6:	4629      	mov	r1, r5
 80171e8:	4630      	mov	r0, r6
 80171ea:	f7ff ffbf 	bl	801716c <sbrk_aligned>
 80171ee:	1c43      	adds	r3, r0, #1
 80171f0:	4604      	mov	r4, r0
 80171f2:	d158      	bne.n	80172a6 <_malloc_r+0xf6>
 80171f4:	f8d8 4000 	ldr.w	r4, [r8]
 80171f8:	4627      	mov	r7, r4
 80171fa:	2f00      	cmp	r7, #0
 80171fc:	d143      	bne.n	8017286 <_malloc_r+0xd6>
 80171fe:	2c00      	cmp	r4, #0
 8017200:	d04b      	beq.n	801729a <_malloc_r+0xea>
 8017202:	6823      	ldr	r3, [r4, #0]
 8017204:	4639      	mov	r1, r7
 8017206:	4630      	mov	r0, r6
 8017208:	eb04 0903 	add.w	r9, r4, r3
 801720c:	f000 fc8a 	bl	8017b24 <_sbrk_r>
 8017210:	4581      	cmp	r9, r0
 8017212:	d142      	bne.n	801729a <_malloc_r+0xea>
 8017214:	6821      	ldr	r1, [r4, #0]
 8017216:	1a6d      	subs	r5, r5, r1
 8017218:	4629      	mov	r1, r5
 801721a:	4630      	mov	r0, r6
 801721c:	f7ff ffa6 	bl	801716c <sbrk_aligned>
 8017220:	3001      	adds	r0, #1
 8017222:	d03a      	beq.n	801729a <_malloc_r+0xea>
 8017224:	6823      	ldr	r3, [r4, #0]
 8017226:	442b      	add	r3, r5
 8017228:	6023      	str	r3, [r4, #0]
 801722a:	f8d8 3000 	ldr.w	r3, [r8]
 801722e:	685a      	ldr	r2, [r3, #4]
 8017230:	bb62      	cbnz	r2, 801728c <_malloc_r+0xdc>
 8017232:	f8c8 7000 	str.w	r7, [r8]
 8017236:	e00f      	b.n	8017258 <_malloc_r+0xa8>
 8017238:	6822      	ldr	r2, [r4, #0]
 801723a:	1b52      	subs	r2, r2, r5
 801723c:	d420      	bmi.n	8017280 <_malloc_r+0xd0>
 801723e:	2a0b      	cmp	r2, #11
 8017240:	d917      	bls.n	8017272 <_malloc_r+0xc2>
 8017242:	1961      	adds	r1, r4, r5
 8017244:	42a3      	cmp	r3, r4
 8017246:	6025      	str	r5, [r4, #0]
 8017248:	bf18      	it	ne
 801724a:	6059      	strne	r1, [r3, #4]
 801724c:	6863      	ldr	r3, [r4, #4]
 801724e:	bf08      	it	eq
 8017250:	f8c8 1000 	streq.w	r1, [r8]
 8017254:	5162      	str	r2, [r4, r5]
 8017256:	604b      	str	r3, [r1, #4]
 8017258:	4630      	mov	r0, r6
 801725a:	f000 f82f 	bl	80172bc <__malloc_unlock>
 801725e:	f104 000b 	add.w	r0, r4, #11
 8017262:	1d23      	adds	r3, r4, #4
 8017264:	f020 0007 	bic.w	r0, r0, #7
 8017268:	1ac2      	subs	r2, r0, r3
 801726a:	bf1c      	itt	ne
 801726c:	1a1b      	subne	r3, r3, r0
 801726e:	50a3      	strne	r3, [r4, r2]
 8017270:	e7af      	b.n	80171d2 <_malloc_r+0x22>
 8017272:	6862      	ldr	r2, [r4, #4]
 8017274:	42a3      	cmp	r3, r4
 8017276:	bf0c      	ite	eq
 8017278:	f8c8 2000 	streq.w	r2, [r8]
 801727c:	605a      	strne	r2, [r3, #4]
 801727e:	e7eb      	b.n	8017258 <_malloc_r+0xa8>
 8017280:	4623      	mov	r3, r4
 8017282:	6864      	ldr	r4, [r4, #4]
 8017284:	e7ae      	b.n	80171e4 <_malloc_r+0x34>
 8017286:	463c      	mov	r4, r7
 8017288:	687f      	ldr	r7, [r7, #4]
 801728a:	e7b6      	b.n	80171fa <_malloc_r+0x4a>
 801728c:	461a      	mov	r2, r3
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	42a3      	cmp	r3, r4
 8017292:	d1fb      	bne.n	801728c <_malloc_r+0xdc>
 8017294:	2300      	movs	r3, #0
 8017296:	6053      	str	r3, [r2, #4]
 8017298:	e7de      	b.n	8017258 <_malloc_r+0xa8>
 801729a:	230c      	movs	r3, #12
 801729c:	6033      	str	r3, [r6, #0]
 801729e:	4630      	mov	r0, r6
 80172a0:	f000 f80c 	bl	80172bc <__malloc_unlock>
 80172a4:	e794      	b.n	80171d0 <_malloc_r+0x20>
 80172a6:	6005      	str	r5, [r0, #0]
 80172a8:	e7d6      	b.n	8017258 <_malloc_r+0xa8>
 80172aa:	bf00      	nop
 80172ac:	2000ebfc 	.word	0x2000ebfc

080172b0 <__malloc_lock>:
 80172b0:	4801      	ldr	r0, [pc, #4]	@ (80172b8 <__malloc_lock+0x8>)
 80172b2:	f000 bc84 	b.w	8017bbe <__retarget_lock_acquire_recursive>
 80172b6:	bf00      	nop
 80172b8:	2000ed41 	.word	0x2000ed41

080172bc <__malloc_unlock>:
 80172bc:	4801      	ldr	r0, [pc, #4]	@ (80172c4 <__malloc_unlock+0x8>)
 80172be:	f000 bc7f 	b.w	8017bc0 <__retarget_lock_release_recursive>
 80172c2:	bf00      	nop
 80172c4:	2000ed41 	.word	0x2000ed41

080172c8 <srand>:
 80172c8:	b538      	push	{r3, r4, r5, lr}
 80172ca:	4b10      	ldr	r3, [pc, #64]	@ (801730c <srand+0x44>)
 80172cc:	681d      	ldr	r5, [r3, #0]
 80172ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80172d0:	4604      	mov	r4, r0
 80172d2:	b9b3      	cbnz	r3, 8017302 <srand+0x3a>
 80172d4:	2018      	movs	r0, #24
 80172d6:	f7ff ff39 	bl	801714c <malloc>
 80172da:	4602      	mov	r2, r0
 80172dc:	6328      	str	r0, [r5, #48]	@ 0x30
 80172de:	b920      	cbnz	r0, 80172ea <srand+0x22>
 80172e0:	4b0b      	ldr	r3, [pc, #44]	@ (8017310 <srand+0x48>)
 80172e2:	480c      	ldr	r0, [pc, #48]	@ (8017314 <srand+0x4c>)
 80172e4:	2146      	movs	r1, #70	@ 0x46
 80172e6:	f000 fc83 	bl	8017bf0 <__assert_func>
 80172ea:	490b      	ldr	r1, [pc, #44]	@ (8017318 <srand+0x50>)
 80172ec:	4b0b      	ldr	r3, [pc, #44]	@ (801731c <srand+0x54>)
 80172ee:	e9c0 1300 	strd	r1, r3, [r0]
 80172f2:	4b0b      	ldr	r3, [pc, #44]	@ (8017320 <srand+0x58>)
 80172f4:	6083      	str	r3, [r0, #8]
 80172f6:	230b      	movs	r3, #11
 80172f8:	8183      	strh	r3, [r0, #12]
 80172fa:	2100      	movs	r1, #0
 80172fc:	2001      	movs	r0, #1
 80172fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017302:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017304:	2200      	movs	r2, #0
 8017306:	611c      	str	r4, [r3, #16]
 8017308:	615a      	str	r2, [r3, #20]
 801730a:	bd38      	pop	{r3, r4, r5, pc}
 801730c:	20000eb0 	.word	0x20000eb0
 8017310:	080198ac 	.word	0x080198ac
 8017314:	080198c3 	.word	0x080198c3
 8017318:	abcd330e 	.word	0xabcd330e
 801731c:	e66d1234 	.word	0xe66d1234
 8017320:	0005deec 	.word	0x0005deec

08017324 <rand>:
 8017324:	4b16      	ldr	r3, [pc, #88]	@ (8017380 <rand+0x5c>)
 8017326:	b510      	push	{r4, lr}
 8017328:	681c      	ldr	r4, [r3, #0]
 801732a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801732c:	b9b3      	cbnz	r3, 801735c <rand+0x38>
 801732e:	2018      	movs	r0, #24
 8017330:	f7ff ff0c 	bl	801714c <malloc>
 8017334:	4602      	mov	r2, r0
 8017336:	6320      	str	r0, [r4, #48]	@ 0x30
 8017338:	b920      	cbnz	r0, 8017344 <rand+0x20>
 801733a:	4b12      	ldr	r3, [pc, #72]	@ (8017384 <rand+0x60>)
 801733c:	4812      	ldr	r0, [pc, #72]	@ (8017388 <rand+0x64>)
 801733e:	2152      	movs	r1, #82	@ 0x52
 8017340:	f000 fc56 	bl	8017bf0 <__assert_func>
 8017344:	4911      	ldr	r1, [pc, #68]	@ (801738c <rand+0x68>)
 8017346:	4b12      	ldr	r3, [pc, #72]	@ (8017390 <rand+0x6c>)
 8017348:	e9c0 1300 	strd	r1, r3, [r0]
 801734c:	4b11      	ldr	r3, [pc, #68]	@ (8017394 <rand+0x70>)
 801734e:	6083      	str	r3, [r0, #8]
 8017350:	230b      	movs	r3, #11
 8017352:	8183      	strh	r3, [r0, #12]
 8017354:	2100      	movs	r1, #0
 8017356:	2001      	movs	r0, #1
 8017358:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801735c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801735e:	480e      	ldr	r0, [pc, #56]	@ (8017398 <rand+0x74>)
 8017360:	690b      	ldr	r3, [r1, #16]
 8017362:	694c      	ldr	r4, [r1, #20]
 8017364:	4a0d      	ldr	r2, [pc, #52]	@ (801739c <rand+0x78>)
 8017366:	4358      	muls	r0, r3
 8017368:	fb02 0004 	mla	r0, r2, r4, r0
 801736c:	fba3 3202 	umull	r3, r2, r3, r2
 8017370:	3301      	adds	r3, #1
 8017372:	eb40 0002 	adc.w	r0, r0, r2
 8017376:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801737a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801737e:	bd10      	pop	{r4, pc}
 8017380:	20000eb0 	.word	0x20000eb0
 8017384:	080198ac 	.word	0x080198ac
 8017388:	080198c3 	.word	0x080198c3
 801738c:	abcd330e 	.word	0xabcd330e
 8017390:	e66d1234 	.word	0xe66d1234
 8017394:	0005deec 	.word	0x0005deec
 8017398:	5851f42d 	.word	0x5851f42d
 801739c:	4c957f2d 	.word	0x4c957f2d

080173a0 <realloc>:
 80173a0:	4b02      	ldr	r3, [pc, #8]	@ (80173ac <realloc+0xc>)
 80173a2:	460a      	mov	r2, r1
 80173a4:	4601      	mov	r1, r0
 80173a6:	6818      	ldr	r0, [r3, #0]
 80173a8:	f000 b802 	b.w	80173b0 <_realloc_r>
 80173ac:	20000eb0 	.word	0x20000eb0

080173b0 <_realloc_r>:
 80173b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173b4:	4607      	mov	r7, r0
 80173b6:	4614      	mov	r4, r2
 80173b8:	460d      	mov	r5, r1
 80173ba:	b921      	cbnz	r1, 80173c6 <_realloc_r+0x16>
 80173bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173c0:	4611      	mov	r1, r2
 80173c2:	f7ff bef5 	b.w	80171b0 <_malloc_r>
 80173c6:	b92a      	cbnz	r2, 80173d4 <_realloc_r+0x24>
 80173c8:	f000 fc3c 	bl	8017c44 <_free_r>
 80173cc:	4625      	mov	r5, r4
 80173ce:	4628      	mov	r0, r5
 80173d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173d4:	f000 fc80 	bl	8017cd8 <_malloc_usable_size_r>
 80173d8:	4284      	cmp	r4, r0
 80173da:	4606      	mov	r6, r0
 80173dc:	d802      	bhi.n	80173e4 <_realloc_r+0x34>
 80173de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80173e2:	d8f4      	bhi.n	80173ce <_realloc_r+0x1e>
 80173e4:	4621      	mov	r1, r4
 80173e6:	4638      	mov	r0, r7
 80173e8:	f7ff fee2 	bl	80171b0 <_malloc_r>
 80173ec:	4680      	mov	r8, r0
 80173ee:	b908      	cbnz	r0, 80173f4 <_realloc_r+0x44>
 80173f0:	4645      	mov	r5, r8
 80173f2:	e7ec      	b.n	80173ce <_realloc_r+0x1e>
 80173f4:	42b4      	cmp	r4, r6
 80173f6:	4622      	mov	r2, r4
 80173f8:	4629      	mov	r1, r5
 80173fa:	bf28      	it	cs
 80173fc:	4632      	movcs	r2, r6
 80173fe:	f000 fbe8 	bl	8017bd2 <memcpy>
 8017402:	4629      	mov	r1, r5
 8017404:	4638      	mov	r0, r7
 8017406:	f000 fc1d 	bl	8017c44 <_free_r>
 801740a:	e7f1      	b.n	80173f0 <_realloc_r+0x40>

0801740c <_strtoul_l.isra.0>:
 801740c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017410:	4e34      	ldr	r6, [pc, #208]	@ (80174e4 <_strtoul_l.isra.0+0xd8>)
 8017412:	4686      	mov	lr, r0
 8017414:	460d      	mov	r5, r1
 8017416:	4628      	mov	r0, r5
 8017418:	f815 4b01 	ldrb.w	r4, [r5], #1
 801741c:	5d37      	ldrb	r7, [r6, r4]
 801741e:	f017 0708 	ands.w	r7, r7, #8
 8017422:	d1f8      	bne.n	8017416 <_strtoul_l.isra.0+0xa>
 8017424:	2c2d      	cmp	r4, #45	@ 0x2d
 8017426:	d110      	bne.n	801744a <_strtoul_l.isra.0+0x3e>
 8017428:	782c      	ldrb	r4, [r5, #0]
 801742a:	2701      	movs	r7, #1
 801742c:	1c85      	adds	r5, r0, #2
 801742e:	f033 0010 	bics.w	r0, r3, #16
 8017432:	d115      	bne.n	8017460 <_strtoul_l.isra.0+0x54>
 8017434:	2c30      	cmp	r4, #48	@ 0x30
 8017436:	d10d      	bne.n	8017454 <_strtoul_l.isra.0+0x48>
 8017438:	7828      	ldrb	r0, [r5, #0]
 801743a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801743e:	2858      	cmp	r0, #88	@ 0x58
 8017440:	d108      	bne.n	8017454 <_strtoul_l.isra.0+0x48>
 8017442:	786c      	ldrb	r4, [r5, #1]
 8017444:	3502      	adds	r5, #2
 8017446:	2310      	movs	r3, #16
 8017448:	e00a      	b.n	8017460 <_strtoul_l.isra.0+0x54>
 801744a:	2c2b      	cmp	r4, #43	@ 0x2b
 801744c:	bf04      	itt	eq
 801744e:	782c      	ldrbeq	r4, [r5, #0]
 8017450:	1c85      	addeq	r5, r0, #2
 8017452:	e7ec      	b.n	801742e <_strtoul_l.isra.0+0x22>
 8017454:	2b00      	cmp	r3, #0
 8017456:	d1f6      	bne.n	8017446 <_strtoul_l.isra.0+0x3a>
 8017458:	2c30      	cmp	r4, #48	@ 0x30
 801745a:	bf14      	ite	ne
 801745c:	230a      	movne	r3, #10
 801745e:	2308      	moveq	r3, #8
 8017460:	f04f 38ff 	mov.w	r8, #4294967295
 8017464:	2600      	movs	r6, #0
 8017466:	fbb8 f8f3 	udiv	r8, r8, r3
 801746a:	fb03 f908 	mul.w	r9, r3, r8
 801746e:	ea6f 0909 	mvn.w	r9, r9
 8017472:	4630      	mov	r0, r6
 8017474:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017478:	f1bc 0f09 	cmp.w	ip, #9
 801747c:	d810      	bhi.n	80174a0 <_strtoul_l.isra.0+0x94>
 801747e:	4664      	mov	r4, ip
 8017480:	42a3      	cmp	r3, r4
 8017482:	dd1e      	ble.n	80174c2 <_strtoul_l.isra.0+0xb6>
 8017484:	f1b6 3fff 	cmp.w	r6, #4294967295
 8017488:	d007      	beq.n	801749a <_strtoul_l.isra.0+0x8e>
 801748a:	4580      	cmp	r8, r0
 801748c:	d316      	bcc.n	80174bc <_strtoul_l.isra.0+0xb0>
 801748e:	d101      	bne.n	8017494 <_strtoul_l.isra.0+0x88>
 8017490:	45a1      	cmp	r9, r4
 8017492:	db13      	blt.n	80174bc <_strtoul_l.isra.0+0xb0>
 8017494:	fb00 4003 	mla	r0, r0, r3, r4
 8017498:	2601      	movs	r6, #1
 801749a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801749e:	e7e9      	b.n	8017474 <_strtoul_l.isra.0+0x68>
 80174a0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80174a4:	f1bc 0f19 	cmp.w	ip, #25
 80174a8:	d801      	bhi.n	80174ae <_strtoul_l.isra.0+0xa2>
 80174aa:	3c37      	subs	r4, #55	@ 0x37
 80174ac:	e7e8      	b.n	8017480 <_strtoul_l.isra.0+0x74>
 80174ae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80174b2:	f1bc 0f19 	cmp.w	ip, #25
 80174b6:	d804      	bhi.n	80174c2 <_strtoul_l.isra.0+0xb6>
 80174b8:	3c57      	subs	r4, #87	@ 0x57
 80174ba:	e7e1      	b.n	8017480 <_strtoul_l.isra.0+0x74>
 80174bc:	f04f 36ff 	mov.w	r6, #4294967295
 80174c0:	e7eb      	b.n	801749a <_strtoul_l.isra.0+0x8e>
 80174c2:	1c73      	adds	r3, r6, #1
 80174c4:	d106      	bne.n	80174d4 <_strtoul_l.isra.0+0xc8>
 80174c6:	2322      	movs	r3, #34	@ 0x22
 80174c8:	f8ce 3000 	str.w	r3, [lr]
 80174cc:	4630      	mov	r0, r6
 80174ce:	b932      	cbnz	r2, 80174de <_strtoul_l.isra.0+0xd2>
 80174d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174d4:	b107      	cbz	r7, 80174d8 <_strtoul_l.isra.0+0xcc>
 80174d6:	4240      	negs	r0, r0
 80174d8:	2a00      	cmp	r2, #0
 80174da:	d0f9      	beq.n	80174d0 <_strtoul_l.isra.0+0xc4>
 80174dc:	b106      	cbz	r6, 80174e0 <_strtoul_l.isra.0+0xd4>
 80174de:	1e69      	subs	r1, r5, #1
 80174e0:	6011      	str	r1, [r2, #0]
 80174e2:	e7f5      	b.n	80174d0 <_strtoul_l.isra.0+0xc4>
 80174e4:	0801998b 	.word	0x0801998b

080174e8 <strtoul>:
 80174e8:	4613      	mov	r3, r2
 80174ea:	460a      	mov	r2, r1
 80174ec:	4601      	mov	r1, r0
 80174ee:	4802      	ldr	r0, [pc, #8]	@ (80174f8 <strtoul+0x10>)
 80174f0:	6800      	ldr	r0, [r0, #0]
 80174f2:	f7ff bf8b 	b.w	801740c <_strtoul_l.isra.0>
 80174f6:	bf00      	nop
 80174f8:	20000eb0 	.word	0x20000eb0

080174fc <std>:
 80174fc:	2300      	movs	r3, #0
 80174fe:	b510      	push	{r4, lr}
 8017500:	4604      	mov	r4, r0
 8017502:	e9c0 3300 	strd	r3, r3, [r0]
 8017506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801750a:	6083      	str	r3, [r0, #8]
 801750c:	8181      	strh	r1, [r0, #12]
 801750e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017510:	81c2      	strh	r2, [r0, #14]
 8017512:	6183      	str	r3, [r0, #24]
 8017514:	4619      	mov	r1, r3
 8017516:	2208      	movs	r2, #8
 8017518:	305c      	adds	r0, #92	@ 0x5c
 801751a:	f000 fa7f 	bl	8017a1c <memset>
 801751e:	4b0d      	ldr	r3, [pc, #52]	@ (8017554 <std+0x58>)
 8017520:	6263      	str	r3, [r4, #36]	@ 0x24
 8017522:	4b0d      	ldr	r3, [pc, #52]	@ (8017558 <std+0x5c>)
 8017524:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017526:	4b0d      	ldr	r3, [pc, #52]	@ (801755c <std+0x60>)
 8017528:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801752a:	4b0d      	ldr	r3, [pc, #52]	@ (8017560 <std+0x64>)
 801752c:	6323      	str	r3, [r4, #48]	@ 0x30
 801752e:	4b0d      	ldr	r3, [pc, #52]	@ (8017564 <std+0x68>)
 8017530:	6224      	str	r4, [r4, #32]
 8017532:	429c      	cmp	r4, r3
 8017534:	d006      	beq.n	8017544 <std+0x48>
 8017536:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801753a:	4294      	cmp	r4, r2
 801753c:	d002      	beq.n	8017544 <std+0x48>
 801753e:	33d0      	adds	r3, #208	@ 0xd0
 8017540:	429c      	cmp	r4, r3
 8017542:	d105      	bne.n	8017550 <std+0x54>
 8017544:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801754c:	f000 bb36 	b.w	8017bbc <__retarget_lock_init_recursive>
 8017550:	bd10      	pop	{r4, pc}
 8017552:	bf00      	nop
 8017554:	080177a1 	.word	0x080177a1
 8017558:	080177c3 	.word	0x080177c3
 801755c:	080177fb 	.word	0x080177fb
 8017560:	0801781f 	.word	0x0801781f
 8017564:	2000ec00 	.word	0x2000ec00

08017568 <stdio_exit_handler>:
 8017568:	4a02      	ldr	r2, [pc, #8]	@ (8017574 <stdio_exit_handler+0xc>)
 801756a:	4903      	ldr	r1, [pc, #12]	@ (8017578 <stdio_exit_handler+0x10>)
 801756c:	4803      	ldr	r0, [pc, #12]	@ (801757c <stdio_exit_handler+0x14>)
 801756e:	f000 b869 	b.w	8017644 <_fwalk_sglue>
 8017572:	bf00      	nop
 8017574:	20000ea4 	.word	0x20000ea4
 8017578:	080183b9 	.word	0x080183b9
 801757c:	20000eb4 	.word	0x20000eb4

08017580 <cleanup_stdio>:
 8017580:	6841      	ldr	r1, [r0, #4]
 8017582:	4b0c      	ldr	r3, [pc, #48]	@ (80175b4 <cleanup_stdio+0x34>)
 8017584:	4299      	cmp	r1, r3
 8017586:	b510      	push	{r4, lr}
 8017588:	4604      	mov	r4, r0
 801758a:	d001      	beq.n	8017590 <cleanup_stdio+0x10>
 801758c:	f000 ff14 	bl	80183b8 <_fflush_r>
 8017590:	68a1      	ldr	r1, [r4, #8]
 8017592:	4b09      	ldr	r3, [pc, #36]	@ (80175b8 <cleanup_stdio+0x38>)
 8017594:	4299      	cmp	r1, r3
 8017596:	d002      	beq.n	801759e <cleanup_stdio+0x1e>
 8017598:	4620      	mov	r0, r4
 801759a:	f000 ff0d 	bl	80183b8 <_fflush_r>
 801759e:	68e1      	ldr	r1, [r4, #12]
 80175a0:	4b06      	ldr	r3, [pc, #24]	@ (80175bc <cleanup_stdio+0x3c>)
 80175a2:	4299      	cmp	r1, r3
 80175a4:	d004      	beq.n	80175b0 <cleanup_stdio+0x30>
 80175a6:	4620      	mov	r0, r4
 80175a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175ac:	f000 bf04 	b.w	80183b8 <_fflush_r>
 80175b0:	bd10      	pop	{r4, pc}
 80175b2:	bf00      	nop
 80175b4:	2000ec00 	.word	0x2000ec00
 80175b8:	2000ec68 	.word	0x2000ec68
 80175bc:	2000ecd0 	.word	0x2000ecd0

080175c0 <global_stdio_init.part.0>:
 80175c0:	b510      	push	{r4, lr}
 80175c2:	4b0b      	ldr	r3, [pc, #44]	@ (80175f0 <global_stdio_init.part.0+0x30>)
 80175c4:	4c0b      	ldr	r4, [pc, #44]	@ (80175f4 <global_stdio_init.part.0+0x34>)
 80175c6:	4a0c      	ldr	r2, [pc, #48]	@ (80175f8 <global_stdio_init.part.0+0x38>)
 80175c8:	601a      	str	r2, [r3, #0]
 80175ca:	4620      	mov	r0, r4
 80175cc:	2200      	movs	r2, #0
 80175ce:	2104      	movs	r1, #4
 80175d0:	f7ff ff94 	bl	80174fc <std>
 80175d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80175d8:	2201      	movs	r2, #1
 80175da:	2109      	movs	r1, #9
 80175dc:	f7ff ff8e 	bl	80174fc <std>
 80175e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80175e4:	2202      	movs	r2, #2
 80175e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175ea:	2112      	movs	r1, #18
 80175ec:	f7ff bf86 	b.w	80174fc <std>
 80175f0:	2000ed38 	.word	0x2000ed38
 80175f4:	2000ec00 	.word	0x2000ec00
 80175f8:	08017569 	.word	0x08017569

080175fc <__sfp_lock_acquire>:
 80175fc:	4801      	ldr	r0, [pc, #4]	@ (8017604 <__sfp_lock_acquire+0x8>)
 80175fe:	f000 bade 	b.w	8017bbe <__retarget_lock_acquire_recursive>
 8017602:	bf00      	nop
 8017604:	2000ed42 	.word	0x2000ed42

08017608 <__sfp_lock_release>:
 8017608:	4801      	ldr	r0, [pc, #4]	@ (8017610 <__sfp_lock_release+0x8>)
 801760a:	f000 bad9 	b.w	8017bc0 <__retarget_lock_release_recursive>
 801760e:	bf00      	nop
 8017610:	2000ed42 	.word	0x2000ed42

08017614 <__sinit>:
 8017614:	b510      	push	{r4, lr}
 8017616:	4604      	mov	r4, r0
 8017618:	f7ff fff0 	bl	80175fc <__sfp_lock_acquire>
 801761c:	6a23      	ldr	r3, [r4, #32]
 801761e:	b11b      	cbz	r3, 8017628 <__sinit+0x14>
 8017620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017624:	f7ff bff0 	b.w	8017608 <__sfp_lock_release>
 8017628:	4b04      	ldr	r3, [pc, #16]	@ (801763c <__sinit+0x28>)
 801762a:	6223      	str	r3, [r4, #32]
 801762c:	4b04      	ldr	r3, [pc, #16]	@ (8017640 <__sinit+0x2c>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d1f5      	bne.n	8017620 <__sinit+0xc>
 8017634:	f7ff ffc4 	bl	80175c0 <global_stdio_init.part.0>
 8017638:	e7f2      	b.n	8017620 <__sinit+0xc>
 801763a:	bf00      	nop
 801763c:	08017581 	.word	0x08017581
 8017640:	2000ed38 	.word	0x2000ed38

08017644 <_fwalk_sglue>:
 8017644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017648:	4607      	mov	r7, r0
 801764a:	4688      	mov	r8, r1
 801764c:	4614      	mov	r4, r2
 801764e:	2600      	movs	r6, #0
 8017650:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017654:	f1b9 0901 	subs.w	r9, r9, #1
 8017658:	d505      	bpl.n	8017666 <_fwalk_sglue+0x22>
 801765a:	6824      	ldr	r4, [r4, #0]
 801765c:	2c00      	cmp	r4, #0
 801765e:	d1f7      	bne.n	8017650 <_fwalk_sglue+0xc>
 8017660:	4630      	mov	r0, r6
 8017662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017666:	89ab      	ldrh	r3, [r5, #12]
 8017668:	2b01      	cmp	r3, #1
 801766a:	d907      	bls.n	801767c <_fwalk_sglue+0x38>
 801766c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017670:	3301      	adds	r3, #1
 8017672:	d003      	beq.n	801767c <_fwalk_sglue+0x38>
 8017674:	4629      	mov	r1, r5
 8017676:	4638      	mov	r0, r7
 8017678:	47c0      	blx	r8
 801767a:	4306      	orrs	r6, r0
 801767c:	3568      	adds	r5, #104	@ 0x68
 801767e:	e7e9      	b.n	8017654 <_fwalk_sglue+0x10>

08017680 <_fwrite_r>:
 8017680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017684:	9c08      	ldr	r4, [sp, #32]
 8017686:	468a      	mov	sl, r1
 8017688:	4690      	mov	r8, r2
 801768a:	fb02 f903 	mul.w	r9, r2, r3
 801768e:	4606      	mov	r6, r0
 8017690:	b118      	cbz	r0, 801769a <_fwrite_r+0x1a>
 8017692:	6a03      	ldr	r3, [r0, #32]
 8017694:	b90b      	cbnz	r3, 801769a <_fwrite_r+0x1a>
 8017696:	f7ff ffbd 	bl	8017614 <__sinit>
 801769a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801769c:	07dd      	lsls	r5, r3, #31
 801769e:	d405      	bmi.n	80176ac <_fwrite_r+0x2c>
 80176a0:	89a3      	ldrh	r3, [r4, #12]
 80176a2:	0598      	lsls	r0, r3, #22
 80176a4:	d402      	bmi.n	80176ac <_fwrite_r+0x2c>
 80176a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176a8:	f000 fa89 	bl	8017bbe <__retarget_lock_acquire_recursive>
 80176ac:	89a3      	ldrh	r3, [r4, #12]
 80176ae:	0719      	lsls	r1, r3, #28
 80176b0:	d516      	bpl.n	80176e0 <_fwrite_r+0x60>
 80176b2:	6923      	ldr	r3, [r4, #16]
 80176b4:	b1a3      	cbz	r3, 80176e0 <_fwrite_r+0x60>
 80176b6:	2500      	movs	r5, #0
 80176b8:	454d      	cmp	r5, r9
 80176ba:	d01f      	beq.n	80176fc <_fwrite_r+0x7c>
 80176bc:	68a7      	ldr	r7, [r4, #8]
 80176be:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80176c2:	3f01      	subs	r7, #1
 80176c4:	2f00      	cmp	r7, #0
 80176c6:	60a7      	str	r7, [r4, #8]
 80176c8:	da04      	bge.n	80176d4 <_fwrite_r+0x54>
 80176ca:	69a3      	ldr	r3, [r4, #24]
 80176cc:	429f      	cmp	r7, r3
 80176ce:	db0f      	blt.n	80176f0 <_fwrite_r+0x70>
 80176d0:	290a      	cmp	r1, #10
 80176d2:	d00d      	beq.n	80176f0 <_fwrite_r+0x70>
 80176d4:	6823      	ldr	r3, [r4, #0]
 80176d6:	1c5a      	adds	r2, r3, #1
 80176d8:	6022      	str	r2, [r4, #0]
 80176da:	7019      	strb	r1, [r3, #0]
 80176dc:	3501      	adds	r5, #1
 80176de:	e7eb      	b.n	80176b8 <_fwrite_r+0x38>
 80176e0:	4621      	mov	r1, r4
 80176e2:	4630      	mov	r0, r6
 80176e4:	f000 f91a 	bl	801791c <__swsetup_r>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d0e4      	beq.n	80176b6 <_fwrite_r+0x36>
 80176ec:	2500      	movs	r5, #0
 80176ee:	e005      	b.n	80176fc <_fwrite_r+0x7c>
 80176f0:	4622      	mov	r2, r4
 80176f2:	4630      	mov	r0, r6
 80176f4:	f000 f8d4 	bl	80178a0 <__swbuf_r>
 80176f8:	3001      	adds	r0, #1
 80176fa:	d1ef      	bne.n	80176dc <_fwrite_r+0x5c>
 80176fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80176fe:	07da      	lsls	r2, r3, #31
 8017700:	d405      	bmi.n	801770e <_fwrite_r+0x8e>
 8017702:	89a3      	ldrh	r3, [r4, #12]
 8017704:	059b      	lsls	r3, r3, #22
 8017706:	d402      	bmi.n	801770e <_fwrite_r+0x8e>
 8017708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801770a:	f000 fa59 	bl	8017bc0 <__retarget_lock_release_recursive>
 801770e:	fbb5 f0f8 	udiv	r0, r5, r8
 8017712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017718 <fwrite>:
 8017718:	b507      	push	{r0, r1, r2, lr}
 801771a:	9300      	str	r3, [sp, #0]
 801771c:	4613      	mov	r3, r2
 801771e:	460a      	mov	r2, r1
 8017720:	4601      	mov	r1, r0
 8017722:	4803      	ldr	r0, [pc, #12]	@ (8017730 <fwrite+0x18>)
 8017724:	6800      	ldr	r0, [r0, #0]
 8017726:	f7ff ffab 	bl	8017680 <_fwrite_r>
 801772a:	b003      	add	sp, #12
 801772c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017730:	20000eb0 	.word	0x20000eb0

08017734 <sniprintf>:
 8017734:	b40c      	push	{r2, r3}
 8017736:	b530      	push	{r4, r5, lr}
 8017738:	4b18      	ldr	r3, [pc, #96]	@ (801779c <sniprintf+0x68>)
 801773a:	1e0c      	subs	r4, r1, #0
 801773c:	681d      	ldr	r5, [r3, #0]
 801773e:	b09d      	sub	sp, #116	@ 0x74
 8017740:	da08      	bge.n	8017754 <sniprintf+0x20>
 8017742:	238b      	movs	r3, #139	@ 0x8b
 8017744:	602b      	str	r3, [r5, #0]
 8017746:	f04f 30ff 	mov.w	r0, #4294967295
 801774a:	b01d      	add	sp, #116	@ 0x74
 801774c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017750:	b002      	add	sp, #8
 8017752:	4770      	bx	lr
 8017754:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017758:	f8ad 3014 	strh.w	r3, [sp, #20]
 801775c:	f04f 0300 	mov.w	r3, #0
 8017760:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017762:	bf14      	ite	ne
 8017764:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017768:	4623      	moveq	r3, r4
 801776a:	9304      	str	r3, [sp, #16]
 801776c:	9307      	str	r3, [sp, #28]
 801776e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017772:	9002      	str	r0, [sp, #8]
 8017774:	9006      	str	r0, [sp, #24]
 8017776:	f8ad 3016 	strh.w	r3, [sp, #22]
 801777a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801777c:	ab21      	add	r3, sp, #132	@ 0x84
 801777e:	a902      	add	r1, sp, #8
 8017780:	4628      	mov	r0, r5
 8017782:	9301      	str	r3, [sp, #4]
 8017784:	f000 fb0c 	bl	8017da0 <_svfiprintf_r>
 8017788:	1c43      	adds	r3, r0, #1
 801778a:	bfbc      	itt	lt
 801778c:	238b      	movlt	r3, #139	@ 0x8b
 801778e:	602b      	strlt	r3, [r5, #0]
 8017790:	2c00      	cmp	r4, #0
 8017792:	d0da      	beq.n	801774a <sniprintf+0x16>
 8017794:	9b02      	ldr	r3, [sp, #8]
 8017796:	2200      	movs	r2, #0
 8017798:	701a      	strb	r2, [r3, #0]
 801779a:	e7d6      	b.n	801774a <sniprintf+0x16>
 801779c:	20000eb0 	.word	0x20000eb0

080177a0 <__sread>:
 80177a0:	b510      	push	{r4, lr}
 80177a2:	460c      	mov	r4, r1
 80177a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177a8:	f000 f9aa 	bl	8017b00 <_read_r>
 80177ac:	2800      	cmp	r0, #0
 80177ae:	bfab      	itete	ge
 80177b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80177b2:	89a3      	ldrhlt	r3, [r4, #12]
 80177b4:	181b      	addge	r3, r3, r0
 80177b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80177ba:	bfac      	ite	ge
 80177bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80177be:	81a3      	strhlt	r3, [r4, #12]
 80177c0:	bd10      	pop	{r4, pc}

080177c2 <__swrite>:
 80177c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c6:	461f      	mov	r7, r3
 80177c8:	898b      	ldrh	r3, [r1, #12]
 80177ca:	05db      	lsls	r3, r3, #23
 80177cc:	4605      	mov	r5, r0
 80177ce:	460c      	mov	r4, r1
 80177d0:	4616      	mov	r6, r2
 80177d2:	d505      	bpl.n	80177e0 <__swrite+0x1e>
 80177d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177d8:	2302      	movs	r3, #2
 80177da:	2200      	movs	r2, #0
 80177dc:	f000 f97e 	bl	8017adc <_lseek_r>
 80177e0:	89a3      	ldrh	r3, [r4, #12]
 80177e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80177e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80177ea:	81a3      	strh	r3, [r4, #12]
 80177ec:	4632      	mov	r2, r6
 80177ee:	463b      	mov	r3, r7
 80177f0:	4628      	mov	r0, r5
 80177f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177f6:	f000 b9a5 	b.w	8017b44 <_write_r>

080177fa <__sseek>:
 80177fa:	b510      	push	{r4, lr}
 80177fc:	460c      	mov	r4, r1
 80177fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017802:	f000 f96b 	bl	8017adc <_lseek_r>
 8017806:	1c43      	adds	r3, r0, #1
 8017808:	89a3      	ldrh	r3, [r4, #12]
 801780a:	bf15      	itete	ne
 801780c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801780e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017812:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017816:	81a3      	strheq	r3, [r4, #12]
 8017818:	bf18      	it	ne
 801781a:	81a3      	strhne	r3, [r4, #12]
 801781c:	bd10      	pop	{r4, pc}

0801781e <__sclose>:
 801781e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017822:	f000 b94b 	b.w	8017abc <_close_r>

08017826 <_vsniprintf_r>:
 8017826:	b530      	push	{r4, r5, lr}
 8017828:	4614      	mov	r4, r2
 801782a:	2c00      	cmp	r4, #0
 801782c:	b09b      	sub	sp, #108	@ 0x6c
 801782e:	4605      	mov	r5, r0
 8017830:	461a      	mov	r2, r3
 8017832:	da05      	bge.n	8017840 <_vsniprintf_r+0x1a>
 8017834:	238b      	movs	r3, #139	@ 0x8b
 8017836:	6003      	str	r3, [r0, #0]
 8017838:	f04f 30ff 	mov.w	r0, #4294967295
 801783c:	b01b      	add	sp, #108	@ 0x6c
 801783e:	bd30      	pop	{r4, r5, pc}
 8017840:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017844:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017848:	f04f 0300 	mov.w	r3, #0
 801784c:	9319      	str	r3, [sp, #100]	@ 0x64
 801784e:	bf14      	ite	ne
 8017850:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017854:	4623      	moveq	r3, r4
 8017856:	9302      	str	r3, [sp, #8]
 8017858:	9305      	str	r3, [sp, #20]
 801785a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801785e:	9100      	str	r1, [sp, #0]
 8017860:	9104      	str	r1, [sp, #16]
 8017862:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017866:	4669      	mov	r1, sp
 8017868:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801786a:	f000 fa99 	bl	8017da0 <_svfiprintf_r>
 801786e:	1c43      	adds	r3, r0, #1
 8017870:	bfbc      	itt	lt
 8017872:	238b      	movlt	r3, #139	@ 0x8b
 8017874:	602b      	strlt	r3, [r5, #0]
 8017876:	2c00      	cmp	r4, #0
 8017878:	d0e0      	beq.n	801783c <_vsniprintf_r+0x16>
 801787a:	9b00      	ldr	r3, [sp, #0]
 801787c:	2200      	movs	r2, #0
 801787e:	701a      	strb	r2, [r3, #0]
 8017880:	e7dc      	b.n	801783c <_vsniprintf_r+0x16>
	...

08017884 <vsniprintf>:
 8017884:	b507      	push	{r0, r1, r2, lr}
 8017886:	9300      	str	r3, [sp, #0]
 8017888:	4613      	mov	r3, r2
 801788a:	460a      	mov	r2, r1
 801788c:	4601      	mov	r1, r0
 801788e:	4803      	ldr	r0, [pc, #12]	@ (801789c <vsniprintf+0x18>)
 8017890:	6800      	ldr	r0, [r0, #0]
 8017892:	f7ff ffc8 	bl	8017826 <_vsniprintf_r>
 8017896:	b003      	add	sp, #12
 8017898:	f85d fb04 	ldr.w	pc, [sp], #4
 801789c:	20000eb0 	.word	0x20000eb0

080178a0 <__swbuf_r>:
 80178a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178a2:	460e      	mov	r6, r1
 80178a4:	4614      	mov	r4, r2
 80178a6:	4605      	mov	r5, r0
 80178a8:	b118      	cbz	r0, 80178b2 <__swbuf_r+0x12>
 80178aa:	6a03      	ldr	r3, [r0, #32]
 80178ac:	b90b      	cbnz	r3, 80178b2 <__swbuf_r+0x12>
 80178ae:	f7ff feb1 	bl	8017614 <__sinit>
 80178b2:	69a3      	ldr	r3, [r4, #24]
 80178b4:	60a3      	str	r3, [r4, #8]
 80178b6:	89a3      	ldrh	r3, [r4, #12]
 80178b8:	071a      	lsls	r2, r3, #28
 80178ba:	d501      	bpl.n	80178c0 <__swbuf_r+0x20>
 80178bc:	6923      	ldr	r3, [r4, #16]
 80178be:	b943      	cbnz	r3, 80178d2 <__swbuf_r+0x32>
 80178c0:	4621      	mov	r1, r4
 80178c2:	4628      	mov	r0, r5
 80178c4:	f000 f82a 	bl	801791c <__swsetup_r>
 80178c8:	b118      	cbz	r0, 80178d2 <__swbuf_r+0x32>
 80178ca:	f04f 37ff 	mov.w	r7, #4294967295
 80178ce:	4638      	mov	r0, r7
 80178d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178d2:	6823      	ldr	r3, [r4, #0]
 80178d4:	6922      	ldr	r2, [r4, #16]
 80178d6:	1a98      	subs	r0, r3, r2
 80178d8:	6963      	ldr	r3, [r4, #20]
 80178da:	b2f6      	uxtb	r6, r6
 80178dc:	4283      	cmp	r3, r0
 80178de:	4637      	mov	r7, r6
 80178e0:	dc05      	bgt.n	80178ee <__swbuf_r+0x4e>
 80178e2:	4621      	mov	r1, r4
 80178e4:	4628      	mov	r0, r5
 80178e6:	f000 fd67 	bl	80183b8 <_fflush_r>
 80178ea:	2800      	cmp	r0, #0
 80178ec:	d1ed      	bne.n	80178ca <__swbuf_r+0x2a>
 80178ee:	68a3      	ldr	r3, [r4, #8]
 80178f0:	3b01      	subs	r3, #1
 80178f2:	60a3      	str	r3, [r4, #8]
 80178f4:	6823      	ldr	r3, [r4, #0]
 80178f6:	1c5a      	adds	r2, r3, #1
 80178f8:	6022      	str	r2, [r4, #0]
 80178fa:	701e      	strb	r6, [r3, #0]
 80178fc:	6962      	ldr	r2, [r4, #20]
 80178fe:	1c43      	adds	r3, r0, #1
 8017900:	429a      	cmp	r2, r3
 8017902:	d004      	beq.n	801790e <__swbuf_r+0x6e>
 8017904:	89a3      	ldrh	r3, [r4, #12]
 8017906:	07db      	lsls	r3, r3, #31
 8017908:	d5e1      	bpl.n	80178ce <__swbuf_r+0x2e>
 801790a:	2e0a      	cmp	r6, #10
 801790c:	d1df      	bne.n	80178ce <__swbuf_r+0x2e>
 801790e:	4621      	mov	r1, r4
 8017910:	4628      	mov	r0, r5
 8017912:	f000 fd51 	bl	80183b8 <_fflush_r>
 8017916:	2800      	cmp	r0, #0
 8017918:	d0d9      	beq.n	80178ce <__swbuf_r+0x2e>
 801791a:	e7d6      	b.n	80178ca <__swbuf_r+0x2a>

0801791c <__swsetup_r>:
 801791c:	b538      	push	{r3, r4, r5, lr}
 801791e:	4b29      	ldr	r3, [pc, #164]	@ (80179c4 <__swsetup_r+0xa8>)
 8017920:	4605      	mov	r5, r0
 8017922:	6818      	ldr	r0, [r3, #0]
 8017924:	460c      	mov	r4, r1
 8017926:	b118      	cbz	r0, 8017930 <__swsetup_r+0x14>
 8017928:	6a03      	ldr	r3, [r0, #32]
 801792a:	b90b      	cbnz	r3, 8017930 <__swsetup_r+0x14>
 801792c:	f7ff fe72 	bl	8017614 <__sinit>
 8017930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017934:	0719      	lsls	r1, r3, #28
 8017936:	d422      	bmi.n	801797e <__swsetup_r+0x62>
 8017938:	06da      	lsls	r2, r3, #27
 801793a:	d407      	bmi.n	801794c <__swsetup_r+0x30>
 801793c:	2209      	movs	r2, #9
 801793e:	602a      	str	r2, [r5, #0]
 8017940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017944:	81a3      	strh	r3, [r4, #12]
 8017946:	f04f 30ff 	mov.w	r0, #4294967295
 801794a:	e033      	b.n	80179b4 <__swsetup_r+0x98>
 801794c:	0758      	lsls	r0, r3, #29
 801794e:	d512      	bpl.n	8017976 <__swsetup_r+0x5a>
 8017950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017952:	b141      	cbz	r1, 8017966 <__swsetup_r+0x4a>
 8017954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017958:	4299      	cmp	r1, r3
 801795a:	d002      	beq.n	8017962 <__swsetup_r+0x46>
 801795c:	4628      	mov	r0, r5
 801795e:	f000 f971 	bl	8017c44 <_free_r>
 8017962:	2300      	movs	r3, #0
 8017964:	6363      	str	r3, [r4, #52]	@ 0x34
 8017966:	89a3      	ldrh	r3, [r4, #12]
 8017968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801796c:	81a3      	strh	r3, [r4, #12]
 801796e:	2300      	movs	r3, #0
 8017970:	6063      	str	r3, [r4, #4]
 8017972:	6923      	ldr	r3, [r4, #16]
 8017974:	6023      	str	r3, [r4, #0]
 8017976:	89a3      	ldrh	r3, [r4, #12]
 8017978:	f043 0308 	orr.w	r3, r3, #8
 801797c:	81a3      	strh	r3, [r4, #12]
 801797e:	6923      	ldr	r3, [r4, #16]
 8017980:	b94b      	cbnz	r3, 8017996 <__swsetup_r+0x7a>
 8017982:	89a3      	ldrh	r3, [r4, #12]
 8017984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801798c:	d003      	beq.n	8017996 <__swsetup_r+0x7a>
 801798e:	4621      	mov	r1, r4
 8017990:	4628      	mov	r0, r5
 8017992:	f000 fd71 	bl	8018478 <__smakebuf_r>
 8017996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801799a:	f013 0201 	ands.w	r2, r3, #1
 801799e:	d00a      	beq.n	80179b6 <__swsetup_r+0x9a>
 80179a0:	2200      	movs	r2, #0
 80179a2:	60a2      	str	r2, [r4, #8]
 80179a4:	6962      	ldr	r2, [r4, #20]
 80179a6:	4252      	negs	r2, r2
 80179a8:	61a2      	str	r2, [r4, #24]
 80179aa:	6922      	ldr	r2, [r4, #16]
 80179ac:	b942      	cbnz	r2, 80179c0 <__swsetup_r+0xa4>
 80179ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80179b2:	d1c5      	bne.n	8017940 <__swsetup_r+0x24>
 80179b4:	bd38      	pop	{r3, r4, r5, pc}
 80179b6:	0799      	lsls	r1, r3, #30
 80179b8:	bf58      	it	pl
 80179ba:	6962      	ldrpl	r2, [r4, #20]
 80179bc:	60a2      	str	r2, [r4, #8]
 80179be:	e7f4      	b.n	80179aa <__swsetup_r+0x8e>
 80179c0:	2000      	movs	r0, #0
 80179c2:	e7f7      	b.n	80179b4 <__swsetup_r+0x98>
 80179c4:	20000eb0 	.word	0x20000eb0

080179c8 <memcmp>:
 80179c8:	b510      	push	{r4, lr}
 80179ca:	3901      	subs	r1, #1
 80179cc:	4402      	add	r2, r0
 80179ce:	4290      	cmp	r0, r2
 80179d0:	d101      	bne.n	80179d6 <memcmp+0xe>
 80179d2:	2000      	movs	r0, #0
 80179d4:	e005      	b.n	80179e2 <memcmp+0x1a>
 80179d6:	7803      	ldrb	r3, [r0, #0]
 80179d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179dc:	42a3      	cmp	r3, r4
 80179de:	d001      	beq.n	80179e4 <memcmp+0x1c>
 80179e0:	1b18      	subs	r0, r3, r4
 80179e2:	bd10      	pop	{r4, pc}
 80179e4:	3001      	adds	r0, #1
 80179e6:	e7f2      	b.n	80179ce <memcmp+0x6>

080179e8 <memmove>:
 80179e8:	4288      	cmp	r0, r1
 80179ea:	b510      	push	{r4, lr}
 80179ec:	eb01 0402 	add.w	r4, r1, r2
 80179f0:	d902      	bls.n	80179f8 <memmove+0x10>
 80179f2:	4284      	cmp	r4, r0
 80179f4:	4623      	mov	r3, r4
 80179f6:	d807      	bhi.n	8017a08 <memmove+0x20>
 80179f8:	1e43      	subs	r3, r0, #1
 80179fa:	42a1      	cmp	r1, r4
 80179fc:	d008      	beq.n	8017a10 <memmove+0x28>
 80179fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a06:	e7f8      	b.n	80179fa <memmove+0x12>
 8017a08:	4402      	add	r2, r0
 8017a0a:	4601      	mov	r1, r0
 8017a0c:	428a      	cmp	r2, r1
 8017a0e:	d100      	bne.n	8017a12 <memmove+0x2a>
 8017a10:	bd10      	pop	{r4, pc}
 8017a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a1a:	e7f7      	b.n	8017a0c <memmove+0x24>

08017a1c <memset>:
 8017a1c:	4402      	add	r2, r0
 8017a1e:	4603      	mov	r3, r0
 8017a20:	4293      	cmp	r3, r2
 8017a22:	d100      	bne.n	8017a26 <memset+0xa>
 8017a24:	4770      	bx	lr
 8017a26:	f803 1b01 	strb.w	r1, [r3], #1
 8017a2a:	e7f9      	b.n	8017a20 <memset+0x4>

08017a2c <strchr>:
 8017a2c:	b2c9      	uxtb	r1, r1
 8017a2e:	4603      	mov	r3, r0
 8017a30:	4618      	mov	r0, r3
 8017a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a36:	b112      	cbz	r2, 8017a3e <strchr+0x12>
 8017a38:	428a      	cmp	r2, r1
 8017a3a:	d1f9      	bne.n	8017a30 <strchr+0x4>
 8017a3c:	4770      	bx	lr
 8017a3e:	2900      	cmp	r1, #0
 8017a40:	bf18      	it	ne
 8017a42:	2000      	movne	r0, #0
 8017a44:	4770      	bx	lr

08017a46 <strncmp>:
 8017a46:	b510      	push	{r4, lr}
 8017a48:	b16a      	cbz	r2, 8017a66 <strncmp+0x20>
 8017a4a:	3901      	subs	r1, #1
 8017a4c:	1884      	adds	r4, r0, r2
 8017a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017a56:	429a      	cmp	r2, r3
 8017a58:	d103      	bne.n	8017a62 <strncmp+0x1c>
 8017a5a:	42a0      	cmp	r0, r4
 8017a5c:	d001      	beq.n	8017a62 <strncmp+0x1c>
 8017a5e:	2a00      	cmp	r2, #0
 8017a60:	d1f5      	bne.n	8017a4e <strncmp+0x8>
 8017a62:	1ad0      	subs	r0, r2, r3
 8017a64:	bd10      	pop	{r4, pc}
 8017a66:	4610      	mov	r0, r2
 8017a68:	e7fc      	b.n	8017a64 <strncmp+0x1e>

08017a6a <strncpy>:
 8017a6a:	b510      	push	{r4, lr}
 8017a6c:	3901      	subs	r1, #1
 8017a6e:	4603      	mov	r3, r0
 8017a70:	b132      	cbz	r2, 8017a80 <strncpy+0x16>
 8017a72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017a76:	f803 4b01 	strb.w	r4, [r3], #1
 8017a7a:	3a01      	subs	r2, #1
 8017a7c:	2c00      	cmp	r4, #0
 8017a7e:	d1f7      	bne.n	8017a70 <strncpy+0x6>
 8017a80:	441a      	add	r2, r3
 8017a82:	2100      	movs	r1, #0
 8017a84:	4293      	cmp	r3, r2
 8017a86:	d100      	bne.n	8017a8a <strncpy+0x20>
 8017a88:	bd10      	pop	{r4, pc}
 8017a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8017a8e:	e7f9      	b.n	8017a84 <strncpy+0x1a>

08017a90 <strstr>:
 8017a90:	780a      	ldrb	r2, [r1, #0]
 8017a92:	b570      	push	{r4, r5, r6, lr}
 8017a94:	b96a      	cbnz	r2, 8017ab2 <strstr+0x22>
 8017a96:	bd70      	pop	{r4, r5, r6, pc}
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d109      	bne.n	8017ab0 <strstr+0x20>
 8017a9c:	460c      	mov	r4, r1
 8017a9e:	4605      	mov	r5, r0
 8017aa0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d0f6      	beq.n	8017a96 <strstr+0x6>
 8017aa8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017aac:	429e      	cmp	r6, r3
 8017aae:	d0f7      	beq.n	8017aa0 <strstr+0x10>
 8017ab0:	3001      	adds	r0, #1
 8017ab2:	7803      	ldrb	r3, [r0, #0]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1ef      	bne.n	8017a98 <strstr+0x8>
 8017ab8:	4618      	mov	r0, r3
 8017aba:	e7ec      	b.n	8017a96 <strstr+0x6>

08017abc <_close_r>:
 8017abc:	b538      	push	{r3, r4, r5, lr}
 8017abe:	4d06      	ldr	r5, [pc, #24]	@ (8017ad8 <_close_r+0x1c>)
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	4608      	mov	r0, r1
 8017ac6:	602b      	str	r3, [r5, #0]
 8017ac8:	f7ea fc3a 	bl	8002340 <_close>
 8017acc:	1c43      	adds	r3, r0, #1
 8017ace:	d102      	bne.n	8017ad6 <_close_r+0x1a>
 8017ad0:	682b      	ldr	r3, [r5, #0]
 8017ad2:	b103      	cbz	r3, 8017ad6 <_close_r+0x1a>
 8017ad4:	6023      	str	r3, [r4, #0]
 8017ad6:	bd38      	pop	{r3, r4, r5, pc}
 8017ad8:	2000ed3c 	.word	0x2000ed3c

08017adc <_lseek_r>:
 8017adc:	b538      	push	{r3, r4, r5, lr}
 8017ade:	4d07      	ldr	r5, [pc, #28]	@ (8017afc <_lseek_r+0x20>)
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	4608      	mov	r0, r1
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	602a      	str	r2, [r5, #0]
 8017aea:	461a      	mov	r2, r3
 8017aec:	f7ea fc4f 	bl	800238e <_lseek>
 8017af0:	1c43      	adds	r3, r0, #1
 8017af2:	d102      	bne.n	8017afa <_lseek_r+0x1e>
 8017af4:	682b      	ldr	r3, [r5, #0]
 8017af6:	b103      	cbz	r3, 8017afa <_lseek_r+0x1e>
 8017af8:	6023      	str	r3, [r4, #0]
 8017afa:	bd38      	pop	{r3, r4, r5, pc}
 8017afc:	2000ed3c 	.word	0x2000ed3c

08017b00 <_read_r>:
 8017b00:	b538      	push	{r3, r4, r5, lr}
 8017b02:	4d07      	ldr	r5, [pc, #28]	@ (8017b20 <_read_r+0x20>)
 8017b04:	4604      	mov	r4, r0
 8017b06:	4608      	mov	r0, r1
 8017b08:	4611      	mov	r1, r2
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	602a      	str	r2, [r5, #0]
 8017b0e:	461a      	mov	r2, r3
 8017b10:	f7ea fbdd 	bl	80022ce <_read>
 8017b14:	1c43      	adds	r3, r0, #1
 8017b16:	d102      	bne.n	8017b1e <_read_r+0x1e>
 8017b18:	682b      	ldr	r3, [r5, #0]
 8017b1a:	b103      	cbz	r3, 8017b1e <_read_r+0x1e>
 8017b1c:	6023      	str	r3, [r4, #0]
 8017b1e:	bd38      	pop	{r3, r4, r5, pc}
 8017b20:	2000ed3c 	.word	0x2000ed3c

08017b24 <_sbrk_r>:
 8017b24:	b538      	push	{r3, r4, r5, lr}
 8017b26:	4d06      	ldr	r5, [pc, #24]	@ (8017b40 <_sbrk_r+0x1c>)
 8017b28:	2300      	movs	r3, #0
 8017b2a:	4604      	mov	r4, r0
 8017b2c:	4608      	mov	r0, r1
 8017b2e:	602b      	str	r3, [r5, #0]
 8017b30:	f7ea fc3a 	bl	80023a8 <_sbrk>
 8017b34:	1c43      	adds	r3, r0, #1
 8017b36:	d102      	bne.n	8017b3e <_sbrk_r+0x1a>
 8017b38:	682b      	ldr	r3, [r5, #0]
 8017b3a:	b103      	cbz	r3, 8017b3e <_sbrk_r+0x1a>
 8017b3c:	6023      	str	r3, [r4, #0]
 8017b3e:	bd38      	pop	{r3, r4, r5, pc}
 8017b40:	2000ed3c 	.word	0x2000ed3c

08017b44 <_write_r>:
 8017b44:	b538      	push	{r3, r4, r5, lr}
 8017b46:	4d07      	ldr	r5, [pc, #28]	@ (8017b64 <_write_r+0x20>)
 8017b48:	4604      	mov	r4, r0
 8017b4a:	4608      	mov	r0, r1
 8017b4c:	4611      	mov	r1, r2
 8017b4e:	2200      	movs	r2, #0
 8017b50:	602a      	str	r2, [r5, #0]
 8017b52:	461a      	mov	r2, r3
 8017b54:	f7ea fbd8 	bl	8002308 <_write>
 8017b58:	1c43      	adds	r3, r0, #1
 8017b5a:	d102      	bne.n	8017b62 <_write_r+0x1e>
 8017b5c:	682b      	ldr	r3, [r5, #0]
 8017b5e:	b103      	cbz	r3, 8017b62 <_write_r+0x1e>
 8017b60:	6023      	str	r3, [r4, #0]
 8017b62:	bd38      	pop	{r3, r4, r5, pc}
 8017b64:	2000ed3c 	.word	0x2000ed3c

08017b68 <__errno>:
 8017b68:	4b01      	ldr	r3, [pc, #4]	@ (8017b70 <__errno+0x8>)
 8017b6a:	6818      	ldr	r0, [r3, #0]
 8017b6c:	4770      	bx	lr
 8017b6e:	bf00      	nop
 8017b70:	20000eb0 	.word	0x20000eb0

08017b74 <__libc_init_array>:
 8017b74:	b570      	push	{r4, r5, r6, lr}
 8017b76:	4d0d      	ldr	r5, [pc, #52]	@ (8017bac <__libc_init_array+0x38>)
 8017b78:	4c0d      	ldr	r4, [pc, #52]	@ (8017bb0 <__libc_init_array+0x3c>)
 8017b7a:	1b64      	subs	r4, r4, r5
 8017b7c:	10a4      	asrs	r4, r4, #2
 8017b7e:	2600      	movs	r6, #0
 8017b80:	42a6      	cmp	r6, r4
 8017b82:	d109      	bne.n	8017b98 <__libc_init_array+0x24>
 8017b84:	4d0b      	ldr	r5, [pc, #44]	@ (8017bb4 <__libc_init_array+0x40>)
 8017b86:	4c0c      	ldr	r4, [pc, #48]	@ (8017bb8 <__libc_init_array+0x44>)
 8017b88:	f000 fe60 	bl	801884c <_init>
 8017b8c:	1b64      	subs	r4, r4, r5
 8017b8e:	10a4      	asrs	r4, r4, #2
 8017b90:	2600      	movs	r6, #0
 8017b92:	42a6      	cmp	r6, r4
 8017b94:	d105      	bne.n	8017ba2 <__libc_init_array+0x2e>
 8017b96:	bd70      	pop	{r4, r5, r6, pc}
 8017b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b9c:	4798      	blx	r3
 8017b9e:	3601      	adds	r6, #1
 8017ba0:	e7ee      	b.n	8017b80 <__libc_init_array+0xc>
 8017ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ba6:	4798      	blx	r3
 8017ba8:	3601      	adds	r6, #1
 8017baa:	e7f2      	b.n	8017b92 <__libc_init_array+0x1e>
 8017bac:	08019a94 	.word	0x08019a94
 8017bb0:	08019a94 	.word	0x08019a94
 8017bb4:	08019a94 	.word	0x08019a94
 8017bb8:	08019a9c 	.word	0x08019a9c

08017bbc <__retarget_lock_init_recursive>:
 8017bbc:	4770      	bx	lr

08017bbe <__retarget_lock_acquire_recursive>:
 8017bbe:	4770      	bx	lr

08017bc0 <__retarget_lock_release_recursive>:
 8017bc0:	4770      	bx	lr

08017bc2 <strcpy>:
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bc8:	f803 2b01 	strb.w	r2, [r3], #1
 8017bcc:	2a00      	cmp	r2, #0
 8017bce:	d1f9      	bne.n	8017bc4 <strcpy+0x2>
 8017bd0:	4770      	bx	lr

08017bd2 <memcpy>:
 8017bd2:	440a      	add	r2, r1
 8017bd4:	4291      	cmp	r1, r2
 8017bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8017bda:	d100      	bne.n	8017bde <memcpy+0xc>
 8017bdc:	4770      	bx	lr
 8017bde:	b510      	push	{r4, lr}
 8017be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017be8:	4291      	cmp	r1, r2
 8017bea:	d1f9      	bne.n	8017be0 <memcpy+0xe>
 8017bec:	bd10      	pop	{r4, pc}
	...

08017bf0 <__assert_func>:
 8017bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bf2:	4614      	mov	r4, r2
 8017bf4:	461a      	mov	r2, r3
 8017bf6:	4b09      	ldr	r3, [pc, #36]	@ (8017c1c <__assert_func+0x2c>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	4605      	mov	r5, r0
 8017bfc:	68d8      	ldr	r0, [r3, #12]
 8017bfe:	b14c      	cbz	r4, 8017c14 <__assert_func+0x24>
 8017c00:	4b07      	ldr	r3, [pc, #28]	@ (8017c20 <__assert_func+0x30>)
 8017c02:	9100      	str	r1, [sp, #0]
 8017c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c08:	4906      	ldr	r1, [pc, #24]	@ (8017c24 <__assert_func+0x34>)
 8017c0a:	462b      	mov	r3, r5
 8017c0c:	f000 fbfc 	bl	8018408 <fiprintf>
 8017c10:	f000 fc90 	bl	8018534 <abort>
 8017c14:	4b04      	ldr	r3, [pc, #16]	@ (8017c28 <__assert_func+0x38>)
 8017c16:	461c      	mov	r4, r3
 8017c18:	e7f3      	b.n	8017c02 <__assert_func+0x12>
 8017c1a:	bf00      	nop
 8017c1c:	20000eb0 	.word	0x20000eb0
 8017c20:	0801991b 	.word	0x0801991b
 8017c24:	08019928 	.word	0x08019928
 8017c28:	08019956 	.word	0x08019956

08017c2c <__env_lock>:
 8017c2c:	4801      	ldr	r0, [pc, #4]	@ (8017c34 <__env_lock+0x8>)
 8017c2e:	f7ff bfc6 	b.w	8017bbe <__retarget_lock_acquire_recursive>
 8017c32:	bf00      	nop
 8017c34:	2000ed40 	.word	0x2000ed40

08017c38 <__env_unlock>:
 8017c38:	4801      	ldr	r0, [pc, #4]	@ (8017c40 <__env_unlock+0x8>)
 8017c3a:	f7ff bfc1 	b.w	8017bc0 <__retarget_lock_release_recursive>
 8017c3e:	bf00      	nop
 8017c40:	2000ed40 	.word	0x2000ed40

08017c44 <_free_r>:
 8017c44:	b538      	push	{r3, r4, r5, lr}
 8017c46:	4605      	mov	r5, r0
 8017c48:	2900      	cmp	r1, #0
 8017c4a:	d041      	beq.n	8017cd0 <_free_r+0x8c>
 8017c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c50:	1f0c      	subs	r4, r1, #4
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	bfb8      	it	lt
 8017c56:	18e4      	addlt	r4, r4, r3
 8017c58:	f7ff fb2a 	bl	80172b0 <__malloc_lock>
 8017c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8017cd4 <_free_r+0x90>)
 8017c5e:	6813      	ldr	r3, [r2, #0]
 8017c60:	b933      	cbnz	r3, 8017c70 <_free_r+0x2c>
 8017c62:	6063      	str	r3, [r4, #4]
 8017c64:	6014      	str	r4, [r2, #0]
 8017c66:	4628      	mov	r0, r5
 8017c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c6c:	f7ff bb26 	b.w	80172bc <__malloc_unlock>
 8017c70:	42a3      	cmp	r3, r4
 8017c72:	d908      	bls.n	8017c86 <_free_r+0x42>
 8017c74:	6820      	ldr	r0, [r4, #0]
 8017c76:	1821      	adds	r1, r4, r0
 8017c78:	428b      	cmp	r3, r1
 8017c7a:	bf01      	itttt	eq
 8017c7c:	6819      	ldreq	r1, [r3, #0]
 8017c7e:	685b      	ldreq	r3, [r3, #4]
 8017c80:	1809      	addeq	r1, r1, r0
 8017c82:	6021      	streq	r1, [r4, #0]
 8017c84:	e7ed      	b.n	8017c62 <_free_r+0x1e>
 8017c86:	461a      	mov	r2, r3
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	b10b      	cbz	r3, 8017c90 <_free_r+0x4c>
 8017c8c:	42a3      	cmp	r3, r4
 8017c8e:	d9fa      	bls.n	8017c86 <_free_r+0x42>
 8017c90:	6811      	ldr	r1, [r2, #0]
 8017c92:	1850      	adds	r0, r2, r1
 8017c94:	42a0      	cmp	r0, r4
 8017c96:	d10b      	bne.n	8017cb0 <_free_r+0x6c>
 8017c98:	6820      	ldr	r0, [r4, #0]
 8017c9a:	4401      	add	r1, r0
 8017c9c:	1850      	adds	r0, r2, r1
 8017c9e:	4283      	cmp	r3, r0
 8017ca0:	6011      	str	r1, [r2, #0]
 8017ca2:	d1e0      	bne.n	8017c66 <_free_r+0x22>
 8017ca4:	6818      	ldr	r0, [r3, #0]
 8017ca6:	685b      	ldr	r3, [r3, #4]
 8017ca8:	6053      	str	r3, [r2, #4]
 8017caa:	4408      	add	r0, r1
 8017cac:	6010      	str	r0, [r2, #0]
 8017cae:	e7da      	b.n	8017c66 <_free_r+0x22>
 8017cb0:	d902      	bls.n	8017cb8 <_free_r+0x74>
 8017cb2:	230c      	movs	r3, #12
 8017cb4:	602b      	str	r3, [r5, #0]
 8017cb6:	e7d6      	b.n	8017c66 <_free_r+0x22>
 8017cb8:	6820      	ldr	r0, [r4, #0]
 8017cba:	1821      	adds	r1, r4, r0
 8017cbc:	428b      	cmp	r3, r1
 8017cbe:	bf04      	itt	eq
 8017cc0:	6819      	ldreq	r1, [r3, #0]
 8017cc2:	685b      	ldreq	r3, [r3, #4]
 8017cc4:	6063      	str	r3, [r4, #4]
 8017cc6:	bf04      	itt	eq
 8017cc8:	1809      	addeq	r1, r1, r0
 8017cca:	6021      	streq	r1, [r4, #0]
 8017ccc:	6054      	str	r4, [r2, #4]
 8017cce:	e7ca      	b.n	8017c66 <_free_r+0x22>
 8017cd0:	bd38      	pop	{r3, r4, r5, pc}
 8017cd2:	bf00      	nop
 8017cd4:	2000ebfc 	.word	0x2000ebfc

08017cd8 <_malloc_usable_size_r>:
 8017cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017cdc:	1f18      	subs	r0, r3, #4
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	bfbc      	itt	lt
 8017ce2:	580b      	ldrlt	r3, [r1, r0]
 8017ce4:	18c0      	addlt	r0, r0, r3
 8017ce6:	4770      	bx	lr

08017ce8 <__ssputs_r>:
 8017ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cec:	688e      	ldr	r6, [r1, #8]
 8017cee:	461f      	mov	r7, r3
 8017cf0:	42be      	cmp	r6, r7
 8017cf2:	680b      	ldr	r3, [r1, #0]
 8017cf4:	4682      	mov	sl, r0
 8017cf6:	460c      	mov	r4, r1
 8017cf8:	4690      	mov	r8, r2
 8017cfa:	d82d      	bhi.n	8017d58 <__ssputs_r+0x70>
 8017cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017d04:	d026      	beq.n	8017d54 <__ssputs_r+0x6c>
 8017d06:	6965      	ldr	r5, [r4, #20]
 8017d08:	6909      	ldr	r1, [r1, #16]
 8017d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d0e:	eba3 0901 	sub.w	r9, r3, r1
 8017d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d16:	1c7b      	adds	r3, r7, #1
 8017d18:	444b      	add	r3, r9
 8017d1a:	106d      	asrs	r5, r5, #1
 8017d1c:	429d      	cmp	r5, r3
 8017d1e:	bf38      	it	cc
 8017d20:	461d      	movcc	r5, r3
 8017d22:	0553      	lsls	r3, r2, #21
 8017d24:	d527      	bpl.n	8017d76 <__ssputs_r+0x8e>
 8017d26:	4629      	mov	r1, r5
 8017d28:	f7ff fa42 	bl	80171b0 <_malloc_r>
 8017d2c:	4606      	mov	r6, r0
 8017d2e:	b360      	cbz	r0, 8017d8a <__ssputs_r+0xa2>
 8017d30:	6921      	ldr	r1, [r4, #16]
 8017d32:	464a      	mov	r2, r9
 8017d34:	f7ff ff4d 	bl	8017bd2 <memcpy>
 8017d38:	89a3      	ldrh	r3, [r4, #12]
 8017d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d42:	81a3      	strh	r3, [r4, #12]
 8017d44:	6126      	str	r6, [r4, #16]
 8017d46:	6165      	str	r5, [r4, #20]
 8017d48:	444e      	add	r6, r9
 8017d4a:	eba5 0509 	sub.w	r5, r5, r9
 8017d4e:	6026      	str	r6, [r4, #0]
 8017d50:	60a5      	str	r5, [r4, #8]
 8017d52:	463e      	mov	r6, r7
 8017d54:	42be      	cmp	r6, r7
 8017d56:	d900      	bls.n	8017d5a <__ssputs_r+0x72>
 8017d58:	463e      	mov	r6, r7
 8017d5a:	6820      	ldr	r0, [r4, #0]
 8017d5c:	4632      	mov	r2, r6
 8017d5e:	4641      	mov	r1, r8
 8017d60:	f7ff fe42 	bl	80179e8 <memmove>
 8017d64:	68a3      	ldr	r3, [r4, #8]
 8017d66:	1b9b      	subs	r3, r3, r6
 8017d68:	60a3      	str	r3, [r4, #8]
 8017d6a:	6823      	ldr	r3, [r4, #0]
 8017d6c:	4433      	add	r3, r6
 8017d6e:	6023      	str	r3, [r4, #0]
 8017d70:	2000      	movs	r0, #0
 8017d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d76:	462a      	mov	r2, r5
 8017d78:	f7ff fb1a 	bl	80173b0 <_realloc_r>
 8017d7c:	4606      	mov	r6, r0
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	d1e0      	bne.n	8017d44 <__ssputs_r+0x5c>
 8017d82:	6921      	ldr	r1, [r4, #16]
 8017d84:	4650      	mov	r0, sl
 8017d86:	f7ff ff5d 	bl	8017c44 <_free_r>
 8017d8a:	230c      	movs	r3, #12
 8017d8c:	f8ca 3000 	str.w	r3, [sl]
 8017d90:	89a3      	ldrh	r3, [r4, #12]
 8017d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d96:	81a3      	strh	r3, [r4, #12]
 8017d98:	f04f 30ff 	mov.w	r0, #4294967295
 8017d9c:	e7e9      	b.n	8017d72 <__ssputs_r+0x8a>
	...

08017da0 <_svfiprintf_r>:
 8017da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da4:	4698      	mov	r8, r3
 8017da6:	898b      	ldrh	r3, [r1, #12]
 8017da8:	061b      	lsls	r3, r3, #24
 8017daa:	b09d      	sub	sp, #116	@ 0x74
 8017dac:	4607      	mov	r7, r0
 8017dae:	460d      	mov	r5, r1
 8017db0:	4614      	mov	r4, r2
 8017db2:	d510      	bpl.n	8017dd6 <_svfiprintf_r+0x36>
 8017db4:	690b      	ldr	r3, [r1, #16]
 8017db6:	b973      	cbnz	r3, 8017dd6 <_svfiprintf_r+0x36>
 8017db8:	2140      	movs	r1, #64	@ 0x40
 8017dba:	f7ff f9f9 	bl	80171b0 <_malloc_r>
 8017dbe:	6028      	str	r0, [r5, #0]
 8017dc0:	6128      	str	r0, [r5, #16]
 8017dc2:	b930      	cbnz	r0, 8017dd2 <_svfiprintf_r+0x32>
 8017dc4:	230c      	movs	r3, #12
 8017dc6:	603b      	str	r3, [r7, #0]
 8017dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8017dcc:	b01d      	add	sp, #116	@ 0x74
 8017dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dd2:	2340      	movs	r3, #64	@ 0x40
 8017dd4:	616b      	str	r3, [r5, #20]
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dda:	2320      	movs	r3, #32
 8017ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017de4:	2330      	movs	r3, #48	@ 0x30
 8017de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017f84 <_svfiprintf_r+0x1e4>
 8017dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017dee:	f04f 0901 	mov.w	r9, #1
 8017df2:	4623      	mov	r3, r4
 8017df4:	469a      	mov	sl, r3
 8017df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dfa:	b10a      	cbz	r2, 8017e00 <_svfiprintf_r+0x60>
 8017dfc:	2a25      	cmp	r2, #37	@ 0x25
 8017dfe:	d1f9      	bne.n	8017df4 <_svfiprintf_r+0x54>
 8017e00:	ebba 0b04 	subs.w	fp, sl, r4
 8017e04:	d00b      	beq.n	8017e1e <_svfiprintf_r+0x7e>
 8017e06:	465b      	mov	r3, fp
 8017e08:	4622      	mov	r2, r4
 8017e0a:	4629      	mov	r1, r5
 8017e0c:	4638      	mov	r0, r7
 8017e0e:	f7ff ff6b 	bl	8017ce8 <__ssputs_r>
 8017e12:	3001      	adds	r0, #1
 8017e14:	f000 80a7 	beq.w	8017f66 <_svfiprintf_r+0x1c6>
 8017e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e1a:	445a      	add	r2, fp
 8017e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	f000 809f 	beq.w	8017f66 <_svfiprintf_r+0x1c6>
 8017e28:	2300      	movs	r3, #0
 8017e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e32:	f10a 0a01 	add.w	sl, sl, #1
 8017e36:	9304      	str	r3, [sp, #16]
 8017e38:	9307      	str	r3, [sp, #28]
 8017e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e40:	4654      	mov	r4, sl
 8017e42:	2205      	movs	r2, #5
 8017e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e48:	484e      	ldr	r0, [pc, #312]	@ (8017f84 <_svfiprintf_r+0x1e4>)
 8017e4a:	f7e8 f9f1 	bl	8000230 <memchr>
 8017e4e:	9a04      	ldr	r2, [sp, #16]
 8017e50:	b9d8      	cbnz	r0, 8017e8a <_svfiprintf_r+0xea>
 8017e52:	06d0      	lsls	r0, r2, #27
 8017e54:	bf44      	itt	mi
 8017e56:	2320      	movmi	r3, #32
 8017e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e5c:	0711      	lsls	r1, r2, #28
 8017e5e:	bf44      	itt	mi
 8017e60:	232b      	movmi	r3, #43	@ 0x2b
 8017e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e66:	f89a 3000 	ldrb.w	r3, [sl]
 8017e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e6c:	d015      	beq.n	8017e9a <_svfiprintf_r+0xfa>
 8017e6e:	9a07      	ldr	r2, [sp, #28]
 8017e70:	4654      	mov	r4, sl
 8017e72:	2000      	movs	r0, #0
 8017e74:	f04f 0c0a 	mov.w	ip, #10
 8017e78:	4621      	mov	r1, r4
 8017e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e7e:	3b30      	subs	r3, #48	@ 0x30
 8017e80:	2b09      	cmp	r3, #9
 8017e82:	d94b      	bls.n	8017f1c <_svfiprintf_r+0x17c>
 8017e84:	b1b0      	cbz	r0, 8017eb4 <_svfiprintf_r+0x114>
 8017e86:	9207      	str	r2, [sp, #28]
 8017e88:	e014      	b.n	8017eb4 <_svfiprintf_r+0x114>
 8017e8a:	eba0 0308 	sub.w	r3, r0, r8
 8017e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8017e92:	4313      	orrs	r3, r2
 8017e94:	9304      	str	r3, [sp, #16]
 8017e96:	46a2      	mov	sl, r4
 8017e98:	e7d2      	b.n	8017e40 <_svfiprintf_r+0xa0>
 8017e9a:	9b03      	ldr	r3, [sp, #12]
 8017e9c:	1d19      	adds	r1, r3, #4
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	9103      	str	r1, [sp, #12]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	bfbb      	ittet	lt
 8017ea6:	425b      	neglt	r3, r3
 8017ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8017eac:	9307      	strge	r3, [sp, #28]
 8017eae:	9307      	strlt	r3, [sp, #28]
 8017eb0:	bfb8      	it	lt
 8017eb2:	9204      	strlt	r2, [sp, #16]
 8017eb4:	7823      	ldrb	r3, [r4, #0]
 8017eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8017eb8:	d10a      	bne.n	8017ed0 <_svfiprintf_r+0x130>
 8017eba:	7863      	ldrb	r3, [r4, #1]
 8017ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ebe:	d132      	bne.n	8017f26 <_svfiprintf_r+0x186>
 8017ec0:	9b03      	ldr	r3, [sp, #12]
 8017ec2:	1d1a      	adds	r2, r3, #4
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	9203      	str	r2, [sp, #12]
 8017ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017ecc:	3402      	adds	r4, #2
 8017ece:	9305      	str	r3, [sp, #20]
 8017ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017f94 <_svfiprintf_r+0x1f4>
 8017ed4:	7821      	ldrb	r1, [r4, #0]
 8017ed6:	2203      	movs	r2, #3
 8017ed8:	4650      	mov	r0, sl
 8017eda:	f7e8 f9a9 	bl	8000230 <memchr>
 8017ede:	b138      	cbz	r0, 8017ef0 <_svfiprintf_r+0x150>
 8017ee0:	9b04      	ldr	r3, [sp, #16]
 8017ee2:	eba0 000a 	sub.w	r0, r0, sl
 8017ee6:	2240      	movs	r2, #64	@ 0x40
 8017ee8:	4082      	lsls	r2, r0
 8017eea:	4313      	orrs	r3, r2
 8017eec:	3401      	adds	r4, #1
 8017eee:	9304      	str	r3, [sp, #16]
 8017ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ef4:	4824      	ldr	r0, [pc, #144]	@ (8017f88 <_svfiprintf_r+0x1e8>)
 8017ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017efa:	2206      	movs	r2, #6
 8017efc:	f7e8 f998 	bl	8000230 <memchr>
 8017f00:	2800      	cmp	r0, #0
 8017f02:	d036      	beq.n	8017f72 <_svfiprintf_r+0x1d2>
 8017f04:	4b21      	ldr	r3, [pc, #132]	@ (8017f8c <_svfiprintf_r+0x1ec>)
 8017f06:	bb1b      	cbnz	r3, 8017f50 <_svfiprintf_r+0x1b0>
 8017f08:	9b03      	ldr	r3, [sp, #12]
 8017f0a:	3307      	adds	r3, #7
 8017f0c:	f023 0307 	bic.w	r3, r3, #7
 8017f10:	3308      	adds	r3, #8
 8017f12:	9303      	str	r3, [sp, #12]
 8017f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f16:	4433      	add	r3, r6
 8017f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f1a:	e76a      	b.n	8017df2 <_svfiprintf_r+0x52>
 8017f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f20:	460c      	mov	r4, r1
 8017f22:	2001      	movs	r0, #1
 8017f24:	e7a8      	b.n	8017e78 <_svfiprintf_r+0xd8>
 8017f26:	2300      	movs	r3, #0
 8017f28:	3401      	adds	r4, #1
 8017f2a:	9305      	str	r3, [sp, #20]
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	f04f 0c0a 	mov.w	ip, #10
 8017f32:	4620      	mov	r0, r4
 8017f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f38:	3a30      	subs	r2, #48	@ 0x30
 8017f3a:	2a09      	cmp	r2, #9
 8017f3c:	d903      	bls.n	8017f46 <_svfiprintf_r+0x1a6>
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d0c6      	beq.n	8017ed0 <_svfiprintf_r+0x130>
 8017f42:	9105      	str	r1, [sp, #20]
 8017f44:	e7c4      	b.n	8017ed0 <_svfiprintf_r+0x130>
 8017f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f4a:	4604      	mov	r4, r0
 8017f4c:	2301      	movs	r3, #1
 8017f4e:	e7f0      	b.n	8017f32 <_svfiprintf_r+0x192>
 8017f50:	ab03      	add	r3, sp, #12
 8017f52:	9300      	str	r3, [sp, #0]
 8017f54:	462a      	mov	r2, r5
 8017f56:	4b0e      	ldr	r3, [pc, #56]	@ (8017f90 <_svfiprintf_r+0x1f0>)
 8017f58:	a904      	add	r1, sp, #16
 8017f5a:	4638      	mov	r0, r7
 8017f5c:	f3af 8000 	nop.w
 8017f60:	1c42      	adds	r2, r0, #1
 8017f62:	4606      	mov	r6, r0
 8017f64:	d1d6      	bne.n	8017f14 <_svfiprintf_r+0x174>
 8017f66:	89ab      	ldrh	r3, [r5, #12]
 8017f68:	065b      	lsls	r3, r3, #25
 8017f6a:	f53f af2d 	bmi.w	8017dc8 <_svfiprintf_r+0x28>
 8017f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f70:	e72c      	b.n	8017dcc <_svfiprintf_r+0x2c>
 8017f72:	ab03      	add	r3, sp, #12
 8017f74:	9300      	str	r3, [sp, #0]
 8017f76:	462a      	mov	r2, r5
 8017f78:	4b05      	ldr	r3, [pc, #20]	@ (8017f90 <_svfiprintf_r+0x1f0>)
 8017f7a:	a904      	add	r1, sp, #16
 8017f7c:	4638      	mov	r0, r7
 8017f7e:	f000 f879 	bl	8018074 <_printf_i>
 8017f82:	e7ed      	b.n	8017f60 <_svfiprintf_r+0x1c0>
 8017f84:	08019957 	.word	0x08019957
 8017f88:	08019961 	.word	0x08019961
 8017f8c:	00000000 	.word	0x00000000
 8017f90:	08017ce9 	.word	0x08017ce9
 8017f94:	0801995d 	.word	0x0801995d

08017f98 <_printf_common>:
 8017f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f9c:	4616      	mov	r6, r2
 8017f9e:	4698      	mov	r8, r3
 8017fa0:	688a      	ldr	r2, [r1, #8]
 8017fa2:	690b      	ldr	r3, [r1, #16]
 8017fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	bfb8      	it	lt
 8017fac:	4613      	movlt	r3, r2
 8017fae:	6033      	str	r3, [r6, #0]
 8017fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017fb4:	4607      	mov	r7, r0
 8017fb6:	460c      	mov	r4, r1
 8017fb8:	b10a      	cbz	r2, 8017fbe <_printf_common+0x26>
 8017fba:	3301      	adds	r3, #1
 8017fbc:	6033      	str	r3, [r6, #0]
 8017fbe:	6823      	ldr	r3, [r4, #0]
 8017fc0:	0699      	lsls	r1, r3, #26
 8017fc2:	bf42      	ittt	mi
 8017fc4:	6833      	ldrmi	r3, [r6, #0]
 8017fc6:	3302      	addmi	r3, #2
 8017fc8:	6033      	strmi	r3, [r6, #0]
 8017fca:	6825      	ldr	r5, [r4, #0]
 8017fcc:	f015 0506 	ands.w	r5, r5, #6
 8017fd0:	d106      	bne.n	8017fe0 <_printf_common+0x48>
 8017fd2:	f104 0a19 	add.w	sl, r4, #25
 8017fd6:	68e3      	ldr	r3, [r4, #12]
 8017fd8:	6832      	ldr	r2, [r6, #0]
 8017fda:	1a9b      	subs	r3, r3, r2
 8017fdc:	42ab      	cmp	r3, r5
 8017fde:	dc26      	bgt.n	801802e <_printf_common+0x96>
 8017fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017fe4:	6822      	ldr	r2, [r4, #0]
 8017fe6:	3b00      	subs	r3, #0
 8017fe8:	bf18      	it	ne
 8017fea:	2301      	movne	r3, #1
 8017fec:	0692      	lsls	r2, r2, #26
 8017fee:	d42b      	bmi.n	8018048 <_printf_common+0xb0>
 8017ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017ff4:	4641      	mov	r1, r8
 8017ff6:	4638      	mov	r0, r7
 8017ff8:	47c8      	blx	r9
 8017ffa:	3001      	adds	r0, #1
 8017ffc:	d01e      	beq.n	801803c <_printf_common+0xa4>
 8017ffe:	6823      	ldr	r3, [r4, #0]
 8018000:	6922      	ldr	r2, [r4, #16]
 8018002:	f003 0306 	and.w	r3, r3, #6
 8018006:	2b04      	cmp	r3, #4
 8018008:	bf02      	ittt	eq
 801800a:	68e5      	ldreq	r5, [r4, #12]
 801800c:	6833      	ldreq	r3, [r6, #0]
 801800e:	1aed      	subeq	r5, r5, r3
 8018010:	68a3      	ldr	r3, [r4, #8]
 8018012:	bf0c      	ite	eq
 8018014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018018:	2500      	movne	r5, #0
 801801a:	4293      	cmp	r3, r2
 801801c:	bfc4      	itt	gt
 801801e:	1a9b      	subgt	r3, r3, r2
 8018020:	18ed      	addgt	r5, r5, r3
 8018022:	2600      	movs	r6, #0
 8018024:	341a      	adds	r4, #26
 8018026:	42b5      	cmp	r5, r6
 8018028:	d11a      	bne.n	8018060 <_printf_common+0xc8>
 801802a:	2000      	movs	r0, #0
 801802c:	e008      	b.n	8018040 <_printf_common+0xa8>
 801802e:	2301      	movs	r3, #1
 8018030:	4652      	mov	r2, sl
 8018032:	4641      	mov	r1, r8
 8018034:	4638      	mov	r0, r7
 8018036:	47c8      	blx	r9
 8018038:	3001      	adds	r0, #1
 801803a:	d103      	bne.n	8018044 <_printf_common+0xac>
 801803c:	f04f 30ff 	mov.w	r0, #4294967295
 8018040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018044:	3501      	adds	r5, #1
 8018046:	e7c6      	b.n	8017fd6 <_printf_common+0x3e>
 8018048:	18e1      	adds	r1, r4, r3
 801804a:	1c5a      	adds	r2, r3, #1
 801804c:	2030      	movs	r0, #48	@ 0x30
 801804e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018052:	4422      	add	r2, r4
 8018054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801805c:	3302      	adds	r3, #2
 801805e:	e7c7      	b.n	8017ff0 <_printf_common+0x58>
 8018060:	2301      	movs	r3, #1
 8018062:	4622      	mov	r2, r4
 8018064:	4641      	mov	r1, r8
 8018066:	4638      	mov	r0, r7
 8018068:	47c8      	blx	r9
 801806a:	3001      	adds	r0, #1
 801806c:	d0e6      	beq.n	801803c <_printf_common+0xa4>
 801806e:	3601      	adds	r6, #1
 8018070:	e7d9      	b.n	8018026 <_printf_common+0x8e>
	...

08018074 <_printf_i>:
 8018074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018078:	7e0f      	ldrb	r7, [r1, #24]
 801807a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801807c:	2f78      	cmp	r7, #120	@ 0x78
 801807e:	4691      	mov	r9, r2
 8018080:	4680      	mov	r8, r0
 8018082:	460c      	mov	r4, r1
 8018084:	469a      	mov	sl, r3
 8018086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801808a:	d807      	bhi.n	801809c <_printf_i+0x28>
 801808c:	2f62      	cmp	r7, #98	@ 0x62
 801808e:	d80a      	bhi.n	80180a6 <_printf_i+0x32>
 8018090:	2f00      	cmp	r7, #0
 8018092:	f000 80d1 	beq.w	8018238 <_printf_i+0x1c4>
 8018096:	2f58      	cmp	r7, #88	@ 0x58
 8018098:	f000 80b8 	beq.w	801820c <_printf_i+0x198>
 801809c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80180a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80180a4:	e03a      	b.n	801811c <_printf_i+0xa8>
 80180a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80180aa:	2b15      	cmp	r3, #21
 80180ac:	d8f6      	bhi.n	801809c <_printf_i+0x28>
 80180ae:	a101      	add	r1, pc, #4	@ (adr r1, 80180b4 <_printf_i+0x40>)
 80180b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180b4:	0801810d 	.word	0x0801810d
 80180b8:	08018121 	.word	0x08018121
 80180bc:	0801809d 	.word	0x0801809d
 80180c0:	0801809d 	.word	0x0801809d
 80180c4:	0801809d 	.word	0x0801809d
 80180c8:	0801809d 	.word	0x0801809d
 80180cc:	08018121 	.word	0x08018121
 80180d0:	0801809d 	.word	0x0801809d
 80180d4:	0801809d 	.word	0x0801809d
 80180d8:	0801809d 	.word	0x0801809d
 80180dc:	0801809d 	.word	0x0801809d
 80180e0:	0801821f 	.word	0x0801821f
 80180e4:	0801814b 	.word	0x0801814b
 80180e8:	080181d9 	.word	0x080181d9
 80180ec:	0801809d 	.word	0x0801809d
 80180f0:	0801809d 	.word	0x0801809d
 80180f4:	08018241 	.word	0x08018241
 80180f8:	0801809d 	.word	0x0801809d
 80180fc:	0801814b 	.word	0x0801814b
 8018100:	0801809d 	.word	0x0801809d
 8018104:	0801809d 	.word	0x0801809d
 8018108:	080181e1 	.word	0x080181e1
 801810c:	6833      	ldr	r3, [r6, #0]
 801810e:	1d1a      	adds	r2, r3, #4
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	6032      	str	r2, [r6, #0]
 8018114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801811c:	2301      	movs	r3, #1
 801811e:	e09c      	b.n	801825a <_printf_i+0x1e6>
 8018120:	6833      	ldr	r3, [r6, #0]
 8018122:	6820      	ldr	r0, [r4, #0]
 8018124:	1d19      	adds	r1, r3, #4
 8018126:	6031      	str	r1, [r6, #0]
 8018128:	0606      	lsls	r6, r0, #24
 801812a:	d501      	bpl.n	8018130 <_printf_i+0xbc>
 801812c:	681d      	ldr	r5, [r3, #0]
 801812e:	e003      	b.n	8018138 <_printf_i+0xc4>
 8018130:	0645      	lsls	r5, r0, #25
 8018132:	d5fb      	bpl.n	801812c <_printf_i+0xb8>
 8018134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018138:	2d00      	cmp	r5, #0
 801813a:	da03      	bge.n	8018144 <_printf_i+0xd0>
 801813c:	232d      	movs	r3, #45	@ 0x2d
 801813e:	426d      	negs	r5, r5
 8018140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018144:	4858      	ldr	r0, [pc, #352]	@ (80182a8 <_printf_i+0x234>)
 8018146:	230a      	movs	r3, #10
 8018148:	e011      	b.n	801816e <_printf_i+0xfa>
 801814a:	6821      	ldr	r1, [r4, #0]
 801814c:	6833      	ldr	r3, [r6, #0]
 801814e:	0608      	lsls	r0, r1, #24
 8018150:	f853 5b04 	ldr.w	r5, [r3], #4
 8018154:	d402      	bmi.n	801815c <_printf_i+0xe8>
 8018156:	0649      	lsls	r1, r1, #25
 8018158:	bf48      	it	mi
 801815a:	b2ad      	uxthmi	r5, r5
 801815c:	2f6f      	cmp	r7, #111	@ 0x6f
 801815e:	4852      	ldr	r0, [pc, #328]	@ (80182a8 <_printf_i+0x234>)
 8018160:	6033      	str	r3, [r6, #0]
 8018162:	bf14      	ite	ne
 8018164:	230a      	movne	r3, #10
 8018166:	2308      	moveq	r3, #8
 8018168:	2100      	movs	r1, #0
 801816a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801816e:	6866      	ldr	r6, [r4, #4]
 8018170:	60a6      	str	r6, [r4, #8]
 8018172:	2e00      	cmp	r6, #0
 8018174:	db05      	blt.n	8018182 <_printf_i+0x10e>
 8018176:	6821      	ldr	r1, [r4, #0]
 8018178:	432e      	orrs	r6, r5
 801817a:	f021 0104 	bic.w	r1, r1, #4
 801817e:	6021      	str	r1, [r4, #0]
 8018180:	d04b      	beq.n	801821a <_printf_i+0x1a6>
 8018182:	4616      	mov	r6, r2
 8018184:	fbb5 f1f3 	udiv	r1, r5, r3
 8018188:	fb03 5711 	mls	r7, r3, r1, r5
 801818c:	5dc7      	ldrb	r7, [r0, r7]
 801818e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018192:	462f      	mov	r7, r5
 8018194:	42bb      	cmp	r3, r7
 8018196:	460d      	mov	r5, r1
 8018198:	d9f4      	bls.n	8018184 <_printf_i+0x110>
 801819a:	2b08      	cmp	r3, #8
 801819c:	d10b      	bne.n	80181b6 <_printf_i+0x142>
 801819e:	6823      	ldr	r3, [r4, #0]
 80181a0:	07df      	lsls	r7, r3, #31
 80181a2:	d508      	bpl.n	80181b6 <_printf_i+0x142>
 80181a4:	6923      	ldr	r3, [r4, #16]
 80181a6:	6861      	ldr	r1, [r4, #4]
 80181a8:	4299      	cmp	r1, r3
 80181aa:	bfde      	ittt	le
 80181ac:	2330      	movle	r3, #48	@ 0x30
 80181ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80181b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80181b6:	1b92      	subs	r2, r2, r6
 80181b8:	6122      	str	r2, [r4, #16]
 80181ba:	f8cd a000 	str.w	sl, [sp]
 80181be:	464b      	mov	r3, r9
 80181c0:	aa03      	add	r2, sp, #12
 80181c2:	4621      	mov	r1, r4
 80181c4:	4640      	mov	r0, r8
 80181c6:	f7ff fee7 	bl	8017f98 <_printf_common>
 80181ca:	3001      	adds	r0, #1
 80181cc:	d14a      	bne.n	8018264 <_printf_i+0x1f0>
 80181ce:	f04f 30ff 	mov.w	r0, #4294967295
 80181d2:	b004      	add	sp, #16
 80181d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181d8:	6823      	ldr	r3, [r4, #0]
 80181da:	f043 0320 	orr.w	r3, r3, #32
 80181de:	6023      	str	r3, [r4, #0]
 80181e0:	4832      	ldr	r0, [pc, #200]	@ (80182ac <_printf_i+0x238>)
 80181e2:	2778      	movs	r7, #120	@ 0x78
 80181e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80181e8:	6823      	ldr	r3, [r4, #0]
 80181ea:	6831      	ldr	r1, [r6, #0]
 80181ec:	061f      	lsls	r7, r3, #24
 80181ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80181f2:	d402      	bmi.n	80181fa <_printf_i+0x186>
 80181f4:	065f      	lsls	r7, r3, #25
 80181f6:	bf48      	it	mi
 80181f8:	b2ad      	uxthmi	r5, r5
 80181fa:	6031      	str	r1, [r6, #0]
 80181fc:	07d9      	lsls	r1, r3, #31
 80181fe:	bf44      	itt	mi
 8018200:	f043 0320 	orrmi.w	r3, r3, #32
 8018204:	6023      	strmi	r3, [r4, #0]
 8018206:	b11d      	cbz	r5, 8018210 <_printf_i+0x19c>
 8018208:	2310      	movs	r3, #16
 801820a:	e7ad      	b.n	8018168 <_printf_i+0xf4>
 801820c:	4826      	ldr	r0, [pc, #152]	@ (80182a8 <_printf_i+0x234>)
 801820e:	e7e9      	b.n	80181e4 <_printf_i+0x170>
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	f023 0320 	bic.w	r3, r3, #32
 8018216:	6023      	str	r3, [r4, #0]
 8018218:	e7f6      	b.n	8018208 <_printf_i+0x194>
 801821a:	4616      	mov	r6, r2
 801821c:	e7bd      	b.n	801819a <_printf_i+0x126>
 801821e:	6833      	ldr	r3, [r6, #0]
 8018220:	6825      	ldr	r5, [r4, #0]
 8018222:	6961      	ldr	r1, [r4, #20]
 8018224:	1d18      	adds	r0, r3, #4
 8018226:	6030      	str	r0, [r6, #0]
 8018228:	062e      	lsls	r6, r5, #24
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	d501      	bpl.n	8018232 <_printf_i+0x1be>
 801822e:	6019      	str	r1, [r3, #0]
 8018230:	e002      	b.n	8018238 <_printf_i+0x1c4>
 8018232:	0668      	lsls	r0, r5, #25
 8018234:	d5fb      	bpl.n	801822e <_printf_i+0x1ba>
 8018236:	8019      	strh	r1, [r3, #0]
 8018238:	2300      	movs	r3, #0
 801823a:	6123      	str	r3, [r4, #16]
 801823c:	4616      	mov	r6, r2
 801823e:	e7bc      	b.n	80181ba <_printf_i+0x146>
 8018240:	6833      	ldr	r3, [r6, #0]
 8018242:	1d1a      	adds	r2, r3, #4
 8018244:	6032      	str	r2, [r6, #0]
 8018246:	681e      	ldr	r6, [r3, #0]
 8018248:	6862      	ldr	r2, [r4, #4]
 801824a:	2100      	movs	r1, #0
 801824c:	4630      	mov	r0, r6
 801824e:	f7e7 ffef 	bl	8000230 <memchr>
 8018252:	b108      	cbz	r0, 8018258 <_printf_i+0x1e4>
 8018254:	1b80      	subs	r0, r0, r6
 8018256:	6060      	str	r0, [r4, #4]
 8018258:	6863      	ldr	r3, [r4, #4]
 801825a:	6123      	str	r3, [r4, #16]
 801825c:	2300      	movs	r3, #0
 801825e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018262:	e7aa      	b.n	80181ba <_printf_i+0x146>
 8018264:	6923      	ldr	r3, [r4, #16]
 8018266:	4632      	mov	r2, r6
 8018268:	4649      	mov	r1, r9
 801826a:	4640      	mov	r0, r8
 801826c:	47d0      	blx	sl
 801826e:	3001      	adds	r0, #1
 8018270:	d0ad      	beq.n	80181ce <_printf_i+0x15a>
 8018272:	6823      	ldr	r3, [r4, #0]
 8018274:	079b      	lsls	r3, r3, #30
 8018276:	d413      	bmi.n	80182a0 <_printf_i+0x22c>
 8018278:	68e0      	ldr	r0, [r4, #12]
 801827a:	9b03      	ldr	r3, [sp, #12]
 801827c:	4298      	cmp	r0, r3
 801827e:	bfb8      	it	lt
 8018280:	4618      	movlt	r0, r3
 8018282:	e7a6      	b.n	80181d2 <_printf_i+0x15e>
 8018284:	2301      	movs	r3, #1
 8018286:	4632      	mov	r2, r6
 8018288:	4649      	mov	r1, r9
 801828a:	4640      	mov	r0, r8
 801828c:	47d0      	blx	sl
 801828e:	3001      	adds	r0, #1
 8018290:	d09d      	beq.n	80181ce <_printf_i+0x15a>
 8018292:	3501      	adds	r5, #1
 8018294:	68e3      	ldr	r3, [r4, #12]
 8018296:	9903      	ldr	r1, [sp, #12]
 8018298:	1a5b      	subs	r3, r3, r1
 801829a:	42ab      	cmp	r3, r5
 801829c:	dcf2      	bgt.n	8018284 <_printf_i+0x210>
 801829e:	e7eb      	b.n	8018278 <_printf_i+0x204>
 80182a0:	2500      	movs	r5, #0
 80182a2:	f104 0619 	add.w	r6, r4, #25
 80182a6:	e7f5      	b.n	8018294 <_printf_i+0x220>
 80182a8:	08019968 	.word	0x08019968
 80182ac:	08019979 	.word	0x08019979

080182b0 <__sflush_r>:
 80182b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80182b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182b8:	0716      	lsls	r6, r2, #28
 80182ba:	4605      	mov	r5, r0
 80182bc:	460c      	mov	r4, r1
 80182be:	d454      	bmi.n	801836a <__sflush_r+0xba>
 80182c0:	684b      	ldr	r3, [r1, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	dc02      	bgt.n	80182cc <__sflush_r+0x1c>
 80182c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	dd48      	ble.n	801835e <__sflush_r+0xae>
 80182cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80182ce:	2e00      	cmp	r6, #0
 80182d0:	d045      	beq.n	801835e <__sflush_r+0xae>
 80182d2:	2300      	movs	r3, #0
 80182d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80182d8:	682f      	ldr	r7, [r5, #0]
 80182da:	6a21      	ldr	r1, [r4, #32]
 80182dc:	602b      	str	r3, [r5, #0]
 80182de:	d030      	beq.n	8018342 <__sflush_r+0x92>
 80182e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80182e2:	89a3      	ldrh	r3, [r4, #12]
 80182e4:	0759      	lsls	r1, r3, #29
 80182e6:	d505      	bpl.n	80182f4 <__sflush_r+0x44>
 80182e8:	6863      	ldr	r3, [r4, #4]
 80182ea:	1ad2      	subs	r2, r2, r3
 80182ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80182ee:	b10b      	cbz	r3, 80182f4 <__sflush_r+0x44>
 80182f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80182f2:	1ad2      	subs	r2, r2, r3
 80182f4:	2300      	movs	r3, #0
 80182f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80182f8:	6a21      	ldr	r1, [r4, #32]
 80182fa:	4628      	mov	r0, r5
 80182fc:	47b0      	blx	r6
 80182fe:	1c43      	adds	r3, r0, #1
 8018300:	89a3      	ldrh	r3, [r4, #12]
 8018302:	d106      	bne.n	8018312 <__sflush_r+0x62>
 8018304:	6829      	ldr	r1, [r5, #0]
 8018306:	291d      	cmp	r1, #29
 8018308:	d82b      	bhi.n	8018362 <__sflush_r+0xb2>
 801830a:	4a2a      	ldr	r2, [pc, #168]	@ (80183b4 <__sflush_r+0x104>)
 801830c:	40ca      	lsrs	r2, r1
 801830e:	07d6      	lsls	r6, r2, #31
 8018310:	d527      	bpl.n	8018362 <__sflush_r+0xb2>
 8018312:	2200      	movs	r2, #0
 8018314:	6062      	str	r2, [r4, #4]
 8018316:	04d9      	lsls	r1, r3, #19
 8018318:	6922      	ldr	r2, [r4, #16]
 801831a:	6022      	str	r2, [r4, #0]
 801831c:	d504      	bpl.n	8018328 <__sflush_r+0x78>
 801831e:	1c42      	adds	r2, r0, #1
 8018320:	d101      	bne.n	8018326 <__sflush_r+0x76>
 8018322:	682b      	ldr	r3, [r5, #0]
 8018324:	b903      	cbnz	r3, 8018328 <__sflush_r+0x78>
 8018326:	6560      	str	r0, [r4, #84]	@ 0x54
 8018328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801832a:	602f      	str	r7, [r5, #0]
 801832c:	b1b9      	cbz	r1, 801835e <__sflush_r+0xae>
 801832e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018332:	4299      	cmp	r1, r3
 8018334:	d002      	beq.n	801833c <__sflush_r+0x8c>
 8018336:	4628      	mov	r0, r5
 8018338:	f7ff fc84 	bl	8017c44 <_free_r>
 801833c:	2300      	movs	r3, #0
 801833e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018340:	e00d      	b.n	801835e <__sflush_r+0xae>
 8018342:	2301      	movs	r3, #1
 8018344:	4628      	mov	r0, r5
 8018346:	47b0      	blx	r6
 8018348:	4602      	mov	r2, r0
 801834a:	1c50      	adds	r0, r2, #1
 801834c:	d1c9      	bne.n	80182e2 <__sflush_r+0x32>
 801834e:	682b      	ldr	r3, [r5, #0]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d0c6      	beq.n	80182e2 <__sflush_r+0x32>
 8018354:	2b1d      	cmp	r3, #29
 8018356:	d001      	beq.n	801835c <__sflush_r+0xac>
 8018358:	2b16      	cmp	r3, #22
 801835a:	d11e      	bne.n	801839a <__sflush_r+0xea>
 801835c:	602f      	str	r7, [r5, #0]
 801835e:	2000      	movs	r0, #0
 8018360:	e022      	b.n	80183a8 <__sflush_r+0xf8>
 8018362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018366:	b21b      	sxth	r3, r3
 8018368:	e01b      	b.n	80183a2 <__sflush_r+0xf2>
 801836a:	690f      	ldr	r7, [r1, #16]
 801836c:	2f00      	cmp	r7, #0
 801836e:	d0f6      	beq.n	801835e <__sflush_r+0xae>
 8018370:	0793      	lsls	r3, r2, #30
 8018372:	680e      	ldr	r6, [r1, #0]
 8018374:	bf08      	it	eq
 8018376:	694b      	ldreq	r3, [r1, #20]
 8018378:	600f      	str	r7, [r1, #0]
 801837a:	bf18      	it	ne
 801837c:	2300      	movne	r3, #0
 801837e:	eba6 0807 	sub.w	r8, r6, r7
 8018382:	608b      	str	r3, [r1, #8]
 8018384:	f1b8 0f00 	cmp.w	r8, #0
 8018388:	dde9      	ble.n	801835e <__sflush_r+0xae>
 801838a:	6a21      	ldr	r1, [r4, #32]
 801838c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801838e:	4643      	mov	r3, r8
 8018390:	463a      	mov	r2, r7
 8018392:	4628      	mov	r0, r5
 8018394:	47b0      	blx	r6
 8018396:	2800      	cmp	r0, #0
 8018398:	dc08      	bgt.n	80183ac <__sflush_r+0xfc>
 801839a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801839e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183a2:	81a3      	strh	r3, [r4, #12]
 80183a4:	f04f 30ff 	mov.w	r0, #4294967295
 80183a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ac:	4407      	add	r7, r0
 80183ae:	eba8 0800 	sub.w	r8, r8, r0
 80183b2:	e7e7      	b.n	8018384 <__sflush_r+0xd4>
 80183b4:	20400001 	.word	0x20400001

080183b8 <_fflush_r>:
 80183b8:	b538      	push	{r3, r4, r5, lr}
 80183ba:	690b      	ldr	r3, [r1, #16]
 80183bc:	4605      	mov	r5, r0
 80183be:	460c      	mov	r4, r1
 80183c0:	b913      	cbnz	r3, 80183c8 <_fflush_r+0x10>
 80183c2:	2500      	movs	r5, #0
 80183c4:	4628      	mov	r0, r5
 80183c6:	bd38      	pop	{r3, r4, r5, pc}
 80183c8:	b118      	cbz	r0, 80183d2 <_fflush_r+0x1a>
 80183ca:	6a03      	ldr	r3, [r0, #32]
 80183cc:	b90b      	cbnz	r3, 80183d2 <_fflush_r+0x1a>
 80183ce:	f7ff f921 	bl	8017614 <__sinit>
 80183d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d0f3      	beq.n	80183c2 <_fflush_r+0xa>
 80183da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80183dc:	07d0      	lsls	r0, r2, #31
 80183de:	d404      	bmi.n	80183ea <_fflush_r+0x32>
 80183e0:	0599      	lsls	r1, r3, #22
 80183e2:	d402      	bmi.n	80183ea <_fflush_r+0x32>
 80183e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80183e6:	f7ff fbea 	bl	8017bbe <__retarget_lock_acquire_recursive>
 80183ea:	4628      	mov	r0, r5
 80183ec:	4621      	mov	r1, r4
 80183ee:	f7ff ff5f 	bl	80182b0 <__sflush_r>
 80183f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80183f4:	07da      	lsls	r2, r3, #31
 80183f6:	4605      	mov	r5, r0
 80183f8:	d4e4      	bmi.n	80183c4 <_fflush_r+0xc>
 80183fa:	89a3      	ldrh	r3, [r4, #12]
 80183fc:	059b      	lsls	r3, r3, #22
 80183fe:	d4e1      	bmi.n	80183c4 <_fflush_r+0xc>
 8018400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018402:	f7ff fbdd 	bl	8017bc0 <__retarget_lock_release_recursive>
 8018406:	e7dd      	b.n	80183c4 <_fflush_r+0xc>

08018408 <fiprintf>:
 8018408:	b40e      	push	{r1, r2, r3}
 801840a:	b503      	push	{r0, r1, lr}
 801840c:	4601      	mov	r1, r0
 801840e:	ab03      	add	r3, sp, #12
 8018410:	4805      	ldr	r0, [pc, #20]	@ (8018428 <fiprintf+0x20>)
 8018412:	f853 2b04 	ldr.w	r2, [r3], #4
 8018416:	6800      	ldr	r0, [r0, #0]
 8018418:	9301      	str	r3, [sp, #4]
 801841a:	f000 f8bb 	bl	8018594 <_vfiprintf_r>
 801841e:	b002      	add	sp, #8
 8018420:	f85d eb04 	ldr.w	lr, [sp], #4
 8018424:	b003      	add	sp, #12
 8018426:	4770      	bx	lr
 8018428:	20000eb0 	.word	0x20000eb0

0801842c <__swhatbuf_r>:
 801842c:	b570      	push	{r4, r5, r6, lr}
 801842e:	460c      	mov	r4, r1
 8018430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018434:	2900      	cmp	r1, #0
 8018436:	b096      	sub	sp, #88	@ 0x58
 8018438:	4615      	mov	r5, r2
 801843a:	461e      	mov	r6, r3
 801843c:	da0d      	bge.n	801845a <__swhatbuf_r+0x2e>
 801843e:	89a3      	ldrh	r3, [r4, #12]
 8018440:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018444:	f04f 0100 	mov.w	r1, #0
 8018448:	bf14      	ite	ne
 801844a:	2340      	movne	r3, #64	@ 0x40
 801844c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018450:	2000      	movs	r0, #0
 8018452:	6031      	str	r1, [r6, #0]
 8018454:	602b      	str	r3, [r5, #0]
 8018456:	b016      	add	sp, #88	@ 0x58
 8018458:	bd70      	pop	{r4, r5, r6, pc}
 801845a:	466a      	mov	r2, sp
 801845c:	f000 f848 	bl	80184f0 <_fstat_r>
 8018460:	2800      	cmp	r0, #0
 8018462:	dbec      	blt.n	801843e <__swhatbuf_r+0x12>
 8018464:	9901      	ldr	r1, [sp, #4]
 8018466:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801846a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801846e:	4259      	negs	r1, r3
 8018470:	4159      	adcs	r1, r3
 8018472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018476:	e7eb      	b.n	8018450 <__swhatbuf_r+0x24>

08018478 <__smakebuf_r>:
 8018478:	898b      	ldrh	r3, [r1, #12]
 801847a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801847c:	079d      	lsls	r5, r3, #30
 801847e:	4606      	mov	r6, r0
 8018480:	460c      	mov	r4, r1
 8018482:	d507      	bpl.n	8018494 <__smakebuf_r+0x1c>
 8018484:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018488:	6023      	str	r3, [r4, #0]
 801848a:	6123      	str	r3, [r4, #16]
 801848c:	2301      	movs	r3, #1
 801848e:	6163      	str	r3, [r4, #20]
 8018490:	b003      	add	sp, #12
 8018492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018494:	ab01      	add	r3, sp, #4
 8018496:	466a      	mov	r2, sp
 8018498:	f7ff ffc8 	bl	801842c <__swhatbuf_r>
 801849c:	9f00      	ldr	r7, [sp, #0]
 801849e:	4605      	mov	r5, r0
 80184a0:	4639      	mov	r1, r7
 80184a2:	4630      	mov	r0, r6
 80184a4:	f7fe fe84 	bl	80171b0 <_malloc_r>
 80184a8:	b948      	cbnz	r0, 80184be <__smakebuf_r+0x46>
 80184aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184ae:	059a      	lsls	r2, r3, #22
 80184b0:	d4ee      	bmi.n	8018490 <__smakebuf_r+0x18>
 80184b2:	f023 0303 	bic.w	r3, r3, #3
 80184b6:	f043 0302 	orr.w	r3, r3, #2
 80184ba:	81a3      	strh	r3, [r4, #12]
 80184bc:	e7e2      	b.n	8018484 <__smakebuf_r+0xc>
 80184be:	89a3      	ldrh	r3, [r4, #12]
 80184c0:	6020      	str	r0, [r4, #0]
 80184c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184c6:	81a3      	strh	r3, [r4, #12]
 80184c8:	9b01      	ldr	r3, [sp, #4]
 80184ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80184ce:	b15b      	cbz	r3, 80184e8 <__smakebuf_r+0x70>
 80184d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184d4:	4630      	mov	r0, r6
 80184d6:	f000 f81d 	bl	8018514 <_isatty_r>
 80184da:	b128      	cbz	r0, 80184e8 <__smakebuf_r+0x70>
 80184dc:	89a3      	ldrh	r3, [r4, #12]
 80184de:	f023 0303 	bic.w	r3, r3, #3
 80184e2:	f043 0301 	orr.w	r3, r3, #1
 80184e6:	81a3      	strh	r3, [r4, #12]
 80184e8:	89a3      	ldrh	r3, [r4, #12]
 80184ea:	431d      	orrs	r5, r3
 80184ec:	81a5      	strh	r5, [r4, #12]
 80184ee:	e7cf      	b.n	8018490 <__smakebuf_r+0x18>

080184f0 <_fstat_r>:
 80184f0:	b538      	push	{r3, r4, r5, lr}
 80184f2:	4d07      	ldr	r5, [pc, #28]	@ (8018510 <_fstat_r+0x20>)
 80184f4:	2300      	movs	r3, #0
 80184f6:	4604      	mov	r4, r0
 80184f8:	4608      	mov	r0, r1
 80184fa:	4611      	mov	r1, r2
 80184fc:	602b      	str	r3, [r5, #0]
 80184fe:	f7e9 ff2b 	bl	8002358 <_fstat>
 8018502:	1c43      	adds	r3, r0, #1
 8018504:	d102      	bne.n	801850c <_fstat_r+0x1c>
 8018506:	682b      	ldr	r3, [r5, #0]
 8018508:	b103      	cbz	r3, 801850c <_fstat_r+0x1c>
 801850a:	6023      	str	r3, [r4, #0]
 801850c:	bd38      	pop	{r3, r4, r5, pc}
 801850e:	bf00      	nop
 8018510:	2000ed3c 	.word	0x2000ed3c

08018514 <_isatty_r>:
 8018514:	b538      	push	{r3, r4, r5, lr}
 8018516:	4d06      	ldr	r5, [pc, #24]	@ (8018530 <_isatty_r+0x1c>)
 8018518:	2300      	movs	r3, #0
 801851a:	4604      	mov	r4, r0
 801851c:	4608      	mov	r0, r1
 801851e:	602b      	str	r3, [r5, #0]
 8018520:	f7e9 ff2a 	bl	8002378 <_isatty>
 8018524:	1c43      	adds	r3, r0, #1
 8018526:	d102      	bne.n	801852e <_isatty_r+0x1a>
 8018528:	682b      	ldr	r3, [r5, #0]
 801852a:	b103      	cbz	r3, 801852e <_isatty_r+0x1a>
 801852c:	6023      	str	r3, [r4, #0]
 801852e:	bd38      	pop	{r3, r4, r5, pc}
 8018530:	2000ed3c 	.word	0x2000ed3c

08018534 <abort>:
 8018534:	b508      	push	{r3, lr}
 8018536:	2006      	movs	r0, #6
 8018538:	f000 f96c 	bl	8018814 <raise>
 801853c:	2001      	movs	r0, #1
 801853e:	f7e9 febb 	bl	80022b8 <_exit>

08018542 <__sfputc_r>:
 8018542:	6893      	ldr	r3, [r2, #8]
 8018544:	3b01      	subs	r3, #1
 8018546:	2b00      	cmp	r3, #0
 8018548:	b410      	push	{r4}
 801854a:	6093      	str	r3, [r2, #8]
 801854c:	da08      	bge.n	8018560 <__sfputc_r+0x1e>
 801854e:	6994      	ldr	r4, [r2, #24]
 8018550:	42a3      	cmp	r3, r4
 8018552:	db01      	blt.n	8018558 <__sfputc_r+0x16>
 8018554:	290a      	cmp	r1, #10
 8018556:	d103      	bne.n	8018560 <__sfputc_r+0x1e>
 8018558:	f85d 4b04 	ldr.w	r4, [sp], #4
 801855c:	f7ff b9a0 	b.w	80178a0 <__swbuf_r>
 8018560:	6813      	ldr	r3, [r2, #0]
 8018562:	1c58      	adds	r0, r3, #1
 8018564:	6010      	str	r0, [r2, #0]
 8018566:	7019      	strb	r1, [r3, #0]
 8018568:	4608      	mov	r0, r1
 801856a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801856e:	4770      	bx	lr

08018570 <__sfputs_r>:
 8018570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018572:	4606      	mov	r6, r0
 8018574:	460f      	mov	r7, r1
 8018576:	4614      	mov	r4, r2
 8018578:	18d5      	adds	r5, r2, r3
 801857a:	42ac      	cmp	r4, r5
 801857c:	d101      	bne.n	8018582 <__sfputs_r+0x12>
 801857e:	2000      	movs	r0, #0
 8018580:	e007      	b.n	8018592 <__sfputs_r+0x22>
 8018582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018586:	463a      	mov	r2, r7
 8018588:	4630      	mov	r0, r6
 801858a:	f7ff ffda 	bl	8018542 <__sfputc_r>
 801858e:	1c43      	adds	r3, r0, #1
 8018590:	d1f3      	bne.n	801857a <__sfputs_r+0xa>
 8018592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018594 <_vfiprintf_r>:
 8018594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018598:	460d      	mov	r5, r1
 801859a:	b09d      	sub	sp, #116	@ 0x74
 801859c:	4614      	mov	r4, r2
 801859e:	4698      	mov	r8, r3
 80185a0:	4606      	mov	r6, r0
 80185a2:	b118      	cbz	r0, 80185ac <_vfiprintf_r+0x18>
 80185a4:	6a03      	ldr	r3, [r0, #32]
 80185a6:	b90b      	cbnz	r3, 80185ac <_vfiprintf_r+0x18>
 80185a8:	f7ff f834 	bl	8017614 <__sinit>
 80185ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185ae:	07d9      	lsls	r1, r3, #31
 80185b0:	d405      	bmi.n	80185be <_vfiprintf_r+0x2a>
 80185b2:	89ab      	ldrh	r3, [r5, #12]
 80185b4:	059a      	lsls	r2, r3, #22
 80185b6:	d402      	bmi.n	80185be <_vfiprintf_r+0x2a>
 80185b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80185ba:	f7ff fb00 	bl	8017bbe <__retarget_lock_acquire_recursive>
 80185be:	89ab      	ldrh	r3, [r5, #12]
 80185c0:	071b      	lsls	r3, r3, #28
 80185c2:	d501      	bpl.n	80185c8 <_vfiprintf_r+0x34>
 80185c4:	692b      	ldr	r3, [r5, #16]
 80185c6:	b99b      	cbnz	r3, 80185f0 <_vfiprintf_r+0x5c>
 80185c8:	4629      	mov	r1, r5
 80185ca:	4630      	mov	r0, r6
 80185cc:	f7ff f9a6 	bl	801791c <__swsetup_r>
 80185d0:	b170      	cbz	r0, 80185f0 <_vfiprintf_r+0x5c>
 80185d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185d4:	07dc      	lsls	r4, r3, #31
 80185d6:	d504      	bpl.n	80185e2 <_vfiprintf_r+0x4e>
 80185d8:	f04f 30ff 	mov.w	r0, #4294967295
 80185dc:	b01d      	add	sp, #116	@ 0x74
 80185de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e2:	89ab      	ldrh	r3, [r5, #12]
 80185e4:	0598      	lsls	r0, r3, #22
 80185e6:	d4f7      	bmi.n	80185d8 <_vfiprintf_r+0x44>
 80185e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80185ea:	f7ff fae9 	bl	8017bc0 <__retarget_lock_release_recursive>
 80185ee:	e7f3      	b.n	80185d8 <_vfiprintf_r+0x44>
 80185f0:	2300      	movs	r3, #0
 80185f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80185f4:	2320      	movs	r3, #32
 80185f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80185fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80185fe:	2330      	movs	r3, #48	@ 0x30
 8018600:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80187b0 <_vfiprintf_r+0x21c>
 8018604:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018608:	f04f 0901 	mov.w	r9, #1
 801860c:	4623      	mov	r3, r4
 801860e:	469a      	mov	sl, r3
 8018610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018614:	b10a      	cbz	r2, 801861a <_vfiprintf_r+0x86>
 8018616:	2a25      	cmp	r2, #37	@ 0x25
 8018618:	d1f9      	bne.n	801860e <_vfiprintf_r+0x7a>
 801861a:	ebba 0b04 	subs.w	fp, sl, r4
 801861e:	d00b      	beq.n	8018638 <_vfiprintf_r+0xa4>
 8018620:	465b      	mov	r3, fp
 8018622:	4622      	mov	r2, r4
 8018624:	4629      	mov	r1, r5
 8018626:	4630      	mov	r0, r6
 8018628:	f7ff ffa2 	bl	8018570 <__sfputs_r>
 801862c:	3001      	adds	r0, #1
 801862e:	f000 80a7 	beq.w	8018780 <_vfiprintf_r+0x1ec>
 8018632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018634:	445a      	add	r2, fp
 8018636:	9209      	str	r2, [sp, #36]	@ 0x24
 8018638:	f89a 3000 	ldrb.w	r3, [sl]
 801863c:	2b00      	cmp	r3, #0
 801863e:	f000 809f 	beq.w	8018780 <_vfiprintf_r+0x1ec>
 8018642:	2300      	movs	r3, #0
 8018644:	f04f 32ff 	mov.w	r2, #4294967295
 8018648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801864c:	f10a 0a01 	add.w	sl, sl, #1
 8018650:	9304      	str	r3, [sp, #16]
 8018652:	9307      	str	r3, [sp, #28]
 8018654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018658:	931a      	str	r3, [sp, #104]	@ 0x68
 801865a:	4654      	mov	r4, sl
 801865c:	2205      	movs	r2, #5
 801865e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018662:	4853      	ldr	r0, [pc, #332]	@ (80187b0 <_vfiprintf_r+0x21c>)
 8018664:	f7e7 fde4 	bl	8000230 <memchr>
 8018668:	9a04      	ldr	r2, [sp, #16]
 801866a:	b9d8      	cbnz	r0, 80186a4 <_vfiprintf_r+0x110>
 801866c:	06d1      	lsls	r1, r2, #27
 801866e:	bf44      	itt	mi
 8018670:	2320      	movmi	r3, #32
 8018672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018676:	0713      	lsls	r3, r2, #28
 8018678:	bf44      	itt	mi
 801867a:	232b      	movmi	r3, #43	@ 0x2b
 801867c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018680:	f89a 3000 	ldrb.w	r3, [sl]
 8018684:	2b2a      	cmp	r3, #42	@ 0x2a
 8018686:	d015      	beq.n	80186b4 <_vfiprintf_r+0x120>
 8018688:	9a07      	ldr	r2, [sp, #28]
 801868a:	4654      	mov	r4, sl
 801868c:	2000      	movs	r0, #0
 801868e:	f04f 0c0a 	mov.w	ip, #10
 8018692:	4621      	mov	r1, r4
 8018694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018698:	3b30      	subs	r3, #48	@ 0x30
 801869a:	2b09      	cmp	r3, #9
 801869c:	d94b      	bls.n	8018736 <_vfiprintf_r+0x1a2>
 801869e:	b1b0      	cbz	r0, 80186ce <_vfiprintf_r+0x13a>
 80186a0:	9207      	str	r2, [sp, #28]
 80186a2:	e014      	b.n	80186ce <_vfiprintf_r+0x13a>
 80186a4:	eba0 0308 	sub.w	r3, r0, r8
 80186a8:	fa09 f303 	lsl.w	r3, r9, r3
 80186ac:	4313      	orrs	r3, r2
 80186ae:	9304      	str	r3, [sp, #16]
 80186b0:	46a2      	mov	sl, r4
 80186b2:	e7d2      	b.n	801865a <_vfiprintf_r+0xc6>
 80186b4:	9b03      	ldr	r3, [sp, #12]
 80186b6:	1d19      	adds	r1, r3, #4
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	9103      	str	r1, [sp, #12]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	bfbb      	ittet	lt
 80186c0:	425b      	neglt	r3, r3
 80186c2:	f042 0202 	orrlt.w	r2, r2, #2
 80186c6:	9307      	strge	r3, [sp, #28]
 80186c8:	9307      	strlt	r3, [sp, #28]
 80186ca:	bfb8      	it	lt
 80186cc:	9204      	strlt	r2, [sp, #16]
 80186ce:	7823      	ldrb	r3, [r4, #0]
 80186d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80186d2:	d10a      	bne.n	80186ea <_vfiprintf_r+0x156>
 80186d4:	7863      	ldrb	r3, [r4, #1]
 80186d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80186d8:	d132      	bne.n	8018740 <_vfiprintf_r+0x1ac>
 80186da:	9b03      	ldr	r3, [sp, #12]
 80186dc:	1d1a      	adds	r2, r3, #4
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	9203      	str	r2, [sp, #12]
 80186e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80186e6:	3402      	adds	r4, #2
 80186e8:	9305      	str	r3, [sp, #20]
 80186ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80187c0 <_vfiprintf_r+0x22c>
 80186ee:	7821      	ldrb	r1, [r4, #0]
 80186f0:	2203      	movs	r2, #3
 80186f2:	4650      	mov	r0, sl
 80186f4:	f7e7 fd9c 	bl	8000230 <memchr>
 80186f8:	b138      	cbz	r0, 801870a <_vfiprintf_r+0x176>
 80186fa:	9b04      	ldr	r3, [sp, #16]
 80186fc:	eba0 000a 	sub.w	r0, r0, sl
 8018700:	2240      	movs	r2, #64	@ 0x40
 8018702:	4082      	lsls	r2, r0
 8018704:	4313      	orrs	r3, r2
 8018706:	3401      	adds	r4, #1
 8018708:	9304      	str	r3, [sp, #16]
 801870a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801870e:	4829      	ldr	r0, [pc, #164]	@ (80187b4 <_vfiprintf_r+0x220>)
 8018710:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018714:	2206      	movs	r2, #6
 8018716:	f7e7 fd8b 	bl	8000230 <memchr>
 801871a:	2800      	cmp	r0, #0
 801871c:	d03f      	beq.n	801879e <_vfiprintf_r+0x20a>
 801871e:	4b26      	ldr	r3, [pc, #152]	@ (80187b8 <_vfiprintf_r+0x224>)
 8018720:	bb1b      	cbnz	r3, 801876a <_vfiprintf_r+0x1d6>
 8018722:	9b03      	ldr	r3, [sp, #12]
 8018724:	3307      	adds	r3, #7
 8018726:	f023 0307 	bic.w	r3, r3, #7
 801872a:	3308      	adds	r3, #8
 801872c:	9303      	str	r3, [sp, #12]
 801872e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018730:	443b      	add	r3, r7
 8018732:	9309      	str	r3, [sp, #36]	@ 0x24
 8018734:	e76a      	b.n	801860c <_vfiprintf_r+0x78>
 8018736:	fb0c 3202 	mla	r2, ip, r2, r3
 801873a:	460c      	mov	r4, r1
 801873c:	2001      	movs	r0, #1
 801873e:	e7a8      	b.n	8018692 <_vfiprintf_r+0xfe>
 8018740:	2300      	movs	r3, #0
 8018742:	3401      	adds	r4, #1
 8018744:	9305      	str	r3, [sp, #20]
 8018746:	4619      	mov	r1, r3
 8018748:	f04f 0c0a 	mov.w	ip, #10
 801874c:	4620      	mov	r0, r4
 801874e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018752:	3a30      	subs	r2, #48	@ 0x30
 8018754:	2a09      	cmp	r2, #9
 8018756:	d903      	bls.n	8018760 <_vfiprintf_r+0x1cc>
 8018758:	2b00      	cmp	r3, #0
 801875a:	d0c6      	beq.n	80186ea <_vfiprintf_r+0x156>
 801875c:	9105      	str	r1, [sp, #20]
 801875e:	e7c4      	b.n	80186ea <_vfiprintf_r+0x156>
 8018760:	fb0c 2101 	mla	r1, ip, r1, r2
 8018764:	4604      	mov	r4, r0
 8018766:	2301      	movs	r3, #1
 8018768:	e7f0      	b.n	801874c <_vfiprintf_r+0x1b8>
 801876a:	ab03      	add	r3, sp, #12
 801876c:	9300      	str	r3, [sp, #0]
 801876e:	462a      	mov	r2, r5
 8018770:	4b12      	ldr	r3, [pc, #72]	@ (80187bc <_vfiprintf_r+0x228>)
 8018772:	a904      	add	r1, sp, #16
 8018774:	4630      	mov	r0, r6
 8018776:	f3af 8000 	nop.w
 801877a:	4607      	mov	r7, r0
 801877c:	1c78      	adds	r0, r7, #1
 801877e:	d1d6      	bne.n	801872e <_vfiprintf_r+0x19a>
 8018780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018782:	07d9      	lsls	r1, r3, #31
 8018784:	d405      	bmi.n	8018792 <_vfiprintf_r+0x1fe>
 8018786:	89ab      	ldrh	r3, [r5, #12]
 8018788:	059a      	lsls	r2, r3, #22
 801878a:	d402      	bmi.n	8018792 <_vfiprintf_r+0x1fe>
 801878c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801878e:	f7ff fa17 	bl	8017bc0 <__retarget_lock_release_recursive>
 8018792:	89ab      	ldrh	r3, [r5, #12]
 8018794:	065b      	lsls	r3, r3, #25
 8018796:	f53f af1f 	bmi.w	80185d8 <_vfiprintf_r+0x44>
 801879a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801879c:	e71e      	b.n	80185dc <_vfiprintf_r+0x48>
 801879e:	ab03      	add	r3, sp, #12
 80187a0:	9300      	str	r3, [sp, #0]
 80187a2:	462a      	mov	r2, r5
 80187a4:	4b05      	ldr	r3, [pc, #20]	@ (80187bc <_vfiprintf_r+0x228>)
 80187a6:	a904      	add	r1, sp, #16
 80187a8:	4630      	mov	r0, r6
 80187aa:	f7ff fc63 	bl	8018074 <_printf_i>
 80187ae:	e7e4      	b.n	801877a <_vfiprintf_r+0x1e6>
 80187b0:	08019957 	.word	0x08019957
 80187b4:	08019961 	.word	0x08019961
 80187b8:	00000000 	.word	0x00000000
 80187bc:	08018571 	.word	0x08018571
 80187c0:	0801995d 	.word	0x0801995d

080187c4 <_raise_r>:
 80187c4:	291f      	cmp	r1, #31
 80187c6:	b538      	push	{r3, r4, r5, lr}
 80187c8:	4605      	mov	r5, r0
 80187ca:	460c      	mov	r4, r1
 80187cc:	d904      	bls.n	80187d8 <_raise_r+0x14>
 80187ce:	2316      	movs	r3, #22
 80187d0:	6003      	str	r3, [r0, #0]
 80187d2:	f04f 30ff 	mov.w	r0, #4294967295
 80187d6:	bd38      	pop	{r3, r4, r5, pc}
 80187d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80187da:	b112      	cbz	r2, 80187e2 <_raise_r+0x1e>
 80187dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80187e0:	b94b      	cbnz	r3, 80187f6 <_raise_r+0x32>
 80187e2:	4628      	mov	r0, r5
 80187e4:	f000 f830 	bl	8018848 <_getpid_r>
 80187e8:	4622      	mov	r2, r4
 80187ea:	4601      	mov	r1, r0
 80187ec:	4628      	mov	r0, r5
 80187ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187f2:	f000 b817 	b.w	8018824 <_kill_r>
 80187f6:	2b01      	cmp	r3, #1
 80187f8:	d00a      	beq.n	8018810 <_raise_r+0x4c>
 80187fa:	1c59      	adds	r1, r3, #1
 80187fc:	d103      	bne.n	8018806 <_raise_r+0x42>
 80187fe:	2316      	movs	r3, #22
 8018800:	6003      	str	r3, [r0, #0]
 8018802:	2001      	movs	r0, #1
 8018804:	e7e7      	b.n	80187d6 <_raise_r+0x12>
 8018806:	2100      	movs	r1, #0
 8018808:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801880c:	4620      	mov	r0, r4
 801880e:	4798      	blx	r3
 8018810:	2000      	movs	r0, #0
 8018812:	e7e0      	b.n	80187d6 <_raise_r+0x12>

08018814 <raise>:
 8018814:	4b02      	ldr	r3, [pc, #8]	@ (8018820 <raise+0xc>)
 8018816:	4601      	mov	r1, r0
 8018818:	6818      	ldr	r0, [r3, #0]
 801881a:	f7ff bfd3 	b.w	80187c4 <_raise_r>
 801881e:	bf00      	nop
 8018820:	20000eb0 	.word	0x20000eb0

08018824 <_kill_r>:
 8018824:	b538      	push	{r3, r4, r5, lr}
 8018826:	4d07      	ldr	r5, [pc, #28]	@ (8018844 <_kill_r+0x20>)
 8018828:	2300      	movs	r3, #0
 801882a:	4604      	mov	r4, r0
 801882c:	4608      	mov	r0, r1
 801882e:	4611      	mov	r1, r2
 8018830:	602b      	str	r3, [r5, #0]
 8018832:	f7e9 fd31 	bl	8002298 <_kill>
 8018836:	1c43      	adds	r3, r0, #1
 8018838:	d102      	bne.n	8018840 <_kill_r+0x1c>
 801883a:	682b      	ldr	r3, [r5, #0]
 801883c:	b103      	cbz	r3, 8018840 <_kill_r+0x1c>
 801883e:	6023      	str	r3, [r4, #0]
 8018840:	bd38      	pop	{r3, r4, r5, pc}
 8018842:	bf00      	nop
 8018844:	2000ed3c 	.word	0x2000ed3c

08018848 <_getpid_r>:
 8018848:	f7e9 bd1e 	b.w	8002288 <_getpid>

0801884c <_init>:
 801884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801884e:	bf00      	nop
 8018850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018852:	bc08      	pop	{r3}
 8018854:	469e      	mov	lr, r3
 8018856:	4770      	bx	lr

08018858 <_fini>:
 8018858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801885a:	bf00      	nop
 801885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801885e:	bc08      	pop	{r3}
 8018860:	469e      	mov	lr, r3
 8018862:	4770      	bx	lr
